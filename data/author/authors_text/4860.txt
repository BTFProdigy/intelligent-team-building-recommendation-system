Discovering Synonyms and Other Related Words
Krister LINDE?N and Jussi PIITULAINEN
Helsinki University, Department of General Linguistics,
P.O.Box 9 (Siltavuorenpenger 20 A),
FIN-00014 University of Helsinki,
Finland,
Krister.Linden@helsinki.fi, Jussi.Piitulainen@helsinki.fi
Abstract
Discovering synonyms and other related words
among the words in a document collection can
be seen as a clustering problem, where we ex-
pect the words in a cluster to be closely related
to one another. The intuition is that words oc-
curring in similar contexts tend to convey simi-
lar meaning.
We introduce a way to use translation dictio-
naries for several languages to evaluate the rate
of synonymy found in the word clusters. We also
apply the information radius to calculating sim-
ilarities between words using a full dependency
syntactic feature space, and introduce a method
for similarity recalculation during clustering as
a fast approximation of the high-dimensional
feature space. Finally, we show that 69-79% of
the words in the clusters we discover are useful
for thesaurus construction.
1 Introduction
Finding related words among the words in a
document collection can be seen as a clustering
problem, where we expect the words in a cluster
to be closely related to the same sense or to be
distributional substitutes or proxies for one an-
other. A number of language-technology tasks
can benefit from such word clusters, e.g. docu-
ment classification applications, language mod-
elling, resolving prepositional phrase attach-
ment, conjunction scope identification, word
sense disambiguation, word sense separation,
automatic thesaurus generation, information re-
trieval, anaphor resolution, text simplification,
topic identification, spelling correction (Weeds,
2003).
At present, synonyms and other related
words are available in manually constructed
ontologies, such as synonym dictionaries, the-
sauri, translation dictionaries and terminolo-
gies. Manually constructing ontologies is time-
consuming even for a single domain. On the
world-wide web there are documents on many
topics in different languages that could bene-
fit from having an ontology. For many of them
some degree of automation is eventually needed.
Humans often infer the meaning of an un-
known word from its context. Lets look at a less
well-known word like blopping. We look it up on
the Web. Some of the hits are: Blopping through
some of my faves, i.e. leafing through favourite
web links, A blop module emits strange elec-
tronic blopping noises, i.e. an electronic sound,
The volcano looked like something off the cover
of a Tolkien novel - perfectly conical, billowing
smoke and blopping out chunks of bright orange
lava, i.e. spluttering liquid. At first we find
all of them different and perhaps equally im-
portant. When looking at further links, we get
an intuition that the first instance is perhaps
a spurious creative metonym, whereas the two
others can be regarded as more or less conven-
tional and represent two distinct senses of blop-
ping. However, the meaning of all three seems
to be related to a sound, which is either clicking
or spluttering in nature.
The intuition is that words occurring in the
same or similar contexts tend to convey similar
meaning. This is known as the Distributional
Hypothesis (Harris, 1968). There are many ap-
proaches to computing semantic similarity be-
tween words based on their distribution in a cor-
pus. For a general overview of similarity mea-
sures, see (Manning and Schu?tze, 1999), and for
some recent and extensive overviews and evalu-
ations of similarity measures for i.a. automatic
thesaurus construction, see (Weeds, 2003; Cur-
ran, 2003; Lee, 2001; Dagan et al, 1999). They
show that the information radius and the ?-
skew distance are among the best for finding
distributional proxies for words.
If we assume that a word w is represented as a
sum of its contexts and that we can calculate the
similarities between such word representations,
we get a list Lw of words with quantifications
of how similar they are to w. Each similarity
CompuTerm 2004  -  3rd International Workshop on Computational Terminology 63
list Lw contains a mix of words related to the
senses of the word w.
If we wish to identify groups of synonyms
and other related words in a list of similarity-
rated words, we need to find clusters of simi-
lar words that are more similar to one another
than they are to other words. For a review of
general clustering algorithms, see (Jain et al,
1999) and for a recent evaluation of clustering
algorithms for finding word categories, see (Pan-
tel, 2003). (Pantel, 2003) shows that among the
standard algorithms the average-link and the k-
means clustering perform the best when trying
to discover meaningful word groups.
In order to evaluate the quality of the discov-
ered clusters three methods can be used, i.e.
measuring the internal coherence of clusters,
embedding the clusters in an application, or
evaluating against a manually generated answer
key. The first method is generally used by the
clustering algorithms themselves. The second
method is especially relevant for applications
that can deal with noisy clusters and avoids
the need to generate answer keys specific to the
word clustering task. The third method requires
a gold standard such as WordNet or some other
ontological resource. For an overview of eval-
uation methodologies for word clustering, see
(Weeds, 2003; Curran, 2003; Pantel, 2003).
The contribution of this article is four-fold.
The first contribution is to apply the informa-
tion radius in a full dependency syntactic fea-
ture space when calculating the similarities be-
tween words. Previously, only a restricted set
of dependency relations has been applied. The
second contribution is a similarity recalcula-
tion during clustering, which we introduce as a
fast approximation of high-dimensional feature
space and study its effect on some standard clus-
tering algorithms. The third contribution is a
simple but efficient way to evaluate the synonym
content of clusters by using translation dictio-
naries for several languages. Finally we show
that 69-79% of the words in the discovered clus-
ters are useful for thesaurus construction.
The rest of this article is organized as fol-
lows. Section 2 presents the corpus data and
the the feature extraction. Section 3 introduces
the discovery methodology. Section 4 presents
the evaluation methodology. In Section 5 we
present the experiments and evaluate the results
and their significance. Sections 6 and 7 contain
the discussion and conclusion, respectively.
2 Corpus Data
Our corpus consists of nouns in a sentence con-
text. We used all the nouns (in base form) that
occurred more than 100 times (in any inflected
form) in a corpus of Finnish newspaper text.
The corpus contained 245 000 documents total-
ing 48 million words of the Finnish newspaper
Helsingin sanomat from 1995?1997. Excluding
TV and radio listings, there were 196 000 doc-
uments with 42 million words. As corpus data
we selected all the 17 835 nouns occurring more
than 100 times comprising 14 million words of
the corpus.
3 Methodology
First we present the types of features we have
extracted from the corpus. Then we briefly de-
scribe the similarity measure which we use in
order to calculate the similarity between the
nouns in the corpus data. We also introduce
a method for creating derived similarity infor-
mation in a low-dimensional space. Finally we
present the clustering algorithms which we ap-
ply to the similarity information.
3.1 Feature extraction
The present experiments aim at discovering the
nouns that are most similar in meaning to a
given noun. The assumption is that words oc-
curring in similar syntactic contexts belong to
the same semantic categories (Harris, 1968). In
order to determine the similarity of the syntac-
tic contexts, we represent a word w as a proba-
bility distribution over a set of features a occur-
ring in the context of w: P (a|w). The context
features a are the major class words w? (nouns,
adjectives and verbs) with direct dependency
links to the word w. The context feature is the
word w? in base form labeled with the depen-
dency relation r. For example, the noun might
occur as an object of a verb and with an adjec-
tive modifier; both the verb and the adjective
including their dependency relations are context
features.
We used Connexor?s dependency parser FDG
for Finnish (Connexor, 2002) for parsing the
corpus. A sample of the parser output is shown
in Table 1. Tokens of each sentence are num-
bered starting from zero, each token is on its
own line, the token number first, the actual
word form second and the base form in the third
field. The fourth field links dependent tokens to
their heads using a grammatical label and the
CompuTerm 2004  -  3rd International Workshop on Computational Terminology64
# Token Base form Dependency Morphosyntax Gloss
0
1 Toisessa toinen &NH PRON SG INE In the other
2 esiteta?a?n esitta?a? main:>0 &+MV V PASS IND PRES they showed
3 videoita video obj:>2 &NH N PL PTV videos
4 ja ja cc:>3 &CC CC and
5 filmeja? filmi cc:>3 &NH N PL PTV films
6 . .
7 <s> <s> >6
Table 1: Sample output from the FDG parser for Finnish (with an English gloss added).
number of the head token. The fifth field con-
tains morphosyntactic information.
Two tokens, 3 and 5, are labeled as nouns N.
The noun video is a direct object to the verb
esitta?a?, and the noun filmi is coordinated
with video, so video gets two feature occur-
rences from this sentence:
esitta?a?-obj
cc-filmi.
Also, filmi gets
video-cc
as a feature occurrence. The pronoun toinen is
not a potential feature because of its word class
and because it is not linked. The coordinating
conjunction ja is not a potential feature because
of its word class.
The parsed corpus contained a to-
tal of 18 516 609 unambiguous noun oc-
currences, 69 314 noun/verb ambigui-
ties, 39 104 noun/adjective ambiguities,
20 847 noun/adverb ambiguities and 11 739
noun/numeral ambiguities, i.e. the amount
of remaining ambiguities was less than 0.8%.
When its analyses were underspecified with
more than one morphological analysis re-
maining, we took the relatively small risk
(p < 0.008) of committing to a noun analysis.
As a straightforward weighting of the context
features of a word, we used the number of occur-
rences with all the instances of the word. In our
choice of similarity formula, the representation
of a word w must be a probability distribution.
This is formally just a matter of normalizing the
weights of the features. Thus, a word w is rep-
resented as w : a 7? P (a|w), i.e. the conditional
probability distribution of all features a given
the word w, such that
?
a P (a|w) = 1.
Extracting features only from direct depen-
dency relations produces few feature occur-
rences for each instance of a noun. This keeps
the number of distinct features tolerable for all
but the most frequent words, and still retains
the most promising co-occurring words. As we
use only linear frequency weighting, very fre-
quent features tend to get more weight than
they should. Additionally, many rare features
could have been dropped without much loss of
information.
3.2 Similarity calculations
In (Weeds, 2003; Lee, 2001), i.a. the informa-
tion radius is applied to finding words that can
be used as proxies or substitutes for one an-
other. Their tests show that the information
radius is among the best for finding such words.
Here we briefly recapitulate the details of the
similarity estimate, which is rather an estimate
of dissimilarity.
Two words are distributionally similar to the
extent that they co-occur with the same words,
i.e., to the extent that they share features. We
define the dissimilarity of two words, p and q,
as
J(p, q) = (D(p?m) +D(q?m))/2, (1)
where D(p?m) =
?
a p(a)(log2 p(a)? log2 m(a))
and m(a) = (p(a) + q(a))/2 for any feature a.
This is the symmetrically weighted case of the
Jensen?Shannon divergence (Lin, 1991), also
known as the information radius or the mean di-
vergence to the mean (Dagan et al, 1999). For
complete identity, J(p, p) = 0. For completely
disjoint feature sets, J(p, q) = 1. The formula is
symmetric but does not satisfy the triangle in-
equality. For speed the estimate may be calcu-
lated from the shared features alone (Lee, 1999).
After calculating all the pairwise estimates,
we retained lists of the 100 most similar nouns
for each of the nouns in the corpus data. No
other data is used in the similarity calculations.
CompuTerm 2004  -  3rd International Workshop on Computational Terminology 65
3.3 Low-dimensional similarity
measures
Performing all the calculations in high-
dimensional feature space is time-consuming.
Here we introduce a method that can be used
as an approximation in low-dimensional feature
space based on the initial similarity estimates.
Assume that we have lists of the words that
are distributionally most similar to a given word
w. Each list Lw contains 100 words with an
estimate of their similarity to w. The words in
Lw represent a mix of the different meanings of
the word w. We create a similarity matrix disw
for these words such that disw(p, q) = J(p, q),
where p, q ? Lw. The similarity matrix disw is a
symmetric matrix of the dimensions 101 by 101,
as we also include the word w in the matrix.
A vector pw = disw(p, .) in the similarity
matrix disw is regarded as a projection of the
word p from a high dimensional feature space
onto a 101-dimensional space, i.e. p is projected
onto the 101 most important dimensions of w.
The new matrix is not orthogonal, so we ap-
ply single-value decomposition (SVD) disw =
T S D and use T to rotate the matrix so that the
first axis runs along the direction of the largest
variation among the word similarity estimates,
the second dimension runs along the direction
of the second largest variation and so forth. Af-
ter this rotation we can cluster the new vec-
tors pw,T = T t pw as low-dimensional represen-
tatives of the original high-dimensional feature
space. Often SVD is used for dimensionality re-
duction, but here we use its left singular vectors
only for rotating the matrix in order to achieve
noise reduction during clustering.
In the new low-dimensional vector repre-
sentation pw,T we apply the cosine distance
cosd(pw,T , qw,T ) = 1 ? cos(pw,T , qw,T ) in order
to calculate the similarity between words. As a
comparison we also tried the squared Euclidean
distance eucld(pw,T , qw,T ) = ?pw,T ? qw,T ?2 be-
tween words in the low-dimensional space. We
first normalize the vectors to unit length, which
effectively makes the squared Euclidean dis-
tance the same as two times the cosine distance:
?A?B?2 = ?A?2+?B?2?2?A? ?B? cos(A,B),
and when ?A? = 1 and ?B? = 1, we have
?A?B?2 = 2 (1? cos(A,B)).
3.4 Clustering
When we wish to discover the potential senses
of w by clustering, we are currently only inter-
ested in the 100 words in Lw with a similarity
estimate for w. The other words are deemed to
be too dissimilar to w to be relevant.
We cluster the words related to w with
standard algorithms such as complete-link and
average-link clustering (Manning and Schu?tze,
1999). Complete-link and average-link are hier-
archical clustering methods. We compare them
with flat clustering methods like k-means and
self-organizing maps (SOM) (Kohonen, 1997).
In k-means the clusters have no ordering. The
potential benefit of using SOM with a two-
dimensional display compared to k-means is
that related data samples get assigned into
nearby clusters as the SOM converges forming
cluster areas with related content.
We use the MATLAB implementation (The
MathWorks, Inc., 2002) of the algorithms. We
use both the original similarity measures in
disw and the distance measures cosd and eucld,
which we defined on the low-dimensional space.
In order to use methods like k-means and SOM,
we need to be able to calculate the similar-
ity between cluster centroids and words to be
clustered each time a centroid is updated. We
do this in the low-dimensional space pw,T using
cosd and eucld.
For SOM, the MATLAB implementation sup-
ported only the squared Euclidean distance. It
should be noted that the centroids are not nec-
essarily of unit length, so the squared Euclidean
distance is different from the cosine distance be-
tween the samples and the centroids, when the
centroids are based on more than one sample.
Our clustering setup currently produces hard
clusters, where each word w in Lw belong to
one cluster, as opposed to soft clustering, where
a word may belong to several clusters. We call
the cluster containing the word w itself the key
cluster.
4 Evaluation methodology
In order to evaluate the quality of the clusters
we need a gold standard. English and a num-
ber of other languages have resources such as
WordNet (Fellbaum, 1998; Vossen, 2001). For
Finnish there is no WordNet and there are no
large on-line synonym dictionaries available. In
fact, our experiment can be seen as a feasibility
study for automatically extracting information
that could be used for building a WordNet for
Finnish. The synsets of WordNet contain syn-
onyms, so we can evaluate the feasibility of the
clusters for WordNet development by rating the
amount of synonyms and related words in the
CompuTerm 2004  -  3rd International Workshop on Computational Terminology66
Language Target word Back translation
English deficit vaje, vajaus, alija?a?ma?; tilivajaus
shortfall vaje, alija?a?ma?
German Defizit vajaus, vaje, alija?a?ma?; kassavajaus, tappio; tilivajaus; puutos, puute
Unterbilanz alija?a?ma?, vajaus, vaje, kauppavaje
Fehlbetrag vajaus, alija?a?ma?, tappio, virhemaksu
French de?ficit alija?a?ma?, miinus, tilivajaus; vajaus, vaje; tappio
Table 2: Translations of the Finnish source word alija?a?ma? into English, German and French with
the back translations into Finnish. The shared back translations vaje, vajaus, alija?a?ma?, tilivajaus
are highlighted.
discovered clusters.
We note that when translating a word from
the source language the meaning of the word is
rendered in a target language. Such meaning
preserving relations are available in translation
dictionaries. If we translate into the target lan-
guage and back we end up i.a. with the syn-
onyms of the original source language word. In
addition, we may also get some spurious words
that are related to other meanings of the target
language words. If we assume that the other
words represent spurious cases of polysemy or
homonymy in the target language, we can re-
duce the impact of these spurious words by con-
sidering several target languages and for each
source word we use only the back-translated
source words that are common to all the tar-
get languages. We call such a group of words a
source word synonym set. For an example, see
Table 2.
In addition to the mechanical rating of the
synonym content we also manually classified the
words of some cluster samples into synonymy,
antonymy, hyperonymy, hyponymy, comple-
mentarity and other relations.
4.1 Evaluation data
In order to evaluate the clusters we picked a
random sample of 1759 nouns from the corpus
data, which represented approximately 10% of
the words we had clustered. For these words
we extracted the translations in the Finnish-
English, Finnish-German and Finnish-French
MOT dictionaries (Kielikone, 2004) available in
electronic form. We then translated each tar-
get language word back into Finnish using the
same resources. The dictionaries are based on
extensive hand-made dictionaries. The choice of
words may be slightly different in each of them,
which means that the words in common for all
the dictionaries after the back translation tend
to be only the core synonyms.
For evaluation purposes it would be unfair to
demand that the clustering generate words into
the clusters that are not in the corpus data, so
we also removed those back translations from
the source word synonym sets. Finally, only
synonym sets that had more than one word re-
maining were interesting, i.e. they contained
more than the original source word. There were
453 of the 1759 test words that met the quali-
fications. The average number of synonyms or
back translations for these test words was 3.53
including the source word itself.
For manual classification we used a sample of
50 key clusters from the whole set of clusters and
an additional sample of 50 key clusters from the
words qualifying for the mechanical evaluation.
4.2 Evaluation method
The mechanical evaluation was performed by
picking the key cluster produced by a cluster-
ing algorithm for each of the test words. The
key cluster was the cluster which contained the
original source word. The evaluation was a sim-
ple overlap calculation with the gold standard
generated from the translation dictionaries. By
counting the number of cluster words in a source
word synonym set and dividing by the synonym
set size, we get the recall R. By counting the
number of of source word synonyms in a clus-
ter and dividing by the cluster size, we get the
precision P .
The manual evaluation was performed inde-
pendently by the two authors and an external
linguist. We then discussed the result in order
to arrive at a common view.
5 Testing
First we did some initial experimenting with a
preliminary test sample in order to tune the pa-
rameters. We then clustered the corpus data
and evaluated the clusters against the gold stan-
dard, which gave an estimate of the synonym
content of the clusters. In addition, we per-
formed a manual evaluation of the result of the
CompuTerm 2004  -  3rd International Workshop on Computational Terminology 67
Clustering method Information radius Cosine distance Euclidean distance
R P R P R P
Average link 47 42 43 41 43 41
Complete link 47 40 42 39 42 38
K-means - - 43 36 42 36
SOM - - - - 41 35
Table 3: Cluster synonym content as average recall (R) and precision (P) in per cent (%) with a
standard deviation of 2% using different clustering methods and similarity measures.
Clustering method Cosine distance Cosine distance
w rotated feature space w/o rotation
R P R P
Average link 43 41 42 32
Complete link 42 39 41 33
Table 4: Cluster synonym content as average recall (R) and precision (P) in per cent (%) with a
standard deviation of 2% using a denoised and a noisy low-dimensional feature space.
best clustering algorithm.
5.1 Parameter selection
We clustered the words in Lw with the
complete-link and average-link clustering algo-
rithms using the disw similarity information.
The algorithms form hierarchical cluster trees
which need to be split into clusters at some
level. The inconsistency coefficient c character-
izes each link in a cluster tree by comparing its
length with the average size of other links at
the same level of the hierarchy. The higher the
value of this coefficient, the less similar the ob-
jects connected by the link (The MathWorks,
Inc., 2002). We selected the inconsistency coef-
ficient c = 1 by testing on a separate initial test
set different from the final evaluation data.
Using the cosine distance cosd(pw,T , qw,T )
as a similarity measure on the projected and
rotated representation of the words we clus-
tered with the above mentioned standard clus-
tering algorithms as well as with the k-
means algorithm. Using the euclidean dis-
tance eucld(pw,T , qw,T ) we also produced self-
organizing maps (SOM). For k-means and SOM
an initial number of clusters need to be selected.
We selected 35 clusters as this was close to the
average of what the other algorithms produced,
which we were comparing with. For k-means
we used the best out of 10 iterations and for
SOM we trained a 5 ? 7 hexagonal gridtop for
10 epochs. We also tried a considerably longer
training period for SOM but noticed only an
insignificant improvement on the cluster preci-
sion.
We also tried a number of other algorithms in
the MATLAB package, but they typically pro-
duced a result either containing only the word
itself or clusters containing more than one fifth
of the words in the key cluster. We deemed such
clustering results a failure on our data without
need for formal evaluation.
5.2 Experiments
After evaluating against the translation dictio-
nary gold standard, the result of the experiment
with complete-link, average-link, k-means and
SOM clustering using different similarity mea-
sures is shown in Table 3. The best recall with
the best precision was achieved with the average-
link clustering using the information radius on
the original feature space with 47 ? 2% recall
and and 42?2% precision. This produced clus-
ters with an average size of 6.05 words.
The difference between complete-link and
average-link clustering is not statistically sig-
nificant even if the average-link is slightly bet-
ter. The recall is statistically significantly better
in the original feature space than in the low-
dimensional space at the risk level p = 0.05,
whereas the precision remains roughly the same.
The average-link and complete-link clustering
have a statistically significantly better precision
than k-means and SOM, respectively, at the risk
level p < 0.05. We can also see that there is
hardly any difference in practice between the
Euclidean distance on normalized word vectors
and the cosine distance despite the fact that the
centroids were not normalized when using the
squared Euclidean distance with k-means.
As can be seen from Table 4 the rotation of
the low-dimensional feature space using SVD
has the effect of increasing precision statistically
significantly at the risk level p < 0.005, i.e. the
CompuTerm 2004  -  3rd International Workshop on Computational Terminology68
Word alija?a?ma?/deficit maatalous/agriculture tuki/aid
Synonymy vaje/deficiency avustus/subsidy
vajaus/shortfall apu/help
Antonymy ylija?a?ma?/surplus
Complementarity teollisuus/industry
vientiteollisuus/export industry
elintarviketeollisuus/food industry
Hyperonymy elinkeinoela?ma?/business
talousela?ma?/economy
Hyponymy rahoitus/financing
Table 5: Semantic relations of the cluster content of some sample words (English glosses added)
Content Dictionary All words
Relations sample sample
Synonymy 52% 38%
Antonymy 1% 1%
Complementarity 12% 34%
Hyperonymy 2% 4%
Hyponymy 1% 3%
Other 31% 21%
Total 100% 100%
Table 6: Manual evaluation of the percentage
of different semantic relations in the cluster con-
tent in two different samples of 50 clusters each.
clusters become less noisy.
We then performed a manual evaluation of
the output of the best clustering algorithm. We
used one cluster sample from the 453 clusters
qualifying for mechanical evaluation and one
sample from the whole set of 1753 clusters. The
results of the manual evaluation is shown in Ta-
ble 6. The evaluation shows that 69-79% of the
material in the clusters is relevant for construct-
ing a thesaurus.
The manual evaluation agrees with the me-
chanical evaluation, when the manual evalua-
tion found a synonym content of 52%, com-
pared to the minimum synonym content of
42% found by the mechanical evaluation. This
means that the clusters actually contain a
few more synonyms than those conservatively
agreed on by the three translation dictionaries.
If we evaluate the sample of key clusters
drawn from all the words in the test sample, we
get a synonym content of 38%. This figure is
rather low, but can be explained by the fact that
many of the words were compound nouns that
had no synonyms, which is why the translation
dictionaries either did not have them listed or
contained no additional source word synonyms
for them.
In Table 5, we see a few sample clusters whose
words we rated during manual evaluation.
6 Discussion
The feature selection and the feature weighting
radically influences the outcome of the results
of any machine learning task. This has been
noted in several evaluations of supervised ma-
chine learning algorithms (Voorhees et al, 1995;
Yarowsky and Florian, 2002; Linde?n, 2003).
During clustering, i.e. unsupervised learning,
the features extracted from the corpus are the
only information guiding the machine learning
in addition to the clustering principle, which
makes successful feature extraction, good fea-
ture weighting and accurate similarity measure-
ments crucial for the success of the clustering.
The clustering algorithms only exploit and pre-
serve the information provided by the features
and the similarity measure.
In (Weeds, 2003; Lee, 2001; Dagan et al,
1999), the information radius is applied to find
words that can be used as distributional prox-
ies for one another. They extract features only
from verb relations whereas we use the full range
of dependency syntactic relations. One inten-
tion of this study was to evaluate whether the
selected corpus and the features extracted pro-
vide a basis for forming linguistically meaning-
ful clusters that are useful in thesaurus con-
struction. The result showed that 69-79% of
the words found in the key clusters are useful,
which is very encouraging. It turned out that
the chosen features as such were useful, even if
the over-all result probably could benefit from
a more nuanced feature weighting scheme. We
do not yet fully understand how the initial fea-
ture weighting affects the outcome of the clus-
tering. Perhaps there are features that would
contribute to a more fine-grained clustering if
properly weighted.
Next we intend to identify more than a sin-
gle key cluster for each word, which poses addi-
CompuTerm 2004  -  3rd International Workshop on Computational Terminology 69
tional challenges for the evaluation. We also aim
at evaluating the generated clusters in an infor-
mation retrieval setting in order to see if they
improve performance despite the fact that they
contain more than synonyms. This would also
shed some light on exactly how much synonymy
we need to aim at in a practical application.
7 Conclusion
We have demonstrated that it is feasible to cal-
culate similarities between words using a full
dependency syntactic feature space. We have
also introduced similarity recalculation during
clustering as a fast approximation of the high-
dimensional feature space. In addition we intro-
duced a way to use translation dictionaries for
evaluating the rate of synonymy found in the
word clusters, which is useful for languages that
do not yet have publicly available thesaurus re-
sources like WordNet. Finally we have shown
that 69-79% of the words in the discovered clus-
ters are useful for thesaurus construction.
Acknowledgements
The second author made the Jensen-Shannon
similarity lists and the corpus processing de-
scribed in Sections 2, 3.1 and 3.2, and the
first author did the rest. We are grateful
to Lauri Carlson, Kimmo Koskenniemi and
Mathias Creutz for helpful comments on the
manuscript and to Juhani Jokinen for manually
evaluating the test samples.
References
Connexor. 2002. Machinese phrase tagger.
[http://www.connexor.com/].
James Richard Curran. 2003. From Distribu-
tional to Semantic Similarity. Ph.D. thesis,
Institute for Communicating and Collabora-
tive Systems, School of Informatics, Univer-
sity of Edinburgh.
Ido Dagan, Lillian Lee, and Fernando C. N.
Pereira. 1999. Similarity-based models of
word co-occurrence probabilities. Machine
Learning, 34(1?3):43?69.
Christiane Fellbaum. 1998. WordNet, An Elec-
tronic Lexical Database. The MIT Press.
Zellig Harris. 1968. Mathematical structures
of language. Interscience Tracts in Pure and
Applied Mathematics, 21(ix):230 pp.
A. K. Jain, M. N. Murty, and P. J. Flynn. 1999.
Data clustering: a review. ACM Computing
Surveys, 31(3):264?323.
Kielikone. 2004. Dictionary service
mot - dictionaries and terminologies.
[http://www.kielikone.fi/en/].
Teuvo Kohonen. 1997. Self-Organizing Maps
(Second Edition), volume 30 of Springer
Series in Information Sciences. Springer,
Berlin.
Lillian Lee. 1999. Measures of distributional
similarity. In 37th Annual Meeting of the
Association for Computational Linguistics,
pages 25?32.
Lillian Lee. 2001. On the effectiveness of the
skew divergence for statistical language anal-
ysis. In Artificial Intelligence and Statistics
2001, pages 65?72.
Jianhua Lin. 1991. Divergence measures based
on the Shannon entropy. IEEE Transactions
on Information Theory, 37(1):145?151, Jan-
uary.
Krister Linde?n. 2003. Word sense disam-
biguation with thessom. In Proceedings of
the WSOM?03 ? Intelligent Systems and In-
novational Computing, Kitakuyshu, Japan,
September.
Christopher D. Manning and Hinrich Schu?tze.
1999. Foundations of Statistical Natural Lan-
guage Processing. The MIT Press, Cam-
bridge, Massachusetts.
Patrick Andre? Pantel. 2003. Clustering by
Committee. Ph.D. thesis, University of Al-
berta, Edmonton, Alberta, Canada.
The MathWorks, Inc. 2002. Matlab with
statistics toolbox and neural network tool-
box. [http://www.mathworks.com/], June
18. Version 6.5.0.180913a Release 13.
Ellen M. Voorhees, Claudia Leacock, and Ge-
offrey Towell, 1995. Computational Learn-
ing Theory and Natural Language Learning
Systems 3: Selecting Good Models, chap-
ter Learning context to disambiguate word
senses, pages 279?305. MIT Press, Cam-
bridge.
Piek Vossen. 2001. Eurowordnet.
[http://www.hum.uva.nl/?ewn/].
Julie Elisabeth Weeds. 2003. Measures and Ap-
plications of Lexical Distributional Similarity.
Ph.D. thesis, University of Sussex, Septem-
ber.
David Yarowsky and Radu Florian. 2002. Eval-
uating sense disambiguation across diverse
parameter spaces. Natural Language Engi-
neering, 8(4):293?310, December.
CompuTerm 2004  -  3rd International Workshop on Computational Terminology70
Proceedings of the 14th Conference of the European Chapter of the Association for Computational Linguistics, pages 74?78,
Gothenburg, Sweden, April 26-30 2014.
c?2014 Association for Computational Linguistics
Accelerated Estimation of Conditional Random Fields using a
Pseudo-Likelihood-inspired Perceptron Variant
Teemu Ruokolainen
a
Miikka Silfverberg
b
Mikko Kurimo
a
Krister Lind?n
b
a
Department of Signal Processing and Acoustics, Aalto University, firstname.lastname@aalto.fi
b
Department of Modern Languages, University of Helsinki, firstname.lastname@helsinki.fi
Abstract
We discuss a simple estimation approach
for conditional random fields (CRFs). The
approach is derived heuristically by defin-
ing a variant of the classic perceptron al-
gorithm in spirit of pseudo-likelihood for
maximum likelihood estimation. The re-
sulting approximative algorithm has a lin-
ear time complexity in the size of the la-
bel set and contains a minimal amount of
tunable hyper-parameters. Consequently,
the algorithm is suitable for learning CRF-
based part-of-speech (POS) taggers in
presence of large POS label sets. We
present experiments on five languages.
Despite its heuristic nature, the algorithm
provides surprisingly competetive accura-
cies and running times against reference
methods.
1 Introduction
The conditional random field (CRF) model (Laf-
ferty et al., 2001) has been successfully applied
to several sequence labeling tasks in natural lan-
guage processing, including part-of-speech (POS)
tagging. In this work, we discuss accelerating the
CRF model estimation in presence of a large num-
ber of labels, say, hundreds or thousands. Large la-
bel sets occur in POS tagging of morphologically
rich languages (Erjavec, 2010; Haverinen et al.,
2013).
CRF training is most commonly associated with
the (conditional) maximum likelihood (ML) crite-
rion employed in the original work of Lafferty et
al. (2001). In this work, we focus on an alternative
training approach using the averaged perceptron
algorithm of Collins (2002). While yielding com-
petitive accuracy (Collins, 2002; Zhang and Clark,
2011), the perceptron algorithm avoids extensive
tuning of hyper-parameters and regularization re-
quired by the stochastic gradient descent algo-
rithm employed in ML estimation (Vishwanathan
et al., 2006). Additionally, while ML and percep-
tron training share an identical time complexity,
the perceptron is in practice faster due to sparser
parameter updates.
Despite its simplicity, running the perceptron al-
gorithm can be tedious in case the data contains
a large number of labels. Previously, this prob-
lem has been addressed using, for example, k-best
beam search (Collins and Roark, 2004; Zhang and
Clark, 2011; Huang et al., 2012) and paralleliza-
tion (McDonald et al., 2010). In this work, we
explore an alternative strategy, in which we mod-
ify the perceptron algorithm in spirit of the classic
pseudo-likelihood approximation for ML estima-
tion (Besag, 1975). The resulting novel algorithm
has linear complexity w.r.t. the label set size and
contains only a single hyper-parameter, namely,
the number of passes taken over the training data
set.
We evaluate the algorithm, referred to as the
pseudo-perceptron, empirically in POS tagging
on five languages. The results suggest that the
approach can yield competitive accuracy com-
pared to perceptron training accelerated using a
violation-fixed 1-best beam search (Collins and
Roark, 2004; Huang et al., 2012) which also pro-
vides a linear time complexity in label set size.
The rest of the paper is as follows. In Section 2,
we describe the pseudo-perceptron algorithm and
discuss related work. In Sections 3 and 4, we
describe our experiment setup and the results, re-
spectively. Conclusions on the work are presented
in Section 5.
2 Methods
2.1 Pseudo-Perceptron Algorithm
The (unnormalized) CRF model for input and
output sequences x = (x
1
, x
2
, . . . , x
|x|
) and
74
y = (y
1
, y
2
, . . . , y
|x|
), respectively, is written as
p (y |x;w) ? exp
(
w ??(y, x)
)
=
|x|
?
i=n
exp
(
w ? ?(y
i?n
, . . . , y
i
, x, i)
)
,
(1)
where w denotes the model parameter vector, ?
the vector-valued global feature extracting func-
tion, ? the vector-valued local feature extracting
function, and n the model order. We denote the
tag set as Y . The model parameters w are esti-
mated based on training data, and test instances
are decoded using the Viterbi search (Lafferty et
al., 2001).
Given the model definition (1), the param-
eters w can be estimated in a straightforward
manner using the structured perceptron algo-
rithm (Collins, 2002). The algorithm iterates
over the training set a single instance (x, y) at
a time and updates the parameters according
to the rule w
(i)
= w
(i?1)
+ ??(x, y, z), where
??(x, y, z) for the ith iteration is written as
??(x, y, z) = ?(x, y)??(x, z). The predic-
tion z is obtained as
z = arg max
u?Y(x)
w ??(x, u) (2)
by performing the Viterbi search over
Y(x) = Y ? ? ? ? ? Y , a product of |x| copies
of Y . In case the perceptron algorithm yields
a small number of incorrect predictions on the
training data set, the parameters generalize well
to test instances with a high probability (Collins,
2002).
The time complexity of the Viterbi search is
O(|x| ? |Y|
n+1
). Consequently, running the per-
ceptron algorithm can become tedious if the la-
bel set cardinality |Y| and/or the model order n
is large. In order to speed up learning, we define
a variant of the algorithm in the spirit of pseudo-
likelihood (PL) learning (Besag, 1975). In anal-
ogy to PL, the key idea of the pseudo-perceptron
(PP) algorithm is to obtain the required predictions
over single variables y
i
while fixing the remaining
variables to their true values. In other words, in-
stead of using the Viterbi search to find the z as in
(2), we find a z
?
for each position i ? 1..|x| as
z
?
= arg max
u?Y
?
i
(x)
w ??(x, u) , (3)
with Y
?
i
(x) = {y
1
}?? ? ??{y
i?1
}?Y?{y
i+1
}?
? ? ? ? {y
|x|
}. Subsequent to training, test instances
are decoded in a standard manner using the Viterbi
search.
The appeal of PP is that the time complexity
of search is reduced to O(|x| ? |Y|), i.e., linear
in the number of labels in the label set. On the
other hand, we no longer expect the obtained pa-
rameters to necessarily generalize well to test in-
stances.
1
Consequently, we consider PP a heuris-
tic estimation approach motivated by the rather
well-established success of PL (Kor
?
c and F?rstner,
2008; Sutton and McCallum, 2009).
2
Next, we study yet another heuristic pseudo-
variant of the perceptron algorithm referred to as
the piecewise-pseudo-perceptron (PW-PP). This
algorithm is analogous to the piecewise-pseudo-
likelihood (PW-PL) approximation presented by
Sutton and McCallum (2009). In this variant, the
original graph is first split into smaller, possibly
overlapping subgraphs (pieces). Subsequently, we
apply the PP approximation to the pieces. We em-
ploy the approach coined factor-as-piece by Sut-
ton and McCallum (2009), in which each piece
contains n + 1 consecutive variables, where n is
the CRF model order.
The PW-PP approach is motivated by the results
of Sutton and McCallum (2009) who found PW-
PL to increase stability w.r.t. accuracy compared
to plain PL across tasks. Note that the piecewise
approximation in itself is not interesting in chain-
structured CRFs, as it results in same time com-
plexity as standard estimation. Meanwhile, the
PW-PP algorithm has same time complexity as PP.
2.2 Related work
Previously, impractical running times of percep-
tron learning have been addressed most notably
using the k-best beam search method (Collins and
Roark, 2004; Zhang and Clark, 2011; Huang et
al., 2012). Here, we consider the ?greedy? 1-best
beam search variant most relevant as it shares the
time complexity of the pseudo search. Therefore,
in the experimental section of this work, we com-
pare the PP and 1-best beam search.
We are aware of at least two other learning ap-
proaches inspired by PL, namely, the pseudo-max
and piecewise algorithms of Sontag et al. (2010)
and Alahari et al. (2010), respectively. Com-
pared to these approaches, the PP algorithm pro-
vides a simpler estimation tool as it avoids the
1
We leave formal treatment to future work.
2
Meanwhile, note that pseudo-likelihood is a consistent
estimator (Gidas, 1988; Hyv?rinen, 2006).
75
hyper-parameters involved in the stochastic gradi-
ent descent algorithms as well as the regularization
and margin functions inherent to the approaches of
Alahari et al. (2010) and Sontag et al. (2010). On
the other hand, Sontag et al. (2010) show that the
pseudo-max approach achieves consistency given
certain assumptions on the data generating func-
tion. Meanwhile, as discussed in previous section,
we consider PP a heuristic and do not provide any
generalization guarantees. To our understanding,
Alahari et al. (2010) do not provide generalization
guarantees for their algorithm.
3 Experimental Setup
3.1 Data
For a quick overview of the data sets, see Table 1.
Penn Treebank. The first data set we consider
is the classic Penn Treebank. The complete tree-
bank is divided into 25 sections of newswire text
extracted from the Wall Street Journal. We split
the data into training, development, and test sets
using the sections 0-18, 19-21, and 22-24, accord-
ing to the standardly applied division introduced
by Collins (2002).
Multext-East. The second data we consider is
the multilingual Multext-East (Erjavec, 2010) cor-
pus. The corpus contains the novel 1984 by
George Orwell. From the available seven lan-
guages, we utilize the Czech, Estonian and Ro-
manian sections. Since the data does not have a
standard division to training and test sets, we as-
sign the 9th and 10th from each 10 consecutive
sentences to the development and test sets, respec-
tively. The remaining sentences are assigned to the
training sets.
Turku Dependency Treebank. The third data
we consider is the Finnish Turku Dependency
Treebank (Haverinen et al., 2013). The treebank
contains text from 10 different domains. We use
the same data split strategy as for Multext East.
3.2 Reference Methods
We compare the PP and PW-PP algorithms with
perceptron learning accelerated using 1-best beam
search modified using the early update rule
(Huang et al., 2012). While Huang et al. (2012)
experimented with several violation-fixing meth-
ods (early, latest, maximum, hybrid), they ap-
peared to reach termination at the same rate in
lang. train. dev. test tags train. tags
eng 38,219 5,527 5,462 45 45
rom 5,216 652 652 405 391
est 5,183 648 647 413 408
cze 5,402 675 675 955 908
fin 5,043 630 630 2,355 2,141
Table 1: Overview on data. The training (train.),
development (dev.) and test set sizes are given in
sentences. The columns titled tags and train. tags
correspond to total number of tags in the data set
and number of tags in the training set, respectively.
POS tagging. Our preliminary experiments using
the latest violation updates supported this. Conse-
quently, we employ the early updates.
We also provide results using the CRFsuite
toolkit (Okazaki, 2007), which implements a 1st-
order CRF model. To best of our knowledge,
CRFsuite is currently the fastest freely available
CRF implementation.
3
In addition to the averaged
perceptron algorithm (Collins, 2002), the toolkit
implements several training procedures (Nocedal,
1980; Crammer et al., 2006; Andrew and Gao,
2007; Mejer and Crammer, 2010; Shalev-Shwartz
et al., 2011). We run CRFsuite using these algo-
rithms employing their default parameters and the
feature extraction scheme and stopping criterion
described in Section 3.3. We then report results
provided by the most accurate algorithm on each
language.
3.3 Details on CRF Training and Decoding
While the methods discussed in this work are ap-
plicable for nth-order CRFs, we employ 1st-order
CRFs in order to avoid overfitting the relatively
small training sets.
We employ a simple feature set including word
forms at position t? 2, . . . , t+ 2, suffixes of word
at position t up to four letters, and three ortho-
graphic features indicating if the word at position
t contains a hyphen, capital letter, or a digit.
All the perceptron variants (PP, PW-PP, 1-best
beam search) initialize the model parameters with
zero vectors and process the training instances in
the order they appear in the corpus. At the end
of each pass, we apply the CRFs using the latest
averaged parameters (Collins, 2002) to the devel-
opment set. We assume the algorithms have con-
verged when the model accuracy on development
3
See benchmark results at http://www.chokkan.
org/software/crfsuite/benchmark.html
76
has not increased during last three iterations. Af-
ter termination, we apply the averaged parameters
yielding highest performance on the development
set to test instances.
Test and development instances are decoded us-
ing a combination of Viterbi search and the tag
dictionary approach of Ratnaparkhi (1996). In this
approach, candidate tags for known word forms
are limited to those observed in the training data.
Meanwhile, word forms that were unseen during
training consider the full label set.
3.4 Software and Hardware
The experiments are run on a standard desktop
computer. We use our own C++-based implemen-
tation of the methods discussed in Section 2.
4 Results
The obtained training times and test set accuracies
(measured using accuracy and out-of-vocabulary
(OOV) accuracy) are presented in Table 2. The
training CPU times include the time (in minutes)
consumed by running the perceptron algorithm
variants as well as evaluation of the development
set accuracy. The column labeled it. corresponds
to the number of passes over training set made by
the algorithms before termination.
We summarize the results as follows. First, PW-
PP provided higher accuracies compared to PP on
Romanian, Czech, and Finnish. The differences
were statistically significant
4
on Czech. Second,
while yielding similar running times compared
to 1-best beam search, PW-PP provided higher
accuracies on all languages apart from Finnish.
The differences were significant on Estonian and
Czech. Third, while fastest on the Penn Treebank,
the CRFsuite toolkit became substantially slower
compared to PW-PP when the number of labels
were increased (see Czech and Finnish). The dif-
ferences in accuracies between the best perform-
ing CRFsuite algorithm and PP and PW-PP were
significant on Czech.
5 Conclusions
We presented a heuristic perceptron variant for
estimation of CRFs in the spirit of the classic
4
We establish significance (with confidence level 0.95)
using the standard 1-sided Wilcoxon signed-rank test per-
formed on 10 randomly divided, non-overlapping subsets of
the complete test sets.
method it. time (min) acc. OOV
English
PP 9 6 96.99 87.97
PW-PP 10 7 96.98 88.11
1-best beam 17 8 96.91 88.33
Pas.-Agg. 9 1 97.01 88.68
Romanian
PP 9 8 96.81 83.66
PW-PP 8 7 96.91 84.38
1-best beam 17 10 96.88 85.32
Pas.-Agg. 13 9 97.06 84.69
Estonian
PP 10 8 93.39 78.10
PW-PP 8 6 93.35 78.66
1-best beam 23 15 92.95 75.65
Pas.-Agg. 15 12 93.27 77.63
Czech
PP 11 26 89.37 70.67
PW-PP 16 41 89.84 72.52
1-best beam 14 19 88.95 70.90
Pegasos 15 341 90.42 72.59
Finnish
PP 11 58 87.09 58.58
PW-PP 11 56 87.16 58.50
1-best beam 21 94 87.38 59.29
Pas.-Agg. 16 693 87.17 57.58
Table 2: Results. We report CRFsuite results pro-
vided by most accurate algorithm on each lan-
guage: the Pas.-Agg. and Pegasos refer to the al-
gorithms of Crammer et al. (2006) and Shalev-
Shwartz et al. (2011), respectively.
pseudo-likelihood estimator. The resulting ap-
proximative algorithm has a linear time complex-
ity in the label set cardinality and contains only
a single hyper-parameter, namely, the number of
passes taken over the training data set. We eval-
uated the algorithm in POS tagging on five lan-
guages. Despite its heuristic nature, the algo-
rithm provided competetive accuracies and run-
ning times against reference methods.
Acknowledgements
This work was financially supported by Langnet
(Finnish doctoral programme in language stud-
ies) and the Academy of Finland under the grant
no 251170 (Finnish Centre of Excellence Pro-
gram (2012-2017)). We would like to thank Dr.
Onur Dikmen for the helpful discussions during
the work.
77
References
Karteek Alahari, Chris Russell, and Philip H.S. Torr.
2010. Efficient piecewise learning for conditional
random fields. In Computer Vision and Pattern
Recognition (CVPR), 2010 IEEE Conference on,
pages 895?901.
Galen Andrew and Jianfeng Gao. 2007. Scalable train-
ing of L
1
-regularized log-linear models. In Proceed-
ings of the 24th international conference on Ma-
chine learning, pages 33?40.
Julian Besag. 1975. Statistical analysis of non-lattice
data. The statistician, pages 179?195.
Michael Collins and Brian Roark. 2004. Incremental
parsing with the perceptron algorithm. In Proceed-
ings of the 42nd Annual Meeting on Association for
Computational Linguistics, page 111.
Michael Collins. 2002. Discriminative training meth-
ods for hidden Markov models: Theory and exper-
iments with perceptron algorithms. In Proceedings
of the ACL-02 conference on Empirical methods in
natural language processing, volume 10, pages 1?8.
Koby Crammer, Ofer Dekel, Joseph Keshet, Shai
Shalev-Shwartz, and Yoram Singer. 2006. Online
passive-aggressive algorithms. The Journal of Ma-
chine Learning Research, 7:551?585.
Toma? Erjavec. 2010. Multext-east version 4: Multi-
lingual morphosyntactic specifications, lexicons and
corpora. In Proceedings of the Seventh International
Conference on Language Resources and Evaluation
(LREC?10).
Basilis Gidas. 1988. Consistency of maximum like-
lihood and pseudo-likelihood estimators for Gibbs
distributions. In Stochastic differential systems,
stochastic control theory and applications, pages
129?145.
Katri Haverinen, Jenna Nyblom, Timo Viljanen,
Veronika Laippala, Samuel Kohonen, Anna Missil?,
Stina Ojala, Tapio Salakoski, and Filip Ginter. 2013.
Building the essential resources for Finnish: the
Turku Dependency Treebank. Language Resources
and Evaluation.
Liang Huang, Suphan Fayong, and Yang Guo. 2012.
Structured perceptron with inexact search. In Pro-
ceedings of the 2012 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies, pages
142?151.
Aapo Hyv?rinen. 2006. Consistency of pseudolike-
lihood estimation of fully visible Boltzmann ma-
chines. Neural Computation, 18(10):2283?2292.
Filip Kor
?
c and Wolfgang F?rstner. 2008. Approximate
parameter learning in conditional random fields: An
empirical investigation. Pattern Recognition, pages
11?20.
John Lafferty, Andrew McCallum, and Fernando
Pereira. 2001. Conditional random fields: Prob-
abilistic models for segmenting and labeling se-
quence data. In Proceedings of the Eighteenth In-
ternational Conference on Machine Learning, pages
282?289.
Ryan McDonald, Keith Hall, and Gideon Mann. 2010.
Distributed training strategies for the structured per-
ceptron. In Human Language Technologies: The
2010 Annual Conference of the North American
Chapter of the Association for Computational Lin-
guistics, pages 456?464.
Avihai Mejer and Koby Crammer. 2010. Confidence
in structured-prediction using confidence-weighted
models. In Proceedings of the 2010 conference on
empirical methods in natural language processing,
pages 971?981.
Jorge Nocedal. 1980. Updating quasi-Newton matri-
ces with limited storage. Mathematics of computa-
tion, 35(151):773?782.
Naoaki Okazaki. 2007. CRFsuite: a fast implemen-
tation of conditional random fields (CRFs). URL
http://www.chokkan.org/software/crfsuite.
Adwait Ratnaparkhi. 1996. A maximum entropy
model for part-of-speech tagging. In Proceedings
of the conference on empirical methods in natural
language processing, volume 1, pages 133?142.
Shai Shalev-Shwartz, Yoram Singer, Nathan Srebro,
and Andrew Cotter. 2011. Pegasos: Primal esti-
mated sub-gradient solver for SVM. Mathematical
Programming, 127(1):3?30.
David Sontag, Ofer Meshi, Tommi Jaakkola, and Amir
Globerson. 2010. More data means less inference:
A pseudo-max approach to structured learning. In
Advances in Neural Information Processing Systems
23, pages 2181?2189.
Charles Sutton and Andrew McCallum. 2009. Piece-
wise training for structured prediction. Machine
learning, 77(2):165?194.
S.V.N. Vishwanathan, Nicol Schraudolph, Mark
Schmidt, and Kevin Murphy. 2006. Accelerated
training of conditional random fields with stochas-
tic gradient methods. In Proceedings of the 23rd in-
ternational conference on Machine learning, pages
969?976.
Yue Zhang and Stephen Clark. 2011. Syntactic pro-
cessing using the generalized perceptron and beam
search. Computational Linguistics, 37(1):105?151.
78
