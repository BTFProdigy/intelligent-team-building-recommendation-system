BioNLP 2007: Biological, translational, and clinical language processing, pages 163?170,
Prague, June 2007. c?2007 Association for Computational Linguistics
BaseNPs that contain gene names: domain specicity and genericity
Ian Lewin
Computer Laboratory
University of Cambridge
15 JJ Thomson Avenue
Cambridge CB3 0FD, UK
ian.lewin@cl.cam.ac.uk
Abstract
The names of named entities very often oc-
cur as constituents of larger noun phrases
which denote different types of entity. Un-
derstanding the structure of the embedding
phrase can be an enormously beneficial first
step to enhancing whatever processing is in-
tended to follow the named entity recogni-
tion in the first place. In this paper, we
examine the integration of general purpose
linguistic processors together with domain
specific named entity recognition in order to
carry out the task of baseNP detection. We
report a best F-score of 87.17% on this task.
We also report an inter-annotator agreement
score of 98.8 Kappa on the task of baseNP
annotation of a new data set.
1 Introduction
Base noun phrases (baseNPs), broadly ?the initial
portions of non-recursive noun phrases up to the
head? (Ramshaw and Marcus, 1995), are valuable
pieces of linguistic structure which minimally ex-
tend beyond the scope of named entities. In this
paper, we explore the integration of different tech-
niques for detecting baseNPs that contain a named
entity, using a domain-trained named entity recog-
nition (NER) system but in combination with other
linguistic components that are ?general purpose?.
The rationale is simply that domain-trained NER is
clearly a necessity for the task; but one might expect
to be able to secure good coverage at the higher syn-
tactic level by intelligent integration of general pur-
pose syntactic processing without having to undergo
a further round of domain specific annotation and
training. We present a number of experiments ex-
ploring different ways of integrating NER into gen-
eral purpose linguistic processing. Of course, good
results can also be used subsequently to help reduce
the effort required in data annotation for use in dedi-
cated domain-specific machine learning systems for
baseNP detection.
First, however, we motivate the task itself. Enor-
mous effort has been directed in recent years to the
automatic tagging of named entities in bio-medical
texts and with considerable success. For example,
iHOP reports gene name precision as being between
87% and 99% (depending on the organism) (Hoff-
man and Valencia, 2004). Named entities are of
course only sometimes identical in scope with noun
phrases. Often they are embedded within highly
complex noun phrases. Nevertheless, the simple de-
tection of a name by itself can be valuable. This
depends in part on the intended application. Thus,
iHOP uses gene and protein names to hyperlink
sentences from Medline and this then supports a
browser over those sentences with additional navi-
gation facilities. Clicking on Dpp whilst viewing a
page of information about hedgehog leads to a page
of information about Dpp in which sentences that
relate both Dpp and hedgehog are prioritized.
One of the application advantages of iHOP is that
the discovered gene names are presented to the user
in their original context and this enables users to
compensate for problems in reliability and/or con-
textual relevance. In many Information Extraction
(IE) systems, relations between entities are detected
and extracted into a table. In this case, since the im-
163
mediate surrounding context of the gene name may
be simply lost, the reliability of the original identifi-
cation becomes much more important. In section 2
below, we explain our own application background
in which our objective is to increase the productiv-
ity of human curators whose task is to read partic-
ular scientific papers and fill in fields of a database
of information about genes. Directing curators? at-
tention to sentences which contain gene names is
clearly one step. Curators additionally report that
an index into the paper that uses the gene name and
its embedding baseNP is even more valuable (ref-
erence omitted for anonymity). This often enables
them to predict the possible relevance of the name
occurrence to the curation task and thus begin or-
dering their exploration of the paper. Consequently,
our technical goal of baseNP detection is linked di-
rectly to a valuable application task. We also use the
baseNP identification in order to type the occurrence
semantically and use this information in an anaphora
resolution process (Gasperin, 2006).
The detection of baseNPs that contain a named
entity is a super-task of NER, as well as a sub-task
of NP-chunking. Given that NER is clearly a domain
specific task, it is an interesting question what per-
formance levels are achievable using domain trained
NER in combination with general purpose linguistic
processing modules.
There is a further motivation for the task. The dis-
tinction between a named entity and an embedding
noun phrase is one with critical importance even for
the sub-task of NER. Dingare et al(2005) conclude,
from their analysis of a multi-feature maximum en-
tropy NER module, that increases in performance of
biomedical NER systems will depend as much upon
qualitative improvements in annotated data as in the
technology underlying the systems. The claim is that
quality problems are partly due to confusion over
what lies in the scope of a named entity and what
lies at higher syntactic levels. Current biomedical
annotations are often inconsistent partly because an-
notators are left with little guidance on how to han-
dle complexities in noun phrases, especially with re-
spect to premodifiers and conjunctions. For exam-
ple, which premodifiers are part of the named entity
and which are ?merely? part of the embedding noun
phrase? Is human part of the named entity in the
regulation of human interleukin-2 gene expression,
Figure 1: Paper Browser showing baseNP index
or not?
By focussing attention instead on the baseNPs
that contain a named entity, one can clearly sidestep
this issue to some extent. After all, increasing the
accuracy of an NER module with respect to premod-
ifier inclusion is unlikely to affect the overall accu-
racy of detection of the embedding noun phrases.
2 FlyBase curation
The intended application for our work is a soft-
ware environment for FlyBase curators that includes
an NLP-enhanced Browser for Scientific Papers.
FlyBase is the world?s leading genomics database
for the fruitfly Drosophila (melanogaster and other
species) (Crosby et al, 2007). FlyBase is largely
updated through a paper-by-paper methodology in
which research articles likely to contain informa-
tion relevant for the FlyBase database are first put
in a priority list. Subsequently, these are read by
skilled geneticists (at post-doctoral level) who dis-
til gene related information into the database itself.
Although this is a paradigm example of IE, our ob-
jective is not to fully automate this task itself, sim-
ply because the expected accuracy rates are unlikely
to be high enough to provide a genuinely useful
tool. Rather, our task is to enable curators to ex-
plore the gene related sections of papers more effi-
ciently. The Browser currently highlights potential
164
items of interest for curators and provides novel in-
dexing and navigation possibilities. It is in this con-
text that the identification of baseNPs that contain
gene names is carried out. An individual sentence
that contains a gene name is very often not enough,
considered in isolation, for curators to fill in a re-
quired database field. Information often needs to
be gathered from across a paragraph and even the
whole paper. So extraction of sentences is not an at-
tractive option. Equally, a whole sentence is unfeasi-
bly large to serve simply as an indexing term into the
paper. Noun phrases provide more information than
simply gene names, but post-modification can also
lead to extremely long terms. BaseNPs are there-
fore a useful compromise, these being short enough
to display whole in a window (i.e. no scrolling
is required) and often bearing enough information
for the user to understand much more of the con-
text in which the gene name itself appears. Fur-
thermore, the baseNP is both a natural ?unit? of in-
formation (whereas a window of n tokens around a
gene name is not) and it supports further processing.
BaseNPs are typed according to whether they denote
genes or various gene products and linked together
in anaphoric chains.
In our navigation panel for the Browser, the
baseNPs are sorted according to the gene name that
they contain (and then by order in which they appear
within the paper), and hyperlinked to their occur-
rence in the paper. This enables users to explore pa-
pers gene-by-gene but also, when considering a par-
ticular gene, to understand more about the reference
to the gene - for example whether gene products or
promoters are being referenced. Figure 1 contains
an example screenshot.
3 Scope of the Data
Complex nominals have long been held to be a com-
mon feature in scientific text. The corpus of Vlachos
and Gasperin (2006) contains 80 abstracts (600 sen-
tences) annotated with gene names. In this data-set,
noun phrases that contain gene names (excluding
post-modifiers) of 3 words or more comprise more
than 40% of the data and exhibit primarily: strings of
premodifiers tudor mutant females, zygotic Dnop5
expression; genitives: Robo ?s cytoplasmic domain,
the rdgB protein ?s amino terminal 281 residues; co-
ordination the copia and mdg-1 elements and par-
enthetical apposition the female-specic gene Sex
lethal ( Sxl ), and the SuUR (suppressor of under-
replication) gene. Only 41% of the baseNPs con-
taining a gene name consist of one token only. 16%
have two tokens. The two token baseNPs include
large numbers of combinations of gene names with
more general words such as Ras activity, vnd mu-
tants, Xiro expression, IAP localization and vasa
protein. In general, the gene name appears in mod-
ifier position although species modifiers are com-
mon, such as Drosophila Tsg, and there are other
possibilities: truncated p85.
Our intention is to categorize this data using the
concept of ?baseNP? and build effective computa-
tional models for recognizing instances. Although
baseNP is a reasonably stable linguistic concept,
its application to a new data-set is not completely
straightforward. Ramshaw and Marcus (1995) state
that a baseNP aims ?to identify essentially the ini-
tial portions of nonrecursive noun phrases up to the
head, including determiners but not including post-
modifying prepositional phrases or clauses?. How-
ever, work on baseNPs has essentially always pro-
ceeded via algorithmic extraction from fully parsed
corpora such as the Penn Treebank. BaseNPs have
therefore depended on particular properties of the
annotation framework and this leads to certain as-
pects of the class appearing unnatural.
The clearest case is single element conjunction,
which Penn Treebank policy dictates is annotated
at word-level with a flat structure like this [lpl and
xsl] (brackets indicate baseNP boundaries). As soon
as one of the elements is multi-word however, then
separate structures are to be identified [lpl] and [the
sxl gene]. The dependency on numbers of tokens
becomes clearly problematic in the bio-medical do-
main. Quite different structures will be identified
for lpl and fasciclin, lpl and fasciclin 1 and possibly
lpl and fasciclin-1, depending on how tokenization
treats hyphens. Furthermore, nothing here depends
on the motivating idea of ?initial segments up to the
head?. In order to provide a more natural class, our
guidelines are that unless there is a shared modifier
to account for (as in [embryonic lgl and sxg]), all co-
ordinations are split into separate baseNPs. All other
cases of coordination follow the standard guidelines
of the Penn Treebank.
165
A second difficult case is possessives. BaseNP ex-
traction algorithms generally split possessives like
this: [fra] [?s ectodomain], corresponding (some-
what) to an intuition that there are two NPs whilst
assigning each word to some baseNP chunk and
not introducing recursiveness. This policy however
causes a sharp division between this case and the fra
ectodomain following the Penn Treebank bracketing
guideline that nominal modifiers are never labelled.
Since our interest is ?the smallest larger NP con-
taining a gene name?, we find it much more natu-
ral to treat fra?s as just another modifier of the head
ectodomain. Whether it recursively contains a sin-
gle word NP fra (or just a single word NNP) is again
not something that is motivated by the idea of ?ini-
tial segments up to the head?. Similarly, we mark
one baseNP in the rdgB protein?s amino terminal
281 residues, viz. the rdgB protein.
Apposition, as in Sex lethal ( Sxl ) and the gene sex
lethal , is a further interesting case. In the first case,
?Sex lethal? and ?Sxl? stand in apposition. Both are
gene names. The former is the head. In the sec-
ond, ?gene? is the head and ?sex lethal? is a name
that stands in apposition. In each case, we have a
head and post-modifiers which are neither clausal
nor prepositional. It is unclear whether the rubric
?clausal or prepositional? in Ramshaw and Marcus?
statement of intent is merely illustrative or defini-
tive. On the grounds that a sharp division between
the non-parenthetical case the gene sex lethal and the
pre-modifier the sex lethal gene is unnatural, our in-
tuition is that the baseNP does cover all 4 tokens in
this case. All (post-head) parentheticals are however
to be treated more like optional adjuncts and there-
fore not included with the head to which they attach.
In order to verify the reliability of baseNP an-
notation, two computational linguists (re)annotated
the 600 sentences (6300 tokens) of Vlachos and
Gasperin (2006) with baseNPs and heads using the
published guidelines. We added material concern-
ing head annotation. Vlachos and Gasperin did
not quote agreement scores for baseNP annotation.
Their interest was directed at gene name agreement
between a linguist and a biologist. Our 2-person
inter-annotator Kappa scores were 0.953 and 0.988
on head and baseNP annotation respectively repre-
senting substantial agreement.1 .
4 Methodology
A reasonable and simple baseline system for ex-
tracting baseNPs that contain a gene name is to use
an off-the-shelf baseNP extractor and simply filter
the results for those that contain a gene name. To
simplify analysis of results, except where otherwise
noted this filter and subsequent uses of NER are
based on a gold standard gene name annotation. In
this way, the contributions of different components
can be compared without factoring in relative errors
of NER. Naturally, in the live system, an automated
NER process is used (Vlachos and Gasperin, 2006).
For the baseline we chose an implementation of the
Ramshaw and Marcus baseNP detector distributed
with GATE2 pipelined with the Stanford maximum
entropy part of speech tagger 3. The Stanford tag-
ger is a state of the art tagger incorporating a num-
ber of features including use of tag contexts, lexical
features, a sophisticated smoothing technique, and
features for unknown words (including 4-gram pre-
fixes and suffixes). Both components of the base-
line systems utilize the 48 tag Penn Treebank tagset.
Results however showed that poor performance of
the part of speech tagger could have a disastrous ef-
fect on baseNP detection. A simple extension of the
baseline is to insert a module in between POS tag-
ging and NP detection. This module revises the POS
tags from the tagger in the light of NER results, es-
sentially updating the tags of tokens that are part of
named entities. This is essentially a simple version
of the strategy mooted by Toutanova at el (2003) that
the traditional order of NER and tagging be reversed.
It is simpler because, in a maximum entropy frame-
work, NER results can function as one extra fea-
ture amongst many in POS detection; whereas here
it functions merely as an override. Retraining the
tagger did not form part of our current exploration.
1In fact, although the experiment can be considered a classi-
fication of 6300 tokens in IOB format, the counting of classifi-
cations is not completely straightforward. The task was ?anno-
tate the baseNP surrounding each gene name? rather than ?an-
notate each token?. In principle, each token is examined; in
practice a variable number is examined. If we count all tokens
classified into NPs plus one token of context either side, then
both annotators annotated over 930 tokens.
2http://www.gate.ac.uk
3http://nlp.stanford.edu/software/tagger.shtml
166
We adopted a similar strategy with the domain in-
dependent full parsing system RASP (Briscoe et al,
2006). RASP includes a simple 1st order HMM POS
tagger using 149 of the CLAWS-2 tagset. The tagger
is trained on the manually corrected subsets of the
(general English) Susanne, LOB and BNC corpora.
The output of the tagger is a distribution of possi-
ble tags per token (all tags that are at least 1/50 as
probable as the top tag; but only the top tag if more
than 90% probable). The tagger also includes an un-
known word handling module for guessing the pos-
sible tags of unknown words. The RASP parser is
a probabilistic LALR(1) parser over the CLAWS-2
tags, or, more precisely, a unification grammar for-
malism whose lexical categories are feature based
descriptions of those tags. The parser has no access
to lexical information other than that made available
by the part of speech tags. Although the output of
RASP is a full parse (or a sequence of fragments, if
no connected parse can be found) and baseNPs may
not be constituents of NPs, baseNPs can be extracted
algorithmically from the full parse.
Some more interesting pre-parsing integration
strategies are available with RASP because it does
not demand a deterministic choice of tag for each
word. We experimented with both a deterministic
re-write strategy (as for the baseline system) and
with various degrees of interpolation; for example,
adjusting the probability distribution over tags so
that proper noun tags receive 50% of the probabil-
ity mass if the token is recognized by NER, and
the other tags receive the remaining 50% in direct
proportion to the amount they would receive from
the POS tagger alone. In this set-up, the NER re-
sults need not function simply as an override, but
equally they do not function simply as a feature for
use in part of speech tagging. Rather, the parser may
be able to select a best parse which makes use of
a sequence of tags which is not itself favoured by
the tagger alone. This allows some influence to the
grammatical context surrounding the gene name and
may also permit tags within phrasal names such as
transforming growth factor to propagate.
RASP is also a non-deterministic parser and con-
sequently a further possible integration strategy is
to examine the output n-best list of parses to find
baseNPs, rather than relying on simply the 1-best
output. The n-best parses are already scored accord-
ing to a probabilistic model trained on general text.
Our strategy is to re-score them using the additional
knowledge source of domain specific NER. We ex-
plored a number of re-scoring hypotheses. First, a
cut-off of 20 on n-best lists was found to be optimal.
That is, correct analyses tended to either be in the top
20 or else not in the top 100 or even 1000. Secondly,
differences in score between the incorrect 1-best and
the correct nth hypothesis were not a very reliable
indicator of ?almost right?. This is not surprising as
the scores are probabilities calculated over the com-
plete analysis, whereas our focus is one small part
of it. Consequently, the re-scoring system uses the
probabilistic model just to generate the top 20 anal-
yses; and those analyses are then re-scored using 3
features. Analyses that concur with NER in having
a named entity within an NP receive a reward of +1.
Secondly, NP analyses that contain N+1 genes (as
in a co-ordination) receive a score of +N, so long
as the NP is single headed. For example, ?gurken
or torpedo females? will receive a preferred analy-
sis in which ?gurken? and ?torpedo? are both mod-
ifiers of ?females?. The ?single headedness? con-
straint rules out very unlikely NP analyses that the
parser can return as legal possibilities. Finally, anal-
yses receive a score of -1 if the NP contains a deter-
miner but the head of the NP is a gene name. The
top 20 parses may include analyses in which, for ex-
ample, ?the hypothesis that phenylalanine hydroxy-
lase? contains ?that phenylalanine hydroxylase? as
an NP constituent.
Finally, we also experimented with using both the
full parsing and shallow baseNP spotter together;
here, the idea is simply that when two analyses over-
lap, then the analysis from full parsing should be
preferred on the grounds that it has more informa-
tion available to it. However, if the shallow spotter
detects an analysis when full parsing detects none
then this is most likely because full parsing has been
led astray rather than it has discovered a more likely
analysis not involving any baseNP.
5 Experimental Results
Table 1 gives the precision, recall and (harmonic) F-
score measures for the baseline NP system with and
without the extra pre-parsing retagging module; and
table 2 gives similar figures for the generic full pars-
167
ing system. Scores for the left boundary only, right
boundary only and full extent (?correct?) are shown.
The extra retagging module (i.e. override tagger re-
sults, given NER results) improves results in both
systems and by similar amounts. This is nearly al-
ways on account of gene names being mis-tagged
as verbal which leads to their exclusion from the set
of baseNP chunks. The override mechanism is of
course a blunt instrument and only affects the tags
of tokens within gene names and not those in its sur-
rounding context.
Table 3 shows the results from interpolating the
POS tag distribution P with the NER distribution
N linearly using different levels of ?. For example,
? = 1.00 is the simple retagging approach in which
all the probability is assigned to the NER suggested
tag; whereas ? = 0.25 means that only 25% is allo-
cated by NER. The figures shown are for one variant
of the full parsing system which included n-best se-
lection but other variants showed similar behaviour
(data not shown). The results from interpolation
show that the extra information available in the parse
does not prove valuable overall. Decreasing values
of ? lead to decreases in performance. These results
can be interpreted as similar in kind to Charniak et
al (1996) who found that a parser using multiple
POS tag inputs could not improve on the tag accu-
racy of a tagger outputting single POS tags. Our
results differ in that the extra tag possibilities are de-
rived from an alternative knowledge source and our
measurement is baseNP detection. Nevertheless the
conclusion may be that the best way forward here
is a much tighter integration between NER and POS
tagging itself.
POS tagging errors naturally affect the perfor-
mance of both shallow and full parsing systems,
though not necessarily equally. For example, the
tagger in the shallow system tags ectopic as a verb
in vnd-expression leads to ectopic Nk6 expression
and this is not corrected by the retagging module be-
cause ectopic is not part of the gene name. Conse-
quently the baseNP spotter is led into a left bound-
ary error. Nevertheless, the distribution of baseNPs
from the two systems do appear to be complemen-
tary in a rather deeper fashion. Analysis of the re-
sults indicates that parentheticals in pre-modifier po-
sitions appears to throw the shallow parser severely
off course. For example, it generates the analysis
R P F
retag+shallow
(correct) 80.21 75.92 78.01
(left b) 92.40 87.46 89.86
(right b) 90.81 85.95 88.32
shallow only
(correct) 74.03 76.32 75.16
(left b) 84.28 86.89 85.56
(right b) 82.69 85.25 83.95
Table 1: Generic shallow parsing
R P F
retag+full
(correct) 80.92 84.81 82.82
(left b) 85.69 89.81 87.70
(right b) 88.69 92.96 90.78
full only
(correct) 75.44 85.23 80.04
(left b) 80.21 90.62 85.10
(right b) 82.51 93.21 87.54
Table 2: Generic full parsing
[the transforming growth factor-beta] ( [ TGF-beta
] ) superfamily. Also, appositions such as the human
auto antigen La and the homeotic genes abdominal
A and abdominal B cause problems. In these kinds
of case, the full parser detects the correct analysis.
On the other hand, the extraction of baseNPs from
grammatical relations relies in part on the parser
identifying a head correctly (for example, via a non-
clausal subject relation). The shallow parser does
not however rely on this depth of analysis and may
succeed in such cases. There are also cases where
the full parser fails to detect any analysis at all.
System (correct) (left b) (right b)
?=0.25 83.97 88.34 90.71
?=0.50 84.16 88.69 91.22
?=0.80 85.18 89.67 91.28
?=1.00 85.38 89.87 91.66
Table 3: F-scores for baseNP detection for various ?
Table 4 indicates the advantages to be gained in n-
best selection. The entries for full and retag+full are
repeated from table 2 for convenience. The entries
168
System R P F
retag+full 80.92 84.81 82.82
retag+full+sel 83.22 87.22 85.17
retag+full+oracle 85.87 90.17 87.96
full 75.44 85.23 80.04
full+sel 78.80 86.60 82.52
full+oracle 81.63 89.88 85.56
Table 4: Effects of n-best selection
for full+sel and retag+full+sel show the effect of
adding n-best selection. The entries for full+oracle
and retag+full+oracle show the maximum achiev-
able performance by replacing the actual selection
policy with an oracle that always chooses the cor-
rect hypothesis, if it is available. The results are
that, regardless of whether a retagging policy is
adopted, an oracle which selects the best analysis
can achieve an error reduction of well over 25%.
Furthermore, the simple selection policy outlined
before succeeds in achieving almost half the pos-
sible error reduction available. This result is par-
ticularly interesting because it demonstrates that the
extra knowledge source available in this baseNP de-
tection task (namely NER) can profitably be brought
to bear at more than one stage in the overall process-
ing pipeline. Even when NER has been used to im-
prove the sequence of POS tags given to the parser,
it can profitably be exploited again when selecting
between parses.
The complementary nature of the two systems is
revealed in Table 5 which shows the effects of inte-
grating the two parsers. baseNPs from the shallow
parser are accepted whenever it hypothesizes one
and there is no competing overlapping baseNP from
the full parser. Note that this is rather different from
the standard method of simply selecting between an
analysis from the one parser and one from another.
The success of this policy reflects the fact that there
remain several cases where the full parser fails to
deliver ?apparently? simple baseNPs either because
the tagger has failed to generate a suitable hypoth-
esis, or because parsing itself fails to find a good
enough analysis in the time available to it.
Overall, the best results (87.17% F-score) are ob-
tained by applying NER results both before parsing
through the update of POS tags and after it in se-
System R P F
1-best 85.69 84.35 85.01
n-best 87.63 86.71 87.17
oracle 90.28 89.49 89.89
Table 5: Combining shallow and full parsing
lection from n-best lists; and by combining the re-
sults of both full parsing in order to improve analy-
sis of more complex structures and shallow parsing
as a back-off strategy. The same strategy applied us-
ing our automated gene name recognizer results in
a F-score of 73.6% F-score, which is considerably
less of course, although the gene name recognizer
itself operates at 82.5% F-Score, with similar preci-
sion and recall figures. This naturally limits the pos-
sible performance of our baseNP recognition task.
Encouragingly, the ?lost? performance (just under
11%) is actually less in this scenario than when gene
name recognition is perfect.
6 Previous Work
The lack of clarity between noun phrase extents and
named entity extents and its impact on evaluation
and training data for NER has been noted previ-
ously, e.g. for proteins (Mani et al, 2005). Vla-
chos and Gasperin (2006) claim that their name ver-
sus mention distinction was helpful in understand-
ing disagreements over gene name extents and this
led, through greater clarity of intended coverage, to
improved NER. BaseNP detectors have also been
used more directly in building NER systems. Ya-
mamoto et al(2003) describe an SVM approach to
protein name recognition, one of whose features is
the output of a baseNP recognizer. BaseNP recogni-
tion supplies a top-down constraint for the search for
protein names within a baseNP. A similar approach
albeit in a CRF framework is described in Song et
al. (2005).
The concept of baseNP has undergone a number
of revisions (Ramshaw and Marcus, 1995; Tjong
Kim Sang and Buchholz, 2000) but has previously
always been tied to extraction from a more com-
pletely annotated treebank, whose annotations are
subject to other pressures than just ?initial material
up to the head?. To our knowledge, our figures for
inter-annotator agreement on the baseNP task itself
169
(i.e. not derived from a larger annotation task) are
the first to be reported. Quality measures can be
indirectly inferred from a treebank complete anno-
tation, but baseNP identification is probably a sim-
pler task. Doddington et al(2004) report an ?overall
value score of 86? for inter-annotator agreement in
ACE; but this is a multi-component evaluation using
a complete noun phrase, but much else besides.
Improving results through the combination of dif-
ferent systems has also been a topic of previous
work in baseNP detection. For example, Sang et al
(2000) applied majority voting to the top five ma-
chine learning algorithms from a sample of seven
and achieved a baseNP recognition rate that ex-
ceeded the recognition rates of any of the individual
methods.
7 Conclusion
We have motivated the task of detecting baseNPs
that contain a given named entity as a task both of
interest from the standpoint of use within a particu-
lar application and on more general grounds, as an
intermediate point between the task of general NP
chunking and domain specific NER.
We have explored a variety of methods for under-
taking baseNP detection using only domain specific
NER in addition to otherwise general purpose lin-
guistic processors. In particular, we have explored
both shallow and full parsing general purpose sys-
tems and demonstrated that the domain specific re-
sults of NER can be applied profitably not only at
different stages in the language processing pipeline
but also more than once. The best overall recogni-
tion rates were obtained by a combination of both
shallow and full parsing systems with knowledge
from NER being applied both before parsing, at the
stage of part of speech detection and after parsing,
during parse selection.
References
E.J. Briscoe, J. Carroll, and R. Watson. 2006. The sec-ond release of the rasp system. Proc. Coling/ACL2006 Interactive Sessions.
E. Charniak, G. Carroll, J. Adcock, A.R. Cassandra,Y. Gotoh, J. Katz, M.L. Littman, and J. McCann.
1996. Taggers for parsers. Artificial Intelligence,85(1-2):45?57.
M.A. Crosby, Goodman J.L., Strelets V.B., P. Zhang,
W.M. Gelbart, and the FlyBase Consortium. 2007.Flybase: genomes by the dozen. Nucleic Acids Re-search, 35:486?491.
Shipra Dingare, Malvina Nissim, Jenny Finkel, Christo-
pher Manning, and Claire Grover. 2005. A system foridentifying named entities in biomedical text: how re-sults from two evaluations reflect on both the system
and the evaluations:. Comp. Funct. Genomics, 6(1-2):77?85.
G. Doddington, A. Mitchell, M. Przybocki, L. Ramshaw,S. Strassel, and R. Weischedel. 2004. Automatic con-
tent extraction (ace) program - task definitions and per-formance measures. In Proceedings of LREC 2004.
C. Gasperin. 2006. Semi-supervised anaphora resolu-tion in biomedical texts. In Proceedings of BIONLP inHLT-NAACL06, New York, pages 96?103.
R. Hoffman and A. Valencia. 2004. A gene network fornavigating the literature. Nature Genetics, 36:664.
I. Mani, Z. Hu, S.B. Jang, K. Samuel, M. Krause,
J. Phillips, and C.H. Wu. 2005. Protein name taggingguidelines: lessons learned. Comparative and Func-tional Genomics, 6(1-2):72?76.
L.A. Ramshaw and M.P Marcus. 1995. Text chunking
using transformation-based learning. In Proceedingsof the Third Annual Workshop on Very Large Corpora,pages 82?94. ACL.
Y. Song, G. Kim, E. ad Lee, and B. Yi. 2005. Posbiotm-
ner: a trainable biomedical named-entity recognitionsystem. Bioinformatics, 21(11):2794?2796.
E.F. Tjong Kim Sang and S. Buchholz. 2000. Introduc-tion to the conll-2000 shared task: Chunking. In Pro-ceedings of CoNLL-2000 and LLL-2000.
Erik F. Tjong Kim Sang, Walter Daelemans, Herve?De?jean, Rob Koeling, Yuval Krymolowski, Vasin Pun-yakanok, and Dan Roth. 2000. Applying system com-
bination to base noun phrase identification. In COL-ING 2000, pages 857?863. Saarbruecken, Germany.
Kristina Toutanova, Dan Klein, Christopher Manning,and Yoram Singer. 2003. Feature-rich part of speech
tagging with a cyclic dependency network. In HLT-NAACL, pages 252?259.
A. Vlachos and C. Gasperin. 2006. Bootstrapping and
evaluating named entity recognition in the biomed-ical domain. In Proceedings of BIONLP in HLT-NAACL06, New York.
K. Yamamoto, T. Kudo, T. Konagaya, and Y. Matsumoto.
2003. Protein name tagging for biomedical anno-tation in text. In ACL 2003 Workshop on NLP inBiomedicine.
170
Plug and Play Speech Understanding
Manny Rayner, Ian Lewin
& Genevieve Gorrell
netdecisions Ltd
Wellington House,
East Road, Cambridge CB1 1BH, UK
manny.raynerjian.lewinjgenevieve.gorrell
@netdecisions.com
Johan Boye
Telia Research
S-123 86 Farsta, Sweden
johan.boye@trab.se
Abstract
Plug and Play is an increasingly im-
portant concept in system and network
architectures. We introduce and de-
scribe a spoken language dialogue sys-
tem architecture which supports Plug
and Playable networks of objects in its
domain. Each device in the network car-
ries the linguistic and dialogue manage-
ment information which is pertinent to it
and uploads it dynamically to the rele-
vant language processing components in
the spoken language interface. We de-
scribe the current state of our plug and
play demonstrator and discuss theoreti-
cal issues that arise from our work. Plug
and Play forms a central topic for the
DHomme project.
1 Introduction
The notion of Plug and Play nds its most natu-
ral home in the world of networked home devices,
where it oers at least the following two important
properties
 the network of devices is dynamically recon-
gurable as devices are brought online or dis-
appear oine
 zero re-conguration by the user is required
Frameworks for achieving Plug and Play gener-
ally address this by including at least the following
 devices announce themselves on the network
when they are plugged into it (and also dis-
cover the existence of others)
 devices describe their own capabilities, pro-
vide a means for accessing them and can
query and access the capabilities of others
 devices should support, where possible, seam-
less interaction with other devices.
Plug and Play is, not surprisingly, viewed as
a pre-requisite for the commercial success of net-
worked devices in the home. There are already
several promising candidate platforms for achiev-
ing the necessary functionality, including Univer-
sal Plug and Play (UPnP) (Microsoft, 2000) and
Jini (Oaks and Wong, 2000). In this paper, we
address the requirements on spoken dialogue in-
terfaces that arise from a plug and play domain.
We also present the current state of our English
language plug and play demonstrator for control-
ling lamps, dimmers and sensors, previously de-
scribed in (Rayner et al, 2001b). (There is also a
Swedish instantiation).
First, however, we need briey to distinguish
our notion from other notions of plug and play
and recongurability.
The notion of Plug and Play has been used
for dialogue system toolkits in which the various
dierent language processing components them-
selves (e.g. recognition, parsing, generation and
dialogue management) can be plugged in and
out. The most prominent instance of this is
the Darpa Communicator architecture (Goldschen
and Loehr, 1999), which denes interoperability
standards for language processing components.
The intention is simply that researchers and de-
velopers can experiment with systems containing
dierent instantiations of the language process-
ing components. The Communicator Architec-
ture is not designed to address the special require-
ments of a plug and play domain. In fact, the
Communicator architecture does not support the
dynamic re-conguration of language processing
components while the system is running.
At a more general level, simple re-conguration
of spoken language dialogue systems has of course
long been a goal of language engineering. But
such re-conguration is nearly always viewed as
the problem of cross-domain or possibly cross-
language porting, e.g. (Glass, 1999). Once one
has a cinema ticket booking service, for example,
one may examine the eort required for book-
ing train tickets, or for e-shopping in general or
even the \database access" scenario. There are
various toolkits, architectures and methodologies
for rapidly and/or semi-expertly generating new
instances of dialogue systems, e.g. by abstract-
ing away from domain or application dependent
features of particular systems, e.g. (Fraser and
Thornton, 1995; Kolzer, 1999), or `bottom-up' by
aggregation of useful re-congurable components
, e.g. (Sutton et al 1998; Larsson and Traum,
2000). The automated within-domain recongu-
ration required for a plug and play domain, has
not, to our knowledge, been described previously.
Pursuit of plug and play functionality (and its
realization in strong and weak forms - discussed in
section 3) forms a central theme of the DHomme
project.
1
In the rest of this paper, we begin by detail-
ing our concrete Plug and Play scenario - device
control in the home - with an example dialogue
from our demonstrator and an outline of the main
dialogue processing elements. In section 3, we dis-
tinguish strong and weak notions of Plug and Play
and their applicability to spoken language inter-
faces. In section 4, we discuss the strong plug
and play capability we have built into the recogni-
tion, parsing and (context independent) semantic
interpretation system components of our demon-
strator. In section 5, we discuss some future work
for Plug and Play dialogue management. Section
6 contains our conclusions.
2 A Plug and Play Scenario
In this section we present example dialogues from
our current demonstrator and briey outline the
main processing elements. The domain is net-
worked home devices, an area where plug and play
is already in a reasonably advanced state of devel-
opment and speech control looks highly attractive.
2.1 Plug and Play Examples
Figure 1 displays an example dialogue from our
current demonstrator.
In U1, the user asks for the TV to be switched
on. The system reports (S1) that it simply does
not understand the user. (If it possessed \TV"
in its recognition vocabulary and knew something
about the concept of TVs it could have reported
I don't know of any TV). When a TV is plugged
into the network (following U2), the system is able
to understand, and act on the user's repeated re-
quest to switch on the TV. The system reports on
1
This work is supported by EU 5th Framework
project IST-2000-26280 { see Acknowledgments
its action (S3). S4 illustrates another type of \er-
ror" message. When another TV is plugged into
the network, the system must now engage in dis-
ambiguation behaviour whereas previously it had
no need to (S7).
S10 illustrates that, in the absence of dimmable
lights, \Dim" is not understood, and, possibly,
not even recognized. When a dimmable light is
plugged in (or, at least, knowledge of dimmable
lights is plugged in), then a more helpful error
message can be given in S12. Finally, when the
grammar is increased to cover new commands, the
system may begin to make mistakes that it did not
make originally (S13).
2.2 The current demonstrator
Our demonstrator expects devices of three main
types: switchable, dimmable and sensors. Switch-
able devices are binary state devices that can be
set or queried. Dimmable devices have a state
varying on a single scalar dimension which can be
set, changed, or queried. Sensors are similar but
can only be queried.
Formally, these commands and queries are en-
coded by a 4-ary slot-value structure and De-
vice Grammars must generate semantic values
containing these slots. (Not all slots are re-
quired for every utterance, of course.) The
four slots are: op (lled by command or query);
level; change and dir (on or o). In or-
der to identify devices, there are 4 other slots:
device (light, tv . . . ), loc (bathroom, kitchen . . . ),
device-spec (all, the . . . ) and pronoun (it, them
. . . ). For example, Is the light in the hall on?
translates to h op=query dir=on device=light
device-spec=the loc=hall i. Dim everything by
ten percent translates to h op=command dir=o
device-spec=everything change=10 i. Switch
the hall and kitchen lights o translates to h
op=command dir=o level=0 device=light h
loc=kitchen loc=hall ii.
Dialogue interpretation contains three stages.
First, conjunctions in the input (which are treated
as just packed representations) are unpacked into
a set of (7-ary) slot-structures. Secondly, a form of
ellipsis resolution, \sticky defaults", takes place in
which missing slots are lled in from their previ-
ous values. A fragmentary semantic value is sim-
ply pasted over the corresponding parts of the last
one. Thus And in the bathroom translates to h
loc=bathroomi but the other required slots (e.g.
device) are supplied from the previous represen-
tation. Finally reference resolution tries to deter-
mine device identiers for pronouns and denitely
described devices. Currently, devices are identi-
ed only by their location and type so a simple
matching procedure can be used.
Following contextual interpretation, either a
program (a command or sequence of such) or an
`error' condition (e.g. resolution failed to identify
a device) will have been generated. The system
must then execute the program and/or generate
feedback. Knowledge of how to execute these pro-
grams, e.g. that it is an `error' to try to switch on
a light that is already on, and possible feedback
messages are simply hardcoded into the Dialogue
Manager. There is a pre-dened set of feedback
message structures associated with each underly-
ing action and their possible results. Some exam-
ple paraphrases of message structures are \The X
is now on", \The X is already on", \The X is now
at Y percent", \There is no X in the Y".
3 Strong and Weak Plug and Play
In its weakest form, Plug and Play refers only to
the ability to add a device to a network with-
out manual conguration. Knowledge distribu-
tion is not included. Standard Plug and Play for
PC peripherals simply automates the matching up
of physical devices with software device-specic
drivers in the PC. Communication links between
them are established by reserving resources such
as shared memory and interrupt request numbers.
The weak sense is very useful. Users need not
congure their hardware via jumper switches or
software drivers by entering `magic' numbers in
conguration les.
In the strong sense, Plug and Play can refer
also to modular, distributed knowledge. Devices
not only set up network communications but pub-
lish information about themselves over it. Other
devices can obtain and use it. In Jini, for exam-
ple, a new printer device can register its printing
service (and java code for invoking methods on it)
on the network. Then, a word-processing applica-
tion can nd it and congure itself to use it. In
UPnP, devices publish XML descriptions of their
interfaces.
The strong-weak contrast is not a sharp or bi-
nary one. The word-processor might know the
industry agreed printer interface and so display
a greyed-out print button if no printer is net-
worked. When a new type of printer is net-
worked, it might supply additional print options
(e.g. \print colour") that the processor knows
nothing about.
One desirable Plug and Play property in both
strong and weak forms is commutativity, i.e. the
system understands the same commands in the
same way no matter which device is connected
rst. It is less obvious whether disconnecting de-
vice X should be the inverse operation of connect-
ing device X. This seems reasonable in a weak plug
and play system, but in the strong case it would
mean that the recognizer would cease to under-
stand the word \TV" as soon as the TV were dis-
connected. This might be confusing for the user.
The strong and weak senses of plug and play
apply to spoken language dialogue interfaces. In
the weakest sense, the dialogue system might be
entirely pre-congured to deal with all possible
devices and device-combinations. The required
knowledge is already present in the network. Plug
and Play then consists of identifying which partic-
ular devices are currently networked and estab-
lishing communication channels with them. In
the stronger sense, the components of the spoken
language dialogue interface acquire the knowledge
pertinent to particular devices from those devices.
So, as in example S1 above, the speech recognizer
may not have the word \TV" in its vocabulary
until a TV is plugged into the network. The di-
alogue manager may not be capable of uttering
\That device is not dimmable" until a dimmable
device is plugged into the network. A strongly
Plug and Play system may therefore be distin-
guishable from a weaker one by its behaviour in
the absence of certain device specic knowledge.
If the relevant knowledge is present, one cannot be
certain whether it was pre-congured or uploaded
\on demand".
Plug and Play also enforces a certain sort of
modularity on the system. Since devices must de-
clare the information required to update the dia-
logue components, a clear interface is provided for
re-conguring the system for new types of device
as well as a clearer picture of the internal structure
of those dialogue components. Indeed, it is really
just a design choice whether device knowledge is in
fact installed only when the device is plugged in.
One may, for example, choose to optimize recog-
nition performance on the set of devices actually
installed by not loading information about other
devices. Alternatively, one might prefer to rec-
ognize the names of devices not installed so that
helpful error messages can be delivered.
Potentially, each component in a spoken lan-
guage interface (recognizer, parser, interpreter, di-
alogue manager etc.) can be updated by informa-
tion from a device in a Plug and Play domain. Dif-
ferent components might support dierent degrees
of strength of the Plug and Play notion. Further-
more, dierent instantiations of these components
may require very dierent sorts of update. To
take a very simple example, if recognition is car-
ried out by a statistically trained language model,
then updating this with information pertinent to a
particular device will evidently be a signicantly
dierent task from updating a recognizer which
uses a grammar-based language model.
Our current demonstrator program instantiates
a Plug and Play capability for recognition, parsing
and context independent semantic analysis and is
built on top of the Nuance toolkit (Nuance Com-
munications, 1999). The next section discusses
the capability in detail. Section 5 discusses and
makes some proposals for Plug and Play Dialogue
Management.
4 Distributed Grammar
4.1 Introduction
In this section, we will describe how we have ad-
dressed the issues that arise when we attempt to
apply the (strong) Plug and Play scenario to the
tasks of speech recognition and language process-
ing. Each device will provide the knowledge that
the speech interface needs in order to recognise the
new types of utterance relevant to the device in
question, and convert these utterances into well-
formed semantic representations.
Let's start by considering what this means in
practice. There are in fact a whole range of pos-
sible scenarios to consider, depending on how the
speech understanding module is congured. If the
module's construction is simple enough, there may
be no signicant problems involved in extending
it to oer Plug and Play functionality. For ex-
ample, the command vocabulary oered by the
speech interface may just consist of a list of xed
phrases. In this case, Plug and Play speech recog-
nition becomes trivial: each device contributes the
phrases it needs, after which they can be com-
bined into a single grammar. An approach of
this kind fails however to scale up to an interface
which supports complex commands, in particular
commands which combine within the same utter-
ance language referring to two or more dierent
devices. For example, a command may address
several devices at once (\turn on the radio and the
living room light"); alternately, several commands
may be combined into a single utterance (\switch
on the cooker and switch o the microwave"). Our
experience with practical spoken device interfaces
suggests that examples like these are by no means
uncommon.
Another architecture relatively easy to com-
bine with Plug and Play is doing recognition
through a general large-vocabulary recogniser,
and language-processing through device-specic
phrase-spotting (Milward, 2000). The recogniser
stays the same irrespective of how many devices
are connected, so there are by denition no prob-
lems at the level of speech recognition, and it is in
principle possible to support complex commands.
The main drawback, however, is that recognition
quality is markedly inferior compared to a system
in which recognition coverage is limited to the do-
main dened by the current set of devices.
Modern speech interfaces supporting complex
commands are typically specied using a rule-
based grammar formalism dened by a platform
like Nuance (Nuance Communications, 1999) or
SpeechWorks (Inc, 2001). The type of grammar
supported is some subset of full CFG, extended to
include semantic annotations. Grammar rules de-
ne the language model that constrains the recog-
nition process, tuning it to the domain in order to
achieve high performance. (They also supply the
semantic rules that dene the output representa-
tion; we will return to this point later). If we want
to implement an ambitious Plug and Play speech
recognition module within this kind of framework,
we have two top-level goals. On the one hand, we
want to achieve high-quality speech recognition.
At the same time, standard software engineering
considerations suggest that we want to minimize
the overlap between the rule-sets contributed by
each device: ideally, the device will only upload
the specic lexical items relevant to it.
It turns out that our software engineering ob-
jectives conict to some extent with our initial
goal of achieving high-quality speech recognition.
Consider a straightforward solution, in which the
grammatical information contributed by each de-
vice consists purely of lexical entries, i.e. entries
of the form
<Nonterminal> --> <Terminal>
In a CFG-based framework, this implies that we
have a central device-independent CFG grammar,
which denes the other rules which link together
the nonterminals that appear on the left-hand-
sides of the lexical rules. The crucial question is
what these lexical non-terminal symbols will be.
Suppose, for concreteness, that we want our set
of devices to include lights with dimmer switches,
which will among other things accept commands
like \dim the light". We might achieve this by
making the device upload lexical rules of the rough
form
TRANSITIVE_VERB --> dim
NOUN --> light
where the LHSs are conventional grammatical cat-
egories. (We will for the moment skip over the
question of how to represent semantics). The lex-
ical rules might combine with general grammar
rules of the form
COMMAND --> TRANSITIVE_VERB NP
NP --> DET NOUN
DET --> the
This kind of solution is easy to understand, but ex-
perience shows that it leads to poor speech recog-
nition. The problem is that the language model
produced by the grammar is underconstrained: it
will in particular allow any transitive verb to com-
bine with any NP. However, a verb like \dim" will
only combine with a restricted range of possible
NPs, and ideally we would like to capture this
fact. What we really want to do is parameterise
the language model. In the present case, we want
to parameterise the TRANSITIVE VERB \dim" with
the information that it only combines with object
NPs that can be used to refer to dimmable de-
vices. We will parameterise the NP and NOUN
non-terminals similarly. The obvious way to do
this within the bounds of CFG is to specialise the
rules approximately as follows:
COMMAND --> TRANS_DIM_VERB DIMMABLE_NP
DIMMABLE_NP --> DET DIMMABLE_NOUN
TRANS_DIM_VERB --> dim
DIMMABLE_NOUN --> light
DET --> the
Unfortunately, however, this defeats the original
object of the exercise, since the \general" rules
now make reference to the device-specic concept
of dimming. What we want instead is a more
generic treatment, like the following:
COMMAND -->
TRANSITIVE_VERB:[sem_obj_type=T]
NP:[sem_type=T]
NP:[sem_type=T] -->
DET NOUN:[sem_type=T]
DET --> the
TRANSITIVE_VERB:[sem_obj_type=dimmable]
--> dim
NOUN:[sem_type=dimmable] --> light
This kind of parameterisation of a CFG is not
in any way new: it is simply unication gram-
mar (Pullum and Gazdar, 1982; Gazdar et al,
1985). Thus our rst main idea is to raise the
level of abstraction, formulating the device gram-
mar at the level of unication grammars, and
compiling these down into the underlying CFG
representation. There are now a number of sys-
tems which can perform this type of compilation
(Moore, 1998; Kiefer and Krieger, 2000); the ba-
sic methods we use in our system are described
in detail elsewhere (Rayner et al, 2001a). Here,
we focus on the aspects that are required for \dis-
tributed" unication grammars needed for Plug
and Play.
4.2 \Unication grammars meet
object-oriented programming".
Our basic idea is to start with a general device-
independent unication grammar, which imple-
ments the core grammar rules. In our prototype,
there are 34 core rules. Typical examples are
the NP conjunction and PP modications rules,
schematically
NP --> NP CONJ NP
NP --> NP PP
which are likely to occur in connection with any
kind of device. These rules are parameterised by
various features. For example, the set of features
associated with the NP category includes gram-
matical number (singular or plural), WH (plus or
minus) and sortal type (multiple options).
Each individual type of device can extend the
core grammar in one of three possible ways:
New lexical entries A device may add lexical
entries for device-specic words and phrases;
e.g., a device will generally contribute at least
one noun used to refer to it.
New grammar rules A device may add device-
specic rules; e.g., a dimmer switch may in-
clude rules for dimming and brightening, like
\another X percent" or \a bit brighter".
New feature values Least obviously, a device
may extend the range of values that a gram-
matical feature can take (see further below).
For usual software engineering reasons, we nd it
convenient to divide the distributed grammar into
modules; the grammatical knowledge associated
with a device may reside in more than one module.
The grammar in our current demonstrator con-
tains 21 modules, including the \core" grammar
described above. Each device typically requires
between two and ve modules. For example, an
on/o light switch loads three modules: the core
grammar, the general grammar for on/o switch-
able devices, and the grammar specically for
on/o switchable lights. The core grammar, as al-
ready explained, consists of linguistically oriented
device-independent grammar rules. The mod-
ule for on/o switchable devices contains gram-
mar rules specic to on/o switchable behaviour,
which in general make use of the framework es-
tablished by the general grammar. For example,
there are rules of the schematic form
QUESTION -->
is
NP:[sem_type=device]
ON_OFF_PHRASE
PARTICLE_VERB:[particle_type=onoff]
--> switch
Finally, the module for on/o switchable lights is
very small, and just consists of a handful of lexi-
cal entries for nouns like \light", dening these as
nouns referring to on/o switchable devices. The
way in which nouns of this kind can combine is
however dened entirely by the on/o switchable
device grammar and core grammar.
The pattern here turns out to be the usual one:
the grammar appropriate to a device is composed
of a chain of modules, each one depending on the
previous link in the chain and in some way special-
ising it. Structurally, this is similar to the organ-
isation of a piece of normal object-oriented soft-
ware, and we have been interested to discover that
many of the standard concepts of object-oriented
programming carry over naturally to distributed
unication grammars. In the remainder of the sec-
tion, we will expand on this analogy.
If we think in terms of Java or a similar main-
stream OO language, a major grammatical con-
stituent like S, NP or PP has many of the prop-
erties of an OO interface. Grammar rules in one
module can make reference to these constituents,
letting rules in other modules implement their
denition. For example, the temperature sen-
sor grammar module contains a small number of
highly specialised rules, e.g.
QUESTION -->
what is the temperature
PP:[pp_type=location]
QUESTION -->
how many degrees is it
PP:[pp_type=location]
The point to note here is that the temperature
sensor grammar module does not dene the loca-
tive PP construction; this is handled elsewhere,
currently in the core grammar module. The up-
shot is that the temperature sensor module is able
to dene its constructions without worrying about
the exact nature of the locative PP construction.
As a result, we were for instance able to upgrade
the PP rules to include conjoined PPs (thus allow-
ing e.g. \what is the temperature in the kitchen
and the living room") without in any way alter-
ing the grammar rules in the temparature sensor
module
2
2
An ambitious treatment of conjunction might ar-
guably also necessitate changes in the dialogue man-
agement component specic to the temperature sen-
sor device. In the implemented system, conjunction
is uniformly treated as distributive, so \what is the
temperature in the kitchen and the living room" is au-
In order for the scheme to work, the \interfaces"
{ the major categories { naturally need to be well-
dened. In practice, this implies restrictions on
the way we handle three things: the set of syntac-
tic features associated with a category, the range
of possible values (the domain) associated with
each feature, and the semantics of the category.
We consider each of these in turn.
Most obviously, we need to standardise the
feature-set for the category. At present, we de-
ne most major categories in the core grammar
module, to the extent of specifying there the full
range of features associated with each category.
It turns out, however, that it is sometimes desir-
able not to x the domain of a feature in the core
grammar, but rather to allow this domain to be
extended as new modules are added. The issues
that arise here are interesting, and we will discuss
them in some detail.
The problems occur primarily in connection
with features mediating sortal constraints. As
we have already seen in examples above, most
constituents will have at least one sortal fea-
ture, encoding the sortal type of the constituent;
there may also be further features encoding the
sortal types of possible complements and ad-
juncts. For example, the V category has a fea-
ture vtype encoding the sortal type of the V it-
self, a feature obj sem np type encoding the sor-
tal type of a possible direct object, and a feature
vp modifiers type encoding the sortal type of a
possible postverbal modier.
Features like these pose two interrelated prob-
lems. First, the plug and play scenario implies
that we cannot know ahead of time the whole do-
main of a sortal feature. It is always possible that
we will connect a device whose associated gram-
mar module requires denition of a new sortal
type, in order to enforce appropriate constraints in
the language model. The second problem is that
it is still often necessary to dene grammar rules
referring to sortal features before the domains of
these features are known: in particular, the core
module will contain many such rules. Even before
knowing the identity of any specic devices, gen-
eral grammar rules may well want to distinguish
between \device" NPs and \location" NPs. For
example, the general \where-question" rule has
the form
QUESTION --> where is NP
Here, we prefer to constrain the NP so as to make
it refer only to devices, since the system currently
tomatically interpreted as equivalent to \what is the
temperature in the kitchen and what is the tempera-
ture in the living room'.
has no way to interpret a where question referring
to a room, e.g. \where is the bathroom".
We have addressed these issues in a natural way
by adapting the OO-oriented idea of inheritance:
specically, we dene a hierarchy of possible fea-
ture values, allowing one feature value to inherit
from another. In the context of the \where is
NP" rule above, we dene the rule in the core
module; in this module, the sortal NP feature
sem np type may only take the two values device
and location, which we specify with the declara-
tion
3
domain(sem_np_type, [location, device])
This allows us to write the constrained \where is"
rule as
QUESTION -->
where is NP:[sem_np_type=device]
Suppose now that we add modules for both on/o
switchable and dimmable devices; we would like
to make these into distinct sortal types, called
switchable device and dimmable device. We
do this by including the following declarations in
the \switchable" module:
domain(sem_np_type,
[location,
device,
switchable_device])
specialises(switchable_device, device)
and correspondingly in the \dimmable" module:
domain(sem_np_type,
[location,
device,
dimmable_device])
specialises(dimmable_device, device)
When all these declarations are combined at
compile-time, the eect is as follows. The do-
main of the sem np type feature is now the
union of the domains specied by each compo-
nent, and is thus the set flocation, device,
switchable device, dimmable deviceg. Since
switchable device and dimmable device are
the precise values specialising device, the com-
piler systematically replaces the original feature
value device with the disjunction
switchable_device \/ dimmable_device
Thus the \where is" rule now becomes
QUESTION -->
where is
NP:[sem_np_type=switchable_device \/
dimmable_device]
3
We have slightly simplied the form of the decla-
ration for expository purposes.
If new modules are added which further specialise
switchable device, then the rule will again be
adjusted by the compiler so as to include appropri-
ate new elements in the disjunction. The impor-
tant point to notice here is that no change is made
to the original rule denition; in line with nor-
mal OO thinking, the feature domain information
is distributed across several independent modules,
and the changes occur invisibly at compile-time
4
.
We have so far said nothing about how we deal
with semantics, and we conclude the section by
sketching our treatment. In fact, it is not clear
to us that the demands of supporting Plug and
Play greatly aect semantics. If they do, the
most important practical consideration is proba-
bly that plug and play becomes easier to realise
if the semantics are kept simple. We have at any
rate adopted a minimal semantic representation
scheme, and the lack of problems we have experi-
enced with regard to semantics may partly be due
to this.
The annotated CFG grammars produced by our
compiler are in normal Nuance Grammar Speci-
cation Language (GSL) notation, which includes
semantics; unication grammar rules encode se-
mantics using the distinguished feature sem, which
translates into the GSL return construction. So
for example the unication grammar rules
DEVICE_NOUN:[sem=light] --> light
DEVICE_NOUN:[sem=heater] --> heater
translates into the GSL rule
DEVICE_NOUN
[ light {return(light)}
heater {return(heater)}]
Unication grammar rules may contain variables,
translating down into GSL variables; so for exam-
ple,
NP:[sem=[D, N]] -->
DET:[sem=D]
NOUN:[sem=N]
translates into the GSL rule
NP (DET:d NOUN:n) {return(($d $n))}
Our basic semantic representation is a form of fea-
ture/value notation, extended to allow handling
4
Readers familiar with OO methodology may
be disturbed by the fact that the rule appears
to have been attached to the daughter nodes
(switchable device dimmable device, etc), rather
than to the mother device node. We would argue that
the rule is still conceptually attached to the device
node, but that the necessity of eventually realising it
in CFG form implies that it must be compiled in this
way, so that it can later be expanded into a separate
CFG rule for each daughter.
of conjunction. We allow four types of semantic
construction:
 Simple values, e.g. light, heater. Typically
associated with lexical entries.
 Feature/value pairs expressed in list no-
tation, e.g. [device, light], [location,
kitchen]. These are associated with nouns,
adjectives and similar constituents.
 Lists of feature/value pairs, e.g. [[device,
light], [location, kitchen]]. These are
associated with major constituents such as
NP, PP, VP and S.
 Conjunctions of lists of feature/value pairs,
e.g. [and, [[device, light]], [[device,
heater]]] These represent conjoined con-
stituents, e.g. conjoined NPs, PPs and Ss.
This scheme makes it straightforward to write the
semantic parts of grammar rules. Most often, the
rule just concatenates the semantic contributions
of its daughters: thus for example the semantic
features of the nominal PP rule are simply
NP:[sem=concat(Np, Pp)] -->
NP:[sem=Np]
PP:[sem=Pp]
The semantic output of a conjunction rule is typ-
ically the conjunction of its daughters excluding
the conjunction itself, e.g.
NP:[sem=[and, Np1, Np2]] -->
NP:[sem=Np1]
and
NP:[sem=Np2]
5 Future Plug & Play work
In the future, we intend to move to a system
in which all dialogue components can be recon-
gured by devices. For example, in a complete
Plug and Play scenario, the possible device ac-
tions themselves should be declared by devices
perhaps following UPNP standards in which de-
vices publish all interface commands in the form
actionname(arg
1
...arg
i
) plus an internal state
model of a simple vector of values. In this section
we start with some very general observations on
Plug and Play dialogue management and the role
of inference. Then we outline a proposal for a rule
based formalism.
At a very general level of course, indirections
between executable actions and linguistic contents
can arise at several levels: the speech act level
(\It's too warm in here"), the content level (\How
warm is it?"), as well through underdetermination
of contents either through pronominal or ellipti-
cal constructions. At the moment, our pronom-
inal and elliptical resolution methods depend on
very simple `matching' algorithms. In general, one
might at least want some sort of consistency check
between the linguistic properties expressed in an
utterance and those of candidate objects referred
to. One might expect that inferential elements in
contextual interpretation should be strongly Plug
and Play - they will depend, for correctness and
e?ciency, on tailoring to the current objects in
the domain. The research project of uploading
relevant axioms and meaning postulates from a
device to a general purpose inference engine that
can be invoked in contextual resolution looks very
exciting.
Evidently, higher pragmatic relations between
what the user \strictly says" and possible device
operations are also very heavily inference based.
At the moment, we simply encode any neces-
sary inferences directly into the device grammars
and this su?ces to deal with certain simple be-
haviours. However, the requirement to encapsu-
late all device behaviour in a Plug and Play man-
ner imposes a signicant requirement. For ex-
ample, the most natural interaction with a ther-
mometer is, for example, \How warm is it?" or
\What is the temperature?" and not \Query the
thermometer". In our demonstrator, the (gram-
mar derived) semantic values simply reect di-
rectly the relevant device operations: h op=query
device=thermometeri. The strategy supports the
simple natural interactions it is designed to. It
even interacts tolerably well with our ellipsis and
reference resolution methods. \What is the tem-
perature in the hall? And in the living room?"
and \What is the temperature in the hall? What
is it in the living room?" can both be correctly
interpreted. Other interactions are less natural.
The default output when resolution cannot iden-
tify a device N is \I don't know which N you
mean". However, asking for the temperature in a
room with several thermometers should probably
not result in \I don't know which temperature you
mean". It follows that prescribing all behaviour in
a Plug and Play fashion is a signicant constraint.
Indeed, a more general point can be made here.
A problem has arisen because the inference from
service required to service provider has become in-
secure in the presence of other service providers.
In the highly networked homes of the future, more
sophisticated inference may be required just be-
cause service level concepts will predominate over
device level concepts.
5.1 A Rule based formalism
In this section we assume that semantic
values consist of 5-ary slot-structure with
slots device class (dimmable light, TV . . . ),
device attributes (kitchen, blue . . . ), pronoun
(as before) and device-specifier (as before)
and operation. An operation is the action
the user wants carried out, e.g. switch on,
set level(X), where X is a real number (for
dimmable lights), set program(Y) etc. (for Hi-
Fis, TVs), and so on. As in the grammar, device
classes are ordered in a hierarchy in a standard
object-oriented way. Thus \dimmable light" is a
subclass of \dimmable device" and inherits from
it.
For strong plug and play, at least the follow-
ing information must be loaded by a device into
the dialogue manager: the device interface (e.g.
that the \switchable light" class has a switch on
method; the feedback to the user; the update to
the system's device model generated by executing
the command. Clearly, behaviour can also depend
on the current state. Reaction to \switch on the
kitchen light" depends on whether the lamp is o,
on, and whether there is a kitchen light. We write
a rule as command(A,B,C,D) where A is a com-
mand, B is a class of devices for which A is appli-
cable, C is a list of device attributes whose values
must be known in order to execute A, D is a list of
items describing how the system should react on
A. Each item has the following components:
precondition(X) | X is an executable proce-
dure that tests the network state and returns
true or false. If true, the item can `re'.
action(Y) | Y is the procedure to execute
feedback(Z,R) | Z is the feedback for the user
and can depend on R, the return value from
the device operation
upd(W,R) | W describes how the system's
model of the network state should be up-
dated. Also W can depend on R.
For example switching on
a light might be encoded as
command(switch; switchable light; [id = ID]; D)
where D is a list of items in the above form of
which one describes behaviour when the light is
already o thus:
[ precondition(light off(ID));
action(switch on light(ID));
feedback(light now on(ID); success);
feedback(could not switch(ID); error);
upd([dev update(ID; status= 1)]; success);
upd([]; failure) ]
light off and switch on light are procedures
provided by the lamp. The feedback to the user
and the update rules depend on the result of the
switch on light procedure.
6 Conclusion
Applying the idea of plug and play to spoken di-
alogue interfaces poses a number of interesting
and important problems. Since the linguistic and
dialogue management information is distributed
throughout the network, a plug and play system
must update its speech interface whenever a new
device is connected. In this paper, we have fo-
cussed in particular on distributed grammars for
plug and play speech recognition which we have
integrated into our demonstrator system. We have
also examined some issues and described a possi-
ble approach to distributed dialogue management
which we plan to undertake in further work.
Acknowledgments
We are very grateful to our partners in the
DHomme project for discussion of the above ideas
- especially on the importance and role of dier-
ing strengths of Plug and Play. The DHomme
project partners include netdecisions Ltd, SRI In-
ternational, Telia Research AB, and the Universi-
ties of Edinburgh, Gothenburg and Seville.
References
N.M. Fraser and J.H.S. Thornton. 1995. Vocalist:
A robust, portable spoken language dialogue
system for telephone applications. In Proc. of
Eurospeech '95, pages 1947{1950, Madrid.
Gerald Gazdar, Ewan Klein, Georey Pullum,
and Ivan Sag. 1985. Generalized Phrase Struc-
ture Grammar. Harvard University Press, Cam-
bridge, MA.
J.R Glass. 1999. Challenges for spoken dialogue
systems. In Proc. IEEE ASRU Workshop, Key-
stone, CO.
A. Goldschen and D Loehr. 1999. The role of the
darpa communicator architecture as a human
computer interface for distributed simulations.
In 1999 SISO Spring Simulation Interoperabil-
ity Workshop, Orlando, Florida, March 1999.
SpeechWorks Int Inc, 2001. SpeechWorks.
http://www.speechworks.com. As at 31/01/01.
B. Kiefer and H. Krieger. 2000. A context-free
approximation of head-driven phrase structure
grammar. In Proceedings of 6th Int. Workshop
on Parsing Technologies, pages 135{146.
A. Kolzer. 1999. Universal dialogue specication
for conversational systems. In Proceedings of
IJCAI'99 Workshop on Knowledge & Reason-
ing In Practical Dialogue Systems, Stockholm.
S. Larsson and D. Traum. 2000. Information state
and dialogue management in the trindi dialogue
move engine toolkit. Nat.Lang. Engineering, 6.
Microsoft, 2000. Universal Plug and Play Device
Architecture. http://www.upnp.org. Version
1.0, 8 June 2000.
D. Milward. 2000. Distributing representation for
robust interpretation of dialogue utterances. In
Proc. of 38th ACL, Hong Kong, pages 133{141.
R. Moore. 1998. Using natural language knowl-
edge sources in speech recognition. In Proceed-
ings of the NATO Advanced Studies Institute.
Nuance Communications, 1999. Nuance Speech
Recognition System Developer's Manual version
6.2. 1380 Willow Road, Menlo Park, CA 94025.
S. Oaks and H. Wong. 2000. Jini in a Nutshell.
O'Reilly.
Georey K. Pullum and Gerald Gazdar. 1982.
natural languages and context-free languages.
Llinguistics and Philosophy, 4:471{504.
M. Rayner, J. Dowding, and B.A. Hockey. 2001a.
A baseline method for compiling typed unica-
tion grammars into context free language mod-
els. Proc. Eurospeech 2001, Aalborg.
M. Rayner, G. Gorrell, B.A. Hockey, J. Dowding,
and J. Boye. 2001b. Do cfg based language
models need agreement constraints? In Pro-
ceedings of 2nd NAACL, Pittsburgh.
S. Sutton et al 1998. Universal speech tools: The
cslu toolkit. In Proc. ICSLP-98, pages 3221{
3224.
Figure 1 - Example Dialogue
Network status: There is no TV. There is a VCR
in the TV room.
U1 Switch on the television
S1 Sorry, try again
U2 Add new component (this must precede
device installation)
Now, a TV is plugged into the living room. Cur-
rently we simulate this in a simple text interface,
where devices and rooms are chosen from prede-
ned lists. The speech interface is then automati-
cally recongured (this currently takes 29 seconds)
U3 Switch on the television
S3 The TV is now on
U4 Switch on the television
S4 The TV is already on
U5a Add new component
Now, another TV is plugged into the kitchen. No
speech interface reconguration required this time
U5 Switch on the television
S5 The living-room TV is already on
U6 Switch on the VCR
S6 The VCR is now on
U7 Switch on the television
S7 Sorry, I don't know which TV you mean
U8 The television in the kitchen
S8 The kitchen TV is now on
U9a Add new component
Now, on-o lights are installed in the hall and
bathroom. Reconguration time is 27 seconds
U9 Switch on the light in the hall
S9 The hall light is now on
U10 Dim the light to fty percent
S10 Sorry, try again.
U11a Add new component
Now, a dimmable light is installed in the kitchen.
Reconguration time is 39 seconds
U11 Dim the kitchen light to 50 percent
S11 The light in the kitchen is now on at fty
percent
U12 Dim the light in the hall
S12 I'm sorry, the hall light can only be on or
o
U13 Turn on the light in the kitchen (misheard
as \increase the light in the kitchen")
S13 The kitchen light is now on at sixty per-
cent
