Coverage-based Evaluation of Parser Generalizability 
Tuomo Kakkonen and Erkki Sutinen 
Department of Computer Science and Statistics 
University of Joensuu 
P.O. Box 111, FI-80101 Joensuu, Finland 
{tuomo.kakkonen,erkki.sutinen}@cs.joensuu.fi 
 
 
Abstract 
We have carried out a series of coverage 
evaluations of diverse types of parsers us-
ing texts from several genres such as news-
paper, religious, legal and biomedical texts. 
We compared the overall coverage of the 
evaluated parsers and analyzed the differ-
ences by text genre. The results indicate 
that the coverage typically drops several 
percentage points when parsers are faced 
with texts on genres other than newspapers. 
1 Introduction 
The fact that most of the parser evaluation re-
sources employed consist of texts from a single 
genre constitutes a deficiency in most of the parser 
evaluations. Evaluations are typically carried out 
on newspaper texts, i.e. on section 23 of the Penn 
Treebank (PTB) (Marcus et al, 1993). A further 
complication is that many parsing models are 
trained on the same treebank. Parsers therefore 
come to be applied to texts from numerous other 
genres untested. The obvious question that con-
fronts us in these circumstances is: How well will a 
parser that performs well on financial texts from 
the Wall Street Journal generalize to other text 
types?  
This present paper addresses parser evaluation 
from the perspective of coverage. It is a part of a 
set of evaluations in which selected parsers are 
evaluated using five criteria: preciseness, coverage, 
robustness, efficiency and subtlety. Parsing cover-
age refers to the ability of a parser to produce an 
analysis of sentences of naturally occurring free-
text. We used parsing coverage to assess the gen-
eralizability of the grammars and parsing models 
and we looked for answers to the following re-
search questions: 
? What is the parsing coverage of the evalu-
ated parsers? 
? How does the text genre affect the parsing 
coverage? 
Previous work on evaluation methods and re-
sources is discussed in Section 2. Section 3 de-
scribes the evaluation method and test settings. In 
Section 4, we give the results of the experiments. 
Section 5 concludes with a description of remain-
ing problems and directions for future research. 
2 Preliminaries 
2.1 Coverage Evaluation 
Prasad and Sarkar (2000) observe that the notion of 
coverage has the following two meanings in the 
context of parsing. Grammatical coverage is the 
parser?s ability to handle different linguistic phe-
nomena, and parsing coverage is a measure of the 
percentage of naturally occurring free text in which 
a parser can produce a full parse. We divide pars-
ing coverage further into genre coverage on differ-
ent types of texts such as newspapers, religious, 
biomedicine and fiction.1  
                                                 
1
 The classification of texts in terms of domain, genre, register 
and style is a rather controversial issue (see, for example, dis-
cussion by Lee (2001)). A detailed analysis of these issues 
falls outside of the scope of this paper. We have therefore 
adopted a simplified approach by indicating differences be-
tween texts by using the word genres. One may think of gen-
res (in this sense) as indicating fundamental categorical differ-
ences between texts that are revealed in sets of attributes such 
as domain (e.g. art, science, religion, government), medium 
703
Parsing coverage can be measured as the per-
centage of input sentences to which a parser is able 
to assign a parse. No annotated text is needed for 
performing parsing coverage evaluations. On one 
hand, it can be argued that coverage alone consti-
tutes a rather weak measure of a parser?s perform-
ance, and thus of its generalizability to diverse text 
genres. An obvious problem with measuring cov-
erage alone is that a parser returning undetailed 
and flat analyses will easily get high coverage, 
whereas a parser that outputs detailed analyses will 
suffer in covering all the input sentences. More-
over, preciseness and coverage can be seen as con-
flicting requirements for a parser. Increasing pre-
ciseness of the grammar often causes its coverage 
to decrease; adding more constraints to the gram-
mar causes some of the sentences to be rejected 
even they are acceptable to users of the language. 
Loosening the constraints allows more sentences to 
be parsed, thus increasing the coverage, but at the 
same time easily leads into overgeneration, prob-
lems with disambiguation and decreased precise-
ness.  
On the other hand, the points that we raised 
above indicate that there is a strong relationship 
between coverage and preciseness. The aim of syn-
tactic parsers is to analyze whole sentences, not 
just fragments (constituents/D links) precisely. The 
connection between coverage and preciseness is 
clear in the case of sentence level evaluations 
measures2: A sentence that cannot be fully ana-
lyzed cannot have a complete match with the cor-
rect structure in the evaluation resource. Conse-
quently, we argue that coverage can be used a 
measure of generalizability; It sets the upper bound 
for the performance on the sentence-level evalua-
tion measures. However, the evaluation should al-
ways be accompanied with data on the preciseness 
of the parser and the level of detail in its output. 
2.2 Previous Coverage and Cross-genre 
Evaluations 
Relatively little work has been done on the empiri-
cal evaluation of parsers for text types other than 
newspaper texts. A key issue in available evalua-
                                                                             
(e.g. spoken, written), content (topic, theme) and type (narra-
tive, argumentation, etc.). 
2
 For example Yamada & Matsumoto (2003) uses complete 
match metric (the percentage of sentences whose unlabeled D 
structure is completely correct) to evaluate the sentence-level 
preciseness of D parsers. 
tion materials is the genre homogeneity. Almost all 
the available resources are based on a single genre 
(nearly always newspaper texts). This makes it im-
possible to extrapolate anything useful about the 
generalizability of the developed grammars and 
parsing models. 
To our knowledge, this experiment is the only 
one reported in the literature that compares the 
coverage of a set of parsers for English. The stud-
ies that critically examine the genre dependency 
have come to the same unsurprising conclusion 
that the text genre has an effect on the parser?s per-
formance. The genre dependency of parsers is an 
accepted fact and has been described by, among 
others, Sekine (1997) and Gildea (2001). For ex-
ample, Clegg and Shepherd (2005) have under-
taken experiments on biomedical data using the 
GENIA treebank. Laakso (2005) reports experi-
ments on the CHILDES corpus of transcribed 
speech between parents and the children. Mazzei 
and Lombardo (2004) report cross-training ex-
periments in Italian on newspaper and civil law 
texts. They observed a dramatic drop of, most 
commonly, around 10-30 percentage points in the 
parsing coverage. 
2.3 Reasons for the Coverage Drop 
Genre dependency is caused by several factors. 
One is that each text genre is characterized by 
genre-specific words (Biber, 1993). Another fea-
ture of genre dependency is syntactic structure dis-
tributions. Baldwin et al (2004) have conducted 
one of the rare studies that offer an analysis of the 
main reasons for the diminished coverage. They 
experimented with an HPSG grammar that was a 
created manually based on a corpus of data ex-
tracted from informal genres such as conversations 
about schedules and e-mails about e-commerce. 
The grammar was used for parsing a random sam-
ple of texts from several genres. A diagnosis of 
failures to parse sentences with full lexical span3 
revealed the following causes for the errors: miss-
ing lexical entries (40%), missing constructions 
(39%), preprocessor errors (4%), fragments (4%), 
parser failures (4%), and garbage strings (11%). 
They came to the conclusion that lexical expansion 
should be the first step in the process of parser en-
hancement. 
                                                 
3
 Sentences that contained only words included in the lexicon. 
704
3 Experiments 
3.1 Research Approach 
In order to investigate the effect of the text genre 
on the parsing results, we constructed a test corpus 
of more than 800,000 sentences and divided them 
into six genres. We parsed these texts by using five 
parsing systems.  
The design of our test settings and materials was 
guided by our research questions (above). We an-
swered the first question by parsing vast document 
collections with several state-of-the-art parsing 
systems and then measuring their parsing coverage 
on the data. Because we had divided our purpose-
built test set into genre-specific subsets, this al-
lowed us to measure the effects of genre variance 
and so provide an answer to the second research 
question. We also included two parsers that had 
been developed in the 1990s to evaluate the extent 
to which progress has been made in parsing tech-
nology in genre dependency and parsing coverage. 
3.2 Evaluation Metric and Measures 
The most important decision in parsing coverage 
evaluation is how the distinction between a cov-
ered and uncovered sentence is made. This has to 
be defined separately for each parser and the defi-
nition depends on the type of output. We imple-
mented a set of Java tools to record the statistics 
from the parsers? outputs. In addition to completely 
failed parses, we recorded information about in-
complete analyses and the number of times the 
parsers crashed or terminated during parsing. 
3.3 Materials 
The test set consisted of 826,485 sentences divided 
into six sub-corpora. In order to cover several gen-
res and to guarantee the diversity of the text types, 
we sourced a diversity of materials from several 
collections. There are six sub-corpora in the mate-
rial and each covers one of the following genres: 
newspaper, legislation, fiction, non-fiction, religion 
and biomedicine.  
Table 1 shows the sub-corpora and the figures 
associated with each corpus. In total there were 
15,385,855 tokens. The style of the newspaper 
texts led us to make an initial hypothesis that a 
similar performance would probably be achievable 
with non-fiction texts, and we suspected that the 
legislative and fiction texts might be more difficult 
to parse because of the stylistic idiosyncrasies in-
volved. Biomedical texts also contained a consid-
erable number of words that are probably not 
found in the lexicons. These two difficulties were 
compounded in the religious texts, and the average 
length of the religion sub-corpus was far higher 
than the average. 
Table 1. The test sets. 
3.4 The Parsers 
We included both dependency (D)- and phrase 
structure (PS)-based systems in the experiment. 
The parsers use a Probabilistic Context-free 
Grammar (PCFG), Combinatory Categorial 
Grammar (CCG), a semi-context sensitive gram-
mar and a D-based grammar. 
Apple Pie Parser (APP) (v. 5.9, 4 April 1997) is 
a bottom-up probabilistic chart parser which finds 
the analysis with the best score by means of best-
first search algorithm (Sekine, 1998). It uses a 
semi-context sensitive grammar obtained auto-
matically from the PTB. The parser outputs a PS 
analysis consisting of 20 syntactic tags. No word-
level analysis is assigned. We regard a sentence as 
having been covered if APP finds a single S non-
terminal which dominates the whole sentence and 
if it does not contain any X tags which would indi-
cate constituents of unrecognized category. 
C&C Parser (v. 0.96, 23 November 2006) is 
based on a CCG. It applies log-linear probabilistic 
tagging and parsing models (Clark and Curran, 
2004). Because the parser marks every output as 
Genre Description 
No. of 
sen-
tences A
v
g.
 
le
n
gt
h 
Legislation Discussions of the Canadian Parliament 390,042 17.2 
Newspaper Texts from several 
newspapers 217,262 19.5 
Fiction Novels from the 20th 
and 21st century 97,156 15.9 
Non-fiction 
Non-fiction books 
from the 20th and 
21st century 
61,911 21.9 
Religion The Bible, the Koran, the Book of Mormon 45,459 27.1 
Biomedi-
cine 
Abstracts from bio-
medical journals 14,655 21.6 
TOTAL 826,485 18.6 
705
either parsed or failed, evaluation of failed parses 
is straightforward. Fragmented parses were de-
tected from the grammatical relations (GR) output. 
Because GR representations can form cycles, an 
analysis was not required to have a unique root. 
Instead, a parse was regarded as being incomplete 
if, after projecting each GR to a graph allowing 
cycles, more than one connected set (indicating a 
fragmented analysis) was found. 
MINIPAR (unknown version, 1998) is a princi-
ple-based parser applying a distributed chart algo-
rithm and a D-style grammar (Lin, 1998). The syn-
tactic tagset comprises 27 grammatical relation 
types and word and phrase types are marked with 
20 tags. A sentence is regarded as having been 
covered by MINIPAR if a single root is found for 
it that is connected to all the words in the sentence 
through a path. The root should in addition be as-
signed with a phrase/sentence type marker. 
Stanford Parser (referred in the remainder of 
this text as SP) (v. 1.5.1, 30 May 2006) can use 
both an unlexicalized and lexicalized PCFGs 
(Klein and Manning, 2003). This parser uses a 
CYK search algorithm and can output both D and 
PS analyses (de Marneffe et al, 2006). We ran the 
experiment on the unlexicalized grammar and car-
ried out the evaluation on the D output consisting 
of 48 D types. We regard a sentence as having 
been covered by SP in a way similar to that in 
MINIPAR: the sentence is covered if the D tree 
returned by the parser has a single root node in 
which there is a path to all the other nodes in the 
tree. 
StatCCG (Preliminary public release, 14 January 
2004) is a statistical parser for CCG that was de-
veloped by Julia Hockenmaier (2003). In contrast 
to C&C, this parser is based on a generative prob-
abilistic model. The lexical category set has around 
1,200 types, and there are four atomic types in the 
syntactic description. StatCCG marks every rele-
vant sentence as ?failed? or ?too long? in its output. 
We were therefore able to calculate the failed 
parses directly from the system output. We re-
garded parses as being partially covered when no 
sentence level non-terminal was found.  
3.5 Test Settings 
We wanted to create similar and equal condi-
tions for all parsers throughout the evaluation. 
Moreover, language processing applications that 
involve parsing must incorporate practical limits 
on resource consumption. 4 Hence, we limited the 
use of memory to the same value for all the parsers 
and experiments. 5 We selected 650 MB as the up-
per limit. It is a realistic setting for free working 
memory in a typical personal computer with 1 GB 
memory. 
4 Results 
Table 2 summarizes the results of the experiments. 
The parsing coverage of the parsers for each of the 
sub-corpora is reported separately. Total figures 
are given for both parser and sub-corpus level. In 
Table 3, the coverage figures are further broken 
down to indicate the percentage of the analyses 
that failed or were incomplete or those occasions 
on which the parser crashed or terminated during 
the process. 
The five parsers were able to cover, on average, 
88.8% of the sentences. The coverage was, unsur-
prisingly, highest on the newspaper genre. The 
lowest average coverage was achieved on the relig-
ion genre. The difficulties in parsing the religious 
texts are attributable at least in part to the length of 
the sentences in the sub-corpus (on average 27.1 
words per sentence), which was the highest over 
all the genres. Contrary to our expectation, the 
biomedical genre, with its specialist terminology, 
was not the most difficult genre for the parsers. 
If one excludes the one-word sentences from the 
legislation dataset, SP had the best coverage and 
best generalizability over the text genres. APP was 
the second best performer in this experiment, both 
in coverage and generalizability. While APP pro-
duces shallow parses, this helps it to obtain a high 
coverage. Moreover, comparing the F-scores re-
ported in the literature for the five parsers revealed 
that the F-score (70.1) of this parser was more than 
10 percentage points lower than the score of the 
second worst parser MINIPAR. Thus, it is obvious 
that the high coverage in APP is achieved at the 
cost of preciseness and lack of detail in the output. 
 
                                                 
4
 In addition, parsing in the order of hundreds of thousands of 
sentences with five parsers takes thousands of hours of proces-
sor time. It was therefore necessary for us to limit the memory 
consumption in order to be able to run the experiments in par-
allel. 
5
 Several methods were used for limiting the memory usage 
depending on the parser. For example, in the Java-based pars-
ers, the limit was set on the size of the Java heap. 
706
Table 2. Comparison of the parsing results for each sub-corpus and parser. ?Average? column gives the 
average of the coverage figures for the six genres weighted according to the number of sentences in each 
genre. The column labeled ?Generalizability? shows the drop of the coverage in the lowest-scoring genre 
compared to the coverage in the newspaper genre. 
*SP experienced a coverage drop of tens of percentage points in comparison to other genres on the Hansard data-
set. This was caused mainly by a single issue: the dataset contained a number of sentences that contained only a sin-
gle word ? sentences such as ?Nay.?, ?Agreed.?, ?No.? and so on. Because no root node is assigned to D analysis by 
SP, the parser did not return any analysis for such sentences. These sentences were omitted from the evaluation. 
When the sentences were included, the coverage on legislation data was 59.5% and the average was 73.4%. 
 
Table 3. Breakdown of the failures. All the results 
are reported as a percentage of the total number of 
sentences. Column ?Incomplete? reports the pro-
portion of sentences that were parsed, but the 
analysis was not full. Column ?Failed? shows those 
cases in which the parser was not able to return a 
parse. Column ?Terminated? shows the proportion 
of the cases in which the parser crashed or termi-
nated during the process of parsing a sentence. 
 
While StatCCG outperformed C&C parser by 
4.1 percentage points in average coverage, the two 
CCG-based parsers achieved a similar generaliza-
bility. StatCCG was the most stable parser in the 
experiment. It did not crash or terminate once on 
the test data. 
The only parser based on a manually-
constructed grammar, MINIPAR, had the lowest 
coverage and generalizability. MINIPAR also 
proved to have stability problems. While this 
parser achieved an 88.0% coverage with the news-
paper corpus, its performance dropped over 10 
percentage points with other corpora. Its coverage 
was only 34.4% with the religion genre. The most 
commonly occurring type of problem with this 
data was a fragmented analysis occasioned by sen-
tences beginning with an ?And? or ?Or? that was 
not connected to any other words in the parse tree. 
5 Conclusion 
This paper describes our experiments in parsing 
diverse text types with five parsers operating with 
four different grammar formalisms. To our knowl-
edge, this experiment is the only large-scale com-
parison of the coverage of a set of parsers for Eng-
lish reported in the literature. On average, the pars-
ing coverage of the five parsers on newspaper texts 
was 94.4%. The average dropped from 5.6 to 15.2 
percentage points on the other five text genres. The 
lowest average scores were achieved on the relig-
ion test set. 
In comparison to MINIPAR, the results indicate 
that the coverage of the newer parsers has im-
proved. The good performance of the APP may 
partly be explained by a rather poor preciseness: 
the rate of just over 70% is much lower than that of 
other parsers. APP also produces a shallow analy-
sis that enables it to achieve a high coverage.  
One observation that should be made relates to 
the user friendliness and documentation of the 
parsing systems. The parsing of a vast collection of 
texts using several parsing systems was neither 
simple nor straightforward. To begin with, most of 
the parsers crashed at least once during the course 
of the experiments. The C&C parser, for example, 
terminates when it encounters a sentence with two 
spaces between words. It would be far more con-
Parser Newspaper Legislation Fiction Non-fiction Religion Biomedi-
cine Average 
Gener-
alizability 
APP 99.8 98.9 97.5 96.4 93.1 98.9 98.5 6.7 
C&C 87.8 84.9 86.0 81.2 75.5 84.8 85.0 14.0 
MINIPAR 88.0 68.8 68.0 71.5 34.4 70.1 72.1 60.9 
SP* 99.8 99.5 98.0 98.3 98.9 98.5 99.2 1.8 
StatCCG 96.7 85.2 87.7 86.7 94.0 83.3 89.1 13.9 
Average 94.4 87.5 87.4 86.8 79.2 87.1 88.8 19.5 
Parser Incomplete Failed Terminated 
APP 1.5 0.0 0.001 
C&C 12.8 2.2 0.006 
MINIPAR 27.9 0.0 0.009 
SP 0.5 0.4 0.002 
StatCCG 9.6 1.4 0.000 
Average 10.5 0.8 0.004 
707
venient for users if such sentences were automati-
cally skipped or normalized.  
While another feature is that all the parsers have 
a set of parameters that can be adjusted, the ac-
companying documentation about their effects is in 
many cases insufficiently detailed. From the NLP 
practitioner?s point of view, the process of select-
ing an appropriate parser for a given task is com-
plicated by the fact that the output format of a 
parser is frequently described in insufficient detail. 
It would also be useful in many NLP applications 
if the parser were able to indicate whether or not it 
could parse a sentence completely. It would also be 
optimal if a confidence score indicating the reli-
ability of the returned analysis could be provided.  
The most obvious directions for work of this 
kind would include other text genres, larger collec-
tions of texts and more parsers. One could also 
pinpoint the most problematic types of sentence 
structures by applying error-mining techniques to 
the results of the experiments. 
References 
Timothy Baldwin, Emily M. Bender, Dan Flickinger, 
Ara Kim, and Stephan Oepen. 2004. Road-testing the 
English Resource Grammar over the British National 
Corpus. In Proceedings of the 4th Language Re-
sources and Evaluation Conference (LREC), Lisbon, 
Portugal. 
Douglas Biber. 1993. Using Register-diversified Cor-
pora for General Language Studies. Computational 
Linguistics, 19(2):219?241. 
Stephen Clark and James R. Curran. 2004. Parsing the 
WSJ using CCG and Log-Linear Models. In Pro-
ceedings of the 42nd ACL, Barcelona, Spain. 
Andrew B. Clegg and Adrian J. Shepherd. 2005. Evalu-
ating and Integrating Treebank Parsers on a Bio-
medical Corpus. In Proceedings of the Workshop on 
Software at the 43rd ACL, Ann Arbor, Michigan, 
USA. 
Marie-Catherine de Marneffe, Bill MacCartney, and 
Christopher D. Manning. 2006. Generating Typed 
Dependency Parses from Phrase Structure Parses. In 
Proceedings of the 5th LREC, Genoa, Italy. 
Daniel Gildea. 2001. Corpus Variation and Parser Per-
formance. In Proceedings of the 2001 Conference on 
Empirical Methods in Natural Language Processing, 
Pittsburgh, Pennsylvania, USA. 
Julia Hockenmaier. 2003. Data and Models for Statisti-
cal Parsing with Combinatory Categorial Grammar. 
PhD Dissertation, University of Edinburgh, UK. 
Dan Klein and Christopher D. Manning. 2003. Accurate 
Unlexicalized Parsing. In Proceedings of the 41st 
ACL, Sapporo, Japan. 
Aarre Laakso. On Parsing CHILDES. 2005. In Proceed-
ings of the Second Midwest Computational Linguis-
tics Colloquium. Columbus, Ohio, USA, 
David Lee. 2001. Genres, Registers, Text Types, Do-
mains, and Styles: Clarifying the Concepts and Navi-
gating a Path through the BNC Jungle. Language 
Learning & Technology, 5(3):37?72. 
Dekang Lin. 1998. Dependency-Based Evaluation of 
MINIPAR. In Proceedings of the 1st LREC, Gra-
nada, Spain. 
Mitchell P. Marcus, Beatrice Santorini, and Mary Ann 
Marcinkiewicz. 1993. Building a Large Annotated 
Corpus of English: The Penn Treebank. Computa-
tional Linguistics, 19(2):313?330. 
Alessandro Mazzei and Vincenzo Lombardo. 2004. A 
Comparative Analysis of Extracted Grammars. In 
Proceedings of the 16th European Conference on Ar-
tificial Intelligence, Valencia, Spain. 
Rashmi Prasad and Anoop Sarkar. 2000. Comparing 
Test-suite Based Evaluation and Corpus-based 
Evaluation of a Wide Coverage Grammar for Eng-
lish. In Proceedings of the Using Evaluation within 
HLT Programs: Results and Trends Workshop at the 
2nd LREC, Athens, Greece. 
Geoffrey Sampson, editor. 1995. English for the Com-
puter: The Susanne Corpus and Analytic Scheme. 
Oxford University Press, Oxford, UK. 
Satoshi Sekine. 1997. The Domain Dependence of Pars-
ing. In Proceedings of the 5th Conference on Applied 
Natural Language Processing, Washington, DC, 
USA. 
Satoshi Sekine. 1998. Corpus-based Parsing and Sub-
language Studies. PhD Thesis. New York University, 
New York, USA. 
Hiroyasu Yamada and Yuji Matsumoto. 2003. Statisti-
cal Dependency Analysis with Support Vector Ma-
chines. In Proceedings of the 8th International Work-
shop on Parsing Technologies, Nancy, France. 
708
Proceedings of the 2nd Workshop on Building Educational Applications Using NLP,
pages 29?36, Ann Arbor, June 2005. c?Association for Computational Linguistics, 2005
Automatic Essay Grading with Probabilistic Latent Semantic Analysis
Tuomo Kakkonen, Niko Myller, Jari Timonen, and Erkki Sutinen
Department of Computer Science, University of Joensuu
P.O. Box 111, FI-80101 Joensuu, FINLAND
firstname.lastname@cs.joensuu.fi
Abstract
Probabilistic Latent Semantic Analysis
(PLSA) is an information retrieval tech-
nique proposed to improve the problems
found in Latent Semantic Analysis (LSA).
We have applied both LSA and PLSA in
our system for grading essays written in
Finnish, called Automatic Essay Assessor
(AEA). We report the results comparing
PLSA and LSA with three essay sets from
various subjects. The methods were found
to be almost equal in the accuracy mea-
sured by Spearman correlation between
the grades given by the system and a hu-
man. Furthermore, we propose methods
for improving the usage of PLSA in essay
grading.
1 Introduction
The main motivations behind developing automated
essay assessment systems are to decrease the time in
which students get feedback for their writings, and
to reduce the costs of grading. The assumption in
most of the systems is that the grades given by the
human assessors describe the true quality of an es-
say. Thus, the aim of the systems is to ?simulate?
the grading process of a human grader and a sys-
tem is usable only if it is able to perform the grad-
ing as accurately as human raters. An automated as-
sessment system is not affected by errors caused by
lack of consistency, fatigue or bias, thus it can help
achieving better accuracy and objectivity of assess-
ment (Page and Petersen, 1995).
There has been research on automatic essay grad-
ing since the 1960s. The earliest systems, such as
PEG (Page and Petersen, 1995), based their grad-
ing on the surface information from the essay. For
example, the number of words and commas were
counted in order to determine the quality of the es-
says (Page, 1966). Although these kinds of sys-
tems performed considerably well, they also re-
ceived heavy criticism (Page and Petersen, 1995).
Some researchers consider the use of natural lan-
guage as a feature for human intelligence (Hearst
et al, 2000) and writing as a method to express
the intelligence. Based on that assumption, tak-
ing the surface information into account and ignor-
ing the meanings of the content is insufficient. Re-
cent systems and studies, such as e-rater (Burstein,
2003) and approaches based on LSA (Landauer et
al., 1998), have focused on developing the methods
which determine the quality of the essays with more
analytic measures such as syntactic and semantic
structure of the essays. At the same time in the
1990s, the progress of natural language processing
and information retrieval techniques have given the
opportunity to take also the meanings into account.
LSA has produced promising results in content
analysis of essays (Landauer et al, 1997; Foltz et
al., 1999b). Intelligent Essay Assessor (Foltz et
al., 1999b) and Select-a-Kibitzer (Wiemer-Hastings
and Graesser, 2000) apply LSA for assessing essays
written in English. In Apex (Lemaire and Dessus,
2001), LSA is applied to essays written in French. In
addition to the essay assessment, LSA is applied to
other educational applications. An intelligent tutor-
ing system for providing help for students (Wiemer-
29
Hastings et al, 1999) and Summary Street (Stein-
hart, 2000), which is a system for assessing sum-
maries, are some examples of other applications of
LSA. To our knowledge, there is no system utilizing
PLSA (Hofmann, 2001) for automated essay assess-
ment or related tasks.
We have developed an essay grading system, Au-
tomatic Essay Assessor (AEA), to be used to ana-
lyze essay answers written in Finnish, although the
system is designed in a way that it is not limited to
only one language. It applies both course materials,
such as passages from lecture notes and course text-
books covering the assignment-specific knowledge,
and essays graded by humans to build the model for
assessment. In this study, we employ both LSA and
PLSA methods to determine the similarities between
the essays and the comparison materials in order to
determine the grades. We compare the accuracy of
these methods by using the Spearman correlation be-
tween computer and human assigned grades.
The paper is organized as follows. Section 2 ex-
plains the architecture of AEA and the used grading
methods. The experiment and results are discussed
in Section 3. Conclusions and future work based on
the experiment are presented in Section 4.
2 AEA System
We have developed a system for automated assess-
ment of essays (Kakkonen et al, 2004; Kakkonen
and Sutinen, 2004). In this section, we explain the
basic architecture of the system and describe the
methods used to analyze essays.
2.1 Architecture of AEA
There are two approaches commonly used in the es-
say grading systems to determine the grade for the
essay:
1. The essay to be graded is compared to the
human-graded essays and the grade is based on
the most similar essays? grades; or
2. The essay to be graded is compared to the essay
topic related materials (e.g. textbook or model
essays) and the grade is given based on the sim-
ilarity to these materials.
In our system, AEA (Kakkonen and Sutinen, 2004),
we have combined these two approaches. The rel-
evant parts of the learning materials, such as chap-
ters of a textbook, are used to train the system with
assignment-specific knowledge. The approaches
based on the comparison between the essays to be
graded and the textbook have been introduced in
(Landauer et al, 1997; Foltz et al, 1999a; Lemaire
and Dessus, 2001; Hearst et al, 2000), but have been
usually found less accurate than the methods based
on comparison to prescored essays. Our method
attempts to overcome this by combining the use
of course content and prescored essays. The es-
says to be graded are not directly compared to the
prescored essays with for instance k-nearest neigh-
bors method, but prescored essays are used to deter-
mine the similarity threshold values for grade cat-
egories as discussed below. Prescored essays can
also be used to determine the optimal dimension for
the reduced matrix in LSA as discussed in Kakko-
nen et al (2005).
Figure 1: The grading process of AEA.
Figure 1 illustrates the grading process of our sys-
tem. The texts to be analyzed are added into word-
by-context matrix (WCM), representing the number
of occurrences of each unique word in each of the
contexts (e.g. documents, paragraphs or sentences).
In WCM M , cell Mij contains the count of the word
i occurrences in the context j. As the first step in an-
alyzing the essays and course materials, the lemma
of each word form occurring in the texts must be
found. We have so far applied AEA only to essays
written in Finnish. Finnish is morphologically more
complex than English, and word forms are formed
by adding suffixes into base forms. Because of that,
30
base forms have to be used instead of inflectional
forms when building the WCM, especially if a rel-
atively small corpus is utilized. Furthermore, sev-
eral words can become synonyms when suffixes are
added to them, thus making the word sense disam-
biguation necessary. Hence, instead of just stripping
suffixes, we apply a more sophisticated method,
a morphological parser and disambiguator, namely
Constraint Grammar parser for Finnish (FINCG) to
produce the lemmas for each word (Lingsoft, 2005).
In addition, the most commonly occurring words
(stopwords) are not included in the matrix, and only
the words that appear in at least two contexts are
added into the WCM (Landauer et al, 1998). We
also apply entropy-based term weighting in order to
give higher values to words that are more important
for the content and lower values to words with less
importance.
First, the comparison materials based on the rel-
evant textbook passages or other course materials
are modified into machine readable form with the
method described in the previous paragraph. The
vector for each context in the comparison materials
is marked with Yi. This WCM is used to create the
model with LSA, PLSA or another information re-
trieval method. To compare the similarity of an es-
say to the course materials, a query vector Xj of the
same form as the vectors in the WCM is constructed.
The query vector Xj representing an essay is added
or folded in into the model build with WCM with the
method specific way discussed later. This folded-
in query X?j is then compared to the model of each
text passage Y?i in the comparison material by using a
similarity measure to determine the similarity value.
We have used the cosine of the angle between (X?j ,
Y?i), to measure the similarity of two documents. The
similarity score for an essay is calculated as the sum
of the similarities between the essay and each of the
textbook passages.
The document vectors of manually graded es-
says are compared to the textbook passages, in
order to determine the similarity scores between
the essays and the course materials. Based on
these measures, threshold values for the grade cat-
egories are defined as follows: the grade categories,
g1, g2, . . . , gC , are associated with similarity value
limits, l1, l2, . . . , lC+1, where C is the number of
grades, and lC+1 = ? and normally l1 = 0 or
??. Other category limits li, 2 ? i ? C, are de-
fined as weighted averages of the similarity scores
for essays belonging to grade categories gi and gi?1.
Other kinds of formulas to define the grade category
limits can be also used.
The grade for each essay to be graded is then de-
termined by calculating the similarity score between
the essay and the textbook passages and comparing
the similarity score to the threshold values defined in
the previous phase. The similarity score Si of an es-
say di is matched to the grade categories according
to their limits in order to determine the correct grade
category as follows: For each i, 1 ? i ? C,
if li < Si ? li+1 then di ? gi and break.
2.2 Latent Semantic Analysis
Latent Semantic Analysis (LSA) (Landauer et al,
1998) is a corpus-based method used in informa-
tion retrieval with vector space models. It provides
a means of comparing the semantic similarity be-
tween the source and target texts. LSA has been
successfully applied to automate giving grades and
feedback on free-text responses in several systems
as discussed in Section 1. The basic assumption
behind LSA is that there is a close relationship be-
tween the meaning of a text and the words in that
text. The power of LSA lies in the fact that it is able
to map the essays with similar wordings closer to
each other in the vector space. The LSA method is
able to strengthen the similarity between two texts
even when they do not contain common words. We
describe briefly the technical details of the method.
The essence of LSA is dimension reduction based
on the singular value decomposition (SVD), an al-
gebraic technique. SVD is a form of factor analy-
sis, which reduces the dimensionality of the origi-
nal WCM and thereby increases the dependency be-
tween contexts and words (Landauer et al, 1998).
SVD is defined as X = T0S0D0T , where X is the
preprocessed WCM and T0 and D0 are orthonormal
matrices representing the words and the contexts. S0
is a diagonal matrix with singular values. In the di-
mension reduction, the k highest singular values in
S0 are selected and the rest are ignored. With this
operation, an approximation matrix X? of the origi-
nal matrix X is acquired. The aim of the dimension
reduction is to reduce ?noise? or unimportant details
and to allow the underlying semantic structure to be-
31
come evident (Deerwester et al, 1990).
In information retrieval and essay grading, the
queries or essays have to be folded in into the model
in order to calculate the similarities between the doc-
uments in the model and the query. In LSA, the fold-
ing in can be achieved with a simple matrix multipli-
cation: X?q = XTq T0S?10 , where Xq is the term vec-
tor constructed from the query document with pre-
processing, and T0 and S0 are the matrices from the
SVD of the model after dimension reduction. The
resulting vector X?q is in the same format as the doc-
uments in the model.
The features that make LSA suitable for auto-
mated grading of essays can be summarized as fol-
lows. First, the method focuses on the content of
the essay, not on the surface features or keyword-
based content analysis. The second advantage is that
LSA-based scoring can be performed with relatively
low amount of human graded essays. Other meth-
ods, such as PEG and e-rater typically need several
hundred essays to be able to form an assignment-
specific model (Shermis et al, 2001; Burstein and
Marcu, 2000) whereas LSA-based IEA system has
sometimes been calibrated with as few as 20 essays,
though it typically needs more essays (Hearst et al,
2000).
Although LSA has been successfully applied in
information retrieval and related fields, it has also re-
ceived criticism (Hofmann, 2001; Blei et al, 2003).
The objective function determining the optimal de-
composition in LSA is the Frobenius norm. This
corresponds to an implicit additive Gaussian noise
assumption on the counts and may be inadequate.
This seems to be acceptable with small document
collections but with large document collections it
might have a negative effect. LSA does not define
a properly normalized probability distribution and,
even worse, the approximation matrix may contain
negative entries meaning that a document contains
negative number of certain words after the dimen-
sion reduction. Hence, it is impossible to treat LSA
as a generative language model and moreover, the
use of different similarity measures is limited. Fur-
thermore, there is no obvious interpretation of the
directions in the latent semantic space. This might
have an effect if also feedback is given. Choosing
the number of dimensions in LSA is typically based
on an ad hoc heuristics. However, there is research
done aiming to resolve the problem of dimension se-
lection in LSA, especially in the essay grading do-
main (Kakkonen et al, 2005).
2.3 Probabilistic Latent Semantic Analysis
Probabilistic Latent Semantic Analysis (PLSA)
(Hofmann, 2001) is based on a statistical model
which has been called the aspect model. The aspect
model is a latent variable model for co-occurrence
data, which associates unobserved class variables
zk, k ? {1, 2, . . . , K} with each observation. In our
settings, the observation is an occurrence of a word
wj , j ? {1, 2, . . . , M}, in a particular context di,
i ? {1, 2, . . . , N}. The probabilities related to this
model are defined as follows:
? P (di) denotes the probability that a word oc-
currence will be observed in a particular con-
text di;
? P (wj |zk) denotes the class-conditional proba-
bility of a specific word conditioned on the un-
observed class variable zk; and
? P (zk|di) denotes a context specific probability
distribution over the latent variable space.
When using PLSA in essay grading or information
retrieval, the first goal is to build up the model. In
other words, approximate the probability mass func-
tions with machine learning from the training data,
in our case the comparison material consisting of as-
signment specific texts.
Expectation Maximization (EM) algorithm can be
used in the model building with maximum likeli-
hood formulation of the learning task (Dempster et
al., 1977). In EM, the algorithm alternates between
two steps: (i) an expectation (E) step where posterior
probabilities are computed for the latent variables,
based on the current estimates of the parameters, (ii)
a maximization (M) step, where parameters are up-
dated based on the loglikelihood which depends on
the posterior probabilities computed in the E-step.
The standard E-step is defined in equation (1).
P (zk|di, wj) =
P (wj |zk)P (zk|di)
?K
l=1 P (wj |zl)P (zl|di)
(1)
The M-step is formulated in equations (2) and (3)
as derived by Hofmann (2001). These two steps
32
are alternated until a termination condition is met,
in this case, when the maximum likelihood function
has converged.
P (wj |zk) =
?N
i=1 n(di, wj)P (zk|di, wj)
?M
m=1
?N
i=1 n(di, wm)P (zk|di, wm)
(2)
P (zk|di) =
?M
j=1 n(di, wj)P (zk|di, wj)
?M
m=1 n(di, wm)
(3)
Although standard EM algorithm can lead to good
results, it may also overfit the model to the train-
ing data and perform poorly with unseen data. Fur-
thermore, the algorithm is iterative and converges
slowly, which can increase the runtime seriously.
Hence, Hofmann (2001) proposes another approach
called Tempered EM (TEM), which is a derivation of
standard EM algorithm. In TEM, the M-step is the
same as in EM, but a dampening parameter is intro-
duced into the E-step as shown in equation (4). The
parameter ? will dampen the posterior probabilities
closer to uniform distribution, when ? < 1 and form
the standard E-step when ? = 1.
P (zk|di, wj) =
(P (wj |zk)P (zk|di))?
(
?K
l=1 P (wj |zl)P (zl|di)
)? (4)
Hofmann (2001) defines the TEM algorithm as
follows:
1. Set ? := 1 and perform the standard EM with
early stopping.
2. Set ? := ?? (with ? < 1).
3. Repeat the E- and M-steps until the perfor-
mance on hold-out data deteriorates, otherwise
go to step 2.
4. Stop the iteration when decreasing ? does not
improve performance on hold-out data.
Early stopping means that the optimization is not
done until the model converges, but the iteration is
stopped already once the performance on hold-out
data degenerates. Hofmann (2001) proposes to use
the perplexity to measure the generalization perfor-
mance of the model and the stopping condition for
the early stopping. The perplexity is defined as the
log-averaged inverse probability on unseen data cal-
culated as in equation (5).
P = exp
(
?
?
i,j n?(di, wj) log P (wj |di)
?
i,j n?(di, wj)
)
, (5)
where n?(di, wj) is the count on hold-out or training
data.
In PLSA, the folding in is done by using TEM
as well. The only difference when folding in a new
document or query q outside the model is that just
the probabilities P (zk|q) are updated during the M-
step and the P (wj |zk) are kept as they are. The sim-
ilarities between a document di in the model and a
query q folded in to the model can be calculated with
the cosine of the angle between the vectors contain-
ing the probability distributions (P (zk|q))Kk=1 and
(P (zk|di))Kk=1 (Hofmann, 2001).
PLSA, unlike LSA, defines proper probability
distributions to the documents and has its basis in
Statistics. It belongs to a framework called Latent
Dirichlet Allocations (Girolami and Kaba?n, 2003;
Blei et al, 2003), which gives a better grounding for
this method. For instance, several probabilistic sim-
ilarity measures can be used. PLSA is interpretable
with its generative model, latent classes and illus-
trations in N -dimensional space (Hofmann, 2001).
The latent classes or topics can be used to determine
which part of the comparison materials the student
has answered and which ones not.
In empirical research conducted by Hof-
mann (2001), PLSA yielded equal or better results
compared to LSA in the contexts of information
retrieval. It was also shown that the accuracy of
PLSA can increase when the number of latent
variables is increased. Furthermore, the combina-
tion of several similarity scores (e.g. cosines of
angles between two documents) from models with
different number of latent variables also increases
the overall accuracy. Therefore, the selection of the
dimension is not as crucial as in LSA. The problem
with PLSA is that the algorithm used to computate
the model, EM or its variant, is probabilistic and can
converge to a local maximum. However, according
to Hofmann (2001), this is not a problem since the
differences between separate runs are small. Flaws
in the generative model and the overfitting problem
33
Set Field Training Test Grading Course Comp. mat. No. No.
No. essays essays scale materials division type Passages Words
1 Education 70 73 0?6 Textbook Paragraphs 26 2397
2 Education 70 73 0?6 Textbook Sentences 147 2397
3 Communications 42 45 0?4 Textbook Paragraphs 45 1583
4 Communications 42 45 0?4 Textbook Sentences 139 1583
5 Soft. Eng. 26 27 0?10 *) Paragraphs 27 965
6 Soft. Eng. 26 27 0?10 *) Sentences 105 965
Table 1: The essay sets used in the experiment. *) Comparison materials were constructed from the course
handout with teacher?s comments included and transparencies represented to the students.
have been discussed in Blei et al (2003).
3 Experiment
3.1 Procedure and Materials
To analyze the performance of LSA and PLSA in
the essay assessment, we performed an experiment
using three essay sets collected from courses on edu-
cation, marketing and software engineering. The in-
formation about the essay collections is shown in Ta-
ble 1. Comparison materials were taken either from
the course book or other course materials and se-
lected by the lecturer of the course. Furthermore, the
comparison materials used in each of these sets were
divided with two methods, either into paragraphs or
sentences. Thus, we run the experiment in total with
six different configurations of materials.
We used our implementations of LSA and PLSA
methods as described in Section 2. With LSA, all
the possible dimensions (i.e. from two to the num-
ber of passages in the comparison materials) were
searched in order to find the dimension achieving
the highest accuracy of scoring, measured as the
correlation between the grades given by the system
and the human assessor. There is no upper limit
for the number of latent variables in PLSA mod-
els as there is for the dimensions in LSA. Thus,
we applied the same range for the best dimension
search to be fair in the comparison. Furthermore, a
linear combination of similarity values from PLSA
models (PLSA-C) with predefined numbers of la-
tent variables K ? {16, 32, 48, 64, 80, 96, 112, 128}
was used just to analyze the proposed potential of
the method as discussed in Section 2.3 and in (Hof-
mann, 2001). When building up all the PLSA mod-
els with TEM, we used 20 essays from the training
set of the essay collections to determine the early
stopping condition with perplexity of the model on
unseen data as proposed by Hofmann (2001).
3.2 Results and Discussion
The results of the experiment for all the three meth-
ods, LSA, PLSA and PLSA-C are shown in Table 2.
It contains the most accurate dimension (column
dim.) measured by machine-human correlation in
grading, the percentage of the same (same) and adja-
cent grades (adj.) compared to the human grader and
the Spearman correlation (cor.) between the grades
given by the human assessor and the system.
The results indicate that LSA outperforms both
methods using PLSA. This is opposite to the re-
sults obtained by Hofmann (2001) in information
retrieval. We believe this is due to the size of the
document collection used to build up the model. In
the experiments of Hofmann (2001), it was much
larger, 1000 to 3000 documents, while in our case
the number of documents was between 25 and 150.
However, the differences are quite small when using
the comparison materials divided into sentences. Al-
though all methods seem to be more accurate when
the comparison materials are divided into sentences,
PLSA based methods seem to gain more than LSA.
In most cases, PLSA with the most accurate
dimension and PLSA-C perform almost equally.
This is also in contrast with the findings of Hof-
mann (2001) because in his experiments PLSA-C
performed better than PLSA. This is probably also
due to the small document sets used. Neverthe-
less, this means that finding the most accurate di-
mension is unnecessary, but it is enough to com-
34
Set LSA LSA LSA LSA PLSA PLSA PLSA PLSA PLSA-C PLSA-C PLSA-C
No. dim. same adj. cor. dim. same adj. cor. same adj. cor.
1 14 39.7 43.9 0.78 9 31.5 32.9 0.66 34.2 35.6 0.70
2 124 35.6 49.3 0.80 83 37.0 37.0 0.76 35.6 41.1 0.73
3 8 31.1 28.9 0.54 38 24.4 35.6 0.41 17.7 24.4 0.12
4 5 24.4 42.3 0.57 92 35.6 31.1 0.59 22.2 35.6 0.47
5 6 29.6 48.2 0.88 16 18.5 18.5 0.78 11.1 40.1 0.68
6 6 44.4 37.1 0.90 55 33.3 44.4 0.88 14.8 40.7 0.79
Table 2: The results of the grading process with different methods.
bine several dimensions? similarity values. In our
case, it seems that linear combination of the simi-
larity values is not the best option because the sim-
ilarity values between essays and comparison mate-
rials decrease when the number of latent variables
increases. A topic for a further study would be to
analyze techniques to combine the similarity values
in PLSA-C to obtain higher accuracy in essay grad-
ing. Furthermore, it seems that the best combina-
tion of dimensions in PLSA-C depends on the fea-
tures of the document collection (e.g. number of
passages in comparison materials or number of es-
says) used. Another topic of further research is how
the combination of dimensions can be optimized for
each essay set by using the collection specific fea-
tures without the validation procedure proposed in
Kakkonen et al (2005).
Currently, we have not implemented a version of
LSA that combines scores from several models but
we will analyze the possibilities for that in future
research. Nevertheless, LSA representations for dif-
ferent dimensions form a nested sequence because
of the number of singular values taken to approxi-
mate the original matrix. This will make the model
combination less effective with LSA. This is not true
for statistical models, such as PLSA, because they
can capture a larger variety of the possible decom-
positions and thus several models can actually com-
plement each other (Hofmann, 2001).
4 Future Work and Conclusion
We have implemented a system to assess essays
written in Finnish. In this paper, we report a new
extension to the system for analyzing the essays
with PLSA method. We have compared LSA and
PLSA as methods for essay grading. When our re-
sults are compared to the correlations between hu-
man and system grades reported in literature, we
have achieved promising results with all methods.
LSA was slightly better when compared to PLSA-
based methods. As future research, we are going to
analyze if there are better methods to combine the
similarity scores from several models in the context
of essay grading to increase the accuracy (Hofmann,
2001). Another interesting topic is to combine LSA
and PLSA to compliment each other.
We used the cosine of the angle between the prob-
ability vectors as a measure of similarity in LSA and
PLSA. Other methods are proposed to determine the
similarities between probability distributions pro-
duced by PLSA (Girolami and Kaba?n, 2003; Blei
et al, 2003). The effects of using these techniques
will be compared in the future experiments.
If the PLSA models with different numbers of
latent variables are not highly dependent on each
other, this would allow us to analyze the reliability
of the grades given by the system. This is not pos-
sible with LSA based methods as they are normally
highly dependent on each other. However, this will
need further work to examine all the potentials.
Our future aim is to develop a semi-automatic
essay assessment system (Kakkonen et al, 2004).
For determining the grades or giving feedback to
the student, the system needs a method for compar-
ing similarities between the texts. LSA and PLSA
offer a feasible solution for the purpose. In order
to achieve even more accurate grading, we can use
some of the results and techniques developed for
LSA and develop them further for both methods. We
are currently working with an extension to our LSA
model that uses standard validation methods for re-
ducing automatically the irrelevant content informa-
35
tion in LSA-based essay grading (Kakkonen et al,
2005). In addition, we plan to continue the work
with PLSA, since it, being a probabilistic model, in-
troduces new possibilities, for instance, in similarity
comparison and feedback giving.
References
D. M. Blei, A. Y. Ng, and M. I. Jordan. 2003. La-
tent Dirichlet Allocation. J. of Machine Learning Re-
search, 3:993?1022.
J. Burstein and D. Marcu. 2000. Benefits of modularity
in an automated scoring system. In Proc. of the Work-
shop on Using Toolsets and Architectures to Build NLP
Systems, 18th Int?l Conference on Computational Lin-
guistics, Luxembourg.
J. Burstein. 2003. The e-rater scoring engine: Auto-
mated essay scoring with natural language process-
ing. In M. D. Shermis and J. Burstein, editors, Auto-
mated essay scoring: A cross-disciplinary perspective.
Lawrence Erlbaum Associates, Hillsdale, NJ.
S. Deerwester, S. T. Dumais, G. W. Furnas, T. K. Lan-
dauer, and R. Harshman. 1990. Indexing By Latent
Semantic Analysis. J. of the American Society for In-
formation Science, 41:391?407.
A. P. Dempster, N. M. Laird, and D. B. Rubin. 1977.
Maximum likelihood from incomplete data via the em
algorithm. J. of the Royal Statistical Society, 39:1?38.
P. W. Foltz, D. Laham, and T. K. Landauer. 1999a. Au-
tomated Essay Scoring: Applications to Educational
Technology. In Proc. of Wolrd Conf. Educational Mul-
timedia, Hypermedia & Telecommunications, Seattle,
USA.
P. W. Foltz, D. Laham, and T. K. Landauer. 1999b.
The Intelligent Essay Assessor: Applications to
Educational Technology. Interactive Multime-
dia Electronic J. of Computer-Enhanced Learning,
1. http://imej.wfu.edu/articles/1999/
2/04/index.asp (Accessed 3.4.2005).
M. Girolami and A. Kaba?n. 2003. On an Equivalence be-
tween PLSI and LDA. In Proc. of the 26th Annual Int?l
ACM SIGIR Conf. on Research and Development in In-
formaion Retrieval, pages 433?434, Toronto, Canada.
ACM Press.
M. Hearst, K. Kukich, M. Light, L. Hirschman, J. Burger,
E. Breck, L. Ferro, T. K. Landauer, D. Laham, P. W.
Foltz, and R. Calfee. 2000. The Debate on Automated
Essay Grading. IEEE Intelligent Systems, 15:22?37.
T. Hofmann. 2001. Unsupervised Learning by Proba-
bilistic Latent Semantic Analysis. Machine Learning,
42:177?196.
T. Kakkonen and E. Sutinen. 2004. Automatic As-
sessment of the Content of Essays Based on Course
Materials. In Proc. of the Int?l Conf. on Information
Technology: Research and Education, pages 126?130,
London, UK.
T. Kakkonen, N. Myller, and E. Sutinen. 2004. Semi-
Automatic Evaluation Features in Computer-Assisted
Essay Assessment. In Proc. of the 7th IASTED Int?l
Conf. on Computers and Advanced Technology in Ed-
ucation, pages 456?461, Kauai, Hawaii, USA.
T. Kakkonen, N. Myller, E. Sutinen, and J. Timonen.
2005. Comparison of Dimension Reduction Methods
for Automated Essay Grading. Submitted.
T. K. Landauer, D. Laham, B. Rehder, and M. E.
Schreiner. 1997. How well can passage meaning be
derived without using word order? A comparison of
Latent Semantic Analysis and humans. In Proc. of the
19th Annual Meeting of the Cognitive Science Society,
Mawhwah, NJ. Erlbaum.
T. K. Landauer, P. W. Foltz, and D. Laham. 1998. In-
troduction to latent semantic analysis. Discourse Pro-
cesses, 25:259?284.
B. Lemaire and P. Dessus. 2001. A System to Assess the
Semantic Content of Student Essays. J. of Educational
Computing Research, 24:305?320.
Lingsoft. 2005. http://www.lingsoft.fi/ (Ac-
cessed 3.4.2005).
E. B. Page and N. S. Petersen. 1995. The computer
moves into essay grading. Phi Delta Kappan, 76:561?
565.
E. B. Page. 1966. The imminence of grading essays by
computer. Phi Delta Kappan, 47:238?243.
M. D. Shermis, H. R. Mzumara, J. Olson, and S. Harring-
ton. 2001. On-line Grading of Student Essays: PEG
goes on the World Wide Web. Assessment & Evalua-
tion in Higher Education, 26:247.
D. Steinhart. 2000. Summary Street: an LSA Based Intel-
ligent Tutoring System for Writing and Revising Sum-
maries. Ph.D. thesis, University of Colorado, Boulder,
Colorado.
P. Wiemer-Hastings and A. Graesser. 2000. Select-a-
Kibitzer: A computer tool that gives meaningful feed-
back on student compositions. Interactive Learning
Environments, 8:149?169.
P. Wiemer-Hastings, K. Wiemer-Hastings, and
A. Graesser. 1999. Approximate natural lan-
guage understanding for an intelligent tutor. In
Proc. of the 12th Int?l Artificial Intelligence Research
Symposium, pages 172?176, Menlo Park, CA, USA.
36
