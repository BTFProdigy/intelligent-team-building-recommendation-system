Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 678?687,
Singapore, 6-7 August 2009.
c?2009 ACL and AFNLP
The infinite HMM for unsupervised PoS tagging
Jurgen Van Gael
Department of Engineering
University of Cambridge
jv249@cam.ac.uk
Andreas Vlachos
Computer Laboratory
University of Cambridge
av308@cl.cam.ac.uk
Zoubin Ghahramani
Department of Engineering
University of Cambridge
zoubin@eng.cam.ac.uk
Abstract
We extend previous work on fully unsu-
pervised part-of-speech tagging. Using
a non-parametric version of the HMM,
called the infinite HMM (iHMM), we ad-
dress the problem of choosing the number
of hidden states in unsupervised Markov
models for PoS tagging. We experi-
ment with two non-parametric priors, the
Dirichlet and Pitman-Yor processes, on the
Wall Street Journal dataset using a paral-
lelized implementation of an iHMM in-
ference algorithm. We evaluate the re-
sults with a variety of clustering evalua-
tion metrics and achieve equivalent or bet-
ter performances than previously reported.
Building on this promising result we eval-
uate the output of the unsupervised PoS
tagger as a direct replacement for the out-
put of a fully supervised PoS tagger for the
task of shallow parsing and compare the
two evaluations.
1 Introduction
Many Natural Language Processing (NLP) tasks
are commonly tackled using supervised learning
approaches. These learning methods rely on the
availability of labeled datasets which are usually
produced by expensive manual annotation. For
some tasks, we have the choice to use unsuper-
vised learning approaches. While they do not nec-
essarily achieve the same level of performance,
they are appealing as unlabeled data is usually
abundant. In particular, for the purpose of ex-
ploring new domains and languages, obtainining
labeled material can be prohibitively expensive
and unsupervised learning methods are a very at-
tractive choice. Recent work (Johnson, 2007;
Goldwater and Griffiths, 2007; Gao and Johnson,
2008) explored the task of part-of-speech tagging
(PoS) using unsupervised Hidden Markov Models
(HMMs) with encouraging results. PoS tagging is
a standard component in many linguistic process-
ing pipelines, so any improvement on its perfor-
mance is likely to impact a wide range of tasks.
It is important to point out that a completely
unsupervised learning method will discover the
statistics of a dataset according to a particular
model choice but these statistics might not cor-
respond exactly to our intuition about PoS tags.
Johnson (2007) and Gao & Johnson (2008) as-
sume that words are generated by a hidden Markov
model and find that the resulting states strongly
correlate with POS tags. Nonetheless, identifying
the HMM states with appropriate POS tags is hard.
Because many evaluation methods often require
POS tags (rather than HMM states) this identifica-
tion problem makes unsupervised systems difficult
to evaluate.
One potential solution is to add a small amount
of supervision as in Goldwater & Griffiths (2007)
who assume a dictionary of frequent words asso-
ciated with possible PoS tags extracted from a la-
beled corpus. Although this technique improves
performance, in this paper we explore the com-
pletely unsupervised approach. The reason for this
is that better unsupervised approaches provide us
with better starting points from which to explore
how and where to incorporate supervision.
In previous work on unsupervised PoS tagging
a main question was how to set the number of hid-
den states appropriately. Johnson (2007) reports
results for different numbers of hidden states but it
is unclear how to make this choice a priori, while
Goldwater & Griffiths (2007) leave this question
as future work.
It is not uncommon in statistical machine learn-
ing to distinguish between parameters of a model
and the capacity of a model. E.g. in a clustering
context, the choice for the number of clusters (ca-
pacity) and the parameters of each cluster are often
678
treated differently: the latter are estimated using
algorithms like EM, MCMC or Variational Bayes
while the former is chosen using common sense,
heuristics or in a Bayesian framework maybe us-
ing evidence maximization.
Non-parametric Bayesian methods are a class of
probability distributions which explicitly treat the
capacity of a model as ?just another parameter?.
Potential advantages are
? the model capacity can automatically adjust
to the amount of data: e.g. when clustering
a very small dataset, it is unlikely that many
fine grained clusters can be distinguished,
? inference can be more efficient: e.g. instead
of running full inference for different model
capacities and then choosing the best ca-
pacity (according to some choice of ?best?),
inference in non-parametric Bayesian meth-
ods integrates the capacity search in one al-
gorithm. This is particularly advantageous
when parameters other than capacity need to
be explored, since it reduces signifcantly the
number of experiments needed.
None of these potential advantages are guaranteed
and in this paper we investigate these two aspects
for the task of unsupervised PoS tagging.
The contributions in this paper extend previous
work on unsupervised PoS tagging in five ways.
First, we introduce the use of a non-parametric
version of the HMM, namely the infinite HMM
(iHMM) (Beal et al, 2002) for unsupervised PoS
tagging. This answers an open problem from
Goldwater & Griffiths (2007). Second, we care-
fully implemented a parallelized version of the
inference algorithms for the iHMM so we could
use it on the Wall Street Journal Penn Treebank
dataset. Third, we introduce a new variant of
the iHMM that builds on the Pitman-Yor process.
Fourth, we evaluate the results with a variety of
clustering evaluation methods and achieve equiv-
alent or better performances than previously re-
ported. Finally, building on this promising result
we use the output of the unsupervised PoS tagger
as a direct replacement for the output of a fully su-
pervised PoS tagger for the task of shallow pars-
ing. This evaluation enables us to assess the appli-
cability of an unsupervised PoS tagging method
and provides us with means of comparing its per-
formance against a supervised PoS tagger.
The rest of the paper is structured as follows:
in section 2 we introduce the iHMM as a non-
parametric version of the Bayesian HMM used
in previous work on unsupervised PoS tagging.
Then, in section 3 we describe some details of
our implementation of the iHMM. In section 4 we
present a variety of evaluation metrics to compare
our results with previous work. Finally, in sec-
tion 5 we report our experimental results. We con-
clude this paper with a discussion of ongoing work
and experiments.
2 The Infinite HMM
In this section, we describe a non-parametric hid-
den Markov model known as the infinite HMM
(iHMM) (Beal et al, 2002; Teh et al, 2006). As
we show below, this model is flexible in the num-
ber of hidden states which it can accomodate. In
other words, the capacity is an uncertain quantity
with an a priori infinite range that is a posteriori
inferred by the data. It is instructive to first re-
view the finite HMM and its Bayesian treatment:
for one, it is the model that has been used in previ-
ous work on unsupervised PoS tagging, secondly
it allows us to better understand the iHMM.
The Bayesian HMM A finite first-order HMM
consists of a hidden state sequence s =
(s
1
, s
2
, . . . , s
T
) and a corresponding observation
sequence y = (y
1
, y
2
, . . . , y
T
). Each state vari-
able s
t
can take on a finite number of states, say
1 . . .K. Transitions between states are governed
by Markov dynamics parameterized by the tran-
sition matrix pi, where pi
ij
= p(s
t
= j|s
t?1
=
i), while the initial state probabilities are pi
0i
=
p(s
1
= i). For each state s
t
? {1 . . .K} there
is a parameter ?
s
t
which parameterizes the obser-
vation likelihood for that state: y
t
|s
t
? F (?
s
t
).
Given the parameters {pi
0
,pi,?,K} of the HMM,
the joint distribution over hidden states s and ob-
servations y can be written (with s
0
= 0):
p(s,y|pi
0
,pi,?,K) =
T
?
t=1
p(s
t
|s
t?1
)p(y
t
|s
t
)
As Johnson (2007) clearly explained, training the
HMM with EM leads to poor results in PoS tag-
ging. However, we can easily treat the HMM in a
fully Bayesian way (MacKay, 1997) by introduc-
ing priors on the parameters of the HMM. With
no further prior knowledge, a typical prior for the
transition (and initial) probabilities are symmet-
ric Dirichlet distributions. This corresponds to our
679
belief that, a priori, each state is equally likely to
transition to every other state. Also, it is com-
monly known that the parameter of a Dirichlet
distribution controls how sparse its samples are.
In other words, by making the hyperprior on the
Dirichlet distribution for the rows of the transi-
tion matrix small, we can encode our belief that
any state (corresponding to a PoS tag in this ap-
plication context) will only be followed by a small
number of other states. As we explain below, we
will be able to include this desirable property in
the non-parametric model as well. Secondly, we
need to introduce a prior on the observation pa-
rameters ?
k
. Without any further prior knowl-
edge, a convenient choice here is another sym-
metric Dirichlet distribution with sparsity induc-
ing hyperprior. This encodes our belief that only
a subset of the words correspond to a particular
state.
The Infinite HMM A first na??ve way to obtain
a non-parametric HMM with an infinite number
of states might be to use symmetric Dirichlet pri-
ors over the transition probabilities with parameter
?/K and take K ? ?. This approach unfortu-
nately does not work: ?/K ? 0 when K ? ?
and hence the rows of the matrix will become ?in-
finitely sparse?. Since the sum of the entries must
sum to one, the rows of the transition matrix will
be zero everywhere and all its mass in a random
location. Unfortunately, this random location is
out of an infinite number of possible locations and
hence with probability 1 will be different for all
the rows. As a consequence, at each timestep the
HMM moves to a new state and will never revisit
old states. As we shall see shortly, we can fix this
by using a hierarchical Bayesian formalism where
the Dirichlet priors on the rows have a shared pa-
rameter.
Before moving on to the iHMM, let us look at
the finite HMM from a different perspective. The
finite HMM of length T with K hidden states can
be seen as a sequence of T finite mixture models.
The following equation illustrates this idea: con-
ditioned on the previous state s
t?1
, the marginal
probability of observation y
t
can be written as:
p(y
t
|s
t?1
= k) =
K
?
s
t
=1
p(s
t
|s
t?1
= k)p(y
t
|s
t
),
=
K
?
s
t
=1
pi
k,s
t
p(y
t
|?
s
t
). (1)
The variable s
t?1
= k specifies the mixing
weights pi
k,?
for the mixture distribution, while s
t
indexes the mixture component generating the ob-
servation y
t
. In other words, equation (1) says that
each row of the transition matrix pi specifies a dif-
ferent mixture distribution over the same set of K
mixture components ?.
Our second attempt to define a non-parametric
version of the hidden Markov model is to replace
the finite mixture by an infinite mixture. The
theory of Dirichlet process mixtures (Antoniak,
1974) tells us exactly how to do this. A draw
G ? DP (?,H) from a Dirichlet process (DP)
with base measure H and concentration parame-
ter ? ? 0 is a discrete distribution which can be
written as an infinite mixture of atoms
G(?) =
?
?
i=1
pi
i
?
?
i
(?)
where the ?
i
are i.i.d. draws from the base mea-
sure H , ?
?
i
(?) represents a point distribution at
?
i
and pi
i
= v
i
?
i?1
l=1
(1 ? v
l
) where each v
l
?
Beta(1, ?). The distribution over pi
i
is called a
stick breaking construction and is essentially an
infinite dimensional version of the Dirichlet dis-
tribution. We refer to Teh et al (2006) for more
details.
Switching back to the iHMM our next step is to
introduce a DP G
j
for each state j ? {1 ? ? ??};
we write G
j
(?) =
?
?
i=1
pi
j
i
?
?
j
i
(?). There is now
a parameter for each state j and each index i ?
{1, 2, ? ? ? ,?}. Next, we draw the datapoint at
timestep t given that the previous datapoint was in
state s
t?1
by drawing from DP G
s
t?1
. We first se-
lect a mixture component s
t
from the vector pi
s
t?1
,?
and then sample a datapoint y
t
? F (?
s
t?1
,s
t
) so
we get the following distribution for y
t
p(y
t
|?, s
t?1
) =
?
?
s
t
=1
pi
s
t?1
,s
t
p(y
t
|?
s
t?1
,s
t
).
This is almost the non-parametric equivalent of
equation (1) but there is a subtle difference: each
G
j
selects their own set of parameters ?
j
?
. This
is unfortunate as it means that the output distribu-
tion would not be the same for each state, it would
depend on which state we were moving to! Luck-
ily, we can easily fix this: by introducing an in-
termediate distribution G
0
? DP (?,H) and let
G
j
? DP (?,G
0
) we enforce that the i.i.d. draws
?
j
?
are draws from a discrete distribution (sinceG
0
680
is a draw from a Dirichlet process) and hence all
G
j
will share the same infinite set of atoms as cho-
sen byG
0
. Figure 1 illustrates the graphical model
for the iHMM.
The iHMM with Pitman-Yor Prior The
Dirichlet process described above defines a very
specific distribution over the number of states
in the iHMM. One particular generalization of
the Dirichlet process that has been studied in the
NLP literature before is the Pitman-Yor process.
Goldwater et al (2006) have shown that the
Pitman-Yor distribution can more accurately cap-
ture power-law like distributions that frequently
occur in natural language.
More specifically, a draw G ? PY (d, ?,H)
from a Pitman-Yor process (PY) with base mea-
sure H , discount parameter 0 ? d < 1 and con-
centration parameter ? > ?d is a discrete distri-
bution which can be written as an infinite mixture
of atoms
G(?) =
?
?
i=1
pi
i
?
?
i
(?)
where the ?
i
are i.i.d. draws from the base mea-
sure H , ?
?
i
(?) represents a point distribution at
?
i
and pi
i
= v
i
?
i?1
l=1
(1 ? v
l
) where each v
l
?
Beta(1?d, ?+ ld). Note the similarity to the DP:
in fact, the DP is a special case of PY with d = 0.
In our experiments, we constructed an iHMM
where the DP (?,H) base measure G
0
is re-
placed with its two parameter generalization
PY (d, ?,H). Because the Dirichlet and Pitman-
Yor processes only differ in the way pi is con-
structed, without loss of generality we will de-
scribe hyper-parameter choice and inference in the
context of the iHMM with Dirichlet process base
measure.
Hyperparameter Choice The description
above shows that there are 4 parameters which
we must specify: the base measure H , the
output distribution p(y
t
|?
s
t
), the discount
1
and
concentration
2
parameters d, ? for G
0
and the
concentration parameter ? for the DP?sG
j
. Just as
in the finite case, the base measure H is the prior
distribution on the parameter ? of p(y
t
|?
s
t
). We
chose to use a symmetric Dirichlet distribution
with parameter ? over the word types in our
corpus. Since we do not know the sparsity level ?
of the output distributions we decided to learn this
1
for Pitman-Yor base measure
2
for both Dirichlet and Pitman-Yor base measures
parameter from the data. We initially set a vague
Gamma prior over ? but soon realized that as we
expect hidden states in the iHMM to correspond
to PoS tags, it is unrealistic to expect each state
to have the same sparsity level. Hence we chose
a Dirichlet process as the prior for ?; this way
we end up with a small discrete set of sparsity
levels: e.g. we can learn that states corresponding
to verbs and nouns share one sparsity level
while states correpsonding to determiners have
their own (much sparser) sparsity level. For the
output distribution p(y
t
|?
s
t
) we chose a simple
multinomial distribution.
The hyperparameters d and ? mostly control the
number of states in the iHMM while - as we dis-
cussed above - ? controls the sparsity of the tran-
sition matrix. In the experiments below we report
both fixing the two parameters and learning them
by sampling (using vague Gamma hyperpriors).
Because of computational constraints, we chose to
use vague Bayesian priors for all hyperparameters
rather than run the whole experiment over a grid of
?reasonable? parameter settings and use the best
ones according to cross validation.
3 Inference
The Wall Street Journal part of the Penn Tree-
bank that was used for our experiments contains
about one million words. In the non-parametric
Bayesian literature not many algorithms have been
described that scale into this regime. In this sec-
tion we describe our parallel implementation of
the iHMM which can easily handle a dataset of
this scale.
There is a wealth of evidence (Scott, 2002; Gao
and Johnson, 2008) in the machine learning litera-
ture that Gibbs sampling for Markov models leads
to slow mixing times. Hence we decided our start-
ing point for inference needs to be based on dy-
namic programming. Because we didn?t have a
good idea for the number of states that we were go-
ing to end up with, we prefered the beam sampler
of Van Gael et al (2008) over a finite truncation
of the iHMM. Moreover, the beam sampler also
introduces a certain amount of sparsity in the dy-
namic program which can speed up computations
(potentially at the cost of slower mixing).
The beam sampler is a blocked Gibbs sampler
where we alternate between sampling the param-
eters (transition matrix, output parameters), the
state sequence and the hyperparameters. Sam-
681
k = 1 ? ? ?1
s0s1s2y1y2?k?k???H
Figure 1: The graphical model for the iHMM. The variable ? represents the mixture for the DP G
0
.
pling the transition matrix and output distribu-
tion parameters requires computing their sufficient
statistics and sampling from a Dirichlet distribu-
tion; we refer to the beam sampling paper for de-
tails. For the hyperparameters we use standard
Gibbs sampling. We briefly sketch the resam-
pling step for the state sequence for a single se-
quence of data (sentence of words). Running stan-
dard dynamic programming is prohibitive because
the state space of the iHMM is infinitely large.
The central idea of the beam sampler is to adap-
tively truncate the state space of the iHMM and
run dynamic programming. In order to truncate
the state space, we sample an auxilary variable u
t
for each word in the sequence from the distribu-
tion u
t
? Uniform(0, pi
s
t?1
s
t
) where pi represents
the transition matrix.
Intuitively, when we sample u
1:T
|s
1:T
accord-
ing to the distribution above, the only valid sam-
ples are those for which the u
t
are smaller than
the transition probabilities of the state sequence
s
1:T
. This means that when we sample s
1:T
|u
1:T
at a later point, it must be the case that the u
t
?s
are still smaller than the new transition probabil-
ities. This significantly reduces the set of valid
state sequences that we need to consider. More
specifically, Van Gael et al (2008) show that we
can compute p(s
t
|y
1:t
, u
1:t
) using the following
dynamic programming recursion p(s
t
|y
1:t
, u
1:t
) =
p(y
t
|s
t
)
?
s
t?1
:u
t
<pi
s
t?1
,s
t
p(s
t?1
|y
1:t?1
, u
1:t?1
).
The summation
?
s
t?1
:u
t
<pi
s
t?1
,s
t
ensures that this
computation remains finite. When we compute
p(s
t
|y
1:t
, u
1:t
) for t ? {1 ? ? ?T}, we can easily
sample s
T
and using Bayes rule backtrack sample
every other s
t
. It can be shown that this procedure
produces samples from the exact posterior.
Notice that the dynamic program only needs to
perform computation when u
t
< pi
s
t?1
,s
t
. A care-
ful implementation of the beam sampler consists
of preprocessing the transition matrix pi and sort-
ing its elements in descending order. We can then
iterate over the elements of the transition matrix
starting from the largest element and stop once
we reach the first element of the transition matrix
smaller than u
t
. In our experiments we found that
this optimization reduces the amount of computa-
tion per sentence by an order of magnitutde.
A second optimization which we introduced
is to use the map-reduce paradigm (Dean and
Ghemawat, 2004) to parallelize our computations.
More specifically, after we preprocess the transi-
tion matrix, the dynamic program computations
are independent for each sentence in the dataset.
This means we can perform each dynamic pro-
gram in parallel; in other words our ?map? con-
sists of running the dynamic program on one sen-
tence in the dataset. Next, we need to resample
the transition matrix and output distribution pa-
rameters. In order to do so we need to compute
their sufficient statistics: the number of transitions
from state to state and the number of emissions of
each word out of each state. Our ?reduce? func-
tion consists of computing the sufficient statistics
for each sentence and then aggregating the statis-
tics for the whole dataset. Our implementation
runs on a quad-core shared memory architecture
and we find an almost linear speedup going from
one to four cores.
4 Evaluation
Evaluating unsupervised PoS tagging is rather dif-
ficult mainly due to the fact that the output of such
682
systems are not actual PoS tags but state identi-
fiers. Therefore it is impossible to evaluate per-
formance against a manually annotated gold stan-
dard using accuracy. Recent work (Goldwater and
Griffiths, 2007; Johnson, 2007; Gao and Johnson,
2008) on this task explored a variety of method-
ologies to address this issue.
The most common approach followed in pre-
vious work is to evaluate unsupervised PoS tag-
ging as clustering against a gold standard using
the Variation of Information (VI) (Meil?a, 2007).
VI assesses homogeneity and completeness us-
ing the quantities H(C|K) (the conditional en-
tropy of the class distribution in the gold stan-
dard given the clustering) and H(K|C) (the con-
ditional entropy of clustering given the class dis-
tribution in the gold standard). However, as Gao
& Johnson (2008) point out, VI is biased to-
wards clusterings with a small number of clus-
ters. A different evaluation measure that uses
the same quantities but weighs them differently is
the V-measure (Rosenberg and Hirschberg, 2007),
which is defined in Equation 2 by setting the pa-
rameter ? to 1.
h = 1?
H(C|K)
H(C)
c = 1?
H(K|C)
H(K)
V
?
=
(1 + ?)hc
(?h) + c
(2)
Vlachos et al (2009) noted that V-measure favors
clusterings with a large number of clusters. Both
of these biases become crucial in our experiments,
since the number of clusters (states of the iHMM)
is not fixed in advance. Vlachos et al proposed a
variation of the V-measure, V-beta, that adjusts the
balance between homogeneity and completeness
using the parameter ? in Eq. 2.
It is worth mentioning that, unlike V-measure
and V-beta, VI scores are not normalized
and therefore they are difficult to interpret.
Meil?a (2007) presented two normalizations,
acknowledging the potential disadvantages
they have. The first one normalizes VI by
2 log(max(|K|, |C|)), which is inappropriate
when the number of clusters discovered |K|
changes between experiments. The second
normalization involves the quantity logN which
is appropriate when comparing different algo-
rithms on the same dataset (N is the number
of instances). However, this quantity depends
exclusively on the size of the dataset and hence if
the dataset is very large it can result in normalized
VI scores misleadingly close to 100%. This does
not affect rankings, i.e. a better VI score will also
be translated into a better normalized VI score. In
our experiments, we report results only with the
un-normalized VI scores, V-measure and V-beta.
All the evaluation measures mentioned so far
evaluate PoS tagging as a clustering task against
a manually annotated gold standard. While this
is reasonable, it still does not provide means of
assessing the performance in a way that would
allow comparisons with supervised methods that
output actual PoS tags. Even for the normalized
measures V-measure and V-beta, it is unclear how
their values relate to accuracy levels. Gao & John-
son (2008) partially addressed this issue by map-
ping states to PoS tags following two different
strategies, cross-validation accuracy, and greedy
1-to-1 mapping, which both have shortcomings.
We argue that since an unsupervised PoS tagger is
trained without taking any gold standard into ac-
count, it is not appropriate to evaluate against a
particular gold standard, or at least this should not
be the sole criterion. The fact that different authors
use different versions of the same gold standard to
evaluate similar experiments (e.g. Goldwater &
Griffiths (2007) versus Johnson (2007)) supports
this claim. Furthermore, PoS tagging is seldomly
a goal in itself, but it is a component in a linguistic
pipeline.
In order to address these issues, we perform an
extrinsic evaluation using a well-explored task that
involves PoS tags. While PoS tagging is consid-
ered a pre-processing step in many natural lan-
guage processing pipelines, the choice of task is
restricted by the lack of real PoS tags in the out-
put of our system. For our purposes we need a
task that relies on discriminating between PoS tags
rather than the PoS tag semantics themselves, in
other words, a task in which knowing whether a
word is tagged as noun instead of a verb is equiv-
alent to knowing it is tagged as state 1 instead of
state 2. Taking these considerations into account,
in Section 5 we experiment with shallow pars-
ing in the context of the CoNLL-2000 shared task
(Tjong Kim Sang and Buchholz, 2000) in which
very good performances were achieved using only
the words with their PoS tags. Our intuition is that
if the iHMM (or any unsupervised PoS tagging
683
method) has a reasonable level of performance, it
should improve on the performance of a system
that does not use PoS tags. Moreover, if the per-
formance is very good indeed, it should get close
to the performance of a system that uses real PoS
tags, provided either by human annotation or by a
good supervised system. Similar extrinsic evalu-
ation was performed by Biemann et al (2007). It
is of interest to compare the results between the
clustering evaluation and the extrinsic one.
A different approach in evaluating non-
parametric Bayesian models for NLP is state-
splitting (Finkel et al, 2007; Liang et al, 2007).
In this setting, the model is used in order to re-
fine existing annotation of the dataset. While this
approach can provide us with some insights and
interpretable results, the use of existing annotation
influences the output of the model. In this work,
we want to verify whether the output of the iHMM
(without any supervision) can be used instead of
that of a supervised system.
5 Experiments
In all our experiments, the Wall Street Journal
(WSJ) part of the Penn Treebank was used. As ex-
plained in Section 4, we evaluate the output of the
iHMM in two ways, as clustering with respect to a
gold standard and as direct replacement of the PoS
tags in the task of shallow parsing. In each experi-
ment, we obtain a sample from the iHMM over all
the sections of WSJ. The states for sections 15-18
and 20 of the WSJ (training and testing sets re-
spectvely in the CoNLL shared task) are used for
the evaluation based on shallow parsing, while the
remaining sections are used for evaluation against
the WSJ gold standard PoS tags using clustering
evaluation measures.
As described in Section 2 we performed three
runs with the iHMM: one run with DP prior and
fixed ?, ?, one with PY prior and fixed d, ?, ? and
one with DP prior but where we learn the hyper-
parameters ?, ? from the data. Our inference algo-
rithm uses 1000 burn-in iterations after which we
collect a sample every 1000 iterations. Our infer-
ence procedure is annealed during the first 1000
burnin and 2400 iterations by powering the likeli-
hood of the output distribution with a number that
smoothly increases from 0.4 to 1.0 over the 3400
first iterations. The numbers of iterations reported
in the remainder of the section refer to the itera-
tions after burn-in. We initialized the sampler by:
a) sampling the hyperparameters from the prior
where applicable, b) uniformly assign each word
one out of 20 iHMM states. For the DP run with
fixed parameters, we chose ? = 0.8 to encourage
some sparsity in the transition matrix and ? = 5.0
to allow for enough hidden states. For the PY run
with fixed parameters, we chose ? = 0.8 for simi-
lar reasons and d = 0.1 and ? = 1.0. We point out
that one weakness of MCMC methods is that they
are hard to test for convergence. We chose to run
the simulations until they became prohibitively ex-
pensive to obtain a new sample.
First, we present results using clustering eval-
uation measures which appear in the figures of
Table 1. The three runs exhibit different behav-
ior. The number of states reached by the iHMM
with fixed parameters using the DP prior stabilizes
close to 50 states, while for the experiment with
learnt hyperparameters the number of states grows
more rapidly, reaching 194 states after 8,000 iter-
ations. With the PY prior, the number of states
reached grows less rapidly reaching 90 states. All
runs achieve better performances with respect to
all the measures used as the number of iterations
grows. An exception is that VI scores tend to in-
crease (lower VI scores are better) when the num-
ber of states grows larger than the gold standard.
It is interesting to notice how the measures exhibit
different biases, in particular that VI penalizes the
larger numbers of states discovered in the DP run
with learnt parameters as well as the run with the
PY prior, compared to the more lenient scores pro-
vided by V-measure and V-beta. The latter though
assigns lower scores to the DP run with learnt pa-
rameters because it takes into account that the high
homogeneity is achieved using even more states.
Finally, the interpretability of these scores presents
some interest. For example, in the run with fixed
parameters using the DP prior, after burn-in VI
was 4.6, which corresponds to 76.65% normalized
VI score, while V-measure and V-beta were 12.7%
and 9% respectively. In 8,000 iterations after burn-
in, VI was 3.94 (80.3% when normalized), while
V-measure and V-beta were 53.3%, since the num-
ber of states was almost the same as the number of
unique PoS tags in the gold standard.
The closest experiment to ours is the one by
Gao & Johnson (2008) who run their Bayesian
HMM over the whole WSJ and evaluated against
the full gold standard, the only difference being
is that we exclude the CoNLL shared task sec-
684
 0
 20
 40
 60
 80
 100
 120
 140
 160
 180
 200
 0  1  2  3  4  5  6  7  8
s
ta
te
s
DP-learnt
DP-fixed
PY-fixed
 0
 10
 20
 30
 40
 50
 60
 70
 0  1  2  3  4  5  6  7  8
h
o
m
o
ge
ne
ity
DP-learnt
DP-fixed
PY-fixed
 25
 30
 35
 40
 45
 50
 55
 60
 0  1  2  3  4  5  6  7  8
c
o
m
pl
et
en
es
s
DP-learnt
DP-fixed
PY-fixed
 3.6
 3.8
 4
 4.2
 4.4
 4.6
 4.8
 5
 5.2
 0  1  2  3  4  5  6  7  8
V
I
DP-learnt
DP-fixed
PY-fixed
 10
 15
 20
 25
 30
 35
 40
 45
 50
 55
 60
 0  1  2  3  4  5  6  7  8
V
-m
e
a
su
re
DP-learnt
DP-fixed
PY-fixed
 5
 10
 15
 20
 25
 30
 35
 40
 45
 50
 55
 60
 0  1  2  3  4  5  6  7  8
V
-b
e
ta
DP-learnt
DP-fixed
PY-fixed
Table 1: Performance of the three iHMM runs according to clustering evaluation measures against num-
ber of iteretions (in thousands).
 93.2
 93.4
 93.6
 93.8
 94
 94.2
 94.4
 94.6
 0  1  2  3  4  5  6  7  8
a
c
c
u
ra
c
y
DP-learnt
DP-fixed
PY-fixed
 88.5
 89
 89.5
 90
 90.5
 91
 0  1  2  3  4  5  6  7  8
F
-s
co
re
DP-learnt
DP-fixed
PY-fixed
Table 2: Performance of the output of the three iHMM runs when used in shallow parsing against number
of iteretions (in thousands).
tions from our evaluation, which leaves us with 19
sections instead of 24. Their best VI score was
4.03886 which they achieved using the collapsed,
sentence-blocked Gibbs sampler with the number
of states fixed to 50. The VI score achieved by the
iHMM with fixed parameters using the PY prior
reaches 3.73, while using the DP prior VI reaches
4.32 with learnt parameters and 3.93 with fixed
685
parameters. These results, even if they are not
directly comparable, are on par with the state-of-
the-art, which encouraged us to proceed with the
extrinsic evaluation.
For the experiments with shallow parsing we
used the CRF++ toolkit
3
which has an efficient
implementation of the model introduced by Sha &
Pereira (2003) for this task. First we ran an experi-
ment using the words and the PoS tags provided in
the shared task data and the performances obtained
were 96.07% accuracy and 93.81% F-measure.
The PoS tags were produced using the Brill tag-
ger (Brill, 1994) which employs tranformation-
based learning and was trained using the WSJ cor-
pus. Then we ran an experiment removing the
PoS tags altogether, and the performances were
93.25% accuracy and 88.58% F-measure respec-
tively. This gave us some indication as to what the
contribution of the PoS tags is in the context of the
shallow parsing task at hand.
The experiments using the output of the iHMM
as PoS tags for shallow parsing are presented in
Table 2. The best performance achieved was
94.48% and 90.98% in accuracy and F-measure,
which is 1.23% and 2.4% better respectively than
just using words, but worse by 1.57% and 2.83%
compared to using the supervised PoS tagger out-
put. Given that the latter is trained on WSJ we be-
lieve that this is a good result. Interestingly, this
was obtained by using the last sample from the
iHMM run using the DP prior with learnt param-
eters which has worse overall clustering evalua-
tion scores, especially in terms of VI. This sample
though has the best homogeneity score (69.39%).
We believe that homogeneity is more important
than the overall clustering score due to the fact
that, in the application considered, it is probably
worse to assign tokens that belong to different PoS
tags to the same state, e.g. verb and adverbs, rather
than generate more than one state for the same
PoS. This is likely to be the case in tasks where
we are interested in distinguishing between PoS
tags rather than the actual tag itself. Also, clus-
tering evaluation measures tend to score leniently
consistent mixing of members of different classes
in the same cluster. However, such mixing results
in consistent noise when the clustering output be-
comes input to a machine learning method, which
is harder to deal with.
3
http://crfpp.sourceforge.net/
6 Conclusions - Future Work
In the context of shallow parsing we saw that the
performance of the iHMM does not match the
performance of a supervised PoS tagger but does
lead to a performance increase over a model us-
ing only words as features. Given that it was con-
structed without any need for human annotation,
we believe this is a good result. At the same time
though, it suggests that it is still some way from
being a direct drop-in replacement for a supervised
method. We argue that the extrinsic evaluation of
unsupervised PoS tagging performed in this paper
is quite informative as it allowed us to assess our
results in a more realistic context. In this work we
used shallow parsing for this, but we are consider-
ing other tasks in which we hope that PoS tagging
performance will be more crucial.
Our experiments also suggest that the number of
states in a Bayesian non-parametric model can be
rather unpredictable. On one hand, this is a strong
warning towards inference algorithms which per-
form finite truncation of non-parametric models.
On the other hand, the remarkable difference in
behavior between the DP with fixed and learned
priors suggests that more research is needed to-
wards understanding the influence of hyperparam-
eters in Bayesian non-parametric models.
We are currently experimenting with a semi-
supervised PoS tagger where we let the transi-
tion matrix of the iHMM depend on annotated
PoS tags. This model allows us to: a) use an-
notations whenever they are available and do un-
supervised learning otherwise; b) use the power
of non-parametric methods to possibly learn more
fine grained statistical structure than tag sets cre-
ated manually.
On the implementation side, it would be in-
teresting to see how our methods scale in a dis-
tributed map-reduce architecture where network
communication overhead becomes an issue.
Finally, the ultimate goal of our investigation is
to do unsupervised PoS tagging using web-scale
datasets. Although the WSJ corpus is reasonably
sized, our computational methods do not currently
scale to problems with one or two order of magni-
tude more data. We will need new breakthroughs
to unleash the full potential of unsupervised learn-
ing for NLP.
686
References
Charles E. Antoniak. 1974. Mixtures of dirichlet pro-
cesses with applications to bayesian nonparametric
problems. The Annals of Statistics, 2(6):1152?1174.
M. J. Beal, Z. Ghahramani, and C. E. Rasmussen.
2002. The infinite hidden markov model. Advances
in Neural Information Processing Systems, 14:577 ?
584.
Chris Biemann, Claudio Giuliano, and Alfio Gliozzo.
2007. Unsupervised part-of-speech tagging support-
ing supervised methods. In Proceedings of RANLP.
Eric Brill. 1994. Some advances in transformation-
based part of speech tagging. In National Confer-
ence on Artificial Intelligence, pages 722?727.
Jeffrey Dean and Sanjay Ghemawat. 2004. Mapre-
duce: Simplified data processing on large clusters.
In Sixth Symposium on Operating System Design
and Implementation.
Jenny Rose Finkel, Trond Grenager, and Christo-
pher D. Manning. 2007. The infinite tree. In Pro-
ceedings of the 45th Annual Meeting of the Associ-
ation of Computational Linguistics, pages 272?279,
Prague, Czech Republic, June. Association for Com-
putational Linguistics.
J. Van Gael, Y. Saatci, Y. W. Teh, and Z. Ghahra-
mani. 2008. Beam sampling for the infinite hidden
markov model. In Proceedings of the 25th interna-
tional conference on Machine learning, volume 25,
Helsinki.
Jianfeng Gao and Mark Johnson. 2008. A compari-
son of bayesian estimators for unsupervised hidden
markov model pos taggers. In Proceedings of the
2008 Conference on Empirical Methods in Natural
Language Processing, pages 344?352.
Sharon Goldwater and Tom Griffiths. 2007. A fully
bayesian approach to unsupervised part-of-speech
tagging. In Proceedings of the 45th Annual Meet-
ing of the Association of Computational Linguistics,
pages 744?751, Prague, Czech Republic, June. As-
sociation for Computational Linguistics.
S. Goldwater, T. Griffiths, and M. Johnson. 2006. In-
terpolating between types and tokens by estimating
power-law generators. Advances in Neural Informa-
tion Processing Systems, 18.
Mark Johnson. 2007. Why Doesn?t EM Find Good
HMM POS-Taggers? In Proceedings of the 2007
Joint Conference on Empirical Methods in Natural
Language Processing and Computational Natural
Language Learning, pages 296?305.
P. Liang, S. Petrov, M. I. Jordan, and D. Klein. 2007.
The infinite PCFG using hierarchical Dirichlet pro-
cesses. In Proceedings of the 2007 Joint Confer-
ence on Empirical Methods in Natural Language
Processing and Computational Natural Language
Learning.
D. J. C. MacKay. 1997. Ensemble learning for hidden
Markov models. Technical report, Cavendish Labo-
ratory, University of Cambridge, 1997.
Marina Meil?a. 2007. Comparing clusterings?an in-
formation based distance. Journal of Multivariate
Analysis, 98(5):873?895.
Andrew Rosenberg and Julia Hirschberg. 2007. V-
measure: A conditional entropy-based external clus-
ter evaluation measure. In Proceedings of the 2007
Joint Conference on Empirical Methods in Natural
Language Processing and Computational Natural
Language Learning, pages 410?420, Prague, Czech
Republic, June.
Steven L. Scott. 2002. Bayesian methods for hidden
markov models: Recursive computing in the 21st
century. Journal of the American Statistical Asso-
ciation, 97(457):337?351, March.
Fei Sha and Fernando Pereira. 2003. Shallow pars-
ing with conditional random fields. In Human Lan-
guage Technology Conference and the 4th Meeting
of the North American Association for Computa-
tional Linguistics.
Yee Whye Teh, Michael I. Jordan, Matthew J. Beal,
and D. M. Blei. 2006. Hierarchical Dirichlet pro-
cesses. Journal of the American Statistical Associa-
tion, 101(476):1566?1581.
Erik F. Tjong Kim Sang and Sabine Buchholz.
2000. Introduction to the CoNLL-2000 shared task:
Chunking. In Claire Cardie, Walter Daelemans,
Claire Nedellec, and Erik Tjong Kim Sang, editors,
Proceedings of the Fourth Conference on Computa-
tional Natural Language Learning, pages 127?132.
Lisbon, Portugal, September.
Andreas Vlachos, Anna Korhonen, and Zoubin
Ghahramani. 2009. Unsupervised and Constrained
Dirichlet Process Mixture Models for Verb Cluster-
ing. In Proceedings of the EACL workshop on GEo-
metrical Models of Natural Language Semantics.
687
Proceedings of NAACL HLT 2007, pages 97?104,
Rochester, NY, April 2007. c?2007 Association for Computational Linguistics
Improving Diversity in Ranking using Absorbing Random Walks
Xiaojin Zhu Andrew B. Goldberg Jurgen Van Gael David Andrzejewski
Department of Computer Sciences
University of Wisconsin, Madison
Madison, WI 53705
{jerryzhu, goldberg, jvangael, andrzeje}@cs.wisc.edu
Abstract
We introduce a novel ranking algorithm
called GRASSHOPPER, which ranks items
with an emphasis on diversity. That is, the
top items should be different from each
other in order to have a broad coverage
of the whole item set. Many natural lan-
guage processing tasks can benefit from
such diversity ranking. Our algorithm is
based on random walks in an absorbing
Markov chain. We turn ranked items into
absorbing states, which effectively pre-
vents redundant items from receiving a
high rank. We demonstrate GRASSHOP-
PER?s effectiveness on extractive text sum-
marization: our algorithm ranks between
the 1st and 2nd systems on DUC 2004
Task 2; and on a social network analy-
sis task that identifies movie stars of the
world.
1 Introduction
Many natural language processing tasks involve
ranking a set of items. Sometimes we want the top
items to be not only good individually but also di-
verse collectively. For example, extractive text sum-
marization generates a summary by selecting a few
good sentences from one or more articles on the
same topic (Goldstein et al, 2000). This can be for-
mulated as ranking all the sentences, and taking the
top ones. A good sentence is one that is represen-
tative, i.e., similar to many other sentences, so that
it likely conveys the central meaning of the articles.
On the other hand, we do not want multiple near-
identical sentences. The top sentences should be di-
verse.
As another example, in information retrieval on
news events, an article is often published by multi-
ple newspapers with only minor changes. It is unde-
sirable to rank all copies of the same article highly,
even though it may be the most relevant. Instead,
the top results should be different and complemen-
tary. In other words, one wants ?subtopic diversity?
in retrieval results (Zhai et al, 2003).
The need for diversity in ranking is not unique to
natural language processing. In social network anal-
ysis, people are connected by their interactions, e.g.,
phone calls. Active groups of people have strong in-
teractions among them, but many groups may exist
with fewer interactions. If we want a list of people
that represent various groups, it is important to con-
sider both activity and diversity, and not to fill the
list with people from the same active groups.
Given the importance of diversity in ranking,
there has been significant research in this area. Per-
haps the most well-known method is maximum
marginal relevance (MMR) (Carbonell and Gold-
stein, 1998), as well as cross-sentence informational
subsumption (Radev, 2000), mixture models (Zhang
et al, 2002), subtopic diversity (Zhai et al, 2003),
diversity penalty (Zhang et al, 2005), and others.
The basic idea is to penalize redundancy by lowering
an item?s rank if it is similar to items already ranked.
However, these methods often treat centrality rank-
ing and diversity ranking separately, sometimes with
heuristic procedures.
97
We propose GRASSHOPPER (Graph Random-walk
with Absorbing StateS that HOPs among PEaks
for Ranking), a novel ranking algorithm that en-
courages diversity. GRASSHOPPER is an alternative
to MMR and variants, with a principled mathemat-
ical model and strong empirical performance. It
ranks a set of items such that: 1. A highly ranked
item is representative of a local group in the set,
i.e., it is similar to many other items (centrality);
2. The top items cover as many distinct groups as
possible (diversity); 3. It incorporates an arbitrary
pre-specified ranking as prior knowledge (prior).
Importantly GRASSHOPPER achieves these in a uni-
fied framework of absorbing Markov chain random
walks. The key idea is the following: We define
a random walk on a graph over the items. Items
which have been ranked so far become absorbing
states. These absorbing states ?drag down? the im-
portance of similar unranked states, thus encourag-
ing diversity. Our model naturally balances central-
ity, diversity, and prior. We discuss the algorithm
in Section 2. We present GRASSHOPPER?s empiri-
cal results on text summarization and social network
analysis in Section 3.
2 The GRASSHOPPER Algorithm
2.1 The Input
GRASSHOPPER requires three inputs: a graph W , a
probability distribution r that encodes the prior rank-
ing, and a weight ? ? [0, 1] that balances the two.
The user needs to supply a graph with n nodes,
one for each item. The graph is represented by an
n? n weight matrix W , where wij is the weight on
the edge from i to j. It can be either directed or undi-
rected. W is symmetric for undirected graphs. The
weights are non-negative. The graph does not need
to be fully connected: if there is no edge from item
i to j, then wij = 0. Self-edges are allowed. For ex-
ample, in text summarization one can create an undi-
rected, fully connected graph on the sentences. The
edge between sentences i, j has weight wij , their co-
sine similarity. In social network analysis one can
create a directed graph with wij being the number
of phone calls i made to j. The graph should be
constructed carefully to reflect domain knowledge.
For examples, see (Erkan and Radev, 2004; Mihal-
cea and Tarau, 2004; Pang and Lee, 2004).
The user can optionally supply an arbitrary rank-
ing on the items as prior knowledge. In this
case GRASSHOPPER can be viewed as a re-ranking
method. For example, in information retrieval,
the prior ranking can be the ranking by relevance
scores. In text summarization, it can be the po-
sition of sentences in the original article. (There
is evidence that the first few sentences in an ar-
ticle are likely good summaries.) Somewhat un-
conventionally, the prior ranking is represented as
a probability distribution r = (r1, ? ? ? , rn)? such
that ri ? 0,
?n
i=1 ri = 1. The highest-ranked item
has the largest probability, the next item has smaller
probability, and so on. A distribution gives the user
more control. For example ra = (0.1, 0.7, 0.2)?
and rb = (0.3, 0.37, 0.33)? both represent the same
ranking of items 2, 3, 1, but with different strengths.
When there is no prior ranking, one can let r =
(1/n, ? ? ? , 1/n)?, the uniform distribution.
2.2 Finding the First Item
We find the first item in GRASSHOPPER ranking by
teleporting random walks. Imagine a random walker
on the graph. At each step, the walker may do one of
two things: with probability ?, she moves to a neigh-
bor state1 according to the edge weights; otherwise
she is teleported to a random state according to the
distribution r. Under mild conditions (which are sat-
isfied in our setting, see below), the stationary distri-
bution of the random walk defines the visiting prob-
abilities of the nodes. The states with large probabil-
ities can be regarded as central items, an idea used
in Google PageRank (Page et al, 1998) and other in-
formation retrieval systems (Kurland and Lee, 2005;
Zhang et al, 2005), text summarization (Erkan and
Radev, 2004), keyword extraction (Mihalcea and Ta-
rau, 2004) and so on. Depending on ?, items high on
the user-supplied prior ranking r may also have large
stationary probabilities, which is a way to incorpo-
rate the prior ranking.
As an example, we created a toy data set with 300
points in Figure 1(a). There are roughly three groups
with different densities. We created a fully con-
nected graph on the data, with larger edge weights
if points are closer2. Figure 1(b) shows the station-
ary distribution of the random walk on the graph.
1We use state, node and item interchangeably.
2We use wij = exp(??xi ? xj?2/0.16), ? = 1.
98
0 5 100
2
4
6
8
0 5
10
05
100
0.005
0.01
0.015
g1
0 5
10
05
100
2
4
6
g2
0 5
10
05
100
0.5
1
1.5
g3
(a) (b) (c) (d)
Figure 1: (a) A toy data set. (b) The stationary distribution pi reflects centrality. The item with the largest
probability is selected as the first item g1. (c) The expected number of visits v to each node after g1 becomes
an absorbing state. (d) After both g1 and g2 become absorbing states. Note the diversity in g1, g2, g3 as they
come from different groups.
Items at group centers have higher probabilities, and
tighter groups have overall higher probabilities.
However, the stationary distribution does not ad-
dress diversity at all. If we were to rank the items
by their stationary distribution, the top list would be
dominated by items from the center group in Fig-
ure 1(b). Therefore we only use the stationary dis-
tribution to find the first item, and use a method
described in the next section to rank the remaining
items.
Formally we first define an n ? n raw transition
matrix P? by normalizing the rows of W : P?ij =
wij/
?n
k=1 wik, so that P?ij is the probability that the
walker moves to j from i. We then make the walk
a teleporting random walk P by interpolating each
row with the user-supplied initial distribution r:
P = ?P? + (1 ? ?)1r?, (1)
where 1 is an all-1 vector, and 1r? is the outer prod-
uct. If ? < 1 and r does not have zero elements,
our teleporting random walk P is irreducible (possi-
ble to go to any state from any state by teleporting),
aperiodic (the walk can return to a state after any
number of steps), all states are positive recurrent (the
expected return time to any state is finite) and thus
ergodic (Grimmett and Stirzaker, 2001). Therefore
P has a unique stationary distribution pi = P?pi.
We take the state with the largest stationary proba-
bility to be the first item g1 in GRASSHOPPER rank-
ing: g1 = argmaxni=1 pii.
2.3 Ranking the Remaining Items
As mentioned early, the key idea of GRASSHOPPER
is to turn ranked items into absorbing states. We
first turn g1 into an absorbing state. Once the ran-
dom walk reaches an absorbing state, the walk is ab-
sorbed and stays there. It is no longer informative to
compute the stationary distribution of an absorbing
Markov chain, because the walk will eventually be
absorbed. Nonetheless, it is useful to compute the
expected number of visits to each node before ab-
sorption. Intuitively, those nodes strongly connected
to g1 will have many fewer visits by the random
walk, because the walk tends to be absorbed soon
after visiting them. In contrast, groups of nodes far
away from g1 still allow the random walk to linger
among them, and thus have more visits. In Fig-
ure 1(c), once g1 becomes an absorbing node (rep-
resented by a circle ?on the floor?), the center group
is no longer the most prominent: nodes in this group
have fewer visits than the left group. Note now the
y-axis is the number of visits instead of probability.
GRASSHOPPER selects the second item g2 with the
largest expected number of visits in this absorbing
Markov chain. This naturally inhibits items similar
to g1 and encourages diversity. In Figure 1(c), the
item near the center of the left group is selected as
g2. Once g2 is selected, it is converted into an ab-
sorbing state, too. This is shown in Figure 1(d). The
right group now becomes the most prominent, since
both the left and center groups contain an absorbing
state. The next item g3 in ranking will come from the
right group. Also note the range of y-axis is smaller:
99
with more absorbing states, the random walk will be
absorbed sooner. The procedure is repeated until all
items are ranked. The name GRASSHOPPER reflects
the ?hopping? behavior on the peaks.
It is therefore important to compute the expected
number of visits in an absorbing Markov chain. Let
G be the set of items ranked so far. We turn the states
g ? G into absorbing states by setting Pgg = 1 and
Pgi = 0,?i 6= g. If we arrange items so that ranked
ones are listed before unranked ones, we can write
P as
P =
[
IG 0
R Q
]
. (2)
Here IG is the identity matrix on G. Submatrices R
and Q correspond to rows of unranked items, those
from (1). It is known that the fundamental matrix
N = (I ?Q)?1 (3)
gives the expected number of visits in the absorbing
random walk (Doyle and Snell, 1984). In particular
Nij is the expected number of visits to state j be-
fore absorption, if the random walk started at state i.
We then average over all starting states to obtain vj ,
the expected number of visits to state j. In matrix
notation,
v = N
?1
n? |G| , (4)
where |G| is the size of G. We select the state with
the largest expected number of visits as the next item
g|G|+1 in GRASSHOPPER ranking:
g|G|+1 = argmaxni=|G|+1 vi. (5)
The complete GRASSHOPPER algorithm is summa-
rized in Figure 2.
2.4 Some Discussions
To see how ? controls the tradeoff, note when ? = 1
we ignore the user-supplied prior ranking r, while
when ? = 0 one can show that GRASSHOPPER re-
turns the ranking specified by r.
Our data in Figure 1(a) has a cluster struc-
ture. Many methods have exploited such structure,
e.g., (Hearst and Pedersen, 1996; Leuski, 2001; Liu
and Croft, 2004). In fact, a heuristic algorithm is
to first cluster the items, then pick the central items
from each cluster in turn. But it can be difficult to
Input: W , r, ?
1. Create the initial Markov chain P from
W, r, ? (1).
2. Compute P ?s stationary distribution pi. Pick the
first item g1 = argmaxi pii.
3. Repeat until all items are ranked:
(a) Turn ranked items into absorbing
states (2).
(b) Compute the expected number of visits v
for all remaining items (4). Pick the next
item g|G|+1 = argmaxi vi
Figure 2: The GRASSHOPPER algorithm
determine the appropriate number and control the
shape of clusters. In contrast, GRASSHOPPER does
not involve clustering. However it is still able to
automatically take advantage of cluster structures in
the data.
In each iteration we need to compute the fun-
damental matrix (3). This involves inverting an
(n ? |G|) ? (n ? |G|) matrix, which is expensive.
However the Q matrix is reduced by one row and
one column in every iteration, but is otherwise un-
changed. This allows us to apply the matrix in-
version lemma (Sherman-Morrison-Woodbury for-
mula) (Press et al, 1992). Then we only need to
invert the matrix once in the first iteration, but not in
subsequent iterations. Space precludes a full discus-
sion, but we point out that it presents a significant
speed up. A Matlab implementation can be found
at http://www.cs.wisc.edu/?jerryzhu/
pub/grasshopper.m.
3 Experiments
3.1 Text Summarization
Multi-document extractive text summarization is a
prime application for GRASSHOPPER. In this task, we
must select and rank sentences originating from a
set of documents about a particular topic or event.
The goal is to produce a summary that includes all
the relevant facts, yet avoids repetition that may
result from using similar sentences from multiple
documents. In this section, we demonstrate that
100
GRASSHOPPER?s balance of centrality and diversity
makes it successful at this task. We present em-
pirical evidence that GRASSHOPPER achieves results
competitive with the top text summarizers in the
2004 Document Understanding Conference (http:
//duc.nist.gov). DUC is a yearly text summa-
rization community evaluation, with several tasks in
recent years concentrating on multi-document sum-
marization (described in more detail below).
Many successful text summarization systems
achieve a balance between sentence centrality and
diversity in a two-step process. Here we review the
LexRank system (Erkan and Radev, 2004), which
is most similar to our current approach. LexRank
works by placing sentences in a graph, with edges
based on the lexical similarity between the sentences
(as determined by a cosine measure). Each sen-
tence is then assigned a centrality score by finding
its probability under the stationary distribution of
a random walk on this graph. Unlike the similar
PageRank algorithm (Page et al, 1998), LexRank
uses an undirected graph of sentences rather than
Web pages, and the edge weights are either cosine
values or 0/1 with thresholding. The LexRank cen-
trality can be combined with other centrality mea-
sures, as well as sentence position information. Af-
ter this first step of computing centrality, a sec-
ond step performs re-ranking to avoid redundancy
in the highly ranked sentences. LexRank uses cross-
sentence informational subsumption (Radev, 2000)
to this end, but MMR (Carbonell and Goldstein,
1998) has also been widely used in the text sum-
marization community. These methods essentially
disqualify sentences that are too lexically similar to
sentences ranked higher by centrality. In short, sim-
ilar graph-based approaches to text summarization
rely on two distinct processes to measure each sen-
tence?s importance and ensure some degree of diver-
sity. GRASSHOPPER, on the other hand, achieves the
same goal in a unified procedure.
We apply GRASSHOPPER to text summarization in
the following manner. Our graph contains nodes
for all the sentences in a document set. We
used the Clair Library (http://tangra.si.
umich.edu/clair/clairlib) to split docu-
ments into sentences, apply stemming, and create
a cosine matrix for the stemmed sentences. Cosine
values are computed using TF-IDF vectors. As in
LexRank, edges in the graph correspond to text sim-
ilarity. To create a sparse graph, we use the cosine
threshold value of 0.1 obtained in (Erkan and Radev,
2004). Specifically, the edge weight between sen-
tence vectors si and sj is defined as
wij =
{
1 if s
?
i sj
?si???sj? > 0.1
0 otherwise
. (6)
The second input for GRASSHOPPER is an initial
ranking distribution, which we derive from the po-
sition of each sentence in its originating document.
Position forms the basis for lead-based summaries
(i.e., using the first N sentences as the summary)
and leads to very competitive summaries (Brandow
et al, 1995). We form an initial ranking for each
sentence by computing p??, where p is the position
of the sentence in its document, and ? is a posi-
tive parameter trained on a development dataset. We
then normalize over all sentences in all documents
to form a valid distribution r ? p?? that gives high
probability to sentences closer to the beginning of
documents. With a larger ?, the probability assigned
to later sentences decays more rapidly.
To evaluate GRASSHOPPER, we experimented with
DUC datasets. We train our parameters (? and ?)
using the DUC 2003 Task 2 data. This dataset con-
tains 30 document sets, each with an average of 10
documents about a news event. We test GRASSHOP-
PER?s performance on the DUC 2004 Task 2, Tasks
4a and 4b data. DUC 2004 Task 2 has 50 document
sets of 10 documents each. Tasks 4a and 4b explored
cross-lingual summarization. These datasets consist
of Arabic-to-English translations of news stories.
The documents in Task 4a are machine-translated,
while Task 4b?s are manually-translated. Note that
we handle the translated documents in exactly the
same manner as the English documents.
We evaluate our results using the standard text
summarization metric ROUGE (http://www.
isi.edu/?cyl/ROUGE/). This is a recall-based
measure of text co-occurrence between a machine-
generated summary and model summaries manually
created by judges. ROUGE metrics exist based on
bigram, trigram, and 4-gram overlap, but ROUGE-1
(based on unigram matching) has been found to cor-
relate best with human judgments (Lin and Hovy,
2003).
101
Using the DUC 2003 training data, we tuned ?
and ? on a small grid (? ? {0.125, 0.25, 0.5, 1.0};
? ? {0.0, 0.0625, 0.125, 0.25, 0.5, 0.95}). Specifi-
cally, for each of the 30 DUC 2003 Task 2 document
sets, we computed ROUGE-1 scores comparing our
generated summary to 4 model summaries. We av-
eraged the resulting ROUGE-1 scores across all 30
sets to produce a single average ROUGE-1 score to
assess a particular parameter configuration. After
examining the results for all 24 configurations, we
selected the best one: ? = 0.25 and ? = 0.5.
Table 1 presents our results using these parame-
ter values to generate summaries for the three DUC
2004 datasets. Note that the averages listed are ac-
tually averages over 4 model summaries per set, and
over all the sets. Following the standard DUC pro-
tocol, we list the confidence intervals calculated by
ROUGE using a bootstrapping technique. The fi-
nal column compares our results to the official sys-
tems that participated in the DUC 2004 evaluation.
GRASSHOPPER is highly competitive in these text
summarization tasks: in particular it ranks between
the 1st and 2nd automatic systems on 2004 Task 2.
The lower performance in Task 4a is potentially due
to the documents being machine-translated. If they
contain poorly translated sentences, graph edges
based on cosine similarity could be less meaning-
ful. For such a task, more advanced text processing
is probably required.
3.2 Social Network Analysis
As another application of GRASSHOPPER, we iden-
tify the nodes in a social network that are the most
prominent, and at the same time maximally cover
the network. A node?s prominence comes from its
intrinsic stature, as well as the prominence of the
nodes it touches. However, to ensure that the top-
ranked nodes are representative of the larger graph
structure, it is important to make sure the results are
not dominated by a small group of highly prominent
nodes who are closely linked to one another. This re-
quirement makes GRASSHOPPER a useful algorithm
for this task.
We created a dataset from the Internet Movie
Database (IMDb) that consists of all comedy movies
produced between 2000 and 2006, and have received
more than 500 votes by IMDb users. This results in
1027 movies. We form a social network of actors by
co-star relationship. Not surprisingly, actors from
the United States dominate our dataset, although a
total of 30 distinct countries are represented. We
seek an actor ranking such that the top actors are
prominent. However, we also want the top actors to
be diverse, so they represent comedians from around
the world.
This problem is framed as a GRASSHOPPER rank-
ing problem. For each movie, we considered only
the main stars, i.e., the first five cast members, who
tend to be the most important. The resulting list con-
tains 3452 unique actors. We formed a social net-
work where the nodes are the actors, and undirected
weighted edges connect actors who have appeared in
a movie together. The edge weights are equal to the
number of movies from our dataset in which both
actors were main stars. Actors are also given a self-
edge with weight 1. The co-star graph is given to
GRASSHOPPER as an input. For the prior actor rank-
ing, we simply let r be proportional to the number
of movies in our dataset in which an actor has ap-
peared. We set the weight ? = 0.95. It is important
to note that no country information is ever given to
GRASSHOPPER.
We use two measurements, ?country coverage?
and ?movie coverage?, to study the diversity and
prominence of the ranking produced by GRASSHOP-
PER. We compare GRASSHOPPER to two baselines:
ranking based solely on the number of movies an ac-
tor has appeared in, MOVIECOUNT, and a randomly
generated ranking, RANDOM.
First, we calculate ?country coverage? as the num-
ber of different countries represented by the top k ac-
tors, for all k values. Each actor represents a single
country?the country that the actor has appeared in
the most. We hypothesize that actors are more likely
to have co-star connections to actors within the same
country, so our social network may have, to some
extent, a clustering structure by country. ?Country
coverage? approximates the number of clusters rep-
resented at different ranks.
Figure 3(a) shows that country coverage grows
much more rapidly for GRASSHOPPER than for
MOVIECOUNT. That is, we see more comedians from
around the world ranked highly by GRASSHOPPER.
In contrast, the top ranks of MOVIECOUNT are dom-
inated by US actors, due to the relative abundance
of US movies on IMDb. Many other countries are
102
Number of Average GRASSHOPPER
Dataset Doc. Sets ROUGE-1 95% C.I. Unofficial Rank
DUC 2004 Task 2 50 0.3755 [0.3622, 0.3888] Between 1 & 2 of 34
DUC 2004 Task 4a 24 0.3785 [0.3613, 0.3958] Between 5 & 6 of 11
DUC 2004 Task 4b 24 0.4067 [0.3883, 0.4251] Between 2 & 3 of 11
Table 1: Text summarization results on DUC 2004 datasets. GRASSHOPPER was configured using parameters
tuned on the DUC 2003 Task 2 dataset. The rightmost column lists what our rank would have been if we
had participated in the DUC 2004 evaluation.
not represented until further down in the ranked
list. This demonstrates that GRASSHOPPER ranking is
successful in returning a more diverse ranking. Be-
cause of the absorbing states in GRASSHOPPER, the
first few highly ranked US actors encourage the se-
lection of actors from other regions of the co-star
graph, which roughly correspond to different coun-
tries. RANDOM achieves even higher country cover-
age initially, but is quickly surpassed by GRASSHOP-
PER. The initial high coverage comes from the ran-
dom selection of actors. However these randomly
selected actors are often not prominent, as we show
next.
Second, we calculate ?movie coverage? as the to-
tal number of unique movies the top k actors are
in. We expect that actors who have been in more
movies are more prominent. This is reasonable be-
cause we count an actor in a movie only if the actor
is among the top five actors from that movie. Our
counts thus exclude actors who had only small roles
in numerous movies. Therefore high movie cov-
erage roughly corresponds to ranking more promi-
nent actors highly. It is worth noting that this mea-
sure also partially accounts for diversity, since an
actor whose movies completely overlap with those
of higher-ranked actors contributes nothing to movie
coverage (i.e., his/her movies are already covered by
higher-ranked actors).
Figure 3(b) shows that the movie cover-
age of GRASSHOPPER grows more rapidly than
MOVIECOUNT, and much more rapidly than RAN-
DOM. The results show that, while the RANDOM
ranking is diverse, it is not of high quality be-
cause it fails to include many prominent actors in
its high ranks. This is to be expected of a ran-
dom ranking. Since the vast majority of the ac-
tors appear in only one movie, the movie cover-
age curve is roughly linear in the number of ac-
tors. By ranking more prominent actors highly, the
GRASSHOPPER and MOVIECOUNT movie coverage
curves grow faster. Many of the US actors highly
ranked by MOVIECOUNT are co-stars of one an-
other, so GRASSHOPPER outperforms MOVIECOUNT
in terms of movie coverage too.
We inspect the GRASSHOPPER ranking, and find
the top 5 actors to be Ben Stiller, Anthony Anderson,
Johnny Knoxville, Eddie Murphy and Adam San-
dler. GRASSHOPPER also brings many countries, and
major stars from those countries, into the high ranks.
Examples include Mads Mikkelsen (?synonym to
the great success the Danish film industry has had?),
Cem Yilmaz (?famous Turkish comedy actor, cari-
caturist and scenarist?), Jun Ji-Hyun (?face of South
Korean cinema?), Tadanobu Asano (?Japan?s an-
swer to Johnny Depp?), Aamir Khan (?prominent
Bollywood film actor?), and so on3. These actors
are ranked significantly lower by MOVIECOUNT.
These results indicate that GRASSHOPPER
achieves both prominence and diversity in ranking
actors in the IMDb co-star graph.
4 Conclusions
GRASSHOPPER ranking provides a unified approach
for achieving both diversity and centrality. We have
shown its effectiveness in text summarization and
social network analysis. As future work, one direc-
tion is ?partial absorption,? where at each absorbing
state the random walk has an escape probability to
continue the random walk instead of being absorbed.
Tuning the escape probability creates a continuum
between PageRank (if the walk always escapes) and
GRASSHOPPER (if always absorbed). In addition, we
will explore the issue of parameter learning, and
3Quotes from IMDb and Wikipedia.
103
0 100 200 300 400 500
0
5
10
15
20
25
30
k (number of actors)
N
um
be
r o
f c
ou
nt
rie
s 
co
ve
re
d
 
 
GRASSHOPPER
MOVIECOUNT
RANDOM
0 100 200 300 400 500
0
100
200
300
400
500
600
700
800
900
1000
k (number of actors)
N
um
be
r o
f m
ov
ie
s 
co
ve
re
d
 
 
GRASSHOPPER
MOVIECOUNT
RANDOM
(a) Country coverage (b) Movie coverage
Figure 3: (a) Country coverage at ranks up to 500, showing that GRASSHOPPER and RANDOM rankings are
more diverse than MOVIECOUNT. (b) Movie coverage at ranks up to 500, showing that GRASSHOPPER and
MOVIECOUNT have more prominent actors than RANDOM. Overall, GRASSHOPPER is the best.
user feedback (e.g., ?This item should be ranked
higher.?). We also plan to apply GRASSHOPPER to a
variety of tasks, including information retrieval (for
example ranking news articles on the same event as
in Google News, where many newspapers might use
the same report and thus result in a lack of diversity),
image collection summarization, and social network
analysis for national security and business intelli-
gence.
Acknowledgment We thank Mark Craven and the anony-
mous reviewers for helpful comments. This work is supported
in part by Wisconsin Alumni Research Foundation (WARF) and
NLM training grant 5T15LM07359.
References
R. Brandow, K. Mitze, and Lisa F. Rau. 1995. Automatic con-
densation of electronic publications by sentence selection.
Inf. Process. Manage., 31(5):675?685.
Jaime Carbonell and Jade Goldstein. 1998. The use of MMR,
diversity-based reranking for reordering documents and pro-
ducing summaries. In SIGIR?98.
P.G. Doyle and J.L. Snell. 1984. Random Walks and Electric
Networks. Mathematical Assoc. of America.
Gu?nes? Erkan and Dragomir R. Radev. 2004. LexRank: Graph-
based centrality as salience in text summarization. Journal
of Artificial Intelligence Research.
Jade Goldstein, Vibhu Mittal, Jaime Carbonell, and Mark
Kantrowitz. 2000. Multi-document summarization by sen-
tence extraction. In NAACL-ANLP 2000 Workshop on Auto-
matic summarization, pages 40?48.
Geoffrey R. Grimmett and David R. Stirzaker. 2001. Proba-
bility and Random Processes. Oxford Science Publications,
third edition.
Marti A. Hearst and Jan O. Pedersen. 1996. Reexamining
the cluster hypothesis: Scatter/gather on retrieval results. In
SIGIR-96.
Oren Kurland and Lillian Lee. 2005. PageRank without hyper-
links: Structural re-ranking using links induced by language
models. In SIGIR?05.
Anton Leuski. 2001. Evaluating document clustering for inter-
active information retrieval. In CIKM?01.
Chin-Yew Lin and Eduard Hovy. 2003. Automatic evalua-
tion of summaries using n-gram co-occurrence statistics. In
NAACL?03, pages 71?78.
Xiaoyong Liu and W. Bruce Croft. 2004. Cluster-based re-
trieval using language models. In SIGIR?04.
Rada Mihalcea and Paul Tarau. 2004. TextRank: Bringing
order into texts. In EMNLP?04.
Lawrence Page, Sergey Brin, Rajeev Motwani, and Terry Wino-
grad. 1998. The PageRank citation ranking: Bringing order
to the web. Technical report, Stanford Digital Library Tech-
nologies Project.
Bo Pang and Lillian Lee. 2004. A sentimental education: Sen-
timent analysis using subjectivity summarization based on
minimum cuts. In ACL, pages 271?278.
W.H. Press, S.A. Teukolsky, W.T. Vetterling, and B.P. Flannery.
1992. Numerical recipes in C: the art of scientific comput-
ing. Cambridge University Press New York, NY, USA.
Dragomir Radev. 2000. A common theory of information fu-
sion from multiple text sources, step one: Cross-document
structure. In Proceedings of the 1st ACL SIGDIAL Workshop
on Discourse and Dialogue.
ChengXiang Zhai, William W. Cohen, and John Lafferty. 2003.
Beyond independent relevance: Methods and evaluation
metrics for subtopic retrieval. In SIGIR?03.
Yi Zhang, Jamie Callan, and Thomas Minka. 2002. Novelty
and redundancy detection in adaptive filtering. In SIGIR?02.
Benyu Zhang, Hua Li, Yi Liu, Lei Ji, Wensi Xi, Weiguo Fan,
Zheng Chen, and Wei-Ying Ma. 2005. Improving web
search results using affinity graph. In SIGIR?05.
104
