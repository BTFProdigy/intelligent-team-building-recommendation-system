Proceedings of the 5th Workshop on Important Unresolved Matters, pages 136?143,
Ann Arbor, June 2005. c?2005 Association for Computational Linguistics
Validation and Regression Testing for a Cross-linguisic Grammar Resource
Emily M. Bender, Laurie Poulson, Scott Drellishak, Chris Evans
University of Washington
Department of Linguistics
Seattle WA 98195-4340 USA
{ebender,lpoulson,sfd,chrisev@u.washington.edu}
Abstract
We present a validation methodology for
a cross-linguistic grammar resource which
produces output in the form of small gram-
mars based on elicited typological descrip-
tions. Evaluating the resource entails sam-
pling from a very large space of language
types, the type and range of which preclude
the use of standard test suites development
techniques. We produce a database from
which gold standard test suites for these
grammars can be generated on demand, in-
cluding well-formed strings paired with all
of their valid semantic representations as
well as a sample of ill-formed strings. These
string-semantics pairs are selected from a
set of candidates by a system of regular-
expression based filters. The filters amount
to an alternative grammar building system,
whose generative capacity is limited com-
pared to the actual grammars. We perform
error analysis of the discrepancies between
the test suites and grammars for a range of
language types, and update both systems ap-
propriately. The resulting resource serves as
a point of comparison for regression testing
in future development.
1 Introduction
The development and maintenance of test suites is
integral to the process of writing deep linguistic
grammars (Oepen and Flickinger, 1998; Butt and
King, 2003). Such test suites typically contain hand-
constructed examples illustrating the grammatical
phenomena treated by the grammar as well as rep-
resentative examples taken from texts from the tar-
get domain. In combination with test suite manage-
ment software such as [incr tsdb()] (Oepen, 2002),
they are used for validation and regression testing of
precision (deep linguistic) grammars as well as the
exploration of potential changes to the grammar.
In this paper, we consider what happens when the
precision grammar resource being developed isn?t a
grammar of a particular language, but rather a cross-
linguistic grammar resource. In particular, we con-
sider the LinGO Grammar Matrix (Bender et al,
2002; Bender and Flickinger, 2005). There are sev-
eral (related) obstacles to making effective use of
test suites in this scenario: (1) The Matrix core
grammar isn?t itself a grammar, and therefore can?t
parse any strings. (2) There is no single language
modeled by the cross-linguistic resource from which
to draw test strings. (3) The space of possible gram-
mars (alternatively, language types) modeled by the
resource is enormous, well beyond the scope of what
can be thoroughly explored.
We present a methodology for the validation and
regression testing of the Grammar Matrix that ad-
dresses these obstacles, developing the ideas origi-
nally proposed in (Poulson, 2006). In its broad out-
lines, our methodology looks like this:
? Define an abstract vocabulary to be used for test
suite purposes.
? Define an initial small set of string-semantics
pairs.
? Construct a large set of variations on the string-
semantics pairs.
136
? Define a set of filters that can delineate the le-
gitimate string-semantics pairs for a particular
language type
The filters in effect constitute a parallel grammar
definition system, albeit one that creates ?grammars?
of very limited generative capacity. As such, the out-
put of the filters cannot be taken as ground truth.
Rather, it serves as a point of comparison that al-
lows us to find discrepancies between the filters and
the Grammar Matrix which in turn can lead us to
errors in the Grammar Matrix.
2 Background
The Grammar Matrix is an open-source starter kit
designed to jump-start the development of broad-
coverage precision grammars, capable of both pars-
ing and generation and suitable for use in a vari-
ety of NLP applications. The Grammar Matrix is
written within the HPSG framework (Pollard and
Sag, 1994), using Minimal Recursion Semantics
(Copestake et al, 2005) for the semantic represen-
tations. The particular formalism we use is TDL
(type description language) as interpreted by the
LKB (Copestake, 2002) grammar development en-
vironment. Initial work on the Matrix (Bender et
al., 2002; Flickinger and Bender, 2003) focused on
the development of a cross-linguistic core grammar.
The core grammar provides a solid foundation for
sustained development of linguistically-motivated
yet computationally tractable grammars (e.g., (Hel-
lan and Haugereid, 2003; Kordoni and Neu, 2005)).
However, the core grammar alone cannot parse
and generate sentences: it needs to be specialized
with language-specific information such as the or-
der of daughters in its rules (e.g., head-subject or
subject-head), and it needs a lexicon. Although
word order and many other phenomena vary across
languages, there are still recurring patterns. To al-
low reuse of grammar code across languages and to
increase the size of the jump-start provided by the
Matrix, in more recent work (Bender and Flickinger,
2005; Drellishak and Bender, 2005), we have been
developing ?libraries? implementing realizations of
various linguistic phenomena. Through a web in-
terface, grammar developers can configure an initial
starter grammar by filling out a typological question-
naire about their language, which in turn calls a CGI
script to ?compile? a grammar (including language-
specific rule types, lexical entry types, rule entries,
and lexical entries) by making appropriate selections
from the libraries. These little grammars describe
very small fragments of the languages they model,
but they are not toys. Their purpose is to be good
starting points for further development.
The initial set of libraries includes: basic word or-
der of major constituents in matrix clauses (SOV et
al), optionality/obligatoriness of determiners, noun-
determiner order, NP v. PP arguments of intransitive
and transitive verbs, strategies for expressing senten-
tial negation and yes-no questions, and strategies for
constituent coordination. Even with this small set of
phenomena covered (and limiting ourselves for test-
ing purposes to maximally two coordination strate-
gies per language), we have already defined a space
of hundreds of thousands of possible grammars.1
3 The Non-modularity of Linguistic
Phenomena
In this section we discuss our findings so far about
the non-modularity of linguistic phenomena, and ar-
gue that this makes the testing of a broad sample of
grammars even more pressing.
The Grammar Matrix customization system reads
in the user?s language specification and then outputs
language-specific definitions of types (rule types,
lexical entry types and ancillary structures) that in-
herit from types defined in the crosslinguistic core
of the Matrix but add constraints appropriate for the
language at hand. Usability considerations put two
important constraints on this system: (1) The ques-
tions must be ones that are sensible to linguists, who
tend to consider phenomena one at a time. (2) The
output grammar code must be both readable and
maintainable. To achieve readable grammar code
in the output TDL, among other things, we follow
the guideline that any given constraint is stated only
once. If multiple types require the same constraint,
they should all inherit from some supertype bearing
that constraint. In addition, all constraints pertaining
to a particular type are stated in one place.
In light of the these usability considerations, we
1If all of the choices in the customization system were in-
dependent, we would have more than 2 x 1027 grammars. In
actuality, constraints on possible combinations of choices limit
this space considerably.
137
comp-head-phrase := basic-head-1st-comp-phrase & head-final.
subj-head-phrase := basic-head-subj-phrase & head-final &
[ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].
Figure 1: Specialized phrase structure rule types for SOV language
have found that it is not possible to treat the li-
braries as black-box modules with respect to each
other. The libraries are interdependent, and the por-
tions of the script that interpret one part of the input
questionnaire frequently need to make reference to
information elicited by other parts of the question-
naire. For example, the customization system imple-
ments major constituent word order by specializing
the head-complement and head-subject rule types
provided in the core grammar. In an SOV language,
these would both be cross-classified with the type
head-final, and the head-subject rule would further
be constrained to take only complement-saturated
phrases as its head daughter. The TDL encoding of
these constraints is shown in Figure 1.
Following standard practice in HPSG, we use the
head-complement phrase not only for ordinary VPs,
but also for PPs, CPs, and auxiliary-headed VPs,
etc. Consider Polish, a free word order language that
nonetheless has prepositions. To allow complements
on either side of the head, we instantiate both head-
comp and comp-head rules, inheriting from head-
initial and head-final respectively. Yet the preposi-
tions must be barred from the head-final version lest
the grammar license postpositional phrases by mis-
take. We do this by constraining the HEAD value of
the comp-head phrase. Similarly, question particles
(such as est-ce que in French or ma in Mandarin)
are treated as complementizers: heads that select for
an S complement. Since these, too, may differ in
their word order properties from verbs (and preposi-
tions), we need information about the question par-
ticles (elicited with the rest of the information about
yes-no questions) before we have complete informa-
tion about the head-complement rule. Furthermore,
it is not simply a question of adding constraints to
existing types. Consider the case of an SOV lan-
guage with prepositions and sentence-initial ques-
tion particles. This language would need a head-
initial head-comp rule that can take only preposi-
tions and complementizers as its head. To express
the disjunction, we must use the supertype to prep
and comp. This, in turn, means that we can?t decide
what constraint to put on the head value of the head-
comp rule until we?ve considered questions as well
as the basic word order facts.
We expect to study the issue of (non-)modularity
as we add additional libraries to the resource and to
investigate whether the grammar code can be refac-
tored in such a way as to make the libraries into true
modules. We suspect it might be possible to reduce
the degree of interdependence, but not to achieve
completely independent libraries, because syntactic
phenomena are inherently interdependent. Agree-
ment in NP coordination provides an example. In
English and many other languages, coordinated NPs
are always plural and the person of the coordinated
NP is the minimal person value of the coordinands.
(1) a. A cat and a dog are/*is chasing a mouse.
b. Kim and I should handle this ourselves.
c. You and Kim should handle this yourselves.
Gender systems often display a similar hierarchy of
values, as with French coordinated NPs, where the
whole NP is feminine iff all coordinands are femi-
nine and masculine otherwise. Thus it appears that
it is not possible to define all of the necessary con-
straints on the coordination rules without having ac-
cess to information about the agreement system.
Even if we were able to make our analyses of
different linguistic phenomena completely modular,
however, we would still need to test their interaction
in the analysis of particular sentences. Any sentence
that illustrates sentential negation, a matrix yes-no
question, or coordination also necessarily illustrates
at least some aspects of word order, the presence
v. absence of determiners and case-marking adpo-
sitions, and the subcategorization of the verb that
heads the sentence. Furthermore, broad-coverage
grammars need to allow negation, questions, coor-
dination etc. all to appear in the same sentence.
Given this non-modularity, we would ideally like
to be able to validate (and do regression testing on)
the full set of grammars generable by the customiza-
138
Form Description Options
det determiner
n1, n2 nouns det is optional, obligatory, impossible
iv, tv intransitive, transitive verb subj, obj are NP or PP
p-nom, p-acc case-marking adpositions preposition or postposition
neg negative element adverb, prefix, suffix
co1, co2 coordination marks word, prefix, suffix
qpart question particle
Table 1: Standardized lexicon
tion system. To approximate such thoroughness, we
instead sample from the grammar space.
4 Methodology
This section describes in some detail our methodol-
ogy for creating test suites on the basis of language-
type descriptions. A language type is a collection
of feature-value pairs representing a possible set
of answers to the Matrix customization question-
naire. We refer to these as language types rather
than languages, because the grammars produced by
the customization system are underspecified with re-
spect to actual languages, i.e., one and the same
starter grammar might be extended into multiple
models corresponding to multiple actual human lan-
guages. Accordingly, when we talk about the pre-
dicted (well)formedness, or (un)grammaticality, of a
candidate string, we are referring to its predicted sta-
tus with respect to a language type definition, not its
grammaticality in any particular (human) language.
4.1 Implementation: Python and MySQL
The test suite generation system includes a MySQL
database, a collection of Python scripts that interact
with the database, and some stored SQL queries. As
the set of items we are manipulating is quite large
(and will grow as new items are added to test ad-
ditional libraries), using a database is essential for
rapid retrieval of relevant items. Furthermore, the
database facilitates the separation of procedural and
declarative knowledge in the definition of the filters.
4.2 Abstract vocabulary for abstract strings
A grammar needs not just syntactic constructions
and lexical types, but also an actual lexicon. Since
we are working at the level of language types, we
are free to define this lexicon in whatever way is
most convenient. Much of the idiosyncrasy in lan-
guage resides in the lexicon, both in the form of mor-
phemes and in the particular grammatical and collo-
cational constraints associated with them. Of these
three, only the grammatical constraints are manip-
ulated in any interesting way within the Grammar
Matrix customization system. Therefore, for the test
suite, we define all of the language types to draw the
forms of their lexical items from a shared, standard-
ized vocabulary. Table 1 illustrates the vocabulary
along with the options that are currently available
for varying the grammatical constraints on the lex-
ical entries. Using the same word forms for each
grammar contributes substantially to building a sin-
gle resource that can be adapted for the testing of
each language type.
4.3 Constructing master item set
We use string to refer to a sequence of words to
be input to a grammar and result as the (expected)
semantic representation. An item is a particular
pair of string and result. Among strings, we have
seed strings provided by the Matrix developers to
seed the test suite, and constructed strings derived
from those seed strings. The constructor function
is the algorithm for deriving new strings from the
seed strings. Seed strings are arranged into seman-
tic equivalence classes, from which one representa-
tive is designated the harvester string. We parse the
harvester string with some appropriate grammar (de-
rived from the Matrix customization system) to ex-
tract the semantic representation (result) to be paired
with each member of the equivalence class.
The seed strings, when looked at as bags of words,
should cover all possible realizations of the phe-
nomenon treated by the library. For example, the
negation library allows both inflectional and adver-
bial negation, as well as negation expressed through
both inflection and an adverb together. To illustrate
139
negation of transitive sentences (allowing for lan-
guages with and without determiners2), we require
the seed strings in (2):
(2) Semtag: neg1 Semtag: neg2
n1 n2 neg tv det n1 det n2 neg tv
n1 n2 neg-tv det n1 det n2 neg-tv
n1 n2 tv-neg det n1 det n2 tv-neg
n1 n2 neg neg-tv det n1 det n2 neg neg-tv
n1 n2 neg tv-neg det n1 det n2 neg tv-neg
Sentential negation has the same semantic reflex
across all of its realizations, but the presence v. ab-
sence of overt determiners does have a semantic ef-
fect. Accordingly, the seed strings shown in (2) can
be grouped into two semantic equivalence classes,
shown as the first and second columns in the table,
and associated with the semantic tags ?neg1? and
?neg2?, respectively. The two strings in the first row
could be designated as the harvester strings, associ-
ated with a grammar for an SOV language with op-
tional determiners preceding the noun and sentential
negation expressed as a pre-head modifier of V.
We use the LKB in conjunction with [incr tsdb()]
to parse the harvester strings from all of the equiva-
lence classes with the appropriate grammars. Then
the seed strings and the parsing results from the har-
vester strings, as well as their semantic tags, are
stored and linked in our relational database. We use
the constructor function to create new strings from
these seed strings. This produces the master item set
that provides the basis for the test suites.
Currently, we have only one constructor function
(?permute?) which takes in a seed string and returns
all unique permutations of the morphemes in that
seed string.3 This constructor function is effective
in producing test items that cover the range of word
order variations currently permitted by the Grammar
Matrix customization system. Currently, most of the
other kinds of variation countenanced (e.g., adver-
bial v. inflectional negation or presence v. absence
of determiners) is handled through the initial seed
string construction. As the range of phenomena han-
dled by the customization system expands, we will
develop more sophisticated constructor functions to
2We require additional seed strings to account for languages
with and without case-marking adpositions
3
?permute? strips off any affixes, permutes the stems, and
then attaches the affixes to the stems in all possible ways.
handle, for example, the addition of all possible case
suffixes to each noun in the sentence.
4.4 Filters
The master item set provides us with an inventory
from which we can find positive (grammatical) ex-
amples for any language type generated by the sys-
tem as well as interesting negative examples for any
language type. To do so, we filter the master item
set, in two steps.
4.4.1 Universal Filters
The first step is the application of ?universal? fil-
ters, which mark any item known to be ungrammat-
ical across all language types currently produced by
the system. For example, the word order library does
not currently provide an analysis of radically non-
configurational languages with discontinuous NPs
(e.g., Warlpiri (Hale, 1981)). Accordingly, (3) will
be ungrammatical across all language types:
(3) det det n1 n2 tv
The universal filter definitions (provided by the
developers) each comprise one or more regular ex-
pressions, a filter type that specifies how the regular
expressions are to be applied, and a list of seman-
tic tags specifying which equivalence classes they
apply to. For example, the filter that would catch
example (3) above is defined as in (4):
(4) Filter Type: reject-unless-match
Regexp: (det (n1|n2).*det (n1|n2))|
(det (n1|n2).*(n1|n2) det)|
((n1|n2) det.*det (n1|n2))|
((n1|n2) det.*(n1|n2) det)
Sem-class: [semantic classes for all transitive
sentences with two determiners.]
We apply each filter to every item in the database.
For each filter whose semantic-class value includes
the semantic class of the item at hand, we store the
result (pass or fail) of the filter on that item. We can
then query the database to produce a list of all of the
potentially well-formed items.
4.4.2 Specific Filters
The next step is to run the filters that find the
grammatical examples for a particular language
type. In order to facilitate sampling of the entire
language space, we define these filters to be sensi-
tive not to complete language type definitions, but
140
rather to particular features (or small sets of fea-
tures) of a language type. Thus in addition to the
filter type, regular expression, and semantic class
fields, the language-specific filters also encode par-
tial descriptions of the language types to which they
apply, in the form of feature-value declarations. For
example, the filter in (5) plays a role in selecting
the correct form of negated sentences for language
types with both inflectional and adverbial negation
in complementary distribution (like English n?t and
sentential not). The first regular expression checks
for neg surrounded by white space (i.e., the negative
adverb) and the second for the negative affixes.
(5) Filter Type: reject-if-both-match
Regexp1: (\s|?)neg(\s|$)
Regexp2: -neg|neg-
Sem-class: [sem. classes for all neg. sent.]
Lg-feat: and(infl neg:on,adv neg:on,
multineg:comp)
This filter uses a conjunctive language feature spec-
ification (three feature-value pairs that must apply),
but disjunctions are also possible. These specifica-
tions are converted to disjunctive normal form be-
fore further processing.
As with the universal filters, the results of the spe-
cific filters are stored in the database. We process
each item that passed all of the universal filters with
each specific filter. Whenever a filter?s semantic-
class value matches the semantic-class of the item
at hand, we store the value assigned by the filter
(pass or fail). We also store the feature-value pairs
required by each filter, so that we can look up the
relevant filters for a language-type definition.
4.4.3 Recursive Linguistic Phenomena
Making the filters relative to particular semantic
classes allows us to use information about the lexi-
cal items in the sentences in the definition of the fil-
ters. This makes it easier to write regular-expression
based filters that can work across many different
complete language types. Complications arise, how-
ever, in examples illustrating recursive phenomena
To handle such phenomena with our finite-state sys-
tem, we do multiple passes with the filters. All items
with coordination are first processed with the co-
ordination filters, and then rewritten to replace any
well-formed coordinations with single constituents.
These rewritten strings are then processed with the
rest of the filters, and we store the results as the re-
sults for those filters on the original strings.
4.5 Language types
The final kind of information we store in the
database is definitions of language types. Even
though our system allows us to create test suites for
new language types on demand, we still store the
language-type definitions of language types we have
tested, for future regression testing purposes. When
a language type is read in, the list of feature-value
pairs defining it is compared to the list of feature-
groups declared by the filters. For each group of
feature-value pairs present in the language-type def-
inition, we find all of the filters that use that group.
We then query the database for all items that pass
the filters relevant to the language type. This list
of items represents all those in the master item set
predicted to be well-formed for this language type.
From the complement of this set, we also take a ran-
dom selection of items to test for overgeneration.
4.6 Validation of grammars
Once we have created the test suite for a partic-
ular language type, the developer runs the Matrix
customization system to get a starter grammar for
the same language type. The test suite is loaded
into [incr tsdb()] and processed with the grammar.
[incr tsdb()] allows the developer to compare the
grammar?s output with the test suite at varying lev-
els of detail: Do all and only the items predicted to
be well-formed parse? Do they get the same number
of readings as predicted? Do they get the semantic
representations predicted? A discrepancy at any of
these levels points to an error in either the Grammar
Matrix or the test suite generation system. The de-
veloper can query the database to find which filters
passed or failed a particular example as well as to
discover the provenance of the example and which
phenomena it is meant to test.
This methodology provides the ability to gener-
ate test suites for any arbitrary language type on de-
mand. Although this appears to eliminate the need to
store the test suites we do, in fact, store information
about previous test suites. This allows us to track the
evolution of the Grammar Matrix in relation to those
particular language types over time.
141
4.7 Investment and Return
The input required from the developer in order to test
any new library is as follows: (1) Seed strings illus-
trating the range of expressions handled by the new
library, organized into equivalence classes. (2) Des-
ignated harvester strings for each equivalence class
and a grammar or grammars that can parse them to
get the target semantic representation. (3) Universal
filters specific to the phenomenon and seed strings.
(4) Specific filters picking out the right items for
each language type. (5) Analysis of discrepancies
between the test suite and the generated grammars.
This is a substantial investment on the part of the de-
veloper but we believe the investment is worth it for
the return of being able to validate a library addition
and test for any loss of coverage going forward.
Arnold et al (1994) note that writing grammars
to generate test suites is impractical if the test suite
generating grammars aren?t substantially simpler to
write than the ?actual? grammars being tested. Even
though this system requires some effort to maintain,
we believe the methodology remains practical for
two reasons. First, the input required from the de-
veloper enumerated above is closely related to the
knowledge discovered in the course of building the
libraries in the first place. Second, the fact that the
filters are sensitive to only particular features of lan-
guage types means that a relatively small number of
filters can create test suites for a very large number
of language types.
5 Related Work
Kinyon and Rambow (2003) present an approach to
generating test suites on the basis of descriptions
of languages. The language descriptions are Meta-
Grammar (MG) hierarchies. Their approach appears
to be more flexible than the one presented here in
some ways, and more constrained in others. It does
not need any input strings, but rather produces test
items from the language description. In addition,
it annotates the output in multiple ways, including
phrase structure, dependency structure, and LFG F-
structure. On the other hand, there is no apparent
provision for creating negative (ungrammatical) test
data and it is does not appear possible to compose
new MG descriptions on the fly. Furthermore, the
focus of the MG test suite work appears to be the
generation of test suites for other grammar develop-
ment projects, but the MGs themselves are crosslin-
guistic resources in need of validation and testing.
An interesting area for future work would be the
comparison between the test suites generated by the
system described here and the MG test suites.
The key to the test-suite development process pro-
posed here is to leverage the work already being
done by the Matrix developers into a largely auto-
mated process for creating test-suite items. The in-
formation required from the developers is essentially
a structured and systematic version of the knowledge
that is required for the creation of libraries in the first
place. This basic approach, is also the basis for the
approach taken in (Bro?ker, 2000); the specific forms
of knowledge leveraged, and the test-suite develop-
ment strategies used, however, are quite different.
6 Future Work
The addition of the next library to the Grammar Ma-
trix will provide us with an opportunity to try to
quantify the effect of this methodology. With the
Grammar Matrix and the filters stabilized, the vali-
dation of a new library can be carefully tracked. We
can try to quantify the number of errors obtained and
the source of the errors, e.g., library or filters.
In addition to this kind of quantification and error
analysis as a means of validating this methodology,
we also intend to undertake a comparison of the test
suites created from our database to hand built cre-
ated for Matrix-derived grammars by students in the
multilingual grammar engineering course at the Uni-
versity of Washington.4 Students in this class each
develop grammars for a different language, and cre-
ate test suites of positive and negative examples as
part of their development process. We plan to use
the lexical types in the grammars to define a map-
ping from the surface lexical items used in the test
suites to our abstract vocabulary. We can then com-
pare the hand built and autogenerated test suites in
order to gauge the thoroughness of the system pre-
sented here.
7 Conclusion
The methodology outlined in this paper addresses
the three obstacles noted in the introduction: Al-
4http://courses.washington.edu/ling567
142
though the Grammar Matrix core itself isn?t a gram-
mar (1), we test it by deriving grammars from it.
Since we are testing the derived grammars, we are
simultaneously testing both the Matrix core gram-
mar, the libraries, and the customization script. Al-
though there is no single language being modeled
from which to draw strings (2), we can nonethe-
less find a relevant set of strings and associate
these strings with annotations of expected well-
formedness. The lexical formatives of the strings
are drawn from a standardized set of abstract forms.
The well-formedness predictions are made on the
basis of the system of filters. The system of filters
doesn?t represent ground truth, but rather a second
pathway to the judgments in addition to the direct
use of the Matrix-derived starter grammars. These
pathways are independent enough that the one can
serve as an error check on the other. The space of
possible language types remains too large for thor-
ough testing (3). However, since our system allows
for the efficient derivation of a test suite for any arbi-
trary language type, it is inexpensive to sample that
language-type space in many different ways.
Acknowledgments
This work has been supported by NSF grant BCS-
0644097.
References
Doug Arnold, Martin Rondell, and Frederik Fouvry.
1994. Design and implementation of test suite tools.
Technical Report LRE 62-089 D-WP5, University of
Essex, UK.
Emily M. Bender and Dan Flickinger. 2005. Rapid pro-
totyping of scalable grammars: Towards modularity in
extensions to a language-independent core. In Proc.
IJCNLP-05 (Posters/Demos).
Emily M. Bender, Dan Flickinger, and Stephan Oepen.
2002. The grammar matrix: An open-source starter-
kit for the rapid development of cross-linguistically
consistent broad-coverage precision grammars. In
Proc. the Workshop on Grammar Engineering and
Evaluation COLING 2002, pages 8?14.
Norbert Bro?ker. 2000. The use of instrumentation in
grammar engineering. In Proc. COLING 2000, pages
118?124.
Miriam Butt and Tracy Holloway King. 2003. Gram-
mar writing, testing, and evaluation. In Handbook for
Language Engineers, pages 129?179. CSLI.
Ann Copestake, Dan Flickinger, Carl Pollard, and Ivan A.
Sag. 2005. Minimal recursion semantics: An intro-
duction. Research on Language & Computation, 3(2?
3):281?332.
Ann Copestake. 2002. Implementing Typed Feature
Structure Grammars. CSLI.
Scott Drellishak and Emily M. Bender. 2005. A coordi-
nation module for a crosslinguistic grammar resource.
In Stefan Mu?ller, editor, The Proc. HPSG 2005, pages
108?128. CSLI.
Dan Flickinger and Emily M. Bender. 2003. Compo-
sitional semantics in a multilingual grammar resource.
In Proc. the Workshop on Ideas and Strategies for Mul-
tilingual Grammar Development, ESSLLI 2003, pages
33?42.
Kenneth Hale. 1981. On the position of Warlpiri in the
typology of the base. Distributed by Indiana Univer-
sity Linguistics Club, Bloomington.
Lars Hellan and Petter Haugereid. 2003. NorSource: An
exercise in Matrix grammar-building design. In Proc.
the Workshop on Ideas and Strategies for Multilingual
Grammar Development, ESSLLI 2003, pages 41?48.
Alexandra Kinyon and Owen Rambow. 2003. The meta-
grammar: A cross-framework and cross-language test-
suite generation tool. In Proc. 4th International Work-
shop on Linguistically Interpreted Corpora.
Valia Kordoni and Julia Neu. 2005. Deep analysis
of Modern Greek. In Keh-Yih Su, Jun?ichi Tsujii,
and Jong-Hyeok Lee, editors, Lecture Notes in Com-
puter Science, volume 3248, pages 674?683. Springer-
Verlag.
Stephan Oepen and Daniel P. Flickinger. 1998. Towards
systematic grammar profiling. Test suite technology
ten years after. Journal of Computer Speech and Lan-
guage, 12 (4) (Special Issue on Evaluation):411 ? 436.
Stephan Oepen. 2002. Competence and Performance
Profiling for Constraint-based Grammars: A New
Methodology, Toolkit, and Applications. Ph.D. thesis,
Universita?t des Saarlandes.
Carl Pollard and Ivan A. Sag. 1994. Head-Driven Phrase
Structure Grammar. The University of Chicago Press.
Laurie Poulson. 2006. Evaluating a cross-linguistic
grammar model: Methodology and gold-standard re-
source development. Master?s thesis, University of
Washington.
143
Proceedings of the ACL 2010 System Demonstrations, pages 1?6,
Uppsala, Sweden, 13 July 2010. c?2010 Association for Computational Linguistics
Grammar Prototyping and Testing with the
LinGO Grammar Matrix Customization System
Emily M. Bender, Scott Drellishak, Antske Fokkens, Michael Wayne Goodman,
Daniel P. Mills, Laurie Poulson, and Safiyyah Saleem
University of Washington, Seattle, Washington, USA
{ebender,sfd,goodmami,dpmills,lpoulson,ssaleem}@uw.edu,
afokkens@coli.uni-saarland.de
Abstract
This demonstration presents the LinGO
Grammar Matrix grammar customization
system: a repository of distilled linguis-
tic knowledge and a web-based service
which elicits a typological description of
a language from the user and yields a cus-
tomized grammar fragment ready for sus-
tained development into a broad-coverage
grammar. We describe the implementation
of this repository with an emphasis on how
the information is made available to users,
including in-browser testing capabilities.
1 Introduction
This demonstration presents the LinGO Gram-
mar Matrix grammar customization system1 and
its functionality for rapidly prototyping grammars.
The LinGO Grammar Matrix project (Bender et
al., 2002) is situated within the DELPH-IN2 col-
laboration and is both a repository of reusable
linguistic knowledge and a method of delivering
this knowledge to a user in the form of an ex-
tensible precision implemented grammar. The
stored knowledge includes both a cross-linguistic
core grammar and a series of ?libraries? contain-
ing analyses of cross-linguistically variable phe-
nomena. The core grammar handles basic phrase
types, semantic compositionality, and general in-
frastructure such as the feature geometry, while
the current set of libraries includes analyses of
word order, person/number/gender, tense/aspect,
case, coordination, pro-drop, sentential negation,
yes/no questions, and direct-inverse marking, as
well as facilities for defining classes (types) of lex-
ical entries and lexical rules which apply to those
types. The grammars produced are compatible
with both the grammar development tools and the
1
http://www.delph-in.net/matrix/customize/
2
http://www.delph-in.net
grammar-based applications produced by DELPH-
IN. The grammar framework used is Head-driven
Phrase Structure Grammar (HPSG) (Pollard and
Sag, 1994) and the grammars map bidirectionally
between surface strings and semantic representa-
tions in the format of Minimal Recursion Seman-
tics (Copestake et al, 2005).
The Grammar Matrix project has three goals?
one engineering and two scientific. The engineer-
ing goal is to reduce the cost of creating gram-
mars by distilling the solutions developed in exist-
ing DELPH-IN grammars and making them easily
available for new projects. The first scientific goal
is to support grammar engineering for linguistic
hypothesis testing, allowing users to quickly cus-
tomize a basic grammar and use it as a medium in
which to develop and test analyses of more inter-
esting phenomena.3 The second scientific goal is
to use computational methods to combine the re-
sults of typological research and formal syntactic
analysis into a single resource that achieves both
typological breadth (handling the known range of
realizations of the phenomena analyzed) and ana-
lytical depth (producing analyses which work to-
gether to map surface strings to semantic represen-
tations) (Drellishak, 2009).
2 System Overview
Grammar customization with the LinGO Gram-
mar Matrix consists of three primary activities:
filling out the questionnaire, preliminary testing of
the grammar fragment, and grammar creation.
2.1 Questionnaire
Most of the linguistic phenomena supported by the
questionnaire vary across languages along multi-
ple dimensions. It is not enough, for example,
3Research of this type based on the Grammar Matrix
includes (Crysmann, 2009) (tone change in Hausa) and
(Fokkens et al, 2009) (Turkish suspended affixation).
1
simply to know that the target language has coor-
dination. It is also necessary to know, among other
things, what types of phrases can be coordinated,
how those phrases are marked, and what patterns
of marking appear in the language. Supporting a
linguistic phenomenon, therefore, requires elicit-
ing the answers to such questions from the user.
The customization system elicits these answers us-
ing a detailed, web-based, typological question-
naire, then interprets the answers without human
intervention and produces a grammar in the format
expected by the LKB (Copestake, 2002), namely
TDL (type description language).
The questionnaire is designed for linguists who
want to create computational grammars of natu-
ral languages, and therefore it freely uses techni-
cal linguistic terminology, but avoids, when possi-
ble, mentioning the internals of the grammar that
will be produced, although a user who intends to
extend the grammar will need to become familiar
with HPSG and TDL before doing so.
The questionnaire is presented to the user as a
series of connected web pages. The first page the
user sees (the ?main page?) contains some intro-
ductory text and hyperlinks to direct the user to
other sections of the questionnaire (?subpages?).
Each subpage contains a set of related questions
that (with some exceptions) covers the range of
a single Matrix library. The actual questions in
the questionnaire are represented by HTML form
fields, including: text fields, check boxes, ra-
dio buttons, drop-downs, and multi-select drop-
downs. The values of these form fields are stored
in a ?choices file?, which is the object passed on
to the grammar customization stage.
2.1.1 Unbounded Content
Early versions of the customization system (Ben-
der and Flickinger, 2005; Drellishak and Bender,
2005) only allowed a finite (and small) number
of entries for things like lexical types. For in-
stance, users were required to provide exactly one
transitive verb type and one intransitive verb type.
The current system has an iterator mechanism in
the questionnaire that allows for repeated sections,
and thus unlimited entries. These repeated sec-
tions can also be nested, which allows for much
more richly structured information.
The utility of the iterator mechanism is most
apparent when filling out the Lexicon subpage.
Users can create an arbitrary number of lexical
rule ?slots?, each with an arbitrary number of
morphemes which each in turn bear any num-
ber of feature constraints. For example, the
user could create a tense-agreement morpholog-
ical slot, which contains multiple portmanteau
morphemes each expressing some combination of
tense, subject person and subject number values
(e.g., French -ez expresses 2nd person plural sub-
ject agreement together with present tense).
The ability provided by the iterators to create
unbounded content facilitates the creation of sub-
stantial grammars through the customization sys-
tem. Furthermore, the system allows users to ex-
pand on some iterators while leaving others un-
specified, thus modeling complex rule interactions
even when it cannot cover features provided by
these rules. A user can correctly model the mor-
photactic framework of the language using ?skele-
tal? lexical rules?those that specify morphemes?
forms and their co-occurrence restrictions, but per-
haps not their morphosyntactic features. The user
can then, post-customization, augment these rules
with the missing information.
2.1.2 Dynamic Content
In earlier versions of the customization system, the
questionnaire was static. Not only was the num-
ber of form fields static, but the questions were
the same, regardless of user input. The current
questionnaire is more dynamic. When the user
loads the customization system?s main page or
subpages, appropriate HTML is created on the fly
on the basis of the information already collected
from the user as well as language-independent in-
formation provided by the system.
The questionnaire has two kinds of dynamic
content: expandable lists for unbounded entry
fields, and the population of drop-down selec-
tors. The lists in an iterated section can be ex-
panded or shortened with ?Add? and ?Delete? but-
tons near the items in question. Drop-down selec-
tors can be automatically populated in several dif-
ferent ways.4 These dynamic drop-downs greatly
lessen the amount of information the user must
remember while filling out the questionnaire and
can prevent the user from trying to enter an invalid
value. Both of these operations occur without re-
freshing the page, saving time for the user.
4These include: the names of currently-defined features,
the currently-defined values of a feature, or the values of vari-
ables that match a particular regular expression.
2
2.2 Validation
It makes no sense to attempt to create a consis-
tent grammar from an empty questionnaire, an in-
complete questionnaire, or a questionnaire con-
taining contradictory answers, so the customiza-
tion system first sends a user?s answers through
?form validation?. This component places a set
of arbitrarily complex constraints on the answers
provided. The system insists, for example, that
the user not state the language contains no deter-
miners but then provide one in the Lexicon sub-
page. When a question fails form validation, it
is marked with a red asterisk in the questionnaire,
and if the user hovers the mouse cursor over the as-
terisk, a pop-up message appears describing how
form validation failed. The validation component
can also produce warnings (marked with red ques-
tion marks) in cases where the system can gen-
erate a grammar from the user?s answers, but we
have reason to believe the grammar won?t behave
as expected. This occurs, for example, when there
are no verbal lexical entries provided, yielding a
grammar that cannot parse any sentences.
2.3 Creating a Grammar
After the questionnaire has passed validation, the
system enables two more buttons on the main
page: ?Test by Generation? and ?Create Gram-
mar?. ?Test by Generation? allows the user to test
the performance of the current state of the gram-
mar without leaving the browser, and is described
in ?3. ?Create Grammar? causes the customiza-
tion system to output an LKB-compatible grammar
that includes all the types in the core Matrix, along
with the types from each library, tailored appropri-
ately, according to the specific answers provided
for the language described in the questionnaire.
2.4 Summary
This section has briefly presented the structure
of the customization system. While we antici-
pate some future improvements (e.g., visualiza-
tion tools to assist with designing type hierarchies
and morphotactic dependencies), we believe that
this system is sufficiently general to support the
addition of analyses of many different linguistic
phenomena. The system has been used to create
starter grammars for more than 40 languages in the
context of a graduate grammar engineering course.
To give sense of the size of the grammars
produced by the customization system, Table 1
compares the English Resource Grammar (ERG)
(Flickinger, 2000), a broad-coverage precision
grammar in the same framework under develop-
ment since 1994, to 11 grammars produced with
the customization system by graduate students in
a grammar engineering class at the University of
Washington. The students developed these gram-
mars over three weeks using reference materials
and the customization system. We compare the
grammars in terms of the number types they de-
fine, as well as the number of lexical rule and
phrase structure rule instances.5 We separate
types defined in the Matrix core grammar from
language-specific types defined by the customiza-
tion system. Not all of the Matrix-provided types
are used in the definition of the language-specific
rules, but they are nonetheless an important part of
the grammar, serving as the foundation for further
hand-development. The Matrix core grammar in-
cludes a larger number of types whose function is
to provide disjunctions of parts of speech. These
are given in Table 1, as ?head types?. The final col-
umn in the table gives the number of ?choices? or
specifications that the users gave to the customiza-
tion system in order to derive these grammars.
3 Test-by-generation
The purpose of the test-by-generation feature is to
provide a quick method for testing the grammar
compiled from a choices file. It accomplishes this
by generating sentences the grammar deems gram-
matical. This is useful to the user in two main
ways: it quickly shows whether any ungrammat-
ical sentences are being licensed by the grammar
and, by providing an exhaustive list of licensed
sentences for an input template, allows users to see
if an expected sentence is not being produced.
It is worth emphasizing that this feature of the
customization system relies on the bidirectional-
ity of the grammars; that is, the fact that the same
grammar can be used for both parsing and genera-
tion. Our experience has shown that grammar de-
velopers quickly find generation provides a more
stringent test than parsing, especially for the abil-
ity of a grammar to model ungrammaticality.
3.1 Underspecified MRS
Testing by generation takes advantage of the gen-
eration algorithm include in the LKB (Carroll et al,
5Serious lexicon development is taken as a separate task
and thus lexicon size is not included in the table.
3
Language Family Lg-specific types Matrix types Head types Lex rules Phrasal rules Choices
ERG Germanic 3654 N/A N/A 71 226 N/A
Breton Celtic 220 413 510 57 49 1692
Cherokee Iroquoian 182 413 510 95 27 985
French Romance 137 413 510 29 22 740
Jamamad?? Arauan 188 413 510 87 11 1151
Lushootseed Salish 95 413 510 20 8 391
Nishnaabemwin Algonquian 289 413 510 124 50 1754
Pashto Iranian 234 413 510 86 19 1839
Pali Indo-Aryan 237 413 510 92 55 1310
Russian Slavic 190 413 510 56 35 993
Shona Bantu 136 413 510 51 9 591
Vietnamese Austro-Asiatic 105 413 510 2 26 362
Average 182.9 413 510 63.5 28.3 1073.5
Table 1: Grammar sizes in comparison to ERG
1999). This algorithm takes input in the form of
Minimal Recursion Semantics (MRS) (Copestake
et al, 2005): a bag of elementary predications,
each bearing features encoding a predicate string,
a label, and one or more argument positions that
can be filled with variables or with labels of other
elementary predications.6 Each variable can fur-
ther bear features encoding ?variable properties?
such as tense, aspect, mood, sentential force, per-
son, number or gender.
In order to test our starter grammars by gen-
eration, therefore, we must provide input MRSs.
The shared core grammar ensures that all of
the grammars produce and interpret valid MRSs,
but there are still language-specific properties in
these semantic representations. Most notably, the
predicate strings are user-defined (and language-
specific), as are the variable properties. In addi-
tion, some coarser-grained typological properties
(such as the presence or absence of determiners)
lead to differences in the semantic representations.
Therefore, we cannot simply store a set of MRSs
from one grammar to use as input to the generator.
Instead, we take a set of stored template MRSs
and generalize them by removing all variable
properties (allowing the generator to explore all
possible values), leaving only the predicate strings
and links between the elementary predications.
We then replace the stored predicate strings with
ones selected from among those provided by the
user. Figure 1a shows an MRS produced by a
grammar fragment for English. Figure 1b shows
the MRS with the variable properties removed
and the predicate strings replaced with generic
place-holders. One such template is needed for
every sentence type (e.g., intransitive, transitive,
6This latter type of argument encodes scopal dependen-
cies. We abstract away here from the MRS approach to scope
underspecification which is nonetheless critical for its com-
putational tractability.
a. ? h1,e2, {h7: cat n rel(x4:SG:THIRD),
h3:exist q rel(x4, h5, h6),
h1: sleep v rel(e2:PRES, x4)},
{h5 qeq h7} ?
b. ? h1,e2, {h7:#NOUN1#(x4),
h3:#DET1#(x4, h5, h6),
h1:#VERB#(e2, x4)},
{h5 qeq h7} ?
Figure 1: Original and underspecified MRS
negated-intransitive, etc.). In order to ensure that
the generated strings are maximally informative to
the user testing a grammar, we take advantage of
the lexical type system. Because words in lexical
types as defined by the customization system dif-
fer only in orthography and predicate string, and
not in syntactic behavior, we need only consider
one word of each type. This allows us to focus the
range of variation produced by the generator on
(a) the differences between lexical types and (b)
the variable properties.
3.2 Test by generation process
The first step of the test-by-generation process is
to compile the choices file into a grammar. Next,
a copy of the LKB is initialized on the web server
that is hosting the Matrix system, and the newly-
created grammar is loaded into this LKB session.
We then construct the underspecified MRSs in
order to generate from them. To do this, the pro-
cess needs to find the proper predicates to use for
verbs, nouns, determiners, and any other parts of
speech that a given MRS template may require. For
nouns and determiners, the choices file is searched
for the predicate for one noun of each lexical noun
type, all of the determiner predicates, and whether
or not each noun type needs a determiner or not.
For verbs, the process is more complicated, re-
quiring valence information as well as predicate
strings in order to select the correct MRS template.
In order to get this information, the process tra-
verses the type hierarchy above the verbal lexical
4
types until it finds a type that gives valence infor-
mation about the verb. Once the process has all
of this information, it matches verbs to MRS tem-
plates and fills in appropriate predicates.
The test-by-generation process then sends these
constructed MRSs to the LKB process and displays
the generation results, along with a brief explana-
tion of the input semantics that gave rise to them,
in HTML for the user.7
4 Related Work
As stated above, the engineering goal of the Gram-
mar Matrix is to facilitate the rapid development
of large-scale precision grammars. The starter
grammars output by the customization system are
compatible in format and semantic representations
with existing DELPH-IN tools, including software
for grammar development and for applications in-
cluding machine translation (Oepen et al, 2007)
and robust textual entailment (Bergmair, 2008).
More broadly, the Grammar Matrix is situated
in the field of multilingual grammar engineer-
ing, or the practice of developing linguistically-
motivated grammars for multiple languages within
a consistent framework. Other projects in this
field include ParGram (Butt et al, 2002; King
et al, 2005) (LFG), the CoreGram project8 (e.g.,
(Mu?ller, 2009)) (HPSG), and the MetaGrammar
project (de la Clergerie, 2005) (TAG).
To our knowledge, however, there is only one
other system that elicits typological information
about a language and outputs an appropriately cus-
tomized implemented grammar. The system, de-
scribed in (Black, 2004) and (Black and Black,
2009), is called PAWS (Parser And Writer for
Syntax) and is available for download online.9
PAWS is being developed by SIL in the context
of both descriptive (prose) grammar writing and
?computer-assisted related language adaptation?,
the practice of writing a text in a target language
by starting with a translation of that text in a
related source language and mapping the words
from target to source. Accordingly, the output of
PAWS consists of both a prose descriptive grammar
7This set-up scales well to multiple users, as the user?s in-
teraction with the LKB is done once per customized grammar,
providing output for the user to peruse as his or her leisure.
The LKB process does not persist, but can be started again
by reinvoking test-by-generation, such as when the user has
updated the grammar definition.
8
http://hpsg.fu-berlin.de/Projects/core.html
9
http://www.sil.org/computing/catalog/show_
software.asp?id=85
and an implemented grammar. The latter is in the
format required by PC-PATR (McConnel, 1995),
and is used primarily to disambiguate morpholog-
ical analyses of lexical items in the input string.
Other systems that attempt to elicit linguistic in-
formation from a user include the Expedition (Mc-
Shane and Nirenburg, 2003) and Avenue projects
(Monson et al, 2008), which are specifically tar-
geted at developing machine translation for low-
density languages. These projects differ from the
Grammar Matrix customization system in elic-
iting information from native speakers (such as
paradigms or translations of specifically tailored
corpora), rather than linguists. Further, unlike the
Grammar Matrix customization system, they do
not produce resources meant to sustain further de-
velopment by a linguist.
5 Demonstration Plan
Our demonstration illustrates how the customiza-
tion system can be used to create starter gram-
mars and test them by invoking test-by-generation.
We first walk through the questionnaire to illus-
trate the functionality of libraries and the way that
the user interacts with the system to enter infor-
mation. Then, using a sample grammar for En-
glish, we demonstrate how test-by-generation can
expose both overgeneration (ungrammatical gen-
erated strings) and undergeneration (gaps in gen-
erated paradigms). Finally, we return to the ques-
tionnaire to address the bugs in the sample gram-
mar and retest to show the result.
6 Conclusion
This paper has presented an overview of the
LinGO Grammar Matrix Customization System,
highlighting the ways in which it provides ac-
cess to its repository of linguistic knowledge. The
current customization system covers a sufficiently
wide range of phenomena that the grammars it
produces are non-trivial. In addition, it is not al-
ways apparent to a user what the implications will
be of selecting various options in the question-
naire, nor how analyses of different phenomena
will interact. The test-by-generation methodology
allows users to interactively explore the conse-
quences of different linguistic analyses within the
platform. We anticipate that it will, as a result, en-
courage users to develop more complex grammars
within the customization system (before moving
on to hand-editing) and thereby gain more benefit.
5
Acknowledgments
This material is based upon work supported by
the National Science Foundation under Grant No.
0644097. Any opinions, findings, and conclusions
or recommendations expressed in this material are
those of the authors and do not necessarily reflect
the views of the National Science Foundation.
References
Emily M. Bender and Dan Flickinger. 2005. Rapid
prototyping of scalable grammars: Towards modu-
larity in extensions to a language-independent core.
In Proc. of IJCNLP-05 (Posters/Demos).
Emily M. Bender, Dan Flickinger, and Stephan Oepen.
2002. The grammar matrix: An open-source starter-
kit for the rapid development of cross-linguistically
consistent broad-coverage precision grammars. In
Proc. of the Workshop on Grammar Engineering
and Evaluation at COLING 2002, pages 8?14.
Richard Bergmair. 2008. Monte Carlo semantics:
McPIET at RTE4. In Text Analysis Conference (TAC
2008) Workshop-RTE-4 Track. National Institute of
Standards and Technology, pages 17?19.
Cheryl A. Black and H. Andrew Black. 2009. PAWS:
Parser and writer for syntax: Drafting syntactic
grammars in the third wave. In SIL Forum for Lan-
guage Fieldwork, volume 2.
Cheryl A. Black. 2004. Parser and writer for syn-
tax. Paper presented at the International Confer-
ence on Translation with Computer-Assisted Tech-
nology: Changes in Research, Teaching, Evaluation,
and Practice, University of Rome ?La Sapienza?,
April 2004.
Miriam Butt, Helge Dyvik, Tracy Holloway King, Hi-
roshi Masuichi, and Christian Rohrer. 2002. The
parallel grammar project. In Proc. of the Workshop
on Grammar Engineering and Evaluation at COL-
ING 2002, pages 1?7.
John Carroll, Ann Copestake, Dan Flickinger, and Vic-
tor Poznan?ski. 1999. An efficient chart generator
for (semi-) lexicalist grammars. In Proc. of the 7th
European workshop on natural language generation
(EWNLG99), pages 86?95.
Ann Copestake, Dan Flickinger, Carl Pollard, and
Ivan A. Sag. 2005. Minimal recursion semantics:
An introduction. Research on Language & Compu-
tation, 3(4):281?332.
Ann Copestake. 2002. Implementing Typed Feature
Structure Grammars. CSLI, Stanford.
Berthold Crysmann. 2009. Autosegmental representa-
tions in an HPSG for Hausa. In Proc. of the Work-
shop on Grammar Engineering Across Frameworks
2009.
E?ric Villemonte de la Clergerie. 2005. From meta-
grammars to factorized TAG/TIG parsers. In Proc.
of IWPT?05, pages 190?191.
Scott Drellishak and Emily M. Bender. 2005. A co-
ordination module for a crosslinguistic grammar re-
source. In Stefan Mu?ller, editor, Proc. of HPSG
2005, pages 108?128, Stanford. CSLI.
Scott Drellishak. 2009. Widespread But Not Uni-
versal: Improving the Typological Coverage of the
Grammar Matrix. Ph.D. thesis, University of Wash-
ington.
Dan Flickinger. 2000. On building a more efficient
grammar by exploiting types. Natural Language
Engineering, 6:15 ? 28.
Antske Fokkens, Laurie Poulson, and Emily M. Ben-
der. 2009. Inflectional morphology in Turkish VP-
coordination. In Stefan Mu?ller, editor, Proc. of
HPSG 2009, pages 110?130, Stanford. CSLI.
Tracy Holloway King, Martin Forst, Jonas Kuhn, and
Miriam Butt. 2005. The feature space in parallel
grammar writing. Research on Language & Com-
putation, 3(2):139?163.
Stephen McConnel. 1995. PC-PATR Refer-
ence Manual. Summer Institute for Linguistics.
http://www.sil.org/pcpatr/manual/pcpatr.html.
Marjorie McShane and Sergei Nirenburg. 2003. Pa-
rameterizing and eliciting text elements across lan-
guages for use in natural language processing sys-
tems. Machine Translation, 18:129?165.
Christian Monson, Ariadna Font Llitjs, Vamshi Am-
bati, Lori Levin, Alon Lavie, Alison Alvarez,
Roberto Aranovich, Jaime Carbonell, Robert Fred-
erking, Erik Peterson, and Katharina Probst. 2008.
Linguistic structure and bilingual informants help
induce machine translation of lesser-resourced lan-
guages. In LREC?08.
Stefan Mu?ller. 2009. Towards an HPSG analysis of
Maltese. In Bernard Comrie, Ray Fabri, Beth Hume,
Manwel Mifsud, Thomas Stolz, and Martine Van-
hove, editors, Introducing Maltese linguistics. Pa-
pers from the 1st International Conference on Mal-
tese Linguistics, pages 83?112. Benjamins, Amster-
dam.
Stephan Oepen, Erik Velldal, Jan Tore Lnning, Paul
Meurer, Victoria Rosn, and Dan Flickinger. 2007.
Towards hybrid quality-oriented machine transla-
tion. On linguistics and probabilities in MT. In
11th International Conference on Theoretical and
Methodological Issues in Machine Translation.
Carl Pollard and Ivan A. Sag. 1994. Head-Driven
Phrase Structure Grammar. The University of
Chicago Press, Chicago, IL.
6
