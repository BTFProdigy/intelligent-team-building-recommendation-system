Proceedings of COLING 2014, the 25th International Conference on Computational Linguistics: Technical Papers,
pages 1875?1885, Dublin, Ireland, August 23-29 2014.
Syntactic Parsing and Compound Recognition via Dual Decomposition:
Application to French
Joseph Le Roux
1
and Matthieu Constant
2
and Antoine Rozenknop
1
(1) LIPN, Universit? Paris 13 ? Sorbonne Paris Cit?, CNRS
(2) LIGM, Universit? Paris Est, CNRS
leroux@univ-paris13.fr, mconstan@univ-mlv.fr, antoine.rozenknop@lipn.univ-paris13.fr
Abstract
In this paper we show how the task of syntactic parsing of non-segmented texts, including com-
pound recognition, can be represented as constraints between phrase-structure parsers and CRF
sequence labellers. In order to build a joint system we use dual decomposition, a way to com-
bine several elementary systems which has proven successful in various NLP tasks. We evaluate
this proposition on the French SPMRL corpus. This method compares favorably with pipeline
architectures and improves state-of-the-art results.
1 Introduction
Dual decomposition (DD), which can be used as a method to combine several elementary systems, has
already been successfully applied to many NLP tasks, in particular syntactic parsing, see (Rush et al.,
2010; Koo et al., 2010) inter alia. Intuitively, the principle can be described quite simply: at decoding
time, the combined systems seek for a consensus on common subtasks, in general the prediction of some
parts of the overall structure, via an iterative process imposing penalties where the systems disagree. If
the systems converge to a solution, it is formally guaranteed to be optimal. Besides, this approach is
quite flexible and easy to implement. One can add or remove elementary systems without rebuilding
the architecture from the ground up. Moreover, the statistical models for the subsystems can often be
estimated independently at training time.
In this paper we show how syntactic parsing of unsegmented texts, integrating compound recognition,
can be represented by constraints between phrase-structure parsers and sequence labellers, either for
compound recognition or part-of-speech (POS) tagging, and solved using DD. We compare this approach
experimentally with pipeline architectures: our system demonstrates state-of-the-art performance. While
this paper focuses on French, the approach is generic and can be applied to any treebank with compound
information, and more generally to tasks combining segmentation and parsing.
This paper is structured as follows. First, we describe the data we use to build our elementary systems.
Second, we present related work in compound recognition, in particular for French, and the type of
information one is able to incorporate in tag sets. Third, we show how CRF-based sequence labellers with
these different tag sets can be combined using DD to obtain an efficient decoding algorithm. Fourth, we
extend our method to add phrase-structure parsers in the combination. Finally, we empirically evaluate
these systems and compare them with pipeline architectures.
2 Data
We use the phrase-structure treebank released for the SPMRL 2013 shared task (Seddah et al., 2013).
This corresponds to a new version of the French Treebank (Abeill? et al., 2003). One of the key dif-
ferences between French data and other treebanks of the shared task is the annotation of compounds.
Compounds are sequences of words with a certain degree of semantic non-compositionality. They form
This work is licensed under a Creative Commons Attribution 4.0 International Licence. Page numbers and proceedings
footer are added by the organisers. Licence details: http://creativecommons.org/licenses/by/4.0/
1875
a single lexical unit to which one can assign a single POS. In the SPRML corpus 15% of the tokens be-
long to a compound, or 12.7% if we omit numerals: the training, development and test sets respectively
comprise 23658, 2120 and 4049 compounds.
In the treebank, compounds are annotated as subtrees whose roots are labelled with the POS of the
compounds with a + suffix. Each leaf under a compound is the daughter of its own POS tag, which is in
turn the daughter of the root of the compound. For example, the tree in Figure 1 contains a subtree with
the compound adverb pour l?instant (so far) whose category ADV+ dominates the preposition pour, the
determiner l?, and the noun instant.
SENT
PONCT
.
VN
VP
bloqu?e
ADV
compl?tement
V
est
NP-SUJ
NC
situation
DET
la
PONCT
,
ADV+
NC
instant
DET
l?
P
Pour
Figure 1: Syntatic annotation in the SPRML FTB: So far, the situation has been completely blocked.
The sequence labellers used in the experiments are able to exploit external lexical resources that will
help coping with data missing from the training corpus. These resources are dictionaries, consisting of
triplets (flexed form, lemma, POS tag), where form and lemmamay be compound or simple.
Several such dictionaries exist for French. We use:
? DELA (Courtois et al., 1997) contains a million entries, among which 110,000 are compounds;
? Lefff (Sagot, 2010) contains 500,000 entries, among which 25,000 are compounds;
? Prolex (Piton et al., 1999) is a toponym dictionary with approximately 100,000 entries.
The described resources are additional to the SPMRL shared task data (Seddah et al., 2013), but were
also used in (Constant et al., 2013a) for the shared task.
3 Compound Recognition
3.1 Related Work
The compound recognition traditionally relies on 2 types of information: lexical and syntactic clues. A
strong lexical association between the tokens of a compound can be detected using a compound dictio-
nary or by measuring a degree of relatedness, which can be learnt on a corpus. Some recent approaches
use sequence labellers. The linear chain CRF model (Lafferty et al., 2001) is widely used, see for ex-
ample (Vincze et al., 2011; Constant and Tellier, 2012). It has proven to be a very adequate model: it
is flexible enough to incorporate information from labelled data and external resources (POS taggers,
compound lexicons or named entity recognisers).
The compound recognition may also be directly performed by syntactic parsers learnt from corpora
where compounds are marked, such as the one we use in this paper
1
(Arun and Keller, 2005; Green et al.,
2011; Green et al., 2013; Constant et al., 2013b), but these results are contradictory. Green et al. (2011)
experimentally show that a lexicalised model is better than an unlexicalised one. On the other hand,
Constant et al. (2013b) show that, using products of PCFG-LA (Petrov, 2010), unlexicalised models can
be more accurate. They obtain performance on a par with a linear chain CRF system without external
information. But such information is difficult to incorporate directly in a PCFG-LA model. Constant et
al. (2012) resort to a reranker to add arbitrary features in the parse selection process, but their system
showed inferior performance compared with a CRF model with access to the same external information.
1
Such an approach has been used already for joint named entity recognition and parsing based on CRF (Finkel and Manning,
2009).
1876
3.2 Annotation schemes
Compound recognition can be seen as a segmentation task which consists in assigning to each token a
label with segmentation information. We use label B if the token is the beginning of a word (single or
compound), and label I if the token is inside a compound, but not in initial position. This lexical seg-
mentation can be enriched with additional information, for example POS tags of compounds or tokens in
compounds, and gives a variety of tag sets. This leads us to define 5 simple tag sets for our problem, each
with very simple information, that will be combined in the next section. These tag sets are exemplified
on a sentence with the compound vin rouge (red wine).
1. (basic) recognition with two labels (B and I)
Luc/B aime/B le/B vin/B rouge/I (Luc likes red wine)
2. (partial) recognition with compound POS tags: [BI]-POS for tokens in compounds; B for others
Luc/B aime/B le/B vin/B-NC+ rouge/I-NC+
3. (partial-internal) recognition with token POS tags in compounds
Luc/B aime/B le/B vin/B-NC rouge/I-ADJ
4. (complete) recognition with POS tags for all tokens; in compounds use compound POS tags
Luc/B-NPP aime/B-V le/B-DET vin/B-NC+ rouge/I-NC+
5. (complete-internal) recognition with POS tags for all tokens; in compounds use token POS tags
Luc/B-NPP aime/B-V le/B-DET vin/B-NC rouge/I-ADJ
4 Dual decomposition for compound recognition using CRFs
4.1 A maximisation problem
4.1.1 CRF
A conditional random field (Lafferty et al., 2001), or CRF, is a tuple c = (?,L
c
, w
c
, {f
c
p
}
p
) which
defines the conditional probability of a sequence of labels y ? L
?
c
given a sequence of words of the same
length x ? ?
?
as a logistic regression of the form:
P
c
(y|x) =
exp
(
?
p?P(x)
w
c
? f
c
p
(x, y
p
)
)
Z(w
c
, x)
, where (1)
? w
c
? R
d
is a d-dimensional weight vector, where d is the number of features of the system,
? Z is the partition function
? P(x) is a set of places, in our case the set of unigram and bigram decompositions of sequences
of words. A place p is of the form [i]
x
for unigrams and [i, i + 1]
x
for bigrams. We omit x when
context is unambiguous.
? y
p
is the restriction of y to the place p, and we will write y
i
for y
[i]
and y
i
y
i+1
for y
[i,i+1]
? f
c
p
is the feature function for the place p that projects (x, y
p
) on R
d
.
Our goal is to find the best labelling, i.e. the one that maximises the conditional probability given a
sequence of tokens. One can observe that this labelling also maximises the numerator of Equation 1, as
Z(w
c
, x) does not depend on y. We therefore write:
y?
c
= argmax
y
?
c
(x, y) = argmax
y
?
p?P(x)
w
c
? f
c
p
(x, y
p
) (2)
1877
4.1.2 Viterbi Algorithm for CRFs
Since our combination of CRF systems relies on the Viterbi algorithm, we review it briefly. For a given
input sentence x = x
1
. . . x
n
, we represent the problem of finding the best labelling with a CRF c as a
best path algorithm in a directed acyclic graph G
c
= (V, E) built from a set of nodes V and a set of edges
E . Nodes are pairs (x
i
, l) where x
i
is an input token and l is an admissible label for x
i
.
2
Edges connect
nodes of the form (x
i
, l) to nodes of the form (x
i+1
, l
?
) and the weights of these arcs are given by c. In
order to find the weight of the best path in this graph, that corresponds to the score of the best labelling,
we use Algorithm 1.
3
One can remark that the score of a node decomposes as a score s
1
, computed from
a vector of unigram features, written f
c
[i]
(x, l), and a score s
2
computed from a vector of bigram features,
written f
c
[i?1,i]
(x, l
?
, l).
4
The Viterbi algorithm has a time complexity linear in the length of the sentence
and quadratic in the number of labels of the CRF.
Algorithm 1 Viterbi Algorithm for CRFs with unigram and bigram features
1: Viterbi(G
c
, w
c
, {f
c
p
}
p
,?
BI
,?
IB
):
2: for all node v do
3: ?[v] = ??
4: end for
5: ?[ (<s>,START)] = w ? f
p
0
(x, START)
6: for all non initial node v = (x
i
, l) in topological order do
7: s
1
? w
c
? f
c
[i]
(x, l)
8: s
2
? ??
9: for all incoming edge v
?
= (x
i?1
, l
?
)? v do
10: t? ?[v
?
] + w
c
? f
c
[i?1,i]
(x, l
?
, l)
11: t? t? b(l
?
)i(l) ? ?
BI
[i]? i(l
?
)b(l) ? ?
IB
[i] ? only for DD: we ignore this line otherwise
12: if t > s
2
then
13: s
2
= t
14: end if
15: end for
16: ?[v]? s
1
+ s
2
17: end for
18: return the best scoring path ?[ (</s>,STOP) ]
4.2 Dual decomposition for CRF combinations
In Section 3.2 we described several annotation schemes that lead to different CRF models. These
schemes give the same lexical segmentation information but they use more or less rich part-of-speech
tag sets. It is not clear a priori if the richness of the tag set has a beneficial effect over segmentation
prediction: there is a compromise between linguistic informativeness and data sparseness. Instead of
trying to find the best annotation scheme, we propose a consensus-based joint system between several
CRF-based sequence labellers for the task of text segmentation relying on dual decomposition (Rush
et al., 2010). This system maximises the sum of the scores of combined CRFs, while enforcing global
consistency between systems in terms of constraints over the admissible solutions. These constraints are
specifically realised as reparametrisations of the elementary CRFs until a consensus is reached. Since
we deal with several annotation schemes, we will use predicates to abstract from them:
? b(l) is true if l starts with B;
? i(l) is true if l starts with I;
? bi(i, y) is true if b(y
i?1
) and i(y
i
) are true;
? ib(i, y) is true if i(y
i?1
) and b(y
i
) are true.
For a labelling y, we define 2 boolean vectors that indicate where the compounds begin and end:
2
We also include two additional nodes: an initial state (<s>,START) and a final state (</s>, STOP).
3
Algorithm 1 calculates the score and backpointers must be added to retrieve the corresponding path.
4
This algorithm takes as input 2 vectors that will be used for DD and will be explained in ? 4.2. They can be ignored now.
1878
? D(y), such that D(y)[i] = 1 if bi(i, y), and 0 otherwise;
? F (y), such that F (y)[i] = 1 if ib(i, y), and 0 otherwise.
As we want to combine CRFs, the solution of our system will be a tuple of label sequences with the
same compound segmentation. For an input sequence x, this new maximisation problem is:
(P ) : find max
(y
1
,...,y
n
)
n
?
c=1
?
c
(y
c
) =
n
?
c=1
?
p?P(x)
w
c
? f
c
p
(x, y
c
p
) (3)
s.t. ?u
1
, u
2
?c ? J1, nK, D(y
c
) = u
1
, F (y
c
) = u
2
(4)
Objective (3) indicates that we seek for a tuple for which the sum of the scores of its elements is
maximal. Constraints (4) imply that the compound frontiers ? transitions B to I and I to B ? must be
the same for each element of the tuple. There are several ways to tackle this problem. The first one
is by swapping the sum signs in (3) and noticing that the problem could then be represented by a joint
system relying on dynamic programming ? a CRF for which labels would be elements of the product
L = L
1
? ? ? ? ? L
n
? and for which it is straightforward to define a weight vector and feature functions.
We can therefore reuse the Viterbi algorithm but the complexity is quadratic in the size of L, which is
impractical
5
.
In any case, this approach would be inadequate for inclusion of parsers, and we therefore rely on
lagrangian relaxation. We modify the objective by introducing Lagrange multipliers, two real vectors
?
BI
c
and ?
IB
c
indexed by bigram places
6
for each CRF c of the combination. We obtain a new problem
with the same solution as the previous one, since constraints (4) are garanteed to be satisfied at optimality:
max
(y
1
,...,y
n
,u
1
,u
2
)
min
(?
BI
,?
IB
)
n
?
c=1
?
c
(y
c
) ?
n
?
c=1
[
(D(y
c
) ? u
1
) ? ?
BI
c
+ (F (y
c
) ? u
2
) ? ?
IB
c
]
(5)
The next step is dualisation, which gives an upper bound of our problem:
min
(?
BI
,?
IB
)
max
(y
1
,...,y
n
,u
1
,u
2
)
n
?
c=1
?
c
(y
c
)?
n
?
c=1
D(y
c
) ??
BI
c
+u
1
n
?
c=1
?
BI
c
?
n
?
c=1
F (y
c
) ??
IB
c
+u
2
n
?
c=1
?
IB
c
(6)
We then remark that
?
n
c=1
?
BI
c
and
?
n
c=1
?
IB
c
must be zeros at optimum (if the problem is feasible).
7
It is convenient to convert this remark to hard constraints in order to remove any reference to vectors u
i
? and therefore to the coupling contraints ? from the objective. We obtain the constrained problem with
the same optimal solution :
(Du) : find min
(?
BI
,?
IB
)
n
?
c=1
max
y
c
[
?
c
(y
c
) ? D(y
c
) ? ?
BI
c
? F (y
c
) ? ?
IB
c
]
(7)
s.t.
n
?
c=1
?
BI
c
= 0 and
n
?
c=1
?
IB
c
= 0 (8)
In order to solve (Du) we use the projected subgradient descent method that has already been used
in many problems, for example MRF decoding (Komodakis et al., 2007). For the problem at hand, this
method gives Algorithm 2. This iterative algorithm consists in reparametrising the elementary CRFs of
the system, by modifying the weights associated with the bigram features in places that correspond to
compound frontiers, penalising them on CRFs that diverge from the average solution. This is performed
5
One could object that some combinations are forbidden. It remains that the number of labels still grows exponentially.
6
Bigram places are identified by their second position.
7
Otherwise the sum expressions would be unbounded and their maximum is +? for an appropriate value of u
i
.
1879
by amending the vectors ?
BI
c
and ?
IB
c
that are updated at each iteration proportionally to the difference
between the feature vectors for c and the average values of these vectors. Hence the farther a solution
is from the consensus, the more penalised it gets at the next iteration. This algorithm stops when the
updates are null for all CRFs: in this case the consensus is reached.
Algorithm 2 Best segmentation with combined CRF system via subgradient descent
Require: n CRF c = (?,L
c
, w
c
, {f
c
p
}
p
), an input sentence x, a maximum number of iterations ? , stepsizes {?
t
}
0?t??
1: for all CRF c, bigram end position i, bigram label pair (l,m) do
2: ?
BI
c
[i, l,m]
(0)
= 0; ?
IB
c
[i, l,m]
(0)
= 0
3: end for
4: for t = 0? ? do
5: for all CRF c do
6: y
c
(t)
= V iterbi(G
c
, w
c
, f
c
,?
BI
(t)
c
,?
IB
(t)
c
)
7: end for
8: for all CRF c do
9: ?
BI
(t)
c
? ?
t
(
D
(
y
c
(t)
)
?
?
1?d?n
D
(
y
d
(t)
)
n
)
; ?
IB
(t)
c
? ?
t
(
F
(
y
c
(t)
)
?
?
1?d?n
F
(
y
d
(t)
)
n
)
10: ?
BI
(t+1)
c
? ?
BI
(t)
c
+ ?
BI
(t)
c
; ?
IB
(t+1)
c
? ?
IB
(t)
c
+ ?
IB
(t)
c
11: end for
12: if ?
BI
(t)
c
= 0 and ?
IB
(t)
c
= 0 for all c then
13: Exit loop
14: end if
15: end for
16: return (y
1
(t)
, ? ? ? , y
n
(t)
)
We set the maximum number of iteration ? to 1000. For the step size, we use a common heuristic:
?
t
=
1
1+k
where k is the number of times that (Du) has increased between two successive iterations.
4.3 Experimental results for CRF combinations
We modified the wapiti software (Lavergne et al., 2010) with Algorithm 2. Table 1 reports segmen-
tation results on the development set with the different tag sets, the best DD combination, and the best
voting system.
8
Tag Set CRF / combination Recall Precision F-score
partial-internal 79.59 85.49 82.44
partial 78.98 85.57 82.14
basic 79.74 84.65 82.12
complete 79.69 83.10 81.36
complete-internal 79.03 82.66 80.80
MWE basic complete partial-internal 80.82 86.07 83.36
vote (basic complete partial-internal) 80.49 85.46 82.90
Table 1: Segmentation scores of CRF systems (dev)
System F-score (all) F-score (compounds)
complete 94.29 78.32
MWE 94.59 80.00
Table 2: Segmentation + POS tagging (dev)
We see that the best system is a combination of 3 CRFs (tag sets basic, complete and partial-internal)
with DD, that we call MWE in the remaining of the paper. The subgradient descent converges on all
instances in 2.14 iterations on average. The DD combination is better than the voting system.
We can also evaluate the POS tagging accuracy of the system for systems including the complete
tag set. We compare the results of the complete CRF with the MWE combination on Table 2. The second
column gives the F-score of the complete task, segmentation and POS tagging. The third column restricts
the evaluation to compounds. Again, the MWE combination outperforms the single system.
8
Each system has one vote and in case of a draw, we pick the best system?s decision.
1880
In some preliminary experiments, the weights of the CRF systems were based on unigram features
mainly ? i.e. those described in (Constant et al., 2012). As our CRFs are constrained on transitions from
B to I and I to B, penalising systems resulted in modifying (low) bigram weights and had only a minor
effect on the predictions and consequently the projected gradient algorithm was slow to converge. We
therefore added bigram templates for some selected unigram templates, so that our system can converge
in a reasonable time. Adding these bigram features resulted in slower elementary CRFs. On average the
enriched CRFs were 1.8 times slower that their preliminary counterparts.
5 Dual Decomposition to combine parsers and sequence labellers
We now present an extension of the previous method to incorporate phrase-structure parsers in the com-
bination. Our approach relies on the following requirement for the systems to agree: if the parser predicts
a compound between positions i and j, then the CRFs must predict compound frontiers at the same po-
sitions. In this definition, like in previous CRF combinations, only the positions are taken into account,
not the grammatical categories. From a parse tree a, we define two feature vectors:
? D(a), such that D(a)[i] = 1 if a contains a subtree for a compound starting at position i ? 1
? F (a), such that F (a)[i] = 1 if a contains a subtree for a compound ending at position i ? 1
In other words, D(a)[i] indicates whether the CRFs should label position i ? 1 with B and position i
with I, while F (a)[i] indicates whether the CRFs should label position i ? 1 with I and position i with
B. See Figure 2 for an example.
NP
ADJ
vol?e
B
NC+
ADJ
bleue
I
NC
carte
B
DET
une
B
Figure 2: Parser and CRF alignments (A stolen credit card)
5.1 Parsing with probabilistic context-free grammars
We follow the type of reasoning we used in ? 4.2. With a PCFG g, we can define the score of a parse for
an input sentence x as the logarithm of the probability assigned to this parse by g. Finding the best parse
takes a form analogous to the one in Equation 2, and we can write the CKY algorithm as a best path
algorithm with penalties on nodes, as we did for the Viterbi algorithm previously. This is closely related
to the PCFG combinations of (Le Roux et al., 2013). We introduce penalties through two real vectors
?
BI
and ?
IB
indexed by compound positions. The modified CKY is presented in Algorithm 3
9
where
the parse forest F is assumed to be already available and we note w the vector of rule log-probabilities.
5.2 System combination
As in ? 4.2, our problem amounts to finding a tuple that now consists of a parse tree and several labellings.
All systems must agree on compound frontiers. Our objective is:
(P
?
) : find max
(a,y
1
,...,y
n
)
?
p
(a) + ?
n
?
c=1
?
c
(y
c
) (9)
s.t. ?u
1
, u
2
?c ? J1, nK, D(y
c
) = u
1
, F (y
c
) = u
2
, D(a) = u
1
, F (a) = u
2
(10)
9
Without loss of generality, only binary rules are taken into account.
1881
Algorithm 3 CKY with node penalties for compound start/end positions
1: CKY(F , w,?
BI
,?
IB
):
2: for all node v in the forest F do
3: ?[v] = ??
4: end for
5: for all leaf node x do
6: ?[x] = 0
7: end for
8: for all non-terminal node (A, i, j) in topological order do
9: for all incoming hyperedge u = (B, i, k)(C, k + 1, j)? (A, i, j) do
10: s? ?[(B, i, k)] + ?[(C, k + 1, j)] + w
A?BC
? w
A?BC
is the score for rule A? BC
11: if A is a compound label then
12: s? s? ?
BI
[i]? ?
IB
[j + 1]
13: end if
14: if s > ?[(A, i, j)] then
15: ?[(A, i, j)]? s
16: end if
17: end for
18: end for
19: return hyperpath with score ?[(ROOT, 1, n)]
We use ? to set the relative weights of the CRFs and the PCFG. It will be tuned on the develop-
ment set. We then reuse the same procedure as before: lagrangian relaxation, dualisation, and projected
subgradient descent. Algorithm 4 presents the function we derive from these operations.
Algorithm 4 Find the best segmentation with a PCFG and CRFs
Require: a PCFG parser p, n CRFs, an input sentence x, a bound ?
1: set Lagrange multipliers (penalty vectors) to zero
2: for t = 0? ? do
3: for all CRF c do
4: y
c
(t)
? V iterbi(G
c
, w
c
, f
c
,?
BI
(t)
c
,?
IB
(t)
c
)
5: end for
6: a
(t)
? CKY (F , w,?
BI
(t)
p
,?
IB
(t)
p
)
7: for all CRF c and parser p do
8: Update penalty vectors proportionally to the difference between corresponding solution and average solution
9: end for
10: if update is null for all c and p then
11: Exit loop
12: end if
13: end for
14: return (a
(t)
, y
1
(t)
, ? ? ? , y
n
(t)
)
Algorithm 4 follows the method used in ? 4 and simply adds the PCFG parser as another subsystem.
This method can then be extended further: for instance, we can add a POS tagger (Rush et al., 2010) or
multiple PCFG parsers (Le Roux et al., 2013). Due to lack of space, we omit the presentation of these
systems, but we experiment with them in the following section.
6 Experiments
For this series of experiments, we used wapiti as in ? 4.3 and the LORG PCFG-LA parser in the
configuration presented in (Le Roux et al., 2013) that we modified by implementing Algorithm 4. This
parser already implements a combination of parsers based on DD, a very competitive baseline.
For parse evaluation, we used the EVALB tool, modified by the SPMRL 2013 organisers, in order
to compare our results with the shared task participants. We evaluated several configurations: (i) the
LORG parser alone, a combination of 4 PCFG-LA parsers as in (Le Roux et al., 2013), (ii) a pipeline
of POS, a CRF-based POS tagger, and LORG, (iii) joint LORG and POS, using DD as in (Rush et al.,
2010), (iv) joint LORG and MWE (our best CRF combination for compound segmentation) using DD, and
(v) joint LORG, POS et MWE using DD. We also compare these architectures with 2 additional pipelines,
in which we first run MWE and then merge compounds as single tokens. The converted sentences are
then sent to a version of LORG learnt on this type of corpus. After parsing, compounds are unmerged,
1882
replaced with the corresponding subtree. In one of these two architectures, we add a POS tagger.
The evaluations for the parsing task of all these configurations are summarised in Table 3. The best
system is the DD joint system combining the POS tagger, the parser and the compound recognisers.
System Recall Precision Fscore EX Tag
LORG 82.01 82.37 82.19 18.06 97.35
pipeline POS? LORG 82.36 82.59 82.47 19.22 97.73
DD POS + LORG 82.48 82.73 82.61 19.19 97.84
DD MWE + LORG 82.91 83.07 82.99 19.19 97.41
DD POS + MWE + LORG 83.38 83.42 83.40 20.73 97.85
pipeline MWE MERGE? LORG? UNMERGE 82.56 82.63 82.59 18.79 97.39
pipeline MWE MERGE/POS? LORG? UNMERGE 82.73 82.64 82.69 20.02 97.57
Table 3: Parse evaluation on dev set (recall, precision and F-score, exactness and POS tagging).
Table 4 shows evaluation results of our best system and comparisons with baseline or alternative
configurations on the SPMRL 2013 test set.
Parsing The DD method performs better than our baseline, and better than the best system in the
SPMRL 2013 shared task (Bj?rkelund et al., 2013). This system is a pipeline consisting of a
morpho-syntactic tagger with a very rich and informative tag set, a product of PCFG-LAs, and
a parse reranker. Although this approach is quite different from ours, we believe our system is more
accurate overall because our method is more resilient to an error from one of its components.
Compound recognition and labelling For the task of recognition alone, where only the frontiers are
evaluated, the DD combinations of CRFs performs better than the best single CRF which itself
performs better than the parser alone, but the complete architecture is again the best system. If we
also evaluate compound POS tags, we get similar results. The DD combination is always beneficial.
System Recall Precision Fscore EX Tag
LORG 82.79 83.06 82.92 22.00 97.39
(Bj?rkelund et al., 2013) ? ? 82.86 ? ?
DD POS + MWE + LORG 83.74 83.85 83.80 23.81 97.87
compound recognition LORG 78.03 78.63 78.49 ? ?
compound recognition best single CRF (partial-internal) 78.27 82.84 80.49 ? ?
compound recognition MWE 79.68 83.50 81.54 ? ?
compound recognition DD POS + MWE + LORG 80.76 84.19 82.44 ? ?
compound recognition + POS tagging LORG 75.43 75.71 75.57 ? ?
compound recognition + POS tagging MWE 76.49 80.10 78.28 ? ?
compound recognition + POS tagging DD POS + MWE + LORG 77.92 81.23 79.54 ? ?
Table 4: Evaluation on SPMRL 2013 test set: parsing (first 3 lines), and compound recognition.
7 Conclusion
We have presented an original architecture for the joint task of syntactic parsing and compound recogni-
tion. We first introduced a combination of recognisers based on linear chain CRFs, and a second system
that adds in a phrase-structure parser. Our experimental prototype improves state-of-the-art on the French
SPMRL corpus.
In order to derive decoding algorithms for these joint systems, we used dual decomposition. This
approach, leading to simple and efficient algorithms, can be extended further to incorporate additional
components. As opposed to pipeline approaches, a component prediction can be corrected if its solution
is too far from the general consensus. As opposed to joint systems relying on pure dynamic programming
to build a complex single system, the search space does not grow exponentially, so we can avoid using
pruning heuristics such as beam search. The price to pay is an iterative algorithm.
Finally, this work paves the way towards component-based NLP software systems that perform com-
plex processing based on consensus between components, as opposed to previous pipelined approaches.
1883
Acknowledgements
We would like to thank Nadi Tomeh and Davide Buscaldi for their feedback on an early draft of this
paper, as well as the three anonymous reviewers for their helpful comments. This work is supported by
a public grant overseen by the French National Research Agency (ANR) as part of the Investissements
d?Avenir program (ANR-10-LABX-0083).
References
Anne Abeill?, Lionel Cl?ment, and Fran?ois Toussenel. 2003. Building a treebank for French. In Anne Abeill?,
editor, Treebanks. Kluwer, Dordrecht.
Abhishek Arun and Frank Keller. 2005. Lexicalization in crosslinguistic probabilistic parsing: The case of French.
In Proceedings of the Annual Meeting of the Association For Computational Linguistics (ACL?05), pages 306?
313.
Anders Bj?rkelund, Rich?rd Farkas, Thomas M?ller, and Wolfgang Seeker. 2013. (re) ranking meets morphosyn-
tax: State-of-the-art results from the spmrl 2013 shared task. In Proceedings of the 4th Workshop on Statistical
Parsing of Morphologically Rich Languages: Shared Task.
Matthieu Constant and Isabelle Tellier. 2012. Evaluating the impact of external lexical resources into a CRF-based
multiword segmenter and part-of-speech tagger. In Proceedings of the 8th conference on Language Resources
and Evaluation.
Matthieu Constant, Anthony Sigogne, and Patrick Watrin. 2012. Discriminative strategies to integrate multi-
word expression recognition and parsing. In Proceedings of the 50th Annual Meeting of the Association for
Computational Linguistics (ACL?12), pages 204?212.
Matthieu Constant, Marie Candito, and Djam? Seddah. 2013a. The LIGM-Alpage Architecture for the SPMRL
2013 Shared Task: Multiword Expression Analysis and Dependency Parsing. In Proceedings of the 4th Work-
shop on Statistical Parsing of Morphologically Rich Languages: Shared Task, Seattle, WA.
Matthieu Constant, Joseph Le Roux, and Anthony Sigogne. 2013b. Combining compound recognition and PCFG-
LA parsing with word lattices and conditional random fields. ACM Transaction in Speech and Language Pro-
cessing, 10(3).
Blandine Courtois, Myl?ne Garrigues, Gaston Gross, Maurice Gross, Ren? Jung, Michel Mathieu-Colas, Anne
Monceaux, Anne Poncet-Montange, Max Silberztein, and Robert Viv?s. 1997. Dictionnaire ?lectronique
DELAC : les mots compos?s binaires. Technical Report 56, University Paris 7, LADL.
Jenny Rose Finkel and Christopher D. Manning. 2009. Joint parsing and named entity recognition. In Proceed-
ings of Human Language Technologies: The 2009 Annual Conference of the North American Chapter of the
Association for Computational Linguistics, NAACL ?09, pages 326?334, Stroudsburg, PA, USA. Association
for Computational Linguistics.
Spence Green, Marie-Catherine de Marneffe, John Bauer, and Christopher D. Manning. 2011. Multiword expres-
sion identification with tree substitution grammars: A parsing tour de force with french. In Proceedings of the
conference on Empirical Method for Natural Language Processing (EMNLP?11), pages 725?735.
Spence Green, Marie-Catherine de Marneffe, and Christopher D Manning. 2013. Parsing models for identifying
multiword expressions. Computational Linguistics, 39(1):195?227.
Nikos Komodakis, Nikos Paragios, and Georgios Tziritas. 2007. MRF optimization via dual decomposition:
Message-passing revisited. In Computer Vision, 2007. ICCV 2007. IEEE 11th International Conference on,
pages 1?8. IEEE.
Terry Koo, Alexander M. Rush, Michael Collins, Tommi Jaakkola, and David Sontag. 2010. Dual decomposition
for parsing with non-projective head automata. In Proceedings of the Conference on Empirical Methods in
Natural Language Processing.
John Lafferty, Andrew McCallum, and Fernando Pereira. 2001. Conditional random fields: Probabilistic models
for segmenting and labeling sequence data. In Proceedings of the Eighteenth International Conference on
Machine Learning.
1884
Thomas Lavergne, Olivier Capp?, and Fran?ois Yvon. 2010. Practical very large scale CRFs. In Proceedings the
48th Annual Meeting of the Association for Computational Linguistics (ACL?10), pages 504?513.
Joseph Le Roux, Antoine Rozenknop, and Jennifer Foster. 2013. Combining PCFG-LA models with dual de-
composition: A case study with function labels and binarization. In Association for Computational Linguistics,
editor, Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing. Association
for Computational Linguistics, October.
Slav Petrov. 2010. Products of random latent variable grammars. In Proceedings of the Annual Conference of the
North American Chapter of the Association for Computational Linguistics - Human Language Technologies,
pages 19?27.
Odile Piton, Denis Maurel, and Claude Belleil. 1999. The Prolex Data Base : Toponyms and gentiles for
NLP. In Proceedings of the Third International Workshop on Applications of Natural Language to Data Bases
(NLDB?99), pages 233?237.
Alexander Rush, David Sontag, Michael Collins, and Tommi Jaakola. 2010. On dual decomposition and linear
programming relaxations for natural language processing. In ACL, editor, Proceedings of the Conference on
Empirical Methods in Natural Language Processing. Association for Computational Linguistics.
Beno?t Sagot. 2010. The lefff, a freely available, accurate and large-coverage lexicon for french. In Proceedings
of the 7th International Conference on Language Resources and Evaluation.
Djam? Seddah, Reut Tsarfaty, Sandra K
?
?ubler, Marie Candito, Jinho Choi, Rich?rd Farkas, Jennifer Foster, Iakes
Goenaga, Koldo Gojenola, Yoav Goldberg, Spence Green, Nizar Habash, Marco Kuhlmann, Wolfgang Maier,
Joakim Nivre, Adam Przepiorkowski, Ryan Roth, Wolfgang Seeker, Yannick Versley, Veronika Vincze, Marcin
Woli?nski, Alina Wr?blewska, and Eric Villemonte de la Cl?rgerie. 2013. Overview of the spmrl 2013 shared
task: A cross-framework evaluation of parsing morphologically rich languages. In Proceedings of the 4th
Workshop on Statistical Parsing of Morphologically Rich Languages, Seattle, WA.
Veronica Vincze, Istv?n Nagy, and G?bor Berend. 2011. Multiword expressions and named entities in the wiki50
corpus. In Proceedings of the conference on Recent Advances in Natural Language Processing (RANLP?11),
pages 289?295.
1885
Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pages 1158?1169,
Seattle, Washington, USA, 18-21 October 2013. c?2013 Association for Computational Linguistics
Combining PCFG-LA Models with Dual Decomposition: A Case Study with
Function Labels and Binarization
Joseph Le Roux?, Antoine Rozenknop?, Jennifer Foster?
? Universite? Paris 13, Sorbonne Paris Cite?, LIPN, F-93430, Villetaneuse, France
? NCLT/CNGL, School of Computing, Dublin City University, Dublin 9, Ireland
joseph.leroux@lipn.fr antoine.rozenknop@lipn.fr jfoster@computing.dcu.ie
Abstract
It has recently been shown that different NLP
models can be effectively combined using
dual decomposition. In this paper we demon-
strate that PCFG-LA parsing models are suit-
able for combination in this way. We exper-
iment with the different models which result
from alternative methods of extracting a gram-
mar from a treebank (retaining or discarding
function labels, left binarization versus right
binarization) and achieve a labeled Parseval
F-score of 92.4 on Wall Street Journal Sec-
tion 23 ? this represents an absolute improve-
ment of 0.7 and an error reduction rate of 7%
over a strong PCFG-LA product-model base-
line. Although we experiment only with bina-
rization and function labels in this study, there
is much scope for applying this approach to
other grammar extraction strategies.
1 Introduction
Because of the large amount of possibly contra-
dictory information contained in a treebank, learn-
ing a phrase-structure-based parser implies making
several choices regarding the prevalent annotations
which have to be kept ? or discarded ? in order to
guide the learning algorithm. These choices, which
include whether to keep function labels and empty
nodes, how to binarize the trees and whether to alter
the granularity of the tagset, are often motivated em-
pirically by parsing performance rather than by the
different aspects of the language they may be able to
capture.
Recently Rush et al (2010), Martins et al (2011)
and Koo et al (2010) have shown that Dual De-
composition or Lagrangian Relaxation is an elegant
S
fedcb
(a) Original example
S
?S?
?S?
?S?
fe
d
c
b
(b) Left Binarized example
S
f?S?
e?S?
d?S?
cb
(c) Right Binarized example
Figure 1: Binarization with markovization
framework for combining different types of NLP
tasks or for building parsers from simple slave pro-
cesses that only check partial well-formedness. Here
we propose to follow this idea, but with a different
objective. We want to mix different parsers trained
on different versions of a treebank each of which
makes some annotation choices in order to learn
more specific or richer information. We will use
state-of-the-art unlexicalized probabilistic context-
free grammars with latent annotations (PCFG-LA)
in order to compare our approach with a strong base-
line of high-quality parses. Dual Decomposition is
used to mix several systems (between two and four)
that may in turn be combinations of grammars, here
products of PCFG-LAs (Petrov, 2010). The systems
being combined make different choices with regard
to i) function labels and ii) grammar binarization.
Common sense would suggest that information in
the form of function labels ? syntactic labels such as
SBJ and PRD and semantic labels such as TMP and
LOC ? might help in obtaining a fine-grained anal-
ysis. On the other hand, the independence hypothe-
1158
sis on which CFGs rely and on which most popular
parsers are based may be too strong to learn the de-
pendencies between functions across the parse trees.
Also, the number of parameters increases with the
use of function labels and this can affect the learn-
ing process.
At first glance, binarization need not be an is-
sue, as CFGs admit a binarized form recognizing
exactly the same language. But binarization can be
associated with horizontal markovization and in this
case the recognized language will differ. Further-
more this can impose an unwanted emphasis on what
frontier information is more relevant to learning (be-
ginning or end of constituents). In the toy exam-
ple of Figure 1, the original grammar consisting of a
unique rule extracted from one tree only recognizes
the string bcdef, while the grammar learned from
the left binarized and markovized tree recognizes
(among others) bcdef and bdcef and the gram-
mar learned from the right binarized and markovized
tree recognizes (among others) bcdef and bcedf.
We find that i) retaining the function labels in non-
terminal categories loses its negative impact on pars-
ing as the number of grammars increases in PCFG-
LA product models, ii) the function labels them-
selves can be recovered with near state-of-the-art-
accuracy, iii) combining grammars with and without
function labels using dual decomposition is bene-
ficial, iv) combining left and right-binarized gram-
mars using dual decomposition also leads to bet-
ter trees and, v) our best results (a Parseval la-
beled F-score of 92.4, a Stanford labeled attach-
ment score (LAS) of 93.0 and a penn2malt unla-
beled attachment score (UAS) of 94.3 on Section 23
of the Wall Street Journal) are obtained by combin-
ing three grammars which encode different function
label/binarization decisions.
The paper is organized as follows. ? 2 reviews
related work. ? 3 presents approximate PCFG-LA
parsers as linear models, while ? 4 shows how we
can use dual decomposition to derive an algorithm
for combining these models. Experimental results
are presented and discussed in ? 5.
2 Related Work
Parser Model Combination It is well known that
improved parsing performance can be achieved by
leveraging the alternative perspectives provided by
several parsing models rather than relying on just
one. Examples are parser co-training (Steedman
et al, 2003; Sagae and Tsujii, 2007), voting over
phrase structure constituents or dependency arcs
(Henderson and Brill, 1999; Sagae and Tsujii, 2007;
Surdeanu and Manning, 2010), dependency pars-
ing stacking (Nivre and McDonald, 2008), product
model PCFG-LA parsing (Petrov, 2010), using dual
decomposition to combine dependency and phrase
structure models (Rush et al, 2010) or several non-
projective dependency parsing models (Koo et al,
2010; Martins et al, 2011), and using expecta-
tion propagation, a related approach to dual decom-
position, to combine lexicalized, unlexicalized and
PCFG-LA models (Hall and Klein, 2012). In this
last example, the models must factor in the same
way: in other words, the grammars must use the
same binarization scheme. In our study, we employ
PCFG-LA product models with dual decomposition,
and we relax the constraints on factorization, as we
require only a loose coupling of the models.
Function Label Parsing Although function labels
have been available in the Penn Treebank (PTB) for
almost twenty years (Marcus et al, 1994), they have
been to a large extent overlooked in English parsing
research ? most studies that report parsing results
on Section 23 of the Wall Street Journal (WSJ) use
parsing models that are trained on a version of the
WSJ trees where the function labels have been re-
moved. Notable exceptions are Merlo and Musillo
(2005) and Gabbard et al (2006) who each trained
a parsing model on a version of the PTB with func-
tion labels intact. Gabbard et al (2006) found that
parsing accuracy was not affected by keeping the
function labels. There have also been attempts to
use machine learning to recover the function labels
post-parsing (Blaheta and Charniak, 2000; Chrupala
et al, 2007). We recover function labels as part of
the parsing process, and use dual decomposition to
combine parsing models with and without function
labels. We are not aware of any other work that
leverages the benefits of both types of models.
Grammar Binarization Matsuzaki et al (2005)
compare binarization strategies for PCFG-LA pars-
ing, and conclude that the differences between them
have a minor effect on parsing accuracy as the num-
1159
ber of latent annotations increases beyond two. Hall
and Klein (2012) are forced to use head binarization
when combining their lexicalized and unlexicalized
parsers. Dual decomposition allows us to combine
models with different binarization schemes.
3 Approximation of PCFG-LAs as Linear
Models
In this section, we explain how we can use PCFG-
LAs to devise linear models suitable for the dual de-
composition framework.
3.1 PCFG-LA
Let us recall that PCFG-LAs are defined as tuples
G = (N , T ,H,RH, S, p) where:
? N is a set of observed non-terminals, among
which S is the distinguished initial symbol,
? T is a set of terminals (words),
? H is a set of latent annotations or hidden states,
? RH is a set of annotated rules, of the form
a[h1] ? b[h2] c[h3] for internal rules1 and
a[h1] ? w for lexical rules. Here a, b, c ? N
are non-terminals, w ? T is a terminal and
h1, h2, h3 ? H are latent annotations. Follow-
ing Cohen et al (2012) we also define the set of
skeletal rules R, in other words, rules without
hidden states, of the form a? b c or a? w.
? p : RH ? R?0 defines the probabilities asso-
ciated with rules conditioned on their left-hand
side. Like Petrov and Klein (2007), we impose
that the initial symbol S has only one latent an-
notation. In other words, among rules with S
on the left-hand side, only those of the form
S[0]? ? are inRH.
With such a grammar G we can define probabil-
ities over trees in the following way. We will con-
sider two types of trees, annotated trees and skeletal
trees. An annotated tree is a sequence of rules from
RH, while a skeletal tree is a sequence of skeletal
rules from R. An annotated tree TH is obtained by
left-most derivation from S[0]. Its probability is:
1For brevity and without loss of generality, we omit unary
and n-ary rules, as PCFG-LA admit a Chomsky normal form.
p(TH) =
?
r?TH
p(r) (1)
We define a projection ? from annotated trees to
skeletal trees. ?(TH) is a tree T isomorphic to TH
with the same terminal and non-terminal symbols la-
beling nodes, without hidden states. The probability
of a skeletal tree T is a sum of the probabilities of
all annotated trees that admit T as their projection.
p(T ) =
?
TH???1(T )
?
r?TH
p(r) (2)
PCFG-LA parsing amounts to, given a sequence
of words, finding the most probable skeletal tree
with this sequence as its yield according to a gram-
mar G:
T ? = arg max
T
?
TH???1(T )
?
r?TH
p(r) (3)
Because of this alternation of sum and products,
the parsing problem is intractable. Moreover, the
PCFG-LAs do not belong to the family of linear
models that are assumed in the Lagrangian frame-
work of (Rush and Collins, 2012). We now turn to
approximations for the parsing problem in order to
address both issues.
3.2 Variational Inference and MaxRule
Variational inference is a common technique to ap-
proximate a probability distribution p with a cruder
one q, as close as possible to the original one,
by minimizing the Kullback-Liebler divergence be-
tween the two ? see for instance (Smith, 2011),
chapter 5 for an introduction. Matsuzaki et al
(2005) showed that one can easily find such a cruder
distribution for PCFG-LAs and demonstrated exper-
imentally that this approximation gives good results.
More precisely, they find a PCFG that only rec-
ognizes the input sentence where the probabilities
q(rs) of the rules are set according to their marginal
probabilities in the original PCFG-LA parse forest.
The parameters rs are skeletal rules with span infor-
mation. Distribution q is defined in Figure 2.
Other approximations are possible. In particu-
lar, Petrov and Klein (2007) found that normaliz-
ing by the forest probability (in other words the in-
side probability of the root node) give better exper-
1160
score(a? b c, i, j, k) =
?
x,y,z?H
P i,kout
(
a[x]
)
? p
(
a[x]? b[y] c[z]
)
? P i,jin
(
b[y]
)
? P j,kin
(
c[z]
)
norm(a? b c, i, j, k) =
?
x?H
P i,kin
(
a[x]
)
? P i,kout
(
a[x]
)
score(a? w, i) =
?
x?H
P i,iout
(
a[x]
)
? p
(
a[x]? w
)
norm(a? w, i) =
?
x?H
P i,iin
(
a[x]
)
? P i,iout
(
a[x]
)
q(rs) =
[
score(rs)
norm(rs)
(Variational Inference)
]
or
[
score(rs)
P 0,nin (S[0])
(MaxRule-Product)
]
Figure 2: Variational Inference for PCFG-LA. Pin and Pout denote inside and outside probabilities.
imental results although its interpretation as varia-
tional inference is still unclear. This approximation
is called MaxRule-Product and amounts to replacing
the norm function (see Figure 2).
In both cases, the probability of a skeletal tree
now becomes a simple product of parameters asso-
ciated with anchored skeletal rules. For our purpose,
the consequence is twofold:
1. The parsing problem becomes tractable by ap-
plying standard PCFG algorithms relying on
dynamic programming (CKY for example).
2. Equivalent to probability, a score ? can be de-
fined as the logarithm of the probability. The
parsing problem becomes2:
T ? = arg max
T
?
rs?T
q(rs)
= arg max
T
?
rs?T
log q(rs)
= arg max
T
?
rs?F
wrs ? 1{rs ? T}
= arg max
T
?(T )
Thus, from a PCFG-LA we are able to de-
fine a linear model whose parameters are the log-
probabilities of the rules in distribution q.
2We denote the parse forest of a sentence by F and the char-
acteristic function of a set by 1.
3.3 Products of PCFG-LAs
Although PCFG-LA training is beyond the scope
of this paper, it is worthwhile mentioning that the
most common way to learn their parameters relies
on Expectation-Maximization which is not guaran-
teed to find the optimal estimation. Fortunately, this
can be partly overcome by combining grammars that
only differ on the initial parameterization of the EM
algorithm. The probability of a skeletal tree is the
product of the probabilities assigned by each single
grammar Gi.
T ? = arg max
T
n?
i=1
qGi(T ) (4)
Since grammars only differ by their numerical pa-
rameters (i.e. skeletal rules are the same), inference
can be efficiently implemented using dynamic pro-
gramming (Petrov, 2010).
Scoring with n such grammars now becomes:
T ? = arg max
T
n?
i=1
?
r?T
log qGi(r) (5)
= arg max
T
?
r?T
n?
i=1
log qGi(r) (6)
The distributions qGi still have to be computed in-
dependently ? and possibly in parallel ? but the final
decoding can be performed jointly. This is still a
linear model for PCFG-LA parsing, but restricted to
grammars that share the same skeletal rules.
1161
4 Dual Decomposition
In this section, we show how we derive an algorithm
to work out the best parse according to a set of n
grammars that do not share the exact same skele-
tal rules. As such, the grammars? product cannot
be easily conducted inside the parser to produce and
score a same and unique best tree, and we now con-
sider a c(ompound)-parse as a tuple (T1 . . . Tn) of
n compatible trees. Each grammar Gi is responsi-
ble for scoring tree Ti, and we seek to obtain the
c-parse that maximizes the sum of the scores of its
different trees. For a c-parse to be consistent, we
have to precisely define the parts on which the trees
must agree to be compatible with each other, so that
we can model these as agreement constraints.
4.1 Compound Parse Consistency
Let us suppose we have a set of phrase-structure
parsers trained on different versions of the same
treebank. Hence, some elements in the charts will
either be the same or can be mapped to each other
provided an equivalence relation and we define con-
sensus between parsers on these elements.
When the grammar is not functionally annotated,
phrase-structure trees can be decomposed into a set
of anchored (syntactical) categories Xs, asserting
that a category X is in the tree at position3 s. Thus,
such a tree T can be described by means of a boolean
vector z(T ) indexed by anchored labels Xs, where
z(T )Xs = 1 if Xs is in T and 0 otherwise.
We will differentiate the set of natural non-
terminals that occur in the treebanks from the set
of artificial non-terminals that do not occur in the
treebank and are the results of a binarization with
markovization. As these artificial non-terminals dis-
appear after reversing binarization in solution trees,
they do not play any role in the consensus between
parsers, and we only consider natural non-terminals
in the set of anchored labels.
When the grammar is functionally annotated,
each label X? in a tree is a pair (X,F ), where X
is a syntactical category and F is a function label.
In this case, in order to manage the consensus with
3The anchor s of a label is composed of the span (i, j), de-
noting that the label covers terminals of the input sentence from
index i to index j. In case the grammar contains unary non-
lexical rules, the anchor also discriminates the different posi-
tions in a sequence of unary rules.
non-functional grammars, we decompose such a tree
into two sets: a set of anchored categories Xs and a
set of anchored function labels Fs. Thus, a tree T
can be described by means of two boolean vectors:
? z(T ) indexed by anchored categories Xs,
z(T )Xs = 1 if there exists a function label F
so that (X,F )s is in T , and 0 otherwise;
? ?(T ) indexed by anchored function labels Fs,
?(T )Fs = 1 if there exists a category X so that
(X,F )s is in T , and 0 otherwise.
In the present work, a compound parse (T1 . . . Tn)
is said to be consistent iff every tree shares the same
set of anchored categories, i.e. iff:
?(i, j) ? J1, nK2, z(Ti) = z(Tj)
4.2 Combining Parsers through Dual
Decomposition
Like previous applications, we base our reasoning
on the assumption that computing the optimal score
with each grammar Gi can be efficiently calculated,
which is the case for approximate PCFG-LA pars-
ing. We follow the presentation of the decomposi-
tion from (Martins et al, 2011) to explain how we
can combine several PCFG-LA parsers together.
For a sentence s, we want to obtain the best con-
sistent compound parse from a set of n parsers:
(P ) : find arg max
(T1...Tn)?C
n?
p=1
?p(Tp) (7)
s.t. ?(i, j) ? J1, nK2, z(Ti) = z(Tj) (8)
where C = F1(s) ? ... ? Fn(s) is the product of
parse forests F i(s), and F i(s) is the set of trees in
grammar Gi whose yields are the input sentence s.
Solving this problem with an exact algorithm is
intractable. While artificial nodes could be inferred
using a traditional parsing algorithm based on dy-
namic programming (i.e. CKY), the natural nodes
require a coupling of the parsers? items to enforce
the fact that natural daughter nodes must be identical
(or equivalent) with the same spans for all parsers.
Since the debinarization of markovized rules enables
the creation of arbitrarily long n-ary rules, in the
worst case the number of natural daughters to check
is exponential in the size of the span to infer. Even if
1162
we bound the length of debinarized rules, the prob-
lem is hardly tractable.
As this problem is intractable, even for approxi-
mate PCFG-LA parsing, we apply the iterate method
presented in (Komodakis et al, 2007) for MRFs,
also applied for joint tasks in NLP such as combined
parsing and POS tagging in (Rush et al, 2010).
First, we introduce a witness vector u in order to
simplify constraints in (8). Problem (P ) can then be
written in an equivalent form :
(P ) : find oP = max
(T1...Tn)?C
n?
i=1
?i(Ti) (9)
s.t. ?i ? J1, nK, z(Ti) = u (10)
Next, we proceed to a Lagrangian decomposition.
This decomposition is a two-step process:
Step 1 (Relaxation): the coupling constraints (10)
are removed by introducing a vector of Lagrange
multipliers ?i = (?i,Xs)Xs for each parser i, in-
dexed by anchored categories Xs, and writing the
equivalent problem:
(RP ) : oRP = max
u, T1...n
min
?
f(u, T1...n,?)
where:
f(u, T1...n,?) =
?
i
?i(Ti) +
?
i
(z(Ti)? u) ? ?i
Intuitively, we can see the equivalence of (RP )
and (P ) with the following reasoning:
? whenever all constraints (10) are met, the sec-
ond sum in f is nullified and f(u, T1...n,?) =?
i ?i(Ti), which is a finite value and precisely
the objective function maximized in (P );
? if there is at least one (i,X, s) such that
z(Ti)Xs 6= uXs , then the value of
?
i(z(Ti) ?
u) ? ?i can be made arbitrarily small by
an appropriate choice of ?i,Xs ; in this case,
min? f(u, T1...n,?) = ??. Thus, (RP ) can
not reach its maximum at a point where con-
straints (10) are not satisfied.
Step 2 (dualization): the dual problem (LP ) is ob-
tained by permuting max and min in (RP ):
(LP1) : oLP = min
?
max
u, T1...n
f(u, T1...n,?)
Finally, u can be removed from (LP1) by adding
the constraint:
?
i ?i = 0. As a matter of fact,
one can see that if this constraint is not matched,
maxu,T1...n f(u, T1...n,?) = +? and (LP1) can
not reach its minimum on such a point. We can now
find the maximum of f by maxing each Ti indepen-
dently of each other. The dual problem becomes:
(LP ) : oLP = min
?
n?
i=1
max
Ti?Fi
(?i(Ti) + z(Ti) ? ?i)
s.t.
?
i
?i = 0
Minimization in (LP ) can be solved iteratively
using the projected subgradient method. Finding a
subgradient amounts to computing the optimal so-
lution (Rush and Collins, 2012) for each of the n
subproblems (the slave problems in the terminol-
ogy of (Martins et al, 2011) and (Komodakis et al,
2007)) which can be done efficiently, by incorpo-
rating the calculation of the penalties in the parsing
algorithm, and in parallel. Until the agreement con-
straints are met (or a maximal number of iterations
? ), the Lagrangian multipliers are updated according
to the deviations from the average solutions (i.e. up-
dates are zeros for a natural span if the parsers agree
on it). This leads to Algorithm 1.
It should be noted that the DP charts are built and
pruned during the first iteration only (t = 0); fur-
ther iterations do not require recreating the DP chart,
which is memory intensive and time consuming, nor
recomputing the approximate distribution for varia-
tional inference. As DP on the pruned charts is a fast
process, the bottleneck of the algorithm still is in the
first calculation of slave solutions.
The stepsize sequence (?t)0?t must be diminish-
ing and non-summable, that is to say: ?t, ?t ? 0,
limt?? ?t = 0 and
??
t=0 ?t = ?. In practice, we
set ?t = 11+c(t) where c(t) is the number of times the
objective function oP has increased since iterations
began.
Solving (P): it is easy to see that oLP is an up-
per bound of oP , but we do not necessarily have
1163
Algorithm 1 Find best compound parse with con-
straints on natural spans
Require: n parsers {pi}1?i?n
for all i, syntactical category X , anchor s do
?(0)i,Xs = 0
end for
for t = 0? ? do
for all parsers pi do
T (t)i ? arg maxT?Fi
(
?i(T ) + z(T ) ? ?
(t)
i
)
end for
for all parsers pi do
?(t)i ? ?t
(
z
(
T (t)i
)
?
?
1?j?n z
(
T (t)j
)
n
)
?(t+1)i ? ?
(t)
i + ?
(t)
i
end for
if ?(t)i = 0 for all i then
Exit loop
end if
end for
return (T (?)1 , ? ? ? , T
(?)
n )
strong duality (i.e. oLP = oP ) due to the facts that
parse forests are discrete sets. Furthermore, they get
pruned independently of each other. Thus, the algo-
rithm is not guaranteed to find a t such that z(T (t)i )
is the same for every parser i. However ? see (Koo
et al, 2010) ? if it does reach such a state, then we
have the guarantee of having found an exact solution
of the primal problem (P ). We show in the experi-
ments that this occurs very frequently.
5 Experiments
5.1 Experimental Setup
We perform our experiments on the WSJ sections of
the PTB with the usual split: sections 2 to 21 for
training, section 23 for testing, and we run bench-
marks on section 22. evalb is used for evaluation.
We use the LORG parser modified with Algo-
rithm 1. 4 All grammars are trained using 6
split/merge EM cycles. For the handling of unknown
words, we removed all words occurring once in the
training set and replaced them by their morpholog-
ical signature (Attia et al, 2010). Grammars for
products are obtained by training with 16 random
seeds for each setting. We use the approximate al-
4The LORG parser is available at https://github.
com/CNGLdlab/LORG-Release and the modification at
https://github.com/jihelhere/LORG-Release/
tree/functional_c11.
gorithm MaxRule-Product (Petrov and Klein, 2007).
The basic settings are a combination of the two
following parameters:
left or right binarization: we conjecture that this
affects the quality of the parsers by impacting the
recognition of left and right constituent frontiers.
We set vertical markovization to 1 (no parent anno-
tation) and horizontal markovization to 0 (we drop
all left/right annotations).
with or without functional annotations: in par-
ticular when non-terminals are annotated with mul-
tiple functions, all are kept.
5.2 Products of Grammars
We first evaluate each setting on its own before com-
bining them. We test the 4 different settings on the
development set, using a single grammar or a prod-
uct of n grammars. Results are reported on Figure 3.
We can see that right binarization performs better
than left binarization. Contrary to the results of Gab-
bard et al (2006), function labels are detrimental for
parsing performance for one grammar only. How-
ever, they do not penalize performance when using
the product model with 8 grammars or more.
n
F
1 2 4 8 16
89
90
91
92
93
Func Right
No Func Right
No Func Left
Func Left
Figure 3: F1 for products of n grammars on the dev. set
EM is not guaranteed to find the optimal model
and the problem is made harder by the increased
number of parameters. Product models effectively
alleviate this curse of dimensionality by letting some
models compensate for the errors made by others.
On the other hand, as differences between left
and right binarization settings remain over all prod-
uct sizes, right binarization seems more useful on
its own. The first part of Table 1 gives F-score and
1164
Exact Match results of the product models with 16
grammars on the development set.
5.3 Combinations with Dual Decomposition
We now turn to a series of experiments combining
product models of 16 grammars. In all these experi-
ments, we set the maximum number of iterations in
Algorithm 1 to 1000. The system then returns the
first element of the c-parse. We first try to combine
two settings in four different combinations:
DD Right Bin the two right-binarized systems ?
with and without functions ? the system returns
the function-labeled parse;
DD Left Bin the two left-binarized systems ? with
and without functions ? the system returns the
function-labeled parse;
DD Func the two systems with functions ? left and
right binarization ? the system returns the right-
binarized parse;
DD No Func the two systems without functions ?
left and right binarization ? the system returns
the right-binarized parse;
Results are in the second part of Table 1. Un-
surprisingly, the best configuration is the one com-
bining the two best product systems (with right bi-
narization) but all combined systems perform better
than their single components.
Setting F EX
No Func Right 92.26 42.97
No Func Left 91.92 42.91
Func Right 92.37 43.35
Func Left 91.95 43.15
DD Right Bin 92.71 44.44
DD Left Bin 92.23 43.97
DD Func 92.51 44.79
DD No Func 92.52 44.08
DD3 92.86 45.03
DD4 92.82 45.14
Table 1: Parse evaluation on development set.
We also combine 3 and 4 parsers to see if combin-
ing the above DD Right Bin setting with informa-
tion that could improve the recognition of beginning
of constituents can be helpful. We have 2 settings:
DD3 The 2 right-binarized parsers combined with
the left binarized parser without functions,
DD4 The 4 parsers together.
In both cases the system returns the right-
binarized function annotated parse. The results are
shown in the last part of Table 1. These 2 new con-
figurations give similar F-scores, better than all 2-
parser configurations.
We conclude from these results that left-
binarization and right-binarization capture different
linguistic aspects, even in the case of heavy horizon-
tal markovization, and that the method we propose
enables a practical integration of these models.
Table 2 shows for each setting how often the sys-
tems agree before 1000 iterations of Algorithm 1.
As one might expect, the more diverse the systems
are, the lower the rate of agreement.
Setting Rate
DD Right Bin 99.24
DD Left Bin 99.12
DD Func 98.53
DD No Func 99.12
DD3 96.18
DD4 94.53
Table 2: Rate of certificates of optimality on the dev set.
5.4 Evaluation of Function Labeling
We also evaluate the quality of the function labels.
We compare the results obtained directly from the
parser output with results obtained with Funtag, a
state-of-the-art functional tagger that is applied on
parser output, using a gold model trained on sections
02 to 21 of the WSJ (Chrupala et al, 2007).
Setting SYSTEM FUN FUNTAG
No Func Right ? 90.41
No Func Left ? 90.26
Func Right 89.61 90.37
Func Left 89.29 90.40
DD Right Bin 89.50 90.38
DD Left Bin 89.11 90.31
DD Func 89.54 90.49
DD No Func ? 90.36
DD3 89.48 90.42
DD4 89.57 90.45
Table 3: Function labeling F1 on development set.
The results are shown in Table 3. First, we can
see that the parser output is always outperformed by
Funtag. This is expected from a context-free parser
1165
that has a limited domain of locality with strong in-
dependence constraints, compared to a voted-SVM
classifier that can rely on arbitrarily rich features.
Second, the quality of the Funtag prediction seems
to be influenced by the fact that parser already han-
dle functions and by the accuracy of the parser (Par-
seval F-score). This is because we use a model
trained on the gold reference and so the closer the
parser output is from the reference, the better the
prediction. On the other hand, this is not the case
with parser predicted functions, where the best sys-
tem is the right-binarized product model with func-
tions, with very similar performance obtained by the
combinations consisting of 2 function parsers, set-
tings DD Func and DD4. This tends to indicate
that the constraints we have set to define consisten-
cies in c-parses, focusing on syntactical categories,
do not help in retrieving better function labels. This
suggests some possible further improvements where
parsers with functional annotations should be forced
to agree on these too.
5.5 Evaluation of Dependencies
Setting Stanford LTH p2m
LAS UAS LAS UAS UAS
Func Right 92.18 94.32 89.51 93.92 94.2
No Func Right 92.03 94.47 65.31 92.22 94.2
Func Left 91.86 94.06 89.28 93.75 93.9
No Func Left 91.83 94.29 65.33 92.18 94.1
DD Right Bin 92.56 94.60 89.81 94.17 94.5
DD Left Bin 92.01 94.38 89.62 94.05 94.2
DD Func 92.19 94.36 89.67 94.06 94.2
DD No Func 92.19 94.57 65.44 92.37 94.3
DD3 92.77 94.79 90.04 94.33 94.5
DD4 92.59 94.62 89.95 94.24 94.4
Table 4: Dependency accuracies on the dev set
Dependency-based evaluation of phrase structure
parser output has been used in recent years to pro-
vide a more rounded view on parser performance
and to compare with direct dependency parsers (Cer
et al, 2010; Petrov et al, 2010; Nivre et al, 2010;
Foster et al, 2011; Petrov and McDonald, 2012).
We evaluate our various parsing models on their
ability to recover three types of dependencies: basic
Stanford dependencies (de Marneffe and Manning,
2008)5, LTH dependencies (Johansson and Nugues,
5We used the latest version at the time of writing, i.e. 3.20.
2007)6 and penn2malt dependencies.7 The latter
are a simpler version of the LTH dependencies but
are still used when reporting unlabeled attachment
scores for dependency parsing.
The results, shown in Table 4, mirror the con-
stituency evaluation results in that the dual decom-
position results tend to outperform the basic product
model results, and combining three or four gram-
mars using dual decomposition yields the highest
scores. The differences between the Func and No
Func results highlight an important difference be-
tween the Stanford and LTH dependency schemes.
The tool used to produce Stanford dependencies has
been designed to work with phrase structure trees
that do not contain function labels. In contrast, the
LTH tool makes use of function label information
in phrase structure trees. Thus, their availability re-
sults in only a moderate improvement in LAS for the
Stanford dependencies and a very striking improve-
ment for the LTH dependencies. By retaining func-
tion labels during parsing, we have shown that LTH
dependencies can be recovered with a high level of
accuracy without having to resort to a post-parsing
function labeling step.
5.6 Test Set Results
We now evaluate our various systems on the test set
(the first half of Table 5) and compare these results
with state-of-the-art systems (the second half of Ta-
ble 5). We present parser accuracy results, measured
using Parseval F-score and penn2malt UAS, and, for
our systems, function label accuracy for labels pro-
duced during parsing and after parsing using Funtag.
We also carried out statistical significance testing8
on the F-score differences between our various sys-
tems on the development and test sets. The results
6nlp.cs.lth.se/software/treebank_converter. It
is recommended that LTH is used with the version of the Penn
Treebank which contains the more detailed NP bracketing pro-
vided by Vadas and Curran (2007). However, to facilitate com-
parison with other parsers and dependency schemes, we did not
use it in our experiments. We ran the converter with the right-
Branching=false option to indicate that we are using the version
without extra noun phrase bracketing.
7stp.lingfil.uu.se/?nivre/research/Penn2Malt.
The English head-finding rules of Yamada and Mat-
sumoto (2003), supplied on the website, are employed.
8We used Dan Bikel?s compare.pl script which uses
stratified shuffling to compute significance. We consider a p
value < 0.05 to indicate a statistically significant difference.
1166
Setting F UAS Fun Funtag
Func Right 91.73 93.9 91.02 91.88
No Func Right 91.76 93.8 ? 91.80
Func Left 91.45 93.7 90.41 91.80
No Func Left 91.57 93.7 ? 91.74
DD Right Bin 92.16 94.1 90.85 91.86
DD Left Bin 91.89 93.9 90.10 91.85
DD Func 92.23 94.1 91.02 91.91
DD No Func 92.09 94.0 ? 91.86
DD3 92.45 94.3 90.86 91.98
DD4 92.44 94.3 90.97 92.04
(Shindo et al, 2012) 92.4
(Zhang et al, 2009) 92.3
(Petrov, 2010) 91.8
(Huang, 2008) 91.7
(Bohnet and Nivre, 2012) 93.7
Table 5: Test Set Results: Parseval F-score, penn2malt
UAS, Function Label Accuracy and Funtag Function La-
bel Accuracy
are shown in Table 6.
Comparison Dev Test
Func Right vs. No Func Right 7 7
Func Left vs. No Func Left 7 7
Func Right vs. Func Left X 7
No Func Right vs. No Func Left 7 7
DD Right Bin vs. Func Right X X
DD Right Bin vs. No Func Right X X
DD Left Bin vs. Func Left X X
DD Left Bin vs. No Func Left X X
DD Right Bin vs DD Left Bin X X
DD Func vs. Func Right 7 X
DD Func vs. Func Left X X
DD No Func vs. No Func Right X X
DD No Func vs. No Func Left X X
DD Func vs. DD No Func 7 7
DD3 vs. DD Right Bin 7 X
DD3 vs. No Func Left X X
DD3 vs. DD Func X X
DD4 vs. DD. Right Bin 7 X
DD4 vs. DD. Left Bin X X
DD4 vs. DD Func X X
DD4 vs. DD3 7 7
Table 6: Statistical Significance Testing
We measured the performance of DD4 on the test
set. It is approximately 3 times slower than the
slowest product model (left binarization with func-
tion labels) and 7 slower than the fastest one (right
binarization without function labels). This system
performs on average 85.5 iterations of the DD al-
gorithm. If we exclude the non-converging cases
(5.1% of the cases), this drops to 39.4.
Finally we compare our results with systems
trained and evaluated on the PTB, see the lower half
of Table 5. Our product models are not different
from those presented in (Petrov, 2010) and it is not
surprising to see that the F-scores are similar. More
interestingly our DD4 setting improves on these re-
sults and compares favorably with systems relying
on richer syntactic information, such as the discrim-
inative parser of (Huang, 2008) that makes use of
non-local features to score trees and the TSG parser
of (Shindo et al, 2012) that can take into account
larger tree fragments: this would indicate that by
combining our parsers we extend the domain of lo-
cality, horizontally with binarization schemes and
vertically with function labels. Our system also per-
forms better than the combination system presented
in (Zhang et al, 2009) that only relies on material
from the PTB9 but a more detailed comparison is
difficult: this system does not use products of la-
tent models and more generally their method is or-
thogonal to ours. We also include for comparison
state-of-the-art dependency parsing results (Bohnet
and Nivre, 2012).
6 Conclusion
We presented an algorithm and a set of experiments
showing that grammar extraction strategies can be
combined in an elegant way and give state-of-the-art
results when applied to high-quality phrase-based
parsers. As well as repeating these experiments for
languages which rely more on function annotation,
we also plan to apply our method to other types of
annotations, e.g. more linguistically motivated bina-
rization strategies or ? of particular interest to us ?
annotation of empty elements.
Acknowledgments
We are grateful to the reviewers for their helpful
comments. We also thank Joachim Wagner for pro-
viding feedback on an early version of the paper.
This work has been partially funded by the Labex
EFL (ANR/CGI).
9Their other system relying on the self-trained version of the
BLLIP parser achieves 92.6 F1.
1167
References
Mohammed Attia, Jennifer Foster, Deirdre Hogan,
Joseph Le Roux, Lamia Tounsi, and Josef van Gen-
abith. 2010. Handling unknown words in statistical
latent-variable parsing models for Arabic, English and
French. In Proceedings of the First Workshop on Sta-
tistical Parsing of Morphologically Rich Languages
(SPMRL 2010).
Don Blaheta and Eugene Charniak. 2000. Assigning
function tags to parsed text. In Proceedings of the 1st
Annual Meeting of the North American chapter of the
ACL.
Bernd Bohnet and Joakim Nivre. 2012. A transition-
based system for joint part-of-speech tagging and la-
beled non-projective dependency parsing. In Proceed-
ings of the 2012 Joint Conference on Empirical Meth-
ods in Natural Language Processing and Computa-
tional Natural Language Learning, pages 1455?1465.
Daniel Cer, Marie-Catherine de Marneffe, Daniel Juraf-
sky, and Christopher D. Manning. 2010. Parsing to
Stanford Dependencies: Trade-offs between speed and
accuracy. In Proceedings of LREC.
Grzegorz Chrupala, Nicolas Stroppa, Josef van Genabith,
and Georgiana Dinu. 2007. Better training for func-
tion labeling. In Proceedings of the 2007 Conference
on Recent Advances in Natural Language Processing
(RANLP).
Shay B. Cohen, Karl Stratos, Michael Collins, Dean P.
Foster, and Lyle Ungar. 2012. Spectral learning of
latent-variable PCFGs. In Proceedings of the 50th
Annual Meeting of the Association for Computational
Linguistics (ACL?12).
Marie-Catherine de Marneffe and Christopher D. Man-
ning. 2008. The Stanford typed dependencies repre-
sentation. In Proceedings of the COLING Workshop
on Cross-Framework and Cross-Domain Parser Eval-
uation.
Jennifer Foster, Ozlem Cetinoglu, Joachim Wagner,
Joseph Le Roux, Joakim Nivre, Deirdre Hogan, and
Josef van Genabith. 2011. From news to comment:
Resources and benchmarks for parsing the language
of web 2.0. In Proceedings of IJCNLP.
Ryan Gabbard, Mitchell Marcus, and Seth Kulick. 2006.
Fully parsing the penn treebank. In Proceedings of the
Human Language Technology Conference of the North
American Chapter of the ACL, pages 184?191.
David Hall and Dan Klein. 2012. Training factored
PCFGs with expectation propagation. In Proceedings
of the 2012 Conference on Empirical Methods in Nat-
ural Language Processing, pages 649?652.
John C. Henderson and Eric Brill. 1999. Exploiting
diversity in natural language processing: Combining
parsers. In Proceedings of the 1999 Conference on
Empirical Methods in Natural Language Processing,
pages 187?194.
Liang Huang. 2008. Forest reranking: Discriminative
parsing with non-local features. In Proceedings of
ACL-08: HLT, pages 586?594.
Richard Johansson and Pierre Nugues. 2007. Extended
constituent-to-dependency conversion for english. In
Joakim Nivre, Heiki-Jaan Kaalep, Kadri Muischnek,
and Mare Koit, editors, Proceedings of NODALIDA
2007, pages 105?112.
Nikos Komodakis, Nikos Paragios, and Georgios Tziri-
tas. 2007. MRF optimization via dual decomposition:
Message-passing revisited. In Computer Vision, 2007.
ICCV 2007. IEEE 11th International Conference on,
pages 1?8. IEEE.
Terry Koo, Alexander M. Rush, Michael Collins, Tommi
Jaakkola, and David Sontag. 2010. Dual decompo-
sition for parsing with non-projective head automata.
In Proceedings of the 2010 Conference on Empirical
Methods in Natural Language Processing.
Mitchell Marcus, Grace Kim, Mary Ann Marcinkiewicz,
Robert MacIntyre, Ann Bies, Mark Ferguson, Karen
Katz, and Britta Schasberger. 1994. The penn tree-
bank: Annotating predicate argument structure. In
Proceedings of the 1994 ARPA Speech and Natural
Language Workshop, pages 114?119.
Andre? FT Martins, Noah A Smith, Pedro MQ Aguiar,
and Ma?rio AT Figueiredo. 2011. Dual decomposition
with many overlapping components. In Proceedings
of the Conference on Empirical Methods in Natural
Language Processing, pages 238?249.
Takuya Matsuzaki, Yusuke Miyao, and Jun?ichi Tsujii.
2005. Probabilistic CFG with latent annotations. In
Proceedings of the 43rd Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL?05), pages
75?82.
Paola Merlo and Gabriele Musillo. 2005. Accu-
rate function parsing. In Proceedings of Human
Language Technology Conference and Conference on
Empirical Methods in Natural Language Processing
(HLT/EMNLP), pages 620?627.
Joakim Nivre and Ryan McDonald. 2008. Integrating
graph-based and transition-based dependency parsers.
In Proceedings of ACL-08: HLT, pages 950?958.
Joakim Nivre, Laura Rimell, Ryan Mc Donald, and Car-
los Go?mez-Rodr??guez. 2010. Evaluation of depen-
dency parsers on unbounded dependencies. In Pro-
ceedings of COLING.
Slav Petrov and Dan Klein. 2007. Improved infer-
ence for unlexicalized parsing. In Proceedings of
the conference on Human Language Technologies and
the conference of the North American Chapter of
the Association for Computational Linguistics (HLT-
NAACL?07).
1168
Slav Petrov and Ryan McDonald. 2012. Overview of
the 2012 shared task on parsing the web. In Working
Notes of the SANCL Workshop (NAACL-HLT).
Slav Petrov, Pi-Chuan Chang, Michael Ringgaard, and
Hiyan Alshawi. 2010. Uptraining for accurate deter-
ministic question parsing. In Proceedings of EMNLP.
Slav Petrov. 2010. Products of random latent variable
grammars. In Proceedings of the conference on Hu-
man Language Technologies and the conference of the
North American Chapter of the Association for Com-
putational Linguistics (HLT-NAACL?10), pages 19?27.
Alexander Rush and Michael Collins. 2012. A tutorial
on dual decomposition and lagrangian relaxation for
inference in natural language processing. Journal of
Artificial Intelligence Research, 45:305?362.
Alexander M Rush, David Sontag, Michael Collins, and
Tommi Jaakkola. 2010. On dual decomposition and
linear programming relaxations for natural language
processing. In Proceedings of the 2010 Conference on
Empirical Methods in Natural Language Processing,
pages 1?11.
Kenji Sagae and Jun?ichi Tsujii. 2007. Dependency pars-
ing and domain adaptation with LR models and parser
ensembles. In Proceedings of the CoNLL shared task
session of EMNLP-CoNLL, pages 1044?1050.
Hiroyuki Shindo, Yusuke Miyao, Akinori Fujino, and
Masaaki Nagata. 2012. Bayesian symbol-refined tree
substitution grammars for syntactic parsing. In Pro-
ceedings of the 50th Annual Meeting of the Association
for Computational Linguistics: Long Papers-Volume
1, pages 440?448.
Noah A. Smith. 2011. Linguistic Structure Predic-
tion. Synthesis Lectures on Human Language Tech-
nologies. Morgan and Claypool, May.
Mark Steedman, Miles Osbourne, Anoop Sarkar, Stephen
Clark, Rebecca Hwa, Julia Hockenmaier, Paul Ruhlen,
Steven Baker, and Jeremiah Crim. 2003. Boot-
strapping statistical parsers from small datasets. In
Proceedings of EACL, pages 759?763.
Mihai Surdeanu and Christopher D. Manning. 2010. En-
semble models for dependency parsing: Cheap and
good? In Proceedings of the conference on Hu-
man Language Technologies and the conference of the
North American Chapter of the Association for Com-
putational Linguistics (HLT-NAACL?10), pages 649?
652.
David Vadas and James R. Curran. 2007. Adding noun
phrase structure to the penn treebank. In Proceedings
of ACL, pages 240?247.
Hiroyasu Yamada and Yuji Matsumoto. 2003. Statistical
dependency analysis with support vector machines. In
Proceedings of IWPT, pages 195?206.
Hui Zhang, Min Zhang, Chew Lim Tan, and Haizhou
Li. 2009. K-best combination of syntactic parsers.
In Proceedings of the 2009 Conference on Empiri-
cal Methods in Natural Language Processing, pages
1552?1560.
1169
