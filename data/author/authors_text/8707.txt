Aligning Bilingual Corpora Using Sentences Location Information* 
Li Weigang   Liu Ting   Wang Zhen   Li Sheng 
Information Retrieval Lab, Computer Science & Technology School, 
Harbin Institute of Technology 321# 
Harbin, China, 150001 
{LEE, tliu, wangzhen, lis}@ir.hit.edu.cn 
 
 
Abstract 
Large amounts of bilingual resource on the Internet 
provide us with the probability of building a large 
scale of bilingual corpus. The irregular characteris-
tics of the real texts, especially without the strictly 
aligned paragraph boundaries, bring a challenge to 
alignment technology. The traditional alignment 
methods have some difficulties in competency for 
doing this. This paper describes a new method for 
aligning real bilingual texts using sentence pair 
location information. The model was motivated by 
the observation that the location of a sentence pair 
with certain length is distributed in the whole text 
similarly. It uses (1:1) sentence beads instead of 
high frequency words as the candidate anchors. 
The method was developed and evaluated through 
many different test data. The results show that it 
can achieve good aligned performance and be ro-
bust and language independent. It can resolve the 
alignment problem on real bilingual text. 
1 Introduction 
There have been a number of papers on aligning 
parallel texts at the sentence level in the last cen-
tury, e.g., (Brown et al 1991; Gale and Church, 
1993; Simard et al 1992; Wu DeKai 1994). On 
clean inputs, such as the Canadian Hansards and 
the Hong Kang Hansards, these methods have been 
very successful.  
(Church, Kenneth W, 1993; Chen, Stanley, 1993) 
proposed some methods to resolve the problem in 
noisy bilingual texts. Cognate information between 
Indo-European languages pairs are used to align n- 
 
 
oisy texts. But these methods are limited when 
aligning the language pairs which are not in the 
same genre or have no cognate information. (Fung, 
1994) proposed a new algorithm to resolve this 
problem to some extent. The algorithm uses fre-
quency, position and recency information as fea-
tures for pattern matching. (W. Bin, 2000) adapted 
the similar idea with (Fung, 1994) to align special 
domain bilingual texts. Their algorithms need 
some high frequency word pairs as anchor points. 
When processing the texts that include less high-
frequency words, these methods will perform 
weakly and with less precision because of the scar-
city of the data problem.  
 (Haruno and Yamazaki, 1996) tried to align 
short texts without enough repeated words in struc-
turally different languages, such as English and 
Japanese. They applied the POS information of 
content words and an online dictionary to find 
matching word pairs. But this is only suitable for 
the short texts. 
The real text always includes some noisy infor-
mation. It has the following characteristics as fol-
lows: 
1) There are no strict aligned paragraph bounda-
ries in real bilingual text;  
2) Some paragraphs may be merged into a larger 
paragraph because of the translator?s individual 
idea;  
3) There are many complex translation patterns 
in real text; 
4)  There exist different styles and themes; 
5) Different genres have different inherent char-
acteristics.  
The tradition approaches to alignment fall into 
two main classes: lexical and length. All these 
methods have limitations when facing the real text 
according to the characteristics mentioned above. 
    * This research was supported by National Natural 
Science Foundation (60203020) and Science Founda-
tion of Harbin Institute of technology (hit.2002.73). 
We proposed a new alignment method based on 
the sentences location information. Its basic idea is 
that the location of a sentence pair with certain 
length is distributed in the whole text similarly. 
The local and global location information of a sen-
tence pair is fully combined together to determine 
the probability with which the sentence pair is a 
sentence bead. 
In the first of the following sections, we describe 
several concepts. The subsequent section reports 
the mathematical model of our alignment approach. 
Section 4 presents the process of anchors selection 
and algorithm implementation is shown in section 
5. The experiment results and discussion are shown 
in section 6. In the final section, we conclude with 
a discussion of future work. 
2 Several conceptions 
1) Alignment anchors: (Brown, 1991) firstly in-
troduced the concept of alignment anchors when 
he aligned Hansard corpus. He considered that the 
whole texts were divided into some small frag-
ments by these alignment anchors. Anchors are 
some aligned sentence pairs. 
2) Sentence bead:  and at the same time, (Brown, 
1991) called each aligned sentence pair a sentence 
bead. Sentence bead has some different styles, 
such as (0:1), (1:0), (1:1), (1:2), (1: more), (2:1), 
(2:2), (2: more), (more: 1), (more: 2), (more: more).  
3) Sentence pair: Any two sentences in the bilin-
gual text can construct a sentence pair. 
4) Candidate anchors: Candidate anchors are 
those that can be possible alignment anchors. In 
this paper, all (1:1) sentence beads are categorized 
as candidate anchors. 
3 Mathematical Model of Alignment 
The alignment process has two steps: the first 
step is to integrate all the origin paragraphs into 
one large paragraph. This can eliminate the prob-
lem induced by the vague paragraph boundaries. 
The second step is the alignment process. After 
alignment, the bilingual text becomes sequences of 
translated fragments. The unit of a fragment can be 
one sentence, two sentences or several sentences. 
The traditional alignment method can be used with 
the fragment with several sentences to improve the 
alignment granularity. In this paper the formal de-
scription of the alignment task was given by ex-
tending the concepts of bipartite graph and 
matching in graph theory. 
3.1 Bipartite graph 
Bipartite graph: Here, we assumed G to be an 
undirected graph, then it could be defined as G=<V, 
E>. The vertex+ set of V has two finite subsets: V1 
and V2, also V1 ? V2?V, V1?V2??. Let E be a 
collection of pairs, when e?E, then e={vi, vj}, 
where vi?V1,vj?V2. The triple G was described 
as, G=<V1, E, V2>, called bipartite graph. In a bi-
partite graph G, if each vertex of V1 is joined with 
each vertex of V2, or vice versa, here an edge 
represents a sentence pair. The collection E is the 
set of all the edges. The triple G=<V1, E, V2> is 
called complete bipartite graph. We considered 
that: |V1|?m, |V2|?n, where the parameters m and 
n are respectively the elements numbers of V1 and 
V2. The complete bipartite graph was usually ab-
breviated as Km, n (as shown in figure 1). 
 
 
 
 
 
 
 
3.2 Matching 
Matching: Assuming G?<V1, E, V2> was a bi-
partite graph. A matching of G was defined as M, a 
subset of E with the property that no two edges of 
M have a common vertex. 
3.3 Best Alignment Matching 
The procedure of alignment using sentence loca-
tion information can be seen as a special matching. 
We defined this problem as ?Best Alignment 
Matching? (BAM). 
BAM: If M=<S, EM, T> is a best alignment 
matching of G=<S, E, T>, then M must meet the 
following conditions:  
1) All the vertexes in the complete bipartite 
graph are ordered; 
2) The weight of any edges in EM d(si, tj) has: 
d(si, tj)< D (where D is alignment threshold); at the 
same time, there are no edges {sk, tr} which made 
k<i and r>j, or k>i and r<j; 
Figure 1 K3,3 complete bipartite graph 
3) If we consider: |S|=m and |T|=n, then the edge 
{sm, tn} belonged to EM; 
Best alignment matching can be attained by 
searching for the smallest weight of edge in collec-
tion E, until the weight of every edge d(si, tj) is 
equal or more than the alignment threshold D. 
Generally, the alignment threshold D is determined 
according to experience because different texts 
have different styles. 
 
 
 
 
 
 
 
 
 
If each sentence in the text S (or T) corre-
sponds with a vertex in V1(or V2), the text S or T 
can be denoted by S(s1, s2, s3,?si, ?sj, ?sm) or 
T(t1, t2, t3?ti, ?tj, ?tn). Considering the form 
merely, each element in S combined with any ele-
ment in T can create a complete bipartite graph. 
Thus the alignment task can be seen as the process 
of searching for the BAM in the complete bipartite 
graph. As shown in figure 2, the edge e = {si, tj} 
belongs to M; this means that the i-th sentence in 
text S and the j-th sentence in text T can make an 
alignment anchor. Each edge is corresponding to 
an alignment value. In order to ensure the bilingual 
texts are divided with the same fragment number, 
we default that the last sentence in the bilingual 
text is aligned. That is to say, {sm, tn} E? M was 
correct, if |S|=m and |T|=n in the BAM mathemati-
cal model.  
We stipulated the smaller the alignment value is, 
the more similar the sentence pair is to a candidate 
anchor. The smallest value of the sentence pair is 
found from the complete bipartite graph. That 
means the selected sentence pair is the most prob-
able aligned (1:1) sentence bead. Alignment proc-
ess is completed until the alignment anchors 
become saturated under alignment threshold value. 
Sentence pairs extracted from all sentence pairs 
are seen as alignment anchors. These anchors di-
vide the whole texts into short aligned fragments. 
The definition of BAM ensures that the selected 
sentence pairs cannot produce cross-alignment er-
rors, and some cases of (1: more) or (more: 1) 
alignment fragments can be attained by the frag-
ments pairs between two selected alignment an-
chors. 
4 Anchors Selection during Alignment 
All (1:1) sentence beads are extracted from dif-
ferent styles of bilingual texts. The distribution 
states that all of them are similar as presented in 
figure 3. The horizontal axis denotes the sentence 
number in Chinese text, and the vertical axis de-
notes the sentence number in English text. 
-20 0 20 40 60 80 100 120 140 160 180
-20
0
20
40
60
80
100
120
140
160
180
200
 
Se
nte
nc
e N
um
be
r in
 E
ng
lis
h T
ex
t
Sentence Number in Chinese Text
Beads
 
 
 
 
Statistical results show that more than 85% sen-
tence beads are (1:1) sentence beads in bilingual 
texts and their distributions obey an obvious law 
well. (DeKai Wu, 1994) offered that (1:1) sentence 
beads occupied 89% in English-Chinese as well. If 
we select these style sentence beads as candidate 
anchors, the alignment method will be general on 
any other language pairs. The main points of our 
alignment method using sentences location infor-
mation are: locating by the whole text, collocating 
by sentence length and checking by a bilingual 
dictionary. Location information of any sentence 
pair is used fully. Three lengths are used: are sen-
tence length, upper context length above the sen-
tence pair and nether context length below the 
sentence. All this information is considered to cal-
culate the alignment weight of each sentence pair. 
Finally, the sentence pair with high weight will be 
checked by a English-Chinese bilingual dictionary. 
In order to study the relationship between every 
sentence pair of {si, tj}, four parameters are defined: 
Whole text length ratio: P0 = Ls / Lt; 
Upper context length ratio: Pu[i, j] = Usi / Utj; 
Nether context length ratio: Pd[i, j] = Dsi / Dtj 
Sentence length ratio: Pl[i, j] = Lsi / Ltj; 
Figure 2 Sketch map of Km, n BAM under 
alignment threshold D 
t1  t2   t3  t4  t5  t6  t7      ti     tj                      tn-2   tn-1  tn  
s1  s2  s3   s4  s5   s6  s7      si   sj                    sm-2  sm-1 sm  
????
????
Figure 3 Distribution of (1:1) sentence beads 
in bilingual texts 
Where  
si    the i-th sentence of S; 
tj    the j-th sentence of T; 
Ls  the length of source language text S; 
Lt   the length of target language text T; 
Lsi  the length of si; 
Ltj  the length of tj; 
Usi  the upper context length above sentence si; 
Utj  the upper context length above sentence tj; 
Dsi  the nether context length below sentence si; 
Dtj  the nether context length below sentence tj; 
Figure 4 illustrates clearly the relationship of all 
variables.   
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
If si and tj can construct a (1:1) alignment anchor, 
P[i, j] must be less than the alignment threshold, 
where P[i,j] denotes the integrated alignment value 
between si and tj. We assume that the weight coef-
ficient of Pl[i, j] is 1. Only considering the form, 
Pu[i, j] and Pd[i, j] must have the same weight co-
efficient. Here the weight coefficient is set ?. We 
constructed a formal alignment function on every 
sentence pair: 
P[i,j] = 
?(Pu[i, j]-P0)? + (Pl[i, j] -P0)? +?(Pd[i, j] -P0)? 
Where, the parameter ? is the weight coefficient, 
if can adjust the weight of sentence pair length and 
the weight of context lengths well. The longer the 
text is, the more insensitive the effect of the con-
text-length is. So ??s value should increase in order 
to balance the whole proportion. The short text is 
vice versa. In this paper we define: 
?= (Ls/Lsi + Lt/Ltj)/2 
According to the definition of BAM, the smaller 
the alignment function value of P[i, j] is, the more 
the probability of sentence pair {si, tj} being a (1:1) 
sentence bead is. In this paper, we adopt a greedy 
algorithm to select alignment anchors according to 
all the alignment function values of P[i, j] which 
are less than the alignment threshold. This proce-
dure can be implemented with a time complexity 
of O(m*n).  
To obtain further improvement in alignment ac-
curacy requires calculation of the similarity of the 
sentence pairs. An English-Chinese bilingual dic-
tionary is adopted to calculate the semantic simi-
larity between the two sentences in a sentence pair. 
The similarity formula based on a bilingual dic-
tionary is followed: 
 
 
 
Where L| | is the bytes number of all elements, 
Match (T) is (according to English-Chinese dic-
tionary) the English words which have Chinese 
translation in the Chinese sentence, Match (S) is 
the matched Chinese fragments. 
According to the above dictionary check, align-
ment precision is improved greatly. We take a sta-
tistic on all the errors and find that most errors are 
partial alignment errors. Partial alignment means 
that the alignment location is correct, but a half 
pair of the alignment pairs is not integrated. It is 
very difficult to avoid these errors when only tak-
ing into account the sentence location and length 
information. Thus in order to reduce this kind of 
error, we check the semantic similarity of the con-
text-adjacent sentence pairs also. Because these 
pairs could be other alignment patterns, such as 
(1:2) or (2:1), the similarity formulas have some 
difference from the (1:1) sentence pair formula. 
Here, a simple judgement is performed. It is  
shown as: 
If?Lsi-1 * P0 > Ltj-1? 
 
   
 
else 
 
   
 
Here, those alignment anchors whose similari-
ties exceed the similarity threshold based on the 
bilingual dictionary will become the final align-
ment anchors. These final anchors divide the whole 
bilingual texts into aligned fragments. 
Figure 4 Sketch map of variables relationship 
si tjLsi Ltj
Usi Utj
Dsi Dtj
Ls Lt
Chinese Text English Text
s1 t1
tnsm
| ( ) | | ( ) |
| | | |
L Match S L Match TH L S L T
+= +
adjacent
adjacent *)01(
|)(||)(|
LsP
TMatchLSMatchLH +
+=
adjacent
adjacent *)0/11(
|)(||)(|
LtP
TMatchLSMatchLH +
+=
5 Algorithm Implementation 
According to the definition of BAM, the first se-
lected anchor will divide the whole bilingual texts 
into two parts.  We stipulated that the sentences in 
the upper part of source text cannot match any sen-
tence in the nether part of target text. As shown in 
Fig 5, after the first alignment anchors were se-
lected, the second candidate anchors must be se-
lected in the first quadrant or the third quadrant 
and exclusive from the boundary. It is obvious that 
if the candidate anchors exist in the second quad-
rant or fourth quadrant, the cross alignment will 
happen. For example, if the (i, j) is the first se-
lected alignment anchor, and the (i-1, j+1) is the 
second selected alignment anchor, the cross align-
ment appears. We can limit the anchors selection 
field to prevent the cross-alignment errors. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
In addition, in order to resolve the problem that 
the first sentence pair is not a (1:1) sentence bead, 
we use a virtual sentence length as the origin 
alignment sentence bead when we initialize the 
alignment process. 
The implementation of alignment algorithm is 
described as followed: 
1) Load the bilingual text and English-Chinese 
dictionary; 
2) Identify the English and Chinese sentences 
boundaries and number each sentence; 
3) Default the last sentence pair to be aligned 
and calculate every sentence pair?s alignment value; 
4) Search for sentence pair that is corresponding 
to the smallest alignment function value; 
5) If the smallest alignment function value is 
less than the alignment threshold and the go to step 
6), and if the smallest value is equal to or more 
than the threshold, then go to step 7); 
6) If the similarity of the sentence pair is more 
than a certain threshold, the sentence pair will be-
come an alignment anchor and divide the bilingual 
text into two parts respectively, then limit the 
search field of the next candidate anchors and go to 
the step 4) 
7) Output the aligned texts, and go to the end. 
6 Results and Discussion 
We use the real bilingual texts of the seven-
teenth chapter in the literary masterpiece ?Wuther-
ing Heights? as our test data. The basic 
information of the data is shown in the table 1. 
 English text size 38.1K 
Chinese text size  25.1K 
English sentence number 273 
Chinese sentence number 277 
Table 1 Basic information of the test data  
In order to verify the validity of our algorithm, 
we implement the classic length-based sentence 
alignment method using dynamic programming. 
The precision is defined:  
Precision = The correct aligned sentence pairs / 
All alignment sentence pairs in bilingual texts 
The comparison results are presented in table 2.  
Method Precision (%) 
Length-based 
alignment method  20.3 
Location-based 
alignment method 87.8 
Table 2 Comparison results between two methods 
Because the origin bilingual texts have no obvi-
ous aligned paragraph boundaries, the error exten-
sion phenomena happen easily in the length-based 
alignment method if the paragraphs are not strictly 
aligned correctly. Its alignment results are so 
weaker that it cannot be used. If we omit all of the 
origin paragraphs information, we merge all the 
paragraphs in the bilingual text into one larger 
paragraph respectively. The length-based align-
ment method rated the precision of 25.4%. This is 
mainly because the English and Chinese languages 
don?t belong to the same genre and have large dif-
ference between the language pairs. But our 
Figure 5 Anchors selection in Bilingual Texts 
j+1
second 
quadrant
first 
quadrant
third 
quadrant
fourth 
quadrant
0 m
n
i
j
i-1
method rated 129 (1:1) sentence pairs as alignment 
anchors which divide the bilingual text into aligned 
fragments. The length-based classic method was 
applied to these aligned fragments and got a high 
precision. Fig 6 shows 129 selected anchors distri-
bution which is in the same trend with all the (1:1) 
sentence beads. Their only difference is the sparse 
extent of the aligned pairs. 
0 50 100 150 200 250 300
0
50
100
150
200
250
300
 
En
gli
sh
 S
en
ten
ce
 N
um
be
r
Chinese Sentence Number
 A
 
Figure 6 Distribution of alignment anchors 
In order to evaluate the adaptability of our 
method, we select texts with different themes and 
styles as the test set. We merge two news bilingual 
texts and two novel texts. The data information is 
show in Table 3. 
Our method is applied on the fixed data and re-
ceives the precision rating of 86.9%. The result 
shows that this alignment method is theme inde-
pendent.  
English text size 63.9K  
Chinese text size  41.5K  
English sentence number 510 
Chinese sentence number 526 
 Table 3 Basic information of the fixed test data 
 (Haruno and Yamazaki, 1996) tried to align 
short texts in structurally different languages, such 
as English and Japanese. In this paper the aligned 
language pairs of English and Chinese belongs to 
structurally different languages as well. Our 
method gets the highest precision in aligning short 
texts. A bilingual news text is selected to be test 
data. The result is shown in table 4. There are two 
aligned sentence error pairs which are induced by 
the lack the corresponding translation.  
English text size 5.6K  
Chinese text size  3.4K  
English sentence number 40 
Chinese sentence number 38 
Precision (%) 94.4 
Table 4 Alignment results of short test data 
It is difficult to attain large test set because do-
ing so need more manual work. We construct the 
test set by merging the aligned sentence pairs in 
the existing sentence aligned bilingual corpus into 
two files. Then the two translated files can be as 
test set. Here we merge 2000 aligned sentence 
pairs. The file information is as follows:  
English text size 200.3K  
Chinese text size  144.2K  
English sentence number 2069 
Chinese sentence number 2033 
Table 5 Basic information of the large test data 
From the table 4, it is evident that there are 
many different styles of sentence beads. The 
method is developed on this large test set and gets 
the precision of 90.5%. The reason of the slight 
precision increase is that the last test set is rela-
tively clean and the sentence length distribution 
relatively average. But overall, our method per-
forms very well to align the real bilingual texts. It 
shows the high robustness and is not related to the 
languages, text themes, text length. This method 
can resolve the alignment problem of the real text. 
7 Conclusion 
This paper proposed a new method for fully 
aligning real bilingual texts using sentence location 
information, described concretely in section 3 and 
4. The model was motivated by the observation 
that the location of a sentence pair with certain 
length is distributed in the whole text similarly. It 
uses the (1:1) sentence beads instead of the high 
frequency words as the candidate anchors. Local 
and global location characteristics of sentence pairs 
are involved to determine the probability which the 
sentence pair is an alignment anchors. 
Every sentence pair corresponds to an alignment 
value which is calculated according to the formal 
alignment function. Then the process of BAM is 
performed to get the alignment anchors. This 
alignment method can restrain the errors extension 
effectively in comparison to the traditional align-
ment method. Furthermore, it has shown strong 
robustness, even if when it meets ill-quality texts 
that include incorrect sentences. To obtain further 
improvement in alignment accuracy sentence simi-
larity based on an English-Chinese dictionary was 
performed. It need not segment the Chinese sen-
tence. The whole procedure requires little cost to 
implement. 
Additionally, we can adjust the alignment and 
similarity thresholds dynamically to get high preci-
sion alignment anchors, for example, applying the 
first test set, even if we get only 105 (1:1) sentence 
beads but the precision is 100%. We found that this 
method can perform the function of paragraph 
alignment very well and ensure simultaneous the 
alignment precision.  
Of these pairs about half of total number of (1:1) 
sentence beads can be even extracted from the bi-
lingual text directly to build a large scale bilingual 
corpus if the original bilingual text is abundant. 
And the rest bilingual text can be used as spare 
resource. Now, we have obtained about 500,000 
English-Chinese aligned sentence pairs with high 
quality. 
In the future, we hope to do further alignment on 
the basis of current work and extend the method to 
align other language pairs. 
References 
Wu, DeKai. 1994. Aligning a parallel English-
Chinese corpus statistically with lexical criteria. 
In Proceedings of the 32nd Annual Conference 
of the Association for Computational Linguistics, 
80--87, Las Cruces, New Mexico 
Simard, M., Foster, G., and Isabelle, P. 1992. Us-
ing Cognates to Align Sentences in Bilingual 
Corpora.Fourth International Conference on 
Theoretical and Methodological Issues in Ma-
chine Translation (TMI-92), Montreal, Canada 
Brown, P., Lai, J. and Mercer, R. 1991. Aligning 
Sentences in Parallel Corpora. ACL-91 
Fung Pascale and Kathleen Mckeown. 1994. Align-
ing noisy parallel corpora across language 
groups: Word pair feature matching by dynamic 
time warping. In AMTA-94, Association for 
Machine Translation in the Americas, 81--88, 
Columbia, Maryland 
Wang Bin, Liu Qin, Zhang Xiang. 2000. Auto-
matic Chinese-English Paragraph Segmentation 
and Alignment. Journal of Software, 
11(11):1547-1553 (Chinese) 
Church, Kenneth W. 1993. Char_align: A Pro-
gram for Aligning Parallel Texts at the Charac-
ter Level. Proceedings of ACL-93, Columbus 
OH  
Chen, Stanley. 1993. Aligning Sentences in Bilin-
gual Corpora Using Lexical Information. In Pro-
ceedings of the 31st Annual Meeting of the 
Association for Computational Linguistics 
(ACL-1993) 
Gale, W.A. Church, K.W. 1993. A Program for 
Aligning Sentences in Bilingual Corpora. Com-
putational Linguistics, 19(2): 75-102 
Haruno, Masahiko & Takefumi Yamazaki (1996), 
High-performance bilingual text alignment using 
statistical and dictionary information, In Pro-
ceedings of ACL '96, Santa Cruz, California, 
USA, pp. 131-138 
M. Kay & M. Roscheisen. 1993. Text-Translation 
Alignment. Computational Linguistics 19:1 
 
Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1591?1601,
October 25-29, 2014, Doha, Qatar.
c
?2014 Association for Computational Linguistics
Knowledge Graph and Text Jointly Embedding
Zhen Wang
??
, Jianwen Zhang
?
, Jianlin Feng
?
, Zheng Chen
?
?
{v-zw,jiazhan,zhengc}@microsoft.com
?
{wangzh56@mail2,fengjlin@mail}.sysu.edu.cn
?
Microsoft Research
?
Sun Yat-sen University
Abstract
We examine the embedding approach to
reason new relational facts from a large-
scale knowledge graph and a text corpus.
We propose a novel method of jointly em-
bedding entities and words into the same
continuous vector space. The embedding
process attempts to preserve the relations
between entities in the knowledge graph
and the concurrences of words in the text
corpus. Entity names and Wikipedia an-
chors are utilized to align the embeddings
of entities and words in the same space.
Large scale experiments on Freebase
and a Wikipedia/NY Times corpus show
that jointly embedding brings promising
improvement in the accuracy of predicting
facts, compared to separately embedding
knowledge graphs and text. Particularly,
jointly embedding enables the prediction
of facts containing entities out of the
knowledge graph, which cannot be han-
dled by previous embedding methods. At
the same time, concerning the quality of
the word embeddings, experiments on the
analogical reasoning task show that jointly
embedding is comparable to or slightly
better than word2vec (Skip-Gram).
1 Introduction
Knowledge graphs such as Freebase (Bollacker et
al., 2008) and WordNet (Miller, 1995) have be-
come important resources for many AI & NLP ap-
plications such as Q & A. Generally, a knowledge
graph is a collection of relational facts that are of-
ten represented in the form of a triplet (head en-
tity, relation, tail entity), e.g., ?(Obama, Born-in,
Honolulu)?. An urgent issue for knowledge graph-
s is the coverage, e.g., even the largest knowledge
graph of Freebase is still far from complete.
Recently, targeting knowledge graph comple-
tion, a promising paradigm of embedding was pro-
posed, which is able to reason new facts only from
the knowledge graph (Bordes et al., 2011; Bor-
des et al., 2013; Socher et al., 2013; Wang et al.,
2014). Generally, in this series of methods, each
entity is represented as a k-dimensional vector and
each relation is characterized by an operation in
<
k
so that a candidate fact can be asserted by sim-
ple vector operations. The embeddings are usually
learnt by minimizing a global loss function of all
the entities and relations in the knowledge graph.
Thus, the vector of an entity may encode global
information from the entire graph, and hence scor-
ing a candidate fact by designed vector operations
plays a similar role to long range ?reasoning? in
the graph. However, since this requires the vectors
of both entities to score a candidate fact, this type
of methods can only complete missing facts for
which both entities exist in the knowledge graph.
However, a missing fact often contains entities out
of the knowledge graph (called out-of-kb for short
in this paper), e.g., one or both entities are phras-
es appearing in web text but not included in the
knowledge graph yet. How to deal with these fact-
s is a significant obstacle to widely applying the
embedding paradigm.
In addition to knowledge embedding, anoth-
er interesting approach is the word embedding
method word2vec (Mikolov et al., 2013b), which
shows that learning word embeddings from an
unlabeled text corpus can make the vectors con-
necting the pairs of words of some certain
relation almost parallel, e.g., vec(?China?) ?
vec(?Beijing?) ? vec(?Japan?) ? vec(?Tokyo?).
However, it does not know the exact relation be-
tween the pairs. Thus, it cannot be directly applied
to complete knowledge graphs.
The capabilities and limitations of knowledge
embedding and word embedding have inspired us
to design a mechanism to mosaic the knowledge
1591
graph and the ?word graph? together in a vector
space so that we can score any candidate relation-
al facts between entities and words
1
. Therefore,
we propose a novel method to jointly embed enti-
ties and words into the same vector space. In our
solution, we define a coherent probabilistic model
for both knowledge and text, which is composed
of three components: the knowledge model, text
model, and alignment model. Both the knowledge
model and text model use the same core transla-
tion assumption for the fact modeling: a candidate
fact (h, r, t) is scored based on ?h + r ? t?. The
only difference is, in the knowledge model the re-
lation r is explicitly supervised and the goal is to
fit the fact triplets, while in the text model we as-
sume any pair of words h and t that concur in some
text windows are of certain relation r but r is a hid-
den variable, and the goal is to fit the concurring
pairs of words. The alignment model guarantees
the embeddings of entities and words/phrases lie
in the same space and impels the two models to en-
hance each other. Two mechanisms of alignment
are introduced in this paper: utilizing names of en-
tities and utilizing Wikipedia anchors. This way of
jointly embedding knowledge and text can be con-
sidered to be semi-supervised knowledge embed-
ding: the knowledge graph provides explicit su-
pervision of facts while the text corpus provides
much more ?relation-unlabeled? pairs of words.
We conduct extensive large scale experiments
on Freebase and Wikipedia corpus, which show
jointly embedding brings promising improve-
ments to the accuracy of predicting facts, com-
pared to separately embedding the knowledge
graph and the text corpus, respectively. Particu-
larly, jointly embedding enables the prediction of
a candidate fact with out-of-kb entities, which can
not be handled by any existing embedding meth-
ods. We also use embeddings to provide a prior
score to help fact extraction on the benchmark da-
ta set of Freebase+NYTimes and also observe very
promising improvements. Meanwhile, concerning
the quality of word embeddings, experiments on
the analogical reasoning task show that jointly em-
bedding is comparable to or slightly better than
word2vec (Skip-Gram).
1
We do not distinguish between ?words? and ?phrases?,
i.e., ?words? means ?words/phrases?.
2 Related Work
Knowledge Embedding. A knowledge graph is
embedded into a low-dimensional continuous vec-
tor space while certain properties of it are pre-
served (Bordes et al., 2011; Bordes et al., 2013;
Socher et al., 2013; Chang et al., 2013; Wang et
al., 2014). Generally, each entity is represented
as a point in that space while each relation is inter-
preted as an operation over entity embeddings. For
instance, TransE (Bordes et al., 2013) interprets a
relation as a translation from the head entity to the
tail entity. The embedding representations are usu-
ally learnt by minimizing a global loss function in-
volving all entities and relations so that each entity
embedding encodes both local and global connec-
tivity patterns of the original graph. Thus, we can
reason new facts from learnt embeddings.
Word Embedding. Generally, word embeddings
are learned from a given text corpus without su-
pervision by predicting the context of each word
or predicting the current word given its contex-
t (Bengio et al., 2003; Collobert et al., 2011;
Mikolov et al., 2013a; Mikolov et al., 2013b). Al-
though relations between words are not explicitly
modeled, continuous bag-of-words (CBOW) and
Skip-gram (Mikolov et al., 2013a; Mikolov et al.,
2013b) learn word embeddings capturing many
syntactic and semantic relations between words
where a relation is also represented as the trans-
lation between word embeddings.
Relational Facts Extraction. Another pivotal
channel for knowledge graph completion is ex-
tracting relational facts from external sources such
as free text (Mintz et al., 2009; Riedel et al., 2010;
Hoffmann et al., 2011; Surdeanu et al., 2012;
Zhang et al., 2013; Fan et al., 2014). This se-
ries of methods focuses on identifying local text
patterns that express a certain relation and making
predictions based on them. However, they have
not fully utilized the evidences from a knowledge
graph, e.g., knowledge embedding is able to rea-
son new facts without any external sources. Ac-
tually, knowledge embedding is very complemen-
tary to traditional extraction methods, which was
first confirmed by (Weston et al., 2013). To es-
timate the plausibility of a candidate fact, they
added scores from embeddings to scores from an
extractor, which showed significant improvemen-
t. However, as pointed out in the introduction,
their knowledge embedding method cannot pre-
dict facts involving out-of-kb entities.
1592
3 Jointly Embedding Knowledge and
Text
We will first describe the notation used in this pa-
per. A knowledge graph ? is a set of triplets in
the form (h, r, t), h, t ? E and r ? R where E is
the entity vocabulary and R is a collection of pre-
defined relations. We use bold letters h, r, t to de-
note the corresponding embedding representation-
s of h, r, t. A text corpus is a sequence of words
drawn from the word vocabulary V . Note that we
perform some preprocessing to detect phrases in
the text and the vocabulary here already includes
the phrases. For simplicity?s sake, without spe-
cial explanation, when we say ?word(s)?, it means
?word(s)/phrase(s)?. Since we consider triplets in-
volving not only entities but also words, we denote
I = E ?V . Additionally, we denote anchors byA.
3.1 Modeling
Our model is composed of three components:
the knowledge model, text model, and alignment
model.
Before defining the component models, we first
define the element model for a fact triplet. In-
spired by TransE, we also represent a relation r
as a vector r ? <
k
and score a fact triplet (h, r, t)
by z(h, r, t) = b ?
1
2
?h + r ? t?
2
where b is a
constant for bias designated for adjusting the scale
for better numerical stability and b = 7 is a sensi-
ble choice. z(h, r, t) is expected to be large if the
triplet is true. Based on the same element model of
fact, we define the component models as follows.
3.1.1 Knowledge Model
We define the following conditional probability of
a fact (h, r, t) in a knowledge graph:
Pr(h|r, t) =
exp{z(h, r, t)}
?
?
h?I
exp{z(
?
h, r, t)}
(1)
and we have named our model pTransE (Proba-
bilistic TransE) to show respect to TransE. We also
define Pr(r|h, t) and Pr(t|h, r) in the same way
by choosing corresponding normalization terms
respectively. We define the likelihood of observ-
ing a fact triplet as:
L
f
(h, r, t) = log Pr(h|r, t)+ log Pr(t|h, r)
+ log Pr(r|h, t)
(2)
The goal of the knowledge model is to maximize
the conditional likelihoods of existing fact triplets
in the knowledge graph:
L
K
=
?
(h,r,t)??
L
f
(h, r, t) (3)
3.1.2 Text Model
We propose the following key assumption for
modeling text, which connects word embedding
and knowledge embedding: there are relations
between words although we do not know what
they are.
Relational Concurrence Assumption. If two
words w and v concur in some context, e.g., a win-
dow of text, then there is a relation r
wv
between
the two words. That is, we can state the triplet of
(w, r
wv
, v) is a fact.
We define the conditional probability
Pr(w|r
wv
, v) following the same formulation
of Eq.(1) to model why two words concur in some
context. In contrast to knowledge embedding,
here r
wv
is a hidden variable rather than explicitly
supervised.
The challenge is to deal with the hidden variable
r
wv
. Obviously, without any more assumption-
s, the number of distinct r
wv
is around |V| ?
?
N ,
where
?
N is the average number of unique word-
s concurred with each word. This number is ex-
tremely large. Thus it is almost impossible to esti-
mate a vector for each r
wv
. And the problem is ac-
tually ill-posed. We need to constrain the freedom
degree of r
wv
. Here we use auxiliary variables to
reduce the size of variables we need to estimate:
let w
?
= w + r
wv
, then
z(w, r
wv
,v) , z(w
?
,v) = b?
1
2
?w
?
?v?
2
(4)
and
Pr(w|r
wv
, v) , Pr(w|v) =
exp{z(w
?
,v)}
?
w??V
exp{z(w?
?
,v)}
(5)
In this way we need to estimate vectors w and w
?
for each word w, and a total of 2? |V| vectors.
The goal of the text model is to maximize the
likelihood of the concurrences of pairs of words in
text windows:
L
T
=
?
(w,v)?C
n
wv
log Pr(w|v). (6)
In the above equation, C is all the distinct pairs of
words concurring in text windows of a fixed size.
And n
wv
is the number of concurrences of the pair
(w, v). Interestingly, as explained in Sec.(3.3),
this text model is almost equivalent to Skip-Gram.
1593
3.1.3 Alignment Model
If we only have the knowledge model and text
model, the entity embeddings and word embed-
dings will be in different spaces and any comput-
ing between them is meaningless. Thus we need
mechanisms to align the two spaces into the same
one. We propose two mechanisms in this paper: u-
tilizing Wikipedia anchors, and utilizing names of
entities.
Alignment by Wikipedia Anchors. This mod-
el is based on the connection between Wikipedia
and Freebase: for most Wikipedia (English) pages,
there is an unique corresponding entity in Free-
base. As a result, for most of the anchors in
Wikipedia, each of which refers to a Wikipedi-
a page, we know that the surface phrase v of an
anchor actually refers to the Freebase entity e
v
.
Thus, we define a likelihood for this part of an-
chors as Eq.(6) but replace the word pair (w, v)
with the word-entity pair (w, e
v
), i.e., using the
corresponding entity e
v
rather than the surface
word v in Eq.(5):
L
AA
=
?
(w,v)?C,v?A
log Pr(w|e
v
) (7)
where A denotes the set of anchors.
In addition to Wikipedia anchors, we can also
use an entity linking system with satisfactory per-
formance to produce the pseudo anchors.
Alignment by Names of Entities. Another way
is to use the names of entities. For a fact triplet
(h, r, t) ? ?, if h has a namew
h
andw
h
? V , then
we will generate a new triplet of (w
h
, r, t) and add
it to the graph. Similarly, we also add (h, r, w
t
)
and (w
h
, r, w
t
) into the graph if the names exist
and belong to the word vocabulary. We call this
sub-graph containing names the name graph and
define a likelihood for the name graph by observ-
ing its triplets:
L
AN
=
?
(h,r,t)??
I
[w
h
?V ?w
t
?V]
?L
f
(w
h
, r, w
t
)+
I
[w
h
?V]
? L
f
(w
h
, r, t) + I
[w
t
?V]
? L
f
(h, r, w
t
)
(8)
Both alignment models have advantages and
disadvantages. Alignment by names of entities is
straightforward and does not rely on additional da-
ta sources. The number of triplets generated by the
names is also large and can significantly change
the results. However, this model is risky. On the
one hand, the name of an entity is ambiguous be-
cause different entities sometimes have the same
name so that the name graph may contaminate the
knowledge embedding. On the other hand, an en-
tity often has several different aliases when men-
tioned in the text but we do not have the complete
set, which will break the semantic balance of word
embedding. For example, for the entity Apple In-
c., suppose we only have the standard name ?Ap-
ple Inc.? but do not have the alias ?apple?. And for
the entity Apple that is fruit, suppose we have the
name ?apple? included in the name graph. Then
the vector of the word ?apple? will be biased to
the concept of fruit rather than the company. But if
no name graph intervenes, the unsupervised word
embedding is able to learn a vector that is closer to
the concept of the company due to the polarities.
Alignment by anchors relies on the additional data
source of Wikipedia anchors. Moreover, the num-
ber of matched Wikipedia anchors (?40M) is rela-
tively small compared to the total number of word
pairs (?2.0B in Wikipedia) and hence the contri-
bution is limited. However, the advantage is that
the quality of the data is very high and there are no
ambiguity/completeness issues.
Considering the above three component models
together, the likelihood we maximize is:
L = L
K
+ L
T
+ L
A
(9)
where L
A
could be L
AA
or L
AN
or L
AA
+ L
AN
.
3.2 Training
3.2.1 Approximation to the Normalizers
It is difficult to directly compute the normalizers in
Pr(h|r, t) (or Pr(t|h, r), Pr(r|h, t)) and Pr(w|v)
as the normalizers sum over |I| or |V| terms where
both |I| and |V| reach tens of millions. To pre-
vent having to exactly calculate the normalizer-
s, we use negative sampling (NEG) (Mikolov et
al., 2013b) to transform the original objective, i.e.,
Eq.(9) to a simple objective of the binary classifi-
cation problem?differentiating the observed data
from noise.
First, we define: (i) the probability of a given
triplet (h, r, t) to be true (D = 1); and (ii) the
probability of a given word pair (w, v) to co-occur
(D = 1):
Pr(D = 1|h, r, t) = ?(z(h, r, t)) (10)
Pr(D = 1|w, v) = ?(z(w
?
,v)) (11)
where ?(x) =
1
1+exp{?x}
and D ? {0, 1}.
1594
Instead of maximizing log Pr(h|r, t) in Eq.(2),
we maximize:
log Pr(1|h, r, t)
+
c
?
i=1
E
?
h
i
?Pr
neg
(
?
h
i
)
[Pr(0|
?
h
i
, r, t)]
(12)
where c is the number of negative examples to
be discriminated for each positive example. NEG
guarantees that maximizing Eq.(12) can approxi-
mately maximize log Pr(h|r, t). Thus, we also re-
place log Pr(r|h, t), log Pr(t|r, h) in Eq.(2), and
log Pr(w|v) in Eq.(6) in the same way by choosing
corresponding negative distributions respectively.
As a result, the objectives of both the knowledge
model L
K
(Eq.(3)) and text model L
T
(Eq.(6)) are
free from cumbersome normalizers.
3.2.2 Optimization
We use stochastic gradient descent (SGD) to max-
imize the simplified objectives.
Knowledge model. ? is randomly tra-
versed multiple times. When a positive example
(h, r, t) ? ? is considered, to maximize (12), we
construct c negative triplets by sampling elements
from an uniform distribution over I and replacing
the head of (h, r, t). The transformed objective of
log Pr(r|h, t) is maximized in the same manner,
but by sampling from a uniform distribution over
R and corrupting the relation of (h, r, t). After a
mini-batch, computed gradients are used to update
the involved embeddings.
Text model. The text corpus is traversed one or
more times. When current word v and a context
word w are considered, c words are sampled from
the unigram distribution raised to the 3/4rd power
and regarded as negative examples (w?, v) that are
never concurrent. Then we compute and update
the related gradients.
Alignment model. L
AA
and L
AN
are absorbed
by the text model and knowledge model respec-
tively, since anchors are considered to predict con-
text given an entity and the name graph are homo-
geneous to the original knowledge graph.
Joint. All three component objectives are si-
multaneously optimized. To deal with large-scale
data, we implement a multi-thread version with
shared memory. Each thread is in charge of a por-
tion of the data (either knowledge or text corpus),
and traverses through them, calculates gradients
and commits the update to the global model and
is stored in a block of shared memory. For the
Table 1: Data: triplets used in our experiments.
#R #E #Triplet (Train/Valid/Test)
4,490 43,793,608 123,062,855 40,528,963 40,528,963
sake of efficiency, no lock is used on the shared
memory.
3.3 Connections to Related Models
TransE. (Bordes et al., 2013) proposed to mod-
el a relation r as a translation vector r ? <
k
which is expected to connect h and t with low
error if (h, r, t) ? ?. We also follow it. How-
ever, TransE uses a margin based ranking loss
{?h+r?t?
2
+???
?
h+r?
?
t?
2
}
+
. It is not a proba-
bilistic model and hence it needs to restrict the nor-
m of either entity embedding and/or relation em-
bedding. Bordes et al. (2013) intuitively addresses
this problem by simply normalizing the entity em-
beddings to the unit sphere before computing gra-
dients at each iteration. We define pTransE as a
probabilistic model, which doesn?t need addition-
al constraints on the norms of embeddings of en-
tities/words/relations, and thus eliminates the nor-
malization operations.
Skip-gram. (Mikolov et al., 2013a; Mikolov et al.,
2013b) defines the probability of the concurrence
of two words in a window as:
Pr(w|v) =
exp{w
?T
v}
?
w??V
exp{w?
?T
v}
(13)
which is based on the inner product, while our text
model (Eqs. (4), (5)) is based on distance. If we
constrain ?w? = 1 for each w, then w
?T
v =
1 ?
1
2
?w
?
? v?
2
. It is easy to see that our text
model is equivalent to Skip-gram in this case. Our
distance-based text model is directly derived from
the triplet fact model, which clearly explains why
it is able to make the pairs of entities of a certain
relation parallel in the vector space.
4 Experiments
We empirically evaluate and compare related mod-
els with regards to three tasks: triplet classifica-
tion (Socher et al., 2013), improving relation ex-
traction (Weston et al., 2013), and the analogi-
cal reasoning task (Mikolov et al., 2013a). The
related models include: for knowledge embed-
ding alone, TransE (Bordes et al., 2013), pTransE
(proposed in this paper); for word embedding
alone, Skip-gram (Mikolov et al., 2013b); for both
1595
Table 2: Data: the number of e ? e, w ? e, e ?
w, w ? w triplets/analogies where w represents
the out-of-kb entity, which is regarded as word and
replaced by its corresponding entity name.
Type
#Triplet (Valid/Test)
#Analogy
e? e
12,305,200 12,305,200
71,441
w ? e
3,655,164 3,654,404
70,878
e? w
3,643,914 3,642,978
70,442
w ? w
460,762 451,381
40,980
knowledge and text, we use ?respectively? to re-
fer to the embeddings learnt by TransE/pTransE
and Skip-gram, respectively, ?jointly? to refer to
our jointly embedding method, in which ?anchor?
and ?name? refer to ?Alignment by Wikipedia An-
chors? and ?Alignment by Names of Entities?, re-
spectively.
4.1 Data
To learn the embedding representations of entities
and words, we use a knowledge graph, a text cor-
pus, and some connections between them.
Knowledge. We adopt Freebase as our knowl-
edge graph. First, we remove the user profiles,
version control, and meta data, leaving 52,124,755
entities, 4,490 relations, and 204,120,782 triplet-
s. We call this graph main facts. Then we held
out 8,331,147 entities from main facts and regard
them as out-of-kb entities. Under such a setting,
from main facts, we held out all the triplets in-
volving out-of-kb entities, as well as 24,610,400
triplets that don?t contain out-of-kb entities. Held-
out triplets are used for validation and testing; the
remaining triplets are used for training. See Table
1 for the statistics.
We regard out-of-kb entities as words/phrases
and thus divide the held-out triplets into four type-
s: no out-of-kb entity (e?e), the head is out-of-kb
entity but the tail is not (w ? e), the tail is out-of-
kb entity but the head is not (e? w), and both the
head and tail are out-of-kb entities (w ? w). Then
we replace the out-of-kb entities among the held-
out triplets by their corresponding entity names.
The mapping from a Freebase entity identifier to
its name is done through the Freebase predicate?
?/type/object/name?. Since some entity names
are not present in our vocabulary V , we remove
triplets involving these names (see Table 2). In
such a way, besides the missing edges between ex-
isting entities, the related models can be evaluated
on triplets involving words/phrases as their head
Table 3: Triplet Classification: comparison be-
tween TransE and pTransE over e? e triplets.
Method Accuracy (%) Area under PR curve
TransE 93.1 0.86
pTransE 93.4 0.97
and/or tail.
Text. We adopt the Wikipedia (English) cor-
pus. After removing pages designated for nav-
igation, disambiguation, or discussion purpos-
es, there are 3,469,024 articles left. We ap-
ply sentence segmentation, tokenization, Part-of-
Speech (POS) tagging, and named entity recog-
nition (NER) to these articles using Apache
OpenNLP package
2
. Then we conduct some sim-
ple chunking to acquire phrases: if several con-
secutive tokens are identically tagged as ?Loca-
tion?/?Person?/?Organization?, or covered by an
anchor, we combine them as a chunk. After the
preprocessing, our text corpus contain 73,675,188
sentences consisting of 1,522,291,723 chunks. A-
mong them, there are around 20 millions distinct
chunks, including words and phrases. We filter out
punctuation and rare words/phrases that occur less
than three times in the text corpus, reducing |V| to
5,240,003.
Alignment. One of our alignment models need-
s Wikipedia anchors. There are around 45 million
such anchors in our text corpus and 41,970,548 of
them refer to entities in E . Another mechanism u-
tilizes the name graph constructed through names
of entities. Specifically, for each training triplet
(h, r, t), suppose h and t have entity names w
h
and w
t
, respectively and w
h
, w
t
? V , the train-
ing triplet contributes (w
h
, r, w
t
), (w
h
, r, t), and
(h, r, w
t
) to the name graph. There are 81,753,310
triplets in our name graphs. Note that there is no
overlapping between the name graph and held-out
triplets of e? w, w ? e, and w ? w types.
4.2 Triplet Classification
This task judges whether a triplet (h, r, t) is true
or false, i.e., binary classification of a triplet.
Evaluation protocol. Following the same pro-
tocol in NTN (Socher et al., 2013), for each true
triplet, we construct a false triplet for it by ran-
domly sampling an element from I to corrupt its
head or tail. Since |E| is significantly larger than
|V| in our data, sampling from a uniform distri-
2
https://opennlp.apache.org
1596
Table 4: Triplet classification: accuracy (%) over various types of triplets.
Type e? e w ? e e? w w?w all
respectively 93.4 52.1 51.4 71.0 77.5
jointly (anchor) 94.4 67.0 66.7 79.8 81.9
jointly (name) 94.5 80.5 80.0 89.0 87.7
jointly (anchor+name) 95.0 82.0 81.5 90.0 88.8
bution over I will let triplets involving no word
dominate the false triplets. To avoid that, when we
corrupt the head of (h, r, t), if h ? E , h
?
is sam-
pled from E while if h ? V , h
?
is sampled from V .
The same rule is applied when we corrupt the tail
of (h, r, t). In this way, for each of the four types
of triplets, we ensure the number of true triplets is
equal to that of false ones.
To classify a triplet (h, r, t), we first use the con-
sidered methods to score it. TransE scores it by
?|h + r ? t|. Our models score it by Pr(D =
1|h, r, t) (see Eq.(10)). Then the considered meth-
ods label a triplet (h, r, t) as true if its score is
larger than the relation-specific threshold of r, as
false otherwise. The relation-specific thresholds
are chosen to maximize the classification accura-
cy over the validation set.
We report the classification accuracy. Addition-
ally, we rank all the testing triplets by their scores
in descending order. Then we draw a precision-
recall (PR) curve based on this ranking and report
the area under the PR curve.
Implementation. We implement TransE (Bor-
des et al., 2013), Skip-gram (Mikolov et al.,
2013a), and our models.
First, we train TransE and pTransE over our
training triplets with embedding dimension k
in {50, 100, 150}. Adhering to (Bordes et al.,
2013), we use the fixed learning rate ? in
{0.005, 0.01, 0.05} for TransE during its 300 e-
pochs. For pTransE, we use the number of neg-
ative examples per positive example c among
{5, 10}, the learning rate ? among {0.01, 0.025}
where ? decreases along with its 40 epochs. The
optimal configurations of TransE are: k = 100,
? = 0.01. The optimal configurations of pTransE
are: k = 100, c = 10, and ? = 0.025.
Then we train Skip-gram with the embedding
dimension k in {50, 100, 150}, the max skip-range
s in {5, 10}, the number of negative examples per
positive example c in {5, 10}, and learning rate
? = 0.025 linearly decreasing along with the 6
epochs over our text corpus. Popular words whose
frequencies are larger than 10
?5
are subsampled
according to the trick proposed in (Mikolov et al.,
2013b). The optimal configurations of Skip-gram
are: k = 150, s = 5, and c = 10.
Combining entity embeddings and word em-
beddings learnt by pTransE and Skip-gram respec-
tively, ?respectively? model can score all types of
held-out triplets. For our jointly embedding mod-
el, we consider various alignment mechanisms and
use equal numbers of threads for knowledge mod-
el and text model. The best configurations of
?jointly? model are: k = 150, s = 5, c = 10, and
? = 0.025 which linearly decreases along with the
6 epochs of traversing text corpus.
Results. We first illustrate the comparison be-
tween TransE and pTransE over e? e type triplet-
s in Table 3. Observing the scores assigned to
true triplets by TransE, we notice that triplets of
popular relations generally have larger scores than
those of rare relations. In contrast, pTransE, as
a probabilistic model, assigns comparable scores
to true triplets of both popular and rare relations.
When we use a threshold to separate true triplets
from false triplets of the same relation, there is no
obvious difference between the two models. How-
ever, when all triplets are ranked together, assign-
ing scores in a more uniform scale is definitely an
advantage. Thus, the contradiction stems from the
different training strategies of the two models and
the consideration of relation-specific thresholds.
Classification accuracies over various types of
held-out triplets are presented in Table 4. The
?jointly? model outperforms the ?respectively?
model no matter which alignment mechanism(s)
are used. Actually, for the ?respectively? model,
there is no interaction between entity embeddings
and word embeddings during training and thus it-
s predictions, over triplets that involve both enti-
ty and word at the same time, are not much bet-
ter than random guessing. It is also a natural re-
sult that alignment by names is more effective than
alignment by anchors. The number of anchors is
much smaller than the number of overall chunks
in our text corpus. In addition, the number of en-
tities mentioned by anchors is very limited com-
1597
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.75
0.80
0.85
0.90
0.95
1.00
1.05
p
r
e
c
i
s
i
o
n
Mintz (0.864752658197)
Mintz+Jointly (0.891043673778)
Mintz+Knowledge (0.917260610051)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
p
r
e
c
i
s
i
o
n
Mintz (0.512956668019)
Mintz+Jointly (0.636313453126)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.4
0.5
0.6
0.7
0.8
0.9
1.0
p
r
e
c
i
s
i
o
n
Mintz (0.662641417434)
Mintz+Jointly (0.695062505333)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.00
0.05
0.10
0.15
0.20
0.25
0.30
0.35
p
r
e
c
i
s
i
o
n
Mintz (0.0914506877334)
Mintz+Jointly (0.0993184342972)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
p
r
e
c
i
s
i
o
n
Mintz (0.363969399646)
Mintz+Jointly (0.480909766665)
Mintz+Knowledge (0.418875519101)
Figure 1: Improving Relation Extraction: PR curves of Mintz alone or combined with knowledge
(pTransE) / jointly model over (a) e? e, (b) w ? e, (c) e? w, (d) w ? w, and (e) all triplets.
pared with |E|. Thus, interactions brought in by
anchors are not as significant as that of the name
graph.
4.3 Improving Relation Extraction
It has been shown that embedding models are very
complementary to extractors (Weston et al., 2013).
However, some entities detected from text are out-
of-kb entities. In such a case, triplets involving
these entities cannot be handled by any existing
knowledge embedding method, but our jointly em-
bedding model can score them. As our model can
cover more candidate triplets provided by extrac-
tors, it is expected to provide more significant im-
provements to extractors than any other embed-
ding model. We confirm this point as follow.
Evaluation protocol. For relation extraction,
we use a public dataset?NYT+FB (Riedel et al.,
2010)
3
, which distantly labels the NYT corpus by
Freebase facts. We consider (Mintz et al., 2009)
and Sm2r (Weston et al., 2013) as our extractors
to provide candidate triplets as well as their plau-
sibilities estimated according to text features.
For embedding, we first held out triplets from
our training set that appear in the test set of
NYT+FB. Then we train TransE, pTransE and the
?jointly? model on the remaining training triplets
as well as on our text corpus. Then we use these
models to score each candidate triplet in the same
3
http://iesl.cs.umass.edu/riedel/ecml/
way as the previous triplet classification experi-
ment.
For combination, we first divide each candidate
triplet into one of these categories: e ? e, e ? w,
w ? e, w ? w, and ?out-of-vocabulary?. Be-
cause there is no embedding model that can score
triplets involving out-of-vocabulary word/phrase,
we just ignore these triplets.Please note that, for
our jointly embedding model, there are no ?out-
of-vocabulary? triplets if we include the NYT cor-
pus for training. We use the embedding models
to score candidate triplets and combine the scores
given by the embedding model with scores given
by the extractors. For each type e?e, e?w, w?e,
w?w and their union (i.e. all), we rank the candi-
date triplets by their revisited scores and draw PR
curve to observe which embedding method pro-
vides the most significant improvements to the ex-
tractors.
Implementation. For (Mintz et al., 2009), we
use the implementation in (Surdeanu et al., 2012)
4
.
We implement Sm2r by ourselves with the best hy-
perparameters introduced in (Weston et al., 2013).
For TransE, pTransE, and the ?jointly? model, we
use the same implementations, scoring schemes,
and optimal configurations as the triplet classifica-
tion experiment.
To combine extractors with embedding mod-
4
http://nlp.stanford.edu/software/
mimlre.shtml
1598
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.55
0.60
0.65
0.70
0.75
0.80
0.85
0.90
0.95
1.00
p
r
e
c
i
s
i
o
n
Sm2r (0.773014296476)
Sm2r+Jointly (0.858251870864)
Sm2r+Knowledge (0.858251870864)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.86
0.88
0.90
0.92
0.94
0.96
0.98
1.00
p
r
e
c
i
s
i
o
n
Sm2r (0.908752270146)
Sm2r+Jointly (0.966914103913)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.82
0.84
0.86
0.88
0.90
0.92
0.94
0.96
0.98
1.00
p
r
e
c
i
s
i
o
n
Sm2r (0.875810724647)
Sm2r+Jointly (0.966676169402)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
p
r
e
c
i
s
i
o
n
Sm2r (0.431460754321)
Sm2r+Jointly (0.536200901997)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.50
0.55
0.60
0.65
0.70
0.75
0.80
0.85
0.90
p
r
e
c
i
s
i
o
n
Sm2r (0.67446140565)
Sm2r+Jointly (0.802071230237)
Sm2r+Knowledge (0.697899016348)
Figure 2: Improving Relation Extraction: PR curves of Sm2r alone or combined with knowledge
(TransE) / jointly model over (a) e? e, (b) w ? e, (c) e? w, (d) w ? w, and (e) all triplets.
els, we consider two schemes. Since Mintz s-
cores candidate triplets in a probabilistic man-
ner, we linearly combine its scores with the s-
cores given by pTransE or the ?jointly? mod-
el: ? Pr
Mintz
+(1 ? ?) Pr
pTransE/Jointly
where ? is
enumerated from 0 to 1 with 0.025 as a search
step. On the other hand, neither Sm2r nor TransE
is a probabilistic model. Thus, we combine
Sm2r with TransE or the ?jointly? model ac-
cording to the scheme proposed in (Weston et
al., 2013) where for each candidate (h, r, t), if
?
r
?
6=r
?(Score(h, r, t) < Score(h, r
?
, t)) is less
than ? , we increase Score
Sm2r
(h, r, t) by p. We
search for the best ?, ? , and p on another dataset?
Wikipedia corpus distantly labeled by Freebase.
Result. We present the PR curves in Fig. (1,
2). Over candidate triplets provided by either
Mintz or Sm2r, the ?jointly? model is consis-
tently comparable with the ?knowledge? model
(TransE/pTransE) over e ? e triplets while it out-
performs the ?knowledge? model by a consider-
able margin over triplets of other types. These
results confirm the advantage of jointly embed-
ding and are actually straightforward results of our
triplet classification experiment because the only
difference is that the triplets here are provided by
the extractor.
Table 6: Phrases Analogical Reasoning Task.
Method Accuracy (%) Hits@10 (%)
Skip-gram 18.0 56.1
Jointly (anchor) 27.6 65.0
Jointly (name) 11.3 40.6
Jointly (anchor+name) 18.3 54.0
Table 7: Constructed Analogical Reasoning
Task.
Method Accuracy (%) Hits@10 (%)
Skip-gram 10.5 14.1
Jointly (anchor) 10.5 14.3
Jointly (name) 11.5 16.2
Jointly (anchor+name) 11.6 16.5
4.4 Analogical Reasoning Task
We compare our method with Skip-gram on this
task to observe and study the influences of both
knowledge embedding and alignment mechanisms
on the quality of word embeddings.
Evaluation protocol. We use the same pub-
lic datasets as in (Mikolov et al., 2013b): 19,544
word analogies
5
; 3,218 phrase analogies
6
. We al-
so construct analogies from our held-out triplet-
s (see Table 2) by first concatenating two entity
pairs of the same relation to form an analogy and
5
code.google.com/p/word2vec/source/
browse/trunk/questions-words.txt
6
code.google.com/p/word2vec/source/
browse/trunk/questions-phrases.txt
1599
Table 5: Words Analogical Reasoning Task.
Method Accuracy (%) Hits@10 (%)
Semantic Syntactic Total Semantic Syntactic Total
Skip-gram 71.4 69.0 70.0 90.4 89.3 89.8
Jointly (anchor) 75.3 68.3 71.2 91.5 88.9 89.9
Jointly (name) 54.5 54.2 59.0 75.8 86.5 82.1
Jointly (anchor+name) 56.5 65.7 61.9 78.1 87.6 83.6
then replacing the entities by corresponding entity
names, e.g., ?(Obama, Honolulu, David Beckham,
London)? where the relation is ?Born-in?.
Following (Mikolov et al., 2013b), we only con-
sider analogies that consist of the top-K most fre-
quent words/phrases in the vocabulary. For each
analogy denoted by (h
1
, t
1
, h
2
, t
2
), we enumer-
ate all the top-K most frequent words/phrases w
except for h
1
, t
1
, h
2
, and calculate the distance
(Cosine/Euclidean according to specific model)
between h
2
+ (t
1
? h
1
) and w. Ordering all
these words/phrases by their distances in ascend-
ing order, we obtain the rank of the correct an-
swer t
2
. Finally, we report Hits@10 (i.e., the pro-
portion of correct answers whose ranks are not
larger than 10) and accuracy (i.e., Hits@1). For
word analogies and constructed analogies, we set
K = 200, 000; while for phrase analogies, we set
K = 1, 000, 000 to recall sufficient analogies.
Implementation. For Skip-gram and the
?Jointly? (anchor/name/anchor+name) model, we
use the same implementations and optimal config-
urations as the triplet classification experiment.
Results. Jointly embedding using Wikipedi-
a anchors for alignment consistently outperforms
Skip-gram (Table 5, 6, 7) showing that the influ-
ence of knowledge embedding, injected into word
embedding through Wikipedia anchors, is benefi-
cial. The vector of an ambiguous word is often a
mixture of its several meanings but, in a specific
context, the word is disambiguated and refers to
a specific meaning. Using global word embedding
to predict words within a specific context may pol-
lute the embeddings of surrounding words. Align-
ment by anchors enables entity embeddings to al-
leviate the propagation of ambiguities and thus im-
proves the quality of word embeddings.
Using entity names for alignment hurts the per-
formance of analogies of words and phrases (Ta-
ble 5, 6). The main reason is that these analo-
gies are popular facts frequently mentioned in tex-
t while a name graph forces word embeddings to
satisfy both popular and rare facts. Another rea-
son stems from the versatility of mentioning an
entity. Consider ?(Japan, yen, Europe, euro)? for
example. Knowledge embedding is supposed to
give significant help to completing this analogy as
?/location/country/currency?? R. However, the
entity of Japanese currency is named ?Japanese
yen? rather than ?yen? and thus the explicit trans-
lation learnt from knowledge embedding is not di-
rectly imposed on the word embedding of ?yen?.
In contrast, using entity names for alignment im-
proves the performances on constructed analogies
(Table 7). Since there is a relation r ? R for
each constructed analogy (w
h
1
, w
t
1
, w
h
2
, w
t
2
), al-
though neither (w
h
1
, r, w
t
1
) nor (w
h
2
, r, w
t
2
) is
present in the name graph, other facts involving
these words act on the vectors of these words, in
the same manner of traditional knowledge embed-
ding.
Overall, any high-quality entity linking system
can be used to further improve the performance.
5 Conclusions
In this paper, we introduced a novel method of
jointly embedding knowledge graphs and a text
corpus so that entities and words/phrases are rep-
resented in the same vector space. In such a way,
our method can perform prediction on any can-
didate facts between entities/words/phrases, going
beyond previous knowledge embedding methods,
which can only predict facts whose entities exist
in knowledge graph. Extensive, large-scale exper-
iments show that the proposed method is very ef-
fective at reasoning new facts. In addition, we also
provides insights into word embedding, especially
on the capability of analogical reasoning. In this
aspect, we empirically observed some hints that
jointly embedding also helps word embedding.
References
Yoshua Bengio, R?ejean Ducharme, Pascal Vincent, and
Christian Jauvin. 2003. A neural probabilistic lan-
guage model. Journal of Machine Learning Re-
search, 3:1137?1155.
1600
Kurt Bollacker, Colin Evans, Praveen Paritosh, Tim S-
turge, and Jamie Taylor. 2008. Freebase: a collab-
oratively created graph database for structuring hu-
man knowledge. In Proceedings of the 2008 ACM
SIGMOD International Conference on Management
of Data, pages 1247?1250. ACM.
Antoine Bordes, Jason Weston, Ronan Collobert, and
Yoshua Bengio. 2011. Learning structured embed-
dings of knowledge bases. In Proceedings of the
Twenty-Fifth AAAI Conference on Artificial Intelli-
gence, pages 301?306.
Antoine Bordes, Nicolas Usunier, Alberto Garcia-
Duran, Jason Weston, and Oksana Yakhnenko.
2013. Translating embeddings for modeling multi-
relational data. In Advances in Neural Information
Processing Systems, pages 2787?2795.
Kai-Wei Chang, Wen-tau Yih, and Christopher Meek.
2013. Multi-relational latent semantic analysis. In
Proceedings of the 2013 Conference on Empirical
Methods in Natural Language Processing, pages
1602?1612, Seattle, Washington, USA, October.
Association for Computational Linguistics.
Ronan Collobert, Jason Weston, L?eon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. Journal of Machine Learning Research,
12:2493?2537.
Miao Fan, Deli Zhao, Qiang Zhou, Zhiyuan Liu,
Thomas Fang Zheng, and Edward Y. Chang. 2014.
Distant supervision for relation extraction with ma-
trix completion. In Proceedings of the 52nd Annual
Meeting of the Association for Computational Lin-
guistics (Volume 1: Long Papers), pages 839?849,
Baltimore, Maryland, June. Association for Compu-
tational Linguistics.
Raphael Hoffmann, Congle Zhang, Xiao Ling, Luke
Zettlemoyer, and Daniel S Weld. 2011. Knowledge-
based weak supervision for information extraction
of overlapping relations. In Proceedings of the 49th
Annual Meeting of the Association for Computa-
tional Linguistics: Human Language Technologies-
Volume 1, pages 541?550. Association for Compu-
tational Linguistics.
Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey
Dean. 2013a. Efficient estimation of word rep-
resentations in vector space. arXiv preprint arX-
iv:1301.3781.
Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013b. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in Neural Information Processing
Systems 26, pages 3111?3119.
George A Miller. 1995. Wordnet: a lexical
database for english. Communications of the ACM,
38(11):39?41.
Mike Mintz, Steven Bills, Rion Snow, and Dan Ju-
rafsky. 2009. Distant supervision for relation ex-
traction without labeled data. In Proceedings of the
Joint Conference of the 47th Annual Meeting of the
ACL and the 4th International Joint Conference on
Natural Language Processing of the AFNLP: Vol-
ume 2-Volume 2, pages 1003?1011. Association for
Computational Linguistics.
Sebastian Riedel, Limin Yao, and Andrew McCal-
lum. 2010. Modeling relations and their mention-
s without labeled text. In Machine Learning and
Knowledge Discovery in Databases, pages 148?163.
Springer.
Richard Socher, Danqi Chen, Christopher D Manning,
and Andrew Ng. 2013. Reasoning with neural ten-
sor networks for knowledge base completion. In Ad-
vances in Neural Information Processing Systems,
pages 926?934.
Mihai Surdeanu, Julie Tibshirani, Ramesh Nallapati,
and Christopher D Manning. 2012. Multi-instance
multi-label learning for relation extraction. In Pro-
ceedings of the 2012 Joint Conference on Empirical
Methods in Natural Language Processing and Com-
putational Natural Language Learning, pages 455?
465. Association for Computational Linguistics.
Zhen Wang, Jianwen Zhang, Jianlin Feng, and Zheng
Chen. 2014. Knowledge graph embedding by trans-
lating on hyperplanes. In Proceedings of the Twenty-
Eighth AAAI Conference on Artificial Intelligence,
pages 1112?1119.
Jason Weston, Antoine Bordes, Oksana Yakhnenko,
and Nicolas Usunier. 2013. Connecting language
and knowledge bases with embedding models for re-
lation extraction. In Proceedings of the 2013 Con-
ference on Empirical Methods in Natural Language
Processing, pages 1366?1371, Seattle, Washington,
USA, October. Association for Computational Lin-
guistics.
Xingxing Zhang, Jianwen Zhang, Junyu Zeng, Jun
Yan, Zheng Chen, and Zhifang Sui. 2013. Towards
accurate distant supervision for relational facts ex-
traction. In Proceedings of the 51st Annual Meet-
ing of the Association for Computational Linguistic-
s (Volume 2: Short Papers), pages 810?815, Sofi-
a, Bulgaria, August. Association for Computational
Linguistics.
1601
