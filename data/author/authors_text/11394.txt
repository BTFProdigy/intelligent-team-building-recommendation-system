Human Language Technologies: The 2009 Annual Conference of the North American Chapter of the ACL, pages 494?502,
Boulder, Colorado, June 2009. c?2009 Association for Computational Linguistics
For a few dollars less: Identifying review pages sans human labels
Luciano Barbosa
Dept. of Computer Science
University of Utah
Salt Lake City, UT 84112, USA.
lbarbosa@cs.utah.edu
Ravi Kumar Bo Pang Andrew Tomkins
Yahoo! Research
701 First Ave
Sunnyvale, CA 94089, USA.
{ravikumar,bopang,atomkins}@yahoo-inc.com
Abstract
We address the problem of large-scale auto-
matic detection of online reviews without us-
ing any human labels. We propose an efficient
method that combines two basic ideas: Build-
ing a classifier from a large number of noisy
examples and using the structure of the web-
site to enhance the performance of this classi-
fier. Experiments suggest that our method is
competitive against supervised learning meth-
ods that mandate expensive human effort.
1 Introduction
Shoppers are migrating to the web and online re-
views are playing a critical role in affecting their
shopping decisions, online and offline. According
to two surveys published by comScore (2007) and
Horrigan (2008), 81% of web users have done on-
line research on a product at least once. Among
readers of online reviews, more than 70% reported
that the reviews had a significant influence on their
purchases. Realizing this economic potential, search
engines have been scrambling to cater to such user
needs in innovative ways. For example, in response
to a product-related query, a search engine might
want to surface only review pages, perhaps via a ?fil-
ter by? option, to the user. More ambitiously, they
might want to dissect the reviews, segregate them
into novice and expert judgments, distill sentiments,
and present an aggregated ?wisdom of the crowds?
opinion to the user. Identifying review pages is the
indispensable enabler to fulfill any such ambition;
nonetheless, this problem does not seem to have
been addressed at web scale before.
Detecting review webpages in a few, review-only
websites is an easy, manually-doable task. A large
fraction of the interesting review content, however,
is present on pages outside such websites. This is
where the task becomes challenging. Review pages
might constitute a minority and can be buried in
a multitude of ways among non-review pages ?
for instance, the movie review pages in nytimes.
com, which are scattered among all news articles, or
the product review pages in amazon.com, which
are accessible from the product description page. An
automatic and scalable method to identify reviews
is thus a practical necessity for the next-generation
search engines. The problem is actually more gen-
eral than detecting reviews: it applies to detecting
any ?horizontal? category such as buying guides, fo-
rums, discussion boards, FAQs, etc.
Given the nature of these problems, it is tempt-
ing to use supervised classification. A formidable
barrier is the labeling task itself since human la-
bels need time and money. On the other hand, it
is easier to generate an enormous number of low-
quality labeled examples through purely automatic
methods. This prompts the question: Can we do re-
view detection by focusing just on the textual con-
tent of a large number of automatically obtained but
low-quality labeled examples, perhaps also utilizing
the site structure specific to each website? And how
will it compare to the best supervised classification
method? We address these questions in this paper.
Main contributions. We propose the first end-to-
end method that can operate at web scale to effi-
ciently detect review pages. Our method is based
on using simple URL-based clues to automatically
494
partition a large collection of webpages into two
noisy classes: One that consists mostly of review
webpages and another that consists of a mixture
of some review but predominantly non-review web-
pages (more details in Section 4.2).
We analyze the use of a naive Bayes classifier in
this noisy setting and present a simple algorithm for
review page classification. We further enhance the
performance of this classifier by incorporating infor-
mation about the structure of the website that is man-
ifested through the URLs of the webpages. We do
this by partitioning the website into clusters of web-
pages, where the clustering delicately balances the
information in the site-unaware labels provided by
the classifier in the previous step and the site struc-
ture encoded in the URL tokens; a decision tree is
used to accomplish this. Our classification method
for noisily-labeled examples and the use of site-
specific cues to improve upon a site-independent
classifier are general techniques that may be appli-
cable in other large-scale web analyses.
Experiments on 2000 hand-labeled webpages
from 40 websites of varying sizes show that besides
being computationally efficient, our human-label-
free method not only outperforms those based on
off-the-shelf subjectivity detection but also remains
competitive against the state-of-the-art supervised
text classification that relies on editorial labels.
2 Related work
The related work falls into roughly four categories:
Document- and sentence-level subjectivity detec-
tion, sentiment analysis in the context of reviews,
learning from noisy labeled examples, and exploit-
ing site structure for classification.
Given the subjective nature of reviews, document-
level subjectivity classification is closely related to
our work. There have been a number of approaches
proposed to address document-level subjectivity in
news articles, weblogs, etc. (Yu and Hatzivas-
siloglou, 2003; Wiebe et al, 2004; Finn and Kush-
merick, 2006; Ni et al, 2007; Stepinski and Mit-
tal, 2007). Ng et al (2006) experiment with review
identification for known domains using datasets with
clean labels (e.g., movie reviews vs. movie-related
non-reviews), a setting different from that of ours.
Pang and Lee (2008b) present a method on re-
ranking documents that are web search results for a
specific query (containing the word review) based
on the subjective/objective distinction. Given the na-
ture of the query, they implicitly detect reviews from
unknown sources. But their re-ranking algorithm
only applies to webpages known to be (roughly) re-
lated to the same narrow subject. Since the web-
pages in our datasets cover not only a diverse range
of websites but also a diverse range of topics, their
approach does not apply. To the best of our knowl-
edge, there has been no work on identifying review
pages at the scale and diversity we consider.
Subjectivity classification of within-document
items, such as terms, has been an active line of re-
search (Wiebe et al (2004) present a survey). Iden-
tifying subjective sentences in a document via off-
the-shelf packages is an alternative way of detect-
ing reviews without (additional) human annotations.
In particular, the OpinionFinder system (Riloff and
Wiebe, 2003; Wiebe and Riloff, 2005) is a state-of-
the-art knowledge-rich sentiment-analysis system.
We will use it as one of our baselines and compare
its performance with our methods.
There has been a great deal of previous work in
sentiment analysis that worked with reviews, but
they were typically restricted to using reviews ex-
tracted from one or two well-known sources, by-
passing automatic review detection. Examples of
such early work include (Turney, 2002; Pang et al,
2002; Dave et al, 2003; Hu and Liu, 2004; Popescu
and Etzioni, 2005). See Pang and Lee (2008a) for
a more comprehensive survey. Building a collection
of diverse review webpages, not limited to one or
two hosts, can better facilitate such research.
Learning from noisy examples has been studied
for a long time in the learning theory community
(Angluin and Laird, 1988). Learning naive Bayes
classifiers from noisy data (either features or labels
or both) was studied by Yang et al (2003). Their
focus, however, is to reconstruct the underlying con-
ditional probability distributions from the observed
noisy dataset. We, on the other hand, rely on the vol-
ume of labels to drown the noise. Along this spirit,
Snow et al (2008) show that obtaining multiple low-
quality labels (through Mechanical Turk) can ap-
proach high-quality editorial labels. Unlike in their
setting, we do not have multiple low-quality labels
for the same URL. The extensive body of work in
495
semi-supervised learning or learning from one class
is also somewhat relevant to our work. A major dif-
ference is that they tend to work with small amount
of clean, labeled data. In addition, many semi-
supervised/transductive learning algorithms are not
efficient for web-scale data.
Using site structure for web analysis tasks has
been addressed in a variety of contexts. For ex-
ample, Kening et al (2005) exploit the structure
of a website to improve classification. On a re-
lated note, co-training has also been used to utilize
inter-page link information in addition to intra-page
textual content: Blum and Mitchell (1998) use an-
chor texts pointing to a webpage as the alternative
?view? of the page in the context of webpage clas-
sification. Their algorithm is largely site-unaware
in that it does not explicitly exploit site structures.
Utilizing site structures also has remote connections
to wrapper induction, and there is extensive litera-
ture on this topic. Unfortunately, the methods in all
of these work require human labeling, which is pre-
cisely what our work is trying to circumvent.
3 Methodology
In this section we describe our basic methodology
for identifying review pages. Our method consists
of two main steps. The first is to use a large amount
of noisy training examples to learn a basic classifier
for review webpages; we adapt a simple naive Bayes
classifier for this purpose. The second is to improve
the performance of this basic classifier by exploiting
the website structure; we use a decision tree for this.
Let P be the set of all webpages. Let C+ denote
the positive class, i.e., the set of all review pages and
let C? denote the negative class, i.e., the set of all
non-review pages. Each webpage p is exactly in one
of C+ or C?, and is labeled +1 or ?1 respectively.
3.1 Learning from large amounts of noisy data
Previous work using supervised or semi-supervised
learning approaches for sentiment analysis assumes
relatively high-quality labels that are produced ei-
ther via human annotation or automatically gener-
ated through highly accurate rules (e.g., assigning
positive or negative label to a review according to
automatically extracted star ratings).
We examine a different scenario where we can au-
tomatically generate large amount of relatively low-
quality labels. Section 4.2 describes the process
in more detail, but briefly, in a collection of pages
crawled from sites that are very likely to host re-
views, those with the word review in their URLs
are very likely to contain reviews (the noisy posi-
tive set C?+) and the rest of the pages on those sites
are less likely to contain reviews (the more noisy
negative set C??). More formally, for a webpage
p, suppose Pr[p ? C+ | p ? C?+] = ? and
Pr[p ? C+ | p ? C??] = ?, where 1 > ?  ? > 0.
Can we still learn something useful from C?+ and C??
despite the labels being highly noisy?
The following analysis is based on a naive Bayes
classifier. We chose naive Bayes classifier since the
learning phase can easily be parallelized.
Given a webpage (or a document) p represented
as a bag of features {fi}, we wish to assign a class
argmaxc?{C+,C?} Pr[c | p] to this webpage. Naive
Bayes classifiers assume fi?s to be conditionally in-
dependent and we have Pr[p | c] = ?Pr[fi | c].
Let ri = Pr[fi | C+]/Pr[fi | C?] denote the con-
tribution of each feature towards classification, and
rc = Pr[C+]/Pr[C?] denote the ratio of class pri-
ors. First note that
log Pr[C+|p]Pr[C?|p] = log
(
Pr[C+]
Pr[C?] ?
Pr[p|C+]
Pr[p|C?]
)
= log
(
Pr[C+]
Pr[C?] ?
?
ri
)
= log rc +? log ri.
A webpage p receives label +1 iff Pr[C+ | p] >
Pr[C? | p], and by above, if and only if ? log ri >
? log rc.
When we do not have a reasonable estimate of
Pr[C+] and Pr[C?], as in our setting, the best we
can do is to assume rc = 1. In this case, p receives
label +1 if and only if? log ri > 0. Thus, a feature
fi with log ri > 0 has a positive contribution to-
wards p being labeled +1; call fi to be a ?positive?
feature. Typically we use relative-frequency estima-
tion of Pr[c] and Pr[fi | c] for c ? {C+, C?}. Now,
how does the estimation from a dataset with noisy
labels compare with the estimation from a dataset
with clean labels?
To examine this, we calculate the following:
Pr[fi | C?+] = ?Pr[fi | C+] + (1? ?) Pr[fi | C?],
Pr[fi | C??] = ? Pr[fi | C+] + (1? ?) Pr[fi | C?].
Let r?i = Pr[fi| eC+]Pr[fi| eC?] =
?ri+(1??)
?ri+(1??) . Clearly r?i is mono-
tonic but not linear in ri. Furthermore, it is bounded:
496
(1? ?)/(1? ?) ? r?i ? ?/?. However,
r?i > 1 ?? ?ri + (1? ?) > ?ri + (1? ?)
?? (???)ri > (???) ?? ri > 1,where
the last step used ? > ?. Thus, the sign of log r?i is
the same as that of log ri, i.e., a feature contribut-
ing positively to? log ri will continue to contribute
positively to? log r?i (although its magnitude is dis-
torted) and vice versa.
The above analysis motivates an alternative model
to naive Bayes. Instead of each feature fi placing
a weighted vote log r?i in the final decision, we trust
only the sign of log r?i, and let each feature fi place a
vote for the class C+ (respectively, C?) if log r?i > 0
(respectively, log r?i < 0). Intuitively, this model
just compares the number of ?positive? features and
the number of ?negative? features, ignoring the mag-
nitude (since it is distorted anyway). This is pre-
cisely our algorithm: For a given threshold ?, the
final label nbu?(p) of a webpage p is given by
nbu?(p) = sgn (? sgn(log r?i)? ?) ,
where sgn is the sign function. For comparison
purposes, we also indicate the ?weighted? version:
nbw?(p) = sgn (? log r?i ? ?) .
If ? = 0, we omit ? and use nb to denote a generic
label assigned by any of the above algorithms.
Note that even though our discussions were for
two-class and in particular, review classification,
they are equally applicable to a wide range of clas-
sification tasks in large-scale web-content analysis.
Our analysis of learning from automatically gener-
ated noisy examples is thus of independent interest.
3.2 Utilizing site structure
Can the structure of a website be exploited to im-
prove the classification of webpages given by nb(?)?
While not all websites are well-organized, quite a
number of them exhibit certain structure that makes
it possible to identify large subsites that contain only
review pages. Typically but not always this structure
is manifested through the tokens in the URL corre-
sponding to the webpage. For instance, the pattern
http://www.zagat.com/verticals/
PropertyDetails.aspx?VID=a&R=b,
where a,b are numbers, is indicative of all
webpages in zagat.com that are reviews of
restaurants. In fact, we can think of this as a
generalization of having the keyword review in
the URL. Now, suppose we have an initial labeling
nb(p) ? {?1} for each webpage p produced by a
classifier (as in the previous section, or one that is
trained on a small set of human annotated pages),
can we further improve the labeling using the
pattern in the URL structure?
It is not immediate how to best use the URL
structure to identify the review subsites. First,
URLs contain irrelevant information (e.g., the to-
ken verticals in the above example), thus clus-
tering by simple cosine similarity may not dis-
cover the review subsites. Second, the subsite
may not correspond to a subtree in the URL hi-
erarchy, i.e., it is not reasonable to expect all
the review URLs to share a common prefix.
Third, the URLs contain a mixture of path com-
ponents (e.g., www.zagat.com/verticals/
PropertyDetails.aspx) and key-value pairs
(e.g., VID=a and R=b) and hence each token (re-
gardless of its position) in the URL could play a
role in determining the review subsite. Furthermore,
conjunction of presence/absence of certain tokens in
the URL may best correspond to subsite member-
ship. In light of these, we represent each URL (and
hence the corresponding webpage) by a bag {gi} of
tokens obtained from the URL. We perform a crude
form of feature selection by dropping tokens that
are either ubiquitous (occurring in more than 99%
of URLs) or infrequent (occurring in fewer than 1%
of URLs) in a website; neither yields useful infor-
mation.
Our overall approach will be to use gi?s to par-
tition P into clusters {Ci} of webpages such that
each cluster Ci is predominantly labeled as either
review or non-review by nb(?). This automati-
cally yields a new label cls(p) for each page p,
which is the majority label of the cluster of p:
cls(p) = sgn
(?
q?C(p) nb(q)
)
,
where C(p) is the cluster of p. To this end, we use
a decision tree classifier to build the clusters. This
classifier will use the features {gi} and the target la-
bels nb(?). The classifier is trained on all the web-
pages in the website and in the obtained decision
tree, each leaf, consisting of pages with the same
set of feature values leading down the path, corre-
sponds to a cluster of webpages. Note that the clus-
ters delicately balance the information in the site-
unaware labels nb(?) and the site structure encoded
497
in the URLs (given by gi?s). Thus the label cls(p)
can be thought of as a smoothed version of nb(p).
Even though we can expect most clusters to be ho-
mogeneous (i.e., pure reviews or non-reviews), the
above method can produce clusters that are inher-
ently heterogeneous. This can happen if the web-
site URLs are organized such that many subsites
contain both review and non-review webpages. To
take this into account, we propose the following
hybrid approach that interpolates between the un-
smoothed labels given by nb(?) and the smoothed
labels given by cls(?). For a cluster Ci, the dis-
crepancy disc(Ci) = ?p?Ci [cls(p) 6= nb(p)]; thisquantity measures the number of disagreements be-
tween the majority label cls(p) and the original label
nb(p) for each page p in the cluster. The decision
tree guarantees disc(Ci) ? |Ci|/2. We call a cluster
Ci to be ?-homogeneous if disc(Ci) ? ?|Ci|, where
? ? [0, 1/2]. For a fixed ?, the hybrid label of a web-
page p is given by
hyb?(p) =
{ cls(p) if C(p) is ?-homogeneous,
nb(p) otherwise.
Note that hyb1/2(p) = cls(p) and hyb0(p) = nb(p).
Note that in the above discussions, any clustering
method that can incorporate the site-unaware labels
nb(?) and the site-specific tokens in gi?s could have
been used; off-the-shelf decision tree was merely a
specific way to realize this.
4 Data
It is crucial for this study to create a dataset that
is representative of a diverse range of websites that
host reviews over different topics in different styles.
We are not aware of any extensive index of online
review websites and we do not want to restrict our
study to a few well-known review aggregation web-
sites (such as yelp.com or zagat.com) since
this will not represent the less popular and more spe-
cialized ones. Instead, we utilized user-generated
tags for webpages, available on social bookmarking
websites such as del.icio.us.
We obtained (a sample of) a snapshot of URL?tag
pairs from del.icio.us. We took the top one
thousand sites with review* tags; these websites
hopefully represent a broad coverage. We were able
to crawl over nine hundred of these sites and the re-
sulting collection of webpages served as the basis
of the experiments in this paper. We refer to these
websites (or the webpages from these sites, when it
is clear from the context) as Sall.
4.1 Gold-standard test set
When the websites are as diverse as represented in
Sall, there is no perfect automatic way to generate
the ground truth labels. Thus we sampled a number
of pages for human labeling as follows.
First, we set aside 40 sites as the test sites (S40).
In order to represent different types of websites (to
the best we can), we sampled the 40 sites so that S40
covers different size ranges, since large-scale web-
sites and small-scale websites are often quite dif-
ferent in style, topic, and content. We uniformly
sampled 10 sites from each of the four size cate-
gories (roughly, sites with 100?5K, 5K?25K, 25K?
100K, and 100K+ webpages)1. Indeed, S40 (as did
Sall) covered a wide range of topics (e.g., games,
books, restaurants, movies, music, and electronics)
and styles (e.g., dedicated review sites, product sites
that include user reviews, newspapers with movie re-
view sections, religious sites hosting book reviews,
and non-English review sites).
We then sampled 50 pages to be labeled from each
site in S40. Since there are some fairly large sites
that have only a small number of review pages, a
uniform sampling may yield no review webpages
from those sites. To reflect the natural distribu-
tion on a website and to represent pages from both
classes, the webpages were sampled in the follow-
ing way. For each website in S40, 25 pages were
uniformly sampled (representing the natural distri-
bution) and 25 pages were sampled from among
?equivalence classes? based on URLs so that pages
from each major URL pattern were represented.
Here, each webpage in the site is represented by a
URL signature containing the most frequent tokens
that occur in the URLs in that site and all pages with
the same signature form an equivalence class.
For our purposes, a webpage is considered a re-
view if it contains significant amount of textual in-
formation expressing subjective opinions on or per-
sonal experiences with a given product / service.
When in doubt, the guiding principle is whether
1As we do not want to waste human annotation on sites with
no reviews at all, a quick pre-screening process eliminated can-
didate sites that did not seem to host any reviews.
498
a page can be a satisfactory result page for users
searching for reviews. More specifically, the human
annotation labeled each webpage, after thoroughly
examining the content, with one of the following
seven intuitive labels: ?single? (contains exactly one
review), ?multiple? (concatenation of more than one
review), ?no? (clearly not a review page), ?empty?
(looks like a page that could contain reviews but had
none), ?login? (a valid user login needed to look at
the content), ?hub? (a pointer to one or more review
pages), and ?ambiguous? (border-line case, e.g., a
webpage with a one line review). The first two labels
were treated as +1 (i.e., reviews) and the last five la-
bels were treated as ?1 (i.e., non-reviews). Out of
the 2000 pages, we obtained 578 pages labeled +1
and the 1422 pages labeled ?1. On a pilot study us-
ing two human judges, we obtained 78% inter-judge
agreement for the seven labels and 92% inter-judge
agreement if we collapse the labels to ?1. Percent-
ages of reviews in our samples from different sites
range from 14.6% to 93.9%.
Preprocessing for text-based analysis. We pro-
cessed the crawled webpages using lynx to ex-
tract the text content. To discard templated content,
which is an annoying issue in large-scale web pro-
cessing, and HTML artifacts, we used the following
preprocessing. First, the HTML tags <p>, <br>,
</tr>, and </td> were interpreted as paragraph
breaks, the ?.? inside a paragraph was interpreted as
a sentence break, and whitespace was used to tok-
enize words in a sentence. A sentence is considered
?good? if it has at least seven alphabetic words and
a paragraph is considered ?good? if it has at least
two good sentences. After extracting the text us-
ing lynx, only the good paragraphs were retained.
This effectively removes most of the templated con-
tent (e.g., navigational phrases) and retains most of
the ?natural language? texts. Because of this pre-
processing, 485 pages out of 2000 turned out to be
empty and these were discarded (human labels on
97% of these empty pages were ?1).
4.2 Dataset with noisy labels
As discussed in Section 3.1, our goal is to obtain a
large noisy set of positive and negative labeled ex-
amples. We obtained these labels for the webpages
in the training sites, Srest, which is essentially Sall \
S40. First, the URLs in Srest were tokenized using a
unigram model based on an English dictionary; this
is so that strings such as reviewoftheday are
properly interpreted.
C?+: To be labeled +1, the path-component of
the URL of the webpage has to contain the token
review. Our assumption is that such pages are
highly likely to be review pages. On a uniform sam-
ple of 100 such pages in Sall, 90% were found to be
genuine reviews. Thus, we obtained a collection of
webpages with slightly noisy positive labels.
C??: The rest of the pages in Srest were labeled
?1. Clearly this is a noisy negative set since not all
pages containing reviews have review as part of
their URLs (recall the example from zagat.com);
thus many pages in C?? can still be reviews.
While the negative labels in Srest are more noisy
than the positive labels, we believe most of the non-
review pages are in C??, and as most websites con-
tain a significant number of non-review pages, the
percentage of reviews in C?? is smaller than that in
C?+ (the assumption ?  ? in Section 3.1).
We collected all the paragraphs (as defined ear-
lier) from both C?+ and C?? separately. We elim-
inated duplicate paragraphs (this further mitigates
the templates issue, especially for sites generated
by content-management software), and trained a un-
igram language model as in Section 3.1.
5 Evaluations
The evaluations were conducted on the 1515 labeled
(non-empty) pages in S40 described in Section 4.1.
We report the accuracy (acc.) as well as precision
(prec.), recall (rec.), and f-measure (fmeas.) for C+.
Trivial baselines. Out of the 1515 labeled pages,
565 were labeled +1 and 950 were labeled ?1. Ta-
ble 1 summarizes the performance of baselines that
always predict one of the classes and a baseline that
randomly select a class according to the class dis-
tribution S40. As we can see, the best accuracy
is .63, the best f-measure is .54, and they cannot
be achieved by the same baseline. Before present-
acc. prec. rec. fmeas.
always C? .63 - 0 -
always C+ .37 .37 1 .54
random .53 .37 .37 .37
Table 1: Trivial baseline performances.
499
ing the main results of our methods, we introduce
a much stronger baseline that utilizes a knowledge-
rich subjectivity detection package.
5.1 Using subjectivity detectors
This baseline is motivated by the fact that reviews
often contain extensive subjective content. There are
many existing techniques that detect subjectivity in
text. OpinionFinder (http://www.cs.pitt.
edu/mpqa/opinionfinderrelease/) is a
well-known system that processes documents and
automatically identifies subjective sentences in
them. OpinionFinder uses two subjective sentence
classifiers (Riloff and Wiebe, 2003; Wiebe and
Riloff, 2005). The first (denoted opfA) focuses on
yielding the highest accuracy; the second (denoted
opfB) optimizes precision at the expense of recall.
The methods underlying OpinionFinder incorporate
extensive tools from linguistics (including, speech
activity verbs, psychological verbs, FrameNet verbs
and adjectives with frame ?experiencer?, among oth-
ers) and machine learning. In terms of performance,
previous work has shown that OpinionFinder is a
challenging system to improve upon for review re-
trieval (Pang and Lee, 2008b). Computationally,
OpinionFinder is very expensive and hence unattrac-
tive for large-scale webpage analysis (running Opin-
ionFinder on 1515 pages took about five hours).
Therefore, we also propose a light-weight subjectiv-
ity detection mechanism called lwd, which counts
the number of opinion words in each sentence in the
text. The opinion words (5403 of them) were ob-
tained from an existing subjectivity lexicon (http:
//www.cs.pitt.edu/mpqa).
We ran both opfA and opfB on the tokenized text
(running them on raw HTML produced worse re-
sults). Each sentence in the text was labeled subjec-
tive or objective. We experimented with two ways
to label a document using sentence-level subjectiv-
ity labels. We labeled a document +1 if it contained
at least k subjective sentences (denoted as opf?(k),
where k > 0 is the absolute threshold), or at least
f fraction of its sentences were labeled subjective
(denoted as opf?(f), where f ? (0, 1] is the rela-
tive threshold). We conducted exhaustive parameter
search with both opfA and opfB. For instance, the
performances of opfA as a function of the thresh-
olds, both absolute and relative, is shown in Fig-
ure 1. Table 2 summarizes the best performances
of opf?(k) (first two rows) and opf?(f) (next two
rows), in terms of accuracy and f-measure (bold-
faced). Similarly, for lwd, we labeled a document
+1 if at least k sentences have at least ` opin-
ion words (denoted lwd(k, `).) Table 2 once again
shows the best performing parameters for both accu-
racy and f-measure for lwd. Our results indicate that
a simple method such as lwd can come very close to
a sophisticated system such as opf?.
acc. prec. rec. fmeas.
opfA(2) .704 .597 .634 .615
opfB(2) .659 .526 .857 .652
opfA(.17) .652 .529 .614 .568
opfB(.36) .636 .523 .797 .632
lwd(1, 4) .716 .631 .572 .600
lwd(1, 1) .666 .538 .740 .623
Table 2: Best performances of opf? and lwd methods.
Figure 1: Performance of opfA as a function of thresh-
olds: Absolute and relative.
5.2 Main results
As stated earlier, we do not have any prior knowl-
edge about the value of ? and hence have to work
with ? = 0. To investigate the implications of
this assumption, we study the performance of nbu?
and nbw? as a function of ?. The accuracy and f-
measures are plotted in Figure 2. There are three
500
acc. prec. rec. fmeas.
nbu .753 .652 .726 .687
cls .756 .696 .616 .654
hyb1/3 .777 .712 .674 .693
Table 3: Performance of our methods.
conclusions that can be drawn from this study: (i)
The peak values of accuracy and f-measure are com-
parable for both nbu? and nbw? , (ii) at ? = 0, nbu is
much better than nbw, in terms of both accuracy and
f-measure, and (iii) the best performance of nbu? oc-
curs at ? ? 0. Given the difficulty of obtaining ? if
one were to use nbw? , the above conclusions vali-
date our intuition and the algorithm in Section 3.1.
Figure 2: Performance as threshold changes: Comparing
nbu? (marked as (u)) with nbw? (marked as (w)).
Table 3 shows the performance of the site-specific
method outlined in Section 3.2. The clusters
were generated using the unpruned J48 decision
tree in Weka (www.cs.waikato.ac.nz/ml/
weka). In our experiments, we set ? = 1/3 as a
natural choice for the hybrid method. As we see
the performance of nbu is about 7% better than the
best performance using a subjectivity-based method
(in terms of accuracy). The performance of the
smoothed labels (decision tree-based clustering) is
comparable to that of nbu. However, the hybrid
method hyb1/3 yields an additional 3% relative im-
provement over nbu. Paired t-test over the accura-
cies for these 40 sites shows both hyb1/3 and nbu
to be statistically significantly better than the opf?
with best accuracy (with p < 0.05, p < 0.005,
respectively), and hyb1/3 to be statistically signifi-
cantly better than nbu (with p < 0.05).
5.3 Cross-validation on S40
While the main focus of our paper is to study
how to detect reviews without human labels, we
present cross validation results on S40 as a compar-
ison point. The goal of this experiment is to get a
sense of the best possible accuracy and f-measure
numbers using labeled data and the state-of-the-
art method for text classification, namely, SVMs.
In other words, the performance numbers obtained
through SVMs and cross-validation can be thought
of as realistic ?upper bounds? on the performance of
content-based review detection. We used SVMlight
(svmlight.joachims.org) for this purpose.
The cross-validation experiment was conducted
as follows. We split the data by site to simulate the
more realistic setting where pages in the test set do
not necessarily come from a known site. Each fold
consisted of one site from each size category; thus,
36 of the 40 sites in S40 were used for training and
the remainder for testing. Over ten folds, the aver-
age performance was: accuracy .795, precision .759,
recall .658, and f-measure .705.
Thus our methods in Section 3 come reason-
ably close to the ?upper bound? given by SVMs
and human-labeled data. In fact, while the su-
pervised SVMs statistically significantly outperform
nbu, they are statistically indistinguishable from
hyb1/3 via paired t-test over site-level accuracies.
6 Conclusions
In this paper we proposed an automatic method to
perform efficient and large-scale detection of re-
views. Our method is based on two principles:
Building a classifier from a large number of noisy
labeled examples and using the site structure to im-
prove the performance of this classifier. Extensive
experiments suggest that our method is competitive
against supervised learning methods that depend on
expensive human labels. There are several interest-
ing avenues for future research, including improv-
ing the current method for exploiting the site struc-
ture. On a separate note, previous research has ex-
plicitly studied sentiment analysis as an application
of transfer learning (Blitzer et al, 2007). Given the
diverse range of topics present in our dataset, ad-
dressing topic-dependency is also an interesting fu-
ture research direction.
501
References
Dana Angluin and Philip D. Laird. 1988. Learning from
noisy examples. Machine Learning, 2(4):343?370.
John Blitzer, Mark Dredze, and Fernando Pereira. 2007.
Biographies, Bollywood, boom-boxes and blenders:
Domain adaptation for sentiment classification. In
Proceedings of 45th ACL.
Avrim Blum and Tom Mitchell. 1998. Combining la-
beled and unlabeled data with co-training. In Proceed-
ings of 11th COLT, pages 92?100.
comScore. 2007. Online consumer-generated re-
views have significant impact on offline pur-
chase behavior. Press Release, November.
http://www.comscore.com/press/
release.asp?press=1928.
Kushal Dave, Steve Lawrence, and David M. Pennock.
2003. Mining the peanut gallery: Opinion extraction
and semantic classification of product reviews. In Pro-
ceedings of 12th WWW, pages 519?528.
Aidan Finn and Nicholas Kushmerick. 2006. Learn-
ing to classify documents according to genre. JASIST,
7(5):1506?1518.
John A. Horrigan. 2008. Online shopping. Pew Internet
& American Life Project Report.
Minqing Hu and Bing Liu. 2004. Mining opinion fea-
tures in customer reviews. In Proceedings of 19th
AAAI, pages 755?760.
Gao Kening, Yang Leiming, Zhang Bin, Chai Qiaozi, and
Ma Anxiang. 2005. Automatic classification of web
information based on site structure. In Cyberworlds,
pages 552?558.
Vincent Ng, Sajib Dasgupta, and S. M. Niaz Arifin. 2006.
Examining the role of linguistic knowledge sources in
the automatic identification and classification of re-
views. In Proceedings of 21st COLING/44th ACL
Poster, pages 611?618.
Xiaochuan Ni, Gui-Rong Xue, Xiao Ling, Yong Yu, and
Qiang Yang. 2007. Exploring in the weblog space
by detecting informative and affective articles. In Pro-
ceedings of 16th WWW, pages 281?290.
Bo Pang and Lillian Lee. 2008a. Opinion mining and
sentiment analysis. Foundations and Trends in Infor-
mation Retrieval, 2(1-2):1?135.
Bo Pang and Lillian Lee. 2008b. Using very simple
statistics for review search: An exploration. In Pro-
ceedings of 22nd COLING. Poster.
Bo Pang, Lillian Lee, and Shivakumar Vaithyanathan.
2002. Thumbs up? Sentiment classification using ma-
chine learning techniques. In Proceedings of EMNLP,
pages 79?86.
Ana-Maria Popescu and Oren Etzioni. 2005. Extracting
product features and opinions from reviews. In Pro-
ceedings of HLT/EMNLP, pages 339?346.
Ellen Riloff and Janyce Wiebe. 2003. Learning extrac-
tion patterns for subjective expressions. In Proceed-
ings of EMNLP, pages 105?112.
Rion Snow, Brendan O?Connor, Daniel Jurafsky, and
Andrew Y. Ng. 2008. Cheap and fast - but is it
good? Evaluating non-expert annotations for natural
language tasks. In Proceedings of EMNLP.
Adam Stepinski and Vibhu Mittal. 2007. A fact/opinion
classifier for news articles. In Proceedings of 30th SI-
GIR, pages 807?808.
Peter Turney. 2002. Thumbs up or thumbs down? Se-
mantic orientation applied to unsupervised classifica-
tion of reviews. In Proceedings of 40th ACL, pages
417?424.
Janyce M. Wiebe and Ellen Riloff. 2005. Creating sub-
jective and objective sentence classifiers from unanno-
tated texts. In Proceedings of CICLing, pages 486?
497.
Janyce M. Wiebe, Theresa Wilson, Rebecca Bruce,
Matthew Bell, and Melanie Martin. 2004. Learn-
ing subjective language. Computational Linguistics,
30(3):277?308.
Yirong Yang, Yi Xia, Yun Chi, and Richard R. Muntz.
2003. Learning naive Bayes classifier from noisy data.
Technical Report 56, UCLA.
Hong Yu and Vasileios Hatzivassiloglou. 2003. Towards
answering opinion questions: Separating facts from
opinions and identifying the polarity of opinion sen-
tences. In Proceedings of EMNLP, pages 129?136.
502
Coling 2010: Poster Volume, pages 36?44,
Beijing, August 2010
Robust Sentiment Detection on Twitter from Biased and Noisy Data
Luciano Barbosa
AT&T Labs - Research
lbarbosa@research.att.com
Junlan Feng
AT&T Labs - Research
junlan@research.att.com
Abstract
In this paper, we propose an approach to
automatically detect sentiments on Twit-
ter messages (tweets) that explores some
characteristics of how tweets are written
and meta-information of the words that
compose these messages. Moreover, we
leverage sources of noisy labels as our
training data. These noisy labels were
provided by a few sentiment detection
websites over twitter data. In our experi-
ments, we show that since our features are
able to capture a more abstract represen-
tation of tweets, our solution is more ef-
fective than previous ones and also more
robust regarding biased and noisy data,
which is the kind of data provided by these
sources.
1 Introduction
Twitter is one of the most popular social network
websites and has been growing at a very fast pace.
The number of Twitter users reached an estimated
75 million by the end of 2009, up from approx-
imately 5 million in the previous year. Through
the twitter platform, users share either information
or opinions about personalities, politicians, prod-
ucts, companies, events (Prentice and Huffman,
2008) etc. This has been attracting the attention
of different communities interested in analyzing
its content.
Sentiment detection of tweets is one of the basic
analysis utility functions needed by various appli-
cations over twitter data. Many systems and ap-
proaches have been implemented to automatically
detect sentiment on texts (e.g., news articles, Web
reviews and Web blogs) (Pang et al, 2002; Pang
and Lee, 2004; Wiebe and Riloff, 2005; Glance
et al, 2005; Wilson et al, 2005). Most of these
approaches use the raw word representation (n-
grams) as features to build a model for sentiment
detection and perform this task over large pieces
of texts. However, the main limitation of using
these techniques for the Twitter context is mes-
sages posted on Twitter, so-called tweets, are very
short. The maximum size of a tweet is 140 char-
acters.
In this paper, we propose a 2-step sentiment
analysis classification method for Twitter, which
first classifies messages as subjective and ob-
jective, and further distinguishes the subjective
tweets as positive or negative. To reduce the la-
beling effort in creating these classifiers, instead
of using manually annotated data to compose the
training data, as regular supervised learning ap-
proaches, we leverage sources of noisy labels as
our training data. These noisy labels were pro-
vided by a few sentiment detection websites over
twitter data. To better utilize these sources, we
verify the potential value of using and combining
them, providing an analysis of the provided labels,
examine different strategies of combining these
sources in order to obtain the best outcome; and,
propose a more robust feature set that captures a
more abstract representation of tweets, composed
by meta-information associated to words and spe-
cific characteristics of how tweets are written. By
using it, we aim to handle better: the problem
of lack of information on tweets, helping on the
generalization process of the classification algo-
rithms; and the noisy and biased labels provided
by those websites.
The remainder of this paper is organized as fol-
lows. In Section 2, we provide some context about
messages on Twitter and about the websites used
as label sources. We introduce the features used
in the sentiment detection and also provide a deep
analysis of the labels generated by those sources
in Section 3. We examine different strategies of
36
combining these sources and present an extensive
experimental evaluation in Section 4. Finally, we
discuss previous works related to ours in Section 5
and conclude in Section 6, where we outline direc-
tions and future work.
2 Preliminaries
In this section, we give some context about Twitter
messages and the sources used for our data-driven
approach.
Tweets. The Twitter messages are called tweets.
There are some particular features that can be used
to compose a tweet (Figure 1 illustrates an ex-
ample): ?RT? is an acronym for retweet, which
means the tweet was forwarded from a previous
post; ?@twUser? represents that this message is a
reply to the user ?twUser?; ?#obama? is a tag pro-
vided by the user for this message, so-called hash-
tag; and ?http://bit.ly/9K4n9p? is a link to some
external source. Tweets are limited to 140 charac-
ters. Due to this lack of information in terms of
words present in a tweet, we explore some of the
tweet features listed above to boost the sentiment
detection, as we will show in detail in Section 3.
Data Sources. We collected data from 3 differ-
ent websites that provide almost real-time senti-
ment detection for tweets: Twendz, Twitter Sen-
timent and TweetFeel. To collect data, we issued
a query containing a common stopword ?of?, as
we are interested in collecting generic data, and
retrieved tweets from these sites for three weeks,
archiving the returned tweets along with their sen-
timent labels. Table 1 shows more details about
these sources. Two of the websites provide 3-
class detection: positive, negative and neutral and
one of them just 2-class detection. One thing to
note is our crawling process obtained a very dif-
ferent number of tweets from each website. This
might be a result of differences among their sam-
pling processes of Twitter stream or some kind of
filtering process to output. For instance, a site
may only present the tweets it has more confi-
dence about their sentiment. In Section 3, we
present a deep analysis of the data provided by
these sources, showing if they are useful to build
a sentiment classification.
RT @twUser: Obama is the first U.S. president not to
have seen a new state added in his lifetime.
http://bit.ly/9K4n9p #obama
Figure 1: Example of a tweet.
3 Twitter Sentiment Detection
Our goal is to categorize a tweet into one of the
three sentiment categories: positive, neutral or
negative. Similar to (Pang and Lee, 2004; Wil-
son et al, 2005), we implement a 2-step sentiment
detection framework. The first step targets on dis-
tinguishing subjective tweets from non-subjective
tweets (subjectivity detection). The second one
further classifies the subjective tweets into posi-
tive and negative, namely, the polarity detection.
Both classifiers perform prediction using an ab-
stract representation of the sentences as features,
as we show later in this section.
3.1 Features
A variety of features have been exploited on the
problem of sentiment detection (Pang and Lee,
2004; Pang et al, 2002; Wiebe et al, 1999; Wiebe
and Riloff, 2005; Riloff et al, 2006) including un-
igrams, bigrams, part-of-speech tags etc. A natu-
ral choice would be to use the raw word represen-
tation (n-grams) as features, since they obtained
good results in previous works (Pang and Lee,
2004; Pang et al, 2002) that deal with large texts.
However, as we want to perform sentiment detec-
tion on very short messages (tweets), this strat-
egy might not be effective, as shown in our ex-
periments. In this context, we are motivated to
develop an abstract representation of tweets. We
propose the use of two sets of features: meta-
information about the words on tweets and char-
acteristics of how tweets are written.
Meta-features. Given a word in a tweet, we map
it to its part-of-speech using a part-of-speech dic-
tionary1. Previous approaches (Wiebe and Riloff,
2005; Riloff et al, 2003) have shown that the ef-
fectiveness of using POS tags for this task. The
intuition is certain POS tags are good indica-
tors for sentiment tagging. For example, opin-
ion messages are more likely containing adjec-
1The pos dictionary we used in this paper is available at:
http://wordlist.sourceforge.net/pos-readme.
37
Data sources URL # Tweets Sentiments
Twendz http://twendz.waggeneredstrom.com/ 254081 pos/neg/neutral
Twitter Sentiment http://twittersentiment.appspot.com/ 79696 pos/neg/neutral
TweetFeel http://www.tweetfeel.com/ 13122 pos/neg
Table 1: Information about the 3 data sources.
tives or interjections. In addition to POS tags,
we map the word to its prior subjectivity (weak
and strong subjectivity), also used by (Wiebe and
Riloff, 2005), and polarity (positive, negative and
neutral). The prior polarity is switched from pos-
itive to negative or vice-versa when a negative
expression (as, e.g., ?don?t?, ?never?) precedes
the word. We obtained the prior subjectivity and
polarity information from subjectivity lexicon of
about 8,000 words used in (Riloff and Wiebe,
2003)2. Although this is a very comprehensive
list, slang and specific Web vocabulary are not
present on it, e.g., words as ?yummy? or ?ftw?.
For this reason, we collected popular words used
on online discussions from many online sources
and added them to this list.
Tweet Syntax Features. We exploited the syn-
tax of the tweets to compose our features. They
are: retweet; hashtag; reply; link, if the tweet con-
tains a link; punctuation (exclamation and ques-
tions marks); emoticons (textual expression rep-
resenting facial expressions); and upper cases (the
number of words that starts with upper case in the
tweet).
The frequency of each feature in a tweet is di-
vided by the number of the words in the tweet.
3.2 Subjectivity Classifier
As we mentioned before, the first step in our tweet
sentiment detection is to predict the subjectivity of
a given tweet. We decided to create a single clas-
sifier by combining the objectivity sentences from
Twendz and Twitter Sentiment (objectivity class)
and the subjectivity sentences from all 3 sources.
As we do not know the quality of the labels pro-
vided by these sources, we perform a cleaning
process over this data to assure some reasonable
quality. These are the steps:
1. Disagreement removal: we remove the
2The subjectivity lexicon is available at
http://www.cs.pitt.edu/mpqa/
tweets that are disagreed between the data
sources in terms of subjectivity;
2. Same user?s messages: we observed that the
users with the highest number of messages
in our dataset are usually those ones that post
some objective messages, for example, ad-
vertising some product or posting some job
recruiting information. For this reason, we
allowed in the training data only one message
from the same user. As we show later, this
boosts the classification performance, mainly
because it removes tweets labeled as subjec-
tive by the data sources but are in fact objec-
tive;
3. Top opinion words: to clean the objective
training set, we remove from this set tweets
that contain the top-n opinion words in the
subjectivity training set, e.g., words as cool,
suck, awesome etc.
As we show in Section 4, this process is in fact
able to remove certain noisy in the training data,
leading to a better performing subjectivity classi-
fier.
To illustrate which of the proposed features are
more effective for this task, the top-5 features in
terms of information gain, based on our training
data, are: positive polarity, link, strong subjec-
tive, upper case and verbs. Three of them are
meta-information (positive polarity, strong sub-
jective and verbs) and the other two are tweet
syntax features (link and upper case). Here is
a typical example of a objective tweet in which
the user pointed an external link and used many
upper case words: ?Starbucks Expands Pay-By-
IPhone Pilot to 1,000 Stores?Starbucks cus-
tomers with Apple iPhones or iPod touches can
.. http://oohja.com/x9UbC?.
38
3.3 Polarity Classifier
The second step of our sentiment detection ap-
proach is polarity classification, i.e., predict-
ing positive or negative sentiment on subjective
tweets. In this section, first we analyze the qual-
ity of the polarity labels provided by the three
sources, and whether their combination has the
potential to bring improvement. Second, we
present some modifications in the proposed fea-
tures that are more suitable for this task.
3.3.1 Analysis of the Data Sources
The 3 data sources used in this work provide
some kind of polarity labels (see Table 1). Two
questions we investigate regarding these sources
are: (1) how useful are these polarity labels? and
(2) does combining them bring improvement in
accuracy?
We take the following aspects into considera-
tion:
? Labeler quality: if the labelers have low qual-
ity, combine them might not bring much im-
provement (Sheng et al, 2008). In our case,
each source is treated as a labeler;
? Number of labels provided by the labelers:
if the labels are informative, i.e., the prob-
ability of them being correct is higher than
0.5, the more the number of labels, the higher
is the performance of a classifier built from
them (Sheng et al, 2008);
? Labeler bias: the labeled data provided by
the labelers might be only a subset of the
real data distribution. For instance, labelers
might be interested in only providing labels
that they are more confident about;
? Different labeler bias: if labelers make simi-
lar mistakes, the combination of them might
not bring much improvement.
We provide an empirical analysis of these
datasets to address these points. First, we measure
the polarity detection quality of a source by calcu-
lating the probability p of a label from this source
being correct. We use the data manually labeled
for assessing the classifiers? performance (testing
data, see Section 4) to obtain the correct labels of
Data sources Quality Entropy
Twendz 0.77 8.3
TwitterSentiment 0.82 7.9
TweetFeel 0.89 7.5
Table 2: Quality of the labels and entropy of the
tweets provided by each data source for the polar-
ity detection.
a data sample. Table 2 shows their values. We can
conclude from these numbers that the 3 sources
provide a reasonable quality data. This means that
combining them might bring some improvement
to the polarity detection instead of, for instance,
using one of them in isolation. An aspect that is
overlooked by quality is the bias of the data. For
instance, by examining the data from TwitterFeel,
we found out that only 4 positive words (?awe-
some?,?rock?,?love? and ?beat?) cover 95% of
their positive examples and only 6 negative words
(?hate?,?suck?,?wtf?,?piss?,?stupid? and ?fail?)
cover 96% of their negative set. Clearly, the data
provided by this source is biased towards these
words. This is probably the reason why this web-
site outputs such fewer number of tweets com-
pared to the other websites (see Table 1) as well
as why its data has the smallest entropy among
the sources (see Table 2).
The quality of the data and its individual bias
have certainly impact in the combination of labels.
However, there is other important aspect that one
needs to consider: different bias between the la-
belers. For instance, if labelers a and b make sim-
ilar decisions, we expect that combining their la-
bels would not bring much improvement. There-
fore, the diversity of labelers is a key element in
combining them (Polikar, 2006). One way to mea-
sure this is by calculating the agreement between
the labels produced by the labelers. We use the
kappa coefficient (Cohen, 1960) to measure the
degree of agreement between two sources. Ta-
ble 3 presents the coefficients for each par of data
source. All the coefficients are between 0.4 and
0.6, which represents a moderate agreement be-
tween the labelers (Landis and Koch, 1977). This
means that in fact the sources provide different
bias regarding polarity detection.
39
Data sources Kappa
Twendz/TwitterSentiment 0.58
TwitterSentiment/TweetFeel 0.58
Twendz/TweetFeel 0.44
Table 3: Kappa coefficient between pairs of
sources.
From this analysis we can conclude that com-
bining the labels provided by the 3 sources can
improve the performance of the polarity detec-
tion instead of using one of them in isolation be-
cause they provide diverse labels (moderate kappa
agreement) of reasonable quality, although there
is some issues related to bias of the labels pro-
vided by them. In our experimental evaluation in
Section 4, we present results obtained by different
strategies of combining these sources that confirm
these findings.
3.3.2 Polarity Features
The features used in the polarity detection are
the same ones used in the subjectivity detection.
However, as one would expect the set of the most
discriminative features is different between the
two tasks. For subjectivity detection, the top-5
features in terms of information gain, based on
the training data, are: negative polarity, positive
polarity, verbs, good emoticons and upper case.
For this task, the meta-information of the words
(negative polarity, positive polarity and verbs) is
more important than specific features from Twitter
(good emoticons and upper case), whereas for the
subjectivity detection, tweet syntax features have
a higher relevance.
This analysis show that prior polarity is very
important for this task. However, one limitation
of using it from a generic list is its values might
not hold for some specific scenario. For instance,
the polarity of the word ?spot? is positive accord-
ing to this list. However, looking at our training
data almost half of the occurrences of this word
appears in the positive set and the other half in
the negative set. Thus, it is not correct to as-
sume that prior polarity of ?spot? is 1 for this
particular data. This example illustrates our strat-
egy to weight the prior polarities: for each word
w with prior polarity defined by the list, we cal-
culate the prior polarity of w, pol(w), based on
the distribution of w in the positive and negative
sets. Thus, polpos(w) = count(w, pos)/count(w)
and polneg(w) = 1? polpos(w). We assume the
polarity of a word is associated with the polar-
ity of the sentence, which seems to be reasonable
since we are dealing with very short messages.
Although simple, this strategy is able to improve
the polarity detection, as we show in Section 4.
4 Experiments
We have performed an extensive performance
evaluation of our solution for twitter sentiment
detection. Besides analyzing its overall perfor-
mance, our goals included: examining different
strategies to combine the labels provided by the
sources; comparing our approach to previous ones
in this area; and evaluating how robust our solu-
tion is to the noisy and biased data described in
Section 3.
4.1 Experimental Setup
Data Sets. For the subjectivity detection, after
the cleansing processing (see Section 3), the train-
ing data contains about 200,000 tweets (roughly
100,000 tweets were labeled by the sources as
subjective ones and 100,000 objective ones), and
for polarity detection, 71046 positive and 79628
negative tweets. For test data, we manually la-
beled 1,000 tweets as positive, negative and neu-
tral. We also built a development set (1,000
tweets) to tune the parameters of the classification
algorithms.
Approaches. For both tasks, subjectivity and po-
larity detection, we compared our approach with
previous ones reported in the literature. Detailed
explanation about them are as follows:
? ReviewSA: this is the approach proposed
by Pang and Lee (Pang and Lee, 2004)
for sentiment analysis in regular online re-
views. It performs the subjectivity detec-
tion on a sentence-level relying on the prox-
imity between sentences to detect subjectiv-
ity. The set of sentences predicted as subjec-
tive is then classified as negative or positive
in terms of polarity using the unigrams that
40
compose the sentences. We used the imple-
mentation provided by LingPipe (LingPipe,
2008);
? Unigrams: Pang et al (Pang et al, 2002)
showed unigrams are effective for sentiment
detection in regular reviews. Based on that,
we built unigram-based classifiers for the
subjectivity and polarity detections over the
training data. Another approach that uses un-
igrams is the one used by TwitterSentiment
website. For polarity detection, they select
the positive examples for the training data
from the tweets containing good emoticons
and negative examples from tweets contain-
ing bad emoticons. (Go et al, 2009). We
built a polarity classifier using this approach
(Unigrams-TS).
? TwitterSA: TwitterSA exploits the features
described in Section 3 in this paper. For
the subjectivity detection, we trained a clas-
sifier from the two available sources, us-
ing the cleaning process described in Sec-
tion 3 to remove noise in the training data,
TwitterSA(cleaning), and other classifier
trained from the original data, TwitterSA(no-
cleaning). For the polarity detection task,
we built a few classifiers to compare their
performances: TwitterSA(single) and Twit-
terSA(weights) are two classifiers we trained
using combined data from the 3 sources.
The only difference is TwitterSA(weights)
uses the modification of weighting the prior
polarity of the words based on the train-
ing data. TwitterSA(voting) and Twit-
terSA(maxconf) combine classification out-
puts from 3 classifiers respectively trained
from each source. TwitterSA(voting) uses
majority voting to combine them and Twit-
terSA(maxconf) picks the one with maxi-
mum confidence score.
We use Weka (Witten and Frank, 2005) to cre-
ate the classifiers. We tried different learning al-
gorithms available on Weka and SVM obtained
the best results for Unigrams and TwitterSA. Ex-
perimental results reported in this section are ob-
tained using SVM.
4.2 Subjectivity Detection Evaluation
Table 4 shows the error rates obtained by the dif-
ferent subjectivity detection approaches. Twit-
terSA achieved lower error rate than both Uni-
grams and ReviewSA. As a result, these num-
bers confirm that features inferred from meta-
information of words and specific syntax features
from tweets are better indicators of the subjectiv-
ity than unigrams. Another advantage of our ap-
proach is since it uses only 20 features, the train-
ing and test times are much faster than using thou-
sands of features like Unigrams. One of the rea-
sons why TwitterSA obtained such a good perfor-
mance was the process of data cleansing (see Sec-
tion 3). The label quality provided by the sources
for this task was very poor: 0.66 for Twendz and
0.68 for TwitterSentiment. By cleaning the data,
the error decreased from 19.9, TwitterSA(no-
cleaning), to 18.1, TwitterSA(cleaning). Regard-
ing ReviewSA, its lower performance is expected
since tweets are composed by single sentences
and ReviewSA relies on the proximity between
sentences to perform subjectivity detection.
We also investigated the influence of the size of
training data on classification performance. Fig-
ure 2 plots the error rates obtained by TwitterSA
and Unigrams versus the number of training ex-
amples. The curve corresponding to TwitterSA
showed that it achieved good performances even
with a small training data set, and kept almost con-
stant as more examples were added to the train-
ing data, whereas for Unigrams the error rate de-
creased. For instance, with only 2,000 tweets as
training data, TwitterSA obtained 20% of error
rate whereas Unigrams 34.5%. These numbers
show that our generic representation of tweets
produces models that are able to generalize even
with a few examples.
4.3 Polarity Detection Evaluation
We provide the results for polarity detection
in Table 5. The best performance was ob-
tained by TwitterSA(maxconf), which combines
results of the 3 classifiers, respectively trained
from each source, by taking the output by the
most confident classifier, as the final predic-
tion. TwitterSA(maxconf) was followed by Twit-
terSA(weights) and TwitterSA(single), both cre-
41
ated from a single training data. This result shows
that computing the prior polarity of the words
based on the training data TwitterSA(weights)
brings some improvement for this task. Twit-
terSA(voting) obtained the highest error rate
among the TwitterSA approaches. This implies
that, in our scenario, the best way of combining
the merits of the individual classifiers is by using
a confidence score approach.
Unigrams also achieved comparable perfor-
mances. However, when reducing the size of the
training data, the performance gap between Twit-
terSA and Unigrams is much wider. Figure 3
shows the error rate of both approaches3 in func-
tion of the training size. Similar to subjectivity de-
tection, the training size does not have much influ-
ence in the error rate for TwitterSA. However for
Unigrams, it decreased significantly as the train-
ing size increased. For instance, for a training
size with 2,000 tweets, the error rate for Unigrams
was 46% versus 23.8% for our approach. As for
subjectivity detection, this occurs because our fea-
tures are in fact able to capture a more general rep-
resentation of the tweets.
Another advantage of TwitterSA over Uni-
grams is that it produces more robust models. To
illustrate this, we present the error rates of Uni-
grams and TwitterSA where the training data is
composed by data from each source in isolation.
For the TweetFeel website, where data is very bi-
ased (see Section 3), Unigrams obtained an error
rate of 44.5% whereas over a sample of the same
size of the combined training data (Figure 3), it
obtained an error rate of around 30%. Our ap-
proach also performed worse over this data than
the general one, but still had a reasonable er-
ror rate, 25.1%. Regarding the Twendz website,
which is the noisiest one (Section 3), Unigrams
also obtained a poor performance comparing it
against its performance over a sample of the gen-
eral data with a same size (see Table 5 and Fig-
ure 3). Our approach, on the other hand, was
not much influenced by the noise (22.9% on noisy
data and around 20% on the sample of same size
of the general data). Finally, since the data qual-
ity provided by TwitterSentiment is better than the
3For this experiment, we used the TwitterSA(single) con-
figuration.
Approach Error rate
TwitterSA(cleaning) 18.1
TwitterSA(no-cleaning) 19.9
Unigrams 27.6
ReviewSA 32
Table 4: Results for subjectivity detection.
Approach Error rate
TwitterSA(maxconf) 18.7
TwitterSA(weights) 19.4
TwitterSA(single) 20
TwitterSA(voting) 22.6
Unigrams 20.9
ReviewSA 21.7
Unigrams-TS 24.3
Table 5: Results for polarity detection.
Site Training Size TwitterSA Unigrams
TweetFeel 13120 25.1 44.5
Twendz 78025 22.9 32.3
TwitterSentiment 59578 22 23.4
Table 6: Training data size for each source and
error rates obtained by classifiers built from them.
 0 5 10 15 20 25 30
 35 40
 0  20000  40000  60000  80000  100000  120000  140000  160000  180000  200000Error Rate Training Size UnigramsTwitterSA
Figure 2: Influence of the training data size in the
error rate of subjectivity detection using Unigrams
and TwitterSA.
previous sources (Table 2), there was not much
impact over both classifiers created from it.
From this analysis over real data, we can con-
clude that our approach produces (1) an effective
polarity classifier even when only a small number
of training data is available; (2) a robust model to
bias and noise in the training data; and (3) com-
bining data sources with such distinct characteris-
tics, as our data analysis in Section 3 pointed out,
is effective.
42
 0 10 20 30
 40 50
 0  20000  40000  60000  80000  100000  120000  140000  160000Error Rate Training Size UnigramsTwitterSA
Figure 3: Influence of the training data size in
the error rate of polarity detection using Unigrams
and TwitterSA.
5 Related Work
There is a rich literature in the area of sentiment
detection (see e.g., (Pang et al, 2002; Pang and
Lee, 2004; Wiebe and Riloff, 2005; Go et al,
2009; Glance et al, 2005). Most of these ap-
proaches try to perform this task on large texts, as
e.g., newspaper articles and movie reviews. An-
other common characteristic of some of them is
the use of n-grams as features to create their mod-
els. For instance, Pang and Lee (Pang and Lee,
2004) explores the fact that sentences close in a
text might share the same subjectivity to create a
better subjectivity detector and, similar to (Pang et
al., 2002), uses unigrams as features for the polar-
ity detection. However, these approaches do not
obtain a good performance on detecting sentiment
on tweets, as we showed in Section 4, mainly be-
cause tweets are very short messages. In addition
to that, since they use a raw word representation,
they are more sensible to bias and noise, and need
a much higher number of examples in the train-
ing data than our approach to obtain a reasonable
performance.
The Web sources used in this paper and some
other websites provide sentiment detection for
tweets. A great limitation to evaluate them is they
do not make available how their classification was
built. One exception is TwitterSentiment (Go et
al., 2009), for instance, which considers tweets
with good emoticons as positive examples and
tweets with bad emoticons as negative examples
for the training data, and builds a classifier using
unigrams and bigrams as features. We showed
in Section 4 that our approach works better than
theirs for this problem, obtaining lower error rates.
6 Conclusions and Future Work
We have presented an effective and robust sen-
timent detection approach for Twitter messages,
which uses biased and noisy labels as input to
build its models. This performance is due to the
fact that: (1) our approach creates a more abstract
representation of these messages, instead of using
a raw word representation of them as some pre-
vious approaches; and (2) although noisy and bi-
ased, the data sources provide labels of reasonable
quality and, since they have different bias, com-
bining them also brought some benefits.
The main limitation of our approach is the cases
of sentences that contain antagonistic sentiments.
As future work, we want to perform a more fine
grained analysis of sentences in order to identify
its main focus and then based the sentiment clas-
sification on it.
References
Cohen, J. 1960. A coefficient of agreement for nomi-
nal scales. Educational and psychological measure-
ment, 20(1):37.
Glance, N., M. Hurst, K. Nigam, M. Siegler, R. Stock-
ton, and T. Tomokiyo. 2005. Deriving marketing
intelligence from online discussion. In Proceed-
ings of the eleventh ACM SIGKDD, pages 419?428.
ACM.
Go, A., R. Bhayani, and L. Huang. 2009. Twit-
ter sentiment classification using distant supervi-
sion. Technical report, Stanford Digital Library
Technologies Project.
Landis, J.R. and G.G. Koch. 1977. The measurement
of observer agreement for categorical data. Biomet-
rics, pages 159?174.
LingPipe. 2008. LingPipe 3.9.1.
http://alias-i.com/lingpipe.
Pang, B. and L. Lee. 2004. A sentimental educa-
tion: Sentiment analysis using subjectivity summa-
rization based on minimum cuts. In Proceedings of
the ACL, volume 2004.
43
Pang, B., L. Lee, and S. Vaithyanathan. 2002. Thumbs
up?: sentiment classification using machine learn-
ing techniques. In Proceedings of the ACL, pages
79?86. Association for Computational Linguistics.
Polikar, R. 2006. Ensemble based systems in deci-
sion making. IEEE Circuits and systems magazine,
6(3):21?45.
Prentice, S. and E. Huffman. 2008. Social Medias
New Role In Emergency Management. Idaho Na-
tional Laboratory, pages 1?5.
Riloff, E. and J. Wiebe. 2003. Learning extraction pat-
terns for subjective expressions. In Proceedings of
the 2003 conference on Empirical methods in natu-
ral language processing, pages 105?112.
Riloff, E., J. Wiebe, and T. Wilson. 2003. Learning
subjective nouns using extraction pattern bootstrap-
ping. In Proceedings of the 7th Conference on Nat-
ural Language Learning, pages 25?32.
Riloff, E., S. Patwardhan, and J. Wiebe. 2006. Feature
subsumption for opinion analysis. In Proceedings
of the 2006 Conference on Empirical Methods in
Natural Language Processing, pages 440?448. As-
sociation for Computational Linguistics.
Sheng, V.S., F. Provost, and P.G. Ipeirotis. 2008. Get
another label? Improving data quality and data min-
ing using multiple, noisy labelers. In Proceeding of
the 14th ACM SIGKDD international conference on
Knowledge discovery and data mining, pages 614?
622. ACM.
Wiebe, J. and E. Riloff. 2005. Creating subjective
and objective sentence classifiers from unannotated
texts. Computational Linguistics and Intelligent
Text Processing, pages 486?497.
Wiebe, J.M., RF Brace, and T.P. O?Hara. 1999. Devel-
opment and use of a gold-standard data set for sub-
jectivity classifications. In Proceedings of the ACL,
pages 246?253. Association for Computational Lin-
guistics.
Wilson, T., J. Wiebe, and P. Hoffmann. 2005. Rec-
ognizing contextual polarity in phrase-level senti-
ment analysis. In EMNLP, page 354. Association
for Computational Linguistics.
Witten, Ian H. and Eibe Frank. 2005. Data Mining:
Practical machine learning tools and techniques.
Morgan Kaufmann.
44
