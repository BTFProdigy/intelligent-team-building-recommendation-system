Proceedings of the COLING/ACL 2006 Interactive Presentation Sessions, pages 33?36,
Sydney, July 2006. c?2006 Association for Computational Linguistics
An Intermediate Representation for
the Interpretation of Temporal Expressions
Pawe? Mazur and Robert Dale
Centre for Language Technology
Macquarie University
NSW 2109 Sydney Australia
{mpawel,rdale}@ics.mq.edu.au
Abstract
The interpretation of temporal expressions
in text is an important constituent task for
many practical natural language process-
ing tasks, including question-answering,
information extraction and text summari-
sation. Although temporal expressions
have long been studied in the research
literature, it is only more recently, with
the impetus provided by exercises like
the ACE Program, that attention has been
directed to broad-coverage, implemented
systems. In this paper, we describe our
approach to intermediate semantic repre-
sentations in the interpretation of temporal
expressions.
1 Introduction
In this paper, we are concerned with the interpreta-
tion of temporal expressions in text: that is, given
an occurrence in a text of an expression like that
marked in italics in the following example, we
want to determine what point in time is referred
to by that expression.
(1) We agreed that we would meet at 3pm on
the first Tuesday in November.
In this particular case, we need to make use of the
context of utterance to determine which November
is being referred to; this might be derived on the
basis of the date stamp of the document contain-
ing this sentence. Then we need to compute the
full time and date the expression corresponds to.
If the utterance in (1) was produced, say, in July
2006, then we might expect the interpretation to be
equivalent to the ISO-format expression 2006-11-
07T15:00.1 The derivation of such interpretation
was the focus of the TERN evaluations held under
the ACE program. Several teams have developed
systems which attempt to interpret both simple and
much more complex temporal expressions; how-
ever, there is very little literature that describes in
any detail the approaches taken. This may be due
to a perception that such expressions are relatively
easy to identify and interpret using simple pat-
terns, but a detailed analysis of the range of tem-
poral expressions that are covered by the TIDES
annotation guidelines demonstrates that this is not
the case. In fact, the proper treatment of some tem-
poral expressions requires semantic and pragmatic
processing that is considerably beyond the state of
the art.
Our view is that it is important to keep in mind
a clear distinction between, on the one hand, the
conceptual model of temporal entities that a partic-
ular approach adopts; and, on the other hand, the
specific implementation of that model that might
be developed for a particular purpose. In this pa-
per, we describe both our underlying framework,
and an implementation of that framework. We be-
lieve the framework provides a basis for further
development, being independent of any particular
implementation, and able to underpin many dif-
ferent implementations. By clearly separating the
underlying model and its implementation, this also
opens the door to clearer comparisons between
different approaches.
We begin by summarising existing work in the
area in Section 2; then, in Section 3, we describe
our underlying model; in Section 4, we describe
how this model is implemented in the DANTE
1Clearly, other aspects of the document context might
suggest a different year is intended; and we might also add
the time zone to this value.
33
system.2
2 Relation to Existing Work
The most detailed system description in the pub-
lished literature is that of the Chronos system from
ITC-IRST (Negri and Marseglia, 2005). This sys-
tem uses a large set of hand-crafted rules, and
separates the recognition of temporal expressions
from their interpretation. The ATEL system de-
veloped by the Center for Spoken Language Re-
search (CSLR) at University of Colorado (see (Ha-
cioglu et al, 2005)) uses SVM classifiers to detect
temporal expressions. Alias-i?s LingPipe also re-
ported results for extraction, but not interpretation,
of temporal expressions at TERN 2004.
In contrast to this collection of work, which
comes at the problem from a now-traditional in-
formation extraction perspective, there is also of
course an extensive prior literature on the semantic
of temporal expressions. Some more recent work
attempts to bridge the gap between these two re-
lated enterprises; see, for example, Hobbs and Pan
(2004).
3 The Underlying Model
We describe briefly here our underlying concep-
tual model; a more detailed description is provided
in (Dale and Mazur, 2006).
3.1 Processes
We take the ultimate goal of the interpretation of
temporal expressions to be that of computing, for
each temporal expression in a text, the point in
time or duration that is referred to by that expres-
sion. We distinguish two stages of processing:
Recognition: the process of identifying a tempo-
ral expression in text, and determining its ex-
tent.
Interpretation: given a recognised temporal ex-
pression, the process of computing the value
of the point in time or duration referred to by
that expression.
In practice, the processes involved in determining
the extent of a temporal expression are likely to
make use of lexical and phrasal knowledge that
mean that some of the semantics of the expres-
sion can already be computed. For example, in
2DANTE stands for Detection and Normalisation of Tem-
poral Expressions.
order to identify that an expression refers to a day
of the week, we will in many circumstances need
to recognize whether one of the specific expres-
sions {Monday, Tuesday, ... Sunday} has been
used; but once we have recognised that a specific
form has been used, we have effectively computed
the semantics of that part of the expression.
To maintain a strong separation between recog-
nition and interpretation, one could simply recom-
pute this partial information in the interpretation
phase; this would, of course, involve redundancy.
However, we take the view that the computation
of partial semantics in the first step should not be
seen as violating the strong separation; rather, we
distinguish the two steps of the process in terms of
the extent to which they make use of contextual in-
formation in computing values. Then, recognition
is that phase which makes use only of expression-
internal information and preposition which pre-
cedes the expression in question; and interpreta-
tion is that phase which makes use of arbitrarily
more complex knowledge sources and wider doc-
ument context. In this way, we motivate an in-
termediate form of representation that represents a
?context-free? semantics of the expression.
The role of the recognition process is then to
compute as much of the semantic content of a tem-
poral expression as can be determined on the basis
of the expression itself, producing an intermediate
partial representation of the semantics. The role of
the interpretation process is to ?fill in? any gaps in
this representation by making use of information
derived from the context.
3.2 Data Types
We view the temporal world as consisting of two
basic types of entities, these being points in time
and durations; each of these has an internal hi-
erarchical structure. It is convenient to represent
these as feature structures like the following:3
(2) ?
?
?
?
?
?
?
?
?
?
?
point
DATE
?
?
DAY 11
MONTH 6
YEAR 2005
?
?
TIME
?
?
HOUR 3
MINUTE 00
AMPM pm
?
?
?
?
?
?
?
?
?
?
?
?
?
3For reasons of limitations of space, we will ignore dura-
tions in the present discussion; their representation is similar
in spirit to the examples provided here.
34
Our choice of attribute?value matrices is not ac-
cidental; in particular, some of the operations we
want to carry out on the interpretations of both
partial and complete temporal expressions can be
conveniently expressed via unification, and this
representation is a very natural one for such op-
erations.
This same representation can be used to indi-
cate the interpretation of a temporal expression at
various stages of processing, as outlined below. In
particular, note that temporal expressions differ in
their explicitness, i.e. the extent to which the in-
terpretation of the expression is explicitly encoded
in the temporal expression; they also differ in their
granularity, i.e. the smallest temporal unit used
in defining that point in time or duration. So, for
example, in a temporal reference like November
11th, interpretation requires us to make explicit
some information that is not present (that is, the
year); but it does not require us to provide a time,
since this is not required for the granularity of the
expression.
In our attribute?value matrix representation, we
use a special NULL value to indicate granularities
that are not required in providing a full interpre-
tation; information that is not explicitly provided,
on the other hand, is simply absent from the rep-
resentation, but may be added to the structure dur-
ing later stages of interpretation. So, in the case
of an expression like November 11th, the recogni-
tion process may construct a partial interpretation
of the following form:
(3) ?
?
?
?
point
DATE
[
DAY 11
MONTH 6
]
TIME NULL
?
?
?
?
The interpretation process may then monotoni-
cally augment this structure with information from
the context that allows the interpretation to be
made fully explicit:
(4) ?
?
?
?
?
?
point
DATE
?
?
DAY 11
MONTH 6
YEAR 2006
?
?
TIME NULL
?
?
?
?
?
?
The representation thus very easily accommodates
relative underspecification, and the potential for
further specification by means of unification, al-
though our implementation also makes use of
other operations applied to these structures.
4 Implementation
4.1 Data Structures
We could implement the model above directly in
terms of recursive attribute?value structures; how-
ever, for our present purposes, it turns out to
be simpler to implement these structures using a
string-based notation that is deliberately consis-
tent with the representations for values used in the
TIMEX2 standard (Ferro et al, 2005). In that no-
tation, a time and date value is expressed using the
ISO standard; uppercase Xs are used to indicate
parts of the expression for which interpretation is
not available, and elements that should not receive
a value are left null (in the same sense as our NULL
value above). So, for example, in a context where
we have no way of ascertaining the century be-
ing referred to, the TIMEX2 representation of the
value of the underlined temporal expression in the
sentence We all had a great time in the ?60s is sim-
ply VAL="XX6".
We augment this representation in a number
of ways to allow us to represent intermediate
values generated during the recognition process;
these extensions to the representation then serve
as means of indicating to the interpretation process
what operations need to be carried out.
4.1.1 Representing Partial Specification
We use lowercase xs to indicate values that the
interpretation process is required to seek a value
for; and by analogy, we use a lowercase t rather
than an uppercase T as the date?time delimiter in
the structure to indicate when the recogniser is not
able to determine whether the time is am or pm.
This is demonstrated in the following examples;
T-VAL is the attribute we use for intermediate
TIMEX values produced by the recognition pro-
cess.
(5) a. We?ll see you in November.
b. T-VAL="xxxx-11"
(6) a. I expect to see you at half past eight.
b. T-VAL="xxxx-xx-xxt08:59"
(7) a. I saw him back in ?69.
b. T-VAL="xx69"
(8) a. I saw him back in the ?60s.
b. TVAL="xx6"
4.1.2 Representing Relative Specification
To handle the partial interpretation of relative date
and time expressions at the recognition stage, we
35
use two extensions to the notation. The first pro-
vides for simple arithmetic over interpretations,
when combined with a reference date determined
from the context:
(9) a. We?ll see you tomorrow.
b. T-VAL="+0000-00-01"
(10) a. We saw him last year.
b. T-VAL="-0001"
The second provides for expressions where a more
complex computation is required in order to deter-
mine the specific date or time in question:
(11) a. We?ll see him next Thursday.
b. T-VAL=">D4"
(12) a. We saw him last November.
b. T-VAL="<M11"
4.2 Processes
For the recognition process, we use a large collec-
tion of rules written in the JAPE pattern-matching
language provided within GATE (see (Cunning-
ham et al, 2002)). These return intermediate val-
ues of the forms described in the previous section.
Obviously other approaches to recognizing tem-
poral expressions and producing their intermedi-
ate values could be used; in DANTE, there is also
a subsequent check carried out by a dependency
parser to ensure that we have captured the full ex-
tent of the temporal expression.
DANTE?s interpretation process then does the
following. First it determines if the candidate tem-
poral expression identified by the recogniser is in-
deed a temporal expression; this is to deal with
cases where a particular word or phrase annotated
by the recognizer (such as time) can have both
temporal or non-temporal interpretations. Then,
for each candidate that really is a temporal expres-
sion, it computes the interpretation of that tempo-
ral expression.
This second step involves different operations
depending on the type of the intermediate value:
? Underspecified values like xxxx-11 are
combined with the reference date derived
from the document context, with temporal di-
rectionality (i.e., is this date in the future or
in the past?) being determined using tense
information from the host clause.
? Relative values like +0001 are combined
with the reference date in the obvious man-
ner.
? Relative values like >D4 and <M11 make
use of special purpose routines that know
about arithmetic for days and months, so that
the correct behaviour is observed.
5 Conclusions
We have sketched an underlying conceptual model
for temporal expression interpretation, and pre-
sented an intermediate semantic representation
that is consistent with the TIMEX2 standard. We
are making available a corpus of examples tagged
with these intermediate representations; this cor-
pus is derived from the nearly 250 examples in
the TIMEX2 specification, thus demonstrating the
wide coverage of the representation. Our hope is
that this will encourage collaborative development
of tools based on this framework, and further de-
velopment of the conceptual framework itself.
6 Acknowledgements
We acknowledge the support of DSTO, the Aus-
tralian Defence Science and Technology Organi-
sation, in carrying out the work described here.
References
H. Cunningham, D. Maynard, K. Bontcheva, and
V. Tablan. 2002. GATE: A framework and graphical
development environment for robust NLP tools and
applications. In Proceedings of the 40th Anniver-
sary Meeting of the ACL.
R. Dale and P. Mazur. 2006. Local semantics in the
interpretation of temporal expressions. In Proceed-
ings of the Coling/ACL2006 Workshop on Annotat-
ing and Reasoning about Time and Events.
L. Ferro, L. Gerber, I. Mani, B. Sundheim, and G. Wil-
son. 2005. TIDES 2005 Standard for the Anno-
tation of Temporal Expressions. Technical report,
MITRE, September.
K. Hacioglu, Y. Chen, and B. Douglas. 2005. Au-
tomatic Time Expression Labeling for English and
Chinese Text. In Alexander F. Gelbukh, editor,
Computational Linguistics and Intelligent Text Pro-
cessing, 6th International Conference, CICLing?05,
LNCS, pages 548?559. Springer.
Jerry R. Hobbs and Feng Pan. 2004. An ontology
of time for the semantic web. ACM Transactions
on Asian Language Information Processing, 3(1),
March.
M. Negri and L. Marseglia. 2005. Recognition and
Normalization of Time Expressions: ITC-irst at
TERN 2004. Technical Report WP3.7, Information
Society Technologies, February.
36
Proceedings of the Workshop on Annotating and Reasoning about Time and Events, pages 9?16,
Sydney, July 2006. c?2006 Association for Computational Linguistics
Local Semantics in the Interpretation of Temporal Expressions
Robert Dale? and Pawe? Mazur?
Centre for Language Technology
Macquarie University, NSW 2109, Sydney, Australia
?Robert.Dale@mq.edu.au,
?mpawel@ics.mq.edu.au
Abstract
Work on the interpretation of temporal ex-
pressions in text has generally been pur-
sued in one of two paradigms: the for-
mal semantics approach, where an attempt
is made to provide a well-grounded theo-
retical basis for the interpretation of these
expressions, and the more pragmatically-
focused approach represented by the de-
velopment of the TIMEX2 standard, with
its origins in work in information extrac-
tion. The former emphasises formal ele-
gance and consistency; the latter empha-
sises broad coverage for practical applica-
tions. In this paper, we report on the de-
velopment of a framework that attempts
to integrate insights from both perspec-
tives, with the aim of achieving broad cov-
erage of the domain in a well-grounded
manner from a formal perspective. We
focus in particular on the development
of a compact notation for representing
the semantics of underspecified tempo-
ral expressions that can be used to pro-
vide component-level evaluation of sys-
tems that interpret such expressions.
1 Introduction
Obtaining a precise semantic representation for ut-
terances related to time is interesting both from a
theoretical point of view, as there are many com-
plex phenomena to be addressed, and for purely
practical applications such as information extrac-
tion, question answering, or the ordering of events
on a timeline.
In the literature, work on the interpretation of
temporal expressions comes from two directions.
On the one hand, work in formal semantics (see,
for example, (Pratt and Francez, 2001)) aims to
provide a formally well-grounded approach to the
representation of the semantics of these expres-
sions, but such approaches are difficult to scale
up to the broad coverage required for practical ap-
plications; on the other hand, work that has its
roots in information extraction, while it empha-
sizes broad coverage, often results in the use of
ad hoc representations. The most developed work
in this direction is focused around the TimeML
markup language1 (described, for example, in
(Pustejovsky et al, 2003) and in the collection
edited by Mani et al (2005)).
Some work attempts to bring these two tradi-
tions together: notable in this respect is Schilder?s
(2004) work on temporal expressions in German
newswire text, and Hobbs and Pan?s (2004) work
on the axiomatisation in terms of OWL-Time. Sa-
quete et al (2002) present an approach that views
time expressions as anaphoric references.
We take the view that an important step to-
wards a truly broad coverage yet semantically
well-founded approach is to recognize that there
is a principled distinction to be made between the
interpretation of the semantics of a temporal ex-
pression devoid of its context of use, and the fuller
interpretation of that expression when the context
is taken into account. The first of these, which we
refer to here as the local semantics of a tempo-
ral expression, should be derivable in a composi-
tional manner from the components of the expres-
sion; determining the value of the second, which
we refer to as the global semantics of the expres-
sion, may require arbitrary inference and reason-
1Note that with TimeML one can annotate not only tem-
poral expressions, but also events and relations between
events and temporal expressions.
9
ing. Such a distinction is implicit in other ac-
counts: Schilder?s (2004) use of lambda expres-
sions allows representation of partially specified
temporal entities, and the temporary variables that
Negri and Marseglia (2005) construct during the
interpretation of a given temporal expression cap-
ture something of the same notion.
Our proposal here is to reify this level of inter-
mediate representation based on a formalization in
terms of recursive attribute?value matrices. This
has two distinct advantages: it provides a conve-
nient representation of underspecification, and it
leads naturally to a compositional approach to the
construction of the semantics of temporal expres-
sions via unification. We also provide a compact
encoding of this representation that is essentially
an extension of the existing TIMEX2 representa-
tion for temporal expressions. This brings the ad-
vantages that (a) existing tools and machinery for
evaluation can be used to determine how well a
given implementation derives these local semantic
values; and (b) performance in the determination
of local semantics and global semantics can be
tested independently. To ensure breadth of cover-
age, we have developed our representation on the
basis of the 256 examples of temporal expressions
provided in the TIMEX2 guidelines (Ferro et al,
2005). To make it possible to compare systems on
their performance in producing these intermediate
representations, we make available this set of ex-
amples annotated in-line with the representations
described here.
The rest of this paper is structured as follows. In
Section 2, we describe the architecture of DANTE,
a system which embodies our approach to the de-
tection and normalisation of temporal expressions;
in particular, we focus on the architecture em-
ployed in this approach, and on the particular lev-
els of representation that it makes use of. In Sec-
tion 3, we argue for an intermediate representa-
tional level that captures the semantics of temporal
expressions independent of the context of their in-
terpretation, and introduce the idea of using recur-
sive attribute?value matrices to represent the se-
mantics of temporal expressions. In Section 4, we
provide an encoding of these attribute?value ma-
trices in a compact string-based representation that
is effectively an extension of the ISO-based date?
time format representations used in the TIMEX2
standard, thus enabling easy evaluation of system
performance using existing tools. In Section 5
we discuss how the approach handles construc-
tions that contain one TIMEX embedded within
another. Finally, in Section 6 we draw some con-
clusions and point to future work.
2 The DANTE System
2.1 Processing Steps
In our work, our goal is very close to that for which
the TIMEX2 standard was developed: we want to
annotate each temporal expression in a document
with an indication of its interpretation, in the form
of an extended ISO-format date and time string,
normalised to some time zone. So, for example,
suppose we have the following italicised temporal
expression in an email message that was sent from
Sydney on Monday 10th April 2006:
(1) I expect that we will be able to present this
at the meeting on Friday at 11am.
In the context of our application, this temporal ex-
pression should be marked up as follows:
(2) <TIMEX2 VAL="2006-04-14T01:00GMT">
Friday at 11am</TIMEX2>
We have to do three things to achieve the desired
result:
? First, we have to detect the extent of the tem-
poral expression in the text. We refer to
this process as temporal expression recog-
nition.
? Then, we have to use information from the
document context to turn the recognized ex-
pression into a fully specified date and time.
We refer to this as temporal expression in-
terpretation.
? Finally, we have to normalise this fully spec-
ified date and time to a predefined time zone,
which in the case of the present example is
Greenwich Mean Time. We refer to this as
temporal expression normalisation.2
2Note that this third step is not required by the TIMEX
guidelines, but is an additional requirement in the context of
our particular application. This also means that our use of the
term ?normalisation? here is not consistent with the standard
usage in the TIMEX context; however, we would argue that
our distinction between interpretation and normalisation de-
scribes more accurately the nature of the processes involved
here.
10
We observe that, at the time that the extent of a
temporal expression within a text is determined, it
is also possible to derive some semantic represen-
tation of that expression irrespective of the wider
context within which it needs to be interpreted:
for example, by virtue of having recognized an
occurrence of the string Friday in a text, we al-
ready know that this is a reference to a specific day
of the week. Most existing systems for the inter-
pretation of temporal expressions probably make
use of such a level of representation. Schilder?s
(2004) approach captures the semantics here in
terms of a lambda expression like ?xFriday(x);
Negri and Marseglia (2005) capture information
at this stage of processing via a collection of tem-
porary attributes.
In our system, each of the three steps above cor-
responds to a distinct processing component in the
DANTE system architecture. These components
communicate in terms of a number of distinct rep-
resentations, which we now describe.
2.2 The Text
This level of representation corresponds simply to
the strings that constitute temporal expressions in
text. These are understood to be linguistic con-
structions whose referents are entities in the tem-
poral domain: either points in time, or periods of
time. In the above example, the text representation
is simply the string Friday at 11am.
2.3 Local Semantics
We use this term to refer to a level of representa-
tion that corresponds to the semantic content that
is derivable directly from the text representation;
in the case of temporal expressions that are argu-
ments to prepositions, this includes the interpreta-
tion of the preposition. Such representations are
often incomplete, in that they do not denote a par-
ticular point or period on the time line; however,
usually they do partially specify points or peri-
ods, and constrain the further interpretation of the
string.
2.4 In-Document Semantics
We use this term to refer to the fully explicit in-
terpretation of the text string, to the extent that
this can be determined from the document itself,
in conjunction with any metadata associated with
the document. This level of representation corre-
sponds to the information encoded in the attributes
of the TIMEX2 tag as defined in the TIMEX
guidelines.
2.5 Global Semantics
The TIMEX guidelines do not have anything to
say beyond the representation described in the pre-
vious section. In our application, however, we
are also required to normalise all temporal expres-
sions to a specific time zone. This requires that
some further temporal arithmetic be applied to the
semantics of the found expressions. To calculate
this, we simply have to determine the difference
between the time zone of the document containing
the temporal reference and the target time zone,
here Greenwich Mean Time. The document may
not always be explicitly marked with information
about the time zone of its creation; in such cases,
this has to be inferred from information about the
location of the author or sender of the message.
3 Representing Temporal Expressions
In this section, we describe a conceptualisation of
the semantics of temporal expressions in terms of
recursive attribute?value matrices.
3.1 Temporal Entities
As is conventional in this area of research, we view
the temporal world as consisting of two basic types
of entities, these being points in time and dura-
tions; each of these has an internal hierarchical
structure. We can represent these in the following
manner:3
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
point
TIMEANDDATE
?
?
?
?
?
?
?
?
?
?
?
TIME
?
?
HOUR 15
MINS 00
SECS 00
?
?
DATE
?
?
?
?
DAY
[
DAYNAME D4
DAYNUM 13
]
MONTH 5
YEAR 2006
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
ZONE Z
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
The example above corresponds to the semantics
of the temporal expression 3pm Thursday 13th
May 2006 GMT; in the ISO date and time format
used in the TIMEX2 standard, this would be writ-
ten as follows:
(3) 2006-05-13T15:00:00Z
3For reasons of limitations of space, we will ignore dura-
tions in the present discussion; their representation is similar
in spirit to the examples provided here.
11
Each atomic feature in the attribute?value struc-
ture thus corresponds to a specific position in the
ISO format date?time string.
3.2 Underspecification
Of course, very few temporal expressions in text
are fully specified. The attribute?value matrix rep-
resentation makes it easy to represent the con-
tent of underspecified temporal expressions. For
example, the content of the temporal expression
Thursday in a sentence like We will meet on
Thursday can be expressed as follows:
?
?
point
TIMEANDDATE
[
DATE
[
DAY
[
DAYNAME D4
]
]
]
?
?
On the other hand, a reference to 13th May in a
sentence like We will meet on 13th May has this
representation:
?
?
?
?
point
TIMEANDDATE
[
DATE
[
DAY
[
DAYNUM 13
]
MONTH 05
]]
?
?
?
?
In the cases just described, the semantic repre-
sentation corresponds to the entire temporal noun
phrase in each case. The same form of represen-
tation is easy to use in a compositional seman-
tic framework: each constituent in a larger tem-
poral expression provides a structure that can be
unified with the structures corresponding to the
other constituents of the expression to provide a
semantics for the expression as a whole. The val-
ues of the atomic elements in such an expression
come from the lexicon; multiword sequences that
are best considered atomic (such as, for example,
idioms) can also be assigned semantic representa-
tions in the same way. The value of a composite
structure is produced by unifying the values of its
constituents. Unifying the two structures above,
for example, gives us the following representation
for Thursday 13th May:4
?
?
?
?
?
?
point
TIMEANDDATE
?
?
?
DATE
?
?
?
DAY
[
DAYNAME D4
DAYNUM 13
]
MONTH 05
?
?
?
?
?
?
?
?
?
?
?
?
So, these structures provide a convenient repre-
sentation for what we have referred to above as the
4For simplicity here we assume that the syntactic structure
of such an expression is captured by the context-free grammar
rule ?NP? NP NP?. Other treatments are possible.
local semantics of a temporal expression, and cor-
respond to the output of the recognition stage of
our processing architecture.
3.3 Interpretation
We can now define the task of interpretation in
terms of the content of these structures. We as-
sume a granularity ordering over what we might
think of as the defining attributes in a temporal
representation:
(4) year > month > daynum > hour >
minute > second
These are, of course, precisely the elements that
are represented explicitly in an ISO date?time ex-
pression.
Interpretation of a partially specified temporal
expression then requires ensuring that there is a
value for every defining attribute that is of greater
granularity than the smallest granularity present in
the partially specified representation. We refer to
this as the granularity rule in interpretation.
In the case of the example in the previous sec-
tion, the granularity rule tells us that in order to
compute the full semantic value of the expression
we have to determine a value for YEAR, but not
for HOUR, MINS or SECS. This interpretation
process may require a variety of forms of reason-
ing and inference, as discussed below, and is quali-
tatively different from the computation of the local
semantics.
In the context of our application, a third stage,
the normalisation process, then requires taking the
further step of adding a ZONE attribute with a spe-
cific value, and translating the rest of the construc-
tion into this time zone if it represents a time in
another time zone.
4 A Compact Encoding
The structures described in the previous section
are relatively unwieldy in comparison to the sim-
ple string structures used as values in the TIMEX
standard. To enable easy evaluation of a sys-
tem?s ability to construct these intermediate se-
mantic representations, we would like to use a rep-
resentation that is immediately usable by existing
evaluation tools. To achieve this goal, we define
a number of extensions to the standard TIMEX2
string representation for values of the VAL at-
tribute; these extensions allow us to capture the
range of distinctions we need. To save space, we
12
also use these representations here to show the
coverage of the annotation scheme that results.
In our implementation, we represent the local
semantic content via an additional set of attributes
on TIMEX elements that mirrors exactly the set of
attributes used by the TIMEX2 standard: thus we
have T-VAL, T-ANCHOR VAL and so on. This
means that markup applied to a text distinguishes
intermediate and final semantic values, making it
possible to evaluate on just intermediate values,
just final values, or both. In what follows, we will
also use these intermediate attributes to make clear
which level of representation is under discussion.
4.1 Partially Specified Dates and Times
As noted above, many references to dates or times
are not fully specified in a text, with the result that
some parts will have to be computed from the con-
text during the interpretation stage. Typical exam-
ples are as follows:
(5) a. We?ll see you in November.
b. I expect to see you at half past eight.
In the recursive attribute?value notation intro-
duced above, the missing information in each case
corresponds to those features that are absent in the
structure as determined by the granularity rule in-
troduced in Section 3.3.
In our string-based notation, we use lowercase
xs to indicate those elements for which a value
needs to be found, but which are not available at
the time the local semantics are computed; and
we capture the granularity requirement by omit-
ting from the string representation those elements
that do not require a value.5 Table 1 provides a
range of examples that demonstrate various forms
of underspecification.
A lowercase x thus corresponds to a variable.
By analogy with this extension, we also use a low-
ercase t instead of the normal ISO date?time sep-
arator of T to indicate that the time may need fur-
ther specification: consider the third and fourth ex-
amples in Table 1, where it is not clear whether the
time specified is a.m. or p.m.
For partially-specified dates and times, the
string-based encoding thus both captures the local
5Note that this does not mean the same thing as the use
of an uppercase X in the TIMEX2 guidelines: an uppercase
X means effectively that no value can be determined. Of
course, if no value can be found for a variable element during
the interpretation process, then the corresponding lowercase
x will be replaced by an uppercase X .
String Representation
9 pm xxxx-xx-xxT21
11:59 pm xxxx-xx-xxT23:59
eleven in the morning xxxx-xx-xxT11:00
ten minutes to 3 xxxx-xx-xxt02:50
15 minutes after the hour xxxx-xx-xxtxx:15
the nineteenth xxxx-xx-19
January 3 xxxx-01-03
November xxxx-11
summer xxxx-SU
?63 xx63
the ?60s xx6
Table 1: Underspecified Dates and Times
semantic content of the temporal expression, and
provides a specification of what information the
interpretation process has to add. If the temporal
focus is encoded in the same form of representa-
tion, then producing the final interpretation is of-
ten a simple process of merging the two structures,
with the values already specified in the interme-
diate representation taking precedence over those
in the representation of the temporal focus. Ex-
pressions involving references to named months
require a decision as to whether to look for the
next or previous instance of the month, typically
determined by the tense of the major clause con-
taining the reference.
4.2 Representing Weekdays
In recognition that the year-based calendar and
the week-based calendar are not aligned, our in-
termediate representation embodies a special case
borrowed from the TIMEX2 notation for days of
the week that require context for their specifica-
tion. Consider example (6a), uttered on Friday
14th April 2006; the intermediate semantic repre-
sentation is provided in example (6b), and the final
interpretation is provided in example (6c).
(6) a. We left on Tuesday.
b. T-VAL="D2"
c. VAL="2006-04-11"
This is not as convenient as the ISO-like encod-
ing, and requires special case handling in the inter-
preter; however, a more comprehensive single rep-
resentation would require abandoning the ISO-like
encoding and the benefits it brings, so we choose
to use the two formats in concert.
13
String Representation
today +0000-00-00
tomorrow +0000-00-01
yesterday ?0000-00-01
five days ago ?0000-00-05
last month ?0000-01
last summer ?0001-SU
two weeks ago ?0000-W02
this weekend +0000-W00-WE
this year +0000
three years ago ?0003
the next century +01
Table 2: Relative dates in ISO-like format.
The same notation supports references to parts
of specific days, as presented in example (7).
(7) a. We left on Tuesday morning.
b. T-VAL="D2TMO"
c. VAL="2006-04-11TMO"
4.3 Relative Dates and Times
A relative date or time reference is one that re-
quires a calendar arithmetic operation to be carried
out with respect to some temporal focus in the text.
Typical examples are as follows:
(8) a. We?ll see him tomorrow.
b. We saw him last year.
c. We?ll see him next Thursday.
d. We saw him last November.
We distinguish three subtypes here: relative dates
and times whose local semantics can be expressed
in an ISO-like format; relative references to days
and months by name; and less specific references
to past, present and future times.
For the first of these, we extend the ISO format
with a preceding ?+? or ??? to indicate the direc-
tion from the current temporal focus. Some exam-
ples of dates are provided in Table 2, and some ex-
amples of date?time combinations are provided in
Table 3. Note the both the date and time elements
in a relative reference can be independently either
absolute or relative: compare the representations
for in six hours time and at 6am today.
This representation leads to a very intuitive
coordinate-based arithmetic for computing the fi-
nal semantic interpretation of a given expression:
the interpreter merely adds the temporal focus and
String Representation
sixty seconds later +0000-00-00T+00:00:60
five minutes ago +0000-00-00T?00:05
in six hours time +0000-00-00T+06:00
at 6 a.m. today +0000-00-00T06:00
last night ?0000-00-01TNI
Table 3: Relative times in ISO-like format.
String Representation
last Monday <D1
next Wednesday >D3
last March <M03
next March >M03
Table 4: Relative References to Days and Months
the intermediate value element-by-element from
the smallest unit upwards, using carry arithmetic
where appropriate.
Relative references to named days and months
require a different treatment, in line with the no-
tation introduced in Section 4.2. Table 4 shows
the intermediate values used for a number of such
expressions.
A further variation on this notation also allows
us to specify a local semantics for expressions like
the first Tuesday in temporal expressions like the
first Tuesday in July, or like the last year in the last
year of the millenium; see Table 5. To produce
final interpretations of these, the interpreter has to
construct the set of elements that correspond to the
head noun (for example, a list of the ISO dates that
correspond to the Tuesdays in a given month), and
then select the nth element from that set.
5 Handling Embedded Constructions
The TIMEX specification allows for the embed-
ding of one TIMEX within another. Consider an
example like the following:
String Representation
the first Tuesday 1D2
the second day 2D
the last Tuesday $D2
the last day $D
Table 5: Ordinally-specified Elements
14
Figure 1: The syntactic structure of an embedded
TIMEX
(9) <TIMEX2>the first Tuesday
in<TIMEX2>July</TIMEX2></TIMEX2>
The bulk of the embedded TIMEXs provided as
examples in the TIMEX guidelines are, like this
one, of the form [NP PP], where the head NP
contains a TIMEX, and the PP contains another
TIMEX that is modified by the head NP. Syntac-
tically, these structures are of the form shown in
Figure 1.
For our purposes, it is convenient to first think
of these structures as consisting of three, rather
than two, TIMEXs, corresponding to the three
subscripted NP nodes in this tree. The outermost
TIMEX, corresponding to NP0, is the one whose
value we are ultimately interested in; this is com-
puted by combining the semantics of the two con-
stituent TIMEXs, corresponding to NP1 and NP2,
and the preposition indicates how this combination
should be carried out.
Structurally, the recognizer may first determine
that there are two separate TIMEXs here:
(10) <TIMEX2>the first
Tuesday</TIMEX2> in
<TIMEX2>July</TIMEX2>
Each of these TIMEXs can be given the appro-
priate local semantics by the recognizer; the rec-
ognizer then reorganizes this structure to mirror
the embedding required by the TIMEX guidelines,
to produce the structure shown in example (10)
above; effectively, NP1 disappears as a distinct
constituent, and its intermediate semantics are in-
herited by NP0.
We then leave it to the interpreter to combine the
intermediate semantics of NP0 with the intermedi-
ate semantics of NP2 to produce a final semantics
for NP0: schematically, we have
(11) NP0(VAL) = NP0(T-VAL) ? NP2(T-VAL)
where ??? is the combinatory operation that corre-
sponds to the preposition used. The operation re-
quired is specified by the recognizer as the value of
the temporary attribute T-REL, which represents
the semantics of the preposition.
The following three examples demonstrate a va-
riety of possibilities, showing both the intermedi-
ate (T-VAL) and final (VAL) semantic interpreta-
tions in each case:
(12) <TIMEX2 VAL="1999" T-VAL="$Y"
T-REL="OF">the last year of
<TIMEX2 VAL="1" T-VAL="+0">this
millennium</TIMEX2></TIMEX2>
(13) <TIMEX2 VAL="1998-01-31"
T-VAL="$D" T-REL="OF">the last
day of <TIMEX2 VAL="1998-01"
T-VAL="xxxx-01">January
</TIMEX2></TIMEX2>
(14) <TIMEX2 VAL="1998-01-31"
T-VAL="$D" T-REL="OF">the last
day of <TIMEX2 VAL="1998-01"
T-VAL="1998-01">January
1998</TIMEX2></TIMEX2>
Note that, when the embedded TIMEX is fully
specified, as in the last example here, it would be
possible for the recognizer to calculate the final
value of the whole expression; however, for con-
sistency we leave this task to the interpreter.
The semantics of the indicated T-REL depend
on the types of its arguments. In the cases above,
for example, the operation is one of selecting an
ordinally-specified element of a list; but where the
entity is a period rather than a point, as in the first
six months of 2005, the operation is one of delim-
iting the period in question.
Of course, other forms of embedding are pos-
sible. In appositions, the syntactic structure can
be thought of as [NP NP]; as in the case of em-
bedded PPs, the TIMEX representation effectively
promotes the semantics of the first NP to be the se-
mantics of the whole. Again, we show both VAL
and T-VAL values here, and the relevant T-REL.
(15) <TIMEX2 VAL="1998-12-29"
T-VAL="xxxx-xx-xx"
15
T-REL="EQUAL">my birthday,
<TIMEX2 VAL="1998-12-29"
T-VAL="xxxx-12-29">December
twenty-ninth</TIMEX2></TIMEX2>
(16) <TIMEX2 VAL="196" T-VAL="196"
T-REL="EQUAL">the 1960s, <TIMEX2
VAL="196" T-VAL="PXD">the days of
free love</TIMEX2></TIMEX2>
Here, the fact that the T-REL is EQUAL causes
the interpreter to combine the values of the two
TIMEXs, with points taking precedence over du-
rations.
6 Conclusions
In this paper, we have argued that, in the context of
interpreting temporal expressions, there is value in
identifying a level of semantic representation that
corresponds to the meaning of these expressions
outside of any particular document context. This
idea is not in itself new, and many existing sys-
tems appear to make use of such representations.
However, we have proposed that this level of rep-
resentation be made explicit; and by providing an
encoding of this level of representation that is an
extension of the existing TIMEX2 annotations in
terms of element attributes and their values, we
make it possible to assess the performance of sys-
tems with respect to intermediate values, final val-
ues, or both, using standard evaluation tools.
We have developed the representation described
here on the basis of the set of 265 examples pro-
vided in the TIMEX2 guidelines (Ferro et al,
2005), and this set of annotated examples is avail-
able to the community.6 The approach described
here is implemented in DANTE, a text process-
ing system which produces normalised values for
all TIMEXs found in a document. The recogni-
tion component of the system, which constructs
the intermediate representations described here, is
implemented via just over 200 rules written in the
JAPE language:7 time expressions are thus recog-
nised using finite state patterns, but we then ap-
ply a syntactic check, using the Connexor parser,
to ensure that we have identified the full extent of
each temporal expression, appropriately extending
the extent when this is not the case.
6See www.clt.mq.edu.au/timex.
7JAPE is provided as part of the GATE tools (Cunning-
ham et al, 2002).
We are currently testing this representation and
its means of derivation against the data from the
2004 TERN competition. Our results are broadly
comparable to those achieved by other systems
(for example, Chronos or TempEx), though they
can not be compared directly since the reported
evaluations at the TERN competition use data
which are not public and therefore not available
to us.
7 Acknowledgements
We acknowledge the support of the Defence Sci-
ence and Technology Organisation in carrying out
the work described here.
References
H. Cunningham, D. Maynard, K. Bontcheva, and
V. Tablan. 2002. GATE: A framework and graphical
development environment for robust NLP tools and
applications. In Proceedings of the 40th Anniver-
sary Meeting of the ACL.
L. Ferro, L. Gerber, I. Mani, B. Sundheim, and G. Wil-
son. 2005. TIDES 2005 Standard for the Anno-
tation of Temporal Expressions. Technical report,
MITRE, September.
J. R. Hobbs and F. Pan. 2004. An ontology of time for
the semantic web. ACM Transactions on Asian Lan-
guage Information Processing, 3(1):66?85, March.
I. Mani, J. Pustejovsky, and R. Gaizauskas, editors.
2005. The Language of Time. Oxford Univ. Press.
M. Negri and L. Marseglia. 2005. Recognition and
normalization of time expressions: ITC-IRST at
TERN 2004. Technical Report WP3.7, Information
Society Technologies, February.
I. Pratt and N. Francez. 2001. Temporal prepositions
and temporal generalized quantifiers. Linguistics
and Philosophy, 24:187?222.
J. Pustejovsky, J. Castan?o, R. Ingria, R. Gaizauskas
R. Saur, A. Setzer, and G. Katz. 2003. TimeML:
Robust Specification of Event and Temporal Expres-
sions in Text. In IWCS-5, Fifth International Work-
shop on Computational Semantics.
E. Saquete, P. Mart??nez-Barco, and R. Mun?oz. 2002.
Recognising and Tagging Temporal Expressions in
Spanish. In Proc. of LREC?02: Workshop on Anno-
tation Standards for Temporal Information in Natu-
ral Language, Las Palmas, Spain.
F. Schilder. 2004. Extracting meaning from tempo-
ral nouns and temporal prepositions. ACM Trans-
actions on Asian Language Information Processing,
3(1):33?50, March.
16
Proceedings of the 22nd International Conference on Computational Linguistics (Coling 2008), pages 553?560
Manchester, August 2008
What?s the Date?
High Accuracy Interpretation of Weekday Names
Pawe? Mazur
1,2
1
Institute of Applied Informatics,
Wroc?aw University of Technology
Wyb. Wyspia?nskiego 27,
50-370 Wroc?aw, Poland
Pawel.Mazur@pwr.wroc.pl
Robert Dale
2
2
Centre for Language Technology,
Macquarie University,
NSW 2109, Sydney, Australia
{mpawel,rdale}@ics.mq.edu.au
Abstract
In this paper we present a study on the
interpretation of weekday names in texts.
Our algorithm for assigning a date to a
weekday name achieves 95.91% accuracy
on a test data set based on the ACE
2005 Training Corpus, outperforming pre-
viously reported techniques run against
this same data. We also provide the first
detailed comparison of various approaches
to the problem using this test data set, em-
ploying re-implementations of key tech-
niques from the literature and a range of
additional heuristic-based approaches.
1 Introduction
Many temporal expressions in text are underspeci-
fied, requiring contextually-sourced information in
order to determine their correct interpretation. In
some cases, it is sufficient to determine what is
sometimes called the temporal focus, so that the
precise location of a relative temporal expression
on a timeline can be determined with respect to
this ?time of speaking?. Consider, for example, ex-
pressions like the following:
(1) three days ago
(2) last Monday
(3) in two weeks time
Once we know the temporal focus, calculation of
the temporal location referred to in each of these
cases is straightforward, since the temporal ex-
pressions themselves explicitly indicate what we
c
? 2008. Licensed under the Creative Commons
Attribution-Noncommercial-Share Alike 3.0 Unported li-
cense (http://creativecommons.org/licenses/by-nc-sa/3.0/).
Some rights reserved.
will call the direction of offset (here, respectively,
past, past and future). However, in other cases
there is no explicit indication of the direction of
offset from the temporal focus. This is most ob-
viously the case when bare expressions based on
calendar cycles?i.e., weekday names and month
names?are used, as in the following example:
(4) Jones met with Defense Minister Paulo Portas
on Tuesday and will meet Foreign Minis-
ter Antonio Martins da Cruz before leav-
ing Portugal Wednesday.
Here, the proper interpretation of the references
to Tuesday and Wednesday requires at the least a
correct syntactic analysis of the sentence, in order
to locate the controlling verb for each weekday
name. The tense of this verb can then be used
to determine the direction?either in the past or in
the future?in which we need to look to establish
the fully specified date referred to. In the case of
example (4), this means determining that Tuesday
is in the scope of the verb met, and that Wednes-
day is in the scope of the verb group will meet.
As we note below, it turns out that there are cases
where even the controlling verb does not provide
sufficient information to determine the direction of
offset. But even in those cases where the tense
of the verb does provide the relevant information,
there are two problems. First, especially when the
sentences considered are complex, there is a non-
negligible likelihood that the analysis returned by a
parser may not be correct, and this is especially the
case when the sentences in question contain struc-
tures such as prepositional phrases: the attachment
of these is notoriously a source of ambiguity, and
they just happen to often be the hosts to temporal
expressions. Second, even if a parser provides the
correct analysis, parsing technology is still compu-
553
tationally expensive to use when processing very
large bodies of text; if we are interested in time-
stamping events described in significant volumes
of data, we would prefer to have a faster, more
heuristic-based approach.
In this paper, we explore the development of a
fast and high accuracy algorithm for the interpre-
tation of weekday names, in particular with regard
to determining the direction of offset to be used
in the temporal interpretation of these expressions:
in essence, how can we determine whether the day
referred to is in the past or in the future?
The rest of the paper is structured as follows. In
Section 2 we present some general observations on
the interpretation of weekday names in text. Sec-
tion 3 provides a review of related work. In Sec-
tion 4 we describe the corpus used for evaluation,
and in Section 5 we describe in detail the various
algorithms we evaluated. Section 6 compares the
results of the various algorithms when applied to
the corpus, and Section 7 provides an error anal-
ysis. Finally, in Section 8 we draw some conclu-
sions and point to future work.
2 The Problem
The interpretation of relative temporal expres-
sions
1
can be seen as a two step process: (1) first
we have to determine a reference point for the in-
terpretation of the expression;
2
(2) then we have to
calculate the actual position of the referred-to time
on the timeline.
Once we have the reference point determined,
the interpretation of the offset from this reference
point requires us to determine the magnitude and
direction of offset. As noted above, in some cases
the tense of the controlling verb will indicate the
direction of offset; but prepositional attachment
ambiguity can easily damage the reliability of such
an approach, as demonstrated by the following
minimal pair:
(5) We can show you some pictures on Monday.
(6) We can show you some pictures from Monday.
In example (5), the correct PP attachment is re-
quired in order to determine that Monday is in the
1
In the literature, a variety of different terms are used:
(Schilder and Habel, 2001) call these expressions indexicals,
and (Han et al, 2006b) uses the term relative for what we
call anaphoric references: in our terminology, both deictic
and anaphorical expressions are relative.
2
This reference point is often referred to as the temporal
focus or temporal anchor.
scope of the verb group can show, allowing us to
infer that the Monday in question is in the future.
Example (6), on the other hand, is quite ambigu-
ous and requires world knowledge in order to de-
termine the correct attachment.
We are interested, therefore, in determining
whether some heuristic method might provide
good results. In the rest of this paper, we focus
on the determination of the direction of offset. We
will not explicitly address the question of deter-
mining the temporal focus: although this is clearly
a key ingredient, we have found that using the doc-
ument creation date performs well for the kinds of
documents (typically newswire stories and similar
document types) we are working with. More so-
phisticated strategies for temporal focus tracking
would likely be required in other genres.
3 Related Work
The literature contains a number of approaches to
the interpretation of weekday names, although we
are not aware of any pre-existing direct compari-
son of these approaches.
3
Filatova and Hovy (2001) assign time stamps to
clauses in which an event is mentioned. As part
of the overall process, they use a heuristic for the
interpretation of weekday names: if the day name
in a clause is the same as that of the temporal focus,
then the temporal focus is used;
4
otherwise, they
look for any ?signal words? or check the tense of
the verb in the clause. An analogous approach is
taken for the interpretation of month names.
Negri and Marseglia (2005), in their rule-based
system for temporal expression recognition and
normalisation, use what they call ?context words?,
such as following or later, to decide on the inter-
pretation of a weekday name. Consider the fol-
lowing example:
(7) He started studying on March 30 2004, and
passed the exam the following Friday.
Here, having identified the date March 30 2004
(which happens to be a Tuesday), they then recog-
nise the structure ?following + trigger? and reason
that the Friday is three days later.
3
Although Ahn et al (2007) compared their results with
those presented by Mani and Wilson (2000), they went on
to point out that, for a variety of reasons, the numbers they
provided were not really comparable.
4
Filatova and Hovy use the term reference point for what
we call the temporal focus.
554
There have also been machine-learning ap-
proaches to the interpretation of temporal expres-
sions. Ahn et al (2005) describes a system de-
veloped and tested on the ACE 2004 TERN test
corpus. Using lexical features, such as the oc-
currence of last or earlier in a context window
of three words, their maximum entropy classifier
picked the correct direction (?backward?, ?same?,
or ?forward?) with an accuracy of 59%; the addi-
tion of features encoding information about tense
increased the result to 61%.
Ahn et al (2007) go on to describe a system us-
ing a classifier based on support vector machines
and an extended set of features over a larger subset
of the data. This algorithm was used to determine
the direction of all relative temporal expressions,
not just the names of weekdays. They used three
sets of features:
1. Character type patterns, lexical features such
as weekday name and numeric year, a con-
text window of two words to the left, and sev-
eral parse-based features: the phrase type, the
phrase head and initial word (and POS tag),
and the dependency parent (and correspond-
ing relation) of the head.
2. The tense of the closest verb (w.r.t. depen-
dency path), the POS tag of the verb, and the
POS tags of any verbal elements directly re-
lated to this verb.
3. Features comparing year, month name and
day name of a temporal expression to those
of the document creation date.
Their experiments demonstrated that the third set
was the most useful.
Han et al (2006a) report on the development of
the Time Calculus for Natural Language (TCNL),
a compact formalism designed to capture the
meaning of temporal expressions in natural lan-
guage, which is built on top of their constraint-
based calendar model (see (Han and Lavie, 2004)).
In this formalism each temporal expression is con-
verted to a formula in TCNL, which then can be
processed to calculate the value of a temporal ex-
pression. Interpretation of weekday names uses
the tense of the nearest verb chunk and the pres-
ence of lexical items such as next. Their tempo-
ral focus tracking mechanism allows correct inter-
pretation of cases like ?I am free next week. How
about Friday??, where the TCNL formula for Fri-
day, being +{fri}, reflects the occurrence of next in
Table 1: ACE 2005 Training Corpus
Domain #Docs #Words # TIMEX2
BC 60 40415 626
BN 226 55967 1455
CTS 39 39845 409
NW 106 48399 1235
UN 49 37366 741
WL 119 37897 1003
Total 599 259889 5469
Table 2: Weekdays in ACE 2005 Training Corpus
Domain #Docs # TIMEX2 # per doc
BC 4 7 (1.91%) 1.75
BN 25 31 (8.47%) 1.24
CTS 2 2 (0.54%) 1.00
NW 102 292 (79.56%) 2.86
UN 3 3 (0.81%) 1.00
WL 19 32 (8.72%) 1.68
Total 155 367 (100%) 2.37
the preceding sentence.
Most closely relevant to the work described in
the present paper are the approaches described in
(Baldwin, 2002), (Jang et al, 2004) and (Mani and
Wilson, 2000). Since we have re-implemented ver-
sions of these algorithms for the present paper, we
leave description of these to Section 5.
4 Corpus and Experimental Setup
For this work we used the ACE 2005 Training Cor-
pus, which is publicly available and distributed by
the Linguistic Data Consortium (LDC).
5
It has al-
ready become the gold standard in the information
extraction community, especially for the temporal
expression recognition and normalisation (TERN)
task, and currently it provides the largest avail-
able corpus of annotated temporal expressions. Ta-
ble 1 presents some relevant statistics, and Table 2
shows the distribution of bare weekday names (as
TIMEX2 counts) in the corpus across the various
genres represented.
6
For the work described here, we used only those
documents in the corpus that contained at least one
weekday name; all subsequent analysis makes use
only of the gold standard annotations of the bare
weekday names in these documents, thus signifi-
cantly reducing corpus processing time. This re-
sults in a total of 367 instances, once errors (of
which there are quite a few) in the gold standard
5
The corpus?s catalogue number is LDC2006T06.
6
BC = Broadcast Conversations; BN = Broadcast News;
CTS = Conversational Telephone Speech; NW = Newswire;
UN = Usenet Newsgroups; and WL = Weblogs.
555
annotations have been repaired. We made the fol-
lowing changes to the gold standard data:
? One day name had been missed by the anno-
tators; we added this.
? Some 40 values were corrected from the for-
mat YYYY-Wnn-m to YYYY-MM-DD: al-
though both are correct in some sense, the
ACE guidelines indicate that the second is the
preferred form.
? Eight cases where the incorrect value had
been provided by the annotators were cor-
rected.
Specific details of these corrections, and the com-
plete data set used, are available on the web.
7
5 Evaluated Approaches
We implemented and evaluated a number of both
simple and more complex approaches to determin-
ing what date is meant in a text when a bare week-
day name is used. These methods, described be-
low, can be divided into two main classes: (a) 7-
day window based, and (b) tense analysis based.
Our new algorithm is a hybrid solution that incor-
porates ideas from both of these approaches.
5.1 Baselines
Our baselines are motivated by the observation that
days referred to by bare weekday names are typi-
cally temporally close to the temporal focus.
8
Past
7-day Window (inclusive): This baseline looks
for the specified day in a 7-day window whose
last day is the temporal focus. In other words, day
names are always assumed to refer to days in the
last week, including the ?day of speaking?.
Past 7-day window (exclusive): This is the same
as the approach just described, except that we look
for the referred-to day in the week leading up to
but not including the ?day of speaking?.
Future 7-day window (inclusive): This is the
future-oriented version of the first approach de-
scribed above: we look for the specified day in a
7-day window whose first day is the temporal fo-
cus. This assumes that all day name references are
to the present or future.
9
7
Visit http://TimexPortal.info.
8
Recall that in the present work we take the temporal focus
to be the document creation date.
9
An informal check of email data drove Han et al (2005)
to use the simple strategy of always assuming that weekday
names refer to days in the future.
Future 7-day window (exclusive): In this case the
7-day window starts on the day following the ?day
of speaking?.
5.2 Algorithms
5.2.1 Baldwin?s 7-Day Window
This algorithm was presented in (Baldwin, 2002;
Jang et al, 2004). It is similar to our window-
based baselines, but in this case the temporal focus
is the middle day of the 7-day window. This ap-
proach was used in their research after observing
that 96.97% of weekday name expressions in their
English corpus referred to dates within such a win-
dow. Suppose we have the following sentence in a
document with creation date 2003-06-16 (a Mon-
day):
(8) Police arrested her in Abilene, Texas, Saturday
where she had moved with a friend June 2.
The 7-day window then spans from Friday
(June 13) to Thursday (June 19). The reference
to Saturday is assigned (correctly) the value of the
second day in the window, i.e. 2003-06-14. Note
that this method will deliver the wrong result when
the referred-to day actually falls further than three
days either side of the temporal focus. Suppose,
for example, we have the following sentence in a
document written on 2005-01-01 (a Saturday):
(9) We got into Heathrow on Monday morning.
Here the 7-day window spans from Wednesday to
Tuesday, and so the reference to Monday will be
assigned the incorrect interpretation 2005-01-03.
5.2.2 Mani and Wilson?s Tense Estimation
In the system presented in (Mani and Wilson,
2000), weekday name interpretation is imple-
mented as part of a sequence of interpretation rules
for temporal expression interpretation more gener-
ally. This algorithm attempts to establish the tense
of what we have called the controlling verb in the
following way. First, it looks backwards from the
temporal expression in question to any previous
temporal expression in the sentence, or if there is
none, to the beginning of the sentence. If no verb
is found here, then it looks between the temporal
expression and the end of the sentence; and if a
verb is still not found, then it looks in front of any
preceding temporal expression found back to the
beginning of the sentence. If the verb found is in
past tense, the direction of offset is assumed to be
556
Table 3: Interpretation rules
Tense Example Direction
Present Continuous I am flying to New York on Monday. Future
Past Simple I wrote a paper on Monday. Past
Future Simple I will write a paper on Monday. Future
Present Perfect I have been writing a paper since Monday. Past
Bare Past Participle The draft written on Monday was useless. Past
Modal Verb I should finish the paper on Monday. Future
Modal Verb + have I should have submitted the paper on Monday. Past
backwards; if the tense is future, then the forward
direction is used. If the verb found is in present
tense, then the temporal expression is passed to a
further set of interpretation rules, which check for
things like the occurrence of lexical markers such
as since or until.
10
For example, in example (4),
repeated below, the algorithm would correctly pick
met for Tuesday and will meet for Wednesday, in-
terpreting Tuesday as a day in a past and Wednes-
day as a day in future.
(4) Jones met with Defense Minister Paulo Portas
on Tuesday and will meet Foreign Minis-
ter Antonio Martins da Cruz before leav-
ing Portugal Wednesday.
However, this approach will not correctly interpret
example (10):
(10) Still a decision has to made on what, if
any, punishment he will face in the wake
of that incident Tuesday night.
In this case, the wrong verb will be identified, and
the direction of offset will be incorrect.
5.2.3 Simple Tense Estimation
As an alternative to Mani and Wilson?s approach,
we also implemented a much simpler tense estima-
tion heuristic. This checks whether the sentence
contains any tokens with the VBD (i.e., past tense)
part of speech tag;
11
if one is found, then the direc-
tion of offset is assumed to be backwards, and if
not, then we use the forward direction. In the case
of example (4), this will assign the correct value to
Tuesday, but the wrong value to Wednesday.
10
We have reimplemented this algorithm based on the de-
scription given in the cited paper, but some details are unclear,
so we acknowledge that the original implementation might
produce slightly different results.
11
Where POS tags are required in our algorithms, we
used Mark Hepple?s part of speech tagger, an implementa-
tion of which is available as a plugin for the GATE platform
(http://gate.ac.uk).
5.2.4 Dependency-based Tense Determination
The two previous algorithms attempt to determine
the controlling verb using very simple heuristics.
Of course, a more reliable way of determining the
controlling verb is to use a parser. We used the
Stanford parser?s dependency information output
(see (de Marneffe et al, 2006)) to find the con-
trolling verb of a weekday name in a sentence.
This algorithm does this by traversing the result-
ing dependency tree from the node containing the
weekday name to its root until a verb is found, and
then following further dependencies to identify the
whole verbal sequence.
5.2.5 A Hybrid Algorithm
Heuristic methods for determining tense are risky,
especially as the distance between the controlling
verb and the temporal expression increases. We
therefore propose a hybrid approach that attempts
to leverage both tense estimation approaches like
Mani and Wilson?s, and Baldwin?s window-based
approach. This algorithm was developed on the
basis of an error analysis of the results of using
Baldwin?s algorithm. It embodies a two-step ap-
proach, where we first look only in the very local
environment for clues as to the tense of the control-
ling verb, then fall back on Baldwin?s algorithm if
no such evidence is found close by. First, we check
if the temporal preposition since appears immedi-
ately in front of a weekday name; if so, the direc-
tion of offset is assumed to be backwards; other-
wise, the algorithm looks for any verbs in a win-
dow of three tokens before and three tokens after
the temporal expression. If a verb is found, then
its tense is used to determine the direction (using
the same rules as in Mani and Wilson?s approach).
If no verb is found, then a 7-day window with the
temporal focus as the middle day is used, just as in
Baldwin?s algorithm.
557
Table 4: Results
Algorithm Errors Correct
Past 7-day Window (Inclusive) 51 316 (86.10%)
Past 7-day Window (Exclusive) 240 127 (34.60%)
Future 7-day Window (Inclus.) 129 238 (64.85%)
Future 7-day Window (Exclus.) 316 51 (13.90%)
Sentence Tense Estimation 38 329 (89.65%)
Dependency-Based 29 338 (92.10%)
Mani and Wilson?s 27 340 (92.64%)
Baldwin?s 7-day Window 21 346 (94.28%)
Voting 16 351 (95.64%)
Hybrid 15 352 (95.91%)
Table 5: Processing times
Algorithm Time [seconds]
Past 7-day Window (inclusive) 79.9
Past 7-day Window (exclusive) 79.7
Future 7-day Window (inclus.) 79.2
Future 7-day Window (exclus.) 79.4
Sentence Tense Estimation 80.6
Dependency-Based 616.5
Mani and Wilson?s 80.9
Baldwin?s 7-day Window 79.4
Voting 636.1
Hybrid 80.2
5.2.6 Voting
This algorithm uses a voting mechanism over
the output of Baldwin?s, Mani and Wilson?s, and
the Dependency-based Tense Determination algo-
rithms. If all values are different (no majority) then
Baldwin?s result is used.
5.3 Tense Interpretation Rules
Once the verb group is found by any particular al-
gorithm, it needs to be analysed to determine what
its tense is; this information is then used to de-
termine the direction of offset. The interpretation
rules are summarized in Table 3.
6 Results
Table 4 presents the results achieved with each of
the algorithms.
The 51% difference between the inclusive and
exclusive baselines is indicative of the fact that,
in this data, in over 50% of cases the correct
date was in fact the document creation date. This
phenomenon is due to the large proportion of
newswire data in the corpus; in this genre, it is
common to use the weekday name even when re-
porting on events that happen on the same day as
the reporting takes place. Also of note is that the
best performing baseline, ?Past 7-day window (in-
clusive)?, achieves 86.10% accuracy despite its be-
ing an extremely naive approach.
All the algorithms tested here performed bet-
ter than the baselines. The best performing algo-
rithm was the Hybrid method, which made 15 er-
rors, resulting in an accuracy of 95.91%; the Vot-
ing method came second with 16 errors. Bald-
win?s 7-day window algorithm correctly inter-
preted 94.28% of weekday names. The big advan-
tage of this algorithm, along with all the baselines,
is their complete resource independence: they do
not use any parsers or POS taggers.
Perhaps surprisingly, Mani and Wilson?s tense
estimation heuristic was more effective than tense
determination based on a dependency parse tree;
this reinforces our earlier point about the risks of
using parsers. It is also important to note that
there are huge differences in execution time for
parser-based approaches. Table 5 presents times
for processing the entire corpus for temporal ex-
pression recognition and interpretation; the parser-
based algorithm required 616 seconds, in contrast
to around 80 seconds for each of the other algo-
rithms.
12
There were 296 cases (80.65%) that were cor-
rectly interpreted by all of the following algo-
rithms: Sentence Tense Estimation, Mani and Wil-
son?s, Dependency-based Tense Determination,
Baldwin?s 7-day Window, and Hybrid. There are
also three cases where all these algorithms pro-
vided an incorrect value:
13
(11) reporter: friday night in the gaza strip and
a journalist is about to lose his life.
(12) president bush head to the g-8 summit in
france on friday with victory over saddam
hussein and in his pocket and a soaring ap-
proval rating by the american public, but
do europeans share the same enthusiasm
for the president?
(13) I will return this piece of shit on Fri-
day, only to rent another vehicle Monday
morning while we take the wife?s car to
the shop to get her 1400 bucks worth of
damage repaired.
12
Note that the parser was only called for those sentences
that contained bare weekday names, and not for other sen-
tences in these documents.
13
We present these examples with their original spelling
and casing.
558
In example (11), the algorithms interpreted Fri-
day night as a day in future. However, this text
is a case of what is sometimes called the histori-
cal present, where for rhetorical effect the author
speaks in present tense from a past point in time; it
is not obvious how any algorithm would determine
the correct answer here. Example (12) is ungram-
matical as a consequence of a missing ?s? in head;
consequently, the POS tagger did not annotate this
word as a verb, and the algorithms identified do
or bush as a verb, leading to the decision that the
referred-to friday is in the future; however, the gold
standard interpretation puts this in the past (note
that, even with the correct verb form of heads, all
the algorithms would still get the wrong date). It
so happens the correct date here is also outside
the 7-day window. In example (13), because the
weekday name used is the same as the day name
of the document creation date, all the algorithms
assigned the document creation date instead of a
date seven days later.
7 Error Analysis
The Hybrid Algorithm achieved the best accuracy
of 95.91%, which corresponds to 15 error cases.
These were as follows:
? Eight cases where there was no verb found in
the three-token neighbourhood of the tempo-
ral expression; in these cases the 7-day win-
dow method was used, but this did not find
the correct value.
? Three cases where the algorithm identified a
verb that was not the controlling verb; for ex-
ample, it picked will meet instead of met to
interpret Tuesday in the sentence given in ex-
ample (4).
? Two cases where the document creation date
was very misleading (see below).
? Two cases where past tense was used to talk
about plans for the future which were sub-
sequently cancelled, as in discussions were
scheduled to end Friday, when Kelly was to
fly. . . .
In 204 cases the algorithm interpreted the week-
day name based on a verb found in the three-token
neighbourhood; and in 163 cases it used the fall-
back 7-day window strategy. Since the Hybrid
Algorithm was built as an extension of Baldwin?s
method, it is worth knowing whether there were
any cases where the original 7-day window method
got the correct value and the Hybrid Algorithm got
it wrong. There were six such cases:
? Two of them occurred for documents with
a misleading document creation date. In a
typical example, a document with the times-
tamp 17-04-2004 (a Thursday) contained the
sentence ?Malaysia?s Appeal Court Friday re-
fused to overturn the conviction . . . ?. As the
document timestamp was used as the tempo-
ral focus, Friday was interpreted as a day in
the past, when in fact it was the day after the
timestamp.
? The other two cases demonstrate a weakness
in our approach, exemplified by the sentence
given in example (4): here the algorithm in-
correctly uses the verb group will meet when
interpreting Tuesday.
? The remaining two cases were cases where
the verb groups were scheduled to end and
scheduled to begin were used to talk about fu-
ture events.
In these last cases, the controlling verb is an in-
finitive, and there is no way, in the absence of ei-
ther world knowledge or a much more sophisti-
cated analysis of the text, of determining whether
the scheduled event is in the past or the future.
Sentences like these are a particular problem for
Mani and Wilson?s algorithm, where a signif-
icant number of misinterpretations involve sen-
tences in which the past tense is used to talk about
subsequently-changed plans for future, as in the
following:
(14) A summit between Sharon and his Pales-
tinian counterpart, Mahmoud Abbas, had
been planned for Wednesday but was post-
poned . . .
Here, this utterance could be legitimately produced
both before and after the Wednesday in question,
so no simple algorithm will be able to determine
the direction of offset.
8 Conclusions and Future Work
We have investigated the problem of the interpreta-
tion of bare weekday names in texts, and presented
a new heuristic which extends Baldwin?s (2002)
approach. Our evaluations on a widely-available
data set show that our Hybrid Algorithm was the
559
best performing algorithm, achieving an accuracy
of 95.91% with 15 errors out of 367 instances. The
algorithm is implemented within our DANTE sys-
tem for temporal expression interpretation (Dale
and Mazur, 2006; Mazur and Dale, 2007).
It seems quite possible that our heuristics
take advantage of phenomena that are specific
to newswire texts and other similar types of re-
portage. Although these are precisely the kinds of
texts where, in our own work, we need to provide
fast processing of large volumes of text, it remains
to be seen how these heuristics fare when faced
with a broader range of text types. In particular,
other text types are likely to require more sophis-
ticated approaches to temporal focus tracking than
we have used here.
Also, we have not attempted to replicate here the
machine learning approaches described in (Ahn et
al., 2005) and (Ahn et al, 2007), nor Han?s use of
constraint satisfaction problem methods (see (Han
et al, 2006a)). The comparative evaluation of
these is left for future work.
References
Ahn, D., S. F. Adafre, and M. de Rijke. 2005. Recog-
nizing and interpreting temporal expressions in open
domain texts. In We Will Show Them: Essays in
Honour of Dov Gabbay, Vol 1, pages 31?50.
Ahn, D., Joris van Rantwijk, and Maarten de Rijke.
2007. A Cascaded Machine Learning Approach
to Interpreting Temporal Expressions. In Proc. of
HLT: The Annual Conference of the North American
Chapter of the ACL (NAACL-HLT 2007).
Baldwin, J. 2002. Learning Temporal Annotation of
French News. Master?s thesis, Dept. of Linguistics,
Georgetown University, April.
Dale, R. and P. Mazur. 2006. Local Semantics in the
Interpretation of Temporal Expressions. In Proceed-
ings of the Workshop on Annotating and Reasoning
about Time and Events, pages 9?16, Sydney, Aus-
tralia, July.
de Marneffe, M.-C., B. MacCartney, and Ch. D. Man-
ning. 2006. Generating Typed Dependency Parses
from Phrase Structure Parses. In Proceedings of the
IEEE / ACL 2006 Workshop on Spoken Language
Technology.
Filatova, E. and E. Hovy. 2001. Assigning Time-
Stamps to Event-Clauses. In Harper, L., I. Mani,
and B. Sundheim, editors, Proceedings of the Work-
shop on Temporal and Spatial Information Process-
ing, pages 1?8, Morristown, NJ, USA.
Han, B. and A. Lavie. 2004. A Framework for Res-
olution of Time in Natural Language. ACM Trans-
actions on Asian Language Information Processing
(TALIP), 3(1):11?32.
Han, B., D. Gates, and L. Levin. 2005. Anchoring
Temporal Expressions in Scheduling-related Emails.
In Katz, Graham, James Pustejovsky, and Frank
Schilder, editors, Annotating, Extracting and Rea-
soning about Time and Events, Dagstuhl Seminar
Proceedings.
Han, B., D. Gates, and L. Levin. 2006a. From Lan-
guage to Time: A Temporal Expression Anchorer.
In Proceedings of the Thirteenth International Sym-
posium on Temporal Representation and Reasoning,
pages 196?203.
Han, B., D. Gates, and L. Levin. 2006b. Understanding
Temporal Expressions in Emails. In Proceedings of
the Human Language Technology Conference of the
North American Chapter of the Association of Com-
putational Linguistics, pages 136?143, Morristown,
NJ, USA.
Jang, S. B., J. Baldwin, and I. Mani. 2004. Automatic
TIMEX2 Tagging of Korean News. ACM Trans-
actions on Asian Language Information Processing
(TALIP), 3(1):51?65.
Mani, I. and G. Wilson. 2000. Robust Temporal Pro-
cessing of News. In Proceedings of the 38th Annual
Meeting of the Association for Computational Lin-
guistics, pages 69?76, Morristown, NJ, USA.
Mazur, P. and R. Dale. 2007. The DANTE Tempo-
ral Expression Tagger. In Vetulani, Zygmunt, edi-
tor, Proceedings of the 3rd Language & Technology
Conference (LTC).
Negri, M. and L. Marseglia. 2005. Recognition and
Normalization of Time Expressions: ITC-IRST at
TERN 2004. Technical Report WP3.7, Information
Society Technologies, February.
Schilder, F. and Ch. Habel. 2001. From Temporal Ex-
pressions to Temporal Information: Semantic Tag-
ging of News Messages. In Harper, L., I. Mani, and
B. Sundheim, editors, Proc. of the Workshop on Tem-
poral and Spatial Information Processing, pages 1?
8, Morristown, NJ, USA.
560
Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing, pages 913?922,
MIT, Massachusetts, USA, 9-11 October 2010. c?2010 Association for Computational Linguistics
WikiWars: A New Corpus for Research on Temporal Expressions
Pawe? Mazur1,2
1Institute of Applied Informatics,
Wroc?aw University of Technology
Wyb. Wyspian?skiego 27,
50-370 Wroc?aw, Poland
pawel@mazur.wroclaw.pl
Robert Dale2
2Centre for Language Technology,
Macquarie University,
NSW 2109, Sydney, Australia
Pawel.Mazur@mq.edu.au
Robert.Dale@mq.edu.au
Abstract
The reliable extraction of knowledge from text
requires an appropriate treatment of the time
at which reported events take place. Unfortu-
nately, there are very few annotated data sets
that support the development of techniques for
event time-stamping and tracking the progres-
sion of time through a narrative. In this paper,
we present a new corpus of temporally-rich
documents sourced from English Wikipedia,
which we have annotated with TIMEX2 tags.
The corpus contains around 120000 tokens,
and 2600 TIMEX2 expressions, thus compar-
ing favourably in size to other existing corpora
used in these areas. We describe the prepa-
ration of the corpus, and compare the profile
of the data with other existing temporally an-
notated corpora. We also report the results
obtained when we use DANTE, our temporal
expression tagger, to process this corpus, and
point to where further work is required. The
corpus is publicly available for research pur-
poses.
1 Introduction
The reliable processing of temporal information is
an important step in many NLP applications, such
as information extraction, question answering, and
document summarisation. Consequently, the tasks
of identifying and assigning values to temporal ex-
pressions have recently received significant attention,
resulting in the creation of mature corpus annotation
guidelines (e.g. TIMEX21 and TimeML2), publicly
1See http://fofoca.mitre.org.
2See http://timeml.org.
available annotated corpora (ACE,3 TimeBank4) and
a number of automatic taggers (see, for example,
(Mani and Wilson, 2000; Schilder, 2004; Hacioglu et
al., 2005; Negri and Marseglia, 2005; Saquete, 2005;
Han et al, 2006; Ahn et al, 2007)).
However, existing corpora have their limitations.
In particular, the documents in these corpora tend to
be limited in length and, in consequence, discourse
structure. This impacts on the number, range and
variety of temporal expressions they contain. Ex-
isting research carried out on the interpretation of
temporal expressions, e.g. by (Baldwin, 2002; Ahn
et al, 2005; Mazur and Dale, 2008), suggests that
many temporal expressions in documents, especially
news stories, can be interpreted fairly simply as be-
ing relative to a reference date that is typically the
document creation date. This phenomenon does not
carry over to longer, more narrative-style documents
that describe extended sequences of events, as found,
for example, in biographies or descriptions of pro-
tracted geo-political events. Consequently, existing
corpora are not ideal as development data for systems
intended to work on such historical narrations.
In this paper we introduce a new annotated corpus
of temporal expressions that is intended to address
this shortfall. The corpus, which we call WikiWars,
consists of 22 documents from English Wikipedia
that describe the historical course of wars. Despite
the small number of documents, their length means
that the corpus yields a large number of temporal
expressions, and poses new challenges for tracking
3See corpora LDC2005T07 and LDC2006T06 in the LDC
catalogue (http://www.ldc.upenn.edu).
4See corpus LDC2006T08 in the LDC catalogue.
913
temporal focus through extended texts. The corpus
has been made available for others to use;5 to give
an indication of the difficulty of processing the tem-
poral phenomena in the texts, we also report on the
performance of DANTE, our temporal expression
tagger, on detecting and interpreting the temporal
expressions in the corpus.
The rest of this paper is organised as follows. In
Section 2 we describe related work, focusing on the
TIMEX2 annotation scheme, and existing corpora
that contain annotations of temporal expressions us-
ing this scheme. Section 3 describes the process of
creation of the WikiWars corpus. In Section 4 we
comment on some artefacts of Wikipedia articles that
impact on the annotation process and the use of this
corpus. Then, in Section 5 we analyse the differences
between the WikiWars corpus and the widely-used
ACE corpora. In Section 6 we report on the perfor-
mance of our temporal expression tagger on this data
set. Finally, in Section 7, we conclude.
2 Related Work
At the time of writing, there are two mature, wide-
coverage schemes for the annotation of temporal in-
formation in texts: TIMEX2 (Ferro et al, 2005) and
TimeML (Pustejovsky et al, 2003; Boguraev et al,
2005), which is soon to become an ISO standard
(Pustejovsky et al, 2010).
These schemes were used to annotate corpora that
are often used in research on temporal expression
recognition and normalisation: the series of corpora
used for training and evaluation in the Automatic
Content Extraction (ACE) program6 run in 2004,
2005 and 2007, and the TimeBank Corpus.
The ACE corpora were prepared for the devel-
opment and evaluation of systems participating in
the ACE program. However, the evaluation corpora
have never been publicly released, and thus are cur-
rently, for all practical purposes, unavailable. The
ACE 2004 corpus contains news data only (broad-
cast news, newspaper and newswire), while the ACE
2005 and 2007 corpora contain news (broadcast and
newswire), conversations (broadcast and telephone),
UseNet discussions and web blogs. The 2005 and
2007 ACE corpora are annotated with the latest ver-
5See www.TimexPortal.info/WikiWars.
6See www.itl.nist.gov/iad/mig/tests/ace.
sion of TIMEX2 (2005), while the 2004 corpus is
annotated with the older 2003 version of TIMEX2;
however, the differences are not very significant.
Apart from the unavailability of the evaluation
data, there are two issues with the ACE corpora. One
is that most of the documents are relatively short, so
that the average number of temporal expressions per
document is low (typically between seven and nine
per document, including the document time stamp
as a metadata element). This results in very lim-
ited temporal discourse structure, and relatively few
underspecified and relative temporal expressions. Un-
fortunately, these are the more difficult temporal ex-
pressions to handle, and so the ACE corpora may
not serve as a good baseline for performance more
generally.
A second problem is that the ACE corpora appear
to contain a significant number of errors in the gold
standard annotations, with respect to both the anno-
tated extents and the semantic values assigned, which
do not always follow the TIMEX2 guidelines.
TimeBank v1.2 is a revised and improved version
of TimeBank 1.1 resulting in a number of errors fixed
and inconsistencies removed (see (Boguraev et al,
2007)). Unfortunely, this corpus has the same lim-
itations as the ACE corpora in regard to document
length and complexity of discourse structure. Fur-
ther, TimeBank is annotated with TimeML, a scheme
more complex than TIMEX2 since it also encom-
passes the tagging of events and temporal relations.
However, TIMEX2 is sufficiently sophisticated for
the annotation of most types of temporal expressions,
and our review of the literature reveals that the ma-
jority of existing temporal taggers output TIMEX2
annotations. Since automatic conversion between
TIMEX2 and TimeML annotations is not straightfor-
ward, TimeBank is of limited use for those who work
specifically with TIMEX2.
3 Creating WikiWars
Given the above concerns, we were particularly inter-
ested in developing a corpus that would allow more
rigorous testing of techniques for tracking time across
extended narratives, since these give rise to more
complex temporal phenomena than are found in sim-
pler documents. To avoid copyright issues that might
arise in the development and distribution of such a
914
corpus, we decided to use Wikipedia as a source. Af-
ter considering various types of historical narrative,
we settled on descriptions of the course of wars and
conflicts as being particularly rich in the kinds of
phenomena we wanted to explore.
3.1 Selecting Data
We queried Google with two phrases, ?most famous
wars in history? and ?the biggest wars?, and in each
case chose the top-ranked result. One of the pages
found proposed a list of the 10 most famous wars
in history, and the other listed the names of the 20
biggest wars that happened in the 20th century, mea-
sured in terms of the number of military deaths. We
combined the two lists, eliminated duplicates, and
searched Wikipedia for articles describing these wars.
Wikipedia did not contain an article for one war, and
we considered two articles as inappropriate for our
purposes since they did not describe the course of the
wars, but rather some general information about the
conflicts. This resulted in a final set of 22 articles.
More details of the selection process and the URLs
of the chosen Wikipedia articles are provided in the
documentation distributed with the corpus.
3.2 Text Extraction and Preprocessing
To prepare the corpus, we first manually copied text
from those sections of the webpages that described
the course of the wars. This involved manual re-
moval of picture captions and cross-page links. We
then ran a script over the results of this extraction pro-
cess to convert some Unicode characters into ASCII
(ligatures, spaces, apostrophes, hyphens and other
punctuation marks), and to remove citation links and
a variety of other Wikipedia annotations.
Finally, we converted each of the text files into
an SGML file: each document was wrapped in one
DOC tag, inside which there are DOCID, DOCTYPE
and DATETIME tags. The document time stamp is the
date and time at which we downloaded the page from
Wikipedia to our local repository. The proper content
of the article is wrapped in a TEXT tag. This docu-
ment structure intentionally follows that of the ACE
2005 and 2007 documents, so as to make the pro-
cessing and evaluation of the WikiWars data highly
compatible with the tools used to process the ACE
corpora.
3.3 Creating Gold Standard Annotations
Having prepared the input SGML documents, we
then processed them with the DANTE temporal
expression tagger (see Mazur and Dale (2007)).
DANTE outputs the original SGML documents aug-
mented with an inline TIMEX2 annotation for each
temporal expression found. These output files can
be imported to Callisto,7 an annotation tool that sup-
ports TIMEX2 annotations. Using a temporal ex-
pression tagger as a first-pass annotation tool not
only significantly reduces the amount of human an-
notation effort required (creating a tag from scratch
requires a number of clicks in the annotation tool),
but also helps to minimize the number of errors that
arise from overlooking markable expressions through
?annotator blindness?. The annotations produced by
DANTE were then manually corrected in Callisto
via the following process. First, Annotator 1 (the
first author) corrected all the annotations produced
by DANTE, both in terms of extent and the values
provided for TIMEX2 attributes. This process also
included the annotation of any temporal expression
missed by the automatic tagger, and the removal of
spurious matches. Then, Annotator 2 (the second au-
thor) checked all the revised annotations and prepared
a list of errors found and doubts or queries in regard
to potentially problematic annotations. Annotator 1
then verified and fixed the errors, after discussion in
the case of disagreements.
The final SGML files containing inline annotations
were then transformed into ACE APF XML annota-
tion files, this being the stand-off markup format
developed for ACE evaluations. This transformation
was carried out using the tern2apf tool developed
by NIST for the ACE 2004 evaluations, with some
modifications introduced by us to adjust the tool to
support ACE 2005 documents and to add a document
ID as part of the ID of a TIMEX2 annotation (so that
all annotations would have corpus-wide unique IDs).
The resulting corpus is thus available in two for-
mats: one contains the original documents enriched
with inline annotations, and the other consists of
stand-off annotations in the ACE APF format.
7See http://callisto.mitre.org.
915
3.4 Some Deficiencies of TIMEX2
The annotation process described above revealed
some issues with the use of TIMEX2 in practice.
First, the flexibility of the TIMEX2 scheme, which
can be at first seen as an advantage, actually makes
it ambiguous. One instance of this phenomenon re-
lates to the fact that the TIMEX2 guidelines state that
the provision of some attribute values for what are
called event-based expressions (such as three weeks
after the siege of Boston began or the first year of the
American invasion) is optional. Since our corpus has
a significant number of such expressions, the deci-
sion as to whether or not to provide semantic values
in such cases has a potentially large impact on the
perceived performance of a tagger. In such cases,
we decided only to provide the value when it is very
clear from the article itself what the value should be.
Another area where TIMEX2 is not ideal is in
regard to the annotation of time zones. First, only
whole-hour time differences are supported, which
eliminates some time zones (e.g. Afghanistan lies
in UTC+04:30). Second, time zone information is
supposed to be marked only for expressions which
have it explicitly stated. However, it can often be
inferred from the context that subsequent unadorned
time references should inherit the same time zone as
an earlier time reference.
We also found that, in a not insignificant number
of cases, it is impossible to provide a precise and
correct value for a temporal expression. For example,
the TIMEX2 guidelines stipulate that the anchors
of durations cannot have a MOD attribute, so if the
anchor is mid-August, the value of the anchor must
refer to August, which is not entirely correct as the
semantics of mid- is lost.
TIMEX2 only supports nonspecific expressions
which have explicit information about granularity.
Expressions such as a very short time or a short
period of time therefore cannot be provided with any
value, since the context does not indicate whether the
period involved should be measured in days, weeks,
or months. One might consider using the typical
durations of events of the corresponding types in
such cases, but this solution also has problems (see
(Pan et al, 2006)).
As is acknowledged in the TIMEX2 guidelines,
the treatment of set expressions (i.e. recurring times
and durations and frequencies, e.g. twice a month) is
underdeveloped. One rule states that set expressions
should not be anchored (Ferro et al, 2005, p. 42);
this has the consequence that the full semantics of the
expression annually since 1955 cannot be provided,
and the expression is therefore treated as two separate
expressions, annually and 1955.
Finally, alternative calendars are not supported, so
an expression like February in the pre-revolutionary
Russian calendar cannot receive a value unless it ap-
pears in an appositive construction which provides
an alternative description. Similarly, consider Exam-
ple (1):
(1) On 9 November 1799 (18 Brumaire of the Year VIII)
Napoleon Bonaparte staged the coup of 18 Brumaire
which installed the Consulate.
Here, 18 Brumaire of the Year VIII is a date in an
alternative calendar used in France, but we annotated
only the Year VIII based on the trigger year. Note
that 18 Brumaire also occurs later in the sentence,
but is not annotated.
3.5 Corpus Statistics
The corpus contains 22 documents with a total of
almost 120,000 tokens8 and 2,671 temporal expres-
sions annotated in TIMEX2 format. In Table 1 we
compare the WikiWars corpus with the other exist-
ing corpora. While the ACE 2005 Training corpus
remains the largest corpus, WikiWars is larger than
the ACE 2005 and 2007 evaluation corpora and the
TimeBank v1.2 corpus, both in terms of number of
tokens and TIMEX2 annotations. WikiWars has an
order of magnitude more temporal expressions in
each document, and a slightly higher density of tem-
poral expressions than the other corpora.
Table 2 presents statistics on the individual doc-
uments that make up the corpus. The documents
vary considerably in size, the smallest consisting of
only 1,455 tokens, and the largest being eight times
larger at 11,640 tokens. The density of TIMEX2 an-
notations varies from 1 in 23.1 tokens to 1 in 72.1
tokens, but for the majority of documents the ratio
lies between 30 and 60.
8All token counts presented in Tables 1 and 2 were obtained
using GATE?s default English tokeniser; hyphenated words, e.g.
British-held and co-operation, were treated as single tokens. For
more information on GATE see (Cunningham et al, 2002).
916
Corpus Docs KB Tokens
Temp.
Expr.
Tokens
TIMEX
TIMEX
Doc
ACE05 Train. 599 1,733 318,785 5,469 58.3 9.13
ACE05 Eval. 155 350 63,217 1,154 54.8 7.45
ACE07 Eval. 254 561 104,779 2,028 51.7 7.98
WikiWars 22 631 119,468 2,671 44.7 121.41
TimeBank1.2 183 816 78,444 1,414 55.5 7.73
Table 1: Statistics of the Wikipedia War corpus compared
to those of other corpora.
4 The Nature of Wikipedia Articles
Wikipedia articles may be edited by a large number
of people over a significant number of revisions. We
checked how often the articles constituting WikiWars
were modified in the period from January 2008 to
February 2010. On average, each article was changed
almost 52 times per month, with the monthly number
of changes for a single article ranging from 1 to 372.9
The minimum average for an individual document
was 13.08 (17 AlgerianWar), and the maximum was
171.77 (07 IraqWar).
The nature of the revision process in Wikipedia
leads to some artefacts that may be not typical
of other document sources, such as news, where
the text is usually carefully prepared by its author
and checked by an editor. This is not to say that
Wikipedia content is necessarily of low quality; this
is an encyclopedia with many people and bots con-
trolling its quality, and there exist manuals of style
for authors to help them avoid errors and ambigu-
ity and to ensure maximum consistency.10 However,
given the large number of editors with various de-
grees of fluency and experience in writing and edit-
ing, it would not be surprising if some parts of the
texts are not perfect. In the process of preparing the
gold standard annotations for the WikiWars corpus,
we have made the following observations.
9Note that these numbers are for the articles as a whole,
and not just the sections which we extracted (although these
are usually the major part of the article). Additionally, these
edits include both major changes (e.g. adding a new section),
minor changes (e.g. correcting a grammar error or adding a
comma), vandalism (deletion of the page content or the on-
purpose provision of false information) and restoring the page
after an act of vandalism has been detected.
10See, for example, the manual of style concerning format-
ing dates and numbers, located at http://en.wikipedia.
org/wiki/Wikipedia:DATE.
Document ID Tokens TIMEX2 TokensTIMEX2
01 WW2 5,593 169 33.1
02 WW1 10,370 264 39.3
03 AmCivWar 3,529 75 47.1
04 AmRevWar 5,695 146 39.0
05 VietnamWar 11,640 243 47.9
06 KoreanWar 5,992 147 40.8
07 IraqWar 8,404 247 34.0
08 FrenchRev 9,631 174 55.4
09 GrecoPersian 7,393 129 57.3
10 PunicWars 3,475 57 61.0
11 ChineseCivWar 3,905 103 37.9
12 IranIraq 4,508 98 46.0
13 RussianCivWar 3,924 103 38.1
14 FirstIndochinaWar 3,085 70 44.1
15 MexicanRev 3,910 77 50.8
16 SpanishCivilWar 1,455 63 23.1
17 AlgerianWar 7,716 130 59.4
18 SovietsInAfghanistan 5,306 110 48.2
19 RussoJap 2,760 62 44.5
20 PolishSoviet 5,137 106 48.5
21 NigerianCivilWar 2,091 29 72.1
22 2ndItaloAbyssinianWar 3,949 69 57.2
Total for the whole corpus 119,468 2,671 44.7
Average per document 5,430 121 ?
Standard deviation 2,663 63 ?
Table 2: Statistics of the Wikipedia War corpus.
4.1 Broken Narratives
In some articles we have found situations where a
sentence does not appear to cohere with those on
either side of it. This may be the result of a num-
ber of modifications made by different authors, or
it may be due to a lack of writing skill on the part
of the person who wrote the paragraph in question.
Example (2) below provides an example of this phe-
nomenon: the sentence about de Gaulle being elected
president contains a temporal expression which pro-
gresses the temporal focus in the narrative to 1959,
but the later context of the article strongly suggests
that the subsequent reference to October is in fact
October 1958.
(2) ALN commandos committed numer-
ous acts of sabotage in France in
August[1958], and the FLN mounted a desper-
ate campaign of terror in Algeria to intimidate
Muslims into boycotting the referendum. Despite
threats of reprisal, however, 80 percent of the Muslim
electorate turned out to vote in September[1958], and
of these 96 percent approved the constitution. In
February 1959, de Gaulle was elected president of
the new Fifth Republic. He visited Constantine in
917
October[1958] to announce a program to end the war
and create an Algeria closely linked to France.
It would appear that the reference to February 1959 is
a later addition to the text which has been made with-
out the surrounding text being appropriately revised
to accommodate this change. Clearly such instances
of incoherence will cause problems for any process
that attempts to track the temporal focus.
4.2 Ambiguous Writing
We have also found cases of a lack of precision in
writing, which leads to ambiguous statements. Con-
sider the following example:
(3) The Afghan government, having secured a treaty in
December 1978 that allowed them to call on Soviet
forces, repeatedly requested the introduction of troops
in Afghanistan in the spring and summer of 1979.
They requested Soviet troops to provide security and
to assist in the fight against the mujahideen rebels.
On April 14, 1979, the Afghan government requested
that the USSR send 15 to 20 helicopters with their
crews to Afghanistan, and on June 16, the Soviet gov-
ernment responded and sent a detachment of tanks,
BMPs, and crews to guard the government in Kabul
and to secure the Bagram and Shindand airfields. In
response to this request, an airborne battalion, com-
manded by Lieutenant Colonel A. Lomakin, arrived
at the Bagram Air Base on July 7. [. . . ]
After a month, the Afghan requests were no longer
for individual crews and subunits, but for regiments
and larger units. In July, the Afghan government
requested that two motorized rifle divisions be sent
to Afghanistan. The following day, they requested an
airborne division in addition to the earlier requests.
Here, in the first paragraph there are four temporal
expressions related to the Afghan government asking
for troops and equipment. There is also one date
related to the Soviets? reply to these requests and
sending of tanks, and one date related to the arrival
of an airborne battalion. The second paragraph starts
with after a month; the first possible interpretation is
that this is a month after the 7th July mentioned in
the previous paragraph; i.e. the month would end on
the 6th of August. But the following sentence reveals
that this is not the case, as it mentions some requests
for larger units that were made in July. Usually a
narrative progresses forwards in time, not backwards,
so the month must start either on 14th April or 16th
June: if the second sentence elaborates the first one,
then it is a month from 16th June; if it just mentions
one of the requests for larger units, then it is probably
a month from 14th April.
It is also unclear whether the second paragraph
talks about the same request for airborne forces which
was mentioned in the first paragraph: both these
events are dated July. The phrase In response to
this request is in fact placed very oddly, as its pre-
ceding sentence does not mention any request, but
rather talks about the Soviets? response to requests.
This may suggest that what at first looks just like a
careless and ambiguous use of the expression after a
month is in fact a larger problem of lack of coherency
in these two paragraphs.
4.3 Use of Deictic Expressions
One of the articles, 07 IraqWar, contained a num-
ber of deictic temporal expressions, indicative of the
fact that the events described were happening con-
temporaneously to the time of writing (as is often the
case in news stories); for example:
(4) a. Democrats plan to push legislation this spring
that would force the Iraqi government to spend
its own surplus to rebuild.
b. A protester said that despite the approval of the
Interim Security pact, the Iraqi people would
break it in a referendum next year.
Obviously, after some time these expressions will no
longer make sense, since there is no ?at-the-time-of-
writing? time stamp associated with these sentences:
for the reader of a Wikipedia article, the reference
date is the time of reading. In the case of the above
example, these sentences were written in April and
December 2008, respectively.11 Arguably, these sen-
tences should be corrected, making the temporal ex-
pressions fully-specified (e.g. in spring of 2009 and
in 2009), or context-dependent (e.g. in spring of
that year and the following year) if there is a context
in the article which supports their correct interpreta-
tion. Of course, not only the temporal expressions
need to be revised, but also the tense and aspect of
the verbs used in the sentences. In the gold stan-
dard annotations, however, we provided the values
by interpreting these expressions with respect to the
document time stamp (i.e. 2010-SP and 2010), as
the text itself does not provide any evidence that other
dates were intended.
11Somewhat laborious document archaeology allows this in-
formation to be extracted from Wikipedia?s archive.
918
Pos Count Token class or lexical form
1 4650 NUMBER DIGIT 2
2 1942 :
3 1499 -
4 1329 NUMBER DIGIT 4
5 828 ARTICLE
6 765 TEMPORALUNIT
7 634 TEMPORALUNIT PLURAL
8 555 PREPOSITION
9 528 now
10 411 t
11 403 WEEKDAYNAME
12 335 NUMBER WORD
13 329 MONTHNAME
14 242 MONTHNAME ABBR
15 240 DAYPART
16 233 DEMONSTRATIVE
17 224 ,
Pos Count Token class or lexical form
18 222 today
19 202 NUMBER DIGIT 1
20 191 last
21 171 WEEKDAYNAME ABBR
22 145 NUMBER DIGIT 8
23 113 ago
24 108 former
25 96 time
26 79 right
27 69 new
28 69 future
29 67 gmt
30 65 next
31 63 past
32 61 yesterday
33 59 few
34 50 every
Pos Count Token class or lexical form
35 49 AMPM
36 48 ORDINAL DIGIT
37 48 ?
38 45 recently
39 43 year-old
40 42 later
41 41 tonight
42 39 christmas
43 36 tomorrow
44 36 current
45 35 couple
46 34 recent
47 33 earlier
48 32 and
49 31 early
50 31 DIRECT FREQ
51 31 ?s
Table 3: The most frequent tokens in TEs in the ACE 2005 Training corpus.
Pos Count Token class or lexical form
1 1181 MONTHNAME
2 1157 NUMBER DIGIT 4
3 674 NUMBER DIGIT 2
4 490 ARTICLE
5 288 PREPOSITION
6 221 NUMBER DIGIT 1
7 211 TEMPORALUNIT
8 206 TEMPORALUNIT PLURAL
9 165 ,
10 133 NUMBER WORD
11 99 SEASON
12 98 NUMBER DIGIT 3
13 82 bc
14 76 now
15 70 time
16 67 early
17 63 DEMONSTRATIVE
Pos Count Token class or lexical form
18 59 :
19 51 end
20 49 -
21 47 late
22 37 DAYPART
23 36 later
24 36 former
25 32 next
26 27 same
27 25 period
28 22 t
29 20 mid-
30 18 war
31 18 few
32 14 following
33 14 ORDINAL DIGIT
34 13 s
Pos Count Token class or lexical form
35 13 first
36 11 future
37 11 earlier
38 11 .
39 11 ?s
40 9 previous
41 9 christmas
42 8 last
43 8 AMPM
44 7 battle
45 7 DIRECT FREQ
46 6 short
47 6 several
48 6 season
49 6 recent
50 6 past
51 6 ?
Table 4: The most frequent tokens in TEs in the WikiWars corpus.
4.4 Use of Time Zone Information
Consider the following example, which comes from
the article 01 WW2:
(5) On December 7 (December 8 in Asian time zones),
1941, Japan attacked British and American holdings
with near simultaneous offensives against Southeast
Asia and the Central Pacific.
The italicized temporal expression is difficult to de-
tect, and it is not clear how it should be annotated.
But it is also imprecise with respect to which time
zone is intended: Asia encompasses 10 time zones.
Therefore it is impossible to fully interpret the ex-
pression. Note also that the expression combines a
time zone with a date, rather than with a time. While
uncommon, this is not incorrect; but the TIMEX2
guidelines do not explicitly allow for this circum-
stance.
4.5 Quotes Missing a Time Stamp
Occasionally it happens that an article contains a
quoted utterance, but there is no indication of when
the utterance was made. For example, in the docu-
ment 05 VietnamWar we find the following:
(6) Nixon said in an announcement, ?I am tonight an-
nouncing plans for the withdrawal of an additional
150,000 American troops to be completed during the
919
spring of next year. This will bring a total reduction
of 265,500 men in our armed forces in Vietnam below
the level that existed when we took office 15 months
ago.?
It is impossible to determine what dates are meant
by the three temporal expressions present in the an-
nouncement. In some cases this information may be
provided in citation footnotes, but this is not always
the case; when this is absent, such expressions can
only be annotated at the level of textual extent and a
localised, context-dependent semantics.
5 Comparing WikiWars to the ACE Data
A comparison of WikiWars with the ACE corpora
reveals some interesting differences.
5.1 Vocabulary Differences
First, we found differences on the level of the lexical
triggers that signal the presence of temporal expres-
sions. Because of space limitations, we provide here
only the main findings.
Tables 3 and 4 present the 51 most frequent to-
kens, including punctuation, in the ACE 2005 Train-
ing and WikiWars corpus, respectively. Some to-
kens are combined into what we call trigger classes;
for example, all weekday names belong to the class
WEEKDAYNAME.12
We can see that there are many classes that fall
into the top 51 positions for both corpora, e.g. the
names of temporal units (such as month and year).
But there are also clear differences. Month names
are the most frequent class in WikiWars, while they
are not so frequent in ACE. Similarly, year seasons
ranked very highly in WikiWars, but do not figure
in the rankings shown for ACE. On the other hand,
weekday names are quite frequent in the ACE corpus,
but do not occur in the table for WikiWars. This
suggests that these corpora make different use of
temporal expressions: in WikiWars we find many
references to the more distant past, thus the high use
of month names, but ACE documents tend to discuss
12The entries in the table correspond to the lexical and punctu-
ation clues that drive detection of temporal expressions: the high
rank of colons and dashes comes from their use in document
time stamps, which are considered markable by the TIMEX2
guidelines. The T token is a separator that often occurs in times-
tamps, e.g. 2005-01-25T11:08:00; the question mark appears
very often because some of the ACE timestamps are of the form
????-??-??T19:33:00.
temporally local issues, so they are more likely to
refer to days in the weeks preceding and following
the reference date.
Looking at individual tokens, we can see that de-
ictic expressions such as today, tonight, yesterday
and tomorrow are in the top 51 positions for ACE,
but almost never occur in WikiWars: there are only
three instances of today, two of tomorrow and one
of tonight in the corpus, and all of these appear only
in quoted speech. Similarly, ago occurred 113 times
in ACE, but only twice in WikiWars: once in quoted
speech, and once used incorrectly instead of earlier in
a context-dependent expression. Other tokens which
are frequent in ACE but rare in WikiWars are recent,
recently, current and currently.
5.2 Temporal Discourse Structure
A more interesting property that WikiWars exhibits,
and which is noticeably absent from the simpler ACE
data, is what we might think of as a discourse mech-
anism for resetting the temporal focus. This is a
feature of complex texts in general, rather than some-
thing that is specific to Wikipedia as a source. In
these cases, the discourse does not follow a single
global timeline from the beginning to the end of the
document, but is rather divided into subdiscourses
which describe separate chains of events that often
have common temporal starting points. This is typi-
cal in the description of big, often international, con-
flicts, where one can distinguish several theaters of
the war, i.e. the eastern and western theaters.
In most cases the switch to a different ?part of the
story? can be determined not only by analysing the
events and their geographic locations, but by recog-
nizing that the first date appearing in the new subdis-
course is generally fully specified. This is, however,
not always the case, as shown in the following exam-
ple extracted from the article 01 WW2:
(7) In northern Serbia, the Red Army, with limited sup-
port from Bulgarian forces, assisted the partisans in a
joint liberation of the capital city of Belgrade on Oc-
tober 20[1944]. A few days later, the Soviets launched
a massive assault against German-occupied Hungary
that lasted until the fall of Budapest in February 1945.
[. . . ]
By the start of July[1944], Commonwealth forces in
Southeast Asia had repelled the Japanese sieges in As-
sam, pushing the Japanese back to the Chindwin River
while the Chinese captured Myitkyina. In China, the
Japanese were having greater successes, having fi-
920
nally captured Changsha in mid-June[1944] and the
city of Hengyang by early August[1944]. Soon after,
they [. . . ] by the end of November[1944] and success-
fully linking up their forces in China and Indochina
by the middle of December[1944].
Clearly, quite sophisticated processing is required to
handle this phenomenon adequately.
6 Automated Processing of WikiWars
After we developed the WikiWars corpus, we used it
to evaluate our temporal expression tagger, DANTE,
which had been developed for participation in ACE.
Performance at finding temporal expressions in text is
traditionally reported, for example by (Mani and Wil-
son, 2000; Negri and Marseglia, 2005; Teisse`dre et
al., 2010), in terms of precision, recall and F-measure.
These can, however, be calculated in two ways, le-
nient and strict, corresponding to two tasks: detec-
tion (where a single character overlap between the
gold standard and system annotation counts as a cor-
rect answer) and recognition (where an exact overlap
is required).
Table 5 shows our tagger?s initial performance on
the data. While the lenient F-measure for extent
recognition was comparable to that obtained for the
ACE 2005 Training corpus (0.82 vs 0.78), the recall
was much lower: 0.75 vs 0.87. The difference in
strict results was even larger, where both precision
and recall were lower for WikiWars than for ACE,
resulting in an F-measure of 0.38. When evaluating
also the VAL attribute, the strict F-measure was quite
low for both corpora, but significantly lower for Wiki-
Wars: 0.17 vs 0.33. This illustrates how illusive it
may be to trust the performance of a tagger measured
on a single, possibly biased, data set.
In the light of the results of our comparison in Sec-
tion 5, it is clear that at some of the performance loss
here is simply due to domain differences with respect
to lexical triggers. So, we extended DANTE?s cov-
erage with approximately 20 temporal triggers and
modifiers to include the more common vocabulary
that appeared in the WikiWars data; we also modified
the recognition grammar to reduce the number of
spurious matches and extent errors. These changes
resulted in the improvements shown in Table 6. The
performance on extent recognition improves signif-
icantly for both sets of data, but the gap between
extent recognition and evaluation of the VAL attribute
Lenient Strict
Corpus and Task Prec Rec F Prec Rec F
WW - Extent only 0.90 0.75 0.82 0.42 0.35 0.38
WW - Extent + VAL 0.22 0.18 0.20 0.19 0.16 0.17
ACE - Extent only 0.71 0.87 0.78 0.53 0.65 0.58
ACE - Extent +VAL 0.34 0.42 0.37 0.30 0.36 0.33
Table 5: Initial performance of DANTE on WikiWars and
the ACE 2005 Training corpus.
Lenient Strict
Corpus and Task Prec Rec F Prec Rec F
WW - Extent only 0.98 0.99 0.99 0.95 0.95 0.95
WW - Extent + VAL 0.59 0.60 0.59 0.58 0.59 0.58
ACE - Extent only 0.88 0.93 0.90 0.75 0.79 0.77
ACE - Extent +VAL 0.63 0.67 0.65 0.57 0.60 0.58
Table 6: Current performance of DANTE on WikiWars
and the ACE 2005 Training corpus.
is much larger on WikiWars. This is most likely be-
cause the strategy of using the document time stamp
for the interpretation of context-dependent expres-
sions does not work at all for WikiWars documents,
whereas it works well for ACE documents, in line
with our earlier comments in regard to the genres of
the documents. This emphasises the need to develop
sophisticated methods for temporal focus tracking if
we are to extend current time-stamping technologies
beyond the relatively simplistic temporal structures
found in currently available corpora.
7 Conclusions and Future Work
We have presented a new corpus based on the his-
torical descriptions of 22 wars sourced from En-
glish Wikipedia, and we have described in detail
the methodology adopted to construct the corpus; the
corpus can be easily extended in the same way. We
annotated temporal expressions in these documents
with TIMEX2 tags, which provide both the textual
extents and the semantics of the expressions in the
context of whole article.
Following an analysis of the differences between
our new corpus and existing data sets, we then pre-
sented the results of automatic processing of the cor-
pus. This demonstrates that differences in the vo-
cabulary used for temporal expressions can be fairly
straightforwardly incorporated in a tagging tool, but
that appropriate processing of temporal structure in
complex documents requires more sophisticated tech-
niques than those required to handle existing corpora.
The WikiWars Corpus provides data that tests these
capabilities.
921
References
David Ahn, Sisay Fissaha Adafre, and Maarten de Rijke.
2005. Recognizing and Interpreting Temporal Expres-
sions in Open Domain Texts. In We Will Show Them:
Essays in Honour of Dov Gabbay, Vol 1, pages 31?50,
October.
David Ahn, Joris van Rantwijk, and Maarten de Rijke.
2007. A cascaded machine learning approach to in-
terpreting temporal expressions. In Proceedings of
Human Language Technologies: The Annual Confer-
ence of the North American Chapter of the Associa-
tion for Computational Linguistics (NAACL-HLT 2007),
Rochester, NY, USA, April.
Jennifer Baldwin. 2002. Learning Temporal Annotation
of French News. Master?s thesis, Dept. of Linguistics,
Georgetown University, April.
Branimir Boguraev, Jose Castan?o, Rob Gaizauskas, Bob
Ingria, Graham Katz, Bob Knippen, Jessica Littman,
Inderjeet Mani, James Pustejovsky, Antonio Sanfil-
ippo, Andrew See, Andrea Setzer, Roser Saur??, Am-
ber Stubbs, Beth Sundheim, Svetlana Symonenko, and
Marc Verhagen. 2005. TimeML 1.2.1 ? A Formal
Specification Language for Events and Temporal Ex-
pressions, October.
Branimir Boguraev, James Pustejovsky, Rie Ando, and
Marc Verhagen. 2007. TimeBank evolution as a com-
munity resource for TimeML parsing. Language Re-
sources and Evaluation, 41(1):91?115, 02.
Hamish Cunningham, Diana Maynard, Kalina Bontcheva,
and Valentin Tablan. 2002. GATE: A framework and
graphical development environment for robust NLP
tools and applications. In Proceedings of the 40th An-
niversary Meeting of the ACL.
Lisa Ferro, L. Gerber, I. Mani, B. Sundheim, and G. Wil-
son. 2005. TIDES 2005 Standard for the Annotation
of Temporal Expressions. Technical report, MITRE,
September.
Kadri Hacioglu, Ying Chen, and Benjamin Douglas. 2005.
Automatic time expression labeling for english and
chinese text. In Alexander F. Gelbukh, editor, Compu-
tational Linguistics and Intelligent Text Processing, 6th
International Conference, CICLing?05, Lecture Notes
in Computer Science, pages 548?559, Mexico City,
Mexico, February. Springer.
Benjamin Han, Donna Gates, and Lori Levin. 2006. From
language to time: A temporal expression anchorer. In
Proceedings of the Thirteenth International Symposium
on Temporal Representation and Reasoning (TIME?06),
pages 196?203. IEEE Computer Society, June.
Inderjeet Mani and George Wilson. 2000. Robust tem-
poral processing of news. In Proceedings of the 38th
Annual Meeting on Association for Computational Lin-
guistics (ACL ?00), pages 69?76, Morristown, NJ, USA,
October. Association for Computational Linguistics.
Pawel Mazur and Robert Dale. 2007. The DANTE Tem-
poral Expression Tagger. In Zygmunt Vetulani, editor,
Proceedings of the 3rd Language And Technology Con-
ference (LTC), Poznan, Poland, October.
Pawel Mazur and Robert Dale. 2008. What?s the Date?
High Accuracy Interpretation of Weekday Names. In
Proceedings of the 22nd International Conference on
Computational Linguistics (Coling 2008), pages 553?
560, Manchester, UK, August. Coling 2008 Organizing
Committee.
Matteo Negri and Luca Marseglia. 2005. Recognition
and normalization of time expressions: Itc-irst at tern
2004. Technical Report WP3.7, Information Society
Technologies, February.
Feng Pan, R. Mulkar, and J. R. Hobbs. 2006. Learning
event durations from event descriptions. In Proceed-
ings of the 21st International Conference on Computa-
tional Linguistics and 44th Annual Meeting of the Asso-
ciation for Computational Linguistics, pages 393?400,
Sydney, Australia, July. Association for Computational
Linguistics.
James Pustejovsky, J. Castan?o, R. Ingria, R. Saur??,
R. Gaizauskas, A. Setzer, and G. Katz. 2003. TimeML:
Robust Specification of Event and Temporal Expres-
sions in Text. In IWCS-5, Fifth International Workshop
on Computational Semantics, Tilburg, The Netherlands,
January.
James Pustejovsky, Kiyong Lee, Harry Bunt, and Lau-
rent Romary. 2010. ISO-TimeML: An International
Standard for Semantic Annotation. In Bente Maegaard
Joseph Mariani Jan Odjik Stelios Piperidis Mike Rosner
Daniel Tapias Nicoletta Calzolari (Conference Chair),
Khalid Choukri, editor, Proceedings of the Seventh
conference on International Language Resources and
Evaluation (LREC?10), Valletta, Malta, May. European
Language Resources Association (ELRA).
Estela Saquete. 2005. Temporal Expression Recognition
and Resolution applied to Event Ordering. Ph.D. thesis,
Departamento de Lenguages y Sistemas Informaticos,
Universidad de Alicante, June.
Frank Schilder. 2004. Extracting meaning from temporal
nouns and temporal prepositions. ACM Transactions
on Asian Language Information Processing (TALIP),
3(1):33?50, March.
Charles Teisse`dre, Delphine Battistelli, and Jean-Luc
Minel. 2010. Resources for calendar expressions se-
mantic tagging and temporal navigation through texts.
In Proceedings of LREC2010, May.
922
