Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1115?1126,
October 25-29, 2014, Doha, Qatar.
c?2014 Association for Computational Linguistics
A Regularized Competition Model for Question Difficulty Estimation in
Community Question Answering Services
Quan Wang
?
Jing Liu
?
Bin Wang
?
Li Guo
?
?
Institute of Information Engineering, Chinese Academy of Sciences, Beijing, P. R. China
{wangquan,wangbin,guoli}@iie.ac.cn
?
Harbin Institute of Technology, Harbin, P. R. China
jliu@ir.hit.edu.cn
Abstract
Estimating questions? difficulty levels is
an important task in community question
answering (CQA) services. Previous stud-
ies propose to solve this problem based
on the question-user comparisons extract-
ed from the question answering threads.
However, they suffer from data sparseness
problem as each question only gets a lim-
ited number of comparisons. Moreover,
they cannot handle newly posted question-
s which get no comparisons. In this pa-
per, we propose a novel question difficul-
ty estimation approach called Regularized
Competition Model (RCM), which natu-
rally combines question-user comparisons
and questions? textual descriptions into a
unified framework. By incorporating tex-
tual information, RCM can effectively deal
with data sparseness problem. We further
employ a K-Nearest Neighbor approach to
estimate difficulty levels of newly post-
ed questions, again by leveraging textu-
al similarities. Experiments on two pub-
licly available data sets show that for both
well-resolved and newly-posted question-
s, RCM performs the estimation task sig-
nificantly better than existing methods,
demonstrating the advantage of incorpo-
rating textual information. More interest-
ingly, we observe that RCM might provide
an automatic way to quantitatively mea-
sure the knowledge levels of words.
1 Introduction
Recent years have seen rapid growth in communi-
ty question answering (CQA) services. They have
been widely used in various scenarios, including
general information seeking on the web
1
, knowl-
1
http://answers.yahoo.com/
edge exchange in professional communities
2
, and
question answering in massive open online cours-
es (MOOCs)
3
, to name a few.
An important research problem in CQA is
how to automatically estimate the difficulty lev-
els of questions, i.e., question difficulty estima-
tion (QDE). QDE can benefit many applications.
Examples include 1) Question routing. Routing
questions to appropriate answerers can help ob-
tain quick and high-quality answers (Li and K-
ing, 2010; Zhou et al., 2009). Ackerman and
McDonald (1996) have demonstrated that rout-
ing questions by matching question difficulty lev-
el with answerer expertise level will make better
use of answerers? time and expertise. This is even
more important for enterprise question answering
and MOOCs question answering, where human
resources are expensive. 2) Incentive mechanism
design. Nam et al. (2009) have found that win-
ning point awards offered by reputation system-
s is a driving factor for user participation in C-
QA services. Assigning higher point awards to
more difficult questions will significantly improve
user participation and satisfaction. 3) Linguistics
analysis. Researchers in computational linguistics
are always interested in investigating the correla-
tion between language and knowledge, to see how
the language reflects one?s knowledge (Church,
2011). As we will show in Section 5.4, QDE pro-
vides an automatic way to quantitatively measure
the knowledge levels of words.
Liu et al. (2013) have done the pioneer work
on QDE, by leveraging question-user comparison-
s extracted from the question answering threads.
Specifically, they assumed that the difficulty lev-
el of a question is higher than the expertise level
of the asker (i.e. the user who asked the question),
but lower than that of the best answerer (i.e. the us-
er who provided the best answer). A TrueSkill al-
2
http://stackoverflow.com/
3
http://coursera.org/
1115
gorithm (Herbrich et al., 2006) was further adopt-
ed to estimate question difficulty levels as well as
user expertise levels from the pairwise compar-
isons among them. To our knowledge, it is the on-
ly existing work on QDE. Yang et al. (2008) have
proposed a similar idea, but their work focuses on
a different task, i.e., estimating difficulty levels of
tasks in crowdsourcing contest services.
There are two major drawbacks of previous
methods: 1) data sparseness problem and 2) cold-
start problem. By the former, we mean that un-
der the framework of previous work, each question
is compared only twice with the users (once with
the asker and the other with the best answerer),
which might not provide enough information and
contaminate the estimation accuracy. By the latter,
we mean that previous work only deals with well-
resolved questions which have received the best
answers, but cannot handle newly posted question-
s with no answers received. In many real-world
applications such as question routing and incentive
mechanism design, however, it is usually required
that the difficulty level of a question is known in-
stantly after it is posted.
To address the drawbacks, we propose further
exploiting questions? textual descriptions (e.g., ti-
tle, body, and tags) to perform QDE. Preliminary
observations have shown that a question?s difficul-
ty level can be indicated by its textual descrip-
tion (Liu et al., 2013). We take advantage of the
observations, and assume that if two questions are
close in their textual descriptions, they will also
be close in their difficulty levels, i.e., the smooth-
ness assumption. We employ manifold regular-
ization (Belkin et al., 2006) to characterize the
assumption. Manifold regularization is a well-
known technique to preserve local invariance in
manifold learning algorithms, i.e., nearby points
are likely to have similar embeddings (Belkin and
Niyogi, 2001). Then, we propose a novel Reg-
ularized Competition Model (RCM), which for-
malizes QDE as minimizing a loss on question-
user comparisons with manifold regularization on
questions? textual descriptions. As the smoothness
assumption offers extra information for inferring
question difficulty levels, incorporating it will ef-
fectively deal with data sparsity. Finally, we adopt
a K-Nearest Neighbor approach (Cover and Hart,
1967) to perform cold-start estimation, again by
leveraging the smoothness assumption.
Experiments on two publicly available data sets
collected from Stack Overflow show that 1) RCM
performs significantly better than existing meth-
ods in the QDE task for both well-resolved and
cold-start questions. 2) The performance of RCM
is insensitive to the particular choice of the term
weighting schema (determines how a question?s
textual description is represented) and the similar-
ity measure (determines how the textual similarity
between two questions is measured). The results
demonstrate the advantage of incorporating textu-
al information for QDE. Qualitative analysis fur-
ther reveals that RCM might provide an automatic
way to quantitatively measure the knowledge lev-
els of words.
The main contributions of this paper include: 1)
We take fully advantage of questions? textual de-
scriptions to address data sparseness problem and
cold-start problem which previous QDE methods
suffer from. To our knowledge, it is the first time
that textual information is introduced in QDE. 2)
We propose a novel QDE method that natural-
ly combines question-user comparisons and ques-
tions? textual descriptions into a unified frame-
work. The proposed method performs QDE sig-
nificantly better than existing methods. 3) We
demonstrate the practicability of estimating diffi-
culty levels of cold-start questions purely based on
their textual descriptions, making various applica-
tions feasible in practice. As far as we know, it is
the first work that considers cold-start estimation.
4) We explore how a word?s knowledge level can
be automatically measured by RCM.
The rest of the paper is structured as follows.
Section 2 describes the problem formulation and
the motivation of RCM. Section 3 presents the de-
tails of RCM. Section 4 discusses cold-start esti-
mation. Section 5 reports experiments and results.
Section 6 reviews related work. Section 7 con-
cludes the paper and discusses future work.
2 Preliminaries
2.1 Problem Formulation
A CQA service provides a platform where people
can ask questions and seek answers from others.
Given a CQA portal, consider a specific catego-
ry where questions on the same topic are asked
and answered, e.g., the ?C++ programming? cat-
egory of Stack Overflow. When an asker u
a
posts
a question q in the category, there will be sever-
al answerers to answer the question. Among all
the received answers, a best one will be chosen
1116
by the asker or voted by the community. The an-
swerer who provides the best answer is called the
best answerer u
b
. The other answerers are denoted
by O =
{
u
o
1
, u
o
2
, ? ? ? , u
o
M
}
. A question answering
thread (QA thread) is represented as a quadruplet
(
q, u
a
, u
b
,O
)
. Collecting all such QA threads in the
category, we get M users and N questions, denoted
byU = {u
1
, u
2
, ? ? ? , u
M
} and Q = {q
1
, q
2
, ? ? ? , q
N
}
respectively. Each user u
m
is associated with an
expertise score ?
m
, representing his/her expertise
level. A larger ?
m
indicates a higher expertise lev-
el of the user. Each question q
n
is associated with
a difficulty score ?
n
, representing its difficulty lev-
el. A larger ?
n
indicates a higher difficulty level
of the question. Difficulty scores (as well as ex-
pertise scores) are assumed to be comparable with
each other in the specified category. Besides, each
question q
n
has a textual description, and is repre-
sented as a V-dimensional term vector d
n
, where
V is the vocabulary size.
The question difficulty estimation (QDE) task
aims to automatically learn the question difficul-
ty scores (?
n
?s) by utilizing the QA threads T =
{
(
q, u
a
, u
b
,O
)
: q ? Q} as well as the question de-
scriptions D = {d
1
, d
2
, ? ? ? , d
N
} in the specified
category. Note that in Section 2 and Section 3, we
consider estimating difficulty scores of resolved
questions, i.e., questions with the best answers se-
lected or voted. Estimating difficulty scores of un-
resolved questions, e.g., newly posted ones, will
be discussed in Section 4.
2.2 Competition-based Methods
Liu et al. (2013) have proposed a competition-
based method for QDE. The key idea is to 1) ex-
tract pairwise competitions from the QA threads
and 2) estimate question difficulty scores based on
extracted competitions.
To extract pairwise competitions, it is assumed
that question difficulty scores and user expertise
scores are expressed on the same scale. Given a
QA thread
(
q, u
a
, u
b
,O
)
, it is further assumed that:
Assumption 1 (pairwise comparison assumption)
The difficulty score of question q is higher than the
expertise score of the asker u
a
, but lower than that
of the best answerer u
b
. Moreover, the expertise
score of the best answerer u
b
is higher than that
of the asker u
a
, as well as any answerer in O.
4
4
The difficulty score of question q is not assumed to be
lower than the expertise score of any answerer in O, since
such a user may just happen to see the question and respond
to it, rather than knowing the answer well.
Given the assumption, there are
(
|O| + 3
)
pairwise
competitions extracted from the QA thread, in-
cluding 1) one competition between the question
q and the asker u
a
, 2) one competition between
the question q and the best answerer u
b
, 3) one
competition between the best answerer u
b
and the
asker u
a
, and 4) |O| competitions between the best
answerer u
b
and each of the answerers in O. The
question q is the winner of the first competition,
and the best answerer u
b
is the winner of the re-
maining
(
|O| + 2
)
competitions. These pairwise
competitions are denoted by
C
q
=
{
u
a
?q, q?u
b
, u
a
?u
b
, u
o
1
?u
b
, ? ? ? , u
o
M
?u
b
}
,
where i ? j means that competitor j beats com-
petitor i in a competition. Let
C =
?
q?Q
C
q
(1)
be the set containing all the pairwise competitions
extracted from T .
Given the competition set C, Liu et al. (2013)
further adopted a TrueSkill algorithm (Herbrich
et al., 2006) to learn the competitors? skill level-
s (i.e. the question difficulty scores and the us-
er expertise scores). TrueSkill assumes that the
practical skill level of each competitor follows a
normal distribution N
(
?, ?
2
)
, where ? is the aver-
age skill level and ? is the estimation uncertain-
ty. Then it updates the estimations in an online
mode: for a newly observed competition with its
win-loss result, 1) increase the average skill level
of the winner, 2) decrease the average skill level
of the loser, and 3) shrink the uncertainties of both
competitors as more data has been observed. Yang
et al. (2008) have proposed a similar competition-
based method to estimate tasks? difficulty levels
in crowdsourcing contest services, by leveraging
PageRank (Page et al., 1999) algorithm.
2.3 Motivating Discussions
The methods introduced above estimate competi-
tors? skill levels based solely on the pairwise com-
petitions among them. The more competitions a
competitor participates in, the more accurate the
estimation will be. However, according to the
pairwise comparison assumption (Assumption 1),
each question participates in only two competi-
tions, one with the asker and the other with the
best answerer. Hence, there might be no enough
information to accurately infer its difficulty score.
We call this the data sparseness problem.
1117
(a) Low difficulty. (b) Medium difficulty. (c) High difficulty.
Figure 1: Tag clouds of SO/Math questions with different difficulty levels.
Taking advantage of additional metadata has
been demonstrated to be an effective way of deal-
ing with data sparsity in various applications such
as collaborative filtering (Claypool et al., 1999;
Schein et al., 2002) and personalized search (Dou
et al., 2007; Sugiyama et al., 2004). The ratio-
nale behind is to bridge the gap among users/items
by leveraging their similarities based on the meta-
data. As for QDE, preliminary observations have
shown that a question?s difficulty level can be in-
dicated by its textual description (Liu et al., 2013).
As an example, consider the QA threads in the
?mathematics? category of Stack Overflow. Di-
vide the questions into three groups: 1) low dif-
ficulty, 2) medium difficulty, and 3) high difficul-
ty, according to their difficulty scores estimated by
TrueSkill. Figure 1 visualizes the frequency dis-
tribution of tags in each group, where the size of
each tag is in proportion to its frequency in the
group. The results indicate that the tags associ-
ated with the questions do have the ability to re-
flect the questions? difficulty levels, e.g., low dif-
ficulty questions usually have tags such as ?home-
work? and ?calculus?, while high difficulty ones
usually have tags such as ?general topology? and
?number theory?. We further calculate the Pearson
correlation coefficient (Rodgers and Nicewander,
1988) between 1) the gap between the averaged
difficulty scores in each two groups and 2) the
Euclidean distance between the aggregated textu-
al descriptions in each two groups . The result is
r = 0.6424, implying that the difficulty gap is posi-
tively correlated with the textual distance. In other
words, the more similar two questions? textual de-
scriptions are, the more close their difficulty levels
are. Therefore, we take the textual information to
bridge the difficulty gap among questions, by as-
suming that
Assumption 2 (smoothness assumption) If two
questions q
i
and q
j
are close in their textual de-
scriptions d
i
and d
j
, they will also be close in their
difficulty scores ?
i
and ?
j
.
The smoothness assumption brings us additional
information about question difficulty scores by in-
ferring textual similarities. It serves as a supple-
ment to the pairwise competitions, and might help
address the data sparseness problem which previ-
ous methods suffer from.
3 Modeling Text Similarities for QDE
This section presents a novel Regularized Compe-
tition Model (RCM) for QDE, which combines the
pairwise competitions and the textual descriptions
into a unified framework. RCM can alleviate the
data sparseness problem and perform more accu-
rate estimation.
3.1 Regularized Competition Model
We start with several notations. As question dif-
ficulty scores can be directly compared with user
expertise scores, we take questions as pseudo user-
s. Let
?
? ? R
M+N
denote the skill levels (i.e. the
expertise scores and the difficulty scores) of all the
(pseudo) users:
?
?
i
=
{
?
i
, 1 ? i ? M,
?
i?M
, M < i ? M + N,
where
?
?
i
is the i-th entry of
?
?. The first M entries
are the user expertise scores, denoted by
?
?
u
? R
M
.
The last N entries are the question difficulty s-
cores, denoted by
?
?
q
? R
N
. Let
?
?
(u)
i
and
?
?
(q)
i
denote
the i-th entries of
?
?
u
and
?
?
q
respectively.
Exploiting Pairwise Competitions. We define
a loss on each pairwise competition i ? j:
?
(
?
?
i
,
?
?
j
)
= max
(
0, ? ?
(
?
?
j
?
?
?
i
))
p
, (2)
where p is either 1 or 2. The loss is defined on the
skill gap between the two competitors, i.e.,
?
?
j
?
?
?
i
,
1118
measuring the inconsistency between the expect-
ed outcome and the actual outcome. If the gap is
larger than a predefined threshold ?, competitor j
would probably beat competitor i in the compe-
tition, which coincides with the actual outcome.
Then the loss will be zero. Otherwise, there is a
higher chance that competitor j loses the competi-
tion, which goes against the actual outcome. Then
the loss will be greater than zero. The smaller the
gap is, the higher the chance of inconsistency be-
comes, and the greater the loss will be. Note that
the threshold ? can take any positive value since
we do not pose a norm constraint on
?
?.
5
Without
loss of generality we take ? = 1 throughout this
paper. As we will show in Section 3.2, the loss de-
fined in Eq. (2) has some similarity with the SVM
loss (Chapelle, 2007). We name it hinge loss when
p = 1, and quadratic loss when p = 2.
Given the competition set C, estimating skil-
l levels of (pseudo) users then amounts to solving
the following optimization problem:
min
?
?
?
(i? j)?C
?
(
?
?
i
,
?
?
j
)
+
?
1
2
?
?
T
?
?, (3)
where the first term is the empirical loss measur-
ing the total inconsistency; the second term is a
regularizer to prevent overfitting; and ?
1
? 0 is a
trade-off coefficient. It is also a competition-based
QDE method, called Competition Model (CM).
Exploiting Question Descriptions. Manifold
regularization is a well-known technique used in
manifold learning algorithms to preserve local in-
variance, i.e., nearby points are likely to have sim-
ilar embeddings (Belkin and Niyogi, 2001). In
QDE, the smoothness assumption expresses sim-
ilar ?invariance?, i.e., nearby questions (in terms
of textual similarities) are likely to have similar
difficulty scores. Hence, we characterize the as-
sumption with the following manifold regularizer:
R =
1
2
N
?
i=1
N
?
j=1
(
?
?
(q)
i
?
?
?
(q)
j
)
2
w
i j
=
?
?
T
q
D
?
?
q
?
?
?
T
q
W
?
?
q
=
?
?
T
q
L
?
?
q
, (4)
where w
i j
is the textual similarity between ques-
tion i and question j; W ? R
N?N
is the similarity
matrix with the (i, j)-th entry being w
i j
; D ? R
N?N
is a diagonal matrix with the i-th entry on the diag-
onal being d
ii
=
?
N
j=1
w
i j
; and L = D?W ? R
N?N
5
Given any
?
?
i
,
?
?
j
, and ?, there always exists a linear trans-
formation which keeps the sign of
(
? ?
(
?
?
j
?
?
?
i
))
unchanged.
is the graph Laplacian (Chung, 1997). Minimizing
R results in the smoothness assumption: for any
questions i and j, if their textual similarity w
i j
is
high, the difficulty gap
(
?
?
(q)
i
?
?
?
(q)
j
)
2
will be small.
A Hybrid Method. Combining Eq. (3) and
Eq. (4), we obtain RCM, which amounts to the
following optimization problem:
min
?
?
?
(i? j)?C
?
(
?
?
i
,
?
?
j
)
+
?
1
2
?
?
T
?
? +
?
2
2
?
?
T
q
L
?
?
q
. (5)
Here ?
2
? 0 is also a trade-off coefficient. The
advantages of RCM include 1) It naturally formal-
izes QDE as minimizing a manifold regularized
loss function, which seamlessly integrates both the
pairwise competitions and the textual description-
s. 2) By incorporating textual information, it can
address the data sparseness problem which previ-
ous methods suffer from, and perform significantly
better in the QDE task.
3.2 Learning Algorithm
Redefine the k-th pairwise competition (assumed
to be carried out between competitors i and j) as
(
x
k
, y
k
)
. x
k
? R
M+N
indicates the competitors:
x
(k)
i
= 1, x
(k)
j
= ?1, and x
(k)
l
= 0 for any l , i, j,
where x
(k)
l
is the l-th entry of x
k
. y
k
? {1,?1} is
the outcome: if competitor i beats competitor j,
y
k
= 1; otherwise, y
k
= ?1. The objective in Eq.
(5) can then be rewritten as
L
(
?
?
)
=
|C|
?
k=1
max
(
0, 1 ? y
k
(
?
?
T
x
k
))
p
+
1
2
?
?
T
Z
?
?,
where Z =
(
?
1
I
M
0
0 ?
1
I
N
+ ?
2
L
)
is a block matrix; I
M
?
R
M?M
and I
N
? R
N?N
are identity matrices; p =
1 corresponds to the hinge loss, and p = 2 the
quadratic loss. It is clear that the loss defined in
Eq. (2) has the same format as the SVM loss.
The objectiveL is differentiable for the quadrat-
ic loss but non-differentiable for the hinge loss.
We employ a subgradient method (Boyd et al.,
2003) to solve the optimization problem. The al-
gorithm starts at a point
?
?
0
and, as many iterations
as needed, moves from
?
?
t
to
?
?
t+1
in the direction
of the negative subgradient:
?
?
t+1
=
?
?
t
? ?
t
?L
(
?
?
t
)
,
1119
Algorithm 1 Regularized Competition Model
Require: competition set C and description setD
1:
?
?
0
? 1
2: for t = 0 : T ? 1 do
3: K
t
?
{
k : 1 ? y
k
(
?
?
T
t
x
k
)
> 0
}
4: ?L
(
?
?
t
)
? calculated by Eq. (6)
5:
?
?
t+1
?
?
?
t
? ?
t
?L
(
?
?
t
)
6: ?
t+1
?
{
?
?
0
,
?
?
1
, ? ? ? ,
?
?
t+1
}
7:
?
?
t+1
? argmin
?
???
t+1
L
(
?
?
)
8: end for
9: return
?
?
T
where ?
t
> 0 is the learning rate. The subgradient
is calculated as
?L
(
?
?
t
)
=
?
?
?
?
?
?
?
?
?
Z
?
?
t
?
?
k?K
t
y
k
x
k
, p=1,
Z
?
?
t
+ 2
?
k?K
t
x
k
x
T
k
?
?
t
? 2
?
k?K
t
y
k
x
k
, p=2,
(6)
where K
t
=
{
k : 1 ? y
k
(
?
?
T
t
x
k
)
> 0
}
. As it is not
always a descent method, we keep track of the best
point found so far (Boyd et al., 2003):
?
?
t+1
= arg min
?
???
t+1
L
(
?
?
)
,
where?
t+1
=
{
?
?
0
,
?
?
1
, ? ? ? ,
?
?
t+1
}
. The whole proce-
dure is summarized in Algorithm 1.
Convergence. For constant learning rate (i.e.,
?
t
= ?), Algorithm 1 is guaranteed to converge to
within some range of the optimal value, i.e.,
lim
t??
L
(
?
?
t
)
? L
?
< ?,
where L
?
denotes the minimum of L(?), and ? is a
constant defined by the learning rate ?. For more
details, please refer to (Boyd et al., 2003). During
our experiments, we set the iteration number as
T = 1000 and the learning rate as ?
t
= 0.001, and
convergence was observed.
Complexity. For both the hinge loss and the
quadratic loss, the time complexity (per itera-
tion) and the space complexity of RCM are both
O
(
|C| + ?N
2
)
. Here, |C| is the total number of
competitions, M and N are the numbers of user-
s and questions respectively, and ? is the ratio of
non-zero entries in the graph Laplacian L.
6
In the
analysis, we have assumed that M ? ?N
2
and
N ? ?N
2
.
6
Owing to the sparse nature of questions? textual descrip-
tions, the graph Laplacian L is usually sparse, with about
70% entries being zero according to our experiments.
4 Cold-Start Estimation
Previous sections discussed estimating difficulty s-
cores of resolved questions, from which pairwise
competitions could be extracted. However, for
newly posted questions without any answers re-
ceived, no competitions could be extracted and
none of the above methods work. We call it the
cold-start problem.
We heuristically apply a K-Nearest Neighbor
(KNN) approach (Cover and Hart, 1967) to cold-
start estimation, again by leveraging the smooth-
ness assumption. The key idea is to propagate
difficulty scores from well-resolved questions to
cold-start ones according to their textual simi-
larities. Specifically, suppose that there exists
a set of well-resolved questions whose difficul-
ty scores have already been estimated by a QDE
method. Given a cold-start question q
?
, we first
pick K well-resolved questions that are closest to
q
?
in textual descriptions, referred to as the near-
est neighbors. The difficulty score of question q
?
is then predicted as the averaged difficulty scores
of its nearest neighbors. The KNN method bridges
the gap between cold-start and well-resolved ques-
tions by inferring their textual similarities, and
might effectively deal with the cold-start problem.
5 Experiments
We have conducted experiments to test the effec-
tiveness of RCM in estimating difficulty scores of
both well-resolved and cold-start questions. More-
over, we have explored how a word?s difficulty lev-
el can be quantitatively measured by RCM.
5.1 Experimental Settings
Data Sets. We obtained a publicly available da-
ta set of Stack Overflow between July 31, 2008
and August 1, 2012
7
, containing QA threads in
various categories. We considered the categories
of ?C++ programming? and ?mathematics?, and
randomly sampled about 10,000 QA threads from
each category, denoted by SO/CPP and SO/Math
respectively. For each question, we took the title
and body fields as its textual description. For both
data sets, stop words in a standard list
8
and words
whose total frequencies are less than 10 were re-
moved. Table 1 gives the statistics of the data sets.
7
http://blog.stackoverflow.com/category/cc-wiki-dump/
8
http://jmlr.org/papers/volume5/lewis04a/a11-smart-
stop-list/english.stop
1120
# users # questions # competitions # words
SO/CPP 14,884 10,164 50,043 2,208
SO/Math 6,564 10,528 40,396 2,009
Table 1: Statistics of the data sets.
For evaluation, we randomly sampled 600 ques-
tion pairs from each data set, and asked annotators
to compare the difficulty levels of the questions
in each pair. We had two graduate students ma-
joring in computer science annotate the SO/CPP
questions, and two majoring in mathematics an-
notate the SO/Math questions. For each question,
only the title, body, and tags were exposed to the
annotators. Given a question pair
(
q
1
, q
2
)
, the an-
notators were asked to give one of the three labels:
q
1
? q
2
, q
2
? q
1
, or q
1
= q
2
, which respective-
ly means that question q
1
has a higher, lower, or
equal difficulty level compared with question q
2
.
We used Cohen?s kappa coefficient (Cohen, 1960)
to measure the inter-annotator agreement. The re-
sult is ? = 0.7533 on SO/CPP and ? = 0.8017
on SO/Math, indicating that the inter-annotator a-
greement is quite substantial on both data sets. Af-
ter removing the question pairs with inconsisten-
t labels, we got 521 annotated SO/CPP question
pairs and 539 annotated SO/Math question pairs.
We further randomly split the annotated ques-
tion pairs into development/test/cold-start sets,
with the ratio of 2:2:1. The first two sets were used
to evaluate the methods in estimating difficulty s-
cores of resolved questions. Specifically, the de-
velopment set was used for parameter tuning and
the test set was used for evaluation. The last set
was used to evaluate the methods in cold-start esti-
mation, and the questions in this set were excluded
from the learning process of RCM as well as any
baseline method.
Baseline Methods. We considered three base-
line methods: PageRank (PR), TrueSkill (TS), and
CM, which are based solely on the pairwise com-
petitions.
? PR first constructs a competitor graph, by
creating an edge from competitor i to com-
petitor j if j beats i in a competition. A
PageRank algorithm (Page et al., 1999) is
then utilized to estimate the relative impor-
tance of the nodes, i.e., question difficulty s-
cores and user expertise scores. The damping
factor was set from 0.1 to 0.9 in steps of 0.1.
? TS has been applied to QDE by Liu et al.
(2013). We set the model parameters in the
same way as they suggested.
? CM performs QDE by solving Eq. (3). We
set ?
1
in {0, 0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1}.
We compared RCM with the above baseline meth-
ods. In RCM, both parameters ?
1
and ?
2
were set
in {0, 0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1}.
Evaluation Metric. We employed accuracy
(ACC) as the evaluation metric:
ACC =
# correctly judged question pairs
# all question pairs
.
A question pair is regarded as correctly judged if
the relative difficulty ranking given by an estima-
tion method is consistent with that given by the
annotators. The higher the accuracy is, the better
a method performs.
5.2 Estimation for Resolved Questions
The first experiment tested the methods in estimat-
ing difficulty scores of resolved questions.
Estimation Accuracies. We first compared the
estimation accuracies of PR, TS, CM, and RCM
on the test sets of SO/CPP and SO/Math, obtained
with the best parameter settings determined by the
development sets. Table 2 gives the results, where
?H? denotes the hinge loss and ?Q? the quadratic
loss. In RCM, to calculate the graph Laplacian L,
we adopted Boolean term weighting schema and
took Jaccard coefficient as the similarity measure.
From the results, we can see that 1) RCM perform-
s significantly better than the baseline methods on
both data sets (t-test, p-value < 0.05), demonstrat-
ing the advantage of exploiting questions? textu-
al descriptions for QDE. 2) The improvements of
RCM over the baseline methods on SO/Math are
greater than those on SO/CPP, indicating that the
textual descriptions of the SO/Math questions are
more powerful in reflecting their difficulty level-
s. The reason is that the SO/Math questions are
much more heterogeneous, belonging to various
subfields of mathematics. The difficulty gaps a-
mong different subfields are sometimes obvious
(e.g., a question in topology in general has a high-
er difficulty level than a question in linear algebra),
making the textual descriptions more powerful in
distinguishing the difficulty levels.
Graph Laplacian Variants. We further inves-
tigated the performances of different term weight-
ing schemas and similarity measures in the graph
1121
PR TS
CM RCM
H Q H Q
SO/CPP 0.5876 0.6134 0.6340 0.6753 0.7371 0.7268
SO/Math 0.6067 0.6109 0.6527 0.6820 0.7699 0.7699
Table 2: ACC of different methods for well-
resolved questions.
Notation Definition
Boolean v(w, q) =
?
?
?
?
?
?
?
1, if word w occurs in question q
0, otherwise
TF-1 v(w, q) = f (w, q), the number of occurrences
TF-2 v(w, q) = log ( f (w, q) + 1)
TF-3 v(w, q) = 0.5 +
0.5 ? f (w, q)
max { f (w, q) : w ? q}
TFIDF-1 v(w, q) = TF-1 ? log
|Q|
|{q?Q:w?q}|
TFIDF-2 v(w, q) = TF-2 ? log
|Q|
|{q?Q:w?q}|
TFIDF-3 v(w, q) = TF-3 ? log
|Q|
|{q?Q:w?q}|
Cosine Sim (d
1
, d
2
) =
d
T
1
d
2
?d
1
???d
2
?
? [0, 1]
Jaccard Sim
(
d
1
, d
2
)
=
d
T
1
d
2
?d
1
?
2
+?d
2
?
2
??d
1
???d
2
?
? [0, 1]
Table 3: Different term weighting schemas and
similarity measures.
Laplacian. The term weighting schema deter-
mines how a question?s textual description is rep-
resented. We explored a Boolean schema, three
TF schemas, and three TFIDF schemas (Salton
and Buckley, 1988). The similarity measure de-
termines how the textual similarity between two
questions is calculated. We explored the Co-
sine similarity and the Jaccard coefficient (Huang,
2008). Detailed descriptions are given in Table 3.
Figure 2 and Figure 3 show the estimation ac-
curacies of the RCM variants on the test sets of
SO/CPP and SO/Math respectively, again obtained
with the best parameter settings determined by
the development sets. The performance of CM
is also given (the straight lines in the figures).
9
From the results, we can see that 1) All the RCM
variants can improve over CM on both data sets,
and most of the improvements are significant (t-
test, p-value < 0.05). This further demonstrates
that the effectiveness of incorporating textual de-
scriptions is not affected by the particular choice
of the term weighting schema or similarity mea-
sure. 2) Boolean term weighting schema performs
the best, considering different similarity measures,
loss types, and data sets collectively. 3) Jaccard
9
CM performs better than PR and TS on both data sets.
0.55
0.6
0.65
0.7
0.75 Cosine Jaccard CM(H)
(a) Hinge loss.
0.55
0.6
0.65
0.7
0.75 Cosine Jaccard CM(Q)
(b) Quadratic loss.
Figure 2: ACC of RCM variants for well-resolved
questions on SO/CPP.
0.6
0.65
0.7
0.75
0.8 Cosine Jaccard CM(H)
(a) Hinge loss.
0.6
0.65
0.7
0.75
0.8 Cosine Jaccard CM(Q)
(b) Quadratic loss.
Figure 3: ACC of RCM variants for well-resolved
questions on SO/Math.
coefficient performs as well as Cosine similari-
ty on SO/Math, but almost consistently better on
SO/CPP. Throughout the experiments, we adopted
Boolean term weighting schema and Jaccard coef-
ficient to calculate the graph Laplacian.
5.3 Estimation for Cold-Start Questions
The second experiment tested the methods in es-
timating difficulty scores of cold-start questions.
We employed Boolean term weighting schema to
represent a cold-start question, and utilized Jac-
card Coefficient to select its nearest neighbors.
Figure 4 and Figure 5 list the cold-start estima-
tion accuracies of different methods on SO/CPP
and SO/Math respectively, with different K val-
ues (the number of nearest neighbors). As the
accuracy oscillates drastically with a K value s-
maller than 11 on SO/CPP and smaller than 6 on
SO/Math, we report the results with K ? [11, 20]
on SO/CPP and K ? [6, 15] on SO/Math. The av-
eraged (over different K values) cold-start estima-
tion accuracies are further given in Table 4. All the
results are reported on the cold-start sets, with the
optimal parameter settings adopted in Section 5.2.
From the results, we can see that 1) Cold-start es-
timation is possible, and can achieve a consider-
ably high accuracy by choosing a proper method
(e.g. RCM), making applications such as better
question routing and better incentive mechanism
1122
0.45
0.55
0.65
0.75
11 12 13 14 15 16 17 18 19 20
Acc
urac
y
K
PR TS CM(H)CM(Q) RCM(H) RCM(Q)
Figure 4: ACC of different methods for cold-start
questions on SO/CPP.
0.5
0.6
0.7
0.8
6 7 8 9 10 11 12 13 14 15
Acc
urac
y
K
PR TS CM(H)CM(Q) RCM(H) RCM(Q)
Figure 5: ACC of different methods for cold-start
questions on SO/Math.
design feasible in practice. 2) As the value of K
varies, RCM (the red/blue solid line) performs al-
most consistently better than CM with the same
loss type (the red/blue dotted line), as well as PR
and TS (the gray dotted lines), showing the advan-
tages of RCM in the cold-start estimation. 3) The
cold-start estimation accuracies on SO/Math are
higher than those on SO/CPP, again demonstrating
that the textual descriptions of the SO/Math ques-
tions are more powerful in reflecting their difficul-
ty levels. This is consistent with the phenomenon
observed in Section 5.2.
5.4 Difficulty Levels of Words
The third experiment explored how a word?s diffi-
culty level can be measured by RCM automatical-
ly and quantitatively.
On both SO/CPP and SO/Math, we evenly split
the range of question difficulty scores (estimated
by RCM) into 10 buckets, and assigned questions
to the buckets according to their difficulty scores.
A larger bucket ID indicates a higher difficulty lev-
el. Then, given a word w, we calculated its fre-
quency in each bucket as follows:
f
i
(w) =
# questions in bucket i where w occurs
# all questions in bucket i
.
To make the frequency meaningful, buckets with
less than 50 questions were discarded. We picked
PR TS
CM RCM
H Q H Q
SO/CPP 0.5870 0.5413 0.6120 0.6304 0.6380 0.6609
SO/Math 0.6411 0.6305 0.6653 0.7263 0.6958 0.7442
Table 4: Averaged ACC of different methods for
cold-start questions.
0
0.4
0.8
1.2
3 3.5 4 4.5 5 5.5 6 6.5 7
Occ
urre
nce 
freq
uenc
y
Question buckets
array string virtual multithread
Figure 6: Frequencies of different words in the
buckets on SO/CPP.
four words from each data set as examples. Their
normalized frequencies in different buckets are
shown in Figure 6 and Figure 7. On SO/CPP,
we can observe that ?array? and ?string? occur
most frequently in questions with lower difficul-
ty levels, ?virtual? higher, and ?multithread? the
highest. It coincides with the intuition: ?array?
and ?string? are usually related to some basic con-
cepts in programming language, while ?virtual?
and ?multithread? usually discuss more advanced
topics. Similar phenomena can be observed on
SO/Math. The results indicate that RCM might
provide an automatic way to measure the difficul-
ty levels of words.
6 Related Work
QDE is relevant to the problem of estimating task
difficulty levels and user expertise levels in crowd-
sourcing services (Yang et al., 2008; Whitehill et
al., 2009). Studies on this problem fall into two
categories: 1) binary response based and 2) par-
tially ordered response based. In the first cate-
gory, binary responses (i.e. whether the solution
provided by a user is correct or not) are observed,
and techniques based on item response theory are
further employed (Whitehill et al., 2009; Welin-
der et al., 2010; Zhou et al., 2012). In the second
category, partially ordered responses (i.e. which
of the two given solutions is better) are observed,
and pairwise comparison based methods are fur-
ther adopted (Yang et al., 2008; Liu et al., 2013).
QDE belongs to the latter.
1123
00.4
0.8
1.2
4 5 6 7 8 9
Occ
urre
nce 
freq
uenc
y
Question buckets
homework calculus ring topology
Figure 7: Frequencies of different words in the
buckets on SO/Math.
The most relevant work to ours is a pairwise
comparison based approach proposed by Liu et al.
(2013) to estimate question difficulty levels in C-
QA services. They have also demonstrated that
a similar approach can be utilized to estimate us-
er expertise levels (Liu et al., 2011). Yang et al.
(2008) and Chen et al. (2013) have also proposed
pairwise comparison based methods, for task dif-
ficulty estimation and rank aggregation in crowd-
sourcing settings. Our work differs from previous
pairwise comparison based methods in that it fur-
ther utilizes textual information, formalized as a
manifold regularizer.
Manifold regularization is a geometrically mo-
tivated framework for machine learning, enforcing
the learning model to be smooth w.r.t. the geomet-
rical structure of data (Belkin et al., 2006). Within
the framework, dimensionality reduction (Belkin
and Niyogi, 2001; Cai et al., 2008) and semi-
supervised learning (Zhou et al., 2004; Zhu and
Lafferty, 2005) algorithms have been constructed.
In dimensionality reduction, manifold regulariza-
tion is utilized to guarantee that nearby points will
have similar low-dimensional representations (Cai
et al., 2008), while in semi-supervised learning it
is utilized to ensure that nearby points will have
similar labels (Zhou et al., 2004). In our work, we
assume that nearby questions (in terms of textual
similarities) will have similar difficulty levels.
Predicting reading difficulty levels of text is
also a relevant problem (Collins-Thompson and
Callan, 2004; Schwarm and Ostendorf, 2005). It
is a key to automatically finding materials at ap-
preciate reading levels for students, and also helps
in personalized web search (Collins-Thompson et
al., 2011). In the task of predicting reading dif-
ficulty levels, documents targeting different grade
levels are taken as ground truth, which can be eas-
ily obtained from the web. However, there is no
naturally annotated data for our QDE task on the
web. Other related problems include query dif-
ficulty estimation for search engines (Carmel et
al., 2006; Yom-Tov et al., 2005) and question dif-
ficulty estimation for automatic question answer-
ing systems (Lange et al., 2004). In these tasks,
query/question difficulty is system-oriented and ir-
relevant with human knowledge, which is a differ-
ent setting from ours.
7 Conclusion and Future Work
In this paper, we have proposed a novel method for
estimating question difficulty levels in CQA ser-
vices, called Regularized Competition Model (R-
CM). It takes fully advantage of questions? textu-
al descriptions besides question-user comparisons,
and thus can effectively deal with data sparsity and
perform more accurate estimation. A K-Nearest
Neighbor approach is further adopted to estimate
difficulty levels of cold-start questions. Experi-
ments on two publicly available data sets show
that RCM performs significantly better than exist-
ing methods in the estimation task, for both well-
resolved and cold-start questions, demonstrating
the advantage of incorporating textual informa-
tion. It is also observed that RCM might automat-
ically measure the knowledge levels of words.
As future work, we plan to 1) Enhance the ef-
ficiency and scalability of RCM. The complexity
analysis in Section 3.2 indicates that storing and
processing the graph Laplacian is a bottleneck of
RCM. We would like to investigate how to deal
with the bottleneck, e.g., via parallel or distribut-
ed computing. 2) Apply RCM to non-technical
domains. For non-technical domains such as the
?news and events? category of Yahoo! Answer-
s, there might be no strongly distinct notions of
?experts? and ?non-experts?, and it might be more
difficult to distinguish between ?hard questions?
and ?easy questions?. It is worthy investigating
whether RCM still works on such domains.
Acknowledgments
We would like to thank the anonymous review-
ers for their helpful comments. This work is
supported by the Strategic Priority Research Pro-
gram of the Chinese Academy of Sciences (grant
No. XDA06030200), the National Key Technolo-
gy R&D Program (grant No. 2012BAH46B03),
and the National Natural Science Foundation of
China (grant No. 61272427).
1124
References
Mark S. Ackerman and David W. McDonald. 1996.
Answer garden 2: merging organizational memory
with collaborative help. In Proceedings of the 1996
ACM Conference on Computer Supported Coopera-
tive Work, pages 97?105.
Mikhail Belkin and Partha Niyogi. 2001. Laplacian
eigenmaps and spectral techniques for embedding
and clustering. In Advances in Neural Information
Processing Systems, pages 585?591.
Mikhail Belkin, Partha Niyogi, and Vikas Sindhwani.
2006. Manifold regularization: a geometric frame-
work for learning from labeled and unlabeled ex-
amples. Journal of Machine Learning Research,
7:2399?2434.
Stephen Boyd, Lin Xiao, and Almir Mutapcic. 2003.
Subgradient methods. Lecture Notes of EE392o, S-
tanford University.
Deng Cai, Xiaofei He, Xiaoyun Wu, and Jiawei Han.
2008. Non-negative matrix factorization on mani-
fold. In Proceedings of the 8th IEEE International
Conference on Data Mining, pages 63?72.
David Carmel, Elad Yom-Tov, Adam Darlow, and Dan
Pelleg. 2006. What makes a query difficult? In
Proceedings of the 29th International ACM SIGIR
Conference on Research and Development in Infor-
mation Retrieval, pages 390?397.
Olivier Chapelle. 2007. Training a support vec-
tor machine in the primal. Neural Computation,
19(5):1155?1178.
Xi Chen, Paul N. Bennett, Kevyn Collins-Thompson,
and Eric Horvitz. 2013. Pairwise ranking aggrega-
tion in a crowdsourced setting. In Proceedings of the
6th ACM International Conference on Web Search
and Data Mining, pages 193?202.
Fan RK. Chung. 1997. Spectral Graph Theory, vol-
ume 92.
Kenneth Church. 2011. How many multiword expres-
sions do people know. In Proceedings of the ACL-
HLT Workshop on Multiword Expressions: from
Parsing and Generation to the Real World, pages
137?144.
Mark Claypool, Anuja Gokhale, Tim Miranda, Pavel
Murnikov, Dmitry Netes, andMatthew Sartin. 1999.
Combining content-based and collaborative filters in
an online newspaper. In Proceedings of the ACM
SIGIR workshop on Recommender Systems.
Jacob Cohen. 1960. A coefficient of agreemen-
t for nominal scales. Educational and Psychological
Measurement, 20(1):37?46.
Kevyn Collins-Thompson and James P. Callan. 2004.
A language modeling approach to predicting reading
difficulty. In Proceedings of the 2004 Conference of
the North American Chapter of the Association for
Computational Linguistics: Human Language Tech-
nologies, pages 193?200.
Kevyn Collins-Thompson, Paul N Bennett, Ryen W
White, Sebastian de la Chica, and David Sontag.
2011. Personalizing web search results by reading
level. In Proceedings of the 20th ACM Internation-
al Conference on Information and Knowledge Man-
agement, pages 403?412.
Thomas Cover and Peter Hart. 1967. Nearest neighbor
pattern classification. IEEE Transactions on Infor-
mation Theory, 13(1):21?27.
Zhicheng Dou, Ruihua Song, and Ji Rong Wen. 2007.
A large-scale evaluation and analysis of personal-
ized search strategies. In Proceedings of the 16th
International Conference on World Wide Web, pages
581?590.
Ralf Herbrich, Tom Minka, and Thore Graepel. 2006.
Trueskill: a bayesian skill rating system. In Ad-
vances in Neural Information Processing Systems,
pages 569?576.
Anna Huang. 2008. Similarity measures for text doc-
ument clustering. In Proceedings of the 6th New
Zealand Computer Science Research Student Con-
ference, pages 49?56.
Rense Lange, Juan Moran, Warren R. Greiff, and Lisa
Ferro. 2004. A probabilistic rasch analysis of ques-
tion answering evaluations. In Proceedings of the
2004 Conference of the North American Chapter of
the Association for Computational Linguistics: Hu-
man Language Technologies, pages 65?72.
Baichuan Li and Irwin King. 2010. Routing ques-
tions to appropriate answerers in community ques-
tion answering services. In Proceedings of the 19th
ACM International Conference on Information and
Knowledge Management, pages 1585?1588.
Jing Liu, Young-In Song, and Chin-Yew Lin. 2011.
Competition-based user expertise score estimation.
In Proceedings of the 34th International ACM SI-
GIR Conference on Research and Development in
Information Retrieval, pages 425?434.
Jing Liu, Quan Wang, Chin-Yew Lin, and Hsiao-Wuen
Hon. 2013. Question difficulty estimation in com-
munity question answering services. In Proceed-
ings of the 2013 Conference on Empirical Methods
in Natural Language Processing, pages 85?90.
Kevin Kyung Nam, Mark S. Ackerman, and Lada A.
Adamic. 2009. Questions in, knowledge in?: a s-
tudy of naver?s question answering community. In
Proceedings of the SIGCHI Conference on Human
Factors in Computing Systems, pages 779?788.
Larry Page, Sergey Brin, Rajeev Motwani, and Terry
Winograd. 1999. The pagerank citation ranking:
bringing order to the web. Technical Report, Stan-
ford University.
1125
Joseph Lee Rodgers and W. Alan Nicewander. 1988.
Thirteen ways to look at the correlation coefficient.
The American Statistician, 42(1):59?66.
Gerard Salton and Christopher Buckley. 1988. Term-
weighting approaches in automatic text retrieval. In-
formation Processing & Management, 24(5):513?
523.
Andrew I. Schein, Alexandrin Popescul, Lyle H. Ungar,
and David M. Pennock. 2002. Methods and met-
rics for cold-start recommendations. In Proceed-
ings of the 25th International ACM SIGIR Confer-
ence on Research and Development in Information
Retrieval, pages 253?260.
Sarah E. Schwarm and Mari Ostendorf. 2005. Reading
level assessment using support vector machines and
statistical language models. In Proceedings of the
43rd Annual Meeting on Association for Computa-
tional Linguistics, pages 523?530.
Kazunari Sugiyama, Kenji Hatano, and Masatoshi
Yoshikawa. 2004. Adaptive web search based on
user profile constructed without any effort from user-
s. In Proceedings of the 13th International Confer-
ence on World Wide Web, pages 675?684.
Peter Welinder, Steve Branson, Serge Belongie, and
Pietro Perona. 2010. The multidimensional wis-
dom of crowds. In Advances in Neural Information
Processing Systems, pages 2424?2432.
Jacob Whitehill, Paul Ruvolo, Tingfan Wu, Jacob
Bergsma, and Javier R Movellan. 2009. Whose
vote should count more: optimal integration of la-
bels from labelers of unknown expertise. In Ad-
vances in Neural Information Processing Systems,
pages 2035?2043.
Jiang Yang, Lada Adamic, and Mark Ackerman. 2008.
Competing to share expertise: the taskcn knowledge
sharing community. In Proceedings of the 2nd In-
ternational AAAI Conference on Weblogs and Social
Media.
Elad Yom-Tov, Shai Fine, David Carmel, and Adam
Darlow. 2005. Learning to estimate query difficulty:
including applications to missing content detection
and distributed information retrieval. In Proceed-
ings of the 28th International ACM SIGIR Confer-
ence on Research and Development in Information
Retrieval, pages 512?519.
Dengyong Zhou, Olivier Bousquet, Thomas Navin
Lal, Jason Weston, and Bernhard Sch?olkopf. 2004.
Learning with local and global consistency. In Ad-
vances in Neural Information Processing Systems,
pages 321?328.
Yanhong Zhou, Gao Cong, Bin Cui, Christian S.
Jensen, and Junjie Yao. 2009. Routing questions to
the right users in online communities. In Proceed-
ings of the 25th IEEE International Conference on
Data Engineering, pages 700?711.
Dengyong Zhou, John C Platt, Sumit Basu, and Y-
i Mao. 2012. Learning from the wisdom of crowds
by minimax entropy. In Advances in Neural Infor-
mation Processing Systems, pages 2204?2212.
Xiaojin Zhu and John Lafferty. 2005. Harmonic mix-
tures: combining mixture models and graph-based
methods for inductive and scalable semi-supervised
learning. In Proceedings of the 22nd Internation-
al Conference on Machine Learning, pages 1052?
1059.
1126
Proceedings of the AHA! Workshop on Information Discovery in Text, pages 25?30,
Dublin, Ireland, August 23 2014.
Word Clustering Based on Un-LP Algorithm
Jiguang Liang1, Xiaofei Zhou1, Yue Hu1, Li Guo1?, Shuo Bai1,2
1National Engineering Laboratory for Information Security Technologies,
Institute of Information Engineering, Chinese Academy of Sciences,
Beijing 100190, China
2Shanghai Stock Exchange, Shanghai 200120, China
{liangjiguang, zhouxiaofei, huyue, guoli, baishuo}@iie.ac.cn
Abstract
Word clustering which generalizes specific features cluster words in the same syntactic or seman-
tic categories into a group. It is an effective approach to reduce feature dimensionality and feature
sparseness which are clearly useful for many NLP applications. This paper proposes an unsu-
pervised label propagation algorithm (Un-LP) for word clustering which uses multi-exemplars
to represent a cluster. Experiments on a synthetic 2D dataset show the strong ability of self-
correcting of the proposed algorithm. Besides, the experimental results on 20NG demonstrate
that our algorithm outperforms the conventional cluster algorithms.
1 Introduction
Word clustering is the task of the division of words into a certain number of clusters (groups or cat-
egories). Each cluster is required to consist of words that are similar to one another in syntactic or
semantic construct and dissimilar to words in distinctive groups. Word clustering generalizes specific
features by considering the common characteristics and ignoring the specific characteristics among the
individual features. It is an effective approach to reduce feature dimensionality and feature sparseness
(Han et al., 2005).
Recently, word clustering offers great potential for various useful NLP applications. Several studies
have addressed dependency parsing (Koo et al., 2008; Sagae and Gordon, 2009). Momtazi and Klakow
(2009) propose a word clustering approach to improve the performance of sentence retrieval in Question
Answering (QA) systems. Wu et al. (2010) present an approach to integrate word clustering information
into the process of unsupervised feature selection. Sun et al. (2011) use large-scale word clustering for
a semi-supervised relation extraction system. It also contributes to word sense disambiguation (Jin et
al., 2007), named entity recognition (Turian et al., 2010), part-of-speech tagging (Candito and Seddah,
2010) and machine translation (Uszkoreit and Brants, 2008; Jeff et al., 2011).
This paper presents an unsupervised algorithm for word clustering based on a probabilistic transition
matrix. Given a text document dataset, a list of words is generated by removing stop words and very
unfrequent words. Each word is required to be represented by the documents in the dataset, which results
in a co-occurrence matrix. By calculating the similarity of words, a word similarity graph with transition
(propagation) probabilities as weight edges is created. Then, a new kind word clustering algorithm, based
on label propagation, is applied.
The remaining parts of this paper are organized as follows: Section 2 formulates word clustering
problem in the context of unsupervised learning. Then we describe the word clustering algorithm in
Section 3 and present our experiments in Section 4. Finally we conclude our work in Section 5.
2 Problem setup
Assume that we have a corpus with N documents denoted by D = {d
1
, d
2
, ? ? ? , d
N
}; each document in
the corpus consists of a list of words denoted by d
i
= {w
1
, w
2
, ? ? ? , w
N
d
} where each w
i
is an item from
a vocabulary index with V distinct terms denoted by W = {v
1
, v
2
, ? ? ? , v
V
} and N
d
is the document
This work is licensed under a Creative Commons Attribution 4.0 International License. Page numbers and proceedings footer
are added by the organizers. License details: http://creativecommons.org/licenses/by/4.0/.
25
Algorithm 1 Semi-supervised LP Algorithm Algorithm 2 Unsupervised LP Word Clustering
Input: Input:
W
l
= {v
i
}
l
i=1
labeled data W = {v
i
}
u
i=1
(u = V ) unlabeled words
W
u
= {v
i
}
V
i=u
unlabeled data T
uu
= {T
ij
} 1 ? i, j ? V transition matrix
T = {T
ij
} 1 ? i, j ? V transition matrix Output:
Output: Y
U
? = {(?
1
,?
2
, ? ? ? ,?
L
} word-clusters
1: Begin 1: Begin
2: Row-normalize T by T
ij
= T
ij
/
?
V
k=1
T
ik
2: {V 0
L
, Y
L
, T
0
ul
} = initialization(W )
3: While not converged do 3: While not converged do
4: Propagate the labels by Y t+1 = TY t 4: Y t+1
U
= Semi ? LP (V t
L
,Y
t
L
,T
0
ul
,T
uu
)
5: Row-normalize Y t+1 5: ?t+1 = partition cluster(Y t+1
U
)
6: Clamp the labeled data 6: {V t+1
L
, T
t+1
ul
} = update(?t+1)
7: End while 7: End while
8: End 8: End
9: Return Y
U
9: Return ?t+1
length. We define the vector of word v
i
in the vocabulary to be v
i
=< v
id
1
, v
id
2
, ? ? ? , v
id
N
>. This
allows us to define a V ? N word-document matrix WD for the vocabularies. WD
ij
is equal to 1 if
v
i
? d
j
and equal to 0 otherwise. Then we take these words as the vertices of a connected graph. In
this paper, we define the edge weight ?
ij
as the co-occurrence frequency between v
i
and v
j
. Obviously,
we expect that larger edge weights allow labels to travel through more easily. So we define a V ? V
probabilistic transition matrix T where T
ij
= P (v
j
? v
i
) = ?
ij
/
?
V
k=1
?
kj
.
The L value which is used to represent the number of word clusters is specified. We define a V ? L
label matrix Y . Clearly, y
i
? Y represents the label probability distributions of word v
i
and Y ?
i
=
argmax Y
ik
(0 < k ? L) is its cluster label. For example, suppose L = 3 and a word v has a label
distribution y =< 0.1, 0.8, 0.1 >, it implies that v belongs to the second class.
3 Unsupervised LP Word Clustering
Label propagation (Zhu and Ghahramani, 2002) is a semi-supervised algorithm (Semi-LP) which needs
labeled data. Let {(v
1
, y
1
), ? ? ? , (v
l
, y
l
)} be labeled data, {(v
l+1
, y
l+1
), ? ? ? , (v
l+u
, y
l+u
)} be unlabeled
ones where l + u = V , Y
L
= [y
1
, , ? ? ? , y
l
]
T and Y
U
= [y
l+1
, ? ? ? , y
l+u
]
T
. Y
U
is un-known and l << u.
The label propagation algorithm is summarized in Algorithm 1.
In clustering problems, the goal is to select a set of exemplars from a dataset that are representative
of the dataset and each cluster is represented by one and only one exemplar (Krause and Gomes, 2010).
However, these exemplars are just all Semi-LP needs for clustering. LP lacks labeled data when is used
for unsupervised learning. In this paper, we are interested in partitioning words into several clusters
without any label priori using unsupervised LP (Un-LP) algorithm. Firstly we randomly select K (K ?
L, usually K is a multiple of L) words to construct an exemplar set E = {E
i
}
K
i=1
which is different
from the conventional exemplar-based cluster algorithms, assign class labels to them and construct the
corresponding probabilistic transition matrix T 0
ul
(initialization). These exemplars are considered as
labeled words and the rest U = W ? E are unlabeled words. T
ul
is the probability of transition from
unlabeled words to labeled ones. At this step, it needs the assurance that each class could be represented
by at least one exemplar and each exemplar could only be assigned one class label.
Now the connected weighted graph consists of two parts: G = (E ? U, T
ul
? T
uu
) where T
uu
is
the transition probability between unlabeled words. Next, our algorithm iterates between the following
three steps: given a set of LP parameters, we first propagate labels to unlabeled words with the initial
label distributions and get the corresponding labels (Semi?LP ). Then, these derived label distributions
are used to guide the partitioning of unlabeled data (partition cluster) to L clusters. We use residual
sum of squares (RSS) to choose the most centrally located words and replace the old exemplars that
represent the cluster. Specifically, for a word cluster c
i
= {v
1
, ? ? ? v
n
}, RSS
i
=
?
n
j=1
?
ij
. Then we sort
RSS
i
(0 < i < n) and update exemplars by the words with bigger RSS for this cluster (update). All
of the above steps, summarized in Algorithm 2, are iterated until convergence.
26
4 Experiment
4.1 Experimental Setup
To demonstrate properties of our proposed algorithm we investigate both a synthetic dataset and a real-
world dataset. Figure 1(a) shows the synthetic dataset. For a real world example we test Un-LP on a
subset of 20 Newsgroups (20NG) dataset which is preprocessed by removing common stop-words and
stemming. We use the classes atheism, hardware, hockey and space for test and randomly select
300 samples from each class as the test dataset in this section. However, 20NG is not suited for word
clustering evaluation. So, firstly, we reconstruct it by pair-wise testing which is a specification-based
testing criterion. Then we can obtain six (C2
4
= 6) pairwise subsets represented by {D
1
, ? ? ? ,D
6
}. In
order to facilitate the evaluation, we use those words that only occur in one class for clustering.
4.2 Exemplar Self-correction
This multi-step iterative method is simple to implement and surprisingly effective even with wrong initial
labeled data. To illustrate the point, we describe a simulated dataset with two-moon pattern. Obviously,
the points in one moon should be more similar to each other than the points across the moons as shown
in Figure 1(b). During the initialization phase, four points in the lower moon are selected and assigned
with different labels. The exemplars of the upper moon are mis-labeled as shown in Figure 1(c). In the
next five iteration steps, exemplars have been gradually moved to the center of the upper moon. Finally,
when t ? 5 Un-LP converges to a fixed assignment, which achieves an ideal cluster result.
?2 ?1 0 1 2 3
?2
?1
0
1
2
(1)  Synthetic Dataset
?2 ?1 0 1 2 3
?2
?1
0
1
2
(2) Ideal Cluster
?2 ?1 0 1 2 3
?2
?1
0
1
2
(3) t=1
?2 ?1 0 1 2 3
?2
?1
0
1
2
(4) t=2
?2 ?1 0 1 2 3
?2
?1
0
1
2
(5) t=3
?2 ?1 0 1 2 3
?2
?1
0
1
2
(6) t=4
?2 ?1 0 1 2 3
?2
?1
0
1
2
(7) t=5
?2 ?1 0 1 2 3
?2
?1
0
1
2
(8) t=6
Figure 1: Clustering result of unsupervised LP clustering algorithm on two-moon pattern dataset. (a)
Two-moon pattern dataset without any labeled points, (b) ideal clustering results. The convergence pro-
cess of unsupervised LP with t from 1 to 6 is shown from (c) to (h). Solid points are labeled data that are
selected to represent the clusters.
4.3 Word Clustering Performance
This section provides empirical evidence that the proposed algorithm performs well in the problem of
word clustering. Figure 2 shows the mean precisions and recalls over 10 runs of the baseline algorithms
as well as Un-LP.
From Figure 2, it can be clearly observed that Un-LP (K/L = 5) yields the best performance, followed
by Semi-LP with 20 labeled words. In general, the recalls with k-means and k-medoids are higher,
while the precisions are much lower. Figure 2 also shows the results of other two semi-supervised word
27
Cluster1 Cluster2 Cluster3 Cluster4
Atheism Hardware Hockey Space
geode religiously bene-
factor meng stacker
mcl mormon madden
mythology timmons cb-
newsj agnostics fanatism
engr chade tan falsifiable
existed ucsb sentence
driver soundblaster card-
s isbn manufacturer portal
prize mastering connectors
floppies dock adapter mul-
timedia installing bowman
configure physchem jumpers
motherboardsfdisk seagate
goalies bug hfd johansson
breton scorers carpenter
stevens smythe janney
fleury vancouver stl
cheveldae selanne win-
nipeg canadiens bure nyr
capitals
hub atom aug larson sts
orbital skydive parity
accelerations desire an-
niversary projects digital
protection atari temper-
atures voyagers zoology
updated teflon
Table 1: Top-20 words extracted by unsupervised LP word cluster algorithm.
clustering algorithms, PCK-means (Basu et al., 2004) and MPCK-means (Bilenko et al., 2004) with 200
must-link and cannot-link constraints. Also when comparing these unsupervised and semi-supervised
approaches previously mentioned, we can find that our unsupervised algorithm consistently achieves
significantly better results. Therefore, unsupervised LP seems to be a more reasonable algorithm design
in terms of word clustering.
0.4 0.7 1
0.8
0.9
1
Precision
R
ec
al
l
(b) D2
0.4 0.7 1
0.8
0.9
1
Precision
R
ec
al
l
(c) D3
0.4 0.7 1
0.8
0.9
1
Precision
R
ec
al
l
(d) D4
0.4 0.7 1
0.8
0.9
1
Precision
R
ec
al
l
(e) D5
0.4 0.7 1
0.8
0.9
1
Precision
R
ec
al
l
(f) D6
data3 K?medoids     PCK         MPCK    
0.4 0.7 1
0.6
0.8
1
Precision
R
ec
al
l
(a) D1
Un?LP          Semi?LP   K?means
Figure 2: Precision vs. recall of clustering results on 20NG where D
1
= {atheism vs. hardware}, D
2
=
{atheism vs. hockey}, D
3
= {atheism vs. space}, D
4
= {hardware vs. hcokey}, D
5
= {hardware
vs. space} and D
6
= {hockey vs. space}.
4.4 Effect of exemplar number e
We now investigate how the number of exemplar (e) for each cluster affects the clustering. In particular,
we are interested in performance under conditions when the number of exemplar grows - which is the
motivation for using more than one exemplars to represent a cluster. From Figure 3, we can observe that
when more words are labeled, Semi-LP shows further improvement in F-value. However, the changes
for PCK-means and MPCK-means are not obvious. Interestingly, even with the number of labeled data
growing, Semi-LP still performs worse than Un-LP. As is shown in Figure 3, Un-LP benefits much from
multi-exemplars (e ? 2). For D4, Un-LP is capable of achieving 99.58% in F-value when e = 7,
obtaining 21.32% improvement over the baseline (e = 1). This indicates that our algorithm leverages
the additional exemplars effectively.
4.5 Case Study
We conduct an experiment to illustrate the characteristics of the proposed algorithm in this subsection.
We cluster the words in all the four domain datasets and select the most representative words for each
cluster by sorting y
i
. In the experiment, we set L = 4 in order to match the class number of the
dataset. Table 1 shows top-20 representative words for each cluster, where the bold words are the ones
28
1 3 5 7 9
0.5
0.7
0.9
(a) Results on D1
1 3 5 7 9
0.5
0.7
0.9
(b) Results on D2
1 3 5 7 9
0.5
0.7
0.9
(c) Results on D3
1 3 5 7 9
0.5
0.7
0.9
(d) Results on D4
1 3 5 7 9
0.5
0.7
0.9
(e) Results on D5
1 3 5 7 9
0.5
0.7
0.9
(f) Results on D6
 
 
Semi?LP Un?LP PCK?Means MPCK?Means
Figure 3: Results on 20NG where X-axis is e, Y-axis is F-value.
domain meng configure johansson aug geode isbn bug parity
Atheism 100.00% 0 0 0 0 91.67% 89.47% 0
Hardware 0 90.91% 0 0 0 0 10.53% 66.67%
Hockey 0 9.09% 100.00% 0 0 8.33% 0 0
Space 0 0 0 100.00% 100.00% 0 0 33.33%
Table 2: Distributions of the incorrect words partitioned by the literal meaning.
with correct cluster label inferencing from the literal meaning. We observe that the accuracy of word
clustering on 20NG is very low (28.75%), which is at variance with the preceding conclusion. One
reason is that words in 20NG are stemmed, so, from Table 1 it can be clearly seen that there are some
non-English words (e.g., ?mcl?, ?hfd?, ?stl?, etc.) that don?t have actual meanings.
In order to gain further insights into the reasons, the distributions of these incorrect words have been
made in statistics. Partial results are shown in Table 2. From the distributions, we can find that many
words marked in italics in Table 1 have been correctly clustered, although they have nothing to do with
corresponding class in the literal meaning. Taking these words into account, the accuracy can reach
81.25% which demonstrates once again the effectiveness of Un-LP word clustering algorithm.
5 Conclusion
In this paper, we propose an unsupervised label propagation algorithm to tackle the problem of word
clustering. The proposed algorithm uses a similarity graph based on co-occurrence information to en-
courage similar words to have similar cluster labels. One of the advantages of this algorithm is that it
uses multi-exemplars to represent a cluster, which can significantly improve the clustering results.
Acknowledgements
This work was supported by Strategic Priority Research Program of Chinese Academy of Sciences
(XDA06030602), National Nature Science Foundation of China (No. 61202226), National 863 Program
(No. 2011AA010703), IIE Program (No.Y3Z0062201).
29
References
Basu S, Bilenko M, Mooney R J. 2004. A probabilistic framework for semi-supervised clustering. In Proceedings
of SIGKDD, pages 59-68.
Bilenko M, Basu S, Mooney R J. 2004. Integrating constraints and metric learning in semi-supervised clustering.
In Proceedings of ICML.
Blei D M, Ng A Y, Jordan M I. 2003. Latent dirichlet allocation. The Journal of machine Learning research,
pages 993-1022.
Candito M, Seddah D. 2010. Parsing word clusters. In Proceedings of the NAACL HLT 2010 First Workshop on
Statistical Parsing of Morphologically-Rich Languages, pages 76-84.
Han H, Manavoglu E, Zha H, et al. 2005. Rule-based word clustering for document metadata extraction. In
Proceedings of the 2005 ACM symposium on Applied computing, pages 1049-1053.
Jeff M A, Matsoukas S, Schwartz R. 2011. Improving Low-Resource Statistical Machine Translation with a Novel
Semantic Word Clustering Algorithm. In Proceedings of the MT Summit XIII.
Jin P, Sun X, Wu Y, et al. 2007. Word clustering for collocation-based word sense disambiguation. Computational
Linguistics and Intelligent Text Processing, pages 267-274.
Koo T, Carreras X, Collins M. 2008. Simple semi-supervised dependency parsing. In Proceedings of ACL-HLT,
pages 595-603.
Krause A, Gomes R G. 2010. Budgeted nonparametric learning from data streams. In Proceedings of ICML,
pages 391-398.
Momtazi S, Klakow D. 2009. A word clustering approach for language model-based sentence retrieval in question
answering systems. In Proceedings of CIKM, pages 1911-1914.
Sagae K, Gordon A S. 2009. Clustering words by syntactic similarity improves dependency parsing of predicate-
argument structures. In Proceedings of the 11th International Conference on Parsing Technologies, pages 192-
201.
Sun A, Grishman R, Sekine S. 2011. Semi-supervised relation extraction with large-scale word clustering. In
Proceedings of ACL, pages 521-529.
Turian J, Ratinov L, Bengio Y. 2010. Word representations: a simple and general method for semi-supervised
learning. In Proceedings of ACL, pages 384-394.
Uszkoreit J, Brants T. 2008. Distributed Word Clustering for Large Scale Class-Based Language Modeling in
Machine Translation. In Proceedings of ACL, pages 755-762.
Wu Q, Ye Y, Ng M, et al. 2010. Exploiting word cluster information for unsupervised feature selection Trends in
Artificial Intelligence, pages 292-303.
Zhu X, Ghahramani Z. 2002. Learning from labeled and unlabeled data with label propagation. Technical Report
CMU-CALD-02-107, Carnegie Mellon University.
Zhu X, Ghahramani Z, Lafferty J. 2003. Semi-supervised learning using gaussian fields and harmonic functions.
In Proceedings of ICML, pages 912-919.
30
