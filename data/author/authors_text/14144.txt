Proceedings of the 12th European Workshop on Natural Language Generation, pages 34?41,
Athens, Greece, 30 ? 31 March 2009. c?2009 Association for Computational Linguistics
Distinguishable Entities: Definition and Properties
Monique Rolbert
Laboratoire d?Informatique
Fondamentale de Marseille,
LIF, CNRS UMR 6166,
Aix-Marseille Universite?,
Marseille, France
monique.rolbert@lif.univ-mrs.fr
Pascal Pre?a
Laboratoire d?Informatique
Fondamentale de Marseille,
LIF, CNRS UMR 6166,
E?cole Centrale Marseille,
Marseille, France
pprea@ec-marseille.fr
Abstract
Many studies in natural language process-
ing are concerned with how to generate
definite descriptions that evoke a discourse
entity already introduced in the context.
A solution to this problem has been ini-
tially proposed by Dale (1989) in terms
of distinguishing descriptions and distin-
guishable entities. In this paper, we give
a formal definition of the terms ?distin-
guishable entity? in non trivial cases and
we show that its properties lead us to the
definition of a distance between entities.
Then, we give a polynomial algorithm to
compute distinguishing descriptions.
1 Introduction
Many studies in natural language processing are
concerned with how to generate definite descrip-
tions that evoke a discourse entity already intro-
duced in the context (Dale, 1989; Dale and Had-
dock, 1991; Dale and Reiter, 1995; van Deemter,
2002; Krahmer et al, 2002; Gardent, 2002; Ho-
racek, 2003), and more recently (Viethen and
Dale, 2006; Gatt and van Deemter, 2006; Croitoru
and van Deemter, 2007). Following Dale (1989),
these definite descriptions are named ?distinguish-
ing descriptions?. Informally, a distinguishing de-
scription is a definite description which designates
one and only one entity among others in a context
set. Conversely, this entity is named ?distinguish-
able entity?.
Things are simple if all the properties of the en-
tities are unary relations. Let?s give a set of entities
E = {e1, e2} with the following properties:
e1: red, bird ; e2: red, bird, eat ;
e1 is not a distinguishable entity because there
exists no distinguishing description that could
designate e1 and not e21. e2 is a distinguishable
1One could object that ?the red bird that is not eating?
entity and could be designated by the distinguish-
ing description ?the red bird that is eating?.
Many of the works cited above are concerned
with how to generate the best distinguishing
description with the best algorithm, essentially
in the unary case, that is if entities properties
are unary ones. They focus on the length or the
relevance of the generated expressions, or on the
efficiency of the algorithm. But none of them
give a formal definition of these ?distinguishable
entities?. They all use an intuitive definition,
more or less issued from the unary case and that
could be resumed as follow: an entity e is a
distinguishable entity in E if and only if there
exists a set of properties of e that are true of e and
of no other entity in E.
Unfortunately, this intuitive definition does not
apply as it is in non-unary cases. The main prob-
lem comes with the notion of ?set of properties of
e?: what is the set of properties of an entity if non-
unary relations occur? Let us see this problem on
an example. Suppose that we have an entity b1 that
is a bowl and that is on an entity t1 which is a ta-
ble. The set of entities is E = {b1, t1} with:
b1: bowl ; t1: table ; on(b1, t1)
What is the set of properties of b1? Dale
and Haddock (1991) and, more or less, Gardent
(2002), suggest that the property set for an entity
includes all the relations in which it is involved
(even non unary ones), and no others. Following
this definition, the set of properties of b1 should be
{bowl(b1), on(b1, t1)}.
Now, what if there is another bowl (b2), which
is on a table (t2)? The set of properties of b2 is
{bowl(b2), on(b2, t2)}, which is different from that
is a distinguishing description for e1. But we do not make
the Closed World Assumption (?every thing that is not said is
false?). So, negative properties have to appear explicitly, like
positive one, in entities description; their treatment causes no
particular problem in our model
34
of b1. But does it follow that b1 is distinguish-
able from b2? If the ?intuitive definition? is used,
the answer is yes: the set of properties of b1 (and
the formula (?x bowl(x) ? on(x, t1))) is true for
b1 and for no other entity in E = {b1, b2, t1, t2}.
But, one can immediately see that the ?right? an-
swer should depend on what we know about t1 and
t2. If the only thing we know is that t1 and t2
are tables, then there is no definite description that
designates b1 and not b2, and thus b1 is not distin-
guishable from b2. So, even if the formula on(-,
t1) is formally different from the formula on(-, t2)
and b1 satisfies the first one and not the second
one, that does not imply that b1 is distinguishable
from b2.
So, the fact is that to determine if b1 is dis-
tinguishable from b2, knowing that the set of
properties of b1 is true for b1 and not for b2
is not sufficient: we have to determine if t1 is
distinguishable from t2. That clearly leads to
a non-trivial recursive definition and non-trivial
recursive processes.
Two recent works describe algorithms that
deal with this problem (Krahmer et al, 2003;
Croitoru and van Deemter, 2007). Their works are
both based on graph theory and their algorithms
deal well with the non-unary case, but their
computations need exponential time.
In this paper, our main goal is to give a defini-
tion of a distinguishable entity which corresponds
to the intuitive sense and which works well even
in non-trivial cases. Then we study its properties,
which leads us to an interesting notion of distance
between entities. Finally, we give a polynomial al-
gorithm able to produce a distinguishing descrip-
tion whenever it is possible and which is based on
this definition.
2 A definition of ?distinguishable entity?
Intuitively, an entity e1 is distinguishable from an
entity e2 in two cases:
? e1 involves properties that are not involved
by e2 (we will say that e1 is 0-distinguishable
from e2)
? otherwise, e1 and e2 are in relations (we
will precisely see how below) with at
least two distinguishable entities e?1 and
e?2. In this case, we will say that e1 is
(k + 1)-distinguishable from e2 if e?1 is k-
distinguishable from e?2.
Basically, a property is an n-ary relation, together
with a rank (the argument?s position). For in-
stance, with the fact e1 eats e2, e1 has the property
eat with rank 1 (noted eat1) and e2 has the prop-
erty eat2. So, e1 and e2 do not have the same set
of properties. Conversely, if e1 eats X and e2 eats
Y , e1 and e2 involve the same property (eat1).
For an entity e, we denote P(e) the set of
its properties. We will say that a tuple t =
(x1, . . . , xp) matches a property pq with e if
p(x1, . . . , xq?1, e, xq, . . . , xp) is true.
Definition 1 (k-distinguishability Dk):
An entity e1 is 0-distinguishable from an entity e2
(we denote it e1D0 e2) if P(e1) is not included in
P(e2).
An entity e1 is k-distinguishable (k > 0) from an
entity e2 (we denote it e1Dk e2) if there exists a
relationRq inP(e1) and a tuple (x1, . . . , xp) such
that:
? (x1, . . . , xp) matches Rq with e1.
? For every (y1, . . . , yp) that matches Rq with
e2, there exists some xi and some k? < k such
that xi is k?-distinguishable from yi.
We remark that if e1 Dk e2, then e1 Dj e2, for
every j > k. So, we can define the more general
notion of distinguishability (without a rank).
Definition 2 (distinguishability D):
We say that an entity e1 is distinguishable from
an entity e2 (we denote it e1De2) if it is k-
distinguishable from e2, for some k ? 0.
We say that e is distinguishable in a set of entities
E if for every entity e? 6= e, e is distinguishable
from e?.
Distinguishable entities are the only one that can
be designated by a definite description.
Definition 1 seems rather complicated (due to
the universal quantifier in the second part) and thus
needs some justification. Let us see some exam-
ples:
An entity e which is a cat is 0-distinguishable
from an entity e? which is a dog because
P(e)={cat1} is not included in P(e?)={dog1}.
An entity e which is a cat and which eats b (a
bird) is 1-distinguishable from an entity e? which
is a cat and which eats m (a mouse). Actu-
ally, P(e) = {cat1, eat1} is included in P(e?) =
35
{cat1, eat1}, but there exists an entity (b) with
which e is in relation (via eat1) and which is dis-
tinguishable from m, which is the only entity with
which e? is in relation via eat1. So, the situation
can be resumed as in figure 1:
e? eats mm
e eats bl
?
0-distinguishable
figure 1: e is 1-distinguishable from e?
If we add the information that e? also eats f (a
fish), the conclusion remains true, as we can see
on figure 2.
e? eats mm e? eats fm
e eats bl



/
S
S
S
SSw
0-distinguishable
figure 2: e is 1-distinguishable from e?
But if we add the information that e? also eats
b?, a bird not distinguishable from b, then the con-
clusion is no longer true (see fig. 3).
e? eats mm e? eats fm
e eats bl
e? eats b?m






+




Q
Q
Q
Q
Q
Q
Qs
0-distinguishable not distinguishable
figure 3: e is not distinguishable from e?
e is not distinguishable from e?, no definite de-
scription can designate e and not e?. So, we see
that, in order for e to be distinguishable from e?,
b has to be distinguishable from all the entities
which are in relation with e? via eat1. That illus-
trates the necessity of the universal quantifier in
definition 1.
Let us see a more complicated example, where
tuples are involved.
E = {e, e?, x1, y1, z1, x2, y2, z2}
e, e?: man
x1, z1: ball ? y1 : cake
x2, y2: blond, child ? z2: child
e gives x1 to x2 (e gives a ball to a blond child)
e? gives y1 to y2 (e? gives a cake to a blond child)
e? gives z1 to z2 (e? gives a ball to a child)
The question is: Is e distinguishable from e?? The
answer is clearly yes, ?the man who gives a ball to
a blond child? is a definite description that desig-
nates e and not e?.
First, e is not 0-distinguishable from e?
(P(e) = {man1, give1} is included in P(e
?) =
{man1, give1}).
So, e is 1-distinguishable from e? if we find a
relation R in P(e) and a tuple T that matches R
with e and such that for each tuple T ? that matches
R with e?, T ? contains an entity e?i from which the
entity ei in T is 0-distinguishable.
Let us check if this is true for give1 and (x1, x2).
T1 = (x1, x2) matches give1 with e (give(e, y1, z1)
is true). There are two tuples T2 = (y1, y2) and
T3 = (z1, z2) that match give1 with e?.
x1 is 0-distinguishable from y1. So it is right for
T2.
x2 is 0-distinguishable from z2. So it is right for
T3.
The situation can be resumed by the schema in
figure 4:
e? gives y1 to y2m e? gives z1 to z2m
e gives x1 to x2l l



/
Z
Z
Z
Z
Z
Z~
0-distinguishable
figure 4: e is 1-distinguishable from e?
Let us add ?e? gives z1 to y2? to the above exam-
ple:
T4 = (z1, y2) matches give1 with e?. But x1 is
not distinguishable from z1 and x2 is not distin-
guishable from y2. This new information prevents
e being distinguishable from e?.
This case is represented on figure 5:
e? gives y1 to y2m e? gives z1 to z2m
e gives x1 to x2l l



/
Z
Z
Z
Z
Z
Z~
0-distinguishable
e? gives z1 to y2 ff
no distinguishability
figure 5: e is not distinguishable from e?
Again, we see that it is not sufficient to check the
existence of a tuple and a relation in P(e?) that
introduce the distinguishability to e via give1. We
have to check this for each tuple that matches give1
with e?.
36
Moreover, one can also notice in the above ex-
ample that the entity which ?leads to? the k?-
distinguishability is not unique. It may be different
upon each tuple (x1 for T2 and x2 for T3). This is
quiet different from the often used shortcut: e1 is
k-distinguishable from e2 if it is in relation with
one entity e?1 which is k?-distinguishable from an
entity e?2 which is related to e2.
So, although our definition may seem compli-
cated, it cannot be simplified if we want it to seize
the notion of distinguishability. We will now study
some of its properties.
3 Some properties
This definition of the k-distinguishability of an en-
tity leads to two interesting ideas:
? A set of entities can be organised in subsets
or classes via a related notion, confusability.
Confusability is a transitive relation and thus
it defines a partial order on subsets of E.
? A notion of distance can be defined from k-
distinguishability. Actually, the greatest k
is, the less distinguishable the related entities
are. The inverse of this k defines a distance
between entities.
3.1 A partial order on the set of entities
Definition 3 (Confusability C):
We say that e1 is k-confusable with e2 (we denote
it e1Ck e2) when not e1Dk e2.
We say that an entity e1 is confusable with an-
other entity e2 if e1Ck e2 for every k (we denote
it e1C e2). It is equivalent to say that an entity e1
is confusable with an entity e2 if e1 is not distin-
guishable from e2.
For example, e1 is 1-confusable with e2 if e1 is not
1-distinguishable (nor 0-distinguishable) from e2.
But, in the same time, e1 can be 2-distinguishable
from e2 and thus, not confusable with e2.
We remark that if e1Ck e2, then e1Cj e2, for every
j < k.
Intuitively, one would like C to be transitive (if
an entity e1 is confusable with an entity e2 which
is confusable with an entity e3, then e1 should be
confusable with e3).
Theorem 1 C is transitive.
Proof: We shall prove by induction on k that
if e1C e2 and e2C e3, then e1Ck e3, for every
k ? 0.
If e1C e2 and e2C e3, then P(e1) ? P(e2) ?
P(e3), and so, e1C0 e3.
Let us suppose that, for every e1, e2 and e3, if
e1C e2 and e2C e3, then e1Ck e3, and that there
exist three entities f , g, and h such that:
f C g, g C h and f Dk+1 h.
By the induction hypothesis, f Ck h, and so
P(f) ? P(h). Thus, as f Dk+1 h, there exist
(x1, . . . , xn) and a relation R such that:
R(f, x1, . . . xn)
?(z1, . . . zn) such that R(h, z1, . . . , zn),
?i ? n, k? < k such that xiDk? zi. (a)
(We have supposed, with no loss of generality,
that f has rank 1 in R)
As f C g, ?(y1, . . . , yn) such that:
R(g, y1, . . . , yn)
?i ? n, xiC yi
As g C h, ?(z?1, . . . , z
?
n) such that:
R(h, z?1, . . . , z
?
n)
?i ? n, yiC z?i
Thus, for every i ? n :
xiC yi and yiC z?i
By the induction hypothesis, for every i ? n,
xiCk z?i, which is in contradiction with (a).
2
We remark that C is reflexive and not symmet-
ric. But, since C is a transitive relation, the rela-
tion E defined by e1 E e2 if e1C e2 and e2C e1 is
an equivalence relation (with this relation, we put
in the same class entities which are confusable)
and C, when restricted to the quotient set (the set
of the equivalence classes) E/E , is a partial order
that we denote <C .
Since <C is an (partial) order relation on E/E ,
which is a finite set, it has maximal and minimal
elements. The maximal elements can be seen as
very well defined entities (they are confusable with
no other entity in other subsets) and the minimal
elements as the conceptual entities (no entities in
other subsets are confusable with them, but they
are confusable with many other entities). We re-
mark that two minimal entities (as two maximal
ones) are not confusable, since the set of the min-
imal elements of an ordered set is an antichain (as
the set of the maximal elements).
Thus, for example, a set of entities can be or-
ganised as in figure 6:
37



tables T1
@
@I
 
 
 
 
 
ff
