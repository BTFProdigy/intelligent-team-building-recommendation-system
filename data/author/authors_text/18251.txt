Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 206?211,
Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics
Combination of Recurrent Neural Networks and Factored Language
Models for Code-Switching Language Modeling
Heike Adel
heike.adel@student.kit.edu
Ngoc Thang Vu
Institute for Anthropomatics, Karlsruhe Institute of Technology (KIT)
thang.vu@kit.edu
Tanja Schultz
tanja.schultz@kit.edu
Abstract
In this paper, we investigate the appli-
cation of recurrent neural network lan-
guage models (RNNLM) and factored
language models (FLM) to the task of
language modeling for Code-Switching
speech. We present a way to integrate part-
of-speech tags (POS) and language in-
formation (LID) into these models which
leads to significant improvements in terms
of perplexity. Furthermore, a comparison
between RNNLMs and FLMs and a de-
tailed analysis of perplexities on the dif-
ferent backoff levels are performed. Fi-
nally, we show that recurrent neural net-
works and factored language models can
be combined using linear interpolation to
achieve the best performance. The final
combined language model provides 37.8%
relative improvement in terms of perplex-
ity on the SEAME development set and
a relative improvement of 32.7% on the
evaluation set compared to the traditional
n-gram language model.
Index Terms: multilingual speech processing,
code switching, language modeling, recurrent
neural networks, factored language models
1 Introduction
Code-Switching (CS) speech is defined as speech
that contains more than one language (?code?). It
is a common phenomenon in multilingual com-
munities (Auer, 1999a). For the automated pro-
cessing of spoken communication in these sce-
narios, a speech recognition system must be able
to handle code switches. However, the compo-
nents of speech recognition systems are usually
trained on monolingual data. Furthermore, there
is a lack of bilingual training data. While there
have been promising research results in the area
of acoustic modeling, only few approaches so far
address Code-Switching in the language model.
Recently, it has been shown that recurrent neu-
ral network language models (RNNLMs) can im-
prove perplexity and error rates in speech recogni-
tion systems in comparison to traditional n-gram
approaches (Mikolov et al, 2010; Mikolov et al,
2011). One reason for that is their ability to han-
dle longer contexts. Furthermore, the integration
of additional features as input is rather straight-
forward due to their structure. On the other hand,
factored language models (FLMs) have been used
successfully for languages with rich morphology
due to their ability to process syntactical features,
such as word stems or part-of-speech tags (Bilmes
and Kirchhoff, 2003; El-Desoky et al, 2010).
The main contribution of this paper is the appli-
cation of RNNLMs and FLMs to the challenging
task of Code-Switching. Furthermore, the two dif-
ferent models are combined using linear interpo-
lation. In addition, a comparison between them is
provided including a detailed analysis to explain
their results.
2 Related Work
For this work, three different topics are investi-
gated and combined: linguistic investigation of
Code-Switching, recurrent neural network lan-
guage modeling and factored language models.
In (Muysken, 2000; Poplack, 1978; Bokamba,
1989), it is observed that code switches occur at
positions in an utterance where they do not violate
the syntactical rules of the involved languages. On
the one hand, Code-Switching can be regarded as
a speaker dependent phenomenon (Auer, 1999b;
Vu, Adel et al, 2013). On the other hand, par-
ticular Code-Switching patterns are shared across
speakers (Poplack, 1980). It can be observed that
part-of-speech tags may predict Code-Switching
points more reliable than words themselves. The
206
authors of (Solorio et al, 2008a) predict Code-
Switching points using several linguistic features,
such as word form, language ID, part-of-speech
tags or the position of the word relative to the
phrase (BIO). The best result is obtained by com-
bining those features. In (Chan et.al., 2006), four
different kinds of n-gram language models are
compared to predict Code-Switching. It is dis-
covered that clustering all foreign words into their
part-of-speech classes leads to the best perfor-
mance.
In the last years, neural networks have been used
for a variety of tasks, including language model-
ing (Mikolov et al, 2010). Recurrent neural net-
works are able to handle long-term contexts since
the input vector does not only contain the cur-
rent word but also the previous hidden layer. It
is shown that these networks outperform tradi-
tional language models, such as n-grams which
only contain very limited histories. In (Mikolov
et al, 2011), the network is extended by factoriz-
ing the output layer into classes to accelerate the
training and testing processes. The input layer
can be augmented to model features, such as part-
of-speech tags (Shi et al, 2011; Adel, Vu et al,
2013). In (Adel, Vu et al, 2013), recurrent neural
networks are applied to Code-Switching speech. It
is shown that the integration of POS tags into the
neural network, which predicts the next language
as well as the next word, leads to significant per-
plexity reductions.
A factored language model refers to a word as a
vector of features, such as the word itself, morpho-
logical classes, POS tags or word stems. Hence, it
provides another possibility to integrate syntacti-
cal features into the language modeling process.
In (Bilmes and Kirchhoff, 2003), it is shown that
factored language models are able to outperform
standard n-gram techniques in terms of perplexity.
In the same paper, generalized parallel backoff is
introduced. This technique can be used to general-
ize traditional backoff methods and to improve the
performance of factored language models. Due to
the integration of various features, it is possible to
handle rich morphology in languages like Arabic
or Turkish (Duh and Kirchhoff, 2004; El-Desoky
et al, 2010).
3 Code-Switching Language Modeling
3.1 Motivation
Since there is a lack of Code-Switching data, lan-
guage modeling is a challenging task. Traditional
n-gram approaches may not provide reliable esti-
mates. Hence, more general features than words
should be integrated into the language models.
Therefore, we apply recurrent neural networks and
factored language models. As features, we use
part-of-speech tags and language identifiers.
3.2 Using Recurrent Neural Networks As
Language Model
This section describes the structure of the recur-
rent neural network (RNNLM) that we use as
Code-Switching language model. It has been pro-
posed in (Adel, Vu et al, 2013) and is illustrated
in figure 1.
w(t)
 f(t)
s(t)
 y(t)
 c(t)
U1  V
WU2
Figure 1: RNNLM for Code-Switching
(based upon a figure in (Mikolov et al, 2011))
Vectorw(t), which represents the current word us-
ing 1-of-N coding, forms the input of the recur-
rent neural network. Thus, its dimension equals
the size of the vocabulary. Vector s(t) con-
tains the state of the network and is called ?hid-
den layer?. The network is trained using back-
propagation through time (BPTT), an extension of
the back-propagation algorithm for recurrent neu-
ral networks. With BPTT, the error is propagated
through recurrent connections back in time for a
specific number of time steps t. Hence, the net-
work is able to remember information for several
time steps. The matrices U1, U2, V , and W con-
tain the weights for the connections between the
layers. These weights are learned during the train-
ing phase. Moreover, the output layer is factorized
207
into classes which provide language information.
In this work, four classes are used: English, Man-
darin, other languages and particles. Vector c(t)
contains the probabilities for each class and vector
y(t) provides the probabilities for each word given
its class. Hence, the probability P (wi|history) is
computed as shown in equation 1.
P (wi|history) = P (ci|s(t))P (wi|ci, s(t)) (1)
It is intended to not only predict the next word but
also the next language. Hence according to equa-
tion 1, the probability of the next language is com-
puted first and then the probability of each word
given the language. Furthermore, a vector f(t)
is added to the input layer. It provides features
(in this work part-of-speech tags) corresponding
to the current word. Thus, not only the current
word is activated but also its features. Since the
POS tags are integrated into the input layer, they
are also propagated into the hidden layer and back-
propagated into its history s(t). Hence, not only
the previous feature is stored in the history but also
features from several time steps in the past.
3.3 Using Factored Language Models
Factored language models (FLM) are another ap-
proach to integrate syntactical features, such as
part-of-speech tags or language identifiers into the
language modeling process. Each word is re-
garded as a sequence of features which are used
for the computation of the n-gram probabilities.
If a particular sequence of features has not been
detected in the training data, backoff techniques
will be applied. For our task of Code-Switching,
we develop two different models: One model with
only part-of-speech tags as features and one model
including also language information tags. Un-
fortunately, the number of possible parameters is
rather high: Different feature combinations from
different time steps can be used to predict the
next word (conditioning factors), different back-
off paths and different smoothing methods may
be applied. To detect useful parameters, the ge-
netic algorithm described in (Duh and Kirchhoff,
2004) is used. It is an evolution-inspired technique
that encodes the parameters of an FLM as binary
strings (genes). First, an initializing set of genes is
generated. Then, a loop follows that evaluates the
fitness of the genes and mutates them until their
average fitness is not improved any more. As fit-
ness value, the inverse perplexity of the FLM cor-
responding to the gene on the development set is
Wt-1        Pt-1     Pt-2
Wt-1        Pt-2 Wt-1        Pt-1
Pt-2 Wt-1 Pt-1
unigram
Figure 2: Backoff graph of the FLM
used. Hence, parameter solutions with lower per-
plexities are preferred in the selection of the genes
for the following iteration. In (Duh and Kirch-
hoff, 2004), it is shown that this genetic method
outperforms both knowledge-based and random-
ized choices. For the case of part-of-speech tags
as features, the method results in three condition-
ing factors: the previous word Wt?1 and the two
previous POS tags Pt?1 and Pt?2. The backoff
graph obtained by the algorithm is illustrated in
figure 2. According to the result of the genetic al-
gorithm, different smoothing methods are used at
different backoff levels: For the backoff from three
factors to two factors, Kneser-Ney discounting is
applied. If the probabilities for the factor combi-
nation Wt?1Pt?2 could not be estimated reliably,
absolute discounting is used. In all other cases,
Witten-Bell discounting is applied. An overview
of the different smoothing methods can be found
in (Rosenfeld, 2000).
4 Experiments and Results
4.1 Data Corpus
SEAME (South East Asia Mandarin-English) is a
conversational Mandarin-English Code-Switching
speech corpus recorded from Singaporean and
Malaysian speakers (D.C. Lyu et al, 2011). It
was used for the research project ?Code-Switch?
jointly performed by Nanyang Technological Uni-
versity (NTU) and Karlsruhe Institute of Technol-
ogy (KIT). The recordings consist of spontanously
spoken interviews and conversations of about 63
hours of audio data. For this task, we deleted all
hesitations and divided the transcribed words into
four categories: English words, Mandarin words,
particles (Singaporean and Malaysian discourse
particles) and others (other languages). These cat-
egories are used as language information in the
language models. The average number of Code-
Switching points between Mandarin and English
208
is 2.6 per utterance and the duration of monolin-
gual segments is quite short: The average dura-
tion of English and Mandarin segments is only
0.67 seconds and 0.81 seconds respectively. In to-
tal, the corpus contains 9,210 unique English and
7,471 unique Mandarin vocabulary words. We di-
vided the corpus into three disjoint sets (training,
development and test set) and assigned the data
based on several criteria (gender, speaking style,
ratio of Singaporean and Malaysian speakers, ra-
tio of the four categories, and the duration in each
set). Table 1 lists the statistics of the corpus in
these sets.
Train set Dev set Eval set
# Speakers 139 8 8
Duration(hrs) 59.2 2.1 1.5
# Utterances 48,040 1,943 1,018
# Token 525,168 23,776 11,294
Table 1: Statistics of the SEAME corpus
4.2 POS Tagger for Code-Switching Speech
To be able to assign part-of-speech tags to our
bilingual text corpus, we apply the POS tagger
described in (Schultz et al, 2010) and (Adel, Vu
et al, 2013). It consists of two different mono-
lingual (Stanford log-linear) taggers (Toutanova
et al, 2003; Toutanova et al, 2000) and a com-
bination of their results. While (Solorio et al,
2008b) passes the whole Code-Switching text to
both monolingual taggers and combines their re-
sults using different heuristics, in this work, the
text is splitted into different languages first. The
tagging process is illustrated in figure 3.
Mandarin is determined as matrix language (the
main language of an utterance) and English as em-
bedded language. If three or more words of the
embedded language are detected, they are passed
to the English tagger. The rest of the text is passed
to the Mandarin tagger, even if it contains foreign
words. The idea is to provide the tagger as much
context as possible. Since most English words in
the Mandarin segments are falsely tagged as nouns
by the Mandarin tagger, a postprocessing step is
applied. It passes all foreign words of the Man-
darin segments to the English tagger in order to
replace the wrong tags with the correct ones.
Wt-1 P2un-igr-gamu?ut-i? PiW???a?n-igr-gamu?u?gnP?
??1a21
?igr-gauP?-i???u?a?a?a????? ??PiPig1a21
??1-gga u? ut-i?- Pi??1-gga u? u?gnP?
?r1?1 ?1?1?gnP??g?i1? Pi a?PiPig1a21
????a?Pig?
Figure 3: Tagging of Code-Switching speech
4.3 Evaluation
For evaluation, we compute the perplexity of each
language model on the SEAME development and
evaluation set und perform an analysis of the dif-
ferent back-off levels to understand in detail the
behavior of each language model. A traditional 3-
gram LM trained with the SEAME transcriptions
serves as baseline.
4.3.1 LM Performance
The language models are evaluated in terms of per-
plexity. Table 2 presents the results on the devel-
opment and test set.
Model dev set test set
Baseline 3-gram 285.87 285.25
FLM (pos) 263.57 271.57
FLM (pos + lid) 263.84 276.99
RNNLM (pos) 233.50 268.05
RNNLM (pos + lid) 219.85 239.21
Table 2: Perplexity results
It can be noticed that both the RNNLM and the
FLM model outperform the traditional 3-gram
model. Hence, adding syntactical features im-
proves the word prediction. For the FLM, it leads
to no improvement to add the language identifier
as feature. In contrast, clustering the words into
their languages on the output layer of the RNNLM
leads to lower perplexities.
209
4.3.2 Backoff Level Analysis
To understand the different results of the RNNLM
and the FLM, an analysis similar to the one de-
scribed in (Oparin et al, 2012) is performed. For
each word, the backoff-level of the n-gram model
is observed. Then, a level-dependent perplexity is
computed for each model as shown in equation 2.
PPLk = 10
? 1Nk
?
wk
log10P (wk|hk) (2)
In the equation, k denotes the backoff-level, Nk
the number of words on this level, wk the current
word and hk its history. Table 3 shows how often
each backoff-level is used and presents the level-
dependent perplexities of each model on the de-
velopment set.
1-gram 2-gram 3-gram
# occurences 6894 11628 6226
Baseline 3-gram 5,786.24 165.82 28.28
FLM (pos) 4,950.31 147.70 30.99
RNNLM 3,231.02 151.67 21.24
Table 3: Backoff-level-dependent PPLs
In case of backoff to the 2-gram, the FLM pro-
vides the best perplexity, while for the 3-gram and
backoff to the 1-gram, the RNNLM performs best.
This may be correlated with the better over-all per-
plexity of the RNNLM in comparison to the FLM.
Nevertheless, the backoff to the 2-gram is used
about twice as often as the backoff to the 1-gram
or the 3-gram.
4.4 LM Interpolation
The different results of RNNLM and FLM show
that they provide different estimates of the next
word. Thus, a combination of them may reduce
the perplexities of table 2. Hence, we apply lin-
ear interpolation to the probabilities of each two
models as shown in equation 3.
P (w|h) = ??PM1(w|h)+(1??)?PM2(w|h) (3)
The equation shows the computation of the pob-
ability for word w given its history h. PM1 de-
notes the probability provided by the first model
and PM2 the probability from the second model.
Table 4 shows the results of this experiment. The
weights are optimized on the development set.
The interpolation of RNNLM and FLM leads to
the best results. This may be caused by the supe-
rior backoff-level-dependent PPLs in comparison
PPL PPL
Model weight on dev on eval
FLM + 3-gram 0.7, 0.3 211.13 227.57
RNNLM + 3-gram 0.8, 0.2 206.49 227.08
RNNLM + FLM 0.6, 0.4 177.79 192.08
Table 4: Perplexities after interpolation
to the 3-gram model. While the RNNLM performs
better for the 3-gram and for the backoff to the 1-
gram, the FLM performs the best in case of back-
off to the 2-gram which is used more often than
the other levels (table 3).
5 Conclusions
In this paper, we presented two different methods
for language modeling of Code-Switching speech:
Recurrent neural networks and factored language
models. We integrated part-of-speech tags and
language information to improve the performance
of the language models. In addition, we ana-
lyzed their behavior on the different backoff lev-
els. While the FLM performed better in case of
backoff to the 2-gram, the RNNLM led to a bet-
ter over-all performance. Finally, the models were
combined using linear interpolation. The com-
bined language model provided 37.8% relative im-
provement in terms of perplexity on the SEAME
development set and a relative improvement of
32.7% on the evaluation set compared to the tra-
ditional n-gram LM.
References
H. Adel, N.T. Vu, F. Kraus, T. Schlippe, and T. Schultz.
2013 Recurrent Neural Network Language Model-
ing for Code Switching Conversational Speech In:
Proceedings of ICASSP 2013.
P. Auer 1999 Code-Switching in Conversation , Rout-
ledge.
P. Auer 1999 From codeswitching via language mixing
to fused lects toward a dynamic typology of bilin-
gual speech In: International Journal of Bilingual-
ism, vol. 3, no. 4, pp. 309-332.
J.A. Bilmes and K. Kirchhoff. 2003 Factored Lan-
guage Models and Generalized Parallel Backoff In:
Proceedings of NAACL, 2003.
E.G. Bokamba 1989 Are there syntactic constraints on
code-mixing? In: World Englishes, vol. 8, no. 3, pp.
277-292.
J.Y.C. Chan, PC Ching, T. Lee, and H. Cao 2006
Automatic speech recognition of Cantonese-English
210
code-mixing utterances In: Proceeding of Inter-
speech 2006.
K. Duh and K. Kirchhoff. 2004. Automatic Learning
of Language Model Structure, pg 148. In: Proceed-
ings of the 20th international conference on Compu-
tational Linguistics.
A. El-Desoky, R. Schlu?ter, H.Ney 2010 AHybrid Mor-
phologically Decomposed Factored Language Mod-
els for Arabic LVCSR In: NAACL 2010.
D.C. Lyu, T.P. Tan, E.S. Cheng, H. Li 2011 An Anal-
ysis of Mandarin-English Code-Switching Speech
Corpus: SEAME In: Proceedings of Interspeech
2011.
M.P. Marcus, M.A. Marcinkiewicz, and B. Santorini.
1993 Building a large annotated corpus of english:
The penn treebank In: Computational Linguistics,
vol. 19, no. 2, pp. 313330.
T. Mikolov, M. Karafiat, L. Burget, J. Jernocky and S.
Khudanpur. 2010 Recurrent Neural Network based
Language Model In: Proceedings of Interspeech
2010.
T. Mikolov, S. Kombrink, L. Burget, J. Jernocky and
S. Khudanpur. 2011 Extensions of Recurrent Neu-
ral Network Language Model In: Proceedings of
ICASSP 2011.
P. Muysken 2000 Bilingual speech: A typology of
code-mixing In: Cambridge University Press, vol.
11.
I. Oparin, M. Sundermeyer, H. Ney, J.-L. Gauvain
2012 Performance analysis of Neural Networks
in combination with n-gram language models In:
ICASSP, 2012.
S. Poplack 1978 Syntactic structure and social func-
tion of code-switching , Centro de Estudios Puertor-
riquenos, City University of New York.
S. Poplack 1980 Sometimes ill start a sentence in
spanish y termino en espanol: toward a typology of
code-switching In: Linguistics, vol. 18, no. 7-8, pp.
581-618.
R. Rosenfeld 2000 Two decades of statistical language
modeling: Where do we go from here? In: Proceed-
ings of the IEEE 88.8 (2000): 1270-1278.
T. Schultz, P. Fung, and C. Burgmer, 2010 Detecting
code-switch events based on textual features.
Y. Shi, P. Wiggers, M. Jonker 2011 Towards Recurrent
Neural Network Language Model with Linguistics
and Contextual Features In: Proceedings of Inter-
speech 2011.
T. Solorio, Y. Liu 2008 Part-of-speech tagging for
English-Spanish code-switched text In: Proceedings
of the Conference on Empirical Methods in Natu-
ral Language Processing. Association for Computa-
tional Linguistics, 2008.
T. Solorio, Y. Liu 2008 Learning to predict code-
switching points In: Proceedings of the Confer-
ence on Empirical Methods in Natural Language
Processing. Association for Computational Linguis-
tics, 2008.
K. Toutanova, C.D. Manning 2000 Enriching the
knowledge sources used in a maximum entropy part-
of-speech tagger In: Proceedings of the 2000 Joint
SIGDAT conference on Empirical methods in natu-
ral language processing and very large corpora: held
in conjunction with the 38th Annual Meeting of the
Association for Computational Linguistics, vol. 13.
K. Toutanova, D. Klein, C.D. Manning, and Y. Singer
2003 Feature-rich part-of-speech tagging with a
cyclic dependency network In: Proceedings of
NAACL 2003.
N.T. Vu, D.C. Lyu, J. Weiner, D. Telaar, T. Schlippe, F.
Blaicher, E.S. Chng, T. Schultz, H. Li 2012 A First
Speech Recognition System For Mandarin-English
Code-Switch Conversational Speech In: Proceed-
ings of Interspeech 2012.
N.T. Vu, H. Adel, T. Schultz 2013 An Investigation of
Code-Switching Attitude Dependent Language Mod-
eling In: In Statistical Language and Speech Pro-
cessing, First International Conference, 2013.
N. Xue, F. Xia, F.D. Chiou, and M. Palmer 2005 The
penn chinese treebank: Phrase structure annotation
of a large corpusk In: Natural Language Engineer-
ing, vol. 11, no. 2, pp. 207.
211
Proceedings of The First Workshop on Computational Approaches to Code Switching, pages 34?41,
October 25, 2014, Doha, Qatar.
c?2014 Association for Computational Linguistics
Exploration of the Impact of Maximum Entropy in Recurrent Neural
Network Language Models for Code-Switching Speech
Ngoc Thang Vu
1,2
and Tanja Schultz
1
1
Karlsruhe Institute of Technology (KIT),
2
University of Munich (LMU), Germany
thangvu@cis.lmu.de, tanja.schultz@kit.edu
Abstract
This paper presents our latest investiga-
tions of the jointly trained maximum en-
tropy and recurrent neural network lan-
guage models for Code-Switching speech.
First, we explore extensively the integra-
tion of part-of-speech tags and language
identifier information in recurrent neu-
ral network language models for Code-
Switching. Second, the importance of
the maximum entropy model is demon-
strated along with a various of experi-
mental results. Finally, we propose to
adapt the recurrent neural network lan-
guage model to different Code-Switching
behaviors and use them to generate artifi-
cial Code-Switching text data.
1 Introduction
The term Code-Switching (CS) denotes speech
which contains more than one language. Speakers
switch their language while they are talking. This
phenomenon appears very often in multilingual
communities, such as in India, Hong Kong or Sin-
gapore. Furthermore, it increasingly occurs in for-
mer monolingual cultures due to the strong growth
of globalization. In many contexts and domains,
speakers switch more often between their native
language and English within their utterances than
in the past. This is a challenge for speech recog-
nition systems which are typically monolingual.
While there have been promising approaches to
handle Code-Switching in the field of acoustic
modeling, language modeling is still a great chal-
lenge. The main reason is a shortage of training
data. Whereas about 50h of training data might
be sufficient for the estimation of acoustic mod-
els, the transcriptions of these data are not enough
to build reliable language models. In this paper,
we focus on exploring and improving the language
model for Code-switching speech and as a result
improve the automatic speech recognition (ASR)
system on Code-Switching speech.
The main contribution of the paper is the exten-
sive investigation of jointly trained maximum en-
tropy (ME) and recurrent neural language models
(RNN LMs) for Code-Switching speech. We re-
visit the integration of part-of-speech (POS) tags
and language identifier (LID) information in recur-
rent neural network language models and the im-
pact of maximum entropy on the language model
performance. As follow-up to our previous work
in (Adel, Vu et al., 2013), here we investigate
whether a recurrent neural network alone without
using ME is a suitable model for Code-Switching
speech. Afterwards, to directly use the RNN LM
in the decoding process of an ASR system, we
convert the RNN LM into the n-gram language
model using the text generation approach (Deoras
et al., 2011; Adel et al., 2014); Furthermore moti-
vated by the fact that Code-Switching is speaker
dependent (Auer, 1999b; Vu et al., 2013), we
first adapt the recurrent neural network language
model to different Code-Switching behaviors and
then generate artificial Code-Switching text data.
This allows us to train an accurate n-gram model
which can be used directly during decoding to im-
prove ASR performance.
The paper is organized as follows: Section 2
gives a short overview of related works. In Sec-
tion 3, we describe the jointly trained maximum
entropy and recurrent neural network language
models and their extension for Code-Switching
speech. Section 4 gives a short description of the
SEAME corpus. In Section 5, we summarize the
most important experiments and results. The study
is concluded in Section 6 with a summary.
2 Related Work
This section gives a brief introduction about the
related research regarding Code-Switching and re-
34
current language models.
In (Muysken, 2000; Poplack, 1978; Bokamba,
1989), the authors observed that code switches
occur at positions in an utterance following syn-
tactical rules of the involved languages. Code-
Switching can be regarded as a speaker depen-
dent phenomenon (Auer, 1999b; Vu et al., 2013).
However, several particular Code-Switching pat-
terns are shared across speakers (Poplack, 1980).
Furthermore, part-of-speech tags might be useful
features to predict Code-Switching points. The
authors of (Solorio et al., 2008b; Solorio et al.,
2008a) investigate several linguistic features, such
as word form, LID, POS tags or the position of
the word relative to the phrase for Code-Switching
prediction. Their best result is obtained by com-
bining all those features. (Chan et al., 2006)
compare four different kinds of n-gram langua-
ge models to predict Code-Switching. They dis-
cover that clustering all foreign words into their
POS classes leads to the best performance. In (Li
et al., 2012; Li et al., 2013), the authors propose
to integrate the equivalence constraint into lan-
guage modeling for Mandarin and English Code-
Switching speech recorded in Hong Kong.
In the last years, neural networks have been
used for a variety of tasks, including language
modeling (Mikolov et al., 2010). Recurrent neu-
ral networks are able to handle long-term contexts
since the input vector does not only contain the
current word but also the previous hidden layer.
It is shown that these networks outperform tradi-
tional language models, such as n-grams which
only contain very limited histories. In (Mikolov
et al., 2011a), the network is extended by factoriz-
ing the output layer into classes to accelerate the
training and testing processes. The input layer
can be augmented to model features, such as POS
tags (Shi et al., 2011; Adel, Vu et al., 2013). Fur-
thermore, artificial text can be automatically gen-
erated using recurrent neural networks to enlarge
the amount of training data (Deoras et al., 2011;
Adel et al., 2014).
3 Joint maximum entropy and recurrent
neural networks language models for
Code-Switching
3.1 Recurrent neural network language
models
The idea of RNN LMs is illustrated in Figure 1.
Vector w(t) forms the input of the recurrent neu-
Figure 1: RNN language model
ral network. It represents the current word using
1-of-N coding. Thus, its dimension equals the
size of the vocabulary. Vector s(t) contains the
state of the network - ?hidden layer?. The network
is trained using back-propagation through time
(BPTT), an extension of the back-propagation
algorithm for recurrent neural networks. With
BPTT, the error is propagated through recurrent
connections back in time for a specific number of
time steps t. Hence, the network is able to capture
a longer history than a traditional n-gram LM. The
matrices U , V and W contain the weights for the
connections between the layers. These weights are
learned during the training phase.
To accelerate the training process, (Mikolov et
al., 2011a) factorized the output layer into classes
based on simple frequency binning. Every word
belongs to exactly one class. Vector c(t) contains
the probabilities for each class and vector w(t)
provides the probabilities for each word given its
class. Hence, the probability P (w
i
|history) is
computed as shown in equation 1.
P (w
i
|history) = P (c
i
|s(t))P (w
i
|c
i
, s(t)) (1)
Furthermore in (Mikolov et al., 2011b), the au-
thors proposed to jointly train the RNN with ME
- RMM-ME - to improve the language model and
also ASR performance. The ME can be seen as
a weight matrix which directly connects the in-
put with the output layer as well as the input with
the class layer. This weight matrix can be trained
jointly with the recurrent neural network. ?Direct-
order? and ?direct connection? are the two impor-
tant parameters which define the length of history
and the number of the trained connections.
35
3.2 Code-Switching language models
To adapt RNN LMs to the Code-Switching task,
(Adel, Vu et al., 2013) analyzed the SEAME cor-
pus and observed that there are words and POS
tags which might have a high potential to predict
Code-Switching points. Therefore, it has been
proposed to integrate the POS and LID informa-
tion into the RNN LM. The idea is to factorize
the output layer into classes which provide lan-
guage information. By doing that, it is intended
to not only predict the next word but also the
next language. Hence according to equation 1, the
probability of the next language is computed first
and then the probability of each word given the
language. In that work, four classes were used:
English, Mandarin, other languages and particles.
Moreover, a vector f(t) which contains the POS
information is added to the input layer. This vec-
tor provides the corresponding POS of the current
word. Thus, not only the current word is activated
but also its features. Since the POS tags are in-
tegrated into the input layer, they are also propa-
gated into the hidden layer and back-propagated
into its history s(t). Hence, not only the previous
features are stored in the history but also features
from several time steps in the past.
In addition to that previous work, the experi-
ments in this paper aim to explore the source of
the improvements observed in (Adel, Vu et al.,
2013). We now clearly distinguish between the
impacts due to the long but unordered history of
the RNN and the effects of the maximum entropy
model which also captures information about the
most recent word and POS tag in the history.
4 SEAME corpus
To conduct research on Code-Switching speech
we use the SEAME corpus (South East Asia
Mandarin-English). It is a conversational
Mandarin-English Code-Switching speech corpus
recorded by (D.C. Lyu et al., 2011). Originally, it
was used for the research project ?Code-Switch?
which was jointly performed by Nanyang Tech-
nological University (NTU) and Karlsruhe Insti-
tute of Technology (KIT) from 2009 until 2012.
The corpus contains 63 hours of audio data which
has been recorded and manually transcribed in
Singapore and Malaysia. The recordings consist
of spontaneously spoken interviews and conver-
sations. The words can be divided into four lan-
guage categories: English words (34.3% of all to-
kens), Mandarin words (58.6%), particles (Singa-
porean and Malayan discourse particles, 6.8% of
all tokens) and others (other languages, 0.4% of
all tokens). In total, the corpus contains 9,210
unique English and 7,471 unique Mandarin words.
The Mandarin character sequences have been seg-
mented into words manually. The language dis-
tribution shows that the corpus does not contain a
clearly predominant language. Furthermore, the
number of Code-Switching points is quite high:
On average, there are 2.6 switches between Man-
darin and English per utterance. Additionally, the
duration of the monolingual segments is rather
short: More than 82% of the English segments and
73% of the Mandarin segments last less than one
second. The average duration of English and Man-
darin segments is only 0.67 seconds and 0.81 sec-
onds, respectively. This corresponds to an average
length of monolingual segments of 1.8 words in
English and 3.6 words in Mandarin.
For the task of language modeling and speech
recognition, the corpus has been divided into three
disjoint sets: training, development and evaluation
set. The data is assigned to the three different sets
based on the following criteria: a balanced distri-
bution of gender, speaking style, ratio of Singa-
porean and Malaysian speakers, ratio of the four
language categories, and the duration in each set.
Table 1 lists the statistics of the SEAME corpus.
Training Dev Eval
# Speakers 139 8 8
Duration(hours) 59.2 2.1 1.5
# Utterances 48,040 1,943 1,029
# Words 575,641 23,293 11,541
Table 1: Statistics of the SEAME corpus
5 Experiments and Results
This section presents all the experiments and re-
sults regarding language models and ASR on the
development and the evaluation set of the SEAME
corpus. However, the parameters were tuned only
on the development set.
5.1 LM experiments
5.1.1 Baseline n-gram
The n-gram language model served as the baseline
in this work. We used the SRI language model
toolkit (Stolcke, 2002) to build the CS 3-gram
baseline from the SEAME training transcriptions
36
containing all words of the transcriptions. Modi-
fied Kneser-Ney smoothing (Rosenfeld, 2000) was
applied. In total, the vocabulary size is around
16k words. The perplexities (PPLs) are 268.4 and
282.9 on the development and evaluation set re-
spectively.
5.1.2 Exploration of ME and of the
integration of POS and LID in RNN
To investigate the effect of POS and LID integra-
tion into the RNN LM and the importance of the
ME, different RNN LMs were trained.
The first experiment aims at investigating the
importance of using LID information for output
layer factorization. All the results are summarized
in table 2. The first RNNLM was trained with a
hidden layer of 50 nodes and without using output
factorization and ME. The PPLs were 250.8 and
301.1 on the development and evaluation set, re-
spectively. We observed some gains in terms of
PPL on the development set but not on the eval-
uation set compared to the n-gram LM. Even us-
ing ME and factorizing the output layer into four
classes based on frequency binning (fb), the same
trend could be noticed - only the PPL on the devel-
opment set was improved. Four classes were used
to have a fair comparison with the output factor-
ization with LID. However after including the LID
information into the output layer, the PPLs were
improved on both data sets. On top of that, using
ME provides some additional gains. The results
indicate that LID is a useful information source
for the Code-Switching task. Furthermore, the im-
provements are independent of the application of
ME.
Model Dev Eval
CS 3-gram 268.4 282.9
RNN LM 250.8 301.1
RNN-ME LM 246.6 287.9
RNN LM with fb 246.0 287.3
RNN-ME LM with fb 256.0 294.0
RNN LM with LID 241.5 274.4
RNN-ME LM with LID 237.9 269.3
Table 2: Effect of output layer factorization
In the second experiment we investigated the
use of POS information and the effect of the ME.
The results in Table 3 show that an integration of
POS without ME did not give any further improve-
ment compared to RNN LM. The reason could lie
in the fact that a RNN can capture a long history
but not the information of the word order. Note
that in the syntactic context, the word order is one
of the most important information. However us-
ing ME allows using the POS of the previous time
step to predict the next language and also the next
word, the PPL was improved significantly on de-
velopment and evaluation set. These results reveal
that POS is a reasonable trigger event which can
be used to support Code-Switching prediction.
Model Dev Eval
CS 3-gram 268.4 282.9
RNN LM 250.8 301.1
RNN-ME LM 246.6 287.9
RNN LM with POS 250.6 298.3
RNN-ME LM with POS 233.5 268.0
Table 3: Effect of ME on the POS integration into
the input layer
Finally, we trained an LM by integrating the
POS tags and factorizing the output layer with LID
information. Again without applying ME, we ob-
served that POS information is not helpful to im-
prove the RNN LM. Using the ME provides a big
gain in terms of PPL on both data sets. We ob-
tained a PPL of 219.8 and 239.2 on the develop-
ment and evaluation set respectively.
Model Dev Eval
CS 3-gram 268.4 282.9
RNN LM 250.8 301.1
RNN-ME LM 246.6 287.9
RNN LM with POS + LID 243.9 277.1
RNN-ME LM with POS+ LID 219.8 239.2
Table 4: Effect of ME on the integration of POS
and the output layer factorization using LID
5.1.3 Training parameters
Moreover, we investigated the effect of different
parameters, such as the backpropagation through
time (BPTT) step, the direct connection order and
the amount of direct connections on the perfor-
mance of the RNN-ME LMs. Therefore, different
LMs were trained with varying values for these
parameters. For each parameter change, the re-
maining parameters were fixed to the most suitable
value which has been found so far.
First, we varied the BPTT step from 1 to 5. The
BPTT step defines the length of the history which
is incorporated to update the weight matrix of the
37
RNN. The larger the BPTT step is, the longer is the
history which is used for learning. Table 5 shows
the perplexities on the SEAME development and
evaluation sets with different BPTT steps. The
results indicate that increasing BPTT might im-
prove the PPL. The best PPL can be obtained with
a BPTT step of 4. The big loss in terms of PPL
by using a BPTT step of 5 indicates that too long
histories might hurt the language model perfor-
mance. Another reason might be the limitation of
the training data.
BPTT 1 2 3 4 5
Dev 244.7 224.6 222.8 219.8 266.8
Eval 281.1 241.4 242.8 239.2 284.5
Table 5: Effect of the BPTT step
It has been shown in the previous section, that
ME is very important to improve the PPL espe-
cially for the Code-Switching task, we also trained
several RNN-ME LMs with various values for ?di-
rect order? and ?direct connection?. Table 6 and
7 summarize the PPL on the SEAME develop-
ment and evaluation set. The results reveal that
the larger the direct order is, the lower is the PPL.
We observed consistent PPL improvement by in-
creasing the direct order. However, the gain seems
to be saturated after a direct order of 3 or 4. In this
paper, we choose to use a direct order of 4 to train
the final model.
Direct order 1 2 3 4
Dev 238.6 231.7 220.5 219.8
Eval 271.8 261.4 240.7 239.2
Table 6: Effect of the direct order
Since the ?direct order? is related to the length
of the context, the size of the ?direct connection? is
a trade off between the size of the language model
and also the amount of the training data. Higher
?direct connection? leads to a larger model and
might improve the PPL if the amount of training
data is enough to train all the direct connection
weights. The results with four different data points
(50M, 100M, 150M and 200M) show that the best
model can be obtained on SEAME data set by us-
ing 100M of direct connection.
5.1.4 Artificial Code-Switching text
generation using RNN
The RNN LM demonstrates a great improvement
over the traditional n-gram language model. How-
#Connection 50M 100M 150M 200M
Dev 226.2 219.8 224.7 224.6
Eval 244.7 239.2 243.7 242.0
Table 7: Effect of the number of direct connections
ever, it is inefficient to use the RNN LM directly
in the decoding process of an ASR system. In or-
der to convert the RNN into a n-gram language
model, a text generation method which was pro-
posed in (Deoras et al., 2011) can be applied.
Moreover, it allows to generate more training data
which might be useful to improve the data sparsity
of the language modeling task for Code-Switching
speech. In (Deoras et al., 2011), the authors ap-
plied the Gibb sampling method to generate artifi-
cial text based on the probability distribution pro-
vided by the RNNs. We applied that technique
in (Adel et al., 2014) to generate Code-Switching
data and were able to improve the PPL and ASR
performance on CS speech. In addition to that pre-
vious work, we now propose to use several Code-
Switching attitude dependent language models in-
stead of the final best RNN LM.
Code-Switching attitude dependent language
modeling Since POS tags might have a potential
to predict Code-Switch points, (Vu et al., 2013)
performed an analysis of these trigger POS tags
on a speaker level. The CS rate for each tag was
computed for each speaker. Afterwards, we calcu-
lated the minimum, maximum and mean values as
well as standard deviations. We observed that the
spread between minimum and maximum values is
quite high for most of the tags. It indicates that al-
though POS information may trigger a CS event,
it is rather speaker dependent.
Motivated by this observation, we performed k-
mean clustering of the training text into three dif-
ferent portions of text data which describe differ-
ent Code-Switching behaviors (Vu et al., 2013).
Afterwards, the LM was adapted with each text
portion to obtain Code-Switching attitude depen-
dent language models. By using these models, we
could improve both PPL and ASR performance for
each speaker.
Artificial text generation To generate artificial
text, we first adapted the best RNN-ME LM de-
scribed in the previous section to three different
Code-Switching attitudes. Afterwards, we gen-
erated three different text corpora based on these
specific Code-Switching attitudes. Each corpus
38
contains 100M tokens. We applied the SRILM
toolkit (Stolcke, 2002) to train n-gram language
model and interpolated them linearly with the
weight =
1
3
. Table 8 shows the perplexity of the
resulting n-gram models on the SEAME develop-
ment and evaluation set. To make a comparison,
we also used the unadapted best RNN-ME LM to
generate two different texts, one with 300M to-
kens and another one with 235M tokens (Adel et
al., 2014). The results show that the n-gram LMs
trained with only the artificial text data can not
outperform the baseline CS 3-gram. However they
provide some complementary information to the
baseline CS 3-gram LM. Therefore, when we in-
terpolated them with the baseline CS 3-gram, the
PPL was improved all the cases. Furthermore by
using the Code-Switching attitude dependent lan-
guage models to generate artificial CS text data,
the PPL was slightly improved compared to using
the unadapted one. The final 3-gram model (Final
3-gram) was built by interpolating all the Code-
Switching attitude dependent 3-gram and the base-
line CS 3-gram. It has a PPL of 249.3 and 266.9
on the development set and evaluation set.
Models Dev Eval
CS 3-gram 268.4 282.9
300M words text 391.3 459.5
+ CS 3-gram 250.0 270.9
235M words text 385.1 454.6
+ CS 3-gram 249.5 270.5
100M words text I 425.4 514.4
+ CS 3-gram 251.4 274.5
100M words text II 391.8 421.6
+ CS 3-gram 251.6 266.4
100M words text III 390.3 428.1
+ CS 3-gram 250.6 266.9
Interpolation of I, II and III 377.5 416.1
+ CS 3-gram (Final n-gram) 249.3 266.9
RNN-ME LM + POS + LID 219.8 239.2
Table 8: PPL of the N-gram models trained with
artificial text data
5.2 ASR experiments
For the ASR experiments, we applied BioKIT, a
dynamic one-pass decoder (Telaar et al., 2014).
The acoustic model is speaker independent and
has been trained with all the training data. To ex-
tract the features, we first trained a multilayer per-
ceptron (MLP) with a small hidden layer with 40
nodes. The output of this hidden layer is called
bottle neck features and is used to train the acous-
tic model. The MLP has been initialized with a
multilingual multilayer perceptron as described in
(Vu et al., 2012). The phone set contains English
and Mandarin phones, filler models for continu-
ous speech (+noise+, +breath+, +laugh+) and an
additional phone +particle+ for Singaporean and
Malayan particles. The acoustic model applied
a fully-continuous 3-state left-to-right HMM. The
emission probabilities were modeled with Gaus-
sian mixture models. We used a context dependent
acoustic model with 3,500 quintphones. Merge-
and-split training was applied followed by six it-
erations of Viterbi training. To obtain a dictio-
nary, the CMU English (CMU Dictionary, 2014)
and Mandarin (Hsiao et al., 2008) pronunciation
dictionaries were merged into one bilingual pro-
nunciation dictionary. Additionally, several rules
from (Chen et al., 2010) were applied which gen-
erate pronunciation variants for Singaporean En-
glish.
As a performance measure for decoding Code-
Switching speech, we used the mixed error rate
(MER) which applies word error rates to En-
glish and character error rates to Mandarin seg-
ments (Vu et al., 2012). With character error
rates for Mandarin, the performance can be com-
pared across different word segmentations. Ta-
ble 9 shows the results of the baseline CS 3-gram
LM, the 3-gram LM trained with 235M artificial
words interpolated with CS 3-gram LM and the fi-
nal 3-gram LM described in the previous section.
Compared to the baseline system, we are able to
improve the MER by up to 3% relative. Further-
more, a very small gain can be observed by using
the Code-Switching attitude dependent language
model compared to the unadapted best RNN-ME
LM.
Model Dev Eval
CS 3-gram 40.0% 34.3%
235M words text + CS-3gram 39.4% 33.4%
Final 3-gram 39.2% 33.3%
Table 9: ASR results on SEAME data
6 Conclusion
This paper presents an extensive investigation of
the impact of maximum entropy in recurrent neu-
ral network language models for Code-Switching
39
speech. The experimental results reveal that fac-
torization of the output layer of the RNN us-
ing LID always improved the PPL independent
whether the ME is used. However, the integra-
tion of the POS tags into the input layer only im-
proved the PPL in combination with ME. The best
LM can be obtained by jointly training the ME
and the RNN LM with POS integration and fac-
torization using LID. Moreover, using the RNN-
ME LM allows generating artificial CS text data
and therefore training an n-gram LM which car-
ries the information of the RNN-ME LM. This can
be directly used during decoding to improve ASR
performance on Code-Switching speech. On the
SEAME development and evaluation set, we ob-
tained an improvement of up to 18% relative in
terms of PPL and 3% relative in terms of MER.
7 Acknowledgment
This follow-up work on exploring the impact of
maximum entropy in recurrent neural network lan-
guage models for Code-Switching speech was mo-
tivated by the very useful comments and sugges-
tions of the SLSP reviewers, for which we are very
grateful.
References
H. Adel, N.T. Vu, F. Kraus, T. Schlippe, and T. Schultz.
Recurrent Neural Network Language Modeling for
Code Switching Conversational Speech In: Pro-
ceedings of ICASSP 2013.
H. Adel, K. Kirchhoff, N.T. Vu, D.Telaar, T. Schultz
Comparing Approaches to Convert Recurrent Neu-
ral Networks into Backoff Language Models For Ef-
ficient Decoding In: Proceedings of Interspeech
2014.
P. Auer Code-Switching in Conversation Routledge
1999.
P. Auer From codeswitching via language mixing to
fused lects toward a dynamic typology of bilingual
speech In: International Journal of Bilingualism,
vol. 3, no. 4, pp. 309-332, 1999.
E.G. Bokamba Are there syntactic constraints on code-
mixing? In: World Englishes, vol. 8, no. 3, pp. 277-
292, 1989.
J.Y.C. Chan, PC Ching, T. Lee, and H. Cao Au-
tomatic speech recognition of Cantonese-English
code-mixing utterances In: Proceeding of Inter-
speech 2006.
W. Chen, Y. Tan, E. Chng, H. Li The development of a
Singapore English call resource In: Proceedings of
Oriental COCOSDA, 2010.
Carnegie Mellon University CMU pronoun-
cation dictionary for English Online:
http://www.speech.cs.cmu.edu/cgi-bin/cmudict,
retrieved in July 2014
D.C. Lyu, T.P. Tan, E.S. Cheng, H. Li An Analysis of
Mandarin-English Code-Switching Speech Corpus:
SEAME In: Proceedings of Interspeech 2011.
A. Deoras, T. Mikolov, S. Kombrink, M. Karafiat, S.
Khudanpur Variational approximation of long-span
language models for LVCSR In: Proceedings of
ICASSP 2011.
R. Hsiao, M. Fuhs, Y. Tam, Q. Jin, T. Schultz The
CMU-InterACT 2008 Mandarin transcription sys-
tem In: Procceedings of ICASSP 2008.
Y. Li, P. Fung Code-Switch Language Model with
Inversion Constraints for Mixed Language Speech
Recognition In: Proceedings of COLING 2012.
Y. Li, P. Fung Improved mixed language speech recog-
nition using asymmetric acoustic model and lan-
guage model with Code-Switch inversion constraints
In: Proceedings of ICASSP 2013.
M.P. Marcus, M.A. Marcinkiewicz, and B. Santorini.
Building a large annotated corpus of english: The
penn treebank In: Computational Linguistics, vol.
19, no. 2, pp. 313-330, 1993.
T. Mikolov, M. Karafiat, L. Burget, J. Jernocky and S.
Khudanpur. Recurrent Neural Network based Lan-
guage Model In: Proceedings of Interspeech 2010.
T. Mikolov, S. Kombrink, L. Burget, J. Jernocky and
S. Khudanpur. Extensions of Recurrent Neural Net-
work Language Model In: Proceedings of ICASSP
2011.
T. Mikolov, A. Deoras, D. Povey, L. Burget, J.H. Cer-
nocky Strategies for Training Large Scale Neu-
ral Network Language Models In: Proceedings of
ASRU 2011.
P. Muysken Bilingual speech: A typology of code-
mixing In: Cambridge University Press, vol. 11.
S. Poplack Syntactic structure and social function
of code-switching , Centro de Estudios Puertor-
riquenos, City University of New York.
S. Poplack Sometimes i?ll start a sentence in spanish
y termino en espanol: toward a typology of code-
switching In: Linguistics, vol. 18, no. 7-8, pp. 581-
618.
D. Povey, A. Ghoshal, et al. The Kaldi speech recogni-
tion toolkit In: Proceedings of ASRU 2011.
R. Rosenfeld Two decades of statistical language mod-
eling: Where do we go from here? In: Proceedings
of the IEEE 88.8 (2000): 1270-1278.
T. Schultz, P. Fung, and C. Burgmer, Detecting code-
switch events based on textual features.
40
Y. Shi, P. Wiggers, M. Jonker Towards Recurrent Neu-
ral Network Language Model with Linguistics and
Contextual Features In: Proceedings of Interspeech
2011.
T. Solorio, Y. Liu Part-of-speech tagging for English-
Spanish code-switched text In: Proceedings of the
Conference on Empirical Methods in Natural Lan-
guage Processing. Association for Computational
Linguistics, 2008.
T. Solorio, Y. Liu Learning to predict code-switching
points In: Proceedings of the Conference on Empir-
ical Methods in Natural Language Processing. As-
sociation for Computational Linguistics, 2008.
A. Stolcke SRILM-an extensible language modeling
toolkit. In: Proceedings of Interspeech 2012.
D. Telaar, et al. BioKIT - Real-time Decoder For
Biosignal Processing In: Proceedings of Inter-
speech 2014.
N.T. Vu, D.C. Lyu, J. Weiner, D. Telaar, T. Schlippe,
F. Blaicher, E.S. Chng, T. Schultz, H. Li A First
Speech Recognition System For Mandarin-English
Code-Switch Conversational Speech In: Proceed-
ings of Interspeech 2012.
N.T. Vu, H. Adel, T. Schultz An Investigation of Code-
Switching Attitude Dependent Language Modeling
In: In Statistical Language and Speech Processing,
First International Conference, 2013.
N.T. Vu, F. Metze, T. Schultz Multilingual bottleneck
features and its application for under-resourced lan-
guages In: Proceedings of SLTU, 2012.
41
