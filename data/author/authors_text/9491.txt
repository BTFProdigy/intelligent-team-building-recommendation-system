Proceedings of the 22nd International Conference on Computational Linguistics (Coling 2008), pages 49?56
Manchester, August 2008
Enhancing Multilingual Latent Semantic Analysis 
with Term Alignment Information 
Brett W. Bader 
Computer Science &  
Informatics Department 
Sandia National Laboratories 
P. O. Box 5800, MS 1318 
Albuquerque, NM 87185-1318, USA 
bwbader@sandia.gov 
Peter A. Chew 
Cognitive Systems Research &  
Applications Department 
Sandia National Laboratories 
P. O. Box 5800, MS 1011 
Albuquerque, NM 87185-1011, USA 
pchew@sandia.gov 
 
Abstract 
Latent Semantic Analysis (LSA) is 
based on the Singular Value Decompo-
sition (SVD) of a term-by-document 
matrix for identifying relationships 
among terms and documents from co-
occurrence patterns. Among the multi-
ple ways of computing the SVD of a 
rectangular matrix X, one approach is to 
compute the eigenvalue decomposition 
(EVD) of a square 2 ? 2 composite ma-
trix consisting of four blocks with X and 
XT in the off-diagonal blocks and zero 
matrices in the diagonal blocks. We 
point out that significant value can be 
added to LSA by filling in some of the 
values in the diagonal blocks (corre-
sponding to explicit term-to-term or 
document-to-document associations) 
and computing a term-by-concept ma-
trix from the EVD.  For the case of mul-
tilingual LSA, we incorporate 
information on cross-language term 
alignments of the same sort used in Sta-
tistical Machine Translation (SMT). 
Since all elements of the proposed 
EVD-based approach can rely entirely 
on lexical statistics, hardly any price is 
paid for the improved empirical results. 
In particular, the approach, like LSA or 
SMT, can still be generalized to virtu-
ally any language(s); computation of the 
EVD takes similar resources to that of 
the SVD since all the blocks are sparse; 
 
? 2008. Licensed under the Creative Commons Attribution-
Noncommercial-Share Alike 3.0 Unported license 
(http://creativecommons.org/licenses/by-nc-sa/3.0/). Some 
rights reserved. 
and the results of EVD are just as eco-
nomical as those of SVD. 
1 Introduction 
It is close to two decades now since Deerwester 
et al (1990) first proposed the application of the 
Singular Value Decomposition (SVD) to term-
by-document arrays as a statistics-based way of 
representing how terms and documents fit to-
gether within a semantic space. Since the ap-
proach was supposed to ?get beyond? the terms 
themselves to their underlying semantics, the 
approach became known as Latent Semantic 
Analysis (LSA). 
Soon after this application of SVD was widely 
publicized, it was suggested by Berry et al 
(1994) that, with a parallel corpus, the approach 
could be extended to pairs of languages to allow 
cross-language information retrieval (IR). It has 
since been confirmed that LSA can be applied 
not just to pairs of languages, but also simultane-
ously to groups of languages, again given the 
existence of a multi-parallel corpus (Chew and 
Abdelali 2007). 
In this paper, we return to the basics of LSA 
by examining its relationship with SVD, and, in 
turn, the mathematical relationship of SVD to the 
eigenvalue decomposition (EVD). These details 
are discussed in section 2. It has previously been 
suggested (for example, in Hendrickson 2007) 
that IR results could be improved by filling in 
information beyond that available directly in the 
term-by-document matrix, and replacing SVD 
with the more general EVD. To our knowledge, 
however, these suggestions have not been publi-
cized outside the mathematics community, nor 
have they been empirically tested in IR applica-
tions. With multilingual information retrieval as 
a use case, we consider alternatives in section 3 
for implementation of this idea. One of these re-
49
lies on no extraneous information beyond what is 
already available in the multi-parallel corpus, and 
is based entirely on the statistics of cross-
language term alignments. ?Regular? LSA has 
been shown to work best when a weighting 
scheme such as log-entropy is applied to the 
elements in the term-by-document array (Dumais 
1991), and in section 3 we also consider various 
possibilities for how the term alignments should 
best be weighted. Section 4 recapitulates on a 
framework that allows EVD with term align-
ments to be compared with a number of related 
approaches (including LSA without term align-
ments). This is a recapitulation, because the same 
testing framework has been used previously (for 
other linear-algebra based approaches) by Chew 
and Abdelali (2007) and Chew et al (2007). The 
results of our comparison are presented and dis-
cussed in section 5, and we conclude upon these 
results and suggest further avenues for research 
in section 6. 
2 The relationship of SVD to EVD, and 
its application to information retrieval 
In the standard LSA framework (Deerwester et 
al. 1990) the (sparse) term-by-document matrix 
X is factorized by the singular value decomposi-
tion (SVD),  
 
X = USV T (1) 
 
where U is an orthonormal matrix of left singular 
vectors, S is a diagonal matrix of singular values, 
and V is an orthonormal matrix of right singular 
vectors (Golub and van Loan 1996). 
Typically for LSA, a truncated SVD is com-
puted such that equality in (1) no longer holds 
and that the best rank-R least-squares approxima-
tion to matrix X is formed by keeping the R larg-
est singular values in S and discarding the rest. 
This also means that the first R vectors of U and 
V are retained, where R indicates the number of 
concept dimensions in LSA. Each column vector 
in U maps the terms to a single arbitrary concept, 
such that terms which are semantically related 
(as determined by patterns of co-occurrence) will 
tend to be grouped together with large values in 
columns of U. 
There are many ways to compute the SVD of a 
sparse matrix. One expedient way is to compute 
the eigenvalue decomposition (EVD) of either 
XTX or XXT, depending on the largest di-
mension of X, to obtain U or V, respectively. 
With U or V, one may compute the rest of the 
SVD by a simple matrix-matrix multiplication 
and renormalization. 
Another way to compute the SVD is to com-
pute the eigenvalue decomposition of the 2-by-2 
block matrix 
B = 0 XXT 0



	.
The eigenvalues of B are the singular values of 
X, replicated as both positive and negative, plus 
a number of zeroes if X is not square. The left 
and right singular vectors are contained within 
the eigenvectors of this composite matrix B. As-
sume that X is of size m ? n and that m 
 n, with 
left singular vectors U = Un Umn[ ], where Un
corresponds to the n positive singular values and 
Um-n corresponds to the remaining m-n zero sin-
gular values. Let Q denote the orthogonal matrix 
of eigenvectors corresponding to the nonnegative 
eigenvalues of B, then the matrices of left and 
right singular vectors are stacked on top of each 
other, U on top of V, as follows: 
 Q = 12
Un 2 ?Umn
V 0



	.
Hence, one may compute the truncated SVD of 
X by computing only the eigenvectors corre-
sponding to the largest R eigenvalues and then 
extracting and rescaling the U and V matrices 
from Q. 
 
Figure 1. Eigenvalue decomposition in multilin-
gual information retrieval 
 
In the context of multilingual LSA using a 
parallel corpus, the block matrix B is depicted in 
Figure 1, where the terms are shaded according 
to each language. Each language may have a dif-
ferent number of terms, so the language blocks 
are not expected to be the same size as one an-
other. The eigenvectors and eigenvalues of B are 
also shown. 
We may obtain a pair of U and S matrices for 
each language by extracting the corresponding 
partition of U from the eigenvectors. We desire 
each language-specific U matrix to have columns 
of unit length, which we accomplish by comput-
ing the length of each of its columns and then 
50
rescaling the columns of U by the inverse length 
and multiplying the eigenvalues by these lengths 
for our S matrix. We call this approach ?Tucker1? 
because the result is identical to creating a U and 
S matrix for each language from the general 
Tucker1 model found by three-way analysis of 
the terms-by-documents-by-language array 
(Tucker 1966). 
For applications in information retrieval, we 
usually want to compute a measure of similarity 
between documents. Once we have U and S, we 
can estimate similarities by computing the cosine 
of the angle between the document vectors in the 
smaller ?semantic space? of the R concepts found 
by LSA. New documents in different languages 
can be projected into this common semantic 
space by multiplying their document vectors 
(formed in exactly the same way as the columns 
for X) by the product US-1, to yield a document-
by-concept vector. 
3 From SVD to term-alignment-based 
EVD 
If we compute just the SVD of a term-document 
matrix X, then the technique we use to accom-
plish this (whether computing the EVD of the 
block matrix B or otherwise) is immaterial from 
a computational linguist?s point of view: there is 
no advantage in one technique over another. 
However, the technique of EVD allows one to 
augment the LSA framework with additional in-
formation beyond just the term-document matrix. 
In Figure 1, the two diagonal blocks contain only 
zeroes, but we envision augmenting B with term 
alignment information such that the upper diago-
nal block captures any term-to-term similarities. 
Additional term-term alignment information 
serves to enhance the term-by-concept vectors in 
U by providing explicit, external knowledge so 
that LSA can learn more refined concepts. While 
not explored in this paper, we also envision in-
corporating any document-to-document similari-
ties into the lower diagonal block. 
Let D1 and D2 denote symmetric matrices. We 
augment the block matrix B and redefine it as a 
more general symmetric matrix, 
 B = D1 XXT D2



	.
If both D1 and D2 are equal to the identity matrix, 
then the eigenvalues of B are shifted by one, but 
the eigenvectors are not affected. 
Since our use case here is multilingual infor-
mation retrieval, imagine for the moment that an 
oracle provides dictionary information that 
matches up words in each of our language pairs 
(Arabic-English, Arabic-French, etc.) by mean-
ing. Thus, for example, we might have a pairing 
between English house and French maison. This 
information may be encoded in the diagonal 
block D1 by replacing zeroes in the cells for 
(house, maison) and its symmetric entry with 
some nonzero value indicating the strength of 
association for the two terms. Completing all 
relevant entries in D1 in this fashion serves to 
strengthen the co-occurrence information in the 
parallel corpus that LSA normally finds via the 
SVD.  
In the simplest approach, if the oracle indi-
cates a match between two terms i and j, then a 
one could be inserted in D1 at positions (i,j) and 
(j,i). If D1 were filled with such term alignment 
information, the matrix B would still be sparse. 
Without any document-document information, 
then D2 could be either the identity matrix or the 
zero matrix. Our experience has shown that D2 =
0 works slightly better in practice. Figure 2 
shows a block matrix augmented with term 
alignments in this fashion. 
Figure 2. Augmented block matrix with term 
alignments 
 
The eigenvalue decomposition of B now in-
corporates this extra term information provided 
in D1, and the eigenvectors show stronger corre-
spondence between those terms indicated. How-
ever, with each term aligned with one or more 
other terms, the row and column norms of D1 are 
unequal, which means that some terms may be 
biased to appear more heavily in the eigenvec-
tors. In addition, the magnitude or ?weight? of D1
relative to X needs to be considered, otherwise 
the explicit alignments in D1 and the co-
51
occurrence information in X may be out of bal-
ance with one another. Properly normalizing and 
scaling D1 may mitigate both of these risks. 
There are several possibilities for normalizing 
the matrix D1. Sinkhorn balancing (Sinkhorn 
1964) is a popular technique for creating a dou-
bly stochastic matrix (rows and columns all sum 
to 1) from a square matrix of nonnegative ele-
ments. Sinkhorn balancing is an iterative algo-
rithm in which, at each step, the row and column 
sums are computed and then subsequently used 
to rescale the matrix. For balancing the matrix A, 
each iteration consists of two updates 
A  WRA
A  AWC
where WR is a diagonal matrix containing the 
inverse of row sums of A, and WC is a diagonal 
matrix containing the inverse of column sums of 
A. This algorithm exhibits linear convergence, so 
many iterations may be needed. The algorithm 
may be adapted for normalizing the row and col-
umn vectors according to any norm.  Our experi-
ence has shown that normalizing D1 with respect 
to the Euclidean norm works well in practice. 
In terms of scaling D1 relative to X, we simply 
multiply D1 by a positive scalar value, which we 
denote with the variable . The optimal value of 
 appears to be problem dependent. 
Let us return for the moment to the question of 
how we populate D1 in the first place, and what 
each entry in that block represents. In the simple 
case described above, the existence of a 1 at po-
sition (i,j) indicates that an alignment exists be-
tween terms i and j, and a zero indicates that no 
alignment exists. But in reality, a binary encod-
ing like this may be too simplistic. In this re-
spect, it is instructive to consider how we 
populate D1 in the light of the weighting scheme 
used for X, since the latter is discussed in Du-
mais (1991) and is by now quite well understood.  
In the simplest case, an entry of 1 in X at posi-
tion (i,j) can denote that term i occurs in docu-
ment j, just as in our simple case with D1. A
slightly more refined alternative is to replace 1 
with fi,j, where fi,j denotes the raw frequency of 
term i within document j. But, as Dumais (1991) 
shows, it is significantly better in practice to use 
a ?log-entropy? weighting scheme. This adjusts 
fi,j first by ?dampening? high-frequency terms 
(using the log of the frequency), and secondly by 
giving a lower weight to terms which occur in 
many documents.2 The former adjustment is re-
 
2 One can also raise the global weight in the log-entropy 
scheme to a power (which we denote with the variable ). 
lated to an insight from Zipf?s law, which is that 
the dampened term frequency will be in propor-
tion to the log of the term?s rank in frequency. 
The latter adjustment is based on information 
theory; a term which is scattered across many 
documents (such as ?and? in English) has a high 
entropy, and therefore lower intrinsic informa-
tion content. 
Suppose, therefore, that our ?dictionary? oracle 
could not only indicate the existence of an 
alignment, but also provide some numerical 
value for the strength of association between two 
aligned terms. (In practice, this is probably more 
than one could hope for even from the best pub-
lished bilingual dictionaries.) This information 
could then replace the ones in D1 prior to Sink-
horn balancing and matrix weighting. 
While one cannot expect to obtain this infor-
mation from published dictionaries, there is in 
fact a statistical approach to gathering the neces-
sary information, which we borrow from SMT 
(Brown et al 1994). All that is required is the 
existence of a parallel corpus, which we already 
have in place for multilingual LSA. 
Here, an entry fi,j in D1 is based on the mutual 
information of term I and term J, or I(I;J) (capi-
tals are used to indicate that the terms are treated 
here as random variables). It is an axiom that: 
 
I(I;J) = H(I) + H(J) ? H(I,J) (2) 
 
where H(I) and H(J) are the marginal entropies 
of I and J respectively, and H(I,J) is the joint en-
tropy of I and J. Properties of H(I,J) include the 
following: 
 
H(I,J) 
 H(I) 
 0
H(I,J) 
 H(J) 
 0
H(I,J)  H(I) + H(J) (3) 
 
Considering (2) and (3) together, it should be 
clear that I(I;J) will range between 0 and the 
maximum value for H(I) or H(J). 
For the purposes of populating D1, we com-
pute the entropy of a term i by considering the 
number of documents where i occurs, and the 
number of documents where i does not occur, 
and express these as probabilities. For the joint 
entropy H(I,J), we need to compute four prob-
abilities based on all the possibilities: documents 
where both terms occur, those where I occurs 
without J, those where J occurs without I, and 
 
Selecting   1 can, in practice, yield better results in the 
applications we have tested. 
52
those where neither occur. The result of this is 
that a numerical value is attached to each align-
ment: higher values indicate that terms are 
strongly correlated, and lower values indicate 
that one term predicts little about the other. For 
each pair of words (i,j) which co-occur in any 
text chunk in the parallel corpus, we can say that 
an alignment exists if, among all the possibilities, 
mutual information for i is maximized by select-
ing j, and vice versa. (Since the maximization of 
mutual information is not necessarily reciprocal, 
the effect of this is to be conservative in postulat-
ing alignments.) The weight of this alignment is 
its mutual information (equivalent to the ?global 
weight? of log-entropy) multiplied by the log of 
one plus the number of text chunks in which that 
alignment appears (equivalent to the ?local 
weight? of log-entropy). 
Some examples of English-French pairs at ei-
ther end of this spectrum (where mutual informa-
tion is non-zero) are given in Table 1. 
 
I(I;J) Alignment 
weight 
I J
0.000176 0.000176 hearing ?coutait 
0.000217 0.000217 misery mis?rable 
?
0.270212 2.884297 house maison 
0.321754 3.506663 king roi 
0.415702 6.025456 and et 
0.472925 5.798080 I je 
Table 1. Term alignment and mutual information 
 
We believe that this approach, which weights 
alignments based on mutual information, fits 
very well with the log-entropy scheme used for 
X, since both are solidly based on the same 
foundation of information theory. 
All together, we call this particular process 
LSATA, which stands for LSA with term align-
ments.  
4 Testing framework 
Since the inception of the Cross-Language 
Evaluation Forum (CLEF) in 2000, there has 
been growing interest in cross-language IR, and a 
number of parallel corpora have become avail-
able (for example through the Linguistic Data 
Consortium). Widely used examples include the 
Canadian Hansard parliament proceedings (in 
French and English). Harder to obtain are multi-
parallel corpora ? those where the same text is 
translated into more than two parallel languages. 
One such corpus which has not yet gained 
wide acceptance, perhaps owing to the percep-
tion that it has less relevance to real-world appli-
cations than other parallel corpora, is the Bible. 
Yet the range of languages covered is unarguably 
unmatched elsewhere, and one might contend 
that its relevance is in some ways greater than, 
say, Hansard?s, as its impact on Western culture 
has been broader than that of Canadian govern-
ment debates. Similarly, the Quran, while not 
translated into as many languages as the Bible, 
has had a significant impact on another large 
segment of the world?s population. 
But the relevance or otherwise of the Bible 
and/or Quran, and the extent to which they have 
been accepted by the computational linguistics 
community at large as parallel corpora, are some-
what beside the point for us here. Our interest is 
in developing theory and applications which 
have universal applicability to as many lan-
guages as possible, regardless of the subject mat-
ter or whether the languages are ancient or 
modern. One might compare this approach to 
Chomsky?s quest for Universal Grammar 
(Chomsky 1965), except that the theory in our 
case is based on lexical statistics and linear alge-
bra rather than rule-based generative grammar. 
The Bible and Quran have in fact previously 
been used for experiments similar to ours (e.g., 
Chew et al 2007). By using these texts as paral-
lel corpora, therefore, we facilitate direct com-
parison of our results with previous ones. But 
besides this, the Bible has some especially attrac-
tive properties for our current purposes. First, the 
carefulness of the translations means that we are 
relatively unlikely to encounter situations where 
cross-language term alignments are impossible 
because some text is missing in one of the trans-
lations. Secondly, the relatively small size of the 
parallel text chunks (by and large, each chunk is 
a verse, most of which are about a sentence in 
length) greatly facilitates the process of statistical 
term alignment. (This is based on the combina-
torics: the number of possible term-to-term 
alignments increases approximately quadratically 
with the number of terms per text chunk.) 
Thus, our framework is as follows. In our 
term-by-document matrix X, the documents are 
verses, and the terms are distinct wordforms in 
any of the five languages used in the test data in 
Chew et al (2007): Arabic (AR), English (EN), 
French (FR), Russian (RU) and Spanish (ES). As 
in Chew et al (2007), too, our test data consists 
of the text of the Quran in the same 5 languages. 
In this case, the ?documents? are the 114 parallel 
suras (or chapters) of the Quran. We obtained all 
translations of the Bible and Quran from openly-
53
available websites such as that of Biola Univer-
sity (2005-2006) and http://www.kuran.gen.tr. 
As already mentioned, SVD of a term-by-
document matrix is equivalent to EVD of a block 
matrix in which two of the blocks (the non-
diagonal ones) are X and XT. As described in 
section 3, we fill in some of the values of D1 with 
nonzeroes (from term alignments derived from 
the Bible). In all cases (both SVD and EVD), we 
performed a truncated decomposition in either 
60, 240, or 300 dimensions. 
 
Term alignment  
settings 
SVD/EVD 
dimensions 
Type of  
decomposition 
Include term  
alignments? / 
weighting type Sinkhorn 
balanced? 

Global 
weight
*
Average 
P1 
Average
MP5 
SVD 0.7116 0.5702 
Tucker1 0.7170 0.5770 
PARAFAC2 
N/A 1.8 
0.7420 0.6580 
no N/A 0.7000 0.5691 
4.0 1.8 0.7611 0.6474 
1.0 0.7716 0.5972 yes (binary) yes 
4.0 1.6 0.7979 0.6467 
no N/A 0.6481 0.3804 
1.0 0.7393 0.5972 
12.0 
1.8 
0.8088 0.6972 
1.0 0.7488 0.5789 
60 
LSATA 
yes (log-MI) yes 
12.0 1.6 0.7933 0.6586 
SVD 0.8761 0.6554 240 PARAFAC2 N/A 1.8 0.8975 0.7853 
SVD N/A 1.8 0.8796 0.6575 
yes (binary) 4.0 1.6 0.9421 0.7695 
1.8 0.8982 0.8000 300 LSATA yes (log-MI) yes 12.0 1.6 0.9182 0.8067 
*See footnote 2. 
Table 2. Results with various linear algebraic decomposition methods and weighting schemes 
 
To evaluate the different methods against one 
another, we use similar measures of precision as 
were used with the same dataset by Chew et al 
(2007): precision at 1 document (P1) (the aver-
age proportion of cases where the translation of a 
document ranked highest among all retrieved 
documents of the same language) and multilin-
gual precision at 5 documents (MP5) (the aver-
age proportion of the top 5 ranked documents 
which were translations of the query document 
into any of the 5 languages, among all retrieved 
documents of any language). By definition, MP5 
is always less than or equal to P1; MP5 measures 
success in multilingual clustering, while P1 
measures success in retrieving documents when 
the source and target languages are pre-specified. 
5 Results and Discussion 
Table 2 above presents a summary of our results. 
The main point to note is that the addition of in-
formation on term alignments is clearly benefi-
cial. An approach based on the Tucker1 
decomposition algorithm, without any informa-
tion on term alignments, achieves P1 of 0.7170 
and MP5 of 0.5770. With scaled term alignment 
information, the results improve to 0.7611 and 
0.6474, respectively. Using a chi-squared test, 
we tested the significance of the increase in P1 
and found it to be highly significant (p  1.7 ?
10-7). 
The results also show, however, that one needs 
to be careful about how the word-alignment in-
formation is added. Without some form of bal-
ancing and scaling of D1, there is little 
improvement (and often significant deterioration) 
in the results when alignment information is in-
cluded. 
In addition to comparing a block EVD ap-
proach with term alignments to one without, we 
also compared against another decomposition 
method, PARAFAC2, which has been found to 
be more effective than SVD in cross-language IR 
(Chew et al 2007). Here, the results are more 
equivocal. P1 is slightly higher under the 
LSATA approach (with binary values in D1) than 
54
under PARAFAC2, while the reverse is true for 
MP5. The difference for P1 is significant at p < 
0.05 but not at p < 0.01. In any case, there are 
risks in making a comparison between 
PARAFAC2 and LSATA. For one thing, 
PARAFAC2, as implemented here, includes no 
mechanism for incorporating term-alignment 
information. It is not clear to us yet whether such 
a mechanism could (mathematically or practi-
cally) be incorporated into PARAFAC2. Sec-
ondly, we are not yet confident that we have 
found the optimal weighting scheme for the D1
block under the LSATA model. Our experiments 
with different weighting and normalization 
schemes for the D1 block are still in relatively 
initial stages, though it can also be seen from 
Table 2 that by selecting certain settings under 
LSATA (replacing binary weighting in D1 with 
mutual-information-based weighting, and apply-
ing scaling with beta = 12.0), we were able to 
improve upon PARAFAC2 under both measures. 
Although we have not tested all settings, Table 
2 also shows our best results to date with this 
dataset, which have come from applying EVD to 
the block matrix that includes D1. The precise 
optimal settings for EVD appear to depend on 
whether the objective is to maximize P1 or MP5. 
For P1, our best results (0.9421) were obtained 
with binary weighting, global term  = 1.6, and 
= 4.0. For MP5, the best results (0.8067) were 
obtained with mutual-information based weight-
ing,  = 1.8, and  = 12.0. It appears in all cases 
that D1 needs to be balanced if it contains term 
alignment information. 
The evidence, then, appears to be strongly in 
favor of incorporating information beyond term-
to-document associations within an IR approach 
based on linear algebra. It happens that LSATA 
offers an obvious way to do this, while other 
methods such as PARAFAC2 may or may not. 
Here, we have examined just one form of infor-
mation besides term-to-document statistics: term-
to-term statistics. However, there is no reason to 
suppose that the results might not be improved 
still further by incorporating information on 
document-to-document associations, or for that 
matter associations between terms or documents 
and other linguistic, grammatical, or contextual 
objects. 
6 Conclusion 
In this paper, we have discussed the mathe-
matical relationship between SVD and EVD, and 
specifically the fact that SVD is a special case of 
EVD. For information retrieval, the significance 
of this is that SVD allows for explicit encoding 
of associations between terms and documents, 
but not between terms and terms, or between 
documents and documents. 
By moving from the special case of SVD to 
the general case of EVD, however, we open up 
the possibility that additional information can be 
encoded prior to decomposition. We have exam-
ined a particular use case for SVD: multilingual 
information retrieval. This use case presents an 
interesting example of additional information 
which could be encoded on the term-by-term 
diagonal block: cross-language pairings of 
equivalent terms (such as house/maison). Such 
pairs can be obtained from bilingual dictionaries, 
but we can save ourselves the trouble of obtain-
ing and using these. Multilingual LSA requires 
that a parallel corpus have already been obtained, 
and well-understood statistical term alignment 
procedures can be applied to obtain cross-
language term-to-term associations. Moreover, if 
the corpus is multi-parallel, we can ensure that 
the statistical basis for alignment is the same 
across all language pairs. 
Our results show that by including term-to-
term alignment information, then performing 
EVD, we can improve the results of cross-
language IR quite significantly. 
It should be pointed out that while we have 
successfully used statistics-based information in 
the term-by-term diagonal block, there is no rea-
son to suppose that similar or better results might 
not be achieved by manually filling in nonzeroes 
in either diagonal block. The additional informa-
tion encoded by these nonzeroes could include 
associations known a priori between documents 
(e.g., they were written by the same author) or 
terms (e.g., they occur together in a thesaurus), 
or both. While in these examples the additional 
information required might not be available from 
the training corpus, and its encoding could in-
volve moving away from an entirely statistics-
based model, the additional effort could be justi-
fied depending upon the intended application. 
In future work, we would like to examine in 
particular whether still further statistically-
derivable (or readily available) data could be in-
corporated into the model. For example, one can 
conceive of a block EVD involving ?levels? be-
yond the ?term level? and the ?document level?. 
In a 3?3 block EVD, for example, one might in-
clude n-grams, terms, and documents; this ap-
proach should also be extensible to essentially all 
languages. Might the addition of further informa-
55
tion lead to even higher precision? Avenues for 
research such as this raise their own questions, 
such as the type of weighting scheme which 
would have to be applied in a 3?3 block matrix. 
In summary, however, our results give us 
some confidence that there can be significant 
benefit in making more linguistic and/or statisti-
cal information available to linear algebraic IR 
approaches such as EVD. Cross-language term 
alignments are just one example of the type of 
additional information which could be included; 
we believe that future research will uncover 
many more similar examples. 
Acknowledgement 
Sandia is a multiprogram laboratory operated 
by Sandia Corporation, a Lockheed Martin Com-
pany, for the United States Department of En-
ergy?s National Nuclear Security Administration 
under contract DE-AC04-94AL85000. 
References  
Michael W. Berry, Susan T. Dumais., and G. W. 
O?Brien. 1994. Using Linear Algebra for Intelli-
gent Information Retrieval. SIAM: Review 37, 573-
595. 
Biola University. 2005-2006. The Unbound Bible.
Accessed at http://www.unboundbible.org/ on Jan. 
29, 2008. 
Peter F. Brown, Vincent J. Della Pietra, Stephen A. 
Della Pietra, and Robert L. Mercer. 1994. The 
Mathematics of Statistical Machine Translation: 
Parameter Estimation. Computational Linguistics 
19(2), 263-311. 
Peter A. Chew and Ahmed Abdelali. 2007. Benefits 
of the ?Massively Parallel Rosetta Stone?: Cross-
Language Information Retrieval with over 30 Lan-
guages . Proceedings of the 45th Annual Meeting 
of the Association for Computational Linguistics, 
ACL 2007. Prague, Czech Republic, June 23?30, 
2007. pp. 872-879. 
Noam Chomsky. 1965. Aspects of the Theory of Syn-
tax. Cambridge, MA: MIT Press. 
S. Deerwester, S. T. Dumais, G. W. Furnas, T. K. 
Landauer and R. Harshman. 1990. Indexing by La-
tent Semantic Analysis. Journal of the American 
Society for Information Science 41:6, 391-407. 
Susan Dumais. 1991. Improving the Retrieval of In-
formation from External Sources. Behavior Re-
search Methods, Instruments, and Computers 
23(2):229-236. 
Gene H. Golub and Charles F. van Loan. 1996. Ma-
trix Computations, 3rd edition. The Johns Hopkins 
University Press: London. 
R. A. Harshman. 1972. PARAFAC2: Mathematical 
and Technical Notes. UCLA Working Papers in 
Phonetics 22, 30-47. 
Bruce Hendrickson. 2007. Latent Semantic Analysis 
and Fiedler Retrieval. Linear Algebra and its Ap-
plications 421 (2-3), 345-355. 
P. Koehn, F. J. Och, and D. Marcu. 2003. Statistical 
Phrase-Based Translation. Proceedings of the Joint 
Conference on Human Language Technologies and 
the Annual Meeting of the North American Chapter 
of the Association of Computational Linguistics 
(HLT/NAACL), 48-54. 
P. Koehn. 2002. Europarl: a Multilingual Corpus for 
Evaluation of Machine Translation. Unpublished, 
accessed on Jan. 29, 2008 at http:// 
www.iccs.inf.ed.ac.uk/~pkoehn/publications/europ
arl.pdf. 
Philip Resnik, Mari Broman Olsen, and Mona Diab. 
1999. The Bible as a Parallel Corpus: Annotating 
the "Book of 2000 Tongues". Computers and the 
Humanities, 33: 129-153.  
R. Sinkhorn. 1964. A Relation between Arbitrary 
Positive Matrices and Doubly Stochastic Matrices. 
Annals of Mathematical Statistics 35 
(2), 876-879. 
Ledyard R. Tucker. 1966.  Some Mathematical Notes 
on Three-mode Factor Analysis, Psychometrika 31, 
279-311. 
Ding Zhou, Sergey A. Orshanskiy, Hongyuan Zha, 
and C. Lee Giles. 2007. Co-Ranking Authors and 
Documents in a Heterogeneous Network. Seventh 
IEEE InternationalConference on Data Mining,
739-744. 
56
Proceedings of the 22nd International Conference on Computational Linguistics (Coling 2008), pages 129?136
Manchester, August 2008
Latent Morpho-Semantic Analysis: 
Multilingual Information Retrieval with Character N-Grams  
and Mutual Information 
 
Peter A. Chew, Brett W. Bader 
Sandia National Laboratories 
P. O. Box 5800 
Albuquerque, NM 87185, USA 
{pchew,bwbader}@sandia.gov 
Ahmed Abdelali 
New Mexico State University 
P.O. Box 30002, Mail Stop 3CRL 
Las Cruces, NM 88003-8001, USA 
ahmed@crl.nmsu.edu 
 
Abstract 
We describe an entirely statistics-based, 
unsupervised, and language-
independent approach to multilingual 
information retrieval, which we call La-
tent Morpho-Semantic Analysis 
(LMSA). LMSA overcomes some of the 
shortcomings of related previous ap-
proaches such as Latent Semantic 
Analysis (LSA). LMSA has an impor-
tant theoretical advantage over LSA: it 
combines well-known techniques in a 
novel way to break the terms of LSA 
down into units which correspond more 
closely to morphemes. Thus, it has a 
particular appeal for use with morpho-
logically complex languages such as 
Arabic. We show through empirical re-
sults that the theoretical advantages of 
LMSA can translate into significant 
gains in precision in multilingual infor-
mation retrieval tests. These gains are 
not matched either when a standard 
stemmer is used with LSA, or when 
terms are indiscriminately broken down 
into n-grams. 
1 Introduction 
As the linguistic diversity of textual resources 
increases, and need for access to those resources 
grows, there is also greater demand for efficient 
 
? 2008. Licensed under the Creative Commons Attribution-
Noncommercial-Share Alike 3.0 Unported license 
(http://creativecommons.org/licenses/by-nc-sa/3.0/). Some 
rights reserved. 
information retrieval (IR) methods which are 
truly language-independent. In the ideal but pos-
sibly unattainable case, an IR algorithm would 
produce equally reliable results for any language 
pair: for example, a query in English would re-
trieve equally good results in Arabic as in 
French. 
A number of developments in recent years 
have brought that goal more within reach. One of 
the factors that severely hampered early attempts 
at machine translation, for example, was the lack 
of available computing power. However, 
Moore?s Law, the driving force of change in 
computing since then, has opened the way for 
recent progress in the field, such as Statistical 
Machine Translation (SMT) (Koehn et al 2003). 
Even more closely related to the topic of the pre-
sent paper, implementations of the Singular 
Value Decomposition (SVD) (which is at the 
heart of LSA), and related algorithms such as 
PARAFAC2 (Harshman 1972), have become 
both more widely available and more powerful. 
SVD, for example, is available in both commer-
cial off-the-shelf packages and at least one open-
source implementation designed to run on a par-
allel cluster (Heroux et  al. 2005). 
Despite these advances, there are (as yet) not 
fully surmounted obstacles to working with cer-
tain language pairs, particularly when the lan-
guages are not closely related. This is 
demonstrated in Chew and Abdelali (2008). At 
least in part, this has to do with the lexical statis-
tics of the languages concerned. For example, 
because Arabic has a much richer morphological 
structure than English and French (meaning is 
varied through the addition of prefixes and suf-
fixes rather than separate terms such as parti-
cles), it has a considerably higher type-to-token 
129
ratio. Exactly this type of language-specific sta-
tistical variation seems to lead to difficulties for 
statistics-based techniques such as LSA, as evi-
denced by lower cross-language information re-
trieval (CLIR) precision for Arabic/English than 
for French/English (Chew and Abdelali 2008). 
In this paper, we present a strategy for over-
coming these difficulties. In section 2, we outline 
the basic problem and the thinking behind our 
approach: that breaking words down into mor-
phemes, or at least morphologically significant 
subconstituents, should enable greater inter-
language comparability. This in turn should in 
theory lead to improved CLIR results. Several 
alternatives for achieving this are considered in 
section 3. One of these, a novel combination of 
mutual-information-based morphological tokeni-
zation (a step beyond simple n-gram tokeniza-
tion) and SVD, is what we call LMSA. Section 4 
discusses the framework for testing our intui-
tions, and the results of these tests are presented 
and discussed in section 5. Finally, we draw 
some conclusions and outline possible directions 
for future research in section 6. 
2 The problem 
In many approaches to IR, the underlying 
method is to represent a corpus as a term-by-
document matrix in which each row corresponds 
to a unique term2, and each column to a docu-
ment in the corpus. The standard LSA frame-
work (Deerwester et al 1990) is no different, 
except that the (sparse) term-by-document matrix 
X is subjected to SVD,  
 
X = USVT (1) 
 
where U is a smaller but dense term-by-concept 
matrix, S is a diagonal matrix of singular values, 
and V is a dense document-by-concept matrix for 
the documents used in training. Effectively, U 
and V respectively map the terms and documents 
to a single set of arbitrary concepts, such that 
semantically related terms or documents (as de-
termined by patterns of co-occurrence) will tend 
to be similar; similarity is usually measured by 
taking the cosine between two (term or docu-
ment) vectors. New documents can also be pro-
jected into the LSA ?semantic space? by 
multiplying their document vectors (formed in 
exactly the same way as the columns for X) by 
 
2 Pragmatically, terms can be defined very straightforwardly 
in the regular expressions language as sequences of charac-
ters delimited by non-word characters. 
the product US-1, to yield document-by-concept 
vectors. LSA is a completely unsupervised ap-
proach to IR in that associations between terms 
simply fall out when SVD is applied to the data. 
With cross-language or multilingual LSA, the 
approach differs little from that just outlined. The 
only required modification is in the training data: 
the term-by-document matrix must be formed 
from a parallel corpus, in which each document 
is the combination of text from the parallel lan-
guages (as described in Berry et al 1994). 
Clearly, this IR model cannot be deployed to any 
languages not in the parallel corpus used for 
training SVD. However, recent work (Chew et 
al. 2007) shows not only that there is no limit (at 
least up to a certain point) to the number of lan-
guages that can be processed in parallel, but that 
precision actually increases for given language 
pairs as more other languages are included. In 
practice, the factors which limit the addition of 
parallel languages are likely to be computational 
power and the availability of parallel aligned 
text. As noted in section 1, the first of these is 
less and less of an issue; and regarding the sec-
ond, parallel corpora (which are the mainstay of 
many current approaches to computational lin-
guistics and IR, particularly in real-world appli-
cations) are becoming increasingly available. 
Substantially all of the Bible, in particular, is al-
ready electronically available in at least 40-50 
languages from diverse language families (Biola 
University 2005-2006). 
Yet, there are clearly variations in how well 
CLIR works. In previous results (Chew et al 
2007, Chew and Abdelali 2008) it is noticeable 
in particular that the results for Arabic and Rus-
sian (the two most morphologically complex 
languages for which they present results) are 
consistently poorer than they are for other lan-
guages. To our knowledge, no solution for this 
has been proposed and validated. Ideally, a solu-
tion would both make sense theoretically (or lin-
guistically) and be statistics-based rather than 
rule-based, consistent with the general frame-
work of LSA and other recent developments in 
the field, such as SMT, and avoiding the need to 
build a separate grammar for every new language 
? an expensive undertaking. 
Translation Types Tokens Ratio 
English (KJV) 12,335 789,744 1.56% 
French (Darby) 20,428 812,947 2.51% 
Spanish (RV 1909) 28,456 704,004 4.04% 
Russian (Syn 1876) 47,226 560,524 8.43% 
Arabic (S. Van Dyke) 55,300 440,435 12.56% 
Table 1. Lexical statistics in a parallel corpus 
130
To begin to assess the problem, one can com-
pare the lexical statistics for the Bible from 
Chew et al (2007), which should be directly 
comparable since they are from a parallel corpus. 
These are arranged in Table 1 in order of type-to-
token ratio. 
This ordering also corresponds to the ordering 
of languages on a scale from ?analytic? to ?syn-
thetic?: meaning is shaped in the former by the 
use of particles and word order, and in the latter 
by inflection and suffixation. Some examples 
illustrating differences between Russian and 
English in this respect are given in Table 2. 
English I read you read they read 
Russian KLMNO KLMNPQR KLMNOM 
Table 2. Analytic versus synthetic languages 
 
The element in Russian, of course, which cor-
responds to ?read? is the stem ?KLMN?, but this is 
embedded within a larger term. Hence, in all 
three examples, Russian takes one term to ex-
press what in English takes two terms. The same 
occurs (although to a lesser extent) in English, in 
which ?read? and ?reads? are treated as distinct 
terms. Without any further context (such as sen-
tences in which these terms are instantiated), the 
similarity in meaning between ?read? and ?reads? 
will be readily apparent to any linguist, simply 
because of the shared orthography and morphol-
ogy. But for an approach like standard LSA in 
which terms are defined simply as distinct enti-
ties delimited by non-word characters, the mor-
phology is considered immaterial ? it is invisible. 
The only way a standard term-based approach 
can detect any similarity between ?read? and 
?reads? is through the associations of terms in 
documents. Clearly, then, such an approach op-
erates under a handicap. 
Two unfortunate consequences will inevitably 
result from this. First, some terms will be treated 
as out-of-vocabulary even when at least some of 
the semantics could perhaps have been derived 
from a part of the term. For example, if the train-
ing corpus contains ?read? and ?reads? but not 
?reading?, valuable information is lost every time 
?reading? is encountered in a new document to 
which LSA might be deployed. Secondly, asso-
ciations that should be made between in-
vocabulary terms will also be missed. Perhaps a 
reason that more attention has not been devoted 
to this is that the problem can largely be disre-
garded in highly analytic languages like English. 
But, as previous results such as Chew and Abde-
lali?s (2008) show, for a language like Arabic, 
the adverse consequences of a morphology-blind 
approach are more severe. The question then is: 
how can information which is clearly available in 
the training corpus be more fully leveraged with-
out sacrificing efficiency? 
3 Possible solutions 
3.1 Replacing terms with n-grams 
At first glance, one might think that stemming 
would be an answer. Stemming has been shown 
to improve IR, in particular for morphologically 
complex languages (recent examples, including 
with Arabic, are Lavie et al 2004 and Abdou et 
al. 2005). We are not aware, however, of any 
previous results that show unequivocally that 
stemming is beneficial specifically in CLIR. 
Chew and Abdelali (2008) examine the use of a 
light stemmer for Arabic (Darwish 2002), and 
while this does result in a small overall increase 
in overall precision, there is paradoxically no 
increase for Arabic. The problem may be that the 
approach for Arabic needs to be matched by a 
similar approach for other languages in the paral-
lel corpus. However, since stemmers are usually 
tailored to particular languages ? and may even 
be unavailable for some languages ? use of exist-
ing stemmers may not always be an option. 
Another more obviously language-
independent approach is to replace terms with 
character n-grams3. This is feasible for more or 
less any language, regardless of script. Moreover, 
implementation of a similar idea is described in 
McNamee and Mayfield (2004) and applied spe-
cifically to CLIR. However, McNamee and May-
field?s CLIR results are solely for European 
languages written in the Roman script. This is 
why they are able to obtain, in their words, ?sur-
prisingly good results? without translation [of 
the query]?, and without using LSA in any form. 
With related languages in the same script, and 
particularly when n-grams are used in place of 
terms, the existence of cognates means that many 
translations can easily be identified, since they 
probably share many of the same n-grams (e.g. 
French ?parisien? versus English ?Parisian?). 
When languages do not all share the same script 
or come from the same language family, how-
ever, the task can be considerably harder. 
Since the approach of n-gram tokenization has 
the advantages of being entirely statistically-
 
3 Hereafter, we use the term ?n-grams? to refer specifically 
to character (not word) n-grams. 
131
based and language-independent, however, we 
examined whether it could be combined with 
LSA to allow CLIR (including cross-script re-
trieval), and whether this would lead to any ad-
vantage over term-based LSA. Our intuition was 
that some (although not all) n-grams would cor-
respond to morphologically significant subcon-
stituents of terms, such as ?read? from ?reading?, 
and therefore associations at the morpheme level 
might be facilitated. The steps for this approach 
are listed in Table 3. 
1 Form a term-by-document array from the paral-
lel corpus as described above 
2 For each term, list all (overlapping) n-grams4
3 Replace terms in the term-by-document array 
with n-grams, to form an n-gram-by-document 
array 
4 Subject the n-gram-by-document array to SVD 
to produce an n-gram-by-concept U matrix, sin-
gular values (the diagonal S matrix), and docu-
ment-by-concept V matrix 
5 Project new documents into the semantic space 
by multiplying their vectors by US-1 
Table 3. Steps for n-gram-based LSA 
 
Under all approaches, we selected the same 
log-entropy term weighting scheme that we used 
for standard LSA. Thus, whether a term t stands 
for a wordform or an n-gram, its weighted fre-
quency W in a particular document k is given by: 
 
W = log2 (F + 1) ? (1 + Ht / log2 (N))X (2) 
 
where F is the raw frequency of t in k, Ht is the 
entropy of the term or n-gram across all docu-
ments, N is the number of documents in the cor-
pus, and X is some arbitrary constant (a power to 
which the global weight is raised).  We have 
found that an X > 1 improves precision by chang-
ing the relative distribution of weighted frequen-
cies. Common terms with high entropy become 
much less influential in the SVD.  
It should be noted that step (2) in Table 3 is 
similar to McNamee and Mayfield?s approach, 
except that we did not include word-spanning n-
grams, owing to computational constraints. We 
also tried two variants of step (2), one in which 
all n-grams were of the same length (as per 
McNamee and Mayfield 2004), and one in which 
n-grams of different lengths were mixed. Under 
the second of these, the number of rows in both 
the term-by-document and U matrices is of 
course considerably larger. For example, Table 4 
 
4 As an example, for ?cat?, the complete list of overlapping 
n-grams would be ?c?, ?a?, ?t?, ?ca?, ?at?, and ?cat?. 
shows that the number of rows in the n-gram-by-
document matrix for English (EN) under the first 
variant (with n = 6) is 19,801, while under the 
second (with n Z 6) it is 58,907. Comparable sta-
tistics are given for Arabic (AR), Spanish (ES), 
French (FR) and Russian (RU). 
n= AR EN ES FR RU 
1 35 27 41 41 47
2 939 516 728 708 827
3 11,127 4,267 5,563 5,067 7,808
4 40,835 13,927 19,686 15,948 30,702
5 53,671 20,369 35,526 25,253 54,647
6 39,822 19,801 42,408 28,274 65,308
Total 146,429 58,907 103,952 75,291 159,339
Table 4. Number of distinct n-grams by language 
and length, up to length 6, based on Bible text 
 
3.2 Replacing terms with morphemes: 
LMSA 
We also attempted a related approach with 
non-overlapping n-grams. This set of 
experiments was guided by the intuition that not 
all n-grams are morphologically significant. 
Before we discuss the details of this approach, 
consider the English example ?comingle?. Here, 
?co? + ?mingle? are likely to be more significant 
to the overall meaning than ?coming? + ?le? ? in 
fact, the presence of the n-gram ?coming? could 
be misleading in this case. One way to model this 
would be to change the weighting scheme. The 
problem with this is that the weighting for one 
token has to be contingent on the weighting for 
another in the same term. Otherwise, in this 
example, the n-gram ?coming? would presumably 
receive a high weighting based on its frequency 
elsewhere in the corpus. 
An alternative is to select the tokenization 
which maximizes mutual information (MI). 
Brown et al (1992) describe one application of 
MI to identify word collocations; Kashioka et al 
(1998) describe another, based on MI of charac-
ter n-grams, for morphological analysis of Japa-
nese. The pointwise MI of a pair s1 and s2 as 
adjacent symbols is 
 
MI = log P(s1 s2) ? log P(s1) ? log P(s2) (3) 
 
If s1 follows s2 less often than expected on the 
basis of their independent frequencies, then MI is 
negative; otherwise, it is positive. 
In our application, we want to consider all 
candidate tokenizations, sum MI for each candi-
date, and rule out all but one candidate. A to-
132
kenization is a candidate if it exhaustively parses 
the entire string and has no overlapping tokens. 
Thus, for ?comingle?, co+mingle, coming+le, 
comingle, c+o+m+i+n+g+l+e, etc., are some of 
the candidates, but comi+ngl and com+mingle 
are not. To obtain MI, we need to compute the 
log probability (logp) of every n-gram in the cor-
pus. If Sk (k = 1, ?, K) denotes the set of all n-
grams of length k, and sn is a particular n-gram of 
length n, then we compute logp for sn as: 
 
logp = log F(sn) ? log [ (F(Sn))  (4) 
 
where F(sn) is the frequency of sn in the corpus, 
and [ (F(Sn)) is the sum of the frequencies of all 
Sn in the corpus.5 In all cases, logp is negative, 
and MI is maximized when the magnitude of the 
sum of logp for all elements in the tokenization 
(also negative) is minimized, i.e. closest to zero. 
Tokenizations consisting of one, two or more 
elements (respective examples are comingle, 
co+mingle, and co+ming+le) will all receive a 
score, although those with fewer elements will 
tend to be favored. 
We considered some minor variants in the set-
tings for this approach in which word-initial and 
word-final n-grams were indexed separately from 
word-medial n-grams. Guided by McNamee and 
Mayfield?s (2004) finding that there is an optimal 
(language-dependent) value of k for Sk, we also 
varied the maximum length of n-grams allowed 
in tokenizations. Under all settings, we followed 
steps 3-5 from Table 3 (including SVD) from 
here on. 
This approach (which we call latent morpho-
semantic analysis), then, is like LSA, except that 
the types and tokens are statistically-derived 
morphemes rather than terms. Whatever LMSA 
variant is used, the underlying approach to mor-
phological tokenization is completely language-
independent. Example output is shown in Table 5 
for wordforms from the Russian lemma 
]^P_`abNMR_c ?to crawl?, where the common 
stem (or at least an approximation thereof) is cor-
rectly identified. 
Wordform Tokenization 
]^P_`abNOdP`e_c ]^P_`abNO dP`e_c 
]^P_`abNOdL`L_c ]^P_`abNO dL`L_c 
]^P_`abNOdL`_c ]^P_`abNO dL`_c 
]^P_`abNOdLf_c ]^P_`abNO dLf_c 
Table 5. Examples of MI-based tokenization 
 
5 Note that (4) is closely related to the ?weighted mutual 
information? measure used in Goldsmith (2001: 172). 
We do not directly test the accuracy of these 
tokenizations. Rather, measures of CLIR preci-
sion (described in section 4) indirectly validate 
our morphological tokenizations. 
4 Testing framework 
To assess our results on a basis comparable with 
previous work, we used the same training and 
test data as used in Chew et al (2007) and Chew 
and Abdelali (2008). The training data consists 
of the text of the Bible in 31,226 parallel chunks, 
corresponding generally to verses, in Arabic, 
English, French, Russian and Spanish. The test 
data is the text of the Quran in the same 5 lan-
guages, in 114 parallel chunks corresponding to 
suras (chapters). 
Questions are sometimes raised as to how rep-
resentative the Bible and/or Quran are of modern 
language. However, there is little question that 
the number and diversity of parallel languages 
covered by the Bible6 is not matched elsewhere 
(Resnik et al 1999), even by more mainstream 
parallel corpora such as Europarl (Koehn 2002)7.
The diversity of languages covered is a particu-
larly important criterion for our purposes, since 
we would like to look at methods which enhance 
retrieval for languages across the analytic-
synthetic spectrum. The Bible also has the ad-
vantage of being readily available in electronic 
form: we downloaded all our data in a tab-
delimited, verse-indexed format from the ?Un-
bound Bible? website mentioned above (Biola 
University, 2005-2006). 
In accordance with previous work, we split the 
test set into each of the 10 possible language-pair 
combinations: AR-EN, AR-FR, EN-FR, and so 
on. For each language pair and test, 228 distinct 
?queries? were submitted ? each query consisting 
of one of the 228 sura ?documents?. To assess the 
aggregate performance of the framework, we 
used average precision at 1 document, hereafter 
?P1? (1 if the translation of the document ranked 
highest, zero otherwise ? thus, a fairly strict 
measure of precision). We also measured preci-
sion on a basis not used by Chew et al (2007) or 
Chew and Abdelali (2008): multilingual preci-
sion at 5 documents (hereafter ?MP5?). For this, 
 
6 At December 31, 2006, complete translations existed in 
429 languages, and partial translations in 2,426 languages 
(Bible Society 2007).  
7 Since the Europarl text is extracted from the proceedings 
of the European Parliament, the languages represented are 
generally closely-related to one another (most being Ger-
manic or Romance). 
133
each of the 570 documents (114 suras, each in 5 
languages) is submitted as a query. The results 
are drawn from the pool of all five languages, so 
MP5 represents the percentage, on average, of 
the top 5 documents which are translations of the 
query. This measure is still stricter than P1 (this 
is a mathematical necessity) because the retrieval 
task is harder. Essentially, MP5 measures how 
well similar documents cluster across languages, 
while P1 measures how reliably document trans-
lations are retrieved when the target language is 
known. 
5 Results and Discussion 
The following tables show the results of our 
tests. First, we present in Table 6 the results us-
ing standard LSA, in which terms are sequences 
of characters delimited by non-word characters. 
Here, in essence, we reperformed an experiment 
in Chew and Abdelali (2008). 
P1 (overall average: 0.8796) 
AR EN ES FR RU 
AR 1.0000 0.7544 0.7193 0.7368 0.7544 
EN 0.7719 1.0000 0.9123 0.9386 0.9474 
ES 0.6316 0.9298 1.0000 0.9298 0.8947 
FR 0.7719 0.9035 0.9298 1.0000 0.9386 
RU 0.7719 0.9298 0.9035 0.9211 1.0000 
MP5: AR 0.4456, EN 0.7211, ES 0.6649,  
FR 0.7614, RU 0.6947; overall average: 0.6575 
Table 6. Results with standard LSA 
 
Our results differ from Chew and Abdelali?s 
(2008) ? our precision is higher ? because we use 
a different value of X in equation (2) above (here, 
1.8 rather than 1). Generally, we selected X so as 
to maximize MP5; discussion of this is beyond 
the scope of this paper, and not strictly relevant 
in any case, since we present like-for-like com-
parisons throughout this section. However, Table 
6 shows clearly that our results replicate those 
previously published, in that precision for Arabic 
(the most ?synthetic? of the five languages) is 
consistently lower than for the other four. 
The next set of results (in Table 7) is for LSA 
with SVD of an array in which the rows corre-
spond to all overlapping, but not word-spanning, 
n-grams of fixed length. The best results here, for 
n=4, are essentially no better on average than 
those obtained with standard LSA. However, 
averaging across languages obscures the fact that 
results for Arabic have significantly improved 
(for example, where Arabic documents are used 
as queries, MP5 is now 0.6205 instead of 
0.4456). Still, the fact that average MP5 is essen-
tially unchanged means that this is at the expense 
of results for other languages. 
n = Average P1 Average MP5 
3 0.8340 0.4951 
4 0.8779 0.6761 
5 0.8232 0.6365 
6 0.6957 0.5197 
7 0.5321 0.3986 
Table 7. Results with LSA / overlapping n-grams 
of fixed length 
 
Now we present results in Table 8 where SVD 
is performed on an array in which the rows cor-
respond to all overlapping, but not word-
spanning, n-grams of any length (varying maxi-
mum length). 
n Z Average P1 Average MP5 
3 0.8235 0.3909 
4 0.9039 0.6256 
5 0.9095 0.6839 
6 0.8863 0.6716 
7 0.8635 0.6470 
Table 8. Results with LSA / overlapping n-grams 
of variable length 
 
Here, the best results (with n<=5) more clearly 
improve upon LSA: the increases in both P1 and 
MP5, though each only about 0.03 in absolute 
terms, are highly significant (p < 0.005). Very 
likely this is related to the fact that when n-grams 
are used in place of words, the out-of-vocabulary 
problem is alleviated. But there is quite a high 
computational cost, which will become apparent 
in Table 10 and the discussion accompanying it. 
A practical advantage of the ?morpheme?-by-
document array of LMSA, on the other hand, is 
that this cost is substantially reduced. This is be-
cause, as already mentioned, the vast majority of 
n-grams are eliminated from consideration. 
However, does taking this step significantly hurt 
performance? The results for LMSA presented in 
Table 9 provide an answer to this. 
For P1, the results are comparable to standard 
LSA when we select settings of n Z 7 (maximum 
permitted morpheme length) or above. But under 
the stricter MP5 measure, LMSA not only sig-
nificantly outperforms standard LSA (p < 0.001, 
at n Z 9); the results are also superior to those 
obtained under any other method we tested. The 
improvement in MP5 is comparable to that for 
P1 ? 0.677 to 0.707 ? when Chew and Abdelali 
(2008) use the Darwish Arabic light stemmer to 
provide input to LSA; our approach, however, 
has the advantage that it is fully unsupervised. 
134
n Z Average P1 Average MP5 
4 0.6947 0.4411 
5 0.8151 0.6102 
6 0.8614 0.6793 
7 0.8709 0.6912 
8 0.8663 0.6856 
9 0.8765 0.6909 
10 0.8772 0.6740 
Table 9. Results with LMSA8
As when n-grams are used without MI, fewer 
types are out-of-vocabulary: for example, with 
certain settings for LMSA, we found that the 
percentage of out-of-vocabulary types dropped 
from 65% under LSA to 29% under LMSA, and 
the effect was even more marked for Arabic 
taken individually (78.5% to 34.4%). This is de-
spite the fact mentioned above that LMSA arrays 
are more economical than LSA arrays: in fact, as 
Table 10 shows, 22% more economical (the size 
of the U matrix output by SVD, used to create 
vectors for new documents, is determined solely 
by the number of rows, or types). Note also that 
both LSA and LMSA are significantly more eco-
nomical than SVD with overlapping n-grams. 
Technique Rows Nonzeros 
LSA 163,745 2,684,938 
LSA with overlapping 
n-grams (where n Z 5) 
527,506 45,878,062 
LMSA 127,722 3,215,078 
Table 10. Comparative matrix sizes 
 
Even the results in Table 9 can still be im-
proved upon. Following McNamee and May-
field?s insight that different length n-grams may 
be optimal for different languages, we attempted 
to improve precision further by varying n inde-
pendently by language. For all languages but 
Arabic, n Z 9 seems to work well (either increas-
ing or decreasing maximum n resulted in a drop 
in precision), but by setting n Z 6 for Arabic, P1 
increased to 0.8874 and MP5 to 0.7368. As com-
parison of Table 11 with Table 6 shows, some of 
the most significant individual increases were for 
Arabic. It should however be noted that the op-
timal value for n may be dataset-dependent. 
Since n is a maximum length (unlike in 
McNamee and Mayfield?s experiments), one 
might expect that increasing n should never re-
 
8 These results are with the stipulation that word-initial and 
word-final n-grams are distinguished from word-medial n-
grams. We also ran experiments in which this distinction 
was not made. Detailed results are not presented here; suf-
fice it to say that when word-medial and other morphemes 
were not distinguished, precision was hurt somewhat (low-
ering it often by several percentage points). 
sult in a drop in precision. We believe the benefit 
to limiting the size of n is connected to Brown et 
al.?s (1992: 470) observation that ?as n increases, 
the accuracy of an n-gram model increases, but 
the reliability of our parameter estimates, drawn 
as they must be from a limited training text, de-
creases?. Effectively, the probabilities used in MI 
are unrepresentatively high for longer n-grams 
(this becomes clear if one considers the extreme 
example of an n-gram the same length as the 
training corpus). 
P1 (overall average: 0.8874) 
AR EN ES FR RU 
AR 1.0000 0.7895 0.7719 0.7281 0.7807 
EN 0.8158 1.0000 0.9298 0.9298 0.9123 
ES 0.7807 0.9474 1.0000 0.9123 0.8684 
FR 0.7632 0.9035 0.9474 1.0000 0.8947 
RU 0.7456 0.9298 0.9298 0.9035 1.0000 
MP5: AR 0.5140, EN 0.8035, ES 0.8228,  
FR 0.8035, RU 0.7404; overall average: 0.7368 
Table 11. Best results with LMSA 
 
If setting a maximum value for n makes sense 
in general, the idea of a lower maximum for 
Arabic in particular also seems reasonable since 
Arabic words, generally written as they are with-
out vowels, contain on average fewer characters 
than the other four languages, and contain roots 
which are usually three or fewer characters long. 
6 Conclusion 
In this paper, we have demonstrated LMSA, a 
linguistically (specifically, morphologically) 
more sophisticated alternative to LSA. By com-
puting mutual information of character n-grams 
of non-fixed length, we are able to obtain an ap-
proximation to a morpheme-by-document matrix 
which can substitute for the commonly-used 
term-by-document matrix. At the same time, be-
cause mutual information is based entirely on 
statistics, rather than grammar rules, all the ad-
vantages of LSA (language-independence, speed 
of implementation and fast run-time processing) 
are retained. In fact, some of these advantages 
may be increased since the number of index 
items is often lower. 
Although from a linguist?s point of view the 
theoretical advantages of LMSA may be intrinsi-
cally satisfying, the benefit is not confined to the 
theoretical realm. Our empirical results show that 
LMSA also brings practical benefits, particularly 
when performing IR with morphologically com-
plex languages like Arabic. Principally, this 
seems to be due to two factors: alleviation of the 
135
out-of-vocabulary problem and improvement in 
the associations made by SVD. 
We believe that the results we have presented 
may point the way towards still more sophisti-
cated types of analysis, particularly for multilin-
gual text. We would like to explore, for example, 
whether it is possible to use tensor decomposi-
tion methods like PARAFAC2 to leverage asso-
ciations between n-grams, words, documents and 
languages to still better advantage. 
Finally, it is worth pointing out that our ap-
proach offers an indirect way to test our statis-
tics-based approach to morphological analysis. 
The better our ?morphemes? correspond to mini-
mal semantic units (as theory dictates they 
should), the more coherently our system should 
work overall. In this case, our final arbiter of the 
system?s overall performance is CLIR precision. 
In short, our initial attempts appear to show 
that statistics-based morphological analysis can 
be integrated into a larger information retrieval 
architecture with some success. 
Acknowledgement 
Sandia is a multiprogram laboratory operated 
by Sandia Corporation, a Lockheed Martin Com-
pany, for the United States Department of En-
ergy?s National Nuclear Security Administration 
under contract DE-AC04-94AL85000. 
References  
S. Abdou, P. Ruck, and J. Savoy. 2005. Evaluation of 
Stemming, Query Expansion and Manual Indexing 
Approaches for the Genomic Task. Proceedings of 
TREC 2005.
M. W. Berry, S. T. Dumais., and G. W. O?Brien. 
1994. Using Linear Algebra for Intelligent Infor-
mation Retrieval. SIAM: Review 37, 573-595. 
Bible Society. 2006. A Statistical Summary of Lan-
guages with the Scriptures. Accessed Jan 5 2007 at 
http://www.biblesociety.org/latestnews/latest341-
slr2005stats.html. 
Biola University. 2005-2006. The Unbound Bible.
Accessed Jan 29 2008 at 
http://www.unboundbible.org/. 
P. F. Brown, P. V. deSouza, R. L. Mercer, V. J. Della 
Pietra, and J. C. Lai. 1992. Class-Based n-gram 
Models of Natural Language. Computational Lin-
guistics 18(4), 467-479. 
P. Chew and A. Abdelali. 2007. Benefits of the ?Mas-
sively Parallel Rosetta Stone?: Cross-Language In-
formation Retrieval with over 30 Languages. 
Proceedings of the Association for Computational 
Linguistics, 872-879. 
P. Chew and A. Abdelali. 2008. The Effects of Lan-
guage Relatedness on Multilingual Information Re-
trieval: A Case Study With Indo-European and 
Semitic Languages. Proceedings of the Workshop 
on Cross-Language Information Access.
K. Darwish. 2002. Building a shallow Arabic morpho-
logical analyzer in one day. Proceedings of the As-
sociation for Computational Linguistics, 47-54. 
S. Deerwester, S. T. Dumais, G. W. Furnas, T. K. 
Landauer and R. Harshman. 1990.  Indexing by La-
tent Semantic Analysis. Journal of the American 
Society for Information Science 41:6, 391-407. 
J. Goldsmith. 2001. Unsupervised Learning of the 
Morphology of a Natural Language. Computa-
tional Linguistics 27(2), 153-198. 
R. A. Harshman. 1972. PARAFAC2: Mathematical 
and Technical Notes. UCLA Working Papers in 
Phonetics 22, 30-47. 
M. Heroux, R. Bartlett, V. Howle, R. Hoekstra, J. Hu, 
T. Kolda, R. Lehoucq, K. Long, R. Pawlowski, E. 
Phipps, A. Salinger, H. Thornquist, R. Tuminaro, J. 
Willenbring, A. Williams, and K. Stanley. 2005. 
An Overview of the Trilinos Project. ACM Trans-
actions on Mathematical Software 31:3, 397-423. 
H. Kashioka, Y. Kawata, Y. Kinjo, A. Finch and E. 
W. Black. 1998. Use of Mutual Information Based 
Character Clusters in Dictionary-less Morphologi-
cal Analysis of Japanese. Proceedings of the 17th 
International Conference on Computational Lin-
guistics Vol. 1: 658-662. 
P. Koehn, F. J. Och, and D. Marcu. 2003. Statistical 
Phrase-Based Translation. Proceedings of the Joint 
Conference on Human Language Technologies and 
NAACL, 48-54. 
P. Koehn. 2002. Europarl: a Multilingual Corpus for 
Evaluation of Machine Translation. Unpublished. 
Accessed Jan 29 2008 at 
http://www.iccs.inf.ed.ac.uk 
/~pkoehn/publications/europarl.pdf. 
A. Lavie, E. Peterson, K. Probst, S. Wintner, and Y. 
Eytani. 2004. Rapid Prototyping of a Transfer-
Based Hebrew-to-English Machine Translation 
System. Proceedings of the TMI-04.
P. McNamee and J. Mayfield. 2004. Character N-
Gram Tokenization for European Language Text 
Retrieval. Information Retrieval 7, 73-97. 
P. Resnik, M. Broman Olsen, and M. Diab. 1999. The 
Bible as a Parallel Corpus: Annotating the "Book 
of 2000 Tongues". Computers and the Humanities 
33: 129-153.  
136
Proceedings of the NAACL HLT Workshop on Unsupervised and Minimally Supervised Learning of Lexical Semantics, pages 54?62,
Boulder, Colorado, June 2009. c?2009 Association for Computational Linguistics
Using DEDICOM for  
Completely Unsupervised Part-of-Speech Tagging 
Peter A. Chew, Brett W. Bader 
Sandia National Laboratories 
P. O. Box 5800, MS 1012 
Albuquerque, NM 87185-1012, USA 
{pchew,bwbader}@sandia.gov 
Alla Rozovskaya 
Department of Computer Science 
University of Illinois 
Urbana, IL 61801, USA 
rozovska@illinois.edu 
 
Abstract 
A standard and widespread approach to 
part-of-speech tagging is based on Hidden 
Markov Models (HMMs). An alternative 
approach, pioneered by Sch?tze (1993), 
induces parts of speech from scratch using 
singular value decomposition (SVD). We 
introduce DEDICOM as an alternative to 
SVD for part-of-speech induction. 
DEDICOM retains the advantages of 
SVD in that it is completely unsupervised: 
no prior knowledge is required to induce 
either the tagset or the associations of 
types with tags. However, unlike SVD, it 
is also fully compatible with the HMM 
framework, in that it can be used to esti-
mate emission- and transition-probability 
matrices which can then be used as the 
input for an HMM. We apply the 
DEDICOM method to the CONLL corpus 
(CONLL 2000) and compare the output of 
DEDICOM to the part-of-speech tags 
given in the corpus, and find that the cor-
relation (almost 0.5) is quite high. Using 
DEDICOM, we also estimate part-of-
speech ambiguity for each type, and find 
that these estimates correlate highly with 
part-of-speech ambiguity as measured in 
the original corpus (around 0.88). Finally, 
we show how the output of DEDICOM 
can be evaluated and compared against 
the more familiar output of supervised 
HMM-based tagging. 
1 Introduction 
Traditionally, part-of-speech tagging has been ap-
proached either in a rule-based fashion, or stochas-
tically. Harris (1962) was among the first to 
develop algorithms of the former type. The rule-
based approach relies on two elements: a dictio-
nary to assign possible parts of speech to each 
word, and a list of hand-written rules ? which must 
be painstakingly developed for each new language 
or domain ? to disambiguate tokens in context. 
Stochastic taggers, on the other hand, avoid the 
need for hand-written rules by tabulating probabili-
ties of types and part-of-speech tags (which must 
be gathered from a tagged training corpus), and 
applying a special case of Bayesian inference 
(usually, Hidden Markov Models [HMMs]) to dis-
ambiguate tokens in context. The latter approach 
was pioneered by Stolz et al (1965) and Bahl and 
Mercer (1976), and became widely known through 
the work of e.g. Church (1988) and DeRose 
(1988). 
A third and more recent approach, known as 
?distributional tagging? and exemplified by 
Sch?tze (1993, 1995) and Biemann (2006), aims to 
eliminate the need for both hand-written rules and 
a tagged training corpus, since the latter may not 
be available for every language or domain. Distri-
butional tagging is fully-unsupervised, unlike the 
two traditional approaches described above. 
Sch?tze suggests analyzing the distributional pat-
terns of words by forming a term adjacency matrix, 
then subjecting that matrix to Singular Value De-
composition (SVD) to reveal latent dimensions. He 
shows that in the reduced-dimensional space im-
plied by SVD, tokens do indeed cluster intuitively 
by part-of-speech; and that if context is taken into 
account, something akin to part-of-speech tagging 
54
can be achieved. Whereas the performance of sto-
chastic taggers is generally sub-optimal when the 
domain of the training data differs from that of the 
test data, distributional tagging sidesteps this prob-
lem, since each corpus can be considered in its 
own right. Sch?tze (1995) notes two general draw-
backs of distributional tagging methods: the per-
formance is relatively modest compared to that of 
supervised methods; and languages with rich mor-
phology may pose a challenge.1
In this paper, we present an alternative unsuper-
vised approach to distributional tagging. Instead of 
SVD, we use a dimensionality reduction technique 
known as DEDICOM, which has various advan-
tages over the SVD-based approach. Principal 
among these is that, even though no pre-tagged 
corpus is required, DEDICOM can easily be used 
as input to a HMM-based approach (and the two 
share linear-algebraic similarities, as we will make 
clear in section 4). Although our empirical results, 
like those of Sch?tze (1995), are perhaps still rela-
tively modest, the fact that a clearer connection 
exists between DEDICOM and HMMs than be-
tween SVD and HMMs gives us good reason to 
believe that with further refinements, DEDICOM 
may be able to give us ?the best of both worlds? in 
many respects: the benefits of avoiding the need 
for a pre-tagged corpus, with empirical results ap-
proaching those of HMM-based tagging. 
In the following sections, we introduce 
DEDICOM, describe its applicability to the part-
of-speech tagging problem, and outline its connec-
tions to the standard HMM-based approach to tag-
ging. We evaluate the use of DEDICOM on the 
CONLL 2000 shared task data, discuss the results 
and suggest avenues for improvement. 
2 DEDICOM 
DEDICOM, which stands for ?DEcomposition into 
DIrectional COMponents?, is a linear-algebraic 
decomposition method attributable to Harshman 
(1978) which has been used to analyze matrices of 
 
1 We note the latter is also true for languages in which word 
order is relatively free ? usually the same languages as those 
with rich morphology. While English word order is signifi-
cantly constrained by part-of-speech categorizations, this is 
not as true of, say, Russian. Thus, an adjacency matrix formed 
from a Russian corpus is likely to be less informative about 
part-of-speech classifications as one formed from an English 
corpus. Quite possibly, this is as much of a limitation for 
DEDICOM as it is for SVD. 
asymmetrical directional relationships between 
objects or persons. Early on, the technique was 
applied by Harshman et al (1982) to the analysis 
of two types of marketing data: ?free associations? 
? how often one phrase (describing hair shampoo) 
evokes another in the minds of survey respondents, 
and ?car switching data? ? how often people switch 
from one to another of 16 car types. Both datasets 
are asymmetric and directional: in the first dataset, 
for example, the phrase ?body? (referring to sham-
poo) evoked the phrase ?fullness? twice as often in 
the minds of respondents as ?fullness? evoked 
?body?. Likewise, the data from Harshman et al 
(1982) show that in the given period, 3,820 people 
switched from ?midsize import? cars to ?midsize 
domestic? cars, but only 2,140 switches were made 
in the reverse direction. Another characteristic of 
these ?asymmetric directional? datasets is that they 
can be represented in square matrices. For exam-
ple, the raw car switching data can be represented 
in a 16 ? 16 matrix, since there are 16 car types. 
The objective of DEDICOM, which can be 
compared to that of SVD, is to factorize the raw 
data matrices into a lower-dimensional space iden-
tifying underlying, idealized directional patterns in 
the data. For example, while there are 16 car types 
in the raw car switching data, Harshman shows 
that under a 4-dimensional DEDICOM analysis, 
these can be ?boiled down? to the basic types ?plain 
large-midsize?, ?specialty?, ?fancy large?, and 
?small? ? and that patterns of switching among 
these more basic types can then be identified. 
If X represents the original n ? n matrix of 
asymmetric relationships, and a general entry xij in 
X represents the strength of the directed relation-
ship of object i to object j, then the single-domain 
DEDICOM model2 can be written as follows: 
 
X = ARAT + E (1) 
 
where A denotes an n ? q matrix of weights of the 
n observed objects in q dimensions (where q < n), 
and R is a dense q ? q asymmetric matrix express-
ing the directional relationships between the q di-
mensions or basic types. AT is simply the transpose 
 
2 There is a dual-domain DEDICOM model, which is also 
described in Harshman (1978). The dual-domain DEDICOM 
model is not relevant to our discussion, and thus it will not be 
mentioned further. References in this paper to ?DEDICOM? 
are to be understood as references in shorthand to ?single-
domain DEDICOM?. 
55
of A, and E is a matrix of error terms. Our objec-
tive is to minimize E, so we can also write: 
 
X  ARAT (2) 
 
As noted by Harshman (1978: 209), the fact that 
A appears on both the left and right of R means 
that the data is described ?in terms of asymmetric 
relations among a single set of things? ? in other 
words, when objects are on the receiving end of the 
directional relationships, they are still of the same 
type as those on the initiating end. 
One difference between DEDICOM and SVD is 
that there is no unique solution: either A or R can 
be scaled or rotated without changing the goodness 
of fit, so long as the inverse operation is applied to 
the other. For example, if we let ? = AD, where D 
is any diagonal scaling matrix (or, more generally, 
any nonsingular matrix), then we can write 
 
X  ARAT = ?D-1RD-1?T (3) 
since ?T = (AD) T = DAT
(In our application, we constrain A and R to be 
nonnegative as noted below.) 
To our knowledge, there have been no applica-
tions of DEDICOM to date in computational lin-
guistics. This is in contrast to SVD, which has 
been extensively used for text analysis (for appli-
cations other than unsupervised part-of-speech 
tagging, see Baeza-Yates and Ribeiro-Neto 1999). 
3 Applicability of DEDICOM to part-of-
speech tagging 
Sch?tze?s (1993) key insight is that ? at least in 
English ? adjacencies between types are a good 
guide to their grammatical functions. That insight 
can be leveraged by applying either SVD or 
DEDICOM to a type-by-type adjacency matrix. 
With DEDICOM, however, we add the constraint 
(already stated) that the types are a ?single set of 
things?: whether a type ?precedes? or ?follows? ? 
i.e., whether it is in a row or a column of the ma-
trix ? does not affect its grammatical function. This 
constraint is as it should be, and, to our knowledge, 
sets DEDICOM apart from all previous unsuper-
vised approaches including those of Sch?tze (1993, 
1995) and Biemann (2006). 
Given any corpus containing n types and k to-
kens, we can let X be an n ? n token-adjacency 
matrix. Let each entry xij in X denote the number 
of times in the corpus that type i immediately pre-
cedes type j. X is thus a matrix of bigram frequen-
cies. It follows that the sum of the elements of X 
equals k ? 1 (because the first token in the corpus 
is preceded by nothing, and the last token is fol-
lowed by nothing). Any given row sum of X (the 
type frequency corresponding to the particular 
row) will equal the corresponding column sum, 
except if the type happens to occur in the first or 
last position in the corpus. X will be asymmetric, 
since the frequency of bigram ij is clearly not the 
same as that of bigram ji for all i and j.
It can be seen, therefore, that our X represents 
asymmetric directional data, very similar to the 
data analyzed in Harshman (1978) and Harshman 
et al (1982). If we fit the DEDICOM model to our 
X matrix, then we obtain an A matrix which 
represents types by latent classes, and an R matrix 
which represents directional relationships between 
latent classes. We can think of the latent classes as 
induced parts of speech. 
With SVD, we believe that the orthogonality of 
the reduced-dimensional features militates against 
any attempt to correlate these features with parts of 
speech. From a linguistic point of view, there is no 
reason to believe that parts of speech are orthogon-
al to one another in any sense. For example, nouns 
and adjectives (traditionally classified together as 
?nominals?) seem to share more in common with 
one another than nouns and verbs. With 
DEDICOM, this is not an issue, because the col-
umns of A are not required to be mutually ortho-
gonal to one another, unlike the left and right 
singular vectors from SVD. 
Thus, the A matrix from DEDICOM shows how 
strongly associated each type is with the different 
induced parts of speech; we would expect types 
which are ambiguous (such as ?claims?, which can 
be either a noun or a verb) to have high loadings 
on more than one column in A. Again, if the 
classes correlate with parts of speech, the R matrix 
will show the latent patterns of adjacency between 
different parts of speech. 
4 Connections between DEDICOM and 
HMM-based tagging 
For any HMM, two components are necessary: a 
set of emission probabilities and a set of transition 
probabilities. Applying this framework to part-of-
56
speech tagging, the tags are conceived of as the 
hidden layer of the HMM and the tokens (each of 
which is associated with a type) as the visible 
layer. The emission probabilities are then the prob-
abilities of types given the tags, and the transition 
probabilities are the probabilities of the tags given 
the preceding tags. If these probabilities are 
known, then there are algorithms (such as the Vi-
terbi algorithm) to determine the most likely se-
quence of tags given the visible sequence of types. 
In the case of supervised learning, we obtain the 
emission and transition probabilities by observing 
actual frequencies in a tagged corpus. Suppose our 
corpus, as previously discussed, consists of n types 
and k tokens. Since we are dealing with supervised 
learning, the number of the tags in the tagset is also 
known: we denote this number q. Now, the ob-
served frequencies can be represented, respective-
ly, as n ? q and q ? q matrices: we denote these A* 
and R*. Each entry aij in A* denotes the number of 
times type i is associated with tag j, and each entry 
rij in R* denotes the number of times tag j imme-
diately follows tag i. Moreover, we know some 
other properties of A* and R*: 
 
 the respective sums of the elements of A* and 
R* are equal to k ? 1; 
 each row sum of A* (
=
q
x
ixa
1
) corresponds to 
the frequency in the corpus of type i;
 each column sum of A*, as well as the corres-
ponding row and column sums of R*, are the 
frequencies of the given tags in the corpus (for 
all j, 
===
==
q
x
jx
q
x
xj
q
x
xj rra
111
). 
 
If A* and R* contain frequencies, however, we 
must perform a matrix operation to obtain transi-
tion and emission probabilities for use in an 
HMM-based tagger. In effect, A* must be made 
column-stochastic, and R* must be made row-
stochastic. Since the column sums of A* equal the 
respective row sums of R*, this can be achieved by 
post-multiplying both A* and R* by DA, where DA
is a diagonal scaling matrix containing the inverses 
of the column sums of A (or equivalently, the row 
sums of R). Then the matrix of emission probabili-
ties is given by A*DA, and the matrix of transition 
probabilities by R*DA.
We can now make the connection to DEDICOM 
explicit. Let A = A*DA and R = R*, then we can 
rewrite (2) as follows: 
 
X  ARAT = (A*DA) R* (A*DA)T (4) 
X  A*DA R*DA A*T (5) 
 
In other words, for any corpus we may compute 
a probabilistic representation of the type adjacency 
matrix X (which will contain expected frequencies 
comparable to the actual frequencies) by multiply-
ing the emission probability matrix A*DA, the 
transition probability matrix R*DA, and the type-
by-tag frequency matrix A*. (Presumably, the 
closer the approximation, the better the tagging in 
the training set actually factorizes the true direc-
tional relationships.) 
Conversely, for fully unsupervised tagging, we 
can fit the DEDICOM model to the type adjacency 
matrix X. The resulting A matrix contains esti-
mates of what the tags should be (if a tagged train-
ing corpus is unavailable), as well as the emission 
probability of each type given each tag, and the 
resulting R matrix is the corresponding transition 
probability matrix given those tags. In this case, a 
column-stochastic A can be used directly as the 
emission probability matrix, and we simply make 
R* row-stochastic to obtain the matrix of transition 
probabilities. The only difference then between the 
output of the fully-unsupervised DEDICOM/HMM 
tagger and that of a supervised HMM tagger is that 
in the first case, the ?tags? are numeric indices 
representing the corresponding column of A, and 
in the second case, they are the members of the 
tagset used in the training data. 
The fact that emission and transition probabili-
ties (or at least something very like them) are a 
natural by-product of DEDICOM sets DEDICOM 
apart from Sch?tze?s SVD-based approach, and is 
for us a significant reason which recommends the 
use of DEDICOM. 
5 Evaluation 
For all evaluation described here, we used the 
CONLL 2000 shared task data (CONLL 2000). 
This English-language newswire corpus consists of 
19,440 types and 259,104 tokens (including punc-
tuation marks as separate types/tokens). Each to-
ken is associated with a part-of-speech tag and a 
chunk tag, although we did not use the chunk tags 
57
in the work described here. The tags are from a 44-
item tagset. The CONLL 2000 tags against which 
we measure our own results are in fact assigned by 
the Brill tagger (Brill 1992), and while these may 
not correlate perfectly with those that would have 
been assigned by a human linguist, we believe that 
the correlation is likely to be good enough to allow 
for an informative evaluation of our method. 
Before discussing the evaluation of unsuper-
vised DEDICOM, let us briefly reconsider the si-
milarities of DEDICOM to the supervised HMM 
model in the light of actual data in the CONLL 
corpus. We stated in (5) that X  A*DAR*DAA*T.
For the CONLL 2000 tagged data, A* is a 19,440 
? 44 matrix and R* is a 44 ? 44 matrix. Using 
A*DA and R*DA as emission- and transition-
probability matrices within a standard HMM 
(where the entire CONLL 2000 corpus is treated as 
both training and test data), we obtained a tagging 
accuracy of 95.6%. By multiplying 
A*DAR*DAA*T, we expect to obtain a matrix ap-
proximating X, the table of bigram frequencies. 
This is indeed what we found: it will be apparent 
from Table 1 that the top 10 expected bigram fre-
quencies based on this matrix multiplication are 
generally quite close to actual frequencies. Moreo-
ver, the sum of the elements in A*DAR*DAA*T is 
equal to the sum of the elements in X, and if we let 
E be the matrix of error terms (X - 
A*DAR*DAA*T), then we find that ||E|| (the Frobe-
nius norm of E) is 38.764% of ||X|| - in other 
words, A*DAR*DAA*T accounts for just over 60% 
of the data in X. 
 
Type 1 Type 2 Actual 
frequency 
Expected 
frequency 
of the 1,421.000 1,202.606 
in the 1,213.000 875.822 
for the 553.000 457.067 
to the 445.000 415.524 
on the 439.000 271.528 
the company 383.000 105.794 
a share 371.000 32.447 
that the 315.000 258.679 
and the 302.000 296.737 
to be 285.000 499.315 
Table 1. Actual versus expected frequencies for 10 most 
common bigrams in CONLL 2000 corpus 
 
Having confirmed that there exists an A 
(=A*DA) and R (=R*) which both satisfies the 
DEDICOM model and can be used directly within 
a HMM-based tagger to achieve satisfactory re-
sults, we now consider whether A and R can be 
estimated if no tagged training set is available. 
We start, therefore, from X, the square 19,440 ?
19,440 (sparse) matrix of raw bigram frequencies 
from the CONLL 2000 data. Using Matlab and the 
Tensor Toolbox (Bader and Kolda 2006, 2007), we 
computed the best rank-44 non-negative 
DEDICOM3 decomposition of this matrix using 
the 2-way version of the ASALSAN algorithm 
presented in Bader et al (2007), which is based on 
iteratively improving random initial guesses for A 
and R. As with SVD, the rank of the decomposi-
tion can be selected by the user; we chose 44 since 
that was known to be the number of items in the 
CONLL 2000 tagset, but a lower number could be 
selected for a coarser-grained part-of-speech anal-
ysis. Ultimately, perhaps the best way to determine 
the optimal rank would be to evaluate different 
options within a larger end-to-end system, for ex-
ample an information retrieval system; this, how-
ever, was beyond our scope in this study. 
As already mentioned, there are indeterminacies 
of rotation and scale in DEDICOM. As Harshman 
et al (1982: 211) point out, ?when the columns of 
A are standardized? the R matrix can then be in-
terpreted as expressing relationships among the 
dimensions in the same units as the original data. 
That is, the R matrix can be interpreted as a ma-
trix of the same kind as the original data matrix X, 
but describing the relations among the latent as-
pects of the phrases, rather than the phrases them-
selves?. Thus, if DEDICOM is constrained so that 
A is column-stochastic (which is required in any 
case of the matrix of emission probabilities), then 
the sum of the elements in R should approximate 
the sum of the elements in X. R is therefore com-
parable to R* (with some provisos which shall be 
enumerated below), and to obtain the row-
stochastic transition-probability matrix, we simply 
multiply R by a diagonal matrix DR whose ele-
ments are the inverses of R?s row sums. 
 
3 Non-negative DEDICOM imposes the constraint not present 
in Harshman (1978, 1982) that all entries in A and R must be 
non-negative. This constraint is appropriate in the present 
case, since the entries in A* and R* (and of course the proba-
bilities in A*D and R*D) are by definition non-negative. 
58
Table 2. Partial confusion matrix of gold-standard tags against DEDICOM-induced tags for CONLL 2000 dataset 
With A as an emission-probability matrix and 
RDR as a transition-probability matrix, we now 
have all that is needed for an HMM-based tagger 
to estimate the most likely sequence of ?tags? given 
the corpus. However, since the ?tags? here are nu-
merical indices, as mentioned, to evaluate the out-
put we must look at the correlation between these 
?tags? and the gold-standard tags given in the 
CONLL 2000 data. One way this can be done is by 
presenting a 44 ? 44 confusion matrix (of gold-
standard tags against induced tags), and then mea-
suring the correlation coefficient (Pearson?s R) 
between that matrix and the ?idealized? confusion 
matrix in which each induced tag corresponds to 
one and only one ?gold standard? tag. Using A and 
RDR as the input to a HMM-based tagger, we 
tagged the CONLL 2000 dataset with induced tags 
and obtained the confusion matrix shown in Table 
2 (owing to space constraints, only the first 20 col-
umns are shown). The correlation between this 
matrix and the equivalent diagonalized ?ideal? ma-
trix is in fact 0.4942, which is significantly higher 
than could have occurred by chance. 
It should be noted that a lack of correlation be-
tween the induced tags and the gold standard tags 
can be attributed to at least two independent fac-
tors. The first, of course, is any inability of the 
DEDICOM model to fit the particular problem and 
data. Clearly, this is undesirable. The other factor 
to be borne in mind, which works to DEDICOM?s 
favor, is that the DEDICOM model could yield an 
A and R which factorize the data more optimally 
than the A*D and R* implied by the gold-standard 
tags. There are three methods we can use to try and 
tease apart these competing explanations of the 
results, two quantitative and the other subjective. 
Quantitatively, we can compare the respective er-
ror matrices E. We have already mentioned that 
38764.0||X||
||ADRDAX|| T*A*A*  (6) 
Similarly, using the A and R from DEDICOM we 
can compute 
24078.0||X||
||ARAX|| T  (7) 
59
The fact that the error is lower in the second case 
implies that DEDICOM allows us to find a part-of-
speech ?factorization? of the data which fits better 
even than the gold standard, although again there 
are some caveats to this; we will return to these in 
the discussion. 
Another way to evaluate the output of 
DEDICOM is by comparing the number of part-of-
speech tags for a type in the gold standard to the 
number of classes in the A matrix with which the 
type is strongly associated. We test this by measur-
ing the Pearson correlation between the two va-
riables. First, we compute the average number of 
part-of-speech tags per type using the gold stan-
dard. We refer to this value as ambiguity coeffi-
cient; for the CONLL dataset, this is 1.05. Because 
A is dense, if we count all non-zero columns for a 
type in the A matrix as possible classes, we obtain 
a much higher ambiguity coefficient. We therefore 
set a threshold and consider only those columns 
whose values exceed a certain threshold. The thre-
shold is selected so that the ambiguity coefficient 
of the A matrix is the same as that of the gold stan-
dard. For a given type, every column with a value 
exceeding the threshold is counted as a possible 
class for that type. We then compute the Pearson 
correlation coefficient between the number of 
classes for a type in the A matrix and the number 
of part-of speech tags for that type in the CONLL 
dataset as provided by the Brill tagger. We ob-
tained a correlation coefficient of 0.88, which 
shows that there is indeed a high correlation be-
tween the induced tags and the gold standard tags 
obtained with DEDICOM. 
Finally, we can evaluate the output subjectively 
by looking at the content of the A matrix. For each 
?tag? (column) in A, the ?types? (rows) can be 
listed in decreasing order of their weighting in A. 
This gives us an idea of which types are most cha-
racteristic of which tags, and whether the grouping 
into tags makes any intuitive sense. These results 
(for selected tags only, owing to limitations of 
space) are given in Table 3. 
Many groupings in Table 3 do make sense: for 
example, the fourth tag is clearly associated with 
verbs, while the two types with significant weight-
ings for tag 2 are both determiners. By referring 
back to Table 2, we can see that many tokens in the 
CONLL 2000 dataset tagged as verbs are indeed 
tagged by the DEDICOM tagger as ?tag 4?, while 
many determiners are tagged as ?tag 3?. To under-
stand where a lack of correlation may arise, how-
ever, it is informative to look at apparent 
anomalies in the A matrix. For example, it can be 
seen from Table 3 that ?new?, an adjective, is 
grouped in the third tag with ?a? and ?the? (and 
ranking above ?an?). Although not in agreement 
with the CONLL 2000 ?gold standard? tagging, the 
idea that determiners are a type of adjective is in 
fact in accordance with traditional English gram-
mar. Here, the grouping of ?new?, ?a? and ?the? can 
be explained by the distributional similarities (all 
precede nouns). It should also be emphasized that 
the A matrix is essentially a ?soft clustering? of 
types (meaning that types can belong to more than 
one cluster). Thus, for example, ?u.s.? (the abbrevi-
ation for United States) appears under both tag 2 
(which appears to have high loadings for nouns) 
and tag 8 (with high loadings for adjectives). 
We have alluded above in passing to possible 
methods for improving the results of the 
DEDICOM analysis. One would be to pre-process 
the data differently. Here, a variety of options are 
available which maintain a generally unsupervised 
approach (one example is to avoid treating punctu-
ation as tokens). However, variations in pre-
processing are beyond the scope of this paper. 
Tag Top 10 types (by weight) with weightings 
1 million share said . year billion inc. corp. years quarter 
0.0246 0.0146 0.0129 0.0098 0.0088 0.0069 0.0064 0.0061 0.0058 0.0054 
2 company u.s. new first market share year stock . government 
0.0264 0.0136 0.0113 0.0095 0.0086 0.0086 0.0079 0.0077 0.0065 0.006 
3 the a new an other its any addition their 1988 
0.2889 0.1194 0.0121 0.0094 0.0092 0.0085 0.0067 0.0062 0.0062 0.0057 
?
8 the its his about those their all u.s. . this 
0.0935 0.0462 0.0208 0.0160 0.0096 0.0095 0.0088 0.0077 0.0074 0.0071 
?
Table 3. Type weightings in A matrix, by tag 
60
Another method would be to constrain 
DEDICOM so that the output more closely models 
the characteristics of A* and R*, the emission- and 
transition-probability matrices obtained from a 
tagged training set. In particular, there is one im-
portant constraint on R* which is not replicated in 
R: the constraint mentioned above that for all j,

==
=
q
x
jx
q
x
xj rr
11
. We note that this constraint can be 
satisfied by Sinkhorn balancing (Sinkhorn 1964)4,
although it remains to be seen how the constraint 
on R can best be incorporated into the DEDICOM 
architecture. Assuming that A is column-
stochastic, another desirable constraint is that the 
rows of A(DR)-1 should sum to the same as the 
rows of X (the respective type frequencies). With 
the implementation of these (and any other) con-
straints, one would expect the fit of DEDICOM to 
the data to worsen (cf. (6) and (7) above), but in-
curring this cost could be worthwhile if the payoff 
were somehow linguistically interesting (for ex-
ample, if it turned out we could achieve a much 
higher correlation to gold-standard tagging). 
6 Conclusion 
In this paper, we have introduced DEDICOM, an 
analytical technique which to our knowledge has 
not previously been used in computational linguis-
tics, and applied it to the problem of completely 
unsupervised part-of-speech tagging. Theoretical-
ly, the model has features which recommend it 
over other previous approaches to unsupervised 
tagging, specifically SVD. Principal among the 
advantages is the compatibility of DEDICOM with 
the standard HMM-based approach to part-of-
speech tagging, but another significant advantage 
is the fact that types are treated as ?a single set of 
objects? regardless of whether they occupy the first 
or second position in a bigram. 
By applying DEDICOM to a tagged dataset, we 
have shown that there is a significant correlation 
between the tags induced by unsupervised, 
DEDICOM-based tagging, and the pre-existing 
gold-standard tags. This points both to an inherent 
validity in the gold-standard tags (as a reasonable 
 
4 It is also worth noting that Sinkhorn was motivated by the 
same problem which concerns us, that of estimating a transi-
tion-probability matrix for a Markov model. 
factorization of the data) and to the fact that 
DEDICOM appears promising as a method of in-
ducing tags in cases where no gold standard is 
available. 
We have also shown that the factors of 
DEDICOM are interesting in their own right: our 
tests show that the A matrix (similar to an emis-
sion-probability matrix) models type part-of-
speech ambiguity well. Using insights from 
DEDICOM, we have also shown how linear alge-
braic techniques may be used to estimate the fit of 
a given part-of-speech factorization (whether in-
duced or manually created) to a given dataset, by 
comparing actual versus expected bigram frequen-
cies. 
In summary, it appears that DEDICOM is a 
promising way forward for bridging the gap be-
tween unsupervised and supervised approaches to 
part-of-speech tagging, and we are optimistic that 
with further refinements to DEDICOM (such as 
the addition of appropriate constraints), more in-
sight will be gained on how DEDICOM may most 
profitably be used to improve part-of-speech tag-
ging when few pre-existing resources (such as 
tagged corpora) are available. 
Acknowledgements 
We are grateful to Danny Dunlavy for contributing 
his thoughts to this work. 
Sandia is a multiprogram laboratory operated by 
Sandia Corporation, a Lockheed Martin Company, 
for the United States Department of Energy?s Na-
tional Nuclear Security Administration under con-
tract DE-AC04-94AL85000. 
61
References  
Brett W. Bader, Richard A. Harshman, and Tamara G. 
Kolda. 2007. Temporal analysis of semantic graphs 
using ASALSAN. In Proceedings of the 7th IEEE In-
ternational Conference on Data Mining, 33-42. 
Brett W. Bader and Tamara G. Kolda. 2006.  Efficient 
MATLAB Computations with Sparse and Factored 
Tensors.  Technical Report SAND2006-7592, Sandia 
National Laboratories, Albuquerque, NM and Liver-
more, CA. 
Brett W. Bader and Tamara G. Kolda. 2007.  The 
MATLAB Tensor Toolbox, version 2.2.  
http://csmr.ca.sandia.gov/~tgkolda/TensorToolbox/.  
Ricardo Baeza-Yates and Berthier Ribeiro-Neto. 1999. 
Modern Information Retrieval. New York: ACM 
Press. 
L. R. Bahl and R. L. Mercer. 1976. Part of speech as-
signment by a statistical decision algorithm. In Pro-
ceedings of the IEEE International Symposium on 
Information Theory, 88-89. 
C. Biemann. 2006. Unsupervised part-of-speech tagging 
employing efficient graph clustering. In Proceedings 
of the COLING/ACL 2006 Student Research Work-
shop, 7-12. 
E. Brill. 1992. A simple rule-based part of speech tag-
ger. In Proceedings of the Third Conference on Ap-
plied Natural Language Processing, 152-155. 
K. W. Church. 1988. A stochastic parts program and 
noun phrase parser for unrestricted text. In ANLP 
1988, 136-143. 
CONLL 2000. Shared task data. Retrieved Dec. 1, 2008 
from http://www.cnts.ua.ac.be/conll2000/chunking/. 
S. J. DeRose. 1988. Grammatical category disambigua-
tion by statistical optimization. Computational Lin-
guistics 14, 31-39. 
Harris, Z. S. 1962. String Analysis of Sentence Struc-
ture. Mouton: The Hague. 
Richard Harshman. 1978. Models for Analysis of 
Asymmetrical Relationships Among N Objects or 
Stimuli. Paper presented at the First Joint Meeting of 
the Psychometric Society and The Society for Ma-
thematical Psychology. Hamilton, Canada. 
Richard Harshman, Paul Green, Yoram Wind, and Mar-
garet Lundy. 1982. A Model for the Analysis of 
Asymmetric Data in Marketing Research. Marketing 
Science 1(2), 205-242. 
Hinrich Sch?tze. 1993. Part-of-Speech Induction from 
Scratch. In Proceedings of the 31st Annual Meeting of 
the Association for Computational Linguistics, 251-
258. 
Hinrich Sch?tze. 1995. Distributional Part-of-Speech 
Tagging. In Proceedings of the 7th Conference of the 
European Chapter of the Association for Computa-
tional Linguistics, 141-148. 
Richard Sinkhorn. 1964. A Relationship Between Arbi-
trary Positive Matrices and Doubly Stochastic Ma-
trices. The Annals of Mathematical Statistics 35(2), 
876-879. 
W. S. Stolz, P. H. Tannenbaum, and F. V. Carstensen. 
1965. A stochastic approach to the grammatical cod-
ing of English. Communications of the ACM 8(6), 
399-405. 
62
