Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 1025?1034,
Jeju, Republic of Korea, 8-14 July 2012. c?2012 Association for Computational Linguistics
A Cost Sensitive Part-of-Speech Tagging:
Differentiating Serious Errors from Minor Errors
Hyun-Je Song1 Jeong-Woo Son1 Tae-Gil Noh2 Seong-Bae Park1,3 Sang-Jo Lee1
1School of Computer Sci. & Eng. 2Computational Linguistics 3NLP Lab.
Kyungpook Nat?l Univ. Heidelberg University Dept. of Computer Science
Daegu, Korea Heidelberg, Germany University of Illinois at Chicago
{hjsong,jwson,tgnoh}@sejong.knu.ac.kr sbpark@uic.edu sjlee@knu.ac.kr
Abstract
All types of part-of-speech (POS) tagging er-
rors have been equally treated by existing tag-
gers. However, the errors are not equally im-
portant, since some errors affect the perfor-
mance of subsequent natural language pro-
cessing (NLP) tasks seriously while others do
not. This paper aims to minimize these serious
errors while retaining the overall performance
of POS tagging. Two gradient loss functions
are proposed to reflect the different types of er-
rors. They are designed to assign a larger cost
to serious errors and a smaller one to minor
errors. Through a set of POS tagging exper-
iments, it is shown that the classifier trained
with the proposed loss functions reduces se-
rious errors compared to state-of-the-art POS
taggers. In addition, the experimental result
on text chunking shows that fewer serious er-
rors help to improve the performance of sub-
sequent NLP tasks.
1 Introduction
Part-of-speech (POS) tagging is needed as a pre-
processor for various natural language processing
(NLP) tasks such as parsing, named entity recogni-
tion (NER), and text chunking. Since POS tagging is
normally performed in the early step of NLP tasks,
the errors in POS tagging are critical in that they
affect subsequent steps and often lower the overall
performance of NLP tasks.
Previous studies on POS tagging have shown
high performance with machine learning techniques
(Ratnaparkhi, 1996; Brants, 2000; Lafferty et al,
2001). Among the types of machine learning ap-
proaches, supervised machine learning techniques
were commonly used in early studies on POS tag-
ging. With the characteristics of a language (Rat-
naparkhi, 1996; Kudo et al, 2004) and informa-
tive features for POS tagging (Toutanova and Man-
ning, 2000), the state-of-the-art supervised POS tag-
ging achieves over 97% of accuracy (Shen et al,
2007; Manning, 2011). This performance is gen-
erally regarded as the maximum performance that
can be achieved by supervised machine learning
techniques. There have also been many studies on
POS tagging with semi-supervised (Subramanya et
al., 2010; S?gaard, 2011) or unsupervised machine
learning methods (Berg-Kirkpatrick et al, 2010;
Das and Petrov, 2011) recently. However, there still
exists room to improve supervised POS tagging in
terms of error differentiation.
It should be noted that not all errors are equally
important in POS tagging. Let us consider the parse
trees in Figure 1 as an example. In Figure 1(a),
the word ?plans? is mistagged as a noun where it
should be a verb. This error results in a wrong parse
tree that is severely different from the correct tree
shown in Figure 1(b). The verb phrase of the verb
?plans? in Figure 1(b) is discarded in Figure 1(a)
and the whole sentence is analyzed as a single noun
phrase. Figure 1(c) and (d) show another tagging er-
ror and its effect. In Figure 1(c), a noun is tagged as
a NNS (plural noun) where its correct tag is NN (sin-
gular or mass noun). However, the error in Figure
1(c) affects only locally the noun phrase to which
?physics? belongs. As a result, the general structure
of the parse tree in Figure 1(c) is nearly the same as
1025
SVP
VP
NP
The treasury 
to
raise 150 billion in cash.
DT NNP
TO
VB CD CD IN NN
S
plans
NNS
(a) A parse tree with a serious error.
S
VPNP
The   treasury 
DT NNP
S
VP
VPto
raise 150 billion in cash.
TO
VB CD CD IN NN
plans
VBZ
(b) The correct parse tree of the sentence?The treasury
plans . . .?.
S
NP VP
We
PRP
altered
VBN
NP
NP PP
the chemistry and physics
DT
of the atmosphere
NN CC NNS INDT NN
(c) A parse tree with a minor error.
S
NP VP
We
PRP
altered
VBN
NP
NP PP
the chemistry and physics
DT
of the atmosphere
NN CC NN INDT NN
(d) The correct parse tree of the sentence ?We altered
. . .?.
Figure 1: An example of POS tagging errors
the correct one in Figure 1(d). That is, a sentence
analyzed with this type of error would yield a cor-
rect or near-correct result in many NLP tasks such
as machine translation and text chunking.
The goal of this paper is to differentiate the seri-
ous POS tagging errors from the minor errors. POS
tagging is generally regarded as a classification task,
and zero-one loss is commonly used in learning clas-
sifiers (Altun et al, 2003). Since zero-one loss con-
siders all errors equally, it can not distinguish error
types. Therefore, a new loss is required to incorpo-
rate different error types into the learning machines.
This paper proposes two gradient loss functions to
reflect differences among POS tagging errors. The
functions assign relatively small cost to minor er-
rors, while larger cost is given to serious errors.
They are applied to learning multiclass support vec-
tor machines (Tsochantaridis et al, 2004) which is
trained to minimize the serious errors. Overall accu-
racy of this SVM is not improved against the state-
of-the-art POS tagger, but the serious errors are sig-
nificantly reduced with the proposed method. The
effect of the fewer serious errors is shown by apply-
ing it to the well-known NLP task of text chunking.
Experimental results show that the proposed method
achieves a higher F1-score compared to other POS
taggers.
The rest of the paper is organized as follows. Sec-
tion 2 reviews the related studies on POS tagging. In
Section 3, serious and minor errors are defined, and
it is shown that both errors are observable in a gen-
eral corpus. Section 4 proposes two new loss func-
tions for discriminating the error types in POS tag-
ging. Experimental results are presented in Section
5. Finally, Section 6 draws some conclusions.
2 Related Work
The POS tagging problem has generally been solved
by machine learning methods for sequential label-
1026
Tag category POS tags
Substantive NN, NNS, NNP, NNPS, CD, PRP, PRP$
Predicate VB, VBD, VBG, VBN, VBP, VBZ, MD, JJ, JJR, JJS
Adverbial RB, RBR, RBS, RP, UH, EX, WP, WP$, WRB, CC, IN, TO
Determiner DT, PDT, WDT
Etc FW, SYM, POS, LS
Table 1: Tag categories and POS tags in Penn Tree Bank tag set
ing. In early studies, rich linguistic features and su-
pervised machine learning techniques are applied by
using annotated corpora like the Wall Street Journal
corpus (Marcus et al, 1994). For instance, Ratna-
parkhi (1996) used a maximum entropy model for
POS tagging. In this study, the features for rarely
appearing words in a corpus are expanded to im-
prove the overall performance. Following this direc-
tion, various studies have been proposed to extend
informative features for POS tagging (Toutanova
and Manning, 2000; Toutanova et al, 2003; Man-
ning, 2011). In addition, various supervised meth-
ods such as HMMs and CRFs are widely applied to
POS tagging. Lafferty et al (2001) adopted CRFs
to predict POS tags. The methods based on CRFs
not only have all the advantages of the maximum
entropy markov models but also resolve the well-
known problem of label bias. Kudo et al (2004)
modified CRFs for non-segmented languages like
Japanese which have the problem of word boundary
ambiguity.
As a result of these efforts, the performance of
state-of-the-art supervised POS tagging shows over
97% of accuracy (Toutanova et al, 2003; Gime?nez
and Ma`rquez, 2004; Tsuruoka and Tsujii, 2005;
Shen et al, 2007; Manning, 2011). Due to the high
accuracy of supervised approaches for POS tagging,
it has been deemed that there is no room to im-
prove the performance on POS tagging in supervised
manner. Thus, recent studies on POS tagging focus
on semi-supervised (Spoustova? et al, 2009; Sub-
ramanya et al, 2010; S?gaard, 2011) or unsuper-
vised approaches (Haghighi and Klein, 2006; Gold-
water and Griffiths, 2007; Johnson, 2007; Graca et
al., 2009; Berg-Kirkpatrick et al, 2010; Das and
Petrov, 2011). Most previous studies on POS tag-
ging have focused on how to extract more linguistic
features or how to adopt supervised or unsupervised
approaches based on a single evaluation measure,
accuracy. However, with a different viewpoint for
errors on POS tagging, there is still some room to
improve the performance of POS tagging for subse-
quent NLP tasks, even though the overall accuracy
can not be much improved.
In ordinary studies on POS tagging, costs of er-
rors are equally assigned. However, with respect
to the performance of NLP tasks relying on the re-
sult of POS tagging, errors should be treated differ-
ently. In the machine learning community, cost sen-
sitive learning has been studied to differentiate costs
among errors. By adopting different misclassifica-
tion costs for each type of errors, a classifier is op-
timized to achieve the lowest expected cost (Elkan,
2001; Cai and Hofmann, 2004; Zhou and Liu, 2006).
3 Error Analysis of Existing POS Tagger
The effects of POS tagging errors to subsequent
NLP tasks vary according to their type. Some errors
are serious, while others are not. In this paper, the
seriousness of tagging errors is determined by cat-
egorical structures of POS tags. Table 1 shows the
Penn tree bank POS tags and their categories. There
are five categories in this table: substantive, pred-
icate, adverbial, determiner, and etc. Serious tag-
ging errors are defined as misclassifications among
the categories, while minor errors are defined as mis-
classifications within a category. This definition fol-
lows the fact that POS tags in the same category
form similar syntax structures in a sentence (Zhao
and Marcus, 2009). That is, inter-category errors are
treated as serious errors, while intra-category errors
are treated as minor errors.
Table 2 shows the distribution of inter-category
and intra-category errors observed in section 22?
24 of the WSJ corpus (Marcus et al, 1994) that is
tagged by the Stanford Log-linear Part-Of-Speech
1027
Predicted category
Substantive Predicate Adverbial Determiner Etc
Substantive 614 479 32 10 15
Predicate 585 743 107 2 14
True category Adverbial 41 156 500 42 2
Determiner 13 7 47 24 0
Etc 23 11 3 1 0
Table 2: The distribution of tagging errors on WSJ corpus by Stanford Part-Of-Speech Tagger.
Tagger (Manning, 2011) (trained with WSJ sections
00?18). In this table, bold numbers denote inter-
category errors while all other numbers show intra-
category errors. The number of total errors is 3,471
out of 129,654 words. Among them, 1,881 errors
(54.19%) are intra-category, while 1,590 of the er-
rors (45.81%) are inter-category. If we can reduce
these inter-category errors under the cost of mini-
mally increasing intra-category errors, the tagging
results would improve in quality.
Generally in POS tagging, all tagging errors are
regarded equally in importance. However, inter-
category and intra-category errors should be distin-
guished. Since a machine learning method is opti-
mized by a loss function, inter-category errors can
be efficiently reduced if a loss function is designed
to handle both types of errors with different cost. We
propose two loss functions for POS tagging and they
are applied to multiclass Support Vector Machines.
4 Learning SVMs with Class Similarity
POS tagging has been solved as a sequential labeling
problem which assumes dependency among words.
However, by adopting sequential features such as
POS tags of previous words, the dependency can be
partially resolved. If it is assumed that words are
independent of one another, POS tagging can be re-
garded as a multiclass classification problem. One
of the best solutions for this problem is by using an
SVM.
4.1 Training SVMs with Loss Function
Assume that a training data set D =
{(x1, y1), (x2, y2), . . . , (xl, yl)} is given where
xi ? Rd is an instance vector and yi ? {+1,?1}
is its class label. SVM finds an optimal hyperplane
satisfying
xi ? w + b ? +1 for yi = +1,
xi ? w + b ? ?1 for yi = ?1,
where w and b are parameters to be estimated from
training data D. To estimate the parameters, SVMs
minimizes a hinge loss defined as
?i = Lhinge(yi, w ? xi + b)
= max{0, 1 ? yi ? (w ? xi + b)}.
With regularizer ||w||2 to control model complexity,
the optimization problem of SVMs is defined as
min
w,?
1
2
||w||2 + C
l
?
i=1
?i,
subject to
yi(xi ? w + b) ? 1? ?i, and ?i ? 0 ?i,
where C is a user parameter to penalize errors.
Crammer et al (2002) expanded the binary-class
SVM for multiclass classifications. In multiclass
SVMs, by considering all classes the optimization
of SVM is generalized as
min
w,?
1
2
?
k?K
||wk||2 + C
l
?
i=1
?i,
with constraints
(wyi ? ?(xi, yi))? (wk ? ?(xi, k)) ? 1? ?i,
?i ? 0 ?i, ?k ? K \ yi,
where ?(xi, yi) is a combined feature representation
of xi and yi, and K is the set of classes.
1028
POS
SUBSTANTIVE
PREDICATE ADVERBIAL
OTHERS
NOUN
PRONOUN
DETERMINER
DT
PDT
NNS
NN NNP
NNPS
CD
PRP PRP$
VERB
VBD
VB
VBG
VBN
VBP
VBZ
MD
ADJECT
JJR
JJ JJS
SYM
FW POS
LS
ADVERB
WH- CONJUNCTION
RBR
RB RBS
RP
UH
EX
WP
WP$
WRB
IN
CC TO
WDT
Figure 2: A tree structure of POS tags.
Since both binary and multiclass SVMs adopt a
hinge loss, the errors between classes have the same
cost. To assign different cost to different errors,
Tsochantaridis et al (2004) proposed an efficient
way to adopt arbitrary loss function, L(yi, yj) which
returns zero if yi = yj , otherwise L(yi, yj) > 0.
Then, the hinge loss ?i is re-scaled with the inverse
of the additional loss between two classes. By scal-
ing slack variables with the inverse loss, margin vi-
olation with high loss L(yi, yj) is more severely re-
stricted than that with low loss. Thus, the optimiza-
tion problem with L(yi, yj) is given as
min
w,?
1
2
?
k?K
||wk||2 + C
l
?
i=1
?i, (1)
with constraints
(wyi ? ?(xi, yi))? (wk ? ?(xi, k)) ? 1?
?i
L(yi, k)
,
?i ? 0 ?i, ?k ? K \ yi,
With the Lagrange multiplier ?, the optimization
problem in Equation (1) is easily converted to the
following dual quadratic problem.
min
?
1
2
l
?
i,j
?
ki?K\yi
?
kj?K\yj
?i,ki?j,kj ?
J(xi, yi, ki)J(xj , yj, kj)?
l
?
i
?
ki?K\yi
?i,ki ,
with constraints
? ? 0 and
?
ki?K\yi
?i,ki
L(yi, ki)
? C, ?i = 1, ? ? ? , l,
where J(xi, yi, ki) is defined as
J(xi, yi, ki) = ?(xi, yi)? ?(xi, ki).
4.2 Loss Functions for POS tagging
To design a loss function for POS tagging, this paper
adopts categorical structures of POS tags. The sim-
plest way to reflect the structure of POS tags shown
in Table 1 is to assign larger cost to inter-category
errors than to intra-category errors. Thus, the loss
function with the categorical structure in Table 1 is
defined as
Lc(yi, yj) =
?
?
?
?
?
?
?
0 if yi = yj ,
? if yi 6= yj but they belong
to the same POS category,
1 otherwise,
(2)
where 0 < ? < 1 is a constant to reduce the value of
Lc(yi, yj) when yi and yj are similar. As shown in
this equation, inter-category errors have larger cost
than intra-category errors. This loss Lc(yi, yj) is
named as category loss.
The loss function Lc(yi, yj) is designed to reflect
the categories in Table 1. However, the structure
of POS tags can be represented as a more complex
structure. Let us consider the category, predicate.
1029
?
Class NN Class NNS
Class VB
(a) Multiclass SVMs with hinge loss
Class NN Class NNS
Class VB
?
L(NN, VB)
?
L(NN, NNS)
(b) Multiclass SVMs with the proposed loss
function
Figure 3: Effect of the proposed loss function in multiclass SVMs
This category has ten POS tags, and can be further
categorized into two sub-categories: verb and ad-
ject. Figure 2 represents a categorical structure of
POS tags as a tree with five categories of POS tags
and their seven sub-categories.
To express the tree structure of Figure 2 as a loss,
another loss function Lt(yi, yj) is defined as
Lt(yi, yj) =
1
2
[Dist(Pi,j , yi) +Dist(Pi,j, yj)]? ?, (3)
where Pi,j denotes the nearest common parent of
both yi and yj , and the function Dist(Pi,j, yi) re-
turns the number of steps from Pi,j to yi. The user
parameter ? is a scaling factor of a unit loss for a
single step. This loss Lt(yi, yj) returns large value
if the distance between yi and yj is far in the tree
structure, and it is named as tree loss.
As shown in Equation (1), two proposed loss
functions adjust margin violation between classes.
They basically assign less value for intra-category
errors than inter-category errors. Thus, a classi-
fier is optimized to strictly keep inter-category er-
rors within a smaller boundary. Figure 3 shows a
simple example. In this figure, there are three POS
tags and two categories. NN (singular or mass noun)
and NNS (plural noun) belong to the same cate-
gory, while VB (verb, base form) is in another cat-
egory. Figure 3(a) shows the decision boundary of
NN based on hinge loss. As shown in this figure, a
single ? is applied for the margin violation among
all classes. Figure 3(b) also presents the decision
boundary of NN, but it is determined with the pro-
posed loss function. In this figure, the margin vio-
lation is applied differently to inter-category (NN to
VB) and intra-category (NN to NNS) errors. It re-
sults in reducing errors between NN and VB even if
the errors between NN and NNS could be slightly
increased.
5 Experiments
5.1 Experimental Setting
Experiments are performed with a well-known stan-
dard data set, the Wall Street Journal (WSJ) corpus.
The data is divided into training, development and
test sets as in (Toutanova et al, 2003; Tsuruoka and
Tsujii, 2005; Shen et al, 2007). Table 3 shows some
simple statistics of these data sets. As shown in
this table, training data contains 38,219 sentences
with 912,344 words. In the development data set,
there are 5,527 sentences with about 131,768 words,
those in the test set are 5,462 sentences and 129,654
words. The development data set is used only to se-
lect ? in Equation (2) and ? in Equation (3).
Table 4 shows the feature set for our experiments.
In this table, wi and ti denote the lexicon and POS
tag for the i-th word in a sentence respectively. We
use almost the same feature set as used in (Tsuruoka
and Tsujii, 2005) including word features, tag fea-
1030
Training Develop Test
Section 0?18 19?21 22?24
# of sentences 38,219 5,527 5,462
# of terms 912,344 131,768 129,654
Table 3: Simple statistics of experimental data
Feature Name Description
Word features wi?2, wi?1, wi, wi+1, wi+2wi?1 ? wi, wi ? wi+1
Tag features
ti?2, ti?1, ti+1, ti+2
ti?2 ? ti?1, ti+1 ? ti+2
ti?2 ? ti?1 ? ti+1, ti?1 ? ti+1 ? ti+2
ti?2 ? ti?1 ? ti+1 ? ti+2
Tag/Word
combination
ti?2?wi, ti?1 ?wi, ti+1?wi, ti+2?wi
ti?1 ? ti+1 ? wi
Prefix features prefixes of wi (up to length 9)
Suffix features suffixes of wi (up to length 9)
Lexical features
whether wi contains capitals
whether wi has a number
whether wi has a hyphen
whether wi is all capital
whether wi starts with capital and
locates at the middle of sentence
Table 4: Feature template for experiments
tures, word/tag combination features, prefix and suf-
fix features as well as lexical features. The POS tags
for words are obtained from a two-pass approach
proposed by Nakagawa et al (2001).
In the experiments, two multiclass SVMs with the
proposed loss functions are used. One is CL-MSVM
with category loss and the other is TL-MSVM with
tree loss. A linear kernel is used for both SVMs.
5.2 Experimental Results
CL-MSVM with ? = 0.4 shows the best overall per-
formance on the development data where its error
rate is as low as 2.71%. ? = 0.4 implies that the
cost of intra-category errors is set to 40% of that of
inter-category errors. The error rate of TL-MSVM
is 2.69% when ? is 0.6. ? = 0.4 and ? = 0.6 are set
in the all experiments below.
Table 5 gives the comparison with the previous
work and proposed methods on the test data. As can
be seen from this table, the best performing algo-
rithms achieve near 2.67% error rate (Shen et al,
2007; Manning, 2011). CL-MSVM and TL-MSVM
Error
(%)
# of Intra
error
# of Inter
error
(Gime?nez and Ma`rquez,
2004) 2.84
1,995
(54.11%)
1,692
(45.89%)
(Tsuruoka and Tsujii,
2005) 2.85 - -
(Shen et al, 2007) 2.67 1,856(53.52%)
1,612
(46.48%)
(Manning, 2011) 2.68 1,881(54.19%)
1,590
(45.81%)
CL-MSVM (? = 0.4) 2.69 1,916(55.01%)
1,567
(44.99%)
TL-MSVM (? = 0.6) 2.68 1,904(54.74%)
1,574
(45.26%)
Table 5: Comparison with the previous works
achieve an error rate of 2.69% and 2.68% respec-
tively. Although overall error rates of CL-MSVM
and TL-MSVM are not improved compared to the
previous state-of-the-art methods, they show reason-
able performance.
For inter-category error, CL-MSVM achieves the
best performance. The number of inter-category er-
ror is 1,567, which shows 23 errors reduction com-
pared to previous best inter-category result by (Man-
ning, 2011). TL-MSVM also makes 16 less inter-
category errors than Manning?s tagger. When com-
pared with Shen?s tagger, both CL-MSVM and TL-
MSVM make far less inter-category errors even if
their overall performance is slightly lower than that
of Shen?s tagger. However, the intra-category er-
ror rate of the proposed methods has some slight
increases. The purpose of proposed methods is to
minimize inter-category errors but preserving over-
all performance. From these results, it can be found
that the proposed methods which are trained with the
proposed loss functions do differentiate serious and
minor POS tagging errors.
5.3 Chunking Experiments
The task of chunking is to identify the non-recursive
cores for various types of phrases. In chunking, the
POS information is one of the most crucial aspects in
identifying chunks. Especially inter-category POS
errors seriously affect the performance of chunking
because they are more likely to mislead the chunk
compared to intra-category errors.
Here, chunking experiments are performed with
1031
POS tagger Accuracy (%) Precision Recall F1-score
(Shen et al, 2007) 96.08 94.03 93.75 93.89
(Manning, 2011) 96.08 94 93.8 93.9
CL-MSVM (? = 0.4) 96.13 94.1 93.9 94.00
TL-MSVM (? = 0.6) 96.12 94.1 93.9 94.00
Table 6: The experimental results for chunking
a data set provided for the CoNLL-2000 shared
task. The training data contains 8,936 sentences
with 211,727 words obtained from sections 15?18
of the WSJ. The test data consists of 2,012 sentences
and 47,377 words in section 20 of the WSJ. In order
to represent chunks, an IOB model is used, where
every word is tagged with a chunk label extended
with B (the beginning of a chunk), I (inside a chunk),
and O (outside a chunk). First, the POS informa-
tion in test data are replaced to the result of our POS
tagger. Then it is evaluated using trained chunking
model. Since CRFs (Conditional Random Fields)
has been shown near state-of-the-art performance in
text chunking (Fei Sha and Fernando Pereira, 2003;
Sun et al, 2008), we use CRF++, an open source
CRF implementation by Kudo (2005), with default
feature template and parameter settings of the pack-
age. For simplicity in the experiments, the values
of ? in Equation (2) and ? in Equation (3) are set
to be 0.4 and 0.6 respectively which are same as the
previous section.
Table 6 gives the experimental results of text
chunking according to the kinds of POS taggers in-
cluding two previous works, CL-MSVM, and TL-
MSVM. Shen?s tagger and Manning?s tagger show
nearly the same performance. They achieve an ac-
curacy of 96.08% and around 93.9 F1-score. On the
other hand, CL-MSVM achieves 96.13% accuracy
and 94.00 F1-score. The accuracy and F1-score of
TL-MSVM are 96.12% and 94.00. Both CL-MSVM
and TL-MSVM show slightly better performances
than other POS taggers. As shown in Table 5, both
CL-MSVM and TL-MSVM achieve lower accura-
cies than other methods, while their inter-category
errors are less than that of other experimental meth-
ods. Thus, the improvement of CL-MSVM and TL-
MSVM implies that, for the subsequent natural lan-
guage processing, a POS tagger should considers
different cost of tagging errors.
6 Conclusion
In this paper, we have shown that supervised POS
tagging can be improved by discriminating inter-
category errors from intra-category ones. An inter-
category error occurs by mislabeling a word with
a totally different tag, while an intra-category error
is caused by a similar POS tag. Therefore, inter-
category errors affect the performances of subse-
quent NLP tasks far more than intra-category errors.
This implies that different costs should be consid-
ered in training POS tagger according to error types.
As a solution to this problem, we have proposed
two gradient loss functions which reflect different
costs for two error types. The cost of an error type is
set according to (i) categorical difference or (ii) dis-
tance in the tree structure of POS tags. Our POS
experiment has shown that if these loss functions
are applied to multiclass SVMs, they could signif-
icantly reduce inter-category errors. Through the
text chunking experiment, it is shown that the multi-
class SVMs trained with the proposed loss functions
which generate fewer inter-category errors achieve
higher performance than existing POS taggers.
We have shown that cost sensitive learning can be
applied to POS tagging only with multiclass SVMs.
However, the proposed loss functions are general
enough to be applied to other existing POS taggers.
Most supervised machine learning techniques are
optimized on their loss functions. Therefore, the
performance of POS taggers based on supervised
machine learning techniques can be improved by ap-
plying the proposed loss functions to learn their clas-
sifiers.
Acknowledgments
This research was supported by the Converg-
ing Research Center Program funded by the
Ministry of Education, Science and Technology
(2011K000659).
References
Yasemin Altun, Mark Johnson, and Thomas Hofmann.
2003. Investigating Loss Functions and Optimiza-
tion Methods for Discriminative Learning of Label Se-
quences. In Proceedings of the Conference on Em-
pirical Methods in Natural Language Processing. pp.
145?152.
1032
Talyor Berg-Kirkpatrick, Alexandre Bouchard-Co?te?,
John DeNero, and Dan Klein. 2010. Painless Un-
supervised Learning with Features. In Proceedings
of the North American Chapter of the Association for
Computational Linguistics. pp. 582?590.
Thorsten Brants. 2000. TnT-A Statistical Part-of-Speech
Tagger. In Proceedings of the Sixth Applied Natural
Language Processing Conference. pp. 224?231.
Lijuan Cai and Thomas Hofmann. 2004. Hierarchi-
cal Document Categorization with Support Vector Ma-
chines. In Proceedings of the Thirteenth ACM Inter-
national Conference on Information and Knowledge
Management. pp. 78?87.
Koby Crammer, Yoram Singer. 2002. On the Algorith-
mic Implementation of Multiclass Kernel-based Vec-
tor Machines. Journal of Machine Learning Research,
Vol. 2. pp. 265?292.
Dipanjan Das and Slav Petrov. 2011. Unsupervised Part-
of-Speech Tagging with Bilingual Graph-Based Pro-
jections. In Proceedings of the 49th Annual Meeting
of the Association of Computational Linguistics. pp.
600?609.
Charles Elkan. 2001. The Foundations of Cost-Sensitive
Learning. In Proceedings of the Seventeenth Interna-
tional Joint Conference on Artificial Intelligence. pp.
973?978.
Jesu?s Gime?nez and Llu??s Ma`rquez. 2004. SVMTool: A
general POS tagger generator based on Support Vector
Machines. In Proceedings of the Fourth International
Conference on Language Resources and Evaluation.
pp. 43?46.
Sharon Goldwater and Thomas T. Griffiths. 2007. A
fully Bayesian Approach to Unsupervised Part-of-
Speech Tagging. In Proceedings of the 45th Annual
Meeting of the Association of Computational Linguis-
tics. pp. 744?751.
Joao Graca, Kuzman Ganchev, Ben Taskar, and Fernando
Pereira. 2009. Posterior vs Parameter Sparsity in La-
tent Variable Models. In Advances in Neural Informa-
tion Processing Systems 22. pp. 664?672.
Aria Haghighi and Dan Klein. 2006. Prototype-driven
Learning for Sequence Models. In Proceedings of the
North American Chapter of the Association for Com-
putational Linguistics. pp. 320?327.
Mark Johnson. 2007. Why doesn?t EM find good HMM
POS-taggers? In Proceedings of the 2007 Joint Meet-
ing of the Conference on Empirical Methods in Natu-
ral Language Processing and the Conference on Com-
putational Natural Language Learning. pp. 296?305.
Taku Kudo, Kaoru Yamamoto, and Yuji Matsumoto.
2004. Applying Conditional Random Fields to
Japanese Morphological Analysis. In Proceedings of
the Conference on Empirical Methods in Natural Lan-
guage Processing. pp. 230?237.
Taku Kudo. 2005. CRF++: Yet another CRF toolkit.
http://crfpp.sourceforge.net.
John Lafferty, Andrew McCallum, and Fernando Pereira.
2001. Conditional Random Fields: Probabilistic Mod-
els for Segmenting and Labeling Sequence Data. In
Proceedings of the Eighteenth International Confer-
ence on Machine Learning. pp. 282?289.
Christopher D. Manning. 2011. Part-of-Speech Tagging
from 97% to 100%: Is It Time for Some Linguistics?.
In Proceedings of the 12th International Conference
on Intelligent Text Processing and Computational Lin-
guistics. pp. 171?189.
Tetsuji Nakagawa, Taku Kudo, and Yuji Matsumoto.
2001. Unknown Word Guessing and Part-of-Speech
Tagging Using Support Vector Machines. In Proceed-
ings of the Sixth Natural Language Processing Pacific
Rim Symposium. pp. 325?331.
Adwait Ratnaparkhi. 1996. A Maximum Entropy Model
for Part-Of-Speech Tagging. In Proceedings of the
Conference on Empirical Methods in Natural Lan-
guage Processing. pp. 133?142.
Fei Sha and Fernando Pereira. 2003. Shallow Parsing
with Conditional Random Fields. In Proceedings of
the Human Language Technology and North American
Chapter of the Association for Computational Linguis-
tics. pp. 213?220.
Libin Shen, Giorgio Satta, and Aravind K. Joshi 2007.
Guided Learning for Bidirectional Sequence Classifi-
cation. In Proceedings of the 45th Annual Meeting
of the Association of Computational Linguistics. pp.
760?767.
Anders S?gaard 2011. Semisupervised condensed near-
est neighbor for part-of-speech tagging. In Proceed-
ings of the 49th Annual Meeting of the Association of
Computational Linguistics. pp. 48?52.
Drahom??ra ?johanka? Spoustova`, Jan Hajic?, Jan Raab,
and Miroslav Spousta 2009. Semi-supervised training
for the averaged perceptron POS tagger. In Proceed-
ings of the European Chapter of the Association for
Computational Linguistics. pp. 763?771.
Amarnag Subramanya, Slav Petrov and Fernando Pereira
2010. Efficient Graph-Based Semi-Supervised Learn-
ing of Structured Tagging Models. In Proceedings of
the Conference on Empirical Methods in Natural Lan-
guage Processing. pp. 167?176.
Xu Sun, Louis-Philippe Morency, Daisuke Okanohara
and Jun?ichi Tsujii 2008. Modeling Latent-Dynamic
in Shallow Parsing: A Latent Conditional Model with
Improved Inference. In Proceedings of the 22nd In-
ternational Conference on Computational Linguistics.
pp. 841?848.
Kristina Toutanova, Dan Klein, Christopher D. Man-
ning, and Yoram Singer. 2003. Feature-Rich Part-of-
Speech Tagging with a Cyclic Dependency Network.
1033
In Proceedings of the Human Language Technology
and North American Chapter of the Association for
Computational Linguistics. pp. 252?259.
Kristina Toutanova and Christopher D. Manning. 2000.
Enriching the Knowledge Sources Used in a Maxi-
mum Entropy Part-of-Speech Tagger. In Proceedings
of the Conference on Empirical Methods in Natural
Language Processing. pp. 63?70.
Ioannis Tsochantaridis, Thomas Hofmann, Thorsten
Joachims, and Yasemi Altun. 2004. Support Vec-
tor Learning for Interdependent and Structured Output
Spaces. In Proceedings of the 21st International Con-
ference on Machine Learning. pp. 104?111.
Yoshimasa Tsuruoka and Jun?ichi Tsujii. 2005. Bidi-
rectional Inference with the Easiest-First Strategy for
Tagging Sequence Data. In Proceedings of the Confer-
ence on Empirical Methods in Natural Language Pro-
cessing. pp. 467?474.
Mitchell P. Marcus, Beatrice Santorini, and Mary Ann
Marcinkiewicz. 1994. Building a Large Annotated
Corpus of English: The Penn Treebank. Computa-
tional Linguistics, Vol. 19, No.2 . pp. 313?330.
Qiuye Zhao and Mitch Marcus. 2009. A Simple Un-
supervised Learner for POS Disambiguation Rules
Given Only a Minimal Lexicon. In Proceedings of
the Conference on Empirical Methods in Natural Lan-
guage Processing. pp. 688?697.
Zhi-Hua Zhou and Xu-Ying Liu 2006. On Multi-Class
Cost-Sensitive Learning. In Proceedings of the AAAI
Conference on Artificial Intelligence. pp. 567?572.
1034
Proceedings of 52nd Annual Meeting of the Association for Computational Linguistics: System Demonstrations, pages 43?48,
Baltimore, Maryland USA, June 23-24, 2014.
c?2014 Association for Computational Linguistics
The Excitement Open Platform for Textual Inferences
Bernardo Magnini
?
, Roberto Zanoli
?
, Ido Dagan
?
, Kathrin Eichler
?
, G?unter Neumann
?
,
Tae-Gil Noh
?
, Sebastian Pado
?
, Asher Stern
?
, Omer Levy
?
?
FBK (magnini|zanoli@fbk.eu)
?
Heidelberg, Stuttgart Univ. (pado|noh@cl.uni-heidelberg.de)
?
DFKI (neumann|eichler@dfki.de)
?
Bar Ilan University (dagan|sterna3|omerlevy@cs.biu.ac.il)
Abstract
This paper presents the Excitement Open
Platform (EOP), a generic architecture and
a comprehensive implementation for tex-
tual inference in multiple languages. The
platform includes state-of-art algorithms,
a large number of knowledge resources,
and facilities for experimenting and test-
ing innovative approaches. The EOP is
distributed as an open source software.
1 Introduction
In the last decade textual entailment (Dagan et al.,
2009) has been a very active topic in Computa-
tional Linguistics, providing a unifying framework
for textual inference. Several evaluation exercises
have been organized around Recognizing Textual
Entailment (RTE) challenges and many method-
ologies, algorithms and knowledge resources have
been proposed to address the task. However, re-
search in textual entailment is still fragmented and
there is no unifying algorithmic framework nor
software architecture.
In this paper, we present the Excitement Open
Platform (EOP), a generic architecture and a com-
prehensive implementation for multilingual textual
inference which we make available to the scien-
tific and technological communities. To a large
extent, the idea is to follow the successful experi-
ence of the Moses open source platform (Koehn et
al., 2007) in Machine Translation, which has made
a substantial impact on research in that field. The
EOP is the result of a two-year coordinated work
under the international project EXCITEMENT.
1
A
consortium of four academic partners has defined
the EOP architectural specifications, implemented
the functional interfaces of the EOP components,
imported existing entailment engines into the EOP
1
http://www.excitement-project.eu
and finally designed and implemented a rich envi-
ronment to support open source distribution.
The goal of the platform is to provide function-
ality for the automatic identification of entailment
relations among texts. The EOP is based on a modu-
lar architecture with a particular focus on language-
independent algorithms. It allows developers and
users to combine linguistic pipelines, entailment al-
gorithms and linguistic resources within and across
languages with as little effort as possible. For ex-
ample, different entailment decision approaches
can share the same resources and the same sub-
components in the platform. A classification-based
algorithm can use the distance component of an
edit-distance based entailment decision approach,
and two different approaches can use the same set
of knowledge resources. Moreover, the platform
has various multilingual components for languages
like English, German and Italian. The result is an
ideal software environment for experimenting and
testing innovative approaches for textual inferences.
The EOP is distributed as an open source software
2
and its use is open both to users interested in using
inference in applications and to developers willing
to extend the current functionalities.
The paper is structured as follows. Section 2
presents the platform architecture, highlighting
how the EOP component-based approach favors
interoperability. Section 3 provides a picture of
the current population of the EOP in terms of both
entailment algorithms and knowledge resources.
Section 4 introduces expected use cases of the plat-
form. Finally, Section 5 presents the main features
of the open source package.
2 Architecture
The EOP platform takes as input two text portions,
the first called the Text (abbreviated with T), the
second called the Hypothesis (abbreviated with H).
2
http://hltfbk.github.io/
Excitement-Open-Platform/
43
Linguis'c)Analysis)Pipeline)(LAP))
Entailment)Core)(EC))
Entailment)Decision))Algorithm)(EDA))
Dynamic)and)Sta'c)Components)(Algorithms)and)Knowledge))
Linguis'c)Analysis)Components)
Decision)
1)
Raw)Data)
Figure 1: EOP architecture
The output is an entailment judgement, either ?En-
tailment? if T entails H, or ?NonEntailment? if the
relation does not hold. A confidence score for the
decision is also returned in both cases.
The EOP architecture (Pad?o et al., 2014) is based
on the concept of modularization with pluggable
and replaceable components to enable extension
and customization. The overall structure is shown
in Figure 1 and consists of two main parts. The
Linguistic Analysis Pipeline (LAP) is a series of
linguistic annotation components. The Entailment
Core (EC) performs the actual entailment recog-
nition. This separation ensures that (a) the com-
ponents in the EC only rely on linguistic analysis
in well-defined ways and (b) the LAP and EC can
be run independently of each other. Configuration
files are the principal means of configuring the EOP.
In the rest of this section we first provide an intro-
duction to the LAP, then we move to the EC and
finally describe the configuration files.
2.1 Linguistic Analysis Pipeline (LAP)
The Linguistic Analysis Pipeline is a collection of
annotation components for Natural Language Pro-
cessing (NLP) based on the Apache UIMA frame-
work.
3
Annotations range from tokenization to
part of speech tagging, chunking, Named Entity
Recognition and parsing. The adoption of UIMA
enables interoperability among components (e.g.,
substitution of one parser by another one) while
ensuring language independence. Input and output
of the components are represented in an extended
version of the DKPro type system based on UIMA
3
http://uima.apache.org/
Common Analysis Structure (CAS) (Gurevych et
al., 2007; Noh and Pad?o, 2013).
2.2 Entailment Core (EC)
The Entailment Core performs the actual entail-
ment recognition based on the preprocessed text
made by the Linguistic Analysis Pipeline. It con-
sists of one or more Entailment Decision Algo-
rithms (EDAs) and zero or more subordinate com-
ponents. An EDA takes an entailment decision
(i.e., ?entailment? or ?no entailment?) while com-
ponents provide static and dynamic information for
the EDA.
Entailment Decision Algorithms are at the top
level in the EC. They compute an entailment deci-
sion for a given Text/Hypothesis (T/H) pair, and
can use components that provide standardized al-
gorithms or knowledge resources. The EOP ships
with several EDAs (cf. Section 3).
Scoring Components accept a Text/Hypothesis
pair as an input, and return a vector of scores.
Their output can be used directly to build minimal
classifier-based EDAs forming complete RTE sys-
tems. An extended version of these components are
the Distance Components that can produce normal-
ized and unnormalized distance/similarity values
in addition to the score vector.
Annotation Components can be used to add dif-
ferent annotations to the Text/Hypothesis pairs. An
example of such a type of component is one that
produces word or phrase alignments between the
Text and the Hypothesis.
Lexical Knowledge Components describe se-
mantic relationships between words. In the
EOP, this knowledge is represented as directed
rules made up of two word?POS pairs, where
the LHS (left-hand side) entails the RHS (right-
hand side), e.g., (shooting star,Noun) =?
(meteorite,Noun). Lexical Knowledge Compo-
nents provide an interface that allows for (a) listing
all RHS for a given LHS; (b) listing all LHS for
a given RHS; and (c) checking for an entailment
relation for a given LHS?RHS pair. The interface
also wraps all major lexical knowledge sources cur-
rently used in RTE research, including manually
constructed ontologies like WordNet, and encyclo-
pedic resources like Wikipedia.
Syntactic Knowledge Components capture en-
tailment relationships between syntactic and
44
lexical-syntactic expressions. We represent such
relationships by entailment rules that link (option-
ally lexicalized) dependency tree fragments that
can contain variables as nodes. For example, the
rule fall of X =? X falls, or X sells Y to Z =?
Z buys Y from X express general paraphrasing pat-
terns at the predicate-argument level that cannot be
captured by purely lexical rules. Formally, each
syntactic rule consists of two dependency tree frag-
ments plus a mapping from the variables of the
LHS tree to the variables of the RHS tree.
4
2.3 Configuration Files
The EC components can be combined into actual
inference engines through configuration files which
contain information to build a complete inference
engine. A configuration file completely describes
an experiment. For example, it specifies the re-
sources that the selected EDA has to use and the
data set to be analysed. The LAP needed for data
set preprocessing is another parameter that can be
configured too. The platform ships with a set of
predefined configuration files accompanied by sup-
porting documentation.
3 Entailment Algorithms and Resources
This section provides a description of the Entail-
ment Algorithms and Knowledge Resources that
are distributed with the EOP.
3.1 Entailment Algorithms
The current version of the EOP platform ships with
three EDAs corresponding to three different ap-
proaches to RTE: an EDA based on transformations
between T and H, an EDA based on edit distance
algorithms, and a classification based EDA using
features extracted from T and H.
Transformation-based EDA applies a sequence
of transformations on T with the goal of making
it identical to H. If each transformation preserves
(fully or partially) the meaning of the original text,
then it can be concluded that the modified text
(which is actually the Hypothesis) can be inferred
from the original one. Consider the following sim-
ple example where the text is ?The boy was located
by the police? and the Hypothesis is ?The child
was found by the police?. Two transformations for
?boy? ? ?child? and ?located? ? ?found? do the
job.
4
Variables of the LHS may also map to null, when material
of the LHS must be present but is deleted in the inference step.
In the EOP we include a transformation based
inference system that adopts the knowledge based
transformations of Bar-Haim et al. (2007), while in-
corporating a probabilistic model to estimate trans-
formation confidences. In addition, it includes a
search algorithm which finds an optimal sequence
of transformations for any given T/H pair (Stern et
al., 2012).
Edit distance EDA involves using algorithms
casting textual entailment as the problem of map-
ping the whole content of T into the content of H.
Mappings are performed as sequences of editing
operations (i.e., insertion, deletion and substitu-
tion) on text portions needed to transform T into H,
where each edit operation has a cost associated with
it. The underlying intuition is that the probability
of an entailment relation between T and H is related
to the distance between them; see Kouylekov and
Magnini (2005) for a comprehensive experimental
study.
Classification based EDA uses a Maximum En-
tropy classifier to combine the outcomes of sev-
eral scoring functions and to learn a classification
model for recognizing entailment. The scoring
functions extract a number of features at various
linguistic levels (bag-of-words, syntactic dependen-
cies, semantic dependencies, named entities). The
approach was thoroughly described in Wang and
Neumann (2007).
3.2 Knowledge Resources
As described in Section 2.2, knowledge resources
are crucial to recognize cases where T and H use
different textual expressions (words, phrases) while
preserving entailment. The EOP platform includes
a wide range of knowledge resources, including lex-
ical and syntactic resources, where some of them
are grabbed from manual resources, like dictionar-
ies, while others are learned automatically. Many
EOP resources are inherited from pre-existing RTE
systems migrated into the EOP platform, but now
use the same interfaces, which makes them acces-
sible in a uniform fashion.
There are about two dozen lexical (e.g. word-
nets) and syntactic resources for three languages
(i.e. English, Italian and German). However,
since there is still a clear predominance of En-
glish resources, the platform includes lexical and
syntactic knowledge mining tools to bootstrap re-
sources from corpora, both for other languages and
45
EDA Accuracy / F1
Transformation-based English RTE-3 67.13%
Transformation-based English RTE-6 49.55%
Edit-Distance English RTE-3 64.38%
Edit-Distance German RTE-3 59.88%
Edit-Distance Italian RTE-3 63.50%
Classification-based English RTE-3 65.25%
Classification-based German RTE-3 63.75%
Median of RTE-3 (English) submissions 61.75%
Median of RTE-6 (English) submissions 33.72%
Table 1: EDAs results
for specific domains. Particularly, the EOP plat-
form includes a language independent tool to build
Wikipedia resources (Shnarch et al., 2009), as well
as a language-independent framework for building
distributional similarity resources like DIRT (Lin
and Pantel, 2002) and Lin similarity(Lin, 1998).
3.3 EOP Evaluation
Results for the three EDAs included in the EOP
platform are reported in Table 1. Each line rep-
resents an EDA, the language and the dataset
on which the EDA was evaluated. For brevity,
we omit here the knowledge resources used for
each EDA, even though knowledge configuration
clearly affects performance. The evaluations were
performed on RTE-3 dataset (Giampiccolo et al.,
2007), where the goal is to maximize accuracy. We
(manually) translated it to German and Italian for
evaluations: in both cases the results fix a refer-
ence for the two languages. The two new datasets
for German and English are available both as part
of the EOP distribution and independently
5
. The
transformation-based EDA was also evaluated on
RTE-6 dataset (Bentivogli et al., 2010), in which
the goal is to maximize the F1 measure.
The results of the included EDAs are higher than
median values of participated systems in RTE-3,
and they are competing with state-of-the-arts in
RTE-6 results. To the best of our knowledge, the
results of the EDAs as provided in the platform are
the highest among those available as open source
systems for the community.
4 Use Cases
We see four primary use cases for the EOP. Their
requirements were reflected in our design choices.
Use Case 1: Applied Textual Entailment. This
category covers users who are not interested in the
5
http://www.excitement-project.eu/
index.php/results
details of RTE but who are interested in an NLP
task in which textual entailment can take over part
of or all of the semantic processing, such as Ques-
tion Answering or Intelligent Tutoring. Such users
require a system that is as easy to deploy as possi-
ble, which motivates our offer of the EOP platform
as a library. They also require a system that pro-
vides good quality at a reasonable efficiency as
well as guidance as to the best choice of parame-
ters. The latter point is realized through our results
archive in the official EOP Wiki on the EOP site.
Use Case 2: Textual Entailment Development.
This category covers researchers who are interested
in Recognizing Textual Entailment itself, for exam-
ple with the goal of developing novel algorithms
for detecting entailment. In contrast to the first
category, this group need to look ?under the hood?
of the EOP platform and access the source code of
the EOP. For this reason, we have spent substantial
effort to provide the code in a well-structured and
well-documented form.
A subclass of this group is formed by researchers
who want to set up a RTE infrastructure for lan-
guages in which it does not yet exist (that is, al-
most all languages). The requirements of this class
of users comprises clearly specified procedures to
replace the Linguistic Analysis Pipeline, which are
covered in our documentation, and simple methods
to acquire knowledge resources for these languages
(assuming that the EDAs themselves are largely
language-independent). These are provided by the
language-independent knowledge acquisition tools
which we offer alongside the platform (cf. Section
3.2).
Use Case 3: Lexical Semantics Evaluation. A
third category consists of researchers whose pri-
mary interest is in (lexical) semantics.
As long as their scientific results can be phrased
in terms of semantic similarities or inference rules,
the EOP platform can be used as a simple and stan-
dardized workbench for these results that indicates
the impact that the semantic knowledge under con-
sideration has on deciding textual entailment. The
main requirement for this user group is the simple
integration of new knowledge resources into the
EOP platform. This is catered for through the defi-
nition of the generic knowledge component inter-
faces (cf. Section 2.2) and detailed documentation
on how to implement these interfaces.
46
Use Case 4: Educational Use. The fourth and
final use case is as an educational tool to support
academic courses and projects on Recognizing Tex-
tual Entailment and inference more generally. This
use case calls, in common with the others, for easy
usability and flexibility. Specifically for this use
case, we have also developed a series of tutorials
aimed at acquainting new users with the EOP plat-
form through a series of increasingly complexity
exercises that cover all areas of the EOP. We are
also posting proposals for projects to extend the
EOP on the EOP Wiki.
5 EOP Distribution
The EOP infrastructure follows state-of-the-art soft-
ware engineering standards to support both users
and developers with a flexible, scalable and easy to
use software environment. In addition to communi-
cation channels, like the mailing list and the issue
tracking system, the EOP infrastructure comprises
the following set of facilities.
Version Control System: We use GitHub,
6
a
web-based hosting service for code and documen-
tation storage, development, and issue tracking.
Web Site: The GitHub Automatic Page Genera-
tor was used to build the EOP web site and Wiki,
containing a general introduction to the software
platform, the terms of its license, mailing lists to
contact the EOP members and links to the code
releases.
Documentation: Both user and developer docu-
mentation is available from Wiki pages; the pages
are written with the GitHub Wiki Editor and hosted
on the GitHub repository. The documentation in-
cludes a Quick Start guide to start using the EOP
platform right away, and a detailed step by step
tutorial.
Results Archive: As a new feature for commu-
nity building, EOP users can, and are encouraged
to, share their results: the platform configuration
files used to produce results as well as contact infor-
mation can be saved and archived into a dedicated
page on the EOP GitHub repository. That allows
other EOP users to replicate experiments under
the same condition and/or avoid doing experiments
that have already been done.
6
https://github.com/
Build Automation Tool: The EOP has been de-
veloped as a Maven
7
multi-modules project, with
all modules sharing the same Maven standard struc-
ture, making it easier to find files in the project once
one is used to Maven.
Maven Artifacts Repository: Using a Maven
repository has a twofold goal: (i) to serve as an
internal private repository of all software libraries
used within the project (libraries are binary files
and should not be stored under version control sys-
tems, which are intended to be used with text files);
(ii) to make the produced EOP Maven artifacts
available (i.e., for users who want to use the EOP
as a library in their own code). We use Artifactory
8
repository manager to store produced artifacts.
Continuous Integration: The EOP uses Jenk-
ins
9
for Continuous Integration, a software develop-
ment practice where developers of a team integrate
their work frequently (e.g., daily).
Code Quality Tool: Ensuring the quality of the
produced software is one of the most important
aspects of software engineering. The EOP uses
tools like PMD
10
that can automatically be run
during development to help the developers check
the quality of their software.
5.1 Project Repository
The EOP Java source code is hosted on the EOP
Github repository and managed using Git. The
repository consists of three main branches: the
release branch contains the code that is supposed to
be in a production-ready state, whereas the master
branch contains the code to be incorporated into the
next release. When the source code in the master
branch reaches a stable point and is ready to be
released, all of the changes are merged back into
release. Finally, the gh-pages branch contains the
web site pages.
5.2 Licensing
The software of the platform is released under the
terms of General Public License (GPL) version
3.
11
The platform contains both components and
resources designed by the EOP developers, as well
as others that are well known and freely available
7
http://maven.apache.org/
8
http://www.jfrog.com/
9
http://jenkins-ci.org/
10
http://pmd.sourceforge.net
11
http://www.gnu.org/licenses/gpl.html
47
in the NLP research community. Additional com-
ponents and resources whose license is not compat-
ible with the EOP license have to be downloaded
and installed separately by the user.
6 Conclusion
This paper has presented the main characteristics
of Excitement Open Platform platform, a rich envi-
ronment for experimenting and evaluating textual
entailment systems. On the software side, the EOP
is a complex endeavor to integrate tools and re-
sources in Computational Linguistics, including
pipelines for three languages, three pre-existing
entailment engines, and about two dozens of lex-
ical and syntactic resources. The EOP assumes a
clear and modular separation between linguistic
annotations, entailment algorithms and knowledge
resources which are used by the algorithms. A
relevant benefit of the architectural design is that
a high level of interoperability is reached, provid-
ing a stimulating environment for new research in
textual inferences.
The EOP platform has been already tested in sev-
eral pilot research projects and educational courses,
and it is currently distributed as open source soft-
ware under the GPL-3 license. To the best of our
knowledge, the entailment systems and their con-
figurations provided in the platform are the best
systems available as open source for the commu-
nity. As for the future, we are planning several
initiatives for the promotion of the platform in the
research community, as well as its active experi-
mentation in real application scenarios.
Acknowledgments
This work was partially supported by the EC-
funded project EXCITEMENT (FP7ICT-287923).
References
Roy Bar-Haim, Ido Dagan, Iddo Greental, and Eyal
Shnarch. 2007. Semantic inference at the lexical-
syntactic level. In Proceedings of AAAI, pages 871?
876, Vancouver, BC.
Luisa Bentivogli, Peter Clark, Ido Dagan, Hoa Trang
Dang, and Danilo Giampiccolo. 2010. The Sixth
PASCAL Recognizing Textual Entailment Chal-
lenge. In Proceedings of TAC, Gaithersburg, MD.
Ido Dagan, Bill Dolan, Bernardo Magnini, and Dan
Roth. 2009. Recognizing textual entailment: Ratio-
nal, evaluation and approaches. Journal of Natural
Language Engineering, 15(4):i?xvii.
Danilo Giampiccolo, Bernardo Magnini, Ido Dagan,
and Bill Dolan. 2007. The Third PASCAL Recog-
nising Textual Entailment Challenge. In Proceed-
ings of the ACL-PASCAL Workshop on Textual En-
tailment and Paraphrasing, Prague, Czech Repub-
lic.
Iryna Gurevych, Max M?uhlh?auser, Christof M?uller,
J?urgen Steimle, Markus Weimer, and Torsten Zesch.
2007. Darmstadt knowledge processing repository
based on UIMA. In Proceedings of the First Work-
shop on Unstructured Information Management Ar-
chitecture (UIMA@GSCL 2007), T?ubingen, Ger-
many.
Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran,
Richard Zens, Chris Dyer, Ondrej Bojar, Alexandra
Constantin, and Evan Herbst. 2007. Moses: Open
Source Toolkit for Statistical Machine Translation.
In Proceedings of the ACL demo session, pages 177?
180, Prague, Czech Republic.
Milen Kouylekov and Bernardo Magnini. 2005. Rec-
ognizing textual entailment with tree edit distance al-
gorithms. In Proceedings of the First PASCAL Chal-
lenges Workshop on Recognising Textual Entailment,
pages 17?20, Southampton, UK.
Dekang Lin and Patrick Pantel. 2002. Discovery of
Inference Rules for Question Answering. Journal of
Natural Language Engineering, 7(4):343?360.
Dekang Lin. 1998. Automatic retrieval and clustering
of similar words. In Proceedings of ACL/COLING,
pages 768?774, Montr?eal, Canada.
Tae-Gil Noh and Sebastian Pad?o. 2013. Using
UIMA to structure an open platform for textual en-
tailment. In Proceedings of the 3rd Workshop on
Unstructured Information Management Architecture
(UIMA@GSCL 2013).
Sebastian Pad?o, Tae-Gil Noh, Asher Stern, Rui Wang,
and Roberto Zanoli. 2014. Design and realiza-
tion of a modular architecture for textual entailment.
Journal of Natural Language Engineering. doi:
10.1017/S1351324913000351.
Eyal Shnarch, Libby Barak, and Ido Dagan. 2009. Ex-
tracting lexical reference rules from Wikipedia. In
Proceedings of ACL-IJCNLP, pages 450?458, Sin-
gapore.
Asher Stern, Roni Stern, Ido Dagan, and Ariel Felner.
2012. Efficient search for transformation-based in-
ference. In Proceedings of ACL, pages 283?291,
Jeju Island, South Korea.
Rui Wang and G?unter Neumann. 2007. Recogniz-
ing textual entailment using a subsequence kernel
method. In Proceedings of AAAI, pages 937?945,
Vancouver, BC.
48
