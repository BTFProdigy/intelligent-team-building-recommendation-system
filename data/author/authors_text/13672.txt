Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 22?30,
Jeju, Republic of Korea, 8-14 July 2012. c?2012 Association for Computational Linguistics
Prediction of Learning Curves in Machine Translation
Prasanth Kolachina? Nicola Cancedda? Marc Dymetman? Sriram Venkatapathy?
? LTRC, IIIT-Hyderabad, Hyderabad, India
? Xerox Research Centre Europe, 6 chemin de Maupertuis, 38240 Meylan, France
Abstract
Parallel data in the domain of interest is the
key resource when training a statistical ma-
chine translation (SMT) system for a specific
purpose. Since ad-hoc manual translation can
represent a significant investment in time and
money, a prior assesment of the amount of
training data required to achieve a satisfac-
tory accuracy level can be very useful. In this
work, we show how to predict what the learn-
ing curve would look like if we were to manu-
ally translate increasing amounts of data.
We consider two scenarios, 1) Monolingual
samples in the source and target languages are
available and 2) An additional small amount
of parallel corpus is also available. We pro-
pose methods for predicting learning curves in
both these scenarios.
1 Introduction
Parallel data in the domain of interest is the key re-
source when training a statistical machine transla-
tion (SMT) system for a specific business purpose.
In many cases it is possible to allocate some budget
for manually translating a limited sample of relevant
documents, be it via professional translation services
or through increasingly fashionable crowdsourcing.
However, it is often difficult to predict how much
training data will be required to achieve satisfactory
translation accuracy, preventing sound provisional
budgetting. This prediction, or more generally the
prediction of the learning curve of an SMT system
as a function of available in-domain parallel data, is
the objective of this paper.
We consider two scenarios, representative of real-
istic situations.
1. In the first scenario (S1), the SMT developer is
given only monolingual source and target sam-
ples from the relevant domain, and a small test
parallel corpus.
?This research was carried out during an internship at Xerox
Research Centre Europe.
2. In the second scenario (S2), an additional small
seed parallel corpus is given that can be used
to train small in-domain models and measure
(with some variance) the evaluation score at a
few points on the initial portion of the learning
curve.
In both cases, the task consists in predicting an eval-
uation score (BLEU, throughout this work) on the
test corpus as a function of the size of a subset of
the source sample, assuming that we could have it
manually translated and use the resulting bilingual
corpus for training.
In this paper we provide the following contribu-
tions:
1. An extensive study across six parametric func-
tion families, empirically establishing that a
certain three-parameter power-law family is
well suited for modeling learning curves for the
Moses SMT system when the evaluation score
is BLEU. Our methodology can be easily gen-
eralized to other systems and evaluation scores
(Section 3);
2. A method for inferring learning curves based
on features computed from the resources avail-
able in scenario S1, suitable for both the sce-
narios described above (S1) and (S2) (Section
4);
3. A method for extrapolating the learning curve
from a few measurements, suitable for scenario
S2 (Section 5);
4. A method for combining the two approaches
above, achieving on S2 better prediction accu-
racy than either of the two in isolation (Section
6).
In this study we limit tuning to the mixing param-
eters of the Moses log-linear model through MERT,
keeping all meta-parameters (e.g. maximum phrase
length, maximum allowed distortion, etc.) at their
default values. One can expect further tweaking to
lead to performance improvements, but this was a
22
necessary simplification in order to execute the tests
on a sufficiently large scale.
Our experiments involve 30 distinct language pair
and domain combinations and 96 different learning
curves. They show that without any parallel data
we can predict the expected translation accuracy at
75K segments within an error of 6 BLEU points (Ta-
ble 4), while using a seed training corpus of 10K
segments narrows this error to within 1.5 points (Ta-
ble 6).
2 Related Work
Learning curves are routinely used to illustrate how
the performance of experimental methods depend
on the amount of training data used. In the SMT
area, Koehn et al (2003) used learning curves to
compare performance for various meta-parameter
settings such as maximum phrase length, while
Turchi et al (2008) extensively studied the be-
haviour of learning curves under a number of test
conditions on Spanish-English. In Birch et al
(2008), the authors examined corpus features that
contribute most to the machine translation perfor-
mance. Their results showed that the most predic-
tive features were the morphological complexity of
the languages, their linguistic relatedness and their
word-order divergence; in our work, we make use of
these features, among others, for predicting transla-
tion accuracy (Section 4).
In a Machine Learning context, Perlich et al
(2003) used learning curves for predicting maximum
performance bounds of learning algorithms and to
compare them. In Gu et al (2001), the learning
curves of two classification algorithms were mod-
elled for eight different large data sets. This work
uses similar a priori knowledge for restricting the
form of learning curves as ours (see Section 3), and
also similar empirical evaluation criteria for compar-
ing curve families with one another. While both ap-
plication and performance metric in our work are
different, we arrive at a similar conclusion that a
power law family of the form y = c ? a x?? is a
good model of the learning curves.
Learning curves are also frequently used for de-
termining empirically the number of iterations for
an incremental learning procedure.
The crucial difference in our work is that in the
previous cases, learning curves are plotted a poste-
riori i.e. once the labelled data has become avail-
able and the training has been performed, whereas
in our work the learning curve itself is the object of
the prediction. Our goal is to learn to predict what
the learning curve will be a priori without having to
label the data at all (S1), or through labelling only a
very small amount of it (S2).
In this respect, the academic field of Computa-
tional Learning Theory has a similar goal, since it
strives to identify bounds to performance measures1,
typically including a dependency on the training
sample size. We take a purely empirical approach
in this work, and obtain useful estimations for a case
like SMT, where the complexity of the mapping be-
tween the input and the output prevents tight theo-
retical analysis.
3 Selecting a parametric family of curves
The first step in our approach consists in selecting
a suitable family of shapes for the learning curves
that we want to produce in the two scenarios being
considered.
We formulate the problem as follows. For a cer-
tain bilingual test dataset d, we consider a set of
observations Od = {(x1, y1), (x2, y2)...(xn, yn)},
where yi is the performance on d (measured using
BLEU (Papineni et al, 2002)) of a translation model
trained on a parallel corpus of size xi. The corpus
size xi is measured in terms of the number of seg-
ments (sentences) present in the parallel corpus.
We consider such observations to be generated by
a regression model of the form:
yi = F (xi; ?) + i 1 ? i ? n (1)
where F is a function depending on a vector param-
eter ? which depends on d, and i is Gaussian noise
of constant variance.
Based on our prior knowledge of the problem,
we limit the search for a suitable F to families that
satisfies the following conditions- monotonically in-
creasing, concave and bounded. The first condition
just says that more training data is better. The sec-
ond condition expresses a notion of ?diminishing
returns?, namely that a given amount of additional
training data is more advantageous when added to
a small rather than to a big amount of initial data.
The last condition is related to our use of BLEU ?
which is bounded by 1 ? as a performance mea-
sure; It should be noted that some growth patterns
which are sometimes proposed, such as a logarith-
mic regime of the form y ' a + b log x, are not
1More often to a loss, which is equivalent.
23
compatible with this constraint.
We consider six possible families of functions sat-
isfying these conditions, which are listed in Table 1.
Preliminary experiments indicated that curves from
Model Formula
Exp3 y = c? e?ax+b
Exp4 y = c? e?ax
?+b
ExpP3 y = c? e(x?b)
?
Pow3 y = c? ax??
Pow4 y = c? (?ax+ b)??
ILog2 y = c? (a/ log x)
Table 1: Curve families.
the ?Power? and ?Exp? family with only two param-
eters underfitted, while those with five or more pa-
rameters led to overfitting and solution instability.
We decided to only select families with three or four
parameters.
Curve fitting technique Given a set of observa-
tions {(x1, y1), (x2, y2)...(xn, yn)} and a curve fam-
ily F (x; ?) from Table 1, we compute a best fit ??
where:
?? = argmin
?
n?
i=1
[yi ? F (xi; ?)]
2, (2)
through use of the Levenberg-Marquardt
method (More?, 1978) for non-linear regression.
For selecting a learning curve family, and for all
other experiments in this paper, we trained a large
number of systems on multiple configurations of
training sets and sample sizes, and tested each on
multiple test sets; these are listed in Table 2. All
experiments use Moses (Koehn et al, 2007). 2
Domain
Source Target # Test
Language Language sets
Europarl (Koehn, 2005)
Fr, De, Es En
4
En Fr, De, Es
KFTT (Neubig, 2011) Jp, En En, Jp 2
EMEA (Tiedemann, 2009) Da, De En 4
News (Callison-Burch et al, 2011) Cz,En,Fr,De,Es Cz,En,Fr,De,Es 3
Table 2: The translation systems used for the curve fit-
ting experiments, comprising 30 language-pair and do-
main combinations for a total of 96 learning curves.
Language codes: Cz=Czech, Da=Danish, En=English,
De=German, Fr=French, Jp=Japanese, Es=Spanish
The goodness of fit for each of the families is eval-
2The settings used in training the systems are those
described in http://www.statmt.org/wmt11/
baseline.html
uated based on their ability to i) fit over the entire set
of observations, ii) extrapolate to points beyond the
observed portion of the curve and iii) generalize well
over different datasets .
We use a recursive fitting procedure where the
curve obtained from fitting the first i points is used
to predict the observations at two points: xi+1, i.e.
the point to the immediate right of the currently ob-
served xi and xn, i.e. the largest point that has been
observed.
The following error measures quantify the good-
ness of fit of the curve families:
1. Average root mean-squared error (RMSE):
1
N
?
c?S
?
t?Tc
{
1
n
n?
i=1
[yi ? F (xi; ??)]
2
}1/2
ct
where S is the set of training datasets, Tc is the
set of test datasets for training configuration c,
?? is as defined in Eq. 2, N is the total number
of combinations of training configurations and
test datasets, and i ranges on a grid of training
subset sizes.The expressions n, xi, yi, ?? are all
local to the combination ct.
2. Average root mean squared residual at next
point X = xi+1 (NPR):
1
N
?
c?S
?
t?Tc
{
1
n? k ? 1
n?1?
i=k
[yi+1 ? F (xi+1; ??
i)]2
}1/2
ct
where ??i is obtained using only observations
up to xi in Eq. 2 and where k is the number of
parameters of the family.3
3. Average root mean squared residual at the last
point X = xn (LPR):
1
N
?
c?S
?
t?Tc
{
1
n? k ? 1
n?1?
i=k
[yn ? F (xn; ??
i)]2
}1/2
ct
Curve fitting evaluation The evaluation of the
goodness of fit for the curve families is presented
in Table 3. The average values of the root mean-
squared error and the average residuals across all the
learning curves used in our experiments are shown
in this table. The values are on the same scale as the
BLEU scores. Figure 1 shows the curve fits obtained
3We start the summation from i = k, because at least k
points are required for computing ??i.
24
Figure 1: Curve fits using different curve families on a
test dataset
for all the six families on a test dataset for English-
German language pair.
Curve Family RMSE NPR LPR
Exp3 0.0063 0.0094 0.0694
Exp4 0.0030 0.0036 0.0072
ExpP3 0.0040 0.0049 0.0145
Pow3 0.0029 0.0037 0.0091
Pow4 0.0026 0.0042 0.0102
ILog2 0.0050 0.0067 0.0146
Table 3: Evaluation of the goodness of fit for the six fam-
ilies.
Loooking at the values in Table 3, we decided to
use the Pow3 family as the best overall compromise.
While it is not systematically better than Exp4 and
Pow4, it is good overall and has the advantage of
requiring only 3 parameters.
4 Inferring a learning curve from mostly
monolingual data
In this section we address scenario S1: we have
access to a source-language monolingual collec-
tion (from which portions to be manually translated
could be sampled) and a target-language in-domain
monolingual corpus, to supplement the target side of
a parallel corpus while training a language model.
The only available parallel resource is a very small
test corpus. Our objective is to predict the evolution
of the BLEU score on the given test set as a function
of the size of a random subset of the training data
that we manually translate4. The intuition behind
this is that the source-side and target-side mono-
lingual data already convey significant information
about the difficulty of the translation task.
We proceed in the following way. We first train
models to predict the BLEU score at m anchor sizes
s1, . . . , sm, based on a set of features globally char-
acterizing the configuration of interest. We restrict
our attention to linear models:
?j = wj>?, j ? {1 . . .m}
where wj is a vector of feature weights specific to
predicting at anchor size j, and ? is a vector of size-
independent configuration features, detailed below.
We then perform inference using these models to
predict the BLEU score at each anchor, for the test
case of interest. We finally estimate the parameters
of the learning curve by weighted least squares re-
gression using the anchor predictions.
Anchor sizes can be chosen rather arbitrarily, but
must satisfy the following two constraints:
1. They must be three or more in number in order
to allow fitting the tri-parameter curve.
2. They should be spread as much as possible
along the range of sample size.
For our experiments, we take m = 3, with anchors
at 10K, 75K and 500K segments.
The feature vector? consists of the following fea-
tures:
1. General properties: number and average length
of sentences in the (source) test set.
2. Average length of tokens in the (source) test set
and in the monolingual source language corpus.
3. Lexical diversity features:
(a) type-token ratios for n-grams of order 1 to
5 in the monolingual corpus of both source
and target languages
(b) perplexity of language models of order 2
to 5 derived from the monolingual source
corpus computed on the source side of the
test corpus.
4We specify that it is a random sample as opposed to a subset
deliberately chosen to maximize learning effectiveness. While
there are clear ties between our present work and active learn-
ing, we prefer to keep these two aspects distinct at this stage,
and intend to explore this connection in future work.
25
4. Features capturing divergence between lan-
guages in the pair:
(a) average ratio of source/target sentence
lengths in the test set.
(b) ratio of type-token ratios of orders 1 to 5
in the monolingual corpus of both source
and target languages.
5. Word-order divergence: The divergence in the
word-order between the source and the target
languages can be captured using the part-of-
speech (pos) tag sequences across languages.
We use cross-entropy measure to capture sim-
ilarity between the n-gram distributions of the
pos tags in the monolingual corpora of the two
languages. The order of the n-grams ranges be-
tween n = 2, 4 . . . 12 in order to account for
long distance reordering between languages.
The pos tags for the languages are mapped to
a reduced set of twelve pos tags (Petrov et al,
2012) in order to account for differences in
tagsets used across languages.
These features capture our intuition that translation
is going to be harder if the language in the domain
is highly variable and if the source and target lan-
guages diverge more in terms of morphology and
word-order.
The weights wj are estimated from data. The
training data for fitting these linear models is ob-
tained in the following way. For each configuration
(combination of language pair and domain) c and
test set t in Table 2, a gold curve is fitted using the
selected tri-parameter power-law family using a fine
grid of corpus sizes. This is available as a byproduct
of the experiments for comparing different paramet-
ric families described in Section 3. We then compute
the value of the gold curves at the m anchor sizes:
we thus have m ?gold? vectors ?1, . . . ,?m with ac-
curate estimates of BLEU at the anchor sizes5. We
construct the design matrix ? with one column for
each feature vector ?ct corresponding to each com-
bination of training configuration c and test set t.
We then estimate weights wj using Ridge regres-
sion (L2 regularization):
wj = argmin
w
||?>w ? ?j ||2 + C||w||2 (3)
5Computing these values from the gold curve rather than di-
rectly from the observations has the advantage of smoothing the
observed values and also does not assume that observations at
the anchor sizes are always directly available.
where the regularization parameter C is chosen by
cross-validation. We also run experiments using
Lasso (L1) regularization (Tibshirani, 1994) instead
of Ridge. As baseline, we take a constant mean
model predicting, for each anchor size sj , the av-
erage of all the ?jct.
We do not assume the difficulty of predicting
BLEU at all anchor points to be the same. To allow
for this, we use (non-regularized) weighted least-
squares to fit a curve from our parametric family
through the m anchor points6. Following (Croarkin
and Tobias, 2006, Section 4.4.5.2), the anchor con-
fidence is set to be the inverse of the cross-validated
mean square residuals:
?j =
(
1
N
?
c?S
?
t?Tc
(?>ctw
\c
j ? ?jct)
2
)?1
(4)
where w\cj are the feature weights obtained by the
regression above on all training configurations ex-
cept c, ?jct is the gold value at anchor j for train-
ing/test combination c, t, and N is the total number
of such combinations7. In other words, we assign to
each anchor point a confidence inverse to the cross-
validated mean squared error of the model used to
predict it.
For a new unseen configuration with feature vec-
tor ?u, we determine the parameters ?u of the corre-
sponding learning curve as:
?u = argmin
?
?
j
?j
(
F (sj ; ?)? ?>uwj
)2
(5)
5 Extrapolating a learning curve fitted on
a small parallel corpus
Given a small ?seed? parallel corpus, the translation
system can be used to train small in-domain models
and the evaluation score can be measured at a few
initial sample sizes {(x1, y1), (x2, y2)...(xp, yp)}.
The performance of the system for these initial
points provides evidence for predicting its perfor-
mance for larger sample sizes.
In order to do so, a learning curve from the fam-
ily Pow3 is first fit through these initial points. We
6When the number of anchor points is the same as the num-
ber of parameters in the parametric family, the curve can be fit
exactly through all anchor points. However the general discus-
sion is relevant in case there are more anchor points than pa-
rameters, and also in view of the combination of inference and
extrapolation in Section 6.
7Curves on different test data for the same training configu-
ration are highly correlated and are therefore left out.
26
assume that p ? 3 for this operation to be well-
defined. The best fit ?? is computed using the same
curve fitting as in Eq. 2.
At each individual anchor size sj , the accuracy of
prediction is measured using the root mean-squared
error between the prediction of extrapolated curves
and the gold values:
(
1
N
?
c?S
?
t?Tc
[F (sj ; ??ct)? ?ctj ]
2
)1/2
(6)
where ??ct are the parameters of the curve fit using
the initial points for the combination ct.
In general, we observed that the extrapolated
curve tends to over-estimate BLEU for large sam-
ples.
6 Combining inference and extrapolation
In scenario S2, the models trained from the seed par-
allel corpus and the features used for inference (Sec-
tion 4) provide complementary information. In this
section we combine the two to see if this yields more
accurate learning curves.
For the inference method of Section 4, predictions
of models at anchor points are weighted by the in-
verse of the model empirical squared error (?j). We
extend this approach to the extrapolated curves. Let
u be a new configuration with seed parallel corpus of
size xu, and let xl be the largest point in our grid for
which xl ? xu. We first train translation models and
evaluate scores on samples of size x1, . . . , xl, fit pa-
rameters ??u through the scores, and then extrapolate
BLEU at the anchors sj : F (sj ; ??u), j ? {1, . . . ,m}.
Using the models trained for the experiments in Sec-
tion 3, we estimate the squared extrapolation error at
the anchors sj when using models trained on size up
to xl, and set the confidence in the extrapolations8
for u to its inverse:
?<lj =
(
1
N
?
c?S
?
t?Tc
(F (sj ; ?
<l
ct )? ?ctj)
2
)?1
(7)
where N , S, Tc and ?ctj have the same meaning as
in Eq. 4, and ?<lct are parameters fitted for config-
uration c and test t using only scores measured at
x1, . . . , xl. We finally estimate the parameters ?u of
8In some cases these can actually be interpolations.
the combined curve as:
?u = argmin
?
?
j
?j(F (sj ; ?)? ?
>
uwj)
2
+ ?<lj (F (sj ; ?)? F (sj ; ??u))
2
where ?u is the feature vector for u, and wj are the
weights we obtained from the regression in Eq. 3.
7 Experiments
In this section, we report the results of our experi-
ments on predicting the learning curves.
7.1 Inferred Learning Curves
Regression model 10K 75K 500K
Ridge 0.063 0.060 0.053
Lasso 0.054 0.060 0.062
Baseline 0.112 0.121 0.121
Table 4: Root mean squared error of the linear regression
models for each anchor size
In the case of inference from mostly monolingual
data, the accuracy of the predictions at each of the
anchor sizes is evaluated using root mean-squared
error over the predictions obtained in a leave-one-
out manner over the set of configurations from Ta-
ble 2. Table 4 shows these results for Ridge and
Lasso regression models at the three anchor sizes.
As an example, the model estimated using Lasso for
the 75K anchor size exhibits a root mean squared
error of 6 BLEU points. The errors we obtain are
lower than the error of the baseline consisting in tak-
ing, for each anchor size sj , the average of all the
?ctj . The Lasso regression model selected four fea-
tures from the entire feature set: i) Size of the test
set (sentences & tokens) ii) Perplexity of language
model (order 5) on the test set iii) Type-token ratio
of the target monolingual corpus . Feature correla-
tion measures such as Pearsons R showed that the
features corresponding to type-token ratios of both
source and target languages and size of test set have
a high correlation with the BLEU scores at the three
anchor sizes.
Figure 2 shows an instance of the inferred learn-
ing curves obtained using a weighted least squares
method on the predictions at the anchor sizes. Ta-
ble 7 presents the cumulative error of the inferred
learning curves with respect to the gold curves, mea-
sured as the average distance between the curves in
the range x ? [0.1K, 100K].
27
Figure 2: Inferred learning curve for English-Japanese
test set. The error-bars show the anchor confidence for
the predictions.
7.2 Extrapolated Learning Curves
As explained in Section 5, we evaluate the accuracy
of predictions from the extrapolated curve using the
root mean squared error (see Eq. 6) between the pre-
dictions of this curve and the gold values at the an-
chor points.
We conducted experiments for three sets of initial
points, 1) 1K-5K-10K, 2) 5K-10K-20K, and 3) 1K-
5K-10K-20K. For each of these sets, we show the
prediction accuracy at the anchor sizes, 10K9, 75K,
and 500K in Table 5.
Initial Points 10K 75K 500K
1K-5K-10K 0.005 0.017 0.042
5K-10K-20K 0.002 0.015 0.034
1K-5K-10K-20K 0.002 0.008 0.019
Table 5: Root mean squared error of the extrapolated
curves at the three anchor sizes
The root mean squared errors obtained by extrap-
olating the learning curve are much lower than those
obtained by prediction of translation accuracy using
the monolingual corpus only (see Table 4), which
is expected given that more direct evidence is avail-
able in the former case . In Table 5, one can also
see that the root mean squared error for the sets 1K-
5K-10K and 5K-10K-20K are quite close for anchor
9The 10K point is not an extrapolation point but lies within
the range of the set of initial points. However, it does give a
measure of the closeness of the curve fit using only the initial
points with the gold fit using all the points; the value of this gold
fit at 10K is not necessarily equal to the observation at 10K.
sizes 75K and 500K. However, when a configuration
of four initial points is used for the same amount of
?seed? parallel data, it outperforms both the config-
urations with three initial points.
7.3 Combined Learning Curves and Overall
Comparison
In Section 6, we presented a method for combin-
ing the predicted learning curves from inference and
extrapolation by using a weighted least squares ap-
proach. Table 6 reports the root mean squared error
at the three anchor sizes from the combined curves.
Initial Points Model 10K 75K 500K
1K-5K-10K
Ridge 0.005 0.015 0.038
Lasso 0.005 0.014 0.038
5K-10K-20K
Ridge 0.001 0.006 0.018
Lasso 0.001 0.006 0.018
1K-5K-10K-20K
Ridge 0.001 0.005 0.014
Lasso 0.001 0.005 0.014
Table 6: Root mean squared error of the combined curves
at the three anchor sizes
We also present an overall evaluation of all the
predicted learning curves. The evaluation metric is
the average distance between the predicted curves
and the gold curves, within the range of sample sizes
xmin=0.1K to xmax=500K segments; this metric is
defined as:
1
N
?
c?S
?
t?Tc
?xmax
x=xmin |F (x; ??ct)? F (x; ??ct)|
xmax ? xmin
where ??ct is the curve of interest, ??ct is the gold
curve, and x is in the range [xmin, xmax], with a step
size of 1. Table 7 presents the final evaluation.
Initial Points IR IL EC CR CL
1K-5K-10K 0.034 0.050 0.018 0.015 0.014
5K-10K-20K 0.036 0.048 0.011 0.010 0.009
1K-5K-10K-20K 0.032 0.049 0.008 0.007 0.007
Table 7: Average distance of different predicted
learning curves relative to the gold curve. Columns:
IR=?Inference using Ridge model?, IL=?Inference
using Lasso model?, EC=?Extrapolated curve?,
CR=?Combined curve using Ridge?, CL=?Combined
curve using Lasso?
We see that the combined curves (CR and CL)
perform slightly better than the inferred curves (IR
28
and IL) and the extrapolated curves (EC). The aver-
age distance is on the same scale as the BLEU score,
which suggests that our best curves can predict the
gold curve within 1.5 BLEU points on average (the
best result being 0.7 BLEU points when the initial
points are 1K-5K-10K-20K) which is a telling re-
sult. The distances between the predicted and the
gold curves for all the learning curves in our experi-
ments are shown in Figure 3.
Figure 3: Distances between the predicted and the gold
learning curves in our experiments across the range of
sample sizes. The dotted lines indicate the distance from
gold curve for each instance, while the bold line indi-
cates the 95th quantile of the distance between the curves.
IR=?Inference using Ridge model?, EC=?Extrapolated
curve?, CR=?Combined curve using Ridge?.
We also provide a comparison of the different pre-
dicted curves with respect to the gold curve as shown
in Figure 4.
Figure 4: Predicted curves in the three scenarios for
Czech-English test set using the Lasso model
8 Conclusion
The ability to predict the amount of parallel data
required to achieve a given level of quality is very
valuable in planning business deployments of statis-
tical machine translation; yet, we are not aware of
any rigorous proposal for addressing this need.
Here, we proposed methods that can be directly
applied to predicting learning curves in realistic sce-
narios. We identified a suitable parametric fam-
ily for modeling learning curves via an extensive
empirical comparison. We described an inference
method that requires a minimal initial investment in
the form of only a small parallel test dataset. For the
cases where a slightly larger in-domain ?seed? par-
allel corpus is available, we introduced an extrapola-
tion method and a combined method yielding high-
precision predictions: using models trained on up to
20K sentence pairs we can predict performance on a
given test set with a root mean squared error in the
order of 1 BLEU point at 75K sentence pairs, and
in the order of 2-4 BLEU points at 500K. Consider-
ing that variations in the order of 1 BLEU point on
a same test dataset can be observed simply due to
the instability of the standard MERT parameter tun-
ing algorithm (Foster and Kuhn, 2009; Clark et al,
2011), we believe our results to be close to what can
be achieved in principle. Note that by using gold
curves as labels instead of actual measures we im-
plicitly average across many rounds of MERT (14
for each curve), greatly attenuating the impact of the
instability in the optimization procedure due to ran-
domness.
For enabling this work we trained a multitude
of instances of the same phrase-based SMT sys-
tem on 30 distinct combinations of language-pair
and domain, each with fourteen distinct training
sets of increasing size and tested these instances on
multiple in-domain datasets, generating 96 learning
curves. BLEU measurements for all 96 learning
curves along with the gold curves and feature values
used for inferring the learning curves are available
as additional material to this submission.
We believe that it should be possible to use in-
sights from this paper in an active learning setting,
to select, from an available monolingual source, a
subset of a given size for manual translation, in such
a way at to yield the highest performance, and we
plan to extend our work in this direction.
29
References
Alexandra Birch, Miles Osborne, and Philipp Koehn.
2008. Predicting Success in Machine Translation.
In Proceedings of the 2008 Conference on Empirical
Methods in Natural Language Processing, pages 745?
754, Honolulu, Hawaii, October. Association for Com-
putational Linguistics.
Chris Callison-Burch, Philipp Koehn, Christof Monz,
and Omar Zaidan. 2011. Findings of the 2011 Work-
shop on Statistical Machine Translation. In Proceed-
ings of the Sixth Workshop on Statistical Machine
Translation, pages 22?64, Edinburgh, Scotland, July.
Association for Computational Linguistics.
Jonathan H. Clark, Chris Dyer, Alon Lavie, and Noah A.
Smith. 2011. Better Hypothesis Testing for Statis-
tical Machine Translation: Controlling for Optimizer
Instability. In Proceedings of the 49th Annual Meet-
ing of the Association for Computational Linguistics:
Human Language Technologies, pages 176?181, Port-
land, Oregon, USA, June. Association for Computa-
tional Linguistics.
Carroll Croarkin and Paul Tobias. 2006.
NIST/SEMATECH e-Handbook of Statistical Meth-
ods. NIST/SEMATECH, July. Available online:
http://www.itl.nist.gov/div898/handbook/.
George Foster and Roland Kuhn. 2009. Stabilizing
Minimum Error Rate Training. In Proceedings of the
Fourth Workshop on Statistical Machine Translation,
pages 242?249, Athens, Greece, March. Association
for Computational Linguistics.
Baohua Gu, Feifang Hu, and Huan Liu. 2001. Mod-
elling Classification Performance for Large Data Sets.
In Proceedings of the Second International Conference
on Advances in Web-Age Information Management,
WAIM ?01, pages 317?328, London, UK. Springer-
Verlag.
Philipp Koehn, Franz J. Och, and Daniel Marcu. 2003.
Statistical Phrase-Based Translation. In Proceedings
of Human Language Technologies: The 2003 Annual
Conference of the North American Chapter of the As-
sociation for Computational Linguistics, pages 48?54,
Edmonton, Canada, May. Association for Computa-
tional Linguistics.
Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran, Richard
Zens, Chris Dyer, Ondrej Bojar, Alexandra Con-
stantin, and Evan Herbst. 2007. Moses: Open Source
Toolkit for Statistical Machine Translation. In Pro-
ceedings of the 45th Annual Meeting of the Associ-
ation for Computational Linguistics Companion Vol-
ume Proceedings of the Demo and Poster Sessions,
pages 177?180, Prague, Czech Republic, June. Asso-
ciation for Computational Linguistics.
Philipp Koehn. 2005. Europarl: A Parallel Corpus for
Statistical Machine Translation. In Proceedings of the
10th Machine Translation Summit, Phuket, Thailand,
September.
Jorge J. More?. 1978. The Levenberg-Marquardt Algo-
rithm: Implementation and Theory. Numerical Anal-
ysis. Proceedings Biennial Conference Dundee 1977,
630:105?116.
Graham Neubig. 2011. The Kyoto Free Translation
Task. http://www.phontron.com/kftt.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a Method for Automatic Eval-
uation of Machine Translation. In Proceedings of 40th
Annual Meeting of the Association for Computational
Linguistics, pages 311?318, Philadelphia, Pennsylva-
nia, USA, July. Association for Computational Lin-
guistics.
Claudia Perlich, Foster J. Provost, and Jeffrey S. Si-
monoff. 2003. Tree Induction vs. Logistic Regres-
sion: A Learning-Curve Analysis. Journal of Machine
Learning Research, 4:211?255.
Slav Petrov, Dipanjan Das, and Ryan McDonald. 2012.
A Universal Part-of-Speech Tagset. In Proceedings
of the Eighth conference on International Language
Resources and Evaluation (LREC?12), Istanbul, May.
European Language Resources Association (ELRA).
Robert Tibshirani. 1994. Regression Shrinkage and Se-
lection Via the Lasso. Journal of the Royal Statistical
Society, Series B, 58:267?288.
Jo?rg Tiedemann. 2009. News from OPUS - A Collection
of Multilingual Parallel Corpora with Tools and Inter-
faces. In Recent Advances in Natural Language Pro-
cessing, volume V, pages 237?248. John Benjamins,
Amsterdam/Philadelphia, Borovets, Bulgaria.
Marco Turchi, Tijl De Bie, and Nello Cristianini. 2008.
Learning Performance of a Machine Translation Sys-
tem: a Statistical and Computational Analysis. In Pro-
ceedings of the Third Workshop on Statistical Machine
Translation, pages 35?43, Columbus, Ohio, June. As-
sociation for Computational Linguistics.
30
Proceedings of SSST-4, Fourth Workshop on Syntax and Structure in Statistical Translation, pages 34?42,
COLING 2010, Beijing, August 2010.
Phrase Based Decoding using a Discriminative Model
Prasanth Kolachina
LTRC, IIIT-Hyderabad
{prasanth k}@research.iiit.ac.in
Sriram Venkatapathy
LTRC, IIIT-Hyderabad
{sriram}@research.iiit.ac.in
Srinivas Bangalore
AT&T Labs-Research, NY
{srini}@research.att.com
Sudheer Kolachina
LTRC, IIIT-Hyderabad
{sudheer.kpg08}@research.iiit.ac.in
Avinesh PVS
LTRC, IIIT-Hyderabad
{avinesh}@research.iiit.ac.in
Abstract
In this paper, we present an approach to
statistical machine translation that com-
bines the power of a discriminative model
(for training a model for Machine Transla-
tion), and the standard beam-search based
decoding technique (for the translation of
an input sentence). A discriminative ap-
proach for learning lexical selection and
reordering utilizes a large set of feature
functions (thereby providing the power to
incorporate greater contextual and linguis-
tic information), which leads to an effec-
tive training of these models. This model
is then used by the standard state-of-art
Moses decoder (Koehn et al, 2007) for the
translation of an input sentence.
We conducted our experiments on
Spanish-English language pair. We used
maximum entropy model in our exper-
iments. We show that the performance
of our approach (using simple lexical
features) is comparable to that of the
state-of-art statistical MT system (Koehn
et al, 2007). When additional syntactic
features (POS tags in this paper) are used,
there is a boost in the performance which
is likely to improve when richer syntactic
features are incorporated in the model.
1 Introduction
The popular approaches to machine translation
use the generative IBM models for training
(Brown et al, 1993; Och et al, 1999). The param-
eters for these models are learnt using the stan-
dard EM Algorithm. The parameters used in these
models are extremely restrictive, that is, a simple,
small and closed set of feature functions is used
to represent the translation process. Also, these
feature functions are local and are word based. In
spite of these limitations, these models perform
very well for the task of word-alignment because
of the restricted search space. However, they per-
form poorly during decoding (or translation) be-
cause of their limitations in the context of a much
larger search space.
To handle the contextual information, phrase-
based models were introduced (Koehn et al,
2003). The phrase-based models use the word
alignment information from the IBM models and
train source-target phrase pairs for lexical se-
lection (phrase-table) and distortions of source
phrases (reordering-table). These models are still
relatively local, as the target phrases are tightly as-
sociated with their corresponding source phrases.
In contrast to a phrase-based model, a discrim-
inative model has the power to integrate much
richer contextual information into the training
model. Contextual information is extremely use-
ful in making lexical selections of higher quality,
as illustrated by the models for Global Lexical Se-
lection (Bangalore et al, 2007; Venkatapathy and
34
Bangalore, 2009).
However, the limitation of global lexical se-
lection models has been sentence construction.
In global lexical selection models, lattice con-
struction and scoring (LCS) is used for the pur-
pose of sentence construction (Bangalore et al,
2007; Venkatapathy and Bangalore, 2009). In our
work, we address this limitation of global lexi-
cal selection models by using an existing state-of-
art decoder (Koehn et al, 2007) for the purpose
of sentence construction. The translation model
used by this decoder is derived from a discrimina-
tive model, instead of the usual phrase-table and
reordering-table construction algorithms. This al-
lows us to use the effectiveness of an existing
phrase-based decoder while retaining the advan-
tages of the discriminative model. In this paper,
we compare the sentence construction accuracies
of lattice construction and scoring approach (see
section 4.1 for LCS Decoding) and the phrase-
based decoding approach (see section 4.2).
Another advantage of using a discriminative ap-
proach to construct the phrase table and the re-
ordering table is the flexibility it provides to in-
corporate linguistic knowledge in the form of ad-
ditional feature functions. In the past, factored
phrase-based approaches for Machine Translation
have allowed the use of linguistic feature func-
tions. But, they are still bound by the local-
ity of context, and definition of a fixed struc-
ture of dependencies between the factors (Koehn
and Hoang, 2007). Furthermore, factored phrase-
based approaches place constraints both on the
type and number of factors that can be incorpo-
rated into the training. In this paper, though we do
not extensively test this aspect, we show that us-
ing syntactic feature functions does improve the
performance of our approach, which is likely to
improve when much richer syntactic feature func-
tions (such as information about the parse struc-
ture) are incorporated in the model.
As the training model in a standard phrase-
based system is relatively impoverished with re-
spect to contextual/linguistic information, integra-
tion of the discriminative model in the form of
phrase-table and reordering-table with the phrase-
based decoder is highly desirable. We propose to
do this by defining sentence specific tables. For
example, given a source sentence s, the phrase-
table contains all the possible phrase-pairs condi-
tioned on the context of the source sentence s.
In this paper, the key contributions are,
1. We combine a discriminative training model
with a phrase-based decoder. We ob-
tained comparable results with the state-of-
art phrase-based decoder.
2. We evaluate the performance of the lattice
construction and scoring (LCS) approach to
decoding. We observed that even though the
lexical accuracy obtained using LCS is high,
the performance in terms of sentence con-
struction is low when compared to phrase-
based decoder.
3. We show that the incorporation of syntactic
information (POS tags) in our discriminative
model boosts the performance of translation.
In future, we plan to use richer syntactic fea-
ture functions (which the discriminative ap-
proach allows us to incorporate) to evaluate
the approach.
The paper is organized in the following sec-
tions. Section 2 presents the related work. In
section 3, we describe the training of our model.
In section 4, we present the decoding approaches
(both LCS and phrase-based decoder). We de-
scribe the data used in our experiments in section
5. Section 6 consists of the experiments and re-
sults. Finally we conclude the paper in section 7.
2 Related Work
In this section, we present approaches that are di-
rectly related to our approach. In Direct Trans-
lation Model (DTM) proposed for statistical ma-
chine translation by (Papineni et al, 1998; Och
and Ney, 2002), the authors present a discrimi-
native set-up for natural language understanding
(and MT). They use a slightly modified equation
(in comparison to IBM models) as shown in equa-
tion 1. In equation 1, they consider the translation
model from f ? e (p(e|f)), instead of the the-
oretically sound (after the application of Bayes?
rule), e ? f (p(f |e)) and use grammatical fea-
tures such as the presence of equal number of
35
verbs forms etc.
e? = argmax
e
pTM (e|f) ? pLM (e) (1)
In their model, they use generic feature func-
tions such as language model, cooccurence fea-
tures such as presence of a lexical relationship in
the lexicon. Their search algorithm limited the use
of complex features.
Direct Translation Model 2 (DTM2) (Itty-
cheriah and Roukos, 2007) expresses the phrase-
based translation task in a unified log-linear prob-
abilistic framework consisting of three compo-
nents:
1. a prior conditional distribution P0
2. a number of feature functions ?i() that cap-
ture the effects of translation and language
model
3. the weights of the features ?i that are esti-
mated using MaxEnt training (Berger et al,
1996) as shown in equation 2.
Pr(e|f) = P0(e, j|f)Z exp
?
i
?i?i(e, j, f) (2)
In the above equation, j is the skip reordering
factor for the phrase pair captured by?i() and rep-
resents the jump from the previous source word.
Z represents the per source sentence normaliza-
tion term (Hassan et al, 2009). While a uni-
form prior on the set of futures results in a max-
imum entropy model, choosing other priors out-
put a minimum divergence models. Normalized
phrase count has been used as the prior P0 in the
DTM2 model.
The following decision rule is used to obtain opti-
mal translation.
e? = argmax
e
Pr(e|f)
= argmax
e
M?
m=1
?m?m(f, e)
(3)
The DTM2 model differs from other phrase-
based SMT models in that it avoids the redun-
dancy present in other systems by extracting from
a word aligned parallel corpora a set of minimal
phrases such that no two phrases overlap with
each other (Hassan et al, 2009).
The decoding strategy in DTM2 (Ittycheriah
and Roukos, 2007) is similar to a phrase-based de-
coder except that the score of a particular transla-
tion block is obtained from the maximum entropy
model using the set of feature functions. In our
approach, instead of providing the complete scor-
ing function ourselves, we compute the parame-
ters needed by a phrase based decoder, which in
turn uses these parameters appropriately. In com-
parison with the DTM2, we also use minimal non-
overlapping blocks as the entries in the phrase ta-
ble that we generate.
Xiong et al (2006) present a phrase reordering
model under the ITG constraint using a maximum
entropy framework. They model the reordering
problem as a two-class classification problem, the
classes being straight and inverted. The model is
used to merge the phrases obtained from trans-
lating the segments in a source sentence. The
decoder used is a hierarchical decoder motivated
from the CYK parsing algorithm employing a
beam search algorithm. The maximum entropy
model is presented with features extracted from
the blocks being merged and probabilities are es-
timated using the log-linear equation shown in
(4). The work in addition to lexical features and
collocational features, uses an additional metric
called the information gain ratio (IGR) as a fea-
ture. The authors report an improvement of 4%
BLEU score over the traditional distance based
distortion model upon using the lexical features
alone.
p?(y|x) =
1
Z?(x)
exp(
?
i
?i?i(x, y)) (4)
3 Training
The training process of our approach has two
steps:
1. training the discriminative models for trans-
lation and reordering.
2. integrating the models into a phrase based
decoder.
36
The input to our training step are the word-
alignments between source and target sentences
obtained using GIZA++ (implementation of IBM,
HMM models).
3.1 Training discriminative models
We train two models, one to model the transla-
tion of source blocks, and the other to model the
reordering of source blocks. We call the transla-
tion model a ?context dependent block translation
model? for two reasons.
1. It is concerned with the translation of mini-
mal phrasal units called blocks.
2. The context of the source block is used dur-
ing its translation.
The word alignments are used to obtain the set
of possible target blocks, and are added to the tar-
get vocabulary. A target block b is a sequence of n
words that are paired with a sequence ofm source
words (Ittycheriah and Roukos, 2007). In our ap-
proach, we restrict ourselves to target blocks that
are associated with only one source word. How-
ever, this constraint can be easily relaxed.
Similarly, we call the reordering model, a ?con-
text dependent block distortion model?. For train-
ing, we use the maximum entropy software library
Llama presented in (Haffner, 2006).
3.1.1 Context Dependent Block Translation
Model
In this model, the goal is to predict a target
block given the source word and contextual and
syntactic information. Given a source word and its
lexical context, the model estimates the probabil-
ities of the presence or absence of possible target
blocks (see Figure 1).
The probabilities of the candidate target blocks
are obtained from the maximum entropy model.
The probability pei of a candidate target block ei
is estimated as given in equation 5
pei = P (true|ei, fj , C) (5)
where fj is the source word corresponding to ei
and C is its context.
Using the maximum entropy model, binary
classifiers are trained for every target block in the
context window
source word
word syntactically dependent
SOURCE SENTENCE
target word 1 prob p1
............
target word 2 prob p2
prob pKtarget word K
on source word
Figure 1: Word prediction model
vocabulary. These classifiers predict if a particu-
lar target block should be present given the source
word and its context. This model is similar to the
global lexical selection (GLS) model described in
(Bangalore et al, 2007; Venkatapathy and Banga-
lore, 2009) except that in GLS, the predicted tar-
get blocks are not associated with any particular
source word unlike the case here.
For the set of experiments in this paper, we used
a context of size 6, containing three words to the
left and three words to the right. We also used
the POS tags of words in the context window as
features. In future, we plan to use the words syn-
tactically dependent on a source word as global
context(shown in Figure 1).
3.1.2 Context Dependent Block Distortion
Model
An IBM model 3 like distortion model is
trained to predict the relative position of a source
word in the target given its context. Given a
source word and its context, the model estimates
the probability of particular relative position be-
ing an appropriate position of the source word in
the target (see Figure 2).
context window
source wordSOURCE SENTENCE
0p0
1p1 2p2 wpw?1p?1?2p?2?wp?w ...
...
word syntactically dependent
on source word
Figure 2: Position prediction model
Using a maximum entropy model similar to
37
the one described in the context dependent block
translation model, binary classifiers are trained
for every possible relative position in the target.
These classifiers output a probability distribution
over various relative positions given a source word
and its context.
The word alignments in the training corpus are
used to train the distortion model. While comput-
ing the relative position, the difference in sentence
lengths is also taken into account. Hence, the rela-
tive position of the target block located at position
i corresponding to the source word located at po-
sition j is given in equation 6.
r = round(i ? mn ? j) (6)
where, m is the length of source sentence and n is
the number of target blocks. round is the function
to compute the nearest integer of the argument. If
the source word is not aligned to any target word,
a special symbol ?INF? is used to indicate such a
case. In our model, this symbol is also a part of
the target distribution.
The features used to train this model are the
same as those used for the block translation
model. In order to use further lexical information,
we also incorporated information about the target
word for predicting the distribution. The informa-
tion about possible target words is obtained from
the ?context dependent block translation model?.
The probabilities in this case are measured as
shown in equation 7
pr,ei = P (true|r, ei, fj , C) (7)
3.2 Integration with phrase-based decoder
The discriminative models trained are sentence
specific, i.e. the context of the sentence is used
to make predictions in these models. Hence,
the phrase-based decoder is required to use in-
formation specific to a source sentence. In order
to handle this issue, a different phrase-table and
reordering-table are constructed for every input
sentence. The phrase-table and reordering-table
are constructed using the discriminative models
trained earlier.
In Moses (Koehn et al, 2007), the phrase-
table contains the source phrase, the target phrase
and the various scores associated with the phrase
pair such as phrase translation probability, lexical
weighting, inverse phrase translation probability,
etc.1
In our approach, given a source sentence, the
following steps are followed to construct the
phrase table.
1. Extract source blocks (?words? in this work)
2. Use the ?context dependent block translation
model? to predict the possible target blocks.
The set of possible blocks can be predicted
using two criteria, (1) Probability threshold,
and (2) K-best. Here, we use a threshold
value to prune the set of possible candidates
in the target vocabulary.
3. Use the prediction probabilities to assign
scores to the phrase pairs.
A similar set of steps is used to construct the
reordering-table corresponding to an input sen-
tence in the source language.
4 Decoding
4.1 Decoding with LCS Decoder
The lattice construction and scoring algorithm, as
the name suggests, consists of two steps,
1. Lattice construction
In this step, a lattice representing various
possible target sequences is obtained. In the
approach for global lexical selection (Banga-
lore et al, 2007; Venkatapathy and Banga-
lore, 2009), the input to this step is a bag of
words. The bag of words is used to construct
an initial sequence (a single path lattice). To
this sequence, deletion arcs are added to in-
corporate additional paths (at a cost) that fa-
cilitate deletion of words in the initial se-
quence. This sequence is permuted using a
permutation window in order to construct a
lattice representing possible sequences. The
permutation window is used to control the
search space.
In our experiments, we used a similar process
for sentence construction. Using the con-
text dependent block translation algorithm,
1http://www.statmt.org/moses/?n=FactoredTraining.ScorePhrases
38
we obtain a number of translation blocks for
every source word. These blocks are inter-
connected in order to obtain the initial lattice
(see figure 3).
f_(i?1) f_(i) f_(i+1)
t_(i?1,1)
t_(i?1,2)
t_(i?1,3)
t_(i,2)
t_(i,1) t_(i+1,1)
t_(i+1,2)
t_(i+1,3)
.... ...............
SOURCE SENTENCE
INTIAL TARGET LATTICE
Figure 3: Lattice Construction
To control deletions at various source posi-
tions, deletion nodes may be added to the
initial lattice. This lattice is permuted us-
ing a permutation window to construct a lat-
tice representing possible sequences. Hence,
the parameters that dictate lattice construc-
tion are, (1) Threshold for lexical selection,
(2) Using deletion arcs or not, and (3) Per-
mutation window.
2. Scoring
In this step, each of the paths in the lattice
constructed in the earlier step is scored us-
ing a language model (Haffner, 2006), which
is same as the one used in the sentence con-
struction in global lexical selection models.
It is to be noted that we do not use the dis-
criminative reordering model in this decoder,
and only the language model is used to score
various target sequences.
The path with the lowest score is considered
the best possible target sentence for the given
source sentence. Using this decoder, we con-
ducted experiments on the development set by
varying threshold values and the size of the per-
mutation window. The best parameter values ob-
tained using the development set were used for de-
coding the test corpus.
4.2 Decoding with Moses Decoder
In this approach, the phrase-table and the
reordering-table are constructed using the dis-
criminative model for every source sentence (see
section 3.2). These tables are then used by the
state-of-art Moses decoder to obtain correspond-
ing translations.
The various training and decoding parameters
of the discriminative model are computed by ex-
haustively exploring the parameter space, and cor-
respondingly measuring the output quality on the
development set. The best set of parameters were
used for decoding the sentences in the test corpus.
We modified the weights assigned by MOSES to
the translation model, reordering model and lan-
guage model. Experiments were conducted by
performing pruning on the options in the phrase
table and by using the word penalty feature in
MOSES.
We trained a language model of order 5 built on
the entire EUROPARL corpus using the SRILM
package. The method uses improved Kneser-Ney
smoothing algorithm (Chen and Goodman, 1999)
to compute sequence probabilities.
5 Dataset
The experiments were conducted on the Spanish-
English language pair. The latest version of the
Europarl corpus(version-5) was used in this work.
A small set of 200K sentences was selected from
the training set to conduct the experiments. The
test and development sets containing 2525 sen-
tences and 2051 sentences respectively were used,
without making any changes.
Corpus No. of sentences Source Target
Training 200000 59591 36886
Testing 2525 10629 8905
Development 2051 8888 7750
Monolingual 200000 n.a 36886
English (LM)
Table 1: Corpus statistics for Spanish-English cor-
pus.
6 Experiments and Results
The output of our experiments was evaluated us-
ing two metrics, (1) BLEU (Papineni et al, 2002),
and (2) Lexical Accuracy (LexAcc). Lexical ac-
curacy measures the similarity between the un-
ordered bag of words in the reference sentence
39
against the unordered bag of words in the hypoth-
esized translation. Lexical accuracy is a measure
of the fidelity of lexical transfer from the source
to the target sentence, independent of the syntax
of the target language (Venkatapathy and Banga-
lore, 2009). We report lexical accuracies to show
the performance of LCS decoding in comparison
with the baseline system.
We first present the results of the state-of-art
phrase-based model (Moses) trained on a paral-
lel corpus. We treat this as our baseline. The re-
ordering feature used is msd-bidirectional, which
allows for all possible reorderings over a speci-
fied distortion limit. The baseline accuracies are
shown in table 2.
Corpus BLEU Lexical Accuracy
Development 0.1734 0.448
Testing 0.1823 0.492
Table 2: Baseline Accuracy
We conduct two types of experiments to test our
approach.
1. Experiments using lexical features (see sec-
tion 6.1), and
2. Experiments using syntactic features (see
section 6.2).
6.1 Experiments using Lexical Features
In this section, we present results of our exper-
iments that use only lexical features. First, we
measure the translation accuracy using LCS de-
coding. On the development set, we explored the
set of decoding parameters (as described in sec-
tion 4.1) to compute the optimal parameter val-
ues. The best lexical accuracy obtained on the de-
velopment set is 0.4321 and the best BLEU score
obtained is 0.0923 at a threshold of 0.17 and a per-
mutation window size of value 3. The accuracies
corresponding to a few other parameter values are
shown in Table 3.
On the test data, we obtained a lexical accu-
racy of 0.4721 and a BLEU score of 0.1023. As
we can observe, the BLEU score obtained using
the LCS decoding technique is low when com-
pared to the BLEU score of the state-of-art sys-
tem. However, the lexical accuracy is comparable
Threshold Perm. Window LexAcc BLEU
0.16 3 0.4274 0.0914
0.17 3 0.4321 0.0923
0.18 3 0.4317 0.0918
0.16 4 0.4297 0.0912
0.17 4 0.4315 0.0915
Table 3: Lexical Accuracies of Lattice-Output us-
ing lexical features alone for various parameter
values
to the lexical accuracy of Moses. This shows that
the discriminative model provides good lexical se-
lection, while the sentence construction technique
does not perform as expected.
Next, we present the results of the Moses based
decoder that uses the discriminative model (see
section 3.2). In our experiments, we did not use
MERT training for tuning the Moses parameters.
Rather, we explore a set of possible parameter val-
ues (i.e. weights of the translation model, reorder-
ing model and the language model) to check the
performance. We show the BLEU scores obtained
on the development set using Moses decoder in
Table 4.
Reordering LM Translation BLEU
weight(d) weight(l) weight(t)
0 0.6 0.3 0.1347
0 0.6 0.6 0.1354
0.3 0.6 0.3 0.1441
0.3 0.6 0.6 0.1468
Table 4: BLEU for different weight values using
lexical features only
On the test set, we obtained a BLEU score of
0.1771. We observe that both the lexical accuracy
and the BLEU scores obtained using the discrim-
inative training model combined with the Moses
decoder are comparable to the state-of-art results.
The summary of the results obtained using three
approaches and lexical feature functions is pre-
sented in Table 5.
6.2 Experiments using Syntactic Features
In this section, we present the effect of incorpo-
rating syntactic features using our model on the
40
Approach BLEU LexAcc
State-of-art(MOSES) 0.1823 0.492
LCS decoding 0.1023 0.4721
Moses decoder trained
using a discriminative 0.1771 0.4841
model
Table 5: Translation accuracies using lexical fea-
tures for different approaches
translation accuracies. Table 6 presents the results
of our approach that uses syntactic features at dif-
ferent parameter values. Here, we can observe
that the translation accuracies (both LexAcc and
BLEU) are better than the model that uses only
lexical features.
Reordering LM Translation BLEU
weight(d) weight(l) weight(t)
0 0.6 0.3 0.1661
0 0.6 0.6 0.1724
0.3 0.6 0.3 0.1780
0.3 0.6 0.6 0.1847
Table 6: BLEU for different weight values using
syntactic features
Table 7 shows the comparative performance of
the model using syntactic as well as lexical fea-
tures against the one with lexical features func-
tions only.
Model BLEU LexAcc
Lexical features 0.1771 0.4841
Lexical+Syntactic 0.201 0.5431
features
Table 7: Comparison between translation accura-
cies from models using syntactic and lexical fea-
tures
On the test set, we obtained a BLEU score of
0.20 which is an improvement of 2.3 points over
the model that uses lexical features alone. We also
obtained an increase of 6.1% in lexical accuracy
using this model with syntactic features as com-
pared to the model using lexical features only.
7 Conclusions and Future Work
In this paper, we presented an approach to statisti-
cal machine translation that combines the power
of a discriminative model (for training a model
for Machine Translation), and the standard beam-
search based decoding technique (for the transla-
tion of an input sentence). The key contributions
are:
1. We incorporated a discriminative model in
a phrase-based decoder. We obtained com-
parable results with the state-of-art phrase-
based decoder (see section 6.1). The ad-
vantage in using our approach is that it has
the flexibility to incorporate richer contextual
and linguistic feature functions.
2. We show that the incorporation of syntac-
tic information (POS tags) in our discrimina-
tive model boosted the performance of trans-
lation. The lexical accuracy using our ap-
proach improved by 6.1% when syntactic
features were used in addition to the lexi-
cal features. Similarly, the BLEU score im-
proved by 2.3 points when syntactic features
were used compared to the model that uses
lexical features alone. The accuracies are
likely to improve when richer linguistic fea-
ture functions (that use parse structure) are
incorporated in our approach.
In future, we plan to work on:
1. Experiment with rich syntactic and structural
features (parse tree-based features) using our
approach.
2. Experiment on other language pairs such as
Arabic-English and Hindi-English.
3. Improving LCS decoding algorithm using
syntactic cues in the target (Venkatapathy
and Bangalore, 2007) such as supertags.
References
Bangalore, S., P. Haffner, and S. Kanthak. 2007. Statistical machine transla-
tion through global lexical selection and sentence reconstruction. In An-
nual Meeting-Association for Computational Linguistics, volume 45, page
152.
Berger, A.L., V.J.D. Pietra, and S.A.D. Pietra. 1996. A maximum en-
tropy approach to natural language processing. Computational linguistics,
22(1):39?71.
41
Brown, P.F., V.J.D. Pietra, S.A.D. Pietra, and R.L. Mercer. 1993. The mathe-
matics of statistical machine translation: Parameter estimation. Computa-
tional linguistics, 19(2):263?311.
Chen, S.F. and J. Goodman. 1999. An empirical study of smoothing
techniques for language modeling. Computer Speech and Language,
13(4):359?394.
Haffner, P. 2006. Scaling large margin classifiers for spoken language under-
standing. Speech Communication, 48(3-4):239?261.
Hassan, H., K. Sima?an, and A. Way. 2009. A syntactified direct translation
model with linear-time decoding. In Proceedings of the 2009 Conference
on Empirical Methods in Natural Language Processing: Volume 3-Volume
3, pages 1182?1191. Association for Computational Linguistics.
Ittycheriah, A. and S. Roukos. 2007. Direct translation model 2. In Proceed-
ings of NAACL HLT, pages 57?64.
Koehn, P. and H. Hoang. 2007. Factored translation models. In Pro-
ceedings of the 2007 Joint Conference on Empirical Methods in Natu-
ral Language Processing and Computational Natural Language Learning
(EMNLP-CoNLL), pages 868?876.
Koehn, P., F.J. Och, and D. Marcu. 2003. Statistical phrase-based transla-
tion. In Proceedings of the 2003 Conference of the North American Chap-
ter of the Association for Computational Linguistics on Human Language
Technology-Volume 1, pages 48?54. Association for Computational Lin-
guistics.
Koehn, P., H. Hoang, A. Birch, C. Callison-Burch, M. Federico, N. Bertoldi,
B. Cowan, W. Shen, C. Moran, R. Zens, et al 2007. Moses: Open source
toolkit for statistical machine translation. In Annual meeting-association
for computational linguistics, volume 45, page 2.
Och, F.J. and H. Ney. 2002. Discriminative training and maximum entropy
models for statistical machine translation. In Proceedings of ACL, vol-
ume 2, pages 295?302.
Och, F.J., C. Tillmann, H. Ney, et al 1999. Improved alignment models
for statistical machine translation. In Proc. of the Joint SIGDAT Conf.
on Empirical Methods in Natural Language Processing and Very Large
Corpora, pages 20?28.
Papineni, KA, S. Roukos, and RT Ward. 1998. Maximum likelihood and
discriminative training of directtranslation models. In Acoustics, Speech
and Signal Processing, 1998. Proceedings of the 1998 IEEE International
Conference on, volume 1.
Papineni, K., S. Roukos, T. Ward, and W.J. Zhu. 2002. BLEU: a method for
automatic evaluation of machine translation. In Proceedings of the 40th
annual meeting on association for computational linguistics, pages 311?
318. Association for Computational Linguistics.
Venkatapathy, S. and S. Bangalore. 2007. Three models for discriminative
machine translation using Global Lexical Selection and Sentence Recon-
struction. In Proceedings of the NAACL-HLT 2007/AMTA Workshop on
Syntax and Structure in Statistical Translation, pages 96?102. Association
for Computational Linguistics.
Venkatapathy, Sriram and Srinivas Bangalore. 2009. Discriminative Machine
Translation Using Global Lexical Selection. ACM Transactions on Asian
Language Information Processing, 8(2).
Xiong, D., Q. Liu, and S. Lin. 2006. Maximum entropy based phrase reorder-
ing model for statistical machine translation. In Proceedings of the 21st
International Conference on Computational Linguistics and the 44th an-
nual meeting of the Association for Computational Linguistics, page 528.
Association for Computational Linguistics.
42
