Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 1104?1112,
Baltimore, Maryland, USA, June 23-25 2014.
c?2014 Association for Computational Linguistics
Active Learning with Efficient Feature Weighting Methods
for Improving Data Quality and Classification Accuracy
Justin Martineau
1
, Lu Chen
2?
, Doreen Cheng
3
, and Amit Sheth
4
1,3
Samsung Research America, Silicon Valley
1,3
75 W Plumeria Dr. San Jose, CA 95134 USA
2,4
Kno.e.sis Center, Wright State University
2,4
3640 Colonel Glenn Hwy. Fairborn, OH 45435 USA
1,3
{justin.m, doreen.c}@samsung.com
2,4
{chen, amit}@knoesis.org
Abstract
Many machine learning datasets are noisy
with a substantial number of mislabeled
instances. This noise yields sub-optimal
classification performance. In this paper
we study a large, low quality annotated
dataset, created quickly and cheaply us-
ing Amazon Mechanical Turk to crowd-
source annotations. We describe compu-
tationally cheap feature weighting tech-
niques and a novel non-linear distribution
spreading algorithm that can be used to it-
eratively and interactively correcting mis-
labeled instances to significantly improve
annotation quality at low cost. Eight dif-
ferent emotion extraction experiments on
Twitter data demonstrate that our approach
is just as effective as more computation-
ally expensive techniques. Our techniques
save a considerable amount of time.
1 Introduction
Supervised classification algorithms require anno-
tated data to teach the machine, by example, how
to perform a specific task. There are generally two
ways to collect annotations of a dataset: through
a few expert annotators, or through crowdsourc-
ing services (e.g., Amazon?s Mechanical Turk).
High-quality annotations can be produced by ex-
pert annotators, but the process is usually slow
and costly. The latter option is appealing since it
creates a large annotated dataset at low cost. In
recent years, there have been an increasing num-
ber of studies (Su et al, 2007; Kittur et al, 2008;
Sheng et al, 2008; Snow et al, 2008; Callison-
Burch, 2009) using crowdsourcing for data anno-
tation. However, because annotators that are re-
cruited this way may lack expertise and motiva-
tion, the annotations tend to be more noisy and
?
This author?s research was done during an internship
with Samsung Research America.
unreliable, which significantly reduces the perfor-
mance of the classification model. This is a chal-
lenge faced by many real world applications ?
given a large, quickly and cheaply created, low
quality annotated dataset, how can one improve
its quality and learn an accurate classifier from
it?
Re-annotating the whole dataset is too expen-
sive. To reduce the annotation effort, it is desirable
to have an algorithm that selects the most likely
mislabeled examples first for re-labeling. The pro-
cess of selecting and re-labeling data points can be
conducted with multiple rounds to iteratively im-
prove the data quality. This is similar to the strat-
egy of active learning. The basic idea of active
learning is to learn an accurate classifier using less
training data. An active learner uses a small set of
labeled data to iteratively select the most informa-
tive instances from a large pool of unlabeled data
for human annotators to label (Settles, 2010). In
this work, we borrow the idea of active learning to
interactively and iteratively correct labeling errors.
The crucial step is to effectively and efficiently
select the most likely mislabeled instances. An in-
tuitive idea is to design algorithms that classify
the data points and rank them according to the
decreasing confidence scores of their labels. The
data points with the highest confidence scores but
conflicting preliminary labels are most likely mis-
labeled. The algorithm should be computationally
cheap as well as accurate, so it fits well with ac-
tive learning and other problems that require fre-
quent iterations on large datasets. Specifically,
we propose a novel non-linear distribution spread-
ing algorithm, which first uses Delta IDF tech-
nique (Martineau and Finin, 2009) to weight fea-
tures, and then leverages the distribution of Delta
IDF scores of a feature across different classes
to efficiently recognize discriminative features for
the classification task in the presence of misla-
beled data. The idea is that some effective fea-
1104
tures may be subdued due to label noise, and the
proposed techniques are capable of counteracting
such effect, so that the performance of classifica-
tion algorithms could be less affected by the noise.
With the proposed algorithm, the active learner be-
comes more accurate and resistant to label noise,
thus the mislabeled data points can be more easily
and accurately identified.
We consider emotion analysis as an interest-
ing and challenging problem domain of this study,
and conduct comprehensive experiments on Twit-
ter data. We employ Amazon?s Mechanical Turk
(AMT) to label the emotions of Twitter data, and
apply the proposed methods to the AMT dataset
with the goals of improving the annotation quality
at low cost, as well as learning accurate emotion
classifiers. Extensive experiments show that, the
proposed techniques are as effective as more com-
putational expensive techniques (e.g, Support Vec-
tor Machines) but require significantly less time
for training/running, which makes it well-suited
for active learning.
2 Related Work
Research on handling noisy dataset of mislabeled
instances has focused on three major groups of
techniques: (1) noise tolerance, (2) noise elimi-
nation, and (3) noise correction.
Noise tolerance techniques aim to improve
the learning algorithm itself to avoid over-fitting
caused by mislabeled instances in the training
phase, so that the constructed classifier becomes
more noise-tolerant. Decision tree (Mingers,
1989; Vannoorenberghe and Denoeux, 2002) and
boosting (Jiang, 2001; Kalaia and Servediob,
2005; Karmaker and Kwek, 2006) are two learn-
ing algorithms that have been investigated in many
studies. Mingers (1989) explores pruning methods
for identifying and removing unreliable branches
from a decision tree to reduce the influence of
noise. Vannoorenberghe and Denoeux (2002) pro-
pose a method based on belief decision trees to
handle uncertain labels in the training set. Jiang
(2001) studies some theoretical aspects of regres-
sion and classification boosting algorithms in deal-
ing with noisy data. Kalaia and Servediob (2005)
present a boosting algorithm which can achieve
arbitrarily high accuracy in the presence of data
noise. Karmaker and Kwek (2006) propose a mod-
ified AdaBoost algorithm ? ORBoost, which min-
imizes the impact of outliers and becomes more
tolerant to class label noise. One of the main dis-
advantages of noise tolerance techniques is that
they are learning algorithm-dependent. In con-
trast, noise elimination/correction approaches are
more generic and can be more easily applied to
various problems.
A large number of studies have explored noise
elimination techniques (Brodley and Friedl, 1999;
Verbaeten and Van Assche, 2003; Zhu et al, 2003;
Muhlenbach et al, 2004; Guan et al, 2011), which
identifies and removes mislabeled examples from
the dataset as a pre-processing step before build-
ing classifiers. One widely used approach (Brod-
ley and Friedl, 1999; Verbaeten and Van Assche,
2003) is to create an ensemble classifier that com-
bines the outputs of multiple classifiers by either
majority vote or consensus, and an instance is
tagged as mislabeled and removed from the train-
ing set if it is classified into a different class than
its training label by the ensemble classifier. The
similar approach is adopted by Guan et al (2011)
and they further demonstrate that its performance
can be significantly improved by utilizing unla-
beled data. To deal with the noise in large or
distributed datasets, Zhu et al (2003) propose a
partition-based approach, which constructs clas-
sification rules from each subset of the dataset,
and then evaluates each instance using these rules.
Two noise identification schemes, majority and
non-objection, are used to combine the decision
from each set of rules to decide whether an in-
stance is mislabeled. Muhlenbach et al (2004)
propose a different approach, which represents
the proximity between instances in a geometrical
neighborhood graph, and an instance is consid-
ered suspect if in its neighborhood the proportion
of examples of the same class is not significantly
greater than in the dataset itself.
Removing mislabeled instances has been
demonstrated to be effective in increasing the
classification accuracy in prior studies, but there
are also some major drawbacks. For example,
useful information can be removed with noise
elimination, since annotation errors are likely to
occur on ambiguous instances that are potentially
valuable for learning algorithms. In addition,
when the noise ratio is high, there may not be
adequate amount of data remaining for building
an accurate classifier. The proposed approach
does not suffer these limitations.
Instead of eliminating the mislabeled examples
1105
from training data, some researchers (Zeng and
Martinez, 2001; Rebbapragada et al, 2012; Lax-
man et al, 2013) propose to correct labeling er-
rors either with or without consulting human ex-
perts. Zeng and Martinez (2001) present an ap-
proach based on backpropagation neural networks
to automatically correct the mislabeled data. Lax-
man et al (2012) propose an algorithm which first
trains individual SVM classifiers on several small,
class-balanced, random subsets of the dataset, and
then reclassifies each training instance using a ma-
jority vote of these individual classifiers. How-
ever, the automatic correction may introduce new
noise to the dataset by mistakenly changing a cor-
rect label to a wrong one.
In many scenarios, it is worth the effort and
cost to fix the labeling errors by human experts,
in order to obtain a high quality dataset that can
be reused by the community. Rebbapragada et al
(2012) propose a solution called Active Label Cor-
rection (ALC) which iteratively presents the ex-
perts with small sets of suspected mislabeled in-
stances at each round. Our work employs a sim-
ilar framework that uses active learning for data
cleaning.
In Active Learning (Settles, 2010) a small set of
labeled data is used to find documents that should
be annotated from a large pool of unlabeled doc-
uments. Many different strategies have been used
to select the best points to annotate. These strate-
gies can be generally divided into two groups: (1)
selecting points in poorly sampled regions, and (2)
selecting points that will have the greatest impact
on models that were constructed using the dataset.
Active learning for data cleaning differs from
traditional active learning because the data already
has low quality labels. It uses the difference be-
tween the low quality label for each data point and
a prediction of the label using supervised machine
learning models built upon the low quality labels.
Unlike the work in (Rebbapragada et al, 2012),
this paper focuses on developing algorithms that
can enhance the ability of active learner on identi-
fying labeling errors, which we consider as a key
challenge of this approach but ALC has not ad-
dressed.
3 An Active Learning Framework for
Label Correction
Let
?
D = {(x
1
, y
1
), ..., (x
n
, y
n
)} be a dataset of
binary labeled instances, where the instance x
i
be-
longs to domain X , and its label y
i
? {?1,+1}.
?
D contains an unknown number of mislabeled
data points. The problem is to obtain a high-
quality dataset D by fixing labeling errors in
?
D,
and learn an accurate classifier C from it.
Algorithm 1 illustrates an active learning ap-
proach to the problem. This algorithm takes the
noisy dataset
?
D as input. The training set T is
initialized with the data in
?
D and then updated
each round with new labels generated during re-
annotation. Data sets S
r
and S are used to main-
tain the instances that have been selected for re-
annotation in the whole process and in the current
iteration, respectively.
Data: noisy data
?
D
Result: cleaned data D, classifier C
Initialize training set T =
?
D ;
Initialize re-annotated data sets S
r
= ?;
S = ? ;
repeat
Train classifier C using T ;
Use C to select a set S of m suspected
mislabeled instances from T ;
Experts re-annotate the instances in
S ? (S
r
? S) ;
Update T with the new labels in S ;
S
r
= S
r
? S; S = ? ;
until for I iterations;
D = T ;
Algorithm 1: Active Learning Approach for La-
bel Correction
In each iteration, the algorithm trains classifiers
using the training data in T . In practice, we ap-
ply k-fold cross-validation. We partition T into k
subsets, and each time we keep a different subset
as testing data and train a classifier using the other
k ? 1 subsets of data. This process is repeated k
times so that we get a classifier for each of the k
subsets. The goal is to use the classifiers to ef-
ficiently and accurately seek out the most likely
mislabeled instances from T for expert annotators
to examine and re-annotate. When applying a clas-
sifier to classify the instances in the correspond-
ing data subset, we get the probability about how
likely one instance belongs to a class. The top m
instances with the highest probabilities belonging
to some class but conflicting preliminary labels are
selected as the most likely errors for annotators to
fix. During the re-annotation process we keep the
old labels hidden to prevent that information from
1106
biasing annotators? decisions. Similarly, we keep
the probability scores hidden while annotating.
This process is done with multiple iterations of
training, sampling, and re-annotating. We main-
tain the re-annotated instances in S
r
to avoid an-
notating the same instance multiple times. After
each round of annotation, we compare the old la-
bels to the new labels to measure the degree of im-
pact this process is having on the dataset. We stop
re-annotating on the Ith round after we decide that
the reward for an additional round of annotation is
too low to justify.
4 Feature Weighting Methods
Building the classifier C that allows the most
likely mislabeled instances to be selected and an-
notated is the essence of the active learning ap-
proach. There are two main goals of developing
this classifier: (1) accurately predicting the labels
of data points and ranking them based on predic-
tion confidence, so that the most likely errors can
be effectively identified; (2) requiring less time on
training, so that the saved time can be spent on cor-
recting more labeling errors. Thus we aim to build
a classifier that is both accurate and time efficient.
Labeling noise affects the classification accu-
racy. One possible reason is that some effective
features that should be given high weights are in-
hibited in the training phase due to the labeling
errors. For example, emoticon ?:D? is a good in-
dicator for emotion happy, however, if by mis-
take many instances containing this emoticon are
not correctly labeled as happy, this class-specific
feature would be underestimated during training.
Following this idea, we develop computationally
cheap feature weighting techniques to counteract
such effect by boosting the weight of discrimina-
tive features, so that they would not be subdued
and the instances with such features would have
higher chance to be correctly classified.
Specifically, we propose a non-linear distribu-
tion spreading algorithm for feature weighting.
This algorithm first utilizes Delta IDF to weigh the
features, and then non-linearly spreads out the dis-
tribution of features? Delta IDF scores to exagger-
ate the weight of discriminative features. We first
introduce Delta-IDF technique, and then describe
our algorithm of distribution spreading. Since we
focus on n-gram features, we use the words feature
and term interchangeably in this paper.
4.1 Delta IDF Weighting Scheme
Different from the commonly used TF (term fre-
quency) or TF.IDF (term frequency.inverse doc-
ument frequency) weighting schemes, Delta IDF
treats the positive and negative training instances
as two separate corpora, and weighs the terms by
how biased they are to one corpus. The more bi-
ased a term is to one class, the higher (absolute
value of) weight it will get. Delta IDF boosts the
importance of terms that tend to be class-specific
in the dataset, since they are usually effective fea-
tures in distinguishing one class from another.
Each training instance (e.g., a document)
is represented as a feature vector: x
i
=
(w
1,i
, ..., w
|V |,i
), where each dimension in the vec-
tor corresponds to a n-gram term in vocabulary
V = {t
1
, ..., t
|V |
}, |V | is the number of unique
terms, and w
j,i
(1 ? j ? |V |) is the weight of
term t
j
in instance x
i
. Delta IDF (Martineau and
Finin, 2009) assigns score ? idf
j
to term t
j
in V
as:
? idf
j
= log
(N + 1)(P
j
+ 1)
(N
j
+ 1)(P + 1)
(1)
where P (or N ) is the number of positively (or
negatively) labeled training instances, P
j
(or N
j
)
is the number of positively (or negatively) labeled
training instances with term t
j
. Simple add-one
smoothing is used to smooth low frequency terms
and prevent dividing by zero when a term appears
in only one corpus. We calculate the Delta IDF
score of every term in V , and get the Delta IDF
weight vector ? = (? idf
1
, ...,? idf
|V |
) for all
terms.
When the dataset is imblanced, to avoid build-
ing a biased model, we down sample the majority
class before calculating the Delta IDF score and
then use the a bias balancing procedure to balance
the Delta IDF weight vector. This procedure first
divides the Delta IDF weight vector to two vec-
tors, one of which contains all the features with
positive scores, and the other of which contains all
the features with negative scores. It then applies
L2 normalization to each of the two vectors, and
add them together to create the final vector.
For each instance, we can calculate the
TF.Delta-IDF score as its weight:
w
j,i
= tf
j,i
?? idf
j
(2)
where tf
j,i
is the number of times term t
j
occurs
in document x
i
, and ? idf
j
is the Delta IDF score
of t
j
.
1107
4.2 A Non-linear Distribution Spreading
Algorithm
Delta IDF technique boosts the weight of features
with strong discriminative power. The model?s
ability to discriminate at the feature level can be
further enhanced by leveraging the distribution of
feature weights across multiple classes, e.g., mul-
tiple emotion categories funny, happy, sad, ex-
citing, boring, etc.. The distinction of multiple
classes can be used to further force feature bias
scores apart to improve the identification of class-
specific features in the presence of labeling errors.
Let L be a set of target classes, and |L| be the
number of classes in L. For each class l ? L,
we create a binary labeled dataset
?
D
l
. Let V
l
be the vocabulary of dataset
?
D
l
, V be the vo-
cabulary of all datasets, and |V | is the number of
unique terms in V . Using Formula (1) and dataset
?
D
l
, we get the Delta IDF weight vector for each
class l: ?
l
= (? idf
l
1
, ...,? idf
l
|V |
). Note that
? idf
l
j
= 0 for any term t
j
? V ? V
l
. For a
class u, we calculate the spreading score spread
u
j
of each feature t
j
? V using a non-linear distri-
bution spreading formula as following (where s is
the configurable spread parameter):
spread
u
j
= ? idf
u
j
? (3)
?
l?L?u
|? idf
u
j
?? idf
l
j
|
s
|L| ? 1
For any term t
j
? V , we can get its Delta IDF
score on a class l. The distribution of Delta IDF
scores of t
j
on all classes in L is represented as
?
j
= {? idf
1
j
, ...,? idf
|L|
j
}.
The mechanism of Formula (3) is to non-
linearly spread out the distribution, so that the
importance of class-specific features can be fur-
ther boosted to counteract the effect of noisy la-
bels. Specifically, according to Formula (3), a
high (absolute value of) spread score indicates that
the Delta IDF score of that term on that class is
high and deviates greatly from the scores on other
classes. In other words, our algorithm assigns high
spread score (absolute value) to a term on a class
for which the term has strong discriminative power
and very specific to that class compared with to
other classes. When the dataset is imbalanced, we
apply the similar bias balancing procedure as de-
scribed in Section 4.1 to the spreading model.
While these feature weighting models can be
used to score and rank instances for data clean-
ing, better classification and regression models can
be built by using the feature weights generated by
these models as a pre-weight on the data points for
other machine learning algorithms.
5 Experiments
We conduct experiments on a Twitter dataset that
contains tweets about TV shows and movies. The
goal is to extract consumers? emotional reactions
to multimedia content, which has broad commer-
cial applications including targeted advertising,
intelligent search, and recommendation. To create
the dataset, we collected 2 billion unique tweets
using Twitter API queries for a list of known TV
shows and movies on IMDB. Spam tweets were
filtered out using a set of heuristics and manually
crafted rules. From the set of 2 billion tweets we
randomly selected a small subset of 100K tweets
about the 60 most highly mentioned TV shows
and movies in the dataset. Tweets were randomly
sampled for each show using the round robin algo-
rithm. Duplicates were not allowed. This samples
an equal number of tweets for each show. We then
sent these tweets to Amazon Mechanical Turk for
annotation.
We defined our own set of emotions to anno-
tate. The widely accepted emotion taxonomies, in-
cluding Ekmans Basic Emotions (Ekman, 1999),
Russells Circumplex model (Russell and Barrett,
1999), and Plutchiks emotion wheel (Plutchik,
2001), did not fit well for TV shows and Movies.
For example, the emotion expressed by laughter
is a very important emotion for TV shows and
movies, but this emotion is not covered by the tax-
onomies listed above. After browsing through the
raw dataset, reviewing the literature on emotion
analysis, and considering the TV and movie prob-
lem domain, we decided to focus on eight emo-
tions: funny, happy, sad, exciting, boring, angry,
fear, and heartwarming.
Emotion annotation is a non-trivial task that
is typically time-consuming, expensive and error-
prone. This task is difficult because: (1) There are
multiple emotions to annotate. In this work, we
annotate eight different emotions. (2) Emotion ex-
pressions could be subtle and ambiguous and thus
are easy to miss when labeling quickly. (3) The
dataset is very imbalanced, which increases the
problem of confirmation bias. As minority classes,
emotional tweets can be easily missed because the
last X tweets are all not emotional, and the annota-
1108
Funny Happy Sad Exciting Boring Angry Fear Heartwarming
# Pos. 1,324 405 618 313 209 92 164 24
# Neg. 88,782 95,639 84,212 79,902 82,443 57,326 46,746 15,857
# Total 90,106 96,044 84,830 80,215 82,652 57,418 46,910 15,881
Table 1: Amazon Mechanical Turk annotation label counts.
Funny Happy Sad Exciting Boring Angry Fear Heartwarming
# Pos. 1,781 4,847 788 1,613 216 763 285 326
# Neg. 88,277 91,075 84,031 78,573 82,416 56,584 46,622 15,542
# Total
1
90,058 95,922 84,819 80,186 82,632 57,347 46,907 15,868
Table 2: Ground truth annotation label counts for each emotion.
2
tors do not expect the next one to be either. Due to
these reasons, there is a lack of sufficient and high
quality labeled data for emotion research. Some
researchers have studied harnessing Twitter hash-
tags to automatically create an emotion annotated
dataset (Wang et al, 2012).
In order to evaluate our approach in real world
scenarios, instead of creating a high quality anno-
tated dataset and then introducing artificial noise,
we followed the common practice of crowdsouc-
ing, and collected emotion annotations through
Amazon Mechanical Turk (AMT). This AMT an-
notated dataset was used as the low quality dataset
?
D in our evaluation. After that, the same dataset
was annotated independently by a group of expert
annotators to create the ground truth. We evaluate
the proposed approach on two factors, the effec-
tiveness of the models for emotion classification,
and the improvement of annotation quality pro-
vided by the active learning procedure. We first
describe the AMT annotation and ground truth an-
notation, and then discuss the baselines and exper-
imental results.
Amazon Mechanical Turk Annotation: we
posted the set of 100K tweets to the workers on
AMT for emotion annotation. We defined a set
of annotation guidelines, which specified rules and
examples to help annotators determine when to tag
a tweet with an emotion. We applied substantial
quality control to our AMT workers to improve the
initial quality of annotation following the common
practice of crowdsourcing. Each tweet was anno-
tated by at least two workers. We used a series of
tests to identify bad workers. These tests include
(1) identifying workers with poor pairwise agree-
ment, (2) identifying workers with poor perfor-
mance on English language annotation, (3) iden-
tifying workers that were annotating at unrealis-
tic speeds, (4) identifying workers with near ran-
dom annotation distributions, and (5) identifying
workers that annotate each tweet for a given TV
show the same (or nearly the same) way. We man-
ually inspected any worker with low performance
on any of these tests before we made a final deci-
sion about using any of their annotations.
For further quality control, we also gathered ad-
ditional annotations from additional workers for
tweets where only one out of two workers iden-
tified an emotion. After these quality control steps
we defined minimum emotion annotation thresh-
olds to determine and assign preliminary emo-
tion labels to tweets. Note that some tweets were
discarded as mixed examples for each emotion
based upon thresholds for how many times they
were tagged, and it resulted in different number of
tweets in each emotion dataset. See Table 1 for the
statistics of the annotations collected from AMT.
Ground Truth Annotation: After we obtained
the annotated dataset from AMT, we posted the
same dataset (without the labels) to a group of ex-
pert annotators. The experts followed the same an-
notation guidelines, and each tweet was labeled by
at least two experts. When there was a disagree-
ment between two experts, they discussed to reach
an agreement or gathered additional opinion from
another expert to decide the label of a tweet. We
used this annotated dataset as ground truth. See
Table 2 for the statistics of the ground truth an-
notations. Compared with the ground truth, many
emotion bearing tweets were missed by the AMT
annotators, despite the quality control we applied.
It demonstrates the challenge of annotation by
crowdsourcing. The imbalanced class distribution
1
The total number of tweets is lower than the AMT dataset
because the experts removed some off-topic tweets.
2
Expert annotators had a Kappa agreement score of 0.639
before meeting to resolve their differences.
1109
ll
l l
l l
l l
l
l
0.36
0.40
0.44
0.48
0.52
0.56
0.60
0.64
0 4500 9000 13500 18000 22500 27000Number of Instances Re?annotated
Mac
ro?a
ver
age
d M
AP
Method l Spread SVM?TF SVM?Delta?IDF
(a) Macro-Averaged MAP
ll
l l
l l
l l
l
l
0.28
0.33
0.38
0.43
0.48
0.53
0.58
0 4500 9000 13500 18000 22500 27000Number of Instances Re?annotated
Mac
ro?a
ver
age
d F1
 Sco
re
Method l Spread SVM?TF SVM?Delta?IDF
(b) Macro-Averaged F1 Score
Figure 1: Performance comparison of mislabeled instance selection methods. Classifiers become more accurate as more in-
stances are re-annotated. Spread achieves comparable performance with SVMs in terms of both MAP and F1 Score.
aggravates the confirmation bias ? the minority
class examples are especially easy to miss when
labeling quickly due to their rare presence in the
dataset.
Evaluation Metric: We evaluated the results
with both Mean Average Precision (MAP) and F1
Score. Average Precision (AP) is the average of
the algorithm?s precision at every position in the
confidence ranked list of results where a true emo-
tional document has been identified. Thus, AP
places extra emphasis on getting the front of the
list correct. MAP is the mean of the average pre-
cision scores for each ranked list. This is highly
desirable for many practical application such as
intelligent search, recommendation, and target ad-
vertising where users almost never see results that
are not at the top of the list. F1 is a widely-used
measure of classification accuracy.
Methods: We evaluated the overall perfor-
mance relative to the common SVM bag of words
approach that can be ubiquitously found in text
mining literature. We implemented the following
four classification methods:
? Delta-IDF: Takes the dot product of the
Delta IDF weight vector (Formula 1) with the
document?s term frequency vector.
? Spread: Takes the dot product of the distri-
bution spread weight vector (Formula 3) with
the document?s term frequency vector. For
all the experiments, we used spread parame-
ter s = 2.
? SVM-TF: Uses a bag of words SVM with
term frequency weights.
? SVM-Delta-IDF: Uses a bag of words SVM
classification with TF.Delta-IDF weights
(Formula 2) in the feature vectors before
training or testing an SVM.
We employed each method to build the active
learner C described in Algorithm 1. We used
standard bag of unigram and bigram words rep-
resentation and topic-based fold cross validation.
Since in real world applications people are primar-
ily concerned with how well the algorithm will
work for new TV shows or movies that may not
be included in the training data, we defined a test
fold for each TV show or movie in our labeled data
set. Each test fold corresponded to a training fold
containing all the labeled data from all the other
TV shows and movies. We call it topic-based fold
cross validation.
We built the SVM classifiers using LIB-
LINEAR (Fan et al, 2008) and applied its
L2-regularized support vector regression model.
Based on the dot product or SVM regression
scores, we ranked the tweets by how strongly they
express the emotion. We selected the topm tweets
with the highest dot product or regression scores
but conflicting preliminary AMT labels as the sus-
pected mislabeled instances for re-annotation, just
as described in Algorithm 1. For the experimental
purpose, the re-annotation was done by assigning
the ground truth labels to the selected instances.
Since the dataset is highly imbalanced, we ap-
plied the under-sampling strategy when training
the classifiers.
Figure 1 compares the performance of differ-
ent approaches in each iteration after a certain
number of potentially mislabeled instances are re-
1110
annotated. The X axis shows the total number
of data points that have been examined for each
emotion so far till the current iteration (i.e., 300,
900, 1800, 3000, 4500, 6900, 10500, 16500, and
26100). We reported both the macro-averaged
MAP (Figure 1a) and the macro-averaged F1
Score (Figure 1b) on eight emotions as the over-
all performance of three competitive methods ?
Spread, SVM-Delta-IDF and SVM-TF. We have
also conducted experiments using Delta-IDF, but
its performance is low and not comparable with
the other three methods.
Generally, Figure 1 shows consistent perfor-
mance gains as more labels are corrected during
active learning. In comparison, SVM-Delta-IDF
significantly outperforms SVM-TF with respect
to both MAP and F1 Score. SVM-TF achieves
higher MAP and F1 Score than Spread at the first
few iterations, but then it is beat by Spread after
16,500 tweets had been selected and re-annotated
till the eighth iteration. Overall, at the end of the
active learning process, Spread outperforms SVM-
TF by 3.03% the MAP score (and by 4.29% the F1
score), and SVM-Delta-IDF outperforms SVM-
TF by 8.59% the MAP score (and by 5.26% the
F1 score). Spread achieves a F1 Score of 58.84%,
which is quite competitive compared to 59.82%
achieved by SVM-Delta-IDF, though SVM-Delta-
IDF outperforms Spread with respect to MAP.
Spread and Delta-IDF are superior with respect
to the time efficiency. Figure 2 shows the average
training time of the four methods on eight emo-
tions. The time spent training SVM-TF classi-
fiers is twice that of SVM-Delta-IDF classifiers,
12 times that of Spread classifiers, and 31 times
that of Delta-IDF classifiers. In our experiments,
on average, it took 258.8 seconds to train a SVM-
TF classifier for one emotion. In comparison, the
average training time of a Spread classifier was
only 21.4 seconds, and it required almost no pa-
rameter tuning. In total, our method Spread saved
up to (258.8 ? 21.4) ? 9 ? 8 = 17092.8 seconds
(4.75 hours) over nine iterations of active learning
for all the eight emotions. This is enough time to
re-annotate thousands of data points.
The other important quantity to measure is an-
notation quality. One measure of improvement for
annotation quality is the number of mislabeled in-
stances that can be fixed after a certain number of
active learning iterations. Better methods can fix
more labels with fewer iterations.
0
100
200
Delta?IDF Spread SVM?Delta?IDF SVM?TFMethod
Ave
rage
 Tram
ing T
ime 
(s)
Figure 2: Average training time on eight emotions. Spread re-
quires only one-twelfth of the time spent to training an SVM-
TF classifier. Note that the time spent tuning the SVM?s pa-
rameters has not been included, but is considerable. Com-
pared with such computationally expensive methods, Spread
is more appropriate for use with active learning.
ll
ll
l l
l l
l
l
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
0 4500 9000 13500 18000 22500 27000Number of Instances Re?annotated
Per
cen
tage
 of F
ixed
 Lab
els
Method l Spread SVM?TF SVM?Delta?IDFDelta?IDF Random
Figure 3: Accumulated average percentage of fixed labels on
eight emotions. Spreading the feature weights reduces the
number of data points that must be examined in order to cor-
rect the mislabeled instances. SVMs require slightly fewer
points but take far longer to build.
Besides the four methods, we also implemented
a random baseline (Random) which randomly se-
lected the specified number of instances for re-
annotation in each round. We compared the im-
proved dataset with the final ground truth at the
end of each round to monitor the progress. Figure
3 reports the accumulated average percentage of
corrected labels on all emotions in each iteration
of the active learning process.
According to the figure, SVM-Delta-IDF and
SVM-TF are the most advantageous methods, fol-
lowed by Spread and Delta-IDF. After the last
iteration, SVM-Delta-IDF, SVM-TF, Spread and
Delta-IDF has fixed 85.23%, 85.85%, 81.05%
and 58.66% of the labels, respectively, all of
which significantly outperform the Random base-
line (29.74%).
1111
6 Conclusion
In this paper, we explored an active learning ap-
proach to improve data annotation quality for
classification tasks. Instead of training the ac-
tive learner using computationally expensive tech-
niques (e.g., SVM-TF), we used a novel non-linear
distribution spreading algorithm. This algorithm
first weighs the features using the Delta-IDF tech-
nique, and then non-linearly spreads out the distri-
bution of the feature scores to enhance the model?s
ability to discriminate at the feature level. The
evaluation shows that our algorithm has the fol-
lowing advantages: (1) It intelligently ordered the
data points for annotators to annotate the most
likely errors first. The accuracy was at least com-
parable with computationally expensive baselines
(e.g. SVM-TF). (2) The algorithm trained and ran
much faster than SVM-TF, allowing annotators to
finish more annotations than competitors. (3) The
annotation process improved the dataset quality
by positively impacting the accuracy of classifiers
that were built upon it.
References
Carla E Brodley and Mark A Friedl. 1999. Identifying
mislabeled training data. Journal of Artificial Intel-
ligence Research, 11:131?167.
Chris Callison-Burch. 2009. Fast, cheap, and cre-
ative: evaluating translation quality using amazon?s
mechanical turk. In Proceedings of EMNLP, pages
286?295. ACL.
Paul Ekman. 1999. Basic emotions. Handbook of cog-
nition and emotion, 4:5?60.
Rong-En Fan, Kai-Wei Chang, Cho-Jui Hsieh, Xiang-
Rui Wang, and Chih-Jen Lin. 2008. Liblinear: A
library for large linear classification. The Journal of
Machine Learning Research, 9:1871?1874.
Donghai Guan, Weiwei Yuan, Young-Koo Lee, and
Sungyoung Lee. 2011. Identifying mislabeled train-
ing data with the aid of unlabeled data. Applied In-
telligence, 35(3):345?358.
Wenxin Jiang. 2001. Some theoretical aspects of
boosting in the presence of noisy data. In Proceed-
ings of ICML. Citeseer.
Adam Tauman Kalaia and Rocco A Servediob. 2005.
Boosting in the presence of noise. Journal of Com-
puter and System Sciences, 71:266?290.
Amitava Karmaker and Stephen Kwek. 2006. A
boosting approach to remove class label noise. In-
ternational Journal of Hybrid Intelligent Systems,
3(3):169?177.
Aniket Kittur, Ed H Chi, and Bongwon Suh. 2008.
Crowdsourcing user studies with mechanical turk.
In Proceedings of CHI, pages 453?456. ACM.
Srivatsan Laxman, Sushil Mittal, and Ramarathnam
Venkatesan. 2013. Error correction in learning us-
ing svms. arXiv preprint arXiv:1301.2012.
Justin Martineau and Tim Finin. 2009. Delta tfidf: An
improved feature space for sentiment analysis. In
Proceedings of ICWSM.
John Mingers. 1989. An empirical comparison of
pruning methods for decision tree induction. Ma-
chine learning, 4(2):227?243.
Fabrice Muhlenbach, St?ephane Lallich, and Djamel A
Zighed. 2004. Identifying and handling mislabelled
instances. Journal of Intelligent Information Sys-
tems, 22(1):89?109.
Robert Plutchik. 2001. The nature of emotions. Amer-
ican Scientist, 89(4):344?350.
Umaa Rebbapragada, Carla E Brodley, Damien Sulla-
Menashe, and Mark A Friedl. 2012. Active label
correction. In Proceedings of ICDM, pages 1080?
1085. IEEE.
James A Russell and Lisa Feldman Barrett. 1999. Core
affect, prototypical emotional episodes, and other
things called emotion: dissecting the elephant. Jour-
nal of personality and social psychology, 76(5):805.
Burr Settles. 2010. Active learning literature sur-
vey. Technical Report 1648, University of Wiscon-
sin, Madison.
Victor S Sheng, Foster Provost, and Panagiotis G
Ipeirotis. 2008. Get another label? improving data
quality and data mining using multiple, noisy label-
ers. In Proceedings of KDD, pages 614?622. ACM.
Rion Snow, Brendan O?Connor, Daniel Jurafsky, and
Andrew Y Ng. 2008. Cheap and fast?but is it
good?: evaluating non-expert annotations for natu-
ral language tasks. In Proceedings of EMNLP, pages
254?263.
Qi Su, Dmitry Pavlov, Jyh-Herng Chow, and Wendell C
Baker. 2007. Internet-scale collection of human-
reviewed data. In Proceedings of WWW, pages 231?
240. ACM.
P Vannoorenberghe and T Denoeux. 2002. Handling
uncertain labels in multiclass problems using belief
decision trees. In Proceedings of IPMU, volume 3,
pages 1919?1926.
Sofie Verbaeten and Anneleen Van Assche. 2003. En-
semble methods for noise elimination in classifica-
tion problems. In Multiple classifier systems, pages
317?325. Springer.
Wenbo Wang, Lu Chen, Krishnaprasad Thirunarayan,
and Amit P Sheth. 2012. Harnessing twitter? big
data? for automatic emotion identification. In Pro-
ceedings of SocialCom, pages 587?592. IEEE.
Xinchuan Zeng and Tony R Martinez. 2001. An al-
gorithm for correcting mislabeled data. Intelligent
data analysis, 5(6):491?502.
Xingquan Zhu, Xindong Wu, and Qijun Chen. 2003.
Eliminating class noise in large datasets. In Pro-
ceedings of ICML, pages 920?927.
1112
Proceedings of the NAACL HLT 2010 Workshop on Creating Speech and Language Data with Amazon?s Mechanical Turk, pages 80?88,
Los Angeles, California, June 2010. c?2010 Association for Computational Linguistics
Annotating Named Entities in Twitter Data with Crowdsourcing
Tim Finin, Will Murnane, Anand Karandikar, Nicholas Keller and Justin Martineau
Computer Science and Electrical Engineering
University of Maryland, Baltimore County
Baltimore MD 21250
(finin,willm1,anandk1,nick6,jm1)@umbc.edu
Mark Dredze
Human Language Technology Center of Excellence
Johns Hopkins University
Baltimore MD 21211
mdredze@cs.jhu.edu
Abstract
We describe our experience using both Ama-
zon Mechanical Turk (MTurk) and Crowd-
Flower to collect simple named entity anno-
tations for Twitter status updates. Unlike most
genres that have traditionally been the focus of
named entity experiments, Twitter is far more
informal and abbreviated. The collected anno-
tations and annotation techniques will provide
a first step towards the full study of named en-
tity recognition in domains like Facebook and
Twitter. We also briefly describe how to use
MTurk to collect judgements on the quality of
?word clouds.?
1 Introduction and Dataset Description
Information extraction researchers commonly work
on popular formal domains, such as news arti-
cles. More diverse studies have included broadcast
news transcripts, blogs and emails (Strassel et al,
2008). However, extremely informal domains, such
as Facebook, Twitter, YouTube or Flickr are start-
ing to receive more attention. Any effort aimed at
studying these informal genres will require at least a
minimal amount of labeled data for evaluation pur-
poses.
This work details how to efficiently annotate large
volumes of data, for information extraction tasks, at
low cost using MTurk (Snow et al, 2008; Callison-
Burch, 2009). This paper describes a case study for
information extraction tasks involving short, infor-
mal messages from Twitter. Twitter is a large multi-
user site for broadcasting short informal messages.
Twitter is an extreme example of an informal genre
(Java et al, 2007) as users frequently abbreviate
their posts to fit within the specified limit. Twitter
is a good choice because it is very popular: Twitter
users generate a tremendous number of status up-
dates (tweets) every day1. This is a good genre to
work on named entity extraction since many tweets
refer to and contain updates about named entities.
Our Twitter data set has over 150 million tweets
from 1.5 million users collected over a period of
three years. Tweets are unlike formal text. They are
limited to a maximum of 140 characters, a limit orig-
inally set to allow them to fit into an SMS message.
Consequently, the use of acronyms and both stan-
dard and non-standard abbreviations (e.g., b4 for be-
fore and ur for your) are very common. Tweets tend
to be telegraphic and often consist of sentence frag-
ments or other ungrammatical sequences. Normal
capitalization rules (e.g., for proper names, book ti-
tles, etc.) are commonly ignored.
Furthermore, users have adopted numerous con-
ventions including hashtags, user mentions, and
retweet markers. A hashtag (e.g., #earthquake) is
a token beginning with a ?#? character that denotes
one of the topic of a status. Hashtags can be used as
pure metadata or serve both as a word and as meta-
data, as the following two examples show.
? EvanEcullen: #chile #earthquake #tsunami They
heard nothing of a tsunami until it slammed into
their house with an unearthly http://tl.gd/d798d
? LarsVonD: Know how to help #Chile after the
#Earthquake
1Pingdom estimated that there were nearly 40 million tweets
a day in January 2010 (pingdom.com, 2010).
80
(1) report from the economist: #chile counts the cost
of a devastating earthquake and makes plans for re-
covery. http://bit.ly/dwoQMD
Note: ?the economist? was not recognized as an
ORG.
(2) how come when george bush wanted to take out
millions for the war congress had no problem...but
whe obama wants money for healthcare the ...
Note: Both ?george bush? and ?obama? were missed
as PERs.
(3) RT @woodmuffin: jay leno interviewing sarah
palin: the seventh seal starts to show a few cracks
Note: RT (code for a re-tweet) was mistaken as a po-
sition and sarah palin missed as a person.
Table 1: Standard named entity systems trained on text from
newswire articles and other well formed documents lose accu-
racy when applied to short status updates.
The Twitter community also has a convention where
user names preceded by an @ character (known as
?mentions?) at the beginning of a status indicate that
it is a message directed at that user. A user mention
in the middle of a message is interpreted as a general
reference to that user. Both uses are shown in this
status:
? paulasword: @obama quit calling @johnboener a
liar, you liar
The token RT is used as a marker that a person is for-
warding a tweet originally sent by another user. Nor-
mally the re-tweet symbol begins the message and
is immediately followed by the user mention of the
original author or sometimes a chain of re-tweeters
ending with the original author, as in
? politicsiswar: RT @KatyinIndy @SamiShamieh:
Ghost towns on rise under Obama
http://j.mp/cwJSUg #tcot #gop (Deindustrial-
ization of U.S.- Generation Zero)
Finally, ?smileys? are common in Twitter statuses to
signal the users? sentiment, as in the following.
? sallytherose: Just wrote a 4-page paper in an hour
and a half. BOiiiiii I?m getting good at this. :) Left-
over Noodles for dinner as a reward. :D
The Twitter search service also uses these to retrieve
tweets matching a query with positive or negative
sentiment.
Typical named entity recognition systems have
been trained on formal documents, such as news
Figure 1: Our Twitter collection is stored in a relational
database and also in the Lucene information retrieval system.
wire articles. Their performance on text from very
different sources, especially informal genres such as
Twitter tweets or Facebook status updates, is poor.
In fact, ?Systems analyzing correctly about 90% of
the sequences from a journalistic corpus can have a
decrease of performance of up to 50% on more in-
formal texts.? (Poibeau and Kosseim, 2001) How-
ever, many large scale information extraction sys-
tems require extracting and integrating useful in-
formation from online social networking sources
that are informal such as Twitter, Facebook, Blogs,
YouTube and Flickr.
To illustrate the problem we applied both the
NLTK (Bird et al, 2009) and the Stanford named
entity recognizers (Finkel et al, 2005) without re-
training to a sample Twitter dataset with mixed re-
sults. We have observed many failures, both false
positives and false negatives. Table 1 shows some
examples of these.
2 Task design
We developed separate tasks on CrowdFlower and
MTurk using a common collection of Twitter sta-
tuses and asked workers to perform the same anno-
tation task in order to fully understand the features
that each provides, and to determine the total amount
of work necessary to produce a result on each ser-
vice. MTurk has the advantage of using standard
HTML and Javascript instead of CrowdFlower?s
CML. However MTurk has inferior data verifica-
tion, in that the service only provides a threshold
on worker agreement as a form of quality control.
81
This is quite poor when tasks are more complicated
than a single boolean judgment, as with the case at
hand. CrowdFlower works across multiple services
and does verification against gold standard data, and
can get more judgements to improve quality in cases
where it?s necessary.
3 Annotation guidelines
The task asked workers to look at Twitter individ-
ual status messages (tweets) and use a toggle but-
ton to tag each word with person (PER), organiza-
tion (ORG), location (LOC), or ?none of the above?
(NONE). Each word also had a check box (labeled
???) to indicate that uncertainty. We provided the
workers with annotation guidelines adapted from the
those developed by the Linguistic Data Consortium
(Linguistic Data Consortium ? LCTL Team, 2006)
which were in turn based on guidelines used for
MUC-7 (Chinchor and Robinson, 1997).
We deliberately kept our annotation goals simple:
We only asked workers to identify three basic types
of named entities.
Our guidelines read:
An entity is a object in the world like a place
or person and a named entity is a phrase that
uniquely refers to an object by its proper name
(Hillary Clinton), acronym (IBM), nickname
(Opra) or abbreviation (Minn.).
Person (PER) entities are limited to humans
(living, deceased, fictional, deities, ...) iden-
tified by name, nickname or alias. Don?t in-
clude titles or roles (Ms., President, coach).
Include suffix that are part of a name (e.g., Jr.,
Sr. or III).
Organization (ORG) entities are limited to
corporations, institutions, government agen-
cies and other groups of people defined by
an established organizational structure. Some
examples are businesses (Bridgestone Sports
Co.), stock ticker symbols (NASDAQ), multi-
national organizations (European Union), po-
litical parties (GOP) non-generic government
entities (the State Department), sports teams
(the Yankees), and military groups (the Tamil
Tigers). Do not tag ?generic? entities like ?the
government? since these are not unique proper
names referring to a specific ORG.
Location (LOC) entities include names of
politically or geographically defined places
(cities, provinces, countries, international re-
gions, bodies of water, mountains, etc.). Lo-
cations also include man-made structures like
airports, highways, streets, factories and mon-
uments.
We instructed annotators to ignore other types of
named entities, e.g., events (World War II), products
(iPhone), animals (Cheetah), inanimate objects and
monetary units (the Euro) and gave them four prin-
ciples to follow when tagging:
? Tag words according to their meaning in the
context of the tweet.
? Only tag names, i.e., words that directly and
uniquely refer to entities.
? Only tag names of the types PER,ORG, and
LOC.
? Use the ??? checkbox to indicate uncertainty
in your tag.
3.1 Data selection
We created a ?gold standard? data set of about 400
tweets to train and screen workers on MTurk, to salt
the MTurk data with worker evaluation data, for use
on CrowdFlower, and to evaluate the performance
of the final NER system after training on the crowd-
sourced annotations. We preselected tweets to an-
notate using the NLTK named entity recognizer to
select statuses that were thought to contain named
entities of the desired types (PER, ORG, LOC).
Initial experiments suggested that a worker can
annotate about 400 tweets an hour. Based on this, we
loaded each MTurk Human Intelligence Tasks (HIT)
with five tweets, and paid workers five cents per HIT.
Thus, if we require that each tweet be annotated by
two workers, we would be able to produce about
4,400 raw annotated tweets with the $100 grant from
Amazon, accounting for their 10% overhead price.
3.2 CrowdFlower
We also experimented with CrowdFlower, a crowd-
sourcing service that uses various worker channels
like MTurk and SamaSource2 and provides an en-
hanced set of management and analytic tools. We
were interested in understanding the advantages and
disadvantages compared to using MTurk directly.
2http://www.samasource.org/
82
Figure 2: CrowdFlower is an enhanced service that feeds into
MTurk and other crowdsourcing systems. It provides conve-
nient management tools that show the performance of workers
for a task.
We prepared a basic front-end for our job using the
CrowdFlower Markup Language (CML) and custom
JavaScript. We used the CrowdFlower interface to
calibrate our job and to decide the pay rate. It con-
siders various parameters like amount of time re-
quired to complete a sample task and the desired ac-
curacy level to come up with a pay rate.
One attractive feature lets one provide a set of
?gold standard? tasks that pair data items with cor-
rect responses. These are automatically mixed into
the stream of regular tasks that workers process. If
a worker makes errors in one of these gold stan-
dard tasks, she gets immediate feedback about her
error and the correct answer is shown. CrowdFlower
claims that error rates are reduced by a factor of
two when gold standards are used(crowdflower.com,
2010). The interface shown in Figure 2 shows the
number of gold tasks the user has seen, and how
many they have gotten correct.
CrowdFlower?s management tools provides a de-
tailed analysis of the workers for a job, including
the trust level, accuracy and past accuracy history
associated with each worker. In addition, the output
records include the geographical region associated
with each worker, information that may be useful
for some tasks.
3.3 MTurk
The current iteration of our MTurk interface is
shown in Figure 3. Each tweet is shown at the top
of the HIT interface so that it can easily be read for
context. Then a table is displayed with each word
of the tweet down the side, and radio buttons to pick
Figure 3: In the MTurk interface a tweet is shown in its entirety
at the top, then a set of radio buttons and a checkbox is shown
for each word of the tweet. These allow the user to pick the
annotation for each word, and indicate uncertainty in labeling.
what kind of entity each word is. Every ten rows,
the header is repeated, to allow the worker to scroll
down the page and still see the column labels. The
interface also provides a checkbox allows the worker
to indicate uncertainty in labeling a word.
We expect that our data will include some tricky
cases where an annotator, even an experienced one,
may be unsure whether a word is part of a named
entity and/or what type it is. For example, is ?Bal-
timore Visionary Art Museum? a LOC followed by
a three word ORG, or a four-word ORG? We con-
sidered and rejected using hierarchical named enti-
ties in order to keep the annotation task simple. An-
other example that might give an annotator pause is
a phrase like ?White House? can be used as a LOC
or ORG, depending on the context.
This measure can act as a measure of a worker?s
quality: if they label many things as ?uncertain?,
we might guess that they are not producing good
results in general. Also, the uncertainty allows for
a finer-grained measure of how closely the results
from two workers for the same tweet match: if the
workers disagree on the tagging of a particular word,
but agree that it is not certain, we could decide that
this word is a bad example and not use it as training
data.
Finally, a help screen is available. When the user
mouses over the word ?Help? in the upper right, the
guidelines discussed in Section 3 are displayed. The
screenshot in Figure 3 shows the help dialog ex-
panded.
The MTurk interface uses hand-written Javascript
to produce the table of words, radio buttons, and
83
Figure 4: Only about one-third of the workers did more than
three HITs and a a few prolific workers accounted for most of
our data.
checkboxes. The form elements have automatically
generated names, which MTurk handles neatly. Ad-
ditional Javascript code collects location informa-
tion from the workers, based on their IP address. A
service provided by Geobytes3 provides the location
data.
4 Results from MTurk
Our dataset was broken into HITs of four previ-
ously unlabeled tweets, and one previously labeled
tweet (analogous to the ?gold? data used by Crowd-
Flower). We submitted 251 HITs, each of which was
to be completed twice, and the job took about 15
hours. Total cost for this job was $27.61, for a total
cost per tweet of about 2.75 cents each (although we
also paid to have the gold tweets annotated again).
42 workers participated, mostly from the US and
India, with Australia in a distant third place. Most
workers did only a single HIT, but most HITs were
done by a single worker. Figure 4 shows more detail.
After collecting results from MTurk, we had to
come up with a strategy for determining which
of the results (if any) were filled randomly. To
do this, we implemented an algorithm much like
Google?s PageRank (Brin and Page, 1998) to judge
the amount of inter-worker agreement. Pseudocode
for our algorithm is presented in Figure 5.
This algorithm doesn?t strictly measure worker
quality, but rather worker agreement, so it?s impor-
3http://www.geobytes.com/
WORKER-AGREE : results ? scores
1 worker ids ? ENUMERATE(KEYS(results))
 Initialize A
2 for worker1 ? worker ids
3 do for worker2 ? worker ids
4 do A[worker1 ,worker2 ]
? SIMILARITY(results[worker1 ],
results[worker2 ])
 Normalize columns of A so that they sum to 1 (elided)
 Initialize x to be normal: each worker
is initially trusted equally.
5 x?
?
1?
n
, . . . , 1?
n
?
 Find the largest eigenvector of A, which
corresponds to the agreement-with-group
value for each worker.
6 i? 0
7 while i < max iter
8 do xnew ? NORMALIZE(A? x)
9 diff ? xnew ? x
10 x = xnew
11 if diff < tolerance
12 then break
13 i? i + 1
14 for workerID ,workerNum ? worker ids
15 do scores[workerID ]? x[workerNum]
16 return scores
Figure 5: Intra-worker agreement algorithm. MTurk results are
stored in an associative array, with worker IDs as keys and lists
of HIT results as values, and worker scores are floating point
values. Worker IDs are mapped to integers to allow standard
matrix notation. The Similarity function in line four just returns
the fraction of HITs done by two workers where their annota-
tions agreed.
tant to ensure that the workers it judges as having
high agreement values are actually making high-
quality judgements. Figure 6 shows the worker
agreement values plotted against the number of re-
sults a particular worker completed. The slope of
this plot (more results returned tends to give higher
scores) is interpreted to be because practice makes
perfect: the more HITs a worker completes, the
more experience they have with the task, and the
more accurate their results will be.
So, with this agreement metric established, we set
out to find out how well it agreed with our expecta-
tion that it would also function as a quality metric.
Consider those workers that completed only a sin-
gle HIT (there are 18 of them): how well did they
do their jobs, and where did they end up ranked as a
result? Since each HIT is composed of five tweets,
84
Figure 6: This log-log plot of worker agreement scores versus
the number of results clearly shows that workers who have done
more HITs have better inter-annotator agreement scores.
even such a small sample can contain a lot of data.
Figure 7 shows a sample annotation for three
tweets, each from a worker who did only one HIT,
and the ranking that the worker received for doing
that annotation. The worst scoring one is apparently
a random fill: there?s no correlation at all between
the answers and the correct ones. The middle tweet
is improved: ?Newbie? isn?t a person in this con-
text, but it?s a mistake a non-native speaker might
make, and everything else is right, and the score is
higher. The last tweet is correctly labeled within our
parameters, and scores the highest. This experiment
shows that our agreement metric functions well as a
correctness metric.
Also of interest is the raw effectiveness of MTurk
workers; did they manage to tag tweets as well as
our experts? After investigating the data, our verdict
is that the answer is not quite?but by carefully com-
bining the tags that two people give the same tweet
it is possible to get good answers nevertheless, at
much lower cost than employing a single expert.
5 Results from CrowdFlower
Our CrowdFlower task involved 30 tweets. Each
tweet was further split into tokens resulting in 506
units as interpreted by CrowdFlower?s system. We
required a total 986 judgments. In addition, we were
Score 0.0243 Score 0.0364 Score 0.0760
Trying org Newbie person Trying none
to org here none out none
decide org nice none TwittEarth org
if org to none - none
it?s org meet none Good none
worth place you none graphics. none
hanging org all none Fun none
around org but none
until org useless. none
the none (URL) none
final org
implosion org
Figure 7: These sample annotations represent the range of
worker quality for three workers who did only one HIT. The
first is an apparently random annotation, the second a plausible
but incorrect one, and the third a correct annotation. Our algo-
rithm assigned these workers scores aligned with their product
quality.
Figure 8: CrowdFlower provides good interfaces to manage
crowdsourcing tasks. This view lets us to monitor the number
of judgements in each category.
required to generate thirteen ?gold? data, which is
the minimum required by the service. Every gold
answer has an optional text with it to inform work-
ers why we believe our answer is the correct one and
theirs is incorrect. This facilitates gradually train-
ing workers up to the point where they can provide
reliably correct results. Figure 8 shows the inter-
face CrowdFlower provides to monitor the number
of judgements in each category.
We used the calibration interface that Crowd-
Flower provides to fix the price for our task (Fig-
ure 9). It considers various parameters like the time
required per unit and desired accuracy level, and also
adds a flat 33%markup on the actual labor costs. We
divided the task into a set of assignments where each
assignment had three tweets and was paid five cents.
We set the time per unit as 30 seconds, so, based on
the desired accuracy level and markup overhead, our
job?s cost was $2.19. This comes to $2 hourly pay
per worker, assuming they take the whole 30 sec-
85
Figure 9: CrowdFlower has an interface that makes it easy to
select an appropriate price for a task.
onds to complete the task.
6 Cloud Comparison
MTurk can also be used to efficiently evaluate re-
sults requiring human judgments. We implemented
an additional HIT to evaluate a new technique we
developed to generate ?word clouds.? In this task
workers choose which of two word clouds generated
from query results by two different algorithms pro-
vides a more useful high level description that can
highlight important features and opinions about the
query topic.
Evaluating how well a set of words describes
and highlights the important features and opinions
pertaining to the subject of the query is subjec-
tive, which necessitates human evaluations. MTurk
workers were given two word clouds, one from our
technique and the other from a baseline relevance
feedback technique (Rocchio (Rocchio, 1971)), for
each query. Queries were shown with a short de-
scriptive blurb to disambiguate it from possible al-
ternatives, reveal the intent of the user who created
the query, and provide a short description of it for
workers who were unfamiliar with the query subject.
Wikipedia links were provided, when applicable, for
anyone needing further information about the query
subject. Workers were asked to use a slider to de-
termine which cloud better represented the key con-
cepts related to the query. The slider would snap
into one of eleven positions, which were labeled
with value judgments they represented. The cen-
ter value indicates that the two clouds were equally
good. Figure 10 shows the final query interface.
Figure 10: MTurk workers were asked which word cloud they
thought best represented returned the results of a query, in this
case ?Buffy the Vampire Slayer?.
6.1 Results
Since MTurk workers are paid per task they com-
plete, there is an incentive to do low quality work
and even to randomly guess to get tasks done as
fast as possible. To ensure a high quality evaluation
we included in every batch of five queries a qual-
ity control question. Quality control questions were
designed to look exactly like the regular cloud com-
parisons, but only one of the two clouds displayed
was actually from the query in the description. The
other word cloud was generated from a different
query with no relation to the real query, and hand
checked to make sure that anyone who was doing a
respectable job would agree that the off-topic word
cloud was a poor result for the query. If a worker?s
response indicated that the off topic cloud was as
good as or better than the real cloud then they failed
that control question, otherwise they passed.
86
We asked that twelve workers label each set of
questions. We only used results from workers that
answered at least seven control questions with an
average accuracy rating of at least 75%. This left
us with a pool of eight reliable workers with an av-
erage accuracy on control questions of about 91%.
Every question was labeled by at least five different
workers with a mode of seven.
Workers were not told which technique produced
which cloud. Techniques were randomly assigned to
either cloud A or B to prevent people from entering
into a ?cloud A is always better? mentality. The po-
sition of the quality control questions were randomly
assigned in each set of five cloud comparisons. The
links to the cloud images were anonymized to ran-
dom numbers followed by the letter A or B for their
position to prevent workers from guessing anything
about either the query or the technique that gener-
ated the cloud.
We applied a filter to remove the query words
from all word clouds. First of all, it would be a
dead giveaway on the control questions. Second,
the query words are already known and thus pro-
vide no extra information about the query to the user
while simultaneously taking up the space that could
be used to represent other more interesting words.
Third, their presence and relative size compared to
the baseline could cause users to ignore other fea-
tures especially when doing a quick scan.
The slider scores were converted into numerical
scores ranging from -5 to +5, with zero represent-
ing that the two clouds were equal. We averaged
the score for each cloud comparison, and determined
that for 44 out of 55 clouds workers found our tech-
nique to be better than the baseline approach.
6.2 Issues
We faced some issues with the CrowdFlower sys-
tem. These included incorrect calibration for jobs,
errors downloading results from completed jobs,
price displayed on MTurk being different that what
was set through CrowdFlower and gold standard
data not getting stored on CrowdFlower system. An-
other problem was with the system?s 10-token limit
on gold standards, which is not yet resolved at the
time of this writing. On the whole, the CrowdFlower
team has been very quick to respond to our problems
and able to correct the problems we encountered.
Figure 11: Statistics for worker #181799. The interface has an
option to ?forgive? the worker for missing gold and an option
to ?flag? the worker so that the answers are excluded while re-
turning the final set of judgments. It also displays workers ID,
past accuracy and source, e.g. MTurk.
6.3 Live Analytics
CrowdFlower?a analytics panel facilitates viewing
the live responses. The trust associated with each
worker can be seen under the workers panel. Work-
ers who do a large amount of work with low trust are
likely scammers or automated bots. Good gold data
ensures that their work is rejected. The system auto-
matically pauses a job when the ratio of untrusted to
trusted judgments exceeds a certain mark. This was
particularly helpful for us to rectify some of our gold
data. Currently, the job is being completed with 61%
accuracy for gold data. This could be due to the cur-
rent issue we are facing as described above. It?s also
possible to view statistics for individual workers, as
shown in Figure 11.
7 Conclusion
Crowdsourcing is an effective way to collect annota-
tions for natural language and information retrieval
research. We found both MTurk and CrowdFlower
to be flexible, relatively easy to use, capable of pro-
ducing usable data, and very cost effective.
Some of the extra features and interface options
that CrowdFlower provided were very useful, but
did their were problems with their ?gold standard?
agreement evaluation tools. Their support staff was
very responsive and helpful, mitigating some of
these problems. We were able to duplicate some of
the ?gold standard? functionality on MTurk directly
by generating our own mix of regular and quality
control queries. We did not attempt to provide im-
87
mediate feedback to workers who enter a wrong an-
swer for the ?gold standard? queries, however.
With these labeled tweets, we plan to train an en-
tity recognizer using the Stanford named entity rec-
ognizer4, and run it on our dataset. After using this
trained entity recognizer to find the entities in our
data, we will compare its accuracy to the existing
recognized entities, which were recognized by an
ER trained on newswire articles. We will also at-
tempt to do named entity linking and entity resolu-
tion on the entire corpus.
We look forward to making use of the data we
collected in our research and expect that we will use
these services in the future when we need human
judgements.
Acknowledgments
This work was done with partial support from the
Office of Naval Research and the Johns Hopkins
University Human Language Technology Center of
Excellence. We thank both Amazon and Dolores
Labs for grants that allowed us to use their systems
for the experiments.
References
S. Bird, E. Klein, and E. Loper. 2009. Natural language
processing with Python. Oreilly & Associates Inc.
S. Brin and L. Page. 1998. The anatomy of a large-scale
hypertextual web search engine. In Seventh Interna-
tional World-Wide Web Conference (WWW 1998).
C. Callison-Burch. 2009. Fast, Cheap, and Creative:
Evaluating Translation Quality Using Amazons Me-
chanical Turk. In Proceedings of EMNLP 2009.
N. Chinchor and P. Robinson. 1997. MUC-7 named en-
tity task definition. In Proceedings of the 7th Message
Understanding Conference. NIST.
crowdflower.com. 2010. The error rates with-
out the gold standard is more than twice as
high as when we do use a gold standard.
http://crowdflower.com/general/examples. Accessed
on April 11, 2010.
J.R. Finkel, T. Grenager, and C. Manning. 2005. In-
corporating non-local information into information ex-
traction systems by gibbs sampling. In Proceedings of
the 43nd Annual Meeting of the Association for Com-
putational Linguistics (ACL 2005), volume 100, pages
363?370.
4http://nlp.stanford.edu/software/CRF-NER.shtml
A. Java, X. Song, T. Finin, and B. Tseng. 2007. Why we
twitter: understanding microblogging usage and com-
munities. In Proceedings of the 9th WebKDD and 1st
SNA-KDD 2007 workshop on Web mining and social
network analysis, pages 56?65. ACM.
Linguistic Data Consortium ? LCTL Team. 2006. Sim-
ple named entity guidelines for less commonly taught
languages, March. Version 6.5.
pingdom.com. 2010. Twitter: Now more than 1
billion tweets per month. http://royal.pingdom.com-
/2010/02/10/twitter-now-more-than-1-billion-tweets-
per-month/, February. Accessed on February 15,
2010.
T. Poibeau and L. Kosseim. 2001. Proper Name Extrac-
tion from Non-Journalistic Texts. In Computational
linguistics in the Netherlands 2000: selected papers
from the eleventh CLIN Meeting, page 144. Rodopi.
J. Rocchio. 1971. Relevance feedback in information re-
trieval. In G. Salton, editor, The SMART Retrieval Sys-
tem: Experiments in Automatic Document Processing.
Prentice-Hall.
R. Snow, B. O?Connor, D. Jurafsky, and A.Y. Ng. 2008.
Cheap and fast?but is it good?: evaluating non-expert
annotations for natural language tasks. In Proceedings
of the Conference on Empirical Methods in Natural
Language Processing, pages 254?263. Association for
Computational Linguistics.
Stephanie Strassel, Mark Przybocki, Kay Peterson, Zhiyi
Song, and Kazuaki Maeda. 2008. Linguistic re-
sources and evaluation techniques for evaluation of
cross-document automatic content extraction. In Pro-
ceedings of the 6th International Conference on Lan-
guage Resources and Evaluation.
88
