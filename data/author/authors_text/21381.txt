Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1746?1751,
October 25-29, 2014, Doha, Qatar.
c
?2014 Association for Computational Linguistics
Convolutional Neural Networks for Sentence Classification
Yoon Kim
New York University
yhk255@nyu.edu
Abstract
We report on a series of experiments with
convolutional neural networks (CNN)
trained on top of pre-trained word vec-
tors for sentence-level classification tasks.
We show that a simple CNN with lit-
tle hyperparameter tuning and static vec-
tors achieves excellent results on multi-
ple benchmarks. Learning task-specific
vectors through fine-tuning offers further
gains in performance. We additionally
propose a simple modification to the ar-
chitecture to allow for the use of both
task-specific and static vectors. The CNN
models discussed herein improve upon the
state of the art on 4 out of 7 tasks, which
include sentiment analysis and question
classification.
1 Introduction
Deep learning models have achieved remarkable
results in computer vision (Krizhevsky et al.,
2012) and speech recognition (Graves et al., 2013)
in recent years. Within natural language process-
ing, much of the work with deep learning meth-
ods has involved learning word vector representa-
tions through neural language models (Bengio et
al., 2003; Yih et al., 2011; Mikolov et al., 2013)
and performing composition over the learned word
vectors for classification (Collobert et al., 2011).
Word vectors, wherein words are projected from a
sparse, 1-of-V encoding (here V is the vocabulary
size) onto a lower dimensional vector space via a
hidden layer, are essentially feature extractors that
encode semantic features of words in their dimen-
sions. In such dense representations, semantically
close words are likewise close?in euclidean or
cosine distance?in the lower dimensional vector
space.
Convolutional neural networks (CNN) utilize
layers with convolving filters that are applied to
local features (LeCun et al., 1998). Originally
invented for computer vision, CNN models have
subsequently been shown to be effective for NLP
and have achieved excellent results in semantic
parsing (Yih et al., 2014), search query retrieval
(Shen et al., 2014), sentence modeling (Kalch-
brenner et al., 2014), and other traditional NLP
tasks (Collobert et al., 2011).
In the present work, we train a simple CNN with
one layer of convolution on top of word vectors
obtained from an unsupervised neural language
model. These vectors were trained by Mikolov et
al. (2013) on 100 billion words of Google News,
and are publicly available.
1
We initially keep the
word vectors static and learn only the other param-
eters of the model. Despite little tuning of hyper-
parameters, this simple model achieves excellent
results on multiple benchmarks, suggesting that
the pre-trained vectors are ?universal? feature ex-
tractors that can be utilized for various classifica-
tion tasks. Learning task-specific vectors through
fine-tuning results in further improvements. We
finally describe a simple modification to the archi-
tecture to allow for the use of both pre-trained and
task-specific vectors by having multiple channels.
Our work is philosophically similar to Razavian
et al. (2014) which showed that for image clas-
sification, feature extractors obtained from a pre-
trained deep learning model perform well on a va-
riety of tasks?including tasks that are very dif-
ferent from the original task for which the feature
extractors were trained.
2 Model
The model architecture, shown in figure 1, is a
slight variant of the CNN architecture of Collobert
et al. (2011). Let x
i
? R
k
be the k-dimensional
word vector corresponding to the i-th word in the
sentence. A sentence of length n (padded where
1
https://code.google.com/p/word2vec/
1746
wait 
for 
the 
video 
and 
do 
n't 
rent 
it 
n x k representation of 
sentence with static and 
non-static channels 
Convolutional layer with 
multiple filter widths and 
feature maps 
Max-over-time 
pooling 
Fully connected layer 
with dropout and  
softmax output 
Figure 1: Model architecture with two channels for an example sentence.
necessary) is represented as
x
1:n
= x
1
? x
2
? . . .? x
n
, (1)
where ? is the concatenation operator. In gen-
eral, let x
i:i+j
refer to the concatenation of words
x
i
,x
i+1
, . . . ,x
i+j
. A convolution operation in-
volves a filter w ? R
hk
, which is applied to a
window of h words to produce a new feature. For
example, a feature c
i
is generated from a window
of words x
i:i+h?1
by
c
i
= f(w ? x
i:i+h?1
+ b). (2)
Here b ? R is a bias term and f is a non-linear
function such as the hyperbolic tangent. This filter
is applied to each possible window of words in the
sentence {x
1:h
,x
2:h+1
, . . . ,x
n?h+1:n
} to produce
a feature map
c = [c
1
, c
2
, . . . , c
n?h+1
], (3)
with c ? R
n?h+1
. We then apply a max-over-
time pooling operation (Collobert et al., 2011)
over the feature map and take the maximum value
c? = max{c} as the feature corresponding to this
particular filter. The idea is to capture the most im-
portant feature?one with the highest value?for
each feature map. This pooling scheme naturally
deals with variable sentence lengths.
We have described the process by which one
feature is extracted from one filter. The model
uses multiple filters (with varying window sizes)
to obtain multiple features. These features form
the penultimate layer and are passed to a fully con-
nected softmax layer whose output is the probabil-
ity distribution over labels.
In one of the model variants, we experiment
with having two ?channels? of word vectors?one
that is kept static throughout training and one that
is fine-tuned via backpropagation (section 3.2).
2
In the multichannel architecture, illustrated in fig-
ure 1, each filter is applied to both channels and
the results are added to calculate c
i
in equation
(2). The model is otherwise equivalent to the sin-
gle channel architecture.
2.1 Regularization
For regularization we employ dropout on the
penultimate layer with a constraint on l
2
-norms of
the weight vectors (Hinton et al., 2012). Dropout
prevents co-adaptation of hidden units by ran-
domly dropping out?i.e., setting to zero?a pro-
portion p of the hidden units during foward-
backpropagation. That is, given the penultimate
layer z = [c?
1
, . . . , c?
m
] (note that here we have m
filters), instead of using
y = w ? z+ b (4)
for output unit y in forward propagation, dropout
uses
y = w ? (z ? r) + b, (5)
where ? is the element-wise multiplication opera-
tor and r ? R
m
is a ?masking? vector of Bernoulli
random variables with probability p of being 1.
Gradients are backpropagated only through the
unmasked units. At test time, the learned weight
vectors are scaled by p such that
?
w = pw, and
?
w is used (without dropout) to score unseen sen-
tences. We additionally constrain l
2
-norms of the
weight vectors by rescaling w to have ||w||
2
= s
whenever ||w||
2
> s after a gradient descent step.
2
We employ language from computer vision where a color
image has red, green, and blue channels.
1747
Data c l N |V | |V
pre
| Test
MR 2 20 10662 18765 16448 CV
SST-1 5 18 11855 17836 16262 2210
SST-2 2 19 9613 16185 14838 1821
Subj 2 23 10000 21323 17913 CV
TREC 6 10 5952 9592 9125 500
CR 2 19 3775 5340 5046 CV
MPQA 2 3 10606 6246 6083 CV
Table 1: Summary statistics for the datasets after tokeniza-
tion. c: Number of target classes. l: Average sentence length.
N : Dataset size. |V |: Vocabulary size. |V
pre
|: Number of
words present in the set of pre-trained word vectors. Test:
Test set size (CV means there was no standard train/test split
and thus 10-fold CV was used).
3 Datasets and Experimental Setup
We test our model on various benchmarks. Sum-
mary statistics of the datasets are in table 1.
? MR: Movie reviews with one sentence per re-
view. Classification involves detecting posi-
tive/negative reviews (Pang and Lee, 2005).
3
? SST-1: Stanford Sentiment Treebank?an
extension of MR but with train/dev/test splits
provided and fine-grained labels (very pos-
itive, positive, neutral, negative, very nega-
tive), re-labeled by Socher et al. (2013).
4
? SST-2: Same as SST-1 but with neutral re-
views removed and binary labels.
? Subj: Subjectivity dataset where the task is
to classify a sentence as being subjective or
objective (Pang and Lee, 2004).
? TREC: TREC question dataset?task in-
volves classifying a question into 6 question
types (whether the question is about person,
location, numeric information, etc.) (Li and
Roth, 2002).
5
? CR: Customer reviews of various products
(cameras, MP3s etc.). Task is to predict pos-
itive/negative reviews (Hu and Liu, 2004).
6
3
https://www.cs.cornell.edu/people/pabo/movie-review-data/
4
http://nlp.stanford.edu/sentiment/ Data is actually provided
at the phrase-level and hence we train the model on both
phrases and sentences but only score on sentences at test
time, as in Socher et al. (2013), Kalchbrenner et al. (2014),
and Le and Mikolov (2014). Thus the training set is an order
of magnitude larger than listed in table 1.
5
http://cogcomp.cs.illinois.edu/Data/QA/QC/
6
http://www.cs.uic.edu/
?
liub/FBS/sentiment-analysis.html
? MPQA: Opinion polarity detection subtask
of the MPQA dataset (Wiebe et al., 2005).
7
3.1 Hyperparameters and Training
For all datasets we use: rectified linear units, filter
windows (h) of 3, 4, 5 with 100 feature maps each,
dropout rate (p) of 0.5, l
2
constraint (s) of 3, and
mini-batch size of 50. These values were chosen
via a grid search on the SST-2 dev set.
We do not otherwise perform any dataset-
specific tuning other than early stopping on dev
sets. For datasets without a standard dev set we
randomly select 10% of the training data as the
dev set. Training is done through stochastic gra-
dient descent over shuffled mini-batches with the
Adadelta update rule (Zeiler, 2012).
3.2 Pre-trained Word Vectors
Initializing word vectors with those obtained from
an unsupervised neural language model is a popu-
lar method to improve performance in the absence
of a large supervised training set (Collobert et al.,
2011; Socher et al., 2011; Iyyer et al., 2014). We
use the publicly available word2vec vectors that
were trained on 100 billion words from Google
News. The vectors have dimensionality of 300 and
were trained using the continuous bag-of-words
architecture (Mikolov et al., 2013). Words not
present in the set of pre-trained words are initial-
ized randomly.
3.3 Model Variations
We experiment with several variants of the model.
? CNN-rand: Our baseline model where all
words are randomly initialized and then mod-
ified during training.
? CNN-static: A model with pre-trained
vectors from word2vec. All words?
including the unknown ones that are ran-
domly initialized?are kept static and only
the other parameters of the model are learned.
? CNN-non-static: Same as above but the pre-
trained vectors are fine-tuned for each task.
? CNN-multichannel: A model with two sets
of word vectors. Each set of vectors is treated
as a ?channel? and each filter is applied
7
http://www.cs.pitt.edu/mpqa/
1748
Model MR SST-1 SST-2 Subj TREC CR MPQA
CNN-rand 76.1 45.0 82.7 89.6 91.2 79.8 83.4
CNN-static 81.0 45.5 86.8 93.0 92.8 84.7 89.6
CNN-non-static 81.5 48.0 87.2 93.4 93.6 84.3 89.5
CNN-multichannel 81.1 47.4 88.1 93.2 92.2 85.0 89.4
RAE (Socher et al., 2011) 77.7 43.2 82.4 ? ? ? 86.4
MV-RNN (Socher et al., 2012) 79.0 44.4 82.9 ? ? ? ?
RNTN (Socher et al., 2013) ? 45.7 85.4 ? ? ? ?
DCNN (Kalchbrenner et al., 2014) ? 48.5 86.8 ? 93.0 ? ?
Paragraph-Vec (Le and Mikolov, 2014) ? 48.7 87.8 ? ? ? ?
CCAE (Hermann and Blunsom, 2013) 77.8 ? ? ? ? ? 87.2
Sent-Parser (Dong et al., 2014) 79.5 ? ? ? ? ? 86.3
NBSVM (Wang and Manning, 2012) 79.4 ? ? 93.2 ? 81.8 86.3
MNB (Wang and Manning, 2012) 79.0 ? ? 93.6 ? 80.0 86.3
G-Dropout (Wang and Manning, 2013) 79.0 ? ? 93.4 ? 82.1 86.1
F-Dropout (Wang and Manning, 2013) 79.1 ? ? 93.6 ? 81.9 86.3
Tree-CRF (Nakagawa et al., 2010) 77.3 ? ? ? ? 81.4 86.1
CRF-PR (Yang and Cardie, 2014) ? ? ? ? ? 82.7 ?
SVM
S
(Silva et al., 2011) ? ? ? ? 95.0 ? ?
Table 2: Results of our CNN models against other methods. RAE: Recursive Autoencoders with pre-trained word vectors from
Wikipedia (Socher et al., 2011). MV-RNN: Matrix-Vector Recursive Neural Network with parse trees (Socher et al., 2012).
RNTN: Recursive Neural Tensor Network with tensor-based feature function and parse trees (Socher et al., 2013). DCNN:
Dynamic Convolutional Neural Network with k-max pooling (Kalchbrenner et al., 2014). Paragraph-Vec: Logistic regres-
sion on top of paragraph vectors (Le and Mikolov, 2014). CCAE: Combinatorial Category Autoencoders with combinatorial
category grammar operators (Hermann and Blunsom, 2013). Sent-Parser: Sentiment analysis-specific parser (Dong et al.,
2014). NBSVM, MNB: Naive Bayes SVM and Multinomial Naive Bayes with uni-bigrams from Wang and Manning (2012).
G-Dropout, F-Dropout: Gaussian Dropout and Fast Dropout from Wang and Manning (2013). Tree-CRF: Dependency tree
with Conditional Random Fields (Nakagawa et al., 2010). CRF-PR: Conditional Random Fields with Posterior Regularization
(Yang and Cardie, 2014). SVM
S
: SVM with uni-bi-trigrams, wh word, head word, POS, parser, hypernyms, and 60 hand-coded
rules as features from Silva et al. (2011).
to both channels, but gradients are back-
propagated only through one of the chan-
nels. Hence the model is able to fine-tune
one set of vectors while keeping the other
static. Both channels are initialized with
word2vec.
In order to disentangle the effect of the above
variations versus other random factors, we elim-
inate other sources of randomness?CV-fold as-
signment, initialization of unknown word vec-
tors, initialization of CNN parameters?by keep-
ing them uniform within each dataset.
4 Results and Discussion
Results of our models against other methods are
listed in table 2. Our baseline model with all ran-
domly initialized words (CNN-rand) does not per-
form well on its own. While we had expected per-
formance gains through the use of pre-trained vec-
tors, we were surprised at the magnitude of the
gains. Even a simple model with static vectors
(CNN-static) performs remarkably well, giving
competitive results against the more sophisticated
deep learning models that utilize complex pool-
ing schemes (Kalchbrenner et al., 2014) or require
parse trees to be computed beforehand (Socher
et al., 2013). These results suggest that the pre-
trained vectors are good, ?universal? feature ex-
tractors and can be utilized across datasets. Fine-
tuning the pre-trained vectors for each task gives
still further improvements (CNN-non-static).
4.1 Multichannel vs. Single Channel Models
We had initially hoped that the multichannel ar-
chitecture would prevent overfitting (by ensuring
that the learned vectors do not deviate too far
from the original values) and thus work better than
the single channel model, especially on smaller
datasets. The results, however, are mixed, and fur-
ther work on regularizing the fine-tuning process
is warranted. For instance, instead of using an
additional channel for the non-static portion, one
could maintain a single channel but employ extra
dimensions that are allowed to be modified during
training.
1749
Most Similar Words for
Static Channel Non-static Channel
bad
good terrible
terrible horrible
horrible lousy
lousy stupid
good
great nice
bad decent
terrific solid
decent terrific
n?t
os not
ca never
ireland nothing
wo neither
!
2,500 2,500
entire lush
jez beautiful
changer terrific
,
decasia but
abysmally dragon
demise a
valiant and
Table 3: Top 4 neighboring words?based on cosine
similarity?for vectors in the static channel (left) and fine-
tuned vectors in the non-static channel (right) from the mul-
tichannel model on the SST-2 dataset after training.
4.2 Static vs. Non-static Representations
As is the case with the single channel non-static
model, the multichannel model is able to fine-tune
the non-static channel to make it more specific to
the task-at-hand. For example, good is most sim-
ilar to bad in word2vec, presumably because
they are (almost) syntactically equivalent. But for
vectors in the non-static channel that were fine-
tuned on the SST-2 dataset, this is no longer the
case (table 3). Similarly, good is arguably closer
to nice than it is to great for expressing sentiment,
and this is indeed reflected in the learned vectors.
For (randomly initialized) tokens not in the set
of pre-trained vectors, fine-tuning allows them to
learn more meaningful representations: the net-
work learns that exclamation marks are associ-
ated with effusive expressions and that commas
are conjunctive (table 3).
4.3 Further Observations
We report on some further experiments and obser-
vations:
? Kalchbrenner et al. (2014) report much
worse results with a CNN that has essentially
the same architecture as our single channel
model. For example, their Max-TDNN (Time
Delay Neural Network) with randomly ini-
tialized words obtains 37.4% on the SST-1
dataset, compared to 45.0% for our model.
We attribute such discrepancy to our CNN
having much more capacity (multiple filter
widths and feature maps).
? Dropout proved to be such a good regularizer
that it was fine to use a larger than necessary
network and simply let dropout regularize it.
Dropout consistently added 2%?4% relative
performance.
? When randomly initializing words not in
word2vec, we obtained slight improve-
ments by sampling each dimension from
U [?a, a] where a was chosen such that the
randomly initialized vectors have the same
variance as the pre-trained ones. It would be
interesting to see if employing more sophis-
ticated methods to mirror the distribution of
pre-trained vectors in the initialization pro-
cess gives further improvements.
? We briefly experimented with another set of
publicly available word vectors trained by
Collobert et al. (2011) on Wikipedia,
8
and
found that word2vec gave far superior per-
formance. It is not clear whether this is due
to Mikolov et al. (2013)?s architecture or the
100 billion word Google News dataset.
? Adadelta (Zeiler, 2012) gave similar results
to Adagrad (Duchi et al., 2011) but required
fewer epochs.
5 Conclusion
In the present work we have described a series of
experiments with convolutional neural networks
built on top of word2vec. Despite little tuning
of hyperparameters, a simple CNN with one layer
of convolution performs remarkably well. Our re-
sults add to the well-established evidence that un-
supervised pre-training of word vectors is an im-
portant ingredient in deep learning for NLP.
Acknowledgments
We would like to thank Yann LeCun and the
anonymous reviewers for their helpful feedback
and suggestions.
8
http://ronan.collobert.com/senna/
1750
References
Y. Bengio, R. Ducharme, P. Vincent. 2003. Neu-
ral Probabilitistic Language Model. Journal of Ma-
chine Learning Research 3:1137?1155.
R. Collobert, J. Weston, L. Bottou, M. Karlen, K.
Kavukcuglu, P. Kuksa. 2011. Natural Language
Processing (Almost) from Scratch. Journal of Ma-
chine Learning Research 12:2493?2537.
J. Duchi, E. Hazan, Y. Singer. 2011 Adaptive subgra-
dient methods for online learning and stochastic op-
timization. Journal of Machine Learning Research,
12:2121?2159.
L. Dong, F. Wei, S. Liu, M. Zhou, K. Xu. 2014. A
Statistical Parsing Framework for Sentiment Classi-
fication. CoRR, abs/1401.6330.
A. Graves, A. Mohamed, G. Hinton. 2013. Speech
recognition with deep recurrent neural networks. In
Proceedings of ICASSP 2013.
G. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever,
R. Salakhutdinov. 2012. Improving neural net-
works by preventing co-adaptation of feature detec-
tors. CoRR, abs/1207.0580.
K. Hermann, P. Blunsom. 2013. The Role of Syntax in
Vector Space Models of Compositional Semantics.
In Proceedings of ACL 2013.
M. Hu, B. Liu. 2004. Mining and Summarizing Cus-
tomer Reviews. In Proceedings of ACM SIGKDD
2004.
M. Iyyer, P. Enns, J. Boyd-Graber, P. Resnik 2014.
Political Ideology Detection Using Recursive Neural
Networks. In Proceedings of ACL 2014.
N. Kalchbrenner, E. Grefenstette, P. Blunsom. 2014. A
Convolutional Neural Network for Modelling Sen-
tences. In Proceedings of ACL 2014.
A. Krizhevsky, I. Sutskever, G. Hinton. 2012. Ima-
geNet Classification with Deep Convolutional Neu-
ral Networks. In Proceedings of NIPS 2012.
Q. Le, T. Mikolov. 2014. Distributed Represenations
of Sentences and Documents. In Proceedings of
ICML 2014.
Y. LeCun, L. Bottou, Y. Bengio, P. Haffner. 1998.
Gradient-based learning applied to document recog-
nition. In Proceedings of the IEEE, 86(11):2278?
2324, November.
X. Li, D. Roth. 2002. Learning Question Classifiers.
In Proceedings of ACL 2002.
T. Mikolov, I. Sutskever, K. Chen, G. Corrado, J. Dean.
2013. Distributed Representations of Words and
Phrases and their Compositionality. In Proceedings
of NIPS 2013.
T. Nakagawa, K. Inui, S. Kurohashi. 2010. De-
pendency tree-based sentiment classification using
CRFs with hidden variables. In Proceedings of ACL
2010.
B. Pang, L. Lee. 2004. A sentimental education:
Sentiment analysis using subjectivity summarization
based on minimum cuts. In Proceedings of ACL
2004.
B. Pang, L. Lee. 2005. Seeing stars: Exploiting class
relationships for sentiment categorization with re-
spect to rating scales. In Proceedings of ACL 2005.
A.S. Razavian, H. Azizpour, J. Sullivan, S. Carlsson
2014. CNN Features off-the-shelf: an Astounding
Baseline. CoRR, abs/1403.6382.
Y. Shen, X. He, J. Gao, L. Deng, G. Mesnil. 2014.
Learning Semantic Representations Using Convolu-
tional Neural Networks for Web Search. In Proceed-
ings of WWW 2014.
J. Silva, L. Coheur, A. Mendes, A. Wichert. 2011.
From symbolic to sub-symbolic information in ques-
tion classification. Artificial Intelligence Review,
35(2):137?154.
R. Socher, J. Pennington, E. Huang, A. Ng, C. Man-
ning. 2011. Semi-Supervised Recursive Autoen-
coders for Predicting Sentiment Distributions. In
Proceedings of EMNLP 2011.
R. Socher, B. Huval, C. Manning, A. Ng. 2012. Se-
mantic Compositionality through Recursive Matrix-
Vector Spaces. In Proceedings of EMNLP 2012.
R. Socher, A. Perelygin, J. Wu, J. Chuang, C. Manning,
A. Ng, C. Potts. 2013. Recursive Deep Models for
Semantic Compositionality Over a Sentiment Tree-
bank. In Proceedings of EMNLP 2013.
J. Wiebe, T. Wilson, C. Cardie. 2005. Annotating Ex-
pressions of Opinions and Emotions in Language.
Language Resources and Evaluation, 39(2-3): 165?
210.
S. Wang, C. Manning. 2012. Baselines and Bigrams:
Simple, Good Sentiment and Topic Classification.
In Proceedings of ACL 2012.
S. Wang, C. Manning. 2013. Fast Dropout Training.
In Proceedings of ICML 2013.
B. Yang, C. Cardie. 2014. Context-aware Learning
for Sentence-level Sentiment Analysis with Poste-
rior Regularization. In Proceedings of ACL 2014.
W. Yih, K. Toutanova, J. Platt, C. Meek. 2011. Learn-
ing Discriminative Projections for Text Similarity
Measures. Proceedings of the Fifteenth Confer-
ence on Computational Natural Language Learning,
247?256.
W. Yih, X. He, C. Meek. 2014. Semantic Parsing for
Single-Relation Question Answering. In Proceed-
ings of ACL 2014.
M. Zeiler. 2012. Adadelta: An adaptive learning rate
method. CoRR, abs/1212.5701.
1751
Proceedings of the ACL 2014 Workshop on Language Technologies and Computational Social Science, pages 61?65,
Baltimore, Maryland, USA, June 26, 2014.
c?2014 Association for Computational Linguistics
Temporal Analysis of Language through Neural Language Models
Yoon Kim
?
Yi-I Chiu
?
Kentaro Hanaki
?
Darshan Hegde
?
Slav Petrov

?
New York University, New York

Google Inc., New York
{yhk255, yic211, kh1615, dh1806}@nyu.edu
slav@google.com
Abstract
We provide a method for automatically
detecting change in language across time
through a chronologically trained neural
language model. We train the model on
the Google Books Ngram corpus to ob-
tain word vector representations specific
to each year, and identify words that have
changed significantly from 1900 to 2009.
The model identifies words such as cell
and gay as having changed during that
time period. The model simultaneously
identifies the specific years during which
such words underwent change.
1 Introduction
Language changes across time. Existing words
adopt additional senses (gay), new words are cre-
ated (internet), and some words ?die out? (many
irregular verbs, such as burnt, are being replaced
by their regularized counterparts (Lieberman et al.,
2007)). Traditionally, scarcity of digitized histori-
cal corpora has prevented applications of contem-
porary machine learning algorithms?which typi-
cally require large amounts of data?in such tem-
poral analyses. Publication of the Google Books
Ngram corpus in 2009, however, has contributed
to an increased interest in culturomics, wherein
researchers analyze changes in human culture
through digitized texts (Michel et al., 2011).
Developing computational methods for detect-
ing and quantifying change in language is of in-
terest to theoretical linguists as well as NLP re-
searchers working with diachronic corpora. Meth-
ods employed in previous work have been var-
ied, from analyses of word frequencies to more in-
volved techniques (Guolordava et al. (2011); Mi-
halcea and Nataste (2012)). In our framework,
we train a Neural Language Model (NLM) on
yearly corpora to obtain word vectors for each year
from 1900 to 2009. We chronologically train the
model by initializing word vectors for subsequent
years with the word vectors obtained from previ-
ous years.
We compare the cosine similarity of the word
vectors for same words in different years to iden-
tify words that have moved significantly in the
vector space during that time period. Our model
identifies words such as cell and gay as having
changed between 1900?2009. The model addi-
tionally identifies words whose change is more
subtle. We also analyze the yearly movement of
words across the vector space to identify the spe-
cific periods during which they changed. The
trained word vectors are publicly available.
1
2 Related Work
Previously, researchers have computationally in-
vestigated diachronic language change in various
ways. Mihalcea and Nastase (2012) take a super-
vised learning approach and predict the time pe-
riod to which a word belongs given its surrounding
context. Sagi et al. (2009) use a variation of Latent
Semantic Analysis to identify semantic change of
specific words from early to modern English. Wi-
jaya and Yeniterzi (2011) utilize a Topics-over-
Time model and K-means clustering to identify
periods during which selected words move from
one topic/cluster to another. They correlate their
findings with the underlying historical events dur-
ing that time. Gulordava and Baroni (2011) use
co-occurrence counts of words from 1960s and
1990s to detect semantic change. They find that
the words identified by the model are consistent
with evaluations from human raters. Popescu and
Strapparava (2013) employ statistical tests on fre-
quencies of political, social, and emotional words
to identify and characterize epochs.
Our work contributes to the domain in sev-
1
http://www.yoon.io
61
eral ways. Whereas previous work has generally
involved researchers manually identifying words
that have changed (with the exception of Gulor-
dava and Baroni (2011)), we are able to automat-
ically identify them. We are additionally able to
capture a word?s yearly movement and identify
periods of rapid change. In contrast to previous
work, we simultaneously identify words that have
changed and also the specific periods during which
they changed.
3 Neural Language Models
Similar to traditional language models, NLMs in-
volve predicting a set of future word given some
history of previous words. In NLMs however,
words are projected from a sparse, 1-of-V encod-
ing (where V is the size of the vocabulary) onto a
lower dimensional vector space via a hidden layer.
This allows for better representation of semantic
properties of words compared to traditional lan-
guage models (wherein words are represented as
indices in a vocabulary set). Thus, words that
are semantically close to one another would have
word vectors that are likewise ?close? (as measured
by a distance metric) in the vector space. In fact,
Mikolov et al. (2013a) report that word vectors ob-
tained through NLMs capture much deeper level
of semantic information than had been previously
thought. For example, if x
w
is the word vector
for word w, they note that x
apple
? x
apples
?
x
car
? x
cars
? x
family
? x
families
. That is, the
concept of pluralization is learned by the vector
representations (see Mikolov et al. (2013a) for
more examples).
NLMs are but one of many methods to ob-
tain word vectors?other techniques include La-
tent Semantic Analysis (LSA) (Deerwester et al.,
1990), Latent Dirichlet Allocation (LDA) (Blei et
al., 2003), and variations thereof. And even within
NLMs there exist various architectures for learn-
ing word vectors (Bengio et al. (2003); Mikolov
et al. (2010); Collobert et al. (2011); Yih et
al. (2011)). We utilize an architecture introduced
by Mikolov et al. (2013b), called the Skip-gram,
which allows for efficient estimation of word vec-
tors from large corpora.
In a Skip-gram model, each word in the corpus
is used to predict a window of surrounding words
(Figure 1). To ensure that words closer to the cur-
rent word are given more weight in training, dis-
Figure 1: Architecture of a Skip-gram model (Mikolov et al.,
2013b).
tant words are sampled less frequently.
2
Training
is done through stochastic gradient descent and
backpropagation. The word representations are
found in the hidden layer. Despite its simplicity?
and thus, computational efficiency?compared to
other NLMs, Mikolov et al. (2013b) note that the
Skip-gram is competitive with other vector space
models in the Semantic-Syntactic Word Relation-
ship test set when trained on the same data.
3.1 Training
The Google Books Ngram corpus contains
Ngrams from approximately 8 million books, or
6% of all books published (Lin et al., 2012). We
sample 10 million 5-grams from the English fic-
tion corpus for every year from 1850?2009. We
lower-case all words after sampling and restrict the
vocabulary to words that occurred at least 10 times
in the 1850?2009 corpus.
For the model, we use a window size of 4 and
dimensionality of 200 for the word vectors. Within
each year, we iterate over epochs until conver-
gence, where the measure of convergence is de-
fined as the average angular change in word vec-
tors between epochs. That is, if V (y) is the vo-
cabulary set for year y, and x
w
(y, e) is the word
vector for word w in year y and epoch number e,
we continue iterating over epochs until,
1
|V (y)|
?
w?V (y)
arccos
x
w
(y, e) ? x
w
(y, e? 1)
?x
w
(y, e)??x
w
(y, e? 1)?
is below some threshold. The learning rate is set
to 0.01 at the start of each epoch and linearly de-
creased to 0.0001.
2
Specifically, given a maximum window size of W , a ran-
dom integer R is picked from range [1, W ] for each training
word. The current training word is used to predict R previous
and R future words.
62
Most Changed Least Changed
Word Similarity Word Similarity
checked 0.3831 by 0.9331
check 0.4073 than 0.9327
gay 0.4079 for 0.9313
actually 0.4086 more 0.9274
supposed 0.4232 other 0.9272
guess 0.4233 an 0.9268
cell 0.4413 own 0.9259
headed 0.4453 with 0.9257
ass 0.4549 down 0.9252
mail 0.4573 very 0.9239
Table 1: Top 10 most/least changed words from 1900?2009,
based on cosine similarity of words in 2009 against their 1900
counterparts. Infrequent words (words that occurred less than
500 times) are omitted.
Once the word vectors for year y have con-
verged, we initialize the word vectors for year y+1
with the previous year?s word vectors and train
on the y + 1 data until convergence. We repeat
this process for 1850?2009. Using an open source
implementation in the gensim package, training
took approximately 4 days on a 2.9 GHz machine.
4 Results and Discussion
For the analysis, we treat 1850?1899 as an initial-
ization period and begin our study from 1900.
4.1 Word Comparisons
By comparing the cosine similarity between same
words across different time periods, we are able
to detect words whose usage has changed. We are
also able to identify words that did not change. Ta-
ble 1 has a list of 10 most/least changed words be-
tween 1900 and 2009. We note that almost all of
the least changed words are function words. For
the changed words, many of the identified words
agree with intuition (e.g. gay, cell, ass). Oth-
ers are not so obvious (e.g. checked, headed, ac-
tually). To better understand how these words
have changed, we look at the composition of their
neighboring words for 1900 and 2009 (Table 2).
As a further check, we search Google Books
for sentences that contain the above words. Below
are some example sentences from 1900 and 2009
with the word checked:
1900: ?However, he checked himself in time, saying ??
1900: ?She was about to say something further, but she
checked herself.?
2009: ?He?d checked his facts on a notepad from his back
pocket.?
2009: ?I checked out the house before I let them go inside.?
Word
Neighboring Words in
1900 2009
gay
cheerful lesbian
pleasant bisexual
brilliant lesbians
cell
closet phone
dungeon cordless
tent cellular
checked
checking checking
recollecting consulted
straightened check
headed
haired heading
faced sprinted
skinned marched
actually
evidently really
accidentally obviously
already nonetheless
Table 2: Top 3 neighboring words (based on cosine similar-
ity) specific to each time period for the words identified as
having changed.
At the risk of oversimplifying, the resulting sen-
tences indicate that in the past, checked was more
frequently used with the meaning ?to hold in re-
straint?, whereas now, it is more frequently used
with the meaning ?to verify by consulting an au-
thority? or ?to inspect so as to determine accu-
racy?. Given that check is a highly polysemous
word, this seems to be a case in which the popu-
larity of a word?s sense changed over time.
Conducting a similar exercise for actually, we
obtain the following sentences:
1900: ?But if ever he actually came into property, she must
recognize the change in his position.?
1900: ?Whenever a young gentleman was not actually
engaged with his knife and fork or spoon ??
2009: ?I can?t believe he actually did that!?
2009: ?Our date was actually one of the most fun and
creative ones I had in years.?
Like the above, this seems to be a case in
which the popularity of a word?s sense changed
over time (from ?to refer to what is true or real?
to ?to express wonder or surprise?).
4.2 Periods of Change
As we chronologically train the model year-by-
year, we can plot the time series of a word?s
distance to its neighboring words (from differ-
ent years) to detect periods of change. Figure 2
(above) has such a plot for the word cell compared
to its early neighbors, closet and dungeon, and the
more recent neighbors, phone and cordless. Fig-
ure 2 (below) has a similar plot for gay.
Such plots allow us to identify a word?s pe-
riod of change relative to its neighboring words,
63
Figure 2: (Above) Time trend of the cosine similarity be-
tween cell and its neighboring words in 1900 (closet, dun-
geon) and 2009 (phone, cordless). (Below) Similar plot of
gay and its neighboring words in 1900 (cheerful, pleasant)
and 2009 (lesbian, bisexual).
and thus provide context as to how it evolved.
This may be of use to researchers interested in
understanding (say) when gay started being used
as a synonym for homosexual. We can also iden-
tify periods of change independent of neighboring
words by analyzing the cosine similarity of a word
against itself from a reference year (Figure 3). As
some of the change is due to sampling and random
drift, we additionally plot the average cosine simi-
larity of all words against their reference points in
Figure 3. This allows us to detect whether a word?s
change during a given period is greater (or less)
than would be expected from chance. We note
that for cell, the identified period of change (1985?
2009) coincides with the introduction?and sub-
sequent adoption?of the cell phone by the gen-
eral public.
3
Likewise, the period of change for
gay agrees with the gay movement which began
around the 1970s (Wijaya and Yeniterzi, 2011).
4.3 Limitations
In the present work, identification of a changed
word is conditioned on its occurring often enough
3
http://library.thinkquest.org/04oct/02001/origin.htm
Figure 3: Plot of the cosine similarity of changed (gay, cell)
and unchanged (by, than) words against their 1900 starting
points. Middle line is the average cosine similarity of all
words against their starting points in 1900. Shaded region
corresponds to one standard deviation of errors.
in the study period. If a word?s usage decreased
dramatically (or stopped being used altogether),
its word vector will have remained the same and
hence it will not show up as having changed.
One way to overcome this may be to combine
the cosine distance and the frequency to define a
new metric that measures how a word?s usage has
changed.
5 Conclusions and Future Work
In this paper we provided a method for analyz-
ing change in the written language across time
through word vectors obtained from a chronolog-
ically trained neural language model. Extending
previous work, we are able to not only automat-
ically identify words that have changed but also
the periods during which they changed. While we
have not extensively looked for connections be-
tween periods identified by the model and real his-
torical events, they are nevertheless apparent.
An interesting direction of research could in-
volve analysis and characterization of the differ-
ent types of change. With a few exceptions, we
have been deliberately general in our analysis by
saying that a word?s usage has changed. We have
avoided inferring the type of change (e.g. semantic
vs syntactic, broadening vs narrowing, pejoration
vs amelioration). It may be the case that words that
undergo (say) a broadening in senses exhibit reg-
ularities in how they move about the vector space,
allowing researchers to characterize the type of
change that occurred.
64
References
Y. Bengio, R. Ducharme, P. Vincent. 2003. Neu-
ral Probabilitistic Language Model. Journal of Ma-
chine Learning Research 3:1137?1155.
D. Blei, A. Ng, M. Jordan, J. Lafferty. 2003. Latent
Dirichlet Allocation. Journal of Machine Learning
Research 3:993?1022.
R. Collobert, J. Weston, L. Bottou, M. Karlen, K.
Kavukcuglu, P. Kuksa. 2011. Natural Language
Processing (Almost) from Scratch. Journal of Ma-
chine Learning Research 12:2493?2537.
S. Deerwester, S. Dumais, G. Furnas, T. Landauer, R.
Harshman. 2011. Indexing by Latent Semantic
Analysis. Journal of the American Society for In-
formation Science, 41(6):391?407.
K. Gulordava, M. Baroni. 2011. A Distributional
Similarity Approach to the Detection of Semantic
Change in the Google Books Ngram Corpus. Pro-
ceedings of the GEMS 2011 Workshop.
E. Lieberman, J.B. Michel, J. Jackson, T. Tang, M.A.
Nowak. 2007. Quantifying the evolutionary dynam-
ics of language. Nature, 449: 716?716, October.
Y. Lin, J.B. Michel, E.L. Aiden, J. Orwant, W. Brock-
man, S. Petrov. 2012. Syntactic Annotations for the
Google Books Ngram Corpus. Proceedings of the
Association for Computational Linguistics 2012.
J.B Michel, Y.K. Shen, A.P. Aiden, A. Veres, M.K.
Gray, J.P. Pickett, D. Hoiberg, D. Clancy, P. Norvig,
J. Orwant, S.Pinker, M.A. Nowak, E.L. Aiden.
2011. Quantitative Analysis of Culture Using Mil-
lions of Digitized Books. Science, 331(6014): 176?
182, January.
R. Mihalcea, V. Nastase. 2012. Word Epoch Disam-
biguation: Finding How Words Change Over Time.
Proceedings of the Association for Computational
Linguistics 2012.
T. Mikolov, M. Karafiat, L. Burget, J. Cernocky, S.
Khudanpur. 2010. Recurrent Neural Network
Based Language Model. Proceedings of Inter-
speech.
T. Mikolov, W.T Yih, G. Zweig. 2013a. Linguistic
Regularities in Continuous Space Word Representa-
tions. Proceedings of NAACL-HLT 2013, 746?751.
T. Mikolov, K. Chen, G. Corrado, J.Dean. 2013b. Effi-
cient Estimation of Word Representations in Vector
Space arXiv Preprint.
O. Popescu, C. Strapparava. 2013. Behind the Times:
Detecting Epoch Changes using Large Corpora. In-
ternational Joint Conference on Natural Language
Processing, 347?355
E. Sagi, S. Kaufmann, B. Clark 2009. Semantic
Density Analysis: Comparing Word Meaning across
Time and Phonetic Space. Proceedings of the EACL
2009 Workshop on GEMS: 104?111.
D.T. Wijaya, R. Yeniterzi. 2011. Understanding se-
mantic change of words over centuries. Proceed-
ings of the 2011 international workshop on DEtect-
ing and Exploiting Cultural diversiTy on the social
web: 35?40.
W. Yih, K. Toutanova, J. Platt, C. Meek. 2011. Learn-
ing Discriminative Projections for Text Similarity
Measures. Proceedings of the Fifteenth Confer-
ence on Computational Natural Language Learning,
247?256.
65
Proceedings of the 5th Workshop on Computational Approaches to Subjectivity, Sentiment and Social Media Analysis, pages 79?83,
Baltimore, Maryland, USA. June 27, 2014.
c?2014 Association for Computational Linguistics
Credibility Adjusted Term Frequency: A Supervised Term Weighting
Scheme for Sentiment Analysis and Text Classification
Yoon Kim
New York University
yhk255@nyu.edu
Owen Zhang
zhonghua.zhang2006@gmail.com
Abstract
We provide a simple but novel supervised
weighting scheme for adjusting term fre-
quency in tf-idf for sentiment analysis
and text classification. We compare our
method to baseline weighting schemes and
find that it outperforms them on multiple
benchmarks. The method is robust and
works well on both snippets and longer
documents.
1 Introduction
Baseline discriminative methods for text classifi-
cation usually involve training a linear classifier
over bag-of-words (BoW) representations of doc-
uments. In BoW representations (also known as
Vector Space Models), a document is represented
as a vector where each entry is a count (or binary
count) of tokens that occurred in the document.
Given that some tokens are more informative than
others, a common technique is to apply a weight-
ing scheme to give more weight to discriminative
tokens and less weight to non-discriminative ones.
Term frequency-inverse document frequency (tf-
idf ) (Salton and McGill, 1983) is an unsupervised
weighting technique that is commonly employed.
In tf-idf, each token i in document d is assigned
the following weight,
w
i,d
= tf
i,d
? log
N
df
i
(1)
where tf
i,d
is the number of times token i occurred
in document d, N is the number of documents in
the corpus, and df
i
is the number of documents in
which token i occurred.
Many supervised and unsupervised variants of
tf-idf exist (Debole and Sebastiani (2003); Mar-
tineau and Finin (2009); Wang and Zhang (2013)).
The purpose of this paper is not to perform
an exhaustive comparison of existing weighting
schemes, and hence we do not list them here. In-
terested readers are directed to Paltoglou and Thel-
wall (2010) and Deng et al. (2014) for comprehen-
sive reviews of the different schemes.
In the present work, we propose a simple but
novel supervised method to adjust the term fre-
quency portion in tf-idf by assigning a credibil-
ity adjusted score to each token. We find that
it outperforms the traditional unsupervised tf-idf
weighting scheme on multiple benchmarks. The
benchmarks include both snippets and longer doc-
uments. We also compare our method against
Wang and Manning (2012)?s Naive-Bayes Support
Vector Machine (NBSVM), which has achieved
state-of-the-art results (or close to it) on many
datasets, and find that it performs competitively
against NBSVM. We additionally find that the
traditional tf-idf performs competitively against
other, more sophisticated methods when used with
the right scaling and normalization parameters.
2 The Method
Consider a binary classification task. Let C
i,k
be
the count of token i in class k, with k ? {?1, 1}.
Denote C
i
to be the count of token i over both
classes, and y
(d)
to be the class of document d.
For each occurrence of token i in the training set,
we calculate the following,
s
(j)
i
=
{
C
i,1
C
i
, if y
(d)
= 1
C
i,?1
C
i
, if y
(d)
= ?1
(2)
Here, j is the j-th occurrence of token i. Since
there are C
i
such occurrences, j indexes from 1 to
C
i
. We assign a score to token i by,
s?
i
=
1
C
i
C
i
?
j=1
s
(j)
i
(3)
Intuitively, s?
i
is the average likelihood of mak-
ing the correct classification given token i?s occur-
rence in the document, if i was the only token in
79
the document. In a binary classification case, this
reduces to,
s?
i
=
C
2
i,1
+ C
2
i,?1
C
2
i
(4)
Note that by construction, the support of s?
i
is
[0.5, 1].
2.1 Credibility Adjustment
Suppose s?
i
= s?
j
= 0.75 for two different tokens
i and j, but C
i
= 5 and C
j
= 100. Intuition sug-
gests that s?
j
is a more credible score than s?
i
, and
that s?
i
should be shrunk towards the population
mean. Let s? be the (weighted) population mean.
That is,
s? =
?
i
C
i
? s?
i
C
(5)
where C is the count of all tokens in the corpus.
We define credibility adjusted score for token i to
be,
s
i
=
C
2
i,1
+ C
2
i,?1
+ s? ? ?
C
2
i
+ ?
(6)
where ? is an additive smoothing parameter. If
C
i,k
?s are small, then s
i
? s? (otherwise, s
i
? s?
i
).
This is a form of Buhlmann credibility adjustment
from the actuarial literature (Buhlmann and Gisler,
2005). We subsequently define tf , the credibility
adjusted term frequency, to be,
tf
i,d
= (0.5 + s?
i
) ? tf
i,d
(7)
and tf is replaced with tf . That is,
w
i,d
= tf
i,d
? log
N
df
i
(8)
We refer to above as cred-tf-idf hereafter.
2.2 Sublinear Scaling
It is common practice to apply sublinear scaling to
tf . A word occurring (say) ten times more in a
document is unlikely to be ten times as important.
Paltoglou and Thelwall (2010) confirm that sub-
linear scaling of term frequency results in signif-
icant improvements in various text classification
tasks. We employ logarithmic scaling, where tf is
replaced with log(tf) + 1. For our method, tf is
simply replaced with log(tf) + 1. We found vir-
tually no difference in performance between log
scaling and other sublinear scaling methods (such
as augmented scaling, where tf is replaced with
0.5 +
0.5+tf
max tf
).
2.3 Normalization
Using normalized features resulted in substan-
tial improvements in performance versus using
un-normalized features. We thus use
?
x
(d)
=
x
(d)
/||x
(d)
||
2
in the SVM, where x
(d)
is the fea-
ture vector obtained from cred-tf-idf weights for
document d.
2.4 Naive-Bayes SVM (NBSVM)
Wang and Manning (2012) achieve excellent
(sometimes state-of-the-art) results on many
benchmarks using binary Naive Bayes (NB) log-
count ratios as features in an SVM. In their frame-
work,
w
i,d
= 1{tf
i,d
} log
(df
i,1
+ ?)/
?
i
(df
i,1
+ ?)
(df
i,?1
+ ?)/
?
i
(df
i,?1
+ ?)
(9)
where df
i,k
is the number of documents that con-
tain token i in class k, ? is a smoothing parameter,
and 1{?} is the indicator function equal to one if
tf
i,d
> 0 and zero otherwise. As an additional
benchmark, we implement NBSVM with ? = 1.0
and compare against our results.
1
3 Datasets and Experimental Setup
We test our method on both long and short text
classification tasks, all of which were used to es-
tablish baselines in Wang and Manning (2012).
Table 1 has summary statistics of the datasets. The
snippet datasets are:
? PL-sh: Short movie reviews with one sen-
tence per review. Classification involves de-
tecting whether a review is positive or nega-
tive. (Pang and Lee, 2005).
2
? PL-sub: Dataset with short subjective movie
reviews and objective plot summaries. Clas-
sification task is to detect whether the sen-
tence is objective or subjective. (Pang and
Lee, 2004).
And the longer document datasets are:
1
Wang and Manning (2012) use the same ? but they dif-
fer from our NBSVM in two ways. One, they use l
2
hinge
loss (as opposed to l
1
loss in this paper). Two, they in-
terpolate NBSVM weights with Multivariable Naive Bayes
(MNB) weights to get the final weight vector. Further, their
tokenization is slightly different. Hence our NBSVM results
are not directly comparable. We list their results in table 2.
2
https://www.cs.cornell.edu/people/pabo/movie-review-
data/. All the PL datasets are available here.
80
Dataset Length Pos Neg Test
PL-sh 21 5331 5331 CV
PL-sub 24 5000 5000 CV
PL-2k 746 1000 1000 CV
IMDB 231 12.5k 12.5k 25k
AthR 355 480 377 570
XGraph 276 584 593 784
Table 1: Summary statistics for the datasets.
Length is the average number of unigram tokens
(including punctuation) per document. Pos/Neg is
the number of positive/negative documents in the
training set. Test is the number of documents in
the test set (CV means that there is no separate
test set for this dataset and thus a 10-fold cross-
validation was used to calculate errors).
? PL-2k: 2000 full-length movie reviews that
has become the de facto benchmark for sen-
timent analysis (Pang and Lee, 2004).
? IMDB: 50k full-length movie reviews (25k
training, 25k test), from IMDB (Maas et al.,
2011).
3
? AthR, XGraph: The 20-Newsgroup dataset,
2nd version with headers removed.
4
Clas-
sification task is to classify which topic a
document belongs to. AthR: alt.atheism vs
religion.misc, XGraph: comp.windows.x vs
comp.graphics.
3.1 Support Vector Machine (SVM)
For each document, we construct the feature vec-
tor x
(d)
using weights obtained from cred-tf-idf
with log scaling and l
2
normalization. For cred-
tf-idf, ? is set to 1.0. NBSVM and tf-idf (also with
log scaling and l
2
normalization) are used to es-
tablish baselines. Prediction for a test document is
given by
y
(d)
= sign (w
T
x
(d)
+ b) (10)
In all experiments, we use a Support Vector Ma-
chine (SVM) with a linear kernel and penalty pa-
rameter of C = 1.0. For the SVM, w, b are ob-
tained by minimizing,
w
T
w+C
N
?
d=1
max(0, 1?y
(d)
(w
T
x
(d)
+b)) (11)
using the LIBLINEAR library (Fan et al., 2008).
3
http://ai.stanford.edu/ amaas/data/sentiment/index.html
4
http://people.csail.mit.edu/jrennie/20Newsgroups
3.2 Tokenization
We lower-case all words but do not perform any
stemming or lemmatization. We restrict the vo-
cabulary to all tokens that occurred at least twice
in the training set.
4 Results and Discussion
For PL datasets, there are no separate test sets and
hence we use 10-fold cross validation (as do other
published results) to estimate errors. The standard
train-test splits are used on IMDB and Newsgroup
datasets.
4.1 cred-tf-idf outperforms tf-idf
Table 2 has the comparison of results for the dif-
ferent datasets. Our method outperforms the tra-
ditional tf-idf on all benchmarks for both uni-
grams and bigrams. While some of the differ-
ences in performance are significant at the 0.05
level (e.g. IMDB), some are not (e.g. PL-2k). The
Wilcoxon signed ranks test is a non-parametric
test that is often used in cases where two classi-
fiers are compared over multiple datasets (Dem-
sar, 2006). The Wilcoxon signed ranks test indi-
cates that the overall outperformance is significant
at the <0.01 level.
4.2 NBSVM outperforms cred-tf-idf
cred-tf-idf did not outperform Wang and Manning
(2012)?s NBSVM (Wilcoxon signed ranks test p-
value = 0.1). But it did outperform our own im-
plementation of NBSVM, implying that the ex-
tra modifications by Wang and Manning (2012)
(i.e. using squared hinge loss in the SVM and in-
terpolating between NBSVM and MNB weights)
are important contributions of their methodology.
This was especially true in the case of shorter doc-
uments, where our uninterpolated NBSVM per-
formed significantly worse than their interpolated
NBSVM.
4.3 tf-idf still performs well
We find that tf-idf still performs remarkably well
with the right scaling and normalization parame-
ters. Indeed, the traditional tf-idf outperformed
many of the more sophisticated methods that
employ distributed representations (Maas et al.
(2011); Socher et al. (2011)) or other weighting
schemes (Martineau and Finin (2009); Deng et al.
(2014)).
81
Method PL-sh PL-sub PL-2k IMDB AthR XGraph
tf-idf-uni 77.1 91.5 88.1 88.6 85.8 88.4
tf-idf-bi 78.0 92.3 89.2 90.9 86.5 88.0
Our cred-tfidf-uni 77.5 91.8 88.7 88.8 86.5 89.8
results cred-tfidf-bi 78.6 92.8 89.7 91.3 87.4 88.9
NBSVM-uni 75.5 89.9 87.0 85.9 86.7 88.5
NBSVM-bi 76.0 90.5 89.5 90.5 86.7 88.1
MNB-uni 77.9 92.6 83.5 83.6 85.0 90.0
Wang & MNB-bi 79.0 93.6 85.9 86.6 85.1 91.2
Manning NBSVM-uni 78.1 92.4 87.8 88.3 87.9 91.2
NBSVM-bi 79.4 93.2 89.5 91.2 87.7 90.7
Appr. Tax.* - - 90.2 - - -
Str. SVM* - - 92.4 - - -
aug-tf-mi - - 87.8 88.0 - -
Other Disc. Conn. - - - 91.4 - -
results Word Vec.* - 88.6 88.9 88.9 - -
LLR - - 90.4 - - -
RAE 77.7 - - - - -
MV-RNN 79.0 - - - - -
Table 2: Results of our method (cred-tf-idf ) against baselines (tf-idf, NBSVM), using unigrams and
bigrams. cred-tf-idf and tf-idf both use log scaling and l
2
normalization. Best results (that do not use
external sources) are underlined, while top three are in bold. Rows 7-11 are MNB and NBSVM results
from Wang and Manning (2012). Our NBSVM results are not directly comparable to theirs (see footnote
1). Methods with * use external data or software. Appr. Tax: Uses appraisal taxonomies from WordNet
(Whitelaw et al., 2005). Str. SVM: Uses OpinionFinder to find objective versus subjective parts of the
review (Yessenalina et al., 2010). aug-tf-mi: Uses augmented term-frequency with mutual information
gain (Deng et al., 2014). Disc. Conn.: Uses discourse connectors to generate additional features (Trivedi
and Eisenstein, 2013). Word Vec.: Learns sentiment-specific word vectors to use as features combined
with BoW features (Maas et al., 2011). LLR: Uses log-likelihood ratio on features to select features
(Aue and Gamon, 2005). RAE: Recursive autoencoders (Socher et al., 2011). MV-RNN: Matrix-Vector
Recursive Neural Networks (Socher et al., 2012).
5 Conclusions and Future Work
In this paper we presented a novel supervised
weighting scheme, which we call credibility ad-
justed term frequency, to perform sentiment anal-
ysis and text classification. Our method outper-
forms the traditional tf-idf weighting scheme on
multiple benchmarks, which include both snippets
and longer documents. We also showed that tf-idf
is competitive against other state-of-the-art meth-
ods with the right scaling and normalization pa-
rameters.
From a performance standpoint, it would be in-
teresting to see if our method is able to achieve
even better results on the above tasks with proper
tuning of the ? parameter. Relatedly, our method
could potentially be combined with other super-
vised variants of tf-idf, either directly or through
ensembling, to improve performance further.
References
A. Aue, M. Gamon. 2005. Customizing sentiment
classifiers to new domains: A case study. Proceed-
ings of the International Conference on Recent Ad-
vances in NLP, 2011.
H. Buhlmann, A. Gisler. 2005. A Course in Credi-
bility Theory and its Applications Springer-Verlag,
Berlin.
F. Debole, F. Sebastiani. 2003. Supervised Term
Weighting for Automated Text Categorization Pro-
ceedings of the 2003 ACM symposium on Applied
Computing. 784?788.
J. Demsar. 2006. Statistical Comparison of classifiers
over multiple data sets. Journal of Machine Learn-
ing Research, 7:1-30. 2006.
Z. Deng, K. Luo, H. Yu. 2014. A study of supervised
term weighting scheme for sentiment analysis Ex-
82
pert Systems with Applications. Volume 41, Issue 7,
3506?3513.
R. Fan, K. Chang, J. Hsieh, X. Wang, C. Lin. 2008. LI-
BLINEAR: A library for large linear classification.
Journal of Machine Learning Research, 9:1871?
1874, June.
A. Maas, R. Daly, P. Pham, D. Huang, A. Ng, C. Potts.
2011. Learning Word Vectors for Sentiment Analy-
sis. In Proceedings of ACL 2011.
J. Martineau, T. Finin. 2009. Delta TFIDF: An Im-
proved Feature Space for Sentiment Analysis. Third
AAAI International Conference on Weblogs and So-
cial Media
G. Paltoglou, M. Thelwall. 2010. A study of Infor-
mation Retrieval weighting schemes for sentiment
analysis. In Proceedings of ACL 2010.
B. Pang, L. Lee. 2004. A sentimental education:
Sentiment analysis using subjectivity summarization
based on minimum cuts. In Proceedings of ACL
2004.
B. Pang, L. Lee. 2005. Seeing stars: Exploiting class
relationships for sentiment categorization with re-
spect to rating scales. In Proceedings of ACL 2005.
R. Socher, J. Pennington, E. Huang, A. Ng, C. Man-
ning. 2011. Semi-Supervised Recursive Autoen-
coders for Predicting Sentiment Distributions. In
Proceedings of EMNLP 2011.
R. Socher, B. Huval, C. Manning, A. Ng. 2012. Se-
mantic Compositionality through Recursive Matrix-
Vector Spaces. In Proceedings of EMNLP 2012.
R. Trivedi, J. Eisenstein. 2013. Discourse Connec-
tors for Latent Subjectivity in Sentiment Analysis.
In Proceedings of NAACL 2011.
G. Salton, M. McGill. 1983. Introduction to Modern
Information Retrieval. McGraw-Hill.
S. Wang, C. Manning. 2012. Baselines and Bigrams:
Simple, Good Sentiment and Topic Classification.
In proceedings of ACL 2012.
D. Wang, H. Zhang. 2013. Inverse-Category-
Frequency Based Supervised Term Weighting
Schemes for Text Categorization. Journal of Infor-
mation Science and Engineering 29, 209?225.
C. Whitelaw, N. Garg, S. Argamon. 2005. Using ap-
praisal taxonomies for sentiment analysis. In Pro-
ceedings of CIKM 2005.
A. Yessenalina, Y. Yue, C. Cardie. 2010. Multi-
level Structured Models for Document-level Senti-
ment Classification. In Proceedings of ACL 2010.
83
