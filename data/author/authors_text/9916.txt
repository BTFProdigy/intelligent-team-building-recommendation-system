Proceedings of ACL-08: HLT, Short Papers (Companion Volume), pages 173?176,
Columbus, Ohio, USA, June 2008. c?2008 Association for Computational Linguistics
Distributed Listening: A Parallel Processing Approach to Automatic 
Speech Recognition 
 
Yolanda McMillian Juan E. Gilbert 
3101 Shelby Center 3101 Shelby Center 
Auburn University Auburn University 
Auburn, AL  36849-5347, USA Auburn, AL  36849-5347, USA 
mcmilym@auburn.edu gilbert@auburn.edu 
 
 
 
 
 
 
Abstract 
While speech recognition systems have come 
a long way in the last thirty years, there is still 
room for improvement.  Although readily 
available, these systems are sometimes inac-
curate and insufficient.  The research pre-
sented here outlines a technique called 
Distributed Listening which demonstrates no-
ticeable improvements to existing speech rec-
ognition methods.  The Distributed Listening 
architecture introduces the idea of multiple, 
parallel, yet physically separate automatic 
speech recognizers called listeners. Distrib-
uted Listening also uses a piece of middleware 
called an interpreter.  The interpreter resolves 
multiple interpretations using the Phrase 
Resolution Algorithm (PRA). These efforts 
work together to increase the accuracy of the 
transcription of spoken utterances. 
1 Introduction 
Research in the area of natural language processing 
has been on-going for over thirty years (Natural 
Language Software Registry, 2004; Jurafsky and 
Martin, 2000); however, there is still room for im-
provement with mainstream speech recognition 
systems (Deng, 2004). Distributed Listening will 
further research in this area.  The concept is based 
around the idea of multiple speech input sources.  
Previous research activities involved a single mi-
crophone with multiple, separate recognizers that 
all yielded improvements in accuracy.  Distributed 
Listening uses multiple, parallel speech recogniz-
ers, with each recognizer having its own input 
source (Gilbert, 2005).  Each recognizer is a lis-
tener.  Once input is collected from the listeners, 
one machine, the interpreter, processes all of the 
input (see figure 1).  To process the input, a phrase 
resolution algorithm is used. 
 This approach is analogous to a crime scene 
with multiple witnesses (the listeners) and a detec-
tive (the interpreter) who pieces together the sto-
ries of the witnesses using his/her knowledge of 
crime scenes to form a hypothesis of the actual 
event.  Each witness will have a portion of the 
story that is the same as the other witnesses.  It is 
up to the detective to fill in the blanks.  With Dis-
tributed Listening, the process is very similar.  
Each listener will have common recognition results 
and the interpreter will use the phrase resolution 
algorithm to resolve conflicts. 
 
 
Figure 1. Distributed Listening Architecture 
173
2 Background 
Automatic speech recognition systems convert a 
speech signal into a sequence of words, usually 
based on the Hidden Markov Model (HMM), in 
which words are constructed from a sequence of 
states (Baum, 1972; Young et al, 1989; Young 
1990; Furui, 2002). 
There are several systems that used the HMM 
along with multiple speech recognizers in an effort 
to improve speech recognition, as discussed next. 
2.1 Enhanced Majority Rules 
Barry (et al, 1994) took three different Automatic 
Speech Recognition (ASR) systems, along with an 
Enhanced Majority Rules (EMR) software 
algorithm.  Each of the three individual systems 
received the same input, performed speech 
recognition, and sent the result to the master 
system.   
The EMR resolved inconsistencies by looking 
for agreement from the individual systems for the 
recognized word.  If there was no majority agree-
ment, the EMR looked to the second word for 
agreement before relying on the distance scores.  
This architecture produced better recognition accu-
racy than each of the individual systems.   
While an improvement was made, the architec-
ture can suffer from distorted input.  Since each 
system receives the same input, if the input signal 
is not good, then all of the individual systems will 
receive bad input. 
2.2 Virtual Intelligent Codriver 
The Virtual Intelligent Codriver (VICO) project 
also used multiple ASR systems in parallel (Brutti 
et al, 2004; Cristoforetti et al, 2003).  Each ASR 
received the same input and had its own language 
model.  The resulting interpretations from each 
ASR are compared to each other using confidence 
scores.  The interpretation with the highest 
recognition accuracy is selected.  While the 
experiments resulted in noticeable improvements 
over the individual ASR systems, there are two 
shortcomings.  First, if the input signal is distorted, 
then each recognizer will receive bad input.  
Secondly, if each recognizer contains a piece of the 
optimal interpretation, then this architecture falls 
short. 
2.3 Recognized Output Voting Error Re-
duction 
The Recognizer Output Voting Error Reduction 
(ROVER) system is a composite of multiple ASR 
systems that uses a voting process to reconcile 
differences in the individual ASR system outputs 
(Fiscus, 1997).  Multiple interpretations are passed 
from each recognition engine to the alignment 
module.  Once aligned, the voting module is 
called.  The voting module scores each word 
within the alignment vertically and the words with 
the highest scores are chosen.  On average, this 
composite ASR system produces a lower error rate 
than any of the individual systems, but suffers 
from order of combination and ties. 
2.4 Modified ROVER 
To solve the problem that results from the order of 
combination and ties of the original ROVER 
system, Schwenk proposed a modified ROVER 
system that used a dynamic programming 
algorithm built on language models (Schwenk and 
Gauvain, 2000).  The modified ROVER system 
resulted in a reduction in the word error rates over 
the original ROVER system. 
3 Distributed Listening  
Distributed Listening builds on the architectures 
that use multiple speech recognizers and enhances 
it with the use of multiple input sources. 
Distributed Listening is made of three signifi-
cant parts: Listeners, an Interpreter, and a Phrase 
Resolution Algorithm. 
3.1 Listeners 
Distributed Listening uses multiple speech recog-
nizers, working in parallel, to process the spoken 
input.  Each recognizer is called a listener and is 
equipped with it?s own input source.  Each listener 
is a separate, physical computing device with its 
own memory, processor, and disk space.  Each lis-
tener collects input from the user.  The result of 
each listener is passed to the interpreter. 
3.2 Interpreter 
Once input is collected from the listeners, the input 
is passed to the interpreter.  The interpreter will 
174
process all of the input collected from each listener 
as described next. 
3.3 Phrase Resolution Algorithm  
To resolve multiple interpretations from the listen-
ers, the Phrase Resolution Algorithm (PRA) is 
used. 
The underlying grammar of the PRA is based on 
an N-gram language model.  An N-gram language 
model is used by the recognizer to predict word 
sequences.  Distributed Listening uses an N-gram 
of size 1, also known as a unigram.  The grammar 
consists of known utterances that can be made by 
the user. 
The unigram grammar is stored in a phrase 
database.  The grammar is organized according to 
individual words and phrases.  Each phrase is 
placed in a table.  The phrases are broken down 
into their individual words and placed in another 
table.  The table of words keeps a count of the 
number of times each word appears in each phrase, 
resembling the unigram language model. 
To determine the most likely spoken phrase, 
queries are made against the collection of individ-
ual words, also known as the complete word set.  
The queries try to identify matching phrase(s) 
based on specified words.  The matching phrase(s) 
with the highest concentrations of words is re-
turned by the query. 
The word concentration is determined by com-
paring the length of the phrase with the number of 
matching words found in the complete word set.  
The concentration of the number of words found 
within each phrase is calculated using all interpre-
tations from the listeners.  The phrase(s) with the 
highest concentration of words is the most likely 
spoken phrase. 
4 System Architecture  
There are multiple models for Distributed Listen-
ing; Homogeneous, Heterogeneous, and Hybrid.  
The Homogeneous model uses the same grammar 
for each listener.  Within the Heterogeneous 
model, each listener uses a different grammar.  The 
Hybrid model contains a combination of the Ho-
mogenous and Heterogeneous models. 
 
 
4.1 Homogeneous 
In a homogenous Distributed Listening architec-
ture, each listener has the same grammar or lan-
guage model.  Although all of the listeners are 
identical in capturing the input, this architecture 
allows for the different perspectives of the utter-
ances to also be captured. 
4.2 Heterogeneous 
Heterogeneous architectures use different gram-
mars or language models on each listener.  Each 
listener has its own input source and recognizer 
and implies a distributed grammar/language model.  
This allows for flexibility as very large grammars 
and vocabularies can be distributed across several 
listeners. 
4.3 Hybrid 
The hybrid architecture is a homogenous architec-
ture of heterogeneous Distributed Listening nodes, 
as shown in figure 2.  This gives the embedded 
environment the ability to recognize multiple lan-
guages, as well as accommodate translations of 
inter-mixed spoken language. 
 
 
Figure 2. Hybrid Distributed Listening Architecture 
5 Conclusion 
The goal of Distributed Listening research is to 
take a unique approach in order to enhance the 
success of the traditional approaches to speech 
recognition.  The approach of Distributed Listen-
ing directly mimics people.  The psychology do-
main has shown that people use a form of 
Distributed Listening called Dichotic Listening, 
where people listen to two voices, one in each ear, 
175
at the same time (Bruder, 2004).  Distributed Lis-
tening is a natural extension of Dichotic Listening, 
where computers are listening in the same manner 
as people.  Distributed Listening is an attempt to 
enable computer systems to perform similar to 
humans while decreasing error rates. 
Preliminary studies have shown a decrease in 
error rates.  Early results indicate that Distributed 
Listening is a viable alternative to current speech 
recognition systems.  Additional studies are being 
planned that will effectively test the Phrase 
Resolution Algorithm. 
References  
Barry, T., Solz, T., Reising, J. & Williamson, D. The 
simultaneous use of three machine speech recogni-
tion systems to increase recognition accuracy, In 
Proceedings of the IEEE 1994 National Aerospace 
and Electronics Conference, vol.2, pp. 667 - 671, 
1994. 
Baum, L.E. An inequality and associated maximiza-
tion technique in statistical estimation for prob-
abilistic functions of Markov process. Inequalities 
3, 1-8, 1972. 
Bruder, G.E., Stewart, J.W., McGrath, P.J., Deliyan-
nides, D., Quitkin, F.M. Dichotic listening tests of 
functional brain asymmetry predict response to 
fluoxetine in depressed women and men. Neuro-
psychopharmacology, 29(9), pp. 1752-1761, 2004. 
Brutti, A., Coletti, P.,  Cristoforetti, L., Geutner, P., 
Giacomini, A.,  Gretter, R., et al Use of Multiple 
Speech Recognition Units in a In-car Assistance 
Systems, chapter in "DSP for Vehicle and Mobile 
Systems", Kluwer Publishers, 2004. 
Cristoforetti, L., Matassoni, M., Omologo, M. & 
Svaizer, P., Use of parallel recognizers for robust 
in-car speech interaction, In Proceedings of the 
IEEE International Conference on Acoustic, Speech, 
and Signal Processing [ICASSP 2003], Hong-Kong, 
2003. 
Deng, L. & Huang, X.,  Challenges in adopting speech 
recognition, Communications of the ACM, vol. 47, 
no. 1, pp. 69-75, January 2004. 
Fiscus, J. G., A post-processing system to yield re-
duced error word rates: Recognizer output voting 
error reduction (ROVER). In IEEE Workshop on 
Automatic Speech Recognition and Understanding, 
pp. 347?354, 1997. 
Furui, S., Recent progress in spontaneous speech rec-
ognition and understanding, In Proceedings of the 
IEEE Workshop on Multimedia Signal Processing, 
2002. 
Gilbert, J. E.  (2005). Distributed Listening Research.  
In Proceedings of AVIOS Speech Technology Track, 
San Francisco, California, SpeechTEK West, pp. 1 ? 
10. 
Jurafsky, D. & Martin, J., Speech and Language Proc-
essing, Prentice Hall, 2000. 
Natural Language Software Registry, [Online]. Availa-
ble: http://registry.dfki.de/, 2004. 
Schwenk, H. & Gauvain, J., Improved ROVER using 
Language Model Information, In ISCA ITRW 
Workshop on Automatic Speech Recognition: Chal-
lenges for the new Millenium, Paris, pp. 47?52, 
2000. 
Young, S.R., Use of dialog, pragmatics and semantics 
to enhance speech recognition, Speech Communi-
cation, vol. 9, pp. 551-564, 1990. 
Young, S.R.,  Hauptmann, A.G. , Ward, W.H. , Smith, 
E.T. & Werner, P., High level knowledge sources in 
usable speech recognition systems, Communica-
tions of the ACM, vol. 31, no. 2, pp. 183-194, 1989. 
176
Proceedings of the NAACL HLT 2010 Workshop on Speech and Language Processing for Assistive Technologies, pages 44?52,
Los Angeles, California, June 2010. c?2010 Association for Computational Linguistics
An Approach for Anonymous Spelling for Voter Write-Ins  Using Speech Interaction   Shane? Dawkins Juan E. Gilbert Auburn University Clemson University 3101 Shelby Center for Technology 100 McAdams Hall Auburn University, AL 36849, USA Clemson, SC 29634, USA stw0004@auburn.edu juan@clemson.edu       Abstract 
Today, the technology used for voting does not fully address the issues that disabled vot-ers are confronted with during elections.  Vot-ers, including those with most disabilities, should be able to vote and verify his or her ballot during elections without the assistance of others.  In order for this to happen, a uni-versal design should be incorporated into the development of all voting systems.  The re-search presented here embraces the needs of those who are disabled.  The primary objec-tive of this research was to develop a system in which a person, can efficiently, anony-mously, and independently write-in a candi-date?s name during an election.  The method presented here uses speech interaction and name prediction to allow voters to privately spell the name of the candidate they intend to write-in.  A study was performed to determine the effectiveness and efficiency of the system.  The results of the study showed that spelling a name using the predictive method developed is an effective and efficient solution to the aforementioned issues. 1 Introduction* 
                                                                  
The 2000 United States Presidential Election will always be remembered for its voting irregularities.  The issues with the ballot design during that elec-tion led to skepticism of other voting systems and technologies.  Not only were there questions re-garding the difficulty interpreting the voter's inten-tion, the focus also shifted to the issues surrounding disabled voters.  The key issue was that disabled voters needed a way to vote inde-pendently and anonymously, while still maintain-ing system security and efficiency. All voters, including those with most disabilities, should be able to vote and verify his or her ballot during elec-tions privately, without assistance.  Today, a prop-erly designed interface is one of the key aspects to running a successful election. As technology for electronic voting systems continues to develop, there is an increased need for universal design in these systems (VVSG Chapter 3, 2007).  A universal design ensures that systems are as usable as possible by as many people as pos-sible regardless of age, ability or situation (Center for Universal Design, 2004).  By focusing on the voter and their needs, the design of electronic vot-ing systems will far surpass the ballot designs of the 2000 election.   With the security of voting systems constantly being a major concern, it is often difficult to im-plement voting technology that incorporates a se-cure universal design.  Some developers today                                                                                                  
44
address this issue through the design of their elec-tronic voting systems (Prime III, 2009); however, these electronic voting systems have yet to inte-grate universal design into the writing-in of a can-didate?s name. The objective of this research is to develop a system in which a person, including those with most disabilities, can efficiently, anonymously, and effectively spell a candidate?s name through speech interaction. The method presented in this paper is a predictive approach to spelling through speech interaction.  This allows voters to quickly and anonymously spell a candidate?s name for any position or office during the voting process.  The study performed intends to capture and analyze the effectiveness of writing in a candidate?s name anonymously through speech.   The results of this study could lead to the adaptation of this system in search functions for various other applications. 2 Background  2.1 Election Write-Ins The method of writing in a candidate?s name for a particular United States governing office dates back to the early 19th century (Official Election Site, 2007).  Prior to the 1800s, voters would sim-ply call out their choices to a judge and election clerks tallying the votes (Jones, 2003).  After the 12th amendment was passed in 1804, paper ballots became the standard method for voting.  Voters would bring their own slips of paper as the ballot, on which they wrote candidate?s names (History of the Paper Ballot, 2009).  Today, a write-in candi-date is a candidate whose name does not appear on the ballot.  Voters can vote for a write-in candidate by marking the write-in indicator, and writing the candidate?s name in space provided on the ballot (Write-in Candidate Requirements, 2010).  2.2 Prime III Electronic Voting System Prime III is a research prototype electronic voting system.  It is a secure, multimodal electronic vot-ing system that delivers the necessary system secu-rity, integrity and user satisfaction safeguards in a user-friendly interface that accommodates all peo-ple regardless of ability (Prime III, 2009). With Prime III, voters are able to cast their votes through visual interaction and/or through speech interac-tion. This multimodal approach to electronic vot-
ing enables Prime III to incorporate a universal design, which allows nearly all voters to cast their votes independently and privately.   Due to the anonymous nature of voting systems, the candidates that the voter selects must be kept private.  Since Prime III integrates speech interac-tion into the voting process, bystanders may be afforded the opportunity to compromise the pri-vacy of the voter. Bystanders must not be able to hear whom a voter selects for any office, or a voter?s decision for any proposition in order to en-sure voter ? ballot anonymity.  Therefore, during the voting process, voters cannot simply say the name of the candidates for which s/he wishes to vote.  The speech interface of Prime III imple-ments an interaction in which the voter does not need to explicitly verbalize for which candidate they intend to vote. The Prime III system uses speech to convey the information on the screen to the voter (e.g. candi-dates listed for a particular office) through the use of a microphone headset. When an option is pre-sented, the voter chooses the option by speaking, ?Vote? into the microphone. If the voter does not wish to choose the current option, they do not say anything and the system moves on to the next prompt.  An example dialogue is as follows: Prime III: ?To vote for the Democratic Party, say vote <beep>? Voter: <says nothing> Prime III: ?To vote for the Republican Party, say vote <beep>? Voter: ?Vote? In this example, the voter chose to vote for the Republican Party. Bystanders only hear the voter saying ?Vote,? instead of a voter?s actual choice, which ensures the privacy of the voter and the anonymity of the voter?s ballot.   The universal accessibility and anonymous na-ture of electronic voting highlights the incomplete-ness in the design of writing in a candidate?s name with Prime III. Currently, voters have the ability to write-in a candidate?s name in one way: using an onscreen keyboard (Figure 1).  When a voter chooses not to vote for a predetermined candidate and to write-in a candidate?s name, the keyboard is shown, and the user must use the touchscreen to type the candidate?s name. Since this portion of the system is not a multimodal design, the voter must be sighted to write-in a candidate?s name. 
45
 Figure 1. Prime III On-screen Keyboard 2.3 Universal Accessibility in Voting Help America Vote Act (HAVA) of 2002, was created to prevent the major issues faced in the 2000 United States Presidential Election from hap-pening in future elections (HAVA, 2002).  From HAVA, the United States Election Assistance Commission (EAC) was established.  One of the goals of the EAC was to adopt Voluntary Voting System Guidelines (VVSG), which expand access for individuals with disabilities to vote privately and independently (VVSG, 2007). The VVSG now addresses the advancement of technology and pro-vides requirements for voting systems to be tested against to ensure functionality, security, and acces-sibility (VVSG, 2005). Chapter 3 of the 2007 VVSG proposes requirements for the usability and accessibility of electronic voting systems (VVSG Chapter 3, 2007). The VVSG states that all voters must have access to the voting process without discrimination, and that the voting process must be accessible to individuals with disabilities, includ-ing non-visual accessibility (VVSG, 2007).  It also states that voting systems should be independently accessible to as many voters as possible, which further emphasizes the need for a universal design. 3 Motivation Currently, there is no solution for writing in a can-didate?s name that is universally accessible.  As stated previously, developing systems with a uni-versal design ensures that the system can be used by anyone, regardless of abilities or disabilities.  Prime III, like other electronic voting systems to-day, simply cannot accommodate a range of voters due to its current write-in system through an on screen keyboard.  In order for voters with visual or motor impairments to vote, a voting official must enter the voting booth with him or her to write, or type, the candidate on the ballot for which the 
voter intends to vote. The lack of multimodality and accessibility in these write-in methods only accommodates sighted voters.  This violates the privacy of the voter and the anonymity of the voter?s ballot.  The most fitting solution to this problem of voter privacy is to utilize a multimodal voting sys-tem that incorporates speech interaction.  With the addition of speech, voters, regardless of most physical disabilities, have an option to vote inde-pendently.  In order to write-in a candidate, a voter could simply speak aloud the name of the person who they intend to write-in.  The integration of the speech feature alone enables the system to have a universal design.  However, this system is not practical.  During election peak times, polling places may have a large voter turnout (Polling Place and Vote Center Management, 2009).  With the large number of voters at polling places at any given time, privacy is an enormous issue. In accor-dance with the Election Assistance Commission (EAC), the voting process must preserve the se-crecy of the ballot.  The voting process should pre-clude anyone else from determining the content of a voter's ballot, without the voter's cooperation.  If such a determination is made against the wishes of the voter, then his or her privacy has been violated (VVSG Chapter 3, 2007).  If a voter is required to explicitly say the name of the candidate for which they intend to write-in, any bystanders within the polling place may be able to hear that name, and know for whom that person voted, thereby violat-ing the voter?s privacy and ballot anonymity. In order to secure voter privacy through speech interaction, voters must communicate with the sys-tem using the speech interaction method of Prime III.  As explained in section 2.2, this approach al-lows a voter to make selections throughout the vot-ing process by simply saying, ?vote? in response to the system?s prompts.  Using this method for writ-ing in a candidate?s name has its challenges.  The system cannot simply prompt names to the voter until the system gets to the name the voter intends to write-in.  There are an infinite number of names the voter would have to choose from.  For exam-ple, it would not be viable for the dialogue to be as follows: Prime III: ?To vote for the Bob Doe, say vote [beep]? Voter: <says nothing> Prime III: ?To vote for the Bill Doe, say vote [beep]? Voter: <says nothing> 
46
Prime III: ?To vote for the Billy Doe, say vote [beep]? Voter: <says nothing> ? If the systems simply made uneducated guesses of the desired name, it would be impossible for the voter to write-in a candidate.   A solution to this problem would be for the voter to spell, rather than say, the desired candi-date?s name.  However, due to voter privacy, the voter cannot simply spell a name aloud.  Spelling a write-in candidate?s name can only be done pri-vately if the Prime III method of getting input data from the voter, through speech, is applied to the design of the system.  Using this method, the sys-tem would need to prompt the voter to determine the correct letters to spell the desired candidate?s name.  This would have to be done for the spelling of the entire name.  For example, to spell the name, ?Bob,? the dialogue would be as follows: Prime III: ?If the first letter of the candidate?s name is A, say vote <beep>? Voter: <says nothing> Prime III: ?If the first letter of the candidate?s name is B, say vote <beep>? Voter: ?Vote?  Prime III: ?If the second letter of the candidate?s name is A, say vote <beep>? Voter: <says nothing> Prime III: ?If the second letter of the candidate?s name is B, say vote <beep>? Voter: <says nothing>  ? Prime III: ?If the second letter of the candidate?s name is N, say vote <beep>? Voter: <says nothing> Prime III: ?If the second letter of the candidate?s name is O, say vote <beep>? Voter: ?Vote?  ? Prime III: ?If the third letter of the candidate?s name is B, say vote <beep>? Voter: ?Vote? Thus far, this is the best solution.  This approach to spelling a candidate?s name encompasses voter privacy, integrity, and universal accessibility.  However, the above example implements a linear search to spell a write-in candidate?s name.  For each letter of the candidate?s full name, the voter may have to traverse each of the 26 letters of the alphabet.  Spelling using this method would take an extremely long time, especially if the letters of the candidate?s name were at the end of the alpha-bet (i.e. ?Robert Smith?), or if the candidate?s 
name has several letters (i.e. ?Christopher Wash-ington?).  Time is a vital factor in voting.  Voters want to make their selections and cast their ballots in a reasonable amount of time.  This straight lin-ear approach to spell the name of a write-in candi-date is long and undesirable, leading to the research presented in this paper.  The overall ob-jective of this research is to propose a method to write-in a candidate?s name that addresses the is-sues of time, privacy, and accessibility. Currently, there is no method to spell a name for writing in a candidate that incorporates a universal design and meets the requirements set forth by the EAC; no system allows an individual with visual or motor impairments to spell a candidate?s name privately and securely.  In order to solve these ma-jor issues, a predictive spelling method was created using speech interaction.  The hypothesis is that the predictive spelling method through speech in-teraction will take less time to spell a candidate?s name than the aforementioned linear approach. 4 Design 4.1 Design Overview The novel approach for writing in a candidate pre-sented in this paper is implemented with a univer-sal design, is private, and is time effective.  The proposed design solution utilizes alphabet cluster-ing and implements name prediction as opposed to the linear search method discussed in the previous section.  This solution proves to be more time ef-fective for letter selection, and for overall name selection. Rather than using linear search to traverse the alphabet, which may take an extensive duration of time to complete, this design breaks down the al-phabet into clusters of letters, which are then are presented to the voter.  The voter then spells a can-didate?s name by selecting from these letters and the system performs name prediction similar to the methods used in predictive text technology such as Nuance Communications? XT9 (Nuance, 2009).  Like in XT9, the voters spelling with our speech system have the option to select from the sugges-tions made based on the letters spelled.  While XT9 utilizes a dictionary database to predict words that the user may intend to type, this system was developed using a database containing only first and last names that the user may intend to spell. 
47
For each letter of the candidate?s name, the clus-ters are presented to the voter for selection using the method discussed in Chapter Three.  The voter begins by making the proper selections to spell the candidate?s last name.  The system first prompts the voter with the alphabet clusters.  Once the voter selects the desired cluster, the system then prompts the voter with the letters contained in that cluster.  The voter then chooses a letter, and the system moves on to get the next letter of the desired can-didate?s name.  Following every new letter selec-tion, the first cluster presented for the next letter is a cluster of the three most common letters to fol-low the letters already chosen. After the voter selects the first three letters of the candidate?s name, the system then suggests three names, one of which the voter may intend to write-in.  The names suggested are chosen because they have the highest probability to be written in.  If the voter selects one of the names suggested, the process is repeated for the intended candidate?s first name, resulting in the chosen candidate?s full name being written in for the corresponding office on the ballot.  If the voter does not intend to write-in one of the names suggested, s/he continues the process of selecting clusters, then letters, until the correct name is suggested, or the name has been spelled in full (see Table 2 for a full example). 4.2 Cluster Selection The alphabet is broken down into four clusters of five letters, and one cluster of six letters (Table 1).  For the first letter of each of the candidate?s names, given name and surname, the voter is prompted to choose from one of the five clusters.  For each let-ter to be spelled after the first letter, there is an ad-ditional cluster of three letters presented to the voter.  This cluster contains the most common next letters, given the letters the candidate has already chosen.  For every letter, with the exception of the first letter, the first cluster presented to the voter is the most common letter cluster.  This expedites the selection process since the voter is able to make his or her selection at this point, rather than making a selection from the five standard clusters. If the next letter of the name is not in the most common letter cluster, the voter is then prompted to select one of the five standard clusters (Table 1).  
Cluster Letters A, B, C, D, E F, G, H, I, J K, L, M, N, O P, Q, R, S, T U, V, W, X, Y, Z Table 1. Standard Letter Clusters The first of these clusters presented to the voter is chosen at random, with the prompts for the re-maining clusters following in alphabetical order, in a round robin fashion. The purpose of this ran-domization is to secure ballot anonymity by ensur-ing that bystanders will not be able to piece together for whom the voter voted. 4.3 Letter Selection Once the voter selects the correct cluster contain-ing the next letter of the desired candidate?s name, s/he is prompted to choose amongst those letters.  The letters presented by the system are dependent on the cluster the voter selected (see Table 2). If the voter selects the cluster of letters {A,B,C,D,E}, s/he is prompted to choose from those letters within that cluster.  If the voter selects the cluster of the most common letters, for example, {R, A, E}, s/he is prompted to choose a letter from that common letter cluster.  Once the desired letter is chosen, the system moves on to the set of prompts for the voter to select the next letter of the write-in candidate?s name (see Table 2). 4.4 Name Database This prediction system for writing in a candidate?s name is made possible through the use of a local database of names. A local database is utilized due to the ban of wireless devices and Internet connec-tions in voting and tabulating machines according to the Voter Confidence and Increased Accessibil-ity Act of 2009 (Holt, 2009 and VCIAA, 2009). This database contains the most common names in the United States (Butler, 2005).  Taken from the United States census in 2000, each name was given a category and a rank.  The different catego-ries of names are surnames, male given names, and female given names.  Within these categories, each name was given a rank based on popularity.  The names that were used most frequently are ranked at the top of the list, while the names infrequently used are at the bottom of the list.  The database 
48
used in this design contains a table of the top 1000 ranked surnames from the 2000 US Census.  The database also has a table for given names; contain-ing the top 1000 ranked male names, and the top 1000 ranked female names.   4.5 Name Prediction In order to effectively reduce the amount of time a voter spends to write-in a candidate?s name, this system utilizes a name prediction method built on the name database described in the previous sec-tion.  Essentially, the predictions are suggestions to the voter of names that s/he may potentially spell.  The names suggested are pulled from the name database depending on the letters already chosen by the voter.  If one of the predicted names is cor-rect, the voter does not need to go through the en-tire spelling process. The name suggestions are strictly based on the clusters and letters chosen by the voter.  When a voter selects a cluster, the system can suggest the most common (highest ranked) name that has a first initial as one of the letters in the cluster.  For example, if the voter is selecting the first letter of the candidate?s last name, and chooses the cluster ?F, G, H, I, J,? the system can suggest ?Johnson? to be the candidate?s last name.  Similarly, when a voter selects a letter, the system can suggest the most common name from the letters selected.  Fur-thermore, if the voter is spelling the candidate?s last name, and has already selected the letters ?J,? and ?A,? the system can suggest ?James? as the candidate?s last name. In a best-case scenario, the first name the system suggests would be the name the voter intended to write-in.  However, if that is not the case, each suggested name the voter rejects (says nothing) adds unnecessary interaction cycles to the spelling process.  For this reason, a different approach was taken to suggest names.  Because most names could be suggested correctly given the first three letters, the system waits to suggest names until the voter selects the first three letters.  Once the first three letters have been spelled, the system knows if there is a potential match in the database.  If there is no match, the system continues to let the voter spell the name intended.   If there is a name in the database that starts with the letters that the voter already selected, that name is then suggested to the voter.  At this time, the 
system suggests up to three names for the voter to select from.  If after these initial three suggestions the system has not suggested the intended candi-date?s name, the system prompts the voter to con-tinue to spell the candidate?s name.  From this point on, the system suggests one name after the voter selects a cluster, and one name after the voter selects a letter.  If the voter rejects a name, it is never suggested again, so that the intended name has a chance at being suggested.  An example of the system dialogue is shown in Table 2.  
Interaction Mode Interaction Letters Already Selected 
System Say vote if the first letter of the candidate?s last name is A, B, C, D, or E -- Voter Vote -- System Say vote if the first letter of the candidate?s last name is A -- Voter <says nothing> -- System Say vote if the first letter of the candidate?s last name is B -- Voter <says nothing> -- System Say vote if the third letter of the candidate?s last name is C -- Voter Vote C System You have selected the letter C. Say vote to delete this letter. C Voter <says nothing> C 
System You have selected C as the candi-date?s last name.  Say vote if you are finished spelling the last name. C Voter <says nothing> C System You will now select the second letter of the candidate?s last name. C 
System The next letters are the most com-mon letters. Say vote if the second letter of the candidate?s last name is A, E, or O C Voter Vote C System Say vote if the second letter of the candidate?s last name is A C Voter Vote CA ? System You have selected the letter R. Say vote to delete this letter. CAR Voter <says nothing> CAR System Say vote if the candidate?s last name is Carter CAR Voter <says nothing> CAR System Say vote if the candidate?s last name is Carroll CAR Voter <says nothing> CAR System Say vote if the candidate?s last name is Carpenter CAR Voter <says nothing> CAR System You will now select the fourth letter of the candidate?s last name CAR 
System The next letters are the most com-mon letters.  Say vote if the third letter of the candidate?s last name CAR 
49
is L, P, or S Voter Vote CAR System Say vote if the candidate?s last name is Carlson CAR Voter <says nothing> CAR System Say vote if the third letter of the candidate?s last name is L CAR Voter Vote CARL System Say vote if the candidate?s last name is Carlisle CARL Voter Vote CARLISLE Table 2. Example Dialogue for Spelling Last Name, "Carlisle" 5 Experiment and Evaluation The primary objective of this study was to observe and analyze how people interact with the predic-tive write-in system through speech.  The goal of the study is to determine the time it takes a voter to use the write-in system developed. It is expected that the predictive system will perform signifi-cantly faster when spelling a name than the linear system.  Additionally, it is expected that the par-ticipants in the study will be able to use the system effectively, meaning they will be able to spell their intended names. 5.1 Experimental Method The participants were directed to fill out a pre-questionnaire to obtain their demographic informa-tion and prior usage with computing.  Once the pre-questionnaire was completed, a scenario was given, introducing them to the write-in voting process, and to encourage them to treat the study as if it were an actual election.  The students then re-corded in writing the name they intended to spell, which could be any first and last name of their choosing, with the exception of their own to keep the results anonymous. It was explained to the stu-dent that the speech from the system would be coming from the speakers for observational pur-poses, and that the headset was strictly for the use of the microphone. Data collected during the ex-periment included the name each participant chose to write-in and the times taken to spell that name.  5.2 Evaluation A total of 40 participants participated in this study, of which more than 80 percent were undergradu-ates, Caucasians, and males.  Presented in this sec-tion are calculated best-case comparisons between the predictive write-in method versus the linear 
search approach, as well as the experimental re-sults from the study. Predictive Write-In Results: For the study, participants were required to provide a name to spell so that there was no bias amongst the names spelled.  The average length of the full names cho-sen was 10.43 letters, with a standard deviation of 2.22.  The shortest full name was 7 letters in length, and the longest full name was 16 letters in length.  Of the 80 first and last names chosen, 71.3% of the names were in the database and sug-gested to the user.  The average time it took for a participant to spell a candidate?s full name was 9.52 minutes, with a standard deviation of 3.83.  The median time was 8.42 minutes.  The average time, for the names given, per letter was 1.09 min-utes, with a standard deviation of 45 seconds.   Figure 2 shows a breakdown of times based on the number of letters in the full name spelled.  This figure shows the average times taken by partici-pants to spell names of various lengths for the pre-dictive method.  Removing the outliers of this chart, the average full name was between 8 and 16 letters, and took an average of 9.23 minutes.  These results show that in practice, this system takes much longer than anticipated (see Comparison). Additional observations from the study showed that participant errors were the primary reason that the actual times were much different than what was calculated for the best-case times to spell the same names.   
 Figure 2. Average Time to Spell Full Names Comparison: We calculated, at best case, how long it should take someone to spell the names from the study for both systems. In order to determine how long it would take to spell a name, 
50
each interaction cycle for the system was broken down and timed.  For each method, the sequence of prompts presented to the voter to spell a name is different.  The sequences were determined for each system, and compiled for each name spelled.  The sequences for the predictive write-in method was constructed under the assumption that the names to be spelled are in the system?s name database. Figure 3 shows the average times taken to spell names of various lengths for the predictive and linear methods.  The average time for the full names provided in the study for the calculated lin-ear search method was 15.09 minutes, with a stan-dard deviation of 3.86 (Table 3). The average time to spell the full names for the calculated predictive method was 4.33 minutes, with a standard devia-tion of 0.17. The median times for the calculated predictive and linear methods were 4.34 and 14.73, respectively.  From these results, we can conclude that, on average, the predictive spelling approach is more than three times faster than the linear spelling approach.  The predictive spelling method was ef-fective in that 100% of the participants were able to complete the spelling of the intended names. 
 Figure 3. Best-Case Method Comparison of Times to Spell Full Names 
 Time to spell full name - Predictive Method (minutes) Time to spell full name - Linear Method (minutes) Average 4.33 15.09 Standard Deviation 0.17 3.86 Median 4.34 14.73 Table 3. Calculated Predictive and Linear  Method Statistics 6 Conclusion and Future Work The ultimate goal of electronic voting systems to-day should be to allow anyone to vote privately and independently using a single design.  The EAC 
provides useful and necessary guidelines to ensure that all eligible citizens have the same access when voting, regardless of a person?s disabilities.  The primary objective of this research was to embrace these guidelines by developing a system in which a person, regardless of most disabilities, can effi-ciently, anonymously, and independently write-in a candidate?s name during an election.  The method designed allows voters to spell a candidate?s name discretely through speech interaction, using a pre-dictive approach for efficiency.   The study performed was designed to test the hypothesis, which states that the method designed for predictive spelling through speech interaction will take much less time to spell a candidate?s name than the method of linear search. The results of the study suggest that the predictive approach to write-in a candidate?s name was more efficient than the linear spelling approach.  However, it was determined that, in practice, the participants took longer than calculated to spell a name using the prediction method.  From observing the participants throughout the study, it was considered that the number of errors made during the spelling process might have been the primary reason for the time being so long.  Fu-ture versions of this system will include increased efficiency for error correction. It may also be bene-ficial for future studies to include participants of a more diverse demographic, and to collect other metrics for determining efficiency, such as, letters required to spell a name, and number of errors made while spelling and where said errors oc-curred.  As this method is further developed, it can be adapted by certain search functions.  Search appli-cations that utilize a fixed directory will benefit greatly by using the prediction method discussed.  This could be especially helpful for people directo-ries, building directories, or telephony systems. Acknowledgments This material is based in part upon work supported by the National Science Foundation under Grant Numbers CNS- 0540492 and 0837675. Any opin-ions, findings, and conclusions or recommenda-tions expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.  
51
References  2007 VVSG Chapter 3: Usability, Accessibility, and Privacy Requirements (2007) [online]. http://www.eac.gov/vvsg/part1/chapter03.php/. Butler, R., (2005). http://names.mongabay.com/. Center for Universal Design, N.C. State University (2004). Universal Design Education Online Web Site http://www.udeducation.org/learn/index.asp. Help America Vote Act. (2002). Public Law 107-252, 107th Congress, United States [online]. http://www.fec.gov/hava/law_ext.txt. History of the Paper Ballot (2009) [online]. http://www.fairvote.org/righttovote/pballot.pdf. Jones, D., (2003). A Brief Illustrated History of Voting [online]. http://www.cs.uiowa.edu/~jones/voting/pictures/. Making Sure Votes Count and Are Counted (2009). http://holt.house.gov/voting.shtml. Nuance ? XT9 Smart Input (2009). http://www.nuance.com/t9/xt9/. Official Election Site of San Mateo County (2007). http://www.shapethefuture.org/press/2007/090607.asp. Polling Place and Vote Center Management (2009) [on-line]. http://www.eac.gov/election/quick-start-management-guides/docs/09-polling-place-and-vote-center-management.pdf/attachment_download/file. Press Release: 2005 VVSG Adopted (2005). http://www.eac.gov/voting%20systems/docs/eac-adopts-2005-voluntary-voting-system-guidelines.pdf/attachment_download/file. Prime III: One Machine, One Vote for Everyone. (2009) http://primevotingsystem.org/. Voluntary Voting System Guidelines Recommendations to the Election Assistance Commission (2007) [on-line]. http://www.eac.gov/files/vvsg/Final-TGDC-VVSG-08312007.pdf. Voter Confidence and Increased Accessibility Act of 2009 (2009). Public Law H.R. 2894. [online] http://thomas.loc.gov/cgi-bin/query/z?c111:H.R.2894:. Write-in Candidate Requirements. Maine 2010 June Primary and November General Election Candidates (2010). [online] http://www.maine.gov/sos/cec/elec/2010/writeincandidateguide.doc.    
52
