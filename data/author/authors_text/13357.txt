Proceedings of the 9th SIGdial Workshop on Discourse and Dialogue, pages 112?119,
Columbus, June 2008. c?2008 Association for Computational Linguistics
Training and Evaluation of the HIS POMDP Dialogue System in Noise
M. Gas?ic?, S. Keizer, F. Mairesse, J. Schatzmann, B. Thomson, K. Yu, S. Young
Machine Intelligence Laboratory
Engineering Department
Cambridge University
United Kingdom
Abstract
This paper investigates the claim that a di-
alogue manager modelled as a Partially Ob-
servable Markov Decision Process (POMDP)
can achieve improved robustness to noise
compared to conventional state-based dia-
logue managers. Using the Hidden Infor-
mation State (HIS) POMDP dialogue man-
ager as an exemplar, and an MDP-based dia-
logue manager as a baseline, evaluation results
are presented for both simulated and real dia-
logues in a Tourist Information Domain. The
results on the simulated data show that the
inherent ability to model uncertainty, allows
the POMDP model to exploit alternative hy-
potheses from the speech understanding sys-
tem. The results obtained from a user trial
show that the HIS system with a trained policy
performed significantly better than the MDP
baseline.
1 Introduction
Conventional spoken dialogue systems operate by
finding the most likely interpretation of each user
input, updating some internal representation of the
dialogue state and then outputting an appropriate re-
sponse. Error tolerance depends on using confidence
thresholds and where they fail, the dialogue manager
must resort to quite complex recovery procedures.
Such a system has no explicit mechanisms for rep-
resenting the inevitable uncertainties associated with
speech understanding or the ambiguities which natu-
rally arise in interpreting a user?s intentions. The re-
sult is a system that is inherently fragile, especially
in noisy conditions or where the user is unsure of
how to use the system.
It has been suggested that Partially Observable
Markov Decision Processes (POMDPs) offer a nat-
ural framework for building spoken dialogue sys-
tems which can both model these uncertainties
and support policies which are robust to their ef-
fects (Young, 2002; Williams and Young, 2007a).
The key idea of the POMDP is that the underlying
dialogue state is hidden and dialogue management
policies must therefore be based not on a single state
estimate but on a distribution over all states.
Whilst POMDPs are attractive theoretically, in
practice, they are notoriously intractable for any-
thing other than small state/action spaces. Hence,
practical examples of their use were initially re-
stricted to very simple domains (Roy et al, 2000;
Zhang et al, 2001). More recently, however, a num-
ber of techniques have been suggested which do al-
low POMDPs to be scaled to handle real world tasks.
The two generic mechanisms which facilitate this
scaling are factoring the state space and perform-
ing policy optimisation in a reduced summary state
space (Williams and Young, 2007a; Williams and
Young, 2007b).
Based on these ideas, a number of real-world
POMDP-based systems have recently emerged. The
most complex entity which must be represented in
the state space is the user?s goal. In the Bayesian
Update of Dialogue State (BUDS) system, the user?s
goal is further factored into conditionally indepen-
dent slots. The resulting system is then modelled
as a dynamic Bayesian network (Thomson et al,
2008). A similar approach is also developed in
112
(Bui et al, 2007a; Bui et al, 2007b). An alterna-
tive approach taken in the Hidden Information State
(HIS) system is to retain a complete representation
of the user?s goal, but partition states into equiva-
lence classes and prune away very low probability
partitions (Young et al, 2007; Thomson et al, 2007;
Williams and Young, 2007b).
Whichever approach is taken, a key issue in a real
POMDP-based dialogue system is its ability to be
robust to noise and that is the issue that is addressed
in this paper. Using the HIS system as an exem-
plar, evaluation results are presented for a real-world
tourist information task using both simulated and
real users. The results show that a POMDP system
can learn noise robust policies and that N-best out-
puts from the speech understanding component can
be exploited to further improve robustness.
The paper is structured as follows. Firstly, in Sec-
tion 2 a brief overview of the HIS system is given.
Then in Section 3, various POMDP training regimes
are described and evaluated using a simulated user at
differing noise levels. Section 4 then presents results
from a trial in which users conducted various tasks
over a range of noise levels. Finally, in Section 5,
we discuss our results and present our conclusions.
2 The HIS System
2.1 Basic Principles
A POMDP-based dialogue system is shown in Fig-
ure 1 where sm denotes the (unobserved or hidden)
machine state which is factored into three compo-
nents: the last user act au, the user?s goal su and
the dialogue history sd. Since sm is unknown, at
each time-step the system computes a belief state
such that the probability of being in state sm given
belief state b is b(sm). Based on this current belief
state b, the machine selects an action am, receives
a reward r(sm, am), and transitions to a new (un-
observed) state s?m, where s?m depends only on sm
and am. The machine then receives an observation
o? consisting of an N-best list of hypothesised user
actions. Finally, the belief distribution b is updated
based on o? and am as follows:
b?(s?m) = kP (o?|s?m, am)
?
sm?Sm
P (s?m|am, sm)b(sm)
(1)
where k is a normalisation constant (Kaelbling et al,
1998). The first term on the RHS of (1) is called the
observation model and the term inside the summa-
tion is called the transition model. Maintaining this
belief state as the dialogue evolves is called belief
monitoring.
Speech
Understanding
Speech
Generation
User
au
am
~
su
am
Belief
Estimator
Dialog
Policy
sd
b(     )sm
sm = <au,s u,s d>
au
1
.
.

au
N
Figure 1: Abstract view of a POMDP-based spoken dia-
logue system
At each time step t, the machine receives a reward
r(bt, am,t) based on the current belief state bt and the
selected action am,t. Each action am,t is determined
by a policy ?(bt) and building a POMDP system in-
volves finding the policy ?? which maximises the
discounted sum R of the rewards
R =
??
t=0
?tr(bt, am,t) (2)
where ?t is a discount coefficient.
2.2 Probability Models
In the HIS system, user goals are partitioned and
initially, all states su ? Su are regarded as being
equally likely and they are placed in a single par-
tition p0. As the dialogue progresses, user inputs
result in changing beliefs and this root partition is
repeatedly split into smaller partitions. This split-
ting is binary, i.e. p ? {p?, p ? p?} with probability
P (p?|p). By replacing sm by its factors (su, au, sd)
and making reasonable independence assumptions,
it can be shown (Young et al, 2007) that in parti-
113
tioned form (1) becomes
b?(p?, a?u, s?d) = k ? P (o?|a?u)
? ?? ?
observation
model
P (a?u|p?, am)
? ?? ?
user action
model
?
?
sd
P (s?d|p?, a?u, sd, am)
? ?? ?
dialogue
model
P (p?|p)b(p, sd)
? ?? ?
partition
splitting
(3)
where p is the parent of p?.
In this equation, the observation model is approx-
imated by the normalised distribution of confidence
measures output by the speech recognition system.
The user action model allows the observation prob-
ability that is conditioned on a?u to be scaled by the
probability that the user would speak a?u given the
partition p? and the last system prompt am. In the
current implementation of the HIS system, user dia-
logue acts take the form act(a = v) where act is the
dialogue type, a is an attribute and v is its value [for
example, request(food=Chinese)]. The user action
model is then approximated by
P (a?u|p?, am) ? P (T (a?u)|T (am))P (M(a?u)|p?)
(4)
where T (?) denotes the type of the dialogue act
and M(?) denotes whether or not the dialogue act
matches the current partition p?. The dialogue
model is a deterministic encoding based on a simple
grounding model. It yields probability one when the
updated dialogue hypothesis (i.e., a specific combi-
nation of p?, a?u, sd and am) is consistent with the
history and zero otherwise.
2.3 Policy Representation
Policy representation in POMDP-systems is non-
trivial since each action depends on a complex prob-
ability distribution. One of the simplest approaches
to dealing with this problem is to discretise the state
space and then associate an action with each dis-
crete grid point. To reduce quantisation errors, the
HIS model first maps belief distributions into a re-
duced summary space before quantising. This sum-
mary space consists of the probability of the top
two hypotheses plus some status variables and the
user act type associated with the top distribution.
Quantisation is then performed using a simple dis-
tance metric to find the nearest grid point. Ac-
tions in summary space refer specifically to the top
two hypotheses, and unlike actions in master space,
they are limited to a small finite set: greet, ask, ex-
plicit confirm, implicit confirm, select confirm, of-
fer, inform, find alternative, query more, goodbye.
A simple heuristic is then used to map the selected
next system action back into the full master belief
space.
1
Observation
From
User
Ontology Rules
2
N
ua
ma
~
From
System
1
1
2
2
2
1
ds
2
ds
1
ds
2
ds
3
ds
1
up
2
up
3
up
POMDP
Policy
2h
3h
4h
5h
1h







~
a u
~
a u
~
a u
~
a u
~
a u
~
a u
~
a u
Belief
State
Application Database
Action
Refinement
(heuristic)
ma
^
Strategic
Action
Specific
Action
Map to
Summary
Space
ma
b
b^
Summary Space
Figure 2: Overview of the HIS system dialogue cycle
The dialogue manager is able to support nega-
tions, denials and requests for alternatives. When the
selected summary action is to offer the user a venue,
the summary-to-master space mapping heuristics
will normally offer a venue consistent with the most
likely user goal hypothesis. If this hypothesis is then
rejected its belief is substantially reduced and it will
no longer be the top-ranking hypothesis. If the next
system action is to make an alternative offer, then
the new top-ranking hypothesis may not be appro-
priate. For example, if an expensive French restau-
rant near the river had been offered and the user asks
for one nearer the centre of town, any alternative of-
fered should still include the user?s confirmed de-
sire for an expensive French restaurant. To ensure
this, all of the grounded features from the rejected
hypothesis are extracted and all user goal hypothe-
ses are scanned starting at the most likely until an
alternative is found that matches the grounded fea-
tures. For the current turn only, the summary-to-
master space heuristics then treat this hypothesis as
if it was the top-ranking one. If the system then of-
fers a venue based on this hypothesis, and the user
accepts it, then, since system outputs are appended
to user inputs for the purpose of belief updating, the
114
alternative hypothesis will move to the top, or near
the top, of the ranked hypothesis list. The dialogue
then typically continues with its focus on the newly
offered alternative venue.
2.4 Summary of Operation
To summarise, the overall processing performed by
the HIS system in a single dialogue turn (i.e. one cy-
cle of system output and user response) is as shown
in Figure 2. Each user utterance is decoded into an
N-best list of dialogue acts. Each incoming act plus
the previous system act are matched against the for-
est of user goals and partitions are split as needed.
Each user act au is then duplicated and bound to
each partition p. Each partition will also have a
set of dialogue histories sd associated with it. The
combination of each p, au and updated sd forms a
new dialogue hypothesis hk whose beliefs are eval-
uated using (3). Once all dialogue hypotheses have
been evaluated and any duplicates merged, the mas-
ter belief state b is mapped into summary space b?
and the nearest policy belief point is found. The as-
sociated summary space machine action a?m is then
heuristically mapped back to master space and the
machine?s actual response am is output. The cycle
then repeats until the user?s goal is satisfied.
3 Training and Evaluation with a
Simulated User
3.1 Policy optimisation
Policy optimisation is performed in the discrete
summary space described in the previous section us-
ing on-line batch ?-greedy policy iteration. Given
an existing policy ?, dialogs are executed and ma-
chine actions generated according to ? except that
with probability ? a random action is generated. The
system maintains a set of belief points {b?i}. At each
turn in training, the nearest stored belief point b?k to
b? is located using a distance measure. If the distance
is greater than some threshold, b? is added to the set
of stored belief points. The sequence of points b?k
traversed in each dialogue is stored in a list. As-
sociated with each b?i is a function Q(b?i, a?m) whose
value is the expected total reward obtained by choos-
ing summary action a?m from state b?i. At the end
of each dialogue, the total reward is calculated and
added to an accumulator for each point in the list,
discounted by ? at each step. On completion of a
batch of dialogs, the Q values are updated accord-
ing to the accumulated rewards, and the policy up-
dated by choosing the action which maximises each
Q value. The whole process is then repeated until
the policy stabilises.
In our experiments, ? was fixed at 0.1 and ? was
fixed at 0.95. The reward function used attempted
to encourage short successful dialogues by assign-
ing +20 for a successful dialogue and ?1 for each
dialogue turn.
3.2 User Simulation
To train a policy, a user simulator is used to gen-
erate responses to system actions. It has two main
components: a User Goal and a User Agenda. At
the start of each dialogue, the goal is randomly
initialised with requests such as ?name?, ?addr?,
?phone? and constraints such as ?type=restaurant?,
?food=Chinese?, etc. The agenda stores the di-
alogue acts needed to elicit this information in a
stack-like structure which enables it to temporarily
store actions when another action of higher priority
needs to be issued first. This enables the simulator
to refer to previous dialogue turns at a later point. To
generate a wide spread of realistic dialogs, the sim-
ulator reacts wherever possible with varying levels
of patience and arbitrariness. In addition, the sim-
ulator will relax its constraints when its initial goal
cannot be satisfied. This allows the dialogue man-
ager to learn negotiation-type dialogues where only
an approximate solution to the user?s goal exists.
Speech understanding errors are simulated at the di-
alogue act level using confusion matrices trained on
labelled dialogue data (Schatzmann et al, 2007).
3.3 Training and Evaluation
When training a system to operate robustly in noisy
conditions, a variety of strategies are possible. For
example, the system can be trained only on noise-
free interactions, it can be trained on increasing lev-
els of noise or it can be trained on a high noise level
from the outset. A related issue concerns the gener-
ation of grid points and the number of training itera-
tions to perform. For example, allowing a very large
number of points leads to poor performance due to
over-fitting of the training data. Conversely, having
too few point leads to poor performance due to a lack
115
of discrimination in its dialogue strategies.
After some experimentation, the following train-
ing schedule was adopted. Training starts in a
noise free environment using a small number of grid
points and it continues until the performance of the
policy levels off. The resulting policy is then taken
as an initial policy for the next stage where the noise
level is increased, the number of grid points is ex-
panded and the number of iterations is increased.
This process is repeated until the highest noise level
is reached. This approach was motivated by the ob-
servation that a key factor in effective reinforcement
learning is the balance between exploration and ex-
ploitation. In POMDP policy optimisation which
uses dynamically allocated grid points, maintaining
this balance is crucial. In our case, the noise intro-
duced by the simulator is used as an implicit mech-
anism for increasing the exploration. Each time ex-
ploration is increased, the areas of state-space that
will be visited will also increase and hence the num-
ber of available grid points must also be increased.
At the same time, the number of iterations must be
increased to ensure that all points are visited a suf-
ficient number of times. In practice we found that
around 750 to 1000 grid points was sufficient and
the total number of simulated dialogues needed for
training was around 100,000.
A second issue when training in noisy conditions
is whether to train on just the 1-best output from the
simulator or train on the N-best outputs. A limit-
ing factor here is that the computation required for
N-best training is significantly increased since the
rate of partition generation in the HIS model in-
creases exponentially with N. In preliminary tests,
it was found that when training with 1-best outputs,
there was little difference between policies trained
entirely in no noise and policies trained on increas-
ing noise as described above. However, policies
trained on 2-best using the incremental strategy did
exhibit increased robustness to noise. To illustrate
this, Figures 3 and 4 show the average dialogue suc-
cess rates and rewards for 3 different policies, all
trained on 2-best: a hand-crafted policy (hdc), a pol-
icy trained on noise-free conditions (noise free) and
a policy trained using the incremental scheme de-
scribed above (increm). Each policy was tested us-
ing 2-best output from the simulator across a range
of error rates. In addition, the noise-free policy was
also tested on 1-best output.
Figure 3: Average simulated dialogue success rate as a
function of error rate for a hand-crafted (hdc), noise-free
and incrementally trained (increm) policy.
Figure 4: Average simulated dialogue reward as a func-
tion of error rate for a hand-crafted (hdc), noise-free and
incrementally trained (increm) policy.
As can be seen, both the trained policies improve
significantly on the hand-crafted policies. Further-
more, although the average rewards are all broadly
similar, the success rate of the incrementally trained
policy is significantly better at higher error rates.
Hence, this latter policy was selected for the user
trial described next.
4 Evaluation via a User Trial
The HIS-POMDP policy (HIS-TRA) that was incre-
mentally trained on the simulated user using 2-best
lists was tested in a user trial together with a hand-
crafted HIS-POMDP policy (HIS-HDC). The strat-
egy used by the latter was to first check the most
likely hypothesis. If it contains sufficient grounded
116
keys to match 1 to 3 database entities, then offer is
selected. If any part of the hypothesis is inconsis-
tent or the user has explicitly asked for another sug-
gestion, then find alternative action is selected. If
the user has asked for information about an offered
entity then inform is selected. Otherwise, an un-
grounded component of the top hypothesis is identi-
fied and depending on the belief, one of the confirm
actions is selected.
In addition, an MDP-based dialogue manager de-
veloped for earlier trials (Schatzmann, 2008) was
also tested. Since considerable effort has been put in
optimising this system, it serves as a strong baseline
for comparison. Again, both a trained policy (MDP-
TRA) and a hand-crafted policy (MDP-HDC) were
tested.
4.1 System setup and confidence scoring
The dialogue system consisted of an ATK-based
speech recogniser, a Phoenix-based semantic parser,
the dialogue manager and a diphone based speech
synthesiser. The semantic parser uses simple phrasal
grammar rules to extract the dialogue act type and a
list of attribute/value pairs from each utterance.
In a POMDP-based dialogue system, accurate
belief-updating is very sensitive to the confidence
scores assigned to each user dialogue act. Ideally
these should provide a measure of the probability of
the decoded act given the true user act. In the evalu-
ation system, the recogniser generates a 10-best list
of hypotheses at each turn along with a compact con-
fusion network which is used to compute the infer-
ence evidence for each hypothesis. The latter is de-
fined as the sum of the log-likelihoods of each arc
in the confusion network and when exponentiated
and renormalised this gives a simple estimate of the
probability of each hypothesised utterance. Each ut-
terance in the 10-best list is passed to the semantic
parser. Equivalent dialogue acts output by the parser
are then grouped together and the dialogue act for
each group is then assigned the sum of the sentence-
level probabilities as its confidence score.
4.2 Trial setup
For the trial itself, 36 subjects were recruited (all
British native speakers, 18 male, 18 female). Each
subject was asked to imagine himself to be a tourist
in a fictitious town called Jasonville and try to find
particular hotels, bars, or restaurants in that town.
Each subject was asked to complete a set of pre-
defined tasks where each task involved finding the
name of a venue satisfying a set of constraints such
as food type is Chinese, price-range is cheap, etc.,
and getting the value of one or more additional at-
tributes of that venue such as the address or the
phone number.
For each task, subjects were given a scenario to
read and were then asked to solve the task via a di-
alogue with the system. The tasks set could either
have one solution, several solutions, or no solution
at all in the database. In cases where a subject found
that there was no matching venue for the given task,
he/she was allowed to try and find an alternative
venue by relaxing one or more of the constraints.
In addition, subjects had to perform each task at
one of three possible noise levels. These levels cor-
respond to signal/noise ratios (SNRs) of 35.3 dB
(low noise), 10.2 dB (medium noise), or 3.3 dB
(high noise). The noise was artificially generated
and mixed with the microphone signal, in addition
it was fed into the subject?s headphones so that they
were aware of the noisy conditions.
An instructor was present at all times to indicate
to the subject which task description to follow, and
to start the right system with the appropriate noise-
level. Each subject performed an equal number of
tasks for each system (3 tasks), noise level (6 tasks)
and solution type (6 tasks for each of the types 0, 1,
or multiple solutions). Also, each subject performed
one task for all combinations of system and noise
level. Overall, each combination of system, noise
level, and solution type was used in an equal number
of dialogues.
4.3 Results
In Table 1, some general statistics of the corpus re-
sulting from the trial are given. The semantic error
rate is based on substitutions, insertions and dele-
tions errors on semantic items. When tested after the
trial on the transcribed user utterances, the semantic
error rate was 4.1% whereas the semantic error rate
on the ASR input was 25.2%. This means that 84%
of the error rate was due to the ASR.
Tables 2 and 3 present success rates (Succ.) and
average performance scores (Perf.), comparing the
two HIS dialogue managers with the two MDP base-
117
Number of dialogues 432
Number of dialogue turns 3972
Number of words (transcriptions) 18239
Words per utterance 4.58
Word Error Rate 32.9
Semantic Error Rate 25.2
Semantic Error Rate transcriptions 4.1
Table 1: General corpus statistics.
line systems. For the success rates, also the stan-
dard deviation (std.dev) is given, assuming a bino-
mial distribution. The success rate is the percentage
of successfully completed dialogues. A task is con-
sidered to be fully completed when the user is able to
find the venue he is looking for and get al the addi-
tional information he asked for; if the task has no so-
lution and the system indicates to the user no venue
could be found, this also counts as full completion.
A task is considered to be partially completed when
only the correct venue has been given. The results on
partial completion are given in Table 2, and the re-
sults on full completion in Table 3. To mirror the re-
ward function used in training, the performance for
each dialogue is computed by assigning a reward of
20 points for full completion and subtracting 1 point
for the number of turns up until a successful recom-
mendation (i.e., partial completion).
Partial Task Completion statistics
System Succ. (std.dev) #turns Perf.
MDP-HDC 68.52 (4.83) 4.80 8.91
MDP-TRA 70.37 (4.75) 4.75 9.32
HIS-HDC 74.07 (4.55) 7.04 7.78
HIS-TRA 84.26 (3.78) 4.63 12.22
Table 2: Success rates and performance results on partial
completion.
Full Task Completion statistics
System Succ. (std.dev) #turns Perf.
MDP-HDC 64.81 (4.96) 5.86 7.10
MDP-TRA 65.74 (4.93) 6.18 6.97
HIS-HDC 63.89 (4.99) 8.57 4.20
HIS-TRA 78.70 (4.25) 6.36 9.38
Table 3: Success rates and performance results on full
completion.
The results show that the trained HIS dialogue
manager significantly outperforms both MDP based
dialogue managers. For success rate on partial com-
pletion, both HIS systems perform better than the
MDP systems.
4.3.1 Subjective Results
In the user trial, the subjects were also asked for
a subjective judgement of the systems. After com-
pleting each task, the subjects were asked whether
they had found the information they were looking
for (yes/no). They were also asked to give a score
on a scale from 1 to 5 (best) on how natural/intuitive
they thought the dialogue was. Table 4 shows the
results for the 4 systems used. The performance of
the HIS systems is similar to the MDP systems, with
a slightly higher success rate for the trained one and
a slightly lower score for the handcrafted one.
System Succ. Rate (std.dev) Score
MDP-HDC 78 (4.30) 3.52
MDP-TRA 78 (4.30) 3.42
HIS-HDC 71 (4.72) 3.05
HIS-TRA 83 (3.90) 3.41
Table 4: Subjective performance results from the user
trial.
5 Conclusions
This paper has described recent work in training a
POMDP-based dialogue manager to exploit the ad-
ditional information available from a speech under-
standing system which can generate ranked lists of
hypotheses. Following a brief overview of the Hid-
den Information State dialogue manager and pol-
icy optimisation using a user simulator, results have
been given for both simulated user and real user di-
alogues conducted at a variety of noise levels.
The user simulation results have shown that al-
though the rewards are similar, training with 2-best
rather than 1-best outputs from the user simulator
yields better success rates at high noise levels. In
view of this result, we would have liked to inves-
tigate training on longer N-best lists, but currently
computational constraints prevent this. We hope in
the future to address this issue by developing more
efficient state partitioning strategies for the HIS sys-
tem.
118
The overall results on real data collected from the
user trial clearly indicate increased robustness by the
HIS system. We would have liked to be able to
plot performance and success scores as a function
of noise level or speech understanding error rate,
but there is great variability in these kinds of com-
plex real-world dialogues and it transpired that the
trial data was insufficient to enable any statistically
meaningful presentation of this form. We estimate
that we need at least an order of magnitude more
trial data to properly investigate the behaviour of
such systems as a function of noise level. The trial
described here, including transcription and analysis
consumed about 30 man-days of effort. Increasing
this by a factor of 10 or more is not therefore an
option for us, and clearly an alternative approach is
needed.
We have also reported results of subjective suc-
cess rate and opinion scores based on data obtained
from subjects after each trial. The results were only
weakly correlated with the measured performance
and success rates. We believe that this is partly due
to confusion as to what constituted success in the
minds of the subjects. This suggests that for subjec-
tive results to be meaningful, measurements such as
these will only be really useful if made on live sys-
tems where users have a real rather than imagined
information need. The use of live systems would
also alleviate the data sparsity problem noted earlier.
Finally and in conclusion, we believe that despite
the difficulties noted above, the results reported in
this paper represent a first step towards establish-
ing the POMDP as a viable framework for develop-
ing spoken dialogue systems which are significantly
more robust to noisy operating conditions than con-
ventional state-based systems.
Acknowledgements
This research was partly funded by the UK EPSRC
under grant agreement EP/F013930/1 and by the
EU FP7 Programme under grant agreement 216594
(CLASSIC project: www.classic-project.org).
References
TH Bui, M Poel, A Nijholt, and J Zwiers. 2007a. A
tractable DDN-POMDP Approach to Affective Dia-
logue Modeling for General Probabilistic Frame-based
Dialogue Systems. In Proc 5th Workshop on Knowl-
edge and Reasoning in Practical Dialogue Systems,
pages 34?57.
TH Bui, B van Schooten, and D Hofs. 2007b. Practi-
cal dialogue manager development using POMDPs .
In 8th SIGdial Workshop on Discourse and Dialogue,
Antwerp.
LP Kaelbling, ML Littman, and AR Cassandra. 1998.
Planning and Acting in Partially Observable Stochastic
Domains. Artificial Intelligence, 101:99?134.
N Roy, J Pineau, and S Thrun. 2000. Spoken Dialogue
Management Using Probabilistic Reasoning. In Proc
ACL.
J Schatzmann, B Thomson, and SJ Young. 2007. Error
Simulation for Training Statistical Dialogue Systems.
In ASRU 07, Kyoto, Japan.
J Schatzmann. 2008. Statistical User and Error Mod-
elling for Spoken Dialogue Systems. Ph.D. thesis, Uni-
versity of Cambridge.
B Thomson, J Schatzmann, K Weilhammer, H Ye, and
SJ Young. 2007. Training a real-world POMDP-based
Dialog System. In HLT/NAACL Workshop ?Bridging
the Gap: Academic and Industrial Research in Dialog
Technologies?, Rochester.
B Thomson, J Schatzmann, and SJ Young. 2008.
Bayesian Update of Dialogue State for Robust Dia-
logue Systems. In Int Conf Acoustics Speech and Sig-
nal Processing ICASSP, Las Vegas.
JD Williams and SJ Young. 2007a. Partially Observable
Markov Decision Processes for Spoken Dialog Sys-
tems. Computer Speech and Language, 21(2):393?
422.
JD Williams and SJ Young. 2007b. Scaling POMDPs
for Spoken Dialog Management. IEEE Audio, Speech
and Language Processing, 15(7):2116?2129.
SJ Young, J Schatzmann, K Weilhammer, and H Ye.
2007. The Hidden Information State Approach to Dia-
log Management. In ICASSP 2007, Honolulu, Hawaii.
SJ Young. 2002. Talking to Machines (Statistically
Speaking). In Int Conf Spoken Language Processing,
Denver, Colorado.
B Zhang, Q Cai, J Mao, E Chang, and B Guo. 2001.
Spoken Dialogue Management as Planning and Acting
under Uncertainty. In Eurospeech, Aalborg, Denmark.
119
Proceedings of SIGDIAL 2009: the 10th Annual Meeting of the Special Interest Group in Discourse and Dialogue, pages 272?275,
Queen Mary University of London, September 2009. c?2009 Association for Computational Linguistics
k-Nearest Neighbor Monte-Carlo Control Algorithm
for POMDP-based Dialogue Systems
F. Lefe`vre?, M. Gas?ic?, F. Jurc???c?ek, S. Keizer, F. Mairesse, B. Thomson, K. Yu and S. Young
Spoken Dialogue Systems Group
Cambridge University Engineering Department
Trumpington Street, Cambridge CB2 1PZ, UK
{frfl2, mg436, fj228, sk561, farm2, brmt2, ky219, sjy}@eng.cam.ac.uk
Abstract
In real-world applications, modelling di-
alogue as a POMDP requires the use of
a summary space for the dialogue state
representation to ensure tractability. Sub-
optimal estimation of the value func-
tion governing the selection of system re-
sponses can then be obtained using a grid-
based approach on the belief space. In
this work, the Monte-Carlo control tech-
nique is extended so as to reduce training
over-fitting and to improve robustness to
semantic noise in the user input. This tech-
nique uses a database of belief vector pro-
totypes to choose the optimal system ac-
tion. A locally weighted k-nearest neigh-
bor scheme is introduced to smooth the de-
cision process by interpolating the value
function, resulting in higher user simula-
tion performance.
1 Introduction
In the last decade dialogue modelling as a Partially
Observable Markov Decision Process (POMDP)
has been proposed as a convenient way to improve
spoken dialogue systems (SDS) trainability, nat-
uralness and robustness to input errors (Young et
al., 2009). The POMDP framework models dia-
logue flow as a sequence of unobserved dialogue
states following stochastic moves, and provides a
principled way to model uncertainty.
However, to deal with uncertainty, POMDPs
maintain distributions over all possible states. But
then training an optimal policy is an NP hard
problem and thus not tractable for any non-trivial
application. In recent works this issue is ad-
dressed by mapping the dialog state representation
?Fabrice Lefe`vre is currently on leave from the Univer-
sity of Avignon, France.
space (the master space) into a smaller summary
space (Williams and Young, 2007). Even though
optimal policies remain out of reach, sub-optimal
solutions can be found by means of grid-based al-
gorithms.
Within the Hidden Information State (HIS)
framework (Young et al, 2009), policies are rep-
resented by a set of grid points in the summary be-
lief space. Beliefs in master space are first mapped
into summary space and then mapped into a sum-
mary action via the dialogue policy. The resulting
summary action is then mapped back into master
space and output to the user.
Methods which support interpolation between
points are generally required to scale well to large
state spaces (Pineau et al, 2003). In the current
version of the HIS framework, the policy chooses
the system action by associating each new belief
point with the single, closest, grid point. In the
present work, a k-nearest neighbour extension is
evaluated in which the policy decision is based on
a locally weighted regression over a subset of rep-
resentative grid points. This method thus lies be-
tween a strictly grid-based and a point-based value
iteration approach as it interpolates the value func-
tion around the queried belief point. It thus re-
duces the policy?s dependency on the belief grid
point selection and increases robustness to input
noise.
The next section gives an overview of the
CUED HIS POMDP dialogue system which we
extended for our experiments. In Section 3, the
grid-based approach to policy optimisation is in-
troduced followed by a presentation of the k-
nn Monte-Carlo policy optimization in Section 4,
along with an evaluation on a simulated user.
272
2 The CUED Spoken Dialogue System
2.1 System Architecture
The CUED HIS-based dialogue system pipelines
five modules: the ATK speech recogniser, an
SVM-based semantic tuple classifier, a POMDP
dialogue manager, a natural language generator,
and an HMM-based speech synthesiser. During
an interaction with the system, the user?s speech
is first decoded by the recogniser and an N-best
list of hypotheses is sent to the semantic classifier.
In turn the semantic classifier outputs an N-best
list of user dialogue acts. A dialogue act is a se-
mantic representation of the user action headed by
the user intention (such as inform, request,
etc) followed by a list of items (slot-value pairs
such as type=hotel, area=east etc). The
N-best list of dialogue acts is used by the dialogue
manager to update the dialogue state. Based on
the state hypotheses and the policy, a machine ac-
tion is determined, again in the form of a dialogue
act. The natural language generator translates the
machine action into a sentence, finally converted
into speech by the HMM synthesiser. The dia-
logue system is currently developed for a tourist
information domain (Towninfo). It is worth not-
ing that the dialogue manager does not contain any
domain-specific knowledge.
2.2 HIS Dialogue Manager
The unobserved dialogue state of the HIS dialogue
manager consists of the user goal, the dialogue his-
tory and the user action. The user goal is repre-
sented by a partition which is a tree structure built
according to the domain ontology. The nodes in
the partition consist mainly of slots and values.
When querying the venue database using the par-
tition, a set of matching entities can be produced.
The dialogue history consists of the grounding
states of the nodes in the partition, generated us-
ing a finite state automaton and the previous user
and system action. A hypothesis in the HIS ap-
proach is then a triple combining a partition, a user
action and the respective set of grounding states.
The distribution over all hypotheses is maintained
throughout the dialogue (belief state monitoring).
Considering the ontology size for any real-world
problem, the so-defined state space is too large for
any POMDP learning algorithm. Hence to obtain a
tractable policy, the state/action space needs to be
reduced to a smaller scale summary space. The set
of possible machine dialogue acts is also reduced
in summary space. This is mainly achieved by re-
Master Space
Masters Sppp c  uamyppp
eus Sers Sppp us SamypppMMM
Mast er S pr
cr S pr uSr pSm Mayt
Summary Space
Master Spcu rmymty
c
um
a
ycr
y rcsProceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 1552?1561,
Uppsala, Sweden, 11-16 July 2010. c?2010 Association for Computational Linguistics
Phrase-based Statistical Language Generation using
Graphical Models and Active Learning
Franc?ois Mairesse, Milica Gas?ic?, Filip Jurc???c?ek,
Simon Keizer, Blaise Thomson, Kai Yu and Steve Young?
Cambridge University Engineering Department, Trumpington Street, Cambridge, CB2 1PZ, UK
{f.mairesse, mg436, fj228, sk561, brmt2, ky219, sjy}@eng.cam.ac.uk
Abstract
Most previous work on trainable language
generation has focused on two paradigms:
(a) using a statistical model to rank a
set of generated utterances, or (b) using
statistics to inform the generation deci-
sion process. Both approaches rely on
the existence of a handcrafted generator,
which limits their scalability to new do-
mains. This paper presents BAGEL, a sta-
tistical language generator which uses dy-
namic Bayesian networks to learn from
semantically-aligned data produced by 42
untrained annotators. A human evalua-
tion shows that BAGEL can generate nat-
ural and informative utterances from un-
seen inputs in the information presentation
domain. Additionally, generation perfor-
mance on sparse datasets is improved sig-
nificantly by using certainty-based active
learning, yielding ratings close to the hu-
man gold standard with a fraction of the
data.
1 Introduction
The field of natural language generation (NLG) is
one of the last areas of computational linguistics to
embrace statistical methods. Over the past decade,
statistical NLG has followed two lines of research.
The first one, pioneered by Langkilde and Knight
(1998), introduces statistics in the generation pro-
cess by training a model which reranks candi-
date outputs of a handcrafted generator. While
their HALOGEN system uses an n-gram language
model trained on news articles, other systems have
used hierarchical syntactic models (Bangalore and
Rambow, 2000), models trained on user ratings of
?This research was partly funded by the UK EPSRC un-
der grant agreement EP/F013930/1 and funded by the EU
FP7 Programme under grant agreement 216594 (CLASSiC
project: www.classic-project.org).
utterance quality (Walker et al, 2002), or align-
ment models trained on speaker-specific corpora
(Isard et al, 2006).
A second line of research has focused on intro-
ducing statistics at the generation decision level,
by training models that find the set of genera-
tion parameters maximising an objective function,
e.g. producing a target linguistic style (Paiva and
Evans, 2005; Mairesse and Walker, 2008), gener-
ating the most likely context-free derivations given
a corpus (Belz, 2008), or maximising the expected
reward using reinforcement learning (Rieser and
Lemon, 2009). While such methods do not suffer
from the computational cost of an overgeneration
phase, they still require a handcrafted generator to
define the generation decision space within which
statistics can be used to find an optimal solution.
This paper presents BAGEL (Bayesian networks
for generation using active learning), an NLG sys-
tem that can be fully trained from aligned data.
While the main requirement of the generator is to
produce natural utterances within a dialogue sys-
tem domain, a second objective is to minimise the
overall development effort. In this regard, a major
advantage of data-driven methods is the shift of
the effort from model design and implementation
to data annotation. In the case of NLG systems,
learning to produce paraphrases can be facilitated
by collecting data from a large sample of annota-
tors. Our meaning representation should therefore
(a) be intuitive enough to be understood by un-
trained annotators, and (b) provide useful gener-
alisation properties for generating unseen inputs.
Section 2 describes BAGEL?s meaning represen-
tation, which satisfies both requirements. Sec-
tion 3 then details how our meaning representation
is mapped to a phrase sequence, using a dynamic
Bayesian network with backoff smoothing.
Within a given domain, the same semantic
concept can occur in different utterances. Sec-
tion 4 details how BAGEL exploits this redundancy
1552
to improve generation performance on sparse
datasets, by guiding the data collection process
using certainty-based active learning (Lewis and
Catlett, 1994). We train BAGEL in the informa-
tion presentation domain, from a corpus of utter-
ances produced by 42 untrained annotators (see
Section 5.1). An automated evaluation metric is
used to compare preliminary model and training
configurations in Section 5.2, while Section 5.3
shows that the resulting system produces natural
and informative utterances, according to 18 hu-
man judges. Finally, our human evaluation shows
that training using active learning significantly im-
proves generation performance on sparse datasets,
yielding results close to the human gold standard
using a fraction of the data.
2 Phrase-based generation from
semantic stacks
BAGEL uses a stack-based semantic representa-
tion to constrain the sequence of semantic con-
cepts to be searched. This representation can be
seen as a linearised semantic tree similar to the
one previously used for natural language under-
standing in the Hidden Vector State model (He
and Young, 2005). A stack representation provides
useful generalisation properties (see Section 3.1),
while the resulting stack sequences are relatively
easy to align (see Section 5.1). In the context of
dialogue systems, Table 1 illustrates how the input
dialogue act is first mapped to a set of stacks of
semantic concepts, and then aligned with a word
sequence. The bottom concept in the stack will
typically be a dialogue act type, e.g. an utterance
providing information about the object under dis-
cussion (inform) or specifying that the request
of the user cannot be met (reject). Other con-
cepts include attributes of that object (e.g., food,
area), values for those attributes (e.g., Chinese,
riverside), as well as special symbols for negat-
ing underlying concepts (e.g., not) or specifying
that they are irrelevant (e.g., dontcare).
The generator?s goal is thus finding the
most likely realisation given an unordered
set of mandatory semantic stacks Sm derived
from the input dialogue act. For example,
s =inform(area(centre)) is a mandatory stack
associated with the dialogue act in Table 1 (frame
8). While mandatory stacks must all be conveyed
in the output realisation, Sm does not contain the
optional intermediary stacks Si that can refer to
(a) general attributes of the object under discus-
sion (e.g., inform(area) in Table 1), or (b) to
concepts that are not in the input at all, which are
associated with the singleton stack inform (e.g.,
phrases expressing the dialogue act type, or clause
aggregation operations). For example, the stack
sequence in Table 1 contains 3 intermediary stacks
for t = 2, 5 and 7.
BAGEL?s granularity is defined by the semantic
annotation in the training data, rather than external
linguistic knowledge about what constitutes a unit
of meaning, i.e. contiguous words belonging to
the same semantic stack are modelled as an atomic
observation unit or phrase.1 In contrast with word-
level models, a major advantage of phrase-based
generation models is that they can model long-
range dependencies and domain-specific idiomatic
phrases with fewer parameters.
3 Dynamic Bayesian networks for NLG
Dynamic Bayesian networks have been used suc-
cessfully for speech recognition, natural language
understanding, dialogue management and text-to-
speech synthesis (Rabiner, 1989; He and Young,
2005; Lefe`vre, 2006; Thomson and Young, 2010;
Tokuda et al, 2000). Such models provide a
principled framework for predicting elements in a
large structured space, such as required for non-
trivial NLG tasks. Additionally, their probabilistic
nature makes them suitable for modelling linguis-
tic variation, i.e. there can be multiple valid para-
phrases for a given input.
BAGEL models the generation task as finding
the most likely sequence of realisation phrases
R? = (r1...rL) given an unordered set of manda-
tory semantic stacks Sm, with |Sm| ? L. BAGEL
must thus derive the optimal sequence of semantic
stacks S? that will appear in the utterance given
Sm, i.e. by inserting intermediary stacks if needed
and by performing content ordering. Any num-
ber of intermediary stacks can be inserted between
two consecutive mandatory stacks, as long as all
their concepts are included in either the previous
or following mandatory stack, and as long as each
stack transition leads to a different stack (see ex-
ample in Table 1). Let us define the set of possi-
ble stack sequences matching these constraints as
Seq(Sm) ? {S = (s1...sL) s.t. st ? Sm ? Si}.
We propose a model which estimates the dis-
1The term phrase is thus defined here as any sequence of
one or more words.
1553
Charlie Chan is a Chinese restaurant near Cineworld in the centre of town
Charlie Chan Chinese restaurant Cineworld centre
name food type near near area area
inform inform inform inform inform inform inform inform
t = 1 t = 2 t = 3 t = 4 t = 5 t = 6 t = 7 t = 8
Table 1: Example semantic stacks aligned with an utterance for the dialogue act
inform(name(Charlie Chan) type(restaurant) area(centre) food(Chinese) near(Cineworld)). Mandatory
stacks are in bold.
tribution P (R|Sm) from a training set of real-
isation phrases aligned with semantic stack se-
quences, by marginalising over all stack sequences
in Seq(Sm):
P (R|Sm) =
?
S?Seq(Sm)
P (R,S|Sm)
=
?
S?Seq(Sm)
P (R|S,Sm)P (S|Sm)
=
?
S?Seq(Sm)
P (R|S)P (S|Sm) (1)
Inference over the model defined in (1) requires
the decoding algorithm to consider all possible or-
derings over Seq(Sm) together with all possible
realisations, which is intractable for non-trivial do-
mains. We thus make the additional assumption
that the most likely sequence of semantic stacks
S? given Sm is the one yielding the optimal reali-
sation phrase sequence:
P (R|Sm) ? P (R|S
?)P (S?|Sm) (2)
with S? = argmax
S?Seq(Sm)
P (S|Sm) (3)
The semantic stacks are therefore decoded first
using the model in Fig. 1 to solve the argmax
in (3). The decoded stack sequence S? is then
treated as observed in the realisation phase, in
which the model in Fig. 2 is used to find the real-
isation phrase sequence R? maximising P (R|S?)
over all phrase sequences of length L = |S?| in
our vocabulary:
R? = argmax
R=(r1...rL)
P (R|S?)P (S?|Sm) (4)
= argmax
R=(r1...rL)
P (R|S?) (5)
In order to reduce model complexity, we fac-
torise our model by conditioning the realisation
phrase at time t on the previous phrase rt?1,
and the previous, current, and following semantic
stacks. The semantic stack st at time t is assumed
last mandatory 
stack
stack set 
validator
first frame
semantic 
stack s
stack set tracker
repeated frame final frame
Figure 1: Graphical model for the semantic decod-
ing phase. Plain arrows indicate smoothed proba-
bility distributions, dashed arrows indicate deter-
ministic relations, and shaded nodes are observed.
The generation of the end semantic stack symbol
deterministically triggers the final frame.
to depend only on the previous two stacks and the
last mandatory stack su ? Sm with 1 ? u < t:
P (S|Sm) =
?
?
?
?T
t=1 P (st|st?1, st?2, su)
if S ? Seq(Sm)
0 otherwise
(6)
P (R|S?) =
T?
t=1
P (rt|rt?1, s
?
t?1, s
?
t , s
?
t+1) (7)
While dynamic Bayesian networks typically
take sequential inputs, mapping a set of seman-
tic stacks to a sequence of phrases is achieved
by keeping track of the mandatory stacks that
were visited in the current sequence (see stack set
tracker variable in Fig. 1), and pruning any se-
quence that has not included all mandatory input
stacks on reaching the final frame (see observed
stack set validator variable in Fig. 1). Since the
number of intermediary stacks is not known at de-
coding time, the network is unrolled for a fixed
number of frames T defining the maximum num-
ber of phrases that can be generated (e.g., T =
50). The end of the stack sequence is then deter-
mined by a special end symbol, which can only
be emitted within the T frames once all mandatory
stacks have been visited. The probability of the re-
sulting utterance is thus computed over all frames
up to the end symbol, which determines the length
1554
L of S? and R?. While the decoding constraints
enforce that L > |Sm|, the search for S? requires
comparing sequences of different lengths. A con-
sequence is that shorter sequences containing only
mandatory stacks are likely to be favoured. While
future work should investigate length normalisa-
tion strategies, we find that the learned transition
probabilities are skewed enough to favour stack
sequences including intermediary stacks.
Once the topology and the decoding constraints
of the network have been defined, any inference al-
gorithm can be used to search for S? and R?. We
use the junction tree algorithm implemented in the
Graphical Model ToolKit (GMTK) for our exper-
iments (Bilmes and Zweig, 2002), however both
problems can be solved using a standard Viterbi
search given the appropriate state representation.
In terms of computational complexity, it is impor-
tant to note that the number of stack sequences
Seq(Sm) to search over increases exponentially
with the number of input mandatory stacks. Nev-
ertheless, we find that real-time performance can
be achieved by pruning low probability sequences,
without affecting the quality of the solution.
3.1 Generalisation to unseen semantic stacks
In order to generalise to semantic stacks which
have not been observed during training, the re-
alisation phrase r is made dependent on under-
specified stack configurations, i.e. the tail l
and the head h of the stack. For example, the
last stack in Table 1 is associated with the head
centre and the tail inform(area). As a re-
sult, BAGEL assigns non-zero probabilities to re-
alisation phrases in unseen semantic contexts, by
backing off to the head and the tail of the stack.
A consequence is that BAGEL?s lexical realisa-
tion can generalise across contexts. For exam-
ple, if reject(area(centre)) was never ob-
served at training time, P (r = centre of town|s =
reject(area(centre))) will be estimated by
backing off to P (r = centre of town|h =
centre). BAGEL can thus generate ?there are
no venues in the centre of town? if the phrase
?centre of town? was associated with the con-
cept centre in a different context, such as
inform(area(centre)). The final realisation
model is illustrated in Fig. 2:
realisation phrase r
repeated frame final framefirst frame
stack head h
semantic 
stack s
stack tail l
Figure 2: Graphical model for the realisation
phase. Dashed arrows indicate deterministic re-
lations, and shaded node are observed.
!"#$%&& '(")*+
11111 ,,,,,,,| +?+?? ttttttttt sssllrlhr
ttttttt sllrlhr ,,,,,| 111 +??
111 ,,,,| +?? tttttt llrlhr
ttt lhr ,|21,| ?? ttt sss
uttt ssss ,,| 21 ??
tt hr |1| ?tt ss
trts
Figure 3: Backoff graphs for the semantic decod-
ing and realisation models.
P (R|S?) =
L?
t=1
P (rt|rt?1, ht, lt?1, lt, lt+1,
s?t?1, s
?
t , s
?
t+1) (8)
Conditional probability distributions are repre-
sented as factored language models smoothed us-
ing Witten-Bell interpolated backoff smoothing
(Bilmes and Kirchhoff, 2003), according to the
backoff graphs in Fig. 3. Variables which are the
furthest away in time are dropped first, and par-
tial stack variables are dropped last as they are ob-
served the most.
It is important to note that generating unseen se-
mantic stacks requires all possible mandatory se-
mantic stacks in the target domain to be prede-
fined, in order for all stack unigrams to be assigned
a smoothed non-zero probability.
3.2 High cardinality concept abstraction
While one should expect a trainable generator
to learn multiple lexical realisations for low-
cardinality semantic concepts, learning lexical
realisations for high-cardinality database entries
(e.g., proper names) would increase the number of
model parameters prohibitively. We thus divide
pre-terminal concepts in the semantic stacks into
two types: (a) enumerable attributes whose val-
ues are associated with distinct semantic stacks in
1555
our model (e.g., inform(pricerange(cheap))),
and (b) non-enumerable attributes whose values
are replaced by a generic symbol before train-
ing in both the utterance and the semantic stack
(e.g., inform(name(X)). These symbolic values
are then replaced in the surface realisation by the
corresponding value in the input specification. A
consequence is that our model can only learn syn-
onymous lexical realisations for enumerable at-
tributes.
4 Certainty-based active learning
A major issue with trainable NLG systems is the
lack of availability of domain-specific data. It is
therefore essential to produce NLG models that
minimise the data annotation cost.
BAGEL supports the optimisation of the data
collection process through active learning, in
which the next semantic input to annotate is de-
termined by the current model. The probabilis-
tic nature of BAGEL allows the use of certainty-
based active learning (Lewis and Catlett, 1994),
by querying the k semantic inputs for which the
model is the least certain about its output real-
isation. Given a finite semantic input space I
representing all possible dialogue acts in our do-
main (i.e., the set of all sets of mandatory seman-
tic stacks Sm), BAGEL?s active learning training
process iterates over the following steps:
1. Generate an utterance for each semantic input Sm ? I
using the current model.2
2. Annotate the k semantic inputs {S1m...S
k
m} yielding
the lowest realisation probability, i.e. for q ? (1..k)
Sqm = argmin
Sm?I\{S1m...S
q?1
m }
(max
R
P (R|Sm)) (9)
with P (R|Sm) defined in (2).
3. Retrain the model with the additional k data points.
The number of utterances to be queried k should
depend on the flexibility of the annotators and the
time required for generating all possible utterances
in the domain.
5 Experimental method
BAGEL?s factored language models are trained us-
ing the SRILM toolkit (Stolcke, 2002), and de-
coding is performed using GMTK?s junction tree
inference algorithm (Bilmes and Zweig, 2002).
2Sampling methods can be used if I is infinite or too
large.
Since each active learning iteration requires gen-
erating all training utterances in our domain, they
are generated using a larger clique pruning thresh-
old than the test utterances used for evaluation.
5.1 Corpus collection
We train BAGEL in the context of a dialogue
system providing information about restaurants
in Cambridge. The domain contains two dia-
logue act types: (a) inform: presenting infor-
mation about a restaurant (see Table 1), and (b)
reject: informing that the user?s constraints can-
not be met (e.g., ?There is no cheap restaurant
in the centre?). Our domain contains 8 restau-
rant attributes: name, food, near, pricerange,
postcode, phone, address, and area, out of
which food, pricerange, and area are treated
as enumerable.3 Our input semantic space is ap-
proximated by the set of information presentation
dialogue acts produced over 20,000 simulated di-
alogues between our statistical dialogue manager
(Young et al, 2010) and an agenda-based user
simulator (Schatzmann et al, 2007), which results
in 202 unique dialogue acts after replacing non-
enumerable values by a generic symbol. Each di-
alogue act contains an average of 4.48 mandatory
semantic stacks.
As one of our objectives is to test whether
BAGEL can learn from data provided by a large
sample of untrained annotators, we collected a
corpus of semantically-aligned utterances using
Amazon?s Mechanical Turk data collection ser-
vice. A crucial aspect of data collection for
NLG is to ensure that the annotators under-
stand the meaning of the semantics to be con-
veyed. Annotators were first asked to provide
an utterance matching an abstract description
of the dialogue act, regardless of the order in
which the constraints are presented (e.g., Offer
the venue Taj Mahal and provide the information
type(restaurant), area(riverside), food(Indian),
near(The Red Lion)). The order of the constraints
in the description was randomised to reduce the
effect of priming. The annotators were then asked
to align the attributes (e.g., Indicate the region of
the utterance related to the concept ?area?), and
the attribute values (e.g., Indicate only the words
related to the concept ?riverside?). Two para-
phrases were collected for each dialogue act in
our domain, resulting in a total of 404 aligned ut-
3With the exception of areas defined as proper nouns.
1556
rt st ht lt
<s> START START START
The Rice Boat inform(name(X)) X inform(name)
is a inform inform EMPTY
restaurant inform(type(restaurant)) restaurant inform(type)
in the inform(area) area inform
riverside inform(area(riverside)) riverside inform(area)
area inform(area) area inform
that inform inform EMPTY
serves inform(food) food inform
French inform(food(French)) French inform(food)
food inform(food) food inform
</s> END END END
Table 2: Example utterance annotation used to estimate the conditional probability distributions of the
models in Figs. 1 and 2 ( rt=realisation phrase, st=semantic stack, ht=stack head, lt=stack tail).
terances produced by 42 native speakers of En-
glish. After manually checking and normalising
the dataset,4 the layered annotations were auto-
matically mapped to phrase-level semantic stacks
by splitting the utterance into phrases at annotation
boundaries. Each annotated utterance is then con-
verted into a sequence of symbols such as in Ta-
ble 2, which are used to estimate the conditional
probability distributions defined in (6) and (8).
The resulting vocabulary consists of 52 distinct se-
mantic stacks and 109 distinct realisation phrases,
with an average of 8.35 phrases per utterance.
5.2 BLEU score evaluation
We first evaluate BAGEL using the BLEU auto-
mated metric (Papineni et al, 2002), which mea-
sures the word n-gram overlap between the gen-
erated utterances and the 2 reference paraphrases
over a test corpus (with n up to 4). While BLEU
suffers from known issues such as a bias towards
statistical NLG systems (Reiter and Belz, 2009), it
provides useful information when comparing sim-
ilar systems. We evaluate BAGEL for different
training set sizes, model dependencies, and active
learning parameters. Our results are averaged over
a 10-fold cross-validation over distinct dialogue
acts, i.e. dialogue acts used for testing are not seen
at training time,5 and all systems are tested on the
same folds. The training and test sets respectively
contain an average of 181 and 21 distinct dialogue
acts, and each dialogue act is associated with two
paraphrases, resulting in 362 training utterances.
4The normalisation process took around 4 person-hour for
404 utterances.
5We do not evaluate performance on dialogue acts used
for training, as the training examples can trivially be used as
generation templates.
!"#$
!"%
!"%$
!"#
!
"
#
$
%
&
'
(
)
%
*
+
,
-
"
!"$
!"$$
!
"
#
$
%
&
'
(
)
%
*
+
,
-
"
!
"
#
$
%
&
'
(
)
%
*
+
,
-
"
&'(()*+,-(
!".
!".$!"
#
$
%
&
'
(
)
%
*
+
,
-
"
/+)01234)5234+66/+)01234)5234+667)8+)6'1'9-)0-*281:30!";$ <! =! .! #! >! <!! <=! <$! =!! =$! ;!! ;#=
!
"
#
$
%
&
'
(
)
%
*
+
,
-
"
.-#/$/$0%*"1%*/2"
!
"
#
$
%
&
'
(
)
%
*
+
,
-
"
!
"
#
$
%
&
'
(
)
%
*
+
,
-
"
Figure 4: BLEU score averaged over a 10-fold
cross-validation for different training set sizes and
network topologies, using random sampling.
Results: Fig. 4 shows that adding a dependency
on the future semantic stack improves perfor-
mances for all training set sizes, despite the added
model complexity. Backing off to partial stacks
also improves performance, but only for sparse
training sets.
Fig. 5 compares the full model trained using
random sampling in Fig. 4 with the same model
trained using certainty-based active learning, for
different values of k. As our dataset only con-
tains two paraphrases per dialogue act, the same
dialogue act can only be queried twice during the
active learning procedure. A consequence is that
the training set used for active learning converges
towards the randomly sampled set as its size in-
creases. Results show that increasing the train-
ing set one utterance at a time using active learn-
ing (k = 1) significantly outperforms random
sampling when using 40, 80, and 100 utterances
(p < .05, two-tailed). Increasing the number of
utterances to be queried at each iteration to k = 10
results in a smaller performance increase. A possi-
1557
!"#
!"##
!"$
!"$#
!"%
!"%#
!
"
#
$
%
&
'
(
)
%
*
+
,
-
"
&'()*+,-'+./0(1
!"2#
!"3
!"3#
4! 5! 3! $! 6! 4!! 45! 4#! 5!! 5#! 2!! 2$5
!
"
#
$
%
&
'
(
)
%
*
+
,
-
"
.-#/$/$0%*"1%*/2"
7890:;,/;'<(0(1,=>47890:;,/;'<(0(1,=>4!
Figure 5: BLEU score averaged over a 10-fold
cross-validation for different numbers of queries
per iteration, using the full model with the query
selection criterion (9).
!"#
!"##
!"$
!"$#
!"%
!"%#
!
"
#
$
%
&
'
(
)
%
*
+
,
-
"
&'(()(*+,-*.
!"/#
!"0
!"0#
1! 2! 0! $! 3! 1!! 12! 1#! 2!! 2#! /!! /$2
!
"
#
$
%
&
'
(
)
%
*
+
,
-
"
.-#/$/$0%*"1%*/2"
4*+,-*.),5-)6-7854*9+5:;)<9,';)6<-:;
Figure 6: BLEU score averaged over a 10-fold
cross-validation for different query selection cri-
teria, using the full model with k = 1.
ble explanation is that the model is likely to assign
low probabilities to similar inputs, thus any value
above k = 1 might result in redundant queries
within an iteration.
As the length of the semantic stack sequence
is not known before decoding, the active learn-
ing selection criterion presented in (9) is biased
towards longer utterances, which tend to have a
lower probability. However, Fig. 6 shows that
normalising the log probability by the number of
semantic stacks does not improve overall learn-
ing performance. Although a possible explanation
is that longer inputs tend to contain more infor-
mation to learn from, Fig. 6 shows that a base-
line selecting the largest remaining semantic input
at each iteration performs worse than the active
learning scheme for training sets above 20 utter-
ances. The full log probability selection criterion
defined in (9) is therefore used throughout the rest
of the paper (with k = 1).
5.3 Human evaluation
While automated metrics provide useful informa-
tion for comparing different systems, human feed-
back is needed to assess (a) the quality of BAGEL?s
outputs, and (b) whether training models using ac-
tive learning has a significant impact on user per-
ceptions. We evaluate BAGEL through a large-
scale subjective rating experiment using Amazon?s
Mechanical Turk service.
For each dialogue act in our domain, partici-
pants are presented with a ?gold standard? human
utterance from our dataset, which they must com-
pare with utterances generated by models trained
with and without active learning on a set of 20, 40,
100, and 362 utterances (full training set), as well
as with the second human utterance in our dataset.
See example utterances in Table 3. The judges are
then asked to evaluate the informativeness and nat-
uralness of each of the 8 utterances on a 5 point
likert-scale. Naturalness is defined as whether the
utterance could have been produced by a human,
and informativeness is defined as whether it con-
tains all the information in the gold standard utter-
ance. Each utterance is taken from the test folds of
the cross-validation experiment presented in Sec-
tion 5.2, i.e. the models are trained on up to 90%
of the data and the training set does not contain the
dialogue act being tested.
Results: Figs. 7 and 8 compare the naturalness
and informativeness scores of each system aver-
aged over all 202 dialogue acts. A paired t-test
shows that models trained on 40 utterances or
less produce utterances that are rated significantly
lower than human utterances for both naturalness
and informativeness (p < .05, two-tailed). How-
ever, models trained on 100 utterances or more do
not perform significantly worse than human utter-
ances for both dimensions, with a mean difference
below .10 over 202 comparisons. Given the large
sample size, this result suggests that BAGEL can
successfully learn our domain using a fraction of
our initial dataset.
As far as the learning method is concerned, a
paired t-test shows that models trained on 20 and
40 utterances using active learning significantly
outperform models trained using random sam-
pling, for both dimensions (p < .05). The largest
increase is observed using 20 utterances, i.e. the
naturalness increases by .49 and the informative-
ness by .37. When training on 100 utterances, the
effect of active learning becomes insignificant. In-
1558
Input inform(name(the Fountain) near(the Arts Picture House) area(centre) pricerange(cheap))
Human There is an inexpensive restaurant called the Fountain in the centre of town near the Arts Picture House
Rand-20 The Fountain is a restaurant near the Arts Picture House located in the city centre cheap price range
Rand-40 The Fountain is a restaurant in the cheap city centre area near the Arts Picture House
AL-20 The Fountain is a restaurant near the Arts Picture House in the city centre cheap
AL-40 The Fountain is an affordable restaurant near the Arts Picture House in the city centre
Full set The Fountain is a cheap restaurant in the city centre near the Arts Picture House
Input reject(area(Barnwell) near(Saint Mary?s Church))
Human I am sorry but I know of no venues near Saint Mary?s Church in the Barnwell area
Full set I am sorry but there are no venues near Saint Mary?s Church in the Barnwell area
Input inform(name(the Swan)area(Castle Hill) pricerange(expensive))
Human The Swan is a restaurant in Castle Hill if you are seeking something expensive
Full set The Swan is an expensive restaurant in the Castle Hill area
Input inform(name(Browns) area(centre) near(the Crowne Plaza) near(El Shaddai) pricerange(cheap))
Human Browns is an affordable restaurant located near the Crowne Plaza and El Shaddai in the centre of the city
Full set Browns is a cheap restaurant in the city centre near the Crowne Plaza and El Shaddai
Table 3: Example utterances for different input dialogue acts and system configurations. AL-20 = active
learning with 20 utterances, Rand = random sampling.
!"## !"$%
!"&'!"(% !")* *"%% *"%#
*"%'
++"$
!!"$
**"$
$
!
"
#
$
%
$
#
&
'
(
#
)
$
"
*
*
%
*
+
,
(
"
,-./01
##"$ +% *% #%% !(+
!
"
#
$
%
$
#
&
'
(
#
)
$
"
*
*
%
*
+
,
(
"
-(#.$.$/%*"&%*.0"
234567897-:.5.;<=1-.8=447:-.378>8*"%'
Figure 7: Naturalness mean opinion scores for dif-
ferent training set sizes, using random sampling
and active learning. Differences for training set
sizes of 20 and 40 are all significant (p < .05).
terestingly, while models trained on 100 utterances
outperform models trained on 40 utterances using
random sampling (p < .05), they do not signifi-
cantly outperform models trained on 40 utterances
using active learning (p = .15 for naturalness and
p = .41 for informativeness). These results sug-
gest that certainty-based active learning is benefi-
cial for training a generator from a limited amount
of data given the domain size.
Looking back at the results presented in Sec-
tion 5.2, we find that the BLEU score correlates
with a Pearson correlation coefficient of .42 with
the mean naturalness score and .35 with the mean
informativeness score, over all folds of all systems
tested (n = 70, p < .01). This is lower than
previous correlations reported by Reiter and Belz
(2009) in the shipping forecast domain with non-
expert judges (r = .80), possibly because our do-
main is larger and more open to subjectivity.
!"## !"$$
#"%&!"'& !"()
#"%$ #"%#
#"&!
**"+
!!"+
##"+
+
!
"
#
$
%
&
$
'
(
)
*
#
+
&
,
"
$
"
-
-
%
-
.
(
)
"
,-./01
&&"+ *% #% &%% !)*
!
"
#
$
%
&
$
'
(
)
*
#
+
&
,
"
$
"
-
-
%
-
.
(
)
"
/)#&$&$0%-"+%-&1"
234567897-:.5.;<=1-.8=447:-.378>8#"&!
Figure 8: Informativeness mean opinion scores for
different training set sizes, using random sampling
and active learning. Differences for training set
sizes of 20 and 40 are all significant (p < .05).
6 Related work
While most previous work on trainable NLG re-
lies on a handcrafted component (see Section 1),
recent research has started exploring fully data-
driven NLG models.
Factored language models have recently been
used for surface realisation within the OpenCCG
framework (White et al, 2007; Espinosa et al,
2008). More generally, chart generators for
different grammatical formalisms have been
trained from syntactic treebanks (White et al,
2007; Nakanishi et al, 2005), as well as from
semantically-annotated treebanks (Varges and
Mellish, 2001). However, a major difference with
our approach is that BAGEL uses domain-specific
data to generate a surface form directly from se-
mantic concepts, without any syntactic annotation
(see Section 7 for further discussion).
1559
This work is strongly related to Wong and
Mooney?s WASP?1 generation system (2007),
which combines a language model with an in-
verted synchronous CFG parsing model, effec-
tively casting the generation task as a translation
problem from a meaning representation to natu-
ral language. WASP?1 relies on GIZA++ to align
utterances with derivations of the meaning repre-
sentation (Och and Ney, 2003). Although early
experiments showed that GIZA++ did not perform
well on our data?possibly because of the coarse
granularity of our semantic representation?future
work should evaluate the generalisation perfor-
mance of synchronous CFGs in a dialogue system
domain.
Although we do not know of any work on ac-
tive learning for NLG, previous work has used
active learning for semantic parsing and informa-
tion extraction (Thompson et al, 1999; Tang et al,
2002), spoken language understanding (Tur et al,
2003), speech recognition (Hakkani-Tu?r et al,
2002), word alignment (Sassano, 2002), and more
recently for statistical machine translation (Blood-
good and Callison-Burch, 2010). While certainty-
based methods have been widely used, future work
should investigate the performance of committee-
based active learning for NLG, in which examples
are selected based on the level of disagreement be-
tween models trained on subsets of the data (Fre-
und et al, 1997).
7 Discussion and conclusion
This paper presents and evaluates BAGEL, a sta-
tistical language generator that can be trained en-
tirely from data, with no handcrafting required be-
yond the semantic annotation. All the required
subtasks?i.e. content ordering, aggregation, lex-
ical selection and realisation?are learned from
data using a unified model. To train BAGEL in a di-
alogue system domain, we propose a stack-based
semantic representation at the phrase level, which
is expressive enough to generate natural utterances
from unseen inputs, yet simple enough for data to
be collected from 42 untrained annotators with a
minimal normalisation step. A human evaluation
over 202 dialogue acts does not show any differ-
ence in naturalness and informativeness between
BAGEL?s outputs and human utterances. Addition-
ally, we find that the data collection process can
be optimised using active learning, resulting in a
significant increase in performance when training
data is limited, according to ratings from 18 hu-
man judges.6 These results suggest that the pro-
posed framework can largely reduce the develop-
ment time of NLG systems.
While this paper only evaluates the most likely
realisation given a dialogue act, we believe that
BAGEL?s probabilistic nature and generalisation
capabilities are well suited to model the linguis-
tic variation resulting from the diversity of annota-
tors. Our first objective is thus to evaluate the qual-
ity of BAGEL?s n-best outputs, and test whether
sampling from the output distribution can improve
naturalness and user satisfaction within a dialogue.
Our results suggest that explicitly modelling
syntax is not necessary for our domain, possi-
bly because of the lack of syntactic complexity
compared with formal written language. Never-
theless, future work should investigate whether
syntactic information can improve performance in
more complex domains. For example, the reali-
sation phrase can easily be conditioned on syntac-
tic constructs governing that phrase, and the recur-
sive nature of syntax can be modelled by keeping
track of the depth of the current embedded clause.
While syntactic information can be included with
no human effort by using syntactic parsers, their
robustness to dialogue system utterances must first
be evaluated.
Finally, recent years have seen HMM-based
synthesis models become competitive with unit se-
lection methods (Tokuda et al, 2000). Our long
term objective is to take advantage of those ad-
vances to jointly optimise the language genera-
tion and the speech synthesis process, by combin-
ing both components into a unified probabilistic
concept-to-speech generation model.
References
S. Bangalore and O. Rambow. Exploiting a probabilistic hi-
erarchical model for generation. In Proceedings of the
18th International Conference on Computational Linguis-
tics (COLING), pages 42?48, 2000.
A. Belz. Automatic generation of weather forecast texts us-
ing comprehensive probabilistic generation-space models.
Natural Language Engineering, 14(4):431?455, 2008.
J. Bilmes and K. Kirchhoff. Factored language models and
generalized parallel backoff. In Proceedings of HLT-
NAACL, short papers, 2003.
J. Bilmes and G. Zweig. The Graphical Models ToolKit: An
open source software system for speech and time-series
processing. In Proceedings of ICASSP, 2002.
6The full training corpus and the generated
utterances used for evaluation are available at
http://mi.eng.cam.ac.uk/?farm2/bagel.
1560
M. Bloodgood and C. Callison-Burch. Bucking the trend:
Large-scale cost-focused active learning for statistical ma-
chine translation. In Proceedings of the 48th Annual
Meeting of the Association for Computational Linguistics
(ACL), 2010.
D. Espinosa, M. White, and D. Mehay. Hypertagging: Su-
pertagging for surface realization with CCG. In Proceed-
ings of the 46th Annual Meeting of the Association for
Computational Linguistics (ACL), 2008.
Y. Freund, H. S. Seung, E.Shamir, and N. Tishby. Selective
sampling using the query by committee algorithm. Ma-
chine Learning, 28:133?168, 1997.
D. Hakkani-Tu?r, G. Riccardi, and A. Gorin. Active learn-
ing for automatic speech recognition. In Proceedings of
ICASSP, 2002.
Y. He and S. Young. Semantic processing using the Hidden
Vector State model. Computer Speech & Language, 19
(1):85?106, 2005.
A. Isard, C. Brockmann, and J. Oberlander. Individuality and
alignment in generated dialogues. In Proceedings of the
4th International Natural Language Generation Confer-
ence (INLG), pages 22?29, 2006.
I. Langkilde and K. Knight. Generation that exploits corpus-
based statistical knowledge. In Proceedings of the 36th
Annual Meeting of the Association for Computational Lin-
guistics (ACL), pages 704?710, 1998.
F. Lefe`vre. A DBN-based multi-level stochastic spoken lan-
guage understanding system. In Proceedings of the IEEE
Workshop on Spoken Language Technology (SLT), 2006.
D. D. Lewis and J. Catlett. Heterogeneous uncertainty am-
pling for supervised learning. In Proceedings of ICML,
1994.
F. Mairesse and M. A. Walker. Trainable generation of Big-
Five personality styles through data-driven parameter esti-
mation. In Proceedings of the 46th Annual Meeting of the
Association for Computational Linguistics (ACL), 2008.
H. Nakanishi, Y. Miyao, , and J. Tsujii. Probabilistic methods
for disambiguation of an HPSG-based chart generator. In
Proceedings of the IWPT, 2005.
F. J. Och and H. Ney. A systematic comparison of various
statistical alignment models. Computational Linguistics,
29(1):19?51, 2003.
D. S. Paiva and R. Evans. Empirically-based control of nat-
ural language generation. In Proceedings of the 43rd An-
nual Meeting of the Association for Computational Lin-
guistics (ACL), pages 58?65, 2005.
K. Papineni, S. Roukos, T. Ward, and W. J. Zhu. BLEU: a
method for automatic evaluation of machine translation. In
Proceedings of the 40th Annual Meeting of the Association
for Computational Linguistics (ACL), 2002.
L. R. Rabiner. Tutorial on Hidden Markov Models and se-
lected applications in speech recognition. Proceedings of
the IEEE, 77(2):257?285, 1989.
E. Reiter and A. Belz. An investigation into the validity
of some metrics for automatically evaluating natural lan-
guage generation systems. Computational Linguistics, 25:
529?558, 2009.
V. Rieser and O. Lemon. Natural language generation as
planning under uncertainty for spoken dialogue systems.
In Proceedings of the Annual Meeting of the European
Chapter of the ACL (EACL), 2009.
M. Sassano. An empirical study of active learning with sup-
port vector machines for japanese word segmentation. In
Proceedings of the 40th Annual Meeting of the Association
for Computational Linguistics (ACL), 2002.
J. Schatzmann, B. Thomson, K. Weilhammer, H. Ye, and
S. Young. Agenda-based user simulation for bootstrap-
ping a POMDP dialogue system. In Proceedings of HLT-
NAACL, short papers, pages 149?152, 2007.
A. Stolcke. SRILM ? an extensible language modeling
toolkit. In Proceedings of the International Conference
on Spoken Language Processing, 2002.
M. Tang, X. Luo, and S. Roukos. Active learning for statis-
tical natural language parsing. In Proceedings of the 40th
Annual Meeting of the Association for Computational Lin-
guistics (ACL), 2002.
C. Thompson, M. E. Califf, and R. J. Mooney. Active learn-
ing for natural language parsing and information extrac-
tion. In Proceedings of ICML, 1999.
B. Thomson and S. Young. Bayesian update of dialogue state:
A POMDP framework for spoken dialogue systems. Com-
puter Speech & Language, 24(4):562?588, 2010.
Y. Tokuda, T. Yoshimura, T. Masuko, T. Kobayashi, and
T. Kitamura. Speech parameter generation algorithms for
HMM-based speech synthesis. In Proceedings of ICASSP,
2000.
G. Tur, R. E. Schapire, and D. Hakkani-Tu?r. Active learn-
ing for spoken language understanding. In Proceedings of
ICASSP, 2003.
S. Varges and C. Mellish. Instance-based natural language
generation. In Proceedings of the Annual Meeting of the
North American Chapter of the ACL (NAACL), 2001.
M. A. Walker, O. Rambow, and M. Rogati. Training a sen-
tence planner for spoken dialogue using boosting. Com-
puter Speech and Language, 16(3-4), 2002.
M. White, R. Rajkumar, and S. Martin. Towards broad cov-
erage surface realization with CCG. In Proceedings of the
Workshop on Using Corpora for NLG: Language Genera-
tion and Machine Translation, 2007.
Y. W. Wong and R. Mooney. Generation by inverting a se-
mantic parser that uses statistical machine translation. In
Proceedings of HLT-NAACL, 2007.
S. Young, M. Gas?ic?, S. Keizer, F. Mairesse, J. Schatzmann,
B. Thomson, and K. Yu. The Hidden Information State
model: a practical framework for POMDP-based spoken
dialogue management. Computer Speech and Language,
24(2):150?174, 2010.
1561
Proceedings of the 13th Annual Meeting of the Special Interest Group on Discourse and Dialogue (SIGDIAL), pages 74?78,
Seoul, South Korea, 5-6 July 2012. c?2012 Association for Computational Linguistics
The Effect of Cognitive Load on a Statistical Dialogue System
M. Gas?ic??, P. Tsiakoulis?, M. Henderson?, B. Thomson?, K. Yu?, E. Tzirkel?? and S. Young?
?Cambridge University Engineering Department
Trumpington Street, Cambridge CB2 1PZ, UK
{mg436, pt344, mh521, brmt2, ky219, sjy}@eng.cam.ac.uk
??General Motors Advanced Technical Centre, Israel
eli.tzirkel@gm.com
Abstract
In recent years statistical dialogue systems
have gained significant attention due to their
potential to be more robust to speech recogni-
tion errors. However, these systems must also
be robust to changes in user behaviour caused
by cognitive loading. In this paper, a statistical
dialogue system providing restaurant informa-
tion is evaluated in a set-up where the sub-
jects used a driving simulator whilst talking to
the system. The influences of cognitive load-
ing were investigated and some clear differ-
ences in behaviour were discovered. In partic-
ular, it was found that users chose to respond
to different system questions and use different
speaking styles, which indicate the need for an
incremental dialogue approach.
1 Introduction
A spoken dialogue system enables a user to obtain
information while using their hands to perform some
other task, which in many cases is the user?s primary
task. A typical example is an in-car spoken dialogue
system where the spoken interaction is secondary to
the main task of driving the car (Weng et al, 2004).
This domain is particularly challenging since it in-
volves dealing with the errors caused by the varying
noise levels and changes in user behaviour caused
by the cognitive load.
A statistical approach to dialogue modelling has
been proposed as a means of automatically optimis-
ing dialogue policies. In particular, the partially ob-
servable Markov decision process (POMDP) model
for dialogue provides a representation of varying
levels of uncertainty of the user input, yielding more
robust dialogue policies (Williams and Young, 2007;
Thomson and Young, 2010; Young et al, 2010).
Another thread of research deals with speech
interfaces for in-car applications, see (Baron and
Green, 2006) for a review. Past research has inves-
tigated the extent to which speaking is cognitively
less demanding than typing (Gartner et al, 2001;
Tsimhoni et al, 2004; Kun et al, 2007). In addi-
tion, considerable research has examined how driv-
ing safety is influenced by a dialogue system (Lai
et al, 2001; Lee et al, 2001; Nielsen et al, 2008).
However, to the best of our knowledge, little work
has been done to investigate the effect of the cog-
nitive load when interacting with a real conversa-
tional spoken dialogue system. The work presented
in (Mishra et al, 2004) suggests that the user speech
is more disfluent when the user is performing an-
other task. However, this work is based on a Wiz-
ard of Oz framework, where a human provides the
system?s responses. Also, a push-to-talk button was
used for every utterance which will have affected the
natural flow of the dialogue. It is important to know
if the change of cognitive load has an effect on the
speaking style and whether the system can alter its
behaviour to accommodate for this.
In this paper we try to answer these questions by
examining dialogues where users drove a car simu-
lator and talked to an open-microphone fully auto-
mated spoken dialogue system at the same time.
The rest of the paper is organised as follows. Sec-
tion 2 provides an overview of the dialogue system
used and section 3 describes the evaluation set-up.
The analysis of the results is given in Section 4. Sec-
tion 5 concludes the paper.
74
Table 1: Example dialogue task
You are looking for a cheap restaurant and it
should be in the east part of town. Make sure you
get the address of the venue.
2 System overview
The user speaks to the system, and the acoustic sig-
nal is converted by the speech recogniser into a set
of sentence hypotheses, which represents a proba-
bility distribution over all possible things that the
user might have said. The sentence hypotheses are
converted into an N-best list of dialogue acts by a
semantic decoder. Since the dialogue state cannot
be directly observed it maintains a probability dis-
tribution over all states, which is called the belief
state. The belief state is updated at every user turn
using Bayesian inference treating the input dialogue
acts as evidence. Based on belief state, the optimal
system act is selected using a policy and which is
trained automatically using reinforcement learning.
The abstract system dialogue act is converted to an
appropriate utterance by a natural language genera-
tor and then converted to speech by an HMM-based
speech synthesiser. To enable in-car speech inter-
action via mobile phone, a VoIP interface is imple-
mented. The domain is Cambridge restaurant infor-
mation with a database of about 150 venues and 7
slots that users can query.
3 Evaluation set-up
Our goal is to understand system performance
when driving. However, due to the safety restric-
tions, performance was tested using a driving simu-
lator. The following sections explain the set-up.
3.1 Car simulator
The car simulator used in the evaluation was the
same as in (Davies and Robinson, 2011). It con-
sists of a seat, a steering wheel and pedals, which
give a realistic cab-like environment for the par-
ticipants. There is also a projection screen which
largely fills the visual field of the driver. The sim-
ulation software is a modified version of Rockstar
Games? Grand Theft Auto: San Andreas, with over
500 km of roads. For the purpose of the evaluation,
the subjects were asked to drive on the main motor-
way, to keep the lane and not to drive over 70mph.
3.2 Subjects
For the study 28 subjects were recruited, 22 where
native speakers. Each subject had to complete three
scenarios: (1) to drive the car simulator for 10 min-
utes, (2) to talk to the system for 7 dialogues and (3)
to talk to the system for 7 dialogues while driving.
The scenarios were in counter-balanced order.
While they were driving, the speed and the road
position were recorded. If the scenario involved
talking to the system, the instructor read out the di-
alogue task (see an example in Table 1) and dialled
the phone number. In addition, the subject had the
dialogue task displayed on a small screen next to the
driving wheel. The subject talked to the system us-
ing loud speaker mode on the mobile phone.
4 Results
To examine the influence of cognitive load, the
following examinations were performed. First, we
investigate if the subjects felt any change in the cog-
nitive load (Section 4.1). Then, in Section 4.2, we
examine how the driving was influenced by the sub-
jects talking to the system. Finally, we investigate
how successfully the subjects were able to complete
the dialogue tasks while driving (Section 4.3). This
is followed with an examination of the conversa-
tional patterns that occurred when the subjects were
driving whilst talking to the system (Section 4.4).
4.1 Cognitive load
After each scenario the subjects were asked to an-
swer five questions based on the NASA-TLX self-
reporting scheme for workload measurement. They
answered by providing a rating from 1 (very easy)
to 5 (very hard). The averaged results are given
in Table 2. We performed a Kruskal test, followed
by pairwise comparisons for every scenario for each
answer and all differences are statistically signifi-
cant (p < 0.03) apart from the differences in the
frustration, the stress and the pace between talking
and talking and driving. This means that they were
clearly able to feel the change in cognitive load.
75
Table 2: Subjective evaluation of the cognitive load
Driving Talking Talking&Driving
How mentally demanding was the scenario?
1.61 2.21 2.89
How hurried was the pace of the scenario?
1.21 1.71 1.89
How hard did you have to work?
1.5 2.32 2.96
How frustrated did you feel during the task?
1.29 2.61 2.61
How stressed did you feel during the task?
1.29 2.0 2.32
Table 3: Analysis of driving speed to determine which
measures are larger for Talking&Driving than Driving
Measure Percentage of
users
Confidence in-
terval
Higher speed 8% [1%, 25%]
Larger std.dev 77% [56%, 91%]
Larger entropy 85% [65%, 95%]
4.2 Driving performance
For 26 subjects we recorded position on the road
and the speed. Since these measurements vary sig-
nificantly across the subjects, for each subject we
calculated the average speed, the standard deviation
and the entropy and similarly for the average posi-
tion in the lane. For the speed, we computed how
many subjects had a higher average speed when they
were talking and driving versus when they were just
talking and similarly for the standard deviation and
the entropy. The results are given in Table 3. It
can be seen that the user?s speed is lower when they
are driving and talking, however, the increase in the
standard deviation and the entropy suggest that their
driving is more erratic. No significant differences
were observed for the road position.
4.3 Dialogue task completion
Each participant performed 14 dialogues, 7 for each
scenario. In total, there were 196 dialogues per sce-
nario. After each dialogue they told the instruc-
tor if they thought the dialogue was successful, and
this information was used to compute the subjective
Table 4: Subjective and Objective Task completion (196
Dialogues per scenario)
Talking Talking&Driving
Subjective 78.6% 74.0%
Objective 68.4% 64.8%
Table 5: Percentage of turns that are in line with the pre-
defined task
Talking Talking&Driving
Percentage of turns
that follow the task
98.3% 96.79%
Number of turns 1354 1388
completion rate. In addition, all dialogues were tran-
scribed and analysed to see if the system provided
information the user asked for and hence calculate
an objective completion rate. The results are given
in Table 4. These differences are not statistically sig-
nificant due to the small sample size. However, it
can be seen that the trend is that the dialogues where
the subject was not performing another task at the
same time were more successful. Also, it is inter-
esting that the subjective scores are higher than the
objective ones. This can be explained by the fact that
the dialogue tasks were predefined and the subjects
do not always pay sufficient attention to their task
descriptions.
4.4 Conversational patterns
Given that the subjects felt the change of cognitive
load when they were talking to the system and op-
erating the car simulator at the same time, we were
interested to see if there are any changes in the dia-
logues which might suggest this.
First, we examine how well they follow the given
task on a turn-to-turn basis. For example, if the task
is to find a cheap restaurant and if at some point
in the dialogue the user says I?d like an expensive
restaurant that turn is not consistent with the task.
The results are given in Table 5 and they are statisti-
cally significant (p < 0.01).
We then examine the number of contradictions on
a turn-to-turn basis. For example, if the user says I?d
like a cheap restaurant and later on they say I?d like
76
Table 6: User obedience to system questions
1. system requests or confirms and requests
Samples Obedience
Talking 392 67.6%
Talking&Driving 390 63.9%
2. system confirms
Samples Obedience
Talking 91 73.6%
Talking&Driving 92 81.5%
an expensive restaurant the latter turn is clearly a
contradiction. The percentage of contradicting turns
is less than 1% and the difference between the sce-
narios is not statistically significant. This suggests
that while users tend to forget the task they are given
when they are driving, they still act rationally despite
the increase in the cognitive load.
The next analysis concerns the user obedience,
i.e. the extent to which subjects answer the sys-
tem questions. We grouped the system questions in
two classes. The first class represents the questions
where the system requests a value for a particular
slot, for instance What part of town are you looking
for? and the questions where the system confirms
and requests at the same time, for instance You are
looking for a cheap restaurant. What part of town
are you looking for? The second class correspond to
system confirmations, for example Did you say you
are looking for a cheap restaurant? The percent-
age of the obedient user turns per class is given in
Table 6. Due to the small sample size these results
are not statistically significant. Still, it is interest-
ing to see that when driving the subjects appear to
be more obedient to the system confirmations than
when they are just talking. When the system makes
a confirmation, the user can answer with simple yes
or no, whereas when the system requests the value
of a particular slot, the user needs to think more to
provide an answer.
The number of barge-ins, the number of filler
words and the average speech intensity vary con-
siderably among the subjects. Therefore, we aver-
age these statistics per user and examine the number
of users for which the particular measure is greater
for the scenario where they talked to the system and
drove the simulator at the same time. The results
Table 7: Analysis of measures related to the speaking
style which values are larger for Talking&Driving than
Talking
Measure % of users Conf. interval
More barge-ins 87% [69%, 96%]
More fillers 73% [54%, 88%]
Higher intensity 67% [47%, 83%]
(Table 7) show that the number of barge-ins and the
number of fillers is significantly greater for the sce-
nario when they are talking and driving and the in-
tensity on average tend to be greater.
5 Conclusion and Future work
There are several important observations arising
from this study. Firstly, dialogues with cognitively
loaded users tend to be less successful. This sug-
gests that the system should alter its behaviour to
match user behaviour and alleviate the cognitive
load in order to maintain the level of performance.
This necessitates rapid on-line adaptation of dia-
logue policies.
The second observation is that cognitively loaded
users tend to respond to some types of system ques-
tions more than others. This indicates that the user
model within a POMDP dialogue system should be
conditioned on a measure of cognitive load.
Finally, this study has found that users barge-in
and use filler words significantly more often when
they are cognitively loaded. This suggests the need
for a much richer turn-taking model which allows
the system to use back-channels and barge-in when
the user hesitates. An obvious candidate is the in-
cremental approach (Schlangen and Skantze, 2009;
DeVault et al, 2009) which allows the system to pro-
cess partial user inputs, back-channels, predict short
term user input and interrupt the user during hesita-
tions. While incremental dialogue is a growing area
of study, it has not so far been examined in the con-
text of dialogue for secondary tasks. We signpost
this as an important area for future work.
Acknowledgments
We would like to thank to Peter Robinson and Ian
Davies for their help with the experiments.
77
References
A Baron and P Green. 2006. Safety and Usability of
Speech Interfaces for In-Vehicle Tasks while Driving:
A Brief Literature Review. Technical Report UMTRI-
2006-5.
I Davies and P Robinson. 2011. Emotional investment
in naturalistic data collection. In International Con-
ference on Affective Computing and Intelligent Inter-
action.
D DeVault, K Sagae, and DR Traum. 2009. Can I fin-
ish? Learning when to respond to incremental inter-
pretation results in interactive dialogue. In 10th An-
nual SIGDIAL meeting on Discourse and Dialogue.
U Gartner, W Konig, and T Wittig. 2001. Evaluation of
Manual vs. Speech Input When Using a Driver Infor-
mation System in Real Traffic. In International Driv-
ing Symposium on Human Factors in Driving Assess-
ment, Training and Vehicle Design.
A Kun, T Paek, and Z? Medenica. 2007. The effect of
speech interface accuracy on driving performance. In
Interspeech.
J Lai, K Cheng, P Green, and O Tsimhoni. 2001. On the
Road and on the Web? Comprehension of synthetic
and human speech while driving. In SIGCHI.
JD Lee, B Caven, S Haake, and TL Brown. 2001.
Speech-based Interaction with In-vehicle Computers:
The Effect of Speech-based E-mail on Drivers? Atten-
tion to the Roadway. Human Factors, 43:631?640.
R Mishra, E Shriberg, S Upson, J Chen, F Weng, S Pe-
ters, L Cavedon, J Niekrasz, H Cheng, and H Bratt.
2004. A wizard of Oz framework for collecting spo-
ken human-computer dialogs. In Interspeech.
BS Nielsen, B Harsham, B Raj, and C Forlines. 2008.
Speech-Based UI Design for the Automobile. Hand-
book of Research on User Interface Design and Eval-
uation for Mobile Technology, pages 237?252.
David Schlangen and Gabriel Skantze. 2009. A general,
abstract model of incremental dialogue processing. In
Proceedings of the 12th Conference of the European
Chapter of the Association for Computational Linguis-
tics, EACL ?09, pages 710?718.
B Thomson and S Young. 2010. Bayesian update of
dialogue state: A POMDP framework for spoken di-
alogue systems. Computer Speech and Language,
24(4):562?588.
O Tsimhoni, D Smith, and P Green. 2004. Address Entry
While Driving: Speech Recognition Versus a Touch-
Screen Keyboard. Human Factors, 46:600?610.
F Weng, L Cavedon, B Raghunathan, D Mirkovic,
H Cheng, H Schmidt, H Bratt, R Mishra, S Peters,
L Zhao, S Upson, E Shriberg, and C Bergmann. 2004.
Developing a conversational dialogue system for cog-
nitively overloaded users. In Proceedings of the Inter-
national Congress on Intelligent Transportation Sys-
tems.
JD Williams and SJ Young. 2007. Partially Observable
Markov Decision Processes for Spoken Dialog Sys-
tems. Computer Speech and Language, 21(2):393?
422.
SJ Young, M Gas?ic?, S Keizer, F Mairesse, J Schatzmann,
B Thomson, and K Yu. 2010. The Hidden Information
State Model: a practical framework for POMDP-based
spoken dialogue management. Computer Speech and
Language, 24(2):150?174.
78
