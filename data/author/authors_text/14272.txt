Proceedings of ACL-08: HLT, pages 647?655,
Columbus, Ohio, USA, June 2008. c?2008 Association for Computational Linguistics
Phrase Chunking using Entropy Guided Transformation Learning
Ruy L. Milidiu?
Departamento de Informa?tica
PUC-Rio
Rio de Janeiro, Brazil
milidiu@inf.puc-rio.br
C??cero Nogueira dos Santos
Departamento de Informa?tica
PUC-Rio
nogueira@inf.puc-rio.br
Julio C. Duarte
Centro Tecnolo?gico do Exe?rcito
Rio de Janeiro, Brazil
jduarte@ctex.eb.br
Abstract
Entropy Guided Transformation Learning
(ETL) is a new machine learning strategy
that combines the advantages of decision
trees (DT) and Transformation Based Learn-
ing (TBL). In this work, we apply the ETL
framework to four phrase chunking tasks: Por-
tuguese noun phrase chunking, English base
noun phrase chunking, English text chunking
and Hindi text chunking. In all four tasks,
ETL shows better results than Decision Trees
and also than TBL with hand-crafted tem-
plates. ETL provides a new training strat-
egy that accelerates transformation learning.
For the English text chunking task this corre-
sponds to a factor of five speedup. For Por-
tuguese noun phrase chunking, ETL shows the
best reported results for the task. For the other
three linguistic tasks, ETL shows state-of-the-
art competitive results and maintains the ad-
vantages of using a rule based system.
1 Introduction
Phrase Chunking is a Natural Language Processing
(NLP) task that consists in dividing a text into syn-
tactically correlated parts of words. Theses phrases
are non-overlapping, i.e., a word can only be a mem-
ber of one chunk (Sang and Buchholz, 2000). It pro-
vides a key feature that helps on more elaborated
NLP tasks such as parsing and information extrac-
tion.
Since the last decade, many high-performance
chunking systems were proposed, such as, SVM-
based (Kudo and Matsumoto, 2001; Wu et al,
2006), Winnow (Zhang et al, 2002), voted-
perceptrons (Carreras and Ma`rquez, 2003),
Transformation-Based Learning (TBL) (Ramshaw
and Marcus, 1999; Megyesi, 2002) and Hidden
Markov Model (HMM) (Molina and Pla, 2002),
Memory-based (Sang, 2002). State-of-the-art
systems for English base noun phrase chunking and
text chunking are based in statistical techniques
(Kudo and Matsumoto, 2001; Wu et al, 2006;
Zhang et al, 2002).
TBL is one of the most accurate rule-based tech-
niques for phrase chunking tasks (Ramshaw and
Marcus, 1999; Ngai and Florian, 2001; Megyesi,
2002). On the other hand, TBL rules must follow
patterns, called templates, that are meant to cap-
ture the relevant feature combinations. The process
of generating good templates is highly expensive.
It strongly depends on the problem expert skills to
build them. Even when a template set is available
for a given task, it may not be effective when we
change from a language to another (dos Santos and
Oliveira, 2005).
In this work, we apply Entropy Guided Transfor-
mation Learning (ETL) for phrase chunking. ETL is
a new machine learning strategy that combines the
advantages of Decision Trees (DT) and TBL (dos
Santos and Milidiu?, 2007a). The ETL key idea is to
use decision tree induction to obtain feature com-
binations (templates) and then use the TBL algo-
rithm to generate transformation rules. ETL pro-
duces transformation rules that are more effective
than decision trees and also eliminates the need of
a problem domain expert to build TBL templates.
We evaluate the performance of ETL over four
647
phrase chunking tasks: (1) English Base Noun
Phrase (NP) chunking; (2) Portuguese NP chunk-
ing; (3) English Text Chunking; and (4) Hindi Text
Chunking. Base NP chunking consists in recogniz-
ing non-overlapping text segments that contain NPs.
Text chunking consists in dividing a text into syn-
tactically correlated parts of words. For these four
tasks, ETL shows state-of-the-art competitive results
and maintains the advantages of using a rule based
system.
The remainder of the paper is organized as fol-
lows. In section 2, the ETL strategy is described.
In section 3, the experimental design and the corre-
sponding results are reported. Finally, in section 4,
we present our concluding remarks.
2 Entropy Guided Transformation
Learning
Entropy Guided Transformation Learning (ETL)
is a new machine learning strategy that com-
bines the advantages of Decision Trees (DT) and
Transformation-Based Learning (TBL) (dos Santos
and Milidiu?, 2007a). The key idea of ETL is to use
decision tree induction to obtain templates. Next,
the TBL strategy is used to generate transformation
rules. The proposed method is illustrated in the Fig.
1.
Figure 1: ETL - Entropy Guided Transformation Learn-
ing.
A combination of DT and TBL is presented in
(Corston-Oliver and Gamon, 2003). The main dif-
ference between Corston-Oliver & Gamon work and
the ETL strategy is that they extract candidate rules
directly from the DT, and then use the TBL strategy
to select the appropriate rules. Another difference is
that they use a binary DT, whereas ETL uses a DT
that is not necessarily binary.
An evolutionary approach based on Genetic Al-
gorithms (GA) to automatically generate TBL tem-
plates is presented in (Milidiu? et al, 2007). Us-
ing a simple genetic coding, the generated template
sets have efficacy near to the handcrafted templates
for the tasks: English Base Noun Phrase Identifica-
tion, Text Chunking and Portuguese Named Entities
Recognition. The main drawback of this strategy is
that the GA step is computationally expensive. If we
need to consider a large context window or a large
number of features, it can be infeasible.
The remainder of this section is organized as fol-
lows. In section 2.1, we describe the DT learning
algorithm. In section 2.2, the TBL algorithm is de-
picted. In section 2.3, we depict the process of ob-
taining templates from a decision tree decomposi-
tion. Finally, in section 2.4, we present a template
evolution scheme that speeds up the TBL step.
2.1 Decision Trees
Decision tree learning is one of the most widely used
machine learning algorithms. It performs a parti-
tioning of the training set using principles of Infor-
mation Theory. The learning algorithm executes a
general to specific search of a feature space. The
most informative feature is added to a tree structure
at each step of the search. Information Gain Ratio,
which is based on the data Entropy, is normally used
as the informativeness measure. The objective is to
construct a tree, using a minimal set of features, that
efficiently partitions the training set into classes of
observations. After the tree is grown, a pruning step
is carried out in order to avoid overfitting.
One of the most used algorithms for induction of
a DT is the C4.5 (Quinlan, 1993). We use Quinlan?s
C4.5 system throughout this work.
2.2 Transformation-Based Learning
Transformation Based error-driven Learning (TBL)
is a successful machine learning algorithm intro-
duced by Eric Brill (Brill, 1995). It has since been
used for several Natural Language Processing tasks,
such as part-of-speech (POS) tagging (Brill, 1995),
English text chunking (Ramshaw and Marcus, 1999;
dos Santos and Milidiu?, 2007b), spelling correc-
648
tion (Mangu and Brill, 1997), Portuguese appos-
itive extraction (Freitas et al, 2006), Portuguese
named entity extraction (Milidiu? et al, 2006) and
Portuguese noun-phrase chunking (dos Santos and
Oliveira, 2005), achieving state-of-the-art perfor-
mance in many of them.
TBL uses an error correcting strategy. Its main
scheme is to generate an ordered list of rules that
correct classification mistakes in the training set,
which have been produced by an initial classifier.
The requirements of the algorithm are:
? two instances of the training set, one that has
been correctly labeled, and another that re-
mains unlabeled;
? an initial classifier, the baseline system, which
classifies the unlabeled training set by trying
to apply the correct class for each sample. In
general, the baseline system is based on simple
statistics of the labeled training set; and
? a set of rule templates, which are meant to
capture the relevant feature combinations that
would determine the sample?s classification.
Concrete rules are acquired by instantiation of
this predefined set of rule templates.
? a threshold value, that is used as a stopping cri-
teria for the algorithm and is needed to avoid
overfitting to the training data.
The learning method is a mistake-driven greedy
procedure that iteratively acquires a set of transfor-
mation rules. The TBL algorithm can be depicted as
follows:
1. Starts applying the baseline system, in order to
guess an initial classification for the unlabeled
version of the training set;
2. Compares the resulting classification with the
correct one and, whenever a classification error
is found, all the rules that can correct it are gen-
erated by instantiating the templates. This tem-
plate instantiation is done by capturing some
contextual data of the sample being corrected.
Usually, a new rule will correct some errors, but
will also generate some other errors by chang-
ing correctly classified samples;
3. Computes the rules? scores (errors repaired - er-
rors created). If there is not a rule with a score
above an arbitrary threshold, the learning pro-
cess is stopped;
4. Selects the best scoring rule, stores it in the set
of learned rules and applies it to the training
set;
5. Returns to step 2.
When classifying a new sample item, the resulting
sequence of rules is applied according to its genera-
tion order.
2.3 DT Template Extraction
There are many ways to extract feature combinations
from decision trees. In an path from the root to the
leaves, more informative features appear first . Since
we want to generate the most promising templates
only, we just combine the more informative ones.
The process we use to extract templates from a
DT includes a depth-first traversal of the DT. For
each visited node, we create a new template that
combines its parent node template with the feature
used to split the data at that node. This is a very
simple decomposition scheme. Nevertheless, it re-
sults into extremely effective templates. We also use
pruned trees in all experiments shown in section 3.
Fig. 2 shows an excerpt of a DT generated for the
English text chunking task1. Using the described
method to extract templates from the DT shown in
Fig. 2, we obtain the template set listed in the left
side of Table 1. In order to generate more feature
combinations, without largely increasing the num-
ber of templates, we extend the template set by in-
cluding templates that do not have the root node fea-
ture. The extended template set for the DT shown in
Fig. 2 is listed in the right side of the Table 1.
We have also tried some other strategies that ex-
tract a larger number of templates from a DT. How-
ever, the efficacy of the learned rules is quite similar
to the one generated by the first method. This rein-
forces the conjecture that a DT generates informa-
tive feature combinations.
1CK[0] = Chunk tag of the current word (initial classifier
result); CK[?1] = previous word Chunk tag; CK[1] = next word
Chunk tag; POS[0] = current word POS tag; WRD[0] = current
word.
649
Table 1: Text chunking DT Template set example
Template set Extended template set
CK[0] CK[0]
CK[0] CK[1] CK[0] CK[1] CK[1]
CK[0] CK[1] WRD[0] CK[0] CK[1] WRD[0] CK[1] WRD[0]
CK[0] CK[1] WRD[0] CK[?1] CK[0] CK[1] WRD[0] CK[?1] CK[1] WRD[0] CK[?1]
CK[0] CK[1] POS[0] CK[0] CK[1] POS[0] CK[1] POS[0]
CK[0] CK[?1] CK[0] CK[?1] CK[?1]
Figure 2: Text chunking decision tree excerpt.
2.4 Template Evolution Speedup
TBL training time is highly sensitive to the number
and complexity of the applied templates. In (Cur-
ran and Wong, 2000), it is argued that we can bet-
ter tune the training time vs. templates complex-
ity trade-off by using an evolutionary template ap-
proach. The main idea is to apply only a small num-
ber of templates that evolve throughout the training.
When training starts, templates are short, consisting
of few feature combinations. As training proceeds,
templates evolve to more complex ones that contain
more feature combinations. In this way, only a few
templates are considered at any point in time. Nev-
ertheless, the descriptive power is not significantly
reduced.
The template evolution approach can be easily im-
plemented by using template sets extracted from a
DT. We implement this idea by successively training
TBL models. Each model uses only the templates
that contain feature combinations up to a given tree
level. For instance, using the tree shown in Fig. 2,
we have the following template sets for the three first
training rounds2:
1. CK[0] CK[1];
CK[0] CK[?1]
2. CK[0] CK[1] WRD[0];
CK[0] CK[1] POS[0]
3. CK[0] CK[1] WRD[0] CK[?1]
Using the template evolution strategy, the training
time is decreased by a factor of five for the English
text chunking task. This is a remarkable reduction,
since we use an implementation of the fastTBL algo-
rithm (Ngai and Florian, 2001) that is already a very
fast TBL version. The efficacy of the rules gener-
ated by the sequential training is quite similar to the
one obtained by training with all the templates at the
same time.
3 Experiments
This section presents the experimental setup and re-
sults of the application of ETL to four phrase chunk-
ing tasks. ETL results are compared with the results
of DT and TBL using hand-crafted templates.
In the TBL step, for each one of the four chunking
tasks, the initial classifier assigns to each word the
chunk tag that was most frequently associated with
the part-of-speech of that word in the training set.
The DT learning works as a feature selector and
is not affected by irrelevant features. We have tried
several context window sizes when training the clas-
sifiers. Some of the tested window sizes would be
very hard to be explored by a domain expert using
2We ignore templates composed of only one feature test.
650
TBL alone. The corresponding huge number of pos-
sible templates would be very difficult to be man-
aged by a template designer.
For the four tasks, the following experimental
setup provided us our best results.
ETL in the ETL learning, we use the features word,
POS and chunk. In order to overcome the spar-
sity problem, we only use the 200 most fre-
quent words to induce the DT. In the DT learn-
ing, the chunk tag of the word is the one applied
by the initial classifier. On the other hand, the
chunk tag of neighbor words are the true ones.
We report results for ETL trained with all the
templates at the same time as well as using tem-
plate evolution.
TBL the results for the TBL approach refers to TBL
trained with the set of templates proposed in
(Ramshaw and Marcus, 1999).
DT the best result for the DT classifier is shown.
The features word, POS and chunk are used to
generate the DT classifier. The chunk tag of a
word and its neighbors are the ones guessed by
the initial classifier. Using only the 100 most
frequent words gives our best results.
In all experiments, the term WS=X subscript
means that a window of size X was used for the
given model. For instance, ETLWS=3 corresponds
to ETL trained with window of size three, that is,
the current token, the previous and the next one.
3.1 Portuguese noun phrase chunking
For this task, we use the SNR-CLIC corpus de-
scribed in (Freitas et al, 2005). This corpus is
tagged with both POS and NP tags. The NP tags
are: I, for in NP; O, for out of NP; and B for the
leftmost word of an NP beginning immediately af-
ter another NP. We divided the corpus into 3514-
sentence (83346 tokens) training set and a 878-
sentence (20798 tokens) test set.
In Table 2 we compare the results3 of ETL with
DT and TBL. We can see that ETL, even with a
small window size, produces better results than DT
and TBL. The F?=1 of the ETLWS=7 classifier is
1.8% higher than the one of TBL and 2.6% higher
than the one of the DT classifier.
3#T = Number of templates.
Table 2: Portuguese noun phrase chunking.
Acc. Prec. Rec. F?=1 # T
(%) (%) (%) (%)
BLS 96.57 62.69 74.45 68.06 ?
DTWS=13 97.35 83.96 87.27 85.58 ?
TBL 97.45 85.48 87.32 86.39 100
ETLWS=3 97.61 86.12 87.24 86.67 21
ETLWS=5 97.68 86.85 87.49 87.17 35
ETLWS=7 97.82 88.15 88.20 88.18 34
ETLWS=9 97.82 88.02 88.34 88.18 40
Table 3 shows the results4 of ETL using template
evolution. As we can see, for the task of Portuguese
noun phrase chunking, the template evolution strat-
egy reduces the average training time in approxi-
mately 35%. On the other hand, there is a decrease
of the classifier efficacy in some cases.
Table 3: Portuguese noun phrase chunking using ETL
with template evolution.
Acc. Prec. Rec. F?=1 TTR
(%) (%) (%) (%) (%)
ETLWS=3 97.61 86.22 87.27 86.74 20.7
ETLWS=5 97.56 86.39 87.10 86.74 38.2
ETLWS=7 97.69 87.35 87.89 87.62 37.0
ETLWS=9 97.76 87.55 88.14 87.85 41.9
In (dos Santos and Oliveira, 2005), a special set
of six templates is shown. These templates are
designed to reduce classification errors of prepo-
sition within the task of Portuguese noun phrase
chunking. These templates use very specific do-
main knowledge and are difficult to DT and TBL
to extract. Table 4 shows the results of an experi-
ment where we include these six templates into the
Ramshaw&Marcus template set and also into the
template sets generated by ETL. Again, ETL pro-
duces better results than TBL.
Table 5 shows the results of using a committee
composed by the three best ETL classifiers. The
classification is done by selecting the most popular
tag among all the three committee members. The
achieved F?=1, 89.14% is the best one ever reported
for the SNR-CLIC corpus.
4TTR = Training time reduction.
651
Table 4: Portuguese noun phrase chunking using six ad-
ditional hand-crafted templates.
Acc. Prec. Rec. F?=1 # T
(%) (%) (%) (%)
BLS 96.57 62.69 74.45 68.06 ?
TBL 97.60 86.79 88.12 87.45 106
ETLWS=3 97.73 86.95 88.40 87.67 27
ETLWS=5 97.87 88.35 89.02 88.68 41
ETLWS=7 97.91 88.12 89.22 88.67 40
ETLWS=9 97.93 88.53 89.11 88.82 46
Table 5: Committee with the classifiers ETLWS=5,
ETLWS=7 and ETLWS=9, shown in Table 4.
Results (%)
Accuracy 97.97
Precision 88.62
Recall 89.67
F?=1 89.14
3.2 English base noun phrase chunking
The data used in the base NP chunking experiments
is the one by Ramshaw & Marcus (Ramshaw and
Marcus, 1999). This corpus contains sections 15-
18 and section 20 of the Penn Treebank, and is pre-
divided into 8936-sentence (211727 tokens) training
set and a 2012-sentence (47377 tokens) test. This
corpus is tagged with both POS and chunk tags.
Table 6 compares the results of ETL with DT
and TBL for the base NP chunking. We can see
that ETL, even using a small window size, produces
better results than DT and TBL. The F?=1 of the
ETLWS=9 classifier is 0.87% higher than the one of
TBL and 2.31% higher than the one of the DT clas-
sifier.
Table 7 shows the results of ETL using template
evolution. The template evolution strategy reduces
the average training time in approximately 62%.
Differently from the Portuguese NP chunking, we
observe an increase of the classifier efficacy in al-
most all the cases.
Table 8 shows the results of using a committee
composed by the eight ETL classifiers reported in
this section. Table 8 also shows the results for a
committee of SVM models presented in (Kudo and
Matsumoto, 2001). SVM?s results are the state-of-
Table 6: Base NP chunking.
Acc. Prec. Rec. F?=1 # T
(%) (%) (%) (%)
BLS 94.48 78.20 81.87 79.99 ?
DTWS=11 97.03 89.92 91.16 90.53 ?
TBL 97.42 91.68 92.26 91.97 100
ETLWS=3 97.54 91.93 92.78 92.35 68
ETLWS=5 97.55 92.43 92.77 92.60 85
ETLWS=7 97.52 92.49 92.70 92.59 106
ETLWS=9 97.63 92.62 93.05 92.84 122
Table 7: Base NP chunking using ETL with template evo-
lution.
Acc. Prec. Rec. F?=1 TTR
(%) (%) (%) (%) (%)
ETLWS=3 97.58 92.07 92.74 92.41 53.9
ETLWS=5 97.63 92.66 93.16 92.91 57.9
ETLWS=7 97.61 92.56 93.04 92.80 65.1
ETLWS=9 97.59 92.50 93.01 92.76 69.4
the-art for the Base NP chunking task. On the other
hand, using a committee of ETL classifiers, we pro-
duce very competitive results and maintain the ad-
vantages of using a rule based system.
Table 8: Base NP chunking using a committee of eight
ETL classifiers.
Accuracy Precision Recall F?=1
(%) (%) (%) (%)
ETL 97.72 92.87 93.34 93.11
SVM ? 94.15 94.29 94.22
3.3 English text chunking
The data used in the English text chunking exper-
iments is the CoNLL-2000 corpus, which is de-
scribed in (Sang and Buchholz, 2000). It is com-
posed by the same texts as the Ramshaw & Marcus
(Ramshaw and Marcus, 1999) corpus.
Table 9 compares the results of ETL with DTs and
TBL for English text chunking. ETL, even using a
small window size, produces better results than DTs
and TBL. The F?=1 of the ETLWS=3 classifier is
0.28% higher than the one of TBL and 2.17% higher
than the one of the DT classifier. It is an interesting
linguistic finding that the use of a window of size 3
652
(the current token, the previous token and the next
token) provides the current best results for this task.
Table 9: English text Chunking.
Acc. Prec. Rec. F?=1 # T
(%) (%) (%) (%)
BLS 77.29 72.58 82.14 77.07 ?
DTWS=9 94.29 89.55 91.00 90.27 ?
TBL 95.12 92.05 92.28 92.16 100
ETLWS=3 95.24 92.32 92.56 92.44 105
ETLWS=5 95.12 92.19 92.27 92.23 167
ETLWS=7 95.13 92.24 92.32 92.28 183
ETLWS=9 95.07 92.10 92.27 92.19 205
Table 10 shows the results of ETL using template
evolution. The template evolution strategy reduces
the average training time by approximately 81%. On
the other hand, there is a small decrease of the clas-
sifier efficacy in all cases.
Table 10: English text chunking using ETL with template
evolution.
Acc. Prec. Rec. F?=1 TTR
(%) (%) (%) (%) (%)
ETLWS=3 95.21 92.14 92.53 92.34 77.2
ETLWS=5 94.98 91.84 92.25 92.04 80.8
ETLWS=7 95.03 91.89 92.28 92.09 83.0
ETLWS=9 95.01 91.87 92.21 92.04 84.5
Table 11 shows the results of using a committee
composed by the eight ETL classifiers reported in
this section. Table 11 also shows the results for a
SVM model presented in (Wu et al, 2006). SVM?s
results are the state-of-the-art for the Text chunking
task. On the other hand, using a committee of ETL
classifiers, we produce very competitive results and
maintain the advantages of using a rule based sys-
tem.
Table 11: English text Chunking using a committee of
eight ETL classifiers.
Accuracy Precision Recall F?=1
(%) (%) (%) (%)
ETL 95.50 92.63 92.96 92.79
SVM ? 94.12 94.13 94.12
Table 12 shows the results, broken down by chunk
type, of using a committee composed by the eight
ETL classifiers reported in this section.
Table 12: English text chunking results, broken down by
chunk type, for the ETL committee.
Precision Recall F?=1
(%) (%) (%)
ADJP 75.59 72.83 74.19
ADVP 82.02 79.56 80.77
CONJP 35.71 55.56 43.48
INTJ 00.00 00.00 00.00
LST 00.00 00.00 00.00
NP 92.90 93.08 92.99
PP 96.53 97.63 97.08
PRT 66.93 80.19 72.96
SBAR 86.50 85.05 85.77
VP 92.84 93.58 93.21
Overall 92.63 92.96 92.79
3.4 Hindi text chunking
The data used in the Hindi text chunking exper-
iments is the SPSAL-2007 corpus, which is de-
scribed in (Bharati and Mannem, 2007). This cor-
pus is pre-divided into a 20000-tokens training set, a
5000-tokens development set and a 5000-tokens test
set. This corpus is tagged with both POS and chunk
tags.
To fairly compare our approach with the ones
presented in the SPSAL-2007, the POS tags of the
test corpus were replaced by the ones predicted by
an ETL-based Hindi POS Tagger. The description
of our ETL pos tagger is beyond the scope of this
work. Since the amount of training data is very small
(20000 tokens), the accuracy of the ETL Hindi POS
tagger is low, 77.50% for the test set.
The results are reported in terms of chunking ac-
curacy, the same performance measure used in the
SPSAL-2007. Table 13 compares the results of ETL
with DT and TBL for Hindi text chunking. ETL pro-
duces better results than DT and achieves the same
performance of TBL using 60% less templates. We
believe that ETL performance is not as good as in
the other tasks mainly because of the small amount
of training data, which increases the sparsity prob-
lem.
We do not use template evolution for Hindi text
653
chunking. Since the training corpus is very small,
the training time reduction is not significant.
Table 13: Hindi text Chunking.
Accuracy # Templates
(%)
BLS 70.05 ?
DTWS=5 78.20 ?
TBL 78.53 100
ETLWS=5 78.53 30
Table 14 compares the results of ETL with the two
best Hindi text chunkers at SPSAL-2007 (Bharati
and Mannem, 2007). The first one is a combination
of Hidden Markov Models (HMM) and Conditional
Random Fields (CRF) (PVS and Gali, 2007). The
second is based in Maximum Entropy Models (Max-
Ent) (Dandapat, 2007). ETL performs better than
MaxEnt and worst than HMM+CRF. It is important
to note that the accuracy of the POS tagger used by
(PVS and Gali, 2007) (78.66%) is better than ours
(77.50%). The POS tagging quality directly affects
the chunking accuracy.
Table 14: Comparison with best systems of SPSAL-2007
Accuracy
(%)
HMM + CRF 80.97
ETLWS=5 78.53
MaxEnt 74.92
4 Conclusions
In this paper, we approach the phrase chunking
task using Entropy Guided Transformation Learning
(ETL). We carry out experiments with four phrase
chunking tasks: Portuguese noun phrase chunking,
English base noun phrase chunking, English text
chunking and Hindi text chunking. In all four tasks,
ETL shows better results than Decision Trees and
also than TBL with hand-crafted templates. ETL
provides a new training strategy that accelerates
transformation learning. For the English text chunk-
ing task this corresponds to a factor of five speedup.
For Portuguese noun phrase chunking, ETL shows
the best reported results for the task. For the other
three linguistic tasks, ETL shows competitive results
and maintains the advantages of using a rule based
system.
References
Akshar Bharati and Prashanth R. Mannem. 2007. In-
troduction to shallow parsing contest on south asian
languages. In Proceedings of the IJCAI and the Work-
shop On Shallow Parsing for South Asian Languages
(SPSAL), pages 1?8.
Eric Brill. 1995. Transformation-based error-driven
learning and natural language processing: A case
study in part-of-speech tagging. Comput. Linguistics,
21(4):543?565.
Xavier Carreras and Llu??s Ma`rquez. 2003. Phrase recog-
nition by filtering and ranking with perceptrons. In
Proceedings of RANLP-2003, Borovets, Bulgaria.
Simon Corston-Oliver and Michael Gamon. 2003. Com-
bining decision trees and transformation-based learn-
ing to correct transferred linguistic representations. In
Proceedings of the Ninth Machine Tranlsation Sum-
mit, pages 55?62, New Orleans, USA. Association for
Machine Translation in the Americas.
J. R. Curran and R. K. Wong. 2000. Formalisation
of transformation-based learning. In Proceedings of
the Australian Computer Science Conference - ACSC,
pages 51?57, Canberra, Australia.
Sandipan Dandapat. 2007. Part of speech tagging and
chunking with maximum entropy model. In Proceed-
ings of the IJCAI and the Workshop On Shallow Pars-
ing for South Asian Languages (SPSAL), pages 29?32.
C??cero N. dos Santos and Ruy L. Milidiu?. 2007a. En-
tropy guided transformation learning. Technical Re-
port 29/07, Departamento de Informtica, PUC-Rio.
C??cero N. dos Santos and Ruy L. Milidiu?. 2007b. Prob-
abilistic classifications with tbl. In Proceedings of
Eighth International Conference on Intelligent Text
Processing and Computational Linguistics ? CICLing,
pages 196?207, Mexico City, Mexico, February.
C??cero N. dos Santos and Claudia Oliveira. 2005. Con-
strained atomic term: Widening the reach of rule tem-
plates in transformation based learning. In EPIA,
pages 622?633.
M. C. Freitas, M. Garrao, C. Oliveira, C. N. dos Santos,
and M. Silveira. 2005. A anotac?a?o de um corpus para
o aprendizado supervisionado de um modelo de sn. In
Proceedings of the III TIL / XXV Congresso da SBC,
Sa?o Leopoldo - RS - Brasil.
M. C. Freitas, J. C. Duarte, C. N. dos Santos, R. L. Mi-
lidiu?, R. P. Renteria, and V. Quental. 2006. A ma-
chine learning approach to the identification of appos-
654
itives. In Proceedings of Ibero-American AI Confer-
ence, Ribeira?o Preto, Brazil, October.
T. Kudo and Y. Matsumoto. 2001. Chunking with sup-
port vector machines. In Proceedings of the NAACL-
2001.
Lidia Mangu and Eric Brill. 1997. Automatic rule ac-
quisition for spelling correction. In Proceedings of
The Fourteenth International Conference on Machine
Learning, ICML 97. Morgan Kaufmann.
Bea?ta Megyesi. 2002. Shallow parsing with pos taggers
and linguistic features. Journal of Machine Learning
Research, 2:639?668.
Ruy L. Milidiu?, Julio C. Duarte, and Roberto Cavalcante.
2006. Machine learning algorithms for portuguese
named entity recognition. In Proceedings of Fourth
Workshop in Information and Human Language Tech-
nology (TIL?06), Ribeira?o Preto, Brazil.
Ruy L. Milidiu?, Julio C. Duarte, and C??cero N. dos San-
tos. 2007. Tbl template selection: An evolutionary
approach. In Proceedings of Conference of the Span-
ish Association for Artificial Intelligence - CAEPIA,
Salamanca, Spain.
Antonio Molina and Ferran Pla. 2002. Shallow parsing
using specialized hmms. J. Mach. Learn. Res., 2:595?
613.
Grace Ngai and Radu Florian. 2001. Transformation-
based learning in the fast lane. In Proceedings of
North Americal ACL, pages 40?47, June.
Avinesh PVS and Karthik Gali. 2007. Part-of-speech
tagging and chunking using conditional random fields
and transformation based learning. In Proceedings of
the IJCAI and the Workshop On Shallow Parsing for
South Asian Languages (SPSAL), pages 21?24.
J. Ross Quinlan. 1993. C4.5: programs for machine
learning. Morgan Kaufmann Publishers Inc., San
Francisco, CA, USA.
Lance Ramshaw and Mitch Marcus. 1999. Text chunk-
ing using transformation-based learning. In S. Arm-
strong, K.W. Church, P. Isabelle, S. Manzi, E. Tzouk-
ermann, and D. Yarowsky, editors, Natural Language
Processing Using Very Large Corpora. Kluwer.
Erik F. Tjong Kim Sang and Sabine Buchholz. 2000.
Introduction to the conll-2000 shared task: chunking.
In Proceedings of the 2nd workshop on Learning lan-
guage in logic and the 4th CONLL, pages 127?132,
Morristown, NJ, USA. Association for Computational
Linguistics.
Erik F. Tjong Kim Sang. 2002. Memory-based shallow
parsing. J. Mach. Learn. Res., 2:559?594.
Yu-Chieh Wu, Chia-Hui Chang, and Yue-Shi Lee. 2006.
A general and multi-lingual phrase chunking model
based on masking method. In Proceedings of 7th In-
ternational Conference on Intelligent Text Processing
and Computational Linguistics, pages 144?155.
Tong Zhang, Fred Damerau, and David Johnson. 2002.
Text chunking based on a generalization of winnow. J.
Mach. Learn. Res., 2:615?637.
655
Proceedings of the 15th Conference on Computational Natural Language Learning: Shared Task, pages 51?55,
Portland, Oregon, 23-24 June 2011. c?2011 Association for Computational Linguistics
Rule and Tree Ensembles for Unrestricted Coreference Resolution?
Cicero Nogueira dos Santos
Universidade de Fortaleza ? UNIFOR
Informa?tica Aplicada ? PPGIA
Fortaleza, Brazil
cnogueira@unifor.br
Davi Lopes Carvalho
Universidade de Fortaleza ? UNIFOR
Informa?tica Aplicada ? PPGIA
Fortaleza, Brazil
davi.carvalho@gmail.com
Abstract
In this paper, we describe a machine learn-
ing system based on rule and tree ensembles
for unrestricted coreference resolution. We
use Entropy Guided Transformation Learning
(ETL) and Decision Trees as the base learners,
and, respectively, ETL Committee and Ran-
dom Forest as ensemble algorithms. Our sys-
tem is evaluated on the closed track of the
CoNLL 2011 shared task: Modeling Unre-
stricted Coreference in OntoNotes. A prelim-
inary version of our system achieves the 6th
best score out of 21 competitors in the CoNLL
2011 shared task. Here, we depict the system
architecture and our experimental results and
findings.
1 Introduction
Unrestricted coreference resolution consists in iden-
tifying coreferring entities and events in texts. For
instance, in the sentence
?She had a good suggestion and
it was unanimously accepted.?
there is a coreference between the pronoun ?it? and
the noun phrase ?a good suggestion?. In the follow-
ing sentence
?Sales of passenger cars grew 22%. The strong
growth followed year-to-year increases.?
there is a coreference between the noun phrase ?the
strong growth? and the event ?grew?. Throughout
?This work is partially funded by the FUNCAP grant 0011-
00147.01.00/09.
this paper, we use the term mention to mean a refer-
ence to an entity or event.
The CoNLL 2011 Shared Task (Pradhan et al,
2011) is dedicated to modeling unrestricted coref-
erence in OntoNotes. The participants are provided
with a large corpus that contains various annotation
layers such as part-of-speech (POS) tagging, pars-
ing, named entities and semantic role labeling. The
task consists in the automatic identification of core-
ferring entities and events given predicted informa-
tion on other OntoNotes layers. A previous work on
modeling unrestricted coreference using an earlier
version of this corpus is presented in (Pradhan et al,
2007).
In this paper, we describe the machine learning
approach that we used to the closed track of the
CoNLL 2011 Shared Task. Our system follows
the common strategy of recasting the problem as a
classification task. First, in a preprocessing step,
a set of candidate mentions is constructed. Next,
also in the preprocessing step, pairs of candidate co-
referring mentions are generated. Then, each candi-
date pair of mentions is classified as co-referring or
not using a classifier learned from the annotated cor-
pus. Finally, a postprocessing step (clustering) re-
moves inconsistencies that would result of the pair-
wise classifications and constructs a partition on the
set of mentions. In our system, the learning mod-
ule is based on ensemble learning. We use Entropy
Guided Transformation Learning (ETL) (Milidiu? et
al., 2008) and Decision Trees (DT) (Quinlan, 1993)
as base learners, and, respectively, ETL Commit-
tee (dos Santos et al, 2010) and Random Forest
(Breiman, 2001) as ensemble algorithms.
51
The remainder of this paper is organized as fol-
lows. In Section 2, we present the corpus pre-
processing and postprocessing steps. Our machine
learning modeling for the unrestricted coreference
resolution task is presented in Section 3. The exper-
imental findings are depicted in Section 4. Finally,
in Section 5, we present our final remarks.
2 Corpus Processing
In this section we describe some preprocessing and
postprocessing steps used in the proposed system.
2.1 Candidate Mention Extraction
For each text document, we generate a list of candi-
date mentions in the following way:
? all the noun phrases (NP) identified in the pro-
vided parsing tree are considered as candidate
mentions;
? each pronoun is isolatedly considered as a can-
didate mention even if it is inside a larger NP;
? named entities in the categories Person (PER-
SON), Organization (ORG) and Geo-Political
Entity (GPE) are isolatedly considered as can-
didate mentions even if they are inside larger
NPs. Additionally, in order to better align with
the OntoNotes mention annotation, a process-
ing is performed to include possessive marks
??s? and premodifiers such as ?Mr.?.
In the current version, our system does not
consider verbs when creating candidate mentions.
Therefore, the system does not resolve coreferences
involving events.
2.2 Candidate Co-referring Pairs Generation
In the training phase, we generate positive and neg-
ative examples of co-referring pairs using a strategy
similar to the one of Soon et al (2001). In their
method, the text is examined in a left-to-right man-
ner. For each anaphoric mention mj , is generated a
positive example pair that includes mj and its clos-
est preceding antecedent, mi. A negative example
is created for mj paired with each of the interven-
ing mentions, mi+1, mi+2, ..., mj?1. We extend the
Soon et al (2001) approach by also including all
positive and negative pairs that can be formed with
the mentions in the sentence of the closest preceding
antecedent, mi.
In the classification phase, the text is also exam-
ined in a left-to-right manner. For each mention mj ,
candidate co-referring pairs are generated by pair-
ing it with a limited number of preceding mentions.
When using predicted mentions, we set this limit to
60 (sixty). For the gold-mentions track, the limit is
set to 40 (forty).
2.3 Feature Engineering
We use a set of 80 features to describe each pair of
mentions (mi, mj). The feature set includes lex-
ical, morphological, syntactic, semantic and posi-
tional information. Most of them are borrowed from
the works of Ng and Cardie (2002) and Sapena et al
(2010). However, we also propose some new fea-
tures. In the following, due to space constraints, we
briefly describe some of them. The features marked
with * are the new proposed ones.
Lexical: head word of mi/j ; String matching
of (head word of) mi and mj (y/n); Both are pro-
nouns and their strings match (y/n); Previous/Next
two words of mi/j ; Length of mi/j ; Edit distance of
head words; mi/j is a definitive NP (y/n); mi/j is a
demonstrative NP (y/n).
Morphological: Both are proper names and
their strings match (y/n); Basic gender agreement*,
which use a list of proper names extracted from the
training corpus (y/n); Gender/Number of mi/j ; Gen-
der/Number agreement(y/n), this and the previous
feature are generated using the number and gender
data provided by Bergsma and Lin (2006).
Syntactic: POS tag of the mi/j head word; Previ-
ous/Next two POS tags of mi/j ; mi and mj are both
pronouns / proper names (y/n); Previous/Next pred-
icate of mi/j*; Compatible pronouns, which checks
whether two pronouns agree in number, gender and
person (y/n)*; NP embedding level; Number of em-
bedded NPs in mi/j*.
Semantic: the result of a baseline system; sense
of the mi/j head word; Named entity type of mi/j ;
mi and mj have the same named entity; Semantic
role of mi/j for the prev/next predicate*; Concate-
nation of semantic roles of mi and mj for the same
predicate (if they are in the same sentence)*; Same
speaker* (y/n); Alias (y/n); mi and mj have a hy-
pernym/hyponym relation (y/n); mi and mj have the
52
same semantic class (y/n); sum of distances between
mi and mj to their class. The last three features are
generated using WordNet 3.0 (Miller, 1995).
Distance and Position: Distance between mi and
mj in sentences; Distance in number of mentions;
Distance in number of person names (applies only
for the cases where mi and mj are both pronouns or
one of them is a person name)*; One mention is in
apposition to the other (y/n).
2.4 Clustering Strategy
In order to generate the coreference chains, it is
needed a strategy to create a partition in the men-
tions using the predictions for the candidate co-
referent pairs. This part of the coreference resolution
system is frequently called clustering strategy (Ng
and Cardie, 2002). Our system uses an aggressive-
merge clustering approach similar to the one pro-
posed by Mccarthy and Lehnert (1995). In this strat-
egy, each mention is merged with all of its preceding
mentions that are classified as coreferent with it.
Additionally, a postprocessing step is employed to
remove inconsistencies that would result of the clus-
tering processing, such as an NP being coreferent to
its embedded NP.
3 Machine Learning Modeling
In this section we briefly describes the machine
learning approaches used in our experiments. We
also describe a baseline system (BLS) that is used
by ETL for the learning of correction rules. The
classification produced by the BLS is also used as
a feature for the other experimented learning strate-
gies.
ETL: Entropy Guided Transformation Learning
(ETL) is a correction rule learning algorithm. It
extends Transformation Based Learning (TBL) by
automatically generating rule templates using Deci-
sion Trees (DT) (Milidiu? et al, 2008). We use an
in-house implementation of ETL.
ETL Committee: is an ensemble method that
uses ETL as the base learner (dos Santos et al,
2010). This approach combines the main ideas of
Bagging and Random Subspaces, as well as rule re-
dundancy and template sampling to generate diverse
ETL classifiers. We use an in-house implementation
of ETL Committee.
Decision Trees: the C4.5 (Quinlan, 1993) system
is one of the most popular DT induction implemen-
tation. It induces a tree based classifier using the
training data information gain. In our experiments,
we use the J48 tool, which is a DT induction sys-
tem similar to C4.5. J48 is part of the WEKA data
mining toolkit (Hall et al, 2009).
Random Forest: is an ensemble method that uses
DT as the base learner. In the Random Forest learn-
ing process (Breiman, 2001), first, bootstrap sam-
pling is employed to generate multiple replicates of
the training set. Then, a decision tree is grown for
each training set replicate. When growing a tree,
a subset of the available features is randomly se-
lected at each node, the best split available within
those features is selected for that node. In our ex-
periments, the WEKA?s Random Forest implemen-
tation is used.
Baseline System: the BLS classifies a candidate
co-referring pair (mi, mj) as co-referring when one
of the following conditions occur:
? mj is an alias of mi;
? mj and mi are 3rd person pronouns and there is
no person name between them;
? the pair is composed of a person name and a 3rd
person pronoun and there is no person name be-
tween them;
? removing determiners, mi matches mj ;
? the feature basic gender agreement is true.
The parameters of each algorithm are tuned using
the development set. For both, ETL Committee and
Random Forest the ensemble size is set to 50.
4 Experiments and Results
We train models for two different CoNLL 2011
shared task closed tracks: (a) using candidate men-
tions whose boundaries are automatically extracted
(see Section 2.1); and (b) using candidate men-
tions whose boundaries are provided. In the training
phase, the gold standard OntoNotes annotation lay-
ers are used. For the development and test sets the
automatically generated OntoNotes annotation lay-
ers are used.
53
For all experiments, results are reported using
three metrics: MUC, B3 and CEAF(E). We also re-
port the average F1 score for these three metrics,
which is the official CoNLL 2011 shared task met-
ric. Additionally, results for the test set are also re-
ported using the CEAF(M) and BLANC metrics.
4.1 Automatic Mention Boundaries
In Table 1, we show machine learning system results
for unrestricted coreference resolution using the de-
velopment set. As we can see in Table 1, the results
of ensemble methods are better than ones of the base
learners, which is the expected result. ETL Com-
mittee is the classifier that achieve the best results,
closely followed by Random Forest.
All the experimented ML systems achieve results
better than the baseline. However, the improvement
provided by ML is more expressive only for the
MUC metric. For instance, ETL Committee pro-
vides an improvement over the baseline of about 6.5
points in the MUC F1-score, while the improvement
for the other two metrics is only about 2 points.
We run an additional experiment by constructing
a heterogeneous committee composed by the three
best classifiers: (1) ETL Committee, (2) Random
Forest and (3) ETL. The results for this system is
shown in table line with ML Model name ?(1) + (2)
+ (3)?. This heterogeneous committee provides our
best experimental results for the development set,
which is slightly better than ETL Committee results.
Due to deadline constraints, the system output
that we have submitted to the CoNLL 2011 shared
task is a majority voting committee of three different
ETL classifiers. These three ETL classifiers slightly
differs in the used feature sets. In Table 1, the results
of the Submitted System is presented for the devel-
opment set. Table 2 presents the Submitted System
results for the test set. Our system achieves the 6th
best score out of 21 competitors in the closed track
of the CoNLL 2011 shared task.
4.2 Gold Mention Boundaries
For the gold mention boundaries task, we were not
able to assess system performances on the develop-
ment set. This is due to the fact that not all gold
mentions are annotated in the development set.
We have submitted two outputs for the CoNLL
2011 shared task gold mentions closed track. These
Metric R P F1
MUC 59.21 54.30 56.65
BCUBED 68.79 62.81 65.66
CEAF (M) 49.54 49.54 49.54
CEAF (E) 35.86 40.21 37.91
BLANC 73.37 66.91 69.46
(MUC + B3 + CEAF(E))/3 53.41
Table 2: Submitted System results for the test set using
automatically extracted mention boundaries.
outputs were generated by two systems described in
the previous subsection: (a) the Submitted System;
and (b) the heterogeneous committee (ETL Commit-
tee + Random Forest + ETL). In Table 3, we show
the system results for the test set with gold standard
mentions. Again, the heterogeneous committee pro-
vides our best results.
At the moment of writing this paper, the score-
board for this task has not yet been released by the
CoNLL 2011 shared task committee.
5 Conclusion
In this paper, we describe a machine learning sys-
tem based on rule and tree ensembles for unre-
stricted coreference resolution. The system uses En-
tropy Guided Transformation Learning and Decision
Trees as the base learners. ETL Committee and Ran-
dom Forest are the used ensemble algorithms. We
depict the system architecture and present experi-
mental results and findings of our participation in
the CoNLL 2011 shared task.
We present results for two closed tasks: (a) using
automatically extracted mention boundaries; and (b)
using gold mention boundaries. For both tasks, en-
semble classifiers have better results than the base
classifiers. This is the expected outcome, since en-
semble classifiers tend to be more accurate than the
base classifiers. We also experiment heterogeneous
committees that combines the three best classifier
for the first task. Heterogeneous committees provide
our best scoring results for both tasks. Using a pre-
liminary version of our system, we achieve the 6th
best score out of 21 competitors in the closed track
of the CoNLL 2011 shared task.
One of the possible future works, is to investigate
the impact of the new features that we propose.
54
MUC B3 CEAF(E) (MUC + B3 + CEAF(E))/3
ML Model R P F1 R P F1 R P F1 F1
(1) ETL Committee 52.31 57.51 54.78 63.62 70.42 66.84 42.64 37.99 40.18 53.93
(2) Random Forest 53.31 54.91 54.10 65.23 67.31 66.25 40.47 39.05 39.75 53.37
(3) ETL 54.80 52.24 53.49 67.56 62.19 64.77 37.22 39.55 38.35 52.20
(4) Decision Trees 57.51 49.12 52.98 71.23 58.94 64.50 34.84 42.25 38.19 51.89
(5) Baseline System 43.04 55.13 48.34 57.82 74.21 64.99 43.63 33.62 37.98 50.43
(1) + (2) + (3) 52.77 57.44 55.00 64.09 70.58 67.18 42.67 38.48 40.47 54.21
Submitted System 54.65 53.25 53.94 67.15 63.86 65.46 38.3 39.56 38.92 52.45
Table 1: System results for the development set using automatically extracted mention boundaries.
Submitted System (1) + (2) + (3)
Metric R P F1 R P F1
MUC 58.77 56.54 57.64 57.76 61.39 59.52
BCUBED 67.05 64.84 65.92 64.49 70.27 67.26
CEAF (M) 50.05 50.05 50.05 51.87 51.87 51.87
CEAF (E) 37.61 39.62 38.59 41.42 38.16 39.72
BLANC 72.59 67.76 69.80 72.72 71.97 72.34
(MUC + B3 + CEAF(E))/3 54.05 55.50
Table 3: System results for the test set using gold mention boundaries.
References
Shane Bergsma and Dekang Lin. 2006. Bootstrap-
ping path-based pronoun resolution. In Proceedings
of ACL2006, ACL?44, pages 33?40, Stroudsburg, PA,
USA. Association for Computational Linguistics.
Leo Breiman. 2001. Random forests. Machine Learn-
ing, 45(1):5?32.
C??cero Nogueira dos Santos, Ruy Luiz Milidiu?, Carlos
E. M. Crestana, and Eraldo R. Fernandes. 2010. ETL
ensembles for chunking, NER and SRL. In 11th In-
ternational Conference on Computational Linguistics
and Intelligent Text Processing, CICLing, pages 100?
112.
Mark Hall, Eibe Frank, Geoffrey Holmes, Bernhard
Pfahringer, Peter Reutemann, and Ian H. Witten.
2009. The weka data mining software: an update.
Sigkdd Explorations, 11:10?18.
Joseph F Mccarthy and Wendy G Lehnert. 1995. Using
decision trees for coreference resolution. In In Pro-
ceedings of the Fourteenth International Joint Confer-
ence on Artificial Intelligence, pages 1050?1055.
Ruy L. Milidiu?, C??cero N. dos Santos, and Julio C.
Duarte. 2008. Phrase chunking using entropy guided
transformation learning. In Proceedings of ACL2008,
Columbus, Ohio.
George A. Miller. 1995. Wordnet: A lexical database for
english. Communications of the ACM, 38:39?41.
Vincent Ng and Claire Cardie. 2002. Improving machine
learning approaches to coreference resolution. In Pro-
ceedings of the 40th Annual Meeting on Association
for Computational Linguistics, ACL ?02, pages 104?
111, Stroudsburg, PA, USA. Association for Compu-
tational Linguistics.
Sameer Pradhan, Lance Ramshaw, Ralph Weischedel,
Jessica MacBride, and Linnea Micciulla. 2007. Unre-
stricted Coreference: Identifying Entities and Events
in OntoNotes. In in Proceedings of the IEEE Inter-
national Conference on Semantic Computing (ICSC),
September 17?19.
Sameer Pradhan, Lance Ramshaw, Mitchell Marcus,
Martha Palmer, Ralph Weischedel, and Nianwen Xue.
2011. CoNLL-2011 shared task: Modeling unre-
stricted coreference in ontonotes. In Proceedings of
the Fifteenth Conference on Computational Natural
Language Learning (CoNLL 2011), Portland, Oregon,
June.
J. Ross Quinlan. 1993. C4.5: programs for machine
learning. Morgan Kaufmann Publishers Inc., San
Francisco, CA, USA.
Emili Sapena, Llu??s Padro?, and Jordi Turmo. 2010. Re-
laxcor: A global relaxation labeling approach to coref-
erence resolution. In Proceedings of the 5th Inter-
national Workshop on Semantic Evaluation, SemEval
?10, pages 88?91, Stroudsburg, PA, USA. Association
for Computational Linguistics.
Wee Meng Soon, Hwee Tou Ng, and Daniel Chung Yong
Lim. 2001. A machine learning approach to corefer-
ence resolution of noun phrases. Computational Lin-
guistics, 27:521?544, December.
55
