Coling 2010: Demonstration Volume, pages 45?48,
Beijing, August 2010
E-HowNet and Automatic Construction of a Lexical Ontology
Wei-Te Chen, Su-Chu Lin, Shu-Ling Huang, You-Shan Chung, and Keh-Jiann Chen
     Institute of Information Science, Academia Sinica
weitehchen@gmail.com,
{jess, yosieh, yschung, kchen}@iis.sinica.edu.tw
Abstract
In this paper, we propose a lexical senses
representation system called E-HowNet,
in which the lexical senses are defined by
basic concepts. As a result, the mean-
ings of expressions are more specific than
those derived by using primitives. We also
design an ontology to express the taxo-
nomic relations between concepts and the
attributes of concepts. To establish the
taxonomic relations between word senses,
we introduce a strategy that constructs the
E-HowNet ontology automatically. We
then implement the lexical ontology as a
Web application1 to demonstrate the tax-
onomy and the search functions for query-
ing key-terms and E-HowNet expressions
in the lexicon, which contains more than
88,000 lexical senses.
1 Introduction
E-HowNet, an evolution and extension of HowNet
(Dong & Dong, 2006), is an entity-relation rep-
resentation model for lexical senses. Under the
framework, word senses are defined by basic
concepts as well as conceptual relations called
attribute-values. The following is an example of
lexical sense representation in E-HowNet.
(1) ?? ?|carefully choose? is expressed
(or defined) by the expression ?{choose|?
?:manner={cautious|?}}?.
In the representation, the meaning of ???? is
comprised of two primitive concepts, ?choose|?
?? and ?cautious|??, and the conceptual rela-
1available at http://ckip.iis.sinica.edu.tw/?wtchen/taxonomy/
tion between the primitives is explained by the se-
mantic role ?manner?. For further details, readers
may refer to the E-HowNet technical report (CKIP
2009).
With a well-established entity-relation model,
semantic composition is applicable from the mor-
phological level to the sentential level in E-
HowNet. Semantic compositionality, together
with syntactic information, contributes enor-
mously to natural language understanding.
The remainder of this paper is organized as
follows. We describe the major features of E-
HowNet in Section 2 and introduce the E-HowNet
ontology in Section 3. Then, we present our on-
line E-HowNet system in Section 4. Section 5
contains some concluding remarks.
To achieve the goal of semantic compositional-
ity and to extend the advantage from HowNet, the
following features are implemented in E-HowNet.
a) Multi-level definitions and semantic decom-
position: Word senses (concepts) can be defined
(expressed) by primitives as well as by any well-
defined concepts and conceptual relations. How-
ever, using only primitives to express word senses,
as in HowNet, causes information degradation and
important ontological relations between concepts
may be missed.
b) Uniform sense representation and seman-
tic compositionality: To achieve semantic com-
positionality, it is necessary to encode the senses
of both content words and function words in a
uniform framework. HowNet performs well for
defining content words, but it does not provide
a well-form representational framework for ex-
pression the sense of function words, which in-
dicate semantic relations. In contrast, E-HowNet
45
provides uniform representations for the senses
of content/function words and the senses of sen-
tences/phrases. For example, the passive sense
of the preposition ?? by? introduces an agent
role (relation) and the conjunction ??? because?
links the relation of reason between two events.
The functional representation and semantic com-
positionality are illustrated by the following ex-
ample:
(2) Because of the rain, the clothes are all wet.
???????????
Table 1: The function representation and semantic
compositionality for example sentence
Word POS E-HowNet
Definition
?? Cb reason ={ }(conjunction)
?? VA {rain|??}(intransitive verb)
?? Na {clothing|??}(common noun)
? Da Quantity=(adverb) {complete|?}
? VH {wet|?}(state verb)
? Ta aspect=(particle) {Vachieve|??}
Suppose that the following dependency struc-
ture and semantic relations are derived by parsing
sentence (2) as follows:
(3) S(reason:VP(Head:Cb:??|dummy:VA:?
?)|theme:NP(Head:Na:??) | quantity: Da:? |
Head:Vh:?|particle:Ta:?)?
The semantic composition in (4) is the result of
unifying the features of the lexical representations
shown in the above table. The dependency daugh-
ters have become feature attributes of the senten-
tial head ?wet|??.
(4) def:{wet|?:
theme={clothing|??},
aspect={Vachieve|??},
quantity={complete|?},
reason={rain|??}}.
c) Taxonomy for both entities and relations: To
achieve automatic feature unification, E-HowNet
organizes entities and relations (attributes) in a hi-
erarchical structure that relates entities taxonomi-
cally. Further details are provided in the next sec-
tion.
2 Ontology
We adopt and extend approximately 2,600 prim-
itives from HowNet to form the top-level ontol-
ogy of E-HowNet, which includes two types of
subtrees: entities and relations. The entities are
comprised of events, objects, and attribute-values;
while the relations are comprised of semantic-
roles and functions. Entities indicate concepts that
have substantial content, whereas relations link
the semantic relations between entities (Chen et
al., 2004; Chen et al, 2005; Chen et al, 2005;
Huang et al 2008). The taxonomic structure is or-
ganized by hypernym-hyponym relations; there-
fore, it forms an inheritable system, i.e., the hy-
ponym concepts inherit the properties of hyper-
nym concepts. The proposed approach facilitates
the adoption of knowledge represented by other
frameworks, such as FrameNet, and HowNet; and
it allows concepts to be represented with vary-
ing degrees of specificity. Another advantage is
that conceptual similarities can be modeled by
their relational distances in the hierarchy (Resnik,
1999), and the taxonomic relations between lexi-
cal senses can be captured from their E-HowNet
expressions automatically.
2.1 Automatic Construction of Ontology
With E-HowNet expressions, lexical senses are
defined as entities and relations. Thus, all the tax-
onomic relations of lexical senses can be iden-
tified according to their E-HowNet definitions.
Synonyms are identified by their identical E-
HowNet expressions, and hyponymy relations are
identified by the subsumption of attribute-values.
(Note that only near-synonym classes are iden-
tified due to the coarse-grained expressions of
the lexical senses in the current version of E-
HowNet.) Furthermore, new categories are iden-
tified by common attribute-values. For instance,
pandas and zebras can be categorized as animals
with the same feature: black and white markings.
To construct a complete lexical taxonomy, we use
46
Figure 1: The E-HowNet ontology system
a strategy that categorizes concepts automatically.
Starting with a manually created top-level on-
tology of primitive concepts, the following strat-
egy classifies the lexicon into hierarchical sub-
categories:
(1) Attach lexical senses. Words and associ-
ated sense expressions are first attached to the top-
level ontology nodes according to their head con-
cepts. For instance, the head concept of the ex-
pression ?{choose|??:manner={cautious|?}}?
is?choose|???.
(2) Sub-categorization by attribute-values. Lex-
ical concepts with the same semantic head are fur-
ther sub-categorized according to their attribute-
values. Lexicons that have the same attribute-
values share specific characteristics; therefore fur-
ther sub-categorization is performed based on the
distinct attribute-values of the lexicons.
(3) Repeat step (2) if there are too many lexical
concepts in one category. Although the lexicons
are classified after step (2), some sub-categories
might still contain too many lexicons. In this
situation, we further classify the lexicons in the
sub-category with other attribute-values until all
sub-categories contain fewer members than a pre-
defined threshold, or all members of a category
are synonyms.
3 Overview of the On-line System
The current E-HowNet ontology is an on-line ver-
sion of the automatically constructed taxonomic
structure of E-HowNet expressions, which con-
tain more than 88,000 lexical senses. This sec-
tion provides an overview of the ontology and the
functions of the on-line web browsing system.
Figure 2: Key-Term Search Box
Figure 1 shows the E-HowNet ontology system
and tree structure.
The tree structure of hyponymy relations al-
lows users to browse the entire tree by expanding
and hiding sub-trees. Although the classification
strategy enables the number of entities under each
node to be limited and viewed easily, a more effec-
tive function is essential for exploring more than
88 thousand items of data in E-HowNet. There-
fore, we provide a search function that allows
users to query lexical senses in two ways:
Key-Term Search: The first way is key-term
search, which is shown in Figure 2. The syntax
of the query interface is like that used by conven-
tional search engines. By inputting the key-term
???? , the system will search all the taxonomy
nodes, sub-categories, and lexical nodes. Then,
the results for the taxonomy node ?object|???
and the lexical word ???? will be displayed in
47
Figure 3: E-HowNet Expression Search Box
the respective columns.
E-HowNet Expression Search: To search
a class of words with specific attribute-values,
we provide another query syntax for exploring
data in E-HowNet Expression. For instance, to
find all expressions about wooden objects in-
volves finding E-HowNet data items containing
the entity ?object???? and the attribute-value
?material={wood|?}?. The expressions are en-
tered on the form shown in Figure 3 and submitted
to the system. The results of word senses denoting
wooden objects are then returned.
4 Conclusion
E-HowNet sense representations are incremental.
Hence, lexical sense expressions can be updated
and refined at anytime. In addition, logical rela-
tions and the taxonomic structure can be rebuilt
automatically based on the refined expressions.
New categories in the taxonomy can be identi-
fied and characterized by their specific attribute-
values. Uniform representations of function
words and content words facilitate semantic com-
position and decomposition, and allow users to
derive sense representations of phrases/sentences
from the composition of lexical senses. Further-
more, because of E-HowNet?s semantic decom-
position capability, the primitive representations
for surface sentences with the same deep seman-
tics are nearly canonical. We have implemented
the E-HowNet ontology online to demonstrate the
taxonomy, sub-categories, and lexicons in a hier-
archical tree structure. In addition, we provide
search functions for querying key-terms and E-
HowNet expressions.
References
Keh-Jiann Chen, Shu-Ling Huang, Yueh-Yin Shih and
Yi-Jun Chen. 2004. Multi-level Definitions and
Complex Relations in Extended-HowNet. In Pro-
ceedings of the Fifth Workshop on Chinese Lexical
Semantics 2004, Beijing University. (in Chinese)
Keh-Jiann Chen, Shu-Ling Huang and Yueh-Yin Shih,
Yi-Jun Chen. 2005. Extended-HowNet- A Repre-
sentational Framework for Concepts. In Proceed-
ings of OntoLex 2005, Jeju Island, South Korea.
Yi-Jun Chen, Shu-Ling Huang, Yueh-Yin Shih and
Keh-Jiann Chen. 2005. Semantic Representation
and Definitions for Function Words in Extended-
HowNet. In Proceedings of the Sixth Workshop on
Chinese Lexical Semantics 2005, Xiamen Univer-
sity.
Z. D. Dong and Q. Dong 2006. HowNet and the Com-
putation of Meaning. World Scientific Publishing
Co. Pte. Ltd.
Shu-Ling Huang, Shih Yueh-Yin and Keh-Jiann Chen
2008. Knowledge Representation for Comparison
Words in Extended-HowNet. Language and Lin-
guistics, vol. 9(2), pp. 395-414.
Philip Resnik. 1999. Semantic similarity in a Taxon-
omy: An information-based measure and its appli-
cation to problems of ambiguity in natural language.
Journal of Artifical Intelligence Research, vol. 11,
pp. 95-130.
CKIP. 2009. Lexical Semantic Representation and Se-
mantic Composition: An Introduction to E-HowNet
(E-HowNet Technical Report). Academia Sinica,
Taipei.
48
Proceedings of the NAACL HLT 2013 Demonstration Session, pages 14?19,
Atlanta, Georgia, 10-12 June 2013. c?2013 Association for Computational Linguistics
Anafora: A Web-based General Purpose Annotation Tool
Wei-Te Chen
Department of Computer Science
University of Colorado at Boulder
weite.chen@colorado.edu
Will Styler
Department of Linguistics
University of Colorado at Boulder
william.styler@colorado.edu
Abstract
Anafora is a newly-developed open source
web-based text annotation tool built to be
lightweight, flexible, easy to use and capa-
ble of annotating with a variety of schemas,
simple and complex. Anafora allows se-
cure web-based annotation of any plaintext
file with both spanned (e.g. named entity or
markable) and relation annotations, as well
as adjudication for both types of annota-
tion. Anafora offers automatic set assignment
and progress-tracking, centralized and human-
editable XML annotation schemas, and file-
based storage and organization of data in a
human-readable single-file XML format.
1 Introduction
Anafora1 is a new annotation tool designed to be
a lightweight, flexible annotation solution which is
easy to deploy for large and small projects. Previ-
ous tools (such as Protege/Knowtator (Ogren, 2006)
or eHost) have been written primarily with local an-
notation in mind, running as native, local applica-
tions and reading complex file or folder structures.
This limits cross-platform deployment and requires
the annotated data to be stored locally on machines
or run in X-Windows, complicating data-use agree-
ments and increasing data fragmentation.
Anafora was designed as a web-based tool to
avoid this issue, allowing multiple anntators to ac-
cess data remotely from a single instance running
1Anafora is free and open-source, and is available (along
with documentation and sample projects) for public use on
https://github.com/weitechen/anafora
on a remote server. Designed for WebKit-based
browsers, annotators can work from nearly any mod-
ern OS, and no installation, local storage, or SSH
logins are required. All data is regularly autosaved,
and annotations are saved to cache for restoration in
the event of a connectivity interruption.
In addition, avoiding the complex schemas and
filetypes associated with many current solutions,
Anafora was built to maintain simple, organized rep-
resentations of the data it generates. Annotation
schemas and stored data are both saved as human-
readable XML, and these are stored alongside plain-
text annotated files in a simple, database-free, static
filesystem. This allows easy automated assignment
and organization of sets and offers ease of adminis-
tration and oversight unmatched by other tools.
Most importantly, though, Anafora has been de-
signed to offer an efficient and learnable means
for annotation and adjudication using even com-
plex schemas and multi-step workflows (such as
UMLS (medical named entity tags), Coreference,
and THYME Temporal Relations annotation, de-
scribed in (Albright et al, 2013)). This allows
Anafora to a single-source solution for whole-text
annotation across all of your projects.
2 Comparisons with existing tools
Anafora has been designed from the ground up with
some key advantages over existing whole-text an-
notation solutions such as eHost/Chartreader (South
et al, 2012), Protege/Knowtator (Ogren, 2006), and
BRAT (Stenetorp et al, 2012).
Both Protege and eHost are locally-run Java soft-
ware (although eHost also relies on a remote in-
14
stall of Chartreader). Although they are available
for all major platforms, they require annotators to
install the applications locally and upgrade the in-
stallations as major issues come up. More impor-
tantly, both store the texts being annotated locally
on the machine used for annotation, which is prob-
lematic under many data-use agreements for medical
or otherwise sensitive data. Anafora addresses this
shortcoming by its web-based design, allowing easy
software update and eliminating local data storage,
while also enabling automatic and centralized set as-
signment.
Another of Anafora?s strengths over existing tools
is flexibility and complex schema support. At last
review, eHost/Chartreader offered only rudimen-
tary between-annotation relations (primarily for co-
reference), lacking the flexibility needed for more
complex relation sets. BRAT does offer an effec-
tive relation annotation tool, but doesn?t support
the more complex schemas and property types that
Anafora does (e.g. multi-slot relations, relation
properties, pointers as properties of entities, etc). So,
although both BRAT and eHost/Chartreader are ex-
cellent solutions for simple annotation schemas, for
complex schemas and workflows, Anafora is a more
flexible and capable choice.
Finally, Anafora?s biggest strength is its
lightweight implementation. Unlike Pro-
tege/Knowator?s folder model where each assigned
annotation task contains a separate copy of the
schema, document, and project, Anafora?s folders-
containing-XML model of document and schema
storage means that each document and schema is
stored only once in one easily accessible place,
and unlike eHost/Chartreader, administration can
be done by changing and moving files from SFTP
or a command line, rather than by logging in to a
separate program. This central storage means that
schema modification is as easy as changing one
XML file, which will be used for all subsequent
annotations, and the file-based model eliminates the
need to back up large databases.
In short, although many annotation tools exist,
Anafora?s combination of light weight, web-based
UI, centralized file storage and complex schema sup-
port make Anafora unique and an excellent choice
for any annotation project.
Figure 1: Anafora Schema Example
3 Schema and Data Format
In Anafora, annotations are divided into two types:
Entity and Relation. An Entity annotation associates
a certain span in the text with a type and list of prop-
erties. Relation annotations specify a relationship
between multiple Entities. The nature of these En-
tity and Relation annotations (as well as their prop-
erties) are stored in an XML Schema file, while data
files store the Entities and Relations specified by an-
notators for each file.
3.1 Schema
The schema file defines the data type and attributes
of the annotations. Our schema format is defined in
XML form, which is a simple and human-readable
markup file. A Temporal schema is shown in Fig. 1.
The first part of the schema file is ?defaultat-
tribute? element in which the schema?s overall at-
tributes are defined. Another part is the ?definition?
element which defines the hierarchy of the schema
tree, the annotation types, and the associated proper-
ties for each type. The schema is in the form of a tree
structure. The ?entities? and ?relations? tags rep-
resent subgroupings of annotation types, while the
?entity? and ?relation? tags each define a different
Entity or Relation annotation. The ?type? attribute
defines the name of the annotation type, the ?color?
attribute defines the displayed color of this annota-
tion in the Anafora interface, and the ?hotkey? at-
tribute is the key which triggers creation of that an-
15
Figure 2: Anafora Data File Example
notation in Anafora.
For each type, the properties to be annotated are
listed under ?Property?, where the ?type? attribute
indicates the name of the property, while the ?input?
attribute specifies the manner of attribute selection
or entry. The value of the ?Property? is a list of ac-
cepted choices. For example, the ?Type? property
in the ?Event? entity limits the value to ?N/A? or
?ASPECTUAL?, where ?N/A? is the default. Please
refer to the Guidelines for further detail.
One great advantage of this XML-based schema
format is greater flexibility than existing tools both
in schema and modification. To make any modi-
fication to the schema, one simply edits the XML
and the revised schema will apply to any new data
files. Another advantage is human-readability, al-
lowing schemas to be easily understood and ported
from other tools.
3.2 Data File
The Anafora data file (see Fig. 2) stores the anno-
tation instances for each annotated file. It, like the
Schema file, uses an XML format.
The ?info? section provides the basic information
for the file, such as the save time and annotation
completion status. The ?schema? tag specifies the
path to the schema file used for annotation. Fol-
lowing is the ?annotation.? Each ?entity? and ?re-
lation? element represents an annotation instance.
Every annotation has a unique ?id?, and the anno-
tation ?type? and ?parentType?. For Entity annota-
tions, the text?s span is given using character offsets
in the source file. For all annotations, the ?property?
section specifies the values for properties listed in
the schema, and, for Relations, properties are used
(?Source? and ?Target? above) to point to the unique
IDs of the annotations being linked.
4 System Overview
Anafora is a web-based tool, developed using
Django (a Python framework on server side) and
jQuery (a JavaScript library on client side). On the
server side, our system manages file storage and user
access control. By avoiding the use of any database,
Anafora is very agile and flexible, and most of the
computing work is executed by the user?s browser.
And, because modern browsers have done an ex-
cellent job tuning JavaScript execution, Anafora is
lightweight on the user?s machine as well. Anafora?s
browser-based design also allows the tool to run well
on any OS with a web browser, alleviating the cross-
platform issues common with other tools.
Anafora allows both keyboard- and mouse-based
annotation, improving both efficiency and imme-
diate familiarity, rather than relying primarily on
mouse-clicks.
Anafora also assists project supervisors in several
ways. First, all data management is file-based, and
the project hierarchy is reflected in the OS level file
system?s directory structure. Secondly, Anafora as-
signs tasks to annotators automatically, saving su-
pervisors the time and hassle of task assignment. Fi-
nally, Anafora makes pre-annotation extremely easy.
By running the document text through a shallow
parser and generating a file which marks all noun
phrases (for example), annotators could start their
work on a named entity task with this information
ready at hand.
Anafora allows users to customize their own user
interface by overriding the CSS file on the client
side. By changing the CSS file, users can modify
the apperance, e.g., color, font, and page layout.
5 Project Creation and Administration
Administering and creating new projects is straight-
forward, and primarily file based. To create a new
project, one first uses our schema markup to write
an XML schema designating the entities, relations,
16
and annotation properties needed in the schema (see
Section 3). Then, a folder is created for the project,
containing folders for any subcorpora, and then fi-
nally each document is placed into its own folder as
a plaintext file. At this point, annotators with the
necessary permissions may select the new schema
and documents and begin annotating.
A given document?s assignments and completion
status is read entirely from the filenames generated
by the program. To re-assign a set manually, sim-
ply change the annotator?s name in the existing an-
notation file?s name, or delete the previous annota-
tion file, allowing Anafora to reassign it automati-
cally. Administrators can view any annotator?s work
through the tool?s interface, and can edit the XML at
any time. When a document is fully annotated or ad-
judicated, preparing for release is as easy as copying
the .gold. file and source text into the final destina-
tion.
6 Annotation using Anafora
When an annotator opens Anafora in any webkit-
based browser and logs in, they are greeted with a
file-choosing interface which allows them to pick
which corpus, annotation schema and annotation
type (Entity or Relation) they?d like to work on for
the session (allowing one annotator to easily work
with more than one project or schema). Previously
completed and in-progress sets are shown in sepa-
rate columns for easy access, and only documents
which have fewer than the maximum number of an-
notators are displayed. Annotators are not able to
open or view any annotations other than their own.
Once a document is opened, the annotator is pre-
sented with Anafora?s 3-pane view (in Fig. 3): on
the left, the annotation schema, in the center, the
source text, and on the right, annotation details. To
proceed with an Entity annotation, the annotator se-
lects a word or portion of text and hits a pre-defined
hotkey, triggering the creation of a new annotation
of a specified type, using the selected span.
The properties of the annotation are then automat-
ically filled in with the default values specified in the
schema files, and the annotator can then go back in
to modify these properties (by drop-down menu, ra-
dio buttons, relation or free-text entry) as needed.
The annotator can also use the span editing tools to
either modify the span character-by-character, or to
add a second, disjoint span by selecting more text
and using the ?+? button.
For Relation annotation, the annotator will enable
the Relation grid, displaying a list of relations in or-
der of occurrence in the text. To create a new re-
lation, the annotator strikes the proper hotkey, and
then Anafora hides all entities which are not allowed
to fill slots in this relation. Clicking an entity after
pressing ?1? fills the first slot, and pressing ?2? be-
fore a click fills the second slot. As with Entity anno-
tations, properties are filled in according to default
values in the schema and can be edited as needed.
Annotators can choose to manually save and log
out at any point, and when an annotator has com-
pleted a document, he or she selects ?Mark as Com-
pleted?, which changes the file?s status and queues it
up for adjudication.
6.1 Adjudication
When a designated adjudicator logs into Anafora,
they?re presented with the ?Adjudication? annota-
tion type option in the initial document selection
screen. When this is selected, only documents with
two completed annotator-copies are displayed as
available for adjudication.
Once an available document is opened, Anafora
will automatically merge the two annotators? work
into a new, adjudication datafile (preserving the sep-
arate annotations), and then mark as gold any an-
notations matching for both span and properties. In
addition, Anafora will mark as conflicting any anno-
tation pairs with either 1) matching properties and
overlapping spans or 2) identical spans and different
properties. Anafora then displays the schema and
source documents as before along with two anno-
tation detail panes, one for each annotator in a con-
flicting annotation. A progress bar displays the num-
ber of gold annotations out of the total number in
the document, and again, progress is automatically
saved.
The adjudicator can then use the keyboard to
move through the unadjudicated (non-Gold) anno-
tations. When an annotation with a conflict is
found, details about both annotations will show up
on the right, highlighting in red any areas which
differ (span, a property, etc). The adjudicator can
then use the arrow keys to select either the left
17
Figure 3: Anafora Annotation Window
or right annotation as Gold, which will delete the
other. For single-annotator annotations, the adjudi-
cator can choose to simply delete or mark as Gold.
Once no unadjudicated annotations remain in the
document and any necessary edits or additions are
made, the adjudicator can mark the document as
completed, which changes all annotations? status to
?Gold? and, where required, makes the document
available to the next round of annotation.
7 Conclusion and Future Work
Anafora can be extended readily to offer other clas-
sification tasks such as part-of-speech tags or sense
tags. However, there are a couple of limitations.
First, tree-based annotation, much like constituent-
based semantic role labeling, is not currently sup-
ported in Anafora. Additional text information (e.g.
Frame files and WordNet ontologies) is difficult to
display in the same page as the annotations, as the
tool was designed for whole-text annotation. Some
complicated schema definitions, such as relations (or
relation properties) linking to relations, are also not
provided.
We are continuing active development (focusing
on annotation efficiency and UX design) as more
projects with varied needs use Anafora. Perfor-
mance studies and comparisons are currently in
progress. Furthermore, an administrator interface,
including annotator management, task status man-
agement, and schema editor, will be supplied. In
addition, automated pre-annotation is being incor-
porated into Anafora-based workflows. We will also
allow comparison of annotators? work to extracted
annotation characteristics from gold data and from
each annotator?s prior work. We would also like
to include active learning and allow annotators to
compare their completed annotations to gold stan-
dard data. These features should help to improve the
learning and annotation efficiency of the annotators.
Anafora is a lightweight and efficient tool for
text annotation, easily adaptable to fit even the
most complex of annotation tasks and schemas.
Source code is available at our GitHub page,
https://github.com/weitechen/anafora.
Acknowledgments
The development of this annotation tool was
supported by award numbers NLM R0110090
(THYME) and 90TR002 (SHARP), as well as
DARPA FA8750-09-C-0179 (via BBN) Machine
Reading. The content is solely the responsibility of
the authors and does not necessarily represent the of-
ficial views of the NLM/NIH or DARPA. We would
also like to especially thank Jinho Choi for his input
on the data format, schemas, and UI/UX.
18
References
Daniel Albright, Arrick Lanfranchi, Anwen Fredrik-
sen, William Styler, Collin Warner, Jena Hwang,
Jinho Choi, Dmitriy Dligach, Rodney Nielsen, James
Martin, Wayne Ward, Martha Palmer, and Guergana
Savova. 2013. Towards comprehensive syntactic and
semantic annotations of the clinical narrative. Jour-
nal of the American Medical Informatics Association.
2013;0:1-9. doi: 10.1136/amiajnl-2012-001317.
Philip V. Ogren. 2006. Knowtator: A prote?ge? plug-
in for annotated corpus construction. In Proceedings
of the NAACL-HLT, Companion Volume: Demonstra-
tions, pages 273?275, New York City, USA, June. As-
sociation for Computational Linguistics.
Brett R. South, Shuying Shen, Jianwei Leng, Tyler B.
Forbush, Scott L. DuVall, and Wendy W. Chapman.
2012. A prototype tool set to support machine-assisted
annotation. In Proceedings of the 2012 Workshop
on Biomedical Natural Language Processing, BioNLP
?12, pages 130?139, Stroudsburg, PA, USA. Associa-
tion for Computational Linguistics.
Pontus Stenetorp, Sampo Pyysalo, Goran Topic?, Tomoko
Ohta, Sophia Ananiadou, and Jun?ichi Tsujii. 2012.
Brat: a web-based tool for nlp-assisted text annotation.
In Proceedings of the Demonstrations at EACL-2012,
pages 102?107, Avignon, France, April. Association
for Computational Linguistics.
19
