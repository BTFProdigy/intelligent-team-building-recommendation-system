Proceedings of the ACL-IJCNLP 2009 Conference Short Papers, pages 329?332,
Suntec, Singapore, 4 August 2009.
c
?2009 ACL and AFNLP
Do Automatic Annotation Techniques Have Any Impact on Supervised
Complex Question Answering?
Yllias Chali
University of Lethbridge
Lethbridge, AB, Canada
chali@cs.uleth.ca
Sadid A. Hasan
University of Lethbridge
Lethbridge, AB, Canada
hasan@cs.uleth.ca
Shafiq R. Joty
University of British Columbia
Vancouver, BC, Canada
rjoty@cs.ubc.ca
Abstract
In this paper, we analyze the impact of
different automatic annotation methods on
the performance of supervised approaches
to the complex question answering prob-
lem (defined in the DUC-2007 main task).
Huge amount of annotated or labeled
data is a prerequisite for supervised train-
ing. The task of labeling can be ac-
complished either by humans or by com-
puter programs. When humans are em-
ployed, the whole process becomes time
consuming and expensive. So, in order
to produce a large set of labeled data we
prefer the automatic annotation strategy.
We apply five different automatic anno-
tation techniques to produce labeled data
using ROUGE similarity measure, Ba-
sic Element (BE) overlap, syntactic sim-
ilarity measure, semantic similarity mea-
sure, and Extended String Subsequence
Kernel (ESSK). The representative super-
vised methods we use are Support Vec-
tor Machines (SVM), Conditional Ran-
dom Fields (CRF), Hidden Markov Mod-
els (HMM), and Maximum Entropy (Max-
Ent). Evaluation results are presented to
show the impact.
1 Introduction
In this paper, we consider the complex question
answering problem defined in the DUC-2007 main
task
1
. We focus on an extractive approach of sum-
marization to answer complex questions where a
subset of the sentences in the original documents
are chosen. For supervised learning methods,
huge amount of annotated or labeled data sets are
obviously required as a precondition. The deci-
sion as to whether a sentence is important enough
1
http://www-nlpir.nist.gov/projects/duc/duc2007/
to be annotated can be taken either by humans or
by computer programs. When humans are em-
ployed in the process, producing such a large la-
beled corpora becomes time consuming and ex-
pensive. There comes the necessity of using au-
tomatic methods to align sentences with the in-
tention to build extracts from abstracts. In this
paper, we use ROUGE similarity measure, Basic
Element (BE) overlap, syntactic similarity mea-
sure, semantic similarity measure, and Extended
String Subsequence Kernel (ESSK) to automati-
cally label the corpora of sentences (DUC-2006
data) into extract summary or non-summary cat-
egories in correspondence with the document ab-
stracts. We feed these 5 types of labeled data into
the learners of each of the supervised approaches:
SVM, CRF, HMM, and MaxEnt. Then we exten-
sively investigate the performance of the classi-
fiers to label unseen sentences (from 25 topics of
DUC-2007 data set) as summary or non-summary
sentence. The experimental results clearly show
the impact of different automatic annotation meth-
ods on the performance of the candidate super-
vised techniques.
2 Automatic Annotation Schemes
Using ROUGE Similarity Measures ROUGE
(Recall-Oriented Understudy for Gisting Evalua-
tion) is an automatic tool to determine the qual-
ity of a summary using a collection of measures
ROUGE-N (N=1,2,3,4), ROUGE-L, ROUGE-W
and ROUGE-S which count the number of over-
lapping units such as n-gram, word-sequences,
and word-pairs between the extract and the ab-
stract summaries (Lin, 2004). We assume each
individual document sentence as the extract sum-
mary and calculate its ROUGE similarity scores
with the corresponding abstract summaries. Thus
an average ROUGE score is assigned to each sen-
tence in the document. We choose the top N sen-
tences based on ROUGE scores to have the label
329
+1 (summary sentences) and the rest to have the
label ?1 (non-summary sentences).
Basic Element (BE) Overlap Measure We ex-
tract BEs, the ?head-modifier-relation? triples for
the sentences in the document collection using BE
package 1.0 distributed by ISI
2
. The ranked list
of BEs sorted according to their Likelihood Ra-
tio (LR) scores contains important BEs at the top
which may or may not be relevant to the abstract
summary sentences. We filter those BEs by check-
ing possible matches with an abstract sentence
word or a related word. For each abstract sen-
tence, we assign a score to every document sen-
tence as the sum of its filtered BE scores divided
by the number of BEs in the sentence. Thus, ev-
ery abstract sentence contributes to the BE score
of each document sentence and we select the top
N sentences based on average BE scores to have
the label +1 and the rest to have the label ?1.
Syntactic Similarity Measure In order to cal-
culate the syntactic similarity between the abstract
sentence and the document sentence, we first parse
the corresponding sentences into syntactic trees
using Charniak parser
3
(Charniak, 1999) and then
we calculate the similarity between the two trees
using the tree kernel (Collins and Duffy, 2001).
We convert each parenthesis representation gener-
ated by Charniak parser to its corresponding tree
and give the trees as input to the tree kernel func-
tions for measuring the syntactic similarity. The
tree kernel of two syntactic trees T
1
and T
2
is ac-
tually the inner product of the two m-dimensional
vectors, v(T
1
) and v(T
2
):
TK(T
1
, T
2
) = v(T
1
).v(T
2
)
The TK (tree kernel) function gives the simi-
larity score between the abstract sentence and the
document sentence based on the syntactic struc-
ture. Each abstract sentence contributes a score to
the document sentences and the top N sentences
are selected to be annotated as +1 and the rest as
?1 based on the average of similarity scores.
Semantic Similarity Measure Shallow seman-
tic representations, bearing a more compact infor-
mation, can prevent the sparseness of deep struc-
tural approaches and the weakness of BOW mod-
els (Moschitti et al, 2007). To experiment with
semantic structures, we parse the corresponding
2
BE website:http://www.isi.edu/ cyl/BE
3
available at ftp://ftp.cs.brown.edu/pub/nlparser/
sentences semantically using a Semantic Role La-
beling (SRL) system like ASSERT
4
. ASSERT is
an automatic statistical semantic role tagger, that
can annotate naturally occuring text with semantic
arguments. We represent the annotated sentences
using tree structures called semantic trees (ST).
Thus, by calculating the similarity between STs,
each document sentence gets a semantic similarity
score corresponding to each abstract sentence and
then the topN sentences are selected to be labeled
as +1 and the rest as ?1 on the basis of average
similarity scores.
Extended String Subsequence Kernel (ESSK)
Formally, ESSK is defined as follows (Hirao et al,
2004):
K
essk
(T,U) =
d
?
m=1
?
t
i
?T
?
u
j
?U
K
m
(t
i
, u
j
)
K
m
(t
i
, u
j
) =
{
val(t
i
, u
j
) if m = 1
K
?
m?1
(t
i
, u
j
) ? val(t
i
, u
j
)
Here, K
?
m
(t
i
, u
j
) is defined below. t
i
and u
j
are the nodes of T and U , respectively. Each node
includes a word and its disambiguated sense. The
function val(t, u) returns the number of attributes
common to the given nodes t and u.
K
?
m
(t
i
, u
j
) =
{
0 if j = 1
?K
?
m
(t
i
, u
j?1
) +K
??
m
(t
i
, u
j?1
)
Here ? is the decay parameter for the number
of skipped words. We choose ? = 0.5 for this
research. K
??
m
(t
i
, u
j
) is defined as:
K
??
m
(t
i
, u
j
) =
{
0 if i = 1
?K
??
m
(t
i?1
, u
j
) +K
m
(t
i?1
, u
j
)
Finally, the similarity measure is defined after
normalization as below:
sim
essk
(T,U) =
K
essk
(T,U)
?
K
essk
(T, T )K
essk
(U,U)
Indeed, this is the similarity score we assign to
each document sentence for each abstract sentence
and in the end, top N sentences are selected to
be annotated as +1 and the rest as ?1 based on
average similarity scores.
3 Experiments
Task Description The problem definition at
DUC-2007 was: ?Given a complex question (topic
description) and a collection of relevant docu-
ments, the task is to synthesize a fluent, well-
organized 250-word summary of the documents
4
available at http://cemantix.org/assert
330
that answers the question(s) in the topic?. We con-
sider this task and use the five automatic annota-
tion methods to label each sentence of the 50 doc-
ument sets of DUC-2006 to produce five differ-
ent versions of training data for feeding the SVM,
HMM, CRF and MaxEnt learners. We choose the
top 30% sentences (based on the scores assigned
by an annotation scheme) of a document set to
have the label +1 and the rest to have ?1. Unla-
beled sentences of 25 document sets of DUC-2007
data are used for the testing purpose.
Feature Space We represent each of the
document-sentences as a vector of feature-values.
We extract several query-related features and
some other important features from each sen-
tence. We use the features: n-gram overlap,
Longest Common Subsequence (LCS), Weighted
LCS (WLCS), skip-bigram, exact word overlap,
synonym overlap, hypernym/hyponym overlap,
gloss overlap, Basic Element (BE) overlap, syn-
tactic tree similarity measure, position of sen-
tences, length of sentences, Named Entity (NE),
cue word match, and title match (Edmundson,
1969).
Supervised Systems For SVM we use second
order polynomial kernel for the ROUGE and
ESSK labeled training. For the BE, syntactic, and
semantic labeled training third order polynomial
kernel is used. The use of kernel is based on the
accuracy we achieved during training. We apply
3-fold cross validation with randomized local-grid
search for estimating the value of the trade-off pa-
rameter C. We try the value of C in 2
i
following
heuristics, where i ? {?5,?4, ? ? ? , 4, 5} and set
C as the best performed value 0.125 for second
order polynomial kernel and default value is used
for third order kernel. We use SVM
light 5
pack-
age for training and testing in this research. In case
of HMM, we apply the Maximum Likelihood Esti-
mation (MLE) technique by frequency counts with
add-one smoothing to estimate the three HMM
parameters: initial state probabilities, transition
probabilities and emission probabilities. We use
Dr. Dekang Lin?s HMM package
6
to generate
the most probable label sequence given the model
parameters and the observation sequence (unla-
beled DUC-2007 test data). We use MALLET-0.4
NLP toolkit
7
to implement the CRF. We formu-
5
http://svmlight.joachims.org/
6
http://www.cs.ualberta.ca/
?
lindek/hmm.htm
7
http://mallet.cs.umass.edu/
late our problem in terms of MALLET?s Simple-
Tagger class which is a command line interface to
the MALLET CRF class. We modify the Simple-
Tagger class in order to include the provision for
producing corresponding posterior probabilities of
the predicted labels which are used later for rank-
ing sentences. We build the MaxEnt system using
Dr. Dekang Lin?s MaxEnt package
8
. To define the
exponential prior of the ? values in MaxEnt mod-
els, an extra parameter ? is used in the package
during training. We keep the value of ? as default.
Sentence Selection The proportion of important
sentences in the training data will differ from the
one in the test data. A simple strategy is to rank
the sentences in a document, then select the top N
sentences. In SVM systems, we use the normal-
ized distance from the hyperplane to each sample
to rank the sentences. Then, we choose N sen-
tences until the summary length (250 words for
DUC-2007) is reached. For HMM systems, we
use Maximal Marginal Relevance (MMR) based
method to rank the sentences (Carbonell et al,
1997). In CRF systems, we generate posterior
probabilities corresponding to each predicted label
in the label sequence to measure the confidence of
each sentence for summary inclusion. Similarly
for MaxEnt, the corresponding probability values
of the predicted labels are used to rank the sen-
tences.
Evaluation Results The multiple ?reference
summaries? given by DUC-2007 are used in the
evaluation of our summary content. We evalu-
ate the system generated summaries using the au-
tomatic evaluation toolkit ROUGE (Lin, 2004).
We report the three widely adopted important
ROUGE metrics in the results: ROUGE-1 (uni-
gram), ROUGE-2 (bigram) and ROUGE-SU (skip
bi-gram). Figure 1 shows the ROUGE F-measures
for SVM, HMM, CRF and MaxEnt systems. The
X-axis containing ROUGE, BE, Synt (Syntactic),
Sem (Semantic), and ESSK stands for the annota-
tion scheme used. The Y-axis shows the ROUGE-
1 scores at the top, ROUGE-2 scores at the bottom
and ROUGE-SU scores in the middle. The super-
vised systems are distinguished by the line style
used in the figure.
From the figure, we can see that the ESSK la-
beled SVM system is having the poorest ROUGE -
1 score whereas the Sem labeled system performs
8
http://www.cs.ualberta.ca/
?
lindek/downloads.htm
331
Figure 1: ROUGE F-scores for different supervised systems
best. The other annotation methods? impact is al-
most similar here in terms of ROUGE-1. Ana-
lyzing ROUGE-2 scores, we find that the BE per-
forms the best for SVM, on the other hand, Sem
achieves top ROUGE-SU score. As for the two
measures Sem annotation is performing the best,
we can typically conclude that Sem annotation is
the most suitable method for the SVM system.
ESSK works as the best for HMM and Sem la-
beling performs the worst for all ROUGE scores.
Synt and BE labeled HMMs perform almost simi-
lar whereas ROUGE labeled system is pretty close
to that of ESSK. Again, we see that the CRF per-
forms best with the ESSK annotated data in terms
of ROUGE -1 and ROUGE-SU scores and Sem
has the highest ROUGE-2 score. But BE and Synt
labeling work bad for CRF whereas the ROUGE
labeling performs decently. So, we can typically
conclude that ESSK annotation is the best method
for the CRF system. Analyzing further, we find
that ESSK works best for MaxEnt and BE label-
ing is the worst for all ROUGE scores. We can
also see that ROUGE, Synt and Sem labeled Max-
Ent systems perform almost similar. So, from this
discussion we can come to a conclusion that SVM
system performs best if the training data uses se-
mantic annotation scheme and ESSK works best
for HMM, CRF and MaxEnt systems.
4 Conclusion and Future Work
In the work reported in this paper, we have per-
formed an extensive experimental evaluation to
show the impact of five automatic annotation
methods on the performance of different super-
vised machine learning techniques in confronting
the complex question answering problem. Experi-
mental results show that Sem annotation is the best
for SVM whereas ESSK works well for HMM,
CRF and MaxEnt systems. In the near future,
we plan to work on finding more sophisticated ap-
proaches to effective automatic labeling so that we
can experiment with different supervised methods.
References
Jaime Carbonell, Yibing Geng, and Jade Goldstein.
1997. Automated query-relevant summarization and
diversity-based reranking. In IJCAI-97 Workshop on
AI in Digital Libraries, pages 12?19, Japan.
Eugene Charniak. 1999. A Maximum-Entropy-
Inspired Parser. In Technical Report CS-99-12,
Brown University, Computer Science Department.
Michael Collins and Nigel Duffy. 2001. Convolution
Kernels for Natural Language. In Proceedings of
Neural Information Processing Systems, pages 625?
632, Vancouver, Canada.
Harold P. Edmundson. 1969. New methods in auto-
matic extracting. Journal of the ACM, 16(2):264?
285.
Tsutomu Hirao, Jun Suzuki, Hideki Isozaki, and Eisaku
Maeda. 2004. Dependency-based sentence align-
ment for multiple document summarization. In Pro-
ceedings of the 20th International Conference on
Computational Linguistics, pages 446?452.
Chin-Yew Lin. 2004. ROUGE: A Package for Au-
tomatic Evaluation of Summaries. In Proceed-
ings of Workshop on Text Summarization Branches
Out, Post-Conference Workshop of Association for
Computational Linguistics, pages 74?81, Barcelona,
Spain.
Alessandro Moschitti, Silvia Quarteroni, Roberto
Basili, and Suresh Manandhar. 2007. Exploiting
Syntactic and Shallow Semantic Kernels for Ques-
tion/Answer Classificaion. In Proceedings of the
45th Annual Meeting of the Association of Compu-
tational Linguistics, pages 776?783, Prague, Czech
Republic. ACL.
332
Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 681?690,
October 25-29, 2014, Doha, Qatar.
c?2014 Association for Computational Linguistics
Fear the REAPER: A System for Automatic Multi-Document
Summarization with Reinforcement Learning
Cody Rioux
University of Lethbridge
Lethbridge, AB, Canada
cody.rioux@uleth.ca
Sadid A. Hasan
Philips Research North America
Briarcliff Manor, NY, USA
sadid.hasan@philips.com
Yllias Chali
University of Lethbridge
Lethbridge, AB, Canada
chali@cs.uleth.ca
Abstract
This paper explores alternate algorithms,
reward functions and feature sets for per-
forming multi-document summarization
using reinforcement learning with a high
focus on reproducibility. We show that
ROUGE results can be improved using
a unigram and bigram similarity metric
when training a learner to select sentences
for summarization. Learners are trained
to summarize document clusters based on
various algorithms and reward functions
and then evaluated using ROUGE. Our ex-
periments show a statistically significant
improvement of 1.33%, 1.58%, and 2.25%
for ROUGE-1, ROUGE-2 and ROUGE-
L scores, respectively, when compared
with the performance of the state of the
art in automatic summarization with re-
inforcement learning on the DUC2004
dataset. Furthermore query focused exten-
sions of our approach show an improve-
ment of 1.37% and 2.31% for ROUGE-2
and ROUGE-SU4 respectively over query
focused extensions of the state of the
art with reinforcement learning on the
DUC2006 dataset.
1 Introduction
The multi-document summarization problem has
received much attention recently (Lyngbaek,
2013; Sood, 2013; Qian and Liu, 2013) due to
its ability to reduce large quantities of text to a
human processable amount as well as its appli-
cation in other fields such as question answering
(Liu et al., 2008; Chali et al., 2009a; Chali et al.,
2009b; Chali et al., 2011b). We expect this trend
to further increase as the amount of linguistic data
on the web from sources such as social media,
wikipedia, and online newswire increases. This
paper focuses specifically on utilizing reinforce-
ment learning (Sutton and Barto, 1998; Szepesv,
2009) to create a policy for summarizing clusters
of multiple documents related to the same topic.
The task of extractive automated multi-
document summarization (Mani, 2001) is to se-
lect a subset of textual units, in this case sentences,
from the source document cluster to form a sum-
mary of the cluster in question. This extractive
approach allows the learner to construct a sum-
mary without concern for the linguistic quality of
the sentences generated, as the source documents
are assumed to be of a certain linguistic quality.
This paper aims to expand on the techniques used
in Ryang and Abekawa (2012) which uses a re-
inforcement learner, specifically TD(?), to create
summaries of document clusters. We achieve this
through introducing a new algorithm, varying the
feature space and utilizing alternate reward func-
tions.
The TD(?) learner used in Ryang and
Abekawa (2012) is a very early reinforcement
learning implementation. We explore the option of
leveraging more recent research in reinforcement
learning algorithms to improve results. To this end
we explore the use of SARSA which is a deriva-
tive of TD(?) that models the action space in ad-
dition to the state space modelled by TD(?). Fur-
thermore we explore the use of an algorithm not
based on temporal difference methods, but instead
on policy iteration techniques. Approximate Pol-
icy Iteration (Lagoudakis and Parr, 2003) gener-
ates a policy, then evaluates and iterates until con-
vergence.
The reward function in Ryang and Abekawa
(2012) is a delayed reward based on tf?idf values.
We further explore the reward space by introduc-
ing similarity metric calculations used in ROUGE
(Lin, 2004) and base our ideas on Saggion et al.
(2010). The difference between immediate re-
wards and delayed rewards is that the learner re-
681
ceives immediate feedback at every action in the
former and feedback only at the end of the episode
in the latter. We explore the performance differ-
ence of both reward types. Finally we develop
query focused extensions to both reward functions
and present their results on more recent Document
Understanding Conference (DUC) datasets which
ran a query focused task.
We first evaluate our systems using the
DUC2004 dataset for comparison with the results
in Ryang and Abekawa (2012). We then present
the results of query focused reward functions
against the DUC2006 dataset to provide refer-
ence with a more recent dataset and a more recent
task, specifically a query-focused summarization
task. Evaluations are performed using ROUGE
for ROUGE-1, ROUGE-2 and ROUGE-L values
for general summarization, while ROUGE-2 and
ROUGE-SU4 is used for query-focused summa-
rization. Furthermore we selected a small subset
of query focused summaries to be subjected to hu-
man evaluations and present the results.
Our implementation is named REAPER
(Relatedness-focused Extractive Automatic
summary Preparation Exploiting Reinfocement
learning) thusly for its ability to harvest a docu-
ment cluster for ideal sentences for performing
the automatic summarization task. REAPER is
not just a reward function and feature set, it is a
full framework for implementing summarization
tasks using reinforcement learning and is avail-
able online for experimentation.
1
The primary
contributions of our experiments are as follows:
? Exploration of TD(?), SARSA and Ap-
proximate Policy Iteration.
? Alternate REAPER reward function.
? Alternate REAPER feature set.
? Query focused extensions of automatic sum-
marization using reinforcement learning.
2 Previous Work and Motivation
Previous work using reinforcement learning for
natural language processing tasks (Branavan et
al., 2009; Wan, 2007; Ryang and Abekawa,
2012; Chali et al., 2011a; Chali et al., 2012)
inspired us to use a similar approach in our
experiments. Ryang and Abekawa (2012) im-
plemented a reinforcement learning approach to
1
https://github.com/codyrioux/REAPER
multi-document summarization which they named
Automatic Summarization using Reinforcement
Learning (ASRL). ASRL uses TD(?) to learn and
then execute a policy for summarizing a cluster of
documents. The algorithm performs N summa-
rizations from a blank state to termination, updat-
ing a set of state-value predictions as it does so.
From these N episodes a policy is created using
the estimated state-value pairs, this policy greed-
ily selects the best action until the summary enters
its terminal state. This summary produced is the
output of ASRL and is evaluated using ROUGE-
1, ROUGE-2, and ROUGE-L (Lin, 2004). The
results segment of the paper indicates that ASRL
outperforms greedy and integer linear program-
ming (ILP) techniques for the same task.
There are two notable details that provide the
motivation for our experiments; TD(?) is rela-
tively old as far as reinforcement learning (RL)
algorithms are concerned, and the optimal ILP did
not outperform ASRL using the same reward func-
tion. The intuition gathered from this is that if
the optimal ILP algorithm did not outperform the
suboptimal ASRL on the ROUGE evaluation, us-
ing the same reward function, then there is clearly
room for improvement in the reward function?s
ability to accurately model values in the state
space. Furthermore one may expect to achieve
a performance boost exploiting more recent re-
search by utilizing an algorithm that intends to
improve upon the concepts on which TD(?) is
based. These provide the motivation for the re-
mainder of the research preformed.
Query focused multi-document summarization
(Li and Li, 2013; Chali and Hasan, 2012b; Yin et
al., 2012; Wang et al., 2013) has recently gained
much attention due to increasing amounts of tex-
tual data, as well as increasingly specific user de-
mands for extracting information from said data.
This is reflected in the query focused tasks run in
the Document Understanding Conference (DUC)
and Text Analysis Conference (TAC) over the past
decade. This has motivated us to design and im-
plement query focused extensions to these rein-
forcement learning approaches to summarization.
There has been some research into the effects of
sentence compression on the output of automatic
summarization systems (Chali and Hasan, 2012a),
specifically the evaluation results garnered from
compressing sentences before evaluation (Qian
and Liu, 2013; Lin and Rey, 2003; Ryang and
682
Abekawa, 2012). However Ryang and Abekawa
(2012) found this technique to be ineffective in im-
proving ROUGE metrics using a similar reinforce-
ment learning approach to this paper, as a result
we will not perform any further exploration into
the effects of sentence compression.
3 Problem Definition
We use an identical problem definition to Ryang
and Abekawa (2012). Assume the given cluster
of documents is represented as a set of textual
units D = {x
1
, x
2
, ? ? ? , x
n
} where |D| = n and
x
i
represents a single textual unit. Textual units
for the purposes of this experiment are the indi-
vidual sentences in the document cluster, that is
D = D
1
?D
2
? ? ? ? ?D
m
where m is the number
of documents in the cluster and eachD
i
represents
a document.
The next necessary component is the score
function, which is to be used as the reward for the
learner. The function score(s) can be applied to
any s ? D. s is a summary of the given document
or cluster of documents.
Given these parameters, and a length limitation
k we can define an optimal summary s
?
as:
s
?
= argmax score(s)
where s ? D and length(s) ? k (1)
It is the objective of our learner to create a pol-
icy that produces the optimal summary for its pro-
vided document cluster D. Henceforth the length
limitations used for general summarization will be
665 bytes, and query focused summarization will
use 250 words. These limitations on summary
length match those set by the Document Under-
standing Conferences associated with the dataset
utilized in the respective experiments.
4 Algorithms
TD(?) and SARSA (Sutton and Barto, 1998) are
temporal difference methods in which the primary
difference is that TD(?) models state value pre-
dictions, and SARSA models state-action value
predictions. Approximate Policy Iteration (API)
follows a different paradigm by iteratively improv-
ing a policy for a markov decision process until the
policy converges.
4.1 TD(?)
In the ASRL implementation of TD(?) the learn-
ing rate ?
k
and temperature ?
k
decay as learning
progresses with the following equations with k set
to the number of learning episodes that had taken
place.
?
k
= 0.001 ? 101/(100 + k
1.1
) (2)
?
k
= 1.0 ? 0.987
k?1
(3)
One can infer from the decreasing values of ?
k
that as the number of elapsed episodes increases
the learner adjusts itself at a smaller rate. Simi-
larly as the temperature ?
k
decreases the action se-
lection policy becomes greedier and thus performs
less exploration, this is evident in (5) below.
Note that unlike traditional TD(?) implementa-
tions the eligibility trace e resets on every episode.
The reasons for this will become evident in the
experiments section of the paper in which ? =
1, ? = 1 and thus there is no decay during an
episode and complete decay after an episode. The
same holds true for SARSA below.
The action-value estimation Q(s, a) is approxi-
mated as:
Q(s, a) = r + ?V (s
?
) (4)
The policy is implemented as such:
policy(a|s; ?; ?) =
e
Q(s,a)/?
?
a?A
e
Q(s,a)/?
(5)
Actions are selected probabilistically using soft-
max selection (Sutton and Barto, 1998) from a
Boltzmann distribution. As the value of ? ap-
proaches 0 the distribution becomes greedier.
4.2 SARSA
SARSA is implemented in a very similar manner
and shares ?
k
, ?
k
, ?(s), m, and policy(s) with the
TD(?) implementation above. SARSA is also
a temporal difference algorithm and thus behaves
similarly to TD(?) with the exception that values
are estimated not only on the state s but a state-
action pair [s, a].
4.3 Approximate Policy Iteration
The third algorithm in our experiment uses Ap-
proximate Policy Iteration (Lagoudakis and Parr,
2003) to implement a reinforcement learner. The
683
novelty introduced by (Lagoudakis and Parr,
2003) is that they eschew standard representations
for a policy and instead use a classifier to represent
the current policy pi. Further details on the algo-
rithm can be obtained from Lagoudakis and Parr
(2003).
5 Experiments
Our state space S is represented simply as a three-
tuple [s a f ] in which s is the set of textual units
(sentences) that have been added to the summary,
a is a sequence of actions that have been per-
formed on the summary and f is a boolean with
value 0 representing non-terminal states and 1 rep-
resenting a summary that has been terminated.
The individual units in our action space are de-
fined as [:insert x
i
] where x
i
is a textual unit as
described earlier, let us define D
i
as the set [:in-
sert x
i
] for all x
i
? D where D is the document
set. We also have one additional action [:finish]
and thus we can define our action space.
A = D
i
? {[: finish]} (6)
The actions eligible to be executed on any given
state s is defined by a function actions(A, s):
actions(A, s) =
{
[: finish] if length(s) > k
A? a
t
otherwise
(7)
The state-action transitions are defined below:
[s
t
, a
t
, 0]
a=insertx
i
???????? [s
t
? x
i
, a
t
? a , 0] (8)
[s
t
, a
t
, 0]
:finish
????? [s
t
, a
t
, 1] (9)
[s
t
, a
t+1
, 1]
any
??? [s
t
, a
t
, 1] (10)
Insertion adds both the content of the textual
unit x
i
to the set s as well as the action itself to
set a. Conversely finishing does not alter s or a
but it flips the f bit to on. Notice from (10) that
once a state is terminal any further actions have no
effect.
5.1 Feature Space
We present an alternate feature set called
REAPER feature set based on the ideas presented
in Ryang and Abekawa (2012). Our proposed fea-
ture set follows a similar format to the previous
one but depends on the presence of top bigrams
instead of tf ? idf words.
? One bit b ? 0, 1 for each of the top n bigrams
(Manning and Sch?utze, 1999) present in the
summary.
? Coverage ratio calculated as the sum of the
bits in the previous feature divided by n.
? Redundancy Ratio calculated as the number
of redundant times a bit in the first feature is
flipped on, divided by n.
? Length Ratio calculated as length(s)/k
where k is the length limit.
? Longest common subsequence length.
? Length violation bit. Set to 1 if length(s) >
k
Summaries which exceed the length limitation
k are subject to the same reduction as the ASRL
feature set (Ryang and Abekawa, 2012) to an all
zero vector with the final bit set to one.
5.2 Reward Function
Our reward function (termed as REAPER reward)
is based on the n-gram concurrence score metric,
and the longest-common-subsequence recall met-
ric contained within ROUGE (Lin, 2004).
reward(s) =
?
?
?
?
?
?1, if length(s) > k
score(s) if s is terminal
0 otherwise
(11)
Where score is defined identically to ASRL,
with the exception that Sim is a new equation
based on ROUGE metrics.
score(s) =
?
x
i
?S
?
s
Rel(x
i
)?
?
x
i
,x
j
?S,i<j
(1? ?
s
)Red(x
i
, x
j
)
(12)
Rel(x
i
) = Sim(x
i
, D) + Pos(x
i
)
?1
(13)
Red(x
i
, x
j
) = Sim(x
i
, x
j
) (14)
684
Ryang and Abekawa (2012) experimentally de-
termined a value of 0.9 for the ?
s
parameter. That
value is used herein unless otherwise specified.
Sim has been redefined as:
Sim(s) =1 ? ngco(1, D, s)+
4 ? ngco(2, D, s)+
1 ? ngco(3, D, s)+
1 ? ngco(4, D, s)+
1 ? rlcs(D, s)
(15)
and ngco is the ngram co-occurence score met-
ric as defined by Lin (2004).
ngco(n,D, s) =
?
r?D
?
ngram?r
Count
match
(ngram)
?
S
r
?D
?
ngram?r
Count(ngram)
(16)
Where n is the n-gram count for example 2 for
bigrams, D is the set of documents, and s is the
summary in question. Count
match
is the maxi-
mum number of times the ngram occurred in either
D or s.
The rlcs(R,S) is also a recall oriented mea-
sure based on longest common subsequence
(Hirschberg, 1977). Recall was selected as
DUC2004 tasks favoured a ? value for F-Measure
(Lin, 2004) high enough that only recall would
be considered. lcs is the longest common sub-
sequence, and length(D) is the total number of
tokens in the reference set D.
rlcs(D, s) =
lcs(D, s)
length(D)
(17)
We are measuring similarity between sentences
and our entire reference set, and thusly our D is
the set of documents defined in section 3. This
is also a delayed reward as the provided reward is
zero until the summary is terminal.
5.2.1 Query Focused Rewards
We have proposed an extension to both reward
functions to allow for query focused (QF) summa-
rization. We define a function score
?
which aims
to balance the summarization abilities of the re-
ward with a preference for selecting textual units
related to the provided query q. Both ASRL and
REAPER score functions have been extended in
the following manner where Sim is the same sim-
ilarity functions used in equation (13) and (15).
score
?
(q, s) = ?Sim(q, s) + (1? ?)score(s)
(18)
The parameter ? is a balancing factor between
query similarity and overall summary score in
which 0 <= ? <= 1, we used an arbitrarily cho-
sen value of 0.9 in these experiments. In the case
of ASRL the parameter q is the vectorized version
of the query function with tf ? idf values, and for
Sim q is a sequence of tokens which make up the
query, stemmed and stop-words removed.
5.2.2 Immediate Rewards
Finally we also employ immediate versions of the
reward functions which behave similarly to their
delayed counterparts with the exception that the
score is always provided to the caller regardless of
the terminal status of state s.
reward(s) =
{
?1, if length(s) > k
score(s) otherwise
(19)
6 Results
We first present results
2
of our experiments, spec-
ifying parameters, and withholding discussion un-
til the following section. We establish a bench-
mark using ASRL and other top-scoring sum-
marization systems compared with REAPER us-
ing ROUGE. For generic multi-document sum-
marization we run experiments on all 50 docu-
ment clusters, each containing 10 documents, of
DUC2004 task 2 with parameters for REAPER
and ASRL fixed at ? = 1, ? = 1, and k = 665.
Sentences were stemmed using a Porter Stemmer
(Porter, 1980) and had the ROUGE stop word set
removed. All summaries were processed in this
manner and then projected back into their original
(unstemmed, with stop-words) state and output to
disk.
Config R-1 R-2 R-L
REAPER 0.40339 0.11397 0.36574
ASRL 0.39013 0.09479 0.33769
MCKP 0.39033 0.09613 0.34225
PEER65 0.38279 0.09217 0.33099
ILP 0.34712 0.07528 0.31241
GREEDY 0.30618 0.06400 0.27507
Table 1: Experimental results with ROUGE-1,
ROUGE-2 and ROUGE-L scores on DUC2004.
2
ROUGE-1.5.5 run with -m -s -p 0
685
Table 1 presents results for REAPER, ASRL
(Ryang and Abekawa, 2012), MCKP (Takamura
and Okumura, 2009), PEER65 (Conroy et al.,
2004) , and GREEDY (Ryang and Abekawa,
2012) algorithms on the same task. This allows
us to make a direct comparison with the results of
Ryang and Abekawa (2012).
REAPER results are shown using the TD(?)
algorithm, REAPER reward function, and ASRL
feature set. This is to establish the validity of the
reward function holding all other factors constant.
REAPER results for ROUGE-1, ROUGE-2 and
ROUGE-L are statistically significant compared to
the result set presented in Table 2 of Ryang and
Abekawa (2012) using p < 0.01.
Run R-1 R-2 R-L
REAPER 0 0.39536 0.10679 0.35654
REAPER 1 0.40176 0.11048 0.36450
REAPER 2 0.39272 0.11171 0.35766
REAPER 3 0.39505 0.11021 0.35972
REAPER 4 0.40259 0.11396 0.36539
REAPER 5 0.40184 0.11306 0.36391
REAPER 6 0.39311 0.10873 0.35481
REAPER 7 0.39814 0.11001 0.35786
REAPER 8 0.39443 0.10740 0.35586
REAPER 9 0.40233 0.11397 0.36483
Average 0.39773 0.11063 0.36018
Table 2: REAPER run 10 times on the DUC2004.
We present the results of 10 runs of REAPER,
with REAPER feature set.. As with ASRL,
REAPER does not converge on a stable solution
which is attributable to the random elements of
TD(?). Results in all three metrics are again
statistically significant compared to ASRL results
presented in the Ryang and Abekawa (2012) pa-
per. All further REAPER experiments use the bi-
gram oriented feature space.
Reward R-1 R-2 R-L
Delayed 0.39773 0.11397 0.36018
Immediate 0.32981 0.07709 0.30003
Table 3: REAPER with delayed and immediate re-
wards on DUC2004.
Table 3 shows the performance difference of
REAPER when using a delayed and immediate re-
ward. The immediate version of REAPER pro-
vides feedback on every learning step, unlike the
delayed version which only provides score at the
end of the episode.
Features R-1 R-2 R-L
ASRL 0.40339 0.11397 0.36574
REAPER 0.40259 0.11396 0.36539
Table 4: REAPER with alternate feature spaces on
DUC2004.
We can observe the results of using REAPER
with various feature sets in Table 4. Experiments
were run using REAPER reward, TD(?), and the
specified feature set.
Algorithm R-1 R-2 R-L
TD(?) 0.39773 0.11063 0.36018
SARSA 0.28287 0.04858 0.26172
API 0.29163 0.06570 0.26542
Table 5: REAPER with alternate algorithms on
DUC2004.
Table 5 displays the performance of REAPER
with alternate algorithms. TD(?) and SARSA
are run using the delayed reward feature, while
API requires an immediate reward and was thus
run with the immediate reward.
System R-2 R-SU4
REAPER 0.07008 0.11689
ASRL 0.05639 0.09379
S24 0.09505 0.15464
Baseline 0.04947 0.09788
Table 6: QF-REAPER on DUC2006.
For query-focused multi-document summariza-
tion we experimented with the DUC2006 system
task, which contained 50 document clusters con-
sisting of 25 documents each. Parameters were
fixed to ? = 1, ? = 1 and k = 250 words. In
Table 6 we can observe the results
3
of our query
focused systems against DUC2006?s top scorer
(S24) for ROUGE-2, and a baseline. The baseline
was generated by taking the most recent document
in the cluster and outputting the first 250 words.
Human Evaluations: We had three native
English-speaking human annotators evaluate a set
of four randomly chosen summaries produced by
REAPER on the DUC2004 dataset.
3
ROUGE-1.5.5 run with -n 2 -x -m -2 4 -u -c 95 -r 1000
-f A -p 0.5 -t 0 -l 250
686
Metric A1 A2 A3 AVG
Grammaticality 3.00 4.00 4.00 3.67
Redundancy 4.75 4.25 2.75 3.92
Referential Clarity 4.00 4.50 3.50 4.00
Focus 4.50 3.50 2.25 3.42
Structure 3.50 4.00 3.00 3.50
Responsiveness 4.25 3.75 3.00 3.67
Table 7: Human evaluation scores on DUC2004.
Table 7 shows the evaluation results accord-
ing to the DUC2006 human evaluation guidelines.
The first five metrics are related entirely to the lin-
guistic quality of the summary in question and the
final metric, Responsiveness, rates the summary
on its relevance to the source documents. Columns
represent the average provided by a given annota-
tor over the four summaries, and the AVG column
represents the average score for all three annota-
tors over all four summaries. Score values are an
integer between 1 and 5 inclusive.
7 Discussion
First we present a sample of a summary generated
from a randomly selected cluster. The following
summary was generated from cluster D30017 of
the DUC 2004 dataset using REAPER reward with
TD(?) and REAPER feature space.
A congressman who visited remote parts of
North Korea last week said Saturday that the food
and health situation there was desperate and de-
teriorating, and that millions of North Koreans
might have starved to death in the last few years.
North Korea is entering its fourth winter of chronic
food shortages with its people malnourished and
at risk of dying from normally curable illnesses,
senior Red Cross officials said Tuesday. More than
five years of severe food shortages and a near-total
breakdown in the public health system have led to
devastating malnutrition in North Korea and prob-
ably left an entire generation of children physi-
cally and mentally impaired, a new study by in-
ternational aid groups has found. Years of food
shortages have stunted the growth of millions of
North Korean children, with two-thirds of children
under age seven suffering malnourishment, U.N.
experts said Wednesday. The founder of South Ko-
rea?s largest conglomerate plans to visit his native
North Korea again next week with a gift of 501
cattle, company officials said Thursday. ?There is
enough rice.
We can observe that the summary is both syn-
tactically sound, and elegantly summarizes the
source documents.
Our baseline results table (Table 1) shows
REAPER outperforming ASRL in a statistically
significant manner on all three ROUGE metrics
in question. However we can see from the abso-
lute differences in score that very few additional
important words were extracted (ROUGE-1) how-
ever REAPER showed a significant improvement
in the structuring and ordering of those words
(ROUGE-2, and ROUGE-L).
The balancing factors used in the REAPER re-
ward function are responsible for the behaviour of
the reward function, and thus largely responsible
for the behaviour of the reinforcement learner. In
equation 15 we can see balance numbers of 1, 4, 1,
1, 1 for 1-grams, 2-grams, 3-grams, 4-grams, and
LCS respectively. In adjusting these values a user
can express a preference for a single metric or a
specific mixture of these metrics. Given that the
magnitude of scores for n-grams decrease as n in-
creases and given that the magnitude of scores for
1-grams is generally 3 to 4 times larger, in our ex-
perience, we can see that this specific reward func-
tion favours bigram similarity over unigram simi-
larity. These balance values can be adjusted to suit
the specific needs of a given situation, however we
leave exploration of this concept for future work.
We can observe in Figure 1 that ASRL does not
converge on a stable value, and dips towards the
300
th
episode while in Figure 2 REAPER does
not take nearly such a dramatic dip. These fig-
ures display average normalized reward for all 50
document clusters on a single run. Furthermore
we can observe that ASRL reaches it?s peak re-
ward around episode 225 while REAPER does so
around episode 175 suggesting that REAPER con-
verges faster.
7.1 Delayed vs. Immediate Rewards
The delayed vs. immediate rewards results in Ta-
ble 3 clearly show that delaying the reward pro-
vides a significant improvement in globally opti-
mizing the summary for ROUGE score. This can
be attributed to the ? = 1 and ? = 1 parame-
ter values being suboptimal for the immediate re-
ward situation. This has the added benefit of be-
ing much more performant computationally as far
fewer reward calculations need be done.
687
Figure 1: ASRL normalized reward.
7.2 Feature Space
The feature space experiments in Table 4 seem to
imply that REAPER performs similarly with both
feature sets. We are confident that an improve-
ment could be made through further experimenta-
tion. Feature engineering, however, is a very broad
field and we plan to pursue this topic in depth in
the future.
7.3 Algorithms
TD(?) significantly outperformed both SARSA
and API in the algorithm comparison. Ryang and
Abekawa (2012) conclude that the feature space is
largely responsible for the algorithm performance.
This is due to the fact that poor states such as those
that are too long, or those that contain few impor-
tant words will reduce to the same feature set and
receive negative rewards collectively. SARSA
loses this benefit as a result of its modelling of
state-action pairs.
API on the other hand may have suffered a per-
formance loss due to its requirements of an imme-
diate reward, this is because when using a delayed
reward if the trajectory of a rollout does not reach
a terminal state the algorithm will not be able to
make any estimations about the value of the state
in question. We propose altering the policy iter-
ation algorithm to use a trajectory length of one
episode instead of a fixed number of actions in or-
der to counter the need for an immediate reward
function.
7.4 Query Focused Rewards
From the ROUGE results in Table 6 we can infer
that while REAPER outperformed ASRL on the
query focused task, however it is notable that both
Figure 2: REAPER normalized reward.
systems under performed when compared to the
top system from the DUC2006 conference.
We can gather from these results that it is not
enough to simply naively calculate similarity with
the provided query in order to produce a query-
focused result. Given that the results produced by
the generic summarization task is rather accept-
able according to our human evaluations we sug-
gest that further research be focused on a proper
similarity metric between the query and summary
to improve the reward function?s overall ability to
score summaries in a query-focused setting.
8 Conclusion and Future Work
We have explored alternate reward functions, fea-
ture sets, and algorithms for the task of automatic
summarization using reinforcement learning. We
have shown that REAPER outperforms ASRL on
both generic summarization and the query focused
tasks. This suggests the effectiveness of our re-
ward function and feature space. Our results also
confirm that TD(?) performs best for this task
compared to SARSA and API .
Due to the acceptable human evaluation scores
on the general summarization task it is clear that
the algorithm produces acceptable summaries of
newswire data. Given that we have a framework
for generating general summaries, and the cur-
rent popularity of the query-focused summariza-
tion task, we propose that the bulk of future work
in this area be focused on the query-focused task
specifically in assessing the relevance of a sum-
mary to a provided query. Therefore we intend to
pursue future research in utilizing word-sense dis-
ambiguation and synonyms, as well as other tech-
niques for furthering REAPER?s query similarity
688
metrics in order to improve its ROUGE and human
evaluation scores on query-focused tasks.
Acknowledgments
We would like to thank the anonymous review-
ers for their useful comments. The research re-
ported in this paper was supported by the Nat-
ural Sciences and Engineering Research Council
(NSERC) of Canada - discovery grant and the Uni-
versity of Lethbridge. This work was done when
the second author was at the University of Leth-
bridge.
References
S . Branavan, H. Chen, L. S. Zettlemoyer, and R. Barzi-
lay. 2009. Reinforcement Learning for Mapping
Instructions to Actions. In Proceedings of the 47th
Annual Meeting of the ACL and the 4th IJCNLP of
the AFNLP, pages 82?90.
Y. Chali and S. A. Hasan. 2012a. On the Effectiveness
of Using Sentence Compression Models for Query-
Focused Multi-Document Summarization. In Pro-
ceedings of the 24th International Conference on
Computational Linguistics (COLING 2012), pages
457?474. Mumbai, India.
Y. Chali and S. A. Hasan. 2012b. Query-
focused Multi-document Summarization: Auto-
matic Data Annotations and Supervised Learning
Approaches. Journal of Natural Language Engi-
neering, 18(1):109?145.
Y. Chali, S. A. Hasan, and S. R. Joty. 2009a. Do Auto-
matic Annotation Techniques Have Any Impact on
Supervised Complex Question Answering? Pro-
ceedings of the Joint conference of the 47th Annual
Meeting of the Association for Computational Lin-
guistics (ACL-IJCNLP 2009), pages 329?332.
Y. Chali, S. R. Joty, and S. A. Hasan. 2009b. Com-
plex Question Answering: Unsupervised Learning
Approaches and Experiments. Journal of Artificial
Intelligence Research, 35:1?47.
Y. Chali, S. A. Hasan, and K. Imam. 2011a. A
Reinforcement Learning Framework for Answering
Complex Questions. In Proceedings of the 16th
International Conference on Intelligent User Inter-
faces, pages 307?310. ACM, Palo Alto, CA, USA.
Y. Chali, S. A. Hasan, and S. R. Joty. 2011b. Improv-
ing Graph-based Random Walks for Complex Ques-
tion Answering Using Syntactic, Shallow Semantic
and Extended String Subsequence Kernels. Infor-
mation Processing and Management (IPM), Special
Issue on Question Answering, 47(6):843?855.
Y. Chali, S. A. Hasan, and K. Imam. 2012. Improv-
ing the Performance of the Reinforcement Learn-
ing Model for Answering Complex Questions. In
Proceedings of the 21st ACM Conference on Infor-
mation and Knowledge Management (CIKM 2012),
pages 2499?2502. ACM, Maui, Hawaii, USA.
J. Conroy, J. Goldstein, and D. Leary. 2004. Left-Brain
/ Right-Brain Multi-Document Summarization. In
Proceedings of the Document Un- derstanding Con-
ference (DUC 2004).
D. S. Hirschberg. 1977. Algorithms for the Longest
Common Subsequence Problem. In Journal of the
ACM, 24(4):664?675, October.
M. Lagoudakis and R. Parr. 2003. Reinforcement
learning as classification: Leveraging modern classi-
fiers. In Proceedings of the Twentieth International
Conference on Machine Learning, 20(1):424.
J. Li and S. Li. 2013. A Novel Feature-based Bayesian
Model for Query Focused Multi-document Summa-
rization. In Transactions of the Association for
Computational Linguistics, 1:89?98.
C. Lin and M. Rey. 2003. Improving Summariza-
tion Performance by Sentence Compression A Pi-
lot Study. In Proceedings of the Sixth International
Workshop on Information Retrieval with Asian Lan-
guages.
C. Lin. 2004. ROUGE : A Package for Automatic
Evaluation of Summaries. In Information Sciences,
16(1):25?26.
Y. Liu, S. Li, Y. Cao, C. Lin, D. Han, and Y. Yu.
2008. Understanding and Summarizing Answers
in Community-Based Question Answering Services.
In COLING ?08 Proceedings of the 22nd Inter-
national Conference on Computational Linguistics,
1(August):497?504.
S. Lyngbaek. 2013. SPORK: A Summarization
Pipeline for Online Repositories of Knowledge.
M.sc. thesis, California Polytechnic State Univer-
sity.
I. Mani. 2001. Automatic Summarization. John Ben-
jamins Publishing.
C. D. Manning and H. Sch?utze. 1999. Foundations of
Statistical Natural Language Processing, volume 26
of . MIT Press.
M. F. Porter. 1980. An algorithm for suffix stripping.
Program, 14(3):130?137.
X. Qian and Y. Liu. 2013. Fast Joint Compression and
Summarization via Graph Cuts. In Conference on
Empirical Methods in Natural Language Process-
ing.
S. Ryang and T. Abekawa. 2012. Framework of Au-
tomatic Text Summarization Using Reinforcement
Learning. In Proceedings of the 2012 Joint Con-
ference on Empirical Methods in Natural Language
Processing and Computational Natural Language
Learning, 1:256?265.
689
H. Saggion, C. Iria, T. M. Juan-Manuel, and E. San-
Juan. 2010. Multilingual Summarization Evalua-
tion without Human Models. In COLING ?10 Pro-
ceedings of the 23rd International Conference on
Computational Linguistics: Posters, 1:1059?1067.
A. Sood. 2013. Towards Summarization of Written
Text Conversations. M.sc. thesis, International Insti-
tute of Information Technology, Hyderabad, India.
R. S. Sutton and A. G. Barto. 1998. Reinforcement
Learning: An Introduction. MIT Press.
C. A. Szepesv. 2009. Algorithms for Reinforcement
Learning. Morgan & Claypool Publishers.
H. Takamura and M. Okumura. 2009. Text Summa-
rization Model based on Maximum Coverage Prob-
lem and its Variant. In EACL ?09 Proceedings
of the 12th Conference of the European Chapter
of the Association for Computational Linguistics,
(April):781?789.
X Wan. 2007. Towards an Iterative Reinforcement Ap-
proach for Simultaneous Document Summarization
and Keyword Extraction. In Proceedings of the 45th
Annual Meeting of the Association of Computational
Linguistics, pages 552?559.
L. Wang, H. Raghavan, V. Castelli, R. Florian, and
C. Cardie. 2013. A Sentence Compression Based
Framework to Query-Focused. In Proceedings of
the 51st Annual Meeting of the Association for Com-
putational Linguistics, 1:1384?1394.
W. Yin, Y. Pei, F. Zhang, and L. Huang. 2012. Query-
focused multi-document summarization based on
query-sensitive feature space. In Proceedings of the
21st ACM international conference on Information
and knowledge management - CIKM ?12, page 1652.
690
