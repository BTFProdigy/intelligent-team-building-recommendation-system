Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pages 1354?1359,
Seattle, Washington, USA, 18-21 October 2013. c?2013 Association for Computational Linguistics
Predicting the resolution of referring expressions from user behavior
Nikos Engonopoulos1 Mart??n Villalba1 Ivan Titov2 Alexander Koller1
1University of Potsdam, Germany 2University of Amsterdam, Netherlands
{nikolaos.engonopoulos, martin.villalba}@uni-potsdam.de
titov@uva.nl, koller@ling.uni-potsdam.de
Abstract
We present a statistical model for predicting
how the user of an interactive, situated NLP
system resolved a referring expression. The
model makes an initial prediction based on the
meaning of the utterance, and revises it con-
tinuously based on the user?s behavior. The
combined model outperforms its components
in predicting reference resolution and when to
give feedback.
1 Introduction
Speakers and listeners in natural communication are
engaged in a highly interactive process. In order to
achieve some communicative goal, the speaker will
perform an utterance which they believe has a high
chance of achieving that goal. They will then moni-
tor the listener?s behavior to see whether this goal is
actually being achieved. This process is a core part
of what is commonly called grounding in the dia-
logue literature (see e.g. (Clark, 1996; Traum, 1994;
Paek and Horvitz, 1999; Hirst et al, 1994)). Inter-
active computer systems that are to carry out an ef-
fective and efficient conversation with a user must
model this grounding process, and should ideally re-
spond to the user?s observed behavior in real time.
For instance, if the user of a pedestrian navigation
system takes a wrong turn, the system should inter-
pret this as evidence of misunderstanding and bring
the user back on track.
We focus here on the problem of predicting how
the user has resolved a referring expression (RE) that
was generated by the system, i.e. a noun phrase that
is intended to identify some object uniquely to the
listener. A number of authors have recently offered
statistical models for parts of this problem. Golland
et al (2010) and Garoufi and Koller (2011) have
presented log-linear models for predicting how the
listener will resolve a given RE in a given scene;
however, these models do not update the probabil-
ity model based on observing the user?s reactions.
Nakano et al (2007), Buschmeier and Kopp (2012),
and Koller et al (2012) all predict what the listener
understood based on their behavior, but do not con-
sider the RE itself in the model. The models of
Frank and Goodman (2012) and Vogel et al (2013)
aim at explaining the effect of implicatures on the
listener?s RE resolution process in terms of hypothe-
sized interactions, but do not actually support a real-
time interaction between a system and a user.
In this paper, we show how to predict how the
listener has resolved an RE by combining a statis-
tical model of RE resolution based on the RE itself
with a statistical model of RE resolution based on
the listener?s behavior. To our knowledge, this is
the first approach to combine two such models ex-
plicitly. We consider the RE grounding problem in
the context of interactive, situated natural language
generation (NLG) for the GIVE Challenge (Koller et
al., 2010a), where NLG systems must generate real-
time instructions in virtual 3D environments. Our
evaluation is based on interaction corpora from the
GIVE-2 and GIVE-2.5 Challenges, which contain
the systems? utterances along with the behavior of
human hearers in response to these utterances. We
find that the combined model predicts RE resolu-
tion more accurately than each of the two compo-
nent models alone. We see this as a first step towards
implementing an actual interactive system that per-
forms human-like grounding based on our RE reso-
lution model.
1354
Figure 1: An example scene in the GIVE environment.
2 Problem definition
In the GIVE Challenge, an interactive NLG system
faces the task of guiding a human instruction fol-
lower (IF) through a treasure-hunt game in a vir-
tual 3D environment (see Fig. 1). To complete the
task, the IF must press a number of buttons in the
correct order; these buttons are the colored boxes in
Fig. 1, and are scattered all over the virtual environ-
ment. The IF can move around freely in the virtual
environment, but has no prior knowledge about the
world. The NLG system?s task is to guide the IF to-
wards the successful completion of the treasure-hunt
task. To this end, it is continuously being informed
about the IF?s movements and visual field, and can
generate written utterances at any time. As a com-
parative evaluation effort, the GIVE Challenges con-
nected NLG systems to thousands of users over the
Internet (see e.g. Koller et al (2010a) for details).
Many system utterances are manipulation instruc-
tions, such as ?press the blue button?, containing an
RE in the form of a definite NP. We call a given part
of an interaction between the system and the IF an
episode of that interaction if it starts with a manip-
ulation instruction, ends with the IF performing an
action (i.e., pressing a button), and contains only
IF movements and no further utterances in between.
Not all manipulation instructions initiate an episode,
because the system may decide to perform further
utterances (not containing REs) before the IF per-
forms their action. An NLG system will choose the
RE for an instruction at runtime out of potentially
many semantically valid alternatives (?the blue but-
ton?, ?the button next to the chair?, ?the button to
the right of the red button?, etc.). Ideally, it will pre-
dict which of these REs has the highest chance to be
understood by the IF, given the current scene, and
utter an instruction that uses this RE.
After uttering the manipulation instruction, the
system needs to ascertain whether the IF understood
the RE correctly, i.e. it must engage in grounding.
A naive grounding mechanism might wait until the
IF actually presses a button and check whether it was
the right one. This is what many NLG systems in the
GIVE Challenges actually did. However, this can
make the communication ineffective (IF performs
many useless actions) and risky (IF may press the
wrong button and lose). Thus, it is important that the
system updates its prediction of how the IF resolved
the RE continuously by observing the IF?s behavior,
before the actual button press. For instance, if the
IF walks towards the target, this might reinforce the
system?s belief in a correct understanding; turning
away or exiting the room could be strong evidence
of the opposite. The system can then exploit the up-
dated prediction to give the IF feedback (?no, the
blue button?) to prevent costly mistakes.
We address these challenges by estimating the
probability distribution over the possible objects to
which the IF may resolve the RE. We then update
this distribution in real time by observing the IF?s
movements. More specifically, assume that a sys-
tem tries to refer to some object a? among some set
A of available objects. Given an RE r generated for
a? at time t0, the state of the world s at t0, and the
observed behavior ?(t) of the user at t ? t0, we
estimate the probability p(a|r, s, ?(t)) that the user
resolved r to an object a ? A. When generating the
instruction, an optimal NLG system will use the RE
r that maximizes p(a?|r, s, ?(t0)). It can then track
p(a|r, s, ?(t)) for time points t > t0 throughout the
episode, and generate feedback when p(a?|r, s, ?(t))
exceeds p(a?|r, s, ?(t)) for some a? 6= a?; that is,
when the updated probability distribution predicts
that the IF resolved r to an incorrect button.
3 A model of RE resolution
In order to model the distribution over possible ob-
jects, we assume the following generative story:
when receiving an instruction containing an RE r at
a given world state s, the IF resolves it to an object
a; depending on the object a, the IF then moves to-
wards it, exhibiting behavior ?. These assumptions
correspond to the following factorization:
p(a, ?|r, s) = p(?|a)p(a|r, s)
1355
The posterior probability distribution over objects a
can be obtained by applying the Bayes rule and us-
ing the above assumptions:
p(a|r, s, ?) ? p(a|r, s)p(a|?)/p(a)
For simplicity, we assume a uniform p(a) over all
objects in a world. We can thus represent p(a|r, s, ?)
as the normalized product of a semantic model
psem(a|r, s) and an observational model pobs(a|?).
We use log-linear models for both, and train them
separately. The feature functions we use only con-
sider general properties of objects (such as color and
distance), and not the identity of the objects them-
selves. This means that we can train a model on one
virtual environment (containing a certain set of ob-
jects), and then apply the model to another virtual
environment, containing a different set of objects.
Semantic model The semantic model estimates
for each object a in the environment the initial prob-
ability psem(a|r, s) that the IF will understand a
given RE r uttered in a scene s as referring to a. It
represents the meaning of r, contextualized to s, and
is only ever evaluated at the time t0 of the utterance.
The features used by this model are:
? Semantic features aim to encode whether r
is a good description of a. IsColorModifying
evaluates to 1 if a?s color appears as an adjec-
tive modifying the head noun of r, e.g. ?the
blue button?. IsRelPosModifying evaluates to
1 if a?s relative position to the IF is mentioned
as an adjective in r, e.g. ?the left button?.
? Confusion features capture the hypothesis that
the IF may be confused by the description of a
landmark when resolving the RE; e.g. an RE
like ?the button next to the red button? might
confuse the IF into pressing a red button, rather
than the one meant by the system. These are
the same features as in the Semantic case, but
looking for modifier keywords in the entire RE,
including the head.
? Salience features account for the fact that an
IF is more likely to resolve r to a if a was visu-
ally salient in s. IsVisible evaluates to 1 if a is
visible to the IF in s. IsInRoom evaluates to 1
if the IF and a are in the same room. IsTarget-
InFront evaluates to 1 if the angular distance
towards a, i.e. the absolute angle between the
camera direction and the straight line from the
IF to a, is less than pi4 . VisualSalience approx-
imates the visual salience of Kelleher and van
Genabith (2004), a weighted count of the num-
ber of pixels on which a is rendered (pixels near
the center of the screen have higher weights).
Observational model The observational model
estimates for each object a the probability pobs(a|?)
that the IF will interact with a, given the IF?s recent
behavior ?(t) = (?1, . . . , ?n), where ?i is the state
of the world at time t? (i? 1) ? 500ms, and n ? 1
is the length of the observed behavior. pobs is con-
stantly re-evaluated for times t > t0 as the IF moves
around. pobs uses the following features:
? Linear distance features assume that the clos-
est button is also the one the IF understood. In-
Room returns the number of frames ?i in ? in
which the IF and a are in the same room. But-
tonDistance returns the distance between the IF
and a at ?1 divided by a constant such that the
result never exceeds 1. If a is neither in the
same room nor visible, the feature returns 1.
? Angular distance features analyze the direc-
tion in which the IF looks. TargetInFront re-
turns the angular distance towards a at ?1. An-
gleToTarget returns TargetInFront divided by
pi, or 1 if a is neither in the same room nor
visible. LinearRegAngleTo applies linear re-
gression to a list of observed angular distances
towards a over all frames ?i, and returns the
slope of the regression as a measure of varia-
tion. Negative values indicate that the IF turned
towards a, while positive values mean the op-
posite. If a is neither visible nor in the same
room as the IF at ?i, the angle is set to pi.
? Combined distance feature: a weighted sum
of linear and angular distance towards a, called
overall distance in Koller et al (2012).
? Salience features capture visual salience and
its change over time. Defining VSi as the result
of applying the psem feature VisualSalience to
?i and a, LastVisualSalience returns VSn. Lin-
earRegVisualSalience applies linear regression
to all values VSi and returns the slope as a mea-
sure of change in salience. VisualSalienceSum
returns (?ni=1VSi) ?VS1. This emphasizes the
contribution of VS1, which we assume is the
1356
most reliable predictor of the IF?s intentions.
? Binary features aim to detect concrete behav-
ior patterns: LastIsVisible applies the psem fea-
ture IsVisible to ?1, and IsClose evaluates to 1
if the IF is close enough and correctly oriented
to manipulate a in the GIVE environment at ?1.
4 Evaluation
Data We evaluated our model using data from the
GIVE-2 (Koller et al, 2010b) and the GIVE-2.5
Challenges (Striegnitz et al, 2011), obtained from
GIVE Organizers (2012). These datasets constitute
interaction corpora, in which the IF?s activities in
the virtual environment were recorded along with
the utterances automatically generated by the par-
ticipating NLG systems. The data consists of 1833
games for GIVE-2 and 687 games for GIVE-2.5.
To extract training data for our model from the
GIVE-2.5 data, we first identified moments in the
recorded data where the IF pressed a button. From
these, we discarded all instances from the tutorial
phase of the GIVE game and those that happened
within 200 ms after the previous utterance, as these
clearly didn?t happen in response to it. This yielded
6478 training instances for pobs, each consisting of
? at 1 second before the action, and the button a
which the IF pressed. We chose n = 4 for rep-
resenting ?, except to ensure that the features only
considered IF behavior that happened in response to
an utterance. We achieved this by reducing n for the
first few frames after each utterance, such that the
time of ?n was always after the time of the utter-
ance. Finally, we selected those instances which are
episodes in the sense of Section 2, i.e. those in which
the last utterance before the action contained an RE
r. This gave us 3414 training instances for psem,
each consisting of a, r, the time t0 of the utterance,
and the world state s at time t0.
We obtained test instances from the GIVE-2 data
in the same way. This yielded 5028 instances, each
representing an episode. We chose GIVE-2 for test-
ing because the mean episode length is higher (3.3s,
vs. 2.0s in GIVE-2.5), thus making the evaluation
more challenging. Feature selection was done using
the training data and a similar dataset from Koller et
al. (2012). Note that the test data and training data
are based on distinct sets of three virtual environ-
l
l l
l
0.0
0.2
0.4
0.6
Ac
cur
ac
y
l combined
semantic
observational
KGSC
random visible
(a)
l l
l l
?3 ?2 ?1 0
0.0
0.2
0.4
0.6
Time before action (sec)
Ac
cur
ac
y
l combined
semantic
observational
KGSC
random visible
(b)
Figure 2: Prediction accuracy for (a) all episodes, (b) un-
successful episodes as a function of time.
ments each, and were obtained with different NLG
systems and users. This demonstrates the ability of
our model to generalize to unseen environments.
An example video showing our models? predic-
tions on some training episodes can be found at
http://tinyurl.com/re-demo-v.
Prediction accuracy We first evaluated the abil-
ity of our model to predict the button to which
the IF resolved each RE. For each test instance
?r, s, ?, a?, we compare the object returned by
arg maxa p(a|r, s, ?(t)) to the one manipulated by
the IF. We call the proportion of correctly classified
instances the prediction accuracy.
Fig. 2a compares our model?s prediction accuracy
to that of several baselines. We plot prediction ac-
curacy as a function of the time at which the model
is queried for a prediction, by evaluating at 3s, 2s,
1s, and 0s before the button press. The graph is
based on the 2094 test instances with an episode
length of at least three seconds, to ensure that re-
sults for different prediction times are comparable.
As expected, prediction accuracy increases as we ap-
proach the time of the action. Furthermore, the com-
bined model outperforms both psem and pobs reli-
ably. This indicates that the component models pro-
1357
vide complementary useful information. Our model
also outperforms two more baselines: KGSC pre-
dicts that the IF will press the button with the min-
imal overall distance, which is the distance metric
used by the ?movement-based system? of Koller et
al. (2012); random visible selects a random button
from the ones that are currently visible to the IF.
The fact that this last baseline does not approach 1
at action time suggests that multiple buttons tend to
be visible when the IF presses one, confirming that
the prediction task is not trivial.
Correctly predicting the button that the IF will
press is especially useful, and challenging, in those
cases where the IF pressed a different button than
the one the NLG system intended. Fig. 2b shows
a closer look at the 125 unsuccessful episodes of at
least three seconds in the test data. These tend to
be hard instances, and thus as expected, prediction
accuracy drops for all systems. However, by inte-
grating semantic and observational information, the
combined model compensates better for this than all
other systems, with an accuracy of 37.6% against
31.2% for each individual component.
Feedback appropriateness Second, we evaluated
the ability of our model to predict whether the user
misunderstood the RE and requires feedback. For all
the above models, we assumed a simple feedback
mechanism which predicts that the user misunder-
stood the RE if p(a?) ? p(a?) > ? for some object
a? 6= a?, where ? is a confidence threshold; we used
? = 0.1 here. We can thus test on recorded data in
which no actual feedback can be given anymore.
We evaluated the models on the 848 test episodes
of at least 3s in which the NLG systems logged the
button they tried to refer to. The results are shown
in Fig. 3 in terms of F1 measure. Here precision is
the proportion of instances in which the IF pressed
the wrong button (i.e., where feedback should have
been given) among the instances where the model
actually suggested feedback. Recall is the propor-
tion of instances in which the model suggested feed-
back among the instances where the IF pressed the
wrong button. Again, the combined model outper-
forms its components and the baselines, primarily
due to increased recall. The difference is particu-
larly pronounced early on, which would be useful in
giving timely feedback in an actual real-time system.
l l
l l
?3 ?2 ?1 0
0.0
0.2
0.4
0.6
Time before action (s)
Fee
dba
ck 
F1
l combined
semantic
observational
KGSC
random visible
Figure 3: Feedback F1-measure as a function of time.
5 Conclusion and future work
We presented a statistical model for predicting how
a user will resolve the REs generated by an interac-
tive, situated NLG system. The model continuously
updates an initial estimate based on the meaning of
the RE with a model of the user?s behavior. It out-
performs its components and two baselines on pre-
diction and feedback accuracy.
Our model captures a real-time grounding process
on the part of the interactive system. We thus believe
that it provides a solid foundation for detecting mis-
understandings and generating suitable feedback in
an end-to-end dialogue system. We have presented
our model in terms of a situated dialogue setting,
where clues about what the hearer understood can be
observed directly. However, we believe that the fun-
damental mechanism should apply to other domains
as well. This would amount to finding observable
linguistic and non-linguistic clues of hearer under-
standing that can be used as features of pobs.
The immediate next step for future research is
to extend our model to an implemented end-to-end
situated NLG system for the GIVE Challenge, and
evaluate whether this actually improves task perfor-
mance. This requires, in particular, to compute the
RE that is optimal with respect to psem. We will fur-
thermore improve pobs by switching to a more tem-
porally dynamic probability model.
Acknowledgments. We thank Konstantina
Garoufi and the anonymous reviewers for their
insightful comments and suggestions. The first two
authors were supported by the SFB 632 ?Informa-
tion Structure?; Titov?s work was supported by the
Cluster of Excellence at Saarland University.
1358
References
Hendrik Buschmeier and Stefan Kopp. 2012. Adapting
language production to listener feedback behaviour.
In Proceedings of the Interdisciplinary Workshop on
Feedback Behaviors in Dialog.
Herbert C. Clark. 1996. Using Language. Cambridge
University Press.
Michael C. Frank and Noah D. Goodman. 2012. Predict-
ing pragmatic reasoning in language games. Science,
336(6084):998.
Konstantina Garoufi and Alexander Koller. 2011. Com-
bining symbolic and corpus-based approaches for the
generation of successful referring expressions. In Pro-
ceedings of the 13th European Workshop on Natural
Language Generation (ENLG).
GIVE Organizers. 2012. Give challenge web-
site: Corpora. http://give-challenge.org/
research/page.php?id=corpora.
Dave Golland, Percy Liang, and Dan Klein. 2010. A
game-theoretic approach to generating spatial descrip-
tions. In Proceedings of the 2010 Conference on
Empirical Methods in Natural Language Processing
(EMNLP).
Graeme Hirst, Susan McRoy, Peter Heeman, Philip Ed-
monds, and Diane Horton. 1994. Repairing conver-
sational misunderstandings and non-understandings.
Speech Communications, 15:213?229.
J. D. Kelleher and J. van Genabith. 2004. Visual salience
and reference resolution in simulated 3-D environ-
ments. Artificial Intelligence Review, 21(3).
Alexander Koller, Kristina Striegnitz, Donna Byron, Jus-
tine Cassell, Robert Dale, Johanna Moore, and Jon
Oberlander. 2010a. The First Challenge on Generat-
ing Instructions in Virtual Environments. In E. Krah-
mer and M. Theune, editors, Empirical Methods in
Natural Language Generation, number 5790 in LNCS,
pages 337?361. Springer.
Alexander Koller, Kristina Striegnitz, Andrew Gargett,
Donna Byron, Justine Cassell, Robert Dale, Johanna
Moore, and Jon Oberlander. 2010b. Report on the
Second NLG Challenge on Generating Instructions in
Virtual Environments (GIVE-2). In Proceedings of the
6th International Natural Language Generation Con-
ference (INLG).
Alexander Koller, Konstantina Garoufi, Maria Staudte,
and Matthew Crocker. 2012. Enhancing referential
success by tracking hearer gaze. In Proceedings of the
13th Annual SIGdial Meeting on Discourse and Dia-
logue (SIGDIAL), Seoul.
Yukiko Nakano, Kazuyoshi Murata, Mika Enomoto,
Yoshiko Arimoto, Yasuhiro Asa, and Hirohiko
Sagawa. 2007. Predicting evidence of understanding
by monitoring user?s task manipulation in multimodal
conversations. In Proceedings of the ACL 2007 Demo
and Poster Sessions.
Tim Paek and Eric Horvitz. 1999. Uncertainty, utility,
and misunderstanding: A decision-theoretic perspec-
tive on grounding in conversational systems. In AAAI
Fall Symposium on Psychological Models of Commu-
nication in Collaborative Systems.
Kristina Striegnitz, Alexandre Denis, Andrew Gargett,
Konstantina Garoufi, Alexander Koller, and Mariet
Theune. 2011. Report on the Second Second Chal-
lenge on Generating Instructions in Virtual Environ-
ments (GIVE-2.5). In Proceedings of the 13th Eu-
ropean Workshop on Natural Language Generation
(ENLG).
David Traum. 1994. A computational theory of ground-
ing in natural language conversation. Ph.D. thesis,
University of Rochester.
Adam Vogel, Christopher Potts, and Dan Jurafsky.
2013. Implicatures and nested beliefs in approximate
Decentralized-POMDPs. In Proceedings of ACL.
1359
Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 181?186,
Jeju, Republic of Korea, 8-14 July 2012. c?2012 Association for Computational Linguistics
Corpus-based interpretation of instructions in virtual environments
Luciana Benotti1 Mart??n Villalba1 Tessa Lau2 Julia?n Cerruti3
1 FaMAF, Medina Allende s/n, Universidad Nacional de Co?rdoba, Co?rdoba, Argentina
2IBM Research ? Almaden, 650 Harry Road, San Jose, CA 95120 USA
3IBM Argentina, Ing. Butty 275, C1001AFA, Buenos Aires, Argentina
{benotti,villalba}@famaf.unc.edu.ar, tessalau@us.ibm.com, jcerruti@ar.ibm.com
Abstract
Previous approaches to instruction interpre-
tation have required either extensive domain
adaptation or manually annotated corpora.
This paper presents a novel approach to in-
struction interpretation that leverages a large
amount of unannotated, easy-to-collect data
from humans interacting with a virtual world.
We compare several algorithms for automat-
ically segmenting and discretizing this data
into (utterance, reaction) pairs and training a
classifier to predict reactions given the next ut-
terance. Our empirical analysis shows that the
best algorithm achieves 70% accuracy on this
task, with no manual annotation required.
1 Introduction and motivation
Mapping instructions into automatically executable
actions would enable the creation of natural lan-
guage interfaces to many applications (Lau et al,
2009; Branavan et al, 2009; Orkin and Roy, 2009).
In this paper, we focus on the task of navigation and
manipulation of a virtual environment (Vogel and
Jurafsky, 2010; Chen and Mooney, 2011).
Current symbolic approaches to the problem are
brittle to the natural language variation present in in-
structions and require intensive rule authoring to be
fit for a new task (Dzikovska et al, 2008). Current
statistical approaches require extensive manual an-
notations of the corpora used for training (MacMa-
hon et al, 2006; Matuszek et al, 2010; Gorniak and
Roy, 2007; Rieser and Lemon, 2010). Manual anno-
tation and rule authoring by natural language engi-
neering experts are bottlenecks for developing con-
versational systems for new domains.
This paper proposes a fully automated approach
to interpreting natural language instructions to com-
plete a task in a virtual world based on unsupervised
recordings of human-human interactions perform-
ing that task in that virtual world. Given unanno-
tated corpora collected from humans following other
humans? instructions, our system automatically seg-
ments the corpus into labeled training data for a clas-
sification algorithm. Our interpretation algorithm is
based on the observation that similar instructions ut-
tered in similar contexts should lead to similar ac-
tions being taken in the virtual world. Given a previ-
ously unseen instruction, our system outputs actions
that can be directly executed in the virtual world,
based on what humans did when given similar in-
structions in the past.
2 Corpora situated in virtual worlds
Our environment consists of six virtual worlds de-
signed for the natural language generation shared
task known as the GIVE Challenge (Koller et al,
2010), where a pair of partners must collaborate to
solve a task in a 3D space (Figure 1). The ?instruc-
tion follower? (IF) can move around in the virtual
world, but has no knowledge of the task. The ?in-
struction giver? (IG) types instructions to the IF in
order to guide him to accomplish the task. Each cor-
pus contains the IF?s actions and position recorded
every 200 milliseconds, as well as the IG?s instruc-
tions with their timestamps.
We used two corpora for our experiments. The
Cm corpus (Gargett et al, 2010) contains instruc-
tions given by multiple people, consisting of 37
games spanning 2163 instructions over 8:17 hs. The
181
Figure 1: A screenshot of a virtual world. The world
consists of interconnecting hallways, rooms and objects
Cs corpus (Benotti and Denis, 2011), gathered using
a single IG, is composed of 63 games and 3417 in-
structions, and was recorded in a span of 6:09 hs. It
took less than 15 hours to collect the corpora through
the web and the subjects reported that the experi-
ment was fun.
While the environment is restricted, people de-
scribe the same route and the same objects in ex-
tremely different ways. Below are some examples of
instructions from our corpus all given for the same
route shown in Figure 1.
1) out
2) walk down the passage
3) nowgo [sic] to the pink room
4) back to the room with the plant
5) Go through the door on the left
6) go through opening with yellow wall paper
People describe routes using landmarks (4) or
specific actions (2). They may describe the same
object differently (5 vs 6). Instructions also differ
in their scope (3 vs 1). Thus, even ignoring spelling
and grammatical errors, navigation instructions con-
tain considerable variation which makes interpreting
them a challenging problem.
3 Learning from previous interpretations
Our algorithm consists of two phases: annotation
and interpretation. Annotation is performed only
once and consists of automatically associating each
IG instruction to an IF reaction. Interpretation is
performed every time the system receives an instruc-
tion and consists of predicting an appropriate reac-
tion given reactions observed in the corpus.
Our method is based on the assumption that a re-
action captures the semantics of the instruction that
caused it. Therefore, if two utterances result in the
same reaction, they are paraphrases of each other,
and similar utterances should generate the same re-
action. This approach enables us to predict reactions
for previously-unseen instructions.
3.1 Annotation phase
The key challenge in learning from massive amounts
of easily-collected data is to automatically annotate
an unannotated corpus. Our annotation method con-
sists of two parts: first, segmenting a low-level in-
teraction trace into utterances and corresponding re-
actions, and second, discretizing those reactions into
canonical action sequences.
Segmentation enables our algorithm to learn from
traces of IFs interacting directly with a virtual world.
Since the IF can move freely in the virtual world, his
actions are a stream of continuous behavior. Seg-
mentation divides these traces into reactions that fol-
low from each utterance of the IG. Consider the fol-
lowing example starting at the situation shown in
Figure 1:
IG(1): go through the yellow opening
IF(2): [walks out of the room]
IF(3): [turns left at the intersection]
IF(4): [enters the room with the sofa]
IG(5): stop
It is not clear whether the IF is doing ?3, 4? be-
cause he is reacting to 1 or because he is being
proactive. While one could manually annotate this
data to remove extraneous actions, our goal is to de-
velop automated solutions that enable learning from
massive amounts of data.
We decided to approach this problem by experi-
menting with two alternative formal definitions: 1) a
strict definition that considers the maximum reaction
according to the IF behavior, and 2) a loose defini-
tion based on the empirical observation that, in sit-
uated interaction, most instructions are constrained
by the current visually perceived affordances (Gib-
son, 1979; Stoia et al, 2006).
We formally define behavior segmentation (Bhv)
as follows. A reaction rk to an instruction uk begins
182
right after the instruction uk is uttered and ends right
before the next instruction uk+1 is uttered. In the
example, instruction 1 corresponds to ?2, 3, 4?. We
formally define visibility segmentation (Vis) as fol-
lows. A reaction rk to an instruction uk begins right
after the instruction uk is uttered and ends right be-
fore the next instruction uk+1 is uttered or right after
the IF leaves the area visible at 360? from where uk
was uttered. In the example, instruction 1?s reaction
would be limited to ?2? because the intersection is
not visible from where the instruction was uttered.
The Bhv and Vis methods define how to segment
an interaction trace into utterances and their corre-
sponding reactions. However, users frequently per-
form noisy behavior that is irrelevant to the goal of
the task. For example, after hearing an instruction,
an IF might go into the wrong room, realize the er-
ror, and leave the room. A reaction should not in-
clude such irrelevant actions. In addition, IFs may
accomplish the same goal using different behaviors:
two different IFs may interpret ?go to the pink room?
by following different paths to the same destination.
We would like to be able to generalize both reactions
into one canonical reaction.
As a result, our approach discretizes reactions into
higher-level action sequences with less noise and
less variation. Our discretization algorithm uses an
automated planner and a planning representation of
the task. This planning representation includes: (1)
the task goal, (2) the actions which can be taken in
the virtual world, and (3) the current state of the
virtual world. Using the planning representation,
the planner calculates an optimal path between the
starting and ending states of the reaction, eliminat-
ing all unnecessary actions. While we use the clas-
sical planner FF (Hoffmann, 2003), our technique
could also work with classical planning (Nau et al,
2004) or other techniques such as probabilistic plan-
ning (Bonet and Geffner, 2005). It is also not de-
pendent on a particular discretization of the world in
terms of actions.
Now we are ready to define canonical reaction ck
formally. Let Sk be the state of the virtual world
when instruction uk was uttered, Sk+1 be the state of
the world where the reaction ends (as defined by Bhv
or Vis segmentation), and D be the planning domain
representation of the virtual world. The canonical
reaction to uk is defined as the sequence of actions
returned by the planner with Sk as initial state, Sk+1
as goal state and D as planning domain.
3.2 Interpretation phase
The annotation phase results in a collection of (uk,
ck) pairs. The interpretation phase uses these pairs to
interpret new utterances in three steps. First, we fil-
ter the set of pairs into those whose reactions can be
directly executed from the current IF position. Sec-
ond, we group the filtered pairs according to their
reactions. Third, we select the group with utterances
most similar to the new utterance, and output that
group?s reaction. Figure 2 shows the output of the
first two steps: three groups of pairs whose reactions
can all be executed from the IF?s current position.
Figure 2: Utterance groups for this situation. Colored
arrows show the reaction associated with each group.
We treat the third step, selecting the most similar
group for a new utterance, as a classification prob-
lem. We compare three different classification meth-
ods. One method uses nearest-neighbor classifica-
tion with three different similarity metrics: Jaccard
and Overlap coefficients (both of which measure the
degree of overlap between two sets, differing only
in the normalization of the final value (Nikravesh et
al., 2005)), and Levenshtein Distance (a string met-
ric for measuring the amount of differences between
two sequences of words (Levenshtein, 1966)). Our
second classification method employs a strategy in
which we considered each group as a set of pos-
sible machine translations of our utterance, using
the BLEU measure (Papineni et al, 2002) to select
which group could be considered the best translation
of our utterance. Finally, we trained an SVM clas-
sifier (Cortes and Vapnik, 1995) using the unigrams
183
Corpus Cm Corpus Cs
Algorithm Bhv Vis Bhv Vis
Jaccard 47% 54% 54% 70%
Overlap 43% 53% 45% 60%
BLEU 44% 52% 54% 50%
SVM 33% 29% 45% 29%
Levenshtein 21% 20% 8% 17%
Table 1: Accuracy comparison between Cm and Cs for
Bhv and Vis segmentation
of each paraphrase and the position of the IF as fea-
tures, and setting their group as the output class us-
ing a libSVM wrapper (Chang and Lin, 2011).
When the system misinterprets an instruction we
use a similar approach to what people do in order
to overcome misunderstandings. If the system exe-
cutes an incorrect reaction, the IG can tell the system
to cancel its current interpretation and try again us-
ing a paraphrase, selecting a different reaction.
4 Evaluation
For the evaluation phase, we annotated both the Cm
and Cs corpora entirely, and then we split them in
an 80/20 proportion; the first 80% of data collected
in each virtual world was used for training, while
the remaining 20% was used for testing. For each
pair (uk, ck) in the testing set, we used our algorithm
to predict the reaction to the selected utterance, and
then compared this result against the automatically
annotated reaction. Table 1 shows the results.
Comparing the Bhv and Vis segmentation strate-
gies, Vis tends to obtain better results than Bhv. In
addition, accuracy on the Cs corpus was generally
higher than Cm. Given that Cs contained only one
IG, we believe this led to less variability in the in-
structions and less noise in the training data.
We evaluated the impact of user corrections by
simulating them using the existing corpus. In case
of a wrong response, the algorithm receives a second
utterance with the same reaction (a paraphrase of the
previous one). Then the new utterance is tested over
the same set of possible groups, except for the one
which was returned before. If the correct reaction
is not predicted after four tries, or there are no ut-
terances with the same reaction, the predictions are
registered as wrong. To measure the effects of user
corrections vs. without, we used a different evalu-
ation process for this algorithm: first, we split the
corpus in a 50/50 proportion, and then we moved
correctly predicted utterances from the testing set to-
wards training, until either there was nothing more
to learn or the training set reached 80% of the entire
corpus size.
As expected, user corrections significantly im-
prove accuracy, as shown in Figure 3. The worst
algorithm?s results improve linearly with each try,
while the best ones behave asymptotically, barely
improving after the second try. The best algorithm
reaches 92% with just one correction from the IG.
5 Discussion and future work
We presented an approach to instruction interpreta-
tion which learns from non-annotated logs of hu-
man behavior. Our empirical analysis shows that
our best algorithm achieves 70% accuracy on this
task, with no manual annotation required. When
corrections are added, accuracy goes up to 92%
for just one correction. We consider our results
promising since state of the art semi-unsupervised
approaches to instruction interpretation (Chen and
Mooney, 2011) reports a 55% accuracy on manually
segmented data.
We plan to compare our system?s performance
against human performance in comparable situa-
tions. Our informal observations of the GIVE cor-
pus indicate that humans often follow instructions
incorrectly, so our automated system?s performance
may be on par with human performance.
Although we have presented our approach in the
context of 3D virtual worlds, we believe our tech-
nique is also applicable to other domains such as the
web, video games, or Human Robot Interaction.
Figure 3: Accuracy values with corrections over Cs
184
References
Luciana Benotti and Alexandre Denis. 2011. CL system:
Giving instructions by corpus based selection. In Pro-
ceedings of the Generation Challenges Session at the
13th European Workshop on Natural Language Gener-
ation, pages 296?301, Nancy, France, September. As-
sociation for Computational Linguistics.
Blai Bonet and He?ctor Geffner. 2005. mGPT: a proba-
bilistic planner based on heuristic search. Journal of
Artificial Intelligence Research, 24:933?944.
S.R.K. Branavan, Harr Chen, Luke Zettlemoyer, and
Regina Barzilay. 2009. Reinforcement learning for
mapping instructions to actions. In Proceedings of
the Joint Conference of the 47th Annual Meeting of
the ACL and the 4th International Joint Conference
on Natural Language Processing of the AFNLP, pages
82?90, Suntec, Singapore, August. Association for
Computational Linguistics.
Chih-Chung Chang and Chih-Jen Lin. 2011. LIBSVM:
A library for support vector machines. ACM Transac-
tions on Intelligent Systems and Technology, 2:27:1?
27:27. Software available at http://www.csie.
ntu.edu.tw/?cjlin/libsvm.
David L. Chen and Raymond J. Mooney. 2011. Learn-
ing to interpret natural language navigation instruc-
tions from observations. In Proceedings of the 25th
AAAI Conference on Artificial Intelligence (AAAI-
2011), pages 859?865, August.
Corinna Cortes and Vladimir Vapnik. 1995. Support-
vector networks. Machine Learning, 20:273?297.
Myroslava O. Dzikovska, James F. Allen, and Mary D.
Swift. 2008. Linking semantic and knowledge repre-
sentations in a multi-domain dialogue system. Journal
of Logic and Computation, 18:405?430, June.
Andrew Gargett, Konstantina Garoufi, Alexander Koller,
and Kristina Striegnitz. 2010. The GIVE-2 corpus
of giving instructions in virtual environments. In Pro-
ceedings of the 7th Conference on International Lan-
guage Resources and Evaluation (LREC), Malta.
James J. Gibson. 1979. The Ecological Approach to Vi-
sual Perception, volume 40. Houghton Mifflin.
Peter Gorniak and Deb Roy. 2007. Situated language
understanding as filtering perceived affordances. Cog-
nitive Science, 31(2):197?231.
Jo?rg Hoffmann. 2003. The Metric-FF planning sys-
tem: Translating ?ignoring delete lists? to numeric
state variables. Journal of Artificial Intelligence Re-
search (JAIR), 20:291?341.
Alexander Koller, Kristina Striegnitz, Andrew Gargett,
Donna Byron, Justine Cassell, Robert Dale, Johanna
Moore, and Jon Oberlander. 2010. Report on the sec-
ond challenge on generating instructions in virtual en-
vironments (GIVE-2). In Proceedings of the 6th In-
ternational Natural Language Generation Conference
(INLG), Dublin.
Tessa Lau, Clemens Drews, and Jeffrey Nichols. 2009.
Interpreting written how-to instructions. In Proceed-
ings of the 21st International Joint Conference on Ar-
tificial Intelligence, pages 1433?1438, San Francisco,
CA, USA. Morgan Kaufmann Publishers Inc.
Vladimir I. Levenshtein. 1966. Binary codes capable of
correcting deletions, insertions, and reversals. Techni-
cal Report 8.
Matt MacMahon, Brian Stankiewicz, and Benjamin
Kuipers. 2006. Walk the talk: connecting language,
knowledge, and action in route instructions. In Pro-
ceedings of the 21st National Conference on Artifi-
cial Intelligence - Volume 2, pages 1475?1482. AAAI
Press.
Cynthia Matuszek, Dieter Fox, and Karl Koscher. 2010.
Following directions using statistical machine trans-
lation. In Proceedings of the 5th ACM/IEEE inter-
national conference on Human-robot interaction, HRI
?10, pages 251?258, New York, NY, USA. ACM.
Dana Nau, Malik Ghallab, and Paolo Traverso. 2004.
Automated Planning: Theory & Practice. Morgan
Kaufmann Publishers Inc., California, USA.
Masoud Nikravesh, Tomohiro Takagi, Masanori Tajima,
Akiyoshi Shinmura, Ryosuke Ohgaya, Koji Taniguchi,
Kazuyosi Kawahara, Kouta Fukano, and Akiko
Aizawa. 2005. Soft computing for perception-based
decision processing and analysis: Web-based BISC-
DSS. In Masoud Nikravesh, Lotfi Zadeh, and Janusz
Kacprzyk, editors, Soft Computing for Information
Processing and Analysis, volume 164 of Studies in
Fuzziness and Soft Computing, chapter 4, pages 93?
188. Springer Berlin / Heidelberg.
Jeff Orkin and Deb Roy. 2009. Automatic learning
and generation of social behavior from collective hu-
man gameplay. In Proceedings of The 8th Interna-
tional Conference on Autonomous Agents and Mul-
tiagent SystemsVolume 1, volume 1, pages 385?392.
International Foundation for Autonomous Agents and
Multiagent Systems, International Foundation for Au-
tonomous Agents and Multiagent Systems.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. BLEU: a method for automatic
evaluation of machine translation. In Proceedings of
the 40th Annual Meeting on Association for Computa-
tional Linguistics, ACL ?02, pages 311?318, Strouds-
burg, PA, USA. Association for Computational Lin-
guistics.
Verena Rieser and Oliver Lemon. 2010. Learning hu-
man multimodal dialogue strategies. Natural Lan-
guage Engineering, 16:3?23.
Laura Stoia, Donna K. Byron, Darla Magdalene Shock-
ley, and Eric Fosler-Lussier. 2006. Sentence planning
185
for realtime navigational instructions. In Proceedings
of the Human Language Technology Conference of the
NAACL, Companion Volume: Short Papers, NAACL-
Short ?06, pages 157?160, Stroudsburg, PA, USA. As-
sociation for Computational Linguistics.
Adam Vogel and Dan Jurafsky. 2010. Learning to fol-
low navigational directions. In Proceedings of the 48th
Annual Meeting of the Association for Computational
Linguistics, ACL ?10, pages 806?814, Stroudsburg,
PA, USA. Association for Computational Linguistics.
186
