Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1591?1601,
October 25-29, 2014, Doha, Qatar.
c
?2014 Association for Computational Linguistics
Knowledge Graph and Text Jointly Embedding
Zhen Wang
??
, Jianwen Zhang
?
, Jianlin Feng
?
, Zheng Chen
?
?
{v-zw,jiazhan,zhengc}@microsoft.com
?
{wangzh56@mail2,fengjlin@mail}.sysu.edu.cn
?
Microsoft Research
?
Sun Yat-sen University
Abstract
We examine the embedding approach to
reason new relational facts from a large-
scale knowledge graph and a text corpus.
We propose a novel method of jointly em-
bedding entities and words into the same
continuous vector space. The embedding
process attempts to preserve the relations
between entities in the knowledge graph
and the concurrences of words in the text
corpus. Entity names and Wikipedia an-
chors are utilized to align the embeddings
of entities and words in the same space.
Large scale experiments on Freebase
and a Wikipedia/NY Times corpus show
that jointly embedding brings promising
improvement in the accuracy of predicting
facts, compared to separately embedding
knowledge graphs and text. Particularly,
jointly embedding enables the prediction
of facts containing entities out of the
knowledge graph, which cannot be han-
dled by previous embedding methods. At
the same time, concerning the quality of
the word embeddings, experiments on the
analogical reasoning task show that jointly
embedding is comparable to or slightly
better than word2vec (Skip-Gram).
1 Introduction
Knowledge graphs such as Freebase (Bollacker et
al., 2008) and WordNet (Miller, 1995) have be-
come important resources for many AI & NLP ap-
plications such as Q & A. Generally, a knowledge
graph is a collection of relational facts that are of-
ten represented in the form of a triplet (head en-
tity, relation, tail entity), e.g., ?(Obama, Born-in,
Honolulu)?. An urgent issue for knowledge graph-
s is the coverage, e.g., even the largest knowledge
graph of Freebase is still far from complete.
Recently, targeting knowledge graph comple-
tion, a promising paradigm of embedding was pro-
posed, which is able to reason new facts only from
the knowledge graph (Bordes et al., 2011; Bor-
des et al., 2013; Socher et al., 2013; Wang et al.,
2014). Generally, in this series of methods, each
entity is represented as a k-dimensional vector and
each relation is characterized by an operation in
<
k
so that a candidate fact can be asserted by sim-
ple vector operations. The embeddings are usually
learnt by minimizing a global loss function of all
the entities and relations in the knowledge graph.
Thus, the vector of an entity may encode global
information from the entire graph, and hence scor-
ing a candidate fact by designed vector operations
plays a similar role to long range ?reasoning? in
the graph. However, since this requires the vectors
of both entities to score a candidate fact, this type
of methods can only complete missing facts for
which both entities exist in the knowledge graph.
However, a missing fact often contains entities out
of the knowledge graph (called out-of-kb for short
in this paper), e.g., one or both entities are phras-
es appearing in web text but not included in the
knowledge graph yet. How to deal with these fact-
s is a significant obstacle to widely applying the
embedding paradigm.
In addition to knowledge embedding, anoth-
er interesting approach is the word embedding
method word2vec (Mikolov et al., 2013b), which
shows that learning word embeddings from an
unlabeled text corpus can make the vectors con-
necting the pairs of words of some certain
relation almost parallel, e.g., vec(?China?) ?
vec(?Beijing?) ? vec(?Japan?) ? vec(?Tokyo?).
However, it does not know the exact relation be-
tween the pairs. Thus, it cannot be directly applied
to complete knowledge graphs.
The capabilities and limitations of knowledge
embedding and word embedding have inspired us
to design a mechanism to mosaic the knowledge
1591
graph and the ?word graph? together in a vector
space so that we can score any candidate relation-
al facts between entities and words
1
. Therefore,
we propose a novel method to jointly embed enti-
ties and words into the same vector space. In our
solution, we define a coherent probabilistic model
for both knowledge and text, which is composed
of three components: the knowledge model, text
model, and alignment model. Both the knowledge
model and text model use the same core transla-
tion assumption for the fact modeling: a candidate
fact (h, r, t) is scored based on ?h + r ? t?. The
only difference is, in the knowledge model the re-
lation r is explicitly supervised and the goal is to
fit the fact triplets, while in the text model we as-
sume any pair of words h and t that concur in some
text windows are of certain relation r but r is a hid-
den variable, and the goal is to fit the concurring
pairs of words. The alignment model guarantees
the embeddings of entities and words/phrases lie
in the same space and impels the two models to en-
hance each other. Two mechanisms of alignment
are introduced in this paper: utilizing names of en-
tities and utilizing Wikipedia anchors. This way of
jointly embedding knowledge and text can be con-
sidered to be semi-supervised knowledge embed-
ding: the knowledge graph provides explicit su-
pervision of facts while the text corpus provides
much more ?relation-unlabeled? pairs of words.
We conduct extensive large scale experiments
on Freebase and Wikipedia corpus, which show
jointly embedding brings promising improve-
ments to the accuracy of predicting facts, com-
pared to separately embedding the knowledge
graph and the text corpus, respectively. Particu-
larly, jointly embedding enables the prediction of
a candidate fact with out-of-kb entities, which can
not be handled by any existing embedding meth-
ods. We also use embeddings to provide a prior
score to help fact extraction on the benchmark da-
ta set of Freebase+NYTimes and also observe very
promising improvements. Meanwhile, concerning
the quality of word embeddings, experiments on
the analogical reasoning task show that jointly em-
bedding is comparable to or slightly better than
word2vec (Skip-Gram).
1
We do not distinguish between ?words? and ?phrases?,
i.e., ?words? means ?words/phrases?.
2 Related Work
Knowledge Embedding. A knowledge graph is
embedded into a low-dimensional continuous vec-
tor space while certain properties of it are pre-
served (Bordes et al., 2011; Bordes et al., 2013;
Socher et al., 2013; Chang et al., 2013; Wang et
al., 2014). Generally, each entity is represented
as a point in that space while each relation is inter-
preted as an operation over entity embeddings. For
instance, TransE (Bordes et al., 2013) interprets a
relation as a translation from the head entity to the
tail entity. The embedding representations are usu-
ally learnt by minimizing a global loss function in-
volving all entities and relations so that each entity
embedding encodes both local and global connec-
tivity patterns of the original graph. Thus, we can
reason new facts from learnt embeddings.
Word Embedding. Generally, word embeddings
are learned from a given text corpus without su-
pervision by predicting the context of each word
or predicting the current word given its contex-
t (Bengio et al., 2003; Collobert et al., 2011;
Mikolov et al., 2013a; Mikolov et al., 2013b). Al-
though relations between words are not explicitly
modeled, continuous bag-of-words (CBOW) and
Skip-gram (Mikolov et al., 2013a; Mikolov et al.,
2013b) learn word embeddings capturing many
syntactic and semantic relations between words
where a relation is also represented as the trans-
lation between word embeddings.
Relational Facts Extraction. Another pivotal
channel for knowledge graph completion is ex-
tracting relational facts from external sources such
as free text (Mintz et al., 2009; Riedel et al., 2010;
Hoffmann et al., 2011; Surdeanu et al., 2012;
Zhang et al., 2013; Fan et al., 2014). This se-
ries of methods focuses on identifying local text
patterns that express a certain relation and making
predictions based on them. However, they have
not fully utilized the evidences from a knowledge
graph, e.g., knowledge embedding is able to rea-
son new facts without any external sources. Ac-
tually, knowledge embedding is very complemen-
tary to traditional extraction methods, which was
first confirmed by (Weston et al., 2013). To es-
timate the plausibility of a candidate fact, they
added scores from embeddings to scores from an
extractor, which showed significant improvemen-
t. However, as pointed out in the introduction,
their knowledge embedding method cannot pre-
dict facts involving out-of-kb entities.
1592
3 Jointly Embedding Knowledge and
Text
We will first describe the notation used in this pa-
per. A knowledge graph ? is a set of triplets in
the form (h, r, t), h, t ? E and r ? R where E is
the entity vocabulary and R is a collection of pre-
defined relations. We use bold letters h, r, t to de-
note the corresponding embedding representation-
s of h, r, t. A text corpus is a sequence of words
drawn from the word vocabulary V . Note that we
perform some preprocessing to detect phrases in
the text and the vocabulary here already includes
the phrases. For simplicity?s sake, without spe-
cial explanation, when we say ?word(s)?, it means
?word(s)/phrase(s)?. Since we consider triplets in-
volving not only entities but also words, we denote
I = E ?V . Additionally, we denote anchors byA.
3.1 Modeling
Our model is composed of three components:
the knowledge model, text model, and alignment
model.
Before defining the component models, we first
define the element model for a fact triplet. In-
spired by TransE, we also represent a relation r
as a vector r ? <
k
and score a fact triplet (h, r, t)
by z(h, r, t) = b ?
1
2
?h + r ? t?
2
where b is a
constant for bias designated for adjusting the scale
for better numerical stability and b = 7 is a sensi-
ble choice. z(h, r, t) is expected to be large if the
triplet is true. Based on the same element model of
fact, we define the component models as follows.
3.1.1 Knowledge Model
We define the following conditional probability of
a fact (h, r, t) in a knowledge graph:
Pr(h|r, t) =
exp{z(h, r, t)}
?
?
h?I
exp{z(
?
h, r, t)}
(1)
and we have named our model pTransE (Proba-
bilistic TransE) to show respect to TransE. We also
define Pr(r|h, t) and Pr(t|h, r) in the same way
by choosing corresponding normalization terms
respectively. We define the likelihood of observ-
ing a fact triplet as:
L
f
(h, r, t) = log Pr(h|r, t)+ log Pr(t|h, r)
+ log Pr(r|h, t)
(2)
The goal of the knowledge model is to maximize
the conditional likelihoods of existing fact triplets
in the knowledge graph:
L
K
=
?
(h,r,t)??
L
f
(h, r, t) (3)
3.1.2 Text Model
We propose the following key assumption for
modeling text, which connects word embedding
and knowledge embedding: there are relations
between words although we do not know what
they are.
Relational Concurrence Assumption. If two
words w and v concur in some context, e.g., a win-
dow of text, then there is a relation r
wv
between
the two words. That is, we can state the triplet of
(w, r
wv
, v) is a fact.
We define the conditional probability
Pr(w|r
wv
, v) following the same formulation
of Eq.(1) to model why two words concur in some
context. In contrast to knowledge embedding,
here r
wv
is a hidden variable rather than explicitly
supervised.
The challenge is to deal with the hidden variable
r
wv
. Obviously, without any more assumption-
s, the number of distinct r
wv
is around |V| ?
?
N ,
where
?
N is the average number of unique word-
s concurred with each word. This number is ex-
tremely large. Thus it is almost impossible to esti-
mate a vector for each r
wv
. And the problem is ac-
tually ill-posed. We need to constrain the freedom
degree of r
wv
. Here we use auxiliary variables to
reduce the size of variables we need to estimate:
let w
?
= w + r
wv
, then
z(w, r
wv
,v) , z(w
?
,v) = b?
1
2
?w
?
?v?
2
(4)
and
Pr(w|r
wv
, v) , Pr(w|v) =
exp{z(w
?
,v)}
?
w??V
exp{z(w?
?
,v)}
(5)
In this way we need to estimate vectors w and w
?
for each word w, and a total of 2? |V| vectors.
The goal of the text model is to maximize the
likelihood of the concurrences of pairs of words in
text windows:
L
T
=
?
(w,v)?C
n
wv
log Pr(w|v). (6)
In the above equation, C is all the distinct pairs of
words concurring in text windows of a fixed size.
And n
wv
is the number of concurrences of the pair
(w, v). Interestingly, as explained in Sec.(3.3),
this text model is almost equivalent to Skip-Gram.
1593
3.1.3 Alignment Model
If we only have the knowledge model and text
model, the entity embeddings and word embed-
dings will be in different spaces and any comput-
ing between them is meaningless. Thus we need
mechanisms to align the two spaces into the same
one. We propose two mechanisms in this paper: u-
tilizing Wikipedia anchors, and utilizing names of
entities.
Alignment by Wikipedia Anchors. This mod-
el is based on the connection between Wikipedia
and Freebase: for most Wikipedia (English) pages,
there is an unique corresponding entity in Free-
base. As a result, for most of the anchors in
Wikipedia, each of which refers to a Wikipedi-
a page, we know that the surface phrase v of an
anchor actually refers to the Freebase entity e
v
.
Thus, we define a likelihood for this part of an-
chors as Eq.(6) but replace the word pair (w, v)
with the word-entity pair (w, e
v
), i.e., using the
corresponding entity e
v
rather than the surface
word v in Eq.(5):
L
AA
=
?
(w,v)?C,v?A
log Pr(w|e
v
) (7)
where A denotes the set of anchors.
In addition to Wikipedia anchors, we can also
use an entity linking system with satisfactory per-
formance to produce the pseudo anchors.
Alignment by Names of Entities. Another way
is to use the names of entities. For a fact triplet
(h, r, t) ? ?, if h has a namew
h
andw
h
? V , then
we will generate a new triplet of (w
h
, r, t) and add
it to the graph. Similarly, we also add (h, r, w
t
)
and (w
h
, r, w
t
) into the graph if the names exist
and belong to the word vocabulary. We call this
sub-graph containing names the name graph and
define a likelihood for the name graph by observ-
ing its triplets:
L
AN
=
?
(h,r,t)??
I
[w
h
?V ?w
t
?V]
?L
f
(w
h
, r, w
t
)+
I
[w
h
?V]
? L
f
(w
h
, r, t) + I
[w
t
?V]
? L
f
(h, r, w
t
)
(8)
Both alignment models have advantages and
disadvantages. Alignment by names of entities is
straightforward and does not rely on additional da-
ta sources. The number of triplets generated by the
names is also large and can significantly change
the results. However, this model is risky. On the
one hand, the name of an entity is ambiguous be-
cause different entities sometimes have the same
name so that the name graph may contaminate the
knowledge embedding. On the other hand, an en-
tity often has several different aliases when men-
tioned in the text but we do not have the complete
set, which will break the semantic balance of word
embedding. For example, for the entity Apple In-
c., suppose we only have the standard name ?Ap-
ple Inc.? but do not have the alias ?apple?. And for
the entity Apple that is fruit, suppose we have the
name ?apple? included in the name graph. Then
the vector of the word ?apple? will be biased to
the concept of fruit rather than the company. But if
no name graph intervenes, the unsupervised word
embedding is able to learn a vector that is closer to
the concept of the company due to the polarities.
Alignment by anchors relies on the additional data
source of Wikipedia anchors. Moreover, the num-
ber of matched Wikipedia anchors (?40M) is rela-
tively small compared to the total number of word
pairs (?2.0B in Wikipedia) and hence the contri-
bution is limited. However, the advantage is that
the quality of the data is very high and there are no
ambiguity/completeness issues.
Considering the above three component models
together, the likelihood we maximize is:
L = L
K
+ L
T
+ L
A
(9)
where L
A
could be L
AA
or L
AN
or L
AA
+ L
AN
.
3.2 Training
3.2.1 Approximation to the Normalizers
It is difficult to directly compute the normalizers in
Pr(h|r, t) (or Pr(t|h, r), Pr(r|h, t)) and Pr(w|v)
as the normalizers sum over |I| or |V| terms where
both |I| and |V| reach tens of millions. To pre-
vent having to exactly calculate the normalizer-
s, we use negative sampling (NEG) (Mikolov et
al., 2013b) to transform the original objective, i.e.,
Eq.(9) to a simple objective of the binary classifi-
cation problem?differentiating the observed data
from noise.
First, we define: (i) the probability of a given
triplet (h, r, t) to be true (D = 1); and (ii) the
probability of a given word pair (w, v) to co-occur
(D = 1):
Pr(D = 1|h, r, t) = ?(z(h, r, t)) (10)
Pr(D = 1|w, v) = ?(z(w
?
,v)) (11)
where ?(x) =
1
1+exp{?x}
and D ? {0, 1}.
1594
Instead of maximizing log Pr(h|r, t) in Eq.(2),
we maximize:
log Pr(1|h, r, t)
+
c
?
i=1
E
?
h
i
?Pr
neg
(
?
h
i
)
[Pr(0|
?
h
i
, r, t)]
(12)
where c is the number of negative examples to
be discriminated for each positive example. NEG
guarantees that maximizing Eq.(12) can approxi-
mately maximize log Pr(h|r, t). Thus, we also re-
place log Pr(r|h, t), log Pr(t|r, h) in Eq.(2), and
log Pr(w|v) in Eq.(6) in the same way by choosing
corresponding negative distributions respectively.
As a result, the objectives of both the knowledge
model L
K
(Eq.(3)) and text model L
T
(Eq.(6)) are
free from cumbersome normalizers.
3.2.2 Optimization
We use stochastic gradient descent (SGD) to max-
imize the simplified objectives.
Knowledge model. ? is randomly tra-
versed multiple times. When a positive example
(h, r, t) ? ? is considered, to maximize (12), we
construct c negative triplets by sampling elements
from an uniform distribution over I and replacing
the head of (h, r, t). The transformed objective of
log Pr(r|h, t) is maximized in the same manner,
but by sampling from a uniform distribution over
R and corrupting the relation of (h, r, t). After a
mini-batch, computed gradients are used to update
the involved embeddings.
Text model. The text corpus is traversed one or
more times. When current word v and a context
word w are considered, c words are sampled from
the unigram distribution raised to the 3/4rd power
and regarded as negative examples (w?, v) that are
never concurrent. Then we compute and update
the related gradients.
Alignment model. L
AA
and L
AN
are absorbed
by the text model and knowledge model respec-
tively, since anchors are considered to predict con-
text given an entity and the name graph are homo-
geneous to the original knowledge graph.
Joint. All three component objectives are si-
multaneously optimized. To deal with large-scale
data, we implement a multi-thread version with
shared memory. Each thread is in charge of a por-
tion of the data (either knowledge or text corpus),
and traverses through them, calculates gradients
and commits the update to the global model and
is stored in a block of shared memory. For the
Table 1: Data: triplets used in our experiments.
#R #E #Triplet (Train/Valid/Test)
4,490 43,793,608 123,062,855 40,528,963 40,528,963
sake of efficiency, no lock is used on the shared
memory.
3.3 Connections to Related Models
TransE. (Bordes et al., 2013) proposed to mod-
el a relation r as a translation vector r ? <
k
which is expected to connect h and t with low
error if (h, r, t) ? ?. We also follow it. How-
ever, TransE uses a margin based ranking loss
{?h+r?t?
2
+???
?
h+r?
?
t?
2
}
+
. It is not a proba-
bilistic model and hence it needs to restrict the nor-
m of either entity embedding and/or relation em-
bedding. Bordes et al. (2013) intuitively addresses
this problem by simply normalizing the entity em-
beddings to the unit sphere before computing gra-
dients at each iteration. We define pTransE as a
probabilistic model, which doesn?t need addition-
al constraints on the norms of embeddings of en-
tities/words/relations, and thus eliminates the nor-
malization operations.
Skip-gram. (Mikolov et al., 2013a; Mikolov et al.,
2013b) defines the probability of the concurrence
of two words in a window as:
Pr(w|v) =
exp{w
?T
v}
?
w??V
exp{w?
?T
v}
(13)
which is based on the inner product, while our text
model (Eqs. (4), (5)) is based on distance. If we
constrain ?w? = 1 for each w, then w
?T
v =
1 ?
1
2
?w
?
? v?
2
. It is easy to see that our text
model is equivalent to Skip-gram in this case. Our
distance-based text model is directly derived from
the triplet fact model, which clearly explains why
it is able to make the pairs of entities of a certain
relation parallel in the vector space.
4 Experiments
We empirically evaluate and compare related mod-
els with regards to three tasks: triplet classifica-
tion (Socher et al., 2013), improving relation ex-
traction (Weston et al., 2013), and the analogi-
cal reasoning task (Mikolov et al., 2013a). The
related models include: for knowledge embed-
ding alone, TransE (Bordes et al., 2013), pTransE
(proposed in this paper); for word embedding
alone, Skip-gram (Mikolov et al., 2013b); for both
1595
Table 2: Data: the number of e ? e, w ? e, e ?
w, w ? w triplets/analogies where w represents
the out-of-kb entity, which is regarded as word and
replaced by its corresponding entity name.
Type
#Triplet (Valid/Test)
#Analogy
e? e
12,305,200 12,305,200
71,441
w ? e
3,655,164 3,654,404
70,878
e? w
3,643,914 3,642,978
70,442
w ? w
460,762 451,381
40,980
knowledge and text, we use ?respectively? to re-
fer to the embeddings learnt by TransE/pTransE
and Skip-gram, respectively, ?jointly? to refer to
our jointly embedding method, in which ?anchor?
and ?name? refer to ?Alignment by Wikipedia An-
chors? and ?Alignment by Names of Entities?, re-
spectively.
4.1 Data
To learn the embedding representations of entities
and words, we use a knowledge graph, a text cor-
pus, and some connections between them.
Knowledge. We adopt Freebase as our knowl-
edge graph. First, we remove the user profiles,
version control, and meta data, leaving 52,124,755
entities, 4,490 relations, and 204,120,782 triplet-
s. We call this graph main facts. Then we held
out 8,331,147 entities from main facts and regard
them as out-of-kb entities. Under such a setting,
from main facts, we held out all the triplets in-
volving out-of-kb entities, as well as 24,610,400
triplets that don?t contain out-of-kb entities. Held-
out triplets are used for validation and testing; the
remaining triplets are used for training. See Table
1 for the statistics.
We regard out-of-kb entities as words/phrases
and thus divide the held-out triplets into four type-
s: no out-of-kb entity (e?e), the head is out-of-kb
entity but the tail is not (w ? e), the tail is out-of-
kb entity but the head is not (e? w), and both the
head and tail are out-of-kb entities (w ? w). Then
we replace the out-of-kb entities among the held-
out triplets by their corresponding entity names.
The mapping from a Freebase entity identifier to
its name is done through the Freebase predicate?
?/type/object/name?. Since some entity names
are not present in our vocabulary V , we remove
triplets involving these names (see Table 2). In
such a way, besides the missing edges between ex-
isting entities, the related models can be evaluated
on triplets involving words/phrases as their head
Table 3: Triplet Classification: comparison be-
tween TransE and pTransE over e? e triplets.
Method Accuracy (%) Area under PR curve
TransE 93.1 0.86
pTransE 93.4 0.97
and/or tail.
Text. We adopt the Wikipedia (English) cor-
pus. After removing pages designated for nav-
igation, disambiguation, or discussion purpos-
es, there are 3,469,024 articles left. We ap-
ply sentence segmentation, tokenization, Part-of-
Speech (POS) tagging, and named entity recog-
nition (NER) to these articles using Apache
OpenNLP package
2
. Then we conduct some sim-
ple chunking to acquire phrases: if several con-
secutive tokens are identically tagged as ?Loca-
tion?/?Person?/?Organization?, or covered by an
anchor, we combine them as a chunk. After the
preprocessing, our text corpus contain 73,675,188
sentences consisting of 1,522,291,723 chunks. A-
mong them, there are around 20 millions distinct
chunks, including words and phrases. We filter out
punctuation and rare words/phrases that occur less
than three times in the text corpus, reducing |V| to
5,240,003.
Alignment. One of our alignment models need-
s Wikipedia anchors. There are around 45 million
such anchors in our text corpus and 41,970,548 of
them refer to entities in E . Another mechanism u-
tilizes the name graph constructed through names
of entities. Specifically, for each training triplet
(h, r, t), suppose h and t have entity names w
h
and w
t
, respectively and w
h
, w
t
? V , the train-
ing triplet contributes (w
h
, r, w
t
), (w
h
, r, t), and
(h, r, w
t
) to the name graph. There are 81,753,310
triplets in our name graphs. Note that there is no
overlapping between the name graph and held-out
triplets of e? w, w ? e, and w ? w types.
4.2 Triplet Classification
This task judges whether a triplet (h, r, t) is true
or false, i.e., binary classification of a triplet.
Evaluation protocol. Following the same pro-
tocol in NTN (Socher et al., 2013), for each true
triplet, we construct a false triplet for it by ran-
domly sampling an element from I to corrupt its
head or tail. Since |E| is significantly larger than
|V| in our data, sampling from a uniform distri-
2
https://opennlp.apache.org
1596
Table 4: Triplet classification: accuracy (%) over various types of triplets.
Type e? e w ? e e? w w?w all
respectively 93.4 52.1 51.4 71.0 77.5
jointly (anchor) 94.4 67.0 66.7 79.8 81.9
jointly (name) 94.5 80.5 80.0 89.0 87.7
jointly (anchor+name) 95.0 82.0 81.5 90.0 88.8
bution over I will let triplets involving no word
dominate the false triplets. To avoid that, when we
corrupt the head of (h, r, t), if h ? E , h
?
is sam-
pled from E while if h ? V , h
?
is sampled from V .
The same rule is applied when we corrupt the tail
of (h, r, t). In this way, for each of the four types
of triplets, we ensure the number of true triplets is
equal to that of false ones.
To classify a triplet (h, r, t), we first use the con-
sidered methods to score it. TransE scores it by
?|h + r ? t|. Our models score it by Pr(D =
1|h, r, t) (see Eq.(10)). Then the considered meth-
ods label a triplet (h, r, t) as true if its score is
larger than the relation-specific threshold of r, as
false otherwise. The relation-specific thresholds
are chosen to maximize the classification accura-
cy over the validation set.
We report the classification accuracy. Addition-
ally, we rank all the testing triplets by their scores
in descending order. Then we draw a precision-
recall (PR) curve based on this ranking and report
the area under the PR curve.
Implementation. We implement TransE (Bor-
des et al., 2013), Skip-gram (Mikolov et al.,
2013a), and our models.
First, we train TransE and pTransE over our
training triplets with embedding dimension k
in {50, 100, 150}. Adhering to (Bordes et al.,
2013), we use the fixed learning rate ? in
{0.005, 0.01, 0.05} for TransE during its 300 e-
pochs. For pTransE, we use the number of neg-
ative examples per positive example c among
{5, 10}, the learning rate ? among {0.01, 0.025}
where ? decreases along with its 40 epochs. The
optimal configurations of TransE are: k = 100,
? = 0.01. The optimal configurations of pTransE
are: k = 100, c = 10, and ? = 0.025.
Then we train Skip-gram with the embedding
dimension k in {50, 100, 150}, the max skip-range
s in {5, 10}, the number of negative examples per
positive example c in {5, 10}, and learning rate
? = 0.025 linearly decreasing along with the 6
epochs over our text corpus. Popular words whose
frequencies are larger than 10
?5
are subsampled
according to the trick proposed in (Mikolov et al.,
2013b). The optimal configurations of Skip-gram
are: k = 150, s = 5, and c = 10.
Combining entity embeddings and word em-
beddings learnt by pTransE and Skip-gram respec-
tively, ?respectively? model can score all types of
held-out triplets. For our jointly embedding mod-
el, we consider various alignment mechanisms and
use equal numbers of threads for knowledge mod-
el and text model. The best configurations of
?jointly? model are: k = 150, s = 5, c = 10, and
? = 0.025 which linearly decreases along with the
6 epochs of traversing text corpus.
Results. We first illustrate the comparison be-
tween TransE and pTransE over e? e type triplet-
s in Table 3. Observing the scores assigned to
true triplets by TransE, we notice that triplets of
popular relations generally have larger scores than
those of rare relations. In contrast, pTransE, as
a probabilistic model, assigns comparable scores
to true triplets of both popular and rare relations.
When we use a threshold to separate true triplets
from false triplets of the same relation, there is no
obvious difference between the two models. How-
ever, when all triplets are ranked together, assign-
ing scores in a more uniform scale is definitely an
advantage. Thus, the contradiction stems from the
different training strategies of the two models and
the consideration of relation-specific thresholds.
Classification accuracies over various types of
held-out triplets are presented in Table 4. The
?jointly? model outperforms the ?respectively?
model no matter which alignment mechanism(s)
are used. Actually, for the ?respectively? model,
there is no interaction between entity embeddings
and word embeddings during training and thus it-
s predictions, over triplets that involve both enti-
ty and word at the same time, are not much bet-
ter than random guessing. It is also a natural re-
sult that alignment by names is more effective than
alignment by anchors. The number of anchors is
much smaller than the number of overall chunks
in our text corpus. In addition, the number of en-
tities mentioned by anchors is very limited com-
1597
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.75
0.80
0.85
0.90
0.95
1.00
1.05
p
r
e
c
i
s
i
o
n
Mintz (0.864752658197)
Mintz+Jointly (0.891043673778)
Mintz+Knowledge (0.917260610051)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
p
r
e
c
i
s
i
o
n
Mintz (0.512956668019)
Mintz+Jointly (0.636313453126)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.4
0.5
0.6
0.7
0.8
0.9
1.0
p
r
e
c
i
s
i
o
n
Mintz (0.662641417434)
Mintz+Jointly (0.695062505333)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.00
0.05
0.10
0.15
0.20
0.25
0.30
0.35
p
r
e
c
i
s
i
o
n
Mintz (0.0914506877334)
Mintz+Jointly (0.0993184342972)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
p
r
e
c
i
s
i
o
n
Mintz (0.363969399646)
Mintz+Jointly (0.480909766665)
Mintz+Knowledge (0.418875519101)
Figure 1: Improving Relation Extraction: PR curves of Mintz alone or combined with knowledge
(pTransE) / jointly model over (a) e? e, (b) w ? e, (c) e? w, (d) w ? w, and (e) all triplets.
pared with |E|. Thus, interactions brought in by
anchors are not as significant as that of the name
graph.
4.3 Improving Relation Extraction
It has been shown that embedding models are very
complementary to extractors (Weston et al., 2013).
However, some entities detected from text are out-
of-kb entities. In such a case, triplets involving
these entities cannot be handled by any existing
knowledge embedding method, but our jointly em-
bedding model can score them. As our model can
cover more candidate triplets provided by extrac-
tors, it is expected to provide more significant im-
provements to extractors than any other embed-
ding model. We confirm this point as follow.
Evaluation protocol. For relation extraction,
we use a public dataset?NYT+FB (Riedel et al.,
2010)
3
, which distantly labels the NYT corpus by
Freebase facts. We consider (Mintz et al., 2009)
and Sm2r (Weston et al., 2013) as our extractors
to provide candidate triplets as well as their plau-
sibilities estimated according to text features.
For embedding, we first held out triplets from
our training set that appear in the test set of
NYT+FB. Then we train TransE, pTransE and the
?jointly? model on the remaining training triplets
as well as on our text corpus. Then we use these
models to score each candidate triplet in the same
3
http://iesl.cs.umass.edu/riedel/ecml/
way as the previous triplet classification experi-
ment.
For combination, we first divide each candidate
triplet into one of these categories: e ? e, e ? w,
w ? e, w ? w, and ?out-of-vocabulary?. Be-
cause there is no embedding model that can score
triplets involving out-of-vocabulary word/phrase,
we just ignore these triplets.Please note that, for
our jointly embedding model, there are no ?out-
of-vocabulary? triplets if we include the NYT cor-
pus for training. We use the embedding models
to score candidate triplets and combine the scores
given by the embedding model with scores given
by the extractors. For each type e?e, e?w, w?e,
w?w and their union (i.e. all), we rank the candi-
date triplets by their revisited scores and draw PR
curve to observe which embedding method pro-
vides the most significant improvements to the ex-
tractors.
Implementation. For (Mintz et al., 2009), we
use the implementation in (Surdeanu et al., 2012)
4
.
We implement Sm2r by ourselves with the best hy-
perparameters introduced in (Weston et al., 2013).
For TransE, pTransE, and the ?jointly? model, we
use the same implementations, scoring schemes,
and optimal configurations as the triplet classifica-
tion experiment.
To combine extractors with embedding mod-
4
http://nlp.stanford.edu/software/
mimlre.shtml
1598
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.55
0.60
0.65
0.70
0.75
0.80
0.85
0.90
0.95
1.00
p
r
e
c
i
s
i
o
n
Sm2r (0.773014296476)
Sm2r+Jointly (0.858251870864)
Sm2r+Knowledge (0.858251870864)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.86
0.88
0.90
0.92
0.94
0.96
0.98
1.00
p
r
e
c
i
s
i
o
n
Sm2r (0.908752270146)
Sm2r+Jointly (0.966914103913)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.82
0.84
0.86
0.88
0.90
0.92
0.94
0.96
0.98
1.00
p
r
e
c
i
s
i
o
n
Sm2r (0.875810724647)
Sm2r+Jointly (0.966676169402)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
p
r
e
c
i
s
i
o
n
Sm2r (0.431460754321)
Sm2r+Jointly (0.536200901997)
0.0 0.2 0.4 0.6 0.8 1.0
Recall
0.50
0.55
0.60
0.65
0.70
0.75
0.80
0.85
0.90
p
r
e
c
i
s
i
o
n
Sm2r (0.67446140565)
Sm2r+Jointly (0.802071230237)
Sm2r+Knowledge (0.697899016348)
Figure 2: Improving Relation Extraction: PR curves of Sm2r alone or combined with knowledge
(TransE) / jointly model over (a) e? e, (b) w ? e, (c) e? w, (d) w ? w, and (e) all triplets.
els, we consider two schemes. Since Mintz s-
cores candidate triplets in a probabilistic man-
ner, we linearly combine its scores with the s-
cores given by pTransE or the ?jointly? mod-
el: ? Pr
Mintz
+(1 ? ?) Pr
pTransE/Jointly
where ? is
enumerated from 0 to 1 with 0.025 as a search
step. On the other hand, neither Sm2r nor TransE
is a probabilistic model. Thus, we combine
Sm2r with TransE or the ?jointly? model ac-
cording to the scheme proposed in (Weston et
al., 2013) where for each candidate (h, r, t), if
?
r
?
6=r
?(Score(h, r, t) < Score(h, r
?
, t)) is less
than ? , we increase Score
Sm2r
(h, r, t) by p. We
search for the best ?, ? , and p on another dataset?
Wikipedia corpus distantly labeled by Freebase.
Result. We present the PR curves in Fig. (1,
2). Over candidate triplets provided by either
Mintz or Sm2r, the ?jointly? model is consis-
tently comparable with the ?knowledge? model
(TransE/pTransE) over e ? e triplets while it out-
performs the ?knowledge? model by a consider-
able margin over triplets of other types. These
results confirm the advantage of jointly embed-
ding and are actually straightforward results of our
triplet classification experiment because the only
difference is that the triplets here are provided by
the extractor.
Table 6: Phrases Analogical Reasoning Task.
Method Accuracy (%) Hits@10 (%)
Skip-gram 18.0 56.1
Jointly (anchor) 27.6 65.0
Jointly (name) 11.3 40.6
Jointly (anchor+name) 18.3 54.0
Table 7: Constructed Analogical Reasoning
Task.
Method Accuracy (%) Hits@10 (%)
Skip-gram 10.5 14.1
Jointly (anchor) 10.5 14.3
Jointly (name) 11.5 16.2
Jointly (anchor+name) 11.6 16.5
4.4 Analogical Reasoning Task
We compare our method with Skip-gram on this
task to observe and study the influences of both
knowledge embedding and alignment mechanisms
on the quality of word embeddings.
Evaluation protocol. We use the same pub-
lic datasets as in (Mikolov et al., 2013b): 19,544
word analogies
5
; 3,218 phrase analogies
6
. We al-
so construct analogies from our held-out triplet-
s (see Table 2) by first concatenating two entity
pairs of the same relation to form an analogy and
5
code.google.com/p/word2vec/source/
browse/trunk/questions-words.txt
6
code.google.com/p/word2vec/source/
browse/trunk/questions-phrases.txt
1599
Table 5: Words Analogical Reasoning Task.
Method Accuracy (%) Hits@10 (%)
Semantic Syntactic Total Semantic Syntactic Total
Skip-gram 71.4 69.0 70.0 90.4 89.3 89.8
Jointly (anchor) 75.3 68.3 71.2 91.5 88.9 89.9
Jointly (name) 54.5 54.2 59.0 75.8 86.5 82.1
Jointly (anchor+name) 56.5 65.7 61.9 78.1 87.6 83.6
then replacing the entities by corresponding entity
names, e.g., ?(Obama, Honolulu, David Beckham,
London)? where the relation is ?Born-in?.
Following (Mikolov et al., 2013b), we only con-
sider analogies that consist of the top-K most fre-
quent words/phrases in the vocabulary. For each
analogy denoted by (h
1
, t
1
, h
2
, t
2
), we enumer-
ate all the top-K most frequent words/phrases w
except for h
1
, t
1
, h
2
, and calculate the distance
(Cosine/Euclidean according to specific model)
between h
2
+ (t
1
? h
1
) and w. Ordering all
these words/phrases by their distances in ascend-
ing order, we obtain the rank of the correct an-
swer t
2
. Finally, we report Hits@10 (i.e., the pro-
portion of correct answers whose ranks are not
larger than 10) and accuracy (i.e., Hits@1). For
word analogies and constructed analogies, we set
K = 200, 000; while for phrase analogies, we set
K = 1, 000, 000 to recall sufficient analogies.
Implementation. For Skip-gram and the
?Jointly? (anchor/name/anchor+name) model, we
use the same implementations and optimal config-
urations as the triplet classification experiment.
Results. Jointly embedding using Wikipedi-
a anchors for alignment consistently outperforms
Skip-gram (Table 5, 6, 7) showing that the influ-
ence of knowledge embedding, injected into word
embedding through Wikipedia anchors, is benefi-
cial. The vector of an ambiguous word is often a
mixture of its several meanings but, in a specific
context, the word is disambiguated and refers to
a specific meaning. Using global word embedding
to predict words within a specific context may pol-
lute the embeddings of surrounding words. Align-
ment by anchors enables entity embeddings to al-
leviate the propagation of ambiguities and thus im-
proves the quality of word embeddings.
Using entity names for alignment hurts the per-
formance of analogies of words and phrases (Ta-
ble 5, 6). The main reason is that these analo-
gies are popular facts frequently mentioned in tex-
t while a name graph forces word embeddings to
satisfy both popular and rare facts. Another rea-
son stems from the versatility of mentioning an
entity. Consider ?(Japan, yen, Europe, euro)? for
example. Knowledge embedding is supposed to
give significant help to completing this analogy as
?/location/country/currency?? R. However, the
entity of Japanese currency is named ?Japanese
yen? rather than ?yen? and thus the explicit trans-
lation learnt from knowledge embedding is not di-
rectly imposed on the word embedding of ?yen?.
In contrast, using entity names for alignment im-
proves the performances on constructed analogies
(Table 7). Since there is a relation r ? R for
each constructed analogy (w
h
1
, w
t
1
, w
h
2
, w
t
2
), al-
though neither (w
h
1
, r, w
t
1
) nor (w
h
2
, r, w
t
2
) is
present in the name graph, other facts involving
these words act on the vectors of these words, in
the same manner of traditional knowledge embed-
ding.
Overall, any high-quality entity linking system
can be used to further improve the performance.
5 Conclusions
In this paper, we introduced a novel method of
jointly embedding knowledge graphs and a text
corpus so that entities and words/phrases are rep-
resented in the same vector space. In such a way,
our method can perform prediction on any can-
didate facts between entities/words/phrases, going
beyond previous knowledge embedding methods,
which can only predict facts whose entities exist
in knowledge graph. Extensive, large-scale exper-
iments show that the proposed method is very ef-
fective at reasoning new facts. In addition, we also
provides insights into word embedding, especially
on the capability of analogical reasoning. In this
aspect, we empirically observed some hints that
jointly embedding also helps word embedding.
References
Yoshua Bengio, R?ejean Ducharme, Pascal Vincent, and
Christian Jauvin. 2003. A neural probabilistic lan-
guage model. Journal of Machine Learning Re-
search, 3:1137?1155.
1600
Kurt Bollacker, Colin Evans, Praveen Paritosh, Tim S-
turge, and Jamie Taylor. 2008. Freebase: a collab-
oratively created graph database for structuring hu-
man knowledge. In Proceedings of the 2008 ACM
SIGMOD International Conference on Management
of Data, pages 1247?1250. ACM.
Antoine Bordes, Jason Weston, Ronan Collobert, and
Yoshua Bengio. 2011. Learning structured embed-
dings of knowledge bases. In Proceedings of the
Twenty-Fifth AAAI Conference on Artificial Intelli-
gence, pages 301?306.
Antoine Bordes, Nicolas Usunier, Alberto Garcia-
Duran, Jason Weston, and Oksana Yakhnenko.
2013. Translating embeddings for modeling multi-
relational data. In Advances in Neural Information
Processing Systems, pages 2787?2795.
Kai-Wei Chang, Wen-tau Yih, and Christopher Meek.
2013. Multi-relational latent semantic analysis. In
Proceedings of the 2013 Conference on Empirical
Methods in Natural Language Processing, pages
1602?1612, Seattle, Washington, USA, October.
Association for Computational Linguistics.
Ronan Collobert, Jason Weston, L?eon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. Journal of Machine Learning Research,
12:2493?2537.
Miao Fan, Deli Zhao, Qiang Zhou, Zhiyuan Liu,
Thomas Fang Zheng, and Edward Y. Chang. 2014.
Distant supervision for relation extraction with ma-
trix completion. In Proceedings of the 52nd Annual
Meeting of the Association for Computational Lin-
guistics (Volume 1: Long Papers), pages 839?849,
Baltimore, Maryland, June. Association for Compu-
tational Linguistics.
Raphael Hoffmann, Congle Zhang, Xiao Ling, Luke
Zettlemoyer, and Daniel S Weld. 2011. Knowledge-
based weak supervision for information extraction
of overlapping relations. In Proceedings of the 49th
Annual Meeting of the Association for Computa-
tional Linguistics: Human Language Technologies-
Volume 1, pages 541?550. Association for Compu-
tational Linguistics.
Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey
Dean. 2013a. Efficient estimation of word rep-
resentations in vector space. arXiv preprint arX-
iv:1301.3781.
Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Cor-
rado, and Jeff Dean. 2013b. Distributed representa-
tions of words and phrases and their compositional-
ity. In Advances in Neural Information Processing
Systems 26, pages 3111?3119.
George A Miller. 1995. Wordnet: a lexical
database for english. Communications of the ACM,
38(11):39?41.
Mike Mintz, Steven Bills, Rion Snow, and Dan Ju-
rafsky. 2009. Distant supervision for relation ex-
traction without labeled data. In Proceedings of the
Joint Conference of the 47th Annual Meeting of the
ACL and the 4th International Joint Conference on
Natural Language Processing of the AFNLP: Vol-
ume 2-Volume 2, pages 1003?1011. Association for
Computational Linguistics.
Sebastian Riedel, Limin Yao, and Andrew McCal-
lum. 2010. Modeling relations and their mention-
s without labeled text. In Machine Learning and
Knowledge Discovery in Databases, pages 148?163.
Springer.
Richard Socher, Danqi Chen, Christopher D Manning,
and Andrew Ng. 2013. Reasoning with neural ten-
sor networks for knowledge base completion. In Ad-
vances in Neural Information Processing Systems,
pages 926?934.
Mihai Surdeanu, Julie Tibshirani, Ramesh Nallapati,
and Christopher D Manning. 2012. Multi-instance
multi-label learning for relation extraction. In Pro-
ceedings of the 2012 Joint Conference on Empirical
Methods in Natural Language Processing and Com-
putational Natural Language Learning, pages 455?
465. Association for Computational Linguistics.
Zhen Wang, Jianwen Zhang, Jianlin Feng, and Zheng
Chen. 2014. Knowledge graph embedding by trans-
lating on hyperplanes. In Proceedings of the Twenty-
Eighth AAAI Conference on Artificial Intelligence,
pages 1112?1119.
Jason Weston, Antoine Bordes, Oksana Yakhnenko,
and Nicolas Usunier. 2013. Connecting language
and knowledge bases with embedding models for re-
lation extraction. In Proceedings of the 2013 Con-
ference on Empirical Methods in Natural Language
Processing, pages 1366?1371, Seattle, Washington,
USA, October. Association for Computational Lin-
guistics.
Xingxing Zhang, Jianwen Zhang, Junyu Zeng, Jun
Yan, Zheng Chen, and Zhifang Sui. 2013. Towards
accurate distant supervision for relational facts ex-
traction. In Proceedings of the 51st Annual Meet-
ing of the Association for Computational Linguistic-
s (Volume 2: Short Papers), pages 810?815, Sofi-
a, Bulgaria, August. Association for Computational
Linguistics.
1601
Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 810?815,
Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics
Towards Accurate Distant Supervision for Relational Facts Extraction
Xingxing Zhang1 Jianwen Zhang2? Junyu Zeng3 Jun Yan2 Zheng Chen2 Zhifang Sui1
1Key Laboratory of Computational Linguistics (Peking University), Ministry of Education,China
2Microsoft Research Asia
3Beijing University of Posts and Telecommunications
1{zhangxingxing,szf}@pku.edu.cn
2{jiazhan,junyan,zhengc}@microsoft.com
3junyu.zeng@gmail.com
Abstract
Distant supervision (DS) is an appealing
learning method which learns from exist-
ing relational facts to extract more from
a text corpus. However, the accuracy is
still not satisfying. In this paper, we point
out and analyze some critical factors in
DS which have great impact on accuracy,
including valid entity type detection,
negative training examples construction
and ensembles. We propose an approach
to handle these factors. By experimenting
on Wikipedia articles to extract the facts in
Freebase (the top 92 relations), we show
the impact of these three factors on the
accuracy of DS and the remarkable im-
provement led by the proposed approach.
1 Introduction
Recently there are great efforts on building large
structural knowledge bases (KB) such as Free-
base, Yago, etc. They are composed of relational
facts often represented in the form of a triplet,
(SrcEntity, Relation, DstEntity),
such as ?(Bill Gates, BornIn, Seattle)?. An impor-
tant task is to enrich such KBs by extracting more
facts from text. Specifically, this paper focuses on
extracting facts for existing relations. This is dif-
ferent from OpenIE (Banko et al, 2007; Carlson et
al., 2010) which needs to discover new relations.
Given large amounts of labeled sentences,
supervised methods are able to achieve good
performance (Zhao and Grishman, 2005; Bunescu
and Mooney, 2005). However, it is difficult to
handle large scale corpus due to the high cost
of labeling. Recently an approach called distant
supervision (DS) (Mintz et al, 2009) was pro-
posed, which does not require any labels on the
text. It treats the extraction problem as classifying
? The contact author.
a candidate entity pair to a relation. Then an
existing fact in a KB can be used as a labeled
example whose label is the relation name. Then
the features of all the sentences (from a given text
corpus) containing the entity pair are merged as
the feature of the example. Finally a multi-class
classifier is trained.
However, the accuracy of DS is not satisfying.
Some variants have been proposed to improve
the performance (Riedel et al, 2010; Hoffmann
et al, 2011; Takamatsu et al, 2012). They ar-
gue that DS introduces a lot of noise into the
training data by merging the features of all the
sentences containing the same entity pair, because
a sentence containing the entity pair of a relation
may not talk about the relation. Riedel et al
(2010) and Hoffmann et al (2011) introduce
hidden variables to indicate whether a sentence
is noise and try to infer them from the data.
Takamatsu et al (2012) design a generative model
to identify noise patterns. However, as shown in
the experiments (Section 4), the above variants do
not lead to much improvement in accuracy.
In this paper, we point out and analyze some
critical factors in DS which have great impact on
the accuracy but has not been touched or well han-
dled before. First, each relation has its own schema
definition, i.e., the source entity and the destina-
tion entity should be of valid types, which is over-
looked in DS. Therefore, we propose a component
of entity type detection to check it. Second, DS
introduces many false negative examples into the
training set and we propose a new method to con-
struct negative training examples. Third, we find it
is difficult for a single classifier to achieve high ac-
curacy and hence we train multiple classifiers and
ensemble them.
We also notice that Nguyen and Moschitti
(2011a) and Nguyen and Moschitti (2011b) utilize
external information such as more facts from Yago
and labeled sentences from ACE to improve the
810
performance. These methods can also be equipped
with the approach proposed in this paper.
2 Critical Factors Affecting the Accuracy
DS has four steps: (1) Detect candidate entity
pairs in the corpus. (2) Label the candidate pairs
using the KB. (3) Extract features for the pair
from sentences containing the pair. (4) Train a
multi-class classifier. Among these steps, we find
the following three critical factors have great
impact on the accuracy (see Section 4 for the
experimental results).
Valid entity type detection. In DS, a sentence
with a candidate entity pair a sentence with two
candidate entities is noisy. First, the schema of
each relation in the KB requires that the source
and destination entities should be of valid types,
e.g., the source and destination entity of the
relation ?DirectorOfFilm? should be of the types
?Director? and ?Film? respectively. If the two
entities in a sentence are not of the valid types, the
sentence is noisy. Second, the sentence may not
talk about the relation even when the two entities
are of the valid types. The previous works (Riedel
et al, 2010; Hoffmann et al, 2011; Takamatsu et
al., 2012) do not distinguish the two types of noise
but directly infer the overall noise from the data.
We argue that the first type of noise is very difficult
to be inferred just from the noisy relational labels.
Instead, we decouple the two types of noise, and
utilize external labeled data, i.e., the Wikipedia
anchor links, to train an entity type detection mod-
ule to handle the first type of noise. We notice that
when Ling and Weld (2012) studied a fine-grained
NER method, they applied the method to relation
extraction by adding the recognized entity tags to
the features. We worry that the contribution of the
entity type features may be drowned when many
other features are used. Their method works well
on relatively small relations, but not that well on
big ones (Section 4.2).
Negative examples construction. DS treats the
relation extraction as a multi-class classification
task. For a relation, it implies that the facts of all
the other relations together with the ?Other? class
are negative examples. This introduces many false
negative examples into the training data. First,
many relations are not exclusive with each other,
e.g., ?PlaceOfBorn? and ?PlaceOfDeath?, the
born place of a person can be also the death place.
Second, in DS, the ?Other? class is composed
of all the candidate entity pairs not existed in
the KB, which actually contains many positive
facts of non-Other relations because the KB is
not complete. Therefore we use a different way to
construct negative training examples.
Feature space partition and ensemble. The
features used in DS are very sparse and many
examples do not contain any features. Thus we
employ more features. However we find it is
difficult for a single classifier on all the features
to achieve high accuracy and hence we divide
the features into different categories and train
a separate classifier for each category and then
ensemble them finally.
3 Accurate Distant Supervision (ADS)
Different from DS, we treat the extraction
problem as N binary classification problems,
one for each relation. We modify the four steps
of DS (Section 2). In step (1), when detecting
candidate entity pairs in sentences, we use our
entity type detection module (Section 3.1) to filter
out the sentences where the entity pair is of invalid
entity types. In step (2), we use our new method
to construct negative examples (Section 3.2). In
step (3), we employ more features and design an
ensemble classifier (Section 3.3). In step (4), we
train N binary classifiers separately.
3.1 Entity Type Detection
We divide the entity type detection into two steps.
The first step, called boundary detection, is to
detect phrases as candidate entities. The second
step, called named entity disambiguation, maps
a detected candidate entity to some entity types,
e.g., ?FilmDirector?. Note that an entity might be
mapped to multiple types. For instance, ?Ventura
Pons? is a ?FilmDirector? and a ?Person?.
Boundary Detection Two ways are used for
boundary detection. First, for each relation, from
the training set of facts, we get two dictionaries
(one for source entities and one for destination en-
tities). The two dictionaries are used to detect the
source and destination entities. Second, an exist-
ing NER tool (StanfordNER here) is used with the
following postprocessing to filter some unwanted
entities, because a NER tool sometimes produces
too many entities. We first find the compatible N-
ER tags for an entity type in the KB. For example,
811
for the type ?FilmDirector?, the compatible NER
tag of Standford NER is ?Person?. To do this,
for each entity type in the KB, we match all the
entities of that type (in the training set) back to the
training corpus and get the probability Ptag(ti) of
each NER tag (including the ?NULL? tag meaning
not recognized as a named entity) recognized
by the NER tool. Then we retain the top k tags
Stags = {t1, ? ? ? , tk} with the highest probabil-
ities to account for an accumulated mass z:
k = argmin
k
(( k?
i=1
Ptag(ti)
)
? z
)
(1)
In the experiments we set z = 0.9. The compati-
ble ner tags are Stags\{?NULL?}. If the retained
tags contain only ?NULL?, the candidate entities
recognized by NER tool will be discarded.
Named Entity Disambiguation (NED) With
a candidate entity obtained by the boundary
detection, we need a NED component to assign
some entity types to it. To obtain such a NED, we
leverage the anchor text in Wikipedia to generate
training data and train a NED component. The
referred Freebase entity and the types of an anchor
link in Wikipedia can be obtained from Freebase.
The following features are used to train the
NED component. Mention Features: Uni-grams,
Bi-grams, POS tags, word shapes in the mention,
and the length of the mention. Context Features:
Uni-grams and Bi-grams in the windows of the
mention (window size = 5).
3.2 Negative Examples Construction
Treating the problem as a multi-class classification
implies introducing many false negative examples
for a relation; therefore, we handle each relation
with a separate binary classifier. However, a KB
only tells us which entity pairs belong to a relation,
i.e., it only provides positive examples for each re-
lation. But we also need negative examples to train
a binary classifier. To reduce the number of false
negative examples, we propose a new method
to construct negative examples by utilizing the
1-to-1/1-to-n/n-to-1/n-to-n property of a relation.
1-to-1/n-to-1/1-to-n Relation A 1-to-1 or n-to-
1 relation is a functional relation: for a relation r,
for each valid source entity e1, there is only one
unique destination entity e2 such that (e1, e2) ? r.
However, in a real KB like Freebase, very few
relations meet the exact criterion. Thus we use the
following approximate criterion instead: relation
r is approximately a 1-to-1/n-to-1 relation if the
Inequalities (2,3) hold, where M is the number of
unique source entities in relation r, and ?(?) is an
indicator function which returns 1 if the condition
is met and returns 0 otherwise. Inequality (2)
says the proportion of source entities which have
exactly one counterpart destination entity should
be greater than a given threshold. Inequality (3)
says the average number of destination entities of
a source entity should be less than the threshold.
To check whether r is a 1-to-n relation, we simply
swap the source and destination entities of the
relation and check whether the reversed relation
is a n-to-1 relation by the above two inequalities.
In experiments we set ? = 0.7 and ? = 1.1.
1
M
M?
i=1
?
(??{e?|(ei, e?) ? r}
?? = 1
)
? ? (2)
1
M
M?
i=1
??{e?|(ei, e?) ? r}
?? ? ? (3)
n-to-n Relation Relations other than 1-to-1/n-
to-1/1-to-n are n-to-n relations. We approximately
categorize a n-to-n relation to n-to-1 or 1-to-n by
checking which one it is closer to. This is done
by computing the following two values ?src and
?dst. r is treated as a 1-to-n relation if ?src > ?dst
and as a 1-to-n relation otherwise.
?src =
1
Msrc
Msrc?
i=1
??{e?|(ei, e?) ? r}
??
?dst =
1
Mdst
Mdst?
i=1
??{e?|(e?, ei) ? r}
??
(4)
Negative examples For a candidate entity pair
(e1, e2) not in the relation r of the KB, we first
determine whether it is 1-to-n or n-to-1 using the
above method. If r is 1-to-1/n-to-1 and e1 exists in
some fact of r as the source entity, then (e1, e2) is
a negative example as it violates the 1-to-1/n-to-1
constraint. If r is 1-to-n, the judgement is similar
and just simply swap the source and destination
entities of the relation.
3.3 Feature Space Partition and Ensemble
The features of DS (Mintz et al, 2009) are very
sparse in the corpus. We add some features in (Yao
et al, 2011): Trigger Words (the words on the
dependency path except stop words) and Entity
String (source entity and destination entity).
812
Relation Taka Ensemble
works written 0.76 0.98
river/basin countries 0.48 1
/film/director/film 0.82 1
Average 0.79 0.89
Table 1: Manual evaluation of top-ranked 50 rela-
tion instances for the most frequent 15 relations.
We find that without considering the reversed
order of entity pairs in a sentence, the precision
can be higher, but the recall decreases. For exam-
ple, for the entity pair ?Ventura Pons, Actrius?, we
only consider sentences with the right order (e.g.
Ventura Pons is directed by Actrius.). For each re-
lation, we train four classifiers: C1 (without con-
sidering reversed order), C2 (considering reversed
order), C1more (without considering reversed or-
der and employ more feature) and C2more (con-
sidering reversed order and employ more feature).
We then ensemble the four classifiers by averaging
the probabilities of predictions:
P (y|x) = P1 + P2 + P1more + P2more4 (5)
4 Experiments
4.1 Dataset and Configurations
We aimed to extract facts of the 92 most frequent
relations in Freebase 2009. The facts of each
relation were equally split to two parts for training
and testing. Wikipedia 2009 was used as the target
corpus, where 800,000 articles were used for
training and 400,000 for testing. During the NED
phrase, there are 94 unique entity types (they are
also relations in Freebase) for the source and desti-
nation entities. Note that some entity types contain
too few entities and they are discarded. We used
500,000 Wikipedia articles (2,000,000 sentences)
for generating training data for the NED compo-
nent. We used Open NLP POS tagger, Standford
NER (Finkel et al, 2005) and MaltParser (Nivre
et al, 2006) to label/tag sentences. We employed
liblinear (Fan et al, 2008) as classifiers for NED
and relation extraction and the solver is L2LR.
4.2 Performance of Relation Extraction
Held-out Evaluation. We evaluate the perfor-
mance on the half hold-on facts for testing. We
compared performance of the n = 50, 000 best ex-
tracted relation instances of each method and the
Precision-Recall (PR) curves are in Figure 1 and
0 0.1 0.2 0.3 0.4 0.5 0.6 0.70
0.2
0.4
0.6
0.8
1
Recall
Pre
cis
ion
 
 
OrigDS
MultiR
Taka
ADS
Figure 1: Performance of different methods.
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7
0.25
0.4
0.6
0.8
1
Recall
Pre
cisi
on
 
 OrigDSDS_FigerETDETD+NegMoreEnsemble(ADS)
Figure 2: Contributions of different components.
Figure 2. For a candidate fact without any enti-
ty existing in Freebase, we are not able to judge
whether it is correct. Thus we only evaluate the
candidate facts that at least one entity occurs as
the source or destination entity in the test fact set.
In Figure 1, we compared our method with
two previous methods: MultiR (Hoffmann et al,
2011) and Takamatsu et al (2012) (Taka). For
MultiR, we used the author?s implementation1.
We re-implemented Takamatsu?s algorithm. As
Takamatsu?s dataset (903,000 Wikipedia articles
for training and 400,000 for testing) is very similar
to ours, we used their best reported parameters.
Our method leads to much better performance.
Manual Evaluation. Following (Takamatsu et
al., 2012), we selected the top 50 ranked (accord-
ing to their classification probabilities) relation
facts of the 15 largest relations. We compared our
results with those of Takamatsu et al (2012) and
we achieved greater average precision (Table 1).
1available at http://www.cs.washington.edu/ai/raphaelh/mr
We set T = 120, which leads to the best performance.
813
Pmicro Rmicro Pmacro Rmacro
0.950 0.845 0.947 0.626
Table 2: Performance of the NED component
4.3 Contribution of Each Component
In Figure 2, with the entity type detection (ETD),
the performance is better than the original DS
method (OrigDS). As for the performance of NED
in the Entity Type Detection, the Micro/Macro
Precision-Recall of our NED component are in
Table 2. ETD is also better than adding the entity
types of the pair to the feature vector (DS Figer)2
as in (Ling and Weld, 2012). If we also employ the
negative example construction strategy in Section
3.2 (ETD+Neg), the precision of the top ranked
instances is improved. By adding more features
(More) and employing the ensemble learning
(Ensemble(ADS)) to ETD+Neg, the performance
is further improved.
5 Conclusion
This paper dealt with the problem of improving the
accuracy of DS. We find some factors are crucial-
ly important, including valid entity type detection,
negative training examples construction and en-
sembles. We have proposed an approach to handle
these issues. Experiments show that the approach
is very effective.
References
Michele Banko, Michael J. Cafarella, Stephen Soder-
land, Matt Broadhead, and Oren Etzioni. 2007.
Open information extraction from the web. In Pro-
ceedings of the 20th international joint conference
on Artifical intelligence, IJCAI?07, pages 2670?
2676, San Francisco, CA, USA. Morgan Kaufmann
Publishers Inc.
Razvan Bunescu and Raymond Mooney. 2005. A
shortest path dependency kernel for relation extrac-
tion. In Proceedings of Human Language Technolo-
gy Conference and Conference on Empirical Meth-
ods in Natural Language Processing, pages 724?
731, Vancouver, British Columbia, Canada, October.
Association for Computational Linguistics.
Andrew Carlson, Justin Betteridge, Bryan Kisiel, Bur-
r Settles, Estevam R Hruschka Jr, and Tom M
Mitchell. 2010. Toward an architecture for never-
ending language learning. In Proceedings of the
Twenty-Fourth Conference on Artificial Intelligence
(AAAI 2010), volume 2, pages 3?3.
2We use Figer (Ling and Weld, 2012) to detect entity types
Rong-En Fan, Kai-Wei Chang, Cho-Jui Hsieh, Xiang-
Rui Wang, and Chih-Jen Lin. 2008. LIBLINEAR:
A library for large linear classification. Journal of
Machine Learning Research, 9:1871?1874.
Jenny Rose Finkel, Trond Grenager, and Christopher
Manning. 2005. Incorporating non-local informa-
tion into information extraction systems by gibbs
sampling. In Proceedings of the 43rd Annual Meet-
ing of the Association for Computational Linguistics
(ACL-05). Association for Computational Linguis-
tics.
Raphael Hoffmann, Congle Zhang, Xiao Ling,
Luke Zettlemoyer, and Daniel S. Weld. 2011.
Knowledge-based weak supervision for information
extraction of overlapping relations. In Proceedings
of the 49th Annual Meeting of the Association for
Computational Linguistics: Human Language Tech-
nologies, pages 541?550, Portland, Oregon, USA,
June. Association for Computational Linguistics.
X. Ling and D.S. Weld. 2012. Fine-grained entity
recognition. In Proceedings of the 26th Conference
on Artificial Intelligence (AAAI).
Mike Mintz, Steven Bills, Rion Snow, and Daniel Ju-
rafsky. 2009. Distant supervision for relation ex-
traction without labeled data. In Proceedings of the
Joint Conference of the 47th Annual Meeting of the
ACL and the 4th International Joint Conference on
Natural Language Processing of the AFNLP, pages
1003?1011, Suntec, Singapore, August. Association
for Computational Linguistics.
Truc-Vien T. Nguyen and Alessandro Moschitti.
2011a. End-to-end relation extraction using distant
supervision from external semantic repositories. In
Proceedings of the 49th Annual Meeting of the Asso-
ciation for Computational Linguistics: Human Lan-
guage Technologies: short papers - Volume 2, HLT
?11, pages 277?282, Stroudsburg, PA, USA. Associ-
ation for Computational Linguistics.
Truc-Vien T Nguyen and AlessandroMoschitti. 2011b.
Joint distant and direct supervision for relation ex-
traction. In Proceeding of the International Joint
Conference on Natural Language Processing, pages
732?740.
Joakim Nivre, Johan Hall, and Jens Nilsson. 2006.
Maltparser: A data-driven parser-generator for de-
pendency parsing. In In Proc. of LREC-2006, pages
2216?2219.
Sebastian Riedel, Limin Yao, and Andrew McCallum.
2010. Modeling relations and their mentions with-
out labeled text. In Proceedings of the Sixteenth Eu-
ropean Conference on Machine Learning (ECML-
2010), pages 148?163.
Shingo Takamatsu, Issei Sato, and Hiroshi Nakagawa.
2012. Reducing wrong labels in distant supervision
for relation extraction. In Proceedings of the 50th
814
Annual Meeting of the Association for Computation-
al Linguistics (Volume 1: Long Papers), pages 721?
729, Jeju Island, Korea, July. Association for Com-
putational Linguistics.
Limin Yao, Aria Haghighi, Sebastian Riedel, and An-
drew McCallum. 2011. Structured relation dis-
covery using generative models. In Proceedings of
the 2011 Conference on Empirical Methods in Nat-
ural Language Processing, pages 1456?1466, Edin-
burgh, Scotland, UK., July. Association for Compu-
tational Linguistics.
Shubin Zhao and Ralph Grishman. 2005. Extracting
relations with integrated information using kernel
methods. In Proceedings of the 43rd Annual Meet-
ing of the Association for Computational Linguistic-
s (ACL?05), pages 419?426, Ann Arbor, Michigan,
June. Association for Computational Linguistics.
815
