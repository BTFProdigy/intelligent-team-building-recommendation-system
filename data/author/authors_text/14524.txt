Human Language Technologies: The 2010 Annual Conference of the North American Chapter of the ACL, pages 777?785,
Los Angeles, California, June 2010. c?2010 Association for Computational Linguistics
The viability of web-derived polarity lexicons
Leonid Velikovich Sasha Blair-Goldensohn Kerry Hannan Ryan McDonald
Google Inc., New York, NY
{leonidv|sasha|khannan|ryanmcd}@google.com
Abstract
We examine the viability of building large
polarity lexicons semi-automatically from the
web. We begin by describing a graph propa-
gation framework inspired by previous work
on constructing polarity lexicons from lexi-
cal graphs (Kim and Hovy, 2004; Hu and
Liu, 2004; Esuli and Sabastiani, 2009; Blair-
Goldensohn et al, 2008; Rao and Ravichan-
dran, 2009). We then apply this technique
to build an English lexicon that is signifi-
cantly larger than those previously studied.
Crucially, this web-derived lexicon does not
require WordNet, part-of-speech taggers, or
other language-dependent resources typical of
sentiment analysis systems. As a result, the
lexicon is not limited to specific word classes
? e.g., adjectives that occur in WordNet ?
and in fact contains slang, misspellings, multi-
word expressions, etc. We evaluate a lexicon
derived from English documents, both qual-
itatively and quantitatively, and show that it
provides superior performance to previously
studied lexicons, including one derived from
WordNet.
1 Introduction
Polarity lexicons are large lists of phrases that en-
code the polarity of each phrase within it ? either
positive or negative ? often with some score rep-
resenting the magnitude of the polarity (Hatzivas-
siloglou and McKeown, 1997; Wiebe, 2000; Turney,
2002). Though classifiers built with machine learn-
ing algorithms have become commonplace in the
sentiment analysis literature, e.g., Pang et al (2002),
the core of many academic and commercial senti-
ment analysis systems remains the polarity lexicon,
which can be constructed manually (Das and Chen,
2007), through heuristics (Kim and Hovy, 2004;
Esuli and Sabastiani, 2009) or using machine learn-
ing (Turney, 2002; Rao and Ravichandran, 2009).
Often lexicons are combined with machine learning
for improved results (Wilson et al, 2005). The per-
vasiveness and sustained use of lexicons can be as-
cribed to a number of reasons, including their inter-
pretability in large-scale systems as well as the gran-
ularity of their analysis.
In this work we investigate the viability of polar-
ity lexicons that are derived solely from unlabeled
web documents. We propose a method based on
graph propagation algorithms inspired by previous
work on constructing polarity lexicons from lexical
graphs (Kim and Hovy, 2004; Hu and Liu, 2004;
Esuli and Sabastiani, 2009; Blair-Goldensohn et al,
2008; Rao and Ravichandran, 2009). Whereas past
efforts have used linguistic resources ? e.g., Word-
Net ? to construct the lexical graph over which prop-
agation runs, our lexicons are constructed using a
graph built from co-occurrence statistics from the
entire web. Thus, the method we investigate can
be seen as a combination of methods for propagat-
ing sentiment across lexical graphs and methods for
building sentiment lexicons based on distributional
characteristics of phrases in raw data (Turney, 2002).
The advantage of breaking the dependence on Word-
Net (or related resources like thesauri (Mohammad
et al, 2009)) is that it allows the lexicons to include
non-standard entries, most notably spelling mistakes
and variations, slang, and multiword expressions.
The primary goal of our study is to understand the
characteristics and practical usefulness of such a lex-
icon. Towards this end, we provide both a qualitative
and quantitative analysis for a web-derived English
777
lexicon relative to two previously published lexicons
? the lexicon used in Wilson et al (2005) and the
lexicon used in Blair-Goldensohn et al (2008). Our
experiments show that a web-derived lexicon is not
only significantly larger, but has improved accuracy
on a sentence polarity classification task, which is
an important problem in many sentiment analysis
applications, including sentiment aggregation and
summarization (Hu and Liu, 2004; Carenini et al,
2006; Lerman et al, 2009). These results hold true
both when the lexicons are used in conjunction with
string matching to classify sentences, and when they
are included within a contextual classifier frame-
work (Wilson et al, 2005).
Extracting polarity lexicons from the web has
been investigated previously by Kaji and Kitsure-
gawa (2007), who study the problem exclusively for
Japanese. In that work a set of positive/negative sen-
tences are first extracted from the web using cues
from a syntactic parser as well as the document
structure. Adjectives phrases are then extracted from
these sentences based on different statistics of their
occurrence in the positive or negative set. Our work,
on the other hand, does not rely on syntactic parsers
or restrict the set of candidate lexicon entries to spe-
cific syntactic classes, i.e., adjective phrases. As a
result, the lexicon built in our study is on a different
scale than that examined in Kaji and Kitsuregawa
(2007). Though this hypothesis is not tested here, it
also makes our techniques more amenable to adap-
tation for other languages.
2 Constructing the Lexicon
In this section we describe a method to construct po-
larity lexicons using graph propagation over a phrase
similarity graph constructed from the web.
2.1 Graph Propagation Algorithm
We construct our lexicon using graph propagation
techniques, which have previously been investigated
in the construction of polarity lexicons (Kim and
Hovy, 2004; Hu and Liu, 2004; Esuli and Sabas-
tiani, 2009; Blair-Goldensohn et al, 2008; Rao and
Ravichandran, 2009). We assume as input an undi-
rected edge weighted graph G = (V,E), where
wij ? [0, 1] is the weight of edge (vi, vj) ? E. The
node set V is the set of candidate phrases for inclu-
sion in a sentiment lexicon. In practice,G should en-
code semantic similarities between two nodes, e.g.,
for sentiment analysis one would hope that wij >
wik if vi=good, vj=great and vk=bad. We also as-
sume as input two sets of seed phrases, denoted P
for the positive seed set and N for the negative seed
set. The common property among all graph propaga-
tion algorithms is that they attempt to propagate in-
formation from the seed sets to the rest of the graph
through its edges. This can be done using machine
learning, graph algorithms or more heuristic means.
The specific algorithm used in this study is given
in Figure 1, which is distinct from common graph
propagation algorithms, e.g., label propagation (see
Section 2.3). The output is a polarity vector pol ?
R|V | such that poli is the polarity score for the i
th
candidate phrase (or the ith node inG). In particular,
we desire pol to have the following semantics:
poli =
?
??
??
> 0 ith phrase has positive polarity
< 0 ith phrase has negative polarity
= 0 ith phrase has no sentiment
Intuitively, the algorithm works by computing both
a positive and a negative polarity magnitude for
each node in the graph, call them pol+i and pol
-
i.
These values are equal to the sum over the max
weighted path from every seed word (either posi-
tive or negative) to node vi. Phrases that are con-
nected to multiple positive seed words through short
yet highly weighted paths will receive high positive
values. The final polarity of a phrase is then set to
poli = pol
+
i ? ?pol
-
i, where ? a constant meant to
account for the difference in overall mass of positive
and negative flow in the graph. Thus, after the al-
gorithm is run, if a phrase has a higher positive than
negative polarity score, then its final polarity will be
positive, and negative otherwise.
There are some implementation details worth
pointing out. First, the algorithm in Figure 1 is writ-
ten in an iterative framework, where on each itera-
tion, paths of increasing lengths are considered. The
input variable T controls the max path length con-
sidered by the algorithm. This can be set to be a
small value in practice, since the multiplicative path
weights result in long paths rarely contributing to
polarity scores. Second, the parameter ? is a thresh-
old that defines the minimum polarity magnitude a
778
Input: G = (V,E), wij ? [0, 1],
P , N , ? ? R, T ? N
Output: pol ? R|V |
Initialize: poli,pol
+
i ,pol
-
i = 0, for all i
pol+i = 1.0 for all vi ? P and
pol-i = 1.0 for all vi ? N
1. set ?ij = 0 for all i, j
2. for vi ? P
3. F = {vi}
4. for t : 1 . . . T
5. for (vk, vj) ? E such that vk ? F
6. ?ij = max{?ij , ?ik ? wkj}
F = F ? {vj}
7. for vj ? V
8. pol+j =
?
vi?P
?ij
9. Repeat steps 1-8 using N to compute pol-
10. ? =
?
i pol
+
i /
?
i pol
-
i
11. poli = pol
+
i ? ?pol
-
i, for all i
12. if |poli| < ? then poli = 0.0, for all i
Figure 1: Graph Propagation Algorithm.
phrase must have to be included in the lexicon. Both
T and ? were tuned on held-out data.
To construct the final lexicon, the remaining
nodes ? those with polarity scores above ? ? are ex-
tracted and assigned their corresponding polarity.
2.2 Building a Phrase Graph from the Web
Graph propagation algorithms rely on the existence
of graphs that encode meaningful relationships be-
tween candidate nodes. Past studies on building po-
larity lexicons have used linguistic resources like
WordNet to define the graph through synonym and
antonym relations (Kim and Hovy, 2004; Esuli and
Sabastiani, 2009; Blair-Goldensohn et al, 2008;
Rao and Ravichandran, 2009). The goal of this study
is to examine the size and quality of polarity lexi-
cons when the graph is induced automatically from
documents on the web.
Constructing a graph from web-computed lexi-
cal co-occurrence statistics is a difficult challenge
in and of itself and the research and implementa-
tion hurdles that arise are beyond the scope of this
work (Alfonseca et al, 2009; Pantel et al, 2009).
For this study, we used an English graph where the
node set V was based on all n-grams up to length
10 extracted from 4 billion web pages. This list was
filtered to 20 million candidate phrases using a num-
ber of heuristics including frequency and mutual in-
formation of word boundaries. A context vector for
each candidate phrase was then constructed based
on a window of size six aggregated over all men-
tions of the phrase in the 4 billion documents. The
edge set E was constructed by first, for each po-
tential edge (vi, vj), computing the cosine similar-
ity value between context vectors. All edges (vi, vj)
were then discarded if they were not one of the 25
highest weighted edges adjacent to either node vi or
vj . This serves to both reduce the size of the graph
and to eliminate many spurious edges for frequently
occurring phrases, while still keeping the graph rela-
tively connected. The weight of the remaining edges
was set to the corresponding cosine similarity value.
Since this graph encodes co-occurrences over a
large, but local context window, it can be noisy for
our purposes. In particular, we might see a number
of edges between positive and negative sentiment
words as well as sentiment words and non-sentiment
words, e.g., sentiment adjectives and all other adjec-
tives that are distributionally similar. Larger win-
dows theoretically alleviate this problem as they en-
code semantic as opposed to syntactic similarities.
We note, however, that the graph propagation al-
gorithm described above calculates the sentiment of
each phrase as the aggregate of all the best paths to
seed words. Thus, even if some local edges are erro-
neous in the graph, one hopes that, globally, positive
phrases will be influenced more by paths from pos-
itive seed words as opposed to negative seed words.
Section 3, and indeed this paper, aims to measure
whether this is true or not.
2.3 Why Not Label Propagation?
Previous studies on constructing polarity lexicons
from lexical graphs, e.g., Rao and Ravichandran
(2009), have used the label propagation algorithm,
which takes the form in Figure 2 (Zhu and Ghahra-
mani, 2002). Label propagation is an iterative algo-
rithm where each node takes on the weighted aver-
age of its neighbour?s values from the previous iter-
ation. The result is that nodes with many paths to
seeds get high polarities due to the influence from
their neighbours. The label propagation algorithm
is known to have many desirable properties includ-
ing convergence, a well defined objective function
779
Input: G = (V,E), wij ? [0, 1], P , N
Output: pol ? R|V |
Initialize: poli = 1.0 for all vi ? P and
poli = ?1.0 for all vi ? N and
poli = 0.0 ?vi /? P ?N
1. for : t .. T
2. poli =
P
(vi,vj)?E
wij?polj
P
(vi,vj)
wij
, ?vi ? V
3. reset poli = 1.0 ?vi ? P
reset poli = ?1.0 ?vi ? N
Figure 2: The label propagation algorithm (Zhu and
Ghahramani, 2002).
(minimize squared error between values of adjacent
nodes), and an equivalence to computing random
walks through graphs.
The primary difference between standard label
propagation and the graph propagation algorithm
given in Section 2.1, is that a node with multiple
paths to a seed will be influenced by all these paths
in the label propagation algorithm, whereas only the
single path from a seed will influence the polarity
of a node in our proposed propagation algorithm ?
namely the path with highest weight. The intuition
behind label propagation seems justified. That is, if
a node has multiple paths to a seed, it should be re-
flected in a higher score. This is certainly true when
the graph is of high quality and all paths trustwor-
thy. However, in a graph constructed from web co-
occurrence statistics, this is rarely the case.
Our graph consisted of many dense subgraphs,
each representing some semantic entity class, such
as actors, authors, tech companies, etc. Problems
arose when polarity flowed into these dense sub-
graphs with the label propagation algorithm. Ulti-
mately, this flow would amplify since the dense sub-
graph provided exponentially many paths from each
node to the source of the flow, which caused a re-
inforcement effect. As a result, the lexicon would
consist of large groups of actor names, companies,
etc. This also led to convergence issues since the
polarity is divided proportional to the size of the
dense subgraph. Additionally, negative phrases in
the graph appeared to be in more densely connected
regions, which resulted in the final lexicons being
highly skewed towards negative entries due to the
influence of multiple paths to seed words.
For best path propagation, these problems were
less acute as each node in the dense subgraph would
only get the polarity a single time from each seed,
which is decayed by the fact that edge weights are
smaller than 1. Furthermore, the fact that edge
weights are less than 1 results in most long paths
having weights near zero, which in turn results in
fast convergence.
3 Lexicon Evaluation
We ran the best path graph propagation algorithm
over a graph constructed from the web using manu-
ally constructed positive and negative seed sets of
187 and 192 words in size, respectively. These
words were generated by a set of five humans and
many are morphological variants of the same root,
e.g., excel/excels/excelled. The algorithm produced
a lexicon that contained 178,104 entries. Depending
on the threshold ? (see Figure 1), this lexicon could
be larger or smaller. As stated earlier, our selection
of ? and all hyperparameters was based on manual
inspection of the resulting lexicons and performance
on held-out data.
In the rest of this section we investigate the prop-
erties of this lexicon to understand both its general
characteristics as well as its possible utility in sen-
timent applications. To this end we compare three
different lexicons:
1. Wilson et al: Described in Wilson et al
(2005). Lexicon constructed by combining the
lexicon built in Riloff and Wiebe (2003) with
other sources1. Entries are are coarsely rated
? strong/weak positive/negative ? which we
weighted as 1.0, 0.5, -0.5, and -1.0 for our ex-
periments.
2. WordNet LP: Described in Blair-Goldensohn
et al (2008). Constructed using label propaga-
tion over a graph derived from WordNet syn-
onym and antonym links. Note that label prop-
agation is not prone to the kinds of errors dis-
cussed in Section 2.3 since the lexical graph is
derived from a high quality source.
3. Web GP: The web-derived lexicon described
in Section 2.1 and Section 2.2.
1See http://www.cs.pitt.edu/mpqa/
780
3.1 Qualitative Evaluation
Table 1 breaks down the lexicon by the number of
positive and negative entries of each lexicon, which
clearly shows that the lexicon derived from the web
is more than an order of magnitude larger than pre-
viously constructed lexicons.2 This in and of it-
self is not much of an achievement if the additional
phrases are of poor quality. However, in Section 3.2
we present an empirical evaluation that suggests that
these terms provide both additional and useful in-
formation. Table 1 also shows the recall of the each
lexicon relative to the other. Whereas the Wilson
et al (2005) and WordNet lexicon have a recall of
only 3% relative to the web lexicon, the web lexi-
con has a recall of 48% and 70% relative to the two
other lexicons, indicating that it contains a signifi-
cant amount of information from the other lexicons.
However, this overlap is still small, suggesting that
a combination of all the lexicons could provide the
best performance. In Section 3.2 we investigate this
empirically through a meta classification system.
Table 2 shows the distribution of phrases in the
web-derived lexicon relative to the number of to-
kens in each phrase. Here a token is simply defined
by whitespace and punctuation, with punctuation
counting as a token, e.g., ?half-baked? is counted as
3 tokens. For the most part, we see what one might
expect, as the number of tokens increases, the num-
ber of corresponding phrases in the lexicon also de-
creases. Longer phrases are less frequent and thus
will have both fewer and lower weighted edges to
adjacent nodes in the graph. There is a single phrase
of length 9, which is ?motion to dismiss for failure
to state a claim?. In fact, the lexicon contains quite
a number of legal and medical phrases. This should
not be surprising, since in a graph induced from the
web, a phrase like ?cancer? (or any disease) should
be distributionally similar to phrases like ?illness?,
?sick?, and ?death?, which themselves will be simi-
lar to standard sentiment phrases like ?bad? and ?ter-
rible?. These terms are predominantly negative in
the lexicon representing the broad notion that legal
and medical events are undesirable.
2This also includes the web-derived lexicon of (Kaji and Kit-
suregawa, 2007), which has 10K entries. A recent study by
Mohammad et al (2009) generated lexicons from thesauri with
76K entries.
Phrase length 1 2 3
# of phrases 37,449 108,631 27,822
Phrase length 4 5 6 7 8 9
# of phrases 3,489 598 71 29 4 1
Table 2: Number of phrases by phrase length in lexicon
built from the web.
Perhaps the most interesting characteristic of the
lexicon is that the most frequent phrase length is 2
and not 1. The primary reason for this is an abun-
dance of adjective phrases consisting of an adverb
and an adjective, such as ?more brittle? and ?less
brittle?. Almost every adjective of length 1 is fre-
quently combined in such a way on the web, so it
not surprising that we see many of these phrases
in the lexicon. Ideally we would see an order on
such phrases, e.g., ?more brittle? has a larger neg-
ative polarity than ?brittle?, which in turn has a
larger negative polarity than ?less brittle?. However,
this is rarely the case and usually the adjective has
the highest polarity magnitude. Again, this is eas-
ily explained. These phrases are necessarily more
common and will thus have more edges with larger
weights in the graph and thus a greater chance of ac-
cumulating a high sentiment score. The prominence
of such phrases suggests that a more principled treat-
ment of them should be investigated in the future.
Finally, Table 3 presents a selection of phrases
from both the positive and negative lexicons cate-
gorized into revealing verticals. For both positive
and negative phrases we present typical examples of
phrases ? usually adjectives ? that one would expect
to be in a sentiment lexicon. These are phrases not
included in the seed sets. We also present multiword
phrases for both positive and negative cases, which
displays concretely the advantage of building lexi-
cons from the web as opposed to using restricted lin-
guistic resources such as WordNet. Finally, we show
two special cases. The first is spelling variations
(and mistakes) for positive phrases, which were far
more prominent than for negative phrases. Many of
these correspond to social media text where one ex-
presses an increased level of sentiment by repeat-
ing characters. The second is vulgarity in negative
phrases, which was far more prominent than for pos-
itive phrases. Some of these are clearly appropri-
781
Recall wrt other lexicons
All Phrases Pos. Phrases Neg. Phrases Wilson et al WordNet LP Web GP
Wilson et al 7,628 2,718 4,910 100% 37% 2%
WordNet LP 12,310 5,705 6,605 21% 100% 3%
Web GP 178,104 90,337 87,767 70% 48% 100%
Table 1: Lexicon statistics. Wilson et al is the lexicon used in Wilson et al (2005), WordNet LP is the lexicon
constructed by Blair-Goldensohn et al (2008) that uses label propagation algorithms over a graph constructed through
WordNet, and Web GP is the web-derived lexicon from this study.
POSITIVE PHRASES NEGATIVE PHRASES
Typical Multiword expressions Spelling variations Typical Multiword expressions Vulgarity
cute once in a life time loveable dirty run of the mill fucking stupid
fabulous state - of - the - art nicee repulsive out of touch fucked up
cuddly fail - safe operation niice crappy over the hill complete bullshit
plucky just what the doctor ordered cooool sucky flash in the pan shitty
ravishing out of this world coooool subpar bumps in the road half assed
spunky top of the line koool horrendous foaming at the mouth jackass
enchanting melt in your mouth kewl miserable dime a dozen piece of shit
precious snug as a bug cozy lousy pie - in - the - sky son of a bitch
charming out of the box cosy abysmal sick to my stomach sonofabitch
stupendous more good than bad sikk wretched pain in my ass sonuvabitch
Table 3: Example positive and negative phrases from web lexicon.
ate, e.g., ?shitty?, but some are clearly insults and
outbursts that are most likely included due to their
co-occurrence with angry texts. There were also a
number of derogatory terms and racial slurs in the
lexicon, again most of which received negative sen-
timent due to their typical disparaging usage.
3.2 Quantitative Evaluation
To determine the practical usefulness of a polarity
lexicon derived from the web, we measured the per-
formance of the lexicon on a sentence classifica-
tion/ranking task. The input is a set of sentences and
the output is a classification of the sentences as be-
ing either positive, negative or neutral in sentiment.
Additionally, the system outputs two rankings, the
first a ranking of the sentence by positive polarity
and the second a ranking of the sentence by negative
polarity. Classifying sentences by their sentiment is
a subtask of sentiment aggregation systems (Hu and
Liu, 2004; Gamon et al, 2005). Ranking sentences
by their polarity is a critical sub-task in extractive
sentiment summarization (Carenini et al, 2006; Ler-
man et al, 2009).
To classify sentences as being positive, negative
or neutral, we used an augmented vote-flip algo-
rithm (Choi and Cardie, 2009), which is given in
Figure 3. This intuition behind this algorithm is sim-
ple. The number of matched positive and negative
phrases from the lexicon are counted and whichever
has the most votes wins. The algorithm flips the de-
cision if the number of negations is odd. Though this
algorithm appears crude, it benefits from not relying
on threshold values for neutral classification, which
is difficult due to the fact that the polarity scores in
the three lexicons are not on the same scale.
To rank sentences we defined the purity of a sen-
tence X as the normalized sum of the sentiment
scores for each phrase x in the sentence:
purity(X) =
?
x?X polx
? +
?
x?X |polx|
This is a normalized score in the range [?1, 1]. In-
tuitively, sentences with many terms of the same po-
larity will have purity scores at the extreme points of
the range. Before calculating purity, a simple nega-
tion heuristic was implemented that reversed the
sentiment scores of terms that were within the scope
of negations. The term ? helps to favor sentences
with multiple phrase matches. Purity is a common
metric used for ranking sentences for inclusion in
sentiment summaries (Lerman et al, 2009). Purity
and negative purity were used to rank sentences as
being positive and negative sentiment, respectively.
The data used in our initial English-only experi-
782
Lexicon Classifier Contextual Classifier
Positive Negative Positive Negative
P R AP P R AP P R AP P R AP
Wilson et al 56.4 61.8 60.8 58.1 39.0 59.7 74.5 70.3 76.2 80.7 70.1 81.2
WordNet LP 50.9 61.7 62.0 54.9 36.4 59.7 72.0 72.5 75.7 78.0 69.8 79.3
Web GP 57.7 65.1? 69.6? 60.3 42.9 68.5? 74.1 75.0? 79.9? 80.5 72.6? 82.9?
Meta Classifier - - - - - - 76.6? 74.7 81.2? 81.8? 72.2 84.1?
Table 4: Positive and negative precision (P), recall (R), and average precision (AP) for three lexicons using either
lexical matching or contextual classification strategies. ?Web GP is statistically significantly better than Wilson et al
and WordNet LP (p < 0.05). ?Meta Classifier is statistically significantly better than all other systems (p < 0.05).
Input: Scored lexicon pol, negation list NG,
input sentence X
Output: sentiment ? {POS, NEG, NEU}
1. set p, n, ng = 0
2. for x ? X
3. if polx > 0 then p++
4. else if polx < 0 then n++
5. else if x ? NG then ng++
6. flip = (ng % 2 == 1) //ng is odd
7. if (p > n & ?flip) ? (n > p & flip)
return POS
8. else if (p > n & flip) ? (n > p & ?flip)
return NEG
19. return NEU
Figure 3: Vote-flip algorithm (Choi and Cardie, 2009).
ments were a set of 554 consumer reviews described
in (McDonald et al, 2007). Each review was sen-
tence split and annotated by a human as being pos-
itive, negative or neutral in sentiment. This resulted
in 3,916 sentences, with 1,525, 1,542 and 849 posi-
tive, negative and neutral sentences, respectively.
The first six columns of Table 4 shows: 1) the pos-
itive/negative precision-recall of each lexicon-based
system where sentence classes were determined us-
ing the vote-flip algorithm, and 2) the average preci-
sion for each lexicon-based system where purity (or
negative purity) was used to rank sentences. Both
the Wilson et al and WordNet LP lexicons perform
at a similar level, with the former slightly better, es-
pecially in terms of precision. The web-derived lex-
icon, Web GP, outperforms the other two lexicons
across the board, in particular when looking at av-
erage precision, where the gains are near 10% ab-
solute. If we plot the precision-recall graphs using
purity to classify sentences ? as opposed to the vote-
flip algorithm, which only provides an unweighted
classification ? we can see that at almost all recall
levels the web-derived lexicon has superior preci-
sion to the other lexicons (Figure 4). Thus, even
though the web-derived lexicon is constructed from
a lexical graph that contains noise, the graph prop-
agation algorithms appear to be fairly robust to this
noise and are capable of producing large and accu-
rate polarity lexicons.
The second six columns of Table 4 shows the per-
formance of each lexicon as the core of a contextual
classifier (Wilson et al, 2005). A contextual classi-
fier is a machine learned classifier that predicts the
polarity of a sentence using features of that sentence
and its context. For our experiments, this was a max-
imum entropy classifier trained and evaluated us-
ing 10-fold cross-validation on the evaluation data.
The features included in the classifier were the pu-
rity score, the number of positive and negative lex-
icon matches, and the number of negations in the
sentence, as well as concatenations of these features
within the sentence and with the same features de-
rived from the sentences in a window of size 1.
For each sentence, the contextual classifier pre-
dicted either a positive, negative or neutral classifi-
cation based on the label with highest probability.
Additionally, all sentences were placed in the posi-
tive and negative sentence rankings by the probabil-
ity the classifier assigned to the positive and negative
classes, respectively. Mirroring the results of Wil-
son et al (2005), we see that contextual classifiers
improve results substantially over lexical matching.
More interestingly, we see that the a contextual clas-
sifier over the web-derived lexicons maintains the
performance edge over the other lexicons, though
the gap is smaller. Figure 5 plots the precision-recall
curves for the positive and negative sentence rank-
783
0 0.2 0.4 0.6 0.8 1Recall
0.4
0.5
0.6
0.7
0.8
0.9
1
Prec
ision
Wilson et alWordNet LPWeb GP
0 0.2 0.4 0.6 0.8 1Recall
0.4
0.5
0.6
0.7
0.8
0.9
1
Prec
ision
Wilson et alWordNet LPWeb GP
Figure 4: Lexicon classifier precision/recall curves for positive (left) and negative (right) classes.
0 0.2 0.4 0.6 0.8 1Recall
0.4
0.5
0.6
0.7
0.8
0.9
1
Prec
ision
Wilson et al CCWordNet LP CCWeb GP CCMeta Classifier
0 0.2 0.4 0.6 0.8 1Recall
0.4
0.5
0.6
0.7
0.8
0.9
1
Prec
ision
Wilson et al CCWordNet LP CCWeb GP CCMeta Classifier
Figure 5: Contextual classifier precision/recall curves for positive (left) and negative (right) classes
ings, again showing that at almost every level of re-
call, the web-derived lexicon has higher precision.
For a final English experiment we built a meta-
classification system that is identical to the contex-
tual classifiers, except it is trained using features de-
rived from all lexicons. Results are shown in the
last row of Table 4 and precision-recall curves are
shown in Figure 5. Not surprisingly, this system has
the best performance in terms of average precision
as it has access to the largest amount of information,
though its performance is only slightly better than
the contextual classifier for the web-derived lexicon.
4 Conclusions
In this paper we examined the viability of senti-
ment lexicons learned semi-automatically from the
web, as opposed to those that rely on manual anno-
tation and/or resources such as WordNet. Our quali-
tative experiments indicate that the web derived lex-
icon can include a wide range of phrases that have
not been available to previous systems, most no-
tably spelling variations, slang, vulgarity, and multi-
word expressions. Quantitatively, we observed that
the web derived lexicon had superior performance
to previously published lexicons for English clas-
sification. Ultimately, a meta classifier that incor-
porates features from all lexicons provides the best
performance. In the future we plan to investigate the
construction of web-derived lexicons for languages
other than English, which is an active area of re-
search (Mihalcea et al, 2007; Jijkoun and Hofmann,
2009; Rao and Ravichandran, 2009). The advantage
of the web-derived lexicons studied here is that they
do not rely on language specific resources besides
unlabeled data and seed lists. A primary question is
whether such lexicons improve performance over a
translate-to-English strategy (Banea et al, 2008).
Acknowledgements: The authors thank Andrew
Hogue, Raj Krishnan and Deepak Ravichandran for
insightful discussions about this work.
784
References
E. Alfonseca, K. Hall, and S. Hartmann. 2009. Large-
scale computation of distributional similarities for
queries. In Proceedings of the North American Chap-
ter of the Association for Computational Linguistics
(NAACL-HLT).
C. Banea, R. Mihalcea, J. Wiebe, and S. Hassan. 2008.
Multilingual subjectivity analysis using machine trans-
lation. In Proceedings of the Conference on Empirical
Methods in Natural Language Processing (EMNLP).
S. Blair-Goldensohn, K. Hannan, R. McDonald, T. Ney-
lon, G.A. Reis, and J. Reynar. 2008. Building a senti-
ment summarizer for local service reviews. In NLP in
the Information Explosion Era.
G. Carenini, R. Ng, and A. Pauls. 2006. Multi-document
summarization of evaluative text. In Proceedings of
the European Chapter of the Association for Compu-
tational Linguistics (EACL).
Y. Choi and C. Cardie. 2009. Adapting a polarity lexicon
using integer linear programming for domain-specific
sentiment classification. In Proceedings of the Confer-
ence on Empirical Methods in Natural Language Pro-
cessing (EMNLP).
S.R. Das and M.Y. Chen. 2007. Yahoo! for Amazon:
Sentiment extraction from small talk on the web. Man-
agement Science, 53(9):1375?1388.
A Esuli and F. Sabastiani. 2009. SentiWordNet: A pub-
licly available lexical resource for opinion mining. In
Proceedings of the Language Resource and Evaluation
Conference (LREC).
M. Gamon, A. Aue, S. Corston-Oliver, and E. Ringger.
2005. Pulse: Mining customer opinions from free text.
In Proceedings of the 6th International Symposium on
Intelligent Data Analysis (IDA).
V. Hatzivassiloglou and K.R. McKeown. 1997. Predict-
ing the semantic orientation of adjectives. In Proceed-
ings of the European Chapter of the Association for
Computational Linguistics (EACL).
M. Hu and B. Liu. 2004. Mining and summarizing cus-
tomer reviews. In Proceedings of the International
Conference on Knowledge Discovery and Data Min-
ing (KDD).
V.B. Jijkoun and K. Hofmann. 2009. Generating a non-
english subjectivity lexicon: Relations that matter. In
Proceedings of the European Chapter of the Associa-
tion for Computational Linguistics (EACL).
N. Kaji and M. Kitsuregawa. 2007. Building lexicon for
sentiment analysis from massive collection of HTML
documents. In Proceedings of the Joint Conference
on Empirical Methods in Natural Language Process-
ing and Computational Natural Language Learning
(EMNLP-CoNLL).
S.M. Kim and E. Hovy. 2004. Determining the senti-
ment of opinions. In Proceedings of the International
Conference on Computational Linguistics (COLING).
Kevin Lerman, Sasha Blair-Goldensohn, and Ryan Mc-
Donald. 2009. Sentiment summarization: Evaluat-
ing and learning user preferences. In Proceedings of
the European Chapter of the Association for Compu-
tational Linguistics (EACL).
R. McDonald, K. Hannan, T. Neylon, M. Wells, and
J. Reynar. 2007. Structured models for fine-to-coarse
sentiment analysis. In Proceedings of the Annual Con-
ference of the Association for Computational Linguis-
tics (ACL).
R. Mihalcea, C. Banea, and J. Wiebe. 2007. Learning
multilingual subjective language via cross-lingual pro-
jections. In Proceedings of the Annual Conference of
the Association for Computational Linguistics (ACL).
S. Mohammad, B. Dorr, and C. Dunne. 2009. Generat-
ing high-coverage semantic orientation lexicons from
overtly marked words and a thesaurus. In Proceedings
of the Conference on Empirical Methods in Natural
Language Processing (EMNLP).
B. Pang, L. Lee, and S. Vaithyanathan. 2002. Thumbs
up? Sentiment classification using machine learn-
ing techniques. In Proceedings of the Conference on
Empirical Methods in Natural Language Processing
(EMNLP).
P. Pantel, E. Crestan, A. Borkovsky, A. Popescu, and
V. Vyas. 2009. Web-scale distributional similarity and
entity set expansion. In Proceedings of Conference on
Empirical Methods in Natural Language Processing
(EMNLP).
D. Rao and D. Ravichandran. 2009. Semi-Supervised
Polarity Lexicon Induction. In Proceedings of the Eu-
ropean Chapter of the Association for Computational
Linguistics (EACL).
E. Riloff and J. Wiebe. 2003. Learning extraction pat-
terns for subjective expressions. In Proceedings of
the Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP).
P. Turney. 2002. Thumbs up or thumbs down? Sentiment
orientation applied to unsupervised classification of re-
views. In Proceedings of the Annual Conference of the
Association for Computational Linguistics (ACL).
J. Wiebe. 2000. Learning subjective adjectives from cor-
pora. In Proceedings of the National Conference on
Artificial Intelligence (AAAI).
T. Wilson, J. Wiebe, and P. Hoffmann. 2005. Recogniz-
ing contextual polarity in phrase-level sentiment anal-
ysis. In Proceedings of the Conference on Empirical
Methods in Natural Language Processing (EMNLP).
X. Zhu and Z. Ghahramani. 2002. Learning from labeled
and unlabeled data with label propagation. Technical
report, CMU CALD tech report CMU-CALD-02.
785
Proceedings of the Workshop on Negation and Speculation in Natural Language Processing, pages 51?59,
Uppsala, July 2010.
What?s Great and What?s Not: Learning to Classify the Scope of Negation
for Improved Sentiment Analysis
Isaac G. Councill
Google, Inc.
76 Ninth Avenue
New York, NY 10011
icouncill@google.com
Ryan McDonald
Google, Inc.
76 Ninth Avenue
New York, NY 10011
ryanmcd@google.com
Leonid Velikovich
Google, Inc.
76 Ninth Avenue
New York, NY 10011
leonidv@google.com
Abstract
Automatic detection of linguistic negation
in free text is a critical need for many text
processing applications, including senti-
ment analysis. This paper presents a nega-
tion detection system based on a condi-
tional random field modeled using fea-
tures from an English dependency parser.
The scope of negation detection is limited
to explicit rather than implied negations
within single sentences. A new negation
corpus is presented that was constructed
for the domain of English product reviews
obtained from the open web, and the pro-
posed negation extraction system is eval-
uated against the reviews corpus as well
as the standard BioScope negation corpus,
achieving 80.0% and 75.5% F1 scores, re-
spectively. The impact of accurate nega-
tion detection on a state-of-the-art senti-
ment analysis system is also reported.
1 Introduction
The automatic detection of the scope of linguistic
negation is a problem encountered in wide variety
of document understanding tasks, including but
not limited to medical data mining, general fact or
relation extraction, question answering, and senti-
ment analysis. This paper describes an approach
to negation scope detection in the context of sen-
timent analysis, particularly with respect to sen-
timent expressed in online reviews. The canoni-
cal need for proper negation detection in sentiment
analysis can be expressed as the fundamental dif-
ference in semantics inherent in the phrases, ?this
is great,? versus, ?this is not great.? Unfortunately,
expressions of negation are not always so syntac-
tically simple.
Linguistic negation is a complex topic: there
are many forms of negation, ranging from the use
of explicit cues such as ?no? or ?not? to much
more subtle linguistic patterns. At the highest
structural level, negations may occur in two forms
(Givo?n, 1993): morphological negations, where
word roots are modified with a negating prefix
(e.g., ?dis-?, ?non-?, or ?un-?) or suffix (e.g., ?-
less?), and syntactic negation, where clauses are
negated using explicitly negating words or other
syntactic patterns that imply negative semantics.
For the purposes of negation scope detection, only
syntactic negations are of interest, since the scope
of any morphological negation is restricted to an
individual word. Morphological negations are
very important when constructing lexicons, which
is a separate but related research topic.
Tottie (1991) presents a comprehensive taxon-
omy of clausal English negations, where each
form represents unique challenges for a negation
scope detection system. The top-level negation
categories ? denials, rejections, imperatives, ques-
tions, supports, and repetitions ? can be described
as follows:
? Denials are the most common form and are
typically unambiguous negations of a partic-
ular clause, such as, ?There is no question
that the service at this restaurant is excellent,?
or, ?The audio system on this television is not
very good, but the picture is amazing.?
? Rejections often occur in discourse, where
one participant rejects an offer or sugges-
tion of another, e.g., ?Can I get you any-
thing else? No.? However, rejections may ap-
pear in expository text where a writer explic-
itly rejects a previous supposition or expec-
tation, for instance, ?Given the poor reputa-
tion of the manufacturer, I expected to be dis-
appointed with the device. This was not the
case.?
? Imperatives involve directing an audience
51
away from a particular action, e.g., ?Do not
neglect to order their delicious garlic bread.?
? Questions, rhetorical or otherwise, can indi-
cate negations often in the context of surprise
or bewilderment. For example, a reviewer of
a desk phone may write, ?Why couldn?t they
include a decent speaker in this phone??, im-
plying that the phone being reviewed does not
have a decent speaker.
? Supports and Repetitions are used to ex-
press agreement and add emphasis or clar-
ity, respectively, and each involve multiple
expressions of negation. For the purpose of
negation scope detection, each instance of
negation in a support or repetition can be iso-
lated and treated as an independent denial or
imperative.
Tottie also distinguishes between intersenten-
tial and sentential negation. In the case of inter-
sentential negation, the language used in one sen-
tence may explicitly negate a proposition or impli-
cation found in another sentence. Rejections and
supports are common examples of intersentential
negation. Sentential negation, or negations within
the scope of a single sentence, are much more
frequent; thus sentential denials, imperatives, and
questions are the primary focus of the work pre-
sented here.
The goal of the present work is to develop a sys-
tem that is robust to differences in the intended
scope of negation introduced by the syntactic and
lexical features in each negation category. In par-
ticular, as the larger context of this research in-
volves sentiment analysis, it is desirable to con-
struct a negation system that can correctly identify
the presence or absence of negation in spans of text
that are expressions of sentiment. It so follows that
in developing a solution for the specific case of the
negation of sentiment, the proposed system is also
effective at solving the general case of negation
scope identification.
This rest of this paper is organized as follows.
?2 presents related work on the topic of auto-
matic detection of the scope of linguistic nega-
tions. The annotated corpora used to evaluate
the proposed negation scope identification method
are presented in ?3, including a new data set de-
veloped for the purpose of identifying negation
scopes in the context of online reviews. ?4 de-
scribes the proposed negation scope detection sys-
tem. The novel system is evaluated in ?5 in
terms of raw results on the annotated negation cor-
pora as well as the performance improvement on
sentiment classification achieved by incorporating
the negation system in a state-of-the-art sentiment
analysis pipeline. Lessons learned and future di-
rections are discussed in ?6.
2 Related work
Negation and its scope in the context of senti-
ment analysis has been studied in the past (Moila-
nen and Pulman, 2007). In this work we focus
on explicit negation mentions, also called func-
tional negation by Choi and Cardie (2008). How-
ever, others have studied various forms of nega-
tion within the domain of sentiment analysis, in-
cluding work on content negators, which typi-
cally are verbs such as ?hampered?, ?lacked?, ?de-
nied?, etc. (Moilanen and Pulman, 2007; Choi
and Cardie, 2008). A recent study by Danescu-
Niculescu-Mizil et al (2009) looked at the prob-
lem of finding downward-entailing operators that
include a wider range of lexical items, includ-
ing soft negators such as the adverbs ?rarely? and
?hardly?.
With the absence of a general purpose corpus
annotating the precise scope of negation in sen-
timent corpora, many studies incorporate nega-
tion terms through heuristics or soft-constraints in
statistical models. In the work of Wilson et al
(2005), a supervised polarity classifier is trained
with a set of negation features derived from a
list of cue words and a small window around
them in the text. Choi and Cardie (2008) com-
bine different kinds of negators with lexical polar-
ity items through various compositional semantic
models, both heuristic and machine learned, to im-
prove phrasal sentiment analysis. In that work the
scope of negation was either left undefined or de-
termined through surface level syntactic patterns
similar to the syntactic patterns from Moilanen
and Pulman (2007). A recent study by Nakagawa
et al (2010) developed an semi-supervised model
for sub-sentential sentiment analysis that predicts
polarity based on the interactions between nodes
in dependency graphs, which potentially can in-
duce the scope of negation.
As mentioned earlier, the goal of this work is to
define a system that can identify exactly the scope
of negation in free text, which requires a robust-
ness to the wide variation of negation expression,
52
both syntactic and lexical. Thus, this work is com-
plimentary to those mentioned above in that we
are measuring not only whether negation detec-
tion is useful for sentiment, but to what extent we
can determine its exact scope in the text. Towards
this end in we describe both an annotated nega-
tion span corpus as well as a negation span detec-
tor that is trained on the corpus. The span detec-
tor is based on conditional random fields (CRFs)
(Lafferty, McCallum, and Pereira, 2001), which is
a structured prediction learning framework com-
mon in sub-sentential natural language process-
ing tasks, including sentiment analysis (Choi and
Cardie, 2007; McDonald et al, 2007)
The approach presented here resembles work by
Morante and Daelemans (2009), who used IGTree
to predict negation cues and a CRF metalearner
that combined input from k-nearest neighbor clas-
sification, a support vector machine, and another
underlying CRF to predict the scope of nega-
tions within the BioScope corpus. However, our
work represents a simplified approach that re-
places machine-learned cue prediction with a lex-
icon of explicit negation cues, and uses only a sin-
gle CRF to predict negation scopes, with a more
comprehensive model that includes features from
a dependency parser.
3 Data sets
One of the only freely available resources for eval-
uating negation detection performance is the Bio-
Scope corpus (Vincze et al, 2008), which consists
of annotated clinical radiology reports, biological
full papers, and biological abstracts. Annotations
in BioScope consist of labeled negation and spec-
ulation cues along with the boundary of their as-
sociated text scopes. Each cue is associated with
exactly one scope, and the cue itself is considered
to be part of its own scope. Traditionally, negation
detection systems have encountered the most dif-
ficulty in parsing the full papers subcorpus, which
contains nine papers and a total of 2670 sentences,
and so the BioScope full papers were held out as a
benchmark for the methods presented here.
The work described in this paper was part of a
larger research effort to improve the accuracy of
sentiment analysis in online reviews, and it was
determined that the intended domain of applica-
tion would likely contain language patterns that
are significantly distinct from patterns common in
the text of professional biomedical writings. Cor-
rect analysis of reviews generated by web users
requires robustness in the face of ungrammatical
sentences and misspelling, which are both exceed-
ingly rare in BioScope. Therefore, a novel cor-
pus was developed containing the text of entire
reviews, annotated according to spans of negated
text.
A sample of 268 product reviews were obtained
by randomly sampling reviews from Google Prod-
uct Search1 and checking for the presence of nega-
tion. The annotated corpus contains 2111 sen-
tences in total, with 679 sentences determined to
contain negation. Each review was manually an-
notated with the scope of negation by a single per-
son, after achieving inter-annotator agreement of
91% with a second person on a smaller subset of
20 reviews containing negation. Inter-annotator
agreement was calculated using a strict exact span
criteria where both the existence and the left/right
boundaries of a negation span were required to
match. Hereafter the reviews data set will be re-
ferred to as the Product Reviews corpus.
The Product Reviews corpus was annotated ac-
cording to the following instructions:
1. Negation cues: Negation cues (e.g., the
words ?never?, ?no?, or ?not? in it?s various
forms) are not included the negation scope.
For example, in the sentence, ?It was not X?
only ?X? is annotated as the negation span.
2. General Principles: Annotate the minimal
span of a negation covering only the portion
of the text being negated semantically. When
in doubt, prefer simplicity.
3. Noun phrases: Typically entire noun
phrases are annotated as within the scope
of negation if a noun within the phrase is
negated. For example, in the sentence, ?This
was not a review? the string ?a review? is an-
notated. This is also true for more complex
noun phrases, e.g., ?This was not a review
of a movie that I watched? should be anno-
tated with the span ?a review of a movie that
I watched?.
4. Adjectives in noun phrases: Do not anno-
tate an entire noun phrase if an adjective is all
that is being negated - consider the negation
of each term separately. For instance, ?Not
1http://www.google.com/products/
53
top-drawer cinema, but still good...?: ?top-
drawer? is negated, but ?cinema? is not, since
it is still cinema, just not ?top-drawer?.
5. Adverbs/Adjective phrases:
(a) Case 1: Adverbial comparatives like
?very,? ?really,? ?less,? ?more?, etc., an-
notate the entire adjective phrase, e.g.,
?It was not very good? should be anno-
tated with the span ?very good?.
(b) Case 2: If only the adverb is directly
negated, only annotate the adverb it-
self. E.g., ?Not only was it great?, or
?Not quite as great?: in both cases the
subject still ?is great?, so just ?only?
and ?quite? should be annotated, respec-
tively. However, there are cases where
the intended scope of adverbial negation
is greater, e.g., the adverb phrase ?just a
small part? in ?Tony was on stage for the
entire play. It was not just a small part?.
(c) Case 3: ?as good as X?. Try to identify
the intended scope, but typically the en-
tire phrase should be annotated, e.g., ?It
was not as good as I remember?. Note
that Case 2 and 3 can be intermixed,
e.g., ?Not quite as good as I remem-
ber?, in this case follow 2 and just anno-
tate the adverb ?quite?, since it was still
partly ?as good as I remember?, just not
entirely.
6. Verb Phrases: If a verb is directly negated,
annotate the entire verb phrase as negated,
e.g., ?appear to be red? would be marked in
?It did not appear to be red?.
For the case of verbs (or adverbs), we made no
special instructions on how to handle verbs that
are content negators. For example, for the sen-
tence ?I can?t deny it was good?, the entire verb
phrase ?deny it was good? would be marked as the
scope of ?can?t?. Ideally annotators would also
mark the scope of the verb ?deny?, effectively can-
celing the scope of negation entirely over the ad-
jective ?good?. As mentioned previously, there are
a wide variety of verbs and adverbs that play such
a role and recent studies have investigated meth-
ods for identifying them (Choi and Cardie, 2008;
Danescu-Niculescu-Mizil et al, 2009). We leave
the identification of the scope of such lexical items
hardly lack lacking lacks
neither nor never no
nobody none nothing nowhere
not n?t aint cant
cannot darent dont doesnt
didnt hadnt hasnt havnt
havent isnt mightnt mustnt
neednt oughtnt shant shouldnt
wasnt wouldnt without
Table 1: Lexicon of explicit negation cues.
and their interaction with explicit negation as fu-
ture work.
The Product Reviews corpus is different from
BioScope in several ways. First, BioScope ignores
direct adverb negation, such that neither the nega-
tion cue nor the negation scope in the the phrase,
?not only,? is annotated in BioScope. Second,
BioScope annotations always include entire adjec-
tive phrases as negated, where our method distin-
guishes between the negation of adjectives and ad-
jective targets. Third, BioScope includes nega-
tion cues within their negation scopes, whereas
our corpus separates the two.
4 System description
As the present work focuses on explicit negations,
the choice was made to develop a lexicon of ex-
plicit negation cues to serve as primary indicators
of the presence of negation. Klima (1964) was the
first to identify negation words using a statistics-
driven approach, by analyzing word co-occurrence
with n-grams that are cues for the presence of
negation, such as ?either? and ?at all?. Klima?s
lexicon served as a starting point for the present
work, and was further refined through the inclu-
sion of common misspellings of negation cues and
the manual addition of select cues from the ?Neg?
and ?Negate? tags of the General Inquirer (Stone
et al, 1966). The final list of cues used for the
evaluations in ?5 is presented in Table 1. The lex-
icon serves as a reliable signal to detect the pres-
ence of explicit negations, but provides no means
of inferring the scope of negation. For scope de-
tection, additional signals derived from surface
and dependency level syntactic structure are em-
ployed.
The negation scope detection system is built as
an individual annotator within a larger annotation
pipeline. The negation annotator relies on two dis-
54
tinct upstream annotators for 1) sentence boundary
annotations, derived from a rule-based sentence
boundary extractor and 2) token annotations from
a dependency parser. The dependency parser is an
implementation of the parsing systems described
in Nivre and Scholz (2004) and Nivre et al (2007).
Each annotator marks the character offsets for the
begin and end positions of individual annotation
ranges within documents, and makes the annota-
tions available to downstream processes.
The dependency annotator controls multiple
lower-level NLP routines, including tokenization
and part of speech (POS) tagging in addition to
parsing sentence level dependency structure. The
output that is kept for downstream use includes
only POS and dependency relations for each to-
ken. The tokenization performed at this stage is re-
cycled when learning to identify negation scopes.
The feature space of the learning problem ad-
heres to the dimensions presented in Table 2,
and negation scopes are modeled using a first or-
der linear-chain conditional random field (CRF)2,
with a label set of size two indicating whether a
token is within or outside of a negation span. The
features include the lowercased token string, token
POS, token-wise distance from explicit negation
cues, POS information from dependency heads,
and dependency distance from dependency heads
to explicit negation cues. Only unigram features
are employed, but each unigram feature vector is
expanded to include bigram and trigram represen-
tations derived from the current token in conjunc-
tion with the prior and subsequent tokens.
The distance measures can be explained as fol-
lows. Token-wise distance is simply the number
of tokens from one token to another, in the order
they appear in a sentence. Dependency distance is
more involved, and is calculated as the minimum
number of edges that must be traversed in a de-
pendency tree to move from one node (or token)
to another. Each edge is considered to be bidi-
rectional. The CRF implementation used in our
system employs categorical features, so both inte-
ger distances are treated as encodings rather than
continuous values. The number 0 implies that a
token is, or is part of, an explicit negation cue.
The numbers 1-4 encode step-wise distance from
a negation cue, and the number 5 is used to jointly
encode the concepts of ?far away? and ?not appli-
cable?. The maximum integer distance is 5, which
2Implemented with CRF++: http://crfpp.sourceforge.net/
Feature Description
Word The lowercased token string.
POS The part of speech of a token.
Right Dist. The linear token-wise distance to
the nearest explicit negation cue
to the right of a token.
Left Dist. The linear token-wise distance to
the nearest explicit negation cue
to the left of a token.
Dep1 POS The part of speech of the the first
order dependency of a token.
Dep1 Dist. The minimum number of depen-
dency relations that must be tra-
versed to from the first order de-
pendency head of a token to an
explicit negation cue.
Dep2 POS The part of speech of the the sec-
ond order dependency of a token.
Dep2 Dist. The minimum number of depen-
dency relations that must be tra-
versed to from the second order
dependency head of a token to an
explicit negation cue.
Table 2: Token features used in the conditional
random field model for negation.
was determined empirically.
The negation annotator vectorizes the tokens
generated in the dependency parser annotator and
can be configured to write token vectors to an out-
put stream (training mode) or load a previously
learned conditional random field model and ap-
ply it by sending the token vectors directly to the
CRF decoder (testing mode). The output annota-
tions include document-level negation span ranges
as well as sentence-level token ranges that include
the CRF output probability vector, as well as the
alpha and beta vectors.
5 Results
The negation scope detection system was evalu-
ated against the data sets described in ?3. The
negation CRF model was trained and tested
against the Product Reviews and BioScope biolog-
ical full papers corpora. Subsequently, the practi-
cal effect of robust negation detection was mea-
sured in the context of a state-of-the-art sentiment
analysis system.
55
Corpus Prec. Recall F1 PCS
Reviews 81.9 78.2 80.0 39.8
BioScope 80.8 70.8 75.5 53.7
Table 3: Results of negation scope detection.
5.1 Negation Scope Detection
To measure scope detection performance, the
automatically generated results were compared
against each set of human-annotated negation cor-
pora in a token-wise fashion. That is, precision
and recall were calculated as a function of the pre-
dicted versus actual class of each text token. To-
kens made up purely of punctuation were consid-
ered to be arbitrary artifacts of a particular tok-
enization scheme, and thus were excluded from
the results. In keeping with the evaluation pre-
sented by Morante and Daelemans (2009), the
number of perfectly identified negation scopes is
measured separately as the percentage of correct
scopes (PCS). The PCS metric is calculated as the
number of correct spans divided by the number of
true spans, making it a recall measure.
Only binary classification results were consid-
ered (whether a token is of class ?negated? or ?not
negated?) even though the probabilistic nature of
conditional random fields makes it possible to ex-
press uncertainty in terms of soft classification
scores in the range 0 to 1. Correct predictions of
the absence of negation are excluded from the re-
sults, so the reported measurements only take into
account correct prediction of negation and incor-
rect predictions of either class.
The negation scope detection results for both
the Product Reviews and BioScope corpora are
presented in Table 3. The results on the Product
Reviews corpus are based on seven-fold cross vali-
dation, and the BioScope results are based on five-
fold cross validation, since the BioScope data set
is smaller. For each fold, the number of sentences
with and without negation were balanced in both
training and test sets.
The system was designed primarily to support
the case of negation scope detection in the open
web, and no special considerations were taken to
improve performance on the BioScope corpus. In
particular, the negation cue lexicon presented in
Table 1 was not altered in any way, even though
BioScope contains additional cues such as ?rather
than? and ?instead of?. This had a noticeable ef-
fect on on recall in BioScope, although in several
Condition Prec. Recall F1 PCS
BioScope,
trained on
Reviews
72.2 42.1 53.5 52.2
Reviews,
trained on
Bioscope
58.8 68.8 63.4 45.7
Table 4: Results for cross-trained negation mod-
els. This shows the results for BioScope with
a model trained on the Product Reviews corpus,
and the results for Product Reviews with a model
trained on the BioScope corpus.
cases the CRF was still able to learn the missing
cues indirectly through lexical features.
In general, the system performed significantly
better on the Product Reviews corpus than on Bio-
Scope, although the performance on BioScope full
papers is state-of-the-art. This can be accounted
for at least partially by the differences in the nega-
tion cue lexicons. However, significantly more
negation scopes were perfectly identified in Bio-
Scope, with a 23% improvement in the PCS metric
over the Product Reviews corpus.
The best reported performance to date on the
BioScope full papers corpus was presented by
Morante and Daelemans (2009), who achieved an
F1 score of 70.9 with predicted negation signals,
and an F1 score of 84.7 by feeding the manually
annotated negation cues to their scope finding sys-
tem. The system presented here compares favor-
ably to Morante and Daelemans? fully automatic
results, achieving an F1 score of 75.5, which is
a 15.8% reduction in error, although the results
are significantly worse than what was achieved via
perfect negation cue information.
5.2 Cross training
The degree to which models trained on each
corpus generalized to each other was also mea-
sured. For this experiment, each of the two mod-
els trained using the methods described in ?5.1
was evaluated against its non-corresponding cor-
pus, such that the BioScope-trained corpus was
evaluated against all of Product Reviews, and the
model derived from Product Reviews was evalu-
ated against all of BioScope.
The cross training results are presented in Ta-
ble 4. Performance is generally much worse, as
expected. Recall drops substantially in BioScope,
56
which is almost certainly due to the fact that not
only are several of the BioScope negation cues
missing from the cue lexicon, but the CRF model
has not had the opportunity to learn from the lex-
ical features in BioScope. The precision in Bio-
Scope remains fairly high, and the percentage of
perfectly labeled scopes remains almost the same.
For Product Reviews, an opposing trend can be
seen: precision drops significantly but recall re-
mains fairly high. This seems to indicate that the
scope boundaries in the Product Reviews corpus
are generally harder to predict. The percentage
of perfectly labeled scopes actually increases for
Product Reviews, which could also indicate that
scope boundaries are less noisy in BioScope.
5.3 Effect on sentiment classification
In addition to measuring the raw performance of
the negation scope detection system, an experi-
ment was conducted to measure the effect of the
final negation system within the context of a larger
sentiment analysis system.
The negation system was built into a senti-
ment analysis pipeline consisting of the following
stages:
1. Sentence boundary detection.
2. Sentiment detection.
3. Negation scope detection, applying the sys-
tem described in ?4.
4. Sentence sentiment scoring.
The sentiment detection system in stage 2 finds
and scores mentions of n-grams found in a large
lexicon of sentiment terms and phrases. The sen-
timent lexicon is based on recent work using label
propagation over a very large distributional simi-
larity graph derived from the web (Velikovich et
al., 2010), and applies positive or negative scores
to terms such as ?good?, ?bad?, or ?just what the
doctor ordered?. The sentence scoring system in
stage 4 then determines whether any scored senti-
ment terms fall within the scope of a negation, and
flips the sign of the sentiment score for all negated
sentiment terms. The scoring system then sums all
sentiment scores within each sentence and com-
putes overall sentence sentiment scores.
A sample of English-language online reviews
was collected, containing a total of 1135 sen-
tences. Human raters were presented with consec-
utive sentences and asked to classify each sentence
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7
0.4
0.5
0.6
0.7
0.8
0.9
1
Recall
Pr
ec
isi
on
 
 
With Negation Detection
Without Negation Detection
Figure 1: Precision-recall curve showing the effect
of negation detection on positive sentiment predic-
tion.
as expressing one of the following types of sen-
timent: 1) positive, 2) negative, 3) neutral, or 4)
mixed positive and negative. Each sentence was
reviewed independently by five separate raters,
and final sentence classification was determined
by consensus. Of the original 1135 sentences 216,
or 19%, were found to contain negations.
The effect of the negation system on sentiment
classification was evaluated on the smaller subset
of 216 sentences in order to more precisely mea-
sure the impact of negation detection. The smaller
negation subset contained 73 sentences classified
as positive, 114 classified as negative, 12 classified
as neutral, and 17 classified as mixed. The num-
ber of sentences classified as neutral or mixed was
too small for a useful performance measurement,
so only sentences classified as positive or negative
sentences were considered.
Figures 1 and 2 show the precision-recall curves
for sentences predicted by the sentiment analysis
system to be positive and negative, respectively.
The curves indicate relatively low performance,
which is consistent with the fact that sentiment
polarity detection is notoriously difficult on sen-
tences with negations. The solid lines show per-
formance with the negation scope detection sys-
tem in place, and the dashed lines show perfor-
mance with no negation detection at all. From
the figures, a significant improvement is immedi-
ately apparent at all recall levels. It can also be
inferred from the figures that the sentiment analy-
sis system is significantly biased towards positive
predictions: even though there were significantly
more sentences classified by human raters as neg-
57
0 0.05 0.1 0.15 0.2 0.25 0.3 0.35
0.65
0.7
0.75
0.8
0.85
0.9
0.95
1
Recall
Pr
ec
isi
on
 
 
With Negation Detection
Without Negation Detection
Figure 2: Precision-recall curve showing the ef-
fect of negation detection on negative sentiment
prediction.
Metric w/o Neg. w/ Neg. % Improv.
Positive Sentiment
Prec. 44.0 64.1 35.9
Recall 54.8 63.7 20.0
F1 48.8 63.9 29.5
Negative Sentiment
Prec. 68.6 83.3 46.8
Recall 21.1 26.3 6.6
F1 32.3 40.0 11.4
Table 5: Sentiment classification results, show-
ing the percentage improvement obtained from in-
cluding negation scope detection (w/ Neg.) over
results obtained without including negation scope
detection (w/o Neg.).
ative, the number of data points for positive pre-
dictions far exceeds the number of negative pre-
dictions, with or without negation detection.
The overall results are presented in Table 5, sep-
arated by positive and negative class predictions.
As expected, performance is improved dramati-
cally by introducing negation scope detection. The
precision of positive sentiment predictions sees the
largest improvement, largely due to the inherent
bias in the sentiment scoring algorithm. F1 scores
for positive and negative sentiment predictions im-
prove by 29.5% and 11.4%, respectively.
6 Conclusions
This paper presents a system for identifying the
scope of negation using shallow parsing, by means
of a conditional random field model informed by
a dependency parser. Results were presented on
the standard BioScope corpus that compare favor-
ably to the best results reported to date, using a
software stack that is significantly simpler than the
best-performing approach.
A new data set was presented that targets the
domain of online product reviews. The product re-
view corpus represents a departure from the stan-
dard BioScope corpus in two distinct dimensions:
the reviews corpus contains diverse common and
vernacular language patterns rather than profes-
sional prose, and also presents a divergent method
for annotating negations in text. Cross-training by
learning a model on one corpus and testing on an-
other suggests that scope boundary detection in the
product reviews corpus may be a more difficult
learning problem, although the method used to an-
notate the reviews corpus may result in a more
consistent representation of the problem.
Finally, the negation system was built into a
state-of-the-art sentiment analysis system in order
to measure the practical impact of accurate nega-
tion scope detection, with dramatic results. The
negation system improved the precision of positive
sentiment polarity detection by 35.9% and nega-
tive sentiment polarity detection by 46.8%. Error
reduction on the recall measure was less dramatic,
but still significant, showing improved recall for
positive polarity of 20.0% and improved recall for
negative polarity of 6.6%.
Future research will include treatment of im-
plicit negation cues, ideally by learning to predict
the presence of implicit negation using a prob-
abilistic model that generates meaningful confi-
dence scores. A related topic to be addressed
is the automatic detection of sarcasm, which is
an important problem for proper sentiment anal-
ysis, particularly in open web domains where lan-
guage is vernacular. Additionally, we would like
to tackle the problem of inter-sentential negations,
which could involve a natural extension of nega-
tion scope detection through co-reference resolu-
tion, such that negated pronouns trigger negations
in text surrounding their pronoun antecedents.
Acknowledgments
The authors would like to thank Andrew Hogue
and Kerry Hannan for useful discussions regarding
this work.
58
References
Yejin Choi and Claire Cardie. 2007. Structured Lo-
cal Training and Biased Potential Functions for Con-
ditional Random Fields with Application to Coref-
erence Resolution. Proceedings of The 9th Con-
ference of the North American Chapter of the As-
sociation for Computational Linguistics, ACL,
Rochester, NY.
Yejin Choi and Claire Cardie. 2008. Learning with
Compositional Semantics as Structural Inference for
Subsentential Sentiment Analysis. Proceedings of
the Conference on Empirical Methods on Natural
Language Processing. ACL, Honolulu, HI.
Cristian Danescu-Niculescu-Mizil, Lillian Lee, and
Richard Ducott. 2008. Without a ?doubt?? Un-
supervised discovery of downward-entailing opera-
tors. Proceedings of The 10th Annual Conference of
the North American Chapter of the Association for
Computational Linguistics. ACL, Boulder, CO.
Talmy Givo?n. 1993. English Grammer: A Function-
Based Introduction. Benjamins, Amsterdam, NL.
Edward S. Klima. 1964. Negation in English. Read-
ings in the Philosophy of Language. Ed. J. A. Fodor
and J. J. Katz. Prentice Hall, Englewood Cliffs, NJ:
246-323.
John Lafferty, Andrew McCallum, and Fernando
Pereira. 2001. Conditional random elds: Prob-
abilistic models for segmenting and labeling se-
quence data. Proceedings of the International Con-
ference on Machine Learning. Morgan Kaufmann,
Williamstown, MA.
Ryan McDonald, Kerry Hannan, Tyler Neylon, Mike
Wells, and Jeff Reynar. 2007. Structured Models for
Fine-to-Coarse Sentiment Analysis. Proceedings of
the Annual Meeting of the Association for Computa-
tional Linguistics. Prague, Czech Republic.
Karo Moilanen and Stephen Pulman 2007. Sentiment
Composition. Proceedings of the Recent Advances
in Natural Language Processing International Con-
ference Borovets, Bulgaria
Roser Morante and Walter Daelemans. 2009. A
metalearning approach to processing the scope of
negation. Proceedings of the Thirteenth Confer-
ence on Computational Natural Language Learning
(CoNLL). ACM, Boulder, CO.
Tetsuji Nakagawa, Kentaro Inui, and Sadao Kurohashi.
2010. Dependency Tree-based Sentiment Classifi-
cation using CRFs with Hidden Variables. Proceed-
ings of The 11th Annual Conference of the North
American Chapter of the Association for Computa-
tional Linguistics ACL, Los Angeles, CA.
Joakim Nivre and Mario Scholz. 2004. Deterministic
Dependency Parsing of English Text. Proceedings
of the 20th International Conference on Computa-
tional Linguistics. ACM, Geneva, Switzerland.
Joakim Nivre, Johan Hall, Jens Nilsson, Atanas
Chanev, Gulsen Eryigit Sandra Kubler, Svetoslav
Marinov and Erwin Marsi. 2007. MaltParser:
A language-independent system for data-driven de-
pendency parsing Natural Language Engineering
13(02):95?135
Philip J. Stone, Dexter C. Dunphy, Marshall S. Smith,
Daniel M. Ogilvie. 1966. The General Inquirer:
A Computer Approach to Content Analysis. MIT
Press, Cambridge, MA.
Gunnel Tottie. 1991. Negation in English Speech
and Writing: A Study in Variation Academic, San
Diego, CA.
Leonid Velikovich, Sasha Blair-Goldensohn, Kerry
Hannan, and Ryan McDonald. 2010. The viabil-
ity of web-derived polarity lexicons. Proceedings of
The 11th Annual Conference of the North American
Chapter of the Association for Computational Lin-
guistics. ACL, Los Angeles, CA.
Veronika Vincze, Gyo?rgy Szarvas, Richa?rd Farkas,
Gyo?rgy Mo?ra, and Ja?nos Csirik. 2008. The Bio-
Scope corpus: biomedical texts annotated for uncer-
tainty, negation and their scopes. BMC Bioinformat-
ics, 9(Suppl 11):S9.
Theresa Wilson, Janyce Wiebe, and Paul Hoffmann.
2005. Recognizing contextual polarity in phrase-
level sentiment analysis. Proceedings of the Confer-
ence on Human Language Technology and Empiri-
cal Methods in Natural Language Processing Van-
couver, Canada.
59
