Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the ACL, pages 1137?1144,
Sydney, July 2006. c?2006 Association for Computational Linguistics
Punjabi Machine Transliteration 
 
M. G. Abbas Malik 
Department of Linguistics 
Denis Diderot, University of Paris 7 
Paris, France 
abbas.malik@gmail.com 
 
  
 
Abstract 
Machine Transliteration is to transcribe a 
word written in a script with approximate 
phonetic equivalence in another lan-
guage. It is useful for machine transla-
tion, cross-lingual information retrieval, 
multilingual text and speech processing. 
Punjabi Machine Transliteration (PMT) 
is a special case of machine translitera-
tion and is a process of converting a word 
from Shahmukhi (based on Arabic script) 
to Gurmukhi (derivation of Landa, 
Shardha and Takri, old scripts of Indian 
subcontinent), two scripts of Punjabi, ir-
respective of the type of word. 
The Punjabi Machine Transliteration 
System uses transliteration rules (charac-
ter mappings and dependency rules) for 
transliteration of Shahmukhi words into 
Gurmukhi. The PMT system can translit-
erate every word written in Shahmukhi. 
1 Introduction 
Punjabi is the mother tongue of more than 110 
million people of Pakistan (66 million), India (44 
million) and many millions in America, Canada 
and Europe. It has been written in two mutually 
incomprehensible scripts Shahmukhi and Gur-
mukhi for centuries. Punjabis from Pakistan are 
unable to comprehend Punjabi written in Gur-
mukhi and Punjabis from India are unable to 
comprehend Punjabi written in Shahmukhi. In 
contrast, they do not have any problem to under-
stand the verbal expression of each other. Pun-
jabi Machine Transliteration (PMT) system is an 
effort to bridge the written communication gap 
between the two scripts for the benefit of the mil-
lions of Punjabis around the globe. 
Transliteration refers to phonetic translation 
across two languages with different writing sys-
tems (Knight & Graehl, 1998), such as Arabic to 
English (Nasreen & Leah, 2003). Most prior 
work has been done for Machine Translation 
(MT) (Knight & Leah, 97; Paola & Sanjeev, 
2003; Knight & Stall, 1998) from English to 
other major languages of the world like Arabic, 
Chinese, etc. for cross-lingual information re-
trieval (Pirkola et al 2003), for the development 
of multilingual resources (Yan et al 2003; Kang 
& Kim, 2000) and for the development of cross-
lingual applications.  
PMT is a special kind of machine translitera-
tion. It converts a Shahmukhi word into a Gur-
mukhi word irrespective of the type constraints 
of the word. It not only preserves the phonetics 
of the transliterated word but in contrast to usual 
transliteration, also preserves the meaning. 
Two scripts are discussed and compared. 
Based on this comparison and analysis, character 
mappings between Shahmukhi and Gurmukhi are 
drawn and transliteration rules are discussed. 
Finally, architecture and process of the PMT sys-
tem are discussed. When it is applied to Punjabi 
Unicode encoded text especially designed for 
testing, the results were complied and analyzed. 
PMT system will provide basis for Cross-
Scriptural Information Retrieval (CSIR) and 
Cross-Scriptural Application Development 
(CSAD). 
2 Punjabi Machine Transliteration 
According to Paola (2003), ?When writing a for-
eign name in one?s native language, one tries to 
preserve the way it sounds, i.e. one uses an or-
thographic representation which, when read 
aloud by the native speaker of the language, 
sounds as it would when spoken by a speaker of 
the foreign language ? a process referred to as 
Transliteration?. Usually, transliteration is re-
ferred to phonetic translation of a word of some 
1137
specific type (proper nouns, technical terms, etc) 
across languages with different writing systems. 
Native speakers may not understand the meaning 
of transliterated word. 
PMT is a special type of Machine Translitera-
tion in which a word is transliterated across two 
different writing systems used for the same lan-
guage. It is independent of the type constraint of 
the word. It preserves both the phonetics as well 
as the meaning of transliterated word. 
3 Scripts of Punjabi 
3.1 Shahmukhi 
Shahmukhi derives its character set form the 
Arabic alphabet. It is a right-to-left script and the 
shape assumed by a character in a word is con-
text sensitive, i.e. the shape of a character is dif-
ferent depending whether the position of the 
character is at the beginning, in the middle or at 
the end of the word. Normally, it is written in 
Nastalique, a highly complex writing system that 
is cursive and context-sensitive. A sentence illus-
trating Shahmukhi is given below: 
X}Z ???? y6? ???< 6?? ~@?? ??6=?P 
It has 49 consonants, 16 diacritical marks and 
16 vowels, etc. (Malik 2005) 
3.2 Gurmukhi 
Gurmukhi derives its character set from old 
scripts of the Indian Sub-continent i.e. Landa 
(script of North West), Sharda (script of Kash-
mir) and Takri (script of western Himalaya). It is 
a left-to-right syllabic script. A sentence illustrat-
ing Gurmukhi is given below: 
?????? ???? ??? ???? ? ???? ?. 
It has 38 consonants, 10 vowels characters, 9 
vowel symbols, 2 symbols for nasal sounds and 1 
symbol that duplicates the sound of a consonant. 
(Bhatia 2003, Malik 2005) 
4 Analysis and PMT Rules 
Punjabi is written in two completely different 
scripts. One script is right-to-left and the other is 
left-to-right. One is Arabic based cursive and the 
other is syllabic. But both of them represent the 
phonetic repository of Punjabi. These phonetic 
sounds are used to determine the relation be-
tween the characters of two scripts. On the basis 
of this idea, character mappings are determined. 
For the analysis and comparison, both scripts 
are subdivided into different group on the basis 
of types of characters e.g. consonants, vowels, 
diacritical marks, etc. 
4.1 Consonant Mapping 
Consonants can be further subdivided into two 
groups: 
Aspirated Consonants: There are sixteen as-
pirated consonants in Punjabi (Malik, 2005). Ten 
of these aspirated consonants (JJ[b?], JJ[p?], 
JJ[??], JJ[??], bY[??], bb[??], |e[??], |e[??], ??[k?], 
??[g?]) are very frequently used in Punjabi as 
compared to the remaining six aspirates (|g[r?], 
|h[??], ??[l?], Jb[m?], JJ[n?], |z[v?]). In 
Shahmukhi, aspirated consonants are represented 
by the combination of a consonant (to be aspi-
rated) and HEH-DOACHASHMEE (|). For 
example [ [b] + | [h] = JJ [b?] and ` [?] + | [h] 
= Yb  [??].  
In Gurmukhi, each frequently used aspirated-
consonant is represented by a unique character. 
But, less frequent aspirated consonants are repre-
sented by the combination of a consonant (to be 
aspirated) and sub-joined PAIREEN HAAHAA 
e.g. ? [l] + ?? + ? [h] = ?? (??) [l?] and ? [v] + ?? 
+ ? [h] = ?? )|z(  [v?], where ?? is the sub-joiner. 
The sub-joiner character (??) tells that the follow-
ing ? [h] is going to change the shape of 
PAIREEN HAAHHA. 
The mapping of ten frequently used aspirated 
consonants is given in Table 1. 
Sr. Shahmukhi Gurmukhi Sr.  Shahmukhi  Gurmukhi 
1  JJ [b?] ?  6  bb [??] ?  
2  JJ [p?] ?  7  |e [??] ?  
3  JJ [??] ?  8  |e [??] ?  
4  JJ [??] ?  9  ?? [k?] ?  
5  bY [??] ?  10  ?? [g?] ?  
Table 1: Aspirated Consonants Mapping 
The mapping for the remaining six aspirates is 
covered under non-aspirated consonants. 
Non-Aspirated Consonants: In case of non-
aspirated consonants, Shahmukhi has more con-
sonants than Gurmukhi, which follows the one 
symbol for one sound principle. On the other 
hand there are more then one characters for a 
single sound in Shahmukhi. For example, Seh 
1138
(_), Seen (k) and Sad (m) represent [s] and [s] 
has one equivalent in Gurmukhi i.e. Sassaa (?). 
Similarly other characters like ? [a], ? [?], ? [h] 
and ? [z] have multiple equivalents in Shah-
mukhi. Non-aspirated consonants mapping is 
given in Table 2. 
Sr. Shahmukhi Gurmukhi Sr. Shahmukhi Gurmukhi 
1 [ [b] ? 21 o [?] ? 
2 \ [p] ? 22 p [z] ? 
3 ] [?] ? 23 q [?] ? 
4 ^ [?] ? 24 r [?] ? 
5 _ [s] ? 25 s [f] ? 
6 ` [?] ? 26 t [q] ? 
7 a [?] ? 27 u [k] ? 
8 b [h] ? 28 v [g] ? 
9 c [x] ? 29 w [l] ? 
10 e [?] ? 30 w?  [?] ? 
11 e [?] ? 31 x [m] ? 
12 f [z] ? 32 y [n] ? 
13 g [r] ? 33 ? [?] ? 
14 h [?] ? 35 y [?] ?? 
15 i [z] ? 35 z [v] ? 
16 j [?] ? 36 { [h] ? 
17 k [s] ? 37 | [h] ??? 
18 l [?] ? 38 ~ [j] ?  
19 m [s] ? 39 } [j] ?  
20 n [z] ?    
Table 2: Non-Aspirated Consonants Mapping 
4.2 Vowel Mapping 
Punjabi contains ten vowels. In Shahmukhi, 
these vowels are represented with help of four 
long vowels (Alef Madda (W), Alef (Z), Vav (z) and 
Choti Yeh (~)) and three short vowels (Arabic 
Fatha ? Zabar ( F?), Arabic Damma ? Pesh ( E?) 
and Arabic Kasra ? Zer (G?)). Note that the last 
two long vowels are also used as consonants. 
Hamza (Y) is a special character and always 
comes between two vowel sounds as a place 
holder. For example, in ?G?6 W [?s???] (comfort), 
Hamza (Y) is separating two vowel sounds Alef (Z) 
and Zer (G?), in zW [?o] (come), Hamza (Y) is 
separating two vowel sounds Alef Madda (W) [?] 
and Vav (z) [o], etc. In the first example ?G?6 W 
[?s???] (comfort), Hamza (Y) is separating two 
vowel sounds Alef (Z) and Zer (G?), but normally 
Zer ( G?) is dropped by common people. So 
Hamza (Y) is mapped on ? [?] when it is followed 
by a consonant. 
In Gurmukhi, vowels are represented by ten 
independent vowel characters (?, ?, ?, ?, ?, 
?, ?, ?, ?, ?) and nine dependent vowel signs 
(??, ??, ??, ??, ??, ??, ??, ??, ??). When a vowel 
sound comes at the start of a word or is inde-
pendent of some consonant in the middle or end 
of a word, independent vowels are used; other-
wise dependent vowel signs are used. The analy-
sis of vowels is shown in Table 4 and the vowel 
mapping is given in Table 3. 
Sr. Shahmukhi Gurmukhi Sr. Shahmukhi Gurmukhi 
1 FZ [?] ? 11 Z[?] ?,?? 
2 ? [?] ? 12 G? [?] ?? 
3 GZ [?] ? 13 ? G? [i] ?? 
4 ??? [i] ? 14 E? [?] ?? 
5 EZ [?] ? 15 z E? [u] ?? 
6 zEZ [u] ? 16 } [e] ?? 
7 }Z [e] ? 17 } F? [?] ?? 
8 }FZ [?] ? 18 z [o] ?? 
9 zZ [o] ? 19 Fz [?] ?? 
10 zFZ [?] ? 20 Y [?] ? 
Table 3: Vowels Mapping
 
1139
 
Vowel Shahmukhi Gurmukhi Example 
? 
Represented by Alef Madda (W) in the beginning 
of a word and by Alef (Z) in the middle or at the 
end of a word. 
Represented by ? 
and ?? 
??eW ? ???? [?dmi] (man) 
6 z6? ? ????? [??v??] (go) 
? 
Represented by Alef (Z) in the beginning of a 
word and with Zabar (F?) elsewhere. 
Represented by ? 
in the beginning. 
H`Z ? ??? [???] (today) 
e 
Represented by the combinations of Alef (Z) and 
Choti Yeh (~) in the beginning; a consonant and 
Choti Yeh (~) in the middle and a consonant and 
Baree Yeh (}) at the end of a word. 
Represented by ? 
and ? ?
uO??Z ? ??? [e???r] (here), 
Z@?? ? ???? [mer?] (mine), 
}g6  ? ??? ?[s?re] (all) 
? 
Represented by the combination of Alef (Z), Za-
bar (F?) and Choti Yeh (~) in the beginning; a 
consonant, Zabar (F?) and Choti Yeh (~) in the 
middle and a consonant, Zabar (F?) and Baree 
Yeh (}) at the end of a word. 
 
Represented by ? 
and ? ?
E} FZ?  ? ?? [?h] (this), 
I?Fr ? ??? [m?l] (dirt), 
F? ? ?? [h?] (is) 
? 
Represented by the combination of Alef (Z) and 
Zer (G?) in the beginning and a consonant and 
Zer (G?) in the middle of a word. It never appears 
at the end of a word. 
Represented by ? 
and ?? 
?H?GZ ? ??? ?[?kko] (one), 
lGg6  ? ????? [b?r?sh] (rain) 
i 
Represented by the combination of Alef (Z), Zer 
(G?) and Choti Yeh (~) in the beginning; a 
consonant, Zer (G?) and Choti Yeh (~) in the 
middle and a consonant and Choti Yeh (~) at the 
end of a word 
Represented by ? 
and ?? 
@??GZ ? ??? [i??r] (mean) 
~@? G?Z ? ????? [?miri] (rich-
ness), 
??6=?P ? ?????? [p?n??bi] 
(Punjabi) 
? 
Represented by the combination of Alef (Z) and 
Pesh (E?) in the beginning; a consonant and Pesh 
(E?) in the middle of a word. It never appears at 
the end of a word. 
Represented by ? 
and ? ?
uOHeEZ ? ??? [???hr] (there) 
HIE? ? ???? [m?ll] (price) 
u 
Represented by the combination of Alef (Z), Pesh 
(E?) and Vav (z) in the beginning, a consonant, 
Pesh (E?) and Vav (z) in the middle and at the end 
of a word. 
Represented by ? 
and ? ?
zEegEZ ? ???? [?r?u] 
]g?E? ? ???? [sur?] (face) 
o 
Represented by the combination of Alef (Z) and 
Vav (z) in the beginning; a consonant and Vav 
(z) in the middle and at the end of a word. 
Represented by ? 
and ? ?
h6J zZ?  ? ???? [o?h??] (cover), 
i??ww ? ?????? [p?hol?] (a big 
pot in which wheat is stored) 
? 
Represented by the combination of Alef (Z), Za-
bar (F?) and Vav (z) in the beginning; a 
consonant, Zabar (F?) and Vav (z) in the middle 
and at the end of a word. 
Represented by ? 
and ? ?
ZhzFZ ? ??? [???] (hindrance), 
]?F? ? ??? [m??] (death) 
Note: Where ? means ?its equivalent in Gurmukhi is?. 
Table 4: Vowels Analysis of Punjabi for PMT 
1140
4.3 Sub-Joins (PAIREEN) of Gurmukhi 
There are three PAIREEN (sub-joins) in Gur-
mukhi, ?Haahaa?, ?Vaavaa? and ?Raaraa? shown 
in Table 5. For PMT, if HEH-DOACHASHMEE 
(|) does come after the less frequently used 
aspirated consonants then it is transliterated into 
PAIREEN Haahaa. Other PAIREENS are very 
rare in their usage and are used only in Sanskrit 
loan words. In present day writings, PAIREEN 
Vaavaa and Raaraa are being replaced by normal 
Vaavaa (?) and Raaraa (?) respectively. 
Sr. PAIREEN Shahmukhi Gurmukhi English 
1 H JH?Eo ????? Lips 
2 R 6?g?s" ?????? Moon 
3 ? y6??F?? ?????? Self-respect 
Table 5: Sub-joins (PAIREEN) of Gurmukhi 
4.4 Diacritical Marks 
Both in Shahmukhi and Gurmukhi, diacritical 
marks (dependent vowel signs in Gurmukhi) are 
the back bone of the vowel system and are very 
important for the correct pronunciation and un-
derstanding the meaning of a word. There are 
sixteen diacritical marks in Shahmukhi and nine 
dependent vowel sings in Gurmukhi (Malik, 
2005). The mapping of diacritical marks is given 
in Table 6. 
Sr. Shahmukhi Gurmukhi Sr. Shahmukhi Gurmukhi 
1 F? [?] --- 9 F? [?n] ??? 
2 G? [?] ?? 10 H? ?? 
3 E? [?] ?? 11 W? --- 
4 ? --- 12 Y? --- 
5 F? [?n] ? 13 Y? --- 
6 E? [?n] ??? 14 G? --- 
7 E? --- 15  --- 
8 
 
--- 16 G? [?] ?? 
Table 6: Diacritical Mapping 
Diacritical marks in Shahmukhi are very im-
portant for the correct pronunciation and under-
standing the meaning of a word. But they are 
sparingly used in writing by common people. In 
the normal text of Shahmukhi books, newspa-
pers, and magazines etc. one will not find the 
diacritical marks. The pronunciation of a word 
and its meaning would be comprehended with 
the help of the context in which it is used. 
 
For example, 
E} FZ? uuu ~ww ~h?a }ZX  
@??~  ~h?a }Z wiX 
In the first sentence, the word ~h?a is pronounced 
as [???i] and it conveys the meaning of ?wide?. 
In the second sentence, the word ~h?a is pro-
nounced as [?u?i] and it conveys the meaning of 
?bangle?. There should be Zabar ( F?) after Cheh 
(a) and Pesh ( E?) after Cheh (a) in the first and 
second words respectively, to remove the ambi-
guities. 
It is clear from the above example that dia-
critical marks are essential for removing ambi-
guities, natural language processing and speech 
synthesis. 
4.5 Other Symbols 
Punctuation marks in Gurmukhi are the same as 
in English, except the full stop. DANDA (?) and 
double DANDA (?) of Devanagri script are used 
for the full stop instead. In case of Shahmukhi, 
these are same as in Arabic. The mapping of dig-
its and punctuation marks is given in Table 7. 
Sr. Shahmukhi Gurmukhi Sr. Shahmukhi Gurmukhi 
1 0 ? 8 7 ? 
2 1 ? 9 8 ? 
3 2 ? 10 9 ? 
4 3 ? 11 ? , 
5 4 ? 12 ? ? 
6 5 ? 13 ; ; 
7 6 ? 14 X ? 
Table 7: Other Symbols Mapping 
4.6 Dependency Rules 
Character mappings alone are not sufficient for 
PMT. They require certain dependency or con-
textual rules for producing correct transliteration. 
The basic idea behind these rules is the same as 
that of the character mappings. These rules in-
clude rules for aspirated consonants, non-
aspirated consonants, Alef (Z), Alef Madda (W), 
Vav (z), Choti Yeh (~) etc. Only some of these 
rules are discussed here due to space limitations. 
Rules for Consonants: Shahmukhi conso-
nants are transliterated into their equivalent 
1141
Gurmukhi consonants e.g. k ? ? [s]. Any dia-
critical mark except Shadda ( H?) is ignored at this 
point and is treated in rules for vowels or in rules 
for diacritical marks. In Shahmukhi, Shadda (H?) 
is placed after the consonant but in Gurmukhi, its 
equivalent Addak (??) is placed before the con-
sonant e.g. \ + H? ? ??? [pp]. Both Shadda (H?) 
and Addak (??) double the sound a consonant 
after or before which they are placed. 
This rule is applicable to all consonants in Ta-
ble 1 and 2 except Ain (q), Noon (y), 
Noonghunna (y), Vav (z), Heh Gol ({), 
Dochashmee Heh (|), Choti Yeh (~) and Baree 
Yeh (}). These characters are treated separately. 
Rule for Hamza (Y): Hamza (Y) is a special 
character of Shahmukhi. Rules for Hamza (Y) are: 
? If Hamza (Y) is followed by Choti Yeh (~), then 
Hamza (Y) and Choti Yeh (~) will be 
transliterated into ? [i]. 
? If Hamza (Y) is followed by Baree Yeh (}), 
then Hamza (Y) and Baree Yeh (}) will be 
transliterated into ? [e]. 
? If Hamza (Y) is followed by Zer (G?), then 
Hamza (Y) and Zer ( G?) will be transliterated 
into ? [?]. 
? If Hamza (Y) is followed by Pesh (E?), then 
Hamza (Y) and Pesh (E?) will be transliterated 
into ? [?]. 
In all other cases, Hamza (Y) will be transliter-
ated into ? [?]. 
5 PMT System 
5.1 System Architecture 
The architecture of PMT system and its func-
tionality are described in this section. The system 
architecture of Punjabi Machine Transliteration 
System is shown in figure 1. 
Unicode encoded Shahmukhi text input is re-
ceived by the Input Text Parser that 
parses it into Shahmukhi words by using simple 
parsing techniques. These words are called 
Shahmukhi Tokens. Then these tokens are given 
to the Transliteration Component. This 
component gives each token to the PMT Token 
Converter that converts a Shahmukhi Token 
into a Gurmukhi Token by using the PMT 
Rules Manager, which consists of character 
mappings and dependency rules. The PMT To-
ken Converter then gives the Gurmukhi To-
ken back to the Transliteration Compo-
nent.  When all Shahmukhi Tokens are con-
verted into Gurmukhi Tokens, then all Gurmukhi 
Tokens are passed to the Output Text Gen-
erator that generates the output Unicode en-
coded Gurmukhi text. The main PMT process is 
done by the PMT Token Converter and the 
PMT Rules Manager. 
Figure 1: Architecture of PMT System 
PMT system is a rule based transliteration sys-
tem and is very robust. It is fast and accurate in 
its working. It can be used in domains involving 
Information Communication Technology (web, 
WAP, instant messaging, etc.). 
5.2 PMT Process 
The PMT Process is implemented in the PMT 
Token Converter and the PMT Rules 
Manager. For PMT, each Shahmukhi Token is 
parsed into its constituent characters and the 
character dependencies are determined on the 
basis of the occurrence and the contextual 
placement of the character in the token. In each 
Shahmukhi Token, there are some characters that 
bear dependencies and some characters are inde-
pendent of such contextual dependencies for 
transliteration. If the character under considera-
tion bears a dependency, then it is resolved and 
transliterated with the help of dependency rules. 
Input Text Parser
PMT Rules Manager
Character 
Mappings 
Depend-
ency Rules 
Unicode Encoded 
Shahmukhi Text
Unicode Encoded 
Gurmukhi Text
PMT Token Converter
Shahmukhi Token 
Gurmukhi Token 
Punjabi Machine Transliteration 
System 
Output Text 
Generator
Transliteration 
Component
Shahmukhi Tokens
Gurmukhi Tokens
1142
If the character under consideration does not bear 
a dependency, then its transliteration is achieved 
by character mapping. This is done through map-
ping a character of the Shahmukhi token to its 
equivalent Gurmukhi character with the help of 
character mapping tables 1, 2, 3, 6 and 7, which-
ever is applicable. In this way, a Shahmukhi To-
ken is transliterated into its equivalent Gurmukhi 
Token. 
Consider some input Shahmukhi text S. First it 
is parsed into Shahmukhi Tokens (S
1
, S
2
? S
N
). 
Suppose that S
i 
= ?y63?Zz? [v?lej??] is the i
th 
Shah-
mukhi Token. S
i 
is parsed into characters Vav (z) 
[v], Alef (Z) [?], Lam (w) [l], Choti Yeh (~) [j], 
Alef (Z) [?] and Noon Ghunna (y) [?]. Then PMT 
mappings and dependency rules are applied to 
transliterate the Shahmukhi Token into a Gur-
mukhi Token. The Gurmukhi Token 
G
i
=???????? is generated from S
i
. The step by 
step process is clearly shown in Table 8. 
Sr. Character(s) Parsed 
Gurmukhi 
Token Mapping or Rule Applied 
1 z ? ? [v] ? Mapping Table 4 
2 Z ? ?? [?] ?? Rule for ALEF 
3 w ? ? [l] ??? Mapping Table 4 
4 
6  ? ??? 
[??] 
????? Rule for YEH 
5 y ? ?? [?] ?????? Rule for NOONGHUNNA 
Note: ? is read as ?is transliterated into?. 
Table 8: Methodology of PMTS 
In this way, all Shahmukhi Tokens are trans-
literated into Gurmukhi Tokens (G1, G2 ? Gn). 
From these Gurmukhi Tokens, Gurmukhi text G 
is generated. 
The important point to be noted here is that 
input Shahmukhi text must contain all necessary 
diacritical marks, which are necessary for the 
correct pronunciation and understanding the 
meaning of the transliterated word. 
6 Evaluation Experiments 
6.1 Input Selection 
The first task for evaluation of the PMT system 
is the selection of input texts. To consider the 
historical aspects, two manuscripts, poetry by 
Maqbal (Maqbal) and Heer by Waris Shah 
(Waris, 1766) were selected. Geographically 
Punjab is divided into four parts eastern Punjab 
(Indian Punjab), central Punjab, southern Punjab 
and northern Punjab. All these geographical re-
gions represent the major dialects of Punjabi. 
Hayms of Baba Nanak (eastern Punjab), Heer by 
Waris Shah (central Punjab), Hayms by Khawaja 
Farid (southern Punjab) and Saif-ul-Malooq by 
Mian Muhammad Bakhsh (northern Punjab) 
were selected for the evaluation of PMT system. 
All the above selected texts are categorized as 
classical literature of Punjabi. In modern litera-
ture, poetry and short stories of different poets 
and writers were selected from some issues of 
Puncham (monthly Punjabi magazine since 
1985) and other published books. All of these 
selected texts were then compiled into Unicode 
encoded text as none of them were available in 
this form before. 
The main task after the compilation of all the 
selected texts into Unicode encoded texts is to 
put all necessary diacritical marks in the text. 
This is done with help of dictionaries. The accu-
racy of the PMT system depends upon the neces-
sary diacritical marks. Absence of the necessary 
diacritical marks affects the accuracy greatly. 
6.2 Results 
After the compilation of selected input texts, they 
are transliterated into Gurmukhi texts by using 
the PMT system. Then the transliterated Gur-
mukhi texts are tested for errors and accuracy. 
Testing is done manually with help of dictionar-
ies of Shahmukhi and Gurmukhi by persons who 
know both scripts. The results are given in Table 
9. 
Source Total Words Accuracy 
Manuscripts 1,007 98.21 
Baba Nanak 3,918 98.47 
Khawaja Farid 2,289 98.25 
Waris Shah 14,225 98.95 
Mian Muhammad Bakhsh 7,245 98.52 
Modern lieratutre 16,736 99.39 
Total 45,420 98.95 
Table 9: Results of PMT System 
If we look at the results, it is clear that the 
PMT system gives more than 98% accuracy on 
classical literature and more than 99% accuracy 
on the modern literature. So PMT system fulfills 
the requirement of transliteration across two 
scripts of Punjabi. The only constraint to achieve 
this accuracy is that input text must contain all 
necessary diacritical marks for removing ambi-
guities. 
1143
7 Conclusion 
Shahmukhi and Gurmukhi being the only two 
prevailing scripts for Punjabi expressions en-
compass a population of almost 110 million 
around the globe. PMT is an endeavor to bridge 
the ethnical, cultural and geographical divisions 
between the Punjabi speaking communities. By 
implementing this system of transliteration, new 
horizons for thought, idea and belief will be 
shared and the world will gain an impetus on the 
efforts harmonizing relationships between na-
tions. The large repository of historical, literary 
and religious work done by generations will now 
be available for easy transformation and critique 
for all. The research has future milestone ena-
bling PMT system for back machine translitera-
tion from Gurmukhi to Shahmukhi. 
Reference 
Ari Pirkola, Jarmo Toivonen, Heikki Keskustalo, Kari 
Visala, and Kalervo J?rvelin. 2003. Fuzzy Transla-
tion of Cross-Lingual Spelling Variants. In Pro-
ceedings of the 26th annual international ACM 
SIGIR conference on Research and development in 
informaion retrieval. pp: 345 ? 352 
Baba Guru Nanak, arranged by Muhammad Asif 
Khan. 1998. " HH6  6 6  63r Wi  (Sayings of Baba Nanak in 
Punjabi Shahmukhi). Pakistan Punjabi Adbi Board, 
Lahore 
Bhatia, Tej K. 2003. The Gurmukhi Script and Other 
Writing Systems of Punjab: History, Structure and 
Identity. International Symposium on Indic Script: 
Past and future organized by Research Institute for 
the Languages and Cultures of Asia and Africa and 
Tokyo University of Foreign Studies, December 17 
? 19. pp: 181 ? 213 
In-Ho Kang and GilChang Kim. 2000. English-to-
Korean transliteration using multiple unbounded 
overlapping phoneme chunks. In Proceedings of 
the 17th conference on Computational Linguistics. 
1: 418 ? 424 
Khawaja Farid (arranged by Muhammad Asif Khan). 
" ??Guu EbZ?a 63r Wi  (Sayings of Khawaja Farid in Punjabi 
Shahmukhi). Pakistan Punjabi Adbi Board, Lahore 
Knight, K. and Stalls, B. G. 1998. Translating Names 
and Technical Terms in Arabic Tex. Proceedings of 
the COLING/ACL Workshop on Computational 
Approaches to Semitic Languages 
Knight, Kevin and Graehl, Jonathan. 1997. Machine 
Transliteration. In Proceedings of the 35th Annual 
Meeting of the Association for Computational Lin-
guistics. pp. 128-135 
Knight, Kevin; Morgan Kaufmann and Graehl, Jona-
than. 1998. Machine Transliteration. In Computa-
tional Linguistics. 24(4): 599 ? 612 
Malik, M. G. Abbas. 2005. Towards Unicode Com-
patible Punjabi Character Set. In proceedings of 
27th Internationalization and Unicode Conference, 
6 ? 8 April, Berlin, Germany 
Maqbal. Gb?? _?? . Punjabi Manuscript in Oriental Sec-
tion, Main Library University of the Punjab, 
Quaid-e-Azam Campus, Lahore Pakistan; 7 pages; 
Access # 8773 
Mian Muhammad Bakhsh (Edited by Fareer Mu-
hammad Faqeer). 2000. Saif-ul-Malooq. Al-Faisal 
Pub. Urdu Bazar, Lahore 
Nasreen AbdulJaleel, Leah S. Larkey. 2003. Statisti-
cal transliteration for English-Arabic cross lan-
guage information retrieval. In Proceedings of the 
12th international conference on information and 
knowledge management. pp: 139 ? 146 
Paola Virga and Sanjeev Khudanpur. 2003. Translit-
eration of proper names in cross-language appli-
cations. In Proceedings of the 26th annual interna-
tional ACM SIGIR conference on Research and 
development in information retrieval. pp: 365 ? 
366 
Rahman Tariq. 2004. Language Policy and Localiza-
tion in Pakistan: Proposal for a Paradigmatic 
Shift. Crossing the Digital Divide, SCALLA Con-
ference on Computational Linguistics, 5 ? 7 Janu-
ary 2004 
Sung Young Jung, SungLim Hong and Eunok Peak. 
2000. An English to Korean transliteration model 
of extended markov window. In Proceedings of the 
17th conference on Computational Linguistics. 
1:383 ? 389 
Tanveer Bukhari. 2000. zegEZ ??6=?  ?~P ?. Urdu Science 
Board, 299 Uper Mall, Lahore 
Waris Shah. 1766. 6J Zg @??6= . Punjabi Manuscript in Ori-
ental Section, Main Library University of the Pun-
jab, Quaid-e-Azam Campus, Lahore Pakistan; 48 
pages; Access # [Ui VI 135/]1443 
Waris Shah (arranged by Naseem Ijaz). 1977. 6J Zg @??6= . 
Lehran, Punjabi Journal, Lahore 
Yan Qu, Gregory Grefenstette, David A. Evans. 2003. 
Automatic transliteration for Japanese-to-English 
text retrieval. In Proceedings of the 26th annual in-
ternational ACM SIGIR conference on Research 
and development in information retrieval. pp: 353 
? 360 
1144
Proceedings of the 22nd International Conference on Computational Linguistics (Coling 2008), pages 537?544
Manchester, August 2008
Hindi Urdu Machine Transliteration using Finite-state Transducers 
M G Abbas Malik   Christian Boitet 
GTALP, Laboratoire d?Informatique Grenoble 
Universit? Joseph Fourier, France 
abbas.malik@imag.fr, 
Christian.Boitet@imag.fr 
Pushpak Bhattacharyya 
Dept. of Computer Science and Engineering, 
IIT Bombay, India 
pb@cse.iitb.ac.in 
 
Abstract 
Finite-state Transducers (FST) can be 
very efficient to implement inter-dialectal 
transliteration. We illustrate this on the 
Hindi and Urdu language pair. FSTs can 
also be used for translation between sur-
face-close languages. We introduce UIT 
(universal intermediate transcription) for 
the same pair on the basis of their com-
mon phonetic repository in such a way 
that it can be extended to other languages 
like Arabic, Chinese, English, French, etc. 
We describe a transliteration model based 
on FST and UIT, and evaluate it on Hindi 
and Urdu corpora. 
1 Introduction 
Transliteration is mainly used to transcribe a 
word written in one language in the writing sys-
tem of the other language, thereby keeping an 
approximate phonetic equivalence. It is useful for 
MT (to create possible equivalents of unknown 
words) (Knight and Stall, 1998; Paola and San-
jeev, 2003), cross-lingual information retrieval 
(Pirkola et al 2003), the development of multi-
lingual resources (Yan et al 2003) and multilin-
gual text and speech processing. Inter-dialectal 
translation without lexical changes is quite useful 
and sometimes even necessary when the dialects 
in question use different scripts; it can be 
achieved by transliteration alone. That is the case 
of HUMT (Hindi-Urdu Machine Transliteration) 
where each word has to be transliterated from 
Hindi to Urdu and vice versa, irrespective of its 
                                                 
? 2008. Licensed under the Creative Commons Attri-
bution-Noncommercial-Share Alike 3.0 Unported 
license (http://creativecommons.org/licenses/by-nc-
sa/3.0/). Some rights reserved. 
type (noun, verb, etc. and not only proper noun 
or unknown word). 
?One man?s Hindi is another man?s Urdu? 
(Rai, 2000). The major difference between Hindi 
and Urdu is that the former is written in Devana-
gari script with a more Sanskritized vocabulary 
and the latter is written in Urdu script (derivation 
of Persio-Arabic script) with more vocabulary 
borrowed from Persian and Arabic. In contrast to 
the transcriptional difference, Hindi and Urdu 
share grammar, morphology, a huge vocabulary, 
history, classical literature, cultural heritage, etc. 
Hindi is the National language of India with 366 
million native speakers. Urdu is the National and 
one of the state languages of Pakistan and India 
respectively with 60 million native speakers 
(Rahman, 2004). Table 1 gives an idea about the 
size of Hindi and Urdu. 
 Native Speakers 
2nd Language 
Speakers Total 
Hindi 366,000,000 487,000,000 853,000,000 
Urdu 60,290,000 104,000,000 164,290,000 
Total 426,290,000 591,000,000 1,017,000,000 
Table 1: Hindi and Urdu speakers 
Hindi and Urdu, being varieties of the same 
language, cover a huge proportion of world?s 
population. People from Hindi and Urdu com-
munities can understand the verbal expressions 
of each other but not the written expressions. 
HUMT is an effort to bridge this scriptural divide 
between India and Pakistan. 
Hindi and Urdu scripts are briefly introduced 
in section 2. Universal Intermediate Transcrip-
tion (UIT) is described in section 3, and UIT 
mappings for Hindi and Urdu are given in sec-
tion 4. Contextual HUMT rules are presented and 
discussed in section 5. An HUMT system im-
plementation and its evaluation are provided in 
section 6 and 7. Section 8 is on future work and 
conclusion. 
537
2 HUMT 
There exist three languages at the border between 
India and Pakistan: Kashmiri, Punjabi and Sindhi. 
All of them are mainly written in two scripts, one 
being a derivation of the Persio-Arabic script and 
the other being Devanagari script. A person us-
ing the Persio-Arabic script cannot understand 
the Devanagari script and vice versa. The same is 
true for Hindi and Urdu which are varieties or 
dialects of the same language, called Hindustani 
by Platts (1909). 
PMT (Punjabi Machine Transliteration) (Ma-
lik, 2006) was a first effort to bridge this scrip-
tural divide between the two scripts of Punjabi 
namely Shahmukhi (a derivation of Perio-Arabic 
script) and Gurmukhi (a derivation of Landa, 
Shardha and Takri, old Indian scripts). HUMT is 
a logical extension of PMT. Our HUMT system 
is generic and flexible such that it will be extend-
able to handle similar cases like Kashmiri, Pun-
jabi, Sindhi, etc. HUMT is also a special type of 
machine transliteration like PMT. 
A brief account of Hindi and Urdu is first giv-
en for unacquainted readers. 
2.1 Hindi 
The Devanagari (literally ?godly urban?) script, a 
simplified version of the alphabet used for San-
skrit, is a left-to-right script. Each consonant 
symbol inherits by default the vowel sound [?]. 
Two or more consonants may be combined to-
gether to form a cluster called Conjunct that 
marks the absence of the inherited vowel [?] be-
tween two consonants (Kellogg, 1872; Montaut, 
2004). A sentence illustrating Devanagari is giv-
en below: 
?????? ?????????? ?? ???? ????? ??. 
[h?n?i h?n?ust?n ki q?mi zub?n h?] 
(Hindi is the national language of India) 
2.2 Urdu 
Urdu is written in an alphabet derived from the 
Persio-Arabic alphabet. It is a right-to-left script 
and the shape assumed by a character in a word 
is context-sensitive, i.e. the shape of a character 
is different depending on whether its position is 
at the beginning, in the middle or at the end of a 
word (Zia, 1999). A sentence illustrating Urdu is 
given below: 
?? y6?36 G?6[  zEegEZ F? ?X? y6[ Ei ??? 
[?r?u p?k?st?n ki q?mi zub?n h?] 
(Urdu is the National Language of Pakistan.) 
3 Universal Intermediate Transcription 
UIT (Universal Intermediate Transcription) is a 
scheme to transcribe texts in Hindi, Urdu, Punja-
bi, etc. in an unambiguous way encoded in AS-
CII range 32 ? 126, since a text in this range is 
portable across computers and operating systems 
(James 1993; Wells, 1995). SAMPA (Speech 
Assessment Methods Phonetic Alphabet) is a 
widely accepted scheme for encoding the IPA 
(International Phonetic Alphabet) into ASCII. It 
was first developed for Danish, Dutch, French, 
German and Italian, and since then it has been 
extended to many languages like Arabic, Czech, 
English, Greek, Hebrew, Portuguese, Russian, 
Spanish, Swedish, Thai, Turkish, etc. 
We define UIT as a logical extension of 
SAMPA. The UIT encoding for Hindi and Urdu 
is developed on the basis of rules and principles 
of SAMPA and X-SAMPA (Wells, 1995), that 
cover all symbols on the IPA chart. Phonemes 
are the most appropriate invariants to mediate 
between the scripts of Hindi, Punjabi, Urdu, etc., 
so that the encoding choice is logical and suitable. 
4 Analysis of Scripts and UIT Mappings 
For the analysis and comparison, scripts of Hindi 
and Urdu are divided into different groups on the 
basis of character types. 
4.1 Consonants 
These are grouped into two categories: 
Aspirated Consonants: Hindi and Urdu both 
have 15 aspirated consonants. In Hindi, 11 aspi-
rated consonants are represented by separate cha-
racters e.g. ? [k?], ? [b?], etc. The remaining 4 
consonants are represented by combining a sim-
ple consonant to be aspirated and the conjunct 
form of HA ?[h], e.g. ? [l] + ?? + ? [h] = ??? [l?]. 
In Urdu, all aspirated consonants are 
represented by a combination of a simple conso-
nant to be aspirated and Heh Doachashmee (?) 
[h], e.g. ? [k] + ? [h] = ?? [k?], ? [b] + ? [h] = ?? 
[b?],  ? [l] + ? [h] = ?? [l?], etc.  
The UIT mapping for aspirated consonants is 
given in Table 2. 
Hindi Urdu UIT Hindi Urdu UIT 
? ?? [b?] b_h ??? ?? [r?] r_h 
? ?? [p?] p_h ? ?? [??] r`_h 
? ?? [??] t_d_h ? ?? [k?] k_h 
? ?? [??] t`_h ? ?? [g?] g_h 
? ?? [??] d_Z_h ??? ?? [l?] l_h 
538
? ?? [??] t_S_h ??? ?? [m?] m_h 
? ?? [??] d_d_h ??? ?? [n?] n_h 
? ?? [??] d`_h    
Table 2: Hindi Urdu aspirated consonants 
Non-aspirated Consonants: Hindi has 29 
non-aspirated consonant symbols representing 28 
consonant sounds as both SHA (?) and SSA (?) 
represent the same sound [?]. Similarly Urdu has 
35 consonant symbols representing 27 sounds as 
multiple characters are used to represent the 
same sound e.g. Heh (?) and Heh-Goal (?) 
represent the sound [h] and Theh (?), Seen (?) 
and Sad (?) represent the sound [s], etc. 
UIT mapping for non-aspirated consonants is 
given in Table 3. 
Hindi Urdu UIT Hindi Urdu UIT 
? ? [b] b ? ? [s] s2 
? ? [p] p ? ? [z] z2 
? ? [?] t_d ? ? [?] t_d1 
? ? [?] t` ? ? [z] z3 
? ? [s] s1 - ? [?] ? 
? ? [?] d_Z ? ? [?] X 
? ? [?] t_S ? ? [f] f 
? ? [h] h1 ? ? [q] q 
? ? [x] x ? ? [k] k 
? ? [?] d_d ? ? [g] g 
? ? [?] d` ? ? [l] l 
? ? [z] z1 ? ? [m] m 
? ? [r] r ? ? [n] n 
? ? [?] r` ? ? [v] v 
? ? [z] z ? ? [h] h 
? ? [?] Z ? ? [j] j 
? ? [s] s ? ? [?] t_d2 
? ? [?] S ? - [?] n` 
? ? [?] S1 ? ? ? [?] ~ 
Table 3: Hindi Urdu non-aspirated consonants 
4.2 Vowels 
Hindi has 11 vowels and 10 of them have nasa-
lized forms. They are represented by 11 indepen-
dent vowel symbols e.g. ? [?], ? [u], ? [?], 
etc. and 10 dependent vowel symbols e.g. ?? 
[?], ?? [u], ?? [?], etc. called maatraas. When a 
vowel comes at the start of a word or a syllable, 
the independent form is used; otherwise the de-
pendent form is used (Kellogg, 1872; Montaut, 
2004). 
Urdu contains 10 vowels and 7 of them have 
nasalized forms (Hussain, 2004; Khan, 1997). 
Urdu vowels are represented using four long vo-
wels (Alef Madda (?), Alef (?), Vav (?) and Choti 
Yeh (?)) and three short vowels (Arabic Fatha ? 
Zabar -?, Arabic Damma ? Pesh -? and Arabic Ka-
sra ? Zer -?). Vowel representation is context-
sensitive in Urdu. Vav (?) and Choti Yeh (?) are 
also used as consonants. 
Hamza (?) is a place holder between two suc-
cessive vowel sounds, e.g. in ?????  [k?m?i] 
(earning), Hamza (?) separates the two vowel 
sounds Alef (?) [?] and Choti Yeh (?) [i]. Noon-
ghunna (?) is used as nasalization marker. Anal-
ysis and mapping of Hindi Urdu vowels is given 
in Table 5. 
4.3 Diacritical Marks 
Urdu contains 15 diacritical marks. They 
represent vowel sounds, except Hamza-e-Izafat  -? 
and Kasr-e-Izafat -? that are used to build com-
pound words, e.g. ??????? ????? [???r?h?s??ns] (In-
stitute of Science), ??????? ?????? [t?rix?ped???] 
(date of birth), etc. Shadda -? is used to geminate 
a consonant e.g. ??? [r?bb] (God), ????? [?????] 
(good), etc. Jazm  -? is used to mark the absence of 
a vowel after the base consonant (Platts, 1909). 
In Hindi, the conjunct form is used to geminate a 
consonant. Urdu diacritical marks mapping is 
given in Table 4. 
Hindi Urdu UIT Hindi Urdu UIT 
- F? [?] @ ?? G? [?] A 
?? G? [?] I ? F? [?n] @n 
?? E? [?] U ??? E? [?n] Un 
?? E? [u] u ??? F? [?n] In 
?? G? [i] i    
Table 4: Diacritical Marks of Urdu 
Diacritical marks are present in Urdu but spa-
ringly used by people. They are very important 
for the correct pronunciation and understanding 
the meanings of a word. For example, 
 ??? ?????? ??? ???  
[je s???k b?h?? ???i h?] (This is a wide road.) 
 ??? ??? ???????? 
[meri ?u?i s?r?x h?] (My bangle is red.) 
In the first sentence, the word ???? is pro-
nounced as [???i] (wide) and in the second, it is 
539
pronounced as [?u?i] (bangle). There should be 
Zabar (??) and Pesh (??) after Cheh (?) in above 
words and correct transcriptions are ????? (wide) 
and ????? (bangle). Thus diacritical marks are 
essential for removing ambiguities, natural lan-
guage processing and speech synthesis. 
 
Vowel Urdu Hindi (UIT) 
? It is represented by Alef (?) + Zabar -? at the start of a word e.g. ??? [?b] (now) and by Zabar -? in the middle of a word respectively e.g. ???? [r?bb] (God). It never comes at the end of a word. ? (@) 
? 
It is represented by Alef Madda (?) at the start of a word e.g. ???? [?d?mi] (man) and by Alef (?) or Alef 
Madda (?) in the middle of a word e.g. ???? [??n?] (go), ?????? [b?l?x?r] (at last). At the end of a word, it is 
represented by Alef (?). In some Arabic loan words, it is represented by Choti Yeh (?) + Khari Zabar ?- at 
the end of a word e.g. ????? [??l?] (Superior) and by Khari Zabar ?- in the middle of a word e.g. ????? [?l?hi] 
(God). 
? or ?? (A) 
e 
It is represented by Alef (?) + Choti Yeh (?) at the start of a word e.g. ????? [es?r] (sacrifice), ??? [ek] (one), 
etc. and by Choti Yeh (?) or Baree Yeh (?) in the middle of a word e.g. ???? [mer?] (mine), ??????? 
[?nd??er?] (darkness), ????? [beg??r] (homeless) etc. At the end of a word, It is represented by Baree Yeh 
(?) e.g. ???? [s?re] (all). 
? or ?? (e) 
? 
It is represented by Alef (?) + Zabar -? + Choti Yeh (?) at the start of a word e.g. ????? [?h] (this) and by Zabar 
-? + Choti Yeh (?) in the middle of a word e.g. ???? [m?l] (dirt). At the end of a word, it is represented by 
Zabar -? + Baree Yeh (?) e.g. ??? [h?] (is). 
? or ?? ({) 
? 
It is represented by Alef (?) + Zer -? at the start of a word e.g. ??? [?s] (this) and by Zer -? in the middle of a 
word e.g. ????? [b?r??] (rain). It never comes at the end of a word. At the end of a word, it is used as Kasr-e-
Izafat to build compound words. 
? or ?? (I) 
i 
It is represented by Alef (?) + Zer -? + Choti Yeh (?) at the start of a word e.g. ?????? [im?n] (belief) and by 
Zer -? + Choti Yeh (?) in the middle or at the end of a word e.g. ?????? [?miri] (richness), ????? [q?rib] (near), 
etc. 
? or ?? (i) 
? 
It is represented by Alef (?) + Pesh -? at the start of a word e.g. ?????? [?d?d???r] (there) and by Pesh -? in the 
middle of a word e.g. ???? [m?ll] (price). It never comes at the end of a word. 
? or ?? (U) 
u 
It is represented by Alef (?) + Pesh -? + Vav (?) at the start of a word e.g. ???????? [?g??t??] (dozzing) and by 
Pesh -? + Vav (?) in the middle or at the end of a word e.g. ????? [sur?t ?] (face), ?????? [t??r?zu] (physical bal-
ance), etc. 
? or ?? (u) 
o It is represented by Alef (?) + Vav (?) at the start of a word e.g. ????? [o???] (nasty) and by Vav (?) in the 
middle or at the end of a word e.g. ???? [holi] (slowly), ??? [k?ho] (say), etc. 
? or ?? (o) 
? 
It is represented by Alef (?) + Zabar -? + Vav (?) at the start of a word e.g. ???? [??] (hindrance) and by Zabar -? 
+ Vav (?) in the middle or at the end of a word e.g. ???? [m?t ?] (death). 
? or ?? (O) 
r ? 
It is represented by a consonant symbol Reh (?) [r] as this vowel is only present in Sanskrit loan words. It is 
almost not used in modern standard Hindi. It is not present in Urdu as it is used only in Sanskrit loan words. ? or ?? (r1) 
Note: In Hindi, Nasalization of a vowel is done by adding Anunasik (??) or Anusavar (??) after the vowel. Anusavar (??) is used when 
the vowel graph goes over the upper line; otherwise Anunasik (??) is used (Kellogg, 1872; Montaut, 2004). In UIT, ~ is added at end of 
UIT encoding for nasalization of all above vowels except the last one that do not have a nasalized form. 
Table 5: Analysis and Mapping of Hindi Urdu Vowels 
5 HUMT Rules 
In this section, UIT mappings of Hindi Urdu al-
phabets and contextual rules that are necessary 
for Hindi-Urdu transliteration are discussed. 
5.1 UIT Mappings 
UIT mappings for Hindi and Urdu alphabets and 
their vowels are given in Table 2 ? 5. In Hindi, 
SHA (?) and SSA (?) both represent the sound 
[?] and have one equivalent symbol in Urdu, i.e. 
Sheen (?). To make distinction between SHA 
(?) and SSA (?) in UIT, they are mapped on S 
and S1 respectively. Similarly in Urdu, Seh (?), 
Seen (?) and Sad (?) represent the sound [s] 
and have one equivalent symbol in Hindi, i.e. SA 
(?). To make distinction among them in UIT, 
they are mapped on s1, s and s2 respectively. All 
similar cases are shown in Table 6. 
IPA Urdu (UIT) Hindi (UIT) 
? ? (t_d), ? (t_d1), ? (t_d2) ? (t_d) 
s ? (s1), ? (s), ? (s2) ? (s) 
H ? (h1), ? (h) ? (h) 
540
z ? (z1), ? (z), ? (Z), ? (z2), ? (z3) ? (z) 
? ? (S) ? (S), ? (S1) 
r ? (r) ? (r), ? (r1) 
Table 6: Multiple Characters for one IPA 
Multi-equivalences are problematic for Hindi-
Urdu transliteration. 
UIT is extendable to other languages like Eng-
lish, French, Kashmiri, Punjabi, Sindhi, etc. For 
example, Punjabi has one extra character than 
Urdu i.e. Rnoon [?] (?), it is mapped on ?n`? in 
UIT. Similarly, UIT, a phonetic encoding 
scheme, can be extended to other languages. 
All these mappings can be implemented by 
simple finite-state transducers using XEROX?s 
XFST (Beesley and Karttunen, 2003) language. 
A sample XFST code is given in Figure 1. 
read regex [? -> b, ? -> p, ? -> [d ?_? Z] ]; 
read regex [[? ?] -> [d ?_? Z ?_? h]]; 
read regex [? -> v, ? -> j || .#. _ ]; 
read regex [? -> v, ? -> j || _ [? | ?]]; 
read regex [? -> e || CONSONANTS _ ]; 
read regex [ ? -> i || _ [ ?| .#.]]; 
? 
read regex [? -> b, ? -> p, ? -> z, ? -> [d ?_? Z ?_? h]]; 
read regex [? -> ?@?, ? -> A, ? -> i || .#. _ ] 
? 
Figure 1: Sample XFST code 
Finite-state transducers are robust and time 
and space efficient (Mohri, 1997). They are a 
logical choice for Hindi-Urdu transliteration via 
UIT as this problem could also be seen as string 
matching and producing an analysis string as an 
output like finite-state morphological analysis. 
5.2 Contextual HUMT Rules 
UIT mappings need to be accompanied by neces-
sary contextual HUMT rules for correct Hindi to 
Urdu transliteration and vice versa. 
For example, Vav (?) and Choti Yeh (?) are 
used to represent vowels like [o], [?], [i], [e], etc. 
but they are also used as consonants. Vav (?) and 
Choti Yeh (?) are consonants when they come at 
the beginning of a word or when they are fol-
lowed by Alef mada (?) or Alef (?). Also, Choti 
Yeh (?) represents the vowel [e] when it is pre-
ceded by a consonant but when it comes at the 
end of a word and is preceded by a consonant 
then it represents the vowel [i]. These rules are 
shown in red colour in Figure 1. 
Thus HUMT contextual rules are necessary for 
Hindi-Urdu transliteration and they can also be 
implemented as finite-state transducer using 
XFST. All these rules can?t be given here due to 
shortage of space. 
6 HUMT System 
The HUMT system exploits the simplicity, ro-
bustness, power and time and space efficiency of 
finite-state transducers. Exactly the same trans-
ducer that encodes a Hindi or Urdu text into UIT 
can be used in the reverse direction to generate 
Hindi or Urdu text from the UIT encoded text. 
This two-way power of the finite-state transducer 
(Mohri, 1997) has significantly reduced the 
amount of efforts to build the HUMT system. 
Another very important and powerful strength of 
finite-state transducers, they can be composed 
together to build a single transducer that can per-
form the same task that could be done with help 
of two or more transducers when applied sequen-
tially (Mohri, 1997), not only allows us to build a 
direct Hindi ? Urdu transducer, but also helps to 
divide difficult and complex problems into sim-
ple ones, and has indeed simplified the process of 
building the HUMT system. A direct Hindi ? 
Urdu transducer can be used in applications 
where UIT encoding is not necessary like Hindi-
Urdu MT system. 
The HUMT system can be extended to per-
form transliteration between two or more differ-
ent scripts used for the same languages like 
Kashmiri, Kazakh, Malay, Punjabi, Sindhi, etc. 
or between language pairs like English?Hindi, 
English?Urdu, English?French, etc. by just in-
troducing the respective transducers in the Fi-
nite-state Transducer Manager of 
the HUMT system to build a multilingual ma-
chine transliteration system. 
 
Figure 2: HUMT System 
In the HUMT system, Text Tokenizer 
takes the input Hindi or Urdu Unicode text, toke-
nizes it into Hindi or Urdu words and passes 
541
them to UIT Enconverter. The enconverter 
enconverts Hindi or Urdu words into UIT words 
using the appropriate transducer from Finite-
state Transducers Manager, e.g. for 
Hindi words, it uses the Hindi ? UIT transducer. 
It passes these UIT encoded words to UIT De-
converter, which deconverts them into Hindi 
or Urdu words using the appropriate transducer 
from Finite-state Transducers Man-
ager in reverse and generates the target Hindi 
or Urdu text. 
6.1 Enconversion of Hindi-Urdu to UIT 
Hindi ? UIT transducer is a composition of the 
mapping rules transducers and the contextual 
rules transducers. This is clearly shown in figure 
3 with a sample XFST code. 
clear stack 
set char-encoding UTF-8 
define CONSONANTS [? | ? | ? | ? | ? | ? | ?]; 
read regex [?? -> J, ?? -> h, ?? -> 0]; 
read regex [? -> k, ? -> [k ?_? h],  ? -> g, ? -> [g ?_? 
h],  ? -> [n ?@? g], ? -> [t ?_? S], ? -> [t ?_? S ?_? h]]; 
read regex [[? ?? ?] -> [k k]?, [? ?? ?] -> [k k ?_? h],  
[? ?? ?] -> [g g]?, [? ?? ?] -> [g g ?_? h]]; 
? 
read regex [[? ??] -> [k h], [?] -> [n A], [? ??] -> [j h], 
[? ??] -> [v h] || .#. _ .#.]; 
compose net 
Figure 3: Sample code for Hindi ? UIT Transducer 
How the HUMT system works is shown with 
the help of an example. Take the Hindi sentence: 
????? ????? ?? ??? ?? ????? ?? 
[f?x??? m?h?b?? ?r ?m?n k? n???n h?] 
(Dove is symbol of love and peace) 
This sentence is received by the Text To-
kenizer and is tokenized into Hindi words, 
which are enconverted into UIT words using the 
mapping and the contextual rules of Hindi ? 
UIT transducer by the UIT Enconverter. 
The Hindi Words and the UIT enconversions are 
given in Table 7. 
Hindi Words UIT 
????? [f?x???] fAx@t_dA 
????? [m?h?b??] mUh@b@t_d 
?? [?r] Or 
??? [?m?n] @m@n 
?? [k?] kA 
????? [n???n] nISAn 
?? [h?] H{ 
Table 7: Hindi Words with UIT 
6.2 Deconversion of UIT to Hindi-Urdu 
For the deconversion, Hindi ? UIT or Urdu ? 
UIT transducer is applied in reverse on the UIT 
enconverted words to generate Hindi or Urdu 
words. To continue with the example in the pre-
vious section, the UIT words are deconverted 
into the Urdu words by the UIT Deconver-
ter using Urdu ? UIT transducer in reverse. 
The Urdu words are given in table 8 with the 
Hindi and the UIT words. 
Hindi UIT Urdu 
????? [f?x???] fAx@t_dA ????? 
????? [m?h?b??] mUh@b@t_d ????? 
?? [?r] Or ???? 
??? [?m?n] @m@n ??? 
?? [k?] kA ?? 
????? [n???n] nISAn ????? 
?? [h?] H{ ??? 
Table 8: Hindi, UIT and Urdu Words 
Finally, the following Urdu sentence is gener-
ated from Urdu words. 
????? ????? ???? ??? ?? ????? ???  
Here the word ????? [f?x???] (Dove) is 
transliterated wrongly into ??????? because the 
vowel [?] at the end of some Urdu words (bor-
rowed from Persian language) is transcribed with 
help of Heh-gol [h] (?). This phenomenon is a 
problem for Hindi to Urdu transliteration but not 
for Urdu to Hindi transliteration. 
7 Evaluation Experiments and Results 
For evaluation purpose, we used a Hindi corpus, 
containing 374,150 words, and an Urdu corpus 
with 38,099 words. The Hindi corpus is extracted 
from the Hindi WordNet2 developed by the Re-
source Center for Indian Language Technology 
Solutions, CSE Department, Indian Institute of 
Technology (IIT) Bombay, India and from the 
project CIFLI (GETALP-LIG 3 , University Jo-
seph Fourier), a project for building resources 
and tools for network-based ?linguistic survival? 
communication between French, English and 
Indian languages like Hindi, Tamil, etc. The Ur-
du corpus was developed manually from a book 
titled ?????? ???? [z?lm?? k?d?]. The Hindi-Urdu 
corpus contains in total 412,249 words. 
The HUMT system is an initial step to build 
Urdu resources and add Urdu to the languages of 
                                                 
2 http://www.cfilt.iitb.ac.in 
3 http://www.liglab.fr 
542
SurviTra-CIFLI (Survival Translation) (Boitet et 
al, 2007), a multilingual digital phrase-book to 
help tourists for communication and enquiries 
like restaurant, hotel reservation, flight enquiry, 
etc. 
To reduce evaluation and testing efforts, 
unique words are extracted from the Hindi-Urdu 
corpus and are transliterated using the HUMT 
system. These unique words and their translitera-
tions are checked for accuracy with the help of 
dictionaries (Platts, 1911; Feroz). 
7.1 Urdu ? Hindi Transliteration Results 
While transliterating Urdu into Hindi, multiple 
problems occur like multi-equivalences, no equi-
valence, missing diacritical marks in Urdu text. 
For example, Sheen [?] (?) can be transliterated 
in Hindi into SHA [?] (?) or SSA [?] (?) that are 
present in 7,917 and 6,399 corpus words respec-
tively. Sheen [?] (?) is transliterated into SHA 
[?] (?) by default. Thus, 6,399 words containing 
SSA [?] (?) are wrongly transliterated into Hindi 
using HUMT. Urdu to Hindi multi-equivalences 
cases are given in Table 9 with their frequencies. 
Urdu Hindi (corpus Frequency) 
? [?] ? (7917), ? (6399) 
? [r] ? (79,345), ? (199) 
Table 9: Urdu ? Hindi Multi-equivalences 
Some Hindi characters do not have equivalent 
characters in Urdu, e.g. NNA [?] (?), retroflexed 
version of [n], has approximately mapped onto 
Noon [n] (?). This creates a problem when a 
word actually containing NNA [?] (?) is transli-
terated from Urdu to Hindi. No-equivalence cas-
es are given in Table 10. 
Urdu Hindi (corpus Frequency) 
- ? (4744) 
- ? (0) 
- ? (532) 
Table 10: Urdu ? Hindi No-equivalences 
Missing diacritical marks is the major problem 
when transliterating Urdu into Hindi. The impor-
tance of diacritical marks has already been ex-
plained in section 4.3. This work assumed that all 
necessary diacritical marks are present in Urdu 
text because they play a vital role in Urdu to 
Hindi transliterations. Results of Urdu to Hindi 
transliteration are given in Table 11. 
 Error Words Accuracy 
Corpus 11,874 97.12% 
Unique Words 123 98.54% 
Table 11: Urdu ? Hindi Transliteration Results 
7.2 Hindi ? Urdu Transliteration Results 
Hindi ? Urdu transliteration also have multi-
equivalences and no-equivalence problems that 
are given in Table 12. 
 
Hindi Urdu (corpus Frequency) 
? 1312) ? ,(41,751) ?) 
? 86) ? ,(751) ? ,(53,289) ?) 
? 1800) ? ,(72,850) ?) 
? 2) ? ,(215) ? ,(228) ? ,(1489) ? ,(2551) ?) 
- 2857) ?) 
Table 12: Hindi ? Urdu Multi & No equivalences 
Results of Hindi to Urdu transliteration are 
given in Table 13. 
 Error Words Accuracy 
Corpus 8,740 97.88% 
Unique Words 1400 83.41% 
Table 13: Hindi ? Urdu Transliteration Results 
Interestingly, Hindi to Urdu conversion is 
14.47% less accurate on the unique words as 
compared to its result on the corpus data that is a 
contrasting fact for the reverse conversion. 
The HUMT system gives 97.12% accuracy for 
Urdu to Hindi and 97.88% accuracy for Hindi to 
Urdu. Thus, the HUMT system works with 
97.50% accuracy. 
8 Future Implications 
Hindi-Urdu transliteration is one of the cases 
where one language is written in two or more 
mutually incomprehensible scripts like Kazakh, 
Kashmiri, Malay, Punjabi, Sindhi, etc. The 
HUMT system can be enhanced by extending 
UIT and introducing the respective finite-state 
transducers. It can similarly be enhanced to 
transliterate between language pairs, e.g. Eng-
lish-Arabic, English-Hindi, English-Urdu, 
French-Hindi, etc. Thus, it can be enhanced to 
build a multilingual machine transliteration sys-
tem that can be used for cross-scriptural transli-
teration and MT. 
We are intended to resolve the problems of 
multi-equivalences, no-equivalences and the 
most importantly the restoration of diacritical 
marks in Urdu text that are observed but left un-
attended in the current work. Restoration of dia-
critical marks in Urdu, Sindhi, Punjabi, Kashmi-
ri, etc. texts is essential for word sense disambig-
uation, natural language processing and speech 
synthesis of the said languages. 
The HUMT system will also provide a basis 
for the development of Inter-dialectal translation 
system and MT system for surface-close lan-
guages like Indonesian-Malay, Japanese-Korean, 
543
Hindi-Marathi, Hindi-Urdu, etc. Translation of 
the surface-close languages or inter-dialectal 
translation can be performed by using mainly 
transliteration and some lexical translations. 
Thus HUMT will also provide basis for Cross-
Scriptural Transliteration, Cross-scriptural In-
formation Retrieval, Cross-scriptural Applica-
tion Development, inter-dialectal translation and 
translation of surface-close languages. 
9 Conclusion 
Finite-state transducers are very efficient, robust, 
and simple to use. Their simplicity and powerful 
features are exploited in the HUMT model to 
perform Hindi-Urdu transliteration using UIT 
that is a generic and flexible encoding scheme to 
uniquely encode natural languages into ASCII. 
The HUMT system gives 97.50% accuracy when 
it is applied on the Hindi-Urdu corpora contain-
ing 412,249 words in total. It is an endeavor to 
bridge the scriptural, ethnical, cultural and geo-
graphical division between 1,017 millions people 
around the globe. 
Acknowledgement 
This study is partially supported by the project CIFLI 
funded under ARCUS-INDIA program by Ministry of 
Foreign Affairs and Rh?ne-Alpes region. 
References 
Beesley, Kenneth R. and Karttunen, Lauri. 2003. Fi-
nite State Morphology. CSLI Publications, USA. 
Boitet, Christian. Bhattacharayya, Pushpak. Blanc, 
Etienne. Meena, Sanjay. Boudhh, Sangharsh. Fafiotte, 
Georges. Falaise, Achille. Vacchani, Vishal. 2007. 
Building Hindi-French-English-UNL Resources for 
SurviTra-CIFLI, a linguistic survival system under 
construction. Proceedings of the Seventh Symposium 
on NLP, 13 ? 15 December, Chonburi, Thailand. 
Feroz ul Din. ????????????? ????? Feroz Sons Publishers, 
Lahore, Pakistan. 
Hussain, Sarmad. 2004. Letter to Sound Rules for 
Urdu Text to Speech System. Proceedings of Work-
shop on Computational Approaches to Arabic Script-
based Languages, COLING 2004, Geneva, Switzer-
land. 
James, L. Hieronymus. 1993. ASCII Phonetic Symbols 
for the World?s Languages: Worldbet. AT&T Bell 
Laboratories, Murray Hill, NJ 07974, USA. 
Kellogg, Rev. S. H. 1872. A Grammar of Hindi Lan-
guage. Delhi, Oriental Book Reprints. 
Khan, Mehboob Alam. 1997. ????? ?? ???? ???? (Sound 
System in Urdu) National Language Authority, Pakis-
tan. 
Knight, K. and Graehl, J. 1998. Machine Translitera-
tion. Computational Linguistics, 24(4). 
Knight, K. and Stall, B G. 1998. Translating Names 
and Technical Terms in Arabic Tex. Proceedings of 
the COLING/ACL Workshop on Computational Ap-
proaches to Semitic Languages. 
Malik, M. G. Abbas. 2006. Punjabi Machine Transli-
teration. Proceedings of the 21st International Confe-
rence on Computational Linguistics and 44th Annual 
Meeting of the ACL, July 2006, Sydney.  
Mohri, Mehryar. 1997. Finite-state Transducers in 
Language and Speech Processing. Computational 
Linguistics, 23(2). 
Montaut A. 2004. A Linguistic Grammar of Hindi. 
Studies in Indo-European Linguistics Series, M?n-
chen, Lincom Europa. 
Paola, V. and Sanjeev, K. 2003. Transliteration of 
proper names in cross-language applications. Pro-
ceedings of the 26th annual International ACM SIGIR 
conference on research and development in informa-
tion retrieval. 
Pirkola, A. Toivonen, J. Keskustalo, H. Visala, K. and 
J?rvelin, K. 2003. Fuzzy translation of cross-lingual 
spelling variants. Proceedings of the 26th Annual 
international ACM SIGIR Conference on Research 
and Development in informaion Retrieval, Toronto, 
Canada. 
Platts, John T. 1909. A Grammar of the Hindustani or 
Urdu Language. Crosby Lockwood and Son, 7 Sta-
tioners Hall Court, Ludgate hill, London. E.C. 
Platts, John T. 1911. A Dictionary of Urdu, Classical 
Hindi and English. Crosby Lockwood and Son, 7 Sta-
tioners Hall Court, Ludgate hill, London, E.C. 
Rahman, Tariq. 2004. Language Policy and Localiza-
tion in Pakistan: Proposal for a Paradigmatic Shift. 
Crossing the Digital Divide, SCALLA Conference on 
Computational Linguistics. 
Rai, Alok. 2000. Hindi Nationalism. Orient Longman 
Private Limited, New Delhi. 
Wells, J C. 1995. Computer-coding the IPA: A Pro-
posed Extension of SAMPA. University College Lon-
don. http://www.phon.ucl.ac.uk/home/sampa/ipasam-
x.pdf. 
Yan Qu, Gregory Grefenstette, David A. Evans. 2003. 
Automatic transliteration for Japanese-to-English text 
retrieval. Proceedings of the 26th annual interntional 
ACM SIGIR conference on Research and develop-
ment in information retrieval. 
Zia, Khaver. 1999a. Standard Code Table for Urdu. 
Proceedings of 4th Symposium on Multilingual In-
formation Processing (MLIT-4), Yangon, Myanmar, 
CICC, Japan. 
544
Proceedings of the 2009 Named Entities Workshop, ACL-IJCNLP 2009, pages 177?185,
Suntec, Singapore, 7 August 2009. c?2009 ACL and AFNLP
A Hybrid Model for Urdu Hindi Transliteration 
 
 
Abbas Malik Laurent Besacier Christian Boitet 
GETALP, Laboratoire d?Informatique Grenoble (LIG) 
Universit? Joseph Fourier 
Abbas.Malik, Laurent.Besacier, 
Christian.Boitet@imag.fr 
Pushpak Bhattacharyya 
IIT Bombay 
 
pb@cse.iitb.ac.in 
 
  
 
Abstract 
We report in this paper a novel hybrid ap-
proach for Urdu to Hindi transliteration that 
combines finite-state machine (FSM) based 
techniques with statistical word language 
model based approach. The output from the 
FSM is filtered with the word language model 
to produce the correct Hindi output. The main 
problem handled is the case of omission of di-
acritical marks from the input Urdu text. Our 
system produces the correct Hindi output even 
when the crucial information in the form of di-
acritic marks is absent. The approach improves 
the accuracy of the transducer-only approach 
from 50.7% to 79.1%. The results reported 
show that performance can be improved using 
a word language model to disambiguate the 
output produced by the transducer-only ap-
proach, especially when diacritic marks are not 
present in the Urdu input. 
1 Introduction 
Transliteration is a process to transcribe a word 
written in one language, in another language by 
preserving its articulation. It is crucial for han-
dling out-of-vocabulary (OOV) words in differ-
ent domains of Natural Language Processing 
(NLP), especially in Machine Translation 
(Knight and Graehl, 1998; Knight and Stall, 
1998; Paola and Sanjeev, 2003), Cross-Lingual 
Information Retrieval (Pirkola et al, 2003), the 
development of multi-lingual resources (Yan et 
al., 2003) and multi-lingual text and speech 
processing. It is also useful for Inter-dialectal 
translation without lexical changes and some-
times it is mandatory when the dialects in ques-
tion use mutually incomprehensible writing sys-
tems. Such cases exists in Malay (written in 2 
different scripts), Turkish (2 scripts), Kurdish (3 
scripts), Hindi/Urdu (2 scripts), Punjabi (2 
scripts), etc., where words are transliterated from 
one script to the other, irrespective of their type 
(noun, verb, etc., and not only proper nouns and 
unknown words). In this study, we will focus on 
Hindi/Urdu example. 
Hindi and Urdu are written in two mutually 
incomprehensible scripts, Devanagari and Urdu 
script ? a derivative of Persio-Arabic script re-
spectively. Hindi and Urdu are the official lan-
guages of India and the later is also the National 
language of Pakistan (Rahman, 2004). Table 1 
gives an idea about the number of speakers of 
Hindi and Urdu. 
 
 Native Speaker
2nd Lang. 
Speaker Total 
Hindi 366 487 853 
Urdu 60.29 104 164.29 
Total 426.29 591 1,017.29 
Source: (Grimes, 2000) all numbers are in millions 
Table 1: Hindi and Urdu Speakers 
Notwithstanding the transcriptional differences, 
Hindi and Urdu share phonology, grammar, 
morphology, literature, cultural heritage, etc. 
People from Hindi and Urdu communities can 
understand the verbal expressions of each other 
but the written expression of one community is 
alien to the other community. 
A finite-state transliteration model for Hindi 
and Urdu transliteration using the Universal In-
termediate Transcription (UIT ? a pivot between 
the two scripts) was proposed by Malik et al 
(2008). The non-probabilistic finite-state model 
is not powerful enough to solve all problems of 
Hindi ? Urdu transliteration. We visit and ana-
lyze Hindi ? Urdu transliteration problems in 
the next section and show that the solution of 
these problems is beyond the scope of a non-
probabilistic finite-state transliteration model. 
177
Following this, we show how a statistical model 
can be used to solve some of these problems, 
thereby enhancing the capabilities of the finite-
state model. 
Thus, we propose a hybrid transliteration 
model by combining the finite-state model and 
the statistical word language model for solving 
Hindi ? Urdu transliteration problems, dis-
cussed in section 2. Section 3 will throw light on 
the proposed model, its different components and 
various steps involved in its construction. In sec-
tion 4, we will report and various aspects of dif-
ferent experiments and their results. Finally, we 
will conclude this study in section 5. 
2 Hindi Urdu Transliteration 
In this section, we will analyze Hindi ? Urdu 
transliteration problems and will concentrate on 
Urdu to Hindi transliteration only due to shortage 
of space and will discuss the reverse translitera-
tion later. Thus, the remainder of the section ana-
lyzes the problems from Urdu to Hindi translite-
ration. 
2.1 Vowel, Yeh (?) and Waw (?) 
Urdu is written in a derivation of Persio-Arabic 
script. Urdu vowels are represented with the help 
of four long vowels Alef-madda (?), Alef (?), 
Waw (?), Yeh (?) and diacritical marks. One 
vowel can be represented in many ways depend-
ing upon its context or on the origin of the word, 
e.g. the vowel [?] is represented by Alef-madda 
(?) at the beginning of a word, by Alef (?) in the 
middle of a word and in some Persio-Arabic loan 
word, it is represented by the diacritical mark 
Khari Zabar (G?). Thus Urdu has very complex 
vowel system, for more details see Malik et al 
(2008). Urdu contains 10 vowels, and 7 of them 
also have their nasalization forms (Hussain, 
2004; Khan, 1997) and 15 diacritical marks. 
Thou diacritical marks form the cornerstone of 
the Urdu vowel system, but are sparingly used 
(Zia, 1999). They are vital for the correct Urdu to 
Hindi transliteration using the finite-state transli-
teration model. The accuracy of the finite-state 
transliteration model decreases from above 80% 
to 50% in the absence of diacritical marks. Fig-
ure 1 shows two example Urdu phrases (i) with 
and (ii) without the diacritical marks and their 
Hindi transliteration using the finite-state transli-
teration model. Due to the absence of Zabar (F?) 
in the first and the last words in (1)(ii) and in the 
5th word in (2)(ii), vowels ? ? [?] and ? [?] are 
transliterated into vowels ?? [e] and ? [o] re-
spectively. Similarly, due to the absence of Pesh 
( E?) and Zer (G?) in 3rd and 4th words respectively 
in (1)(ii), both vowels ? ? [?] and ?? [?] are con-
verted into the vowel [?]. All wrongly converted 
words are underlined. 
 
(1)  (i) ??? ???? ?? ???? ????? ??? ????? ???? 
 (ii) ?? ??? ???? ??? ??? ?? ??? ???? 
(i) ??? ?? ???? ???? ??? ???? ???? ?? 
?? ??? ???? ??? ??? ??? ?? ??? (ii) 
I have not done a lot of work 
(2) (i) ????? ?? ?? ?????? ???? ??? ?? ???? ???????????  
  (ii) ????? ??? ?? ??? ??????? ??? ?? ??? ???  
(i) ??????? ??? ?? ?? ?? ????? ??? ?? ?? 
?? ?? ??? ???? ?? ?? ?? ??? ??? ??? (ii) 
Both at the central level and at the state level 
Figure 1: Example Urdu Phrases 
In Hindi, each vowel is represented by a cha-
racter and a vowel sign except the vowel [?], 
which is only represented by the character ? and 
do not have a vowel sign (Malik et al, 2008). 
Table 2 gives all vowel conversion problems. 
 
Sr. IPA 
Vowel 
Conversion 
Problems 
Hindi 
1 ? ? ? ? ? or ?? ? ? or 0* 
2 ? ? ? ? ? or ?? ? ? or 0* 
3 i i ? e ? or ?? ? ? or ?? 
4 ? ? ? e ? or ?? ? ? or ?? 
5 u u ? o ? or ?? ? ? or ?? 
6 ? ? ? o ? or ?? ? ? or ??
7 j j ? e ? ? ?? 
8 v v ? o ? ? ?? 
* Zero (0) means deleted. 
Table 2: Vowel Problems from Urdu to Hindi 
Long vowels Yeh (?) [j] and Waw (?) [v] are 
also used as consonants and certain contextual 
rules help us to decide whether they are used as a 
consonant or as a vowel, e.g., Yeh (?) and Waw 
(?) are used as consonants at the start of a word 
and after the long vowel Alef-madda (?), etc. Fi-
178
nite-state transliteration model can exploit such 
contextual rules but it is not possible to decide 
Yeh (?) and Waw (?) as consonants in the ab-
sence of diacritics. Thus a finite-state translitera-
tion model wrongly converts consonant Yeh (?) 
and Waw (?) into vowels ?? [e] and ?? [o], also 
given in Table 2, instead of consonants Ya (?) 
and Wa (?) respectively, e.g., in the word ????? 
(prince) [k??vr], Waw is wrongly converted into 
the vowel [o] due to the absence of Zabar ( F?) 
after it and the word becomes [k?nor], which is 
not a valid word of Hindi/Urdu. 
2.2 Native Sounds 
The Hindi writing system contains some native 
sounds/characters, e.g., vocalic R (?) [r?], retrof-
lex form of Na (?) [?], etc. On the other hand 
Urdu does not have their equivalents. Thus 
words containing such sounds are transcribed in 
Urdu with their approximate phonetic equiva-
lents. All such cases are problematic for Urdu to 
Hindi transliteration and are given in Table 3. 
 
Sr. IPA Hindi Urdu 
1 r? ? or ?? ? [r] 
2 ? ? ? [n] 
3 ? ? ? [?] 
4 Half h ?? ? [h] 
Table 3: Sounds of Sanskrit Origin 
2.3 Conjunct Form 
The Hindi alphabet is partly syllabic because 
each consonant inherits the vowel [?]. Two or 
more consonants may be combined together to 
form a cluster called Conjunct that marks the 
absence of the inherited vowel [?] between con-
sonants (Kellogg, 1872; Montaut, 2004). Con-
junction is also used to represent the gemination 
of a consonant, e.g., ?[k]+??+?[k]=???[kk] 
where ?? is the conjunct marker and aspiration of 
some consonants like ? [n], ? [m], ? [r] and ? 
[l] when used as conjunction with ? [h], e.g., 
?[n] + ?? + ?[h] = ???[nh]. Conjunction has a spe-
cial meaning but native speakers use conjunct 
forms without any explicit rule (Montaut, 2004). 
On the other hand, Urdu uses Jazam ( H? ? a 
diacritic) and Shadda (H?) to mark the absence of 
a vowel between two consonants and gemination 
of a consonant respectively. In the absence of 
these diacritics in the input Urdu text, it is not 
possible to decide on the conjunct form of con-
sonants except in the case of aspiration. In Urdu, 
aspiration of a consonant is marked with the spe-
cial character Heh-Doachashmee (?) (Malik et 
al., 2008), thus a finite-state transducer can easi-
ly decide about the conjunction for aspiration 
with a simple contextual rule, e.g. the word ????? 
(bride) [d??lhn] is correctly transliterated by our 
finite-state transliteration model into ??????. 
2.4 Native Hindi Spellings and Sanskritized 
Vocabulary 
Sanskrit highly influences Hindi and especially 
its vocabulary. In some words of Sanskrit origin, 
the vowel ?? [i] and ?? [u] are transcribed as ?? 
[?] and ?? [?] respectively at the end of a word. 
Javaid and Ahmed (2009) have pointed to this 
issue in these words ?Hindi language can have 
words that end on short vowel??. Table 4 gives 
some examples of such native words. On the 
other hand in Urdu, short vowels can never come 
at the end of a word (Javaid and Ahmed, 2009; 
Malik et al, 2008). 
 
Vowel Examples 
?? [i] 
??????? ? ????? (person) [vj?kti] 
??????? ? ??????? (culture) [s??skr?t?i] 
???????? ? ??????? (high) [???ko?i] 
?? [u] 
???? ? ????? (for) [het?u] 
????? ?? ????? (but) [k?nt?u] 
???? ? ?????? (metal) [d??t?u] 
Table 4: Hindi Word with Short vowel at End 
It is clear from above examples that short vowels 
at the end of a Hindi word can easily be translite-
rated in Urdu using a contextual rule of a finite-
state transducer, but it is not possible to do so for 
Urdu to Hindi transliteration using a non-
probabilistic finite-state transliteration model. 
Thus Urdu to Hindi transliteration can also be 
179
considered as a special case of Back Translitera-
tion. 
In some words, the vowel ?? [u] is written as 
the vowel ?? [?], e.g., ??? ? ????? or ??? ? ???? (to be) 
[hue], ??????? (name of a city) [r???npur]. 
Some of these cases are regular and can be im-
plemented as contextual rules in a finite-state 
transducer but it is not possible in every case. 
2.5 Ain (?) 
Ain (? ? glottal stop) exists in the Arabic alpha-
bet and native Arabic speakers pronounce it 
properly. Urdu also has adopted Ain (?) in its 
alphabet as well as Arabic loan words but native 
speakers of the sub-continent cannot produce its 
sound properly, rather they produce a vowel 
sound by replacing Ain (?) with Alef (?). The 
Hindi alphabet follows one character for one 
sound rule and it does not have any equivalent of 
Ain (?). Then, Ain (?) in Urdu words is tran-
scribed in Hindi by some vowel representing the 
pronunciation of the word by native sub-
continent speakers. Thus it is always translite-
rated in some vowel in Hindi. For example, Ain 
(?) gives the sound of the vowel [?] in ????  ? 
???? (strange) [??ib] and the vowel [?] with 
and without Alef (?) in words ???  ? ?? (com-
mon) [?m] and ???  ? ??? (after) [b?d?] respective-
ly. In some words, Ain (?) is not pronounced at 
all and should be deleted while transliterating 
from Urdu to Hindi, e.g., ??????  ? ???? (to start) 
[??ru], etc. Conversion of Ain (?) is a big prob-
lem for transliteration. 
2.6 Nasalization 
Noonghunna (?) [?] is the nasalization marker of 
vowels in Urdu. Interestingly, it is only used to 
nasalize a vowel at the end of a word. In the 
middle of a word, Noon (?) [n] is used to mark 
the nasalization of a vowel and it is also used as 
a consonant. It is difficult to differentiate be-
tween nasalized and consonant Noon (?). There 
are certain contextual rules that help to decide 
that Noon (?) is used as a consonant or a nasali-
zation marker, but it not possible in all cases. 
2.7 Persio-Arabic Vocabulary 
Urdu borrows a considerable portion of it voca-
bulary from Persian and Arabic and translitera-
tion of these words in Hindi is not regular. Table 
5 explains it with few examples. 
 
Urdu 
Hindi 
FST Conversion Correct 
??????  
?????? 
(surely) 
?????? 
[b?lk?l] 
???????? 
???????? 
(with reference of) 
???????? 
[b?lv?st??] 
?? ????????
????????? 
(in fact) 
???????? 
[f?lh?qiq?t]
Table 5: Persio-Arabic Vocabulary in Urdu 
3 Hybrid Transliteration Model 
The analysis of the previous section clearly 
shows that solution of these problems is beyond 
the scope of the non-probabilistic Hindi Urdu 
Finite-state transliteration model (Malik et al, 
2008). We propose a hybrid transliteration model 
that takes the input Urdu text and converts it in 
Hindi using the Finite-state Transliteration Mod-
el (Malik et al 2008). After that, it tries to cor-
rect the orthographic errors in the transducer-
only Hindi output string using a statistical word 
language model for Hindi with the help of a 
Hindi Word Map described later. The approach 
used is rather similar to what is done in text re-
capitalization (Stolcke et al 1998) for instance. 
 
Figure 2: Hybrid Transliteration Model for Urdu 
Hindi 
Normally, the Urdu text does not contain neces-
sary diacritical marks that are mandatory for the 
correct transliteration by the finite-state compo-
nent Urdu Hindi Transliteration 
180
Finite-state Machine (UHT-FSM), 
described by Malik et al (2008). The proposed 
hybrid model focuses on the correct translitera-
tion of Urdu texts without diacritical marks. Fig-
ure 2 gives the proposed Model architecture. 
3.1 Preprocessing UHT-FSM Output 
The goal of this pre-processing is to generate a 
more ?normalized? (and consequently more am-
biguous) form of Hindi, e.g. pre-processing 
transforms both corpus words ?? (this) [?s] and 
?? (that) [?s] (if encountered in the UHT-FSM 
Hindi output) into the default input Hindi word 
??* [?s] (not a valid Hindi word but is a finite-
state transliteration of the input Urdu word ??, a 
word without diacritical marks). Thus pre-
processing is vital for establishing connections 
between the UHT-FSM Hindi output words 
(from the Urdu input without diacritical marks) 
and the Hindi corpus words. In the example 
above, the word ??* [?s] is aligned to two Hin-
di corpus words. All such alignments are record-
ed in the Hindi Word Map. This ambiguity will 
be solved by the Hindi word language 
model, trained on a large amount of Hindi data. 
Thus pre-processing is a process that establishes 
connections between the most likely expected 
input Hindi word forms (UHT-FSM Hindi output 
from the Urdu input without diacritical marks) 
and the correct Hindi word forms (words that are 
present in the Hindi corpus). 
The Preprocessing component is a finite-
state transducer that normalizes the Hindi output 
of UHT-FSM component for the Hindi word 
language model. The transducer converts all 
cases of gemination of consonants into a simple 
consonant. For example, the UHT-FSM converts 
the Urdu word ??? (God) [r?bb] into ???? and the 
Preprocessing converts it into ?? [rb]. The 
transducer also removes the conjunct marker (??) 
from the output of the UHT-FSM except when it 
is preceded by one of the consonant from the set 
{? [r], ? [l], ? [m], ? [n]} and also followed by 
the consonant ? [h] (first 3 lines of Figure 3), 
e.g., UHT-FSM converts the Urdu words ?????? 
(Hindi) [h?ndi] and ????? (bride) [d??lhn] into ?????? 
and ?????? respectively and the Preprocess-
ing component converts them into ????? (re-
moves ??) and ?????? (no change). Actually, Pre-
processing deteriorates the accuracy of the output 
of the UHT-FSM component. We will come back 
to this point with exact figures in the next sec-
tion. 
The code of the finite-state transducer is given 
in XFST (Beesley and Karttunen, 2003) style in 
Figure 3. In XFST, the rules are applied in re-
verse order due to XFST?s transducer stack, i.e. a 
rule written at the end of the XFST script file 
will apply first and so on. 
 
read regex [? ?-> 0 || [? - [? | ? | ? | ?]] _ [? - 
?]]; 
read regex [?? -> 0 || [? | ? | ? | ?] _ [? - ?]]; 
read regex [?? -> 0 || [? - [? | ? | ? | ?]] _ [?]]; 
read regex [[? ? ??] -> ?, [? ? ??] -> ?, 
[? ? ??] -> ?, [? ? ??] -> ?, [? ? ??] -> ?, 
[? ?? ?] -> ?, [? ? ??] -> ?, [? ? ??] -> ?, 
[? ? ??] -> ?, [? ? ??] -> ?, [? ? ??] -> ?, [? ? ?
?] -> ?, [? ?? ?] -> ?, [? ? ??] -> ?, [? ? ??] 
-> ?, [? ? ??] -> ?, [? ? ??] -> ?, [? ? ??] -> 
?, [? ? ??] -> ?, [? ? ??] -> ?, [? ? ??] -> ?, 
[? ? ??] -> ?, [? ? ??] -> ?, [? ? ??] -> ?, 
[? ?? ?] -> ?, [? ?? ?] -> ?, [? ?? ?] -> ?, 
[? ?? ?] -> ?, [? ?? ?] -> ?, [? ?? ?] -> ?, 
[? ?? ?] -> ?, [? ?? ?] -> ?, [? ?? ?] -> ?, 
[? ?? ?] -> ?, [? ?? ?] -> ?, [? ? ??] -> ?]; 
Figure 3: Preprocessing Transducer 
3.2 Hindi Word Language Model 
The Hindi Word Language Model is an 
important component of the hybrid transliteration 
model. For the development of our statistical 
word language model, we have used the Hindi 
Corpus freely available from the Center for In-
dian Language Technology1, Indian Institute of 
Technology Bombay (IITB), India. 
First, we extracted all Hindi sentences from 
the Hindi corpus. Then we removed all punctua-
tion marks from each sentence. Finally, we add-
ed ?<s>? and ?</s>? tags at the start and at the 
end of each sentence. We trained a tri-gram 
Hindi Word Language Model with the 
SRILM (Stolcke, 2002) tool. The processed Hin-
di corpus data contains total 173,087 unique sen-
                                                 
1 http://www.cfilt.iitb.ac.in/ 
181
tences and more than 3.5 million words. The 
SRILM toolkit command ?disambig? is used to 
generate the final Hindi output using the statis-
tical word language model for Hindi and the 
Hindi Word Map described in the next section.  
3.3 Hindi Word Map 
The Hindi Word Map is another very important 
component of the proposed hybrid transliteration 
model. It describes how each ?normalized? Hindi 
word that can be seen after the Preprocess-
ing step and can be converted to one or several 
correct Hindi words, the final decision being 
made by the statistical word language model for 
Hindi. We have developed it from the same 
processed Hindi corpus data that was used to 
build the Hindi Word Language Model. 
We extracted all unique Hindi words (120,538 
unique words in total). 
The hybrid transliteration model is an effort to 
correctly transliterate the input Urdu text without 
diacritical marks in Hindi. Thus we take each 
unique Hindi word and try to generate all possi-
ble Hindi word options that can be given as input 
to the Hindi Word Language Model 
component for the said word. Consider the Urdu 
word ??? (God) [r?bb]; its correct Hindi spel-
lings are ????. If we remove the diacritical mark 
Shadda (H?) after the last character of the word, 
then the word becomes ?? and UHT-FSM trans-
literates it in ??*. Thus the Hindi Word 
Language Model will encounter either ???? or 
??* for the Hindi word ???? (two possible word 
options). In other words, the Hindi Word Map is 
a computational model that records all possible 
alignments between the ?normalized? or pre-
processed words (most likely input word forms) 
and the correct Hindi words from the corpus. 
We have applied a finite-state transducer that 
generates all possible word options for each 
unique Hindi word. We cannot give the full 
XFST code of the ?Default Input Creator? due to 
space shortage, but a sample XFST code is given 
in Figure 4. If the Urdu input contains all neces-
sary diacritical marks, then pre-processing of the 
output of the UHT-FSM tries to remove the effect 
of some of these diacritical marks from the Hindi 
output. In the next section, we will show that 
actually it increases the accuracy at the end. 
 
 
define CONSONANTS [? | ? | ? | ? | ? | ? | 
? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | 
? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | ? | 
? | ? | ? | ? | ? | ? | ? | ?]; 
? 
read regex [?? (->) ?,? ?? (->) ?,? ?? (->) ??, ?? 
(->) ??, ?? (->) 0, ? ?(->) 0 || [CONSONANTS] 
_ ]; 
read regex [?? (->) ? ?|| [CONSONANTS] _ [? -
 .#.]]; 
read regex [?? -> ??, ? ? -> ??, ? ? -> ? ? || 
[CONSONANTS] _ .#.]; 
? 
Figure 4: Default Input Creator Transducer 
Practically, the Hindi Word Map is a file in 
which each line contains a possible input word to 
Hindi Word Language Model, followed 
by a list of one (see line 3 of Figure 5) or more 
(see line 1 of Figure 5) words from the corpus 
that are associated with this possible input word. 
The ?Default Input Creator? transducer has 
generated in total 961,802 possible input words 
for 120,538 unique Hindi words. For implemen-
tation reasons, we also added non-ambiguous 
pair entries in the word map (see line 2 of Figure 
5), thus the initial word map contains in total 
1,082,340 entries. We extract unique option 
words and finally, Hindi Word Map contains in 
total 962,893 entries. Some examples from Hindi 
Word Map file are given in Table 5. 
 
(1) ???? ???? ???? 
(2) ???? ???? 
(3) ?? ???? 
(4) ???????? ????????? ?????????? 
(5) ?? ?? ?? 
Figure 5: Sample Hindi Word Map 
4 Test and Results 
For testing purposes, we extracted 200 Hindi 
sentences from the Hindi corpus before removing 
punctuation marks. These sentences were of 
course removed from the training corpus used to 
build the statistical word language model for 
Hindi. First we converted these 200 Hindi sen-
tences in Urdu using Hindi Urdu Finite-state 
transliteration model (Malik et al, 2008). Trans-
182
literated Urdu sentences were post edited ma-
nually for any error and we also made sure that 
the Urdu text contained all diacritical marks. 200 
original Hindi sentences served as Hindi refer-
ence for evaluation purposes. 
From the post-edited Urdu sentences, we de-
veloped two test corpora. The first test corpus 
was the Urdu test with all diacritical marks. In 
the second test corpus, all diacritical marks were 
removed. We calculated both word level and 
character level accuracy and error rates using the 
SCLITE 2  tool. Our 200 sentence test contains 
4,250 words and 16,677 characters in total. 
4.1 Test: UHT-FSM 
First we converted both Urdu test data using 
UHT-FSM only and compared the transliterated 
Hindi texts with the Hindi reference. UHT-FSM 
shows a word error rate of 21.5% and 51.5% for 
the Urdu test data with and without diacritics 
respectively. Results are given in Table 6, row 1. 
 
Urdu Test Data With diacritics 
Without 
diacritics 
UHT-FSM 
Accuracy/Error 
80.7% / 
21.5% 
50.7% / 
51.5% 
UHT-FSM + 
HLM 
82.6% / 
19.6% 
79.1% / 
23.1% 
UHT-FSM + 
PrePro 
67.5% / 
32.4% 
50.7% / 
51.5% 
UHT-FSM + 
PrePro + HLM 
85.8% / 
16.4% 
79.1% / 
23.1% 
Table 6: Word Level Results 
These results support our claims that the absence 
of diacritical marks considerably increases the 
error rate. 
4.2 Test: UHT-FSM + Hindi Language 
Model 
Both outputs of UHT-FSM are first passed direct-
ly to Hindi Word Language Model with-
out preprocessing. The Hindi Word Lan-
guage Model converts UHT-FSM Hindi out-
put in the final Hindi output with the help of 
Hindi Word Map. 
Two final outputs were again compared with 
the Hindi reference and results are given in Table 
6, row 2. For Urdu test data without diacritics, 
error rate decreased by 28.4% due to the Hindi 
Word Language Model and Hindi Word 
                                                 
2 http://www.itl.nist.gov/iad/mig//tools/ 
Map as compared to the UHT-FSM error rate. 
The Hindi Word Language Model also decreases 
the error rate by 1.9% for the Urdu test data with 
diacritics. 
4.3 Test: UHT-FSM + Preprocessing 
In this test, both outputs of UHT-FSM were pre-
processed and the intermediate Hindi outputs 
were compared with the Hindi reference. Results 
are given in Table 6, row 3. After the comparison 
of results of row 1 and row 3, it is clear that pre-
processing deteriorates the accuracy of Urdu test 
data with diacritics and does not have any effect 
on Urdu test data without diacritics. 
4.4 Test: UHT-FSM + Preprocessing + 
Hindi Language Model 
Preprocessed UHT-FSM Hindi outputs of the test 
of Section 4.3 were passed to the Hindi Word 
Language Model that produced final Hindi 
outputs with the help of the Hindi Word Map. 
Results are given in Table 6, row 4. They show 
that the Hindi Word Language Model 
increases the accuracy by 5.1% and 18.3% when 
compared with the accuracy of UHT-FSM and 
UHT-FSM + Preprocessing tests respectively, for 
the Urdu test data with diacritical marks. 
For the Urdu test data without diacritical 
marks, the Hindi Word Language Model 
increases the accuracy rate by 28.3% in compari-
son to the accuracy of the UHT-FSM output 
(whether pre-processed or not). 
4.5 Character Level Results 
All outputs of tests of Sections 4.1, 4.2, 4.3 and 
4.4 and the Hindi reference are processed to cal-
culate the character level accuracy and error 
rates. Results are given in Table 7. 
 
Urdu Test 
Data 
With 
diacritics 
Without 
diacritics 
UHT-FSM 94.1% / 6.5% 77.5% / 22.6%
UHT-FSM + 
HLM 94.6% / 6.1% 89.8% / 10.7 
UHT-FSM + 
PreP 87.5% / 13.0% 77.5% / 22.6 
UHT-FSM + 
PreP + HLM 94.5% / 6.1% 89.8% / 10.7 
Table 7: Character Level Results 
183
4.6 Results and Examples 
The Hindi Word Language Model in-
creases the accuracy of Urdu Hindi translitera-
tion, especially for the Urdu input without dia-
critical marks. 
Consider the examples of Figure 7. Figure 1 is 
reproduced here by adding the Hindi translitera-
tion of example sentences using the proposed 
hybrid transliteration model and Hindi reference. 
 
(1)  (i) ?? ???? ????? ??? ????? ???? ??? ???? 
 (ii) ??? ?? ??? ???? ??? ???? ??? ?? 
(i) ??? ?? ???? ???? ??? ???? ???? ?? 
?? ??? ???? ??? ??? ??? ?? ???(ii)  
I have not done a lot of work
Output of Hybrid Transliteration Model 
(i) ??? ?? ???? ???? ??? ???? ???? ?? 
(ii) ??? ?? ???? ???? ??? ???? ???? ?? 
Hindi Reference 
????? ???? ???? ??? ???? ???? ?? 
(2) (i) ????? ?? ?? ?????? ???? ????? ?? ?? ???????????  
  (ii) ??????? ??? ?? ??? ??? ????? ??? ?? ???  
(i) ??????? ??? ?? ?? ?? ????? ??? ?? ?? 
 ?? ??? ???? ?? ?? ?? ??? ??? ???(ii) 
?? 
Both at the central level and at the state level
Output of Hybrid Transliteration Model 
(i) ??????? ??? ?? ?? ?? ????? ??? ?? ?? 
(ii) ??? ??? ??? ?? ?? ?? ????? ??? ?? ?? 
Hindi Reference 
??????? ??? ?? ?? ?? ????? ??? ?? ?? 
Figure 7: Examples 
By comparing Hindi outputs of Hindi Word 
Language Model with the Hindi reference, 
only the first word of (2)(ii) is wrong and other 
errors due to the absence of diacritical marks in 
the source Urdu sentences are corrected properly. 
5 Conclusion 
From the test results of the previous section we 
can conclude that the statistical word language 
model increases the accuracy of Urdu to Hindi 
transliteration, especially for Urdu input text 
without diacritical marks. The proposed Hybrid 
Transliteration Model improves the accuracy and 
produces the correct Hindi output even when the 
crucial information in the form of diacritical 
marks is absent. It increases the accuracy by 
28.3% in comparison to our previous Finite-state 
Transliteration Model. This study also shows that 
diacritical marks are crucial and necessary for 
Hindi Urdu transliteration. 
References  
Beesley, Kenneth R. and Karttunen, Lauri. 2003. Fi-
nite State Morphology, CSLI Publication, USA. 
Grimes, Barbara F. (ed). 2000. Pakistan, in Ethnolo-
gue: Languages of the World, 14th Edition Dallas, 
Texas; Summer Institute of Linguistics, pp: 588-
598. 
Hussain, Sarmad. 2004. Letter to Sound Rules for 
Urdu Text to Speech System, proceedings of Work-
shop on Computational Aproaches to Arabic 
Script-based Languages, COLING 2004, Geneva, 
Switzerland. 
Jawaid, Bushra and Tafseer Ahmed. 2009. Hindi to 
Urdu Conversion: Beyond Simple Transliteration, 
in proceedings of Conference on Language & 
Technology, Lahore, Pakistan. 
Kellogg, Rev. S. H. 1872. A Grammar of Hindi Lan-
guage, Delhi, Oriental Book reprints. 
Khan, Mehboob Alam. 1997. ????? ?? ???? ???? (Sound 
System in Urdu), National Language Authority, 
Pakistan 
Knight, K. and Graehl, J. 1998. Machine Translitera-
tion, Computational Linguistics, 24(4). 
Knight, K. and Stall, B. G. 1998. Transliterating 
Names and Technical Terms in Arabic Text, pro-
ceedings of COLING/ACL Workshop on Compu-
tational Approaches to Semitic Languages. 
Malik, M. G. Abbas. Boitet, Christian. Bhattcharyya, 
Pushpak. 2008. Hindi Urdu Machine Translitera-
tion using Finite-state Transducers, proceedings of 
COLING 2008, Manchester, UK. 
Montaut, A. 2004. A Linguistic Grammar of Hindi, 
Studies in Indo-European Linguistics Series, Mun-
chen, Lincom Europe. 
Paola, V. and Sanjeev, K. 2003. Transliteration of 
Proper Names in Cross-language Application, pro-
ceedings of 26th Annual International ACM SIGIR 
Conference on Research and Development in In-
formation Retrieval, Toronto, Canada. 
Pirkola, A. Toivonen, J. Keshustalo, H. Visala, K. and 
Jarvelin, K. 2003. Fuzzy Translation of Cross-
lingual Spelling Variants, proceedings of 26th An-
nual International ACM SIGIR Conference on Re-
search and Development in Information Retrieval, 
Toronto, Canada. 
Rahman, Tariq. 2004. Language Policy and Localiza-
tion in Pakistan: Proposal for a Paradigmatic 
184
Shift, Crossing the Digital Divide, SCALLA Con-
ference on Computational Linguistics. 
Stolcke, A. 2002. SRILM ? An Extensible Language 
Modeling Toolkit, in proceedings of International 
Conference on Spoken Language Processing. 
Stolcke, A. Shriberg, E. Bates, R. Ostendorf, M. Hak-
kani, D. Plauche, M. Tur, G. and Lu, Y. 1998. Au-
tomatic Detection of Sentence Boundaries and Dis-
fluencies based on Recognized Words. Proceedings 
of International Conference on Spoken Language 
Processing (ICSLP), Sydney, Australia. 
Yan, Qu. Gregory, Grefenstette. and David A. Evans. 
2003. Automatic Transliteration for Japanese-to-
English Text Retrieval. In proceedings of the 26th 
annual international ACM SIGIR conference on 
Research and Development in Information Retriev-
al, pp: 353 ? 360. 
Zia, Khaver. 1999. Standard Code Table for Urdu. 
Proceedings of 4th Symposium on Multilingual In-
formation Processing (MILIT-4), Yangon, Myan-
mar, CICC, Japan. 
 
185
Coling 2010: Poster Volume, pages 791?800,
Beijing, August 2010
Finite-state Scriptural Translation 
M. G. Abbas Malik Christian Boitet Pushpak Bhattacharyya 
GETALP ? LIG (Grenoble Informatics Lab.) 
University of Grenoble 
 
IIT Bombay 
Abbas.Malik Christian.Boitet@imag.fr pb@iitb.ac.in 
  
 
Abstract 
We use robust and fast Finite-State Machines 
(FSMs) to solve scriptural translation prob-
lems. We describe a phonetico-morphotactic 
pivot UIT (universal intermediate transcrip-
tion), based on the common phonetic reposito-
ry of Indo-Pak languages. It is also extendable 
to other language groups. We describe a finite-
state scriptural translation model based on fi-
nite-state transducers and UIT. We report its 
performance on Hindi, Urdu, Punjabi and Se-
raiki corpora. For evaluation, we design two 
classification scales based on the word and 
sentence accuracies for translation system 
classifications. We also show that subjective 
evaluations are vital for real life usage of a 
translation system in addition to objective 
evaluations. 
1 Introduction 
Transliteration refers to phonetic translation 
across two languages with different writing sys-
tems, such as Arabic to English (Arbabi et al, 
1994; Stall and Knight, 1998; Al-Onaizan and 
Knight, 2002; AbdulJaleel and Larkey, 2003). 
Most prior work on transliteration has been done 
for MT of English, Arabic, Japanese, Chinese, 
Korean, etc., for CLIR (Lee and Choi., 1998; 
Jeong et al, 1999; Fujii and Ishikawa, 2001; 
Sakai et al, 2002; Pirkola et al, 2003; Virga and 
Khudanpur, 2003; Yan et al, 2003), and for the 
development of multilingual resources (Kang 
and Choi, 2000; Yan, Gregory et al, 2003). 
The terms transliteration and transcription are 
often used as generic terms for various processes 
like transliteration, transcription, romanization, 
transcribing and technography (Halpern, 2002). 
In general, the speech processing community 
uses the term transcription to denote a process of 
conversion from the script or writing system to 
the sound (phonetic representation). For exam-
ple, the transcription of the word ?love? in the 
International Phonetic Alphabet (IPA) is [l?v]. 
While the text processing community uses the 
term transliteration and defines it as a process of 
converting a word written in one writing system 
into another writing system while preserving the 
sound of the original word (Al-Onaizan and 
Knight, 2002; AbdulJaleel and Larkey, 2003). 
More precisely, the text processing community 
defines the term transliteration as two transcrip-
tion processes ?source script to sound transcrip-
tion? and ?sound to target script transcription? 
and sometimes as one transcription process 
?source script to target script transcription?. 
We propose a new term Scriptural Translation 
for this combined process. Scriptural translation 
is a process of transcribing a word written in the 
source language script into the target language 
script by preserving its articulation in the original 
language in such a way that the native speaker of 
the target language can produce the original pro-
nunciation. 
FSMs have been successfully used in various 
domains of Computational Linguistics and Natu-
ral Language Processing (NLP). The successful 
use of FSMs have already been shown in various 
fields of computational linguistics (Mohri, 1997; 
Roche and Schabes, 1997; Knight and Al-
Onaizan, 1998). Their practical and advanta-
geous features make them very strong candidates 
to be used for solving scriptural translation 
problems. 
First, we describe scriptural translation and 
identify its problems that fall under weak transla-
tion problems. Then, we analyze various chal-
lenges for solving weak scriptural translation 
problems. We describe our finite-state scriptural 
translation model and report our results on Indo-
Pak languages. 
791
2 Scriptural Translation ? a weak 
translation problem 
A weak translation problem is a translation prob-
lem in which the number of possible valid trans-
lations, say N, is either very small, less than 5, or 
almost always 1. 
Scriptural Translation is a sub-problem of 
general translation and almost always a weak 
translation problem. For example, French-IPA 
and Hindi-Urdu scriptural translation problems 
are weak translation problems due to their small 
number of valid translations. On the other hand, 
Japanese-English and French-Chinese scriptural 
translation problems are not weak. 
Scriptural translation is not only vital for 
translation between different languages, but also 
becomes inevitable when the same language is 
written in two or more mutually incomprehensi-
ble scripts. For example, Punjabi is written in 
three different scripts: Shahmukhi (a derivation 
of the Perso-Arabic script), Gurmukhi and Deva-
nagari. Kazakh and Kurdish are also written in 
three different scripts, Arabic, Latin and Cyrillic. 
Malay has two writing systems, Latin and Jawi 
(a derivation of the Arabic script), etc. Figure 1 
shows an example of scriptural divide between 
Hindi and Urdu. 
6 ?3[ 3e ?? ??Z ?? ]gzu[? X? 
?????? ?? ??? ?? ???? ??? 
[??n?j? ko ?m?n ki z?rur?? h?.] 
The world needs peace. 
Figure 1: Example of scriptural divide 
Thus, solving the scriptural translation prob-
lem is vital to bridge the scriptural divide be-
tween the speakers of different languages as well 
as of the same language. 
Punjabi, Sindhi, Seraiki and Kashmiri exist on 
both sides of the common border between India 
and Pakistan and all of them are written in two or 
more mutually incomprehensible scripts. The 
Hindi?Urdu pair exists both in India and Pakis-
tan. We call all these languages the Indo-Pak 
languages. 
3 Challenges of Scriptural Translation 
In this section, we describe the main challenges 
of scriptural translation. 
3.1 Scriptural divide 
There exists a written communication gap be-
tween people who can understand each other 
verbally but cannot read each other. They are 
virtually divided and become scriptural aliens. 
Examples are the Hindi & Urdu communities, 
the Punjabi/Shahmukhi & Punjabi/Gurmukhi 
communities, etc. An example of scriptural di-
vide is shown in Figure 1. Such a gap also ap-
pears when people want to read some foreign 
language or access a bilingual dictionary and are 
not familiar with the writing system. For exam-
ple, Japanese?French or French?Urdu dictiona-
ries are useless for French learners because of the 
scriptural divide. Table 1 gives some figures on 
how this scriptural divide affects a large popula-
tion of the world. 
Sr. Language Number of Speakers 
1 Hindi 853,000,000 
2 Urdu 164,290,000 
3 Punjabi 120,000,000 
4 Sindhi 21,382,120 
5 Seraiki 13,820,000 
6 Kashmir 5,640,940 
Total 1178,133,060 
Table 1: Number of Speakers of Indo-Pak languages 
3.2 Under-resourced languages 
Under-resourced and under-written features of 
the source or target language are the second big 
challenge for scriptural translation. The lack of 
standard writing practices or even the absence of 
a standard code page for a language makes trans-
literation or transcription very hard. The exis-
tence of various writing styles and systems for a 
language leads towards a large number of va-
riants and it becomes difficult and complex to 
handle them. 
In the case of Indo-Pak languages, Punjabi is 
the largest language of Pakistan (more than 70 
million) and is more a spoken language than a 
written one. There existed only two magazines 
(one weekly and one monthly) in 1992 (Rahman, 
1997). In the words of (Rahman, 2004), ?? 
there is little development in Punjabi, Pashto, 
Balochi and other languages??. (Malik, 2005) 
reports the first effort towards establishing a 
standard code page for Punjabi-Shahmukhi and 
till date, a standard code page for Shahmukhi 
does not exist. Similar problems also exist for the 
Kashmiri and Seraiki languages. 
792
3.3 Absence of necessary information 
There are cases where the necessary and indis-
pensable information for scriptural translation 
are missing in the source text. For example, the 
first word ???? [??n?j?] (world) of the example sen-
tence of Figure 1 misses crucial diacritical in-
formation, mandatory to perform Urdu to Hindi 
scriptural translation. Like in Arabic, diacritical 
marks are part of the Urdu writing system but are 
sparingly used in writings (Zia, 1999; Malik et 
al., 2008; Malik et al, 2009). 
Figure 2(a) shows the example word without 
diacritical marks and its wrong Hindi conversion 
according to conversion rules (explained later). 
The Urdu community can understand the word in 
its context or without the context because people 
are tuned to understand the Urdu text or word 
without diacritical marks, but the Hindi conver-
sion of Figure 2(a) is not at all acceptable or 
readable in the Hindi community. 
Figure 2(b) shows the example word with dia-
critical marks and its correct Hindi conversion 
according to conversion rules. Similar problems 
also arise for the other Indo-Pak languages. 
Therefore, missing information in the source text 
makes the scriptural translation problem compu-
tationally complex and difficult. 
 ? = ?? ????]?]  ?[? [ ?]n]  ?[? [ ?]j [ ?]?[ 
??????  = ?  ]? [ ??  ]? [ ?  ]n [ ??  ]? [ ?  ]j [ ??  ]?[  
(b) with necessary information 
 ? = ????]? [ ?]n [ ?]j [ ?]?[ 
????   = ?  ]? [ ?  ]n [ ?  ]j [ ??  ]?[  
(a) without necessary information 
Figure 2: Example of missing information 
3.4 Different spelling conventions 
Different spelling conventions exist across dif-
ferent scripts used for the same language or for 
different languages because users of a script are 
tuned to write certain words in a traditional way. 
For example, the words ?? [je] (this) = ? [j] + ? [h] 
and ?? [vo] (that) = ? [v] + ? [h] are used in Urdu 
and Punjabi/Shahmukhi. The character ? [h] pro-
duces the vowel sounds [e] and [o] in the exam-
ple words respectively. On the other hand, the 
example words are written as ?? [je] & ?? [vo] and 
? ? [je] & ?? [vo] in Devanagari and Gurmukhi, 
respectively. There exist a large number of such 
conventions between Punjabi/Shahmukhi?
Punjabi Gurmukhi, Hindi?Urdu, etc. 
Different spelling conventions are also driven 
by different religious influences on different 
communities. In the Indian sub-continent, Hindi 
is a part of the Hindu identity, while Urdu is a 
part of the Muslim identity1 (Rahman, 1997; Rai, 
2000). Hindi derives its vocabulary from San-
skrit, while Urdu borrows its literary and scien-
tific vocabulary from Persian and Arabic. Hindi 
and Urdu not only borrow from Sanskrit and Per-
sian/Arabic, but also adopt the original spellings 
of the borrowed word due the sacredness of the 
original language. These differences make scrip-
tural translation across scripts, dialects or lan-
guages more challenging and complex. 
3.5 Transcriptional ambiguities 
Character level scriptural translation across dif-
ferent scripts is ambiguous. For example, the 
Sindhi word ?????? [??s?n] (human being) can be 
converted into Devanagari either as ????? [??s?n] or 
????* [?ns?n] (* means wrong spellings). The trans-
literation process of the example word from 
Sindhi to Devanagari is shown in Figure 3(a). 
The transliteration of the third character from the 
left, Noon (?) [n], is ambiguous because in the 
middle of a word, Noon may represent a conso-
nant [n] or the nasalization [?] of a vowel. 
 
Figure 3: Sindhi transliteration example 
In the reverse direction, the Sindhi Devanagari 
word ????? [??s?n] can be converted into a set of 
possible transliterations [?????? ,*?????? ,??????*]. All 
these possible transliterations have the same pro-
nunciation [??s?n] but have different spellings in 
                                                 
1 The Hindi movement of the late 19th century played 
a central role in the ideologization of Hindi. The 
movement started in reaction to the British Act 29 of 
1837 by which Persian was replaced by Hindusta-
ni/Urdu, written in Persian script, as the official ver-
nacular of the courts of law in North India. It is the 
moment in history, when Hindi and Urdu started to 
emerge as Hindu and Muslim identities. 
793
the Perso-Arabic script, as shown in Figure 3(b). 
Similar kinds of ambiguities also arise for other 
pairs of scripts, dialects or languages. Thus these 
ambiguities increase the complexity and difficul-
ty of scriptural translation. 
3.6 Distinctive sound inventories 
Sound inventories across dialects or languages 
can be different. Consider the English?Japanese 
pair. Japanese make no distinction between the 
?L? [l] and ?R? [r] sounds so that these two Eng-
lish sounds collapse onto the same Japanese 
sound (Knight and Al-Onaizan, 1998). 
For Indo-Pak languages, Punjabi/Gurmukhi (a 
dialect of Punjabi spoken in India) possesses two 
additional sounds than Punjabi/Shahmukhi (a 
dialect of Punjabi spoken in Pakistan). Similarly, 
Hindi, Punjabi, Sindhi and Seraiki have the re-
troflex form [?], but Urdu and Kashmiri do not. 
Marathi has 14 vowels in contrast to Hindi?s 11 
vowels, shown in Table 2. 
Hindi Vowels 
? [?] ? [?] ? [?] ? [i] ? [?] ? [u] ? [r]? ? [e] ? [?] 
? [o] ? [?] 
Marathi Vowels 
? [?] ? [?] ? [?] ? [i] ? [?] ? [u] ? [r]? ? [e] ? [?] 
? [o] ? [?] ?? [??] ?? [?h] ? [l]? 
Table 2: Hindi and Marathi vowel comparison 
Scriptural translation approximates the pro-
nunciation of the source language or dialect in 
the target due to different sound inventories. 
Thus a distinctive sound inventory across scripts, 
dialects or languages increases ambiguities and 
adds to the complexity of the scriptural transla-
tion problem. 
4 Universal Intermediate Transcription 
UIT (Universal Intermediate Transcription) is a 
multipurpose pivot. In the current study, it is 
used as a phonetico-morphotactic pivot for the 
surface morphotactic translation or scriptural 
translation. 
Although we have not used IPA as encoding 
scheme, we have used the IPA coding associated 
with each character as the encoding principle for 
our ASCII encoding scheme. We selected the 
printable ASCII characters to base the UIT en-
coding scheme because it is universally portable 
to all computer systems and operating systems 
without any problem (Boitet and Tch?ou, 1990; 
Hieronymus, 1993; Wells, 1995). UIT is a de-
terministic and unambiguous scheme of tran-
scription for Indo-Pak languages in ASCII range 
32?126, since a text in this rage is portable 
across computers and operating systems 
(Hieronymus, 1993; Wells, 1995). 
Speech Assessment Methods Phonetic Alpha-
bet (SAMPA)2 is a widely accepted scheme for 
encoding IPA into ASCII. The purpose of SAM-
PA was to form the basis of an international 
standard machine-readable phonetic alphabet for 
the purpose of international collaboration in 
speech research (Wells, 1995). The UIT encod-
ing of Indo-Pak languages is developed as an 
extension of the SAMPA and X-SAMPA that 
covers all symbols on the IPA chart (Wells, 
1995). 
4.1 UIT encodings 
All characters of the Indo-Pak languages are 
subdivided into three categories, consonants, 
vowels and other symbols (punctuations and di-
gits). 
Consonants are further divided into aspirated 
consonants and non-aspirated consonants. For 
aspiration, in phonetic transcription a simple ?h? 
following the base consonant symbol is consi-
dered adequate (Wells, 1995). In the Indo-Pak 
languages, we have two characters with IPA [h]. 
Thus to distinguish between the ?h? consonants 
and the aspiration, we use underscore ?_? to 
mark the aspirate and we encode an aspiration as 
?_h?. For example, the aspirated consonants J[J 
[??], J ?J [p?] and J ?Y [??] of the Indo-Pak languages 
are encoded as ?t`_h?, ?p_h? and ?t_S_h? respec-
tively. Similarly for the dental consonants, we 
use the ?_d? marker. For example, the characters 
? [?] and ? [?] are encoded as ?d_d? and ?t_d? in 
UIT. Table 3 shows the UIT encodings of Hindi 
and Urdu aspirated consonants. 
Hindi Urdu UIT Hindi Urdu UIT 
? J [J [b?] b_h ??? |g [r?] r_h 
? J ?J [p?] p_h ? |g [??] r`_h 
? J[J [??] t_d_h ? J? [k?] k_h 
? J[J [??] t`_h ? J? [g?] g_h 
? J [Y [??] d_Z_h ?? J? [l?] l_h 
? J ?Y [??] t_S_h ?? Jb [m?] m_h 
                                                 
2 http://www.phon.ucl.ac.uk/home/sampa/ 
794
? |e [??] d_d_h ?? J [J [n?] n_h 
? |e [??] d`_h    
Table 3: UIT encodings of Urdu aspirated consonants 
Similarly, we can encode all characters of In-
do-Pak languages. Table 4 gives UIT encodings 
of Hindi and Urdu non-aspirated consonants. We 
cannot give all encoding tables here due to short-
age of space. 
Hindi Urdu UIT Hindi Urdu UIT 
? ? [b] b ? ? [s] s2 
? ? [p] p ? ? [z] z2 
? ? [?] t_d ? ? [?] t_d1 
? ? [?] t` ? ? [z] z3 
? ? [s] s1 - ? [?] ? 
? ? [?] d_Z ? ? [?] X 
? ? [?] t_S ? ? [f] f 
? ? [h] h1 ? ? [q] q 
? ? [x] x ? ? [k] k 
? ? [?] d_d ? ? [g] g 
? ? [?] d` ? ? [l] l 
? ? [z] z1 ? ? [m] m 
? ? [r] r ? ? [n] n 
? ? [?] r` ? ? [v] v 
? ? [z] z ? ? [h] h 
? ? [?] Z ? ? [j] j 
? ? [s] s ? ? [?] t_d2 
? ? [?] S ? - [?] n` 
? ? [?] S1 ?? ? [?] ~ 
Table 4: UIT encodings of Urdu non-aspirated conso-
nants 
5 Finite-state Scriptural Translation 
Model 
Figure 4 shows the system architecture of our 
finite-state scriptural translation system. 
Text Tokenizer receives and converts the 
input source language text into constituent words 
or tokens. This list of the source language tokens 
is then passed to the UIT Encoder that en-
codes these tokens into a list of UIT tokens using 
the source language to UIT conversion transduc-
er from the repertoire of Finite-State Transduc-
ers. These UIT tokens are given to the UIT De-
coder that decodes them into target language 
tokens using the UIT to target language conver-
sion transducer from the repertoire of Transduc-
ers. Finally, Text Generator generates the 
target language text from the translated target 
language tokens. 
 
Figure 4: System Architecture of fintie-state scriptural 
translation 
5.1 Finite-state Transducers 
Both conversions of the source language text into 
the UIT encoded text and from the UIT encoded 
text into the target language text are regular rela-
tions on strings. Moreover, regular relations are 
closed under serial composition and a finite set 
of conversion relations when applied to each 
other?s output in a specific order, also defines a 
regular expression (Kaplan and Kay, 1994). Thus 
we model the conversions from the source lan-
guage to UIT and from UIT to the target lan-
guage as finite-state transducers. These transla-
tional transducers can be deterministic and non-
deterministic. 
Character Mappings: Table 5 shows regular 
relations for converting Hindi and Urdu aspirated 
consonants into UIT. 
IPA Hindi to UIT Urdu to UIT 
b? ? ? b_h J [J ? b_h 
p? ? ? p_h J ?J ? p_h 
?? ? ? t_d_h J[J ? t_d_h 
?? ? ? t`_h J[J ? t`_h 
?? ? ? d_Z_h J [Y ? d_Z_h 
?? ? ? t_S_h J ?Y ? t_S_h 
795
?? ? ? d_d_h |e ? d_d_h 
?? ? ? d`_h |e ? d`_h 
r? ??? ? r_h |g ? r_h 
?? ? ? r`_h |g ? r`_h 
k? ? ? k_h J? ? k_h 
g? ? ? g_h J? ? g_h 
l? ?? ? l_h J? ? l_h 
m? ?? ? m_h Jb ? m_h 
n? ?? ? n_h J [J ? n_h 
Table 5: Regular rules for aspirated consonants of 
Hindi and Urdu 
By interchanging the UIT encodings before 
the arrow sign and the respective characters of 
Hindi and Urdu after the arrow, we can construct 
regular conversion relations from UIT to Hindi 
and Urdu. We have used XFST (Xerox finite-
state engine) to build finite-state transducers. 
Table 6 shows a sample XFST code. 
Contextual Mappings: A contextual mapping 
is a contextual rule that determines a desired out-
put when a character appears in a certain context. 
The third command of Table 6 models another 
contextual mapping saying that ????? is translated 
by ?_h? when it is preceded by any of the charac-
ters ?, ?, ?, and ?. The second last rule of Table 6 
models the contextual mapping rule that ?A1? is 
translated into ??? when it is at the end of a word 
and preceded by a consonant. 
clear stack 
set char-encoding UTF-8 
read regex [?? -> I]; 
read regex [? -> [k "_" h], ? -> [g 
"_" h], ? -> [t "_" S "_" h], ? -
> [d "_" Z "_" h], ? -> [t "`" "_" 
h], ? -> [d "`" "_" h], ? -> [t 
"_" d "_" h], ? -> [d "_" d "_" 
h], ? -> [p "_" h], ? -> [b "_" 
h], ? -> [r "`" "_" h], ? -> s, ?
-> [t "_" d], ? -> r, ? -> l, ? -> 
m, ? -> n, ? -> v, ? -> h]; 
read regex [[?? ?] -> ["_" h] || [? | 
? | ? | ?] _ ]; 
compose net 
Table 6: Sample XFST code 
Vowel representations in Urdu, Punja-
bi/Shahmukhi, Sindhi, Seraiki/Shahmukhi and 
Kashmiri are highly context-sensitive (Malik et 
al., 2010). 
6 Experiments and Results 
A sample run of our finite-state scriptural trans-
lation system on the Hindi to Urdu example sen-
tence of Figure 1 is shown in Table 7. 
Text 
Tokenizer 
UIT 
Encoder 
UIT Decoder 
Unique 
output 
Ambiguous 
outputs 
?????? dUnIjA1 ?????? , ?????? ] ?????? ]  
?? ko ?? , ?? ] ?? ] 
??? @mn ??? ] ??? ] 
?? ki ?? , ?? ] ?? ] 
???? zrurt_d ?????  [ ????? , 
?????? , 
?????? , 
?????? , 
?????? , 
?] 
 
?? 
 
h{  
??? , ?? ] ??? ] 
Table 7: Sample run of finite-state scriptural transla-
tion model on Hindi to Urdu example 
Text Generator converts the unique out-
put of the UIT Decoder into an Urdu sentence 
with one error in the fifth word (highlighted), 
shown in Figure 5. 
? ]gzEgi ?? ??Z ?? 6 ?3G[ 3 Ee 
Figure 5: Unique output of the sample run by deter-
ministic FSTs 
On the other hand, from the ambiguous output 
of the UIT Decoder, we can generate 240 output 
sentences, but only one is the correct scriptural 
translation of the source Hindi sentence in Urdu. 
The correct sentence is shown in Figure 6. The 
sole difference between the output of the deter-
ministic FST and the correct scriptural transla-
tion is highlighted in both sentences shown in 
Figure 5 and 6. 
? ]gzEu [? ?? ??Z ?? 6 ?3G[ 3 Ee 
Figure 6: Correct scriptural translation of the example 
6.1 Test Data 
Table 8 shows test sets for the evaluation of our 
finite-state scriptural translation system. 
796
Data 
set Language pair 
No. of 
words 
No. of 
sentences Source 
HU 
1 Hindi?Urdu 52,753 - 
Platts 
dictionary
HU 
2 Hindi?Urdu 4,281 200 
Hindi 
corpus 
HU 
3 Hindi?Urdu 4,632 226 
Urdu 
corpus 
PU Punjabi/Shahmukhi?Punjabi/Gurmukhi 5,069 500 
Classical 
poetry 
SE Seraiki/Shahmukhi?Seraiki/Devanagari 2,087 509 
Seraiki 
poetry 
Table 8: Test Sets of Hindi, Urdu, Punjabi and Seraiki 
HU 1 is a word list obtained from the Platts 
dictionary3 (Platts, 1884). 
6.2 Results 
For Hindi to Urdu scriptural translation, we have 
applied the finite-state model to all Hindi inputs 
of HU Test sets 1, 2 and 3. In general, it gives us 
an Urdu output with the necessary diacritical 
marks. To evaluate the performance of Hindi to 
Urdu scriptural translation of our finite-state sys-
tem against the Urdu without diacritics, we have 
created a second Urdu output by removing all 
diacritical marks from the default Urdu output of 
the finite-state system. We have calculated the 
Word Accuracy Rate (WAR) and Sentence Accu-
racy Rate (SAR) for the default and the 
processed Urdu outputs by comparing them with 
the Urdu references with and without diacritics 
respectively. To compute WAR and SAR, we 
have used the SCLITE utility from the Speech 
Recognition Scoring Toolkit (SCTK)4 of NIST. 
The results of Hindi to Urdu scriptural transla-
tion are given in Table 24. 
Test Set 
Default output Processed output 
Word 
Level 
Sentence 
Level 
Word 
Level 
Sentence 
Level 
HU 1 32.5% - 78.9% - 
HU 2 90.8% 26.5% 91.0% 27% 
HU 3 81.2% 8.8% 82.8% 9.7% 
Table 9:Hindi to Urdu scriptural translation restuls 
The finite-state scriptural translation system 
for Hindi to Urdu produces an Urdu output with 
diacritics. However, we know that the Urdu 
community is used to see the Urdu text without 
diacritics. Thus, we removed all diacritical marks 
from the Urdu output text that is more acceptable 
to the Urdu community. By this post-processing, 
                                                 
3 Shared by University of Chicago for research pur-
poses. 
4 http://www.itl.nist.gov/iad/mig//tools/ 
we gain more than 40% accuracy in case of HU 
Test Set 1. We also gain in accuracy for the other 
test sets. 
For the classification of our scriptural transla-
tion systems, we have devised two scales. One 
corresponds to the word accuracy rate and the 
other corresponds to the sentence level accuracy. 
They are shown in Figure 7 and 8. 
 
Figure 7: Classification scale based on the word 
accuracy rate for scriptural transaltion 
 
Figure 8: Classification scale based on the sentence 
accucary rate for scriptural translation 
According to the scale of Figure 7 and 8, the 
Hindi to Urdu scriptural translation system is 
classified as ?Good? and ?Good Enough?, respec-
tively. 
The subjective evaluations like usability, ef-
fectiveness and adequacy depend on several fac-
tors. A user with a good knowledge of Hindi and 
Urdu languages would rate our Hindi to Urdu 
system quite high and would also rate the Urdu 
output very usable. Another user who wants to 
read a Hindi text, but does not know Hindi, 
would also rate this system and the Urdu output 
quite high and very usable respectively, because 
it serves its purpose. 
On the other hand, a user who wants to pub-
lish a Hindi book in Urdu, would rate this system 
not very good. This is because he has to localize 
the Hindi vocabulary of Sanskrit origin as the 
acceptance of the Hindi vocabulary in the Urdu 
797
community, target of his published book, is very 
low. Thus the subjective evaluation depends on 
various factors and it is not easy to compute such 
measures for the evaluation of a scriptural trans-
lation system, but they are vital in real life. 
For Urdu to Hindi scriptural translation, we 
have two inputs for each HU Test Set. One input 
contains all diacritical marks and the other does 
not contain any. On Hindi side, we have a single 
Hindi reference with which we will compare 
both Hindi outputs. We already know that it will 
give us less accuracy rates for the Urdu input 
without diacritical marks that are mandatory for 
correct Urdu to Hindi scriptural translation. The 
results for Urdu to Hindi scriptural translation 
are given in Table 10. 
Test Set 
With diacritics Without diacritics 
Word 
Level 
Sentence 
Level 
Word 
Level 
Sentence 
Level 
HU 1 68.0% - 31.2% - 
HU 2 83.9% 10% 53.0% 1% 
HU 3 98.4% 73.9% 58.9% 0.4% 
Table 10: Urdu to Hindi scriptural translation results 
For the Urdu input with diacritics, the accura-
cy of the Urdu to Hindi finite-state scriptural 
translation system is 83.9% at word level for HU 
Test Set 2 and it is classified as ?GOOD? the 
classification scale of Figure 7. On the other 
hand, it shows a sentence-level accuracy of 10% 
for the same test set and is classified as ?AVER-
AGE? by the classification scale of Figure 8. 
For the Urdu input without diacritics, the Urdu 
to Hindi scriptural translation system is classified 
as ?OK? by the scale of Figure 7 for HU Test set 
2 and 3. It is classifies as ?NULL? for HU Test 
Set 1. According to the scale of Figure 8, it is 
classified as ?NULL? for all three test sets. 
For Punjabi scriptural translation, we also de-
veloped two types of output default and 
processed for Gurmukhi to Shahmukhi transla-
tion. In the reverse direction, it has two types of 
inputs, one with diacritics and the other without 
diacritics. Table 11 and 12 shows results of Pun-
jabi scriptural translation. 
Test Set 
Default output Processed output 
Word 
Level 
Sentence 
Level 
Word 
Level 
Sentence 
Level 
PU 84.2% 27.8% 85.2% 29.9% 
Table 11: Gurmukhi to Shahmukhi scriptural transla-
tion results 
 
 
Test Set 
With diacritics Without diacritics 
Word 
Level 
Sentence 
Level 
Word 
Level 
Sentence 
Level 
PU 98.8% 90.3% 67.3% 6.4% 
Table 12: Shahmukhi to Gurmukhi scriptural 
translation results 
Compared to the Hindi?Urdu pair, the Punja-
bi/Shahmukhi?Punjabi/Gurmukhi pair is compu-
tationally less hard. The post-processing to the 
default out of the finite-state scriptural transla-
tion systems for Punjabi/Gurmukhi to Punja-
bi/Shahmukhi also helps to gain an increase of 
approximately 1% and 2% at word and sentence 
levels respectively. The Shahmukhi to Gurmukhi 
scriptural translation system is classified as 
?GOOD? by both scales of Figure 7 and 8. Thus 
the usability of the Punjabi finite-state scriptural 
translation system is higher than the Hindi?Urdu 
finite-state scriptural translation system. 
In the reverse direction, the Shahmukhi to 
Gurmukhi scriptural translation system gives an 
accuracy of 98.8% and 67.3% for the Shahmukhi 
input text with and without diacritics respective-
ly. For the Shahmukhi input text with diacritics, 
the scriptural translation system is classified as 
?EXCELLENT? by both scales. On the other 
hand, it is classified as ?NULL? according to the 
scale of Figure 8 for the Shahmukhi input text 
without diacritical marks. 
Similar to Hindi?Urdu and Punjabi finite-state 
scriptural translation, we have applied our finite-
state system to the Seraiki test set. Here again, 
we have developed a processed Serai-
ki/Shahmukhi output from the default output of 
our finite-state system by removing the diacrit-
ics. The results are given in Table 13 and 14. 
Test Set 
Default output Processed output 
Word 
Level 
Sentence 
Level 
Word 
Level 
Sentence 
Level 
SE 81.3% 19.4% 83.7% 20.3% 
Table 13: Seraiki/Devanagari to Seraiki/Shahmukhi 
scriptural translation results 
 
Test Set 
With diacritics Without diacritics 
Word 
Level 
Sentence 
Level 
Word 
Level 
Sentence 
Level 
SE 95.2% 76.4% 58.6% 8.6% 
Table 14: Seraiki/Shahmukhi to Seraiki/Devanagari 
scriptural translation results 
In the case of the Seraiki/Devanagari to Serai-
ki/Shahmukhi scriptural translation system, the 
post-processing also helps to gain an increase in 
word accuracy of approximately 1 to 2 percent 
798
both at the word and the sentence levels. The 
accuracy for both the default and the processed 
Seraiki/Shahmukhi outputs is also more than 
80% at word level. The system is classified as 
?GOOD? and ?GOOD ENOUGH? according to 
the scale of Figure 7 and 8 respectively. 
The absence of diacritical marks in the Serai-
ki/Shahmukhi has a very bad effect on the accu-
racy of the finite-state scriptural translation sys-
tem. The scriptural translation system is classi-
fied as ?NULL? for the Seraiki/Shahmukhi input 
text without diacritics. 
7 Conclusion 
Finite-state methods are robust and efficient to 
implement scriptural translation rules in a very 
precise and compact manner. 
The missing information and the diacritical 
marks in the source text proved to be very criti-
cal, crucial and important for achieving high and 
accurate results. The above results support our 
hypothesis that lack of important information in 
the source texts considerably lowers the quality 
of scriptural translation. They are crucial and 
their absence in the input texts decreases the per-
formance considerably, from more than 80% to 
less than 60% at word level. Thus restoration of 
the missing information and the diacritical marks 
or reducing the effect of their absence on the 
scriptural translation is one of the major ques-
tions for further study and work. 
In general, only word accuracy rates are re-
ported. We have observed that only word accura-
cy rates may depict a good performance, but the 
performance of the same system at sentence-
level may be not very good. Therefore, subjec-
tive evaluations and usage of translation results 
in real life should also be considered while eva-
luating the translation quality. 
Acknowledgments 
This study is supported by Higher Education Com-
mission (HEC), Government of Pakistan under its 
overseas PhD scholarship scheme. We are also thank-
ful to Digital South Asian Library, University of Chi-
cago for sharing Platts dictionary data (Platts, 1884). 
References  
AbdulJaleel, N. and L. S. Larkey. 2003. Statistical 
Transliteration for English-Arabic Cross Language 
Information Retrieval. 12th international 
Conference on information and Knowledge 
Management (CIKM 03), New Orleans. 139-146. 
Al-Onaizan, Y. and K. Knight. 2002. Machine 
Transliteration of Names in Arabic Text. 
Workshop on Computational Approaches To 
Semitic Languages, the 40th Annual Meeting of 
the ACL, Philadelphia, Pennsylvania, 1-13. 
Arbabi, M., S. M. Fischthal, V. C. Cheng and E. Bart. 
1994. Algorithms for Arabic Name 
Transliteration. IBM J. Res. Dev. 38(2): 183-193. 
Boitet, C. and F. X. Tch?ou. 1990. On a Phonetic and 
Structural Encoding of Chinese Characters in 
Chinese texts. ROCLING III, Taipeh. 73-80. 
Fujii, A. and T. Ishikawa. 2001. Japanese/English 
Cross-Language Information Retrieval: 
exploration of query translation and transliteration. 
Computers and the Humanities 35(4): 389-420. 
Halpern, J. 2002. Lexicon-based Orthographic 
Disambiguation in CJK Intelligent Information 
Retrieval. 3rd workshop on Asian language 
resources and international standardization, the 
19th International Conference on Computational 
Linguistics (COLING), Taipei, Taiwan. 1-7. 
Hieronymus, J. 1993. ASCII Phonetic Symbols for the 
World's Languages: Worldbet. AT&T Bell 
Laboratories. 
Jeong, K. S., S. H. Myaeng, J. S. Lee and K.-S. Choi. 
1999. Automatic Identification and Back-
transliteration of Foreign Words for Information 
Retrieval. Information Processing and 
Management 35: 523-540. 
Kang, B. and K. Choi. 2000. Automatic 
Transliteration and Back Transliteration by 
Decision Tree Learning. 2nd International 
Conference on Evaluation and Language 
Resources (ELRC), Athens. 
Kaplan, R. M. and M. Kay. 1994. Regular Models of 
Phonological Rule Systems.  20(3). 
Knight, K. and Y. Al-Onaizan. 1998. Translation with 
Finite-State Devices 3rd Conference of the 
Association for Machine Translation in the 
Americas on Machine Translation and the 
Information Soup (AMTA-98), Pennsylvania. 
421-437. 
Lee, J. S. and K. S. Choi. 1998. English to Korean 
Statistical Transliteration for Information 
Retrieval. Computer Processing of Oriental 
languages 12(1): 17-37. 
Malik, M. G. A. 2005. Towards a Unicode 
Compatible Punjabi Character Set. 27th 
Internationalization and Unicode Conference, 
Berlin. 
Malik, M. G. A., L. Besacier, C. Boitet and P. 
Bhattacharyya. 2009. A Hybrid Model for Urdu 
Hindi Transliteration. Joint conference of the 47th 
Annual Meeting of the Association of 
Computational Linguistics and the 4th 
799
International Joint Conference on Natural 
Language Processing of the Asian Federation of 
NLP ACL/IJCNLP Workshop on Named Entities 
(NEWS-09), Singapore, 177?185. 
Malik, M. G. A., C. Boitet and P. Bhattacharyya. 
2008. Hindi Urdu Machine Transliteration using 
Finite-state Transducers. 22nd International 
Conference on Computational Linguistics 
(COLING), Manchester, 537-544. 
Malik, M. G. A., C. Boitet and P. Bhattacharyya. 
2010. Analysis of Noori Nast'aleeq for Major 
Pakistani Languages. 2nd Workshop on Spoken 
Language Technologies for Under-resourced 
Languages SLTU-2010, Penang, Malaysia. 
Mohri, M. 1997. Finite-state Transducers in Language 
and Speech Processing.  23(2). 
Pirkola, A., J. Toivonen, H. Keskustalo, K. Visala and 
K. J?rvelin. 2003. Fuzzy Translation of Cross-
lingual Spelling Variants. 26th Annual 
international ACM SIGIR Conference on 
Research and Development in informaion 
Retrieval, Toronto. 
Platts, J. T. 1884. A Dictionary of Urdu, Classical 
Hindi and Englsih. W. H. Allen & Co. 
Rahman, T. 1997. Language and Politics in Pakistan. 
Oxford University Press, Lahore.  
Rahman, T. 2004. Language Policy and Localization 
in Pakistan: Proposal for a Paradigmatic Shift. 
Crossing the Digital Divide, SCALLA Conference 
on Computational Linguistics, Katmandu. 
Rai, A. 2000. Hindi Nationalism. Orient Longman 
Private Limited, New Delhi.  
Roche, E. and Y. Schabes, Eds. 1997. Finite-state 
Language Processing. MIT Press,  Cambridge. 
Sakai, T., A. Kumano and T. Manabe. 2002. 
Generating Transliteration Rules for Cross-
language Information Retrieval from Machine 
Translation Dictionaries. IEEE Conference on 
Systems, Man and Cybernatics. 
Stall, B. and K. Knight. 1998. Translating Names and 
Technical Terms in Arabic Text. Workshop on 
Computational Approaches to Semitic Languages, 
COLING/ACL, Montreal, 34-41. 
Virga, P. and S. Khudanpur. 2003. Transliteration of 
Proper Names in Cross-language Applications. 
26th Annual international ACM SIGIR 
Conference on Research and Development in 
informaion Retrieval, Toronto. 
Wells, J. C. 1995. Computer-coding the IPA: a 
proposed extension of SAMPA. University 
College London. 
Yan, Q., G. Gregory and A. E. David. 2003. 
Automatic Transliteration for Japanese-to-English 
Text Retrieval. 26th annual international ACM 
SIGIR conference on Research and development 
in information retrieval, 353-360. 
Zia, K. 1999. Standard Code Table for Urdu. 4th 
Symposium on Multilingual Information 
Processing (MLIT-4), Yangon. 
800
