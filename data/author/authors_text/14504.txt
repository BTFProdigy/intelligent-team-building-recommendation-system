Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics:shortpapers, pages 351?356,
Portland, Oregon, June 19-24, 2011. c?2011 Association for Computational Linguistics
Temporal Evaluation 
 Naushad UzZaman and James F. Allen Computer Science Department University of Rochester Rochester, NY, USA {naushad, james}@cs.rochester.edu  Abstract In this paper we propose a new method for evaluating systems that extract temporal information from text. It uses temporal closure1 to reward relations that are equivalent but distinct. Our metric measures the overall performance of systems with a single score, making comparison between different systems straightforward. Our approach is easy to implement, intuitive, accurate, scalable and computationally inexpensive.  1 Introduction The recent emergence of language processing applications like question answering, information extraction, and document summarization has motivated the need for temporally-aware systems. This, along with the availability of the temporal annotation scheme TimeML (Pustejovsky et al, 2003), a temporally annotated corpus, TimeBank (Pustejovsky et al, 2003) and the temporal evaluation challenges TempEval-1 (Verhagen et al, 2007) and TempEval-2 (Pustejovsky and Verhagen, 2010), has led to an explosion of research on temporal information processing (TIP). Prior evaluation methods (TempEval-1, 2) for different TIP subtasks have borrowed precision and recall measures from the information retrieval community. This has two problems: First, systems express temporal relations in different, yet equivalent, ways. Consider a scenario where the                                                            1 Temporal closure is a reasoning mechanism that derives new implied temporal relations, i.e. makes implicit temporal relations explicit. For example, if we know A before B, B before C, then using temporal closure we can derive A before C. Allen (1983) demonstrates the closure table for 13 Allen interval relations.  
reference annotation contains e1<e2 and e2<e3 and the system identifies the relation e1<e3. The traditional evaluation metric will fail to identify e1<e3 as a correct relation, which is a logical consequence of the reference annotation. Second, traditional evaluations tell us how well a system performs in a particular task, but not the overall performance. For example, in TempEval-2 there were 6 subtasks (event extraction, temporal expression extraction and 4 subtasks on identifying temporal relations). Thus, different systems perform best is different subtasks, but we can?t compare overall performance of systems.  We use temporal closure to identify equivalent temporal relations and produce a single score that measures the temporal awareness of each system. We use Timegraph (Miller and Schubert, 1990) for computing temporal closure, which makes our system scalable and computationally inexpensive.  2 Related Work  To calculate the inter-annotator agreement between annotators in the temporal annotation task, some researchers have used semantic matching to reward distinct but equivalent temporal relations. Such techniques can equally well be applied to system evaluation.  Setzer et al (2003) use temporal closure to reward equivalent but distinct relations. Consider the example in Figure 1 (due to Tannier and Muller, 2008). Consider graph K as the reference annotation graph, and S1, S2 and S3 as outputs of different systems. The bold edges are the extracted relations and the dotted edges are derived. The traditional matching approach will fail to verify B<D is a correct relation in S2, since there is no explicit edge between B and D in reference annotation (K). But a metric using temporal closure would create all implicit edges and be able to reward B<D edge in S2.  
351
 Figure 1: Examples of temporal graphs and relations Setzer et al?s approach works for this particular case, but as pointed by Tannier and Muller (2008), it gives the same importance to all relations, whereas some relations are not as crucial as others. For example, with K again as the reference annotation, S2 and S3 both identify two correct relations, so both should have a 100% precision, but in terms of recall, S3 identified 2 explicit relations and S2 identified one explicit and one implicit relation. With Setzer at al.?s technique, both S2 and S3 will get the same score, which is not accurate. Tannier and Muller handle this problem by finding the core2 relations. For recall, they consider the reference core relations found in the system core relations and for precision they consider the system core relations found in the reference core relations. They noted that core relations do not contain all information provided by closed graphs. Hence their measure is only an approximation of what should be assessed. Consider the previous example again. If we are evaluating graph S2, they will fail to verify that B<D is a correct edge.  We have shown that both of these existing evaluation mechanism reward relations based on semantic matching, but still fail in specific cases.  3 Temporal Evaluation  We also use temporal closure to reward equivalent but distinct relations. However, we do not compare against the temporal closure of reference annotation and system output, like Setzer et al, but                                                            2 For relation RA, B between A and B, derivations are RA, C, RB, C, RA, D, RB, D. If the intersection of all these derived relations equals RA, B, it means that RA, B is not a core relation, since it can be obtained by composing some other relations. Otherwise, the relation is a core, since removing it tends to loss of information.   
we use the temporal closure to verify if a temporal relation can be derived or not. Our precision and recall is defined as:  Precision = (# of system temporal relations that can be verified from reference annotation temporal closure graph / # of temporal relations in system output)  Recall = (# of reference annotation temporal relations that can be verified from system output?s temporal closure graph / # of temporal relations in reference annotation)  The harmonic mean of precision and recall, i.e. fscore, will give an evaluation of the temporal awareness of the system.  As an example, consider again the examples in Figure 1, with K as reference annotation. S1 and S3 clearly have 100% precision, and S2 also gets 100% precision, since the B<D edge can be verified through the temporal closure graph of K. Note, our recall measure doesn?t reward the B<D edge of S2, but it is counted for precision. S1 and S3 both get a recall of 2/3, since 2 edges can be verified in the reference temporal closure graph. This scheme is similar to the MUC-6 scoring for coreference (Vilain et al, 1995). Their scoring estimated the minimal number of missing links necessary to complete co-reference chain in order to make it match the human annotation. Here in both S1 and S3, we are missing one edge to match with the reference annotation; hence 2/3 is the appropriate score. Precision, recall and fscore for all these system output are shown in Table 1.  System  Precision Recall Fscore S1 2/2=1 2/3=0.66 0.8 S2 2/2=1 1/3=0.33 0.5 S3 2/2=1 2/3=0.66 0.8 Table 1: Precision, recall and fscore for systems in Figure 1 according to our evaluation metric 4 Implementation  Our proposed approach is easy to implement with an existing temporal closure implementation. We preferred Timegraph (Miller and Schubert, 1990) over Allen?s interval closure algorithm (Allen, 1983) because Timegraph has been shown to be more scalable3 to larger problems (Yampratoom 
                                                           3 Allen?s temporal closure takes O(n2) space for n intervals, whereas Timegraph takes O(n+e) space, where n is the number of time points3 and e is the number of relations between them. In terms of closure computation, without 
352
and Allen, 1993). Furthermore, the additional expressive power of interval disjunction in Allen (1983) does not appear to play a significant role in temporal extractions from text.  A Timegraph G = (T, E) is an acyclic directed graph in which T is the set of vertices (nodes) and E is the set of edges (links). It is partitioned into chains, which are defined as sets of points in a linear order. Links between points in the same chain are in-chain links and links between points in different chains are cross-chain links. Each point has a numeric pseudo-time, which is arbitrary except that it maintains the ordering relationship between the points on the same chain. Chain and pseudo-time information are calculated when the point is first entered into the Timegraph. Determining relationship between any two points in the same chain can be done in constant time simply by comparing the pseudo-times, rather than following the in-chain links. On the other hand, relationship between points in different chains can be found with a search in cross-chain links, which is dependent on the number of edges (i.e. number of chains and number of cross-chain links). A metagraph keeps track of the cross-chain links effectively by maintaining a metanode for each chain, and using a cross-chain links between metanodes. More details about Timegraph can be found in Miller and Schubert (1990) and Taugher (1983). Timegraph only supports simple point relations (<, =, ?), but we need to evaluate systems based on TimeML, which is based on interval algebra. However, single (i.e., non-disjunctive) interval relations can be easily converted to point relations4. For efficiency, we want to minimize the number of chains constructed by Timegraph, since with more chains our search in Timegraph will take more time. If we arbitrarily choose TimeML TLINKs (temporal links) and add them we will create some extra chains. To avoid this, we start with a node and traverse through its neighbors in a systematic fashion trying to add in chain order.                                                                                              disjunction Allen?s algorithm computes in O(n2), whereas Timegraph takes O(n+e) time, n and e are same as before. 4 Interval relation between two intervals X and Y is represented with points x1, x2, y1 and y2, where x1 and y1 are start points and x2 and y2 are end points of X and Y. Temporal relations between interval X and Y is represented with point relation between x1,y1; x1,y2; x2,y1 and x2,y2. 
This approach decreases number of nodes+edges by 2.3% in complete TimeBank corpus, which eventually affects searching in Timegraph.  Next addition is to optimize Timegraph construction. For each relation we have to make sure all constraints are met. The easiest and best way to approach this is to consider all relations together. For example, for interval relation X includes Y, the point relation constraints are: x1<y1, x1<y2, x2>y1, x2>y2, x1<x2 and y1<y2. We want to consider all constraints together as, x1 < y1 < y2 < x2 and add all together in the Timegraph. In Table 2, we show TimeML relations and equivalent Allen?s relation5, then equivalent representation in point algebra and finally point algebra represented as a chain, which makes adding relations in Timegraph much easier with fewer chains. These additions make Timegraph more effective for TimeML corpus.  TimeML relations Allen relations Equivalent in Point Algebra Point Algebra represented as a chain Before Before x1<y1, x1<y2, x2<y1, x2<y2 x1 < x2 < y1 < y2 After  After x1>y1, x1>y2, x2>y1, x2>y2 y1 < y2 < x1 < x2 IBefore  Meet x1<y1, x1<y2, x2=y1, x2<y2 x1 < x2 = y1 < y2 IAfter MetBy x1>y1, x1=y2, x2>y1, x2>y2 y1 < y2 = x1 < x2 Begins  Start  x1=y1, x1<y2, x2>y1, x2<y2 x1 = y1 < x2 < y2 BegunBy  StartedBy x1=y1, x1<y2, x2>y1, x2>y2 x1 = y1 < y2 < x2 Ends  Finish  x1>y1, x1<y2, x2>y1, x2=y2 y1 < x1 < x2 = y2 EndedBy FinishedBy x1<y1, x1<y2, x2>y1, x2=y2 x1 < y1 < y2 = x2 IsIncluded, During During x1>y1, x1<y2, x2>y1, x2<y2 y1 < x1 < x2 < y2 Includes  Contains x1<y1, x1<y2, x2>y1, x2>y2 x1 < y1 < y2 < x2 Identity & Simultaneous (=) Equality  x1=y1, x1<y2, x2>y1, x2=y2 x1 = y1 < x2 = y2 Table 2: Interval algebra and equivalent point algebra 
                                                           5 We couldn?t find equivalent of Overlaps and OverlappedBy from Allen?s interval algebra in TimeML relations.  
353
5 Evaluation  Our proposed evaluation metric has some very good properties, which makes it very suitable as a standard metric. This section presents a few empirical tests to show the usefulness of our metric. Our precision and recall goes with the same spirit with traditional precision and recall, as a result, performance decreases with the decrease of information. Specifically,  i. if we remove relations from the reference annotation and then compare that against the full reference annotation, then recall decreases linearly. Shown in Figure 2.  
 Figure 2: For 5 TimeBank documents, the graph shows performance drops linearly in recall by removing temporal relations one by one. ii. if we introduce noise by adding new relations, then precision decreases linearly (Figure 3).  
 Figure 3: For 5 TimeBank documents, the graph shows performance drops linearly in precision by adding new (wrong) temporal relations one by one. iii. if we introduce noise by changing existing relations then fscore decreases linearly (Figure 4). 
 Figure 4: For 5 TimeBank documents, the graph shows performance drops linearly in fscore by changing temporal relations one by one. iv. if we remove temporal entities (such as events or temporal expressions), performance decreases more for entities that are temporally related to more entities. This means, if the system fails to extract important temporal entities then the performance will decrease more (Figure 5).  
 Figure 5: For 5 TimeBank documents, performance drop in recall by removing temporal entities. Temporal entities related with a maximum number of entities are removed first. It is evident from the graph that performance decreased more for removing important entities (first few entities).  These properties explain that our final fscore captures how well a system extracts events, temporal expressions and temporal relations. Therefore this single score captures all the scores of six subtasks in TempEval-2, making it very convenient and straightforward to compare different systems.  Our implementation using Timegraph is also scalable. We ran our Timegraph construction algorithm on the complete TimeBank corpus and found that Timegraph construction time increases linearly with the increase of number of nodes and edges (= # of cross-chain links and # of chains) (Figure 6).   The largest document, with 235 temporal relations (around 900 nodes+edges in Timegraph) 
354
only takes 0.22 seconds in a laptop computer with 4GB RAM and 2.26 GHz Core 2 Duo processor.  
 Figure 6: Number of nodes+edges (# of cross-chain links + # of chains) against time (in seconds) for Timegraph construction of all TimeBank documents. We also confirmed that the number of nodes + edges in Timegraph also increases linearly with number of temporal relations in TimeBank documents. , i.e. our Timegraph construction time correlates with the # of relations in TimeBank documents (Figure 7). 
 Figure 7: Number of temporal relations in all TimeBank documents against the number of nodes and edges in Timegraph of those documents Searching in Timegraph, which we need for temporal evaluation, also depends on number of nodes and edges, hence number of TimeBank relations. We ran a temporal evaluation on TimeBank corpus using the same document as system output. The operation included creating two Timegraphs and searching in the Timegraph. As expected, the searching time also increases linearly against the number of relations and is computationally inexpensive (Figure 8).  
 Figure 8: Number of relation against time (in seconds) for all documents of TimeBank corpus. 6 Conclusion  We proposed a temporal evaluation that considers semantically similar but distinct temporal relations and consequently gives a single score, which could be used for identifying the temporal awareness of a system. Our approach is easy to implement, intuitive and accurate. We implemented it using Timegraph for handling temporal closure in TimeML derived corpora, which makes our implementation scalable and computationally inexpensive.  References  James F. Allen. 1983. Maintaining knowledge about temporal intervals. Communications of the ACM 26, 832-843. S. Miller and L. Schubert. 1990. Time revisited. Computational Intelligence 6, 108-118. J. Pustejovsky, P. Hanks, R. Sauri, A. See, R. Gaizauskas, A. Setzer, D. Radev, B. Sundheim, D. Day, L. Ferro and M. Lazo. 2003. The TIMEBANK corpus. Proceedings of the Corpus Linguistics, 647?656. James Pustejovsky, Jos M. Castao, Robert Ingria, Roser Sauri, Robert J. Gaizauskas, Andrea Setzer, Graham Katz and Dragomir R. Radev. 2003. TimeML: Robust Specication of Event and Temporal Expressions in Text. . Proceedings of the New Directions in Question Answering. James Pustejovsky and Marc Verhagen. 2010. SemEval-2010 task 13: evaluating events, time expressions, and temporal relations (TempEval-2). Proceedings of the Workshop on Semantic 
355
Evaluations: Recent Achievements and Future Directions. A Setzer, R Gaizauskas and M Hepple. 2003. Using semantic inferences for temporal annotation comparison. Proceedings of the Fourth International Workshop on Inference in Computational Semantics (ICOS-4), 25-26. X Tannier and P Muller. 2008. Evaluation Metrics for Automatic Temporal Annotation of Texts. Proceedings of the Proceedings of the Sixth International Language Resources and Evaluation (LREC'08). J. Taugher. 1983. An efficient representation for time information. Department of Computer Science. Edmonton, Canada: University of Alberta. 
Marc Verhagen, Robert Gaizauskas, Frank Schilder, Mark Hepple, Graham Katz and James Pustejovsky. 2007. SemEval-2007 Task 15: TempEval Temporal Relation Identification. Proceedings of the 4th International Workshop on Semantic Evaluations (SemEval 2007). Marc Vilain, John Burger, John Aberdeen, Dennis Connolly and Lynette Hirschman. 1995. A model-theoretic coreference scoring scheme. Proceedings of the MUC6 ?95: Proceedings of the 6th conference on Message understanding. Ed Yampratoom and James F. Allen. 1993. Performance of Temporal Reasoning Systems. TRAINS Technical Note 93-1. Rochester, NY: University of Rochester.     
356
Proceedings of the 5th International Workshop on Semantic Evaluation, ACL 2010, pages 276?283,
Uppsala, Sweden, 15-16 July 2010. c?2010 Association for Computational Linguistics
TRIPS and TRIOS System for TempEval-2: Extracting Temporal In-formation from Text 
  Naushad UzZaman University of Rochester Rochester, NY, USA naushad@cs.rochester.edu 
James F. Allen University of Rochester Rochester, NY, USA james@cs.rochester.edu  Abstract 
Extracting temporal information from raw text is fundamental for deep language understand-ing, and key to many applications like ques-tion answering, information extraction, and document summarization. In this paper, we describe two systems we submitted to the TempEval 2 challenge, for extracting temporal information from raw text. The systems use a combination of deep semantic parsing, Markov Logic Networks and Conditional Random Field classifiers. Our two submitted systems, TRIPS and TRIOS, approached all tasks and outperformed all teams in two tasks. Furthermore, TRIOS mostly had second-best performances in other tasks. TRIOS also out-performed the other teams that attempted all the tasks. Our system is notable in that for tasks C ? F, they operated on raw text while all other systems used tagged events and tem-poral expressions in the corpus as input.  1 Introduction The recent emergence of language processing applications like question answering, information extraction, and document summarization has drawn attention to the need for systems that are temporally aware. For example, for a QA system in newswire domain, if we want to know who was the President of Bangladesh in the January of 1983, and we only had documents that tell us about the President from 1980 to 1985 then a temporally aware system will help the QA sys-tem to infer who was president in the January of 1983 as well. In medical domain for patient?s history record, doctors write all the information about patients? medical record, usually not in chronological order. Extracting a temporal struc-ture of the medical record will help practitioner understand the patient?s medical history easily. For people who have trouble reading and under-standing, be it dyslexic people, or people who are 
not native English speakers, a temporal structure of document could help them to follow the story better. Extracting temporal information will benefit in almost any application processing natural language text. In this paper, we present the first step towards our goal of building such temporal structures. We participated in all tasks in TempEval 2, which includes work on extracting events, event features, temporal expressions, and various tem-poral relations.  We first describe our systems. Next, we show the performance of our system and compare with best performing systems on TempEval-2. Fi-nally, we describe our future directions. 2 Our System Modules  Our approach for all the tasks is best described as hybrid between linguistically motivated solutions and machine learning classifiers. We do deep semantic parsing and use hand-coded rules to extract events, features and temporal expressions from the logical forms produced by the parser. In parallel, we filter events, extract event features, temporal expressions, classify temporal relations using machine-learning classifiers. We describe these modules briefly here and in the next sec-tions will describe how these modules are used in solving different subtasks.  2.1 TRIPS Parser We use the existing TRIPS parser (Allen et al 2008) to produce deep logical forms from text. The system is generic and no grammatical rules or lexical entries were added specifically for this task. The TRIPS grammar is lexicalized context-free grammar, augmented with feature structures and feature unification. The grammar is moti-vated from X-bar theory, and draws on principles from GPSG (e.g., head and foot features) and HPSG. The parser uses a packed-forest chart rep-resentation and builds constituents bottom-up using a best-first search strategy similar to A*, 
276
based on rule and lexical weights and the influ-ences of statistical preprocessing. The search terminates when a pre-specified number of span-ning constituents have been found or a pre-specified maximum chart size is reached. The chart is then searched using a dynamic pro-gramming algorithm to find the least cost se-quence of logical forms according to a cost table that can be varied by genre. The TRIPS system here uses a wide range of statistically driven preprocessing, including part of speech tagging, constituent bracketing, inter-pretation of unknown words using WordNet, and named-entity recognition (Allen et al 2008). All these are generic off-the-shelf resources that ex-tend and help guide the deep parsing process.  The TRIPS LF (logical form) ontology1 is de-signed to be linguistically motivated and domain independent. The semantic types and selectional restrictions are driven by linguistic considera-tions rather than requirements from reasoning components in the system (Dzikovska et al 2003). As much as possible the semantic types in the LF ontology are compatible with types found in FrameNet (Johnson & Fillmore 2000). Fra-meNet generally provides a good level of ab-straction for applications since the frames are derived from corpus examples and can be relia-bly distinguished by human annotators. However TRIPS parser uses a smaller, more general set of semantic roles for linking the syntactic and se-mantic arguments rather than FrameNet's exten-sive set of specialized frame elements. The LF ontology defines approximately 2500 semantic types and 30 semantic roles. The TRIPS parser will produce LF representations in terms of this linguistically motivated ontology1.   As an example, the result of parsing the sen-tence, He fought in the war, is expressed as set of expressions in an unscoped logical formalism with reified events and semantic roles.  (SPEECHACT V1 SA-TELL :CONTENT V2)  (F V2 (:* FIGHTING FIGHT) :AGENT V3 :MODS (V4)  :TMA ((TENSE PAST)))  (PRO V3 (:* PERSON HE) :CONTEXT-REL HE)  (F V4 (:* SITUATED-IN IN) :OF V2 :VAL V5)  (THE V5 (:* ACTION WAR)) The main event (V2) is of ontology type fight-ing, which is a subclass of intentional-action, and which corresponds to the first WordNet sense of fight, and includes verbs such as fight, defend, contend and struggle. The agent role of                                                 1 TRIPS ontology browser: http://www.cs.rochester.edu/  research/trips/lexicon/browse-ont-lex.html 
this event is the referent of the pronoun he, and the event is situated in an event described by the word war. For words not in the TRIPS core lexi-con, the system looks up the WordNet senses and maps them to the TRIPS ontology. The word war is not in the core lexicon, and via WordNet is classified into the TRIPS ontology as the abstract type action. 2.2 Markov Logic Network (MLN) One of the statistical relational learning (SRL) frameworks that has recently gained momentum as a platform for global learning and inference in AI is Markov Logic (Richardson and Domingos, 2006). Markov logic is a combination of first order logic and Markov networks. It can be seen as a formalism that extends first-order logic to allow formulae to be violated with some penalty.  For our different classification tasks, we used different classifiers based on MLNs. We used an off-the-shelf MLN classifier Markov thebeast2, using Cutting Plane Inference (Riedel, 2008) with an Integer Linear Programming (ILP) solver for inference.  To use thebeast or any other MLN framework, at first we have to write the formulas, which cor-responds to defining features for other machine learning approaches. The Markov network then learns the weights for these formulas from the training corpus and uses these weights for infer-ence in testing phase.  One easy example will give a brief idea about these weights. To classify the event feature class, we have a formula that captures influence of both tense and aspect together. Here are two examples that show the learned weights for the formula from training data.  tense(e1, INFINITIVE) & aspect(e1, NONE) => class(e1, OCCURRENCE) weight = 0.3199  tense(e1, PRESPART) & aspect(e1, NONE) => class(e1, REPORTING) weight = -0.2681 The MLN then uses these weights for reason-ing about the class. Generally, larger the weights are, the more likely the formula holds. These weights could be negative as well, i.e. the formu-las are most likely not to hold.  Finding useful features for MLNs is the same as any other ML algorithm. However, the MLN framework gives the opportunity to capture the relations between different features in first order logic, which can lead to better inference. For ex-ample, when filtering events, we have formula combining word and pos, or word and previous                                                 2 http://code.google.com/p/thebeast/ 
277
word, or pos and next pos, where we can capture relationship of two predicates together. Many of these predicates (features) could be encoded in other classifiers concatenating the features. But when the size of relations between features in-creases it complicates matters and we have to regenerate the whole classifier data, every time we introduce a new relationship. 3 Event and Event Feature Extraction (Task B) Because event extraction from the raw text is a prerequisite to everything else we do, we discuss this capability first. 3.1 Event Extraction For event extraction, we parse the raw text with the TRIPS parser. Then we take the resulting Logical Form (LF) and apply around hundred of hand-coded extraction patterns to extract events and features, by matching semantic patterns of phrases. These hand-coded rules are devised by checking the parse output in our development set. It was 2-3 weeks of work to come up with most of the extraction rules that extract the events. There were minor incremental improve-ments in rules afterwards. It is worth mentioning, these rules are very generic and can be used in a new domain without any extra work, because, the TRIPS parser and ontology are domain inde-pendent, and use mappings from WordNet to interpret unknown words. Hence, the extraction rules will apply (and can be tested) for any natu-ral language text without any extra work.  Because of the ontology, we can usually express general rules that capture a wide range of phenomena. For instance, all noun-phrases describing objects that fall under the TRIPS Ontology's top-level type situation-root are extracted as described events. This situation  is captured by the extraction rule: ((THE ?x (? type SITUATION-ROOT))  -extract-noms> (EVENT ?x (? type SITUATION-ROOT)   :pos NOUN :class OCCURRENCE )) Since war has the type action, which falls under situation-root in TRIPS ontology, this extraction rule will match the LF (THE V5 (:* ACTION WAR)) and will extract war as event. Beside matching war under situation-root in ontology, it also matches the specifier the, which indicates that it is a definite noun phrase.  The result of matching around hundred of such rules to the sentence above is: 
<EVENT eid=V2 word=FIGHT   pos=VERBAL ont-type=FIGHTING   class=OCCURRENCE tense=PAST   voice=ACTIVE aspect=NONE  polarity=POSITIVE  nf-morph=NONE>  <RLINK eventInstanceID=V2   ref-word=HE   ref-ont-type=PERSON   relType=AGENT>  <SLINK signal=IN   eventInstanceID=V2   subordinatedEventInstance=V5   relType=SITUATED-IN>  <EVENT eid=V5 word=WAR pos=NOUN   ont-type=ACTION   class=OCCURRENCE   voice=ACTIVE   polarity=POSITIVE   aspect=NONE tense=NONE>   In this way, we extract events and TimeML-suggested event features (class, tense, aspect, pos, polarity, modality). We also extract a few additional features such as ontology type (ont-type). TimeML tries to capture event information by very coarse-grained event features class or pos. The ontology type feature captures more fine-grained information about the event, but still coarse-grained than the words. The extraction rules also map our fine-grained types to the coarse-grained TimeML event class. We also extract relations between events (SLINK), when-ever one event syntactically dominates the other, so it extracts more than TimeML?s SLINKs and another new relation, relation between event and its arguments (RLINK). Details about these new additions can be found in UzZaman and Allen (2010).  This system extracts events from the Tem-pEval-2 corpus with high recall. However, this high performance comes with the expense of precision. The reasons for lower precision in-clude, (i) the fact that generic events are not coded as events in TempEval, (ii) errors in pars-ing and, (iii) legitimate events found by the parser but missed by TempEval annotators. To remedy this problem, we introduced a MLN based filtering classifier, using the event features extracted from the TRIPS parser. The formulas in MLN for filtering were derived by linguistic intuition and by checking the errors in our devel-opment set. We devised around 30 formulas.  There were two goals for this filtering step: (1) Eliminating events that result from errors in the parse, and (2) Removing event-classes, such as generics, that were not coded in TempEval. The second goal is needed to perform a meaningful evaluation on the TempEval challenge. For our long-term goal of using the 
278
For our long-term goal of using the temporal summary in natural language understanding task, however, we would retain these other events. The resulting system, including parsing, extrac-tion, and post-filtering, is named as TRIOS sys-tem.  2.3 Event Feature Extraction The TRIPS parser and extraction rules already give us event features along with events, which is reported in the results as the TRIPS system. To improve performance, we implemented MLN classifiers (TRIOS system) for the class, tense, aspect and pos features, using the features gener-ated from the TRIPS parser plus lexical and syn-tactical features generated from the text using the Stanford POS tagger3. The TRIOS system re-ports the polarity and modality performance of TRIPS system, i.e. we don?t have any extra clas-sifiers to classify those features in TRIOS sys-tem. The Table 1 gives a summary of features used to classify these event features.   Event feature Common fea-tures  Extra features  Pos none Tense pos, polarity, modality, voice (active or pas-sive) Aspect pos, polarity, modality, voice (active or pas-sive), pos+previous-pos, pos+next-pos Class 
Event word, event penn tag, verb pos se-quence 4 , verb word sequence, previous word of verb se-quence, previ-ous pos of verb sequence, next word, next pos  TRIPS class suggestion, ont-type, slink_core_rel 5 , tense+aspect, pos, stem, contains dollar Table 1: Attributes/features used for classifying event features pos, tense, aspect and class 3 Temporal Expression Extraction (Task A) 3.1 Recognizing Temporal Expression The TRIPS parser extracts temporal expres-sions the same way as we extract events. The                                                 3 http://nlp.stanford.edu/software/tagger.shtml 4 One Penn tag derived features is verb word sequence, which captures all previous verbs, or TO (infinitive), or modal verbs, of the event word. That is, it will capture all consecutive verbs before the event until we get non-verbal word. Similarly verb pos sequence is the penn tag sequence of these verbs. 5 SLINK captures relation between two events, when one syntactically dominates other. This feature captures the relation-type as feature for core events.  
performance of TRIPS parser?s temporal extrac-tion doesn?t outperform state-of-the-art tech-niques on the evaluation measures. To improve on this, we also use a traditional machine learn-ing classifier straight from the text. We used a token-by-token classification for temporal ex-pressions represented by B-I-O encoding with a set of lexical and syntactic features, using Condi-tional Random Field (CRF) classifier6. CRF is widely used for labeling and segmenting se-quence data. Unlike Hidden Markov Models, CRFs are based on exponential models in which probabilities are computed based on the values of a set of features induced from both the observa-tion and label sequences. They have been used in POS tagging, shallow parsing, named entity rec-ognition and also for temporal expression extrac-tion in TERN dataset [Ahn et al (2005), Hacio-glu et al (2005) and Poveda et al (2007)].  We used lexical features like word, shape, is year, is date of week, is month, is number, is time, is day, is quarter, is punctuation, if belong to word-list like init-list7, follow-list8, etc. We then use CRF++ templates to capture relation between different features to extract the se-quence. For example, we will write a template to capture the current word is in init-list and the next word is in follow-list, this rule will train the model to capture sequences like this weekend, earlier morning, several years, etc.  On the other hand, the TRIPS parser does ex-tract temporal relations between events and tem-poral expressions, which helps us in the temporal relation identification tasks. So we take the tem-poral expressions from the CRF based extractor and for the cases where TRIPS parser extracts the temporal expression, we use TRIPS parser id, so that we can relate to relations generated by the parser.  The temporal expressions that are suggested by CRF based system, are passed to a filtering step that tries to extract a normalized value and type of the temporal expression. If we can find a normalized value and type, we accept the tempo-                                                6 We used off the shelf CRF++ implementation. http://crfpp.sourceforge.net/ 7 init-list contains words like: this, mid, first, almost, last, next, early, recent, earlier, beginning, nearly, few, following, several, around, the, less, than, more, no, of, each, late. 8 follow-list contains words like: century, centuries, day, days, era, hour, hours, millisecond, minute, minutes, moment, month, months, night, nights, sec, second, time, week, weeks, year, years, am, pm, weekend, summer, fall, winter, fiscal, morning, evening, afternoon, noon, EST, GMT, PST, CST, ago, half. 
279
ral expressions. We reported this CRF based sys-tem with filtering as both TRIPS and TRIOS systems.  3.2 Determining The Normalized Value and Type of temporal expression  Temporal expressions are most useful for later processing when a normalized value and type is determined. We implemented a rule-based tech-nique to determine the types and values. We match regular expressions to identify the type of temporal expressions. Type could be either of time, date, duration and set.  Then in next step we extract the normalized value of temporal expression, as suggested by TimeML scheme. We take the Document Crea-tion Time (DCT) and then calculate the values for different dates in terms of document creation date, e.g. last month, Sunday, today. We will make our type and value extractor and temporal expression extractor modules available9 for pub-lic use.  4 Temporal Relation Identification (Task C ? F) We identify temporal relations using a Markov Logic Network classifier, namely thebeast, by using linguistically motivated features that we extracted in previous steps. Our work matches closely with the work of Yoshikawa et al (2009). We only consider the local classifiers, but we use more linguistically motivated features and fea-tures generated from text, whereas they used TempEval-1?s (Verhagen et al, 2007) annota-tions as input, along with their derived features. Other participants in TempEval 2 also used fea-tures from annotated corpus, making us the only group in TempEval-2 to use own-generated enti-ties (events and temporal expression) and fea-tures. TempEval-2 has four subtasks for identifying temporal relations. The tasks are:  (C) Determine the temporal relation between an event and temporal expression in the same sentence;  (D) Determine the temporal relation between an event and the document creation time (DCT); (E) Determine the temporal relation between the main events in two adjacent sentences; and  
                                                9 Available online at: http://www.cs.rochester.edu/u/naushad/temporal 
(F) Determine the temporal relation between two events, where one event syntactically domi-nates the other event.   Both TRIPS and TRIOS use the same MLN classifier with same feature-set for each task. However the difference is, they take events and temporal expressions from respective systems, e.g. in Task C (temporal relation between events and temporal expressions), TRIPS system will classify relations for instances where TRIPS event extractor extracted events (in task B) and TRIPS temporal expression extractor extracted temporal expression (in task A). The recall measure of task C will represent the accuracy of extracting events, temporal expression and iden-tifying temporal relations together. This applies for all C ? F tasks and for both TRIOS and TRIPS systems.  Tables 2 and 3 show the features we used for each of these tasks. We used some features that we extracted from TRIPS parser. Related infor-mation about these concepts can be found in Uz-Zaman and Allen (2010).  Features Task C Task D Event Class YES YES Event Tense YES YES Event Aspect YES YES Event Polarity YES YES Event Stem YES YES Event Word YES YES Event Constituent10  YES Event Ont-type 11  YES Event LexAspect 12 x Tense  YES Event Pos YES YES Timex Word  YES Timex Type YES YES Timex Value YES YES Timex DCT relation YES YES Event to Argument connective ont-type13 YES YES Event?s argument?s ont-type YES  YES TLINK event-time sig-nal14  YES  
                                                10 TRIPS parser identifies the event constituent along with event word.  11 Ontology-type is described in Event Extraction sub-section.  12 LexicalAspect feature is a subset of feature class and it classifies the events into Event, State and Reporting class.  13 Ontology type of connective that connects the event and its argument 
280
Table 2: Features used for TempEval-2 Task C and D  Features Task E Task F Event Class e1 x e2 e1 x e215 Event Tense e1 x e2 e1 x e2 Event Aspect e1 x e2 e1 x e2 Event Polarity e1 x e2 e1 x e2 Event Stem e1 x e2 e1 x e2 Event Word YES YES Event Constituent e1 x e2 e1 x e2 Event Ont-type  e1 x e2 e1 x e2 Event LexAspect  x Tense e1 x e2 e1 x e2 Event Pos e1 x e2 e1 x e2 SLINK event-event relation type16  e1 x e2 Table 3: Features used for TempEval-2 Task E and F  5 Results 5.1 Event and Event Feature Extraction (Task B) On event extraction, the TRIPS system has the highest recall, while the TRIOS system is second best in precision with the highest scoring system, TIPSem. But overall they do very well compared to our system on event extraction. Performance of our both systems and the best performing TIPSem system is reported in Table 4.    Precision Recall Fscore TRIPS  0.55 0.88 0.67 TRIOS  0.80 0.74 0.77 Best (TIPSem) 0.81 0.86 0.84 Table 4: Performance of Event Extraction (Task B)  On event feature extraction, our TRIOS sys-tem, which is based on MLN based classifiers, has the best performance on aspect and polarity; we also do very well (second-best performances mostly) on tense, class, pos and modality.    Feature TRIPS  TRIOS Best Class 0.67 0.77 0.79 (TIPSem)                                                                        14 TRIPS parser generated event-time TLINK connective or signal (similar to TimeML) 15 Task E and F is temporal relations between events. In MLN framework, we can write formula in first-order logic. e1 x e2 instances are cases, where we capture both events together. For example, in case of Tense, it will learn the weights for temporal relations given first event?s tense is PRESENT and second event?s tense is PAST. Instead of just considering first event is PRESENT and second event is PAST, we are considering first event is PRE-SENT and second event is PAST together.  16 The SLINK relation type that connects two events, more at UzZaman and Allen (2010). 
Tense 0.67 0.91 0.92 (Ed.-LTG) Aspect 0.97 0.98 0.98 Pos 0.88 0.96 0.97 (TIPSem, Edinburg-LTG) Polarity 0.99 0.99 0.98 Modality 0.95 0.95 0.99 (Ed.-LTG) Table 5: Performance of Event Features (Task B) 5.2 Temporal Expression Extraction (Task A) Both the TRIPS and TRIOS systems use the same CRF-based approach for temporal expres-sion extraction. Our system has the second best performance on combined temporal expression extraction and normalization task (identifying type and value). It is worth mentioning that the average of identifying value performance is 0.61 and if we remove our systems and the best sys-tem, HeidelTime-1, the average is only 0.56. Hence, our freely distributed normalization tool could be beneficiary to many people. Perform-ance of our system and the best system on task A is reported in Table 5.    TRIPS TRIOS Best (Hei-delTime-1) Precision 0.85 0.90 Timex extraction Recall 0.85 0.82 type 0.94 0.96 Normali-zation value 0.76 0.85 Table 5: Performance on Temporal Expression extrac-tion (Task A) 5.3 Temporal Relation Identification (Task C ? F)  For temporal relation identification (Task C ? F), other teams used events, temporal expressions and their features from human-annotated corpus, whereas, we used our extracted entities and their features that we extracted in Task A and B. So our performances represent the capability of identifying these relationships from raw text and it is also harder classification task, since we are starting with imperfect features.  Even though we are using our own generated features, we outperformed other groups in task C (temporal relation between event and temporal expression) and task E (temporal relation be-tween main events of consecutive sentences). We also have second-best/equivalent performance for other two tasks (temporal relation between event and DCT; and temporal relation between events, where one syntactically dominates other).  Table 6 reports our systems? performances with precision (P) and recall (R). For others, 
281
since they take annotated events and features, they don?t actually have a recall, so their recall is not reported.  Since TRIPS system for these tasks uses events (task B) from TRIPS system, which has higher recall, it will have higher recall in rela-tions as well.   TRIPS TRIOS Best Task P R P R P Task C 0.63 0.52 0.65 0.52 0.65 Task D 0.76 0.69 0.79 0.67 0.82  (TIPSem) Task E 0.58 0.50 0.56 0.42 0.58 Task F 0.59 0.54 0.6 0.46 0.66  (NCSU-indi) Table 6: Performance on identifying temporal rela-tions (Task C ? F) 5.4 Overall Performance  Many teams chose just to attempt one task be-tween task A and B, or both, or only attempt some of tasks C to F. Only three teams attempted all tasks, our team, TIPSem and JU_CSE_TEMP. For tasks C ? F, we used our generated features, whereas all other teams used the features provided in the corpus. In this section, we will show head-to-head comparison of the performance of these three systems to see which team handles the overall challenge of TempEval-2 better.  Table 6 sum-marizes our analysis.  Task Description Best Task A Temporal expression extraction TRIOS Task B Event extraction TIPSem Task C Event-Timex relation-ship TRIOS Task D Event-DCT relationship TIPSem Task E Main event-event rela-tionship TRIOS Task F Subordinate event-event relationship TRIOS  Table 6: Head-to-head comparison of TRIOS, TIP-Sem and JU_CSE_TEMP (teams that approached all tasks) in TempEval-2 challenge  Note that JU_CSE_TEMP didn?t perform best in any particular task. However, they do a little better than us in Task D (TRIOS 0.79, JU_CSE_TEMP .80). They also didn?t extract temporal expression type and value.  
Both TRIOS and TIPSem teams submitted two systems. For this comparison, we pick the best system of each team then compare between them. On temporal expression extraction, we have very close extraction scores (TRIOS fscore 0.85 and TIPSem fscore 0.855). However on temporal expression attributes, we are far supe-rior to TIP-Sem. So overall in Task A, we claim we did better. TIPSem clearly did better on the event extraction task.  On the other hand, given that task A and task B has many subtasks, if we split them into entity extraction and attribute extraction, then we have four tasks of extraction and four tasks on relation identification. In that case, TIPSem does better than us on event extraction, but on event feature extraction we have a tie; for temporal expression extraction, we have another tie, but we outper-form in temporal expression attribute extraction. 6 Future Work  Our interest is in constructing a domain-independent system for temporal information extraction. We expect that our system will per-form closely to TRIPS system (not the better TRIOS) in new domains, since it uses a domain independent semantic parser and domain inde-pendent extraction rules. On the other hand, the TRIOS system is dependent on machine learning classifiers, which depends on having a training corpus. So in those cases, we plan to explore bootstrapping a corpus in the new domain using TRIPS, to obtain performance similar to the TRIOS system.     In parallel to that, we plan to build a system that generates reliable temporal structure of documents that can be used in information ex-traction and language understanding in general. We are particularly interested in generating the temporal structure of documents in medical ap-plications, and in applications that would help people who have trouble reading and understand-ing documents. To do that, we plan to represent our events, temporal expressions, and temporal relations in a representation like Timegraph (Miller and Schubert, 1990), which is very easy-to-understand representation for humans and also very scalable and efficient solution for temporal reasoning. This would also open the door for ap-plications that require sophisticated temporal reasoning. Finally, we plan to use the system to semi-automatically create a larger temporally anno-tated corpus based on TimeML scheme. The sys-
282
tem would produce an initial version that could be reviewed by human judges before making it public.  7 Conclusion We have shown that a hybrid system combining domain-independent deep understanding tech-niques with machine learning can extract signifi-cant amounts of temporal information from documents. Our submitted systems, TRIPS and TRIOS for TempEval-2 challenge, approached all tasks and outperformed all teams in two tasks (out of six) and TRIOS mostly had second-best performances in other tasks. TRIOS also outper-forms the other teams that approached all tasks, even though for task C - F we operated on fea-tures automatically computed from raw text rather than using the tagged events and temporal expressions in the corpus.   Acknowledgments This work was supported in part by the National Science Foundation, grant #0748942, and the Office of Naval  Research (N000140510314).  We thank Mary Swift and William DeBeaumont for help with the TRIPS parser, Benjamin van Durme for many useful suggestions and Sebestian Reidel for help on using the very useful MLN tool TheBeast. We are also very thankful to Marc Verhagen and other organizers and annotators of TempEval-2 challenge for or-ganizing a very successful event and also for be-ing very cooperative. Finally, we are thankful to the SemEval-2 chairs, Katrin Erk and Carlo Strapparava for granting us extra pages to de-scribe our approach to all tasks with two sys-tems.    References  D. Ahn, S.F. Adafre, M. de Rijke, 2005. Extracting Temporal Information from Open Domain Text: A Comparative Exploration, Digital Information Management, 2005.  J. Allen, M. Swift, and W. de Beaumont, 2008. Deep semantic analysis of text. In Symposium on Seman-tics in Systems for Text Processing (STEP), 2008. M. Dzikovska, J. Allen and M. Swift. 2003. Integrat-ing linguistic and domain knowledge for spoken dialogue systems in multiple domains. Workshop on Knowledge and Reasoning in Practical Dia-logue Systems, IJCAI, Acapulco. K. Hachioglu, Y. Chen and B. Douglas, 2005. Auto-matic Time Expression Labeling for English and Chinese Text. In Proceedings of CICLing-2005.  
C. Johnson and C. Fillmore. 2000. The FrameNet tagset for frame-semantic and syntactic coding of predicate-argument structure. ANLP-NAACL, Seat-tle, WA. J. Poveda, M. Surdeanu and J. Turmo, 2007. A Com-parison of Statistical and Rule-Induction Learners for Automatic Tagging of Time Expressions in English. In Proceedings of the International Sym-posium on Temporal Representation and Reason-ing, 2007.   S.A. Miller and L.K. Schubert, Time Revisited, Com-putational Intelligence 6(2), 108-118, 1990. James Pustejovsky, Jos M. Castao, Robert Ingria, Roser Sauri, Robert J. Gaizauskas, Andrea Setzer, Graham Katz, and Dragomir R. Radev, 2003. TimeML: Robust Specification of Event and Tem-poral Expressions in Text. In Mark T. Maybury, editor, New Directions in Question Answering, pages 28?34. AAAI Press, 2003. Matthew Richardson and Pedro Domingos, 2006. Markov logic networks. Machine Learning, 2006. Sebastian Riedel. 2008. Improving the accuracy and efficiency of map inference for markov logic. In Proceedings of UAI 2008. Naushad UzZaman and James Allen, 2010, TRIOS-TimeBank Corpus: Extended TimeBank corpus with help of Deep Understanding of Text, To Appear in the Proceedings of The seventh interna-tional conference on Language Resources and Evaluation (LREC), Malta, 2010.  Marc Verhagen, Robert Gaizauskas, Frank Schilder, Mark Hepple, Graham Katz and James Puste-jovsky, 2007. SemEval-2007 Task 15: TempEval Temporal Relation Identification, Proceedings of 4th International Workshop on Semantic Evalua-tions (SemEval 2007). Katsumasa Yoshikawa, Sebastian Riedel, Masayuki Asahara and Yuji Matsumoto. 2009. Jointly Identi-fying Temporal Relations with Markov Logic. Pro-ceedings of the Joint Conference of the 47th An-nual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP, 2009.  
283
Second Joint Conference on Lexical and Computational Semantics (*SEM), Volume 2: Seventh International Workshop on Semantic
Evaluation (SemEval 2013), pages 1?9, Atlanta, Georgia, June 14-15, 2013. c?2013 Association for Computational Linguistics
SemEval-2013 Task 1: TEMPEVAL-3: Evaluating Time Expressions,
Events, and Temporal Relations
Naushad UzZaman?1, Hector Llorens?1, Leon Derczynski?,
Marc Verhagen?, James Allen? and James Pustejovsky?
?: University of Rochester, USA; ?: University of Alicante, Spain
?: Department of Computer Science, University of Sheffield, UK
?: Computer Science Department, Brandeis University, USA
1: Nuance Communications
naushad@cs.rochester.edu, hllorens@dlsi.ua.es, leon@dcs.shef.ac.uk
Abstract
Within the SemEval-2013 evaluation exercise, the
TempEval-3 shared task aims to advance research
on temporal information processing. It follows on
from TempEval-1 and -2, with: a three-part struc-
ture covering temporal expression, event, and tem-
poral relation extraction; a larger dataset; and new
single measures to rank systems ? in each task and in
general. In this paper, we describe the participants?
approaches, results, and the observations from the
results, which may guide future research in this area.
1 Introduction
The TempEval task (Verhagen et al, 2009) was added as a
new task in SemEval-2007. The ultimate aim of research
in this area is the automatic identification of temporal ex-
pressions (timexes), events, and temporal relations within
a text as specified in TimeML annotation (Pustejovsky et
al., 2005). However, since addressing this aim in a first
evaluation challenge was deemed too difficult a staged
approach was suggested.
TempEval (henceforth TempEval-1) was an initial
evaluation exercise focusing only on the categorization of
temporal relations and only in English. It included three
relation types: event-timex, event-dct,1 and relations be-
tween main events in consecutive sentences.
TempEval-2 (Verhagen et al, 2010) extended
TempEval-1, growing into a multilingual task, and con-
sisting of six subtasks rather than three. This included
event and timex extraction, as well as the three relation
tasks from TempEval-1, with the addition of a relation
task where one event subordinates another.
TempEval-3 (UzZaman et al, 2012b) is a follow-up
to TempEval 1 and 2, covering English and Spanish.
TempEval-3 is different from its predecessors in a few
respects:
1DCT stands for document creation time
Size of the corpus: the dataset used has about 600K
word silver standard data and about 100K word gold stan-
dard data for training, compared to around 50K word cor-
pus used in TempEval 1 and 2. Temporal annotation is
a time-consuming task for humans, which has limited
the size of annotated data in previous TempEval exer-
cises. Current systems, however, are performing close to
the inter-annotator reliability, which suggests that larger
corpora could be built from automatically annotated data
with minor human reviews. We want to explore whether
there is value in adding a large automatically created sil-
ver standard to a hand-crafted gold standard.
End-to-end temporal relation processing task: the
temporal relation classification tasks are performed from
raw text, i.e. participants need to extract their own events
and temporal expressions first, determine which ones to
link and then obtain the relation types. In previous Tem-
pEvals, gold timexes, events, and relations (without cate-
gory) were given to participants.
Temporal relation types: the full set of temporal re-
lations in TimeML are used, rather than the reduced set
used in earlier TempEvals.
Platinum test set: A new test dataset has been devel-
oped for this edition. It is based on manual annotations
by experts over new text (unseen in previous editions).
Evaluation: we report a temporal awareness score for
evaluating temporal relations, which helps to rank sys-
tems with a single score.
2 Data
In TempEval-3, we reviewed and corrected existing cor-
pora, and also released new corpora.
2.1 Reviewing Existing Corpora
We considered the existing TimeBank (Pustejovsky et al,
2003) and AQUAINT2 data for TempEval-3. TempEval-
2See http://timeml.org/site/timebank/timebank.html
1
Entity Agreement
Event 0.87
Event class 0.92
Timex 0.87
Timex value 0.88
Table 1: Platinum corpus entity inter-annotator agreement.
Corpus # of words Standard
TimeBank 61,418 Gold
AQUAINT 33,973 Gold
TempEval-3 Silver 666,309 Silver
TempEval-3 Eval 6,375 Platinum
TimeBank-ES Train 57,977 Gold
TimeBank-ES Eval 9,833 Gold
Table 2: Corpora used in TempEval-3.
1 and TempEval-2 had the same documents as TimeBank
but different relation types and events.
For both TimeBank and AQUAINT, we, (i) cleaned up
the formatting for all files making it easy to review and
read, (ii) made all files XML and TimeML schema com-
patible, (iii) added some missing events and temporal ex-
pressions. In TimeBank, we, (i) borrowed the events from
the TempEval-2 corpus and (ii) borrowed the temporal re-
lations from TimeBank corpus, which contains a full set
of temporal relations. In AQUAINT, we added the tem-
poral relations between event and DCT (document cre-
ation time), which was missing for many documents in
that corpus. These existing corpora comprised the high-
quality component of our training set.
2.2 New Corpora
We created two new datasets: a small, manually-
annotated set over new text (platinum); and a machine-
annotated, automatically-merged dataset based on out-
puts of multiple systems (silver).
The TempEval-3 platinum evaluation corpus was anno-
tated/reviewed by the organizers, who are experts in the
area. This process used the TimeML Annotation Guide-
lines v1.2.1 (Saur?? et al, 2006). Every file was anno-
tated independently by at least two expert annotators, and
a third was dedicated to adjudicating between annotations
and merging the final result. Some annotators based their
work on TIPSem annotation suggestions (Llorens et al,
2012b). The GATE Annotation Diff tool was used for
merging (Cunningham et al, 2013), a custom TimeML
validator ensured integrity,3 and CAVaT (Derczynski and
Gaizauskas, 2010) was used to determine various modes
of TimeML mis-annotation and inconsistency that are in-
expressable via XML schema. Post-exercise, that corpus
(TempEval-3 Platinum with around 6K tokens, on com-
pletely new text) is released for the community to review
3See https://github.com/hllorens/TimeML-validator
and improve.4 Inter-annotator agreement (measured with
F1, as per Hripcsak and Rothschild (2005)) and the num-
ber of annotation passes per document were higher than
in existing TimeML corpora, hence the name. Details are
given in Table 1. Attribute value scores are given based
on the agreed entity set. These are for exact matches.
The TempEval-3 silver evaluation corpus is a 600K
word corpus collected from Gigaword (Parker et
al., 2011). We automatically annotated this corpus
by TIPSem, TIPSem-B (Llorens et al, 2013) and
TRIOS (UzZaman and Allen, 2010). These systems were
retrained on the corrected TimeBank and AQUAINT cor-
pus to generate the original TimeML temporal relation
set. We then merged these three state-of-the-art sys-
tem outputs using our merging algorithm (Llorens et al,
2012a). In our selected merged configuration all entities
and relations suggested by the best system (TIPSem) are
added in the merged output. Suggestions from other sys-
tems (TRIOS and TIPSem-B) are added in the merged
output, only if they are also supported by another system.
The weights considered in our configuration are: TIPSem
0.36, TIPSemB 0.32, TRIOS 0.32.
For Spanish, Spanish TimeBank 1.0 corpus (Saur?? and
Badia, 2012) wads used. It is the same corpus that was
used in TempEval-2, with a major review of entity anno-
tation and an important improvement regarding temporal
relation annotation. For TempEval-3, we converted ES-
TimeBank link types to the TimeML standard types based
on Allen?s temporal relations (Allen, 1983).
Table 2 summarizes our released corpora, measured
with PTB-scheme tokens as words. All data produced
was annotated using a well-defined subset of TimeML,
designed for easy processing, and for reduced ambigu-
ity compared to standard TimeML. Participants were en-
couraged to validate their submissions using a purpose-
built tool to ensure that submitted runs were legible. We
called this standard TimeML-strict, and release it sepa-
rately (Derczynski et al, 2013).
3 Tasks
The three main tasks proposed for TempEval-3 focus on
TimeML entities and relations:
3.1 Task A (Timex extraction and normalization)
Determine the extent of the timexes in a text as defined
by the TimeML TIMEX3 tag. In addition, determine the
value of the features TYPE and VALUE. The possible
values of TYPE are time, date, duration, and set; VALUE
is a normalized value as defined by the TIMEX3 standard.
4In the ACL data and code repository, reference ADCR2013T001.
See also https://bitbucket.org/leondz/te3-platinum
2
3.2 Task B (Event extraction and classification)
Determine the extent of the events in a text as defined by
the TimeML EVENT tag and the appropriate CLASS.
3.3 Task ABC (Annotating temporal relations)
This is the ultimate task for evaluating an end-to-end sys-
tem that goes from raw text to TimeML annotation of
entities and links. It entails performing tasks A and B.
From raw text extract the temporal entities (events and
timexes), identify the pairs of temporal entities that have
a temporal link (TLINK) and classify the temporal re-
lation between them. Possible pair of entities that can
have a temporal link are: (i) main events of consecu-
tive sentences, (ii) pairs of events in the same sentence,
(iii) event and timex in the same sentence and (iv) event
and document creation time. In TempEval-3, TimeML
relation are used, i.e.: BEFORE, AFTER, INCLUDES, IS-
INCLUDED, DURING, SIMULTANEOUS, IMMEDIATELY
AFTER, IMMEDIATELY BEFORE, IDENTITY, BEGINS,
ENDS, BEGUN-BY and ENDED-BY.
In addition to this main tasks, we also include two extra
temporal relation tasks:
Task C (Annotating relations given gold entities)
Given the gold entities, identify the pairs of entities that
have a temporal link (TLINK) and classify the temporal
relations between them.
Task C relation only (Annotating relations given gold
entities and related pairs) Given the temporal entities
and the pair of entities that have a temporal link, classify
the temporal relation between them.
4 Evaluation Metrics
The metrics used to evaluate the participants are:
4.1 Temporal Entity Extraction
To evaluate temporal entities (events and temporal ex-
pressions), we need to evaluate, (i) How many entities are
correctly identified, (ii) If the extents for the entities are
correctly identified, and (iii) How many entity attributes
are correctly identified. We use classical precision and
recall for recognition.
How many entities are correctly identified: We evalu-
ate our entities using the entity-based evaluation with the
equations below.
Precision = |Sysentity?Refentity||Sysentity|
Recall = |Sysentity?Refentity||Refentity|
where, Sysentity contains the entities extracted by the
system that we want to evaluate, and Refentity contains
the entities from the reference annotation that are being
compared.
If the extents for the entities are correctly identified:
We compare our entities with both strict match and re-
laxed match. When there is a exact match between the
system entity and gold entity then we call it strict match,
e.g. ?sunday morning? vs ?sunday morning?. When there
is a overlap between the system entity and gold entity
then we call it relaxed match, e.g. ?sunday? vs ?sunday
morning?. When there is a relaxed match, we compare
the attribute values.
How many entity attributes are correctly identified: We
evaluate our entity attributes using the attribute F1-score,
which captures how well the system identified both the
entity and attribute (attr) together.
Attribute Recall =
|{?x | x?(Sysentity?Refentity)?Sysattr(x)==Refattr(x)}|
|Refentity|
Attribute Precision =
|{?x | x?(Sysentity?Refentity)?Sysattr(x)==Refattr(x)}|
|Sysentity|
Attribute F1-score = 2?p?rp+r
Attribute (Attr) accuracy, precision and recall can be
calculated as well from the above information.
Attr Accuracy = Attr F1 / Entity Extraction F1
Attr R = Attr Accuracy * Entity R
Attr P = Attr Accuracy * Entity P
4.2 Temporal Relation Processing
To evaluate relations, we use the evaluation metric pre-
sented by UzZaman and Allen (2011).5 This metric cap-
tures the temporal awareness of an annotation in terms
of precision, recall and F1 score. Temporal awareness
is defined as the performance of an annotation as identi-
fying and categorizing temporal relations, which implies
the correct recognition and classification of the tempo-
ral entities involved in the relations. Unlike TempEval-
2 relation score, where only categorization is evaluated
for relations, this metric evaluates how well pairs of enti-
ties are identified, how well the relations are categorized,
and how well the events and temporal expressions are ex-
tracted.
Precision =
|Sys?relation?Ref
+
relation|
|Sys?relation|
Recall =
|Ref?relation?Sys
+
relation|
|Ref?relation|
where, G+ is the closure of graph G and G? is the
reduced of graph G, where redundant relations are re-
moved.6
We calculate the Precision by checking the number
of reduced system relations (Sys?relation) that can be veri-
fied from the reference annotation temporal closure graph
(Ref+relation), out of number of temporal relations in the
5We used a minor variation of the formula, where we consider the
reduced graph instead of all system or reference relations. Details can
be found in Chapter 6 of UzZaman (2012).
6A relation is redundant if it can be inferred through other relations.
3
strict value
F1 P R F1 F1
HeidelTime-t 90.30 93.08 87.68 81.34 77.61
HeidelTime-bf 87.31 90.00 84.78 78.36 72.39
HeidelTime-1.2 86.99 89.31 84.78 78.07 72.12
NavyTime-1,2 90.32 89.36 91.30 79.57 70.97
ManTIME-4 89.66 95.12 84.78 74.33 68.97
ManTIME-6 87.55 98.20 78.99 73.09 68.27
ManTIME-3 87.06 94.87 80.43 69.80 67.45
SUTime 90.32 89.36 91.30 79.57 67.38
ManTIME-1 87.20 97.32 78.99 70.40 67.20
ManTIME-5 87.20 97.32 78.99 69.60 67.20
ManTIME-2 88.10 97.37 80.43 72.22 66.67
ATT-2 85.25 98.11 75.36 78.69 65.57
ATT-1 85.60 99.05 75.36 79.01 65.02
ClearTK-1,2 90.23 93.75 86.96 82.71 64.66
JU-CSE 86.38 93.28 80.43 75.49 63.81
KUL 83.67 92.92 76.09 69.32 62.95
KUL-TE3RunABC 82.87 92.04 75.36 73.31 62.15
ClearTK-3,4 87.94 94.96 81.88 77.04 61.48
ATT-3 80.85 97.94 68.84 72.34 60.43
FSS-TimEx 85.06 90.24 80.43 49.04 58.24
TIPSem (TE2) 84.90 97.20 75.36 81.63 65.31
Table 3: Task A - Temporal Expression Performance.
reduced system relations (Sys?relation). Similarly, we
calculate the Recall by checking the number of reduced
reference annotation relations (Ref?relation) that can be
verified from the system output?s temporal closure graph
(Sys+relation), out of number of temporal relations in the
reduced reference annotation (Ref?relation).
This metric evaluates Task ABC together. For Task C
and Task C - relation only, all the gold annotation entities
were provided and then evaluated using the above metric.
Our evaluation toolkit that evaluated TempEval-3 par-
ticipants is available online.7
5 Evaluation Results
The aim of this evaluation is to provide a meaningful re-
port of the performance obtained by the participants in
the tasks defined in Section 3.
Furthermore, the results include TIPSem as reference
for comparison. This was used as a pre-annotation system
in some cases. TIPSem obtained the best results in event
processing task in TempEval-2 and offered very compet-
itive results in timex and relation processing. The best
timex processing system in TempEval-2 (HeidelTime) is
participating in this edition as well, therefore we included
TIPSem as a reference in all tasks.
We only report results in main measures. Results are
divided by language and shown per task. Detailed scores
can be found on the task website.8
7See http://www.cs.rochester.edu/u/naushad/temporal
8See http://www.cs.york.ac.uk/semeval-2013/task1/
5.1 Results for English
5.1.1 Task A: Timexes
We had nine participants and 21 unique runs for tem-
poral expression extraction task, Task A. Table 3 shows
the results. Details about participants? approaches can be
found in Table 4.
We rank the participants for Task A on the F1 score
of most important timex attribute ? Value. To get the
attribute Value correct, a system needs to correctly nor-
malise the temporal expression. This score (Value F1)
captures the performance of extracting the timex and
identifying the attribute Value together (Value F1 = Timex
F1 * Value Accuracy).
Participants approached the temporal expression ex-
traction task with rule-engineered methods, machine
learning methods and also hybrid methods. For temporal
expression normalization (identifying the timex attribute
value), all participants used rule-engineered approaches.
Observations: We collected the following observa-
tions from the results and from participants? experiments.
Strategy: Competition was close for timex recogni-
tion and the best systems all performed within 1% of
each other. On our newswire corpus, statistical systems
(ClearTK) performed best at strict matching, and rule-
engineered system best at relaxed matching (NavyTime,
SUTime, HeidelTime).
Strategy: post-processing, on top of machine learning-
base temporal expression extraction, provided a statisti-
cally significant improvement in both precision and recall
(ManTIME).
Data: using the large silver dataset, alone or together
with human annotated data, did not give improvements in
performance for Task A. Human-annotated gold standard
data alone provided the best performance (ManTIME).
Data: TimeBank alone was better than TimeBank and
AQUAINT together for Task A (ClearTK).
Features: syntactic and gazetteers did not provide any
statistically significant increment of performance with re-
spect to the morphological features alone (ManTIME).
Regarding the two sub-tasks of timex annotation,
recognition and interpretation/normalisation, we noticed
a shift in the state of the art. While normalisation is
currently (and perhaps inherently) done best by rule-
engineered systems, recognition is now done well by a
variety of methods. Where formerly, rule-engineered
timex recognition always outperformed other classes of
approach, now it is clear that rule-engineering and ma-
chine learning are equally good at timex recognition.
5.1.2 Task B: Events
For event extraction (Task B) we had seven participants
and 10 unique runs. The results for this task can be found
in Table 6. We rank the participants for TaskB on the F1
score of most important event attribute ? Class. Class
4
Strategy System Training data Classifier used
Data-driven ATT-1, 2, 3 TBAQ + TE3Silver MaxEnt
ClearTK-1, 2 TimeBank SVM, Logit
ClearTK-3, 4 TBAQ SVM, Logit
JU-CSE TBAQ CRF
ManTIME-1 TBAQ + TE3Silver CRF
ManTIME-3 TBAQ CRF
ManTIME-5 TE3Silver CRF
Temp : ESAfeature TBAQ MaxEnt
Temp : WordNetfeature TBAQ MaxEnt
TIPSem (TE2) TBAQ CRF
Rule-based FSS-TimEx (EN) None None
FSS-TimEx (ES) None None
HeidelTime-1.2, bf (EN) None None
HeidelTime-t (EN) TBAQ None
HeidelTime (ES) Gold None
NavyTime-1, 2 None None
SUTime None None
Hybrid KUL TBAQ + TE3Silver Logit + post-processing
KUL-TE3RunABC TBAQ +TE3Silver Logit + post-processing
ManTIME-2 TBAQ + TE3Silver CRF + post-processing
ManTIME-4 TBAQ CRF + post-processing
ManTIME-6 TE3Silver CRF + post-processing
Table 4: Automated approaches for TE3 Timex Extraction
Strategy System Training data Classifier used Linguistic
Knowledge
Data-driven ATT-1, 2, 3 TBAQ + TE3Silver MaxEnt ms, ss
ClearTK-1, 2 TimeBank SVM, Logit ms
ClearTK-3, 4 TBAQ SVM, Logit ms
JU-CSE TBAQ CRF
KUL TBAQ +TE3Silver Logit ms, ls
KUL-TE3RunABC TBAQ +TE3Silver Logit ms, ls
NavyTime-1 TBAQ MaxEnt ms, ls
NavyTime-2 TimeBank MaxEnt ms, ls
Temp : ESAfeature TBAQ MaxEnt ms, ls, ss
Temp : WordNetfeature TBAQ MaxEnt ms, ls
TIPSem (TE2) TBAQ CRF/SVM ms, ls, ss
Rule-based FSS-TimEx (EN) None None ls, ms
FSS-TimEx (ES) None None ls, ms
Table 5: Automated approaches for Event Extraction
5
F1 P R class F1
ATT-1 81.05 81.44 80.67 71.88
ATT-2 80.91 81.02 80.81 71.10
KUL 79.32 80.69 77.99 70.17
ATT-3 78.63 81.95 75.57 69.55
KUL-TE3RunABC 77.11 77.58 76.64 68.74
ClearTK-3,4 78.81 81.40 76.38 67.87
NavyTime-1 80.30 80.73 79.87 67.48
ClearTK-1,2 77.34 81.86 73.29 65.44
NavyTime-2 79.37 80.52 78.26 64.81
Temp:ESAfeature 68.97 78.33 61.61 54.55
JU-CSE 78.62 80.85 76.51 52.69
Temp:WordNetfeature 63.90 78.90 53.69 50.00
FSS-TimEx 65.06 63.13 67.11 42.94
TIPSem (TE2) 82.89 83.51 82.28 75.59
Table 6: Task B - Event Extraction Performance.
F1 P R
ClearTK-2 30.98 34.08 28.40
ClearTK-1 29.77 34.49 26.19
ClearTK-3 28.62 30.94 26.63
ClearTK-4 28.46 29.73 27.29
NavyTime-1 27.28 31.25 24.20
JU-CSE 24.61 19.17 34.36
NavyTime-2 21.99 26.52 18.78
KUL-TE3RunABC 19.01 17.94 20.22
TIPSem (TE2) 42.39 38.79 46.74
Table 7: Task ABC - Temporal Awareness Evaluation (Task C
evaluation from raw text).
F1 captures the performance of extracting the event and
identifying the attribute Class together (Class F1 = Event
F1 * Class Accuracy).
All the participants except one used machine learning
approaches. Details about the participants? approaches
and the linguistic knowledge9 used to solve this problem,
and training data, are in Table 5.
Observations: We collected the following observa-
tions from the results and from participants? experiments.
Strategy: All the high performing systems for event
extraction (Task B) are machine learning-based.
Data: Systems using silver data, along with the hu-
man annotated gold standard data, performed very well
(top three participants in the task ? ATT, KUL, KUL-
TE3RunABC). Additionally, TimeBank and AQUAINT
together performed better than just TimeBank alone
(NavyTime-1, ClearTK-3,4).
Linguistic Features: Semantic features (ls and ss) have
played an important role, since the best systems (TIPSem,
ATT1 and KUL) include them. However, these three are
not the only systems using semantic features.
9Abbreviations used in the table: TBAQ ? TimeBank + AQUAINT
corpus ms ? morphosyntactic information, e.g. POS, lexical informa-
tion, morphological information and syntactic parsing related features;
ls ?lexical semantic information, e.g. WordNet synsets; ss ? sentence-
level semantic information, e.g. Semantic Role labels.
F1 P R
ClearTK-2 36.26 37.32 35.25
ClearTK-4 35.86 35.17 36.57
ClearTK-1 35.19 37.64 33.04
UTTime-5 34.90 35.94 33.92
ClearTK-3 34.13 33.27 35.03
NavyTime-1 31.06 35.48 27.62
UTTime-4 28.81 37.41 23.43
JU-CSE 26.41 21.04 35.47
NavyTime-2 25.84 31.10 22.10
KUL-TE3RunABC 24.83 23.35 26.52
UTTime-1 24.65 15.18 65.64
UTTime-3 24.28 15.10 61.99
UTTime-2 24.05 14.80 64.20
TIPSem (TE2) 44.25 39.71 49.94
Table 8: Task C - TLINK Identification and Classification.
F1 P R
UTTime-1, 4 56.45 55.58 57.35
UTTime-3, 5 54.70 53.85 55.58
UTTime-2 54.26 53.20 55.36
NavyTime-1 46.83 46.59 47.07
NavyTime-2 43.92 43.65 44.20
JU-CSE 34.77 35.07 34.48
Table 9: Task C - relation only: Relation Classification.
5.1.3 Task C: Relation Evaluation
For complete temporal annotation from raw text (Task
ABC - Task C from raw text) and for temporal relation
only tasks (Task C, Task C relation only), we had five
participants in total.
For relation evaluation, we primarily evaluate on Task
ABC (Task C from raw text), which requires joint entity
extraction, link identification and relation classification.
The results for this task can be found in Table 7.
While TIPSem obtained the best results in task ABC,
especially in recall, it was used by some annotators to
pre-label data. In the interest of rigour and fairness, we
separate out this system.
For task C, for provided participants with entities and
participants identified: between which entity pairs a rela-
tion exists (link identification); and the class of that rela-
tion. Results are given in Table 8. We also evaluate the
participants on the relation by providing the entities and
the links (performance in Table 9) ? TIPSem could not be
evaluated in this setting since the system is not prepared
to do categorization only unless the relations are divided
as in TempEval-2. For these Task C related tasks, we had
only one new participant, who didn?t participate in Task
A and B: UTTime.
Identifying which pair of entities to consider for tem-
poral relations is a new task in this TempEval challenge.
The participants approached the problems in data-driven,
rule-based and also in hybrid ways (Table 1010). On
10New abbreviation in the table, e-attr ? entity attributes, e.g. event
class, tense, aspect, polarity, modality; timex type, value.
6
Strategy System Training data Classifier used Linguistic
Knowledge
Data-driven ClearTK-1 TimeBank SVM, Logit e-attr, ms
ClearTK-2 TimeBank + Bethard et al (2007) SVM, Logit e-attr, ms
ClearTK-3 TBAQ SVM, Logit e-attr, ms
ClearTK-4 TBAQ + Muller?s inferences SVM, Logit e-attr, ms
KULRunABC TBAQ SVM, Logit ms
Rule-based JU-CSE None None
UTTime-1, 2 ,3 None None
TIPSem (TE2) None None e-attr, ms, ls, ss
Hybrid NavyTime-1 TBAQ MaxEnt ms
NavyTime-2 TimeBank MaxEnt ms
UTTime-4 TBAQ Logit ms, ls, ss
UTTime-5 TBAQ + inverse relations Logit ms, ls, ss
Table 10: Automated approaches for TE3 TLINK Identification
Strategy System Training data Classifier used Linguistic
Knowledge
Data-driven ClearTK-1 TimeBank SVM, Logit ms, ls
ClearTK-2 TimeBank + Bethard et al (2007) SVM, Logit ms, ls
ClearTK-3 TBAQ SVM, Logit ms, ls
ClearTK-4 TBAQ + Muller?s inferences SVM, Logit ms, ls
JU-CSE TBAQ CRF
KULRunABC TBAQ SVM, Logit ms
NavyTime-1 TBAQ MaxEnt ms, ls
NavyTime-2 TimeBank MaxEnt ms, ls
UTTime-1,4, 2 TBAQ Logit ms, ls, ss
UTTime-3,5 TBAQ + inverse relations Logit ms, ls, ss
TIPSem (TE-2) TBAQ CRF/SVM ms, ls, ss
Table 11: Automated approaches for Relation Classification
the other hand, all the participants used data-driven ap-
proaches for temporal relations (Table 11).
Observations: We collected the following observa-
tions from the results and from participants? experiments.
Strategy: For relation classification, all participants
used partially or fully machine learning-based systems.
Data: None of the participants implemented their sys-
tems training on the silver data. Most of the systems use
the combined TimeBank and AQUAINT (TBAQ) corpus.
Data: Adding additional high-quality relations, either
Philippe Muller?s closure-based inferences or the verb
clause relations from Bethard et al (2007), typically in-
creased recall and the overall performance (ClearTK runs
two and four).
Features: Participants mostly used the morphosyntac-
tic and lexical semantic information. The best perform-
ing systems from TempEval-2 (TIPSem and TRIOS) ad-
ditionally used sentence level semantic information. One
participant in TempEval-3 (UTTime) also did deep pars-
ing for the sentence level semantic features.
Features: Using more Linguistic knowledge is impor-
tant for the task, but it is more important to execute it
properly. Many systems performed better using less lin-
guistic knowledge. Hence a system (e.g. ClearTK) with
basic morphosyntactic features is hard to beat with more
semantic features, if not used properly.
entity extraction
strict relaxed
F1 F1 P R value
HeidelTime 85.3 90.1 96.0 84.9 87.5
TIPSemB-F 82.6 87.4 93.7 81.9 82.0
FSS-TimEx 49.5 65.2 86.6 52.3 62.7
Table 12: Task A: Temporal Expression (Spanish).
class tense aspect
F1 P R F1 F1 F1
FSS-TimEx 57.6 89.8 42.4 24.9 - -
TIPSemB-F 88.8 91.7 86.0 57.6 41.0 36.3
Table 13: Task B: Event Extraction (Spanish).
Classifier: Across the various tasks, ClearTK tried
Mallet CRF, Mallet MaxEnt, OpenNLP MaxEnt, and LI-
BLINEAR (SVMs and logistic regression). They picked
the final classifiers by running a grid search over models
and parameters on the training data, and for all tasks, a
LIBLINEAR model was at least as good as all the other
models. As an added bonus, it was way faster to train
than most of the other models.
6 Evaluation Results (Spanish)
There were two participants for Spanish. Both partici-
pated in task A and only one of them in task B. In this
7
F1 P R
TIPSemB-F 41.6 37.8 46.2
Table 14: Task ABC: Temporal Awareness (Spanish).
entity extraction attributes
strict relaxed val type
F1 F1 P R F1 F1
HeidelTime 86.4 89.8 94.0 85.9 87.5 89.8
FSS-TimEx 42.1 68.4 86.7 56.5 48.7 65.8
TIPSem 86.9 93.7 98.8 89.1 75.4 88.0
TIPSemB-F 84.3 89.9 93.0 87.0 82.0 86.5
Table 15: Task A: TempEval-2 test set (Spanish).
case, TIPSemB-Freeling is provided as a state-of-the-art
reference covering all the tasks. TIPSemB-Freeling is the
Spanish version of TIPSem with the main difference that
it does not include semantic roles. Furthermore, it uses
Freeling (Padro? and Stanilovsky, 2012) to obtain the lin-
guistic features automatically.
Table 12 shows the results obtained for task A. As it
can be observed HeidelTime obtains the best results. It
improves the previous state-of-the-art results (TIPSemB-
F), especially in normalization (value F1).
Table 13 shows the results from event extraction. In
this case, the previous state-of-the-art is not improved.
Table 14 only shows the results obtained in temporal
awareness by the state-of-the-art system since there were
not participants on this task. We observe that TIPSemB-F
approach offers competitive results, which is comparable
to results obtained in TE3 English test set.
6.1 Comparison with TempEval-2
TempEval-2 Spanish test set is included as a subset of this
TempEval-3 test set. We can therefore compare the per-
formance across editions. Furthermore, we can include
the full-featured TIPSem (Llorens et al, 2010), which
unlike TIPSemB-F used the AnCora (Taule? et al, 2008)
corpus annotations as features including semantic roles.
For timexes, as can be seen in Table 15, the origi-
nal TIPSem obtains better results for timex extraction,
which favours the hypothesis that machine learning sys-
tems are very well suited for this task (if the training data
is sufficiently representative). However, for normaliza-
tion (value F1), HeidelTime ? a rule-engineered system ?
obtains better results. This indicates that rule-based ap-
proaches have the upper hand in this task. TIPSem uses
class tense aspect
F1 P R F1 F1 F1
FSS-TimEx 59.0 90.3 43.9 24.6 - -
TIPSemB-F 90.2 92.5 88.0 58.6 39.7 38.1
TIPSem 88.2 90.6 85.8 58.7 84.9 78.7
Table 16: Task B: TempEval-2 test set (Spanish).
a partly data-driven normalization approach which, given
the small amount of training data available, seemed less
suited to the task.
Table 16 shows event extraction performance in TE2
test set. TIPSemB-F and TIPSem obtained a similar per-
formance. TIPSemB-F performed better in extraction and
TIPSem better in attribute classification.
7 Conclusion
In this paper, we described the TempEval-3 task within
the SemEval 2013 exercise. This task involves identify-
ing temporal expressions (timexes), events and their tem-
poral relations in text. In particular participating systems
were required to automatically annotate raw text using
TimeML annotation scheme
This is the first time end-to-end systems are evalu-
ated with a new single score (temporal awareness). In
TempEval-3 participants had to obtain temporal relations
from their own extracted timexes and events which is a
very challenging task and was the ultimate evaluation aim
of TempEval. It was proposed at TempEval-1 but has not
been carried out until this edition.
The newly-introduced silver data proved not so useful
for timex extraction or relation classification, but did help
with event extraction. The new single-measure helped to
rank systems easily.
Future work could investigate temporal annotation in
specific applications. Current annotations metrics evalu-
ate relations for entities in the same consecutive sentence.
For document-level understanding we need to understand
discourse and pragmatic information. Temporal question
answering-based evaluation (UzZaman et al, 2012a) can
help us to evaluate participants on document level tempo-
ral information understanding without creating any addi-
tional training data. Also, summarisation, machine trans-
lation, and information retrieval need temporal annota-
tion. Application-oriented challenges could further re-
search in these areas.
From a TimeML point of view, we still haven?t tack-
led subordinate relations (TimeML SLINKs), aspectual
relations (TimeML ALINKs), or temporal signal anno-
tation (Derczynski and Gaizauskas, 2011). The critical
questions of which links to annotate, and whether the cur-
rent set of temporal relation types are appropriate for lin-
guistic annotation, are still unanswered.
Acknowledgments
We thank the participants ? especially Steven Bethard,
Jannik Stro?tgen, Nate Chambers, Oleksandr Kolomiyets,
Michele Filannino, Philippe Muller and others ? who
helped us to improve TempEval-3 with their valuable
feedback. The third author also thanks Aarhus Univer-
sity, Denmark who kindly provided facilities.
8
References
J. F. Allen. 1983. Maintaining knowledge about temporal in-
tervals. Communications of the ACM, 26(11):832?843.
S. Bethard, J. H. Martin, and S. Klingenstein. 2007. Timelines
from text: Identication of syntactic temporal relations. In
Proceedings of IEEE International Conference on Semantic
Computing.
H. Cunningham, V. Tablan, A. Roberts, and K. Bontcheva.
2013. Getting More Out of Biomedical Documents with
GATE?s Full Lifecycle Open Source Text Analytics. PLoS
computational biology, 9(2):e1002854.
L. Derczynski and R. Gaizauskas. 2010. Analysing Temporally
Annotated Corpora with CAVaT. In Proceedings of the 7th
International Conference on Language Resources and Eval-
uation, pages 398?404.
L. Derczynski and R. Gaizauskas. 2011. A Corpus-based Study
of Temporal Signals. In Proceedings of the 6th Corpus Lin-
guistics Conference.
L. Derczynski, H. Llorens, and N. UzZaman. 2013. TimeML-
strict: clarifying temporal annotation. CoRR, abs/1304.
G. Hripcsak and A. S. Rothschild. 2005. Agreement, the f-
measure, and reliability in information retrieval. Journal of
the American Medical Informatics Association, 12(3):296?
298.
H. Llorens, E. Saquete, and B. Navarro. 2010. TIPSem (En-
glish and Spanish): Evaluating CRFs and Semantic Roles in
TempEval-2. In Proceedings of the 5th International Work-
shop on Semantic Evaluation, pages 284?291. Association
for Computational Linguistics.
H. Llorens, N. UzZaman, and J. Allen. 2012a. Merging Tem-
poral Annotations. In Proceedings of the TIME Conference.
H. Llorens, E. Saquete, and B. Navarro-Colorado. 2012b. Au-
tomatic system for identifying and categorizing temporal re-
lations in natural language. International Journal of Intelli-
gent Systems, 27(7):680?703.
H. Llorens, E. Saquete, and B. Navarro-Colorado. 2013. Ap-
plying Semantic Knowledge to the Automatic Processing of
Temporal Expressions and Events in Natural Language. In-
formation Processing & Management, 49(1):179?197.
L. Padro? and E. Stanilovsky. 2012. Freeling 3.0: Towards wider
multilinguality. In Proceedings of the Language Resources
and Evaluation Conference (LREC 2012), Istanbul, Turkey,
May. ELRA.
R. Parker, D. Graff, J. Kong, K. Chen, and K. Maeda.
2011. English Gigaword Fifth Edition. LDC catalog ref.
LDC2011T07.
J. Pustejovsky, P. Hanks, R. Saur??, A. See, R. Gaizauskas,
A. Setzer, D. Radev, B. Sundheim, D. Day, L. Ferro, et al
2003. The TimeBank corpus. In Corpus Linguistics.
J. Pustejovsky, B. Ingria, R. Saur??, J. Castano, J. Littman,
R. Gaizauskas, A. Setzer, G. Katz, and I. Mani. 2005. The
specification language TimeML. The Language of Time: A
reader, pages 545?557.
R. Saur?? and T. Badia. 2012. Spanish TimeBank 1.0. LDC
catalog ref. LDC2012T12.
R. Saur??, J. Littman, B. Knippen, R. Gaizauskas, A. Setzer, and
J. Pustejovsky. 2006. TimeML Annotation Guidelines Ver-
sion 1.2.1.
M. Taule?, M. A. Mart?, and M. Recasens. 2008. Ancora: Mul-
tilevel annotated corpora for catalan and spanish. In Pro-
ceedings of the 6th International Conference on Language
Resources and Evaluation (LREC-2008).
N. UzZaman and J. Allen. 2010. TRIPS and TRIOS system for
TempEval-2: Extracting temporal information from text. In
Proceedings of the 5th International Workshop on Semantic
Evaluation, pages 276?283. Association for Computational
Linguistics.
N. UzZaman and J. Allen. 2011. Temporal Evaluation. In Pro-
ceedings of The 49th Annual Meeting of the Association for
Computational Linguistics: Human Language Technologies.
N. UzZaman, H. Llorens, and J. Allen. 2012a. Evaluating tem-
poral information understanding with temporal question an-
swering. In Proceedings of IEEE International Conference
on Semantic Computing.
N. UzZaman, H. Llorens, J. F. Allen, L. Derczynski, M. Ver-
hagen, and J. Pustejovsky. 2012b. TempEval-3: Evaluating
Events, Time Expressions, and Temporal Relations. CoRR,
abs/1206.5333.
N. UzZaman. 2012. Interpreting the Temporal Aspects of Lan-
guage. Ph.D. thesis, University of Rochester, Rochester, NY.
M. Verhagen, R. Gaizauskas, F. Schilder, M. Hepple,
J. Moszkowicz, and J. Pustejovsky. 2009. The TempEval
challenge: identifying temporal relations in text. Language
Resources and Evaluation, 43(2):161?179.
M. Verhagen, R. Saur??, T. Caselli, and J. Pustejovsky. 2010.
SemEval-2010 task 13: TempEval-2. In Proceedings of the
5th International Workshop on Semantic Evaluation, pages
57?62. Association for Computational Linguistics.
9
