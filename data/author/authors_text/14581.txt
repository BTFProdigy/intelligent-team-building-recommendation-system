Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural
Language Learning, pages 512?522, Jeju Island, Korea, 12?14 July 2012. c?2012 Association for Computational Linguistics
Translation Model Based Cross-Lingual Language Model Adaptation: from
Word Models to Phrase Models
Shixiang Lu, Wei Wei, Xiaoyin Fu, and Bo Xu
Interactive Digital Media Technology Research Center
Institute of Automation, Chinese Academy of Sciences
95 Zhongguancun East Road, Haidian District, Beijing 100190, China
{shixiang.lu,wei.wei.media,xiaoyin.fu,xubo}@ia.ac.cn
Abstract
In this paper, we propose a novel translation
model (TM) based cross-lingual data selec-
tion model for language model (LM) adapta-
tion in statistical machine translation (SMT),
from word models to phrase models. Given
a source sentence in the translation task, this
model directly estimates the probability that
a sentence in the target LM training corpus
is similar. Compared with the traditional ap-
proaches which utilize the first pass translation
hypotheses, cross-lingual data selection mod-
el avoids the problem of noisy proliferation.
Furthermore, phrase TM based cross-lingual
data selection model is more effective than
the traditional approaches based on bag-of-
words models and word-based TM, because
it captures contextual information in model-
ing the selection of phrase as a whole. Ex-
periments conducted on large-scale data set-
s demonstrate that our approach significantly
outperforms the state-of-the-art approaches on
both LM perplexity and SMT performance.
1 Introduction
Language model (LM) plays a critical role in sta-
tistical machine translation (SMT). It seems to be
a universal truth that LM performance can always
be improved by using more training data (Brants et
al., 2007), but only if the training data is reason-
ably well-matched with the desired output (Moore
and Lewis, 2010). It is also obvious that among the
large training data the topics or domains of discus-
sion will change (Eck et al2004), which causes the
mismatch problems with the translation task. For
this reason, most researchers preferred to select sim-
ilar training data from the large training corpus in the
past few years (Eck et al2004; Zhao et al2004;
Kim, 2005; Masskey and Sethy, 2010; Axelrod et
al., 2011). This would empirically provide more ac-
curate lexical probabilities, and thus better match the
translation task at hand (Axelrod et al2011).
Many previous data selection approaches for LM
adaptation in SMT depend on the first pass transla-
tion hypotheses (Eck et al2004; Zhao et al2004;
Kim, 2005; Masskey and Sethy, 2010), they selec-
t the sentences which are similar to the translation
hypotheses. These schemes are overall limited by
the quality of the translation hypotheses (Tam et al
2007 and 2008), and better initial translation hy-
potheses lead to better selected sentences (Zhao et
al., 2004). However, while SMT has achieved a
great deal of development in recent years, the trans-
lation hypotheses are still far from perfect (Wei and
Pal, 2010), which have many noisy data. The noisy
translation hypotheses mislead data selection pro-
cess (Xu et al2001; Tam et al2006 and 2007;
Wei and Pal, 2010), and thus take noisy data into the
selected training data, which causes noisy prolifera-
tion and degrades the performance of adapted LM.
Furthermore, traditional approaches for LM adap-
tation are based on bag-of-words models and con-
sidered to be context independent, despite of their
state-of-the-art performance, such as TF-IDF (Eck et
al., 2004; Zhao et al2004; Hildebrand et al2005;
Kim, 2005; Foster and Kuhn, 2007), centroid simi-
larity (Masskey and Sethy, 2010), and cross-lingual
similarity (CLS) (Ananthakrishnan et al2011a).
They all perform at the word level, exact only ter-
512
m matching schemes, and do not take into account
any contextual information when modeling the se-
lection by single words in isolation, which degrade
the quality of selected sentences.
In this paper, we argue that it is beneficial to mod-
el the data selection based on the source transla-
tion task directly and capture the contextual infor-
mation for LM adaptation. To this end, we propose
a more principled translation model (TM) based
cross-lingual data selection model for LM adapta-
tion, from word models to phrase models. We as-
sume that the data selection should be performed
by the cross-lingual model and at the phrase lev-
el. Given a source sentence in the translation task,
this model directly estimates the probability before
translation that a sentence in the target LM train-
ing corpus is similar. Therefore, it does not require
the translation task to be pre-translation as in mono-
lingual adaptation, and can address the problem of
noisy proliferation.
To the best of our knowledge, this is the first
extensive and empirical study of using phrase T-
M based cross-lingual data selection for LM adap-
tation. This model learns the transform probabili-
ty of a multi-term phrase in a source sentence giv-
en a phrase in the target sentence of LM training
corpus. Compared with bag-of-words models and
word-based TM that account for selecting single
words in isolation, this model performs at the phrase
level and captures some contextual information in
modeling the selection of phrase as a whole, thus it
is potentially more effective. More precise data se-
lection can be determined for phrases than for word-
s. In this model, we propose a linear ranking model
framework to further improve the performance, re-
ferred to the linear discriminant function (Duda et
al., 2001; Collins, 2002; Gao et al2005) in pattern
classification and information retrieval (IR), where
different models are incorporated as features, as we
will show in our experiments.
Unlike the general TM in SMT, we explore the
use of TextRank algorithm (Mihalcea et al2004)
to identify and eliminate unimportant words (e.g.,
non-topical words, common words) for corpus pre-
processing, and construct TM by important words.
This reduces the average number of words in cross-
lingual data selection model, thus improving the ef-
ficiency. Moreover, TextRank utilizes the contex-
t information of words to assign term weights (Lee
et al2008), which makes phrase TM based cross-
lingual data selection model play its advantage of
capturing the contextual information, thus further
improving the performance.
The remainder of this paper is organized as fol-
lows. Section 2 introduces the related work of
LM adaptation. Section 3 presents the framework
of cross-lingual data selection for LM adaptation.
Section 4 describes our proposed TM based cross-
lingual data selection model: from word models to
phrase models. In section 5 we present large-scale
experiments and analyses, and followed by conclu-
sions and future work in section 6.
2 Related Work
TF-IDF and cosine similarity have been widely used
for LM adaptation (Eck et al2004; Zhao et al
2004; Hildebrand et al2005; Kim, 2005; Foster
and Kuhn, 2007). Masskey and Sethy (2010) se-
lected the auxiliary data by computing centroid sim-
ilarity score to the centroid of the in-domain data.
The main idea of these methods is to select the sen-
tences which are similar to the first pass translation
hypotheses or in-domain corpus from the large LM
training corpus, and estimate the bias LM for SMT
system to improve the translation quality.
Tam et al2007 and 2008) proposed a bilingual-
LSA model for LM adaptation. They integrated
the LSA marginal into the target generic LM using
marginal adaptation which minimizes the Kullback-
Leibler divergence between the adapted LM and the
generic LM. Ananthakrishnan et al2011a) pro-
posed CLS to bias the count and probability of cor-
responding n-gram through weighting the LM train-
ing corpus. However, these two cross-lingual ap-
proaches focus on modify LM itself, which are d-
ifferent from data selection method for LM adap-
tation. In our comparable experiments, we apply
CLS for the first time to the task of cross-lingual
data selection for LM adaptation. Due to lack of
smoothing measure for sparse vector representation
in CLS, the similarity computation is not accurate
which degrades the performance of adapted LM. To
avoid this, we add smoothing measure like TF-IDF,
called CLSs, as we will discuss in the experiments.
Snover et al2008) used a word TM based CLIR
513
system (Xu et al2001) to select a subset of tar-
get documents comparable to the source document
for adapting LM. Because of the data sparseness in
the document state and it operated at the document
level, this model selected large quantities of irrele-
vant text, which may degrade the adapted LM (Eck
et al2004; Ananthakrishnan et al2011b). In our
word TM based cross-lingual data selection model,
we operate at the sentence level and add the smooth-
ing mechanism by integrating with the background
word frequency model, and these can significantly
improve the performance. Axelrod et al2011)
proposed a bilingual cross-entropy difference to se-
lect data from parallel corpus for domain adaptation
which captures the contextual information slightly,
and outperformed monolingual cross-entropy differ-
ence (Moore and Lewis, 2010), which first shows the
advantage of bilingual data selection. However, its
performance depends on the parallel in-domain cor-
pus which is usually hard to find, and its application
is assumed to be limited.
3 Cross-Lingual Data Selection for
Language Model Adaptation
Our LM adaptation is an unsupervised similar train-
ing data selection guided by TM based cross-lingual
data selection model. For the source sentences in
the translation task, we estimate a new LM, the bias
LM, from the corresponding target LM training sen-
tences which are selected as the similar sentences.
Since the size of the selected sentences is small, the
corresponding bias LM is specific and more effec-
tive, giving high probabilities to those phrases that
occur in the desired output translations.
Following the work of (Zhao et al2004; Snover
et al2008), the generic LM Pg(wi|h) and the bias
LM Pb(wi|h) are combined using linear interpola-
tion as the adapted LM Pa(wi|h), which is shown to
improve the performance over individual model,
Pa(wi|h) = ?Pg(wi|h) + (1? ?)Pb(wi|h) (1)
where the interpolation factor ? can be simply esti-
mated using the Powell Search algorithm (Press et
al., 1992) via cross-validation.
Our work focuses on TM based cross-lingual data
selection model, from word model to phrase models,
and the quality of this model is crucial to the perfor-
mance of adapted LM.
4 Translation Model for Cross-Lingual
Data Selection (CLTM)
Let Q = q1, . . . ,qj be a source sentence in the
translation task and S = w1, . . . ,wi be a sentence
in the general target LM training corpus, thus cross-
lingual data selection model can be framed proba-
bilistically as maximizing the P (S|Q) . By Bayes?
rule,
P (S|Q) =
P (S)P (Q|S)
P (Q)
(2)
where the prior probability P (S) can be viewed as
uniform, and the P (Q) is constant across all sen-
tences. Therefore, selecting a sentence to maximize
P (S|Q) is equivalent to selecting a sentence that
maximizes P (Q|S).
4.1 Word-Based Translation Model for
Cross-Lingual Data Selection (CLWTM)
4.1.1 Cross-Lingual Sentence Selection Model
Following the work of (Xu et al2001; Snover et al
2008), CLWTM can be described as
P (Q|S) =
?
q?Q
P (q|S) (3)
P (q|S) = ?P (q|Cq)+ (1??)
?
w?S
P (q|w)P (w|S)
(4)
where ? is the interpolation weight empirically set
as a constant1, P (q|w) is the word-based TM which
is estimated by IBM Model 1 (Brown et al1993)
from the parallel corpus, P (q|Cq) and P (w|S) are
the un-smoothed background and sentence model,
respectively, estimated using maximum likelihood
estimation (MLE) as
P (q|Cq) =
freq(q, Cq)
|Cq|
(5)
P (w|S) =
freq(w, S)
|S|
(6)
where Cq refers to the translation task, freq(q, Cq)
refers to the number of times q occurs in Cq,
freq(w, S) refers to the number of times w occurs
in S, and |Cq| and |S| are the sizes of the translation
task and the current target sentence, respectively.
1As in Xu et al2001), a value of 0.3 was used for ?.
514
4.1.2 Ranking Candidate Sentences
Because of the data sparseness in the sentence state
which degrades the model, Equation (6) does not
perform well in our data selection experiments. In-
spired by the work of (Berger et al1999) in IR, we
make the following smoothing mechanism:
P (q|S) = ?P (q|Cq)+(1??)
?
w?S
P (q|w)Ps(w|S)
(7)
Ps(w|S) = ?P (w|Cs) + (1? ?)P (w|S) (8)
P (w|Cs) =
freq(w,Cs)
|Cs|
(9)
where P (w|Cs) is the un-smoothed background
model, estimated using MLE as Equation (5), Cs
refers to the LM training corpus and |Cs| refers to
its size. Here, ? is interpolation weight; notice that
letting ? = 0 in Equation (8) reduces the model to
the un-smoothed model in Equation (4).
4.2 Phrase-Based Translation Model for
Cross-Lingual Data Selection (CLPTM)
4.2.1 Cross-Lingual Sentence Selection Model
The phrase-based TM (Koehn et al2003; Och and
Ney, 2004) has shown superior performance com-
pared to the word-based TM. In this paper, the
goal of phrase-based TM is to transfer S into Q.
Rather than transferring single words in isolation,
the phrase model transfers one sequence of word-
s into another sequence of words, thus incorporat-
ing contextual information. Inspired by the work
of web search (Gao et al2010) and question re-
trieval in community question answer (Q&A) (Zhou
et al2011), we assume the following generative
process: first the sentence S is broken into K non-
empty word sequences w1, . . . ,wk, then each is
transferred into a new non-empty word sequences
q1, . . . ,qk, and finally these phrases are permutat-
ed and concatenated to form the sentence Q, where
q and w denote the phrases or consecutive sequence
of words.
To formulate this generative process, let U denote
the segmentation of S into K phrases w1, . . . ,wk,
and let V denote the K phrases q1, . . . ,qk, we refer
to these (wi,qi) pairs as bi-phrases. Finally, let M
denote a permutation ofK elements representing the
final ranking step.
Next we place a probability distribution over
rewrite pairs. Let B(S,Q) denote the set of U ,
V , M triples that transfer S into Q. Here we as-
sume a uniform probability over segmentations, so
the phrase-based selection probability can be formu-
lated as
P (Q|S) ?
?
(U,V,M)?
B(S,Q)
P (V |S,U) ? P (M |S,U, V )
(10)
Then, we use the maximum approximation to the
sum:
P (Q|S) ? max
(U,V,M)?
B(S,Q)
P (V |S,U) ? P (M |S,U, V )
(11)
Although we have defined a generative model for
transferring S into Q, our goal is to calculate the
ranking score function over existing Q and S. How-
ever, this model can not be used directly for sen-
tence ranking becauseQ and S are often of different
lengths, the length of S is almost 1.5 times to that of
Q in our corpus, leaving many words in S unaligned
to any word in Q. This is another key difference be-
tween our task and SMT. As pointed out by the pre-
vious work (Berger and Lafferty, 1999; Gao et al
2010; Zhou et al2011), sentence-query selection
requires a distillation of the sentence, while selec-
tion of natural language tolerates little being thrown
away. Thus we restrict our attention to those key sen-
tence words that form the distillation of S, do not
consider the unaligned words in S, and assume that
Q is transfered only from the key sentence words.
In this paper, the key sentence words are identi-
fied via word alignment. Let A = a1 . . . aJ be the
?hidden? word alignment, which describes a map-
ping from a term position j in Q to a word position
aj in S. We assume that the positions of the key
sentence words are determined by the Viterbi align-
ment A?, which can be obtained using IBM Model 1
(Brown et al1993) as follows:
A? = argmax
A
P (Q,A|S)
= argmax
A
{
P (J |I)
J?
j=1
P (qj |waj )
}
=
[
argmax
aj
P (qj |waj )
]J
j=1
(12)
515
Given A?, when scoring a given Q/S pair, we re-
strict our attention to those U , V , M triples that are
consistent with A?, which we denote as B(S,Q, A?).
Here, consistency requires that if two words are
aligned in A?, then they must appear in the same bi-
phrase (wi,qi). Once the word alignment is fixed,
the final permutation is uniquely determined, so we
can safely discard that factor. Then Equation (11)
can be written as
P (Q|S) ? max
(U,V,M)?
B(S,Q,A?)
P (V |S,U) (13)
For the sole remaining factor P (V |S,U), we
assume that a segmented queried question V =
q1, . . . ,qk is generated from left to right by transfer-
ring each phrase w1, . . . ,wk independently, as fol-
lows:
P (V |S,U) =
K?
k=1
P (qk|wk) (14)
where P (qk|wk) is a phrase translation probability
computed from the parallel corpus, which can be es-
timated in two ways (Koehn et al2003; Och and
Ney, 2004): relative frequency and lexical weight-
ing, and has two format: phrase translation proba-
bility and lexical weight probability.
In order to find the maximum probability assign-
ment P (Q|S) efficiently, we use a dynamic pro-
gramming approach, somewhat similar to the mono-
tone decoding algorithm described in the work (Och,
2002). We consider quantity aj as the maximal
probability of the most likely sequence of phrases
in S covering the first j words in Q, therefore the
probability can be calculated using the following re-
cursion:
step (1). Initialization:
?0 = 1 (15)
step (2). Induction:
?j =
?
j?<j,q=qj?+1...qj
{
?j?P (q|wq)
}
(16)
step (3). Total:
P (Q|S) = ?J (17)
4.2.2 Ranking Candidate Sentences
However, directly using the phrase-based TM, com-
puted in Equations (15) to (17), to rank the candi-
date sentences does not perform well. Inspired by
the linear discriminant function (Duda et al2001;
Collins, 2002; Gao et al2005) in pattern classifi-
cation and IR, we therefore propose a linear rank-
ing model framework for cross-lingual data selec-
tion model in which different models are incorporat-
ed as features.
We consider the linear ranking model as follows:
Score(Q,S) = ?T ?H(Q,S)
=
N?
n=1
?nhn(Q,S) (18)
where the model has a set of N features, and each
feature is an arbitrary function that maps (Q|S) to a
real value, i.e., H(Q,S) ? R. ?n for n = 1 . . . N
is the corresponding parameters of each feature,
and we optimize these parameters using the Pow-
ell Search algorithm (Press et al1992) via cross-
validation.
The used features in the linear ranking model are
as follows:
? Phrase translation feature (PT):
hPT (Q,S,A) = logP (Q|S), where P (Q|S)
is computed using Equations (15) to (17), and
P (qk|wk) is phrase translation probability.
? Inverted phrase translation feature (IPT):
hIPT (S,Q,A) = logP (S|Q), where P (S|Q)
is computed using Equations (15) to (17), and
P (wk|qk) is inverted phrase translation proba-
bility.
? Lexical weight feature (LW): hLW (Q,S,A) =
logP (Q|S), where P (Q|S) is computed using
Equations (15) to (17), and P (qk|wk) is lexical
weight probability.
? Inverted lexical weight feature (ILW):
hILW (S,Q,A) = logP (S|Q), where
P (S|Q) is computed using Equations (15) to
(17), and P (wk|qk) is inverted lexical weight
probability.
? Unaligned word penalty feature (UWP):
hUWP (Q,S,A), which is defined as the ratio
between the number of unaligned terms and
the total number of terms in Q.
516
? Word-based translation feature (WT):
hWT (Q,S,A) = logP (Q|S), where P (Q|S)
is the word-based TM defined by Equations (3)
and (7).
4.3 Eliminating Unimportant Words (EUW)
To improve the efficiency of cross-lingual data se-
lection process, we consider the translation task, the
LM training corpus and the parallel corpus in our
task are constructed by the key words or importan-
t words, and thus construct TM by the key words
or important words, which is another key difference
between our task and SMT. We identify and elimi-
nate unimportant words, somewhat similar to Q&A
retrieval (Lee et al2008; Zhou et al2011). Thus,
the average number of words (the total word number
inQ and S) in cross-lingual sentence selection mod-
el would be minimized naturally, and the efficiency
of cross-lingual data selection would be improved.
In this paper, we adopt a variant of TextRank
algorithm (Mihalcea and Tarau, 2004), a graph-
based ranking model for key word extraction which
achieves state-of-the-art accuracy. It identifies and
eliminates unimportant words from the corpus, and
assumes that a word is unimportant if it holds a rela-
tively low significance in the corpus. Compared with
the traditional approaches, such as TF-IDF, Tex-
tRank utilizes the context information of words to
assign term weights (Lee et al2008), so it further
improves the performance of CLPTM, as we will
show in the experiments.
Following the work of (Lee et al2008), the rank-
ing algorithm proceeds as follows. First, all the
words in a given document are added as vertices in
a graph. Then edges are added between words (ver-
tices) if the words co-occur in a fixed-sized window.
The number of co-occurrences becomes the weight
of an edge. When the graph is constructed, the score
of each vertex is initialized as 1, and the PageRank
based ranking algorithm is run on the graph itera-
tively until convergence. The TextRank score Rkwi,D
of a word wi in document D at kth iteration is de-
fined as follows:
Rkwi,D = (1?d)+d?
?
?j:(i,j)?G
ei,j
?
?l:(j,l)?G ej,l
Rk?1wj ,D
(19)
where d is a damping factor usually set as a constan-
t2, and ei,j is an edge weight between wi and wj .
In our experiments, we manually set the propor-
tion to be removed as 25%, that is to say, 75% of
total words in the documents would be remained as
the important words.
5 Experiments
We measure the utility of our proposed LM adap-
tation approach in two ways: (a) comparing refer-
ence translations based perplexity of adapted LMs
with the generic LM, and (b) comparing SMT per-
formance of adapted LMs with the generic LM.
5.1 Corpus and Tasks
We conduct experiments on two Chinese-to-English
translation tasks: IWSLT-07 (dialogue domain) and
NIST-06 (news domain).
IWSLT-07. The bilingual training corpus comes
from BTEC3 and CJK4 corpus, which contain-
s 3.82K sentence pairs with 3.0M/3.1M Chi-
nese/English words. The LM training corpus is from
the English side of the parallel data (BTEC, CJK,
and CWMT20085), which consists of 1.34M sen-
tences and 15.2M English words. The test set is
IWSLT-07 test set which consists of 489 sentences,
and the development set is IWSLT-05 test set which
consists of 506 sentences.
NIST-06. The bilingual training corpus comes
from Linguistic Data Consortium (LDC)6, which
consists of 3.4M sentence pairs with 64M/70M Chi-
nese/English words. The LM training corpus is from
the English side of the parallel data as well as the
English Gigaword corpus7, which consists of 11.3M
sentences. The test set is 2006 NIST MT Evaluation
test set which consists of 1664 sentences, and the de-
velopment set is 2005 NIST MT Evaluation test set
which consists of 1084 sentences.
2As in Lee et al2008), a value of 0.85 was used for d.
3Basic Traveling Expression Corpus
4China-Japan-Korea
5The 4th China Workshop on Machine Translation
6LDC2002E18, LDC2002T01, LDC2003E07, LD-
C2003E14, LDC2003T17, LDC2004T07, LDC2004T08,
LDC2005T06, LDC2005T10, LDC2005T34, LDC2006T04,
LDC2007T09
7LDC2007T07
517
(a)IWSLT-07 (b)NIST-06
Figure 1: English reference translations based perplexity of adapted LMs vs. the size of selected training data with
different approaches on two development sets.
5.2 Perplexity Analysis
We randomly divide the development set into five
subsets and conduct 5-fold cross-validation experi-
ments. In each trial, we tune the parameter ? in E-
quation (1) and parameter ? in Equation (18) with
four of five subsets and then apply it to one re-
maining subset. The experiments reported below are
those averaged over the five trials.
We estimate the generic 4-gram LM with the en-
tire LM training corpus as the baseline. Then, we se-
lect the top-N sentences which are similar to the de-
velopment set, estimate the bias 4-gram LMs (with
n-gram cutoffs tuned as above) with these selected
sentences, and interpolate with the generic 4-gram
LM as the adapted LMs. All the LMs are estimated
by the SRILM toolkit (Stolcke, 2002). Perplexity is
a metric of LM performance, and the lower perplexi-
ty value indicates the better performance. Therefore,
we estimate the perplexity of adapted LMs accord-
ing to English reference translations.
Figure 1 shows the perplexity of adapted LMs vs.
the size of selected data. In this paper, we choose
TF-IDF as the foundation of our solution since TF-
IDF has gained the state-of-the-art performance for
LM adaptation (Eck et al2004; Hildebrand et al
2005; Kim, 2005; Foster and Kuhn, 2007). CLS
refers to the cross-lingual similarity of (Ananthakr-
ishnan et al2011a), and CLSs is our proposed im-
proved algorithm on CLS with optimization mea-
sure like TF-IDF. CLWTM(? = 0) refers to S-
nover et al2008), which is the un-smooth ver-
Task Method Perplexity Reduction
IWSLT-07
Baseline 524.1 ?
TF-IDF 471.4 10.06%
CLS 475.7 9.23%
CLSs 468.9 10.53%
CLWTM(? = 0) 463.5 11.56%
CLWTM 451.5 13.85%
CLPTM(l = 4) 435.3 16.94%
NIST-06
Baseline 398.3 ?
TF-IDF 346.2 13.08%
CLS 351.6 11.72%
CLSs 340.9 14.41%
CLWTM(? = 0) 341.1 14.36%
CLWTM 332.7 16.47%
CLPTM(l = 4) 319.2 19.86%
Table 1: English reference translations based perplexi-
ty of adapted LMs with different approaches on two test
sets, with the top 8K sentences on IWSLT-07 and top 16K
sentences on NIST-06, respectively.
sion of our proposed CLWTM in the document s-
tate. CLPTM(l = 4) is our proposed CLPTM with
a maximum phrase length of four, and we score the
target sentences by the highest scoring Q/S pair.
The results in Figure 1 indicate that English ref-
erence translations based perplexity of adapted LMs
decreases consistently with increase of the size of
selected top-N sentences, and increases consistent-
ly after a certain size in all approaches. Therefore,
proper size of similar sentences with the transla-
tion task makes the adapted LM perform well, but
if too many noisy data are taken into the selected
sentences, the performance becomes worse. Similar
observations have been done by (Eck et al2004;
518
Task # Method BLEU
IWSLT-07
1 Baseline 33.60
2 TF-IDF 34.14
3 CLS 34.08
4 CLSs 34.18
5 CLWTM(? = 0) 34.22
6 CLWTM 34.30
7 CLPTM(l = 4) 34.49
NIST-06
8 Baseline 29.15
9 TF-IDF 29.78
10 CLS 29.73
11 CLSs 29.84
12 CLWTM(? = 0) 29.87
13 CLWTM 29.93
14 CLPTM(l = 4) 30.17
Table 2: Comparison of SMT performance (p < 0.05)
with different approaches for LM adaptation on two test
sets.
Axelrod et al2011). Furthermore, it is comforting
that our approaches (CLWTM and CLPTM(l = 4))
performs better and are more stable than other ap-
proaches.
According to the perplexity results in Figure 1,
we select the top 8K sentences on IWSLT-07 and
top 16K sentences on NIST-06 which are similar to
the test set for adapting LM, respectively. Table 1
shows English reference translations based perplex-
ity of adapted LMs on two test sets. Our approach-
es have significantly reduction in perplexity com-
pared with other approaches, and the results indicate
that adapted LMs are significantly better predictors
of the corresponding translation task at hand than
the generic LM. We use these adapted LMs for next
translation experiments to show the detailed perfor-
mance of selected training data for LM adaptation.
5.3 Translation Experiments
We carry out translation experiments on the test set
by hierarchical phrase-based (HPB) SMT (Chiang,
2005 and 2007) system to demonstrate the utility of
LM adaptation on improving SMT performance by
BLEU score (Papineni et al2002). The generic LM
and adapted LMs are estimated as above in perplexi-
ty analysis experiments. We use minimum error rate
training (Och, 2003) to tune the feature weights of
HPB for maximum BLEU score on the development
set with serval groups of different start weights.
Table 2 shows the main translation results on two
Task Translation Hypotheses BLEU
IWSLT-07
First Pass 34.14
Second Pass 34.31
NIST-06
First Pass 29.78
Second Pass 29.91
Table 3: The impact of noisy data in the translation hy-
potheses on the performance of LM adaptation.
test sets, and the improvements are statistically sig-
nificant at the 95% confidence interval with respect
to the baseline. From the comparison results, we get
some clear trends:
(1) Cross-lingual data selection model outper-
forms the traditional approaches which utilize the
first pass translation hypotheses (row 4 vs. row2;
row 11 vs. row 9), but the detailed impact of noisy
data in the translation hypotheses on data selection
will be shown in the next section (section 5.4).
(2) CLWTM significantly outperforms CLSs (row
6 vs. row 4; row 13 vs. row 11), we suspect that
word-based TM makes more accurate cross-lingual
data selection model than single cross-lingual pro-
jection (Ananthakrishnan et al2011a).
(3) Compared with (Snover et al2008), adding
the smoothing mechanism in the sentence state for
CLWTM significantly improves the performance
(row 6 vs. row 5; row 13 vs. row 12).
(4) Phrase-based TM (CLPTM) significantly out-
performs the state-of-the-art approaches based on
bag-of-words models and word-based TM (row 7 vs.
row 2, row 4, row 5 and row 6; row 14 vs. row 9,
row 11, row 12 and row 13).
5.4 Impact of Noisy Data in the Translation
Hypotheses
The experiment results in Table 2 indicate the sec-
ond pass translation hypotheses (row 2 and row 9)
made by TF-IDF are better than the first pass trans-
lation hypotheses (row 1 and row 8), so we consid-
er that these translations have less noisy data. Thus,
they were considered as the new translation hypothe-
ses (the second pass) to select the similar sentences
for LM adaptation by TF-IDF.
Table 3 shows the impact of noisy data in the
translation hypotheses on the performance of adapt-
ed LMs. The observed improvement suggests that
better initial translations which have less noisy data
519
Task Phrase Length BLEU
IWSLT-07
l = 1 34.33
l = 2 34.44
l = 3 34.49
l = 4 34.49
NIST-06
l = 1 29.97
l = 2 30.07
l = 3 30.14
l = 4 30.17
Table 4: The impact of phrase length in CLPTM on the
performance of LM adaptation, and the maximum phrase
length is four.
lead to better adapted LMs, and thereby better sec-
ond iteration translations. Therefore, it is advisable
to use cross-lingual data selection for LM adaptation
in SMT, which can address the problem of noisy pro-
liferation.
5.5 Impact of Phrase Length
The results in Table 4 show that longer phrases do
yield some visible improvement up to the maximum
length of four. This may suggest that some proper-
ties captured by longer phrases are also captured by
other features. The performances when the phrase
length is 1 are better than that of single word-based
TM (row 6 and row 13 in Table 2), this suspec-
t that the features in our linear ranking model are
useful. However, it will be instructive to explore the
methods of preserving the improvement generated
by longer phrase when more features are incorporat-
ed in the future work.
5.6 Impact of Eliminating Unimportant Words
Table 5 shows the results of EUW by TextRank al-
gorithm on the performance of CLTM for LM adap-
tation. Initial represents that we do not eliminate
unimportant words. Average number represents the
average number of words (the total word number in
Q and S) in cross-lingual data selection model. The
average number is reduced when unimportant words
are eliminated, from 19 to 12 on IWSLT-07 and from
37 to 24 on NIST-06, respectively. This makes the
cross-lingual data selection process become more
efficient. In CLWTM, the performance with EUW
is basically the same with that of the initial state; but
in CLPTM, EUW outperforms the initial state be-
cause TextRank algorithm utilizes the context infor-
Task Method
Average
BLEU
Number CLWTM
CLPTM
(l = 4)
IWSLT-07
Initial 19 34.31 34.47
EUW 12 34.30 34.49
NIST-06
Initial 37 29.91 30.12
EUW 24 29.93 30.17
Table 5: The impact of eliminating unimportant words
by TextRank algorithm on the performance of CLTM for
LM adaptation.
mation of words when assigning term weights, thus
makeing CLPTM play its advantage of capturing the
contextual information.
6 Conclusions and Future Work
In this paper, we propose a novel TM based cross-
lingual data selection model for LM adaptation in
SMT, from word models to phrase models, and aims
to find the LM training corpus which are similar to
the translation task at hand. Unlike the general TM
in SMT, we explore the use of TextRank algorithm
to identify and eliminate unimportant words for cor-
pus preprocessing, and construct TM by importan-
t words. Compared with the traditional approach-
es which utilize the first pass translation hypothe-
ses, cross-lingual data selection avoids the prob-
lem of noisy proliferation. Furthermore, phrase T-
M based cross-lingual data selection is more effec-
tive than the traditional approaches based on bag-
of-words models and word-based TM, because it
captures contextual information in modeling the s-
election of phrase as a whole. Large-scale exper-
iments are conducted on LM perplexity and SMT
performance, and the results demonstrate that our
approach solves the two aforementioned disadvan-
tages and significantly outperforms the state-of-the-
art methods for LM adaptation.
There are some ways in which this research could
be continued in the future. First, we will utilize our
approach to mine large-scale corpora by distributed
infrastructure system, and investigate the use of our
approach for other domains, such as speech transla-
tion system. Second, the significant improvement of
LM adaptation based on cross-lingual data selection
is exciting, so it will be instructive to explore oth-
er knowledge based cross-lingual data selection for
LM adaptation, such as latent semantic model.
520
Acknowledgments
This work was supported by 863 program in China
(No. 2011AA01A207). We thank Guangyou Zhou
for his helpful discussions and suggestions. We also
thank the anonymous reviewers for their insightful
comments.
References
Sankaranarayanan Ananthakrishnan, Rohit Prasad, and
Prem Natarajan. 2011a. On-line language model bias-
ing for statistical machine translation. In Proceedings
of ACL, pages 445-449.
Sankaranarayanan Ananthakrishnan, Stavros Tsakalidis,
Rohit Prasad, and Prem Natarajan. 2011b. On-
line language model biasing for multi-pass automat-
ic speech recognition. In Proceedings of INTER-
SPEECH, pages 621-624.
Amittai Axelrod, Xiaodong He, and Jianfeng Gao. 2011.
Domain adaptation via pseudo in-domain data selec-
tion. In Proceedings of EMNLP, pages 355-362.
Adam Berger and John Lafferty. 1999. Information re-
trieval as statistical translation. In Proceedings of SI-
GIR, pages 222-229.
Thorsten Brants, Ashok C. Popat, Peng Xu, Franz J. Och,
and Jeffrey Dean. 2007. Large language models in
machine translation. In Proceedings of EMNLP, pages
858-867.
Peter F. Brown, Vincent J. Della Pietra, Stephen A. Della
Pietra, and Robert L. Mercer. 1993. The mathematic-
s of statistical machine translation: parameter estima-
tion. Computational Linguistics, 19(2):263-311.
David Chiang. 2005. A hierarchical phrase-based model
for statistical machine translation. In Proceedings of
ACL, pages 263-270.
David Chiang. 2007. Hierarchical phrase-based transla-
tion. Computational Linguistics, 33(2):201-228.
Michael Collins. 2002. Discriminative training meth-
ods for hidden markov models: theory and experi-
ments with the perceptron algorithm. In Proceedings
of EMNLP, pages 1-8.
Richard O. Duda, Peter E. Hart, and David G. Stork.
2001. Pattern classification. John Wiley & Sons, Inc.
Matthias Eck, Stephan Vogel, and Alex Waibel. 2004.
Language model adaptation for statistical machine
translation based on information retrieval. In Proceed-
ings of LREC, pages 327-330.
George Foster and Roland Kuhn. 2007. Mixture-model
adaptation for SMT. In Proceedings of ACL, pages
128-135.
Jianfeng Gao, Haoliang Qi, Xinsong Xia, and Jian-Yun
Nie. 2005. Linear discriminative model for informa-
tion retrieval. In Proceedings of SIGIR, pages 290-
297.
Jianfeng Gao, Xiaodong He, and Jian-Yun Nie. 2010.
Clickthrough-based translation models for web search:
from word models to phrase models. In Proceedings
of CIKM, pages 1139-1148.
Almut Silja Hildebrand, Matthias Eck, Stephan Vogel,
and Alex Waibel. 2005. Adaptation of the transla-
tion model for statistical machine translation based in-
formation retrieval. In Proceedings of EAMT, pages
133-142.
Woosung Kim. 2005. Language model adaptation for
automatic speech recognition and statistical machine
translation. Ph.D. thesis, The Johns Hopkins Univer-
sity.
Philipp Koehn, Franz Josef Och, and Daniel Marcu.
2003. Statistical phrase-based translation. In Proceed-
ings of NAACL, pages 48-54.
Jung-Tae Lee, Sang-Bum Kim, Young-In Song, and Hae-
Chang Rim. 2008. Bridging lexical gaps between
queries and questions on large online Q&A collection-
s with compact translation models. In Proceedings of
EMNLP, pages 410-418.
Sameer Masskey and Abhinav Sethy. 2010. Resampling
auxiliary data for language model adaptation in ma-
chine translation for speech. In Proceedings of ICAS-
SP, pages 4817-4820.
Rada Mihalcea and Paul Tarau. 2004. TextRank: Bring-
ing order into text. In Proceedings of EMNLP, pages
404-411.
Robert C. Moore and William Lewis. 2010. Intelligent
selection of language model training data. In Proceed-
ings of ACL, pages 220-224.
Franz Josef Och. 2002. Statistical mahcine transla-
tion: from single word models to alignment templates.
Ph.D thesis, RWTH Aachen.
Franz Josef Och. 2003. Minimum error rate training in
statistical machine translation. In Proceedings of ACL,
pages 160-167.
Franz Josef Och and Hermann Ney. 2004. The alignmen-
t template approach to statistical machine translation.
Computational Linguistics, 30(4):417-449.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
jing Zhu. 2002. BLEU: A method for automatic eval-
uation of machine translation. In Proceedings of ACL,
pages 311-318.
William H. Press, Saul A. Teukolsky, William T. Vetter-
ling, and Brian P. Flannery. 1992. Numerical Recipes
in C. Cambridge University Press.
521
Matthew Snover, Bonnie Dorr, and Richard Marcu.
2008. Language and translation model adaptation us-
ing comparable corpora. In Proceedings of EMNLP,
pages 857-866.
Andreas Stolcke. 2002. SRILM - An extensible lan-
guage modeling toolkit. In Proceedings of ICSLP,
pages 901-904.
Yik-Cheung Tam and Tanja Schultz. 2006. Unsuper-
vised language model adaptation using latent seman-
tic marginals. In Proceedings of ICSLP, pages 2206-
2209.
Yik-Cheung Tam, Ian Lane, and Tanja Schultz. 2007.
Bilingual-LSA based LM adaptation for spoken lan-
guage translation. In Proceedings of ACL, pages 520-
527.
Yik-Cheung Tam, Ian Lane, and Tanja Schultz. 2008.
Bilingual-LSA based adaptation for statistical machine
translation. Machine Translation, 21:187-207.
Bin Wei and Christopher Pal. 2010. Cross lingual adap-
tation: an experiment on sentiment classifications. In
Proceedings of ACL, pages 258-262.
Jinxi Xu, Ralpha Weischedel, and Chanh Nguyen. 2001.
Evaluating a probabilistic model for cross-lingual in-
formation retrieval. In Proceedings of SIGIR, pages
105-110.
Xiaobing Xue, Jiwoon Jeon, and W. Bruce Croft. 2008.
Retrieval models for question and answer archives. In
Proceedings of SIGIR, pages 475-482.
Bing Zhao, Matthias Eck, and Stephan Vogel. 2004.
Language model adaptation for statistical machine
translation with structured query models. In Proceed-
ings of COLING, pages 411-417.
Guangyou Zhou, Li Cai, Jun Zhao, and Kang Liu. 2011.
Phrase-based translation model for question retrieval
in community question answer archives. In Proceed-
ings of ACL, pages 653-662.
522
Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 404?413,
Uppsala, Sweden, 11-16 July 2010. c?2010 Association for Computational Linguistics
Sentiment Learning on Product Reviews via Sentiment Ontology Tree
Wei Wei
Department of Computer and
Information Science
Norwegian University of Science
and Technology
wwei@idi.ntnu.no
Jon Atle Gulla
Department of Computer and
Information Science
Norwegian University of Science
and Technology
jag@idi.ntnu.no
Abstract
Existing works on sentiment analysis on
product reviews suffer from the following
limitations: (1) The knowledge of hierar-
chical relationships of products attributes
is not fully utilized. (2) Reviews or sen-
tences mentioning several attributes asso-
ciated with complicated sentiments are not
dealt with very well. In this paper, we pro-
pose a novel HL-SOT approach to label-
ing a product?s attributes and their asso-
ciated sentiments in product reviews by a
Hierarchical Learning (HL) process with a
defined Sentiment Ontology Tree (SOT).
The empirical analysis against a human-
labeled data set demonstrates promising
and reasonable performance of the pro-
posed HL-SOT approach. While this pa-
per is mainly on sentiment analysis on re-
views of one product, our proposed HL-
SOT approach is easily generalized to la-
beling a mix of reviews of more than one
products.
1 Introduction
As the internet reaches almost every corner of this
world, more and more people write reviews and
share opinions on the World Wide Web. The user-
generated opinion-rich reviews will not only help
other users make better judgements but they are
also useful resources for manufacturers of prod-
ucts to keep track and manage customer opinions.
However, as the number of product reviews grows,
it becomes difficult for a user to manually learn
the panorama of an interesting topic from existing
online information. Faced with this problem, re-
search works, e.g., (Hu and Liu, 2004; Liu et al,
2005; Lu et al, 2009), of sentiment analysis on
product reviews were proposed and have become
a popular research topic at the crossroads of infor-
mation retrieval and computational linguistics.
Carrying out sentiment analysis on product re-
views is not a trivial task. Although there have al-
ready been a lot of publications investigating on
similar issues, among which the representatives
are (Turney, 2002; Dave et al, 2003; Hu and Liu,
2004; Liu et al, 2005; Popescu and Etzioni, 2005;
Zhuang et al, 2006; Lu and Zhai, 2008; Titov and
McDonald, 2008; Zhou and Chaovalit, 2008; Lu et
al., 2009), there is still room for improvement on
tackling this problem. When we look into the de-
tails of each example of product reviews, we find
that there are some intrinsic properties that exist-
ing previous works have not addressed in much de-
tail.
First of all, product reviews constitute domain-
specific knowledge. The product?s attributes men-
tioned in reviews might have some relationships
between each other. For example, for a digital
camera, comments on image quality are usually
mentioned. However, a sentence like ?40D han-
dles noise very well up to ISO 800?, also refers
to image quality of the camera 40D. Here we say
?noise? is a sub-attribute factor of ?image quality?.
We argue that the hierarchical relationship be-
tween a product?s attributes can be useful knowl-
edge if it can be formulated and utilized in product
reviews analysis. Secondly, Vocabularies used in
product reviews tend to be highly overlapping. Es-
pecially, for same attribute, usually same words or
synonyms are involved to refer to them and to de-
scribe sentiment on them. We believe that labeling
existing product reviews with attributes and cor-
responding sentiment forms an effective training
resource to perform sentiment analysis. Thirdly,
sentiments expressed in a review or even in a
sentence might be opposite on different attributes
and not every attributes mentioned are with senti-
ments. For example, it is common to find a frag-
ment of a review as follows:
Example 1: ?...I am very impressed with this cam-
era except for its a bit heavy weight especially with
404
camera +
camera
design and usability image quality lens camera -
design and usability + weight interface design and usability - image quality + noise resolution image quality - lens + lens -
weight + weight - interface + menu button interface -
menu + menu - button + button -
noise + noise - resolution + resolution -
Figure 1: an example of part of a SOT for digital camera
extra lenses attached. It has many buttons and two
main dials. The first dial is thumb dial, located
near shutter button. The second one is the big
round dial located at the back of the camera...?
In this example, the first sentence gives positive
comment on the camera as well as a complaint on
its heavy weight. Even if the words ?lenses? ap-
pears in the review, it is not fair to say the cus-
tomer expresses any sentiment on lens. The sec-
ond sentence and the rest introduce the camera?s
buttons and dials. It?s also not feasible to try to
get any sentiment from these contents. We ar-
gue that when performing sentiment analysis on
reviews, such as in the Example 1, more attention
is needed to distinguish between attributes that are
mentioned with and without sentiment.
In this paper, we study the problem of senti-
ment analysis on product reviews through a novel
method, called the HL-SOT approach, namely Hi-
erarchical Learning (HL) with Sentiment Ontol-
ogy Tree (SOT). By sentiment analysis on prod-
uct reviews we aim to fulfill two tasks, i.e., label-
ing a target text1 with: 1) the product?s attributes
(attributes identification task), and 2) their corre-
sponding sentiments mentioned therein (sentiment
annotation task). The result of this kind of label-
ing process is quite useful because it makes it pos-
sible for a user to search reviews on particular at-
tributes of a product. For example, when consider-
ing to buy a digital camera, a prospective user who
cares more about image quality probably wants to
find comments on the camera?s image quality in
other users? reviews. SOT is a tree-like ontology
structure that formulates the relationships between
a product?s attributes. For example, Fig. 1 is a SOT
for a digital camera2. The root node of the SOT is
1Each product review to be analyzed is called target text
in the following of this paper.
2Due to the space limitation, not all attributes of a digi-
tal camera are enumerated in this SOT; m+/m- means posi-
a camera itself. Each of the non-leaf nodes (white
nodes) of the SOT represents an attribute of a cam-
era3. All leaf nodes (gray nodes) of the SOT rep-
resent sentiment (positive/negative) nodes respec-
tively associated with their parent nodes. A for-
mal definition on SOT is presented in Section 3.1.
With the proposed concept of SOT, we manage to
formulate the two tasks of the sentiment analysis
to be a hierarchical classification problem. We fur-
ther propose a specific hierarchical learning algo-
rithm, called HL-SOT algorithm, which is devel-
oped based on generalizing an online-learning al-
gorithm H-RLS (Cesa-Bianchi et al, 2006). The
HL-SOT algorithm has the same property as the
H-RLS algorithm that allows multiple-path label-
ing (input target text can be labeled with nodes be-
longing to more than one path in the SOT) and
partial-path labeling (the input target text can be
labeled with nodes belonging to a path that does
not end on a leaf). This property makes the ap-
proach well suited for the situation where com-
plicated sentiments on different attributes are ex-
pressed in one target text. Unlike the H-RLS algo-
rithm , the HL-SOT algorithm enables each clas-
sifier to separately learn its own specific thresh-
old. The proposed HL-SOT approach is empiri-
cally analyzed against a human-labeled data set.
The experimental results demonstrate promising
and reasonable performance of our approach.
This paper makes the following contributions:
? To the best of our knowledge, with the pro-
posed concept of SOT, the proposed HL-SOT
approach is the first work to formulate the
tasks of sentiment analysis to be a hierarchi-
cal classification problem.
? A specific hierarchical learning algorithm is
tive/negative sentiment associated with an attribute m.
3A product itself can be treated as an overall attribute of
the product.
405
further proposed to achieve tasks of senti-
ment analysis in one hierarchical classifica-
tion process.
? The proposed HL-SOT approach can be gen-
eralized to make it possible to perform senti-
ment analysis on target texts that are a mix of
reviews of different products, whereas exist-
ing works mainly focus on analyzing reviews
of only one type of product.
The remainder of the paper is organized as fol-
lows. In Section 2, we provide an overview of
related work on sentiment analysis. Section 3
presents our work on sentiment analysis with HL-
SOT approach. The empirical analysis and the re-
sults are presented in Section 4, followed by the
conclusions, discussions, and future work in Sec-
tion 5.
2 Related Work
The task of sentiment analysis on product reviews
was originally performed to extract overall senti-
ment from the target texts. However, in (Turney,
2002), as the difficulty shown in the experiments,
the whole sentiment of a document is not neces-
sarily the sum of its parts. Then there came up
with research works shifting focus from overall
document sentiment to sentiment analysis based
on product attributes (Hu and Liu, 2004; Popescu
and Etzioni, 2005; Ding and Liu, 2007; Liu et al,
2005).
Document overall sentiment analysis is to sum-
marize the overall sentiment in the document. Re-
search works related to document overall senti-
ment analysis mainly rely on two finer levels senti-
ment annotation: word-level sentiment annotation
and phrase-level sentiment annotation. The word-
level sentiment annotation is to utilize the polar-
ity annotation of words in each sentence and sum-
marize the overall sentiment of each sentiment-
bearing word to infer the overall sentiment within
the text (Hatzivassiloglou and Wiebe, 2000; An-
dreevskaia and Bergler, 2006; Esuli and Sebas-
tiani, 2005; Esuli and Sebastiani, 2006; Hatzi-
vassiloglou and McKeown, 1997; Kamps et al,
2004; Devitt and Ahmad, 2007; Yu and Hatzivas-
siloglou, 2003). The phrase-level sentiment anno-
tation focuses sentiment annotation on phrases not
words with concerning that atomic units of expres-
sion is not individual words but rather appraisal
groups (Whitelaw et al, 2005). In (Wilson et al,
2005), the concepts of prior polarity and contex-
tual polarity were proposed. This paper presented
a system that is able to automatically identify the
contextual polarity for a large subset of sentiment
expressions. In (Turney, 2002), an unsupervised
learning algorithm was proposed to classify re-
views as recommended or not recommended by
averaging sentiment annotation of phrases in re-
views that contain adjectives or adverbs. How-
ever, the performances of these works are not good
enough for sentiment analysis on product reviews,
where sentiment on each attribute of a product
could be so complicated that it is unable to be ex-
pressed by overall document sentiment.
Attributes-based sentiment analysis is to ana-
lyze sentiment based on each attribute of a prod-
uct. In (Hu and Liu, 2004), mining product fea-
tures was proposed together with sentiment polar-
ity annotation for each opinion sentence. In that
work, sentiment analysis was performed on prod-
uct attributes level. In (Liu et al, 2005), a system
with framework for analyzing and comparing con-
sumer opinions of competing products was pro-
posed. The system made users be able to clearly
see the strengths and weaknesses of each prod-
uct in the minds of consumers in terms of various
product features. In (Popescu and Etzioni, 2005),
Popescu and Etzioni not only analyzed polarity
of opinions regarding product features but also
ranked opinions based on their strength. In (Liu
et al, 2007), Liu et al proposed Sentiment-PLSA
that analyzed blog entries and viewed them as a
document generated by a number of hidden sen-
timent factors. These sentiment factors may also
be factors based on product attributes. In (Lu and
Zhai, 2008), Lu et al proposed a semi-supervised
topic models to solve the problem of opinion inte-
gration based on the topic of a product?s attributes.
The work in (Titov and McDonald, 2008) pre-
sented a multi-grain topic model for extracting the
ratable attributes from product reviews. In (Lu et
al., 2009), the problem of rated attributes summary
was studied with a goal of generating ratings for
major aspects so that a user could gain different
perspectives towards a target entity. All these re-
search works concentrated on attribute-based sen-
timent analysis. However, the main difference
with our work is that they did not sufficiently uti-
lize the hierarchical relationships among a prod-
uct attributes. Although a method of ontology-
supported polarity mining, which also involved
406
ontology to tackle the sentiment analysis problem,
was proposed in (Zhou and Chaovalit, 2008), that
work studied polarity mining by machine learn-
ing techniques that still suffered from a problem
of ignoring dependencies among attributes within
an ontology?s hierarchy. In the contrast, our work
solves the sentiment analysis problem as a hierar-
chical classification problem that fully utilizes the
hierarchy of the SOT during training and classifi-
cation process.
3 The HL-SOT Approach
In this section, we first propose a formal defini-
tion on SOT. Then we formulate the HL-SOT ap-
proach. In this novel approach, tasks of sentiment
analysis are to be achieved in a hierarchical classi-
fication process.
3.1 Sentiment Ontology Tree
As we discussed in Section 1, the hierarchial rela-
tionships among a product?s attributes might help
improve the performance of attribute-based senti-
ment analysis. We propose to use a tree-like ontol-
ogy structure SOT, i.e., Sentiment Ontology Tree,
to formulate relationships among a product?s at-
tributes. Here,we give a formal definition on what
a SOT is.
Definition 1 [SOT] SOT is an abbreviation for
Sentiment Ontology Tree that is a tree-like ontol-
ogy structure T (v, v+, v?,T). v is the root node
of T which represents an attribute of a given prod-
uct. v+ is a positive sentiment leaf node associ-
ated with the attribute v. v? is a negative sen-
timent leaf node associated with the attribute v.
T is a set of subtrees. Each element of T is also
a SOT T ?(v?, v?+, v??,T?) which represents a sub-
attribute of its parent attribute node.
By the Definition 1, we define a root of a SOT to
represent an attribute of a product. The SOT?s two
leaf child nodes are sentiment (positive/negative)
nodes associated with the root attribute. The SOT
recursively contains a set of sub-SOTs where each
root of a sub-SOT is a non-leaf child node of the
root of the SOT and represent a sub-attribute be-
longing to its parent attribute. This definition suc-
cessfully describes the hierarchical relationships
among all the attributes of a product. For example,
in Fig. 1 the root node of the SOT for a digital cam-
era is its general overview attribute. Comments on
a digital camera?s general overview attribute ap-
pearing in a review might be like ?this camera is
great?. The ?camera? SOT has two sentiment leaf
child nodes as well as three non-leaf child nodes
which are respectively root nodes of sub-SOTs for
sub-attributes ?design and usability?, ?image qual-
ity?, and ?lens?. These sub-attributes SOTs re-
cursively repeat until each node in the SOT does
not have any more non-leaf child node, which
means the corresponding attributes do not have
any sub-attributes, e.g., the attribute node ?button?
in Fig. 1.
3.2 Sentiment Analysis with SOT
In this subsection, we present the HL-SOT ap-
proach. With the defined SOT, the problem of sen-
timent analysis is able to be formulated to be a hi-
erarchial classification problem. Then a specific
hierarchical learning algorithm is further proposed
to solve the formulated problem.
3.2.1 Problem Formulation
In the proposed HL-SOT approach, each target
text is to be indexed by a unit-norm vector x ?
X ,X = Rd. Let Y = {1, ..., N} denote the fi-
nite set of nodes in SOT. Let y = {y1, ..., yN} ?
{0, 1}N be a label vector to a target text x, where
?i ? Y :
yi =
{
1, if x is labeled by the classifier of node i,
0, if x is not labeled by the classifier of node i.
A label vector y ? {0, 1}N is said to respect
SOT if and only if y satisfies ?i ? Y , ?j ?
A(i) : if yi = 1 then yj = 1, where A(i)
represents a set ancestor nodes of i, i.e.,A(i) =
{x|ancestor(i, x)}. Let Y denote a set of label
vectors that respect SOT. Then the tasks of senti-
ment analysis can be formulated to be the goal of a
hierarchical classification that is to learn a function
f : X ? Y , that is able to label each target text
x ? X with classifier of each node and generating
with x a label vector y ? Y that respects SOT. The
requirement of a generated label vector y ? Y en-
sures that a target text is to be labeled with a node
only if its parent attribute node is labeled with the
target text. For example, in Fig. 1 a review is to
be labeled with ?image quality +? requires that the
review should be successively labeled as related to
?camera? and ?image quality?. This is reasonable
and consistent with intuition, because if a review
cannot be identified to be related to a camera, it is
not safe to infer that the review is commenting a
camera?s image quality with positive sentiment.
407
3.2.2 HL-SOT Algorithm
The algorithm H-RLS studied in (Cesa-Bianchi et
al., 2006) solved a similar hierarchical classifica-
tion problem as we formulated above. However,
the H-RLS algorithm was designed as an online-
learning algorithm which is not suitable to be ap-
plied directly in our problem setting. Moreover,
the algorithm H-RLS defined the same value as
the threshold of each node classifier. We argue
that if the threshold values could be learned sepa-
rately for each classifiers, the performance of clas-
sification process would be improved. Therefore
we propose a specific hierarchical learning algo-
rithm, named HL-SOT algorithm, that is able to
train each node classifier in a batch-learning set-
ting and allows separately learning for the thresh-
old of each node classifier.
Defining the f function Let w1, ..., wN be
weight vectors that define linear-threshold classi-
fiers of each node in SOT. LetW = (w1, ..., wN )?
be an N ?d matrix called weight matrix. Here we
generalize the work in (Cesa-Bianchi et al, 2006)
and define the hierarchical classification function
f as:
y? = f(x) = g(W ? x),
where x ? X , y? ? Y . Let z = W ? x. Then the
function y? = g(z) on an N -dimensional vector z
defines:
?i = 1, ..., N :
y?i =
?
?
?
?
?
B(zi ? ?i), if i is a root node in SOT
or yj = 1 for j = P(i),
0, else
where P(i) is the parent node of i in SOT and
B(S) is a boolean function which is 1 if and only
if the statement S is true. Then the hierarchical
classification function f is parameterized by the
weight matrix W = (w1, ..., wN )? and threshold
vector ? = (?1, ..., ?N )?. The hierarchical learn-
ing algorithm HL-SOT is proposed for learning
the parameters of W and ?.
Parameters Learning for f function Let D de-
note the training data set: D = {(r, l)|r ? X , l ?
Y}. In the HL-SOT learning process, the weight
matrix W is firstly initialized to be a 0 matrix,
where each row vectorwi is a 0 vector. The thresh-
old vector is initialized to be a 0 vector. Each in-
stance in the training set D goes into the training
process. When a new instance rt is observed, each
row vector wi,t of the weight matrix Wt is updated
by a regularized least squares estimator given by:
wi,t = (I + Si,Q(i,t?1)S?i,Q(i,t?1) + rtr
?
t )?1
?Si,Q(i,t?1)(li,i1 , li,i2 , ..., li,iQ(i,t?1))
?
(1)
where I is a d ? d identity matrix, Q(i, t ? 1)
denotes the number of times the parent of node i
observes a positive label before observing the in-
stance rt, Si,Q(i,t?1) = [ri1 , ..., riQ(i,t?1) ] is a d ?
Q(i, t?1) matrix whose columns are the instances
ri1 , ..., riQ(i,t?1) , and (li,i1 , li,i2 , ..., li,iQ(i,t?1))? is
aQ(i, t?1)-dimensional vector of the correspond-
ing labels observed by node i. The Formula 1 re-
stricts that the weight vector wi,t of the classifier i
is only updated on the examples that are positive
for its parent node. Then the label vector y?rt is
computed for the instance rt, before the real label
vector lrt is observed. Then the current threshold
vector ?t is updated by:
?t+1 = ?t + ?(y?rt ? lrt), (2)
where ? is a small positive real number that de-
notes a corrective step for correcting the current
threshold vector ?t. To illustrate the idea behind
the Formula 2, let y?t = y?rt ? lrt . Let y?i,t denote
an element of the vector y?t. The Formula 2 correct
the current threshold ?i,t for the classifier i in the
following way:
? If y?i,t = 0, it means the classifier i made a
proper classification for the current instance
rt. Then the current threshold ?i does not
need to be adjusted.
? If y?i,t = 1, it means the classifier i made an
improper classification by mistakenly identi-
fying the attribute i of the training instance
rt that should have not been identified. This
indicates the value of ?i is not big enough to
serve as a threshold so that the attribute i in
this case can be filtered out by the classifier
i. Therefore, the current threshold ?i will be
adjusted to be larger by ?.
? If y?i,t = ?1, it means the classifier i made an
improper classification by failing to identify
the attribute i of the training instance rt that
should have been identified. This indicates
the value of ?i is not small enough to serve as
a threshold so that the attribute i in this case
408
Algorithm 1 Hierarchical Learning Algorithm HL-SOT
INITIALIZATION:
1: Each vector wi,1, i = 1, ..., N of weight ma-
trix W1 is set to be 0 vector
2: Threshold vector ?1 is set to be 0 vector
BEGIN
3: for t = 1, ..., |D| do
4: Observe instance rt ? X
5: for i = 1, ...N do
6: Update each row wi,t of weight matrix
Wt by Formula 1
7: end for
8: Compute y?rt = f(rt) = g(Wt ? rt)
9: Observe label vector lrt ? Y of the in-
stance rt
10: Update threshold vector ?t by Formula 2
11: end for
END
can be recognized by the classifier i. There-
fore, the current threshold ?i will be adjusted
to be smaller by ?.
The hierarchial learning algorithm HL-SOT is
presented as in Algorithm 1. The HL-SOT al-
gorithm enables each classifier to have its own
specific threshold value and allows this thresh-
old value can be separately learned and corrected
through the training process. It is not only a batch-
learning setting of the H-RLS algorithm but also
a generalization to the latter. If we set the algo-
rithm HL-SOT?s parameter ? to be 0, the HL-SOT
becomes the H-RLS algorithm in a batch-learning
setting.
4 Empirical Analysis
In this section, we conduct systematic experiments
to perform empirical analysis on our proposed HL-
SOT approach against a human-labeled data set.
In order to encode each text in the data set by a
d-dimensional vector x ? Rd, we first remove all
the stop words and then select the top d frequency
terms appearing in the data set to construct the in-
dex term space. Our experiments are intended to
address the following questions:(1) whether uti-
lizing the hierarchical relationships among labels
help to improve the accuracy of the classification?
(2) whether the introduction of separately learn-
ing threshold for each classifier help to improve
the accuracy of the classification? (3) how does
the corrective step ? impact the performance of the
proposed approach?(4)how does the dimensional-
ity d of index terms space impact the proposed ap-
proach?s computing efficiency and accuracy?
4.1 Data Set Preparation
The data set contains 1446 snippets of customer
reviews on digital cameras that are collected from
a customer review website4. We manually con-
struct a SOT for the product of digital cameras.
The constructed SOT (e.g., Fig. 1) contains 105
nodes that include 35 non-leaf nodes representing
attributes of the digital camera and 70 leaf nodes
representing associated sentiments with attribute
nodes. Then we label all the snippets with corre-
sponding labels of nodes in the constructed SOT
complying with the rule that a target text is to be
labeled with a node only if its parent attribute node
is labeled with the target text. We randomly divide
the labeled data set into five folds so that each fold
at least contains one example snippets labeled by
each node in the SOT. For each experiment set-
ting, we run 5 experiments to perform cross-fold
evaluation by randomly picking three folds as the
training set and the other two folds as the testing
set. All the testing results are averages over 5 run-
ning of experiments.
4.2 Evaluation Metrics
Since the proposed HL-SOT approach is a hier-
archical classification process, we use three clas-
sic loss functions for measuring classification per-
formance. They are the One-error Loss (O-Loss)
function, the Symmetric Loss (S-Loss) function,
and the Hierarchical Loss (H-Loss) function:
? One-error loss (O-Loss) function is defined
as:
LO(y?, l) = B(?i : y?i ?= li),
where y? is the prediction label vector and l is
the true label vector; B is the boolean func-
tion as defined in Section 3.2.2.
? Symmetric loss (S-Loss) function is defined
as:
LS(y?, l) =
N
?
i=1
B(y?i ?= li),
? Hierarchical loss (H-Loss) function is defined
as:
LH(y?, l) =
N
?
i=1
B(y?i ?= li ? ?j ? A(i), y?j = lj),
4http://www.consumerreview.com/
409
Table 1: Performance Comparisons (A Smaller Loss Value Means a Better Performance)
Metrics Dimensinality=110 Dimensinality=220H-RLS HL-flat HL-SOT H-RLS HL-flat HL-SOT
O-Loss 0.9812 0.8772 0.8443 0.9783 0.8591 0.8428
S-Loss 8.5516 2.8921 2.3190 7.8623 2.8449 2.2812
H-Loss 3.2479 1.1383 1.0366 3.1029 1.1298 1.0247
0 0.02 0.04 0.06 0.08 0.10.838
0.84
0.842
0.844
0.846
0.848
0.85
0.852
Corrective Step
O?Lo
ss
 
 
d=110d=220
(a) O-Loss
0 0.02 0.04 0.06 0.08 0.12.15
2.2
2.25
2.3
2.35
2.4
Corrective Step
S?Lo
ss
 
 
d=110d=220
(b) S-Loss
0 0.02 0.04 0.06 0.08 0.1
1.02
1.025
1.03
1.035
1.04
1.045
1.05
Corrective Step
H?Lo
ss
 
 
d=110d=220
(c) H-Loss
Figure 2: Impact of Corrective Step ?
where A denotes a set of nodes that are an-
cestors of node i in SOT.
Unlike the O-Loss function and the S-Loss func-
tion, the H-Loss function captures the intuition
that loss should only be charged on a node when-
ever a classification mistake is made on a node of
SOT but no more should be charged for any ad-
ditional mistake occurring in the subtree of that
node. It measures the discrepancy between the
prediction labels and the true labels with consider-
ation on the SOT structure defined over the labels.
In our experiments, the recorded loss function val-
ues for each experiment running are computed by
averaging the loss function values of each testing
snippets in the testing set.
4.3 Performance Comparison
In order to answer the questions (1), (2) in the
beginning of this section, we compare our HL-
SOT approach with the following two baseline ap-
proaches:
? HL-flat: The HL-flat approach involves an al-
gorithm that is a ?flat? version of HL-SOT
algorithm by ignoring the hierarchical rela-
tionships among labels when each classifier
is trained. In the training process of HL-flat,
the algorithm reflexes the restriction in the
HL-SOT algorithm that requires the weight
vector wi,t of the classifier i is only updated
on the examples that are positive for its parent
node.
? H-RLS: The H-RLS approach is imple-
mented by applying the H-RLS algorithm
studied in (Cesa-Bianchi et al, 2006). Un-
like our proposed HL-SOT algorithm that en-
ables the threshold values to be learned sepa-
rately for each classifiers in the training pro-
cess, the H-RLS algorithm only uses an iden-
tical threshold values for each classifiers in
the classification process.
Experiments are conducted on the performance
comparison between the proposed HL-SOT ap-
proach with HL-flat approach and the H-RLS ap-
proach. The dimensionality d of the index term
space is set to be 110 and 220. The corrective step
? is set to be 0.005. The experimental results are
summarized in Table 1. From Table 1, we can ob-
serve that the HL-SOT approach generally beats
the H-RLS approach and HL-flat approach on O-
Loss, S-Loss, and H-Loss respectively. The H-
RLS performs worse than the HL-flat and the HL-
SOT, which indicates that the introduction of sepa-
rately learning threshold for each classifier did im-
prove the accuracy of the classification. The HL-
SOT approach performs better than the HL-flat,
which demonstrates the effectiveness of utilizing
the hierarchical relationships among labels.
4.4 Impact of Corrective Step ?
The parameter ? in the proposed HL-SOT ap-
proach controls the corrective step of the classi-
fiers? thresholds when any mistake is observed in
the training process. If the corrective step ? is set
too large, it might cause the algorithm to be too
410
50 100 150 200 250 300
0.84
0.841
0.842
0.843
0.844
0.845
0.846
Dimensionality of Index Term Space
O?Lo
ss
(a) O-Loss
50 100 150 200 250 3002.26
2.27
2.28
2.29
2.3
2.31
2.32
2.33
2.34
2.35
Dimensionality of Index Term Space
S?Lo
ss
(b) S-Loss
50 100 150 200 250 3001.01
1.015
1.02
1.025
1.03
1.035
1.04
1.045
Dimensionality of Index Term Space
H?Lo
ss
(c) H-Loss
Figure 3: Impact of Dimensionality d of Index Term Space (? = 0.005)
sensitive to each observed mistake. On the con-
trary, if the corrective step is set too small, it might
cause the algorithm not sensitive enough to the ob-
served mistakes. Hence, the corrective step ? is
a factor that might impact the performance of the
proposed approach. Fig. 2 demonstrates the im-
pact of ? on O-Loss, S-Loss, and H-Loss. The
dimensionality of index term space d is set to be
110 and 220. The value of ? is set to vary from
0.001 to 0.1 with each step of 0.001. Fig. 2 shows
that the parameter ? impacts the classification per-
formance significantly. As the value of ? increase,
the O-Loss, S-Loss, and H-Loss generally increase
(performance decrease). In Fig. 2c it is obviously
detected that the H-Loss decreases a little (perfor-
mance increase) at first before it increases (perfor-
mance decrease) with further increase of the value
of ?. This indicates that a finer-grained value of ?
will not necessarily result in a better performance
on the H-loss. However, a fine-grained corrective
step generally makes a better performance than a
coarse-grained corrective step.
4.5 Impact of Dimensionality d of Index
Term Space
In the proposed HL-SOT approach, the dimen-
sionality d of the index term space controls the
number of terms to be indexed. If d is set
too small, important useful terms will be missed
that will limit the performance of the approach.
However, if d is set too large, the computing ef-
ficiency will be decreased. Fig. 3 shows the im-
pacts of the parameter d respectively on O-Loss,
S-Loss, and H-Loss, where d varies from 50 to 300
with each step of 10 and the ? is set to be 0.005.
From Fig. 3, we observe that as the d increases the
O-Loss, S-Loss, and H-Loss generally decrease
(performance increase). This means that when
more terms are indexed better performance can
be achieved by the HL-SOT approach. However,
50 100 150 200 250 3000
2
4
6
8
10
12 x 106
Dimensionality of Index Term Space
Tim
e Co
nsum
ing 
(ms)
Figure 4: Time Consuming Impacted by d
considering the computing efficiency impacted by
d, Fig. 4 shows that the computational complex-
ity of our approach is non-linear increased with
d?s growing, which indicates that indexing more
terms will improve the accuracy of our proposed
approach although this is paid by decreasing the
computing efficiency.
5 Conclusions, Discussions and Future
Work
In this paper, we propose a novel and effec-
tive approach to sentiment analysis on product re-
views. In our proposed HL-SOT approach, we de-
fine SOT to formulate the knowledge of hierarchi-
cal relationships among a product?s attributes and
tackle the problem of sentiment analysis in a hier-
archical classification process with the proposed
algorithm. The empirical analysis on a human-
labeled data set demonstrates the promising re-
sults of our proposed approach. The performance
comparison shows that the proposed HL-SOT ap-
proach outperforms two baselines: the HL-flat and
the H-RLS approach. This confirms two intuitive
motivations based on which our approach is pro-
posed: 1) separately learning threshold values for
411
each classifier improve the classification accuracy;
2) knowledge of hierarchical relationships of la-
bels improve the approach?s performance. The ex-
periments on analyzing the impact of parameter
? indicate that a fine-grained corrective step gen-
erally makes a better performance than a coarse-
grained corrective step. The experiments on an-
alyzing the impact of the dimensionality d show
that indexing more terms will improve the accu-
racy of our proposed approach while the comput-
ing efficiency will be greatly decreased.
The focus of this paper is on analyzing review
texts of one product. However, the framework of
our proposed approach can be generalized to deal
with a mix of review texts of more than one prod-
ucts. In this generalization for sentiment analysis
on multiple products reviews, a ?big? SOT is con-
structed and the SOT for each product reviews is
a sub-tree of the ?big? SOT. The sentiment analy-
sis on multiple products reviews can be performed
the same way the HL-SOT approach is applied on
single product reviews and can be tackled in a hier-
archical classification process with the ?big? SOT.
This paper is motivated by the fact that the
relationships among a product?s attributes could
be a useful knowledge for mining product review
texts. The SOT is defined to formulate this knowl-
edge in the proposed approach. However, what
attributes to be included in a product?s SOT and
how to structure these attributes in the SOT is an
effort of human beings. The sizes and structures
of SOTs constructed by different individuals may
vary. How the classification performance will be
affected by variances of the generated SOTs is
worthy of study. In addition, an automatic method
to learn a product?s attributes and the structure
of SOT from existing product review texts will
greatly benefit the efficiency of the proposed ap-
proach. We plan to investigate on these issues in
our future work.
Acknowledgments
The authors would like to thank the anonymous
reviewers for many helpful comments on the
manuscript. This work is funded by the Research
Council of Norway under the VERDIKT research
programme (Project No.: 183337).
References
Alina Andreevskaia and Sabine Bergler. 2006. Min-
ing wordnet for a fuzzy sentiment: Sentiment tag
extraction from wordnet glosses. In Proceedings of
11th Conference of the European Chapter of the As-
sociation for Computational Linguistics (EACL?06),
Trento, Italy.
Nicolo` Cesa-Bianchi, Claudio Gentile, and Luca Zani-
boni. 2006. Incremental algorithms for hierarchi-
cal classification. Journal of Machine Learning Re-
search (JMLR), 7:31?54.
Kushal Dave, Steve Lawrence, and David M. Pennock.
2003. Mining the peanut gallery: opinion extraction
and semantic classification of product reviews. In
Proceedings of 12nd International World Wide Web
Conference (WWW?03), Budapest, Hungary.
Ann Devitt and Khurshid Ahmad. 2007. Sentiment
polarity identification in financial news: A cohesion-
based approach. In Proceedings of 45th Annual
Meeting of the Association for Computational Lin-
guistics (ACL?07), Prague, Czech Republic.
Xiaowen Ding and Bing Liu. 2007. The utility of
linguistic rules in opinion mining. In Proceedings
of 30th Annual International ACM Special Inter-
est Group on Information Retrieval Conference (SI-
GIR?07), Amsterdam, The Netherlands.
Andrea Esuli and Fabrizio Sebastiani. 2005. Deter-
mining the semantic orientation of terms through
gloss classification. In Proceedings of 14th ACM
Conference on Information and Knowledge Man-
agement (CIKM?05), Bremen, Germany.
Andrea Esuli and Fabrizio Sebastiani. 2006. Senti-
wordnet: A publicly available lexical resource for
opinion mining. In Proceedings of 5th International
Conference on Language Resources and Evaluation
(LREC?06), Genoa, Italy.
Vasileios Hatzivassiloglou and Kathleen R. McKeown.
1997. Predicting the semantic orientation of ad-
jectives. In Proceedings of 35th Annual Meeting
of the Association for Computational Linguistics
(ACL?97), Madrid, Spain.
Vasileios Hatzivassiloglou and Janyce M. Wiebe.
2000. Effects of adjective orientation and grad-
ability on sentence subjectivity. In Proceedings
of 18th International Conference on Computational
Linguistics (COLING?00), Saarbru?ken, Germany.
Minqing Hu and Bing Liu. 2004. Mining and sum-
marizing customer reviews. In Proceedings of 10th
ACM SIGKDDConference on Knowledge Discovery
and Data Mining (KDD?04), Seattle, USA.
Jaap Kamps, Maarten Marx, R. ort. Mokken, and
Maarten de Rijke. 2004. Using WordNet to mea-
sure semantic orientation of adjectives. In Proceed-
ings of 4th International Conference on Language
Resources and Evaluation (LREC?04), Lisbon, Por-
tugal.
412
Bing Liu, Minqing Hu, and Junsheng Cheng. 2005.
Opinion observer: analyzing and comparing opin-
ions on the web. In Proceedings of 14th Inter-
national World Wide Web Conference (WWW?05),
Chiba, Japan.
Yang Liu, Xiangji Huang, Aijun An, and Xiaohui Yu.
2007. ARSA: a sentiment-aware model for predict-
ing sales performance using blogs. In Proceedings
of the 30th Annual International ACM Special Inter-
est Group on Information Retrieval Conference (SI-
GIR?07), Amsterdam, The Netherlands.
Yue Lu and Chengxiang Zhai. 2008. Opinion inte-
gration through semi-supervised topic modeling. In
Proceedings of 17th International World Wide Web
Conference (WWW?08), Beijing, China.
Yue Lu, ChengXiang Zhai, and Neel Sundaresan.
2009. Rated aspect summarization of short com-
ments. In Proceedings of 18th International World
Wide Web Conference (WWW?09), Madrid, Spain.
Ana-Maria Popescu and Oren Etzioni. 2005. Extract-
ing product features and opinions from reviews. In
Proceedings of Human Language Technology Con-
ference and Empirical Methods in Natural Lan-
guage Processing Conference (HLT/EMNLP?05),
Vancouver, Canada.
Ivan Titov and Ryan T. McDonald. 2008. Modeling
online reviews with multi-grain topic models. In
Proceedings of 17th International World Wide Web
Conference (WWW?08), Beijing, China.
Peter D. Turney. 2002. Thumbs up or thumbs down?
semantic orientation applied to unsupervised classi-
fication of reviews. In Proceedings of 40th Annual
Meeting of the Association for Computational Lin-
guistics (ACL?02), Philadelphia, USA.
Casey Whitelaw, Navendu Garg, and Shlomo Arga-
mon. 2005. Using appraisal taxonomies for senti-
ment analysis. In Proceedings of 14th ACM Confer-
ence on Information and Knowledge Management
(CIKM?05), Bremen, Germany.
Theresa Wilson, Janyce Wiebe, and Paul Hoffmann.
2005. Recognizing contextual polarity in phrase-
level sentiment analysis. In Proceedings of Hu-
man Language Technology Conference and Empir-
ical Methods in Natural Language Processing Con-
ference (HLT/EMNLP?05), Vancouver, Canada.
Hong Yu and Vasileios Hatzivassiloglou. 2003. To-
wards answering opinion questions: Separating facts
from opinions and identifying the polarity of opin-
ion sentences. In Proceedings of 8th Conference on
Empirical Methods in Natural Language Processing
(EMNLP?03), Sapporo, Japan.
Lina Zhou and Pimwadee Chaovalit. 2008. Ontology-
supported polarity mining. Journal of the American
Society for Information Science and Technology (JA-
SIST), 59(1):98?110.
Li Zhuang, Feng Jing, and Xiao-Yan Zhu. 2006.
Movie review mining and summarization. In Pro-
ceedings of the 15th ACM International Confer-
ence on Information and knowledge management
(CIKM?06), Arlington, USA.
413
