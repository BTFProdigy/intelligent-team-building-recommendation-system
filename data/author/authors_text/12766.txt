Coling 2008: Proceedings of the workshop on Knowledge and Reasoning for Answering Questions, pages 9?16
Manchester, August 2008
Context Inducing Nouns
Charlotte Price
Palo Alto Research Center
3333 Coyote Hill Rd.
Palo Alto, CA 94304 USA
lprice@parc.com
Valeria de Paiva
Palo Alto Research Center
3333 Coyote Hill Rd.
Palo Alto, CA 94304 USA
valeria.paiva@gmail.com
Tracy Holloway King
Palo Alto Research Center
3333 Coyote Hill Rd.
Palo Alto, CA 94304 USA
thking@parc.com
Abstract
It is important to identify complement-
taking nouns in order to properly analyze
the grammatical and implicative structure
of the sentence. This paper examines the
ways in which these nouns were identified
and classified for addition to the BRIDGE
natural language understanding system.
1 Introduction
One of the goals of computational linguistics is to
draw inferences from a text: that is, for the sys-
tem to be able to process a text, and then to con-
clude, based on the text, whether some other state-
ment is true.1 Clausal complements confound the
process because, despite their surface similarity to
adjuncts, they generate very different inferences.
In this paper we examine complement-taking
nouns: how to identify them and how to incorpo-
rate them into an inferencing system. We first dis-
cuss what we mean by complement-taking nouns
(section 2) and how to identify a list of such
nouns (section 3). We then describe the question-
answering system that uses the complement-taking
nouns as part of its inferencing (section 4), how the
nouns are added to the system (section 5), and how
the coverage is tested (section 6). Finally, we dis-
cuss several avenues for future work (section 7),
including automating the search process, identify-
ing other context-inducing forms, and taking ad-
vantage of cross-linguistic data.
c 2008. Licensed under the Creative Commons
Attribution-Noncommercial-Share Alike 3.0 Unported li-
cense (http://creativecommons.org/licenses/by-nc-sa/3.0/).
Some rights reserved.
1We would like to thank the Natural Language Theory and
Technology group at PARC, Dick Crouch, and the three re-
viewers for their input.
2 What is a complement-taking noun?
Identifying complement-taking nouns is somewhat
involved. It is important to identify the clause, to
ensure that the clause is indeed a complement and
not an adjunct (e.g. a relative clause or a purpose
infinitive), and to figure out what is licensing the
complement, as it is not only nouns that license
complements.
2.1 Verbal vs. nominal complements
A clause is a portion of a sentence that includes a
predicate and its arguments. Clauses come in a va-
riety of forms, a subset of which is shown in (1)
for verbs taking complements. The italicized part
is the complement, and the part in bold is what li-
censes it. The surface form of the clause can vary
significantly depending on the licensing verb.
(1) a. Mary knows that Bob is happy.
b. John wants (Mary) to leave right now.
c. John likes fixing his bike.
d. John let Mary fix his bike.
For this paper, we touch briefly on nouns taking
to clauses, as in (2b), but the main focus is on that
clauses, as in (2a).
(2) a. the fact that Mary hopped
b. the courage to hop
Both types of complements pose problems in
mining corpora for lexicon development. The that
clauses can superficially resemble relative clauses,
as in (3), and the to clauses can resemble purpose
infinitives, as in (4).
(3) a. COMPLEMENT-TAKING NOUN: John
liked the idea that Mary sang last
evening.
9
b. RELATIVE CLAUSE: John liked the song
that Mary sang last evening.
(4) a. COMPLEMENT-TAKING NOUN: John had
a chance to sing that song.
b. PURPOSE INFINITIVE: John had a song
book (in order) to sing that song.
As discussed in section 3, this superficial re-
semblance makes the automatic identification of
complement-taking nouns very difficult: simple
string-based searches would return large numbers
of incorrect candidates which would have to be vet-
ted before incorporating the new nouns into the
system.
2.2 Contexts introduced by nominals
Complements and relative clause adjuncts allow
very different inferences. Whereas the speaker?s
beliefs about adjuncts take on the truth value of
the clause they are embedded in, the truth value of
clausal complements is also affected by the licens-
ing noun. Compare the sentences below. The itali-
cized clause in (5) is a complement, while in (6) it
is an adjunct.
(5) The lie that Mary was ill paralyzed Bob.
Mary was not ill.
(6) The situation that she had gotten herself into
paralyzed Bob. She had gotten herself
into a situation.
To explain how this is possible, we introduce the
notion of implicative contexts (Nairn et al, 2006),
and claim that complement-taking nouns introduce
a context for the complement, whereas no such
context is created for the adjuncts. Perhaps the eas-
iest way to think of a context is to imagine em-
bedding the complement in an extra layer, with the
layer adding information about how to adjust the
truth-value of its contents.2 This allows us to con-
clude in (5) that the speaker believes that Mary and
Bob exist, as does the event of Bob?s paralysis, but
the event Mary was ill does not. These are ref-
ered to as the (un)instantiability of the components
in the sentence. Contexts can be embedded within
each other recursively, as in (7). Note that these se-
mantic contexts often, but not always, correspond
to syntactic embedding.
2In the semantic representations, the contexts are flattened,
or projected, onto the leaf nodes of the parse tree, so that every
leaf has access to information locally.
(7) Paul believes [that John?s lie [that Mary wor-
ries [that fish can fly]] surprised us].
Contexts may have an implication signature
(Nairn et al, 2006) attached to them, specifying,
for example, that the clause is something that the
speaker presupposes to be true or that the speaker
believes the truth value of the clause should be re-
versed. The default for a context is to allow no
implications to be drawn, as in (1b), where the
speaker has not committed to whether or not Mary
is leaving.
Below is a more detailed example showing how
the context introduced by a noun changes the im-
plications of the sentence, and how it would behave
differently from a relative clause adjunct to a noun.
Consider the pair of sentences in (8).
(8) a. The lie that Mary had won surprised John.
Mary did not win.
b. The bonus that Mary had won surprised
John. Mary won a bonus.
In (8), that John was surprised is in the speaker?s
top context, which is what the author commits to as
truth. In (8a), lie is within the context of surprised.
Surprised does not change the implications of ele-
ments within its context.3 Therefore, lie gets a true
value: that a lie was told is considered true. That
Mary won, however, is within the context of lie,
which reverses the polarity of implications within
its scope or context. If that Mary won were only
within the context of surprised instead of within
lie, which would be the case if lie did not create
a context, then that Mary won would fall within
the context of surprised. The implication signa-
ture of surprised would determine the veridicality
of the embedded clause instead of the signature of
lie: this would incorrectly allow the conclusion that
Mary won.
The content of the relative clause in (8b) is in the
same context as surprise since no additional con-
text is introduced by bonus. As such, we can con-
clude that Mary did win a bonus.
2.3 Complements introduced by to
The previous subsection focused on finite comple-
ments introduced by that. From the perspective
3We say surprise has the implication signature ++/--: el-
ements within its context have a positive implication in a pos-
itive context and negative in a negative context. See (Nairn et
al., 2006) for detailed discussion of possible implication sig-
natures and how to propagate them through contexts.
10
of aiding inferencing in the BRIDGE system, the
nouns that take to complements that are not dever-
bal nouns (see section 2.4 for discussion of dever-
bals) seem to fall into three main classes:4 ability,
bravery, and chance. Examples are shown in (9).
(9) a. John has the ability to sing.
b. John has the guts to sing out loud.
c. John?s chance to sing came quickly.
These all have an implication signature that
gives a (negative) implication only in a negative
context, as in (10); in a positive context as in (9),
no implication can be drawn.
(10) John didn?t have the opportunity to sing.
John didn?t sing.
Note also that the implication only applies when
the verb is have. Other light verbs, such as take in
(11) change the implications.
(11) John took the opportunity to sing.
John sang.
For this reason, these nouns are treated differ-
ently than those with that complements. They are
marked in the grammar as taking a complement in
the same way that that complements are (section 5),
but the mechanism which attaches an implication
signature takes the governing verb into account.
2.4 Deverbal nouns
A large number of complement-taking nouns are
related to verbs that take complements. These
nouns are analyzed differently than non-deverbal
nouns. They are linked to their related verb and
classified according to how the arguments of the
noun and the sentence relate to the arguments for
the verb (e.g. -ee, -er).5 The BRIDGE system uses
this linking to map these nouns to their verbal coun-
terparts and to draw conclusions of implicativity as
if they were verbs, as explained in (Gurevich et al,
2006). Consider (12) where the paraphrases using
fear as a verb or a noun are clearly related.
(12) a. The fear that Mary was ill paralyzed Bob.
b. Bob feared that Mary was ill; this fear par-
alyzed Bob.
4The work described in this section was done by Lauri
Karttunen and Karl Pichotta (Pichotta, 2008).
5NOMLEX (Macleod et al, 1998) is an excellent source of
these deverbal nouns.
Deverbal nouns can take that complements or, as
in (13), to complements. Most often, the context
introduced by a deverbal noun does not add an im-
plication signature, as in (11), which results in the
answer UNKNOWN to the question Was Mary ill?.
(13) a. John?s promise to go swimming surprised
us.
b. John?s persuasion of Mary to sing at the
party surprised us.
Gerunds, being even more verb-like, are treated as
verbs in our system and hence inherit the implica-
tive properties from the corresponding verb.
(14) Knowing that Mary had sung upset John.
Mary sang.
Gerunds and deverbal nouns are discussed in de-
tail in (Gurevich et al, 2006) and are outside of the
scope of this paper.
3 Finding complement-taking nouns
In order for the system to draw the inferences dis-
cussed above, the complement-taking nouns must
first be identified and then classified and incorpo-
rated into the BRIDGE system (section 4). First,
the gerunds are removed since these are mapped by
the syntax into their verbal counterparts. Then the
non-gerund deverbal nouns (section 2.4) are linked
to their verbal counterpart so that they can be ana-
lyzed by the system as events. These two classes
represent a significant number of the nouns that
take that complements.
3.1 Syntactic classification
However, there are many complement-taking
nouns that are not deverbal. To expand our
lexicon of these nouns, we started with a seed
set garnered from the Penn Treebank (Marcus et
al., 1994), which uses distinctive tree structures
for complement-taking nouns, and a small list
of linguistically prominent nouns. For each of
these lexical items, we extracted words in the
same semantic class from WordNet. Classes
include words like fact, which direct attention
to the clausal complement, as in (15), and nouns
expressing emotion, as in (16).
(15) It?s a fact that Mary came.
(16) Bob?s joy that Mary had returned reduced him
to tears.
11
These semantic classes provided a starting point
for discovering more of these nouns: the class of
emotion nouns, for example, has more than a hun-
dred hyponyms.
Identifying the class is not enough, as not all
members take clausal complements. Compare joy
in (16) and warmheartedness in (17) from the emo-
tion class. The sentence containing joy is much
more natural than that in (17).
(17) #Bob?s warmheartedness that Mary had re-
turned reduced him to tears.
From the candidate list, the deverbal nouns are
added to the lexicon of deverbal noun mappings.
The remaining list is checked word-by-word. To
ease the process, test sentences that take a range of
meanings are created for each class of nouns, as in
(18).
(18) Bob?s that Mary visited her mother re-
duced him to tears.
If the noun does not fit the test sentences, a
web search is done on ?X that? to extract po-
tential complement-bearing sentences. These are
checked to eliminate sentences with adjuncts, or
where some other feature licenses the clause, such
as in (19) where the bold faced structure is licens-
ing the italicized clause.
(19) a. John is so warmhearted that he took her in
without question.
b. They had such a good friendship that she
could tell him anything.
Using these methods, from a seed set of 13
nouns, 170 non-deverbal complement-taking
nouns were identified, most in the emotion and
feeling classes. The same techniques were then
applied to the state and information classes. Once
the Penn Treebank seeds were incorporated, the
same process was applied to the complement-
taking nouns from NOMLEX (Macleod et al,
1998).
3.2 Determining implications
As examples (8a) and (8b) showed, whether a word
takes a complement is lexically determined; so is
the type of implication signature introduced by the
word. Compare the implications in (20).
(20) a. The fact that Mary had returned surprised
John. Mary had returned.
b. The falsehood that Mary had returned sur-
prised John. Mary had not returned.
c. The possibility that Mary had returned
surprised John. ? Mary had returned.
These nouns have different implication signa-
tures: facts imply truth; lies imply falsehood; and
possibilities do not allow truth or falsehood to be
established. The default for complements is that no
implications can be drawn, as in (20c), which in the
BRIDGE system is expressed as the noun having no
implication signature.6
Once identified and its implication signature de-
termined, adding the complement-taking noun to
the BRIDGE system and deriving the correct infer-
ences is straightforward. This process is described
in section 5.
4 The BRIDGE system
The BRIDGE system (Bobrow et al, 2007) includes
a syntactic grammar, a semantics rule set (Crouch
and King, 2006), an abstract knowledge represen-
tation (AKR) rule set, and an entailment and con-
tradiction detection (ECD) system. The syntax, se-
mantics, and AKR all depend on lexicons.
The BRIDGE grammar defines syntactic proper-
ties of words, such as predicate-argument structure,
tense, number, and nominal specifiers. The gram-
mar produces a packed representation of the sen-
tence which allows ambiguity to be dealt with effi-
ciently (Maxwell and Kaplan, 1991).
The parses are passed to the semantic rules
which also work on packed structures (Crouch,
2005). The semantic layer looks up words in a
Unified Lexicon (UL), connects surface arguments
of verbs to their roles, and determines the context
within which a word occurs in the sentence. Nega-
tion introduces a context, as do the complement-
taking nouns discussed here (Bobrow et al, 2005).
The UL combines several sources of information
(Crouch and King, 2005). Much of the information
comes from the syntactic lexicon, VerbNet (Kipper
et al, 2000), and WordNet (Fellbaum, 1998), but
there are also handcoded entries that add semanti-
cally relevant information such as its implication
signature. A sample UL entry is given in Figure 1.
The current number of complement-taking
nouns in the system is shown in (21). Only a
6A context is still generated for these. Adjuncts, having no
context of their own, inherit the implication signature of the
clause containing them (section 2.2).
12
(cat(N), word(fact), subcat(NOUN-EXTRA),
concept(%1),
source(hand annotated data), source(xle),
xfr:concept for(%1,fact),
xfr:lex class(%1,impl pp nn),
xfr:wordnet classes(%1,[])).
Figure 1: One entry for the word fact in the Uni-
fied Lexicon. NOUN-EXTRA states that this use of
fact fits in structures such as it is a fact that The
WordNet meaning is found by looking up the con-
cept for fact in the WordNet database. The implica-
tion signature of the word is impl pp nn or ++/--
as seen in (22). Lastly, the sources for this informa-
tion are noted.
fifth of the nouns have implication signatures.
However, all of the nouns introduce contexts; the
default implication for contexts is to allow neither
true nor false to be concluded, as in (20c).
(21)
Complement-taking Nouns
that complements 411
to complements 173
with implication signatures 107
The output of the semantics level is fed into
the AKR. At this level, contexts are used to deter-
mine (un)instantiability based on the relationship
between contexts.7 An entity?s (un)instantiability
encodes whether it exists in some context. In (8a),
for example, we can conclude that the speaker be-
lieves that Mary exists, but that the event Mary won
is uninstantiated: the speaker believes it did not
happen.
The final layer is the ECD, which uses the struc-
tures built by the AKR to reason about a given
passage-query pair to determine whether or not the
query is inferred by the passage, answering with
YES, NO, UNKNOWN, or AMBIGUOUS. For more
details, see (Bobrow et al, 2005).
5 Adding complement-taking nouns to
the system
Adding complement-taking nouns to the BRIDGE
system is straightforward. A syntactic entry is
added indicating that the noun takes a complement.
The syntactic classes are defined by templates, and
the relevant template is called in the lexical en-
try for that word. For example, the template call
7See (Bobrow et al, 2007; Bobrow et al, 2005) for other
information contained in the AKR.
@(NOUN-EXTRA %stem) is added to the entry for
fact.
If there is an implication signature for the com-
plement, this is added to the noun?s entry in the
file for hand-annotated data used to build the UL.
The fifth line in Figure 1 is an example. The AKR
and ECD rules that calculate the context and im-
plications on verbs and deverbal nouns general-
ize to handle implications on complement-taking
nouns and so do not need to be altered as new
complement-taking nouns are found.
As described in section 3, deciding which nouns
take complements is currently hand curated, as it is
quite difficult to distinguish them entirely automat-
ically.
6 Testing
To ensure that complement-taking nouns are work-
ing properly in the system, for each noun, a
passage-query-correct answer triplet such as:
(22) PASSAGE: The fact that Mary had returned
surprised John.
QUERY: Had Mary returned?
ANSWER: YES
is added to a testsuite. The testsuites are run and
the results reported as part of the daily regres-
sion testing (Chatzichrisafis et al, 2007). Both
naturally occurring and hand-crafted examples are
used to ensure that the correct implications are
being drawn. Natural examples test interactions
between phenomena such as noun complementa-
tion and copular constructions, while hand-crafted
examples allow isolation of the phenomenon and
show that all cases are being tested (Cohen et al,
2008), e.g., that the correct entailments emerge un-
der negation as well as in the positive case.
Our current testsuites contain about 180 hand-
crafted examples. The number of natural exam-
ples is harder to count as they occur somewhat
rarely in the mixed-phenomena testsuites. One
of our natural example files, which is based on
newswire extracts from the PASCAL Recognizing
Textual Entailment Challenge (Dagan et al, 2005),
shows an approximate breakdown of the uses of the
word that is as shown in (23). This sample, which
is somewhat biased towards verbal complements
since it contains many examples that can be para-
phrased as said that, nonetheless shows the relative
scarcity of noun complements in the wild and un-
derscores the importance of hand-crafted examples
13
for testing purposes. It it is clear that these noun
complements were being analyzed incorrectly be-
fore; what is unclear is how much of an impact
the misanalysis would have caused. Perhaps some
other domain would demonstrate a significantly
higher presence of non-deverbal nouns that take
complements and would be more significantly im-
pacted by their misanalysis.
(23)
Uses of the word that in RTE 2007
verbal complements 68
adjuncts 50
deverbal complements 14
noun complements 3
other 8 19
7 Future work
The detection and incorporation of noun comple-
ments for use in the BRIDGE system can be ex-
panded in several directions, such as automat-
ing the search process, identifying and classifying
other parts of speech that take complements, and
exploring transferability to other languages.
7.1 Automating the search
Testing whether a clause is an adjunct or a noun
complement or is licensed by something else is cur-
rently done by hand. Automating the testing would
allow many more nouns to be tested. However, this
is non-trivial. As (8a) and (8b) demonstrated, the
surface structure can appear very similar; it is only
when we try to figure out the implications of the ex-
amples that the differences emerge.
The Penn Treebank (Marcus et al, 1994) was
initially used to extract complement-taking nouns.
As more tree and dependency banks, as well as lex-
ical resources (Macleod et al, 1998), are available,
further lexical items can be extracted in this way.
However, such resources are costly to build and
so are only slowly added to the available NLP re-
sources.
Rather than trying to identify all potential noun
complement clauses, a simpler approach would be
to reduce the search space for the human judge. For
example, some adjuncts (perhaps three quarters of
them) could be eliminated from natural examples
by using a part-of-speech tagger to identify occur-
rences where a conjugated verb immediately fol-
8This includes demonstrative uses, uses licensed by other
parts of speech such as so, and clauses which are the subject
of a sentence or the object of a prepositional phrase.
lows the word that, as in (24). These commonly
identify adjuncts.
(24) The shark that bit the swimmer appears to
have left.
By eliminating these adjuncts and by removing
those sentences where it is known that the clause
is a complement of the verb based on the syntac-
tic classification of that verb (the syntactic lexicon
contains 2500 verbs with various clausal comple-
ments), as in (25), the search space could be signif-
icantly reduced.
(25) The judge announced that the defendant was
guilty.
7.2 Other parts of speech that introduce
contexts
Verbs, adjectives, and adverbs can also license
complements and hence contexts with implication
signatures. Examples in (26) show different parts
of speech that introduce contexts.9
(26) a. Verb: John said that Paul had arrived.
b. Adjective: It is possible that someone ate
the last piece of cake.
c. Adjective: John was available to see
Mary.
d. Adverb: John falsely reported that Mary
saw Bill.
Many classes of verbs have already been iden-
tified and are incorporated into the system (Nairn
et al, 2006): verbs relating to speech (e.g., say,
report, etc.), implicative verbs such as manage
and fail (Karttunen, 2007), and factive verbs (e.g.
agree, realize, consider) (Vendler, 1967; Kiparsky
and Kiparsky, 1971), to name a few. Many adjec-
tives have also been added to the system, includ-
ing ones taking to and that complements.10 As with
the complement-taking nouns, a significant part of
the effort in incorporating the complement-taking
adjectives into the system was identifying which
adjectives license complements. The adverbs have
not been explored in as much depth.
9From a syntactic perspective, the adverb falsely does not
take a complement. However, it does introduce a context in
the semantics and hence requires a lexical entry similar to
those discussed for the complement-taking nouns.
10This work was largely done by Hannah Copperman dur-
ing her internship at PARC.
14
7.3 Other languages
The fact that it has been productive to search
for complement-taking nouns through synonyms
and WordNet classes suggests that other languages
could benefit from the work done in English. It
would be interesting to see to what extent the im-
plicative signatures from one language carry over
into another, and to what extent they differ. Strong
similarities could, for example, suggest some com-
mon mechanism at work in these nouns that we
have been unable to identify by studying only one
language. Searching in other languages could also
potentially turn up classes or candidates that were
missed in English.11
8 Conclusions
It is important to identify complement-taking
nouns in order to properly analyze the grammati-
cal and implicative structure of the sentence. Here
we described a bootstrapping approach whereby
annotated corpora and existing lexical resources
were used to identify complement-taking nouns.
WordNet was used to find semantically similar
nouns. These were then tested in closed examples
and in Web searches in order to determine whether
they licensed complements and what the implica-
tive signature of the complement was. Although
identifying the complete set of these nouns is
non-trivial, the context mechanism for dealing
with implicatives makes adding them to the
BRIDGE system to derive the correct implications
straightforward.
9 Appendix: Complement-taking nouns
This appendix contains sample complement-taking
nouns and their classification in the BRIDGE sys-
tem.
9.1 Noun that take to clauses
Ability nouns (impl nn with verb have): ability,
choice, energy, flexibility, freedom, heart, means,
way, wherewithal
Asset nouns (impl nn with verb have): money, op-
tion, time
Bravery nouns (impl nn with verb have): au-
dacity, ball, cajones, cheek, chutzpah, cojones,
11Thanks to Martin Forst (p.c.) for suggesting this direc-
tion.
courage, decency, foresight, gall, gumption, gut,
impudence, nerve, strength, temerity
Chance nouns (impl nn with verb have): chance,
occasion, opportunity
Effort nouns (impl nn with verb have): initiative,
liberty, trouble
Other nouns (no implicativity or not yet classi-
fied): accord, action, agreement, aim, ambition,
appetite, application, appointment, approval, at-
tempt, attitude, audition, authority, authorization,
battle, bid, blessing, campaign, capacity, clear-
ance, commission, commitment, concession, con-
fidence, consent, consideration, conspiracy, con-
tract, cost, decision, demand, desire, determina-
tion, directive, drive, duty, eagerness, effort, ev-
idence, expectation, failure, fear, fight, figure,
franchise, help, honor, hunger, hurry, idea, im-
pertinence, inability, incentive, inclination, indi-
cation, information, intent, intention, invitation,
itch, job, journey, justification, keenness, legisla-
tion, license, luck, mandate, moment, motion, mo-
tive, move, movement, need, note, notice, notifi-
cation, notion, obligation, offer, order, pact, pat-
tern, permission, plan, pledge, ploy, police, posi-
tion, potential, power, pressure, principle, process,
program, promise, propensity, proposal, proposi-
tion, provision, push, readiness, reason, recom-
mendation, refusal, reluctance, reminder, removal,
request, requirement, responsibility, right, rush,
scheme, scramble, sense, sentiment, shame, sign,
signal, stake, stampede, strategy, study, support,
task, temptation, tendency, threat, understanding,
undertaking, unwillingness, urge, venture, vote,
willingness, wish, word, work
9.2 Nouns that take that clauses
Nouns with impl pp nn: abomination, angriness,
angst, animosity, anxiousness, apprehensiveness,
ardor, awe, bereavement, bitterness, case, choler,
consequence, consternation, covetousness, discon-
certion, disconcertment, disquiet, disquietude, ec-
stasy, edginess, enmity, enviousness, event, fact,
fearfulness, felicity, fright, frustration, fury, gall,
gloom, gloominess, grudge, happiness, hesitancy,
hostility, huffiness, huffishness, inquietude, in-
security, ire, jealousy, jitteriness, joy, joyous-
ness, jubilance, jumpiness, lovingness, poignance,
poignancy, premonition, presentiment, problem,
qualm, rancor, rapture, sadness, shyness, situa-
15
tion, somberness, sorrow, sorrowfulness, suspense,
terror, trepidation, truth, uneasiness, unhappiness,
wrath
Nouns with fact p: absurdity, accident, hypocrisy,
idiocy, irony, miracle
Nouns with impl pn np: falsehood, lie
Other nouns (no implicativity or not yet classi-
fied): avowal, axiom, conjecture, conviction, cri-
tique, effort, fear, feeling, hunch, hysteria, idea,
impudence, inability, incentive, likelihood, news,
notion, opinion, optimism, option, outrage, pact,
ploy, point, police, possibility, potential, power,
precedent, premise, principle, problem, prospect,
proviso, reluctance, responsibility, right, rumor,
scramble, sentiment, showing, sign, skepticism,
stake, stand, story, strategy, tendency, unwilling-
ness, viewpoint, vision, willingness, word
References
Bobrow, Daniel G., Cleo Condoravdi, Richard Crouch,
Ron Kaplan, Lauri Karttunen, Tracy Holloway King,
Valeria de Paiva, and Annie Zaenen. 2005. A ba-
sic logic for textual inference. In Proceedings of
the AAAI Workshop on Inference for Textual Question
Answering.
Bobrow, Daniel G., Bob Cheslow, Cleo Condoravdi,
Lauri Karttunen, Tracy Holloway King, Rowan
Nairn, Valeria de Paiva, Charlotte Price, and Annie
Zaenen. 2007. PARC?s Bridge and question answer-
ing system. In Grammar Engineering Across Frame-
works, pages 46?66. CSLI Publications.
Chatzichrisafis, Nikos, Dick Crouch, Tracy Holloway
King, Rowan Nairn, Manny Rayner, and Marianne
Santaholma. 2007. Regression testing for grammar-
based systems. In Grammar Engineering Across
Frameworks, pages 28?143. CSLI Publications.
Cohen, K. Bretonnel, William A. Baumgartner Jr., and
Lawrence Hunter. 2008. Software testing and the
naturally occurring data assumption in natural lan-
guage processing. In Software Engineering, Testing,
and Quality Assurance for Natural Language Pro-
cessing, pages 23?30. Association for Computational
Linguistics.
Crouch, Dick and Tracy Holloway King. 2005. Unify-
ing lexical resources. In Proceedings of the Interdis-
ciplinary Workshop on the Identification and Repre-
sentation of Verb Features and Verb Classes.
Crouch, Dick and Tracy Holloway King. 2006. Seman-
tics via f-structure rewriting. In LFG06 Proceedings.
CSLI Publications.
Crouch, Dick. 2005. Packed rewriting for mapping se-
mantics to KR. In Proceedings of the International
Workshop on Computational Semantics.
Dagan, Ido, Oren Glickman, and Bernardo Magnini.
2005. The PASCAL recognizing textual entailment
challenge. In Proceedings of the PASCAL Chal-
lenges Workshop on Recognizing Textual Entailment,
Southampton, U.K.
Fellbaum, Christiane, editor. 1998. WordNet: An Elec-
tronic Lexical Database. The MIT Press.
Gurevich, Olga, Richard Crouch, Tracy Holloway
King, and Valeria de Paiva. 2006. Deverbal nouns
in knowledge representation. In Proceedings of the
19th International Florida AI Research Society Con-
ference (FLAIRS ?06), pages 670?675.
Karttunen, Lauri. 2007. Word play. Computational
Linguistics, 33:443?467.
Kiparsky, Paul and Carol Kiparsky. 1971. Fact. In
Steinberg, D. and L. Jakobovits, editors, Semantics.
An Inderdisciplinary Reader, pages 345?369. Cam-
bridge University Press.
Kipper, Karin, Hoa Trang Dang, and Martha Palmer.
2000. Class-based construction of a verb lexicon.
In AAAI-2000 17th National Conference on Artificial
Intelligence.
Macleod, Catherine, Ralph Grishman, Adam Meyers,
Leslie Barrett, and Ruth Reeves. 1998. NOMLEX:
A lexicon of nominalizations. In EURALEX?98.
Marcus, Mitchell, Grace Kim, Mary Ann
Marcinkiewicz, Robert MacIntyre, Ann Bies adn
Mark Ferguson, Karen Katz, and Britta Schasberger.
1994. The Penn treebank: Annotative predicate
argument structure. In ARPA Human Language
Technology Workshop.
Maxwell, John and Ron Kaplan. 1991. A method for
disjunctive constraint satisfaction. Current Issues in
Parsing Technologies.
Nairn, Rowan, Cleo Condoravdi, and Lauri Karttunen.
2006. Computing relative polarity for textual in-
ference. In Inference in Computational Semantics
(ICoS-5).
Pichotta, Karl. 2008. Processing paraphrases
and phrasal implicatives in the Bridge question-
answering system. Stanford University, Symbolic
Systems undergraduate honors thesis.
Vendler, Zeno. 1967. Linguistics and Philosophy. Cor-
nell University Press.
16
Coling 2008: Proceedings of the workshop on Grammar Engineering Across Frameworks, pages 49?56
Manchester, August 2008
Designing Testsuites for Grammar-based Systems in Applications
Valeria de Paiva
Palo Alto Research Center
3333 Coyote Hill Rd.
Palo Alto, CA 94304 USA
valeria.paiva@gmail.com
Tracy Holloway King
Palo Alto Research Center
3333 Coyote Hill Rd.
Palo Alto, CA 94304 USA
thking@parc.com
Abstract
In complex grammar-based systems, even
small changes may have an unforeseeable
impact on overall system performance. Re-
gression testing of the system and its com-
ponents becomes crucial for the grammar
engineers developing the system. As part
of this regression testing, the testsuites
themselves must be designed to accurately
assess coverage and progress and to help
rapidly identify problems. We describe
a system of passage-query pairs divided
into three types of phenomenon-based test-
suites (sanity, query, basic correct). These
allow for rapid development and for spe-
cific coverage assessment. In addition,
real-world testsuites allow for overall per-
formance and coverage assessment. These
testsuites are used in conjunction with the
more traditional representation-based re-
gression testsuites used by grammar engi-
neers.
1 Introduction
In complex grammar-based systems, even small
changes may have an unforeseeable impact on
overall system performance.1 Systematic regres-
sion testing helps grammar engineers to track
progress, and to recognize and correct shortcom-
ings in linguistic rule sets. It is also an essential tool
c 2008. Licensed under the Creative Commons
Attribution-Noncommercial-Share Alike 3.0 Unported li-
cense (http://creativecommons.org/licenses/by-nc-sa/3.0/).
Some rights reserved.
1We would like to thank Rowan Nairn for his design and
implementation of the regression platform that runs these test-
suites. We would also like to thank the PARC Natural Lan-
guage Theory and Technology group for their work with these
testsuites and their comments on this paper.
for assessing overall system status in terms of task
and runtime performance.
As discussed in (Chatzichrisafis et al, 2007),
regression testing for grammar-based systems in-
volves two phases. The first includes systematic
testing of the grammar rule sets during their de-
velopment. This is the part of regression testing
that grammar engineers are generally most familiar
with. The second phase involves the deployment
of the grammar in a system and the regression test-
ing of the grammar as a part of the whole system.
This allows the grammar engineer to see whether
changes have any effect on the system, positive or
negative. In addition, the results of regression test-
ing in the system allow a level of abstraction away
from the details of the grammar output, which can
ease maintenance of the regression testsuites so
that the grammar engineers do not need to change
the gold standard annotation every time an interme-
diate level of representation changes.
In this paper, we focus on the design of testsuites
for grammar-based systems, using a question-
answering system as a model. In particular, we are
interested in what types of testsuites allow for rapid
development and efficient debugging.
1.1 The Question-Answering System
To anchor the discussion, we focus on regression
testsuites designed for a grammar-based question-
answering system (Bobrow et al, 2007). The
Bridge system uses the XLE (Crouch et al, 2008)
parser to produce syntactic structures and then the
XLE ordered rewrite system to produce linguistic
semantics (Crouch and King, 2006) and abstract
knowledge representations. Abstract knowledge
representations for passages and queries are pro-
cessed by an entailment and contradiction detec-
tion system which determines whether the query is
49
entailed, contradicted, or neither by the passage.
Entailment and contradiction detection between
passages and queries is a task well suited to regres-
sion testing. There are generally only two or three
possible answers given a passage and a query: en-
tails, contradicts or neither (or in the looser case:
relevant or irrelevant). Wh-questions (section 5.1)
receive a YES answer if an alignment is found be-
tween the wh-word in the query and an appropriate
part of the passage representation; in this case, the
proposed alignment is returned as well as the YES
answer. This is particularly important for who and
what questions where more than one entity in the
passage might align with the wh-word.
From the standpoint of regression testing, two
important aspects of the question-answering appli-
cation are:
(1) The correct answer for a given pair is indepen-
dent of the representations used by the system
and even of which system is used.
(2) The passage-query pairs with answers can be
constructed by someone who does not know
the details of the system.
The first aspect means that even drastic changes in
representation will not result in having to update
the regression suites. This contrasts sharply with
regressions run against representative output which
require either that the gold standard be updated or
that the mapping from the output to that standard be
updated. The second aspect means that externally
developed testsuites (e.g. FraCaS (Cooper et al,
1996), Pascal RTE (Sekine et al, 2007)) can eas-
ily be incorporated into the regression testing and
that grammar engineers can rapidly add new test-
suites, even if they do not have experience with the
internal structure of the system. These aspects also
mean that such passage-query pairs can be used
for cross-system comparisons of coverage (Bos,
2008).
1.2 Testsuite Types
In the regression testsuites designed for the
question-answering system, the passage-query
pair testsuites are divided into two main types:
those that focus on single phenomena (section 2)
and those that use real-world passages (section
3). The phenomenon-based testsuites allow the
grammar engineer to track the behavior of the
system with respect to a given construction, such
as implicativity, noun-noun compounds, temporal
expressions, or comparatives. In contrast, the
real-world passages allow the grammar engineer
to see how the system will behave when applied
to real data, including data which the system will
encounter in applications. Such sentences tend to
stress the system in terms of basic performance
(e.g. efficiency and memory requirements for
processing of long sentences) and in terms of
interactions of different phenomena (e.g. coordi-
nation ambiguity interacting with implicativity).
In addition to the passage-query pairs, the sys-
tem includes regression over representations at
several levels of analysis (section 4). These are
limited in number, focus only on core phenomena,
and are not gold standard representations but in-
stead the best structure of the ones produced. These
are used to detect whether unintentional changes
were introduced to the representations (e.g. new
features were accidentally created).
2 Phenomenon Sets
Real-world sentences involve analysis of multiple
interacting phenomena. Longer sentences tend to
have more diverse sets of phenomena and hence
a higher chance of containing a construction that
the system does not handle well. This can lead to
frustration for grammar engineers trying to track
progress; fixing a major piece of the system can
have little or no effect on a testsuite of real-world
examples. To alleviate this frustration, we have
extensive sets of hand-crafted test examples that
are focused as much as possible on single phe-
nomenon. These include externally developed test-
suites such as the FraCaS (Cooper et al, 1996) and
HP testsuites (Nerbonne et al, 1988). Focused test-
suites are also good for quickly diagnosing prob-
lems. If all the broken examples are in the deverbal
testsuite, for example, it gives grammar engineers
a good idea of where to look for bugs.
The majority of the testsuites are organized by
syntactic and semantic phenomena and are de-
signed to test all known variants of that phe-
nomenon (see (Cohen et al, 2008) on the need
to use testsuites designed to test system coverage
as well as real-world corpora). For the question-
answering system, these include topics such as
anaphora, appositives, copulars, negation, dever-
bal nouns and adjectives, implicatives and factives,
temporals, cardinality and quantifiers, compara-
tives, possessives, context introducing nouns, and
pertainyms. These categories align with many of
50
those cited by (Bos, 2008) in his discussion of se-
mantic parser coverage. Some example passage-
query pairs for deverbal nouns are shown in (3).
(3) a. P: Ed?s abdication of the throne was wel-
come.
Q: Ed abdicated the throne.
A: YES
b. P: Ed?s abdication was welcome.
Q: Ed abdicated.
A: YES
c. P: Ed is an abdicator.
Q: Ed abdicated.
A: YES
Each of the phenomena has three sets of test-
suites associated with it. Sanity sets (section 2.1)
match a passage against itself. The motivation be-
hind this is that a passage should generally entail
itself and that if the system cannot capture this en-
tailment, something is wrong. Query sets (sec-
tion 2.2) match the passage against query versions
of the passage. The simplest form of this is to
have a polarity question formed from the passage.
More complex versions involve negative polarity
questions, questions with different adjuncts or ar-
gument structures, and questions with synonyms or
antonyms. Basic correct sets (section 2.3) are se-
lected passage-query pairs in which the system is
known to obtain the correct answer for the correct
reason. The idea behind these sets is that they can
be run immediately by the grammar engineer af-
ter making any changes and the results should be
100% correct: any mistakes indicates a problem in-
troduced by the grammar engineer?s changes.
2.1 Sanity Sets
The entailment and contradiction detection part
of the system is tested in isolation by matching
queries against themselves. Some example sanity
pairs from the copula testsuite are shown in (4).
(4) a. P: A boy is tall.
Q: A boy is tall.
A: YES
b. P: A girl was the hero.
Q: A girl was the hero.
A: YES
c. P: The boy is in the garden.
Q: The boy is in the garden.
A: YES
d. P: The boy is not in the garden.
Q: The boy is not in the garden.
A: YES
Note that queries in the question-answering sys-
tem do not have to be syntactically interrogative.
This allows the sanity pairs to be processed by
the same mechanism that processes passage-query
pairs with syntactically interrogative queries.
The sanity check testsuites are largely composed
of simple, hand-crafted examples of all the syntac-
tic and semantic patterns that the system is known
to cover. This minimal check ensures that at least
identical representations trigger an entailment.
2.2 Query Sets
The query sets form the bulk of the regression
sets. The query sets comprise passages of the types
found in the sanity sets, but with more complex
queries. The simplest form of these is to form the
polarity question from the passage, as in (5). More
complex queries can be formed by switching the
polarity from the passage to the query, as in (6).
(5) a. P: A boy is tall.
Q: Is a boy tall?
A: YES
b. P: A girl was the hero.
Q: Was a girl the hero?
A: YES
(6) P: The boy is not in the garden.
Q: Is the boy in the garden?
A: NO
To form more complex pairs, adjuncts and ar-
gument structure can be altered from the passage
to the query. These have to be checked carefully
to ensure that the correct answer is coded for the
pair since entailment relations are highly sensitive
to such changes. Some examples are shown in
(7). Alternations such as those in (7c) are crucial
for testing implicativity, which plays a key role in
question answering.
(7) a. P: An older man hopped.
Q: A man hopped.
A: YES
b. P: John broke the box.
Q: The box broke.
A: YES
51
c. P: Ed admitted that Mary arrived.
Q: Mary arrived.
A: YES
A similar type of alteration of the query is to
substitute synonyms for items in the passage, as in
(8). This is currently done less systematically in the
testsuites but helps determine lexical coverage.
(8) a. P: Some governments ignore historical
facts.
Q: Some governments ignore the facts of
history.
A: YES
b. P: The boys bought some candy.
Q: The boys purchased some candy.
A: YES
In addition to the testsuites created by the
question-answering system developers, the query
sets include externally developed pairs, such as
those created for FraCaS (Cooper et al, 1996).
These testsuites also involve handcrafted passage-
query pairs, but the fact that they were developed
outside of the system helps to detect gaps in sys-
tem coverage. In addition, some of the FraCaS
pairs involve multi-sentence passages. Since the
sentences in these passages are very short, they are
appropriate for inclusion in the phenomenon-based
testsuites. Some externally developed testsuites
such as the HP testsuite (Nerbonne et al, 1988) do
not involve passage-query pairs but the same tech-
niques used by the grammar engineers to create the
sanity and the query sets are applied to these test-
suites as well.
2.3 Basic Correct Sets
A subset of the query sets described above are used
to form a core set of basic correct testsuites. These
testsuites contain passage-query pairs that the de-
velopers have determined the system is answering
correctly for the correct reason.
Since these testsuites are run each time the gram-
mar engineer makes a change to the system be-
fore checking the changes into the version control
repository, it is essential that the basic correct test-
suites can be run quickly. Each pair is processed
rapidly because the query sets are composed of
simple passages that focus on a given phenomenon.
In addition, only one or two representatives of any
given construction is included in the basic correct
set; that is, the sanity sets and query sets may con-
tain many pairs testing copular constructions with
adjectival complements, but only a small subset of
these are included in the basic correct set. In the
question-answering system, 375 passage-query
pairs are in the basic correct sets; it takes less than
six minutes to run the full set on standard machines.
In addition, since the basic correct sets are divided
by phenomena, developers can first run those test-
suites which relate directly to the phenomena they
have been working on.
Examining the basic correct sets gives an
overview of the expected base coverage of the
system. In addition, since all of the pairs are
working for the correct reason when they are
added to the basic correct set, any breakage is a
sign that an error has been introduced into the
system. It is important to fix these immediately so
that grammar engineers working on other parts of
the system can use the basic correct sets to assess
the impact of their changes on the system.
3 Real-world Sets
The ultimate goal of the system is to work on real-
world texts used in the application. So, tests of
those texts are important for assessing progress on
naturally occurring data. These testsuites are cre-
ated by extracting sentences from the corpora ex-
pected to be used in the run-time system, e.g. news-
paper text or the Wikipedia.2 Queries are then cre-
ated by hand for these sentences. Once the system
is being used by non-developers, queries posed by
those users can be incorporated into the testsuites to
ensure that the real-world sets have an appropriate
range of queries. Currently, the system uses a com-
bination of hand-crafted queries and queries from
the RTE data which were hand-crafted, but not by
the question-answering system developers. Some
examples are shown in (9).
(9) a. P: The interest of the automotive industry
increases and the first amplifier project, a
four-channel output module for the Ger-
man car manufacturer, Porsche, is fin-
ished.
Q: Porsche is a German car manufacturer.
A: YES
b. P: The Royal Navy servicemen being held
captive by Iran are expected to be freed to-
2If the application involves corpora containing ungram-
matical input (e.g. email messages), it is important to include
both real-world and phenomenon sets for such data.
52
day.
Q: British servicemen detained
A: YES
c. P: ?I guess you have to expect this in
a growing community,? said Mardelle
Kean, who lives across the street from
John Joseph Famalaro, charged in the
death of Denise A. Huber, who was 23
when she disappeared in 1991.
Q: John J. Famalaro is accused of having
killed Denise A. Huber.
A: YES
These real-world passages are not generally use-
ful for debugging during the development cycle.
However, they serve to track progress over time,
to see where remaining gaps may be, and to pro-
vide an indication of system performance in appli-
cations. For example, the passage-query pairs can
be roughly divided as to those using just linguis-
tic meaning, those using logical reasoning, those
requiring plausible reasoning, and finally those re-
quiring world knowledge. Although the bound-
aries between these are not always clear (Sekine et
al., 2007), having a rough division helps in guiding
development.
4 Regression on Representations
There has been significant work on regression test-
ing of a system?s output representations (Nerbonne
et al, 1988; Cooper et al, 1996; Lehmann et al,
1996; Oepen et al, 1998; Oepen et al, 2002): de-
signing of the testsuites, running and maintaining
them, and tracking the results over time. As men-
tioned in the previous discussion, for a complex
system such as a question-answering system, hav-
ing regression testing that depends on the perfor-
mance of the system rather than on details of the
representations has significant advantages for de-
velopment because the regression testsuites do not
have to be redone whenever there is a change to the
system and because the gold standard items (i.e.,
the passage-query pairs with answers) can be cre-
ated by those less familiar with the details of the
system.
However, having a small but representative set
of banked representations at each major level of
system output has proven useful for detecting un-
intended changes that may not immediately disturb
the passage-query pairs.3 This is especially the case
3In addition to running regression tests against representa-
with the sanity sets and the most basic query sets:
with these the query is identical to or very closely
resembles the passage so that changes to the repre-
sentation on the passage side will also be in the rep-
resentation on the query side and hence may not be
detected as erroneous by the entailment and contra-
diction detection.
For the question-answering system, 1200 sen-
tences covering basic syntactic and semantic types
form a testsuite for representations. The best rep-
resentation currently produced by the system is
stored for the syntax, the linguistic semantics, and
the abstract knowledge representation levels. To
allow for greater stability over time and less sen-
sitivity to minor feature changes in the rule sets, it
is possible to bank only the most important features
in the representations may, e.g. the core predicate-
argument structure. The banked representations
are then compared with the output of the system
after any changes are made. Any differences are
examined to see whether they are intentional. If
they were intended, then new representations need
to be banked for the ones that have changed (see
(Rose?n et al, 2005) for ways to speed up this pro-
cess by use of discrimants). If the differences were
not intended, then the developer knows which con-
structions were affected by their changes and can
more easily determine where in the system the er-
ror might have been introduced.
5 Discussion and Conclusions
The testsuites discussed above are continually un-
der development. We believe that the basic ideas
behind these testsuites should be applicable to
other grammar-based systems used in applications.
The passage-query pairs are most applicable to
question-answering and search/retrieval systems,
but aspects of the approach can apply to other sys-
tems.
Some issues that remain for the testsuites dis-
cussed above are extending the use of wh-questions
in passage-query pairs, the division between devel-
opment and test sets, and the incorporation of con-
text into the testing.
5.1 Wh-questions
The testsuites as described have not yet been sys-
tematically extended to wh-questions. The query
tions, the syntax, semantics, and abstract knowledge represen-
tation have type declarations (Crouch and King, 2008) which
help to detect malformed representations.
53
sets can be easily extended to involve some substi-
tution of wh-phrases for arguments and adjuncts in
the passage, as in (10).
(10) a. P: John broke the box.
Q: Who broke the box?
b. P: John broke the box.
Q: What did John break?
c. P: John broke the box.
Q: What broke?
d. P: John broke the box.
Q: What did John do?
e. P: We went to John?s party last night.
Q: Who went to John?s party?
There is a long-standing issue as to how to eval-
uate responses to wh-questions (see (Voorhees and
Tice, 2000a; Voorhees and Tice, 2000b) and the
TREC question-answering task web pages for dis-
cussion and data). For example, in (10a) most peo-
ple would agree that the answer should be John, al-
though there may be less agreement as to whether
John broke the box. is an appropriate answer. In
(10b) and (10c) there is an issue as to whether the
answer should be box or the box and how to assess
partial answers. This becomes more of an issue as
the passages become more complicated, e.g. with
heavily modified nominals that serve as potential
answers. While for (10d) the passage is a good an-
swer to the question, for (10e) presumably the an-
swer should be a list of names, not simply ?we?.
Obtaining such lists and deciding how complete
and appropriate they are is challenging. Since most
question-answering systems are not constrained to
polarity questions, it is important to assess per-
formance on wh-questions as the system develops.
Other, even more complicated questions, for exam-
ple how to questions are also currently out of the
scope of our testsuites.
5.2 Development vs. Testing
For development and evaluation of systems, test-
suites are usually divided into development sets,
which the system developers examine in detail, and
test sets, which represent data unseen by the de-
velopers.4 To a limited extent, the real-world sets
4The usual division is between training, development, and
test sets, with the training set generally being much larger than
the development and test sets. For rule based systems, the
training/development distinction is often irrelevant, and so a
serve as a form of test set since they reflect the per-
formance of the system on real data and are of-
ten not examined in detail for why any given pair
fails to parse. However, the testsuites described
above are all treated as development sets. There are
no reserved phenomenon-based testsuites for blind
testing of the system?s performance on each phe-
nomenon, although there are real-world testsuites
reserved as test sets.
If a given testsuite was created all at once, a ran-
dom sampling of it could be held out as a test set.
However, since there are often only a few pairs per
construction or lexical item, it is unclear whether
this approach would give a fair view of system cov-
erage. In addition, for rule-based systems such
as the syntax and semantics used in the question-
answering system, the pairs are often constructed
based on the rules and lexicons as they were being
developed. As such, they more closely match the
coverage of the system than if it were possible to
randomly select such pairs from external sources.
As a system is used in an application, a test set of
unseen, application-specific data becomes increas-
ingly necessary. Such sets can be created from the
use of the application: for example, queries and
returned answers with judgments as to correctness
can provide seeds for test sets, as well as for ex-
tending the phenomenon-based and real-world de-
velopment testsuites.
5.3 Context
The real sentences that a question-answering sys-
tem would use to answer questions appear in a
larger textual and metadata context. This context
provides information as to the resolution of pro-
nouns, temporal expressions such as today and this
morning, ellipsis, etc. The passage-query pairs in
the testsuites do not accurately reflect how well the
system handles the integration of context. Small
two sentence passages can be used to, for example,
test anaphora resolution, as shown in (11).
(11) P: Mary hopped. Then, she skipped.
Q: Did Mary skip?
A: YES
Even in this isolated example, the answer can be
construed as being UNKNOWN since it is possible,
although unlikely, that she resolves to some other
entity. This type of problem is pervasive in using
distinction is made between those sets used in the development
of the system and those unseen sets used to test and evaluate
the system?s performance.
54
simple passage-query pairs for system regression
testing.
A further issue with testing phenomena linked to
context, such as anaphora resolution, is that they
are usually very complex and can result in signifi-
cant ambiguity. When used on real-world texts, ef-
ficiency can be a serious issue which this type of
more isolated testing does not systematically ex-
plore. As a result of this, the anaphora testsuites
must be more carefully constructed to take advan-
tage of isolated, simpler pairs when possible but
to also contain progressively more complicated ex-
amples that eventually become real-world pairs.
5.4 Summary Conclusions
In complex grammar-based systems, even small
changes may have an unforeseeable impact on sys-
tem performance. Regression testing of the system
and its components becomes crucial for the gram-
mar engineers developing the system.
A key part of regression testing is the testsuites
themselves, which must be designed to accurately
assess coverage and progress and to help to rapidly
identify problems. For broad-coverage grammars,
such as those used in open domain applications like
consumer search and question answering, testsuite
design is particularly important to ensure adequate
coverage of basic linguistic (e.g. syntactic and se-
mantic) phenomena as well as application specific
phenomena (e.g. interpretation of markup, incor-
poration of metadata).
We described a system of passage-query pairs
divided into three types of phenomenon-based test-
suites (sanity, query, basic correct). These allow
for rapid development and specific coverage as-
sessment. In addition, real-world testsuites allow
for overall performance and coverage assessment.
More work is needed to find a systematic way to
provide ?stepping stones? in terms of complexity
between phenomenon-based and real-world test-
suites.
These testsuites are used in conjunction with the
more traditional representation-based regression
testsuites used by grammar engineers. These
representation-based testsuites use the same
phenomenon-based approach in order to assess
coverage and pinpoint problems as efficiently as
possible.
References
Bobrow, Daniel G., Bob Cheslow, Cleo Condoravdi,
Lauri Karttunen, Tracy Holloway King, Rowan
Nairn, Valeria de Paiva, Charlotte Price, and An-
nie Zaenen. 2007. PARC?s bridge and ques-
tion answering system. In King, Tracy Holloway
and Emily M. Bender, editors, Grammar Engineer-
ing Across Frameworks, pages 46?66. CSLI Publica-
tions.
Bos, Johan. 2008. Let?s not argue about semantics. In
Proceedings of LREC.
Chatzichrisafis, Nikos, Dick Crouch, Tracy Holloway
King, Rowan Nairn, Manny Rayner, and Mari-
anne Santaholma. 2007. Regression testing
for grammar-based systems. In King, Tracy Hol-
loway and Emily M. Bender, editors, Proceedings
of the Grammar Engineering Across Frameworks
(GEAF07) Workshop, pages 128?143. CSLI Publica-
tions.
Cohen, K. Bretonnel, William A. Baumgartner Jr., and
Lawrence Hunter. 2008. Software testing and the
naturally occurring data assumption in natural lan-
guage processing. In Software Engineering, Testing,
and Quality Assurance for Natural Language Pro-
cessing, pages 23?30. Association for Computational
Linguistics.
Cooper, Robin, Dick Crouch, Jan van Eijck, Chris
Fox, Josef van Genabith, Jan Jaspars, Hans Kamp,
David Milward, Manfred Pinkal, Massimo Poesio,
and Steve Pulman. 1996. Using the framework.
FraCas: A Framework for Computational Semantics
(LRE 62-051).
Crouch, Dick and Tracy Holloway King. 2006. Seman-
tics via f-structure rewriting. In Butt, Miriam and
Tracy Holloway King, editors, LFG06 Proceedings,
pages 145?165. CSLI Publications.
Crouch, Dick and Tracy Holloway King. 2008. Type-
checking in formally non-typed systems. In Software
Engineering, Testing, and Quality Assurance for Nat-
ural Language Processing, pages 3?4. Association
for Computational Linguistics.
Crouch, Dick, Mary Dalrymple, Ron Ka-
plan, Tracy King, John Maxwell, and Paula
Newman. 2008. XLE documentation.
http://www2.parc.com/isl/groups/nltt/xle/doc/.
Lehmann, Sabine, Stephan Oepen, Sylvie Regnier-
Prost, Klaus Netter, Veronika Lux, Judith Klein,
Kirsten Falkedal, Frederik Fouvry, Dominique Esti-
val, Eva Dauphin, Herve? Compagnion, Judith Baur,
Lorna Balkan, and Doug Arnold. 1996. TSNLP ?
Test Suites for Natural Language Processing. In Pro-
ceedings of COLING 1996.
Nerbonne, John, Dan Flickinger, and Tom Wasow.
1988. The HP Labs natural language evaluation
tool. In Proceedings of the Workshop on Evaluation
of Natural Language Processing Systems.
55
Oepen, Stephan, Klaus Netter, and Judith Klein. 1998.
TSNLP ? Test Suites for Natural Language Process-
ing. In Nerbonne, John, editor, Linguistic Databases,
pages 13?36. CSLI.
Oepen, Stephan, Dan Flickinger, Kristina Toutanova,
and Chris D. Manning. 2002. LinGO Redwoods. a
rich and dynamic treebank for HPSG. In Proceed-
ings of The First Workshop on Treebanks and Lin-
guistic Theories, pages 139?149.
Rose?n, Victoria, Koenraad de Smedt, Helge Dyvik, and
Paul Meurer. 2005. TREPIL: Developing methods
and tools for multilevel treebank construction. In
Proceedings of The Fourth Workshop on Treebanks
and Linguistic Theories.
Sekine, Satoshi, Kentaro Inui, Ido Dagan, Bill Dolan,
Danilo Giampiccolo, and Bernardo Magnini, editors.
2007. Proceedings of the ACL-PASCAL Workshop on
Textual Entailment and Paraphrasing. Association
for Computational Linguistics, Prague, June.
Voorhees, Ellen and Dawn Tice. 2000a. Building a
question answering test collection. In Proceedings
of SIGIR-2000, pages 200?207.
Voorhees, Ellen and Dawn Tice. 2000b. The TREC-8
question answering track evaluation. In Proceedings
8th Text REtrieval Conference (TREC-8), pages 83?
105.
56
