Arabic Morphology Generation Using a Concatenative Strategy 
Violetta Cavalli-Sforza 
Carnegie Technology 
Education 
4615 Forbes Avenue 
Pittsburgh, PA, 15213 
violetta@cs.cmu.edu 
Abdelhadi Soudi 
Computer Science Department 
Ecole Nationale de L'Industrie 
Minerale 
Rabat, Morocco 
asoudi@enim.ac.ma 
Teruko Mitamura 
Language Technologies 
Institute 
Carnegie Mellon University 
Pittsburgh, PA 15213 
teruko @cs.cmu.edu 
Abstract 
Arabic inflectional morphology requires 
infixation, prefixation and suffixation, 
giving rise to a large space of morphological 
variation. In this paper we describe an 
approach to reducing the complexity of 
Arabic morphology generation using 
discrimination trees and transformational 
rules. By decoupling the problem of stem 
changes from that of prefixes and suffixes, 
we gain a significant reduction in the 
number of rules required, as much as a 
factor of three for certain verb types. We 
focus on hollow verbs but discuss the wider 
applicability of the approach. 
Introduction 
Morphologically, Arabic is a non-concatenative 
language. The basic problem with generating 
Arabic verbal morphology is the large number of 
variants that must be generated. Verbal stems 
are based on triliteral or quadriliteral roots (3- or 
4-radicals). Stems are formed by a derivational 
combination of a root morpheme and a vowel 
melody; the two are arranged according to 
canonical patterns. Roots are said to 
interdigitate with patterns to form stems. For 
example, the Arabic stem katab (he wrote) is 
composed of the morpheme ktb (notion of 
writing) and the vowel melody morpheme 'a-a'. 
The two are coordinated according to the pattern 
CVCVC (C=consonant, V=vowel). 
There are 15 triliteral patterns, of which at least 
9 are in common use, and 4 much rarer 
quadriliteral patterns. All these patterns undergo 
some stem changes with respect o voweling in 
the 2 tenses (perfect and imperfect), the 2 voices 
(active and passive), and the 5 moods 
(indicative, subjunctive, jussive, imperative and 
energetic). ~ The stem used in the conjugation of 
the verb may differ depending on the person, 
number, gender, tense, mood, and the presence 
of certain root consonants. Stem changes 
combine with suffixes in the perfect indicative 
(e.g., katab-naa 'we wrote', kutib-a 'it was 
written') and the imperative (e.g. uktub-uu 
'write', plural), and with both prefixes and 
suffixes for the imperfect tense in the indicative, 
subjunctive, and jussive moods (e.g. ya-ktub-na 
'they write, feminine plural') and in the 
energetic mood (e.g. ya-ktub-unna orya-ktub-un 
'he certainly writes'). There are a total of 13 
person-number-gender combinations. Distinct 
prefixes are used in the active and passive voices 
in the imperfect, although in most cases this 
results in a change in the written form only if 
diacritic marks are used. 2
Most previous computational treatments of 
Arabic morphology are based on linguistic 
models that describe Arabic in a non- 
concatenative way and focus primarily on 
analysis. Beesley (1991) describes a system that 
analyzes Arabic words based on Koskenniemi's 
1 The jussive is used in specific constructions, for 
example, negation in the past with the negative 
particle tam (e.g., tam aktub 'I didn't write'). The 
energetic expresses corroboration of an action taking 
place. The indicative is common to both perfect and 
imperfect tenses, but the subjunctive and the jussive 
are restricted to the imperfect tense. The imperative 
has a special form, and the energetic can be derived 
from either the imperfect or the imperative. 
z Diacritic marks are used in Arabic language 
textbooks and occasionally in regular texts to resolve 
ambiguous words (e.g. to mark a passive verb use). 
86 
(1983) two-level morphology. In Beesley 
(1996) the system is reworked into a finite-state 
lexical transducer to perform analysis and 
generation. In two-level systems, the lexical 
level includes hort vowels that are typically not 
realized on the the surface level. Kiraz (1994) 
presents an analysis of Arabic morphology 
based on the CV-, moraic-, and affixational 
models. He introduces a multi-tape two-level 
model and a formalism where three tapes are 
used for the lexical level (root, pattern, and 
vocalization) and one tape for the surface level. 
In this paper, we propose a computational 
approach that applies a concatenative treatment 
to Arabic morphology generation by separating 
the issue of infixation from other inflectional 
variations. We are developing an Arabic 
morphological generator using MORPHE 
(Leavitt, 1994), a tool for modeling morphology 
based on discrimination trees and regular 
expressions. MORPHE is part of a suite of tools 
developed at the Language Technologies 
Institute, Carnegie Mellon University, for 
knowledge-based machine translation. Large 
systems for MT from English to Spanish, 
French, German, Portuguese and a prototype for 
Italian have already been developed. Within this 
framework, we are exploring English to Arabic 
translation and Arabic generation for 
pedagogical purposes. We generate Arabic 
words including short vowels and diacritic 
marks, since they are pedagogically useful and 
can always be stripped before display. 
Our approach seeks to reduce the number of 
rules for generating morphological variants of 
Arabic verbs by breaking the problem into two 
parts. We observe that, with the exception of a 
few verb types, there is very little interaction 
between stem changes and the processes of 
prefixation and suffixation. It is therefore 
possible to decouple, in large part, the problem 
of stem changes from that of prefixes and 
suffixes. The gain is a significant reduction in 
the size number of transformational rules, as 
much as a factor of three for certain verb classes. 
This improves the space efficiency of the system 
and its maintainability by reducing duplication 
of rules, and simplifies the rules by isolating 
different types of changes. 
To illustrate our approach, we focus on a 
particular type of verbs, termed hollow verbs, 
and show how we integrate their treatment with 
that of more regular verbs. We also discuss how 
the approach can be extended to other classes of 
verbs and other parts of speech. 
1 Arabic Verbal Morphology 
Verb roots in Arabic can be classified as shown 
in Figure 1. 3 A primary distinction is made 
between weak and strong verbs. Weak verbs 
have a weak consonant ('w' or 'y') as one or 
more of their radicals; strong verbs do not have 
any weak radicals. 
Strong verbs undergo systematic hanges in 
stem voweling from the perfect o the imperfect. 
The first radical vowel disappears in the 
imperfect. Verbs whose middle radical vowel in 
the perfect is 'a' can change it to 'a' (e.g., 
qaTa'a 'he cut' -> yaqTa'u 'he cuts'), 4 'i' (e.g., 
Daraba 'he hit' -> yaDribu 'he hits'), or 'u' (e.g., 
kataba 'he wrote' -> yaktubu 'he writes') in the 
imperfect. Verbs whose middle radical vowel in 
the perfect is 'i' can only change it to 'a' (e.g., 
shariba 'he drank' -> yashrabu 'he drinks') or 'i' 
(e.g., Hasiba 'he supposed' -> yaHsibu 'he 
supposes'). Verbs with middle radical vowel 'u' 
in the perfect do not change it in the imperfect 
(e.g., Hasuna 'he was beautiful' -> yaHsunu 'he 
is beautiful'). For strong verbs, neither perfect 
nor imperfect stems change with person, gender, 
or number. 
Hollow verbs are those with a weak middle 
radical. In both perfect and imperfect tenses, the 
underlying stem is realized by two characteristic 
allomorphs, one short and one long, whose use 
depends on the person, number and gender. 
3 Grammars of Arabic are not uniform in their 
classification of "hamzated" verbs, verbs containing 
the glottal stop as one of the radicals (e.g. \[sa?a\[\] 'to 
ask'). Wright (1968) includes them as weak verbs, 
but Cowan (1964) doesn't. Hamzated verbs change 
the written 'seat' of the hamza from 'alif' to 'waaw' 
or 'yaa?', depending on the phonetic ontext. 
4 In the Arabic transcription capital letters indicate 
emphatic onsonants; 'H' is the voiceless pharyngeal 
fricative ; " '  the voiced pharyngeal fricative ; '?' is 
the glottal stop 'hamza'. 
87 
I 
strong 
, I 
regular hamzated 
I 
reterit present 
ffect) (imperfect) 
' I 
I I 
active passive 
triliteral 
I 
weak 
I 
I I \[ I 
doubled weak initial weak middle weak final 
radical radical radical radical 
(assimilated) (hollow) (defective) 
I I I 
I 
I I 
tense mood 
I , , I 
participle indicative 
I I I 
imperative subjunctive jussive energetic 
Figure 1: Classification of Arabic Verbal Roots and Mood Tense System 
Hollow verbs fall into four classes: 
. Verbs of the pattern CawaC or  CawuC 
(e.g. \[Tawut\] 'to be long'), where the 
middle radical is 'w'. Their characteristic 
is a long 'uu' between the first and last 
radical in the imperfect. E.g., 
From the underlying root \[zawar\]: 
zaara 'he visited' and yazuuru 'he visits' 
Stem allomorphs: 
Perfect: -zur- and -zaar- 
Imperfect:-zur- and-zuur- 
. Verbs of the pattern CawiC, where the 
middle radical is 'w'. Their characteristic 
is a long 'aa' between the first and last 
radical in the imperfect. E.g., 
From the underlying root \[nawim\]: 
naama 'he slept and yanaamu 'he sleeps' 
Stem aUomorphs : 
Perfect: -nirn- and -naam- 
Imperfect:-ham- and-naam- 
. Verbs of the pattern CayaC, where the 
middle radical is 'y'. Their characteristic 
is a long 'ii' before the first and last radical 
in the imperfect. E.g., 
From the underlying root \[baya" \]: 
baa" a 'he sold' and yabii" u 'he sells' 
Stem allomorphs : 
Perfect: -bi'- and -baa'- 
Imperfect: and -bi'- and -bii'- 
. Verbs of the pattern CayiC, where middle 
radical is 'y'. E.g., 
From the underlying root \[hayib\]: 
haaba 'he feared' and yahaabu 'he fears' 
Stem allomorphs : 
Perfect: -bib- and-haab- 
Imperfect: -hab- and-haab- 
In the relevant literature (e.g., Beesley, 1998; 
Kiraz, 1994), verbs belonging to the above 
classes are all assumed to have the pattern 
CVCVC. The pattern does not show the verb 
conjugation class and makes it difficult to 
predict he type of stem allomorph to use. To 
avoid these problems, we keep information on 
the middle radical and vowel in the base form 
of the verb. In generation, classes 2 and 4 of 
the verb can be handled as one because they 
have the same perfect and imperfect stemsP 
5 The only exception is the passive participle. Verbs 
of classes 1 and 2 behave the same (e.g. Class 1: 
\[zawar\]: mazuwr 'visited'; Class 2 \[nawil\] --) 
manuwt 'obtained'), as do verbs of classes 3 and 4 
(e.g. Class 3: \[baya'\]  --) mabii" 'sold', Class 4: 
\[hayib\] --) mahiib 'feared'). 
88 
We describe our approach to modeling strong 
and hollow verbs below, following a 
description of the implementation framework. 
2 The MORPHE System 
MORPHE (Leavitt, 1994) is a tool that 
compiles morphological transformation rules 
into either a word parsing program or a word 
generation program. 6 In this paper we will 
focus on the use of MORPHE in generation. 
Input and Output. MORPHE's output is 
simply a string. Input is a feature structure 
(FS) which describes the item that MORPHE 
must transform. A FS is implemented as a 
recursive Lisp list. Each element of the FS is a 
feature-value pair (FVP), where the value can 
be atomic or complex. A complex value is 
itself a FS. For example, the FS for generating 
the Arabic zurtu 'I visited' would be: 
((ROOT "zawar") 
(CAT V) (PAT CVCVC) (VOW HOL) 
(TENSE PERF) (MOOD IND) 
(VOICE ACT) 
(NI/MBER SG) (PERSON i)) 
The choice of feature names and values, other 
than ROOT, which identifies the lexical item to 
be transformed, is entirely up to the user. The 
FVPs in a FS come from one of two sources. 
Static features, such as CAT (part of speech) 
and ROOT, come from the syntactic lexicon, 
which, in addition to the base form of words, 
can contain morphological and syntactic 
features. Dynamic features, such as TENSE and 
NUMBER, are set by MORPHE's caller. 
The Morphological Form Hierarchy. 
MORPHE is based on the notion of a 
morphological form hierarchy (MFH) or tree. 
Each internal node of the tree specifies a piece 
of the FS that is common to that entire 
subtree. The root of the tree is a special node 
that simply binds all subtrees together. The 
leaf nodes of the tree correspond to distinct 
morphological forms in the language. Each 
node in the tree below the root is built by 
specifying the parent of the node and the 
conjunction or disjunction of FVPs that define 
the node. Portions of the Arabic MFH are 
shown in Figures 2-4. 
Transformational Rules. A rule attached to 
each leaf node of the MFH effects the desired 
morphological transformations for that node. 
A rule consists of one or more mutually 
exclusive clauses. The 'if' part of a clause is a 
regular expression pattern, which is matched 
against he value of the feature ROOT (a string). 
The 'then' part includes one or more operators, 
applied in the given order. Operators include 
addition, deletion, and replacement of prefixes, 
infixes, and suffixes. The output of the 
transformation is the transformed ROOT string. 
An example of a rule attached to a node in the 
MFH is given in Section 3.1 below. 
Process Logic. In generation, the MFH acts as 
a discrimination etwork. The specified FS is 
matched against the features defining each 
subtree until a leaf is reached. At that point, 
MORPHE first checks in the irregular forms 
lexicon for an entry indexed by the name of the 
leaf node (i.e., the MF) and the value of the 
ROOT feature in the FS. If an irregular form is 
not found, the transformation rule attached to 
the leaf node is tried. If no rule is found or 
none of the clauses of the applicable rule 
match, MORPHE returns the value of ROOT 
unchanged. 
3 Handling Arabic Verbal 
Morphology in MORPHE 
Figure 2 sketches the basic MFH and the 
division of the verb subtree into stem changes 
and prefix/suffix additions. 7 The inflected verb 
is generated in two steps. MORPHE is first 
called with the feature CHG set to STEM. The 
required stem is returned and temporarily 
substituted for the value of the ROOT feature. 
6 MORPHE is written in Common Lisp and the 
compiled MFH and transformation rules are 
themselves a set of Common Lisp functions. 
7 The use of two parts of the same tree for the two 
problems is a constraint of MORPHE's 
implementation, which does not permit multiple 
trees with separate roots. 
89 
The second call to MORPHE, with feature CHG 
set to PSFIX, adds the necessary prefix and/or 
suffix and returns the fully inflected verb. 
N) (CAT ADJ) 
A 
(CHG STEM) (CHG PSFIX) 
(PA~T~CCVC)  other forms 
( V O ~ I C E  PAS) 
(TENSE PERF) (TENSE IMPERF) /x /X 
Figure 2 : The Basic Verb Hierarchy 
Figure 2 also shows some of the features used 
to traverse the discrimination tree. The feature 
PAT is used in conjunction with the ROOT 
feature to select the appropriate affixes. 
Knowing the underlying root and its voweling 
is crucial for the determination f hollow verb 
stems, as described in Section 1. Knowing the 
pattern is also important in cases where it is 
unclear. For example, verbs of pattern 
CtVCVC insert a 't' after the first radical (e.g. 
ntaqat 'to move, change location', 
intransitive). With some consonants as first 
radicals, in order to facilitate pronunciation, 
the 't' undergoes a process of assimilation 
whose effects differ depending on the 
preceding consonant. For example, the pattern 
CtVCVC verb from zaHam 'to shove' instead 
of *ztaHarn is zdaHam 'to team'. It is also 
difficult to determine from just the string 
ntaqat whether this is pattern CVCVC of the 
verb *taqat (if it existed) or pattern CtVCVC 
of naqat 'to transport, move', transitive). 
3.1 Handling Strong and Hollow Verb 
Morphology in MORPHE 
As a demonstration of our approach, we 
discuss the case of hollow verbs, whose 
characteristics were described in Section 1. 
Figure 3 shows the MFH for strong and hollow 
verbs of pattern CVCVC in the perfect ense, 
active voice. We use the feature vow to carry 
information about the voweling of the verb in 
the imperfect (discussed below) and overload it 
to distinguish ollow and other kinds of verbs. 
(TENSE PERF) / ' , ,  
~ (VOW (*or* a i u)) A 
(PERS (*or* 1 2)) (PERS 3) 
short s t e m ~  
(NUM (*or* sl~ dl)) (NUM PL) 
long stem 
(GENDER M) (GENDER F) 
long stem short stem 
Figure 3: The Perfect Stem Change Subtree for 
Strong and Hollow Verbs of Pattern CVCVC 
In the perfect active voice, regular strong verbs 
do not undergo any stem changes, but doubled 
radical verbs do. Rules effecting these changes 
are attached to the node labeled with the FVP 
(vow (*or* a i u)). 8 The hollow verbs, on the 
other hand, use a long stem with a middle 'alif' 
(e.g. \[daam\] 'to last') for third person singular 
and dual (masculine and feminine) and for 
third person plural masculine. The remaining 
person-number-gender combinations take a 
short stem whose voweling depends on the 
underlying root of the verb, as specified earlier. 
Transformation rules attached to the leaf nodes 
perform the conversion of the ROOT feature 
value to the short and long stem. 
Inside the stem change rules, the four different 
classes of hollow verbs are treated as three 
separate conditions (classes 2 and 4 can be 
merged, as described in Section 1) by matching 
on the middle radical and the adjacent vowels 
and replacing them with the appropriate vowel. 
8 Hamzated verbs changes are due to interactions 
with specific suffixes and are best dealt with in the 
prefixation and suffixation subtree. 
90 
An example of such a rule, which changes the 
perfect stem to a short one for persons 1 and 2 
both singular and plural, follows. 
(morph-rule v-stem-fl-act-perf-12 
("^%{cons}(awa)%{cons}$" 
(ri *i* "u")) 
("^%{cons}(a\[wy\]i)%{cons}$" 
(ri *i* "i")) 
("^%{cons}(aya)%{cons)$" 
(ri *i* "i"))) 
The syntax %{var} is used to indicate 
variables with a given set of values. Enclosing 
a string in parenthesis associates it with a 
numbered register, so the replace infix (ri) 
operator can access it for substitution. 
Figure 4 shows the imperfect subtree for strong 
and hollow verbs. Strong verbs are treated 
efficiently by three rules branching on the 
middle radical vowel, given as the value of 
vow. The consonant-vowel pattern of the 
computed stem is shown (e.g. for kataba 'he 
wrote', the imperfect stem would be -ktub- in 
the pattern CCuC). As described in Section 1, 
the possible vowel in the imperfect is restricted 
but not always determined by the perfect 
vowel and so must be stored in the syntactic 
lexicon. 9 Separating stem changes from the 
addition of prefixes and suffixes significantly 
reduces the number of transformation rules that 
must be written by eliminating much repetition 
of prefix and suffix addition for different stem 
changes. For strong verbs of pattern CVCVC, 
there is at least a three-fold reduction in the 
number of rules for active voice (recall the 
different kinds of vowel changes for these 
verbs from perfect to imperfect described in 
Section 1). Other patterns and the passive of 
pattern CVCVC verbs show less variation in 
stem voweling but more variation in prefix and 
suffix voweling. Since some of the patterns 
share the same prefix and suffix voweling, 
once the stem has been determined, the 
prefixation and suffixation rules can be shared 
by pattern groups. 
The hollow verb subtree is not as small for the 
imperfect as it is for the perfect, since the stem 
depends not only on the mood but also on the 
person, gender, and number. It is still 
advantageous to decouple stem changes from 
prefixation and suffixation. Suffixes differ in 
the indicative and subjunctive moods; if the 
two types of changes were merged, the stem 
transformations would have to be repeated in 
each of the two moods and for each person- 
number-gender combination. The same 
observation applies to stem changes in the 
passive voice as well. Significant replication 
of transformational rules that include stem 
changes makes the system bigger and harder to 
maintain in case of changes, particularly 
because each transformational rule needs to 
take into consideration the four different 
classes of hollow verbs. 
3.2 An Example of Generation 
Consider again the example verb form zurtu 'I 
visited' and the feature structure (FS) given in 
Section 2. During generation, the feature- 
value pair (CHG STEM) is added to the FS 
before the first call to MORPHE. Traversing 
the MFH shown in Figure 2, MORPHE finds 
the rule v-stem-fl-act-perf-12 given in 
Section 3.1 above. The first clause fires, 
replacing the 'awa' with 'u' and MORPHE 
returns the stem -zur-. This stem is substituted 
as the value of the ROOT feature in the FS and 
the feature-value pair (CHG STEM) is changed 
to (CHG PSFIX) before the second call to 
MORPHE. This time MORPHE traverses a
different subtree and reaches the rule: 
(morph-rule v-psfix-perf-l-sg 
It II 
(+s "otu") ) ) 
This rule, currently simply appends "otu" to 
the string, and MORPHE returns the string 
"zurotu", where the 'o' denotes the diacritic 
"sukuun" or absence of vowel. This is the 
desired form for zurtu 'I visited'. 
9 In the presence of certain second and third 
radicals, the middle radical vowel is more precisely 
determined. This information can be incorporated 
into the syntactic lexicon as it is being built. 
91 
(TENSE IMPERF) 
(VOW HOL) (VOW a) (VOW i) (VOW u) 
(MOOD (*or* IND SUB)) 
(NUM (*or* sg dl)) (NUM PL) 
l o n ~ ~ ' ~  
(PERS l) ~ 
(PERS (*or* 2 3)) (PERS (*or* 2 3)) 
(GENDER M) (GENDER F) 
long stem short stem 
CCaC CCiC CCuC 
(MOOD JUS) 
(NUM SG) 
(PERS (*or* 1 3)) (PERS 2) 
short s t e ~  
(GENDER M) 
short stem 
(NUM DL) (NUM PL) 
long s t e m ~  
(PERS I) / 
(GENDER F) (PERS (*or* 2 3)) (PERS (*or* 2 3)) 
long stem (GENDER M) (GENDER F) 
long stem short stem 
Figure 4: The Imperfect Stem Change Subtree for Strong and Hollow Verbs of Pattern CvCvC 
4 Extensions 
In this paper so far we have focused on regular 
and hollow verbs of the pattern CVCVC. Here 
we examine how our approach applies to other 
verb types and other parts of speech. 
4.1 Extending the Approach to Other 
Verb Types 
The two-step treatment of verbal inflection 
described in this paper is easily extended to the 
passive, to doubled radical and hamzated 
verbs, and to different patterns of strong and 
hollow verbs. In fact, since not all higher 
patterns are affected by the presence of a 
middle or weak radical (e.g. patterns CVCCV, 
CaaCVC, taCVCCVC and others), the subtrees 
for these patterns will be significantly less 
bushy than for pattern CVCVC. The two-step 
treatment also covers verbs with a weak first 
radical, especially the radical 'w', which is 
normally dropped in the active imperfect (e.g. 
perfect stem warad 'to come', imperfect stem -
rid-). ~? Alternatively, it can be placed in the 
10 Exceptions to this rule exist (e.g. the verb waji\[ 
'to be afraid'), with imperfect stem - wjat-) but are 
rare and can be handled in MORPHE by placing the 
irregular stem in the syntactic lexicon and checking 
for it prior to calling MORPHE for stem changes. 
irregular lexicon, which MORPHE consults 
when it reaches a leaf node, prior to applying 
any of the transformational ru es. 
Verbs with a weak third radical, including 
doubly or trebly weak verbs, are the most 
problematic since the stem changes interact 
heavily with the inflectional suffixes, and less 
is gained by trying to modify the stem 
separately. We are currently investigating this 
issue and the best way to treat it in MORPHE. 
4.2 Extending the Approach to Other 
Parts of Speech 
The two-step approach to generating verbal 
morphology also presents advantages for the 
inflectional morphology of nouns and 
adjectives. In Arabic, the plural of many 
nouns, especially masculine nouns, is not 
formed regularly by suffixation. Instead, the 
stem itself undergoes changes according to a 
complex set of patterns (e.g. rajut 'man' 
pluralizes as rijaat 'men'), giving rise to so- 
called "broken plurals". The inflection of 
broken plurals according to case (nominative, 
genitive, accusative) and definiteness, 
however, is basically the same as the inflection 
The radical 'y' is largely not dropped or changed. 
92 
of most masculine or feminine singular nouns. 
The same holds true for adjectives. 
Finally we note that our two-step approach can 
also be used to combine derivational and 
inflectional morphology for nouns and 
adjectives. Deverbal nouns and present and 
past participles can be derived regularly from 
each verb pattern (with the exception of 
deverbal nouns from pattern CVCVC). 
Relational or "nisba" adjectives are derived, 
with small variations, from nouns. Since these 
parts of speech are inflected as normal nouns 
and adjectives, we can perform derivational 
and inflectional morphology in two calls to 
MORPHE, much as we do stem change and 
prefix/suffix addition. 
Conclusion 
We have presented a computational model that 
handles Arabic morphology generation 
concatenatively by separating the infixation 
changes undergone by an Arabic stem from the 
processes of prefixation and suffixation. Our 
approach was motivated by practical concerns. 
We sought to make efficient use of a 
morphological generation tool that is part of 
our standard environment for developing 
machine translation systems. The two-step 
approach significantly reduces the number of 
morphological transformation rules that must 
be written, allowing the Arabic generator to be 
smaller, simpler, and easier to maintain. 
The current implementation has been tested on 
a subset of verbal morphology including 
hollow verbs and various types of strong verbs. 
We are currently working on the other kinds of 
weak verbs: defective and assimilated verbs. 
Other categories of words can be handled in a 
similar manner, and we will turn our attention 
to them next. 
References 
K. Beesley. 1990. Finite-State Description of 
Arabic Morphology. In Proceedings of the 
Second Cambridge Conference: Bilingual 
Computing in Arabic and English. 
K. Beesley. 1991. Computer Analysis of Arabic: A 
Two-Level Approach with Detours. In B. Comrie 
and M. Eid, editors, Perspectives on Arabic 
Linguistics III: Papers from the Third Annual 
Symposium on Arabic Linguistics. Benjamins, 
Amsterdam, pages 155-172. 
K. Beesley. 1996. Arabic Finite-State 
Morphological Analysis and Generation. In 
Proceedings COLING'96, Vol. 1, pages 89-94. 
K. Beesley. 1998. Consonant Spreading in Arabic 
Stems. In Proceedings of COLING'98. 
D. Cowan. 1964. An introduction to modern 
literary Arabic. Cambridge University Press, 
Cambridge. 
G. Hudson. 1986. Arabic Root and Pattern 
Morphology without Tiers. Journal of 
Linguistics, 22:85-122. 
G. Kiraz. 1994. Multi-tape Two-level Morphology: 
A Case study in Semitic Non-Linear 
Morphology. In Proceedings of COLING-94, 
Vol. 1, pages 180-186. 
K. Koskenniemi. 1983. Two-level morphology: A
General Computational Model for Word-Form 
Recognition and Production. PhD thesis, 
University of Helsinki. 
A. Lavie, A. Itai, U. Ornan, and M. Rimon. 1988. 
On the Applicability of Two Level Morphology 
to the Inflection of Hebrew Verbs. In 
Proceedings of the Association of Literary and 
Linguistic Computing Conference. 
J.R. Leavitt. 1994. MORPHE: A Morphological 
Rule Compiler. Technical Report, CMU-CMT- 
94-MEMO. 
J. McCarthy and A. Prince. 1990. Foot and Word 
in Prosodic Morphology: The Arabic Broken 
Plural. Natural Language and Linguistics 
Theory, 8: 209-283. 
J. McCarthy and A. Prince. 1993. Template in 
Prosodic Morphology. In Stvan, L. et al, editors, 
Papers from the Third Annual Formal Linguistics 
Society of Midamerica Conference,. 
Bloomington, Indiana. Indiana University 
Linguistics Club, pages 187-218. 
G. Ritchie. 1992. Languages Generated by Two- 
Level Morphological Rules. Computational 
Linguistics, 18(1), pages 41-59. 
R. Sproat. 1992. Morphology and Computation. 
MIT Press, Cambridge, Mass. 
H. Wehr. 1971. A Dictionary of Modern Written 
Arabic, J.M. Cowan, editor. Spoken Language 
Services, Ithaca, NY, fourth edition. 
W. Wright. 1988. A Grammar of the Arabic 
Language. Cambridge University Press, 
Cambridge, third edition. 
93 
Proceedings of the 5th Workshop on Important Unresolved Matters, pages 81?88,
Prague, Czech Republic, June 2007. c?2007 Association for Computational Linguistics
An Arabic Slot Grammar Parser 
Michael C. McCord 
 
IBM T. J. Watson Research Center 
P.O.B. 704 
Hawthorne, NY 10532 
mcmccord@us.ibm.com 
Violetta Cavalli-Sforza 
Language Technologies Institute 
Carnegie Mellon University 
5000 Forbes Avenue 
Pittsburgh, PA 15213 
violetta@cs.cmu.edu 
 
 
Abstract 
We describe a Slot Grammar (SG) parser 
for Arabic, ASG, and new features of SG 
designed to accommodate Arabic as well as 
the European languages for which SGs 
have been built.  We focus on the integra-
tion of BAMA with ASG, and on a new, 
expressive SG grammar formalism, SGF, 
and illustrate how SGF is used to advan-
tage in ASG. 
1 Introduction 
In this paper we describe an initial version of a Slot 
Grammar parser, ASG, for Arabic.  Slot Grammar 
(SG) (McCord, 1980. 1993) is dependency-
oriented, and has the feature that deep structure 
(via logical predicate arguments) and surface struc-
ture are both shown in parse trees. 
    A new formalism SGF (Slot Grammar Formal-
ism) for SG syntax rules has been developed 
(McCord, 2006), and the ASG syntax rules are 
written in SGF.  SGF is largely declarative, and 
can be called ?object-oriented? in a sense we will 
explain.  The rules in SGF all have to do with slot 
filling.   
ASG uses BAMA (Buckwalter, 2002), in a ver-
sion from Qamus, as its morphological analyzer.  
All the internal processing of ASG is done with the 
Buckwalter Arabic transliteration ? though of 
course ASG can take real Arabic script (in UTF-8 
form) as input.  We use BAMA features in the 
processing (and parse trees), but augmented with 
other features more unique to ASG.  The Penn 
Arabic Treebank (ATB), which also uses BAMA 
features, has served as a development guide in the 
work.  But SG is a rule-based system, and there is 
no automatic training from the ATB. 
Prior to this work, SGs had been written for 
English (McCord), German (Claudia Gdaniec), and 
for the Romance languages (Esm?ralda Manandise) 
Spanish, French, Italian and Portuguese.  For han-
dling Arabic, there have been two main new adap-
tations of SG.   
One adaptation is in the treatment of features in 
the form that BAMA delivers.  This treatment in-
cludes a feature lexicon in ASG, which can specify 
two kinds of relations among features, which we 
will describe below.  We also take steps to handle 
the large number of analyses returned by BAMA.  
Special treatment of features appears as well in the 
SGF syntax rules.  The other main adaptation is in 
the treatment of clitics, where special things hap-
pen in Arabic for proclitics. 
Although the basic ideas of SG have not 
changed in treating Arabic, ASG has been serving 
as a test bed for the new syntax rule formalism 
SGF.   
Overall, the design of the SG system has be-
come neater by including Arabic as well as the 
European languages.  For instance, the new treat-
ment of features generalizes the existing treatment 
in the German SG.  And the new treatment of cli-
tics will make the treatment of clitics for the Ro-
mance languages neater. 
In Section 2, we discuss the ASG feature system.  
Section 3 briefly describes the ASG slot frame 
lexicon.  Sections 4 and 5 deal with syntactic 
analysis.  In Section 6, we discuss current perform-
ance of ASG  (coverage and speed), and in Section 
7, related work. 
81
2 The Feature System 
Features for an SG parser for language X are speci-
fied externally as character strings, listed by the 
grammar writer in the feature lexicon Xfeas.lx (Ar-
feas.lx for Arabic).  Internally, features are repre-
sented in two ways, for efficient processing:  (1) 
The features themselves are ?atoms?, represented 
by integers.  (2) The set of features for a parse 
node is represented by a bit string, where each fea-
ture atom is assigned a bit position.  For ASG, 
these bit strings are currently of length 512.  But 
these internal representations are invisible to the 
grammar writer. 
In the set of features for a node, some subsets 
can be viewed disjunctively.  For instance if a noun 
is ambiguously singular or plural, it might have 
both features sg and pl.  This situation occurs 
very much for Arabic text input because of the 
ambiguity due to unvocalized script.  In order not 
to choke the parse space, the  SG-BAMA interface 
combines some BAMA analyses, basically ones 
that have the same stem and POS, so that nodes 
have disjunctive BAMA features.  But agreement 
rules or slot filler constraints often reduce the 
ambiguity.  Such rules, specified in a  perspicuous 
way in SGF, as we will see below, are 
implemented internally by intersecting the bit 
string representations of relevant feature sets. 
For ASG, there are two categories of features. 
One category consists of BAMA compound 
features like  
 
NOUN+NSUFF_FEM_PL+CASE_DEF_ACC  
 
(indicating a feminine plural definite accusative 
noun).  Although such features are compound in 
intent, they are treated as atomic symbols by ASG 
(as are all features specified in Xfeas.lx).   
Features of the other category are more special 
to ASG.  Some of them have to do with syntactic 
structure (like presence of an overt subject), and 
others are morphological.  Typical morphological 
features are standard, simple ones that appear in 
sets of values for attributes like case, number, 
gender, and definiteness ? for example: 
 
nom, acc, gen 
sg, dual, pl 
m, f, 
def, indef 
   
Besides declaring features, Xfeas.lx can specify 
relations between features.  One way is to specify 
simple hierarchical relations.  An entry of the form      
   
x  <  y ? z ? 
 
specifies that feature x implies features y ?  z.  This 
means for instance that if the feature x is marked 
on a node, then a test in the grammar for feature y 
will succeed.  Hierarchical information like this is 
stored internally in bit string arrays and allows ef-
ficient processing.     
If an entry is of the form 
 
x  < ?  >   u ?  v 
 
then we say that x extends the feature set {u ... v}, 
and x is an extending feature.  The basic idea is that 
x is a kind of abbreviation for the disjunction of the 
set {u ... v}, but x may appear on a node independ-
ently of that set.  We will explain the exact mean-
ing in the section below on the syntax rules.  A 
typical example of an extending feature rule in Ar-
feas.lx is as follows: 
 
gen < > 
  NOUN+NSUFF_FEM_DU_GEN 
  NOUN+NSUFF_FEM_PL+CASE_DEF_GEN 
  NOUN+NSUFF_FEM_PL+CASE_INDEF_GEN    
    ...  
 
where we list all BAMA compound features that 
include a genitive subfeature.  Rules in the syntax 
component can test simply for extending features 
like gen, as we will see below.  The syntax com-
ponent does not even mention BAMA features.  
But this representational scheme allows us to keep 
BAMA compound features as units -- and this is 
important, because the morphological analysis 
(with ambiguities shown) requires such groupings.  
The internal representation of an extending feature 
relationship of x to {u ... v} associates with the 
atom for x the disjunction of the bit strings for u ... 
v, and the processing is quite efficient.   
Although the features in Xfeas.lx are generally 
morphosyntactic, and have internal atom and bit 
string position representations in limited storage 
areas, SG also allows open-ended features, which 
may be used in the SG lexicon and tested for in the 
syntax component.  These are typically semantic 
features. 
82
3 The SG Lexicon 
Although BAMA contains lexicons for doing 
Arabic morphological analysis, an SG needs its SG 
lexicon to drive syntactic analysis and help pro-
duce parse trees that show (deep) predicate argu-
ment structure.  The main ingredients associated 
with index words in an SG lexicon are sense 
frames.  A sense frame can specify a part of speech 
(POS), features (typically semantic features), a slot 
frame, and other ingredients.  The most important 
ingredient is the slot frame, which consists of an 
ordered list of (complement) slots.  Slots can be 
thought of as grammatical relations, but also as 
names for logical arguments for word sense predi-
cates.  An example from the ASG lexicon, called  
Ar.lx,  is: 
 
Eoniy < v (obj n fin) 
 
This says that Eoniy () is a verb (stem) with a 
direct object slot (obj) which can be filled by ei-
ther an NP (indicated by the n) or a finite VP (in-
dicated by the fin).  A slot can be either an atomic 
symbol or a list of the form 
 
(SlotName Option1 ? Optionn) 
 
where the options are terms that specify conditions 
on the fillers of the slot.  If no options are specified, 
then defaults are used.  The Eoniy () example 
shows no subject slot, but the default is that every 
verb has a subject slot (even though it may not be 
overtly filled).  One can specify a subject slot 
(subj) if it needs non-default options.   
For the index words for ASG, we are currently 
using vocalized stems ? stems as in the ATB, or as 
produced by BAMA.  To produce a starter for 
Ar.lx, we extracted stems from the ATB, listed by 
frequency, and associated default sense frames 
based on the BAMA features in the ATB.  Using 
vocalized stems entails some repetition of sense 
frames, since there can be more than one vocalized 
stem for a given word sense. 
Index words in the SG lexicon can also be mul-
tiwords.  Some multiword entries occur in Ar.lx. 
Morpholexical analysis for ASG combines 
BAMA analysis with look-up in Ar.lx.  BAMA 
provides morphological features (BAMA com-
pound features) associated with vocalized stems.  
Also, an algorithm in ASG separates clitics out of 
the BAMA analyses and represents them in a form 
convenient for the parser.  The vocalized stems are 
looked up in Ar.lx, and the sense frames found 
there (if look-up is successful) are merged with 
compatible analyses from BAMA.  If look-up in 
Ar.lx fails, then the BAMA analyses can still be 
used, with default slot frames assigned.  In the 
other direction, look-up in BAMA may fail, and 
special entries in Ar.lx can cover such words 
(specifying morphological features as well as slot 
frames). 
4 The Parsing Algorithm 
The SG parser is a bottom-up chart parser.  Ini-
tial chart elements are one-word (or one-multiword) 
phrases that arise from morpholexical analysis.  All 
further chart elements arise from binary combina-
tions of a modifier phrase M with a higher phrase 
H, where M fills a slot S in H.  The slot S could be 
a complement slot which is stored with H, having 
arisen from the lexical slot frame of the word sense 
head of H.  Or S could be an adjunct slot associated 
with the POS of M in the syntax rule component 
X.gram.  In both cases, the conditions for filling S 
are specified in X.gram.  The parser attaches post-
modifiers first, then premodifiers.     
   Normally, M and H will be existing adjacent 
phrases in the chart.  But there is an interesting 
treatment of clitics that is especially relevant for 
Arabic.  The SG data structure for a phrase P in-
cludes two fields for clitics associated with the 
head word of P ? a list of proclitics, and a list of 
enclitics. Each clitic is itself a (one-word) phrase 
data structure, ready to be used for slot filling.  So 
the parsing algorithm can combine not only adja-
cent phrases in the chart in the normal way, but can 
also combine a phrase with one of its clitics.  For 
Arabic, all enclitics (typically pronouns) for a 
phrase P are attached to P (by postmodification) 
before P enters into any other slot filling.  On the 
other side, proclitics (typically conjunctions and 
prepositions) of P are used only as higher phrases 
where P is the modifier.  But a proclitic can get 
?passed upwards? before it is treated as a higher 
phrase.  A non-deterministic option in the parser is 
that a phrase M becomes a premodifier of an adja-
cent phrase H in the chart, and the proclitic list of 
M is passed up to become the proclitic list of H.  
For instance a conjunction like ?w?/?wa? [ , ?and?] 
might be attached as a proclitic to the first word in 
83
a (premodifying) subject of a clause C, and the 
conjunction proclitic gets passed upwards until it 
finally takes C as a postconjunct modifier. 
    Although SG is a rule-based system, it does use 
a numerical scoring system for phrases during 
parsing.  Real numbers are attached to phrases, 
indicating, roughly, how likely it is that the phrase 
is a good analysis of what it spans.  Partial analy-
ses (phrases) can be pruned out of the chart if their 
scores are too bad.  Also, final parses get ranked by 
their scores.  Scores can arise from rules in the 
syntax component, in the lexicon, or in the shell.  
A general rule in the shell is that complement slots 
are preferred over adjunct slots.  The specific val-
ues of scores are normally determined by the 
grammar writer, with regression testing.     
5 The ASG Syntax Rule Component 
In an SG syntax rule component X.gram  
(Ar.gram for Arabic), the rules are written in the 
formalism SGF (McCord, 2006).  Each rule deals 
with slot filling, and is either a complement slot 
rule or an adjunct slot rule.  Each rule is of the 
form 
 
S  <  Body 
 
where S is the index, which is a complement slot 
for a complement slot rule, or a POS for an adjunct 
slot rule.  The Body is basically a logical expres-
sion (in a form we will describe) which is true iff 
the corresponding slot filling can succeed.  The 
rules can be viewed largely declaratively, even 
though there are some operators that look like 
commands.    
    The rule system is applied by the parsing algo-
rithm when it is looking at specific phrases M and 
H that are adjacent or have a clitic relationship, and 
asking whether M can fill a slot in H.  For a yet 
unfilled complement slot S of H, with a chosen slot 
option, the parser looks for the complement slot 
rule in X.gram indexed by S, and applies its body, 
requiring that to be true before doing the slot fill-
ing.  And the parser also looks at the POS of M, 
finds the corresponding adjunct slot rule indexed 
by that POS, and applies its body.  In this case, the 
body determines what the adjunct slot and option 
are; and it can do so non-deterministically:  The 
body may be a disjunction, with operator ||, of sev-
eral sub-bodies, which are all tried for insertion of 
the filled version of H into the chart.  Complement 
slot rules can also use the infix operator || for dis-
junctions of the body on the top level, but in this 
case the || behaves deterministically ? as in an if-
then-else. 
    A simple example of a complement slot rule is 
the following, for the object of a preposition: 
 
objprep < 
   ri 
   (opt n) 
   (mpos noun) 
   (extmf gen) 
   (removemf nom acc) 
   satisfied 
 
The body is a sequence of tests which are viewed 
conjunctively.  The first test, ri, means that the 
filler M is on the ? right?  of H (a postmodifier).  
The opt test checks that the slot option is n, re-
quiring an NP.  The next test requires that the filler 
M has POS noun.  In SGF rules, the letter m in 
operators indicates the filler M as an implicit oper-
and, and h indicates the higher phrase H.   
    The term (extmf gen) is an extending feature 
test on M for the feature gen (genitive).  This will 
succeed iff either gen is marked explicitly on M or 
M has at least one of the BAMA features associ-
ated with gen in the extending feature rule for gen 
in Arfeas.lx (see Section 2).  The test (removemf 
nom acc) always succeeds, and it will remove  
explicit occurrences of  nom or acc on M, as well 
as any BAMA features associated with those fea-
tures by extending feature rules. 
    Finally, the test satisfied succeeds iff M has 
no unfilled obligatory complement slots. 
    The syntax of the SGF formalism is Cambridge 
Polish (Lisplike), except for the uses of the binary 
operators < and ||.  There are quite a number of 
? built-in?  operators in SGF, and many of them can 
take any number of arguments.   
    Tests in SGF can be nested; some operators, in-
cluding all the logical operators, can contain other 
tests as arguments.  We mentioned that SGF is 
? object-oriented?  in a certain sense.  In any given 
test, however much embedded, there is always a 
phrase in focus, which is an implicit argument of 
the test.  The phrase in focus can be considered 
like this in object-oriented languages.  The de-
fault phrase in focus on top-level tests is M (the 
modifier).  But some operators can shift the focus 
84
to another phrase, and this can happen an unlimited 
number of times in nested tests.  For example, a 
test of the form 
 
       (rmod Test1 ... Testn)      
      
searches the postmodifiers of the current phrase in 
focus and succeeds iff, for one of them as a new 
phrase in focus, all of the test arguments are satis-
fied.  This scheme allows for quite compact ex-
pressions for searching and testing parse trees. 
    Now let us look at (a modified form of) an ad-
junct slot rule in Ar.gram, for adjectives that post-
modify nouns: 
 
adj < 
   ri 
   (hf noun) 
   (agreef nom acc gen) 
   (agreef def indef) 
   (if (& (exthf pl) (nhf h)) 
       /* then */ 
       (extmf sg f) 
       /* else */ 
       (& (agreef sg pl dual) 
          (agreef m f) ) ) 
   satisfied 
   (setslot nadj) 
   (setopt aj) 
 
    So the filler M should be an adjective phrase.  
The first two tests check that M postmodifies H, 
and H is a noun phrase.  The main operator here is  
agreef, which works with a list of extending fea-
tures.  The list of features should consist of the 
possible values of an attribute like case, number, 
gender, etc.  The agreef test will succeed iff M 
and H agree along this dimension.  For at least one 
of the argument features, both M and H should 
have this feature (as an extending feature).  Fur-
thermore, agreef takes care of reducing feature 
ambiguity in M and H (if it succeeds):  If x is an 
argument feature such that one of M and H has x 
(as an extending feature) but the other does not, 
then x is removed from the other (as an extending 
feature). 
    For the adj rule at hand, the if statement can 
be interpreted as follows:  If H (the noun) is plural 
and not human, then M (the adjective) must be sin-
gular and feminine; otherwise M and H must agree 
in number and gender.  The actual current rule in 
Ar.gram skips the agreement test for plural non-
human nouns, because we do not currently have 
enough marking of the human (h) features. 
    For subject-verb agreement, we have the situa-
tion that verbs do not use the same extending fea-
ture names as nouns do.  (This has to do with cor-
responding BAMA features.)  To handle this, 
agreef can take as arguments pairs of features, 
like (sg vsg), where the first element is checked 
for M (the subj noun), and the second is checked 
for H (the verb).  Here is a shortened form of the 
subject slot rule of ASG, which contains the cur-
rent subject-verb agreement rule for ASG: 
 
subj < 
  (opt n) 
  (mpos noun) 
  (if (mf pron) 
   /* then */ 
    (& (agreef (m vm) (f vf)) 
       (agreef (sg vsg)  
               (pl vpl)  
               (dual vdual)) 
       (agreef (pers1 vpers1) 
               (pers2 vpers2) 
               (pers3 vpers3)) ) 
    /* else */ 
    (& (exthf vpers3) 
      (if (| (^ (extmf pl)) (mf h)) 
         (& 
           (agreef (m vm) (f vf)) 
           (if le 
              /* subj before verb */ 
              (agreef (sg vsg)  
                      (pl vpl) 
                      (dual vdual)) 
              /*subj after verb: */ 
              (exthf vsg) ) ) ) ) 
) 
 
The agreement part is the outer if test, and can be 
interpreted as follows:   
  
1. If  M is a pronoun, then M agrees with H 
in gender, number and person; 
2. else H must be 3rd-person and if M is 
non-plural or human, then: 
a. M agrees with H  in gender and 
b. if M premodifies H then it 
agrees with H in number, 
c. else H is singular. 
 
This formulation shows the way we are currently 
ignoring agreement for plural non-human nouns, 
until we get human markings on nouns. 
85
    Now let us illustrate how an adjunct slot rule can 
overcome a seeming problem for dependency 
grammars when there is a ? missing head word?  for 
a phrase.  Consider n the sentence shown in Figure 
1, along with its ASG parse tree. 
 
 	


The 7th Workshop on the Innovative Use of NLP for Building Educational Applications, pages 127?135,
Montre?al, Canada, June 3-8, 2012. c?2012 Association for Computational Linguistics
Developing ARET: An NLP-based  Educational Tool Set for Arabic 
Reading Enhancement 
 
Mohamed Maamouri1, Wajdi Zaghouani1, Violetta Cavalli-Sforza2, 
Dave Graff1 and Mike Ciul1 
 
1 Linguistic Data Consortium, University of Pennsylvania, 3600 Market St., Suite 810,  
Philadelphia, PA 19104. 
           2 School of Science and Engineering, Al Akhawayn University, Ifrane 53000, Morocco. 
maamouri@ldc.upenn.edu, wajdiz@ldc.upenn.edu, 
v.cavallisforza@aui.ma, graff@ldc.upenn.edu, mciul@ldc.upenn.edu 
 
 
 
Abstract 
This paper describes a novel Arabic Reading 
Enhancement Tool (ARET) for classroom use, 
which has been built using corpus-based Natu-
ral Language Processing in combination with 
expert linguistic annotation. The NLP tech-
niques include a widely used morphological 
analyzer for Modern Standard Arabic to pro-
vide word-level grammatical details, and a rela-
tional database index of corpus texts to provide 
word concordances. ARET also makes use of a 
commercial Arabic text-to-speech (TTS) sys-
tem to add a speech layer (with male and fe-
male voices) to the Al-Kitaab language 
textbook resources. The system generates test 
questions and distractors, offering teachers and 
students an interesting computer-aided lan-
guage learning tool. We describe the back-
ground and the motivation behind the building 
of ARET, presenting the various components 
and the method used to build the tools. 
1 Introduction 
Reading is an essential skill for learners of Modern 
Standard Arabic (MSA). For most of learners it is 
the most important skill to master in order to en-
sure success in learning. With strengthened reading 
skills, learners of Arabic tend to make greater 
progress in other areas of language learning. Read-
ing should be an active, fluent process that in-
volves the reader and the reading material in build-
ing meaning. Often, however, it is not. The average 
learner?s second language reading ability is usually 
well below that of the first language. This can im-
pede academic progress in the second language. 
Arabic language teachers and learners face many 
challenges in the classroom. Teaching students 
how to utilize the skills and knowledge they bring 
from their first language, develop vocabulary 
skills, improve reading comprehension and rate, 
and monitor their own improvement are just some 
of the issues that teachers must consider in prepar-
ing for an Arabic language reading class. With 
these issues in mind, we set out to create a web-
based service that would provide efficient and 
pedagogically relevant access to instructional texts 
in Modern Standard Arabic, with the goal of creat-
ing a resource that would serve both instructors 
and students, by presenting novel modes of infor-
mation access. We received valuable support from 
Georgetown University Press, which gave permis-
sion for us to use the reading passages from the 3-
volume textbook publication Al-Kitaab (Al-Batal 
et al, 2001;2004 and 2006), which is the most 
popular publication in the USA for teaching Arab-
ic. 
2 Motivation 
Using technology in classrooms can make the les-
sons more efficient. There are many technology 
127
tools that can be used in English as a Second Lan-
guage (ESL) classes to improve foreign students? 
English and technology skills. According to Wang 
(2005) there are many advantages integrating tech-
nology in classrooms especially for ESL students. 
To be able to improve their language skills, like 
writing, reading, listening and speaking, English 
language learners use pedagogical computer appli-
cations to check their work and improve their lan-
guage skills; they also use web browsers and e-
mail to search for information, join in online dis-
cussions, publish their work, read technology texts, 
communicate each other even worldwide. He also 
says that, ?Technology integration in foreign lan-
guage teaching demonstrates the shift in educa-
tional paradigms from a behavioral to a 
constructivist learning approach? (p. 2). Gone are 
the days in which learning foreign language voca-
bulary and grammar rules relied largely on repeti-
tive drills; more and more, foreign language 
learners are asked to engage directly with authentic 
materials and take more initiative in their learning. 
However, finding appropriate, authentic reading 
materials is a challenge for language instructors. 
The Web is a vast resource of texts, but most pages 
are not suitable for reading practice, and commer-
cial search engines are not well suited to finding 
texts that satisfy pedagogical constraints such as 
reading level, length, text quality, and presence of 
target vocabulary. We present a system that uses 
various language technologies to facilitate the se-
lection , presentation and study of authentic read-
ing materials from the widely used textbook series 
Al-Kitaab (Al-Batal et al, 2001;2004 and 2006). In 
the next section we review some of the related 
work. In section 4 we discuss some of the specific 
challenges faced when learning the Arabic lan-
guage.  
3 Related work 
Many studies have shown that an on-line learning 
environment that supplements classroom instruc-
tion with additional study materials at an appropri-
ate level for the learner may enhance language 
learning and development (Ware, 2004; Chiu et al, 
2007; Yuan, 2003; Wang, 2005;). As a result, a 
number of recent projects have aimed to dynami-
cally provide a supply of accessible authentic texts 
to language learners by drawing from online re-
sources. WERTi (Meurers et al 2010) is an intelli-
gent automatic workbook that uses texts from the 
Web to increase knowledge of English grammati-
cal forms and functions. READ-X (Miltsakaki and 
Troutt, 2007) is a tool for finding texts at specified 
reading levels. SourceFinder (Sheehan et al,2007) 
is an authoring tool for finding suitable texts for 
standardized test items on verbal reasoning and 
reading comprehension. Project REAP (Reader-
Specific Lexical Practice) (Brown and Eskenazi, 
2004; Heilman et al, 2006) takes a different ap-
proach. Rather than teachers choosing texts, in 
REAP the system selects individualized practice 
readings from a digital library according to specific 
lexical constraints. Readings are chosen to contain 
vocabulary words that a given student needs to 
learn, while limiting the number of words the stu-
dent does not know. The choice of texts is there-
fore driven by a curriculum model, informed by a 
student model, and constrained by the availability 
of suitable texts, as described by their text model.  
While a user-adapted tool has the potential to 
better match individual needs, since each student 
can work with different texts, a drawback of this 
approach is that instructors may have difficulty 
coordinating group discussion about readings and 
integrating the tool into their curriculum. An ad-
vantage of a tool containing a search system, how-
ever, is that teachers can find texts that match the 
needs and interests of the class as a whole. While 
some degree of individualization is lost, the advan-
tages of better coordinated support from teachers 
and classroom integration are gained. In the early 
stages of this project, we had planned to use REAP 
software after adapting it to handle the complex 
morphology of MSA. Unfortunately, while the 
system was already being tested in the field, REAP 
project leaders did not consider the code base ma-
ture enough to be released to other research 
groups. As a result, we chose to develop our own 
database and access method to texts, foregoing 
adaptation to individual users. 
4 Challenges of Arabic reading 
It has never been an easy transition from ?learning 
to read? to ?reading to learn? for Arabs and other 
Arabic learners. In Meynet (1971) and according to 
father Anastase Al-Karmali, a member of the 
Arabic Language Academy in Cairo, Egypt. ?The 
Arabs study the rules of the Arabic language in 
order to learn to read, whereas others read in order 
128
to learn ??. Indeed, reading in Arabic as a first or 
second language presents special challenges due to 
its script and its rich and complex morphology. 
Also, Arabic texts lack short vowels and other 
diacritics that distinguish words and grammatical 
functions. These linguistic complexities result in 
significant reading difficulties. Typically, Arabic 
as a second language learners face difficulties in 
word recognition, word disambiguation and the 
acquisition of decoding skills, including recogniz-
ing letter and word boundaries, decoding unvoca-
lized words and identifying these words. In order 
to understand Arabic text, the novice reader must 
learn to insert short vowels and other diacritics 
based on grammatical rules not yet learned. The 
ambiguity associated with a lack of diacritization is 
shown for instance in the lemma ??? /Elm/ which 
has the following nine possible reading interpreta-
tions shown in Table 1. 
???? ?Science, learning? 
????? ?flag? 
?3 ?????rd P. Masc. Sing. Perf. V. (MSA V. I) 
?he learned/knew? 
?3 ?????rd P. Sing. Pass. V. (MSA V. I) ?it/he 
was learned?  
??????? Intensifying, Caus. V. (MSA V. II) ?he 
taught 
??????? Causative V. Pass (MSA V. II) ?he was 
taught? 
??????/????  (NOM Noun + Definite and Indefinite) 
????? (ACCU Noun + Definite) 
??????/????  (GEN Noun + Definite and Indefinite) 
Table 1.  Various interpretations for the lemma ??? 
 
5 The Arabic reading enhancement tools 
To address these challenges, we developed an 
Arabic Reading Enhancement Tool (ARET) for 
classroom use with support from the U.S. Depart-
ment of Education?s International Research Study 
Program (IRS). The ARET tool is rather similar in 
intent to the foreign language learning tool, 
GLOSSER-RuG built by Nerbonne and Smit 
(1996) for Dutch, but targets explicitly the particu-
larities of MSA. ARET has two subparts tools : the 
Arabic Reading Facilitation Tool (ARFT) and the 
Arabic Reading Assessment Tool (ARAT). A ma-
jor achievement of this project was to create a col-
lection of fully annotated texts for learners of 
Arabic, using materials included in an authoritative 
textbook series that spans several competence le-
vels. In this section, we describe the creation, 
structure and content of the Arabic corpus/lexicon 
database, and then describe the ARFT and ARAT 
tools in more detail. 
5.1 The Al-Kitaab corpus database 
The ARET system uses the full text of Arabic 
reading passages from the Georgetown University 
Press Al-Kitaab textbook series, which represents a 
60,000 word corpus. Each passage was submitted 
to a combined automatic/manual annotation 
process in order to create a version of the text that 
was completely diacritized and thoroughly seg-
mented and labeled to identify all morphemes for 
each word, including their part-of-speech labels 
and English glosses. 
We first applied the Standard Arabic Morpho-
logical Analyzer (SAMA) (Maamouri et al, 2010), 
to enumerate all possible solutions for each word 
token in a given passage. The entire passage, with 
the full set of possible SAMA solutions for each 
word token, was then presented to a native Arabic 
speaker experienced in the morphological analysis 
of MSA, and their task was to select the particular 
SAMA solution for each word based on their un-
derstanding of the context; where necessary, the 
annotator would manually edit the details of POS 
tags or glosses to fill gaps in SAMA?s coverage of 
the vocabulary. This is a standard approach used in 
the annotation of numerous Arabic text corpora, 
including the Arabic Treebank Project (Maamouri 
and Bies 2004). As described in section 5.2, the 
resulting annotation was fully reviewed by expert 
Arabic linguists using our reading facilitation tool, 
to identify and repair errors. 
A relational database was created to store the 
corpus and annotations. Separate tables were used 
to enumerate (a) the reading passages (keeping 
track of the book volume, chapter and page num-
ber of each passage), (b) the sequence of sentences 
in each passage, (c) the word token sequence for 
each sentence, (d) the inventory of distinct word 
types (i.e. orthographic word forms with their con-
text-dependant analyses), and (e) the inventory of 
distinct ?headwords? (lemmas) and affix mor-
phemes (clitics). 
Using this relational table structure, a full pas-
sage could be assembled for display by querying 
129
for the sequence of sentences and the word tokens 
for each sentence. The information returned by the 
query could include, for each word token, the orig-
inal and/or diacritized spelling, and an index for 
looking up the context-dependent morphological 
analysis plus gloss for the token. This in turn also 
provided access to a dictionary entry for the lemma 
from which the token was derived. Table 2 sum-
marizes the contents of the database.  The number 
of distinct lemmas refers to the number of citation 
forms for content words (nouns, verbs, etc) that are 
referenced by the all the inflected stems found in 
the reading texts; the number of glossary entries 
refers to the manually edited dictionary descrip-
tions for lemmas / citation forms, including their 
consonantal roots. In cases where a lemma does 
not have a corresponding glossary entry, the fully-
detailed morphological analysis provides an Eng-
lish gloss (but not the root) for each word token 
containing the lemma. 
 
Type No. of 
Entries 
Sentences, titles and sub-headings 
3,692 
Arabic word tokens 53,411 
Distinct undiacritized Arabic ortho-
graphic forms 
17,209 
Distinct diacritized orthographic forms 20,725 
Distinct morphology/POS/gloss anno-
tations on word forms 
22,304 
Distinct clitic and inflected-stem mor-
phemes 
16,774 
Distinct lemmas 6,829 
Glossary entries for lemmas 3,436 
 Table 2. Corpus quantities in ARET database 
5.2 The Arabic reading facilitation tool 
The Arabic Reading Facilitation Tool (ARFT) 
provides the user with direct access to the Al-
Kitaab text corpus, organized by volume, chapter 
and page number. In addition to presenting the full 
text for a given passage, the user can click on any 
word in the passage to bring up in a side-bar the 
full morphological analysis and gloss for the word 
in that context, along with a glossary entry for the 
associated lemma, and a summary of other Arabic 
citation forms that are related by root. Two other 
important functions are also provided: (a) toggling 
the presence vs. absence of all diacritic marks in 
the full display of the reading passage, and (b) the 
ability to view a concordance of all occurrences for 
any selected word. The tool also provides a "tool-
tip" pop-up window whenever the mouse cursor 
hovers over an Arabic word in the text passage; if 
the page is showing undiacritized text, the pop-up 
shows the diacritized form of the word, and vice-
versa. This is a very useful feature for the new 
learners of the Arabic language. 
As soon as the annotated version of the corpus 
was loaded into the database, there was a sustained 
effort involving native Arabic speakers and Arabic 
faculty to carefully review the database content, as 
displayed by the ARFT, and validate it against the 
original textbook content. This effort involved 
numerous repairs of all sorts that stemmed from all 
stages of corpus preparation: typing mistakes from 
the original keyboarding of the text, problems in 
morphological annotation, and difficulties in the 
loading of the tables. Customized tools and proce-
dures were developed to facilitate the updates that 
were needed to apply all the corrections directly to 
the database.  
A glossary for use in the ARFT was added to 
the database, with the relational linkage needed to 
support glossary lookups triggered by the user 
clicking on any word in a text passage. The word-
to-glossary relation is based on the "lemma_ID" of 
the stem in each word. The lemma_ID is a string 
identifier assigned by the Standard Arabic Mor-
phological Analyzer (SAMA), which was used for 
the morphological annotation of the entire corpus; 
all verbs in a given conjugation paradigm share the 
same lemma_ID, as do all nouns or adjectives in a 
given declensional (case) paradigm, so every dis-
tinct inflected form of a noun, adjective or verb is 
linked by the annotation to its corresponding glos-
sary entry. The glossary table (with indexing by 
Semitic root) was a special, additional annotation 
specifically for ARFT, so not all lemmas were 
covered in the glossary; when a term not in the 
glossary is clicked, the side-bar display area in the 
ARFT shows the message "Refer to Morphology 
Information"; the morphology information is the 
full set of annotation data for each word based on 
SAMA, and this always includes an English gloss 
for the stem (except in the case of proper nouns, 
which always have "Proper Noun" as their part-of-
speech label).  
The ARFT is intended for use with a modern 
web browser over a reasonably fast internet con-
130
nection. The tool has a flexible and intuitive web 
interface to navigate the texts via several key fea-
tures: 
 
1. Source Panel, featuring Al-Kitaab text 
2. Highlighted Sentence 
3. Highlighted Word 
4. Audio Player for highlighted sentence 
5. Audio Player for highlighted word 
6. Morphological Data Panel 
7. Lexical Data Panel 
8. Tabbed browsing for convenient access to 
multiple screens 
 
Figure 1. below illustrates an example of the tool 
using a passage of text from Al-Kitab Volume 2, 
Page 61. 
 
 
Figure 1. Arabic Reading Facilitation Tool featuring 
function labels 
 
5.3 The Text to speech module 
An Arabic Text-to-Speech technology module was 
licensed from RDI1. This technology has been used 
to add an audio feature to the ARFT, and can be 
used to render audio of arbitrary Arabic text. So 
the users will be able to listen to individual words 
or passages of text spoken by a high quality syn-
thesized voice. The RDI module, reads text files or 
literal text in Windows Arabic encoding and gene-
rates WAV audio data either as files or for direct 
output to an audio device. It has a C++ API that 
may be employed in Microsoft Visual Studio. The 
                                                          
1<http://www.rdi-eg.com/Technologies/speech.htm> 
voice rendering quality is excellent. Moreover, the 
module analyzes diacritized or undiacritized Arab-
ic text to determine pronunciation, rhythm and 
inflection of speech. Many variables of speech 
production can be controlled, most significantly 
the gender of the speaker. We developed a simple 
console-based executable that reads a list of Arabic 
text files and generates a WAV file of speech cor-
responding to each one, using a male voice, female 
voice, or one of each.  
5.4 The Arabic Reading Assessment Tool 
(ARAT) 
In order to support the creation of tests and quizzes 
for specific Arabic reading skills the Arabic Read-
ing Assessment Tool (ARAT) has been built 
around an existing open-source web application 
framework called Moodle (http://moodle.org). This 
framework was developed as a ?Content Manage-
ment System?, and provides built-in support for 
many of the ?infrastructure? functions that ARAT 
would need, including: registration of faculty and 
student user accounts; creation of courses with 
schedule plans and content-based resources; crea-
tion, presentation and scoring of tests and quizzes; 
and overall record-keeping of resources, activities 
and test scores. Custom software modules were 
developed to augment the Moodle code base in 
order to provide functions that are specific to the 
ARAT: 
 - communicating with and importing data from the 
annotated Al-Kitaab passage database; 
 - defining specialized question types (the first 
three types described below) based on annotations 
in the database, such that answers to the questions 
can be scored automatically by reference to the 
corpus annotations.  
 
The three types of annotation-based questions 
were defined and implemented in the prototype 
ARAT: 
 - Cloze-Test Question: given a reading passage in 
Arabic, one or more words are chosen as test items 
and are replaced in the text by an underlined empty 
slot; the student is given a multiple-choice question 
to identify the correct Arabic word to fill each slot. 
 - English Gloss Question: given a reading passage, 
one or more words are chosen as test items and 
highlighted in the text; the student is given a mul-
131
tiple-choice question to identify the correct English 
gloss for each test word. 
 - Case-Ending Question: given reading passage, 
one or more nouns and/or adjectives are chosen as 
test items and highlighted in the text; the student is 
given a multiple-choice question of the six possible 
cases in Arabic to identify the correct case ending 
for each test word. Mood ending could also be 
considered for verbs. 
- Yes/No questions: these are fully  developed by 
teachers, who must enter questions and answers 
into the program in order to have Moodle give the 
student/teacher the appropriate final scores and 
correct answers feedback.  
The implementation allows an instructor to se-
lect what text passage to use for a given quiz, and 
also allows for either manual and automatic selec-
tion of words to use as test items from the text, as 
well as either manual or automatic selection of 
distractor items for the Cloze and Gloss tests. By 
providing automatic selection of test items and 
distractors based on available annotations in the 
corpus database, ARAT allows a student to prac-
tice each task any number of times on a given text 
passage, be challenged by novel questions on each 
attempt, and receive a tally of right and wrong 
answers, without the instructor having to create or 
score each attempt as shown in Figure 2. 
 
 
 
Figure 2. A sample question created with ARAT 
 
5.5 The test set creation procedure 
The procedure for creating a test set within ARAT 
breaks down to the following ?top-level? steps: 
 
1. Provide or select a text passage to be used as the 
source from which test questions are derived. 
 
2. For questions that will be based on specific word 
tokens in the text, identify the tokens that will be 
basis for test questions; these token-specific ques-
tions will always involve a particular task with a 
multiple-choice response, so for each selected to-
ken: select the task (word choice, gloss choice, 
case-ending), identify a correct answer and provide 
or select a set of three distractors. 
 
3. For questions not based on specific tokens, the 
instructor must supply the following: prompting 
text for the question, the type of response (y/n, t/f, 
type-in, multiple choice) and the correct answer 
(and three distractors for multiple choice). Figure 3 
shows the test set main screen. 
 
 
Figure 3. Test set main screen. 
 
6 Classroom usage and tool evaluation 
The ARFT was presented to Arabic faculty at the 
University of Pennsylvania; the tool was an-
nounced in Arabic courses and students were asked 
to use it. Several lists of student enrollments for 
many Arabic courses have been imported into the 
Moodle-based system.  
An informal evaluation was also performed, in 
the Summer of 2010, with Arabic instructors teach-
ing in the ARAbic and North African Studies 
(ARANAS) program at Al Akhawayn University, 
in Ifrane, Morocco. Unfortunately, due to the very 
rushed schedule and time pressure that instructors 
work under during this intensive program, the tools 
did not receive the desired attention. Only a hand-
ful of instructors actually explored the tools. Two 
132
instructors filled out an evaluation questionnaire 
concerning various aspects of the tools and their 
use of computer technology for language teaching 
in general. The feedback was generally positive 
and included some detailed suggestion for improv-
ing the tools; they also revealed some issues with 
inconsistent response time (partly due to the net-
work infrastructure of the university at that time) 
and ease of use (for non technology-savy instruc-
tors). The biggest obstacles to using the tools, 
however, appeared to be lack of time on the part of 
the instructors to acquire sufficient familiarity with 
the tools and devise effective ways of introducing 
them in the curriculum. We are investigating the 
possibility of using the tools with exchange stu-
dents during the regular academic year, even 
though the numbers in Arabic classes at all levels 
is much lower than in the Summer program. 
Recently, the use of the ARFT and its compa-
nion the ARAT has been mandated by the Arabic 
Section at the University of Pennsylvania and we 
hope that a more consistent use is going to be 
made. As of now, 118 students are registered 
representing four 1st Year classes (total: 63 stu-
dents), two 2nd Year classes (total:3 students), one 
3rd Year class ( total: 13 students) and One 4th 
Year class ( 11students).At this point, the tool im-
pact on the classroom has not been evaluated, but it 
is in our future plans to do a comprehensive class-
room evaluation of the tool. 
As part of the effort to introduce the ARFT and 
the ARAT to faculty, we obtained three short read-
ing passage texts, totaling 1022 Arabic word to-
kens, selected by a faculty member from news 
sources. These were submitted to annotation to 
disambiguate and diacritize the content based on 
SAMA analysis, just as was done for the Al-Kitaab 
passages. The annotated texts have been added into 
the database corpus and are available for use in the 
ARAT, but are not accessible for general browsing 
via the ARFT. The annotation and database import 
went quickly, demonstrating that these procedures 
have matured, and providing resources for building 
quizzes and tests based on materials that are ?un-
seen? by students who use both the ARFT and the 
ARAT. 
7 Conclusion 
We have described computational tools and lin-
guistic resources that enable students to enhance 
their Arabic reading skills by helping them with 
the difficulties they face in word recognition, word 
disambiguation and general decoding skills during 
the Arabic reading process. These computational 
tools and resources provide the needed correct and 
meaningful vocalizations by using natural lan-
guage processing (NLP) technologies namely a 
Standard Arabic Morphological Analyzer 
(SAMA), a concordance, a Text-to-Speech module 
and various interfaces. The time gained by students 
who use our Reading Enhancement Tools could be 
put to good use in the current ASL (Arabic as a 
Second Language) classroom which, following the 
ACTFL proficiency movement puts a primary 
emphasis on communication with less concern for 
accuracy as reflected in morphology or syntax, 
particularly at the initial stages of ASL learning. 
We reiterate at this point that our choice of the 
GUP Al-Kitaab textbook series was not fortuitous. 
We could have chosen any other pedagogical text 
but Al-Kitaab distinguishes itself by being widely 
used in the United States and abroad, and provid-
ing an extensive curriculum with a wide variety of 
texts. We are thankful that GUP gave us permis-
sion to use this resource, as it enabled us to create a 
tool that can accompany many English-speaking 
students studying MSA in many classrooms around 
the world.  
In addition to answering learners? reading needs 
in MSA, our efforts went beyond the specificities 
of this language by allowing us to demonstrate that 
our tools and the methodology we followed was in 
fact ?portable? to other languages which had a 
morphologically complex nature such as, for in-
stance, the Nahuatl Learning Environment (NLE) 
project based on the ARET infrastructure 2. Future 
efforts will continue experimentation of the use of 
available and robust Arabic NLP technologies to 
extend the enhancement of Arabic reading to better 
understanding of authentic reading text that the 
reader could download from the Internet for in-
stance. Progress in that direction is desirable and 
possible because it would increase the motivation 
of Modern Standard Arabic learners and will boost 
access by students and other professionals to au-
thentic real world language text in new genres and 
topics. In this way, the contribution of NLP tech-
                                                          
2 The Nahuatl learning tool project prepared by Jonathan 
Amith (n.d) and a team of Nahuatl speakers can be accessed 
online through a Beta version of the Nahuatl Learning Envi-
ronment at the LDC : http://nahuatl.ldc.upenn.edu/. 
133
nologies to the teaching and learning of languages 
may become more significant and more compelling 
to all concerned, teachers, learners and computer 
NLP specialists alike.  
Acknowledgements 
We gratefully acknowledge the sponsorship of the 
U.S. Department of Education, whose International 
Research Study (IRS) Grant No. P017A050040-
07-05 supported our work on this project. The 
views, opinions and/or findings contained in this 
article are those of the authors and should not be 
interpreted as representing the official views or 
policies, either expressed or implied, of the U.S. 
Department of Education's International Research 
Study program.  We also acknowledge the help 
and support of Georgetown University Press who 
allowed us to use their Al-Kitaab series as a testing 
ground for our tools.  Thanks and appreciation go 
Professor Roger Allen and his team of Arabic 
teachers at the University of Pennsylvania for their 
warm reception of our tools in their teaching struc-
ture.  Thanks go finally, to all the programmers 
and annotators who worked on the project.  They 
are numerous and we cannot give them all the cre-
dit they deserve but without them our achievement 
would not have been so significant.  
References 
Mahmoud Al-Batal, Kristen Brustad & Abbas Al-Tonsi. 
2006. Al-Kitaab fii tacallum al-cArabiyya, Volume II 
(with DVDs, Second Edition).Washington, D.C.: 
Georgetown University Press, 2006.  
Mahmoud Al-Batal, Kristen Brustad & Abbas Al-Tonsi. 
2004. Al-Kitaab fii tacallum al-cArabiyya, A Text-
book for Beginning Arabic, Volume I (with DVDs, 
Second Edition). Washington, D.C.: Georgetown 
University Press, 2004. 
Mahmoud Al-Batal, Kristen Brustad & Abbas Al-Tonsi. 
2001. Al-Kitaab fii tacallum al-cArabiyya,Volume 
III.Washington, D.C.: Georgetown University Press, 
2001. 
Jonathan Amith.  n.d. Nahuatl Learning Environment. 
Available online at : http://nahuatl.ldc.upenn.edu/. 
Jon Brown and Maxine Eskenazi. 2004. Retrieval of 
authentic documents for reader-specific lexical prac-
tice. In Proceedings of  InSTIL/ICALL Symposium 
2004. Venice, Italy. 
Tsuo-Lin Chiu, Hsien-Chin Liou and Yuli Yeha. 2007. 
A study of web-based oral activities enhanced byau-
tomatic speech recognition for EFL college learning. 
Computer Assisted Language Learning, 20 (3), 209? 
233. 
Michael Heilman, Kevyn Collins-Thompson, Jamie 
Callan, and Maxine Eskenazi. 2006. Classroom suc-
cess of an Intelligent Tutoring System for lexical 
practice and reading comprehension. In Proceedings 
of the Ninth International Conference on Spoken 
LanguageProcessing. Pittsburgh, PA. 
Mohamed Maamouri, David Graff, Basma Bouziri, 
Sondos Krouna, Ann Bies and Seth Kulick. 2010. 
Standard Arabic Morphological Analyzer (SAMA) 
Version 3.1. Linguistic Data Consortium, Catalog 
No.: LDC2010L01. 
Mohamed Maamouri and Ann Bies. 2004. Developing 
an Arabic Treebank: Methods, Guidelines, Proce-
dures, and Tools. In Proceedings of the Workshop 
Computational Approaches to Arabic Script-based 
Languages. Pages 2-9./20th International Conference 
on Computational Linguistics/. COLING Geneva, 
Switzerland. 
Detmar Meurers, Ramon Ziai, Luiz Amaral, Adriane 
Boyd, Aleksandar Dimitrov, Vanessa Metcalf, Niels 
Ott. 2010. Enhancing Authentic Web Pages for Lan-
guage Learners. In Proceedings of the 5th Workshop 
on Innovative Use of NLP for Building Educational 
Applications, NAACL-HLT 2010, Los Angeles. 
Roland Meynet. 1971. L'?criture arabe en question: les 
projets de l'Acad?mie de Langue Arabe du Caire de 
1938 ? 1968.Beirut: Dar el-Machreq, 1971. 142 pp 
Eleni Miltsakaki and Audrey Troutt. 2007. Read-X: 
Automatic Evaluation of Reading Difficulty of Web 
Text. In Proceedings of  E-Learn 2007, sponsored by 
the Association for theAdvancement of Computing in 
Education. Quebec, Canada. 
John Nerbonne and Petra Smit. 1996. GLOSSER-RuG: 
in Support of Reading. In Proceedings of the 16th In-
ternational Conference on Computational Linguistics 
(COLING 1996). 
Kathleen M. Sheehan, Irene Kostin, Yoko Futagi. 2007. 
SourceFinder: A Construct-Driven Approach for Lo-
cating Appropriately Targeted Reading Comprehen-
sion Source Texts. In Proceedings of the SLaTE 
Workshop on Speech and Language Technology in 
Education.Carnegie Mellon University and Interna-
tional Speech Communication Association (ISCA). 
Li Wang. 2005. The advantages of using technology in 
second language education. T.H.E. Journal, 32 (10), 
1-6. 
134
Paige D. Ware. 2004. Confidence and competition on-
line: ESL student perspectives on web based discus-
sions in the classroom. Computers and Composition, 
21, 451?468. 
Yi Yuan. 2003. The use of chat rooms in an ESL set-
ting. Computers and Composition, 20, 194?206. 
135
