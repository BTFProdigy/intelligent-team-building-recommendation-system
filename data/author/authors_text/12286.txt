Proceedings of SIGDIAL 2009: the 10th Annual Meeting of the Special Interest Group in Discourse and Dialogue, pages 38?45,
Queen Mary University of London, September 2009. c?2009 Association for Computational Linguistics
Dealing with Interpretation Errors in Tutorial Dialogue
Myroslava O. Dzikovska, Charles B. Callaway, Elaine Farrow, Johanna D. Moore
School of Informatics
University of Edinburgh, Edinburgh, United Kingdom
mdzikovs,ccallawa,efarrow,jmoore@inf.ed.ac.uk
Natalie Steinhauser, Gwendolyn Campbell
Naval Air Warfare Training Systems Division
Orlando, Florida, USA
Abstract
We describe an approach to dealing with
interpretation errors in a tutorial dialogue
system. Allowing students to provide ex-
planations and generate contentful talk can
be helpful for learning, but the language
that can be understood by a computer sys-
tem is limited by the current technology.
Techniques for dealing with understanding
problems have been developed primarily for
spoken dialogue systems in information-
seeking domains, and are not always appro-
priate for tutorial dialogue. We present a
classification of interpretation errors and our
approach for dealing with them within an
implemented tutorial dialogue system.
1 Introduction
Error detection and recovery is a known problem in
the spoken dialogue community, with much research
devoted to determining the best strategies, and learn-
ing how to choose an appropriate strategy from data.
Most existing research is focused on dealing with
problems in an interaction resulting from speech
recognition errors. This focus is justified, since the
majority of understanding problems observed in cur-
rent spoken dialogue systems (SDS) are indeed due
to speech recognition errors.
Recovery strategies, therefore, are sometimes de-
vised specifically to target speech recognition prob-
lems - for example, asking the user to repeat the ut-
terance, or to speak more softly, which only makes
sense if speech recognition is the source of trouble.
However, errors can occur at all levels of process-
ing, including parsing, semantic interpretation, in-
tention recognition, etc. As speech recognition im-
proves and more sophisticated systems are devel-
oped, strategies for dealing with errors coming from
higher (and potentially more complex) levels of pro-
cessing will have to be developed.
This paper presents a classification of non-
understandings, defined as the errors where the sys-
tem fails to arrive at an interpretation of the user?s
utterance (Bohus and Rudnicky, 2005), and a set of
strategies for dealing with them in an implemented
tutorial dialogue system. Our system differs from
many existing systems in two ways. First, all di-
alogue is typed. This was done in part to avoid
speech recognition issues and allow for more com-
plex language input than would otherwise be pos-
sible. But it is also a valid modality for tutoring -
there are now many GUI-based tutoring systems in
existence, and as distance and online learning have
become more popular, students are increasingly fa-
miliar with typed dialogue in chat rooms and discus-
sion boards. Second, different genres impose dif-
ferent constraints on the set of applicable recovery
strategies - as we discuss in Section 2, certain help
strategies developed for task-oriented dialogue sys-
tems are not suitable for tutorial dialogue, because
tutoring systems should not give away the answer.
We propose a targeted help approach for dealing
with interpretation problems in tutorial dialogue by
providing help messages that target errors at differ-
ent points in the pipeline. In our system they are
combined with hints as a way to lead the student
to an answer that can be understood. While some
38
parts of the system response are specific to tutorial
dialogue, the targeted help messages themselves can
serve as a starting point for developing appropriate
recovery strategies in other systems where errors at
higher levels of interpretation are a problem.
The rest of this paper is organized as follows. In
Section 2, we motivate the need for error handling
strategies in tutorial dialogue. In Section 3 we de-
scribe the design of our system. Section 4 discusses
a classification of interpretation problems and our
targeted help strategy. Section 5 provides a prelim-
inary evaluation based on a set of system tests con-
ducted to date. Finally, we discuss how the approach
taken by our system compares to other systems.
2 Background and Motivation
Tutorial dialogue systems aim to improve learning
by engaging students in contentful dialogue. There
is a mounting body of evidence that dialogue which
encourages students to explain their actions (Aleven
and Koedinger, 2000), or to generate contentful talk
(Purandare and Litman, 2008), results in improved
learning. However, the systems? ability to under-
stand student language, and therefore to encourage
contentful talk, is limited by the state of current lan-
guage technology. Moreover, student language may
be particularly difficult to interpret since students
are often unaware of proper terminology, and may
phrase their answers in unexpected ways. For exam-
ple, a recent error analysis for a domain-independent
diagnoser trained on a large corpus showed that a
high proportion of errors were due to unexpected
paraphrases (Nielsen et al, 2008).
In small domains, domain-specific grammars and
lexicons can cover most common phrasings used
by students to ensure robust interpretation (Aleven,
2003; Glass, 2000). However, as the size of the
domain and the range of possible questions and an-
swers grows, achieving complete coverage becomes
more difficult. For essays in large domains, sta-
tistical methods can be used to identify problems
with the answer (Jordan et al, 2006; Graesser et
al., 1999), but these approaches do not perform well
on relatively short single-sentence explanations, and
such systems often revert to short-answer questions
during remediation to ensure robustness.
To the best of our knowledge, none of these tu-
torial systems use sophisticated error handling tech-
niques. They rely on the small size of the domain
or simplicity of expected answers to limit the range
of student input. They reject utterances they cannot
interpret, asking the user to repeat or rephrase, or
tolerate the possibility that interpretation problems
will lead to repetitive or confusing feedback.
We are developing a tutorial dialogue system that
behaves more like human tutors by supporting open-
ended questions, as well as remediations that allow
for open-ended answers, and gives students detailed
feedback on their answers, similar to what we ob-
served with human tutors. This paper takes the first
step towards addressing the problem of handling er-
rors in tutorial dialogue by developing a set of non-
understanding recovery strategies - i.e. strategies
used where the system cannot find an interpretation
for an utterance.
In early pilot experiments we observed that if the
system simply rejects a problematic student utter-
ance, saying that it was not understood, then stu-
dents are unable to determine the reason for this
rejection. They either resubmit their answer mak-
ing only minimal changes, or else they rephrase the
sentence in a progressively more complicated fash-
ion, causing even more interpretation errors. Even
after interacting with the system for over an hour,
our students did not have an accurate picture as to
which phrasings are well understood by the system
and which should be avoided. Previous research also
shows that users are rarely able to perceive the true
causes of ASR errors, and tend to form incorrect the-
ories about the types of input a system is able to ac-
cept (Karsenty, 2001).
A common approach for dealing with these is-
sues in spoken dialogue systems is to either change
to system initiative with short-answer questions (?Is
your destination London??), or provide targeted help
(?You can say plane, car or hotel?). Neither of these
is suitable for our system. The expected utterances
in our system are often more complex (e.g., ?The
bulb must be in a closed path with the battery?), and
therefore suggesting an utterance may be equivalent
to giving away the entire answer. Giving students
short-answer questions such as ?Are the terminals
connected or not connected?? is a valid tutoring
strategy sometimes used by the tutors. However,
it changes the nature of the question from a recall
39
task to a recognition task, which may affect the stu-
dent?s ability to remember the correct solution in-
dependently. Therefore, we decided to implement
strategies that give the student information about the
nature of the mistake without directly giving infor-
mation about the expected answer, and encourage
them to rephrase their answers in ways that can be
understood by the system.
We currently focus on strategies for dealing
with non-understanding rather than misunderstand-
ing strategies (i.e. cases where the system finds an
interpretation, but an incorrect one). It is less clear
in tutorial dialogue what it means for a misunder-
standing to be corrected. In task-oriented dialogue,
if the system gets a slot value different from what
the user intended, it should make immediate correc-
tions at the user?s request. In tutoring, however, it
is the system which knows the expected correct an-
swer. So if the student gives an answer that does not
match the expected answer, when they try to correct
it later, it may not always be obvious whether the
correction is due to a true misunderstanding, or due
to the student arriving at a better understanding of
the question. Obviously, true misunderstandings can
and will still occur - for example, when the system
resolves a pronoun incorrectly. Dealing with such
situations is planned as part of future work.
3 System Architecture
Our target application is a system for tutoring ba-
sic electricity and electronics. The students read
some introductory material, and interact with a sim-
ulator where they can build circuits using batteries,
bulbs and switches, and measure voltage and cur-
rent. They are then asked two types of questions:
factual questions, like ?If the switch is open, will
bulb A be on or off??, and explanation questions.
The explanation questions ask the student to explain
what they observed in a circuit simulation, for exam-
ple, ?Explain why you got the voltage of 1.5 here?,
or define generic concepts, such as ?What is volt-
age??. The expected answers are fairly short, one or
two sentences, but they involve complex linguistic
phenomena, including conjunction, negation, rela-
tive clauses, anaphora and ellipsis.
The system is connected to a knowledge base
which serves as a model for the domain and a rea-
soning engine. It represents the objects and rela-
tionships the system can reason about, and is used
to compute answers to factual questions.1 The stu-
dent answers are processed using a standard NLP
pipeline. All utterances are parsed to obtain syntac-
tic analyses.2 The lexical-semantic interpreter takes
analyses from the parser and maps them to seman-
tic representations using concepts from the domain
model. A reference resolution algorithm similar to
(Byron, 2002) is used to find referents for named ob-
jects such as ?bulb A? and for pronouns.
Once an interpretation of a student utterance has
been obtained, it is checked in two ways. First, its
internal consistency is verified. For example, if the
student says ?Bulb A will be on because it is in a
closed path?, we first must ensure that their answer
is consistent with what is on the screen - that bulb A
is indeed in a closed path. Otherwise the student
probably has a problem either with understanding
the diagrams or with understanding concepts such as
?closed path?. These problems indicate lack of basic
background knowledge, and need to be remediated
using a separate tutorial strategy.
Assuming that the utterance is consistent with the
state of the world, the explanation is then checked
for correctness. Even though the student utterance
may be factually correct (Bulb A is indeed in a
closed path), it may still be incomplete or irrelevant.
In the example above, the full answer is ?Bulb A
is in a closed path with the battery?, hence the stu-
dent explanation is factually correct but incomplete,
missing the mention of the battery.
In the current version of our system, we are partic-
ularly concerned about avoiding misunderstandings,
since they can result in misleading tutorial feedback.
Consider an example of what can happen if there is
a misunderstanding due to a lexical coverage gap.
The student sentence ?the path is broken? should be
interpreted as ?the path is no longer closed?, corre-
sponding to the is-open relation. However, the
1Answers to explanation questions are hand-coded by tutors
because they are not always required to be logically complete
(Dzikovska et al, 2008). However, they are checked for consis-
tency as described later, so they have to be expressed in terms
that the knowledge base can reason about.
2We are using a deep parser that produces semantic analyses
of student?s input (Allen et al, 2007). However, these have to
undergo further lexical interpretation, so we are treating them
as syntactic analyses for purposes of this paper.
40
most frequent sense of ?broken? is is-damaged,
as in ?the bulb is broken?. Ideally, the system lex-
icon would define ?broken? as ambiguous between
those two senses. If only the ?damaged? sense is
defined, the system will arrive at an incorrect inter-
pretation (misunderstanding), which is false by defi-
nition, as the is-damaged relation applies only to
bulbs in our domain. Thus the system will say ?you
said that the path is damaged, but that?s not true?.
Since the students who used this phrasing were un-
aware of the proper terminology in the first instance,
they dismissed such feedback as a system error. A
more helpful feedback message is to say that the sys-
tem does not know about damaged paths, and the
sentence needs to be rephrased.3
Obviously, frequent non-understanding messages
can also lead to communication breakdowns and im-
pair tutoring. Thus we aim to balance the need to
avoid misunderstandings with the need to avoid stu-
dent frustration due to a large number of sentences
which are not understood. We approach this by us-
ing robust parsing and interpretation tools, but bal-
ancing them with a set of checks that indicate poten-
tial problems. These include checking that the stu-
dent answer fits with the sortal constraints encoded
in the domain model, that it can be interpreted un-
ambiguously, and that pronouns can be resolved.
4 Error Handling Policies
All interpretation problems in our system are han-
dled with a unified tutorial policy. Each message to
the user consists of three parts: a social response,
the explanation of the problem, and the tutorial re-
sponse. The social response is currently a simple
apology, as in ?I?m sorry, I?m having trouble under-
standing.? Research on spoken dialogue shows that
users are less frustrated if systems apologize for er-
rors (Bulyko et al, 2005).
The explanation of the problem depends on the
problem itself, and is discussed in more detail below.
The tutorial response depends on the general tu-
torial situation. If this is the first misunderstanding,
the student will be asked to rephrase/try again. If
3This was a real coverage problem we encountered early on.
While we extended the coverage of the lexical interpreter based
on corpus data, other gaps in coverage may remain. We discuss
the issues related to the treatment of vague or incorrect termi-
nology in Section 4.
they continue to phrase things in a way that is mis-
understood, they will be given up to two different
hints (a less specific hint followed by a more spe-
cific hint); and finally the system will bottom out
with a correct answer. Correct answers produced by
the generator are guaranteed to be parsed and under-
stood by the interpretation module, so they can serve
as templates for future student answers.
The tutorial policy is also adjusted depending
on the interaction history. For example, if a non-
understanding comes after a few incorrect answers,
the system may decide to bottom out immediately in
order to avoid student frustration due to multiple er-
rors. At present we are using a heuristic policy based
on the total number of incorrect or uninterpretable
answers. In the future, such policy could be learned
from data, using, for example, reinforcement learn-
ing (Williams and Young, 2007).
In the rest of this section we discuss the explana-
tions used for different problems. For brevity, we
omit the tutorial response from our examples.
4.1 Parse Failures
An utterance that cannot be parsed represents the
worst possible outcome for the system, since detect-
ing the reason for a syntactic parse failure isn?t pos-
sible for complex parsers and grammars. Thus, in
this instance the system does not give any descrip-
tion of the problem at all, saying simply ?I?m sorry,
I didn?t understand.?
Since we are unable to explain the source of the
problem, we try hard to avoid such failures. We use
a spelling corrector and a robust parser that outputs
a set of fragments covering the student?s input when
a full parse cannot be found. The downstream com-
ponents are designed to merge interpretations of the
fragments into a single representation that is sent to
the reasoning components.
Our policy is to allow the system to use such frag-
mentary parses when handling explanation ques-
tions, where students tend to use complex language.
However, we require full parses for factual ques-
tions, such as ?Which bulbs will be off?? We found
that for those simpler questions students are able to
easily phrase an acceptable answer, and the lack of
a full parse signals some unusually complex lan-
guage that downstream components are likely to
have problems with as well.
41
One risk associated with using fragmentary parses
is that relationships between objects from different
fragments would be missed by the parser. Our cur-
rent policy is to confirm the correct part of the stu-
dent?s answer, and prompt for the missing parts, e.g.,
? Right. The battery is contained in a closed path.
And then?? We can do this because we use a diag-
noser that explicitly identifies the correct objects and
relationships in the answer (Dzikovska et al, 2008),
and we are using a deep generation system that can
take those relationships and automatically generate
a rephrasing of the correct portion of the content.
4.2 Lexical Interpretation Errors
Errors in lexical interpretation typically come from
three main sources: unknown words which the lex-
ical interpreter cannot map into domain concepts,
unexpected word combinations, and incorrect uses
of terminology that violate the sortal constraints en-
coded in the domain model.
Unknown words are the simplest to deal with in
the context of our lexical interpretation policy. We
do not require that every single word of an utter-
ance should be interpreted, because we want the
system to be able to skip over irrelevant asides.
However, we require that if a predicate is inter-
preted, all its arguments should be interpreted as
well. To illustrate, in our system the interpretation of
?the bulb is still lit? is (LightBulb Bulb-1-1)
(is-lit Bulb-1-1 true). The adverbial
?still? is not interpreted because the system is un-
able to reason about time.4 But since all arguments
of the is-lit predicate are defined, we consider
the interpretation complete.
In contrast, in the sentence ?voltage is the mea-
surement of the power available in a battery?, ?mea-
surement? is known to the system. Thus, its argu-
ment ?power? should also be interpreted. However,
the reading material in the lessons never talks about
power (the expected answer is ?Voltage is a mea-
surement of the difference in electrical states be-
tween two terminals?). Therefore the unknown word
detector marks ?power? as an unknown word, and
tells the student ?I?m sorry, I?m having a problem
understanding. I don?t know the word power.?
4The lexical interpretation algorithm makes sure that fre-
quency and negation adverbs are accounted for.
The system can still have trouble interpreting sen-
tences with words which are known to the lexical
interpreter, but which appear in unexpected combi-
nations. This involves two possible scenarios. First,
unambiguous words could be used in a way that
contradicts the system?s domain model. For exam-
ple, the students often mention ?closed circuit? in-
stead of the correct term ?closed path?. The former
is valid in colloquial usage, but is not well defined
for parallel circuits which can contain many differ-
ent paths, and therefore cannot be represented in a
consistent knowledge base. Thus, the system con-
sults its knowledge base to tell the student about the
appropriate arguments for a relation with which the
failure occurred. In this instance, the feedback will
be ?I?m sorry, I?m having a problem understanding.
I don?t understand it when you say that circuits can
be closed. Only paths and switches can be closed.?5
The second case arises when a highly ambiguous
word is used in an unexpected combination. The
knowledge base uses a number of fine-grained rela-
tions, and therefore some words can map to a large
number of relations. For example, the word ?has?
means circuit-component in ?The circuit has
2 bulbs?, terminals-of in ?The bulb has ter-
minals? and voltage-property in ?The bat-
tery has voltage?. The last relation only applies to
batteries, but not to other components. These dis-
tinctions are common for knowledge representation
and reasoning systems, since they improve reason-
ing efficiency, but this adds to the difficulty of lex-
ical interpretation. If a student says ?Bulb A has a
voltage of 0.5?, we cannot determine the concept to
which the word ?has? corresponds. It could be either
terminals-of or voltage-property, since
each of those relations uses one possible argument
from the student?s utterance. Thus, we cannot sug-
gest appropriate argument types and instead we in-
dicate the problematic word combination, for exam-
ple, ?I?m sorry, I?m having trouble understanding. I
didn?t understand bulb has voltage.?
Finally, certain syntactic constructions involving
comparatives or ellipsis are known to be difficult
5Note that these error messages are based strictly on the fact
that sortal constraints from the knowledge base for the relation
that the student used were violated. In the future, we may also
want to adjust the recovery strategy depending on whether the
problematic relation is relevant to the expected answer.
42
open problems for interpretation. While we are
working on interpretation algorithms to be included
in future system versions, the system currently de-
tects these special relations, and produces a mes-
sage telling the student to rephrase without the prob-
lematic construction, e.g., ?I?m sorry. I?m having a
problem understanding. I do not understand same
as. Please try rephrasing without the word as.?
4.3 Reference Errors
Reference errors arise when a student uses an am-
biguous pronoun, and the system cannot find a suit-
able object in the knowledge base to match, or on
certain occasions when an attachment error in a
parse causes an incorrect interpretation. We use a
generic message that indicates the type of the ob-
ject the system perceived, and the actual word used,
for example, ?I?m sorry. I don?t know which switch
you?re referring to with it.?
To some extent, reference errors are instances of
misunderstandings rather than non-understandings.
There are actually 2 underlying cases for reference
failure: either the system cannot find any referent at
all, or it is finding too many referents. In the future
a better policy would be to ask the student which of
the ambiguous referents was intended. We expect to
pilot this policy in one of our future system tests.
5 Evaluation
So far, we have run 13 pilot sessions with our sys-
tem. Each pilot consisted of a student going through
1 or 2 lessons with the system. Each lesson lasts
about 2 hours and has 100-150 student utterances
(additional time is taken with building circuits and
reading material). Both the coverage of the interpre-
tation component and the specificity of error mes-
sages were improved between each set of pilots, thus
it does not make sense to aggregate the data from
them. However, over time we observed the trend
that students are more likely to change their behav-
ior when the system issues more specific messages.
Examples of successful and unsuccessful interac-
tions are shown in Figure 1. In (a), the student used
incorrect terminology, and a reminder about how the
word ?complete? is interpreted was enough to get
the conversation back on track.
The dialogue fragment in (b) shows how mes-
sages which are not specific enough can cause a
breakdown in conversation. The system used an in-
sufficiently specific message at the beginning (omit-
ting the part that says that only switches and paths
can be closed). This led the student away from an
answer which was nearly correct with slightly im-
perfect terminology to an answer which was insuffi-
cient (it?s not enough for the components to be con-
nected, they have to be in a closed path), and then
to rephrase it in a more complicated way that was
impossible for the system to understand (consistent
with findings of Bulyko et al (2005)).
The next step would be to conduct a formal evalu-
ation of our policy. We are planning to do this using
recovery rate after different strategies as our evalu-
ation measure (Bohus and Rudnicky, 2005), which
is the percentage of times when the utterance imme-
diately following a non-understanding was success-
fully interpreted by the system.
6 Discussion
Our error handling policy attempts to balance ro-
bustness in interpretation with the need for pre-
cise tutorial feedback. Human tutors accept a wide
range of variation in terminology and phrasing.
However, there is a known trade-off between non-
understandings and misunderstandings. We decided
that misunderstandings are likely to cause more seri-
ous problems with respect to tutoring. Therefore we
set strict understanding requirements and focused on
developing a policy that would encourage students
to use constructions that the system can interpret re-
liably. This is also supported by our observations in
the human-human data ? tutors believe that teaching
correct terminology is important, and we observed
them saying things like ?It?s good to put it into your
own words like that. Just for the sake of the lesson,
could you also use the term closed path??.
Our approach is similar to the TargetedHelp ap-
proach of (Hockey et al, 2003), where in the case of
an interpretation failure the task assistant produces
a report of what the recognizer heard, a description
of the problem, and a possible in-domain utterance
as an alternative. In a user evaluation such targeted
help messages resulted in significantly lower task
completion times compared to a system that pro-
duced a generic ?I didn?t understand? message, and
43
(a)
S: the open switch makes the path incomplete
T: I?m sorry, I?m having a problem understanding. Paths can?t be complete. Only circuits can be
complete. Please try again.
S: the open switch makes the path open
T: Right. An open switch creates a gap.
(b)
T: What are the conditions that are required to make a bulb light up?
S: The lightbulb has to be in a closed circuit with a battery
T: I?m sorry, I?m having a problem understanding. I don?t understand when you say that circuits
can be closed. Please try again.
S: The lightbulb has to be connected to a battery
T: Yes. You correctly mentioned a battery and a bulb. Keep trying.
S: Both the positive and negative connectors have to be connected to
T: I?m sorry, I?m having a problem understanding. Try rephrasing your answer.
S: The lightbulb has to be connected to the positive and negative connectors of the battery
T: I?m sorry, I didn?t understand. Here?s the answer. The battery and the bulb must be contained
in the same closed path.
Figure 1: Sample student-system interactions. S: is student, T: is tutor (system). (a) A successful interaction
where the student changes their language; (b) a failed interaction where system feedback was unhelpful.
subjects gradually learned how to talk to the sys-
tem, reducing the number of misunderstandings over
time. This gives us reason to believe that our sys-
tem can achieve similar effects in tutorial dialogue.
While we don?t suggest alternative domain utter-
ances due to the tutoring reasons described earlier,
the progressively more specific hints serve a simi-
lar function. To what extent this impacts learning
and interaction with the system will have to be de-
termined in future evaluations.
The error handling in our system is significantly
different from systems that analyze user essays be-
cause it needs to focus on a single sentence at a time.
In a system that does essay analysis, such as AUTO-
TUTOR (Graesser et al, 1999) or Why2-Atlas (Jor-
dan et al, 2006) a single essay can have many flaws.
So it doesn?t matter if some sentences are not fully
understood as long as the essay is understood well
enough to identify at least one flaw. Then that par-
ticular flaw can be remediated, and the student can
resubmit the essay. However, this can also cause stu-
dent frustration and potentially affect learning if the
student is asked to re-write an essay many times due
to interpretation errors.
Previous systems in the circuit domain focused on
troubleshooting rather than conceptual knowledge.
The SHERLOCK tutor (Katz et al, 1998) used only
menu-based input, limiting possible dialogue. Cir-
cuit Fix-It Shop (Smith and Gordon, 1997) was a
task-oriented system which allowed for speech in-
put, but with very limited vocabulary. Our system?s
larger vocabulary and complex input result in differ-
ent types of non-understandings that cannot be re-
solved with simple confirmation messages.
A number of researchers have developed er-
ror taxonomies for spoken dialogue systems (Paek,
2003; Mo?ller et al, 2007). Our classification does
not have speech recognition errors (since we are us-
ing typed dialogue), and we have a more complex
interpretation stack than the domain-specific pars-
ing utilized by many SDSs. However, some types
of errors are shared, in particular, our ?no parse?,
?unknown word? and ?unknown attachment? errors
correspond to command-level errors, and our sor-
tal constraint and reference errors correspond to
concept-level errors in the taxonomy of Mo?ller et al
(2007). This correspondence is not perfect because
of the nature of the task - there are no commands in
a tutoring system. However, the underlying causes
are very similar, and so research on the best way
44
to communicate about system failures would benefit
both tutoring and task-oriented dialogue systems. In
the long run, we would like to reconcile these differ-
ent taxonomies, leading to a unified classification of
system errors and recovery strategies.
7 Conclusion
In this paper we described our approach to handling
non-understanding errors in a tutorial dialogue sys-
tem. Explaining the source of errors, without giving
away the full answer, is crucial to establishing ef-
fective communication between the system and the
student. We described a classification of common
problems and our approach to dealing with different
classes of errors. Our experience with pilot studies,
as well as evidence from spoken dialogue systems,
indicates that our approach can help improve dia-
logue efficiency. We will be evaluating its impact on
both student learning and on dialogue efficiency in
the future.
8 Acknowledgments
This work has been supported in part by Office of
Naval Research grant N000140810043.
References
V. A. Aleven and K. R. Koedinger. 2000. The need for
tutorial dialog to support self-explanation. In Proc. of
AAAI Fall Symposion on Building Dialogue Systems
for Tutorial Applications.
O. P. V. Aleven. 2003. A knowledge-based approach
to understanding students? explanations. In School of
Information Technologies, University of Sydney.
J. Allen, M. Dzikovska, M. Manshadi, and M. Swift.
2007. Deep linguistic processing for spoken dialogue
systems. In Proceedings of the ACL-07 Workshop on
Deep Linguistic Processing.
D. Bohus and A. Rudnicky. 2005. Sorry, i didn?t catch
that! - an investigation of non-understanding errors
and recovery strategies. In Proceedings of SIGdial-
2005, Lisbon, Portugal.
I. Bulyko, K. Kirchhoff, M. Ostendorf, and J. Goldberg.
2005. Error-correction detection and response gener-
ation in a spoken dialogue system. Speech Communi-
cation, 45(3):271?288.
D. K. Byron. 2002. Resolving Pronominal Refer-
ence to Abstract Entities. Ph.D. thesis, University of
Rochester.
M. O. Dzikovska, G. E. Campbell, C. B. Callaway, N. B.
Steinhauser, E. Farrow, J. D. Moore, L. A. Butler, and
C. Matheson. 2008. Diagnosing natural language an-
swers to support adaptive tutoring. In Proceedings
21st International FLAIRS Conference.
M. Glass. 2000. Processing language input in the
CIRCSIM-Tutor intelligent tutoring system. In Proc.
of the AAAI Fall Symposium on Building Dialogue Sys-
tems for Tutorial Applications.
A. C. Graesser, P. Wiemer-Hastings, P. Wiemer-Hastings,
and R. Kreuz. 1999. Autotutor: A simulation of a
human tutor. Cognitive Systems Research, 1:35?51.
B. A. Hockey, O. Lemon, E. Campana, L. Hiatt, G. Aist,
J. Hieronymus, A. Gruenstein, and J. Dowding. 2003.
Targeted help for spoken dialogue systems: intelligent
feedback improves naive users? performance. In Pro-
ceedings of EACL.
P. Jordan, M. Makatchev, U. Pappuswamy, K. VanLehn,
and P. Albacete. 2006. A natural language tuto-
rial dialogue system for physics. In Proceedings of
FLAIRS?06.
L. Karsenty. 2001. Adapting verbal protocol methods to
investigate speech systems use. Applied Ergonomics,
32:15?22.
S. Katz, A. Lesgold, E. Hughes, D. Peters, G. Eggan,
M. Gordin, and L. Greenberg. 1998. Sherlock 2: An
intelligent tutoring system built on the lrdc framework.
In C. Bloom and R. Loftin, editors, Facilitating the
development and use of interactive learning environ-
ments. ERLBAUM.
S. Mo?ller, K.-P. Engelbrecht, and A. Oulasvirta. 2007.
Analysis of communication failures for spoken dia-
logue systems. In Proceedings of Interspeech.
R. D. Nielsen, W. Ward, and J. H. Martin. 2008. Clas-
sification errors in a domain-independent assessment
system. In Proc. of the Third Workshop on Innovative
Use of NLP for Building Educational Applications.
T. Paek. 2003. Toward a taxonomy of communication
errors. In Proceedings of ISCA Workshop on Error
Handling in Spoken Dialogue Systems.
A. Purandare and D. Litman. 2008. Content-learning
correlations in spoken tutoring dialogs at word, turn
and discourse levels. In Proc.of FLAIRS.
R. W. Smith and S. A. Gordon. 1997. Effects of variable
initiative on linguistic behavior in human-computer
spoken natural language dialogue. Computational
Linguistics.
J. D. Williams and S. Young. 2007. Scaling POMDPs for
spoken dialog management. IEEE Trans. on Audio,
Speech, and Language Processing, 15(7):2116?2129.
45
Proceedings of the ACL 2010 Conference Short Papers, pages 43?48,
Uppsala, Sweden, 11-16 July 2010. c?2010 Association for Computational Linguistics
The impact of interpretation problems on tutorial dialogue
Myroslava O. Dzikovska and Johanna D. Moore
School of Informatics, University of Edinburgh, Edinburgh, United Kingdom
{m.dzikovska,j.moore}@ed.ac.uk
Natalie Steinhauser and Gwendolyn Campbell
Naval Air Warfare Center Training Systems Division, Orlando, FL, USA
{natalie.steihauser,gwendolyn.campbell}@navy.mil
Abstract
Supporting natural language input may
improve learning in intelligent tutoring
systems. However, interpretation errors
are unavoidable and require an effective
recovery policy. We describe an evaluation
of an error recovery policy in the BEE-
TLE II tutorial dialogue system and dis-
cuss how different types of interpretation
problems affect learning gain and user sat-
isfaction. In particular, the problems aris-
ing from student use of non-standard ter-
minology appear to have negative conse-
quences. We argue that existing strategies
for dealing with terminology problems are
insufficient and that improving such strate-
gies is important in future ITS research.
1 Introduction
There is a mounting body of evidence that student
self-explanation and contentful talk in human-
human tutorial dialogue are correlated with in-
creased learning gain (Chi et al, 1994; Purandare
and Litman, 2008; Litman et al, 2009). Thus,
computer tutors that understand student explana-
tions have the potential to improve student learn-
ing (Graesser et al, 1999; Jordan et al, 2006;
Aleven et al, 2001; Dzikovska et al, 2008). How-
ever, understanding and correctly assessing the
student?s contributions is a difficult problem due
to the wide range of variation observed in student
input, and especially due to students? sometimes
vague and incorrect use of domain terminology.
Many tutorial dialogue systems limit the range
of student input by asking short-answer questions.
This provides a measure of robustness, and previ-
ous evaluations of ASR in spoken tutorial dialogue
systems indicate that neither word error rate nor
concept error rate in such systems affect learning
gain (Litman and Forbes-Riley, 2005; Pon-Barry
et al, 2004). However, limiting the range of pos-
sible input limits the contentful talk that the stu-
dents are expected to produce, and therefore may
limit the overall effectiveness of the system.
Most of the existing tutoring systems that accept
unrestricted language input use classifiers based
on statistical text similarity measures to match
student answers to open-ended questions with
pre-authored anticipated answers (Graesser et al,
1999; Jordan et al, 2004; McCarthy et al, 2008).
While such systems are robust to unexpected ter-
minology, they provide only a very coarse-grained
assessment of student answers. Recent research
aims to develop methods that produce detailed
analyses of student input, including correct, in-
correct and missing parts (Nielsen et al, 2008;
Dzikovska et al, 2008), because the more detailed
assessments can help tailor tutoring to the needs of
individual students.
While the detailed assessments of answers to
open-ended questions are intended to improve po-
tential learning, they also increase the probabil-
ity of misunderstandings, which negatively impact
tutoring and therefore negatively impact student
learning (Jordan et al, 2009). Thus, appropri-
ate error recovery strategies are crucially impor-
tant for tutorial dialogue applications. We describe
an evaluation of an implemented tutorial dialogue
system which aims to accept unrestricted student
input and limit misunderstandings by rejecting low
confidence interpretations and employing a range
of error recovery strategies depending on the cause
of interpretation failure.
By comparing two different system policies, we
demonstrate that with less restricted language in-
put the rate of non-understanding errors impacts
both learning gain and user satisfaction, and that
problems arising from incorrect use of terminol-
ogy have a particularly negative impact. A more
detailed analysis of the results indicates that, even
though we based our policy on an approach ef-
43
fective in task-oriented dialogue (Hockey et al,
2003), many of our strategies were not success-
ful in improving learning gain. At the same time,
students appear to be aware that the system does
not fully understand them even if it accepts their
input without indicating that it is having interpre-
tation problems, and this is reflected in decreased
user satisfaction. We argue that this indicates that
we need better strategies for dealing with termi-
nology problems, and that accepting non-standard
terminology without explicitly addressing the dif-
ference in acceptable phrasing may not be suffi-
cient for effective tutoring.
In Section 2 we describe our tutoring system,
and the two tutoring policies implemented for the
experiment. In Section 3 we present experimen-
tal results and an analysis of correlations between
different types of interpretation problems, learning
gain and user satisfaction. Finally, in Section 4 we
discuss the implications of our results for error re-
covery policies in tutorial dialogue systems.
2 Tutorial Dialogue System and Error
Recovery Policies
This work is based on evaluation of BEETLE II
(Dzikovska et al, 2010), a tutorial dialogue sys-
tem which provides tutoring in basic electricity
and electronics. Students read pre-authored mate-
rials, experiment with a circuit simulator, and then
are asked to explain their observations. BEETLE II
uses a deep parser together with a domain-specific
diagnoser to process student input, and a deep gen-
erator to produce tutorial feedback automatically
depending on the current tutorial policy. It also
implements an error recovery policy to deal with
interpretation problems.
Students currently communicate with the sys-
tem via a typed chat interface. While typing
removes the uncertainty and errors involved in
speech recognition, expected student answers are
considerably more complex and varied than in
a typical spoken dialogue system. Therefore, a
significant number of interpretation errors arise,
primarily during the semantic interpretation pro-
cess. These errors can lead to non-understandings,
when the system cannot produce a syntactic parse
(or a reasonable fragmentary parse), or when it
does not know how to interpret an out-of-domain
word; and misunderstandings, where a system ar-
rives at an incorrect interpretation, due to either
an incorrect attachment in the parse, an incorrect
word sense assigned to an ambiguous word, or an
incorrectly resolved referential expression.
Our approach to selecting an error recovery pol-
icy is to prefer non-understandings to misunder-
standings. There is a known trade-off in spoken di-
alogue systems between allowing misunderstand-
ings, i.e., cases in which a system accepts and
acts on an incorrect interpretation of an utterance,
and non-understandings, i.e., cases in which a sys-
tem rejects an utterance as uninterpretable (Bo-
hus and Rudnicky, 2005). Since misunderstand-
ings on the part of a computer tutor are known
to negatively impact student learning, and since
in human-human tutorial dialogue the majority of
student responses using unexpected terminology
are classified as incorrect (Jordan et al, 2009),
it would be a reasonable approach for a tutorial
dialogue system to deal with potential interpreta-
tion problems by treating low-confidence interpre-
tations as non-understandings and focusing on an
effective non-understanding recovery policy.1
We implemented two different policies for com-
parison. Our baseline policy does not attempt any
remediation or error recovery. All student utter-
ances are passed through the standard interpreta-
tion pipeline, so that the results can be analyzed
later. However, the system does not attempt to ad-
dress the student content. Instead, regardless of
the answer analysis, the system always uses a neu-
tral acceptance and bottom out strategy, giving the
student the correct answer every time, e.g., ?OK.
One way to phrase the correct answer is: the open
switch creates a gap in the circuit?. Thus, the stu-
dents are never given any indication of whether
they have been understood or not.
The full policy acts differently depending on the
analysis of the student answer. For correct an-
swers, it acknowledges the answer as correct and
optionally restates it (see (Dzikovska et al, 2008)
for details). For incorrect answers, it restates the
correct portion of the answer (if any) and provides
a hint to guide the student towards the completely
correct answer. If the student?s utterance cannot be
interpreted, the system responds with a help mes-
sage indicating the cause of the problem together
with a hint. In both cases, after 3 unsuccessful at-
tempts to address the problem the system uses the
bottom out strategy and gives away the answer.
1While there is no confidence score from a speech recog-
nizer, our system uses a combination of a parse quality score
assigned by the parser and a set of consistency checks to de-
termine whether an interpretation is sufficiently reliable.
44
The content of the bottom out is the same as in
the baseline, except that the full system indicates
clearly that the answer was incorrect or was not
understood, e.g., ?Not quite. Here is the answer:
the open switch creates a gap in the circuit?.
The help messages are based on the Targeted-
Help approach successfully used in spoken dia-
logue (Hockey et al, 2003), together with the error
classification we developed for tutorial dialogue
(Dzikovska et al, 2009). There are 9 different er-
ror types, each associated with a different targeted
help message. The goal of the help messages is to
give the student as much information as possible
as to why the system failed to understand them but
without giving away the answer.
In comparing the two policies, we would expect
that the students in both conditions would learn
something, but that the learning gain and user sat-
isfaction would be affected by the difference in
policies. We hypothesized that students who re-
ceive feedback on their errors in the full condition
would learn more compared to those in the base-
line condition.
3 Evaluation
We collected data from 76 subjects interacting
with the system. The subjects were randomly as-
signed to either the baseline (BASE) or the full
(FULL) policy condition. Each subject took a pre-
test, then worked through a lesson with the system,
and then took a post-test and filled in a user satis-
faction survey. Each session lasted approximately
4 hours, with 232 student language turns in FULL
(SD = 25.6) and 156 in BASE (SD = 2.02). Ad-
ditional time was taken by reading and interact-
ing with the simulation environment. The students
had little prior knowledge of the domain. The sur-
vey consisted of 63 questions on the 5-point Lik-
ert scale covering the lesson content, the graphical
user interface, and tutor?s understanding and feed-
back. For purposes of this study, we are using an
averaged tutor score.
The average learning gain was 0.57 (SD =
0.23) in FULL, and 0.63 (SD = 0.26) in BASE.
There was no significant difference in learning
gain between conditions. Students liked BASE bet-
ter: the average tutor evaluation score for FULL
was 2.56 out of 5 (SD = 0.65), compared to 3.32
(SD = 0.65) in BASE. These results are signif-
icantly different (t-test, p < 0.05). In informal
comments after the session many students said that
they were frustrated when the system said that it
did not understand them. However, some students
in BASE also mentioned that they sometimes were
not sure if the system?s answer was correcting a
problem with their answer, or simply phrasing it
in a different way.
We used mean frequency of non-interpretable
utterances (out of all student utterances in
each session) to evaluate the effectiveness of
the two different policies. On average, 14%
of utterances in both conditions resulted in
non-understandings.2 The frequency of non-
understandings was negatively correlated with
learning gain in FULL: r = ?0.47, p < 0.005,
but not significantly correlated with learning gain
in BASE: r = ?0.09, p = 0.59. However, in both
conditions the frequency of non-understandings
was negatively correlated with user satisfaction:
FULL r = ?0.36, p = 0.03, BASE r = ?0.4, p =
0.01. Thus, even though in BASE the system
did not indicate non-understanding, students were
negatively affected. That is, they were not satis-
fied with the policy that did not directly address
the interpretation problems. We discuss possible
reasons for this below.
We investigated the effect of different types of
interpretation errors using two criteria. First, we
checked whether the mean frequency of errors was
reduced between BASE and FULL for each individ-
ual strategy. The reduced frequency means that
the recovery strategy for this particular error type
is effective in reducing the error frequency. Sec-
ond, we looked for the cases where the frequency
of a given error type is negatively correlated with
either learning gain or user satisfaction. This is
provides evidence that such errors are negatively
impacting the learning process, and therefore im-
proving recovery strategies for those error types is
likely to improve overall system effectiveness,
The results, shown in Table 1, indicate that the
majority of interpretation problems are not sig-
nificantly correlated with learning gain. How-
ever, several types of problems appear to be
particularly significant, and are all related to
improper use of domain terminology. These
were irrelevant answer, no appr terms, selec-
tional restriction failure and program error.
An irrelevant answer error occurs when the stu-
dent makes a statement that uses domain termi-
2We do not know the percentage of misunderstandings or
concept error rate as yet. We are currently annotating the data
with the goal to evaluate interpretation correctness.
45
full baseline
error type
mean freq.
(std. dev)
satisfac-
tion r
gain
r
mean freq
(std. dev)
satisfac-
tion r
gain
r
irrelevant answer 0.008 (0.01) -0.08 -0.19 0.012 (0.01) -0.07 -0.47**
no appr terms 0.005 (0.01) -0.57** -0.42** 0.003 (0.01) -0.38** -0.01
selectional restr failure 0.032 (0.02) -0.12 -0.55** 0.040 (0.03) 0.13 0.26*
program error 0.002 (0.003) 0.02 0.26 0.003 (0.003) 0 -0.35**
unknown word 0.023 (0.01) 0.05 -0.21 0.024 (0.02) -0.15 -0.09
disambiguation failure 0.013 (0.01) -0.04 0.02 0.007 (0.01) -0.18 0.19
no parse 0.019 (0.01) -0.14 -0.08 0.022(0.02) -0.3* 0.01
partial interpretation 0.004 (0.004) -0.11 -0.01 0.004 (0.005) -0.19 0.22
reference failure 0.012 (0.02) -0.31* -0.09 0.017 (0.01) -0.15 -0.23
Overall 0.134 (0.05) -0.36** -0.47** 0.139 (0.04) -0.4** -0.09
Table 1: Correlations between frequency of different error types and student learning gain and satisfac-
tion. ** - correlation is significant with p < 0.05, * - with p <= 0.1.
nology but does not appear to answer the system?s
question directly. For example, the expected an-
swer to ?In circuit 1, which components are in a
closed path?? is ?the bulb?. Some students mis-
read the question and say ?Circuit 1 is closed.? If
that happens, in FULL the system says ?Sorry, this
isn?t the form of answer that I expected. I am look-
ing for a component?, pointing out to the student
the kind of information it is looking for. The BASE
system for this error, and for all other errors dis-
cussed below, gives away the correct answer with-
out indicating that there was a problem with in-
terpreting the student?s utterance, e.g., ?OK, the
correct answer is the bulb.?
The no appr terms error happens when the stu-
dent is using terminology inappropriate for the les-
son in general. Students are expected to learn to
explain everything in terms of connections and ter-
minal states. For example, the expected answer to
?What is voltage?? is ?the difference in states be-
tween two terminals?. If instead the student says
?Voltage is electricity?, FULL responds with ?I am
sorry, I am having trouble understanding. I see no
domain concepts in your answer. Here?s a hint:
your answer should mention a terminal.? The mo-
tivation behind this strategy is that in general, it is
very difficult to reason about vaguely used domain
terminology. We had hoped that by telling the stu-
dent that the content of their utterance is outside
the domain as understood by the system, and hint-
ing at the correct terms to use, the system would
guide students towards a better answer.
Selectional restr failure errors are typically due
to incorrect terminology, when the students
phrased answers in a way that contradicted the sys-
tem?s domain knowledge. For example, the sys-
tem can reason about damaged bulbs and batter-
ies, and open and closed paths. So if the stu-
dent says ?The path is damaged?, the FULL sys-
tem would respond with ?I am sorry, I am having
trouble understanding. Paths cannot be damaged.
Only bulbs and batteries can be damaged.?
Program error were caused by faults in the un-
derlying network software, but usually occurred
when the student was using extremely long and
complicated utterances.
Out of the four important error types described
above, only the strategy for irrelevant answer was
effective: the frequency of irrelevant answer er-
rors is significantly higher in BASE (t-test, p <
0.05), and it is negatively correlated with learning
gain in BASE. The frequencies of other error types
did not significantly differ between conditions.
However, one other finding is particularly in-
teresting: the frequency of no appr terms errors
is negatively correlated with user satisfaction in
BASE. This indicates that simply accepting the stu-
dent?s answer when they are using incorrect termi-
nology and exposing them to the correct answer is
not the best strategy, possibly because the students
are noticing the unexplained lack of alignment be-
tween their utterance and the system?s answer.
4 Discussion and Future Work
As discussed in Section 1, previous studies of
short-answer tutorial dialogue systems produced a
counter-intuitive result: measures of interpretation
accuracy were not correlated with learning gain.
With less restricted language, misunderstandings
46
negatively affected learning. Our study provides
further evidence that interpretation quality signif-
icantly affects learning gain in tutorial dialogue.
Moreover, while it has long been known that user
satisfaction is negatively correlated with interpre-
tation error rates in spoken dialogue, this is the
first attempt to evaluate the impact of different
types of interpretation errors on task success and
usability of a tutoring system.
Our results demonstrate that different types of
errors may matter to a different degree. In our
system, all of the error types negatively correlated
with learning gain stem from the same underlying
problem: the use of incorrect or vague terminol-
ogy by the student. With the exception of the ir-
relevant answer strategy, the targeted help strate-
gies we implemented were not effective in reduc-
ing error frequency or improving learning gain.
Additional research is needed to understand why.
One possibility is that irrelevant answer was eas-
ier to remediate compared to other error types. It
usually happened in situations where there was a
clear expectation of the answer type (e.g., a list of
component names, a yes/no answer). Therefore,
it was easier to design an effective prompt. Help
messages for other error types were more frequent
when the expected answer was a complex sen-
tence, and multiple possible ways of phrasing the
correct answer were acceptable. Therefore, it was
more difficult to formulate a prompt that would
clearly describe the problem in all contexts.
One way to improve the help messages may be
to have the system indicate more clearly when user
terminology is a problem. Our system apologized
each time there was a non-understanding, leading
students to believe that they may be answering cor-
rectly but the answer is not being understood. A
different approach would be to say something like
?I am sorry, you are not using the correct termi-
nology in your answer. Here?s a hint: your answer
should mention a terminal?. Together with an ap-
propriate mechanism to detect paraphrases of cor-
rect answers (as opposed to vague answers whose
correctness is difficult to determine), this approach
could be more beneficial in helping students learn.
We are considering implementing and evaluating
this as part of our future work.
Some of the errors, in particular instances of
no appr terms and selectional restr failure, also
stemmed from unrecognized paraphrases with
non-standard terminology. Those answers could
conceivably be accepted by a system using seman-
tic similarity as a metric (e.g., using LSA with pre-
authored answers). However, our results also indi-
cate that simply accepting the incorrect terminol-
ogy may not be the best strategy. Users appear to
be sensitive when the system?s language does not
align with their terminology, as reflected in the de-
creased satisfaction ratings associated with higher
rates of incorrect terminology problems in BASE.
Moreover, prior analysis of human-human data
indicates that tutors use different restate strate-
gies depending on the ?quality? of the student an-
swers, even if they are accepting them as correct
(Dzikovska et al, 2008). Together, these point at
an important unaddressed issue: existing systems
are often built on the assumption that only incor-
rect and missing parts of the student answer should
be remediated, and a wide range of terminology
should be accepted (Graesser et al, 1999; Jordan
et al, 2006). While it is obviously important for
the system to accept a range of different phrasings,
our analysis indicates that this may not be suffi-
cient by itself, and students could potentially ben-
efit from addressing the terminology issues with a
specifically devised strategy.
Finally, it could also be possible that some
differences between strategy effectiveness were
caused by incorrect error type classification. Man-
ual examination of several dialogues suggests that
most of the errors are assigned to the appropri-
ate type, though in some cases incorrect syntac-
tic parses resulted in unexpected interpretation er-
rors, causing the system to give a confusing help
message. These misclassifications appear to be
evenly split between different error types, though
a more formal evaluation is planned in the fu-
ture. However from our initial examination, we
believe that the differences in strategy effective-
ness that we observed are due to the actual differ-
ences in the help messages. Therefore, designing
better prompts would be the key factor in improv-
ing learning and user satisfaction.
Acknowledgments
This work has been supported in part by US Office
of Naval Research grants N000140810043 and
N0001410WX20278. We thank Katherine Harri-
son, Leanne Taylor, Charles Callaway, and Elaine
Farrow for help with setting up the system and
running the evaluation. We would like to thank
anonymous reviewers for their detailed feedback.
47
References
V. Aleven, O. Popescu, and K. R. Koedinger. 2001.
Towards tutorial dialog to support self-explanation:
Adding natural language understanding to a cogni-
tive tutor. In Proceedings of the 10th International
Conference on Artificial Intelligence in Education
(AIED ?01)?.
Dan Bohus and Alexander Rudnicky. 2005. Sorry,
I didn?t catch that! - An investigation of non-
understanding errors and recovery strategies. In
Proceedings of SIGdial-2005, Lisbon, Portugal.
Michelene T. H. Chi, Nicholas de Leeuw, Mei-Hung
Chiu, and Christian LaVancher. 1994. Eliciting
self-explanations improves understanding. Cogni-
tive Science, 18(3):439?477.
Myroslava O. Dzikovska, Gwendolyn E. Campbell,
Charles B. Callaway, Natalie B. Steinhauser, Elaine
Farrow, Johanna D. Moore, Leslie A. Butler, and
Colin Matheson. 2008. Diagnosing natural lan-
guage answers to support adaptive tutoring. In
Proceedings 21st International FLAIRS Conference,
Coconut Grove, Florida, May.
Myroslava O. Dzikovska, Charles B. Callaway, Elaine
Farrow, Johanna D. Moore, Natalie B. Steinhauser,
and Gwendolyn C. Campbell. 2009. Dealing with
interpretation errors in tutorial dialogue. In Pro-
ceedings of SIGDIAL-09, London, UK, Sep.
Myroslava O. Dzikovska, Johanna D. Moore, Natalie
Steinhauser, Gwendolyn Campbell, Elaine Farrow,
and Charles B. Callaway. 2010. Beetle II: a sys-
tem for tutoring and computational linguistics ex-
perimentation. In Proceedings of ACL-2010 demo
session.
A. C. Graesser, P. Wiemer-Hastings, P. Wiemer-
Hastings, and R. Kreuz. 1999. Autotutor: A simula-
tion of a human tutor. Cognitive Systems Research,
1:35?51.
Beth Ann Hockey, Oliver Lemon, Ellen Campana,
Laura Hiatt, Gregory Aist, James Hieronymus,
Alexander Gruenstein, and John Dowding. 2003.
Targeted help for spoken dialogue systems: intelli-
gent feedback improves naive users? performance.
In Proceedings of the tenth conference on European
chapter of the Association for Computational Lin-
guistics, pages 147?154, Morristown, NJ, USA.
Pamela W. Jordan, Maxim Makatchev, and Kurt Van-
Lehn. 2004. Combining competing language under-
standing approaches in an intelligent tutoring sys-
tem. In James C. Lester, Rosa Maria Vicari, and
Fa?bio Paraguac?u, editors, Intelligent Tutoring Sys-
tems, volume 3220 of Lecture Notes in Computer
Science, pages 346?357. Springer.
Pamela Jordan, Maxim Makatchev, Umarani Pap-
puswamy, Kurt VanLehn, and Patricia Albacete.
2006. A natural language tutorial dialogue system
for physics. In Proceedings of the 19th International
FLAIRS conference.
Pamela Jordan, Diane Litman, Michael Lipschultz, and
Joanna Drummond. 2009. Evidence of misunder-
standings in tutorial dialogue and their impact on
learning. In Proceedings of the 14th International
Conference on Artificial Intelligence in Education
(AIED), Brighton, UK, July.
Diane Litman and Kate Forbes-Riley. 2005. Speech
recognition performance and learning in spoken di-
alogue tutoring. In Proceedings of EUROSPEECH-
2005, page 1427.
Diane Litman, Johanna Moore, Myroslava Dzikovska,
and Elaine Farrow. 2009. Generalizing tutorial dia-
logue results. In Proceedings of 14th International
Conference on Artificial Intelligence in Education
(AIED), Brighton, UK, July.
Philip M. McCarthy, Vasile Rus, Scott Crossley,
Arthur C. Graesser, and Danielle S. McNamara.
2008. Assessing forward-, reverse-, and average-
entailment indeces on natural language input from
the intelligent tutoring system, iSTART. In Proceed-
ings of the 21st International FLAIRS conference,
pages 165?170.
Rodney D. Nielsen, Wayne Ward, and James H. Mar-
tin. 2008. Learning to assess low-level conceptual
understanding. In Proceedings 21st International
FLAIRS Conference, Coconut Grove, Florida, May.
Heather Pon-Barry, Brady Clark, Elizabeth Owen
Bratt, Karl Schultz, and Stanley Peters. 2004. Eval-
uating the effectiveness of SCoT: A spoken conver-
sational tutor. In J. Mostow and P. Tedesco, editors,
Proceedings of the ITS 2004 Workshop on Dialog-
based Intelligent Tutoring Systems, pages 23?32.
Amruta Purandare and Diane Litman. 2008. Content-
learning correlations in spoken tutoring dialogs at
word, turn and discourse levels. In Proceedings 21st
International FLAIRS Conference, Coconut Grove,
Florida, May.
48
Proceedings of the ACL 2010 System Demonstrations, pages 13?18,
Uppsala, Sweden, 13 July 2010. c?2010 Association for Computational Linguistics
BEETLE II: a system for tutoring and computational linguistics
experimentation
Myroslava O. Dzikovska and Johanna D. Moore
School of Informatics, University of Edinburgh, Edinburgh, United Kingdom
{m.dzikovska,j.moore}@ed.ac.uk
Natalie Steinhauser and Gwendolyn Campbell
Naval Air Warfare Center Training Systems Division, Orlando, FL, USA
{gwendolyn.campbell,natalie.steihauser}@navy.mil
Elaine Farrow
Heriot-Watt University
Edinburgh, United Kingdom
e.farrow@hw.ac.uk
Charles B. Callaway
University of Haifa
Mount Carmel, Haifa, Israel
ccallawa@gmail.com
Abstract
We present BEETLE II, a tutorial dia-
logue system designed to accept unre-
stricted language input and support exper-
imentation with different tutorial planning
and dialogue strategies. Our first system
evaluation used two different tutorial poli-
cies and demonstrated that the system can
be successfully used to study the impact
of different approaches to tutoring. In the
future, the system can also be used to ex-
periment with a variety of natural language
interpretation and generation techniques.
1 Introduction
Over the last decade there has been a lot of inter-
est in developing tutorial dialogue systems that un-
derstand student explanations (Jordan et al, 2006;
Graesser et al, 1999; Aleven et al, 2001; Buckley
and Wolska, 2007; Nielsen et al, 2008; VanLehn
et al, 2007), because high percentages of self-
explanation and student contentful talk are known
to be correlated with better learning in human-
human tutoring (Chi et al, 1994; Litman et al,
2009; Purandare and Litman, 2008; Steinhauser et
al., 2007). However, most existing systems use
pre-authored tutor responses for addressing stu-
dent errors. The advantage of this approach is that
tutors can devise remediation dialogues that are
highly tailored to specific misconceptions many
students share, providing step-by-step scaffolding
and potentially suggesting additional problems.
The disadvantage is a lack of adaptivity and gen-
erality: students often get the same remediation
for the same error regardless of their past perfor-
mance or dialogue context, as it is infeasible to
author a different remediation dialogue for every
possible dialogue state. It also becomes more dif-
ficult to experiment with different tutorial policies
within the system due to the inherent completixites
in applying tutoring strategies consistently across
a large number of individual hand-authored reme-
diations.
The BEETLE II system architecture is designed
to overcome these limitations (Callaway et al,
2007). It uses a deep parser and generator, to-
gether with a domain reasoner and a diagnoser,
to produce detailed analyses of student utterances
and generate feedback automatically. This allows
the system to consistently apply the same tutorial
policy across a range of questions. To some extent,
this comes at the expense of being able to address
individual student misconceptions. However, the
system?s modular setup and extensibility make it
a suitable testbed for both computational linguis-
tics algorithms and more general questions about
theories of learning.
A distinguishing feature of the system is that it
is based on an introductory electricity and elec-
tronics course developed by experienced instruc-
tional designers. The course was first created for
use in a human-human tutoring study, without tak-
ing into account possible limitations of computer
tutoring. The exercises were then transferred into
a computer system with only minor adjustments
(e.g., breaking down compound questions into in-
dividual questions). This resulted in a realistic tu-
toring setup, which presents interesting challenges
to language processing components, involving a
wide variety of language phenomena.
We demonstrate a version of the system that
has undergone a successful user evaluation in
13
2009. The evaluation results indicate that addi-
tional improvements to remediation strategies, and
especially to strategies dealing with interpretation
problems, are necessary for effective tutoring. At
the same time, the successful large-scale evalua-
tion shows that BEETLE II can be used as a plat-
form for future experimentation.
The rest of this paper discusses the BEETLE II
system architecture (Section 2), system evaluation
(Section 3), and the range of computational lin-
guistics problems that can be investigated using
BEETLE II (Section 4).
2 System Architecture
The BEETLE II system delivers basic electricity
and electronics tutoring to students with no prior
knowledge of the subject. A screenshot of the sys-
tem is shown in Figure 1. The student interface in-
cludes an area to display reading material, a circuit
simulator, and a dialogue history window. All in-
teractions with the system are typed. Students read
pre-authored curriculum slides and carry out exer-
cises which involve experimenting with the circuit
simulator and explaining the observed behavior.
The system also asks some high-level questions,
such as ?What is voltage??.
The system architecture is shown in Figure 2.
The system uses a standard interpretation pipeline,
with domain-independent parsing and generation
components supported by domain specific reason-
ers for decision making. The architecture is dis-
cussed in detail in the rest of this section.
2.1 Interpretation Components
We use the TRIPS dialogue parser (Allen et al,
2007) to parse the utterances. The parser provides
a domain-independent semantic representation in-
cluding high-level word senses and semantic role
labels. The contextual interpreter then uses a refer-
ence resolution approach similar to Byron (2002),
and an ontology mapping mechanism (Dzikovska
et al, 2008a) to produce a domain-specific seman-
tic representation of the student?s output. Utter-
ance content is represented as a set of extracted
objects and relations between them. Negation is
supported, together with a heuristic scoping algo-
rithm. The interpreter also performs basic ellipsis
resolution. For example, it can determine that in
the answer to the question ?Which bulbs will be
on and which bulbs will be off in this diagram??,
?off? can be taken to mean ?all bulbs in the di-
agram will be off.? The resulting output is then
passed on to the domain reasoning and diagnosis
components.
2.2 Domain Reasoning and Diagnosis
The system uses a knowledge base implemented in
the KM representation language (Clark and Porter,
1999; Dzikovska et al, 2006) to represent the state
of the world. At present, the knowledge base rep-
resents 14 object types and supports the curricu-
lum containing over 200 questions and 40 differ-
ent circuits.
Student explanations are checked on two levels,
verifying factual and explanation correctness. For
example, for a question ?Why is bulb A lit??, if
the student says ?it is in a closed path?, the system
checks two things: a) is the bulb indeed in a closed
path? and b) is being in a closed path a reason-
able explanation for the bulb being lit? Different
remediation strategies need to be used depending
on whether the student made a factual error (i.e.,
they misread the diagram and the bulb is not in a
closed path) or produced an incorrect explanation
(i.e., the bulb is indeed in a closed path, but they
failed to mention that a battery needs to be in the
same closed path for the bulb to light).
The knowledge base is used to check the fac-
tual correctness of the answers first, and then a di-
agnoser checks the explanation correctness. The
diagnoser, based on Dzikovska et al (2008b), out-
puts a diagnosis which consists of lists of correct,
contradictory and non-mentioned objects and re-
lations from the student?s answer. At present, the
system uses a heuristic matching algorithm to clas-
sify relations into the appropriate category, though
in the future we may consider a classifier similar
to Nielsen et al (2008).
2.3 Tutorial Planner
The tutorial planner implements a set of generic
tutoring strategies, as well as a policy to choose
an appropriate strategy at each point of the inter-
action. It is designed so that different policies can
be defined for the system. The currently imple-
mented strategies are: acknowledging the correct
part of the answer; suggesting a slide to read with
background material; prompting for missing parts
of the answer; hinting (low- and high- specificity);
and giving away the answer. Two or more strate-
gies can be used together if necessary.
The hint selection mechanism generates hints
automatically. For a low specificity hint it selects
14
Figure 1: Screenshot of the BEETLE II system
Dialogue ManagerParserContextualInterpreter
Interpretation
CurriculumPlanner
KnowledgeBase
Content Planner & Generator
TutorialPlanner
Tutoring
GUI
Diagnoser
Figure 2: System architecture diagram
15
an as-yet unmentioned object and hints at it, for
example, ?Here?s a hint: Your answer should men-
tion a battery.? For high-specificity, it attempts to
hint at a two-place relation, for example, ?Here?s
a hint: the battery is connected to something.?
The tutorial policy makes a high-level decision
as to which strategy to use (for example, ?ac-
knowledge the correct part and give a high speci-
ficity hint?) based on the answer analysis and di-
alogue context. At present, the system takes into
consideration the number of incorrect answers re-
ceived in response to the current question and the
number of uninterpretable answers.1
In addition to a remediation policy, the tuto-
rial planner implements an error recovery policy
(Dzikovska et al, 2009). Since the system ac-
cepts unrestricted input, interpretation errors are
unavoidable. Our recovery policy is modeled on
the TargetedHelp (Hockey et al, 2003) policy used
in task-oriented dialogue. If the system cannot
find an interpretation for an utterance, it attempts
to produce a message that describes the problem
but without giving away the answer, for example,
?I?m sorry, I?m having a problem understanding. I
don?t know the word power.? The help message is
accompanied with a hint at the appropriate level,
also depending on the number of previous incor-
rect and non-interpretable answers.
2.4 Generation
The strategy decision made by the tutorial plan-
ner, together with relevant semantic content from
the student?s answer (e.g., part of the answer to
confirm), is passed to content planning and gen-
eration. The system uses a domain-specific con-
tent planner to produce input to the surface realizer
based on the strategy decision, and a FUF/SURGE
(Elhadad and Robin, 1992) generation system to
produce the appropriate text. Templates are used
to generate some stock phrases such as ?When you
are ready, go on to the next slide.?
2.5 Dialogue Management
Interaction between components is coordinated by
the dialogue manager which uses the information-
state approach (Larsson and Traum, 2000). The
dialogue state is represented by a cumulative an-
swer analysis which tracks, over multiple turns,
the correct, incorrect, and not-yet-mentioned parts
1Other factors such as student confidence could be con-
sidered as well (Callaway et al, 2007).
of the answer. Once the complete answer has been
accumulated, the system accepts it and moves on.
Tutor hints can contribute parts of the answer to
the cumulative state as well, allowing the system
to jointly construct the solution with the student.
3 Evaluation
The first experimental evaluation involving 81 par-
ticipants (undergraduates recruited from a South-
eastern University in the USA) was completed in
2009. Participants had little or no prior knowledge
of the domain. Each participant took a pre-test,
worked through a lesson with the system, took a
post-test, and completed a user satisfaction survey.
Each session lasted approximately 4 hours.
We implemented two different tutoring policies
in the system for this evaluation. The baseline
policy used an ?accept and bottom out? strategy
for all student answers, regardless of their con-
tent. The students were always given the correct
answer, but the system made no attempt at reme-
diation, and never indicated whether the student
was understood (or correct). In comparison, the
full adaptive policy attempted to select an appro-
priate strategy based on student answer analysis
and dialogue context, as described above. Stu-
dents were randomly assigned to a condition. On
average, each student session contained 232 stu-
dent language turns in the fully adaptive condition
(SD = 25.6) and 156 turns in the baseline condi-
tion (SD = 2.02). Additional time was taken by
reading and interacting with the simulation envi-
ronment.
Out of 81 students, 76 successfully completed
the evaluation (data from 5 participants had to be
discarded due to system crashes). There was no
significant difference in learning gain between the
two conditions (baseline: M = 0.63, SD = 0.26,
full: M = 0.57, SD = 0.23, t-test p = 0.32),
and students gave higher satisfaction scores to the
baseline condition (baseline: M = 3.32, SD =
0.65, full: M = 2.56, SD = 0.65, t-test, p <
0.01). We are currently analyzing the data to in-
vestigate the reasons for this outcome. However,
the evaluation demonstrated that the system can be
successfully deployed in experiments with naive
users and therefore can be used to study the im-
pact of different natural language processing algo-
rithms on learning gain and user satisfaction.
An example dialogue with the system, taken
from the evaluation corpus, is shown in Figure 3.
16
Tutor: Why was bulb A on when switch Y
was open and switch Z was closed?
Student: because it had a closed path
Tutor: Right. There is a closed path. Keep
going.
Student: there was a closed path not effected by
the switch
Tutor: I?m sorry, I?m having a problem un-
derstanding. I don?t understand the
word ?effect? here. Here?s a hint. Your
answer should mention a battery.
Student: it has a closed path with the battery
Tutor: You?re on the right track. Here?s the
answer. Bulb A is still contained in a
closed path with the battery.
Figure 3: Example interaction with the system
from our corpus
It shows three key system properties: after the stu-
dent?s first turn, the system rephrases its under-
standing of the correct part of the student answer
and prompts the student to supply the missing in-
formation. In the second turn, the student utter-
ance could not be interpreted and the system re-
sponds with a targeted help message and a hint
about the object that needs to be mentioned. Fi-
nally, in the last turn the system combines the in-
formation from the tutor?s hint and the student?s
answers and restates the complete answer since the
current answer was completed over multiple turns.
4 Conclusions and Future Work
The BEETLE II system we present was built to
serve as a platform for research in computational
linguistics and tutoring, and can be used for task-
based evaluation of algorithms developed for other
domains. We are currently developing an annota-
tion scheme for the data we collected to identify
student paraphrases of correct answers. The an-
notated data will be used to evaluate the accuracy
of existing paraphrasing and textual entailment ap-
proaches and to investigate how to combine such
algorithms with the current deep linguistic analy-
sis to improve system robustness. We also plan
to annotate the data we collected for evidence of
misunderstandings, i.e., situations where the sys-
tem arrived at an incorrect interpretation of a stu-
dent utterance and took action on it. Such annota-
tion can provide useful input for statistical learn-
ing algorithms to detect and recover from misun-
derstandings.
In dialogue management and generation, the
key issue we are planning to investigate is that of
linguistic alignment. The analysis of the data we
have collected indicates that student satisfaction
may be affected if the system rephrases student
answers using different words (for example, using
better terminology) but doesn?t explicitly explain
the reason why different terminology is needed
(Dzikovska et al, 2010). Results from other sys-
tems show that measures of semantic coherence
between a student and a system were positively as-
sociated with higher learning gain (Ward and Lit-
man, 2006). Using a deep generator to automati-
cally generate system feedback gives us a level of
control over the output and will allow us to devise
experiments to study those issues in more detail.
From the point of view of tutoring research,
we are planning to use the system to answer
questions about the effectiveness of different ap-
proaches to tutoring, and the differences between
human-human and human-computer tutoring. Pre-
vious comparisons of human-human and human-
computer dialogue were limited to systems that
asked short-answer questions (Litman et al, 2006;
Rose? and Torrey, 2005). Having a system that al-
lows more unrestricted language input will pro-
vide a more balanced comparison. We are also
planning experiments that will allow us to eval-
uate the effectiveness of individual strategies im-
plemented in the system by comparing system ver-
sions using different tutoring policies.
Acknowledgments
This work has been supported in part by US Office
of Naval Research grants N000140810043 and
N0001410WX20278. We thank Katherine Harri-
son and Leanne Taylor for their help running the
evaluation.
References
V. Aleven, O. Popescu, and K. R. Koedinger. 2001.
Towards tutorial dialog to support self-explanation:
Adding natural language understanding to a cogni-
tive tutor. In Proceedings of the 10th International
Conference on Artificial Intelligence in Education
(AIED ?01)?.
James Allen, Myroslava Dzikovska, Mehdi Manshadi,
and Mary Swift. 2007. Deep linguistic processing
for spoken dialogue systems. In Proceedings of the
ACL-07 Workshop on Deep Linguistic Processing.
17
Mark Buckley and Magdalena Wolska. 2007. To-
wards modelling and using common ground in tu-
torial dialogue. In Proceedings of DECALOG, the
2007 Workshop on the Semantics and Pragmatics of
Dialogue, pages 41?48.
Donna K. Byron. 2002. Resolving Pronominal Refer-
ence to Abstract Entities. Ph.D. thesis, University of
Rochester.
Charles B. Callaway, Myroslava Dzikovska, Elaine
Farrow, Manuel Marques-Pita, Colin Matheson, and
Johanna D. Moore. 2007. The Beetle and BeeD-
iff tutoring systems. In Proceedings of SLaTE?07
(Speech and Language Technology in Education).
Michelene T. H. Chi, Nicholas de Leeuw, Mei-Hung
Chiu, and Christian LaVancher. 1994. Eliciting
self-explanations improves understanding. Cogni-
tive Science, 18(3):439?477.
Peter Clark and Bruce Porter, 1999. KM (1.4): Users
Manual. http://www.cs.utexas.edu/users/mfkb/km.
Myroslava O. Dzikovska, Charles B. Callaway, and
Elaine Farrow. 2006. Interpretation and generation
in a knowledge-based tutorial system. In Proceed-
ings of EACL-06 workshop on knowledge and rea-
soning for language processing, Trento, Italy, April.
Myroslava O. Dzikovska, James F. Allen, and Mary D.
Swift. 2008a. Linking semantic and knowledge
representations in a multi-domain dialogue system.
Journal of Logic and Computation, 18(3):405?430.
Myroslava O. Dzikovska, Gwendolyn E. Campbell,
Charles B. Callaway, Natalie B. Steinhauser, Elaine
Farrow, Johanna D. Moore, Leslie A. Butler, and
Colin Matheson. 2008b. Diagnosing natural lan-
guage answers to support adaptive tutoring. In
Proceedings 21st International FLAIRS Conference,
Coconut Grove, Florida, May.
Myroslava O. Dzikovska, Charles B. Callaway, Elaine
Farrow, Johanna D. Moore, Natalie B. Steinhauser,
and Gwendolyn C. Campbell. 2009. Dealing with
interpretation errors in tutorial dialogue. In Pro-
ceedings of SIGDIAL-09, London, UK, Sep.
Myroslava O. Dzikovska, Johanna D. Moore, Natalie
Steinhauser, and Gwendolyn Campbell. 2010. The
impact of interpretation problems on tutorial dia-
logue. In Proceedings of the 48th Annual Meeting of
the Association for Computational Linguistics(ACL-
2010).
Michael Elhadad and Jacques Robin. 1992. Control-
ling content realization with functional unification
grammars. In R. Dale, E. Hovy, D. Ro?sner, and
O. Stock, editors, Proceedings of the Sixth Interna-
tional Workshop on Natural Language Generation,
pages 89?104, Berlin, April. Springer-Verlag.
A. C. Graesser, P. Wiemer-Hastings, P. Wiemer-
Hastings, and R. Kreuz. 1999. Autotutor: A simula-
tion of a human tutor. Cognitive Systems Research,
1:35?51.
Beth Ann Hockey, Oliver Lemon, Ellen Campana,
Laura Hiatt, Gregory Aist, James Hieronymus,
Alexander Gruenstein, and John Dowding. 2003.
Targeted help for spoken dialogue systems: intelli-
gent feedback improves naive users? performance.
In Proceedings of the tenth conference on European
chapter of the Association for Computational Lin-
guistics, pages 147?154, Morristown, NJ, USA.
Pamela Jordan, Maxim Makatchev, Umarani Pap-
puswamy, Kurt VanLehn, and Patricia Albacete.
2006. A natural language tutorial dialogue system
for physics. In Proceedings of the 19th International
FLAIRS conference.
Staffan Larsson and David Traum. 2000. Information
state and dialogue management in the TRINDI Dia-
logue Move Engine Toolkit. Natural Language En-
gineering, 6(3-4):323?340.
Diane Litman, Carolyn P. Rose?, Kate Forbes-Riley,
Kurt VanLehn, Dumisizwe Bhembe, and Scott Sil-
liman. 2006. Spoken versus typed human and com-
puter dialogue tutoring. International Journal of Ar-
tificial Intelligence in Education, 16:145?170.
Diane Litman, Johanna Moore, Myroslava Dzikovska,
and Elaine Farrow. 2009. Generalizing tutorial dia-
logue results. In Proceedings of 14th International
Conference on Artificial Intelligence in Education
(AIED), Brighton, UK, July.
Rodney D. Nielsen, Wayne Ward, and James H. Mar-
tin. 2008. Learning to assess low-level conceptual
understanding. In Proceedings 21st International
FLAIRS Conference, Coconut Grove, Florida, May.
Amruta Purandare and Diane Litman. 2008. Content-
learning correlations in spoken tutoring dialogs at
word, turn and discourse levels. In Proceedings 21st
International FLAIRS Conference, Coconut Grove,
Florida, May.
C.P. Rose? and C. Torrey. 2005. Interactivity versus ex-
pectation: Eliciting learning oriented behavior with
tutorial dialogue systems. In Proceedings of Inter-
act?05.
N. B. Steinhauser, L. A. Butler, and G. E. Campbell.
2007. Simulated tutors in immersive learning envi-
ronments: Empirically-derived design principles. In
Proceedings of the 2007 Interservice/Industry Train-
ing, Simulation and Education Conference, Orlando,
FL.
Kurt VanLehn, Pamela Jordan, and Diane Litman.
2007. Developing pedagogically effective tutorial
dialogue tactics: Experiments and a testbed. In Pro-
ceedings of SLaTE Workshop on Speech and Lan-
guage Technology in Education, Farmington, PA,
October.
Arthur Ward and Diane Litman. 2006. Cohesion and
learning in a tutorial spoken dialog system. In Pro-
ceedings of 19th International FLAIRS (Florida Ar-
tificial Intelligence Research Society) Conference,
Melbourne Beach, FL.
18
Proceedings of the SIGDIAL 2011: the 12th Annual Meeting of the Special Interest Group on Discourse and Dialogue, pages 162?172,
Portland, Oregon, June 17-18, 2011. c?2011 Association for Computational Linguistics
Exploring User Satisfaction in a Tutorial Dialogue System
Myroslava O. Dzikovska, Johanna D. Moore
School of Informatics, University of Edinburgh
Edinburgh, United Kingdom
m.dzikovska,j.moore@ed.ac.uk
Natalie Steinhauser, Gwendolyn Campbell
Naval Air Warfare Center Training Systems Division
Orlando, Florida, USA
gwendolyn.campbell,natalie.steinhauser@navy.mil
Abstract
User satisfaction is a common evaluation met-
ric in task-oriented dialogue systems, whereas
tutorial dialogue systems are often evaluated
in terms of student learning gain. However,
user satisfaction is also important for such
systems, since it may predict technology ac-
ceptance. We present a detailed satisfaction
questionnaire used in evaluating the BEETLE
II system (REVU-NL), and explore the un-
derlying components of user satisfaction us-
ing factor analysis. We demonstrate interest-
ing patterns of interaction between interpreta-
tion quality, satisfaction and the dialogue pol-
icy, highlighting the importance of more fine-
grained evaluation of user satisfaction.
1 Introduction
User satisfaction is one of the primary evaluation
measures for task-oriented spoken dialogue systems
(SDS): the goal of an SDS is to accomplish the task,
and to keep the user satisfied, so that they will want
to continue using the system. Typically, the PAR-
ADISE methodology (Walker et al, 2000) is used to
establish a performance function which relates user
satisfaction measured through questionnaires to in-
teraction parameters that can be derived from sys-
tem logs. This function can then be used to better
understand which properties of the interaction have
the most impact on the users, and to compare differ-
ent system versions.
In contrast, tutorial dialogue systems are typically
evaluated in terms of student learning gain, by com-
paring student scores on standardized tests before
and after interacting with the system. This is clearly
an important evaluation metric, since it directly as-
sesses the benefit students obtain from using the sys-
tem. However, it is also important to evaluate user
satisfaction, since it can influence students? willing-
ness to use computer tutors in a long run. Thus,
recent studies have looked at factors that could in-
fluence user satisfaction in tutorial dialogue, such as
different tutoring policies (Forbes-Riley and Litman,
2011), quality of speech output (Forbes-Riley et al,
2006), and students? prior attitudes towards technol-
ogy (Jackson et al, 2009).
Assessing user satisfaction, however, is not a
straightforward task. As we discuss in more detail in
Section 2, user satisfaction is known to be a complex
multi-dimensional construct, composed of largely
independent factors such as perceived ease of use
and perceived usefulness. Therefore, questionnaires
used for assessing satisfaction need to be validated
through user studies, and different satisfaction di-
mensions should be assessed independently. There-
fore, SDS researchers are now starting to use tech-
niques from psychometrics for this purpose (Hone
and Graham, 2000; Mo?ller et al, 2007). However,
user satisfaction studies tutorial dialogue currently
rely on simple questionnaires adapted from either
task-oriented SDS or non-dialogue intelligent tutor-
ing systems (Michael et al, 2003; Forbes-Riley et
al., 2006; Forbes-Riley and Litman, 2011; Jackson
et al, 2009), and these questionnaires have not been
validated for tutorial dialogue systems.
In this paper, we make the first step towards de-
veloping a better user satisfaction questionnaire for
tutorial dialogue systems. We present a user satis-
162
faction evaluation of the BEETLE II tutorial dialogue
system. Starting with a detailed user satisfaction
questionnaire, we employ exploratory factor analy-
sis to discover a set of dimensions for the students?
satisfaction with a dialogue-based tutor. We then
use the factors we derived to compare user satisfac-
tion between two versions of our computer tutor that
use different policies for generating the tutor?s feed-
back. We investigate the relationships between the
subjective satisfaction dimensions and the objective
learning gain metric for the two systems. Finally, we
carry out a more detailed investigation of our prior
results on the relationship between user satisfaction
and interpretation quality in tutorial dialogue. Our
analysis also provides insights for further improving
the questionnaire we developed and gives an exam-
ple of how user satisfaction metrics developed for
task-oriented dialogue can be adapted to different
dialogue applications. It also opens new questions
about how different properties of the interaction af-
fect user satisfaction in tutorial dialogue, which can
be investigated in future work.
The rest of the paper is organized as follows. We
discuss the approaches for assessing user satisfac-
tion with SDS in Section 2. In Section 3 we describe
the BEETLE II tutorial dialogue system used in this
evaluation. We describe our questionnaire design in
Section 4, and describe its use in BEETLE II evalu-
ation in Section 5. We conclude by discussing the
implication of our analysis for tutorial dialogue sys-
tem evaluation in Section 6.
2 Background
A typical approach to assessing user satisfaction in
dialogue systems is collecting user survey data by
asking users to rate their agreement with statements
such as ?the system was easy to use?. In the simplest
case of early PARADISE studies, the questionnaires
contained 5 items assessing different dimensions of
satisfaction, which were then summed to produce a
total satisfaction score.
However, using simple questionnaires has draw-
backs now recognized by the SDS community. First,
if individual questions are expected to assess differ-
ent dimensions of user satisfaction, they need to be
validated first, or else they may be ambiguous and
mean different things to different users. Second,
summing or averaging over questions measuring dif-
ferent satisfaction components may not be the best
approach, since it may conflate unrelated judgments
(Hone and Graham, 2000).
To address this problem, SDS researchers have
started using more complex questionnaires, where
each underlying dimension of user satisfaction is as-
sessed through multiple questions. Factor analysis is
then used to determine which questions are related
to one another (and therefore are likely to be assess-
ing the same underlying satisfaction dimension), and
to discard possibly ambiguous questions. Then, the
PARADISE methodology can be used to relate dif-
ferent interaction parameters to individual compo-
nents of user satisfaction.
Several such studies have been conducted recently
(Hone and Graham, 2000; Larsen, 2003; Mo?ller et
al., 2007; Wolters et al, 2009), covering command-
and-control and information-seeking dialogue. The
questionnaires in those studies contained 25 to 50
items, and factor analyses typically resulted in 6- or
7-factor solutions, with dimensions such as accept-
ability, affect, system response accuracy and cogni-
tive demand. The underlying factors found by those
analyses tend to match up well, but not to over-
lap perfectly. In comparison, all user satisfaction
questionnaires for tutorial dialogue systems that we
are aware of contain 10-15 items which are either
summed up for PARADISE studies, or compared
individually to track system improvement (Michael
et al, 2003; Forbes-Riley et al, 2006; Forbes-Riley
and Litman, 2011; Jackson et al, 2009).
In this paper, we apply the more sophisticated
SDS evaluation methodology to the BEETLE II tu-
torial dialogue system. We devise a more sophis-
ticated user satisfaction questionnaire using SDS
questionnaires for guidance and then apply factor
analysis to investigate the underlying dimensions.
We compare our results to analyses from two pre-
vious studies: SASSI (Hone and Graham, 2000),
which is a validated questionnaire intended for use
with a variety of task-oriented dialogue systems,
and a more recent ?modified SASSI? questionnaire
which is a version of SASSI adapted for use with the
INSPIRE home control system (Mo?ller et al, 2007).
Henceforth we will refer to this as INSPIRE.
163
3 BEETLE II Tutorial Dialogue System
The goal of BEETLE II (Dzikovska et al, 2010c)
is to teach students conceptual knowledge in the do-
main of basic electricity and electronics. The system
is built on the premise that encouraging students to
explain their answers and to talk about the domain
will lead to improved learning, a finding consistent
with analyses of human-human tutoring in several
domains (Purandare and Litman, 2008; Litman et
al., 2009). BEETLE II has been engineered to test
this hypothesis by eliciting contentful talk through
explanation questions.
The BEETLE II learning material consists of two
self-contained lessons suitable for college-level stu-
dents with no prior knowledge of basic electricity
and electronics. The lessons take 4 to 5 hours to
complete, and consist of reading materials and inter-
active exercises. During the exercises, the students
interact with a circuit simulator, building electrical
circuits containing bulbs, batteries and switches, and
using a multimeter to measure voltage. Then the
tutor asks students to explain circuit behavior, for
example, ?Why was bulb A on when switch Y was
open and switch Z was closed?? In addition, at dif-
ferent points in the lesson the tutor asks ?summary?
questions, asking students to define concepts such
as voltage, and verbalize general patterns such as
?What are the conditions that are required for a bulb
to light??. At present, students use a typed chat in-
terface to communicate with the system.1
We built and evaluated two versions of the sys-
tem (Dzikovska et al, 2010a). The baseline non-
adaptive tutor (BASE) requires students to produce
answers, but does not provide any remediation and
immediately states the correct answer. The fully
adaptive version (FULL) engages in dialogue with
the student, and tailors its feedback to the student?s
answer by confirming its correct parts and giving
hints in order to help students fix missing or incor-
rect parts. The FULL system generates feedback au-
tomatically based on a detailed analysis of the stu-
dent?s input, and is capable of giving hints at differ-
ent levels of specificity depending on the student?s
previous performance.
1A speech interface is being developed, but typed communi-
cation is common in online and distance learning, and therefore
is an acceptable choice for tutorial dialogue as well.
These two system versions were designed to eval-
uate the impact of adaptive feedback (within the lim-
itations of current language interpretation technol-
ogy) on student learning and satisfaction. Our initial
data analysis focused on the differences in student
language depending on the condition (Dzikovska et
al., 2010a), and on the impact of different types of
interpretation errors on learning gain and user sat-
isfaction (Dzikovska et al, 2010b). However, these
initial results were based on an aggregate satisfac-
tion score obtained by averaging over scores for all
questions in our user satisfaction questionnaire. In
this analysis, we take a more detailed look at the dif-
ferent factors that contribute to students satisfaction
with the system, and their relationship with learning
gain and interpretation quality.
4 Data Collection
4.1 Questionnaire Design
To support user satisfaction evaluation we developed
a satisfaction questionnaire, REVU-IT (Report on
the Enjoyment, Value, and Usability of an Intelli-
gent Tutor). It consists of 63 items which cover all
aspects of interaction with the tutoring system: the
clarity and usefulness of the reading material; the
graphical user interface to the circuit simulator; in-
teraction with the dialogue tutor; and the overall im-
pression of the BEETLE II system as a whole. The
reading material, graphical user interface and inter-
action with the tutor sections are complementary,
because they cover separate parts of the BEETLE II
interface. We expect that all of these three compo-
nents contribute to the overall impression score. For
purposes of this paper, we will focus on the part of
the questionnaire that relates to the natural language
interaction with the tutor (REVU-NL), and its re-
lationship to the overall impression score (REVU-
OVERALL).
The REVU-IT questionnaire was developed by
experienced cognitive psychologists (two of the au-
thors of this paper). The REVU-NL section con-
sists of 35 items shown in Appendix A. Its design
was guided by questionnaires used in previous re-
search, including INSPIRE and a questionnaire used
to evaluate the ITSPOKE tutorial dialogue system
(Forbes-Riley et al, 2006). REVU-NL contains a
number of items from these, but omits items that are
164
not relevant to the BEETLE II domain (e.g, ?Domes-
tic devices can be operated efficiently with the sys-
tem? or ?The tutor responded effectively after I was
uncertain?), and adds extra questions related to tu-
toring (e.g., ?Our dialogues quickly led to me hav-
ing a deeper understanding of the material?), based
on the authors? previous experience in human factors
research. We also slightly rephrased all questions to
refer to ?the tutor? rather than ?the system?.
The REVU-OVERALL section of REVU-IT
consists of 5 items assessing the student?s satis-
faction with their learning as a whole. The ques-
tions are: ?Overall, I am satisfied with my experi-
ence learning about electricity from this system.?;
?Working in this learning environment was just like
working one-on-one with a human tutor?; ?I would
have preferred to learn about electricity in a different
way.?; ?I would use this system again in the future to
continue to learn about electricity.?; ?I would like to
be able to use a system like this to learn about other
topics in the future.?. We use the averaged score over
these 5 items to represent the student?s overall satis-
faction with the learning environment, referring to it
as ?overall satisfaction?.
Adding new questions to the REVU-NL ques-
tionnaire on top of already existing questions is the
initial step in addressing the issues discussed in Sec-
tion 2: validating the individual questions and dis-
covering the underlying dimensions of user satis-
faction. Having a large number of questions ask-
ing about the same aspects of the interaction will
allow us to group related questions together into di-
mensions (?factors?), and also to discover ambigu-
ous questions that will need to be improved in future
studies. The detailed discussion of the technique and
issues involved is presented in Hone and Graham
(2000).
4.2 Participants
We used REVU-IT as part of a controlled experi-
ment comparing the BASE and FULL versions of the
system. We recruited 87 participants from a uni-
versity in the Southern US, paid for participation.
Participants had little knowledge of the domain.
Each participant signed consent forms and com-
pleted a pre-test, then worked through both lessons
(with breaks), and then completed a post-test and a
REVU-IT questionnaire. Each session lasted 3.5
hours on average.
Out of 87 participants that completed the study, 13
had an inordinate amount of trouble with interface:
they typed utterances that could not be interpreted
by the tutor (defined as having more than 3 standard
deviations in interpretation errors compared to the
rest), did not follow tutor?s instructions or experi-
enced system crashes. In addition, two participants
were learning gain outliers (again, more than 3 stan-
dard deviations from average). These participants
were removed from the analysis. The questionnaires
from the remaining 72 participants are used in our
data analysis.
5 Analysis
5.1 Underlying satisfaction dimensions
Each item in the REVU-NL questionnaire used a
5-point Likert scale, from ?completely disagree? (1)
to ?fully agree? (5). Most of the items were phrased
so that the agreement with the statement meant a
positive evaluation of the system. For a few items,
however, the polarity was reversed (e.g., ?The tutor
was not helpful?). Those items were reverse-coded,
with 1 meaning ?fully agree? and 5 ?completely dis-
agree?, to ensure that a lower score on all questions
corresponds to a negative assessment.
Following Hone and Graham (2000), we used
exploratory factor analysis to group questionnaire
items into clusters representing different dimen-
sions. One of the standard approaches in determin-
ing how many factors (?question clusters?) to use
is the scree test which checks the number of eigen-
values in the question covariance matrix which are
greater than 1. These typically correspond to prin-
cipal components which reflect the underlying ques-
tionnaire structure. The scree test showed 7 eigen-
values greater than 1, resulting in the 7-factor solu-
tion presented in Table 1.
The loadings in the table are the correlation coef-
ficients between the individual question scores and
the variables representing the factors. Most of the
correlations are quite high, indicating that the ques-
tions are strongly correlated both among themselves
and the underlying factor. However, the last two fac-
tors contain only non-loading questions according to
the criteria in (Hone and Graham, 2000), i.e., ques-
tions for which the correlations are too weak to be
165
# Question Load-
ing
1 t29: Knew what to say at each point 0.82
1 t22: Easy to interact with the tutor. 0.79
1 t9: Not sure what was expected. 0.73
1 t18: Knew what to say to the tutor. 0.70
1 t14: The tutor was too inflexible. 0.69
1 t19: Able to recover easily from errors 0.69
1 t24: Easy to learn to speak to tutor. 0.69
1 t16: Tutor didn?t do what I wanted. 0.65
1 t3: Tutor understood me well. 0.65
1 t15: Working as easy as with a human. 0.64
1 t13: Had to concentrate when talking. 0.62
2 t31 Tutor was an efficient way to learn. 0.79
2 t32: Easy to learn from the tutor. 0.78
2 t34: Tutor was worthwhile 0.72
3 t28: Tutor was irritating. 0.76
3 t10: Tutor was fun. 0.74
3 t7: Enjoyed talking with tutor. 0.72
3 t30: Dialogues were boring. 0.66
4 t2: Tutor took too long to respond 0.84
4 t33: Tutor responded quickly 0.84
5 t26: Didn?t always understand tutor 0.89
6 (t3: The tutor understood me well) 0.4
7 (t25: Comfortable talking with tutor) 0.59
Table 1: Factors derived from the REVU-NL question-
naire, with question loadings for the factor to which each
question was assigned. Question text shortened due to
space limitations, full text presented in the appendix.
Non-loading questions in parentheses.
reliable. In addition, factors 4 and 5 had fewer than
3 questions. Since the number of subjects in our data
set is small, such factors may not be reliable. There-
fore, we focus our remaining analysis on the top 3
factors from the questionnaire, each of which con-
tains 3 or more questions.
Twelve questions in REVU-NL were ?cross-
loading? according to criteria in Hone and Graham
(2000), that is, their two top loadings differed by
less than 0.2. This indicates questions that are likely
to be ambiguous, since they are strongly correlated
with two (theoretically independent) variables. Such
questions should be refined and re-designed in future
surveys. These were questions t1, t4, t6, t11, t12,
t17, t20, t21, t23, t25, t27, t35 from the appendix.
We removed them from our solution, and discuss the
implications for survey design in Section 6.
The first component in our analysis lines up well
with the Transparency and Cognitive load factors
from INSPIRE, and Response accuracy, Cognitive
demand and Habitability from SASSI, though it was
not split into individual factors as in those analyses.
We will refer to this factor as Transparency. The
second component contains questions specific to tu-
toring. However, it is similar to the Acceptability
dimension from INSPIRE (the original SASSI ques-
tionnaire did not include similar questions), which
asked users to rate statements such as ?domestic de-
vices can be operated efficiently with the system?.
Thus, we will refer to it as Acceptability. Finally,
our third dimension lines up best with the Affect and
Annoyance items from SASSI.2 We will refer to it as
Affect.
Although the correspondences between our fac-
tors and those derived from SASSI and INSPIRE
are not perfect, the fact that similar underlying fac-
tors are derived from different user groups and sys-
tems indicates that they are likely to be measuring
the same underlying constructs.
5.2 Comparing satisfaction in different systems
Recall that in this study we combined the data from
two systems: FULL, where the system provided stu-
dents with adaptive feedback and hints, and BASE,
where the system simply acknowledged the stu-
dent?s answers and then provided a correct answer
without engaging in dialogue. Table 2 separates out
the average factor scores for these two conditions,
where a factor score is computed by averaging over
scores of all questions assigned to that factor.
When comparing learning gain and overall satis-
faction between the two systems (which is the over-
all impression of the system behavior as a whole,
including circuit simulation and lesson design), the
difference is not statistically significant (learning
gain t(69) = ?0.95, p = 0.35, overall satisfac-
tion t(69) = ?1.52, p = 0.13). In contrast, on
individual dimensions related to tutoring the scores
for BASE is significantly higher than the score for
FULL (Transparency, t(69) = ?7.19, p < 0.0001;
Acceptability: t(69) = ?3.24, p < 0.01; Affect:
2The acceptability dimension from INSPIRE is split be-
tween our factors 2 and 3, but most of the questions correspond
to our factor 2 questions.
166
FULL BASE
Transparency 2.15 (0.56) 3.36 (0.81)
Acceptability 3.11 (1.02) 3.80 (0.77)
Affect 2.43 (0.80) 2.86 (0.996)
Overall 3.39 (0.88) 3.70 (0.83)
Learning gain 0.61 (0.15) 0.65 (0.22)
Table 2: Average scores for different satisfaction dimen-
sions in FULL and BASE (standard deviation in parenthe-
ses)
t(69) = ?1.97, p = 0.05). Comparing the means,
the biggest difference in student ratings shows on the
Transparency scale, while the affective reaction for
the two systems is more similar (though still rated
higher for BASE).
It is somewhat unexpected to see that the students
were equally satisfied overall with both systems but
rated the tutor in BASE more highly than in FULL,
since the tutor behavior was the only thing different
between conditions. We are at present investigating
the reasons for this result. One possibility is that
when students did not get much feedback from the
tutor (as in BASE), other factors became more im-
portant to overall satisfaction, such as course design
and quality of user simulation.
5.3 Relationships between subjective and
objective outcome measures
We investigated the correlations between learning
gain and different user satisfaction factors for the
two system versions. Results are presented in Table
3. As can be seen from the table, learning gain and
user satisfaction are only significantly correlated in
FULL, and only for the acceptability and overall sat-
isfaction factors. None of the factors in the BASE
system correlate with learning gain. This indicates
that the student?s affective reaction to the system is
not necessarily linked directly to its objective bene-
fits. We discuss these results further in Section 6
5.4 Impact of interpretation quality on user
satisfaction
It is generally known in SDS research that measures
of interpretation quality such as word error rate and
concept accuracy are strongly correlated with user
FULL BASE
Transparency 0.32 (0.07) 0.06 (0.69)
Acceptability 0.38 (0.03) 0.23 (0.16)
Affect 0.29 (0.08) -0.10 (0.53)
Overall 0.38 (0.02) 0.18 (0.28)
Table 3: Correlations between satisfaction factors and
learning gain for two dialogue policies. Significance level
in parentheses. Bold indicates significance at p < 0.05
level.
satisfaction (e.g., (Walker et al, 2000; Mo?ller et al,
2007)). Our system uses typed input and produces
complex logical representations (rather than sim-
ple slot-value pairs), thus, these measures cannot be
computed directly. However, in an earlier study we
showed that another measure of interpretation qual-
ity, namely, percentage of utterances that could not
be interpreted by the system (?uninterpretable utter-
ances?) is negatively correlated with learning gain
and user satisfaction (Dzikovska et al, 2010b).3
That study revealed an unexpected pattern. Al-
though the system recorded the number of utter-
ances it could not interpret in both FULL and BASE,
students in BASE were never informed of any in-
terpretation problems. Nevertheless, the proportion
of such uninterpretable utterances was still signifi-
cantly negatively correlated with user satisfaction in
BASE. After analyzing correlations between differ-
ent types of errors and user satisfaction, we hypoth-
esized that this can be explained by the lack of align-
ment between the system and the student, in partic-
ular when students used terminology different from
that used by the system (Dzikovska et al, 2010b).
We can now analyze this relationship in more de-
tail, looking at correlations between interpretation
problems and different components of user satisfac-
tion. The results are presented in Table 4.
As can be seen from the table, the proportion
of uninterpretable answers is significantly correlated
with Acceptability in FULL, but not in BASE. This
is not surprising, indicating that students who were
told that they were not understood perceived the
system as less useful for them. More surprisingly,
Transparency, which is related to perceived ease of
3In that study, we computed user satisfaction with the tutor
by averaging over the entire 35 questions in our questionnaire
as an initial approximation.
167
FULL BASE
Transparency -0.28 (0.1) -0.25 (0.10)
Acceptability -0.58 (< 0.001) -0.29 (0.07)
Affect -0.35 (0.04) -0.34 (0.04)
Overall -0.38 (0.03) -0.27 (0.11)
Learning gain -0.38 (0.03) -0.09(0.60)
Table 4: Correlations between satisfaction factors and un-
interpretable utterances for two different policies. Signif-
icance level in parentheses.
use for the system, was not correlated with uninter-
pretable utterances. Finally, the proportion of unin-
terpretable utterances is significantly correlated with
Affect for both systems. Moreover, the unexpected
negative correlation we observed in the earlier study
between satisfaction with the tutor and interpretation
problems in BASE can be primarily attributed to the
negative correlation with the Affect score.
6 Discussion
In this study, we attempted to apply insights from
studies of user satisfaction in spoken dialogue sys-
tems to a different type of dialogue application: tu-
torial dialogue. We were looking to develop a better
user satisfaction questionnaire for evaluating tutorial
dialogue systems, and to implement an evaluation
methodology which takes into account different un-
derlying dimensions of user satisfaction.
The three dimensions we obtained based on ex-
ploratory factor analysis of REVU-NL align well
with the dimensions reported in the SDS litera-
ture, which provides some evidence of their valid-
ity. However, the results are preliminary because
of the small number of participants involved, and
need to be replicated with additional participants and
different tutoring systems. Regardless, our analysis
highlighted important issues in designing satisfac-
tion surveys for different dialogue genres.
When choosing which questions to include in a
satisfaction questionnaire for a new system type,
SASSI is a very attractive starting point, because
it was validated across multiple SDS in two gen-
res (command and control and information seeking).
This also means that SASSI items are phrased very
generally and therefore easier to adapt. In contrast,
INSPIRE contains a number of questions specific to
the command and control domain, asking whether
the user thinks the system is useful in achieving their
goals (i.e., operating the domestic devices). SASSI
includes only one similar item, ?The system was
useful?. It was classed as Affect, most likely be-
cause there were no other similar items. However,
we think that such questions represent an important
separate dimension, namely the ?perceived useful-
ness? factor known to predict technology acceptance
(Adams et al, 1989). Therefore we included sev-
eral items in REVU-NL with similar intent, asking
whether users thought the system was beneficial to
their goal (i.e., learning the material). These items
were clustered into a separate dimension by factor
analysis, indicating that they should be included in
other satisfaction surveys.
Moreover, some of the questions that appeared
genre-independent to us proved to be cross-loading
in our analysis, which is an indicator of ambiguity.
Apparently, some of the items from task-oriented di-
alogue questionnaires did not transfer well. For ex-
ample, statements like ?The system didn?t always do
what I expected? are unambiguous for task-oriented
dialogue, where the user is supposed to be in control
of the interaction, and therefore has clear expecta-
tions of what the system should do. In contrast, in
tutorial dialogue the tutor has control over the learn-
ing material. Thus, it may be more ambiguous as
to what, if anything, students are expecting from the
interaction.
Overall, our experience shows that it may not
be possible, or indeed useful, to create completely
generic surveys. However, we believe that question-
naires can be phrased generally enough to apply to a
range of systems with similar goals, and REVU-NL
in particular is useful starting point for comparing
dialogue-based tutoring systems. We believe that the
18 questions that we retained as unambiguous in our
analysis provide adequate assessment of user satis-
faction, and are grouped into factors consistent with
results of previous research. However, the question-
naire could be further improved by revisiting the
cross-loading items we rejected as ambiguous, and
seeing if their wording could be improved. We are
also intending to use REVU-IT in evaluating a spo-
ken version of BEETLE II, thus providing additional
validation data on a different version of the interface.
With respect to evaluation methodology, our re-
sults highlight the need to look at different satis-
168
faction dimensions separately. We used our fac-
tors to further investigate a pattern that we discov-
ered in previous research, namely, that students who
speak in a way that is difficult for the system to in-
terpret tend to be less satisfied with the tutor, even
when they are not told of the interpretation prob-
lems. Looking at correlations with individual di-
mensions shows that this relationship is primarily
explained by the Affect dimension. Our working hy-
pothesis is that the lack of alignment between in-
correct student answers and the answers supplied by
the system caused students to perceive the system as
a less likeable or cooperative conversational partner.
We also observed that Acceptability, but no other
dimensions, were correlated with learning gain in
FULL. One possible explanation is that students who
are learning more believe that the system is help-
ing them reach their goals (our definition of Accept-
ability). The FULL condition provides students with
more explicit feedback as to their learning; whereas
in BASE students may have a less accurate estimate
of how well they are doing, and hence no satisfaction
dimensions are correlated with learning gain.
It is worth noting that an earlier study investigat-
ing the relationship between user satisfaction and
learning in two different tutorial dialogue systems
(Forbes-Riley and Litman, 2009) found little corre-
lation between the answers to individual questions
on their satisfaction questionnaire and learning gain.
Only one correlation, with the question ?The tutor
helped me to concentrate?, reached significance in
only one of the 4 conditions they investigated. This
adds further evidence that the relationship between
learning gain and satisfaction is not straightforward.
However, our results are difficult to compare since
the questionnaires used are different, and Forbes-
Riley and Litman (2009) are studying correlations
with individual questions rather than grouping re-
lated questions together. Developing better validated
questionnaires will make such results easier to com-
pare and interpret, and we believe that REVU-NL
makes a significant step in that direction.
7 Conclusion and Future Work
In this paper, we proposed an improved question-
naire (REVU-NL) for evaluating user satisfaction
in tutorial dialogue systems, which is an important
evaluation metric alongside learning gain. We used
the methodology from SDS evaluations to investi-
gate different dimensions of user satisfaction, and
their relationship to learning gain and different in-
teraction properties. Next, we are planning to use
the PARADISE methodology to establish predictive
models that relate satisfaction dimensions to mea-
surable interaction properties, so that we can de-
termine development priorities, and make it eas-
ier to compare different system versions. We are
also planning to collect additional questionnaire data
with a speech-enabled version of the system, and
verify our analyses on this extended data set.
Acknowledgments
This work has been supported in part by US Of-
fice of Naval Research grants N000141010085 and
N0001410WX20278. We would like to thank our
sponsors from the Office of Naval Research, Dr. Su-
san Chipman and Dr. Ray Perez, and the Research
Associates who worked on this project, Kather-
ine Harrison, Leanne Taylor, Charles Scott, Simon
Caine, Elaine Farrow and Charles Callaway for their
contribution to this effort.
References
Dennis A. Adams, R. Ryan Nelson, and Peter A. Todd.
1989. Perceived usefulness, ease of use, and usage of
information technology. MIS Quarterly., 13:319?339.
Myroslava Dzikovska, Natalie B. Steinhauser, Jo-
hanna D. Moore, Gwendolyn E. Campbell, Kather-
ine M. Harrison, and Leanne S. Taylor. 2010a. Con-
tent, social, and metacognitive statements: An em-
pirical study comparing human-human and human-
computer tutorial dialogue. In Sustaining TEL: From
Innovation to Learning and Practice - 5th European
Conference on Technology Enhanced Learning (EC-
TEL 2010), pages 93?108, Barcelona, Spain, October.
Myroslava O. Dzikovska, Johanna D. Moore, Natalie
Steinhauser, and Gwendolyn Campbell. 2010b. The
impact of interpretation problems on tutorial dialogue.
In Proceedings of the 48th Annual Meeting of the As-
sociation for Computational Linguistics(ACL-2010),
Uppsala, Sweden, July.
Myroslava O. Dzikovska, Johanna D. Moore, Natalie
Steinhauser, Gwendolyn Campbell, Elaine Farrow,
and Charles B. Callaway. 2010c. Beetle II: a system
for tutoring and computational linguistics experimen-
tation. In Proceedings of the 48th Annual Meeting of
169
the Association for Computational Linguistics (ACL-
2010) demo session, Uppsala, Sweden, July.
Katherine Forbes-Riley and Diane J. Litman. 2009.
Adapting to student uncertainty improves tutoring dia-
logues. In Artificial Intelligence in Education: Build-
ing Learning Systems that Care: From Knowledge
Representation to Affective Modelling, Proceedings
of the 14th International Conference on Artificial In-
telligence in Education (AIED 2009), pages 33?40,
Brighton, UK, July.
Katherine Forbes-Riley and Diane J. Litman. 2011.
Designing and evaluating a wizarded uncertainty-
adaptive spoken dialogue tutoring system. Computer
Speech & Language, 25(1):105?126.
Katherine Forbes-Riley, Diane J. Litman, Scott Silliman,
and Joel R. Tetreault. 2006. Comparing synthesized
versus pre-recorded tutor speech in an intelligent tu-
toring spoken dialogue system. In Proceedings of
the Nineteenth International Florida Artificial Intelli-
gence Research Society Conference, pages 509?514,
Melbourne Beach, Florida, USA, May.
Kate S. Hone and Robert Graham. 2000. Towards a
tool for the subjective assessment of speech system
interfaces (SASSI). Natural Language Engineering,
6(3&4):287?303.
G. Tanner Jackson, Arthur C. Graesser, and Danielle S.
McNamara. 2009. What students expect may have
more impact than what they know or feel. In Proceed-
ings 14th International Conference on Artificial Intel-
ligence in Education (AIED), Brighton, UK.
Lars Bo Larsen. 2003. Issues in the evaluation of spo-
ken dialogue systems using objective and subjective
measures. In Proceedings of 2003 IEEE Workshop
on Automatic Speech Recognition and Understanding
(ASRU?03), pages 209 ? 214, December.
Diane Litman, Johanna Moore, Myroslava Dzikovska,
and Elaine Farrow. 2009. Using natural language pro-
cessing to analyze tutorial dialogue corpora across do-
mains and modalities. In Proceedings of 14th Interna-
tional Conference on Artificial Intelligence in Educa-
tion (AIED), Brighton, UK, July.
Joel Michael, Allen Rovick, Michael Glass, Yujian Zhou,
and Martha Evens. 2003. Learning from a computer
tutor with natural language capabilities. Interactive
Learning Environments, 11:233?262(30).
Sebastian Mo?ller, Paula Smeele, Heleen Boland, and Jan
Krebber. 2007. Evaluating spoken dialogue systems
according to de-facto standards: A case study. Com-
puter Speech & Language, 21(1):26 ? 53.
Amruta Purandare and Diane Litman. 2008. Content-
learning correlations in spoken tutoring dialogs at
word, turn and discourse levels. In Proceedings of
the 21st International FLAIRS Conference, Coconut
Grove, Florida, May.
Marilyn A. Walker, Candace A. Kamm, and Diane J. Lit-
man. 2000. Towards Developing General Models of
Usability with PARADISE. Natural Language Engi-
neering, 6(3).
Maria Wolters, Kallirroi Georgila, Robert Logie, Sarah
MacPherson, Johanna Moore, and Matt Watson. 2009.
Reducing working memory load in spoken dialogue
systems. Interacting with Computers, 21(4):276?287.
170
A REVU-NL Questions
t1 I felt in control of my conversations with the tutor.
t2 It took the tutor too long to respond to my statements.
t3 I felt that the tutor understood me well.
t4 The tutor didn?t always do what I expected.
t5 The information that the tutor provided to me was incomplete.
t6 It was easy for me to become confused during our dialogue.
t7 I enjoyed talking with the tutor.
t8 The tutor interfered with my understanding of the topics in electricity and circuits.
t9 I was not always sure what the tutor expected of me.
t10 Conversing with the tutor was fun.
t11 It was easy to understand the things that the tutor said.
t12 The dialogue between me and the tutor was very repetitive.
t13 I had to really concentrate when I was talking with the tutor.
t14 The tutor was too inflexible.
t15 Working through the lessons with the computer tutor was as easy as working through the lessons
with a human tutor.
t16 The tutor didn?t always do what I wanted.
t17 I felt confident when talking with the tutor.
t18 I always knew what to say to the tutor.
t19 I was able to recover easily from errors during our dialogues.
t20 Talking with the tutor was frustrating.
t21 The information provided by the tutor was clear.
t22 It was easy to interact with the tutor.
t23 The tutor?s dialogue was clumsy and unnatural.
t24 It was easy to learn how to speak to the tutor in a way that the tutor understood.
t25 I felt comfortable talking with the tutor.
t26 I didn?t always understand what the tutor meant.
t27 The tutor was not helpful.
t28 I found conversing with the tutor to be irritating.
t29 I knew what I could say or do at each point in the conversation with the tutor.
t30 I found our dialogues to be boring.
t31 Having the tutor help me with the material was an efficient way to learn.
t32 It was easy to learn from the tutor.
t33 The tutor responded quickly.
t34 Having the tutor was worthwhile
t35 Our dialogues quickly led to me having a deeper understanding of the material.
B REVU-OVERALL questions
o1 Overall, I am satisfied with my experience learning about electricity from this system.
o2 Working in this learning environment was just like working one-on-one with a human tutor.
o3 I would have preferred to learn about electricity in a different way.
o4 I would use this system again in the future to continue to learn about electricity.
o5 I would like to be able to use a system like this to learn about other topics in the future.
171
C REVU-IT questions related to GUI and reading material (mentioned but not analyzed
in the paper)
sl1 It was easy to navigate through the slides.
sl2 It took a long time for each new slide to be displayed.
sl3 The material on the slides was easy to understand.
sl4 The material on the slides was poorly written.
sl5 I would have benefited from more instrucion on how to move through the slides.
sl6 The material on the slides was interesting.
sl7 The slide navigation buttons didn?t always work the way I expected them to.
sl8 The slides were annoying.
sl9 The material on the slides was written at a level far beneath my abilities.
sl10 I would prefer reading a text book over reading these slides.
e1 I found it difficult to learn how to build circuits and take measurements in the workspace.
e2 Completing exercises in the workspace was fun.
e3 Before beginning the lesson, I received the right amount of instruction on how to build circuits in
the workspace and take measurements.
e4 The exercises were well designed to illustrate the important lesson concepts.
e5 Sometimes I didn?t understand what I was supposed to do for an exercise.
e6 The method for connecting components with wires was counter-intuitive.
e7 Having to build all those circuits was annoying.
e8 I always knew exactly what to build and/or measure in the workspace, and how to do it.
e9 Circuits loaded quickly.
e10 Even if I didn?t predict the outcome correctly ahead of time, once I completed an exercise, I
always understood the point.
e11 It was easy to use the meter.
e12 There were more exercises than necessary to cover the lesson topics.
e13 I would have learned more if I had been able to build circuits with actual light bulbs and batteries.
172
Proceedings of the SIGDIAL 2011: the 12th Annual Meeting of the Special Interest Group on Discourse and Dialogue, pages 338?340,
Portland, Oregon, June 17-18, 2011. c?2011 Association for Computational Linguistics
BEETLE II: an adaptable tutorial dialogue system
Myroslava O. Dzikovska and Amy Isard and Peter Bell and Johanna D. Moore
School of Informatics, University of Edinburgh, Edinburgh, United Kingdom
{m.dzikovska,j.moore,amy.isard,peter.bell}@ed.ac.uk
Natalie Steinhauser and Gwendolyn Campbell
Naval Air Warfare Center Training Systems Division, Orlando, FL, USA
{gwendolyn.campbell,natalie.steihauser}@navy.mil
Abstract
We present BEETLE II, a tutorial dialogue sys-
tem which accepts unrestricted language in-
put and supports experimentation with differ-
ent dialogue strategies. Our first system eval-
uation compared two dialogue policies. The
resulting corpus was used to study the impact
of different tutoring and error recovery strate-
gies on user satisfaction and student interac-
tion style. It can also be used in the future to
study a wide range of research issues in dia-
logue systems.
1 Introduction
There has recently been much interest in develop-
ing tutorial dialogue systems that understand student
explanations (Graesser et al, 1999; Aleven et al,
2001; Nielsen et al, 2008; VanLehn et al, 2007),
because it has been shown that high percentages of
self-explanation and student contentful talk are cor-
related with better learning in human-human tutor-
ing (Chi et al, 1994; Litman et al, 2009). How-
ever, most existing systems use pre-authored tutor
responses for addressing student errors. The advan-
tage of this approach is that tutors can devise reme-
diation dialogues that are highly tailored to specific
misconceptions, providing step-by-step scaffolding
and potentially suggesting additional exercises. The
disadvantage is a lack of adaptivity and generality:
students often get the same remediation for the same
error regardless of their past performance or dia-
logue context. It also becomes more difficult to ex-
periment with different dialogue policies (including
error recovery and tutorial policies determining the
most appropriate feedback), due to the complexities
in applying tutoring strategies consistently in a large
number of hand-authored remediations.
The BEETLE II system architecture is designed to
overcome these limitations (Callaway et al, 2007).
It uses a deep parser and generator, together with
a domain reasoner and a diagnoser, to produce de-
tailed analyses of student utterances and to generate
feedback automatically. This allows the system to
consistently apply the same tutorial policy across a
range of questions. The system?s modular setup and
extensibility also make it a suitable testbed for both
computational linguistics algorithms and more gen-
eral questions about theories of learning.
The system is based on an introductory electric-
ity and electronics course developed by experienced
instructional designers, originally created for use in
a human-human tutoring study. The exercises were
then transferred into a computer system with only
minor adjustments (e.g., breaking down compound
questions into individual questions). This resulted
in a realistic tutoring setup, which presents interest-
ing challenges to language processing components,
involving a wide variety of language phenomena.
We demonstrate a version of the system that un-
derwent a user evaluation in 2009, which found sig-
nificant learning gains for students interacting with
the system. The experimental data collection com-
pared two different dialogue policies implemented
in the system, and resulted in a corpus supporting
research into a variety of questions about human-
computer dialogue interaction (Dzikovska et al,
2010a).
338
Figure 1: Screenshot of the BEETLE II system
2 Example Interaction
The BEETLE II system delivers basic electricity and
electronics tutoring to students with no prior knowl-
edge of the subject. A screenshot is shown in Figure
1. The student interface includes an area to display
reading material, a circuit simulator, and a dialogue
history window. Currently all interactions with the
system are typed. Students read pre-authored cur-
riculum slides and carry out exercises which in-
volve experimenting with the circuit simulator and
explaining the observed behaviour. The system also
asks some high-level questions, such as ?What is
voltage??.
An example dialogue with the system, taken from
the evaluation corpus, is shown in Figure 2. It shows
three key system properties: after the student?s first
turn, which was correct but incomplete, the system
rephrases the correct part of the student answer and
prompts for the missing information. In the second
turn, the system cannot interpret the student utter-
ance, so it responds with a targeted help message
and a hint about the object that needs to be men-
tioned. Finally, in the last turn the system com-
bines the information from the tutor?s hint and the
student?s answers and restates the complete answer
since the current answer was completed over multi-
ple turns.
3 Data Analysis and Future Work
The data collected with the BEETLE II system has
been used to investigate several research questions
regarding discourse and dialogue: the effectiveness
of different error recovery strategies (Dzikovska et
al., 2010b); the underlying dimensions of user sat-
isfaction and their relationship with learning gain
(Dzikovska et al, 2011); the relationship between
(student) alignment in dialogue and learning gain
(Steinhauser et al, 2011); and the differences be-
tween students? social and metacognitive statements
depending on the interaction style (Dzikovska et al,
2010a). We are currently annotating the data with
additional interaction parameters, including correct-
ness of student answers and appropriateness of sys-
tem hints. This will allow us to apply PARADISE
339
Tutor: Why was bulb A on when switch Y
was open and switch Z was closed?
Student: because it had a closed path
Tutor: Right. There is a closed path. Keep
going.
Student: there was a closed path not effected by
the switch
Tutor: I?m sorry, I?m having a problem un-
derstanding. I don?t understand the
word ?effect? here. Here?s a hint. Your
answer should mention a battery.
Student: it has a closed path with the battery
Tutor: You?re on the right track. Here?s the
answer. Bulb A is still contained in a
closed path with the battery.
Figure 2: Example interaction with the system from our
corpus
methodology to get additional insight into which pa-
rameters of tutorial dialogue affect learning gain and
user satisfaction.
We are also adding a speech interface to the sys-
tem, which will open new and interesting research
questions. Students often fail to use domain termi-
nology correctly, and in the tutoring domain it is
important to teach students to use proper terminol-
ogy, so incorrect usage must be detected and cor-
rected. This means that grammar-based language
models are not appropriate for the language mod-
elling, and opens new questions about robust ASR
and language interpretation in such domains.
Acknowledgements
This work has been supported in part by US Of-
fice of Naval Research grants N000141010085 and
N0001410WX20278. We thank Katherine Harrison,
Leanne Taylor, Charles Scott, Simon Caine, Charles
Callaway and Elaine Farrow for their contributions
to this effort.
References
V. Aleven, O. Popescu, and K. R. Koedinger. 2001.
Towards tutorial dialog to support self-explanation:
Adding natural language understanding to a cogni-
tive tutor. In Proceedings of the 10th International
Conference on Artificial Intelligence in Education
(AIED ?01)?.
Charles B. Callaway, Myroslava Dzikovska, Elaine Far-
row, Manuel Marques-Pita, Colin Matheson, and Jo-
hanna D. Moore. 2007. The Beetle and BeeDiff tutor-
ing systems. In Proceedings of SLaTE?07 (Speech and
Language Technology in Education).
Michelene T. H. Chi, Nicholas de Leeuw, Mei-Hung
Chiu, and Christian LaVancher. 1994. Eliciting self-
explanations improves understanding. Cognitive Sci-
ence, 18(3):439?477.
Myroslava Dzikovska, Natalie B. Steinhauser, Jo-
hanna D. Moore, Gwendolyn E. Campbell, Kather-
ine M. Harrison, and Leanne S. Taylor. 2010a. Con-
tent, social, and metacognitive statements: An em-
pirical study comparing human-human and human-
computer tutorial dialogue. In Proceedings of ECTEL-
2010, pages 93?108.
Myroslava O. Dzikovska, Johanna D. Moore, Natalie
Steinhauser, and Gwendolyn Campbell. 2010b. The
impact of interpretation problems on tutorial dialogue.
In Proceedings of the 48th Annual Meeting of the As-
sociation for Computational Linguistics(ACL-2010).
Myroslava O. Dzikovska, Johanna D. Moore, Natalie
Steinhauser, and Gwendolyn Campbell. 2011. Ex-
ploring user satisfaction in a tutorial dialogue system.
In Proceedings of the 12th annual SIGdial Meeting on
Discourse and Dialogue.
A. C. Graesser, K. Wiemer-Hastings, P. Wiemer-
Hastings, and R. Kreuz. 1999. Autotutor: A simu-
lation of a human tutor. Cognitive Systems Research,
1:35?51.
Diane Litman, Johanna Moore, Myroslava Dzikovska,
and Elaine Farrow. 2009. Using natural language pro-
cessing to analyze tutorial dialogue corpora across do-
mains and modalities. In Proc. of 14th International
Conference on Artificial Intelligence in Education.
Rodney D. Nielsen, Wayne Ward, and James H. Martin.
2008. Learning to assess low-level conceptual under-
standing. In Proceedings 21st International FLAIRS
Conference, Coconut Grove, Florida, May.
Natalie B. Steinhauser, Gwendolyn E. Campbell,
Leanne S. Taylor, Simon Caine, Charlie Scott, My-
roslava O. Dzikovska, and Johanna D. Moore. 2011.
Talk like an electrician: Student dialogue mimicking
behavior in an intelligent tutoring system. In Proceed-
ings of the 15th International Conference on Artificial
Intelligence in Education (AIED-2011).
Kurt VanLehn, Pamela Jordan, and Diane Litman. 2007.
Developing pedagogically effective tutorial dialogue
tactics: Experiments and a testbed. In Proceedings of
SLaTE Workshop on Speech and Language Technol-
ogy in Education, Farmington, PA, October.
340
