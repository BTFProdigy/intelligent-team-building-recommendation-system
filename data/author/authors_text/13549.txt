Proceedings of the 8th Workshop on Asian Language Resources, pages 153?160,
Beijing, China, 21-22 August 2010. c?2010 Asian Federation for Natural Language Processing
________________________________ 
1 
 http://www.grammaticalframework.org  
2 In given example code ?fun? and ?cat? belongs to abstract syntax,  ?lin? and ?lincat? belongs to concrete syntax 
 
An Open Source Urdu Resource Grammar 
Shafqat M Virk 
Department of Applied IT 
University of Gothenburg  
virk@chalmers.se 
Muhammad Humayoun 
Laboratory of Mathmatics 
University of Savoie 
mhuma@univ-savoie.fr 
Aarne Ranta 
Department of CS & Eng 
 University of Gothenburg  
aarne@chalmers.se 
 
 
 
Abstract 
 
We develop a grammar for Urdu in 
Grammatical Framework (GF). GF is a 
programming language for defining 
multilingual grammar applications. GF 
resource grammar library currently 
supports 16 languages. These grammars 
follow an Interlingua approach and 
consist of morphology and syntax 
modules that cover a wide range of 
features of a language. In this paper we 
explore different syntactic features of the 
Urdu language, and show how to fit them 
in the multilingual framework of GF. We 
also discuss how we cover some of the 
distinguishing features of Urdu such as, 
ergativity in verb agreement (see Sec 
4.2).  The main purpose of GF resource 
grammar library is to provide an easy 
way to write natural language 
applications without knowing the details 
of syntax, morphology and lexicon. To 
demonstrate it, we use Urdu resource 
grammar to add support for Urdu in the 
work reported in (Angelov and Ranta, 
2010) which is an implementation of 
Attempto (Attempto 2008) in GF.  
 
1. Introduction 
 
Urdu is an Indo-European language of the Indo-
Aryan family, widely spoken in south Asia. It is 
a national language of Pakistan and one of the 
official languages of India. It is written in a 
modified Perso-Arabic script from right to left. 
As regards vocabulary, it has a strong influence 
of Arabic and Persian along with some 
borrowing from Turkish and English. Urdu is an 
SOV language having fairly free word order. It 
is closely related to Hindi as both originated 
from the dialect of Delhi region called khari boli 
(Masica, 1991). 
We develop a grammar for Urdu that addresses 
problems related to automated text translation 
using an Interlingua approach and provide a way 
to precisely translate text. This is described in 
Section 2. Then we describe different levels of 
grammar development including morphology 
(Section 3) and syntax (Section 4). In Section 6, 
we discuss an application in which a semantics-
driven translation system is built upon these 
components. 
 
2. GF (Grammatical Framework) 
 
GF (Grammatical Framework, Ranta 2004) is a 
tool for working with grammars, implementing a 
programming language for writing grammars 
which in term is based on a mathematical theory 
about languages and grammars1. Many 
multilingual dialog and text generation 
applications have been built using GF. GF 
grammars have two levels the abstract and the 
concrete syntax2. The abstract syntax is 
language independent and is common to all 
languages in GF grammar library. It is based on 
common syntactic or semantic constructions, 
which work for all the involved languages on an 
appropriate level of abstraction. The concrete 
syntax is language dependent and defines a 
mapping from abstract to actual textual 
representation in a specific language2. GF uses 
the term ?category? to model different parts of 
speech (e.g verbs, nouns adjectives etc.). An 
abstract syntax defines a set of categories, as 
well as a set of tree building functions. Concrete 
syntax contains rules telling how these trees are 
linearized. Separating the tree building rules 
(abstract syntax) from linearization rules 
(concrete syntax) makes it possible to have 
multiple concrete syntaxes for one abstract. This 
153
  
 
makes it possible to parse text in one language 
and translate it to multiple languages. 
Grammars in GF can be roughly classified into 
two kinds: resource grammars and application 
grammars. Resource grammars are general 
purpose grammars (Ranta, 2009a) that try to 
cover the general aspects of a language 
linguistically and whose abstract syntax encodes 
syntactic structures. Application grammars, on 
the other hand, encode semantic structures, but 
in order to be accurate they are typically limited 
to specific domains. However, they are not 
written from scratch for each domain, but they 
use resource grammars as libraries (Ranta 
2009b).  
Previously GF had resource grammars for 16 
languages: English, Italian, Spanish, French, 
Catalan, Swedish, Norwegian, Danish, Finish, 
Russian, Bulgarian, German, Interlingua (an 
artificial language), Polish, Romanian and 
Dutch. Most of these languages are European 
languages. We developed resource grammar for 
Urdu making it the 17th in total and the first 
south Asian language. Resource grammars for 
several other languages (e.g. Arabic, Turkish, 
Persian, Maltese and Swahili) are under 
construction. 
 
3. Morphology 
 
In GF resource grammars a test lexicon of 350 
words is provided for each language. These 
words are built through lexical functions. The 
rules for defining Urdu morphology are 
borrowed from (Humayoun et el., 2006), in 
which Urdu morphology was developed in the 
Functional Morphology toolkit (Forsberg and 
Ranta, 2004). Although it is possible to 
automatically generate equivalent GF code from 
it, we wrote the rules of morphology from 
scratch in GF, to receive better abstractions than 
are possible in generated code. Furthermore, we 
extend this work by including compound words. 
However, the details of morphology are beyond 
the scope of this paper, and its focus is on 
syntax. 
 
4. Syntax 
 
While morphological analysis deals with the 
formation and inflection of individual words, 
syntax shows how these words (parts of speech) 
are grouped together to build well formed 
phrases. In this section we show how this works 
and is implemented for Urdu. 
 
4.1 Noun Phrases (NP) 
 
When nouns are to be used in sentences as part 
of speech, then there are several linguistic 
details which need to be considered. For 
example other words can modify a noun, and 
nouns have characteristics such as gender, 
number etc. When all such required details are 
grouped together with the noun, the resulting 
structure is known as noun phrase (NP). The 
basic structure of Urdu noun phrase is, ?(M) H 
(M)? according to (Butt M., 1995), where (M) is 
a modifier and (H) is the head of a NP. Head is 
the word which is compulsory and modifiers can 
or cannot be there. In Urdu modifiers are of two 
types pre-modifiers i.e modifiers that come 
before the head for instance (  kali: bli: 
?black cat?), and post-modifiers which come 
after the head for instance (	 
  tm sb ?you 
all?). In GF resource library we represent NP as 
a record 
 
lincat NP : Type = {s : NPCase => Str ; a : 
Agr} ; 
 
where 
 
NPCase = NPC Case | NPErg | NPAbl                   
               |NPIns|NPLoc1NPLoc2 
               |NPDat;|NPAcc  
Case = Dir | Obl | Voc ; 
Agr = Ag Gender Number UPerson ; 
Gender = Masc | Fem ; 
UPerson = Pers1| Pers2_Casual 
                 | Pers2_Familiar | Pers2_Respect 
                 | Pers3_Near | Pers3_Distant; 
Number = Sg | Pl ; 
 
Thus NP is a record with two fields, ?s? and ?a?. 
?s? is an inflection table and stores different 
forms of a noun.  
The Urdu NP has a system of syntactic cases 
which is partly different from the morphological 
cases of the category noun (N). The case 
markers that follow nouns in the form of post-
positions cannot be handled at lexical level 
154
  
 
through morphological suffixes and are thus 
handled at syntactic level (Butt et el., 2002). 
Here we create different forms of a noun phrase 
to handle case markers for Urdu nouns. Here is a 
short description of the different cases of NP : 
 
? NPC Case: this is used to retain the 
original case of Noun 
? NPErg: Ergative case with case marker 
?ne: ?? 
? NPAbl: Ablative with case marker ?se: 
?	? 
? NPIns: Instrumental case with case 
marker ?se: ?	? 
? NPLoc1: Locative case with case 
marker ?mi: ? ?? 
? NPLoc2: Locative case with case 
marker ?pr ? 
? NPDat: Dative case with case marker 
?k? ? 
? NPAcc: Accusative case with case 
marker ?k? ? 
   
And ?a? (Agr in the code sample given in 
previous column) is the agreement feature of the 
the noun that is used for selecting the 
appropriate form of other categories that agree 
with nouns.   
A noun is converted to an intermediate category 
common noun (CN; also known as N-Bar) 
which is then converted to NP category. CN 
deals with nouns and their modifiers.  As an 
example consider adjectival modification:  
 
fun AdjCN   : AP -> CN  -> CN ;    
 
lin  AdjCN ap cn = { 
      s = \\n,c =>  
           ap.s ! n ! cn.g ! c ! Posit ++ cn.s ! n ! c ; 
      g = cn.g 
      } ; 
 
The linearization of AdjCN gives us common 
nouns such as ( ??? ??n ?a pani: ?cold 
water?) where a CN ( pani: ?water?) is 
modified by an AP ( ???  , ??n ?a ?cold?).  
Since Urdu adjectives also inflect in number, 
gender, case and degree, we need to concatenate 
the appropriate form of adjective that agrees 
with common noun. This is ensured by selecting 
the corresponding forms of adjective and 
common noun from their inflection tables using 
selection operator (?!?). Since CN does not 
inflect in degree but the adjective does, we fix 
the degree to be positive (Posit) in this 
construction. Other modifiers include possibly 
adverbs, relative clauses, and appositional 
attributes.  
A CN can be converted to a NP using different 
functions: common nouns with determiners; 
proper names; pronouns; and bare nouns as mass 
terms: 
 
 fun DetCN   : Det -> CN -> NP  (e.g the boy) 
fun UsePN   : PN -> NP (e.g John) 
fun UsePron : Pron -> NP  (e.g he) 
fun MassNP     : CN -> NP (e.g milk) 
 
These different ways of building NP?s, which 
are common in different languages, are defined 
in the abstract syntax of the resource grammar, 
but the linearization of these functions is 
language dependent and is therefore defined in 
the concrete syntaxes.   
   
4.2 Verb Phrases (VP) 
 
A verb phrase is a single or a group of words 
that act as a predicate. In our construction Urdu 
verb phrase has following structure 
 
lincat VP = { 
       s    : VPHForm => {fin, inf: Str} ; 
      obj  : {s : Str ; a : Agr} ;  
      vType : VType ; 
      comp : Agr => Str; 
      embComp : Str ; 
      ad  : Str  } ;  
 
where 
 
VPHForm =  
   VPTense VPPTense Agr  
    | VPReq HLevel | VPStem 
 
and 
 
  VPPTense = VPPres |VPPast |VPFutr; 
 HLevel = Tu |Tum |Ap |Neutr 
 
155
  
 
In GF representation a VP is a record with 
different fields. The most important field is ?s? 
which is an inflectional table and stores different 
forms of Verb.  
At VP level we define Urdu tenses by using a 
simplified tense system, which has only three 
tenses, named VPPres, VPPast, VPFutr. In case 
of VPTense for every possible combination of 
VPPTense and agreement (gender, number, 
person) a tuple of two string values {fin, inf : 
Str} is created. ?fin?  stores the coupla (auxiliary 
verb) , and ?inf? stores corresponding form of 
verb. VPStem is a special tense which stores the 
root form of verb. This form is used to create the 
full set of Urdu tenses at clause level (tenses in 
which the root form of verb is used, i.e. 
perfective and progressive tenses). Handling 
tenses at clause level rather than at verb phrase 
level simplifies the VP and results in a more 
efficient grammar.  
The resource grammar has a common API 
which has a much simplified tense system, 
which is close to Germanic languages. It is 
divided into tense and anteriority. There are only 
four tenses named as present, past, future and 
conditional, and two possibilities of anteriority 
(Simul , Anter). This means it creates 8 
combinations. This abstract tense system does 
not cover all the tenses in Urdu. We have 
covered the rest of tenses at clause level, even 
though these tenses are not accessible by the 
common API, but still can be used in language 
specific modules. 
Other forms for verb phrases include request 
form (VPReq), imperative form (VPImp). There 
are four levels of requests in Urdu. Three of 
them correspond to (t? , tm 
 , a:p ?