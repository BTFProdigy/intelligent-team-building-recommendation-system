Integration of a Lexical Type Database with a Linguistically Interpreted
Corpus
Chikara Hashimoto,? Francis Bond,? Takaaki Tanaka,? Melanie Siegel?
? Graduate School of Informatics, Kyoto University
? Machine Translation Research Group, NTT Communication Science Laboratories
? Language Technology Lab, DFKI
? hasimoto@pine.kuee.kyoto-u.ac.jp
?{takaaki,bond}@cslab.kecl.ntt.co.jp
? siegel@dfki.de
Abstract
We have constructed a large scale
and detailed database of lexical types
in Japanese from a treebank that in-
cludes detailed linguistic information.
The database helps treebank annota-
tors and grammar developers to share
precise knowledge about the grammat-
ical status of words that constitute the
treebank, allowing for consistent large
scale treebanking and grammar devel-
opment. In this paper, we report on
the motivation and methodology of the
database construction.
1 Introduction
Treebanks constructed with detailed linguistic in-
formation play an important role in various as-
pects of natural language processing; for exam-
ple, grammatical knowledge acquisition; world
knowledge acquisition (Bond et al, 2004b);
and statistical language model induction. Such
treebanks are typically semi-automatically con-
structed by a linguistically rich computational
grammar.
A detailed grammar in turn is a fundamen-
tal component for precise natural language pro-
cessing. It provides not only detailed syntactic
and morphological information on linguistic ex-
pressions but also precise and usually language-
independent semantic structures of them.
However, such a deep linguistic treebank and
a grammar are often difficult to keep consistent
through development cycles. This is both because
multiple people, often in different locations, par-
ticipate in a development activity, and because
deep linguistic treebanks and grammars are com-
plicated by nature. Thus, it is often the case that
developers lose sight of the current state of the
treebank and grammar, resulting in inconsistency.
We have constructed a linguistically enriched
treebank named ?Hinoki? (Bond et al, 2004a),
which is based on the same framework as the
Redwoods treebank (Oepen et al, 2002) and uses
the Japanese grammar JACY (Siegel and Ben-
der, 2002) to construct the treebank.1 In the con-
struction process, we have also encountered the
problem just mentioned. We are aiming to re-
solve this problem, which we expect many other
project groups that are constructing detailed lin-
guistic treebanks have encountered. Our strategy
is to take a ?snapshot? of one important aspect of
the treebank and grammar for each development
cycle. To be more precise, we extract informa-
tion about lexical items that are being used in tree-
banking from the treebank and grammar and con-
vert it into an electronically accesible structured
database (the lexical-type database). Such a snap-
shot, the database, certainly helps treebank anno-
tators and grammar developers to share precise
and detailed knowledge of the treebank and gram-
mar and thus to make them consistent throughout
the development cycle.2
Lexical items whose information is included
1Currently, the Hinoki treebank contains about 121,000
sentences (about 10 words per sentence).
2We think we also need another snapshot, that of the
grammar rules and principles being used. In this paper, how-
ever, we do not deal with it, and hopefully we will report on
it some other time.
31
in the database are grouped together according
to their grammatical behavior, and we will refer
to each of the groups as a lexical type in the
rest of the paper. A typical lexical item con-
sists of an identifier, and then a triple consist-
ing of the orthography, lexical-type and predicate:
e.g., inu n 1 = ? ???, common-noun-lex,
dog n animal?. The grammar treats all mem-
bers of the same lexical type in the same way. the
lexical type is the locus of syntactic and structural
semantic information. Examples of lexical types
will be described in ?2.
The database could also benefit a wide range
of language researchers, not just those who are
treebanking. As the development of the treebank
and grammar proceeds, together they describe the
language (Japanese in this study) with increasing
accuracy. As a result, the database that we ob-
tain from the sophisticated treebank and grammar
can be thought of as showing us the real view of
the Japanese lexicon. Thus, though many of the
details of the treebank and grammar are frame-
work dependent, the database will provide NLP
researchers who are aiming at deep linguistic pro-
cessing of Japanese with a basic and reliable ref-
erence Japanese lexicon. The correctness can be
verified by examining the treebanked examples.
Such a resource is useful for Japanese language
teachers, lexicographers, and linguists, in addi-
tion to NLP researchers.
The next section describes the framework of
treebanking and motivates the need for the lexical
type database. The third section discusses what
information the lexical type database should con-
tain to facilitate treebanking and grammar devel-
opment; illustrates the contents of the database;
and shows how the database is created. The fourth
section discusses the usefulness of the lexical type
database for many purposes other than treebank-
ing. An overview of related works follows in the
fifth section. Finally, we conclude the paper with
a discussion of our plans for future work.
2 Background to the Database
The treebanking process is illustrated in Fig-
ure 1. As the figure shows, our treebank is
semi-automatically generated by a computational
grammar (and a parser). Each sentence is parsed
and the intended reading chosen from the possi-
Development (refinement)
GRAMMAR
Treebanking (manual annotation)
TREEBANK
automatic parsingfeedback
Figure 1: Treebanking Cycles
ble interpretations. In doing so, we find the gram-
mar?s flaws such as insufficient coverage and spu-
rious ambiguities. The feedback allows us to re-
fine the grammar so that it can have wider cov-
erage and be more appropriately restricted. Cur-
rently this process is carried out by several people,
distributed over four continents.
Although most treebanks are rarely updated,
we consider the updating an integral part of the
process. Thus our treebank is dynamic in the
sense of Oepen et al (2004).
As is often the case with detailed linguistic
treebanking, our grammar and treebank consist
of very fine-grained linguistic information. For
example, our grammar, hence our treebank, dis-
tinguishes several usages of the Japanese dative
marker ni. The Japanese sentence (1) can repre-
sent the two meanings described in (1a) and (1b).
Lexical type names for each usage of ni are writ-
ten in typewriter font.3
(1) hanasiai-wa
discussion-TOP
sinya-ni
midnight-DAT
itaru
reach
a. ?The discussion comes (to a conclusion)
at midnight.?
ni as adv-p-lex-1
b. ?The discussion continues until mid-
night.?
ni as ga-wo-ni-p-lex
The dative phrase, sinya-ni (midnight-DAT), can
act as either an adjunct (1a)4 or an object of itaru
?reach? (1b). Below is an example showing other
usages of ni.
(2) Ken-wa
-TOP
yuka-o
floor-ACC
kirei-ni
clean-DAT
migaku
polish
3These are actual names of the lexical types implemented
in our grammar and might not be understandable to people
in general.
4The object, a conclusion, is expressed by a phonolog-
ically null pronoun. This is the so-called ?pro-drop? phe-
nomenon.
32
a. ?Ken polishes a floor clean.?
(The floor is clean.)
ni as naadj2adv-end-lex
b. ?Ken cleanly polishes a floor.?
(His way of polishing the floor is clean.)
ni as adv-p-lex-6
The dative phrase, kirei-ni (clean-DAT), is used as
an adjunct in both (2a) and (2b), but their usages
and meanings are different. The usage in (2b) is
an ordinary adverb that describes the manner of
Ken?s polishing the floor as clean, while in (2a)
the dative phrase describes the resulting situation
of the floor after polishing as clean. In addition,
the nis in (1) and (2) are different in that the for-
mer takes nouns as its complement while the lat-
ter takes adjectives. Thus, the four usages in (1a),
(1b), (2a) and (2b) must be distinguished so that
we can obtain correct syntactic structures and se-
mantic representations. In our terms, these nis are
said to belong to different lexical types.5 Simi-
larly, our grammar distinguishes usages of other
words, notably functional ones.
However, as we augment the grammar with
finer distinctions, the grammar becomes more and
more opaque and difficult to maintain, and so is
the treebank. This is problematic in three ways.
Firstly, when we annotate parser outputs of one
sentence, we have to see which parse is correct
for the sentence. Consequently, we have to distin-
guish which word usage is correct for each word
in the sentence. However, this task is not always
trivial, since our grammar?s word usage distinc-
tion is very fine grained as shown above. Sec-
ondly, when we add a word to the grammar to
get wider coverage, we have to see which lexical
type the word belongs to. That is, we are required
to be familiar with lexical types of the grammar.
Thirdly, in collaborative grammar development, it
sometimes happens that a developer accidentally
introduces a new lexical type that represents over-
lapping functionality with an existing type. This
causes spurious ambiguity. As a result, the gram-
mar will be unnecessarily bloated, and the tree-
bank will also be easily inconsistent. Again, we
see that comprehensive knowledge of the gram-
mar?s lexical types is indispensable.
5Usages of the Japanese dative marker, ni, are extensively
discussed in, for example, Sadakane and Koizumi (1995).
In summary, it is important to make clear (i)
what lexical types are assumed in a grammar and
a treebank and (ii) how differently they are used
from each other, so that we can make the treebank
annotation and grammar development consistent.
Our solution to the problem is to construct a
lexical type database of a treebank and a gram-
mar. The database is expected to give us explicit
information on (i) what lexical types are imple-
mented in the grammar and are used in the tree-
bank and (ii) how a word is used in Japanese and
is distinguished from other words.
3 Architecture of the Database
This section details the content of the
database and the method of its construc-
tion. The database itself is on-line at
http://pc1.ku-ntt-unet.ocn.ne.
jp/tomcat/lextypeDB/.
3.1 Content of the Database
First of all, what information should be included
in such a database to help treebank annotators and
grammar developers to work consistently? Ob-
viously, once we construct an electronic lexicon,
whatever information it includes, we can easily
see what lexical types are assumed in the gram-
mar and treebank. But we have to carefully con-
sider what to include in the database to make it
clear how each of the lexical types are used and
distinguished.
We include five kinds of information:
(3) Contents of the Database
a. Linguistic discussion
i Name
ii Definition
iii Criteria to judge a word as belong-
ing to a given lexical type
iv Reference to relevant literature
b. Exemplification
i Words that appear in a treebank
ii Sentences in a treebank that contain
the words
c. Implementation
i The portion of grammar source file
that corresponds to the usage
33
ii Comments related to the portion
iii TODOs
d. Links to ?confusing? lexical types
e. Links to other dictionaries
That is, we describe each lexical type in
depth (3a?3c) and present users (treebank an-
notators and grammar developers) explicit links
to other lexical types that share homony-
mous words (3d) (e.g. adv-p-lex-1 vs
ga-wo-ni-case-p-lex in (1)) to make it
clear what distinguishes between them. Further,
we present correspondences to other computa-
tional dictionaries (3e).
Linguistic discussion To understand lexical
types precisely, linguistic observations and anal-
yses are a basic source of information.
Firstly, the requirements for naming lexical-
types in a computational system (3ai) are that
they be short (so that they can be displayed in
large trees) and easily distinguishable. Type
names are not necessarily understandable for any-
one but the developers, so it is useful to link
them to more conventional names. For example
ga-wo-ni-p-lex is a Case Particle (???).
Next, the definition field (3aii) contains a
widely accepted definition statement of the lexi-
cal type. For example, ga-wo-ni-p-lex (1b)
can be defined as ?a particle that indicates that a
noun it attaches to functions as an argument of a
predicate.? Users can grasp the main characteris-
tics from this.
Thirdly, the criteria field (3aiii) provides users
with means of investigating whether a given word
belongs to the class. That is, it provides posi-
tive and negative usage examples. By such us-
age examples, developers can easily find dif-
ferences among lexical types. For example,
adv-p-lex-1 (1a) subcategorizes for nouns,
while adv-p-lex-6 (2b) subcategorizes for
adjectives. Sentences like (1a) and (2b) that fit
such criteria should also be treebanked so that
they can be used to test that the grammar covers
what it claims. This is especially important for
regression testing after new development.
Finally, the reference field (3aiv) points to rep-
resentative papers or books dealing with the lex-
ical type. This allows the grammar developers to
quickly check against existing analyses, and al-
lows users as well to find more information.
Exemplification Examples help users under-
stand lexical types concretely. As we have con-
structed a treebank that is annotated with linguis-
tic information, we can automatically extract rele-
vant examples exhaustively. We give the database
two kinds of examples: words, that are instances
of the lexical types (3bi), and sentences, tree-
banked examples that contain the words (3bii).
This link to the linguistically annotated corpus
examples helps treebankers to check for consis-
tency, and grammar developers to check that the
lexical types are grounded in the corpus data.
Implementation Grammar developers need to
know the actual implementation of lexical types
(3ci). Comments about the implementation (3cii)
are also helpful to ascertain the current status.
Although this section is necessarily framework-
dependent information, all project groups that are
constructing detailed linguistic treebanks need to
document this kind of information. We take our
examples from JACY (Siegel and Bender, 2002),
a large grammar of Japanese built in the HPSG
framework. As actual implementations are gen-
erally incomplete, we use this resource to store
notes about what remains to be done. TODOs
(3ciii) should be explicitly stated to inform gram-
mar developers of what they have to do next.
We currently show the actual TDL defini-
tion, its parent type or types, category of
the head (SYNSEM.LOCAL.CAT.HEAD), valency
(SYNSEM.LOCAL.CAT.VAL), and the semantic
type (SYNSEM.LOCAL.CONT).
Links to ?confusing? lexical types For users to
distinguish phonologically identical but syntacti-
cally or semantically distinct words, it is impor-
tant to link confusing lexical types to one another
within the database. For example, the four lexical
types in (1) and (2) are connected with each other
in terms of ni. That way, users can compare those
words in detail and make a reliable decision when
trying to disambiguate usage examples.6
6Note that this information is not explicitly stored in
the database. Rather, it is dynamically compiled from the
database together with a lexicon database, one of the com-
ponent databases explained below, when triggered by a user
query. User queries are words like ni.
34
Links to other dictionaries This information
helps us to compare our grammar?s treatment
with that of other dictionaries. This compar-
ison would then facilitate understanding of
lexical types and extension of the lexicon. We
currently link lexical types of our grammar
to those of ChaSen (Matsumoto et al, 2000),
Juman (Kurohashi and Nagao, 2003), ALT-
J/E (Ikehara et al, 1991) and EDICT (Breen,
2004). For example, ga-wo-ni-case-p-lex
is linked to ChaSen?s ??-???-??
(particle-case particle-general),
Juman?s ??? (case particle), and
ALT-J/E?s ???-???-???????
(adjunct-case particle-noun/par-
ticle suffix).
Figure 2 shows the document generated from
the lexical type database that describes the lexical
type, ga-wo-ni-p-lex.
3.2 Method of Database Construction
The next question is how to construct such a
database. Needless to say, fully manual construc-
tion of the database is not realistic, since there
are about 300 lexical types and more than 30,000
words in our grammar. In addition, we assume
that we will refer to the database each time we
annotate parser outputs to build the treebank and
that we develop the grammar based on the tree-
banking result. Thus the database construction
process must be quick enough not to delay the
treebanking and grammar development cycles.
To meet the requirement, our method of con-
struction for the lexical type database is semi-
automatic; most of the database content is con-
structed automatically, while the rest must be en-
tered manually. This is depicted in Figure 3.
? Content that is constructed automatically
? Lexical Type ID (Grammar DB)
? Exemplification (3b) (Treebank DB)
? Implementation (3ci,ii) (Grammar DB)
? Link to ?confusing? lexical types (3d)
(Lexicon DB)
? Link to Other Lexicons (3e) (OtherLex
DB)
? Content that is constructed manually
? Linguistic discussion (3a)
? TODOs (3ciii)
3.2.1 Component Databases
To understand the construction process, de-
scription of the four databases that feed the lex-
ical type database is in order. These are the gram-
mar database, the treebank database, the lexicon
database, and the OtherLex database.
? The grammar database contains the actual
implementation of the grammar, written as
typed feature structures using TDL (Krieger
and Schafer, 1994). Although it contains the
whole implementation (lexical types, phrasal
types, types for principles and so on), only
lexical types are relevant to our task.
? The lexicon database gives us mappings be-
tween words in the grammar, their orthogra-
phy, and their lexical types. Thus we can see
what words belong to a given lexical type.
The data could be stored as TDL, but we
use the Postgresql lexdb (Copestake et al,
2004), which simplifies access.
? The treebank database stores all treebank in-
formation, including syntactic derivations,
words, and the lexical type for each word.
The main treebank is stored as structured
text using the [incr tsdb()] (Oepen et al,
2002). We have also exported the deriva-
tion trees for the treebanked sentences into
an SQL database for easy access. The leaves
of the parse data consist of words, and their
lexicon IDs, stored with the ID of the sen-
tence in which the word appears.
? We also use databases from other sources,
such as ChaSen, Juman and Edict.
3.2.2 Automatic Construction
Next we move on to describe the automatic
construction. Firstly, we collect all lexical types
assumed in the grammar and treebank from the
grammar database. Each type constitutes the ID
of a record of the lexical type database.
Secondly, we extract words that are judged to
belong to a given lexical type and sentences that
contains the words (Example (3b)) from the tree-
bank database compiled from the Hinoki tree-
bank (Bond et al, 2004a). The parsed sentences
35
???, ga-wo-ni-p-lex (?,?,?)
Linguistic Discussion
ga-wo-ni-p-lex particles attach to a noun and indicate what grammatical relation (e.g., subject or object)
the noun takes on in relation to a predicate. It does not mean anything by itself.
Right Wrong
????????? ???????????
?????????? 10???????
Literature
[1] Koichi Takezawa. A Configurational Approach to Case Marking in Japanese. Ph.D. dissertation,
University of Washington, 1987.
[ bib ]
[2] Shigeru Miyagawa. Structure and Case Marking in Japanese (Syntax and Semantics 22). Academic
Press, 1989.
[ bib ]
Examples
Lexical Entries (6)
? (ga),? (ni-case),? (o)
Example Sentences (54280)
Examples for? (ga)
?????????? ??????????????????????????????
?????????
??????????????????????????? ?????
???????????????
Examples for? (ni-case)
???????? ?????
????????
???????????
Examples for? (o)
?????
?????????
?????????
More Examples
TDL Summary
TDL Definition
ga-wo-ni-p-lex := case-p-lex & 
                [SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD noun_head].
Supertype Head Category Valency Content
case-p-lex overt-case-p_head p_sat mrs
TODO
Dative subjects of stative predicates are not recognized.
"????????????"
See also mental-stem-lex.
Links
CHASEN?s Lexical type JUMAN?s Lexical type ALT-J/E?s Lexical type
??-???-?? ??? ???-???-???????
Lexical Type List
Figure 2: Screenshot of the lexical type ga-wo-ni-p-lex
36
Manual
Input
Grammar DB
- Lexical Type ID
- Source
OtherLex DB
- Other Lex ID
- Other Lex Type
- Orthography
Lexical Type DB
- Lexical Type ID
- Linguistic Discussion
- Exemplification
- Implementation
- TODOs
- Other Lexicons
Lexicon DB
- Lexicon ID
- Orthography
- Lexical Type ID
Treebank DB
- Lexicon ID
- Orthography
- Sentence ID
User
:
-)
OtherLex
Interface
Query
?Confusing?
Links
Figure 3: The Lexical Type Database Construction
can be seen in various forms: plain text, phrase
structure trees, derivation trees, and minimal re-
cursion semantics representations. We use com-
ponents from the Heart-of-Gold middleware to
present these as HTML (Callmeier et al, 2004).
Thirdly, implementation information except for
TODOs is extracted from the grammar database
(3ci,ii).
Fourthly, in order to establish ?confusing? lex-
ical type links (3d), we collect from the lexicon
database homonyms of a word that users enter as
a query. To be more precise, the lexicon database
presents all the words with the same orthogra-
phy as the query but belonging to different lexical
types. These lexical types are then linked to each
other as ?confusing? in terms of the query word.
Fifthly, we construct links between our lexical
types and POS?s of other lexicons such as ChaSen
from OtherLex DB (3e). To do this, we prepare
an interface (a mapping table) between our lexi-
cal type system and the other lexicon?s POS sys-
tem. As this is a finite mapping it could be made
manually, but we semi-automate its construction.
The similarity between types in the two databases
(JACY and some other lexicon ) is calculated as
the Dice coefficient, where W (LA) is the number
of words W in lexical type L:
sim(LA, LB) =
2? |(W (LA ? LB)|
|W (LA)|+ |W (LB)|
(1)
The Dice coefficient was chosen because of its
generality and ease of calculation. Any pair
where sim(LA, LB) is above a threshold should
potentially be mapped. The threshold must be set
low, as the granularity of different systems can
vary widely.
3.2.3 Manual Construction
Linguistic discussion (3a) and implementation
TODOs (3ciii) have to be entered manually. Lin-
guistic discussion is especially difficult to collect
exhaustively since the task requires an extensive
background in linguistics. We have several lin-
guists in our group, and our achievements in this
task owe much to them. We plan to make the in-
terface open, and encourage the participation of
anyone interested in the task.
The on-line documentation is designed to com-
plement the full grammar documentation (Siegel,
2004). The grammar documentation gives a top
down view of the grammar, giving the overall mo-
tivation for the analyses. The lexical-type docu-
mentation gives bottom up documentation. It can
easily be updated along with the grammar.
Writing implementation TODOs also requires
expertise in grammar development and linguis-
tic background. But grammar developers usually
take notes on what remains to be done for each
lexical type anyway, so this is a relatively simple
task.
After the database is first constructed, how is
it put to use and updated in the treebanking cy-
cles described in Figure 1? Figure 4 illustrates
this. Each time the grammar is revised based on
treebank annotation feedback, grammar develop-
ers consult the database to see the current status
of the grammar. After finishing the revision, the
grammar and lexicon DBs are updated, as are the
corresponding fields of the lexical type database.
Each time the treebank is annotated, annotators
can consult the database to make sure the chosen
parse is correct. Following annotation, the tree-
bank DB is updated, and so is the lexical type
database. In parallel to this, collaborators who are
37
Development (refinement)
GRAMMAR
Treebanking (manual annotation)
TREEBANK
automatic
parsingfeedback
LEXICAL TYPE
DATABASE
WWW
Reference
Updating Grammar and Lexicon DBs
Reference
Updating Treebank DB
Linguistic Discussion
Figure 4: Database Construction Intergrated with Treebanking Cycles
ChaSenJuman ALT-J/E
The Lexical Type
Database
EDICT LexicalResource2Lexical
Resource1
ChaSen
InterfaceJumanInterface
ALT-J/E
Interface
EDICT
Interface Interface2Interface1
Figure 5: Synthesis of Lexical Resources
familiar with linguistics continue to enter relevant
linguistic discussions via the WWW.
4 Lexical Type Database as a General
Linguistic Resource
In this section, we discuss some of the ways the
database can benefit people other than treebank
annotators and grammar developers.
One way is by serving as a link to other lexi-
cal resources. As mentioned in the previous sec-
tion, our database includes links to ChaSen, Ju-
man, ALT-J/E, and EDICT. Currently, in Japanese
NLP (and more generally), various lexical re-
sources have been developed, but their intercor-
respondences are not always clear. These lexical
resources often play complementary roles, so syn-
thesizing them seamlessly will make a Japanese
lexicon with the widest and deepest knowledge
ever. Among our plans is to realize this by
means of the lexical type database. Consider Fig-
ure 5. Assuming that most lexical resources con-
tain lexical type information, no matter how fine
or coarse grained it is, it is natural to think that
the lexical type database can act as a ?hub? that
links those lexical resources together. This will
be achieved by preparing interfaces between the
lexical type database and each of the lexical re-
sources. Clearly, this is an intelligent way to syn-
thesize lexical resources. Otherwise, we have to
prepare nC2 interfaces to synthesize n resources.
The problem is that construction of such an inter-
face is time consuming. We need to further test
generic ways to do this, such as with similarity
scores, though we will not go on further with this
issue in this paper.
Apart from NLP, how can the database be used?
In the short term our database is intended to pro-
vide annotators and grammar developers with a
clear picture of the current status of the treebank
and the grammar. In the long term, we expect to
create successively better approximations of the
Japanese language, as long as our deep linguistic
broad coverage grammar describes Japanese syn-
tax and semantics precisely. Consequently, the
database would be of use to anyone who needs an
accurate description of Japanese. Japanese lan-
guage teachers can use its detailed descriptions
of word usages, the links to other words, and the
real examples from the treebank to show for stu-
dents subtle differences among words that look
the same but are grammatically different. Lexi-
cographers can take advantage of its comprehen-
siveness and the real examples to compile a dic-
tionary that contains full linguistic explanations.
The confidence in the linguistic descriptions is
based on the combination of the precise grammar
linked to the detailed treebank. Each improves the
other through the treebank annotation and gram-
mar development cycle as depicted in Figure 1.
5 Related Work
Tsuchiya et al (2005) have been constructing a
database that summarizes multiword functional
38
expressions in Japanese. That describes each
expression?s linguistic behavior, usage and ex-
amples in depth. Notable differences between
their database and ours are that their database is
mostly constructed manually while ours is con-
structed semi-automatically, and that they target
only functional expressions while we deal with all
kinds of lexical types.
Hypertextual Grammar development (Dini and
Mazzini, 1997) attempted a similar task, but fo-
cused on documenting the grammar, not on link-
ing it to a dynamic treebank. They suggested cre-
ating the documentation in the same file along
with the grammar, in the style of literate program-
ming. This is an attractive approach, especially
for grammars that change constantly. However,
we prefer the flexibility of combining different
knowledge sources (the grammar, treebank and
linguistic description, in addition to external re-
sources).
The Montage project (Bender et al, 2004) aims
to develop a suite of software whose primary au-
dience is field linguists working on underdocu-
mented languages. Among their tasks is to fa-
cilitate traditional grammatical description from
annotated texts by means of one of their products,
the Grammar export tool. Although in the paper
there is little explicit detail about what the ?tradi-
tional grammatical description? is, they seem to
share a similar goal with us: in the case of Mon-
tage, making grammatical knowledge assumed in
underdocumented languages explicit, while in our
case making lexical types assumed in the treebank
and the computational grammar understandable
to humans. Also, some tools they use are used
in our project as well. Consequently, their pro-
cess of grammatical description and documenta-
tion looks quite similar to ours. The difference
is that their target is underdocumented languages
whose grammatical knowledge has so far not been
made clear enough, while we target a familiar
language, Japanese, that is well understood but
whose computational implementation is so large
and complex as to be difficult to fully compre-
hend.
Another notable related work is the COMLEX
syntax project (Macleod et al, 1994). Their goal
is to create a moderately-broad-coverage lexicon
recording the syntactic features of English words
for purposes of computational language analysis.
They employed elves (?elf? = enterer of lexical
features) to create such a lexicon by hand. Natu-
rally, the manual input task is error-prone. Thus
they needed to prepare a document that describes
word usages by which they intended to reduce
elves? errors. It is evident that the document
plays a role similar to our lexical type database,
but there are important divergences between the
two. First, while their document seems to be con-
structed manually (words chosen as examples of
lexical types in the documentation are not always
in the lexicon!), the construction process of our
database is semi-automated. Second, somewhat
relatedly, our database is electronically accessible
and well-structured. Thus it allows more flexi-
ble queries than a simple document. Third, unlike
COMLEX, all the lexical types in the database
are actually derived from the working Japanese
grammar with which we are building the tree-
bank. That is, all the lexical types are defined
formally. Fourth, examples in our database are all
real ones in that they actually appear in the tree-
bank, while most of the COMLEX examples were
created specifically for the project. Finally, we are
dealing with all kinds of lexical types that appear
in the treebank, but the COMLEX project targets
only nouns, adjectives, and verbs.
6 Future Work
We are currently experimenting with moving
some of the information (in particular the type
name and criteria) into the actual grammar files,
in the same way as Dini and Mazzini (1997). This
would make it easier to keep the information in
sync with the actual grammar.
We have discussed the motivation, contents and
construction of the lexical type database. We plan
to evaluate the database (i) by measuring tree-
bank inter-annotator agreement and (ii) by evalu-
ating the coverage, the amount of spurious ambi-
guity, and efficiency of the grammar before and
after introducing the database in the treebank-
ing and grammar development cycles. We ex-
pect that treebank annotators will be more con-
sistent when they can refer to the database and
that grammar developers can more easily find the
grammar?s flaws (like lack of lexical items and
overlapping implementations of the same lexical
39
type) by looking into the database.
Although this paper deals with a lexical type
database of Japanese, the importance of such a
database certainly holds for any large scale deep
grammar. We use the tools from the DELPH-
IN collaboration7 and plan to make our addi-
tions available for groups working with other lan-
guages. In particular, we plan to construct a lex-
ical type database for the Redwoods treebank,
which is semi-automatically constructed from the
English Resource Grammar (ERG) (Flickinger,
2000).
Acknowledgements
We would like to thank the other members
of Machine Translation Research Group, Dan
Flickinger, Stephen Oepen, and Jason Katz-
Brown for their stimulating discussion.
References
Emily M. Bender, Dan Flickinger, Jeff Good, and Ivan A.
Sag. 2004. Montage: Leveraging Advances in Grammar
Engineering, Linguistic Ontologies, and Mark-up for the
Documentation of Underdescribed Languages. In Pro-
ceedings of the Workshop on First Steps for the Documen-
tation of Minority Languages: Computational Linguistic
Tools for Morphology, Lexicon and Corpus Compilation,
LREC2004, Lisbon, Portugal.
Francis Bond, Sanae Fujita, Chikara Hashimoto, Shigeko
Nariyama, Eric Nichols, Akira Ohtani, Takaaki Tanaka,
and Shigeaki Amano. 2004a. The Hinoki Treebank
? Toward Text Understanding. In Proceedings of the
5th International Workshop on Linguistically Interpreted
Corpora (LINC-04), pages 7?10, Geneva.
Francis Bond, Eric Nichols, and Sanae Fujita Takaaki
Tanaka. 2004b. Acquiring an Ontology for a Funda-
mental Vocabulary. In 20th International Conference
on Computational Linguistics (COLING-2004), pages
1319?1325, Geneva.
J. W. Breen. 2004. JMDict: a Japanese-mulitlingual dictio-
nary. In Coling 2004 Workshop on Multilingual Linguis-
tic Resources, pages 71?78, Geneva.
Ulrich Callmeier, Andreas Eisele, Ulrich Scha?fer, and
Melanie Siegel. 2004. The DeepThought core archi-
tecture framework. In Proceedings of LREC-2004, vol-
ume IV, Lisbon.
Ann Copestake, Fabre Lambeau, Benjamin Waldron, Fran-
cis Bond, Dan Flickinger, and Stephan Oepen. 2004. A
lexicon module for a grammar development environment.
In 4th International Conference on Language Resources
and Evaluation (LREC 2004), volume IV, pages 1111?
1114, Lisbon.
7http://www.delph-in.net/
Luca Dini and Giampolo Mazzini. 1997. Hypertextual
Grammar Development. In Computational Environments
for Grammar Development and Linguistic Engineering,
pages 24?29, Madrid. ACL.
Dan Flickinger. 2000. On building a more effi cient gram-
mar by exploiting types. Natural Language Engineering,
6 (1) (Special Issue on Efficient Proceeding with HPSG,
pages 15?28.
Satoru Ikehara, Satoshi Shirai, Akio Yokoo, and Hiromi
Nakaiwa. 1991. Toward an MT system without pre-
editing ? effects of new methods in ALT-J/E?. In Third
Machine Translation Summit: MT Summit III, pages 101?
106, Washington DC. (http://xxx.lanl.gov/
abs/cmp-lg/9510008).
Hans-Ulrich Krieger and Ulrich Schafer. 1994. T DL ? a
type description language for constraint-based grammars.
In Proceedings of the 15th International Conference on
Computational Linguistics.
Sadao Kurohashi and Makoto Nagao. 2003. Building a
Japanese parsed corpus ? while improving the parsing
system. chapter 14, pages 249?260.
Catherine Macleod, Ralph Grishman, and Adam Meyers.
1994. The Comlex Syntax Project: The First Year. In
Proceedings of the 1994 ARPA Human Language Tech-
nology Workshop.
Yuji Matsumoto, Akira Kitauchi, Tatsuo Yamashita, Yoshi-
taka Hirano, Hiroshi Matsuda, Kazuma Takaoka, and
Masayuki Asahara, 2000. Morphological Analysis Sys-
tem ChaSen version 2.2.1 Manual. Nara Institute of Sci-
ence and Technology, Dec.
Stephan Oepen, Dan Flickinger, Kristina Toutanova, and
Christoper D. Manning. 2002. LinGO Redwoods: A
Rich and Dynamic Treebank for HPSG. In Proceedings
of The First Workshop on Treebanks and Linguistic The-
ories, pages 139?149, Sozopol, Bulgaria.
Stephan Oepen, Dan Flickinger, and Francis Bond. 2004.
Towards Holistic Grammar Engineering and Testing.
Grafting Treebank Maintenance into the Grammar Re-
vision Cycle. In Proceedings of the IJCNLP Workshop
Beyond Shallow Analysis, Hainan,China.
Kumi Sadakane and Masatoshi Koizumi. 1995. On the na-
ture of the ?dative? particle ni in Japanese. Linguistics,
33:5?33.
Melanie Siegel and Emily M. Bender. 2002. Effi cient Deep
Processing of Japanese. In Proceedings of the 3rd Work-
shop on Asian Language Resources and International
Standardization, Taipei, Taiwan.
Melanie Siegel. 2004. JACY a practical Japanese HPSG.
ms.
Masatoshi Tsuchiya, Takehito Utsuro, Suguru Matsuyoshi,
Satoshi Sato, and Seiichi Nakagawa. 2005. A corpus
for classifying usages of japanese compound functional
expressions. In Proceedings of Pacific Association for
Computational Linguistics 2005, Tokyo, Japan.
40
Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 353?360,
Sydney, July 2006. c?2006 Association for Computational Linguistics
Japanese Idiom Recognition:
Drawing a Line between Literal and Idiomatic Meanings
Chikara Hashimoto? Satoshi Sato? Takehito Utsuro?
? Graduate School of
Informatics
Kyoto University
Kyoto, 606-8501, Japan
? Graduate School of
Engineering
Nagoya University
Nagoya, 464-8603, Japan
? Graduate School of Systems
and Information Engineering
University of Tsukuba
Tsukuba, 305-8573, Japan
Abstract
Recognizing idioms in a sentence is im-
portant to sentence understanding. This
paper discusses the lexical knowledge of
idioms for idiom recognition. The chal-
lenges are that idioms can be ambiguous
between literal and idiomatic meanings,
and that they can be ?transformed? when
expressed in a sentence. However, there
has been little research on Japanese idiom
recognition with its ambiguity and trans-
formations taken into account. We pro-
pose a set of lexical knowledge for idiom
recognition. We evaluated the knowledge
by measuring the performance of an idiom
recognizer that exploits the knowledge. As
a result, more than 90% of the idioms in a
corpus are recognized with 90% accuracy.
1 Introduction
Recognizing idioms in a sentence is important to
sentence understanding. Failure of recognizing id-
ioms leads to, for example, mistranslation.
In the case of the translation service of Excite1,
it sometimes mistranslates sentences that contain
idioms such as (1a), due to the recognition failure.
(1) a. Kare-wa
he-TOP
mondai-no
problem-GEN
kaiketu-ni
solving-DAT
hone-o
bone-ACC
o-tta.
break-PAST
?He made an effort to solve the problem.?
b. ?He broke his bone to the resolution of a
question.?
1http://www.excite.co.jp/world/
(1a) contains an idiom, hone-o oru (bone-ACC
break) ?make an effort.? (1b) is the mistranslation
of (1a), in which the idiom is interpreted literally.
In this paper, we discuss lexical knowledge for
idiom recognition. The lexical knowledge is im-
plemented in an idiom dictionary that is used by
an idiom recognizer we implemented. Note that
the idiom recognition we define includes distin-
guishing literal and idiomatic meanings.2 Though
there has been a growing interest in MWEs (Sag
et al, 2002), few proposals on idiom recognition
take into account ambiguity and transformations.
Note also that we tentatively define an idiom as a
phrase that is semantically non-compositional. A
precise characterization of the notion ?idiom? is
beyond the scope of the paper.3
Section 2 defines what makes idiom recognition
difficult. Section 3 discusses the classification of
Japanese idioms, the requisite lexical knowledge,
and implementation of an idiom recognizer. Sec-
tion 4 evaluates the recognizer that exploits the
knowledge. After the overview of related works
in Section 5, we conclude the paper in Section 6.
2 Two Challenges of Idiom Recognition
Two factors make idiom recognition difficult: am-
biguity between literal and idiomatic meanings
and ?transformations? that idioms could un-
dergo.4 In fact, the mistranslation in (1) is caused
by the inability of disambiguation between the two
meanings. ?Transformation? also causes mistrans-
2Some idioms represent two or three idiomatic meanings.
But those meanings in an idiom are not distinguished. We
concerned only whether a phrase is used as an idiom or not.
3For a detailed discussion of what constitutes the notion
of (Japanese) idiom, see Miyaji (1982), which details usages
of commonly used Japanese idioms.
4The term ?transformation? in the paper is not relevant to
the Chomskyan term in Generative Grammar.
353
lation. Sentences in (2) and (3a) contain an idiom,
yaku-ni tatu (part-DAT stand) ?serve the purpose.?
(2) Kare-wa
he-TOP
yaku-ni
part-DAT
tatu.
stand
?He serves the purpose.?
(3) a. Kare-wa
he-TOP
yaku-ni
part-DAT
sugoku
very
tatu.
stand
?He really serves the purpose.?
b. ?He stands enormously in part.?
Google?s translation system5 mistranslates (3a) as
in (3b), which does not make sense,6 though it suc-
cessfully translates (2). The only difference be-
tween (2) and (3a) is that bunsetu7 constituents of
the idiom are detached from each other.
3 Knowledge for Idiom Recognition
3.1 Classification of Japanese Idioms
Requisite lexical knowledge to recognize an idiom
depends on how difficult it is to recognize it. Thus,
we first classify idioms based on recognition diffi-
culty. The recognition difficulty is determined by
the two factors: ambiguity and transformability.
Consequently, we identify three classes (Figure
1).8 Class A is not transformable nor ambigu-
ous. Class B is transformable but not ambiguous.9
Class C is transformable and ambiguous. Class A
amounts to unambiguous single words, which are
easy to recognize, while Class C is the most diffi-
cult to recognize. Only Class C needs further clas-
sifications, since only Class C needs disambigua-
tion and lexical knowledge for disambiguation de-
pends on its part-of-speech (POS) and internal
structure. The POS of Class C is either verbal
or adjectival, as in Figure 1. Internal structure
represents constituent words? POS and a depen-
dency between bunsetus. The internal structure
5http://www.google.co.jp/language tools
6In fact, the idiom has no literal interpretation.
7A bunsetu is a syntactic unit in Japanese, consisting of
one independent word and more than zero ancillary words.
The sentence in (3a) consists of four bunsetu constituents.
8The blank space at the upper left in the figure implies that
there is no idiom that does not undergo any transformation
and yet is ambiguous. Actually, we have not come up with
such an example that should fill in the blank space.
9Anonymous reviewers pointed out that Class A and B
could also be ambiguous. In fact, one can devise a context
that makes the literal interpretation of those Classes possible.
However, virtually no phrase of Class A or B is interpreted
literally in real texts, and we think our generalization safely
captures the reality of idioms.
A
m
bi
gu
ou
s
U
na
m
bi
gu
o
u
s
TransformableUntransformable
Class B
yaku-ni
part-DAT
tatu
stand
?serve the purpose?
- Verbal
- Adjectival
Class C
hone-o
bone-ACC
oru
break
?make an effort?
- Verbal
- Adjectival
Class A
mizu-mo
water-TOO
sitataru
drip
?extremely handsome?
- Adnominal
- Nominal
- Adverbial
More Difficult
Figure 1: Idiom Classification based on the
Recognition Difficulty
of hone-o oru (bone-ACC bone), for instance, is
?(Noun/Particle Verb),? abbreviated as ?(N/P V).?
Then, let us give a full account of the further
classification of Class C. We exploit grammatical
differences between literal and idiomatic usages
for disambiguation. We will call the knowledge of
the differences the disambiguation knowledge.
For instance, a phrase, hone-o oru, does not al-
low passivization when used as an idiom, though
it does when used literally. Thus, (4), in which the
phrase is passivized, cannot be an idiom.
(4) hone-ga
bone-NOM
o-rareru
break-PASS
?A bone is broken.?
In this case, passivizability can be used as a dis-
ambiguation knowledge. Also, detachability of
the two bunsetu constituents can serve for disam-
biguating the idiom; they cannot be separated. In
general, usages applicable to idioms are also ap-
plicable to literal phrases, but the reverse is not
always true (Figure 2). Then, finding the disam-
Usages Applicable to Only Literal Phrases
Usages Applicable to Both
Idioms and Literal Phrases
Figure 2: Difference of Applicable Usages
biguation knowledge amounts to finding usages
applicable to only literal phrases.
Naturally, the disambiguation knowledge for an
idiom depends on its POS and internal structure.
354
As for POS, disambiguation of verbal idioms can
be performed by the knowledge of passivizability,
while that of adjectival idioms cannot. Regarding
internal structure, detachability should be anno-
tated on every boundary of bunsetus. Thus, the
number of annotations of detachability depends on
the number of bunsetus of an idiom.
There is no need for further classification of
Class A and B, since lexical knowledge for them is
invariable. The next section mentions their invari-
ableness. After all, Japanese idioms are classified
as in Figure 3. The whole picture of the subclasses
of Class C remains to be seen.
3.2 Knowledge for Each Class
What lexical knowledge is needed for each class?
Class A needs only a string information; idioms
of the class amount to unambiguous single words.
A string information is undoubtedly invariable
across all kinds of POS and internal structure.
Class B requires not only a string but also
knowledge that normalizes transformations id-
ioms could undergo, such as passivization and de-
tachment of bunsetus. We identify three types of
transformations that are relevant to idioms: 1) De-
tachment of Bunsetu Constituents, 2) Predicate?s
Change, and 3) Particle?s Change. Predicate?s
change includes inflection, attachment of a neg-
ative morpheme, a passive morpheme or modal
verbs, and so on. Particle?s change represents at-
tachment of topic or restrictive particles. (5b) is an
example of predicate?s change from (5a) by adding
a negative morpheme to a verb. (5c) is an example
of particle?s change from (5a) by adding a topic
particle to the preexsistent particle of an idiom.
(5) a. Kare-wa
he-TOP
yaku-ni
part-DAT
tatu.
stand
?He serves the purpose.?
b. Kare-wa
he-TOP
yaku-ni
part-DAT
tat-anai.
stand-NEG
?He does not serve the purpose.?
c. Kare-wa
he-TOP
yaku-ni-wa
part-DAT-TOP
tatu.
stand
?He serves the purpose.?
To normalize the transformations, we utilize a
dependency relation between constituent words,
and we call it the dependency knowledge. This
amounts to checking the presence of all the con-
stituent words of an idiom. Note that we ignore,
among constituent words, endings of a predicate
and case particles, ga (NOM) and o (ACC), since
they could change their forms or disappear.
The dependency knowledge is also invariable
across all kinds of POS and internal structure.
Class C requires the disambiguation knowl-
edge, as well as all the knowledge for Class B.
As a result, all the requisite knowledge for id-
iom recognition is summarized as in Table 1.
String Dependency Disambiguation
Class A ?
Class B ? ?
Class C ? ? ?
Table 1: Requisite Knowledge for each Class
As discussed in ?3.1, the disambiguation
knowledge for an idiom depends on which sub-
class it belongs to. A comprehensive idiom recog-
nizer calls for all the disambiguation knowledge
for all the subclasses, but we have not figured out
all of them. Then, we decided to blaze a trail to
discover the disambiguation knowledge by inves-
tigating the most commonly used idioms.
3.3 Disambiguation Knowledge for the
Verbal (N/P V) Idioms
What type of idiom is used most commonly? The
answer is the verbal (N/P V) type like hone-
o oru (bone-ACC break); it is the most abundant in
terms of both type and token. Actually, 1,834 out
of 4,581 idioms (40%) in Kindaichi and Ikeda
(1989), which is a Japanese dictionary with more
than 100,000 words, are this type.10 Also, 167,268
out of 220,684 idiom tokens in Mainichi newspa-
per of 10 years (?91??00) (76%) are this type.11
Then we discuss what can be used to disam-
biguate the verbal (N/P V) type. First, we exam-
ined literature of linguistics (Miyaji, 1982; Morita,
1985; Ishida, 2000) that observed characteristics
of Japanese idioms. Then, among the characteris-
tics, we picked those that could help with the dis-
ambiguation of the type. (6) summarizes them.
10Counting was performed automatically by means of the
morphological analyzer ChaSen (Matsumoto et al, 2000)
with no human intervention. Note that Kindaichi and Ikeda
(1989) consists of 4,802 idioms, but 221 of them were ig-
nored since they contained unknown words for ChaSen.
11We counted idiom tokens by string matching with inflec-
tion taken into account. And we referred to Kindaichi and
Ikeda (1989) for a comprehensive idiom list. Note that count-
ing was performed totally automatically.
355
Recognition
Difficulty
POS
Internal
Structure
Japanese Idioms
Class C
Verb
(N/P V)
hone-o
bone-ACC
oru
break
?make an effort?
(N/P N/P V)
mune-ni
chest-DAT
te-o
hand-ACC
ateru
put
?think over?
? ? ?
Adj
(N/P A)
atama-ga
head-NOM
itai
ache
?be in trouble?
? ? ?
Class B
yaku-ni
part-DAT
tatu
stand
?serve the purpose?
Class A
mizu-mo
water-TOO
sitataru
drip
?extremely handsome?
Figure 3: Classification of Japanese Idioms for the Recognition Task
(6) Disambiguation Knowledge for the
Verbal (N/P V) Idioms
a. Adnominal Modification Constraints
I. Relative Clause Prohibition
II. Genitive Phrase Prohibition
III. Adnominal Word Prohibition
b. Topic/Restrictive Particle Constraints
c. Voice Constraints
I. Passivization Prohibition
II. Causativization Prohibition
d. Modality Constraints
I. Negation Prohibition
II. Volitional Modality Prohibition12
e. Detachment Constraint
f. Selectional Restriction
For example, the idiom, hone-o oru, does not al-
low adnominal modification by a genitive phrase.
Thus, (7) can be interpreted only literally.
(7) kare-no
he-GEN
hone-o
bone-ACC
oru
break
?(Someone) breaks his bone.?
That is, the Genitive Phrase Prohibition, (6aII), is
in effect for the idiom. Likewise, the idiom does
not allow its case particle o (ACC) to be substi-
tuted with restrictive particles such as dake (only).
Thus, (8) represents only a literal meaning.
(8) hone-dake
bone-ONLY
oru
break
?(Someone) breaks only some bones.?
12
?Volitional Modality? represents those verbal expres-
sions of order, request, permission, prohibition, and volition.
This means the Restrictive Particle Constraint,
(6b), is also in effect. Also, (4) shows that the
Passivization Prohibition, (6cI), is in effect, too.
Note that the constraints in (6) are not always
in effect for an idiom. For instance, the Causativi-
zation Prohibition, (6cII), is invalid for the idiom,
hone-o oru. In fact, (9a) can be interpreted both
literally and idiomatically.
(9) a. kare-ni
he-DAT
hone-o
bone-ACC
or-aseru
break-CAUS
b. ?(Someone) makes him break a bone.?
c. ?(Someone) makes him make an effort.?
3.4 Implementation
We implemented an idiom dictionary based on the
outcome above and a recognizer that exploits the
dictionary. This section illustrates how they work,
and we focus on Class B and C hereafter.
The idiom recognizer looks up dependency
patterns in the dictionary that match a part of the
dependency structure of a sentence (Figure 4). A
dependency pattern is equipped with all the req-
uisite knowledge for idiom recognition. Rough
sketch of the recognition algorithm is as follows:
1. Analyze the morphology and dependency
structures of an input sentence.
2. Look up dependency patterns in the dictio-
nary that match a part of the dependency
structure of the input sentence.
3. Mark constituents of an idiom in the sentence
if any.13 Constituents that are marked are
constituent words and bunsetu constituents
that include one of those constituent words.
13As a constituent marker, we use an ID that is assigned to
each idiom in the dictionary.
356
Input
yaku-ni-wa
part-DAT-TOP
mattaku
totally
tat-anai
stand-NEG
Morphology &
Dependency
Analysis
Dependency
Matching
yaku
part
/ ni
DAT
/ wa
TOP
mattaku
totally
tatu
stand
/ nai
NEG
Output
yaku
part
/ ni
DAT
/ wa
TOP
mattaku
totally
tatu
stand
/ nai
NEG
Idiom
Recognizer
Idiom
Dictionary
? ? ?
yaku
part
/ ni
DAT
tatu
stand
? ? ?
Dependency Pattern
Figure 4: Internal Working of the Idiom Recognizer
Input Output
Idiom
Recognizer
ChaSen
Morphology
Analysis
CaboCha
Dependency
Analysis
TGrep2
Dependency
Matching
Dependency Pattern
Generator Pattern DB
Idiom
Dictionary
Figure 5: Organization of the System
As in Figure 5, we use ChaSen as a morphol-
ogy analyzer and CaboCha (Kudo and Matsumoto,
2002) as a dependency analyzer. Dependency
matching is performed by TGrep2 (Rohde, 2005),
which finds syntactic patterns in a sentence or tree-
bank. The dependency pattern is usually getting
complicated since it is tailored to the specifica-
tion of TGrep2. Thus, we developed the Depen-
dency Pattern Generator that compiles the pattern
database from a human-readable idiom dictionary.
Only the difference in treatments of Class B and
C lies in their dependency patterns. The depen-
dency pattern of Class B consists of only its depen-
dency knowledge, while that of Class C consists
of not only its dependency knowledge but also its
disambiguation knowledge (Figure 6).
The idiom dictionary consists of 100 idioms,
which are all verbal (N/P V) and belong to either
Class B or C. Among the knowledge in (6), the
Selectional Restriction has not been implemented
yet. The 100 idioms are those that are used most
frequently. To be precise, 50 idioms in Kindaichi
and Ikeda (1989) and 50 in Miyaji (1982) were
extracted by the following steps:14
1. From Miyaji (1982), 50 idioms that were
14We counted idiom tokens by string matching with inflec-
tion taken into account. Note that counting was performed
automatically without human intervention.
used most frequently in Mainichi newspaper
of 10 years (?91??00) were extracted.
2. From Kindaichi and Ikeda (1989), 50 idioms
that were used most frequently in the newspa-
per of 10 years but were not included in the
50 idioms from Miyaji (1982) were extracted.
As a result, 66 out of the 100 idioms were Class
B, and the other 34 idioms were Class C.15
4 Evaluation
4.1 Experiment Condition
We conducted an experiment to see the effective-
ness of the lexical knowledge we proposed.
As an evaluation corpus, we collected 300 ex-
ample sentences of the 100 idioms from Mainichi
newspaper of ?95: three sentences for each id-
iom. Then we added another nine sentences for
three idioms that are orthographic variants of one
of the 100 idioms. Among the three idioms, one
belonged to Class B and the other two belonged to
Class C. Thus, 67 out of the 103 idioms were Class
B and the other 36 were Class C. After all, 309
15We found that the most frequently used 100 idioms in
Kindaichi and Ikeda (1989) cover as many as 53.49% of all
tokens in Mainichi newspaper of 10 years. This implies that
our dictionary accounts for approximately half of all idiom
tokens in a corpus.
357
Dependency Pattern
Disambiguation
Knowledge
?Adnominal
Modification Cs
?Topic/Restrictive
Particle Cs
?Detachment C
?Voice Cs
?Modality Cs
Dependency
Knowledge
? Dependency of Constituents
hone
bone
/ o
ACC
oru
break
hone
bone
/ o
ACC
oru
break
Figure 6: Dependency Pattern of Class C
sentences were prepared. Table 2 shows the break-
down of them. ?Positive? indicates sentences in-
Class B Class C Total
Positive 200 66 266
Negative 1 42 43
Total 201 108 309
Table 2: Breakdown of the Evaluation Corpus
cluding a true idiom, while ?Negative? indicates
those including a literal-usage ?idiom.?
A baseline system was prepared to see the ef-
fect of the disambiguation knowledge. The base-
line system was the same as the recognizer except
that it exploited no disambiguation knowledge.
4.2 Result
The result is shown in Table 3. The left side shows
the performances of the recognizer, while the right
side shows that of the baseline. Differences of per-
formances between the two systems are marked
with bold. Recall, Precision, and F-Measure, are
calculated using the following equations.
Recall =
|Correct Outputs|
|Positive|
Precision =
|Correct Outputs|
|All Outputs|
F -Measure =
2? Precision ?Recall
Precision+Recall
As a result, more than 90% of the idioms can be
recognized with 90% accuracy. Note that the rec-
ognizer made fewer errors due to the employment
of the disambiguation knowledge.
The result shows the high performances. How-
ever, there turns out to be a long way to go to solve
the most difficult problem of idiom recognition:
drawing a line between literal and idiomatic mean-
ings. In fact, the precision of recognizing idioms
of Class C remains less than 70% as in Table 3.
Besides, the recognizer successfully rejected only
15 out of 42 negative sentences. That is, its suc-
cess rate of rejecting negative ones is only 35.71%
4.3 Discussion of the Disambiguation
Knowledge
First of all, positive sentences, i.e., sentences con-
taining true idioms, are in the blank region of Fig-
ure 2, while negative ones, i.e., those containing
literal phrases, are in both regions. Accordingly,
the disambiguation amounts to i) rejecting nega-
tive ones in the shaded region, ii) rejecting nega-
tive ones in the blank region, or iii) accepting pos-
itive ones in the blank region. i) is relatively easy
since there are visible evidences in a sentence that
tell us that it is NOT an idiom. However, ii) and
iii) are difficult due to the absence of visible evi-
dences. Our method is intended to perform i), and
thus has an obvious limitation.
Next, we look cloosely at cases of success or
failure of rejecting negative sentences. There were
15 cases where rejection succeeded, which corre-
spond to i). The disambiguation knowledge that
contributed to rejection and the number of sen-
tences it rejects are as follows.16
1. Genitive Phrase Prohibition (6aII) . . . . . . . 6
2. Relative Clause Prohibition (6aI) . . . . . . . . 5
3. Detachment Constraint (6e) . . . . . . . . . . . . . 2
4. Negation Prohibition (6dI) . . . . . . . . . . . . . . 1
This shows that the Adnominal Modification Con-
straints, 1. and 2. above, are the most effective.
There were 27 cases where rejection failed.
These are classified into two types:
16There was one case where rejection succeeded due to the
dependency analysis error.
358
Class B Class C All
Recall 0.975 (195
200
) 0.939 (62
66
) 0.966 (257
266
)
Precision 1.000 (195
195
) 0.697 (62
89
) 0.905 (257
284
)
F-Measure 0.987 0.800 0.935
Class B Class C All
0.975 (195
200
) 0.939 (62
66
) 0.966 (257
266
)
1.000 (195
195
) 0.602 ( 62
103
) 0.862 (257
298
)
0.987 0.734 0.911
Table 3: Performances of the Recognizer (left side) and the Baseline System (right side)
1. Those that could have been rejected by the
Selectional Restriction (6f) . . . . . . . . . . . . . .5
2. Those that might be beyond the current tech-
nology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
1. and 2. correspond to i) and ii), respectively.
We see that the Selectional Restriction would have
been as effective as the Adnominal Modification
Constraints. A part of a sentence that the knowl-
edge could have rejected is below.
(10) basu-ga
bus-NOM
tyuu-ni
midair-DAT
ui-ta
float-PAST
?The bus floated in midair.?
An idiom, tyuu-ni uku (midair-DAT float) ?remain
to be decided,? takes as its argument something
that can be decided, i.e., ?1000:abstract? rather
than ?2:concrete? in the sense of the Goi-Taikei
ontology (Ikehara et al, 1997). Thus, (10) has no
idiomatic sense.
A simplified example of 2. is illustrated in (11).
(11) ase-o
sweat-ACC
nagasi-te
shed-and
huku-o
clothes-ACC
kiru-yorimo,
wear-rather.than,
hadaka-ga
nudity-NOM
gouriteki-da
rational-DECL
?It makes more sense to be naked than
wearing clothes in a sweat.?
The phrase ase-o nagasu (sweat-ACC shed) could
have been an idiom meaning ?work hard.? It is
contextual knowledge that prevented it from being
the idiom. Clearly, our technique is unable to han-
dle such a case, which belongs to ii), since no vis-
ible evidence is available. Dealing with that might
require some sort of machine learning technique
that exploits contextual information. Exploring
that possibility is one of our future works.
Finally, the 42 negative sentences consist of 15
sentences, which we could disambiguate, 5 sen-
tences, which Selectional Restriction could have
disambiguated, and 22, which belong to ii) and are
beyond the current technique. Thus, the real chal-
lenge lies in 7% ( 22
309
) of all idiom occurrences.
4.4 Discussion of the Dependency Knowledge
The dependency knowledge failed in only five
cases. Three of them were due to the defect
of dealing with case particles? change like omis-
sion. The other two cases were due to the noun
constituent?s incorporation into a compound noun.
(12) is a part of such a case.
(12) kaihuku-kidou-ni
recovery-orbit-DAT
nori-hajimeru
ride-begin
?(Economics) get back on a recovery track.?
The idiom, kidou-ni noru (orbit-DAT ride) ?get on
track,? has a constituent, kidou, which is incorpo-
rated into a compound noun kaihuku-kidou ?re-
covery track.? This is unexpected and cannot be
handled by the current machinery.
5 Related Work
There has been a growing awareness of Japanese
MWE problems (Baldwin and Bond, 2002). How-
ever, few attempts have been made to recognize id-
ioms in a sentence with their ambiguity and trans-
formations taken into account. In fact, most of
them only create catalogs of Japanese idiom: col-
lecting idioms as many as possible and classifying
them based on some general linguistic properties
(Tanaka, 1997; Shudo et al, 2004).
A notable exception is Oku (1990); his id-
iom recognizer takes the ambiguity and transfor-
mations into account. However, he only uses
the Genitive Phrase Prohibition, the Detachment
Constraint, and the Selectional Restriction, which
would be too few to disambiguate idioms.17 As
well, his classification does not take the recogni-
tion difficulty into account. This makes his id-
iom dictionary get bloated, since disambiguation
knowledge is given to unambiguous idioms, too.
Uchiyama et al (2005) deals with disambiguat-
ing some Japanese verbal compounds. Though
verbal compounds are not counted as idioms, their
study is in line with this study.
17We cannot compare his recognizer with ours numerically
since no disambiguation success rate is presented in Oku
(1990); only the overall performance is presented.
359
Our classification of idioms correlates loosely
with that of MWEs by Sag et al (2002). Japanese
idioms that we define correspond to lexicalized
phrases. Among lexicalized phrases, fixed expres-
sions are equal to Class A. Class B and C roughly
correspond to semi-fixed or syntactically-flexible
expressions. Note that, though the three subtypes
of lexicalized phrases are distinguished based on
what we call transformability, no distinction is
made based on the ambiguity.18
6 Conclusion
Aiming at Japanese idiom recognition with am-
biguity and transformations taken into accout, we
proposed a set of lexical knowledge for idioms and
implemented a recognizer that exploits the knowl-
edge. We maintain that requisite knowledge de-
pends on its transformability and ambiguity; trans-
formable idioms require the dependency knowl-
edge, while ambiguous ones require the disam-
biguation knowledge as well as the dependency
knowledge. As the disambiguation knowledge,
we proposed a set of constraints applicable to a
phrase when it is used as an idiom. The experi-
ment showed that more than 90% idioms could be
recognized with 90% accuracy but the success rate
of rejecting negative sentences remained 35.71%.
The experiment also revealed that, among the dis-
ambiguation knowledge, the Adnominal Modifi-
cation Constraints and the Selectional Restriction
are the most effective.
What remains to be done is two things; one is
to reveal all the subclasses of Class C and all the
disambiguation knowledge, and the other is to ap-
ply a machine learning technique to disambiguat-
ing those cases that the current technique is unable
to handle, i.e., cases without visible evidence.
In conclusion, there is still a long way to go to
draw a perfect line between literal and idiomatic
meanings, but we believe we broke new ground in
Japanese idiom recognition.
Acknowledgment A special thank goes to
Gakushu Kenkyu-sha, who permitted us to use
Gakken?s Dictionary for our research.
18The notion of decomposability of Sag et al (2002)
and Nunberg et al (1994) is independent of ambigu-
ity. In fact, ambiguous idioms are either decomposable
(hara-ga kuroi (belly-NOM black) ?black-hearted?) or non-
decomposable (hiza-o utu (knee-ACC hit) ?have a brain-
wave?). Also, unambiguous idioms are either decomposable
(hara-o yomu (belly-ACC read) ?fathom someone?s think-
ing?) or non-decomposable (saba-o yomu (chub.mackerel-
ACC read) ?cheat in counting?).
References
Timothy Baldwin and Francis Bond. 2002. Multiword
Expressions: Some Problems for Japanese NLP. In
Proceedings of the 8th Annual Meeting of the As-
sociation of Natural Language Processing, Japan,
pages 379?382, Keihanna, Japan.
Satoru Ikehara, Masahiro Miyazaki, Satoshi Shirai,
Akio Yokoo, Hiromi Nakaiwa, Kentaro Ogura,
Yoshifumi Ooyama, and Yoshihiko Hayashi. 1997.
Goi-Taikei ? A Japanese Lexicon. Iwanami Shoten.
Priscilla Ishida. 2000. Doushi Kanyouku-ni taisuru
Tougoteki Sousa-no Kaisou Kankei (On the Hier-
archy of Syntactic Operations Applicable to Verb
Idioms). Nihongo Kagaku (Japanese Linguistics),
7:24?43, April.
Haruhiko Kindaichi and Yasaburo Ikeda, editors. 1989.
Gakken Kokugo Daijiten (Gakken?s Dictionary).
Gakushu Kenkyu-sha.
Taku Kudo and Yuji Matsumoto. 2002. Japanese De-
pendency Analyisis using Cascaded Chunking. In
Proceedings of the 6th Conference on Natural Lan-
guage Learning (CoNLL-2002), pages 63?69.
Yuji Matsumoto, Akira Kitauchi, Tatsuo Yamashita,
Yoshitaka Hirano, Hiroshi Matsuda, Kazuma
Takaoka, and Masayuki Asahara, 2000. Morpholog-
ical Analysis System ChaSen version 2.2.1 Manual.
Nara Institute of Science and Technology, Dec.
Yutaka Miyaji. 1982. Kanyouku-no Imi-to Youhou
(Usage and Semantics of Idioms). Meiji Shoin.
Yoshiyuki Morita. 1985. Doushikanyouku (Verb
Idioms). Nihongogaku (Japanese Linguistics),
4(1):37?44.
Geoffrey Nunberg, Ivan A. Sag, and Thomas Wasow.
1994. Idioms. Language, 70:491?538.
Masahiro Oku. 1990. Nihongo-bun Kaiseki-ni-okeru
Jutsugo Soutou-no Kanyouteki Hyougen-no Atsukai
(Treatments of Predicative Idiomatic Expressions in
Parsing Japanese). Journal of Information Process-
ing Society of Japan, 31(12):1727?1734.
Douglas L. T. Rohde, 2005. TGrep2 User Manual ver-
sion 1.15. Massachusetts Institute of Technology.
http://tedlab.mit.edu/?dr/Tgrep2/.
Ivan A. Sag, Timothy Baldwin, Francis Bond, Ann
Copestake, and Dan Flickinger. 2002. Multiword
expressions: A pain in the neck for nlp. In Compu-
tational Linguistics and Intelligent Text Processing:
Third International Conference, pages 1?15.
Kosho Shudo, Toshifumi Tanabe, Masahito Takahashi,
and Kenji Yoshimura. 2004. MWEs as Non-
propositional Content Indicators. In the 2nd ACL
Workshop on Multiword Expressions: Integrating
Processing, pages 32?39.
Yasuhito Tanaka. 1997. Collecting idioms and their
equivalents. In IPSJ SIGNL 1997-NL-121.
Kiyoko Uchiyama, Timothy Baldwin, and Shun
Ishizaki. 2005. Disambiguating Japanese Com-
pound Verbs. Computer Speech and Language,
Special Issue on Multiword Expressions, 19, Issue
4:497?512.
360
Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 1172?1181,
Singapore, 6-7 August 2009. c?2009 ACL and AFNLP
Large-Scale Verb Entailment Acquisition from the Web
Chikara Hashimoto? Kentaro Torisawa? Kow Kuroda?
Stijn De Saeger? Masaki Murata? Jun?ichi Kazama?
National Institute of Information and Communications Technology
Sorakugun, Kyoto, 619-0289, JAPAN
{
? ch,? torisawa,? kuroda,? stijn,?murata,? kazama}@nict.go.jp
Abstract
Textual entailment recognition plays a
fundamental role in tasks that require in-
depth natural language understanding. In
order to use entailment recognition tech-
nologies for real-world applications, a
large-scale entailment knowledge base is
indispensable. This paper proposes a con-
ditional probability based directional sim-
ilarity measure to acquire verb entailment
pairs on a large scale. We targeted 52,562
verb types that were derived from 108
Japanese Web documents, without regard
for whether they were used in daily life
or only in specific fields. In an evaluation
of the top 20,000 verb entailment pairs ac-
quired by previous methods and ours, we
found that our similarity measure outper-
formed the previous ones. Our method
also worked well for the top 100,000 re-
sults.
1 Introduction
We all know that if you snored, you must have
been sleeping, that if you are divorced, you must
have been married, and that if you won a lawsuit,
you must have sued somebody. These relation-
ships between events where one is the logical con-
sequence of the other are called entailment. Such
knowledge plays a fundamental role in tasks that
require in-depth natural language understanding,
e.g., answering questions and using natural lan-
guage interfaces.
This paper proposes a novel method for verb
entailment acquisition. Using a Japanese Web
corpus (Kawahara and Kurohashi, 2006a) derived
from 108 Japanese Web documents, we automat-
ically acquired such verb pairs as snore ? sleep
and divorce ? marry, where entailment holds be-
tween the verbs in the pair.1 Our definition of ?en-
tailment? is the same as that in WordNet3.0; v
1
entails v
2
if v
1
cannot be done unless v
2
is, or has
been, done.2
Our method follows the distributional similar-
ity hypothesis, i.e., words that occur in the same
context tend to have similar meanings. Just as in
the methods of Lin and Pantel (2001) and Szpek-
tor and Dagan (2008), we regard the arguments
of verbs as the context in the hypothesis. How-
ever, unlike the previous methods, ours is based
on conditional probability and is augmented with
a simple trick that improves the accuracy of verb
entailment acquisition. In an evaluation of the top
20,000 verb entailment pairs acquired by the pre-
vious methods and ours, we found that our similar-
ity measure outperformed the previous ones. Our
method also worked well for the top 100,000 re-
sults,
Since the scope of Natural Language Process-
ing (NLP) has advanced from a formal writing
style to a colloquial style and from restricted to
open domains, it is necessary for the language re-
sources for NLP, including verb entailment knowl-
edge bases, to cover a broad range of expressions,
regardless of whether they are used in daily life
or only in specific fields that are highly techni-
cal. As we will discuss later, our method can ac-
quire, with reasonable accuracy, verb entailment
pairs that deal not only with common and familiar
verbs but also with technical and unfamiliar ones
like podcast ? download and jibe ? sail.
Note that previous researches on entailment ac-
quisition focused on templates with variables or
word-lattices (Lin and Pantel, 2001; Szpektor and
Dagan, 2008; Barzilay and Lee, 2003; Shinyama
1Verb entailment pairs are described as v
1
? v
2
(v
1
is
the entailing verb and v
2
is the entailed one) henceforth.
2WordNet3.0 provides entailment relationships between
synsets like divorce, split up?marry, get married, wed, con-
join, hook up with, get hitched with, espouse.
1172
et al, 2002). Certainly these templates or word
lattices are more useful in such NLP applications
as Q&A than simple entailment relations between
verbs. However, our contention is that entailment
certainly holds for some verb pairs (like snore ?
sleep) by themselves, and that such pairs consti-
tute the core of a future entailment rule database.
Although we focused on verb entailment, our
method can also acquire template-level entailment
pairs with a reasonable accuracy.
The rest of this paper is organized as follows.
In ?2, related works are described. ?3 presents our
proposed method. After this, an evaluation of our
method and the existing methods is presented in
Section 4. Finally, we conclude the paper in ?5.
2 Related Work
Previous studies on entailment, inference rules,
and paraphrase acquisition are roughly classi-
fied into those that require comparable corpora
(Shinyama et al, 2002; Barzilay and Lee, 2003;
Ibrahim et al, 2003) and those that do not (Lin
and Pantel, 2001; Weeds and Weir, 2003; Geffet
and Dagan, 2005; Pekar, 2006; Bhagat et al, 2007;
Szpektor and Dagan, 2008).
Shinyama et al (2002) regarded newspaper arti-
cles that describe the same event as a pool of para-
phrases, and acquired them by exploiting named
entity recognition. They assumed that named en-
tities are preserved across paraphrases, and that
text fragments in the articles that share several
comparable named entities should be paraphrases.
Barzilay and Lee (2003) also used newspaper ar-
ticles on the same event as comparable corpora
to acquire paraphrases. They induced paraphras-
ing patterns by sentence clustering. Ibrahim et al
(2003) relied on multiple English translations of
foreign novels and sentence alignment to acquire
paraphrases. We decided not to take this approach
since using comparable corpora limits the scale
of the acquired paraphrases or entailment knowl-
edge bases. Although obtaining comparable cor-
pora has been simplified by the recent explosion
of the Web, the availability of plain texts is incom-
parably better.
Entailment acquisition methods that do not re-
quire comparable corpora are mostly based on the
distributional similarity hypothesis and use plain
texts with a syntactic parser. Basically, they parse
texts to obtain pairs of predicate phrases and their
arguments, which are regarded as features of the
predicates with appropriately assigned weights.
Lin and Pantel (2001) proposed a paraphrase ac-
quisition method (non-directional similarity mea-
sure) called DIRT which acquires pairs of binary-
templates (predicate phrases with two argument
slots) that are paraphrases of each other. DIRT em-
ploys the following similarity measure proposed
by Lin (1998):
Lin(l, r) =
?
f?F
l
?F
r
[w
l
(f) + w
r
(f)]
?
f?F
l
w
l
(f) +
?
f?F
r
w
r
(f)
where l and r are the corresponding slots of two
binary templates, F
s
is s?s feature vector (argu-
ment nouns), and w
s
(f) is the weight of f ? F
s
(PMI between s and f ). The intuition behind this
is that the more nouns two templates share, the
more semantically similar they are. Since we ac-
quire verb entailment pairs based on unary tem-
plates (Szpektor and Dagan, 2008) we used the
Lin formula to acquire unary templates directly
rather than using the DIRT formula, which is the
arithmetic-geometric mean of Lin?s similarities for
two slots in a binary template.
Bhagat et al (2007) developed an algorithm
called LEDIR for learning the directionality of
non-directional inference rules like those pro-
duced by DIRT. LEDIR implements a Direction-
ality Hypothesis: when two binary semantic re-
lations tend to occur in similar contexts and the
first one occurs in significantly more contexts than
the second, then the second most likely implies the
first and not vice versa.
Weeds and Weir (2003) proposed a general
framework for distributional similarity that mainly
consists of the notions of what they call Precision
(defined below) and Recall:
Precision(l, r) =
?
f?F
l
?F
r
w
l
(f)
?
f?F
l
w
l
(f)
where l and r are the targets of a similarity mea-
surement, F
s
is s?s feature vector, and w
s
(f) is the
weight of f ? F
s
. The best performing weight is
PMI. Precision is a directional similarity measure
that examines the coverage of l?s features by those
of r?s, with more coverage indicating more simi-
larity.
Szpektor and Dagan (2008) proposed a direc-
tional similarity measure called BInc (Balanced-
Inclusion) that consists of Lin and Precision, as
BInc(l, r) =
?
Lin(l, r) ? Precision(l, r)
1173
where l and r are the target templates. For weight-
ing features, they used PMI. Szpektor and Dagan
(2008) also proposed a unary template, which is
defined as a template consisting of one argument
slot and one predicate phrase. For example, X take
a nap ? X sleep is an entailment pair consisting
of two unary templates. Note that the slot X must
be shared between templates. Though most of the
previous entailment acquisition studies focused on
binary templates, unary templates have an obvi-
ous advantage over binary ones; they can handle
intransitive predicate phrases and those that have
omitted arguments. The Japanese language, which
we deal with here, often omits arguments, and thus
the advantage of unary templates is obvious.
As shown in ?4, our method outperforms Lin,
Precision, and BInc in accuracy.
Szpector et al (2004) addressed broad coverage
entailment acquisition. But their method requires
an existing lexicon to start, while ours does not.
Apart from the dichotomy of the compara-
ble corpora and the distributional similarity ap-
proaches, Torisawa (2006) exploited the structure
of Japanese coordinated sentences to acquire verb
entailment pairs. Pekar (2006) used the local
structure of coherent text by identifying related
clauses within a local discourse. Zanzotto et al
(2006) exploited agentive nouns. For example,
they acquired win ? play from ?the player wins.?
Geffet and Dagan (2005) proposed the Distribu-
tional Inclusion Hypotheses, which claimed that if
a word v entails another word w, then all the char-
acteristic features of v are expected to appear with
w, and vice versa. They applied this to noun en-
tailment pair acquisition, rather than verb pairs.
3 Proposed Method
This section presents our method of verb entail-
ment acquisition. First, the basics of Japanese are
described. Then, we present the directional sim-
ilarity measure that we developed in ?3.2. ?3.3
describes the structure and acquisition of the web-
based data from which entailment pairs are de-
rived. Finally, we show how we acquire verb en-
tailment pairs using our proposed similarity mea-
sure and the web-based data in ?3.4.
3.1 Basics of Japanese
Japanese explicitly marks arguments including the
subject and object by postpositions, and is a head-
final language. Thus, a verb phrase consisting of
an object hon (book) and a verb yomu (read), for
example, is expressed as hon-wo yomu (book-ACC
read) ?read a book? with the accusative postpo-
sition wo marking the object.3 Accordingly, we
refer to a unary template as ?p, v? hereafter, with
p and v referring to the postposition and a verb.
Also, we abbreviate a template-level entailment
?p
l
, v
l
? ? ?p
r
, v
r
? as l ? r for simplicity. We
define a unary template as a template consisting
of one argument slot and one predicate, following
Szpektor and Dagan (2008).
3.2 Directional Similarity Measure based on
Conditional Probability
The directional similarity measure that we devel-
oped and called Score is defined as follows:
Score(l, r) = Score
base
(l, r) ? Score
trick
(l, r)
where l and r are unary templates, and Score in-
dicates the probability of l ? r. Score
base
, which
is the base of Score, is defined as follows:
Score
base
(l, r) =
?
f?F
l
?F
r
P (r|f)P (f |l)
where F
s
is s?s feature vector (nouns including
compounds). The intention behind the definition
of Score
base
is to emulate the conditional proba-
bility P (v
r
|v
l
)
4 in a distributional similarity style
function. Note that P (v
r
|v
l
) should be 1 when en-
tailment v
l
? v
r
holds (i.e., v
r
is observed when-
ever v
l
is observed) and we have reliable proba-
bility values. Then, if we can directly estimate
P (v
r
|v
l
), it is reasonable to assume v
l
? v
r
if
P (v
r
|v
l
) is large enough. However, we cannot es-
timate P (v
r
|v
l
) directly since it is unlikely that we
will observe the verbs v
r
and v
l
at the same time.
(People do not usually repeat v
r
and v
l
in the same
document to avoid redundancy.) Thus, instead of
a direct estimation, we substitute Score
base
(l, r)
as defined above. In other words, we assume
P (v
r
|v
l
) ? P (r|l) ? ?
f?F
l
?F
r
P (f |l)P (r|f).
Actually, Score
base
originally had another mo-
tivation, inspired by Torisawa (2005), for which no
postposition but the instrumental postposition de
was relevant. In this discussion, all of the nouns
(fs) that are marked by the instrumental postposi-
tion are seen as ?tools,? and P (f |l) is interpreted
3ACC represents an accusative postposition in Japanese.
Likewise, NOM, DAT, INS, and TOP are the symbols for the
nominative, dative, instrumental, and topic postpositions.
4Remember that v
l
and v
r
are the verbs of unary tem-
plates l and r.
1174
as a measure of how typically the tool f is used
to perform the action denoted by (the v
l
of) l; if
P (f |l) is large enough, f is a typical tool used in
l. On the other hand, P (r|f) indicates the proba-
bility of (the v
r
of) r being the purpose for using
the tool f . See (1) for an example.
(1) konro-de chouri-suru
cooking.stove-INS cook
?cook (something) using a cooking stove.?
The purpose of using a cooking stove is to cook.
Torisawa (2005) has pointed out that when r ex-
presses the purpose of using a tool f , P (r|f) tends
to be large. This predicts that P (r|cooking stove)
is large, where r is ?de, cook?.
According to this observation, if f is a single
purpose tool and P (f |l), the probability of f be-
ing the tool by which l is performed, and P (r|f),
the probability of r being the purpose of using the
tool f , are large enough, then the typical perfor-
mance of the action v
l
should contain some ac-
tions that can be described by v
r
, i.e., the pur-
pose of using f . Moreover, if all the typical tools
(fs) used in v
l
are also used for v
r
, most perfor-
mances of the action v
l
should contain a part de-
scribed by the action v
r
. In summary, this means
that when ?
f?F
l
?F
r
P (r|f)P (f |l), Score
base
, has
a large value, we can expect v
l
? v
r
.
For example, let v
l
be deep-fry and v
r
be cook.
Note that v
l
? v
r
holds for this example. There
are many tools that are used for deep-frying,
such as cooking stove, pot, or pan. This means
that P (cooking stove|l), P (pot|l), or P (pan|l) are
large. On the other hand, the purpose of using all
of these tools is cooking, based on common sense.
Thus, probabilities such as P (r|cooking stove)
and P (r|pan) should have large values. Accord-
ingly, ?
f?F
l
?F
r
P (f |l)P (r|f), Score
base
, should
be relatively large for deep-fry ? cook,
Actually, we defined Score
base
based on the
above assumption However, through a series of
preliminary experiments, we found that the same
score could be applied without losing the preci-
sion to the other postpositions. Thus, we gener-
alized the framework so that it could deal with
most postpositions, namely ga (NOM), wo (ACC),
ni (DAT), de (INS), and wa (TOP). Note that this
is a variation of the distributional inclusion hy-
pothesis (Geffet and Dagan, 2005), but that we do
not use mutual information as in previous works,
based on the hypothesis discussed above. Actu-
ally, as shown in ?4, our conditional probability
based method outperformed the mutual informa-
tion based metrics in our experiments.
On the other hand, Score
trick
implements an-
other assumption that if only one feature con-
tributes to Score
base
and the contribution of the
other nouns is negligible, if any, the similarity is
unreliable. Accordingly, for Score
trick
, we uni-
formly ignore the contribution of the most domi-
nant feature from the similarity measurement.
Score
trick
(l, r)
= Score
base
(l, r) ? max
f?F
l
?F
r
P (r|f)P (f |l)
As shown in ?4, this trick actually improved the
entailment acquisition accuracy.
We used maximum likelihood estimation to ob-
tain P (r|f) and P (f |l) in the above discussion.
Bannard and Callison-Burch (2005) and Fujita
and Sato (2008) also proposed directional simi-
larity measures based on conditional probability,
which are very similar to Score
base
, although ei-
ther their method?s prerequisites or the targets of
the similarity measurements were different from
ours. The method of Bannard and Callison-Burch
(2005) requires bilingual parallel corpora, and
uses the translations of expressions as its feature.
Fujita and Sato (2008) dealt with productive pred-
icate phrases, while our target is non-productive
lexical units, i.e., verbs. Thus, this is the first
attempt to apply a conditional probability based
similarity measure to verb entailment acquisition.
In addition, the trick implemented in Score
trick
is
novel.
3.3 Preparing Template-Feature Tuples
Our method starts from a dataset called template-
feature tuples, which was derived from the Web
in the following way: 1) Parse the Japanese Web
corpus (Kawahara and Kurohashi, 2006a) derived
from 108 Japanese Web documents with Japanese
dependency parser KNP (Kawahara and Kuro-
hashi, 2006b). 2) Extract triples ?n, p, v? consist-
ing of nouns (n), postpositions (p), and verbs (v),
where an n marked by a p depends on a v from
the parsed Web text. 3) From the triple database,
construct template-feature tuples ?n, ?p, v?? by re-
garding ?p, v? as a unary template and n as one of
its features. 4) Convert the verbs into their canon-
ical forms as defined by KNP. 5) Filter out tuples
that fall into one of the following categories: 5-
1) Freq(?p, v?) < 20. 5-2) Its verb is passivized,
1175
causativized, or negated. 5-3) Its verb is semanti-
cally vague like be, do, or become. 5-4) Its post-
position is something other than ga (NOM), wo
(ACC), ni (DAT), de (INS), or wa (TOP).
The resulting unary template-feature tuples in-
cluded 127,808 kinds of templates that consisted
of 52,562 verb types and five kinds of postpo-
sitions. The verbs included compound words
like bosi-kansen-suru (mother.to.child-infection-
do) ?infect from mothers to infants.?
3.4 Acquiring Entailment Pairs
We acquired verb entailment pairs using the fol-
lowing procedure: i) From the template-feature
tuples mentioned in ?3.3, acquire unary template
pairs that exhibit an entailment relation between
them using the directional similarity measure in
?3.2. ii) Convert the acquired unary templates
?p, v? into naked verbs v by stripping the postpo-
sitions p. iii) Remove the duplicated verb pairs
resulting from stripping ps. To be precise, when
we removed the duplicated pairs, we left the high-
est ranked one. iv) Retrieve N-best verb pairs as
the final output from the result of iii). That is, we
first acquired unary template pairs and then trans-
formed them into verb pairs.
Although this paper focuses on verb entailment
acquisition, we also evaluated the accuracy of
template-level entailment acquisition, in order to
show that our similarity measure works well, not
only for verb entailment acquisition, but also for
template entailment acquisition (See ?4.4). we
created two kinds of unary templates: the ?Scoring
Slots? template and the ?Nom(inative) Slots? tem-
plate. The first is simply the result of the procedure
i); all of the templates have slots that are used for
similarity scoring. The second one was obtained
in the following way: 1) Only templates whose p
is not a nominative are sampled from the result of
the procedure i). 2) Their ps are all changed to a
nominative. Templates of the second kind are used
to show that the corresponding slots between tem-
plates (nominative, in this case) that are not used
for similarity scoring can be incorporated to re-
sulting template-level entailment pairs if the scor-
ing function really captures the semantic similarity
between templates.
Note that, for unary template entailment pairs
like (2) to be well-formed, the two unary slots (X-
wo) between templates must share the same noun
as the index i indicates. This is relevant in ?4.4.
(2) X
i
-wo musaborikuu ? X
i
-wo taberu
X
i
-ACC gobble X
i
-ACC eat
4 Evaluation
We compare the accuracy of our method with that
of the alternative methods in ?4.1. ?4.2 shows
the effectiveness of the trick. We examine the en-
tailment acquisition accuracy for frequent verbs in
?4.3, and evaluate the performance of our method
when applied to template-level entailment acquisi-
tion in ?4.4. Finally, by showing the accuracy for
verb pairs obtained from the top 100,000 results,
we claim that our method provides a good start-
ing point from which a large-scale verb entailment
resource can be constructed in ?4.5.
For the evaluation, three human annotators (not
the authors) checked whether each acquired entail-
ment pair was correct. The average of the three
Kappa values for each annotator pair was 0.579
for verb entailment pairs and 0.568 for template
entailment pairs, both of which indicate the mid-
dling stability of this evaluation annotation.
4.1 Experiment 1: Verb Pairs
We applied Score, BInc, Lin, and Precision to the
template-feature tuples (?3.3), obtained template
entailment pairs, and finally obtained verb entail-
ment pairs by removing the postpositions from the
templates as described in ?3. As a baseline, we
created pairs from randomly chosen verbs.
Since we targeted all of the verbs that ap-
peared on the Web (under the condition of
Freq(?p, v?) ? 20), the annotators were con-
fronted with technical terms and slang that they
did not know. In such cases, they consulted dic-
tionaries (either printed or machine readable ones)
and the Web. If they still could not find the mean-
ing of a verb, they labeled the pair containing the
unknown verb as incorrect.
We used the accuracy = # of correct pairs# of acquired pairs as
an evaluation measure. We regarded a pair as cor-
rect if it was judged correct by one (Accuracy-1),
two (Accuracy-2), or three (Accuracy-3) annota-
tors.
We evaluated 200 entailment pairs sampled
from the top 20,000 for each method (# of ac-
quired pairs = 200). For fairness, the evaluation
samples for each method were shuffled and placed
in one file from which the annotators worked. In
this way, they were unable to know which entail-
ment pair came from which method.
1176
Note that the verb entailment pairs produced
by Lin do not provide the directionality of en-
tailment. Thus, the annotators decided the direc-
tionality of these entailment pairs as follows: i)
Copy 200 original samples and reverse the order
of v
1
and v
2
. ii) Shuffle the 400 Lin samples
(the original and reversed samples) with the other
ones. iii) Evaluate all of the shuffled pairs. Each
Lin pair was regarded as correct if either direction
was judged correct. In other words, we evaluated
the upper bound performance of the LEDIR algo-
rithm.
Table 1 shows the accuracy of the acquired
verb entailment pairs for each method. Figure 1
Method Acc-1 Acc-2 Acc-3
Score 0.770 0.660 0.460
BInc 0.450 0.255 0.125
Precision 0.725 0.545 0.385
Lin 0.590 0.370 0.160
Random 0.050 0.010 0.005
Table 1: Accuracy of verb entailment pairs.
shows the accuracy figures for the N-best entail-
ment pairs for each method, with N being 1,000,
2,000, . . ., or 20,000. We observed the following
points from the results. First, Score outperformed
all the other methods. Second, Score and Pre-
cision, which are directional similarity measures,
worked well, while Lin, which is a symmetric one,
performed poorly even though the directionality of
its output was determined manually.
Looking at the evaluated samples, Score suc-
cessfully acquired pairs in which the entailed
verbs generalized entailing verbs that were techni-
cal terms. (3) shows examples of Score?s outputs.
(3) a. RSS-haisin-suru ? todokeru
RSS-feed-do deliver
?feed the RSS data?
b. middosippu-maunto-suru ? tumu
midship-mounting-do mount
?have (engine) midship-mounted?
The errors made by DIRT (4) and BInc (5) in-
cluded pairs consisting of technical terms.
(4) kurakkingu-suru
software.cracking-do
?crack a (security) system?
? koutiku-hosyu-suru
building-maintenance-do
?build and maintain a system?
Accuracy-1
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  5000  10000  15000  20000
Score
BInc
Precision
Lin
Accuracy-2
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  5000  10000  15000  20000
Score
BInc
Precision
Lin
Accuracy-3
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  5000  10000  15000  20000
Score
BInc
Precision
Lin
Figure 1: Accuracy of verb entailment pairs.
(5) suisou-siiku-suru
tank-raising-do
?raise (fish) in a tank?
? siken-houryuu-suru
test-discharge-do
?stock (with fish) experimentally?
These terms are related in some sense, but they
are not entailment pairs.
4.2 Experiment 2: Effectiveness of the Trick
Next, we investigated the effectiveness of the trick
described in ?3. We evaluated Score, Score
trick
,
and Score
base
. Table 2 shows the accuracy figures
for each method. Figure 2 shows the accuracy fig-
ures for the N-best outputs for each method. The
1177
Method Acc-1 Acc-2 Acc-3
Score 0.770 0.660 0.460
Score
trick
0.725 0.610 0.395
Score
base
0.590 0.465 0.315
Table 2: Effectiveness of the trick.
results illustrate that introducing the trick signif-
icantly improved the performance of Score
base
,
and so did multiplying Score
trick
and Score
base
,
which is our proposal Score.
(6) shows an example of Score
base
?s errors.
(6) gazou-sakusei-suru ? henkou-suru
image-making-do change-do
?make an image? ?change?
This pair has only two shared nouns (f ? F
l
?F
r
),
and more than 99.99% of the pair?s similarity re-
flects only one of the two. Clearly, the trick would
have prevented the pair from being highly ranked.
4.3 Experiment 3: Pairs of Frequent Verbs
We found that the errors made by Lin and BInc
in Experiment 1 were mostly pairs of infrequent
verbs such as technical terms. Thus, we con-
ducted the acquisition of entailment pairs targeting
more frequent verbs to see how their performance
changed. The experimental conditions were the
same as in Experiment 1, except that the templates
(?p, v?) used were all Freq(?p, v?) ? 200.
Table 3 shows the accuracy figures for each
method with the changes in accuracy from those
of the original methods in parentheses. The re-
Method Acc-1 Acc-2 Acc-3
Score
0.690 0.520 0.335
(?0.080) (?0.140) (?0.125)
BInc 0.455 0.295 0.160(+0.005) (+0.040) (+0.035)
Precision 0.450 0.355 0.205(?0.275) (?0.190) (?0.180)
Lin 0.635 0.385 0.205(+0.045) (+0.015) (+0.045)
Table 3: Accuracy of frequent verb pairs.
sults show that the accuracies of Score and Pre-
cision (the two best methods in Experiment 1) de-
graded, while the other two improved a little. We
suspect that the performance difference between
these methods would get smaller if we further re-
stricted the target verbs to more frequent ones.
Accuracy-1
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  5000  10000  15000  20000
Score
ScoretrickScorebase
Accuracy-2
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  5000  10000  15000  20000
Score
ScoretrickScorebase
Accuracy-3
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  5000  10000  15000  20000
Score
ScoretrickScorebase
Figure 2: Accuracy of verb entailment pairs ac-
quired by Score, Score
trick
, and Score
base
.
However, we believe that dealing with verbs com-
prehensively, including infrequent ones, is impor-
tant, since, in the era of information explosion, the
impact on applications is determined not only by
frequent verbs but also infrequent ones that consti-
tute the long tail of a verb-frequency graph. Thus,
this tendency does not matter for our purpose.
4.4 Experiment 4: Template Pairs
This section presents the entailment acquisition
accuracy for template pairs to show that our
method can also perform the entailment acqui-
sition of unary templates. We presented pairs
of unary templates, obtained by the procedure in
1178
?3.4, to the annotators. In doing so, we restricted
the correct entailment pairs to those for which en-
tailment always held regardless of what argument
filled the two unary slots, and the two slots had to
be filled with the same argument, as exemplified
in (2). We evaluated Score and Precision.
Table 4 shows the accuracy of the acquired pairs
of unary templates. Compared to verb entailment
Method Acc-1 Acc-2 Acc-3
Score
0.655 0.510 0.300
Scoring (?0.115) (?0.150) (?0.160)
Slots Precision 0.565 0.430 0.265(?0.160) (?0.115) (?0.120)
Score
0.665 0.515 0.315
Nom (?0.105) (?0.145) (?0.145)
Slots Precision 0.490 0.325 0.215(?0.235) (?0.220) (?0.170)
Table 4: Accuracy of entailment pairs of templates
whose slots were used for scoring.
acquisition, the accuracy of both methods dropped
by about 10%. This was mainly due to the evalua-
tion restriction exemplified in (2) which was not
introduced in the previous experiments; the an-
notators ignored the argument correspondence be-
tween the verb pairs in Experiment 1. Also note
that Score outperformed Precision in this experi-
ment, too.
(7) and (8) are examples of the Scoring Slots
template entailment pairs and (9) is that of the
Nom Slots acquired by our method.
(7) X-wo tatigui-suru ? X-wo taberu
X-ACC standing.up.eating-do X-ACC eat
?eat X standing up? ?eat X?
(8) X-de marineedo-suru ? X-wo ireru
X-INS marinade-do X-ACC pour
?marinate with X? ?pour X?
(9) X-ga NBA-iri-suru ? ? ? (was X-de (INS))
X-NOM NBA-entering-do
?X joins an NBA team?
? X-ga nyuudan-suru ? ? ? (was X-de)
X-NOM enrollment-do
?X joins a team?
4.5 Experiment 5: Verb Pairs form the Top
100,000
Finally, we examined the accuracy of the top
100,000 verb pairs acquired by Score and Preci-
sion. As Table 5 shows, Score outperformed Pre-
Method Acc-1 Acc-2 Acc-3
Score 0.610 0.480 0.300
Precision 0.470 0.295 0.190
Table 5: Accuracy of the top 100,000 verb pairs.
cision. Note also that Score kept a reasonable ac-
curacy for the top 100,000 results (Acc-2: 48%).
The accuracy is encouraging enough to consider
human annotation for the top 100,000 results to
produce a language resource for verb entailment,
which we actually plan to do.
Below are correct verb entailment examples
from the top 100,000 results of our method.
(10) The 121th pair
kaado-kessai-suru ? siharau
card-payment-do pay
?pay by card? ?pay?
(11) The 6,081th pair
saitei-suru ? sadameru
adjudicate-do settle
?adjudicate? ?settle?
(12) The 15,464th pair
eraa-syuuryou-suru ? jikkou-suru
error-termination-do perform-do
?abend? ?execute?
(13) The 30,044th pair
ribuuto-suru ? kidou-suru
reboot-do start-do
?reboot? ?boot?
(14) The 57,653th pair
rinin-suru ? syuunin-suru
resignation-do accession-do
?resign? ?accede?
(15) The 70,103th pair
sijou-tounyuu-suru ? happyou-suru
market-input-do publication-do
?bring to the market? ?publicize?
Below are examples of erroneous pairs from our
results. (16) is a causal relation but not an entail-
ment. (17) is a contradictory pair.
(16) The 5,475th pair
juken-suru ? goukaku-suru
take.an.exam-do acceptance-do
?take an exam? ?gain admission?
1179
(17) The 40,504th pair
ketujou-suru ? syutujou-suru
not.take.part-do take.part-do
?not take part? ?take part?
5 Conclusion
This paper addressed verb entailment acquisition
from the Web, and proposed a novel directional
similarity measure Score. Through a series of ex-
periments, we showed i) that Score outperforms
the previously proposed measures, Lin, Precision,
and BInc in large scale verb entailment acquisi-
tion, ii) that our proposed trick implemented in
Score
trick
significantly improves the accuracy of
verb entailment acquisition despite its simplicity,
iii) that Score worked better than the others even
when we restricted the target verbs to more fre-
quent ones, iv) that our method is also moder-
ately successful at producing template-level en-
tailment pairs, and v) that our method maintained
reasonable accuracy (in terms of human annota-
tion) for the top 100,000 results. As examples of
the acquired verb entailment pairs illustrated, our
method can acquire from an ocean of information,
namely the Web, a variety of verb entailment pairs
ranging from those that are used in daily life to
those that are used in very specific fields.
References
Colin Bannard and Chris Callison-Burch. 2005. Para-
phrasing with bilingual parallel corpora. In Pro-
ceedings of the 43rd Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL2005),
pages 597?604.
Regina Barzilay and Lillian Lee. 2003. Learn-
ing to paraphrase: An unsupervised approach us-
ing multiple-sequence alignment. In Proceedings of
HLT-NAACL 2003, pages 16?23.
Rahul Bhagat, Patrick Pantel, and Eduard Hovy. 2007.
Ledir: An unsupervised algorithm for learning di-
rectionality of inference rules. In Proceedings of
Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP2007), pages 161?170.
Atsushi Fujita and Satoshi Sato. 2008. A probabilis-
tic model for measuring grammaticality and similar-
ity of automatically generated paraphrases of pred-
icate phrases. In Proceedings of the 22nd Inter-
national Conference on Computational Linguistics
(COLING2008), pages 225?232.
Maayan Geffet and Ido Dagan. 2005. The dis-
tributional inclusion hypotheses and lexical entail-
ment. In Proceedings of the 43rd Annual Meet-
ing of the Association for Computational Linguistics
(ACL2005), pages 107?114.
Ali Ibrahim, Boris Katz, and Jimmy Lin. 2003. Ex-
tracting structural paraphrases from aligned mono-
lingual corpora. In Proceedings of the 2nd Interna-
tional Workshop on Paraphrasing (IWP2003), pages
57?64.
Daisuke Kawahara and Sadao Kurohashi. 2006a.
Case Frame Compilation from the Web using High-
Performance Computing. In Proceedings of The 5th
International Conference on Language Resources
and Evaluation (LREC-06), pages 1344?1347.
Daisuke Kawahara and Sadao Kurohashi. 2006b. A
Fully-Lexicalized Probabilistic Model for Japanese
Syntactic and Case Structure Analysis. In Pro-
ceedings of the Human Language Technology Con-
ference of the North American Chapter of the
Association for Computational Linguistics (HLT-
NAACL2006), pages 176?183.
Dekang Lin and Patrick Pantel. 2001. Discovery of in-
ference rules for question answering. Natural Lan-
guage Engineering, 7(4):343?360.
Dekang Lin. 1998. Automatic retrieval and clustering
of similar words. In Proceedings of the 36th Annual
Meeting of the Association for Computational Lin-
guistics and 17th International Conference on Com-
putational Linguistics (COLING-ACL1998), pages
768?774.
Viktor Pekar. 2006. Acquisition of verb entailment
from text. In Proceedings of the main confer-
ence on Human Language Technology Conference
of the North American Chapter of the Association
of Computational Linguistics (HLT-NAACL2006),
pages 49?56.
Yusuke Shinyama, Satoshi Sekine, and Kiyoshi Sudo.
2002. Automatic paraphrase acquisition from news
articles. In Proceedings of the 2nd international
Conference on Human Language Technology Re-
search (HLT2002), pages 313?318.
Idan Szpector, Hristo Tanev, Ido Dagan, and Bonaven-
tura Coppola. 2004. Scaling web-based acquisition
of entailment relations. In Proceedings of the Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP2004), pages 41?48.
Idan Szpektor and Ido Dagan. 2008. Learning en-
tailment rules for unary template. In Proceedings
of the 22nd International Conference on Computa-
tional Linguistics (COLING2008), pages 849?856.
Kentaro Torisawa. 2005. Automatic acquisition of ex-
pressions representing preparation and utilization of
an object. In Proceedings of the Recent Advances
in Natural Language Processing (RANLP05), pages
556?560.
1180
Kentaro Torisawa. 2006. Acquiring inference rules
with temporal constraints by using japanese cood-
inated sentences and noun-verb co-occurences. In
Proceedings of the Human Language Technology
Conference of the Norh American Chapter of the
ACL (HLT-NAACL2006), pages 57?64.
Julie Weeds and David Weir. 2003. A general frame-
work for distributional similarity. In Proceedings
of the Conference on Empirical Methods in Natural
Language Processing (EMNLP2003), pages 81?88.
Fabio Massimo Zanzotto, Marco Pennacchiotti, and
Maria Teresa Pazienza. 2006. Discovering asym-
metric entailment relations between verbs using se-
lectional preferences. In Proceedings of the 44th
Annual Meeting of the Association for Computa-
tional Linguistics and 21th InternationalConference
on Computational Linguistics (COLING-ACL2006),
pages 849?856.
1181
Proceedings of the 2007 Joint Conference on Empirical Methods in Natural Language Processing and Computational
Natural Language Learning, pp. 477?485, Prague, June 2007. c?2007 Association for Computational Linguistics
Word Sense Disambiguation
Incorporating Lexical and Structural Semantic Information
Takaaki Tanaka? Francis Bond? Timothy Baldwin? Sanae Fujita? Chikara Hashimoto?
? {takaaki, sanae}@cslab.kecl.ntt.co.jp ? bond@nict.go.jp
? tim@csse.unimelb.edu.au ? ch@yz.yamagata-u.ac.jp
? NTT Communication Science Laboratories, Nippon Telegraph and Telephone Corporation
? National Institute of Information and Communications Technology
? The University of Melbourne ? Yamagata University
Abstract
We present results that show that incorporat-
ing lexical and structural semantic informa-
tion is effective for word sense disambigua-
tion. We evaluated the method by using pre-
cise information from a large treebank and
an ontology automatically created from dic-
tionary sentences. Exploiting rich semantic
and structural information improves preci-
sion 2?3%. The most gains are seen with
verbs, with an improvement of 5.7% over a
model using only bag of words and n-gram
features.
1 Introduction
Recently, significant improvements have been made
in combining symbolic and statistical approaches
to various natural language processing tasks. In
parsing, for example, symbolic grammars are be-
ing combined with stochastic models (Riezler et al,
2002; Oepen et al, 2002; Malouf and van Noord,
2004). Statistical techniques have also been shown
to be useful for word sense disambiguation (Steven-
son, 2003). However, to date, there have been
few combinations of sense information together with
symbolic grammars and statistical models. Klein
and Manning (2003) show that much of the gain in
statistical parsing using lexicalized models comes
from the use of a small set of function words.
Features based on general relations provide little
improvement, presumably because the data is too
sparse: in the Penn treebank normally used to train
and test statistical parsers stocks and skyrocket never
appear together. They note that this should motivate
the use of similarity and/or class based approaches:
the superordinate concepts capital (? stocks) and
move upward (? sky rocket) frequently appear to-
gether. However, there has been little success in this
area to date. For example, Xiong et al (2005) use se-
mantic knowledge to parse Chinese, but gain only a
marginal improvement. Focusing on WSD, Steven-
son (2003) and others have shown that the use of
syntactic information (predicate-argument relations)
improve the quality of word sense disambiguation
(WSD). McCarthy and Carroll (2003) have shown
the effectiveness of the selectional preference infor-
mation for WSD. However, there is still little work
on combining WSD and parse selection.
We hypothesize that one of the reasons for the
lack of success is that there has been no resource
annotated with both syntactic (or structural seman-
tic information) and lexical semantic information.
For English, there is the SemCor corpus (Fellbaum,
1998) which is annotated with parse trees and Word-
Net senses, but it is fairly small, and does not ex-
plicitly include any structural semantic information.
Therefore, we decided to construct and use a tree-
bank with both syntactic information (e.g. HPSG
parses) and lexical semantic information (e.g. sense
tags): the Hinoki treebank (Bond et al, 2004). This
can be used to train word sense disambiguation and
parse ranking models using both syntactic and lexi-
cal semantic features. In this paper, we discuss only
word sense disambiguation. Parse ranking is dis-
cussed in Fujita et al (2007).
2 The Hinoki Corpus
The Hinoki corpus consists of the Lexeed Seman-
tic Database of Japanese (Kasahara et al, 2004) and
corpora annotated with syntactic and semantic infor-
477
mation.
2.1 Lexeed
Lexeed is a database built from on a dictionary,
which defines word senses used in the Hinoki cor-
pus and has around 49,000 dictionary definition sen-
tences and 46,000 example sentences which are syn-
tactically and semantically annotated. Lexeed con-
sists of all words with a familiarity greater than or
equal to five on a scale of one to seven. This gives
a fundamental vocabulary of 28,000 words, divided
into 46,347 different senses. Each sense has a defi-
nition sentence and example sentence written using
only these 28,000 familiar words (and some function
words). Many senses have more than one sentence
in the definition: there are 75,000 defining sentences
in all.
A (simplified) example of the entry for?U3 un-
tenshu ?chauffeur? is given in Figure 1. Each word
contains the word itself, its part of speech (POS) and
lexical type(s) in the grammar, and the familiarity
score. Each sense then contains definition and ex-
ample sentences, links to other senses in the lexicon
(such as hypernym), and links to other resources,
such as the Goi-Taikei (Ikehara et al, 1997) and
WordNet (Fellbaum, 1998). Each content word in
the definition and example sentences is annotated
with sense tags from the same lexicon.
2.2 Lexical Semantics Annotation
The lexical semantic annotation uses the sense in-
ventory from Lexeed. All words in the fundamental
vocabulary are tagged with their sense. For example,
the word d& ookii ?big? (in ookiku naru ?grow
up?) is tagged as sense 5 in the example sentence
(Figure 1), with the meaning ?elder, older?.
Each word was annotated by five annotators. We
use the majority choice in case of disagreements
(Tanaka et al, 2006). Inter-annotator agreements
among the five annotators range from 78.7% to
83.3%: the lowest agreement is for the Lexeed def-
inition sentences and the highest is for Kyoto cor-
pus (newspaper text). These agreements reflect the
difficulties in disambiguating word sense over each
corpus and can be considered as the upper bound of
precision for WSD.
Table 1 shows the distribution of word senses ac-
cording to the word familiarity in Lexeed.
Fam #Words
Poly-
semous #WS
#Mono-
semous(%)
6.5 - 368 182 4.0 186 (50.5)
6.0 - 4,445 1,902 3.4 2,543 (57.2)
5.5 - 9,814 3,502 2.7 6,312 (64.3)
5.0 - 11,430 3,457 2.5 7,973 (69.8)
Table 1: Word Senses in Lexeed
2.3 Ontology
The Hinoki corpus comes with an ontology semi-
automatically constructed from the parse results of
definitions in Lexeed (Nichols and Bond, 2005). The
ontology includes more than 80 thousand relation-
ships between word senses, e.g. synonym, hyper-
nym, abbreviation, etc. The hypernym relation for
?U3 untenshu ?chauffeur? is shown in Figure 1.
Hypernym or synonym relations exist for almost all
content words.
2.4 Thesaurus
As part of the ontology verification, all nominal and
most verbal word senses in Lexeed were linked to
semantic classes in the Japanese thesaurus, Nihongo
Goi-Taikei (Ikehara et al, 1997). These were then
hand verified. Goi-Taikei has about 400,000 words
including proper nouns, most nouns are classified
into about 2,700 semantic classes. These seman-
tic classes are arranged in a hierarchical structure
(11 levels). The Goi-Taikei Semantic Class for ?
U3 untenshu ?chauffeur? is shown in Figure 1:
?C292:driver? at level 9 which is subordinate to
?C4:person?.
2.5 Syntactic and Structural Semantics
Annotation
Syntactic annotation is done by selecting the best
parse (or parses) from the full analyses derived by
a broad-coverage precision grammar. The gram-
mar is an HPSG implementation (JACY: Siegel and
Bender, 2002), which provides a high level of de-
tail, marking not only dependency and constituent
structure but also detailed semantic relations. As the
grammar is based on a monostratal theory of gram-
mar (HPSG: Pollard and Sag, 1994) it is possible
to simultaneously annotate syntactic and semantic
structure without overburdening the annotator. Us-
ing a grammar enforces treebank consistency ? all
sentences annotated are guaranteed to have well-
478
??
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
INDEX ?U3 untenshu
POS noun
LEX-TYPE noun-lex
FAMILIARITY 6.2 [1?7] (? 5)
SENSE 1
?
?
?
?
?
?
?
?
?
?
?
?
DEFINITION
[
\1 ??1 k?U1 2d04 a person who drives trains and cars
]
EXAMPLE
[
d&(5 C<8b\1 G?U31 Dod6 G%?3 2
I dream of growing up and becoming a train driver
]
HYPERNYM 04 hito ?person?
SEM. CLASS ?292:driver? (? ?4:person?)
WORDNET motorman1
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
Figure 1: Dictionary Entry for ?U31 untenshu ?chauffeur?
formed parses. The flip side to this is that any sen-
tences which the parser cannot parse remain unan-
notated, at least unless we were to fall back on full
manual mark-up of their analyses. The actual anno-
tation process uses the same tools as the Redwoods
treebank of English (Oepen et al, 2002).
There were 4 parses for the definition sentence
shown in Figure 1. The correct parse, shown as a
phrase structure tree, is shown in Figure 2. The two
sources of ambiguity are the conjunction and the rel-
ative clause. The parser also allows the conjunction
to join to \ densha and 0 hito. In Japanese, rel-
ative clauses can have gapped and non-gapped read-
ings. In the gapped reading (selected here), 0 hito
is the subject of ?U unten ?drive?. In the non-
gapped reading there is some underspecified relation
between the thing and the verb phrase. This is sim-
ilar to the difference in the two readings of the day
he knew in English: ?the day that he knew about?
(gapped) vs ?the day on which he knew (some-
thing)? (non-gapped). Such semantic ambiguity is
resolved by selecting the correct derivation tree that
includes the applied rules in building the tree.
The parse results can be automatically given by
the HPSG parser PET (Callmeier, 2000) with the
Japanese grammar JACY. The current parse ranking
model has an accuracy of 70%: the correct tree is
ranked first 70% of the time (for Lexeed definition
sentences) (Fujita et al, 2007).
The full parse is an HPSG sign, containing both
syntactic and semantic information. A view of the
semantic information is given in Figure 31.
1The specific meaning representation language used in
UTTERANCE
NP
VP N
PP V
NP
PP
N CONJ N CASE-P V V
\ ? ? k ?U 2d 0
densha ya jidousha o unten suru hito
train or car ACC drive do person
?U31 ?chauffeur?: ?a person who drives a train or car?
Figure 2: Syntactic View of the Definition of ?U
31 untenshu ?chauffeur?
The semantic view shows some ambiguity has
been resolved that is not visible in the purely syn-
tactic view.
The semantic view can be further simplified into a
dependency representation, further abstracting away
from quantification, as shown in Figure 4. One of
the advantages of the HPSG sign is that it contains
all this information, making it possible to extract the
particular view needed. In order to make linking to
other resources (such as the sense annotation) easier,
predicates are labeled with pointers back to their po-
sition in the original surface string. For example, the
predicate densha n 1 links to the surface characters
between positions 0 and 3: \.
JACY is Minimal Recursion Semantics (Copestake et al, 2005).
479
??
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
TEXT \??k?U2d0
TOP h1
RELS
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
proposition m rel
LBL h1
ARG0 e2
MARG h3
?
?
?
?
?
?
unknown rel
LBL h4
ARG0 e2
ARG x5
?
?
?
?
?
densha n
LBL h6
ARG0 x7
?
?
?
?
?
?
?
udef rel
LBL h8
ARG0 x7
RSTR h9
BODY h10
?
?
?
?
?
?
?
?
?
?
ya p
LBL h11
ARG0 x13
L-INDEX x7
R-INDEX x12
?
?
?
?
?
?
?
?
?
?
udef rel
LBL h15
ARG0 x12
RSTR h16
BODY h17
?
?
?
?
?
?
?
jidousha n
LBL h18
ARG0 x12
?
?
?
?
?
?
?
udef rel
LBL h19
ARG0 x12
RSTR h20
BODY h21
?
?
?
?
?
?
?
?
?
?
unten s
LBL h22
ARG0 e23 tense=present
ARG1 x5
ARG2 x13
?
?
?
?
?
?
?
hito n
LBL h24
ARG0 x5
?
?
?
?
?
?
?
udef rel
LBL h25
ARG0 x5
RSTR h26
BODY h27
?
?
?
?
?
?
?
?
proposition m rel
LBL h10001
ARG0 e23 tense=present
MARG h28
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
HCONS {h3 qeq h4,h9 qeq h6,h16 qeq h11,h20 qeq h18,h26 qeq h24,h28 qeq h22}
ING {h24 ing h10001}
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
Figure 3: Semantic View of the Definition of ?U31 untenshu ?chauffeur?
_1:proposition_m<0:13>[MARG e2:unknown]
e2:unknown<0:13>[ARG x5:_hito_n]
x7:udef<0:3>[]
x7:densha_n_1<0:3>
x12:udef<4:7>[]
x12:_jidousha_n<4:7>
x13:_ya_p_conj<0:4>[L-INDEX x7:_densha_n_1, R-INDEX x12:_jidousha_n]
e23:_unten_s_2<8:10>[ARG1 x5:_hito_n, ARG2 x13:_ya_p_conj]
x5:udef<12:13>[]
_2:proposition_m<0:13>[MARG e23:_unten_s_2]
Figure 4: Dependency View of the Definition of ?U31 untenshu ?chauffeur?
3 Task
We define the task in this paper as ?allocating the
word sense tags for all content words included in
Lexeed as headwords, in each input sentence?. This
task is a kind of all-words task, however, a unique
point is that we focus on fundamental vocabulary
(basic words) in Lexeed and ignore other words. We
use Lexeed as the sense inventory. There are two
problems in resolving the task: how to build the
model and how to assign the word sense by using
the model for disambiguating the senses. We de-
scribe the word sense selection model we use in sec-
tion 4 and the method of word sense assignment in
section 5.
4 Word Sense Selection Model
All content words (i.e. basic words) in Lexeed are
classified into six groups by part-of-speech: noun,
verb, verbal noun, adjective, adverb, others. We
treat the first five groups as targets of disambiguat-
ing senses. We build five words sense models corre-
sponding to these groups. A model contains senses
for various words, however, features for a word are
discriminated from those for other words so that the
senses irrelevant to a target word are not selected.
For example, an n-gram feature following a target
word ?has-a-tail? for dog is distinct from that for cat.
In the remainder of this section, we describe the
features used in the word sense disambiguation.
First we used simple n-gram collocations, then a bag
of words of all words occurring in the sentence. This
was then enhanced by using ontological information
and predicate argument relations.
4.1 Word Collocations
Word collocations (WORD-Col) are basic and effec-
tive cues for WSD. They can be modelled by n-
gram and bag of words features, which are easily
extracted from a corpus. We used all unigrams, bi-
grams and trigrams which precede and follow the
target words (N-gram) and all content words in the
sentences where the target words occur (BOW).
480
# sample features
C1 ?COLWS:04?
C2 ?COLWSSC:C33:other person?
C3 ?COLWSHYP:0/1?
C4 ?COLWSHYPSC:C5:person?
C1 ?COLWS:\1?
C2 ?COLWSSC:C988:land vehicle?
C3 ?COLWSHYP:?1?
C4 ?COLWSHYPSC:C988:land vehicle?
C1 ?COLWS:?1?
C2 ?COLWSSC:C988:land vehicle?
C3 ?COLWSHYP:2?
C4 ?COLWSHYPSC:C988:land vehicle?
Table 2: Example semantic collocation features
(SEM-Col) extracted from the word sense tagged cor-
pus and the dictionary (Lexeed and GoiTaikei) and
the ontology which have the word senses and the se-
mantic classes linked to the semantic tags. The first
column numbers the feature template corresponding
to each example.
4.2 Semantic Features
We use the semantic information (sense tags and on-
tologies) in two ways. One is to enhance the collo-
cations and the other is to enhance dependency rela-
tions.
4.2.1 Semantic Collocations
Word surface features like N-gram and BOW in-
evitably suffer from data sparseness, therefore, we
generalize them to more abstract words or concepts
and also consider words having the same mean-
ings. We used the ontology described in Sec-
tion 2.3 to get hypernyms and synonyms and the
Goi-Taikei thesaurus to abstract the words to the se-
mantic classes. The superordinate classes at level
3, 4 and 5 are also added in addition to the original
semantic class. For example, \ densha ?train?
and ? jidousha ?automobile? are both gener-
alized to the semantic class ?C988:land vehicle?
(level 7). The superordinate classes are also used:
?C706:inanimate? (level 3), ?C760:artifact?
(level 4) and ?C986:vehicle? (level 5).
4.2.2 Semantic Dependencies
The semantic dependency features are based on
a predicate and its arguments taken from the ele-
mentary dependencies. For example, consider the
semantic dependency representation for densha ya
# sample features for ?U2d1
D1 ?PRED:?U2d, ARG1:0?
D1 ?PRED:?U2d, ARG2:\?
D1 ?PRED:?U2d, ARG2:??
D2 ?PRED:?U2d, ARG1:04?
D2 ?PRED:?U2d, ARG2:\1?
D2 ?PRED:?U2d, ARG2:?1?
D3 ?PRED:?U2d, ARG1SC:C33?
D3 ?PRED:?U2d, ARG2SC:C988?
D4 ?PRED:?U2d, ARG2SYN:???1?
D5 ?PRED:?U2d, ARG1HYP:0/1?
D5 ?PRED:?U2d, ARG2HYP:?1?
D5 ?PRED:?U2d, ARG2HYP:2?
D6 ?PRED:?U2d, ARG1HYPSC:C5?
D6 ?PRED:?U2d, ARG2HYPSC:C988?
D11 ?PRED:?U2d, ARG1:0, ARG2:\?
D22 ?PRED:?U2d, ARG1:04, ARG2:\1?
D23 ?PRED:?U2d, ARG1:04, ARG2:C1460 ?
D24 ?PRED:?U2d, ARG1:04, ARG2SYN:???1?
D32 ?PRED:?U2d, ARG1:C5, ARG2:\1?
D33 ?PRED:?U2d, ARG1:C5, ARG2:C988?
D55 ?PRED:?U2d, ARG1HYP:0/4, ARG2HYP:?1?
D56 ?PRED:?U2d, ARG1HYP:0/4, ARG2HYPSC:C988?
D65 ?PRED:?U2d, ARG1HYPSC:C5 , ARG2HYP:?1?
D322 ?PRED:C2003, ARG1:04, ARG2:\1?
Table 3: Example semantic features extracted from
the dependency tree in Figure 4. The first column
numbers the feature template corresponding to each
example.
jidousha-wo unten suru hito ?a person who drives a
train or car? given in Figure 4. The predicate un-
ten ?drive?, has two arguments: ARG1 hito ?person?
and ARG2 ya ?or?. The coordinate conjunction is
expanded out into its children, giving ARG2 densha
?train? and jidousha ?automobile?.
From these, we produce several features, a sam-
ple of them are shown in Table 3. One has all argu-
ments and their labels (D11). We also produce var-
ious back offs, for example the predicate with only
one argument at a time (D1-D3). Each combination
of predicate and its related argument(s) becomes a
feature.
For the next class of features, we used the sense
information from the corpus combined with the se-
mantic classes in the dictionary to replace each pred-
481
icate by its disambiguated sense, its hypernym, its
synonym (if any) and its semantic class. The seman-
tic classes for\1 and?1 are both ?988:land
vehicle?, while ?U1 is ?2003:motion? and 04
is ?4:human?. We also expand ?1 into its syn-
onym ???1 mo?ta?ka? ?motor car?.
The semantic class features provide a seman-
tic smoothing, as words are binned into the 2,700
classes. The hypernym/synonym features provide
even more smoothing. Both have the effect of mak-
ing more training data available for the disambigua-
tor.
4.3 Domain
Domain information is a simple and sometimes
strong cue for disambiguating the target words
(Gliozzo et al, 2005). For instance, the sense of
the word ?record? is likey to be different in the mu-
sical context, which is recalled by domain-specific
words like ?orchestra?, ?guitar?, than in the sport-
ing context. We use 12 domain categories like ?cul-
ture/art?, ?sport?, etc. which are similar to ones used
in directory search web sites. About 6,000 words
are automatically classified into one of 12 domain
categories by distributions in web sites (Hashimoto
and Kurohashi, 2007) and 10% of them are manually
checked. Polysemous words which belong to multi-
ple domains and neutral words are not classified into
any domain.
5 Search Algorithm
The conditional probability of the word sense for
each word is given by the word sense selection
model described in Section 4. In the initial state,
some of the semantic features, e.g. semantic col-
locations (SEM-Col) and word sense extensions for
semantic dependencies (SEM-Dep) are not available,
since no word senses for polysemous words have
been determined. It is not practical to count all com-
binations of word senses for target words, therefore,
we first try to decide the sense for that word which
is most plausible among all the ambiguous words,
then, disambiguate the next word by using the sense.
We use the beam search algorithm, which is sim-
ilar to that used for decoder in statistical machine
translation (Watanabe, 2004), for finding the plausi-
ble combination of word sense tags.
The algorithm is described as follows. For a pol-
ysemous word set in an input sentence {w1, . . . ,wn},
twik is the k-th word sense of word wi, W is a set
having words to be disambiguated, T is a list of re-
solved word senses. A search node N is defined as
[W,T ] and a score of a node N, s(N) is defined as
the probability that the word sense set T occurs in
the context. The beam search can be done as fol-
lows (beam width is b):
1. Create an initial node N0 = [T0,W0] (T0 = {},
W0 = {}) and insert the node into an initial
queue Q0.
2. For each node N in the queue Q, do the follow-
ing steps.
? For each wi (? W ), create W ?i by picking
out wi from W
? Create new lists T ?1, . . . ,T ?l by adding one
of word sense candidates twi1,. . . ,twil for wi
to T
? Create new nodes [W ?i ,T ?0 ], . . . ,[W ?i ,T ?l ] and
insert them into the queue Q?
3. Sort the nodes in Q? by the score s(N)
4. If the top node W in the queue Q? is empty,
adopt T as the combination of word senses and
terminate. Otherwise, pick out the top b nodes
from Q? and insert them into new queue Q, then
go back to 2
6 Evaluation
We trained and tested on the Lexeed Dictionary Def-
inition (LXD-DEF) and Example sections (LXD-EX) of
the Hinoki corpus (Bond et al, 2007). These have
about 75,000 definition and 46,000 example sen-
tences respectively. Some 54,000 and 36,000 sen-
tences of them are treebanked, i.e., they have the
syntactic trees and structural semantic information.
We used these sentences with the complete informa-
tion and selected 1,000 sentences out of each sen-
tence class as test sets (LXD-DEFtest, LXD-EXtest), and
the remainder is combined and used as a training
set (LXD-ALL). We also tested 1,000 sentences from
the Kyoto Corpus of newspaper text (KYOTOtest).
These sentences have between 3.4 (LXD-EXtest) ? 5.2
(KYOTOtest) polysemous words per sentence on av-
erage.
482
We use a maximum entropy / minimum diver-
gence (MEMD) modeler to train the word sense se-
lection model. We use the open-source Maximun
Entropy Modeling Toolkit2 for training, determining
best-performing convergence thresholds and prior
sizes experimentally. The models for five differ-
ent POSs were trained with each training sets: the
base model is word collocation model (WORD-Col),
and the semantic models built by semantic colloca-
tion (SEM-Col), semantic dependency (SEM-Dep) or
domain with WORD-Col (+SEM-Col, +SEM-Dep and
+DOMAIN).
Figure 5: Learning Curve
7 Results and Discussion
Table 4 shows the precision as the results of the word
sense disambiguation on the combination of LXD-
DEF and LXD-EX (LXD-ALL). The baseline method
selects the senses occurring most frequently in the
training corpus. Each row indicates the results us-
ing the baseline, word collocation (WORD-Col), the
combinations of WORD-Col and one of the seman-
tic features (+SEM-Col, +SEM-Dep and +DOMAIN),
e.g, +SEM-Col gives the results using WORD-Col and
SEM-Col, and all features (FULL).
There are significant improvements over the base-
line and the other results on all corpora. Basic word
2http://homepages.inf.ed.ac.uk/s0450736/
maxent_toolkit.html
collocation features (WORD-Col) give a vast improve-
ment. Extending this by using the ontological in-
formation (+SEM-Col) gives a further improvement
over the WORD-Col. Adding the predicate-argument
relationships (+SEM-Dep) improves the results even
more.
Table 6 shows the statistics of the target corpora.
The best result of LXD-DEFtest (80.7%) surpasses the
inter-annotator agreement (78.7%) in building the
Hinoki Sensebank. However, there is a wide gap
between the best results of KYOTOtest (60.4%) and
the inter-annotator agreement (83.3%), this suggests
other information such as the semantic classes for
named entities (including proper nouns and multi-
word expressions (MWE)) and broader contexts are
required. However, a model built on dictionary sen-
tences lacks these features. Even, so there is some
improvement.
The domain features (+DOMAIN) give small con-
tribution to the precision, since only intra-sentence
context is counted in this experiment. Unfortunately
dictiory definition and example sentences do not re-
ally have a useful context. We expect broader con-
text should make the domain features more effective
for the newspaper text (e.g. as in Stevenson (2003)),
Table 5 shows comparison of results of different
POSs. The semantic features (+SEM-Col and +SEM-
Dep) are particularly effective for verb and also give
moderate improvements on the results of the other
POSs.
Figure 5 shows the precisions of LXD-DEFtest in
changing the size of a training corpus, which is di-
vided into five partitions. The precision is saturated
in using four partitions (264,000 tokens).
These results of the dictionary sentences are close
to the best published results for the SENSEVAL-2
task (79.3% by Murata et al (2003) using a com-
bination of simple Bayes learners). However, we
are using a different sense inventory (Lexeed not
Iwanami (Nishio et al, 1994)) and testing over a dif-
ferent corpus, so the results are not directly compa-
rable. In future work, we will test over SENSEVAL-
2 data so that we can compare directly.
None of the SENSEVAL-2 systems used onto-
logical information, despite the fact that the dic-
tionary definition sentences were made available,
and there are several algorithms describing how to
extract such information from MRDs (Tsurumaru
483
Model Test Baseline WORD-Col +SEM-Col +SEM-Dep +DOMAIN FULL
LXD-ALL LXD-DEFtest 72.8 78.4 79.8 80.2 78.1 80.7
LXD-EXtest 70.4 75.6 78.7 77.9 76.0 78.8
KYOTOtest 55.6 58.5 60.0 58.8 59.8 60.4
Table 4: The Precision of WSD
POS Baseline WORD-Col +SEM-Col +SEM-Dep +DOMAIN FULL
Noun 65.5 68.7 69.6 69.4 68.9 69.8
Verb 60.3 66.9 71.0 70.6 67.7 72.6
VN 72.6 76.2 77.7 74.6 77.6 77.5
Adj 59.9 67.2 69.5 68.9 68.9 69.5
Adv 74.4 78.6 79.8 79.2 78.6 79.8
Table 5: The Precision of WSD (per Part-of-Speech)
et al, 1991; Wilkes et al, 1996; Nichols et al, 2005).
We hypothesize that this is partly due to the way the
task is presented: there was not enough time to ex-
tract and debug an ontology as well as build a dis-
ambiguation system, and there was no ontology dis-
tributed. The CRL system (Murata et al, 2003) used
a syntactic dependency parser as one source of fea-
tures (KNP: Kurohashi and Nagao (2003)), remov-
ing it decreased performance by around 0.6%.
8 Conclusions
We used the Hinoki corpus to test the importance of
lexical and structural information in word sense dis-
ambiguation. We found that basic n-gram features
and collocations provided a great deal of useful in-
formation, but that better results could be gained by
using ontological information and semantic depen-
dencies.
Acknowledgements
We would like to thank the other members of the
NTT Natural Language Research Group NTT Com-
munication Science laboratories for their support.
We would also like to express gratitude to the re-
viewers for their valuable comments and Professor
Zeng Guangping, Wang Daliang and Shen Bin of
the University of Science and Technology Beijing
(USTB) for building the demo system.
References
Francis Bond, Sanae Fujita, Chikara Hashimoto, Kaname
Kasahara, Shigeko Nariyama, Eric Nichols, Akira Ohtani,
Takaaki Tanaka, and Shigeaki Amano. 2004. The Hinoki
treebank: A treebank for text understanding. In Proceed-
ings of the First International Joint Conference on Natural
Language Processing (IJCNLP-04), pages 554?559. Hainan
Island.
Francis Bond, Sanae Fujita, and Takaaki Tanaka. 2007. The Hi-
noki syntactic and semantic treebank of Japanese. Language
Resources and Evaluation. (Special issue on Asian language
technology).
Ulrich Callmeier. 2000. PET - a platform for experimentation
with efficient HPSG processing techniques. Natural Lan-
guage Engineering, 6(1):99?108.
Ann Copestake, Dan Flickinger, Carl Pollard, and Ivan A. Sag.
2005. Minimal Recursion Semantics. An introduction. Re-
search on Language and Computation, 3(4):281?332.
Christine Fellbaum, editor. 1998. WordNet: An Electronic Lex-
ical Database. MIT Press.
Sanae Fujita, Francis Bond, Stephan Oepen, and Takaaki
Tanaka. 2007. Exploiting semantic information for HPSG
parse selection. In ACL 2007 Workshop on Deep Linguistic
Processing, pages 25?32. Prague, Czech Republic.
Alfio Massimiliano Gliozzo, Claudio Giuliano, and Carlo
Strapparava. 2005. Domain kernels for word sense disam-
biguation. In Proceedings of the 43rd Annual Meeting of the
Association for Computational Linguistics (ACL 2005). Ann
Arbor, U.S.
Chikara Hashimoto and Sadao Kurohashi. 2007. Construction
of domain dictionary for fundamental vocaburalry. In Pro-
ceedings of the ACL 2007 Main Conference Poster Sessions.
Association for Computational Linguistics, Prague, Czech
Republic.
Satoru Ikehara, Masahiro Miyazaki, Satoshi Shirai, Akio
Yokoo, Hiromi Nakaiwa, Kentaro Ogura, Yoshifumi
Ooyama, and Yoshihiko Hayashi. 1997. Goi-Taikei ?
A Japanese Lexicon. Iwanami Shoten, Tokyo. 5 vol-
umes/CDROM.
Kaname Kasahara, Hiroshi Sato, Francis Bond, Takaaki
Tanaka, Sanae Fujita, Tomoko Kanasugi, and Shigeaki
Amano. 2004. Construction of a Japanese semantic lexicon:
Lexeed. In IPSG SIG: 2004-NLC-159, pages 75?82. Tokyo.
(in Japanese).
Dan Klein and Christopher D. Manning. 2003. Accurate un-
lexicalized parsing. In Erhard Hinrichs and Dan Roth, edi-
tors, Proceedings of the 41st Annual Meeting of the Associ-
ation for Computational Linguistics, pages 423?430. URL
http://www.aclweb.org/anthology/P03-1054.pdf.
484
Corpus
Annotated
Tokens #WS
Agreement
token (type) %Other Sense %Homonym %MWE %Proper Noun
LXD-DEF 199,268 5.18 .787 (.850) 4.2 0.084 1.5 0.046
LXD-EX 126,966 5.00 .820 (.871) 2.3 0.035 0.4 0.0018
KYOTO 268,597 3.93 .833 (.828) 9.8 3.3 7.9 5.5
Table 6: Corpus Statistics
Sadao Kurohashi and Makoto Nagao. 2003. Building a
Japanese parsed corpus ? while improving the parsing sys-
tem. In Anne Abeille?, editor, Treebanks: Building and Using
Parsed Corpora, chapter 14, pages 249?260. Kluwer Aca-
demic Publishers.
Robert Malouf and Gertjan van Noord. 2004. Wide cover-
age parsing with stochastic attribute value grammars. In
IJCNLP-04 Workshop: Beyond shallow analyses - For-
malisms and statistical modeling for deep analyses. JST
CREST. URL http://www-tsujii.is.s.u-tokyo.ac.
jp/bsa/papers/malouf.pdf.
Diana McCarthy and John Carroll. 2003. Disambiguat-
ing nouns, verbs and adjectives using automatically ac-
quired selectional preferences. Computational Linguistics,
29(4):639?654.
Masaaki Murata, Masao Utiyama, Kiyotaka Uchimoto, Qing
Ma, and HItoshi Isahara. 2003. CRL at Japanese dictionary-
based task of SENSEVAL-2. Journal of Natural Language
Processing, 10(3):115?143. (in Japanese).
Eric Nichols and Francis Bond. 2005. Acquiring ontologies
using deep and shallow processing. In 11th Annual Meeting
of the Association for Natural Language Processing, pages
494?498. Takamatsu.
Eric Nichols, Francis Bond, and Daniel Flickinger. 2005. Ro-
bust ontology acquisition from machine-readable dictionar-
ies. In Proceedings of the International Joint Conference on
Artificial Intelligence IJCAI-2005, pages 1111?1116. Edin-
burgh.
Minoru Nishio, Etsutaro Iwabuchi, and Shizuo Mizutani. 1994.
Iwanami Kokugo Jiten Dai Go Han [Iwanami Japanese Dic-
tionary Edition 5]. Iwanami Shoten, Tokyo. (in Japanese).
Stephan Oepen, Kristina Toutanova, Stuart Shieber,
Christoper D. Manning, Dan Flickinger, and Thorsten
Brant. 2002. The LinGO redwoods treebank: Motivation
and preliminary applications. In 19th International Confer-
ence on Computational Linguistics: COLING-2002, pages
1253?7. Taipei, Taiwan.
Carl Pollard and Ivan A. Sag. 1994. Head Driven Phrase Struc-
ture Grammar. University of Chicago Press, Chicago.
Stefan Riezler, Tracy H. King, Ronald M. Kaplan, Richard
Crouch, John T. Maxwell, and Mark Johnson. 2002. Parsing
the Wall Street Journal using a Lexical-Functional Grammar
and discriminative estimation techniques. In 41st Annual
Meeting of the Association for Computational Linguistics:
ACL-2003, pages 271?278.
Melanie Siegel and Emily M. Bender. 2002. Efficient deep pro-
cessing of Japanese. In Proceedings of the 3rd Workshop on
Asian Language Resources and International Standardiza-
tion at the 19th International Conference on Computational
Linguistics, pages 1?8. Taipei.
Mark Stevenson. 2003. Word Sense Disambiguation. CSLI Pub-
lications.
Takaaki Tanaka, Francis Bond, and Sanae Fujita. 2006. The Hi-
noki sensebank ? a large-scale word sense tagged corpus of
Japanese ?. In Proceedings of the Workshop on Frontiers in
Linguistically Annotated Corpora 2006, pages 62?69. Syd-
ney. URL http://www.aclweb.org/anthology/W/W06/
W06-0608, (ACL Workshop).
Hiroaki Tsurumaru, Katsunori Takesita, Itami Katsuki, Toshi-
hide Yanagawa, and Sho Yoshida. 1991. An approach to
thesaurus construction from Japanese language dictionary.
In IPSJ SIGNotes Natural Language, volume 83-16, pages
121?128. (in Japanese).
Taro Watanabe. 2004. Example-based Statistical Machine
Translation. Ph.D. thesis, Kyoto University.
Yorick A. Wilkes, Brian M. Slator, and Louise M. Guthrie.
1996. Electric Words. MIT Press.
Deyi Xiong, Qun Liu Shuanglong Li and, Shouxun Lin, and
Yueliang Qian. 2005. Parsing the Penn Chinese treebank
with semantic knowledge. In Robert Dale, Jian Su Kam-Fai
Wong and, and Oi Yee Kwong, editors, Natural Language
Processing ? IJCNLP 005: Second International Joint Con-
ference Proceedings, pages 70?81. Springer-Verlag.
485
Proceedings of the 2008 Conference on Empirical Methods in Natural Language Processing, pages 992?1001,
Honolulu, October 2008. c?2008 Association for Computational Linguistics
Construction of an Idiom Corpus and its Application to Idiom Identification
based on WSD incorporating Idiom-Specific Features
Chikara Hashimoto
Graduate School of Science and Engineering
Yamagata University
Yonezawa, Yamagata, 992-8510, JAPAN
ch@yz.yamagata-u.ac.jp
Daisuke Kawahara
National Institute of Information and
Communications Technology
Sorakugun, Kyoto, 619-0289, JAPAN
dk@nict.go.jp
Abstract
Some phrases can be interpreted either id-
iomatically (figuratively) or literally in con-
text, and the precise identification of idioms
is indispensable for full-fledged natural lan-
guage processing (NLP). To this end, we have
constructed an idiom corpus for Japanese.
This paper reports on the corpus and the re-
sults of an idiom identification experiment us-
ing the corpus. The corpus targets 146 am-
biguous idioms, and consists of 102,846 sen-
tences, each of which is annotated with a lit-
eral/idiom label. For idiom identification, we
targeted 90 out of the 146 idioms and adopted
a word sense disambiguation (WSD) method
using both common WSD features and idiom-
specific features. The corpus and the experi-
ment are the largest of their kind, as far as we
know. As a result, we found that a standard
supervised WSD method works well for the
idiom identification and achieved an accuracy
of 89.25% and 88.86% with/without idiom-
specific features and that the most effective
idiom-specific feature is the one involving the
adjacency of idiom constituents.
1 Introduction
Some phrases like kick the bucket are ambiguous
with regard to whether they carry literal or idiomatic
meaning in a certain context. This ambiguity needs
to be resolved in the same manner as ambiguous
words that have been dealt with in the WSD liter-
ature. We term the resolution of the literal/idiomatic
ambiguity as idiom identification, hereafter.
Idiom identification is classified into two kinds;
one is for idiom types and the other is for idiom to-
kens. With the former, phrases that can be inter-
preted as idioms are found in text corpora, typically
for compiling idiom dictionaries. On the other hand,
the latter helps identify a phrase in context as a true
idiom or a phrase that should be interpreted literally
(a literal phrase, henceforth). In this paper, we deal
with the latter, i.e., idiom token identification.
Despite the recent enthusiasm for multiword ex-
pressions (MWEs) (Gre?goire et al, 2007; Gre?goire
et al, 2008), the idiom token identification is in an
early phase of its development. Given that many
NLP tasks like machine translation or parsing have
been developed as a result of the availability of lan-
guage resources, idiom token identification should
also be developed when adequate idiom resources
are provided. To this end, we have constructed a
Japanese idiom corpus. We have also conducted
an idiom identification experiment using the corpus
that we hope will be a good reference point for fu-
ture studies on the task. We drew on a standard
WSD framework with machine learning exploiting
both features commonly used in the WSD studies
and idiom-specific features. This paper reports in
detail the corpus and the result of the experiment;
herein, it must be noted that to the best of our knowl-
edge, the corpus and the experiment are the largest
ever of their kind.
We only deal with the ambiguity between lit-
eral and idiomatic interpretations. However, some
phrases have two or more idiomatic meanings with-
out context. For example, a Japanese idiom te-o
dasu (hand-ACC stretch)1 can be interpreted as ei-
1ACC is the accusative case marker. Likewise we use the
following notation in this paper; NOM for the nominative case
992
ther ?punch,? ?steal? or ?make moves on.? This kind
of ambiguity should be placed on the agenda.
We do not tackle the problem of what constitutes
the notion of ?idiom.? We simply regard phrases
listed in Sato (2007) as idioms.
The reminder of this paper is organized as fol-
lows. In ?2 we present related works. ?3 shows the
target idioms. After the idiom corpus is described
in ?4, we detail our idiom identification method and
experiment in ?5. Finally ?6 concludes the paper.
2 Related Work
There have only been a few works on the con-
struction of an idiom corpus. In this regard, Birke
and Sarkar (2006) and Cook et al (2008) are no-
table exceptions. Birke and Sarkar (2006) auto-
matically constructed a corpus of English idiomatic
expressions (words that can be used non-literally).
They targeted 50 expressions and collected about
6,600 examples. They call the corpus TroFi Exam-
ple Base, which is available on the Web.2 Cook
et al (2008) compiled a corpus of English verb-
noun combinations (VNCs) tokens. Their corpus
deals with 53 VNC expressions and consists of about
3,000 example sentences. Like ours, they assigned
each example with a label indicating whether an ex-
pression in the example is used literally or idiomati-
cally. Our corpus can be regarded as the Japanese
idiom counterpart of these works. However, note
that our corpus targets 146 idioms and consists of
as many as 102,846 example sentences. Another ex-
ception is Tsuchiya et al (2006), who manually con-
structed an example database of Japanese compound
functional expressions named MUST. They provide
it on the Web.3 Some of the compound functional
expressions in Japanese are ambiguous like idioms
are.4
marker, DAT for the dative case marker, and GEN for the genitive
case marker. FROM and TO stand for the Japanese counterparts
of from and to. NEG represents a verbal negation morpheme.
2http://www.cs.sfu.ca/?anoop/students/jbirke/
3http://nlp.iit.tsukuba.ac.jp/must/
4For example, (something)-ni-atatte ((something)-DAT-
run.into) means either ?run into (something)? or ?on the occa-
sion of (something).? The former is the literal interpretation and
the latter is the idiomatic interpretation of the compound func-
tional expression.
The SAID dataset5 provides data about the syn-
tactic flexibility of English idioms. It does not con-
cern itself with idiom token identification. How-
ever, as in Hashimoto et al (2006b), Hashimoto et
al. (2006a) and Cook et al (2007) among others, the
syntactic behavior of idioms is an important clue to
idiom token identification.
Previous studies have mostly focused on the id-
iom type identification (Lin, 1999; Krenn and Evert,
2001; Baldwin et al, 2003; Shudo et al, 2004; Fa-
zly and Stevenson, 2006). However, there has been a
growing interest in idiom token identification in re-
cent times (Katz and Giesbrecht, 2006; Hashimoto
et al, 2006b; Hashimoto et al, 2006a; Birke and
Sarkar, 2006; Cook et al, 2007). Katz and Gies-
brecht (2006) compared the word vector of an id-
iom in context and that of the constituent words of
the idiom using LSA in order to determine if the
expression is idiomatic. Hashimoto et al (2006b)
and Hashimoto et al (2006a) (HSU henceforth) fo-
cused their attention on the differences in gram-
matical constraints imposed on idioms and their lit-
eral counterparts such as the possibility of passiviza-
tion, and developed handcrafted rules for Japanese
idiom identification. Although their task is ex-
actly the same as ours and we draw on the gram-
matical knowledge provided by them, the scale of
their experiment is very small, since only 108 sen-
tences were used for idiom identification in their pa-
per. Further, unlike HSU, we employ matured WSD
technologies. Cook et al (2007) (CFS henceforth)
propose an unsupervised method for English on the
basis of the observation that idioms tend to be ex-
pressed in a small number of fixed forms.
These studies used only the characteristics of id-
ioms (or MWEs). On the other hand, we exploit
a WSD method, for which there have been many
studies and matured technologies, in addition to the
characteristics of idioms. Birke and Sarkar (2006)
also used WSD. However, they employed an unsu-
pervised method, while ours is a completely super-
vised one.
Apart from idioms, Uchiyama et al (2005) con-
ducted the token classification of Japanese com-
pound verbs exploiting supervised method.
5
http://www.ldc.upenn.edu/Catalog/
CatalogEntry.jsp?catalogId=LDC2003T10
993
3 Target Idioms
For this study, we selected 146 idioms through the
following procedure. 1 We extracted basic idioms
from Sato (2007). Sato compiled about 3,600 basic
idioms of Japanese from five books: two dictionaries
for elementary school, two idiom dictionaries, and
one linguistics book on idioms. We extracted those
idioms that were described in more than two of these
five books. The total number of such idioms added
up to 926. 2 From among these idioms, we chose
ambiguous ones.6 As a result, 146 idioms were se-
lected.
As for 2 , sometimes it is not trivial to determine
if an idiom is ambiguous or not. Some idioms are
rarely interpreted literally, while others, in all likeli-
hood, take on the literal meaning. Is it meaningful to
regard them as ambiguous and deal with them in this
study? If not, how does one assuredly distinguish
truly ambiguous idioms from those that are mostly
interpreted either literally or figuratively? This can
only be done if there is an accurate idiom identifica-
tion system.
After all, we asked two native speakers of
Japanese (Group A) to classify idioms into two
classes: 1) truly ambiguous ones and 2) completely
unambiguous or practically unambiguous ones. On
the basis of the classification, one of the authors
made final judgments.
To verify how stable this ambiguity endorsement
was, we asked another two other native speakers
of Japanese (Group B) to perform the same task
and calculated the Kappa statistic between the two
speakers. First, we sampled 101 idioms from the 926
chosen earlier. Then, the two members of Group B
classified the sampled idioms into the two classes.
The Kappa statistic was found to be 0.6576, which
indicates middling stability.
Tables 2 and 3 list some of the target idioms.
4 Idiom Corpus
4.1 Corpus Specification
The corpus is designed for the idiom token iden-
tification task. That is, each example sentence in
the corpus is annotated with a label that indicates
6Some idioms like by and large do not have a literal mean-
ing. They are not dealt with in this paper.
whether the corresponding phrase in the example is
used as an idiom or a literal phrase. We call the for-
mer the positive example and the latter the negative
example. More specifically, the corpus consists of
lines that each represent one example. A line con-
sists of four fields as follows: 1 Label indicates
whether the example is positive or negative. Label i
is used for positive examples and l for negative ones.
2 ID denotes the idiom that is included in the exam-
ple. In this study, each idiom has a unique num-
ber, which is based on Sato (2007). 3 Lemma also
shows the idiom in the example. We assigned each
idiom its canonical (or standard) form on the basis
of Sato (2007). 4 Example is the example itself.
Given below is a sample of a negative example of
goma-o suru (sesame-ACC crush) ?flatter?.
? l 1417 ??? ????? ? ? ?
The third field is the lemma of the idiom. The last
one is the example that says ?crushing sesame in a
mortar...?
Before working on the corpus construction, we
prepared a reference by which human annotators
could consistently distinguish between the literal
and figurative meanings of idioms. To be more pre-
cise, this reference specified literal and idiomatic
meanings for each idiom like dictionaries do. For
example, the entry for goma-o suru in the reference
is as follows.
Idiom: To flatter people.
Literal: To crush sesame.
As for the corpus size, we continued to anno-
tate examples for each idiom, regardless of the pro-
portion of idioms and literal phrases, until the total
number of examples for each idiom reached 1,000.7
In the case of a shortage of original data, we anno-
tated as many examples as possible. The original
data were sourced from the Japanese Web corpus
(Kawahara and Kurohashi, 2006).
4.2 Corpus Construction
We constructed the corpus in the following man-
ner: 1 From the Web corpus, we collected exam-
ple sentences that contained one of our target id-
ioms whichever meaning (positive or negative) they
7For idioms that we sampled for preliminary annotation, we
annotated more than 1,000 examples.
994
 0
 10
 20
 30
 40
 50
 60
 0  500  1000  1500  2000  2500  3000
# 
of
 T
yp
es
# of Examples
Figure 1: Distribution of the number of examples
take on. Concretely speaking, we automatically col-
lected sentences in which constituent words of one
of our targets appeared in a canonical dependency
relationship by using KNP8, a Japanese dependency
parser. 2 We classified the collected examples as
positive and negative. This was done by human an-
notators and was based on the reference to distin-
guish the two meanings. For annotation, longer ex-
amples were given higher priority than shorter ex-
amples. Note that we discarded examples that were
collected by mistake due to dependency parsing er-
rors and those that lacked a context that could help
them be interpreted correctly.
This was done by the two members of Group A
and took 230 hours.
4.3 Status of Corpus
The corpus consists of 102,846 examples.9 Figure
1 shows the distribution of the number of examples.
For 68 idioms, we annotated more than 1,000 exam-
ples. However, we annotated less than 100 examples
for 17 idioms because of inadequate original data.
The average number of words in a sentence is 46.
Idiom in Figure 2 shows the distribution of sen-
tence length (the number of words) in the corpus.
Web and News indicate the sentence length in the
Web and a newspaper corpora, respectively. This is
drawn from Kawahara and Kurohashi (2006). As
8http://nlp.kuee.kyoto-u.ac.jp/nl-resource/knp.html
9Note that the figures reported here are for the corpus of the
2008-06-25 version and will be slightly changed over time.
 0
 0.05
 0.1
 0.15
 0.2
 0.25
 0.3
76-8071-7566-7061-6556-6051-5546-5041-4536-4031-3526-3021-2516-2011-156-101-5
S
en
te
nc
e 
R
at
io
# of Words in a Sentence
Web
News
Idiom
Figure 2: Distribution of sentence length
you see, our corpus contains many more long sen-
tences. This is because longer sentences were given
priority for annotation, as stated in ?4.2. Figure 3
shows the longest and shortest examples each for lit-
eral and idiomatic meanings of goma-o suru drawn
from the corpus.
To determine how consistent the positive/negative
annotation is across different human annotators, we
sampled 1,421 examples from the corpus, asked the
two members of Group B to do the same annota-
tion, and calculated the Kappa statistic between the
two. The value was 0.8519, which indicates very
high agreement.
The corpus is available on the Web.10 Currently
we provide the list of the basic Japanese idioms we
are dealing with, the idiom corpus, and the vector
representation data used for the idiom identification
experiment. The corpus is protected under the BSD
license.
5 Idiom Identification Experiment
5.1 Method of Idiom Identification
We adopted a standard WSD method using machine
learning. More specifically, we used SVM (Vap-
nik, 1995) with a quadratic kernel implemented in
TinySVM.11 The features we used are classified into
either those that have been commonly used in WSD
on the lines of Lee and Ng (2002) (LN hereafter),
10http://openmwe.sourceforge.jp/
11http://www.chasen.org/?taku/software/TinySVM/
995
? ????????????????????????????????????????
????????????????????????????????????????
?????????????????????????????????????????
????? ??? ???????????????????????????
????????????????????????????????????
(But I suspect that the show managers of IT ventures will remain sly and audacious, and survive
by flattering manufacturers, bending over themselves to accede to the demands of governmental
agencies, and talking glibly about buzz terms, without intelligence but with vitality, just like
the brokers of prostitutes in the Edo period were, because Gresham?s law of 1562 says that any
circulating currency consisting of both good and bad money quickly becomes dominated by the
bad money.)
? ? ??? ???????
(Just like a pretty official flattering his boss.)
? ?????????????????????????????????????? ?
?? ?????????????????????????????????????
???????????????????????????????
(In order to mash boiled soybeans, it is the best to use a meat chopper, but if you don?t have one,
use the thing to crush sesame, or put them into a plastic bag, cover it with a towel, then mash it
with a glass bottle, which is easier.)
? ??? ????
(Crushing sesame, then adding seasonings to it.)
Figure 3: The longest and shortest examples for both literal and idiomatic meanings of goma-o suru
or those that have been designed for Japanese idiom
identification proposed by HSU.12
? Common WSD Features
f1: POS of three words on the left side of idiom
and three words on the right side
f2: Local collocations
f3: Single words in the surrounding context
f4a: Lemma of the rightmost word among
those words that are the dependents of the
leftmost constituent word of idiom13
f4b: POS of the rightmost word among those
words that are the dependents of the left-
most constituent word of idiom
f5a: Lemma of the word which the rightmost
constituent word of idiom is the dependent
of
12Remember that HSU implemented them in handcrafted
rules. We adapted them to a machine learning framework.
13Note that Japanese is a head final language.
f5b: POS of the word which the rightmost con-
stituent word of idiom is the dependent of
f6: Hypernyms of words in the surrounding
context
f7: Domains of words (Hashimoto and Kuro-
hashi, 2007; Hashimoto and Kurohashi,
2008) in the surrounding context
? Idiom-Specific Features
f8: Adnominal modification flag
f9: Topic case marking flag
f10: Voice alternation flag
f11: Negation flag
f12: Volitional modality flag
f13: Adjacency flag
We used JUMAN,14 a morphological analyzer of
Japanese, and KNP to extract these features.
14http://nlp.kuee.kyoto-u.ac.jp/nl-resource/juman.html
996
f2 and f3 are the same as those described in LN.
But f1 is slightly different in that we did not use the
P0 of LN. f4 and f5 roughly correspond to the syn-
tactic relations of LN. We adapted it to Japanese id-
ioms along with some simplifications. In the case of
the example ofmune-o utu (chest-ACC hit) ?impress?
below,15 f4 is the POS and lemma of tyousyu and f5
corresponds to those of uta.16
? tyousyu-no
audience-GEN
mune-o
chest-ACC
utu
hit
utukusi
beautiful
uta
song
?A beautiful song that impresses the audience?
f6 and f7 are available from JUMAN?s output.
For example, the hypernym of tyousyu (audience)
is human and its domain is culture/media.
Those of uta (song) are abstract-thing and
culture/recreation. They are not used in
LN, but they are known to be useful for WSD
(Tanaka et al, 2007; Magnini et al, 2002).
f8 indicates whether a nominal constituent of an
idiom, if any, undergoes adnominal modification. f9
indicates whether one of Japanese topic case mark-
ers is attached to a nominal constituent of an idiom,
if any. f10 is turned on when a passive or causative
suffix is attached to a verbal constituent of an idiom,
if any.17 f11 and f12 are similar to f10. The former
is used for negated forms and the latter for volitional
modality suffixes of a predicate part of an idiom, if
any.18 Volitional modality includes expressions like
order, request, permission, prohibition, and volition.
Finally, f13 indicates whether the constituents of an
idiom is adjacent to each other.
As discussed in HSU, the idiom-specific fea-
tures are effective to distinguish idioms from lit-
eral phrases. For example, the idiom goma-o suru
does not allow adnominal modification, while its lit-
eral counterpart does. Similarly, the idiom mune-o
utu cannot take volitional modality unlike its literal
counterpart.
15The arrows indicate dependency relations.
16Functional words attaching to either the f4 word or the f5
word are ignored. In the example, no (GEN) is ignored.
17Passivization is indicated by the suffix (r)are in Japanese.
But the same suffix is also used for honorification, potentials
and spontaneous potentials. Since it is beyond the current tech-
nology, we gave up distinguishing them.
18Note that f10, f11 and f12 are applied to only those idioms
that can be used as predicates.
5.2 Experimental Condition
In the experiment, we dealt with 90 idioms for which
more than 50 examples for both idiomatic and literal
usages were available.19 We conducted experiments
for each idiom.
The performance measure is the accuracy.
Accuracy =
# of examples correctly identified
# of all example
The baseline system uniformly regards all ex-
amples as either positive or negative depending on
which is more dominant in the idiom corpus. Natu-
rally, this is prepared for each idiom.
Baseline =
max(# of positive, # of negative)
# of all example
The accuracy and the baseline accuracy for each
idiom are calculated in a 10-fold cross validation
style; we split examples of an idiom into 10 pieces
in advance of the experiment.
Also, we calculated the overall accuracy and
baseline accuracy from the individual results. We
summed up all accuracy scores of all the 90 idioms
and then divided it by 90, which is called the macro-
average. We did this for the baseline accuracy, too.
Another performance measure is the relative error
reduction (RER).20
RER =
ER of baseline ? ER of system
ER of baseline
The overall RER is calculated from the overall ac-
curacy and baseline by the above formula.
5.3 Experimental Result
Table 1 shows the overall performance. The first col-
umn is the baseline accuracy (%). The second col-
umn is the accuracy (%) and relative error reduction
(%) of the system without the idiom-specific fea-
tures. The third column is those of the system with
the idiom features. Tables 2 and 3 show the individ-
ual results of the 90 idioms. The first column shows
19Some examples were unavailable due to the feature extrac-
tion failure. Thus, examples used for the experiment are fewer
in number than those included in the corpus.
20ER stands for Error Rate in the formula.
997
Table 2: Individual Results (1/2)
Type Base (Pos ; Neg) w/o I (RER) w/ I (RER)
??? (blue.vein-ACC emerge) ?burst a blood vessel? 83.38 (286 ; 57) 86.32 (17.68) 86.61 (19.45)
??? (sit cross-legged) ?rest on one?s laurels? 62.45 (587 ; 353) 92.66 (80.45) 92.87 (81.02)
?? (leg-NOM attach) ?find a clue to solving a case? 72.21 (184 ; 478) 77.20 (17.96) 79.62 (26.68)
?? (leg-NOM go.out) ?run over the budget? 77.59 (188 ; 651) 92.61 (67.01) 93.08 (69.13)
??? (one?s feet-ACC look.down) ?see someone coming? 57.53 (420 ; 310) 85.89 (66.77) 85.75 (66.45)
?? (leg-ACC wash) ?wash one?s hands of ...? 68.47 (632 ; 291) 92.65 (76.68) 92.65 (76.69)
??? (leg-ACC stretch) ?go a little further? 80.24 (727 ; 179) 95.26 (76.03) 95.38 (76.59)
?? (head-NOM ache) ?harass oneself about ...? 57.87 (158 ; 217) 83.94 (61.89) 83.94 (61.89)
??? (head-ACC fold) ?tear one?s hair out? 87.28 (796 ; 116) 91.35 (31.99) 91.35 (31.99)
??? (head-ACC lift) ?rear its head? 83.14 (804 ; 163) 93.40 (60.83) 93.50 (61.45)
?? (fat-NOM put.on) ?warm up to one?s work? 83.69 (196 ; 1006) 92.94 (56.69) 92.94 (56.69)
?? (oil-ACC sell) ?shoot the breeze? 86.67 (507 ; 78) 92.63 (44.70) 92.63 (44.70)
?? (oil-ACC squeeze) ?rake someone over the coals? 66.83 (69 ; 139) 84.64 (53.71) 86.14 (58.23)
?? (net-ACC spread) ?wait expectantly? 70.10 (366 ; 858) 81.28 (37.41) 80.96 (36.31)
??? (breath-NOM choke.up) ?stifling? 71.61 (681 ; 270) 79.82 (28.91) 79.50 (27.80)
??? (one-FROM ten-TO) ?all without exception? 92.00 (770 ; 67) 93.48 (18.51) 93.48 (18.51)
?? (color-ACC lose) ?turn pale? 73.32 (262 ; 720) 84.23 (40.91) 84.23 (40.91)
??? (arm-NOM go.up) ?develop one?s skill? 57.06 (481 ; 362) 84.47 (63.85) 88.75 (73.80)
?? (tail-ACC pull) ?have a lasting effect? 87.72 (843 ; 118) 93.14 (44.15) 93.35 (45.84)
?? (face-ACC present) ?show up? 84.48 (697 ; 128) 88.60 (26.49) 88.82 (27.93)
??? (shoulder-ACC juxtapose) ?on a par? 89.38 (842 ; 100) 93.20 (35.97) 93.10 (34.97)
??? (corner-NOM remove) ?become mature? 57.45 (370 ; 274) 78.35 (49.13) 78.04 (48.39)
?? (lip-ACC bite) ?bite one?s lip? 70.89 (587 ; 241) 78.40 (25.78) 79.36 (29.10)
?? (mouth-ACC cut) ?break the ice? 51.50 (210 ; 223) 84.83 (68.73) 83.69 (66.36)
???? (mouth-ACC sharpen) ?pout? 86.33 (663 ; 105) 87.61 (9.40) 87.35 (7.47)
??? (neck-NOM turn-NEG) ?up to one?s neck? 66.63 (619 ; 310) 86.41 (59.28) 86.22 (58.71)
?? (neck-ACC cut) ?give the axe? 53.90 (449 ; 384) 89.93 (78.15) 89.80 (77.88)
??? (neck-ACC twist) ?think hard? 93.16 (885 ; 65) 94.11 (13.85) 93.79 (9.23)
??? (thing-DAT depend) ?perhaps? 67.15 (231 ; 113) 96.50 (89.35) 97.35 (91.94)
??? (sesame-ACC crush) ?flatter? 50.29 (87 ; 88) 92.75 (85.42) 90.99 (81.88)
??? (back-ACC train) ?turn one?s back? 66.70 (597 ; 298) 89.06 (67.14) 89.06 (67.14)
?? (blood-NOM flow) ?humane? 50.18 (422 ; 419) 82.41 (64.70) 83.24 (66.37)
?? (midair-DAT float) ?? 58.07 (382 ; 529) 88.03 (71.46) 88.69 (73.03)
?? (dirt-NOM attach) ?be defeated in sumo wrestling? 72.66 (70 ; 186) 79.48 (24.97) 78.76 (22.33)
?? (hand-NOM reach) ?afford? ?reach an age? ?attentive? 80.76 (470 ; 112) 87.66 (35.85) 87.66 (35.85)
?? (hand-NOM there.isn?t) ?have no remedy? 86.94 (799 ; 120) 92.61 (43.38) 92.83 (45.06)
??? (hand-NOM get.away) ?get one?s work done? 53.49 (360 ; 414) 92.37 (83.59) 92.36 (83.57)
?? (hand-DAT ride) ?fall into someone?s trap? 61.05 (372 ; 583) 92.86 (81.68) 93.49 (83.30)
??? (hand-DAT insert) ?obtain? 53.21 (373 ; 328) 93.44 (85.99) 93.59 (86.29)
??? (hand-ACC hang) ?give a lot of care? 70.57 (241 ; 578) 91.19 (70.04) 91.31 (70.46)
?? (hand-ACC cut) ?break away? 57.85 (468 ; 341) 91.08 (78.83) 91.08 (78.83)
?? (hand-ACC take) ?give every possible help (to learn)? 88.89 (91 ; 728) 92.74 (34.67) 92.62 (33.56)
?? (hand-ACC grasp) ?conclude an alliance? 90.51 (73 ; 696) 95.44 (51.93) 95.17 (49.16)
??? (hand-ACC stretch) ?extend one?s business? 89.55 (95 ; 814) 94.01 (42.69) 94.22 (44.72)
??? (hand-ACC open.up) ?extend one?s business? 70.52 (579 ; 242) 89.17 (63.26) 90.15 (66.57)
?? (hand-ACC turn) ?take measures? 68.86 (246 ; 544) 93.04 (77.64) 93.92 (80.49)
?? (mountain.pass-ACC go.over) ?get over the hump? 72.18 (685 ; 264) 89.28 (61.46) 89.49 (62.23)
?? (mud-ACC daub) ?drag someone through mud? 74.38 (543 ; 187) 91.64 (67.38) 91.92 (68.45)
?? (wave-DAT ride) ?catch a wave? 86.23 (783 ; 125) 93.05 (49.55) 92.94 (48.74)
??? (heat-NOM get.cool) ?fever goes down? 89.90 (890 ; 100) 92.02 (21.00) 92.22 (23.00)
??? (heat-ACC raise) ?go ape? 92.52 (903 ; 73) 94.50 (26.45) 94.71 (29.21)
??? (heat-ACC feed.in) ?enthuse? 85.06 (723 ; 127) 90.71 (37.80) 91.76 (44.88)
??? (root-ACC take.down) ?take root? 85.83 (824 ; 136) 93.23 (52.21) 93.23 (52.21)
?? (root-ACC spread) ?take root? 60.00 (564 ; 376) 87.66 (69.15) 87.66 (69.15)
???? (bus-DAT miss) ?miss the boat? 76.97 (199 ; 665) 90.50 (58.74) 92.36 (66.81)
???? (baton-ACC give) ?have someone succeed his position? 65.33 (471 ; 250) 81.70 (47.23) 82.25 (48.81)
??? (nasal.breathing-NOM heavy) ?full of big talk? 52.77 (286 ; 256) 75.33 (47.77) 76.62 (50.50)
??? (nose-NOM high) ?proud? 50.27 (659 ; 652) 81.01 (61.81) 82.30 (64.42)
??? (nose-ACC break) ?humble (someone)? 56.60 (69 ; 90) 69.58 (29.91) 74.92 (42.20)
??? (nose-ACC make.a.sound) ?make light of ...? 55.72 (536 ; 426) 80.79 (56.63) 81.21 (57.57)
???? (belly-ACC cut) ?have a heart-to-heart talk? 95.62 (1265 ; 58) 96.68 (24.16) 96.68 (24.16)
????? (teeth-ACC clench) ?grit one?s teeth? 65.54 (194 ; 102) 71.97 (18.66) 71.63 (17.66)
?? (human-ACC eat) ?look down on someone? 74.95 (727 ; 243) 87.01 (48.15) 87.01 (48.15)
???? (spark-ACC spread) ?fight heatedly? 75.99 (728 ; 230) 89.57 (56.56) 89.68 (57.00)
998
Table 3: Individual Results (2/2)
Type Base (Pos ; Neg) w/o I (RER) w/ I (RER)
??? (painting.brush-ACC add) ?correct (writings or paintings)? 75.80 (213 ; 68) 83.99 (33.84) 84.70 (36.79)
??? (ship-ACC row) ?nod? 50.76 (167 ; 162) 75.82 (50.88) 76.37 (52.01)
???? (bone-NOM break) ?have difficulty? 62.30 (575 ; 348) 94.14 (84.46) 94.14 (84.47)
???? (bone-ACC bury) ?make it one?s final home? 82.82 (757 ; 157) 89.84 (40.85) 90.60 (45.31)
???? (bone-ACC break) ?make efforts? 60.89 (350 ; 545) 92.74 (81.43) 92.96 (82.01)
???? (curtain-NOM open) ?start? 55.64 (533 ; 425) 86.32 (69.17) 86.22 (68.94)
??? (right-FROM left) ?passing through without staying? 73.88 (794 ; 2246) 89.90 (61.34) 89.87 (61.21)
?? (water-AND oil) ?oil and water? 55.66 (1053 ; 839) 83.19 (62.10) 85.84 (68.07)
??? (water-DAT flush) ?forgive and forget? 67.08 (652 ; 320) 85.91 (57.19) 89.40 (67.81)
??? (body-DAT put.on) ?learn? 90.29 (725 ; 78) 96.51 (64.11) 96.39 (62.82)
??? (ear-NOM ache) ?make one?s ears burn? 59.49 (333 ; 489) 88.69 (72.08) 89.54 (74.19)
??? (ear-DAT insert) ?get word of ...? 74.89 (501 ; 168) 89.50 (58.20) 90.38 (61.67)
???? (fruit-ACC bear) ?bear fruit? 89.39 (826 ; 98) 95.79 (60.33) 95.68 (59.31)
??? (chest-NOM ache) ?suffer heartache? 93.59 (876 ; 60) 95.82 (34.78) 95.93 (36.46)
???? (chest-NOM expand) ?feel one?s heart leap? 55.58 (338 ; 423) 94.08 (86.68) 94.48 (87.57)
???? (chest-ACC hit) ?impress? 92.39 (801 ; 66) 96.45 (53.34) 96.68 (56.39)
??? (germ-NOM come.out) ?close to making the top? 56.57 (377 ; 491) 91.33 (80.03) 91.55 (80.55)
?? (eye-NOMthere.isn?t) ?have a passion for ...? 91.81 (829 ; 74) 95.70 (47.47) 95.25 (42.05)
??? (scalpel-ACC insert) ?take drastic measures? 88.96 (741 ; 92) 96.28 (66.30) 96.28 (66.30)
?? (eye-DAT enter) ?catch sight of ...? 84.76 (623 ; 112) 90.22 (35.79) 91.16 (41.97)
??? (eye-ACC cover) ?be in a shambles? 87.24 (725 ; 106) 91.45 (32.99) 92.06 (37.72)
??? (eye-ACC awake) ?snap out of ..? 83.26 (118 ; 587) 87.92 (27.85) 88.64 (32.12)
??? (eye-ACC close) ?turn a blind eye? 70.13 (533 ; 227) 90.26 (67.40) 90.26 (67.40)
???? (eye-ACC thin) ?one?s eyes light up? 53.44 (115 ; 132) 75.20 (46.74) 75.11 (46.54)
???? (finger-ACC suck) ?look enviously? 92.50 (876 ; 71) 95.68 (42.41) 95.58 (41.09)
??? (bow-ACC draw) ?defy? 88.06 (138 ; 1018) 95.51 (62.41) 95.43 (61.68)
Table 1: Overall Result
Base w/o I (RER) w/ I (RER)
72.92 88.86 (58.87) 89.25 (60.30)
the target idioms. The second column shows base-
line accuracy (%) and the numbers of positive and
negative examples for each idiom. The accuracy (%)
and relative error reduction (%) of the system with-
out the idiom-specific features are described in the
third column. The fourth column is those of the sys-
tem with the idiom features. Bold face indicates a
better performance.
All in all, we see relatively high baseline perfor-
mances. Nevertheless, both systems outperformed
the baseline. Especially, the system without the
idiom-specific features has a noticeable lead over the
baseline, showing that WSD technologies are effec-
tive in the idiom identification. Incorporating the id-
iom features into the system improved the overall
performance, which is statistically significant (Mc-
Nemar test, p<0.01). But performances of some id-
ioms slightly degraded by the incorporation of the
idiom features.
Table 4: Overall Results without Using One of the Idiom
Features
Feature Type Acc
All 89.25
?f8 (w/o Adnominal modification flag) 89.24
?f9 (w/o Topic case marking flag) 89.22
?f10 (w/o Voice alternation flag) 89.15
?f11 (w/o Negation flag) 89.17
?f12 (w/o Volitional modality flag) 89.19
?f13 (w/o Adjacency flag) 89.09
Table 4 shows overall results without using one of
the idiom features.21 As you see, the adjacency flag
(f13) contributes to idiom identification accuracy the
most.22 On the other hand, the adnominal modifica-
tion flag (f8) contributes to the task only slightly.23
21The first row shows the result with all idiom features used,
just for ease of reference.
22Note that greater performance drop indicates greater con-
tribution.
23This result is inconsistent with the result obtained in HSU,
where they reported that grammatical constraints involving ad-
nominal modification was most effective. This inconsistency
might be attributed to the differences of datasets being used for
idiom identification experiment. HSU used only 108 sentences
999
Table 5: Results reported in CFS
Accu RER
Baseline 61.9 ?
Unsupervised 72.4 27.6
Supervised 76.2 37.5
Table 5 shows the results reported in CFS. Their
baseline system regards all instances as idioms. The
performance of the supervised one is obtained by the
method of Katz and Giesbrecht (2006). Though we
cannot simply compare this with our results due to
the difference in experimental conditions, this im-
plies that our WSD-based method was equally good
or possibly better than their methods that are tailored
to MWEs.
6 Conclusion
In this paper, we reported on the idiom corpus we
have constructed and the idiom identification exper-
iment using the corpus.
As mentioned in ?4.3, some idioms are short of
examples in the current idiom corpus. We plan to
collect more examples by using different characters.
In the Japanese language, there are basically three
character systems: Hiragana, Katakana, and Chinese
characters. Thus, you can write an idiom in different
characters. For example, mune-o utu (chest-ACC hit)
?impress? can be either???? or??? .
In spite of its imperfection, we are sure that we
can learn a lot about the idiom identification from
the corpus, since, as far as we know, it is the largest-
ever one, and so is the idiom identification experi-
ment reported in ?5.
Also, we showed that a standard supervised WSD
method works well for the idiom identification.
Our system achieved the accuracy of 89.25% and
88.86% with/without idiom-specific features.
Though we dealt with as many as 90 idioms, prac-
tical NLP systems are required to deal with many
more idioms. Toward a scalable idiom identifica-
tion, we have to develop an unsupervised or semi-
supervised method. The unsupervised method of
for the experiment, while 75,011 sentences were used for our
experiment. Also, the dataset of HSU came from newspaper
articles, while our dataset came from the web.
Birke and Sarkar (2006) requires WordNet. Fortu-
nately, the Japanese WordNet is now available (Isa-
hara et al, 2008), thus we can try their method.
Also, CFS propose a language-independent unsu-
pervised method. These could be of help.
At any rate, our idiom corpus will play an im-
portant role in the development of unsupervised or
semi-supervised methods, and the experimental re-
sults obtained in this study will be a good reference
point to evaluate those methods.
Acknowledgments
This work was conducted as a part of the collabora-
tive research project of Kyoto University and NTT
Communication Science Laboratories.
The work was supported from NTT Communica-
tion Science Laboratories and JSPS Grants-in-Aid
for Young Scientists (B) 19700141.
We would like to thank the members of the collab-
orative research group of Kyoto University and NTT
Communication Science Laboratories and Francis
Bond for their stimulating discussion. Our thanks
go as well to Prof. Sato Satoshi, who kindly gave us
the list of basic idioms of Japanese.
References
Timothy Baldwin, Colin Bannard, Takaaki Tanaka, and
Dominic Widdows. 2003. An empirical model of
multiword expression decomposability. In Proceed-
ings of the ACL 2003 workshop on Multiword expres-
sions, pages 89?96.
Julia Birke and Anoop Sarkar. 2006. A clustering
approach for the nearly unsupervised recoginition of
nonliteral language. In Proceedings of the 11th Con-
ference of the European Chapter of the Association for
Computational Linguistics (EACL 2006), pages 329?
336.
Paul Cook, Afsaneh Fazly, and Suzanne Stevenson.
2007. Pulling their weight: Exploiting syntactic forms
for the automatic identification of idiomatic expres-
sions in context. In Proceedings of the ACL 2007
Workshop on A Broader Perspective on Multiword Ex-
pressions, pages 41?48.
Paul Cook, Afsaneh Fazly, and Suzanne Stevenson.
2008. The VNC-Tokens Dataset. In Proceedings of
the LREC Workshop Towards a Shared Task for Multi-
word Expressions (MWE2008), pages 19?22.
Afsaneh Fazly and Suzanne Stevenson. 2006. Automat-
ically constructing a lexicon of verb phrase idiomatic
combinations. In Proceedings of the 11th Conference
1000
of the European Chapter of the Association for Com-
putational Linguistics (EACL-2006), pages 337?344.
Nicole Gre?goire, Stefan Evert, and Su Nam Kim, editors.
2007. Proceedings of the Workshop on A Broader Per-
spective on Multiword Expressions. Association for
Computational Linguistics, Prague.
Nicole Gre?goire, Stefan Evert, and Brigitte Krenn, edi-
tors. 2008. Proceedings of the LREC Workshop To-
wards a Shared Task for Multiword Expressions. ACL
Special Interest Group on the Lexicon (SIGLEX),
Marrakech.
Chikara Hashimoto and Sadao Kurohashi. 2007. Con-
struction of Domain Dictionary for Fundamental Vo-
cabulary. In Proceedings of the 45th Annual Meet-
ing of the Association for Computational Linguistics
(ACL?07) Poster, pages 137?140.
Chikara Hashimoto and Sadao Kurohashi. 2008. Blog
Categorization Exploiting Domain Dictionary and Dy-
namically Estimated Domains of Unknown Words. In
Proceedings of the 46th Annual Meeting of the Asso-
ciation for Computational Linguistics (ACL?08) Short
paper, Poster, pages 69?72.
Chikara Hashimoto, Satoshi Sato, and Takehito Utsuro.
2006a. Detecting Japanese idioms with a linguistically
rich dictionary. Language Resources and Evaluation,
40(3?4):243?252.
Chikara Hashimoto, Satoshi Sato, and Takehito Utsuro.
2006b. Japanese Idiom Recognition: Drawing a Line
between Literal and Idiomatic Meanings. In The Joint
21st International Conference on Computational Lin-
guistics and 44th Annual Meeting of the Association
for Computational Linguistics (COLING/ACL 2006)
Poster, pages 353?360, Sydney, July.
Hitoshi Isahara, Francis Bond, Kiyotaka Uchimoto,
Masao Utiyama, and Kyoko Kanzaki. 2008. Devel-
opment of the Japanese WordNet. In The sixth inter-
national conference on Language Resources and Eval-
uation (LREC2008).
Graham Katz and Eugenie Giesbrecht. 2006. Auto-
matic identification of non-compositional multi-word
expressions using latent semantic analysis. In Pro-
ceedings of the Workshop, COLING/ACL 2006, Multi-
word Expressions: Identifying and Exploiting Under-
lying Properties, pages 12?19, July.
Daisuke Kawahara and Sadao Kurohashi. 2006.
Case Frame Compilation from the Web using High-
Performance Computing. In Proceedings of The 5th
International Conference on Language Resources and
Evaluation (LREC-06), pages 1344?1347.
Brigitte Krenn and Stefan Evert. 2001. Can we do better
than frequency? a case study on extracting pp-verb
collocations. In Proceedings of the ACL-01 Workshop
on Collocations, pages 39?46.
Yoong Keok Lee and Hwee Tou Ng. 2002. An empir-
ical evaluation of knowledge sources and learning al-
gorithms for word sense disambiguation. In EMNLP
?02: Proceedings of the ACL-02 conference on Em-
pirical methods in natural language processing, pages
41?48.
Dekang Lin. 1999. Automatic identification of non-
compositional phrases. In Proceeding of the 37th An-
nual Meeting of the Association for Computational
Linguistics, pages 317?324.
BernardoMagnini, Carlo Strapparava, Giovanni Pezzulo,
and Alfio Gliozzo. 2002. The Role of Domain Infor-
mation in Word Sense Disambiguation. Natural Lan-
guage Engineering, special issue on Word Sense Dis-
ambiguation, 8(3):359?373.
Satoshi Sato. 2007. Compilation of a comparative list
of basic Japanese idioms from five sources. In IPSJ
2007-NL-178, pages 1?6. (in Japanese).
Kosho Shudo, Toshifumi Tanabe, Masahito Takahashi,
and Kenji Yoshimura. 2004. MWEs as Non-
propositional Content Indicators. In the 2nd ACL
Workshop on Multiword Expressions: Integrating Pro-
cessing, pages 32?39.
Takaaki Tanaka, Francis Bond, Timothy Baldwin, Sanae
Fujita, and Chikara Hashimoto. 2007. Word Sense
Disambiguation Incorporating Lexical and Structural
Semantic Information. In Proceedings of the 2007
Joint Conference on Empirical Methods in Natu-
ral Language Processing and Computational Natu-
ral Language Learning (EMNLP-CoNLL), pages 477?
485.
Masatoshi Tsuchiya, Takehito Utsuro, Suguru Mat-
suyoshi, Satoshi Sato, and Seiichi Nakagawa. 2006.
Development and analysis of an example database of
Japanese compound functional expressions. Trans-
actions of Information Processing Society of Japan,
47(6):1728?1741. (in Japanese).
Kiyoko Uchiyama, Timothy Baldwin, and Shun Ishizaki.
2005. Disambiguating Japanese compound verbs.
Computer Speech and Language, Special Issue on
Multiword Expressions, 19(4):497?512.
Vladimir Vapnik. 1995. The Nature of Statistical Learn-
ing Theory. Springer-Verlag, New York.
1001
TSUBAKI: An Open Search Engine Infrastructure for
Developing New Information Access Methodology
Keiji Shinzato?, Tomohide Shibata?, Daisuke Kawahara?,
Chikara Hashimoto?? and Sadao Kurohashi?
?Graduate School of Informatics, Kyoto University
?National Institute of Information and Communications Technology
??Department of Informatics, Yamagata University
{shinzato, shibata, kuro}@nlp.kuee.kyoto-u.ac.jp
dk@nict.go.jp ch@yz.yamagata-u.ac.jp
Abstract
As the amount of information created by
human beings is explosively grown in the
last decade, it is getting extremely harder
to obtain necessary information by conven-
tional information access methods. Hence,
creation of drastically new technology is
needed. For developing such new technol-
ogy, search engine infrastructures are re-
quired. Although the existing search engine
APIs can be regarded as such infrastructures,
these APIs have several restrictions such as a
limit on the number of API calls. To help the
development of new technology, we are run-
ning an open search engine infrastructure,
TSUBAKI, on a high-performance comput-
ing environment. In this paper, we describe
TSUBAKI infrastructure.
1 Introduction
As the amount of information created by human be-
ings is explosively grown in the last decade (Uni-
versity of California, 2003), it is getting extremely
harder to obtain necessary information by con-
ventional information access methods, i.e., Web
search engines. This is obvious from the fact that
knowledge workers now spend about 30% of their
day on only searching for information (The Del-
phi Group White Paper, 2001). Hence, creation of
drastically new technology is needed by integrating
several disciplines such as natural language process-
ing (NLP), information retrieval (IR) and others.
Conventional search engines such as Google and
Yahoo! are insufficient to search necessary informa-
tion from the current Web. The problems of the con-
ventional search engines are summarized as follows:
Cannot accept queries by natural language sen-
tences: Search engine users have to represent their
needs by a list of words. This means that search
engine users cannot obtain necessary information if
they fail to represent their needs into a proper word
list. This is a serious problem for users who do not
utilize a search engine frequently.
Cannot provide organized search results: A
search result is a simple list consisting of URLs,
titles and snippets of web pages. This type of re-
sult presentation is obviously insufficient consider-
ing explosive growth and diversity of web pages.
Cannot handle synonymous expressions: Exist-
ing search engines ignore a synonymous expression
problem. Especially, since Japanese uses three kinds
of alphabets, Hiragana, Katakana and Kanji, this
problem is more serious. For instance, although both
Japanese words ????? and ???? mean child,
the search engines provide quite different search re-
sults for each word.
We believe that new IR systems that overcome the
above problems give us more flexible and com-
fortable information access and that development
of such systems is an important and interesting re-
search topic.
To develop such IR systems, a search engine in-
frastructure that plays a low-level layer role (i.e., re-
trieving web pages according to a user?s query from
a huge web page collection) is required. The Appli-
cation Programming Interfaces (APIs) provided by
189
commercial search engines can be regarded as such
search engine infrastructures. The APIs, however,
have the following problems:
1. The number of API calls a day and the num-
ber of web pages included in a search result are
limited.
2. The API users cannot know how the acquired
web pages are ranked because the ranking mea-
sure of web pages has not been made public.
3. It is difficult to reproduce previously-obtained
search results via the APIs because search en-
gine?s indices are updated frequently.
These problems are an obstacle to develop new IR
systems using existing search engine APIs.
The research project ?Cyber Infrastructure for the
Information-explosion Era1? gives researchers sev-
eral kinds of shared platforms and sophisticated
tools, such as an open search engine infrastructure,
considerable computational environment and a grid
shell software (Kaneda et al, 2002), for creation of
drastically new IR technology. In this paper, we de-
scribe an open search engine infrastructure TSUB-
AKI, which is one of the shared platforms devel-
oped in the Cyber Infrastructure for the Information-
explosion Era project. The overview of TSUBAKI is
depicted in Figure 1. TSUBAKI is built on a high-
performance computing environment consisting of
128 CPU cores and 100 tera-byte storages, and it
can provide users with search results retrieved from
approximately 100 million Japanese web pages.
The mission of TSUBAKI is to help the develop-
ment of new information access methodology which
solves the problems of conventional information ac-
cess methods. This is achieved by the following
TSUBAKI?s characteristics:
API without any restriction: TSUBAKI pro-
vides its API without any restrictions such as the
limited number of API calls a day and the number
of results returned from an API per query, which are
the typical restrictions of the existing search engine
APIs. Consequently, TSUBAKI API users can de-
velop systems that handle a large number of web
pages. This feature is important for dealing with the
Web that has the long tail aspect.
1http://i-explosion.ex.nii.ac.jp/i-explosion/ctr.php/m/Inde-
xEng/a/Index/
	







 	
Proceedings of the ACL 2007 Demo and Poster Sessions, pages 137?140,
Prague, June 2007. c?2007 Association for Computational Linguistics
Construction of Domain Dictionary for Fundamental Vocabulary
Chikara Hashimoto
Faculty of Engineering,
Yamagata University
4-3-16 Jonan, Yonezawa-shi, Yamagata,
992-8510 Japan
Sadao Kurohashi
Graduate School of Informatics,
Kyoto University
36-1 Yoshida-Honmachi, Sakyo-ku, Kyoto,
606-8501 Japan
Abstract
For natural language understanding, it is es-
sential to reveal semantic relations between
words. To date, only the IS-A relation
has been publicly available. Toward deeper
natural language understanding, we semi-
automatically constructed the domain dic-
tionary that represents the domain relation
between Japanese fundamental words. This
is the first Japanese domain resource that is
fully available. Besides, our method does
not require a document collection, which is
indispensable for keyword extraction tech-
niques but is hard to obtain. As a task-based
evaluation, we performed blog categoriza-
tion. Also, we developed a technique for es-
timating the domain of unknown words.
1 Introduction
We constructed a lexical resource that represents the
domain relation among Japanese fundamental words
(JFWs), and we call it the domain dictionary.1 It
associates JFWs with domains in which they are typ-
ically used. For example,
 
home run is
associated with the domain SPORTS2 . That is, we
aim to make explicit the horizontal relation between
words, the domain relation, while thesauri indicate
the vertical relation called IS-A.3
1In fact, there have been a few domain resources in Japanese
like Yoshimoto et al (1997). But they are not publicly available.
2Domains are CAPITALIZED in this paper.
3The lack of the horizontal relationship is also known as the
?tennis problem? (Fellbaum, 1998, p.10).
2 Two Issues
You have to address two issues. One is what do-
mains to assume, and the other is how to associate
words with domains without document collections.
The former is paraphrased as how people cate-
gorize the real world, which is really a hard prob-
lem. In this study, we avoid being too involved in
the problem and adopt a simple domain system that
most people can agree on, which is as follows:
CULTURE
RECREATION
SPORTS
HEALTH
LIVING
DIET
TRANSPORTATION
EDUCATION
SCIENCE
BUSINESS
MEDIA
GOVERNMENT
It has been created based on web directories such
as Open Directory Project with some adjustments.
In addition, NODOMAIN was prepared for those
words that do not belong to any particular domain.
As for the latter issue, you might use keyword ex-
traction techniques; identifying words that represent
a domain from the document collection using statis-
tical measures like TF*IDF and matching between
extracted words and JFWs. However, you will find
that document collections of common domains such
as those assumed here are hard to obtain.4 Hence,
we had to develop a method that does not require
document collections. The next section details it.
4Initially, we tried collecting web pages in Yahoo! JAPAN.
However, we found that most of them were index pages with a
few text contents, from which you cannot extract reliable key-
words. Though we further tried following links in those index
pages to acquire enough texts, extracted words turned out to be
site-specific rather than domain-specific since many pages were
collected from a particular web site.
137
Table 1: Examples of Keywords for each Domain
Domain Examples of Keywords
CULTURE   movie,  music
RECREATION  tourism, 
	 firework
SPORTS  player,  baseball
HEALTH  surgery,  diagnosis
LIVING  childcare, 
 furniture
DIET  chopsticks, ffProceedings of ACL-08: HLT, Short Papers (Companion Volume), pages 69?72,
Columbus, Ohio, USA, June 2008. c?2008 Association for Computational Linguistics
Blog Categorization Exploiting Domain Dictionary and
Dynamically Estimated Domains of Unknown Words
Chikara Hashimoto
Graduate School of Science and Engineering
Yamagata University
Yonezawa-shi, Yamagata, 992-8510, Japan
ch@yz.yamagata-u.ac.jp
Sadao Kurohashi
Graduate School of Informatics
Kyoto University
Sakyo-ku, Kyoto, 606-8501, Japan
kuro@i.kyoto-u.ac.jp
Abstract
This paper presents an approach to text cate-
gorization that i) uses no machine learning and
ii) reacts on-the-fly to unknown words. These
features are important for categorizing Blog
articles, which are updated on a daily basis
and filled with newly coined words. We cat-
egorize 600 Blog articles into 12 domains. As
a result, our categorization method achieved
an accuracy of 94.0% (564/600).
1 Introduction
This paper presents a simple but high-performance
method for text categorization. The method assigns
domain tags to words in an article, and categorizes
the article as the most dominant domain. In this
study, the 12 domains in Table 1 are used follow-
ing (Hashimoto and Kurohashi, 2007) (H&K here-
after)1. Fundamental words are assigned with a do-
Table 1: Domains Assumed in H&K
CULTURE LIVING SCIENCE
RECREATION DIET BUSINESS
SPORTS TRANSPORTATION MEDIA
HEALTH EDUCATION GOVERNMENT
main tag by H&K?s domain dictionary, while the
domains of non-fundamental words (i.e. unknown
words) are dynamically estimated, which makes the
method different from previous ones. Another hall-
mark of the method is that it requires no machine
1In addition, NODOMAIN is prepared for words belonging to
no particular domain like blue or people.
learning. All you need is the domain dictionary and
the access to the Web.
2 The Domain Dictionary
H&K constructed a domain dictionary, where about
30,000 Japanese fundamental content words (JFWs)
are associated with appropriate domains. For exam-
ple, homer is associated with SPORTS.
2.1 Construction Process
1 Preparing Keywords for each Domain About
20 keywords for each domain were collected manu-
ally from words that appear frequently in the Web.
They represent the contents of domains.
2 Associating JFWs with Domains A JFW is
associated with a domain of the highest Ad score.
An Ad score of domain is calculated by summing
up the top five Ak scores of the domain. Then,
an Ak score, which is defined between a JFW and
a keyword of a domain, is a measure that shows
how strongly the JFW and the keyword are related.
H&K adopt the ?2 statistics to calculate an Ak score
and use web pages as a corpus. The number of
co-occurrences is approximated by the number of
search engine hits when the two words are used as
queries. Ak score between a JFW (jw) and a key-
word (kw) is given as below.
Ak(jw, kw) =
n(ad ? bc)2
(a + b)(c + d)(a + c)(b + d) (1)
where n is the total number of Japanese web pages,
a = hits(jw & kw), b = hits(jw) ? a,
c = hits(kw) ? a, d = n ? (a + b + c).
69
Note that hits(q) represents the number of search
engine hits when q is used as a query.
3 Manual Correction Manual correction of the
automatic association2 is done to complete the dic-
tionary. Since the accuracy of 2 is 81.3%, manual
correction is not time-consuming.
2.2 Distinctive Features
H&K?s method is independent of what domains to
assume. You can create your own dictionary. All
you need is prepare keywords of your own domains.
After that, the same construction process is applied.
Also note that H&K?s method requires no text col-
lection that is typically used for machine learning
techniques. All you need is the access to the Web.
3 Blog Categorization
The categorization proceeds as follows: 1 Extract
words from an article, 2 Assign domains and IDFs
to the words, 3 Sum up IDFs for each domain, 4
Categorize the article as the domain of the highest
IDF.3 As for 2 , the IDF is calculated as follows:4
IDF(w) = log Total # of Japanese web pages
# of hits of w (2)
Fundamental words are assigned with their do-
mains and IDFs by the domain dictionary, while
those for unknown words are dynamically estimated
by the method described in ?4.
4 Domain Estimation of Unknown Words
The domain (and IDF) of unknown word is dynam-
ically estimated exploiting the Web. More specifi-
cally, we use Wikipedia and Snippets of Web search,
in addition to the domain dictionary. The estimation
proceeds as follows (Figure 1): 1 Search the Web
with an unknown word, acquire the top 100 records,
and calculate the IDF. 2 Get the Wikipedia article
about the word from the search result if any, estimate
the domain of the word with the Wikipedia-strict
module (?4.1), and exit. 3 When no Wikipedia arti-
cle about the word is found, then get any Wikipedia
2In H&K?s method, reassociating JFWs with NODOMAIN is
required before 3 . We omit that due to the space limitation.
3If the domain of the highest IDF is NODOMAIN, the article
is categorized as the second highest domain.
4We used 10,000,000,000 as the total number.
Unknown Word
Search Result: 100 records
Is There the Wikipedia
Article about the Word in
the Search Result?
Is There Any Wikipedia
Article in the Top 30 in
the Search Result?
Is There Any Snippet Left
in the Search Result?
Does the Input Contain
Fundamental Words?
Failure
Wikipedia
-strict
Wikipedia
-loose
Snippets
Components
Domain and IDF
No
No
No
No
Yes
Yes
Yes
Yes
Remove Corporate Snippets in the Result
Web Search & IDF Calculation
Figure 1: Domain Estimation Process
article in the top 30 of the search result if any, es-
timate the domain with the Wikipedia-loose module
(?4.1), and exit. 4 If no Wikipedia article is found
in the top 30 of the search result, then remove all
corporate snippets. 5 Estimate the domain with the
Snippets module (?4.2) if any snippet is left in the
search result, and exit. 6 If no snippet is left but the
unknown word is a compound word containing fun-
damental words, then estimate the domain with the
Components module (?4.3), and exit. 7 If no snip-
pet is left and the word does not contain fundamental
words, then the estimation is a failure.
4.1 Wikipedia(-strict|-loose) Module
The two Wikipedia modules take the following pro-
cedure: 1 Extract only fundamental words from the
Wikipedia article. 2 Assign domains and IDFs to
the words using the domain dictionary. 3 Sum up
IDFs for each domain. 4 Assign the domain of the
highest IDF to the unknown word. If the domain
is NODOMAIN, the second highest domain is chosen
for the unknown word under the condition below:
70
Second-highest-IDF/ NODOMAIN?s-IDF>0.15
4.2 Snippets Module
The Snippets module takes as input the snippets that
are left in the search result after removing those
of corporate web sites. We remove snippets in
which corporate keywords like sales appear more
than once. The keywords were collected from the
analysis of our preliminary experiments. Remov-
ing corporate snippets is indispensable because they
bias the estimation toward BUSINESS. This module
is the same as the Wikipedia modules except that it
extracts fundamental words from residual snippets.
4.3 Components Module
This is basically the same as the others except that it
extracts fundamental words from the unknown word
itself. For example, the domain of finance market is
estimated from the domains of finance and market.
5 Evaluation
5.1 Experimental Condition
Data We categorized 600 Blog articles from Ya-
hoo! Blog (blogs.yahoo.co.jp) into the 12 do-
mains (50 articles for each domain). In Yahoo! Blog,
articles are manually classified into Yahoo! Blog cat-
egories (' domains) by authors of the articles.
Evaluation Method We measured the accuracy of
categorization and the domain estimation. In cate-
gorization, we tried three kinds of words to be ex-
tracted from articles: fundamental words (F only in
Table 3), fundamental and simplex unknown words
(i.e. no compound word) (F+SU), and fundamen-
tal and all unknown words (both simplex and com-
pound, F+AU). Also, we measured the accuracy of
N best outputs (Top N). During the categorization,
about 12,000 unknown words were found in the 600
articles. Then, we sampled 500 estimation results
from them. Table 2 shows the breakdown of the 500
unknown words in terms of their correct domains.
The other 167 words belong to NODOMAIN.
5.2 Result of Blog Categorization
Table 3 shows the accuracy of categorization. The
F only column indicates that a rather simple method
like the one in ?3 works well, if fundamental words
are given good clues for categorization: the domain
Table 2: Breakdown of Unknown Words
CULT 42 LIVI 19 SCIE 38
RECR 15 DIET 19 BUSI 32
SPOR 27 TRAN 28 MEDI 23
HEAL 22 EDUC 24 GOVE 44
Table 3: Accuracy of Blog Categorization
Top N F only F+SU F+AU
1. 0.89 0.91 0.94
2. 0.96 0.97 0.98
3. 0.98 0.98 0.99
in our case. This is consistent with Kornai et al
(2003), who claim that only positive evidence mat-
ter in categorization. Also, F+SU slightly outper-
formed F only, and F+AU outperformed the others.
This shows that the domain estimation of unknown
words moderately improves Blog categorization.
Errors are mostly due to the system?s incorrect fo-
cus on topics of secondary importance. For exam-
ple, in an article on a sightseeing trip, which should
be RECREATION, the author frequently mentions the
means of transportation. As a result, the article was
wrongly categorized as TRAFFIC.
5.3 Result of Domain Estimation
The accuracy of the domain estimation of unknown
words was 77.2% (386/500). Table 4 shows the fre-
quency in use and accuracy for each domain esti-
mation module.5 The Snippets module was used
Table 4: Frequency and Accuracy for each Module
Frequency Accuracy
Wiki-s 0.146 (73/500) 0.85 (62/73)
Wiki-l 0.208 (104/500) 0.70 (73/104)
Snippt 0.614 (307/500) 0.76 (238/307)
Cmpnt 0.028 (14/500) 0.64 (9/14)
Failure 0.004 (2/500) ??
most frequently and achieved the reasonably good
accuracy of 76%. Though the Wikipedia-strict mod-
ule showed the best performance, it was used not
5Wiki-s, Wiki-l, Snippt and Cmpnt stand for Wikipedia-
strict, Wikipedia-loose, Snippets and Components, respectively.
71
so often. However, we expect that as the number
of Wikipedia articles increases, the best performing
module will be used more frequently.
An example of newly coined words whose do-
mains were estimated correctly is
 
, which
is the abbreviation of
 	

day-trade.
It was correctly assigned with BUSINESS by the
Wikipedia-loose module.
Errors were mostly due to the subtle boundary be-
tween NODOMAIN and the other particular domains.
For instance, person?s names that are common and
popular should be NODOMAIN. But in most cases
they were associated with some particular domain.
This is due to the fact that virtually any person?s
name is linked to some particular domain in the Web.
6 Related Work
Previous text categorization methods like Joachims
(1999) and Schapire and Singer (2000) are mostly
based on machine learning. Those methods need
huge quantities of training data, which is hard to ob-
tain. Though there has been a growing interest in
semi-supervised learning (Abney, 2007), it is in an
early phase of development.
In contrast, our method requires no training data.
All you need is a manageable amount of fundamen-
tal words with domains. Also note that our method
is NOT tailored to the 12 domains. If you want
your own domains to categorize, it is only neces-
sary to construct your own dictionary, which is also
domain-independent and not time-consuming.
In fact, there have been other proposals without
the burden of preparing training data. Liu et al
(2004) prepare representative words for each class,
by which they collect initial training data to build
classifier. Ko and Seo (2004) automatically collect
training data using a large amount of unlabeled data
and a small amount of seed information. However,
the novelty of this study is the on-the-fly estimation
of unknown words? domains. This feature is very
useful for categorizing Blog articles that are updated
on a daily basis and filled with newly coined words.
Domain information has been used for many NLP
tasks. Magnini et al (2002) show the effectiveness
of domain information for WSD. Piao et al (2003)
use domain tags to extract MWEs.
Previous domain resources include WordNet
(Fellbaum, 1998) and HowNet (Dong and Dong,
2006), among others. H&K?s dictionary is the first
fully available domain resource for Japanese.
7 Conclusion
This paper presented a text categorization method
that exploits H&K?s domain dictionary and the dy-
namic domain estimation of unknown words. In the
Blog categorization, the method achieved the accu-
racy of 94%, and the domain estimation of unknown
words achieved the accuracy of 77%.
References
Steven Abney. 2007. Semisupervised Learning for Com-
putational Linguistics. Chapman & Hall.
Zhendong Dong and Qiang Dong. 2006. HowNet and
the Computation of Meaning. World Scientific Pub Co
Inc.
Christiane Fellbaum. 1998. WordNet: An Electronic
Lexical Database. MIT Press.
Chikara Hashimoto and Sadao Kurohashi. 2007. Con-
struction of Domain Dictionary for Fundamental Vo-
cabulary. In ACL ?07 Poster, pages 137?140.
Thorsten Joachims. 1999. Transductive Inference for
Text Classification using Support Vector Machines. In
Proceedings of the Sixteenth International Conference
on Machine Learning, pages 200?209.
Youngjoong Ko and Jungyun Seo. 2004. Learning with
Unlabeled Data for Text Categorization Using Boot-
strapping and Feature Projection Techniques. In ACL
?04, pages 255?262.
Andra?s Kornai, Marc Krellenstein, Michael Mulligan,
David Twomey, Fruzsina Veress, and Alec Wysoker.
2003. Classifying the Hungarian web. In EACL ?03,
pages 203?210.
Bing Liu, Xiaoli Li, Wee Sun Lee, , and Philip Yu. 2004.
Text Classification by Labeling Words. In AAAI-2004,
pages 425?430.
Bernardo Magnini, Carlo Strapparava, Giovanni Pezzulo,
and Alfio Gliozzo. 2002. The Role of Domain Infor-
mation in Word Sense Disambiguation. Natural Lan-
guage Engineering, special issue on Word Sense Dis-
ambiguation, 8(3):359?373.
Scott S. L. Piao, Paul Rayson, Dawn Archer, Andrew
Wilson, and Tony McEnery. 2003. Extracting multi-
word expressions with a semantic tagger. In Proceed-
ings of the ACL 2003 workshop on Multiword expres-
sions, pages 49?56.
Robert E. Schapire and Yoram Singer. 2000. BoosTex-
ter: A Boosting-based System for Text Categorization.
Machine Learning, 39(2/3):135?168.
72
The Hinoki Treebank: Working Toward Text Understanding
Francis Bond, Sanae Fujita, Chikara Hashimoto,?
Kaname Kasahara, Shigeko Nariyama,? Eric Nichols,?
Akira Ohtani,? Takaaki Tanaka, Shigeaki Amano
NTT Communication Science Laboratories, Nippon Telegraph and Telephone Corporation
?Kobe Shoin Women?s University ?NAIST ?Osaka Gakuin University
{bond, sanae, kaname, takaaki, amano}@cslab.kecl.ntt.co.jp ? chashi@sils.shoin.ac.jp,
?{eric-n, shigeko}@is.naist.jp ?ohtani@utc.osaka-gu.ac.jp
Abstract
In this paper we describe the construction of a
new Japanese lexical resource: the Hinoki treebank.
The treebank is built from dictionary definition sen-
tences, and uses an HPSG based Japanese grammar
to encode the syntactic and semantic information.
We show how this treebank can be used to extract
thesaurus information from definition sentences in
a language-neutral way using minimal recursion se-
mantics.
1 Introduction
In this paper we describe the current state of a new
lexical resource: the Hinoki treebank. The motiva-
tion and initial construction was described in detail
in Bond et al (2004a). The ultimate goal of our re-
search is natural language understanding ? we aim
to create a system that can parse text into some use-
ful semantic representation. Ideally this would be
such that the output can be used to actually update
our semantic models. This is an ambitious goal, and
this paper does not present a completed solution,
but rather a road-map to the solution, with some
progress along the way.
The mid-term goal is to build a thesaurus from
dictionary definition sentences and use it to enhance
a stochastic parse ranking model that combines syn-
tactic and semantic information. In order to do this
the Hinoki project is combining syntactic annotation
with word sense tagging. This will make it possible
to test the use of similarity and/or class based ap-
proaches together with symbolic grammars and sta-
tistical models. Our aim in this is to alleviate data
sparseness. In the Penn Wall Street Journal tree-
bank (Taylor et al, 2003), for example, the words
stocks and skyrocket never appear together. How-
ever, the superordinate concepts capital (? stocks)
and move upward (? skyrocket) often do.
We are constructing the ontology from the ma-
chine readable dictionary Lexeed (Kasahara et al,
2004). This is a hand built self-contained lexicon:
it consists of headwords and their definitions for the
most familiar 28,000 words of Japanese. This set
is large enough to include most basic level words
and covers over 75% of the common word tokens
in a sample of Japanese newspaper text. In order
to make the system self sustaining we base the first
growth of our treebank on the dictionary definition
sentences themselves. We then train a statistical
model on the treebank and parse the entire lexicon.
From this we induce a thesaurus. We are currently
tagging the definition sentences with senses. We will
then use this information and the thesaurus to build
a model that combines syntactic and semantic in-
formation. We will also produce a richer ontology
? for example extracting selectional preferences. In
the last phase, we will look at ways of extending our
lexicon and ontology to less familiar words.
In this paper we present the results from treebank-
ing 38,900 dictionary sentences. We also highlight
two uses of the treebank: building the statistical
models and inducing the thesaurus.
2 The Lexeed Semantic Database of
Japanese
The Lexeed Semantic Database of Japanese consists
of all Japanese words with a familiarity greater than
or equal to five on a seven point scale (Kasahara et
al., 2004). This gives 28,000 words in all, with 46,347
different senses. Definition sentences for these sen-
tences were rewritten to use only the 28,000 familiar
words (and some function words). The defining vo-
cabulary is actually 16,900 different words (60% of
all possible words). An example entry for first two
senses of the word   doraiba? ?driver? is
given in Figure 1, with English glosses added (un-
derlined features are those added by Hinoki).
3 The Hinoki Treebank
The structure of our treebank is inspired by the Red-
woods treebank of English in which utterances are
parsed and the annotator selects the best parse from
the full analyses derived by the grammar (Oepen et
al., 2002). We had four main reasons for selecting
this approach. The first was that we wanted to de-
velop a precise broad-coverage grammar in tandem
with the treebank, as part of our research into nat-
ural language understanding. Treebanking the out-
??
?
?
?
?
?
?
?
?
?
?
?
?
Index   doraiba?
POS noun Lexical-type noun-lex
Familiarity 6.5 [1?7]
Sense 1
?
?
Definition 	
 /  /  /  / Proceedings of COLING 2014, the 25th International Conference on Computational Linguistics: Technical Papers,
pages 1423?1434, Dublin, Ireland, August 23-29 2014.
Million-scale Derivation of Semantic Relations
from a Manually Constructed Predicate Taxonomy
Motoki Sano
?
Kentaro Torisawa
?
Julien Kloetzer
?
Chikara Hashimoto
?
Istv
?
an Varga
?
Jong-Hoon Oh
?
? ? ? ? ?
National Institute of Information and Communications Technology, Kyoto, 619-0289, Japan
?
NEC Knowledge Discovery Research Laboratories, Kanagawa, 211-8666, Japan
{
?
msano,
?
torisawa,
?
julien,
?
ch,
?
rovellia}@nict.go.jp,
?
vistvan@az.jp.nec.com
Abstract
We manually created a semantic taxonomy called Phased Predicate Template Taxonomy (PPTT)
that covers 12,023 predicate templates (i.e., predicates with one argument slot like ?rescue X?)
and derived from it various semantic relations between these templates on a million-instance
scale (70%-80% precision level). The derived relations include entailment (e.g., rescue X?X is
alive), happens-before (e.g., buy X?drink X), and a novel relation type anomalous obstruction
(e.g., X is sold out;cannot buy X). Such derivation became possible thanks to PPTT?s design
and the use of statistical methods.
1 Introduction
Databases of various semantic relations between natural language expressions are indispensable knowl-
edge for many NLP applications. For instance, entailment relations are crucial in information extraction
and QA (Dagan et al., 2009; Weisman et al., 2012; Berant et al., 2012; Turney and Mohammad, 2014).
Temporal relations such as happens-before (Chklovski and Pantel, 2004b; Regneri et al., 2010) are im-
portant for enhancing deep semantic processing. A problem, however, is that it is difficult to acquire
those relations with a broad coverage. Although many sophisticated machine learning techniques have
been applied to various kinds of corpora for this task (Szpektor et al., 2007; Chambers and Jurafsky,
2008; Hashimoto et al., 2009; Chambers and Jurafsky, 2009; Hashimoto et al., 2012; Talukdar et al.,
2012; Kloetzer et al., 2013), no satisfactory coverage has been achieved, probably due to data sparseness
in the input data. In this work we take a completely different approach: we manually construct a seman-
tic lexicon called Phased Predicate Template Taxonomy (PPTT), and derive various types of semantic
relations on a large-scale by using it. Our target language is Japanese, but examples are given in English
for simplicity throughout this paper.
PPTT is a taxonomy of predicate templates (predicates with one argument slot like rescue X, ?Tem-
plate? hereafter) that classifies templates according to phases of story concerning an entity denoted by
X. In the story, or the ?life? of the entity X, X can be anticipated, created, then execute its function and
finally it may collapse and become deficient. Anticipation, creation, execution, collapse, deficiency of X
can be seen as such phases of story concerning X, and PPTT classifies templates into 41 semantic classes
each of which corresponds to a phase. In other words, PPTT provides a way to describe the stories of var-
ious entities that constitute this world, and we believe that PPTT (partly) reflects how we understand the
world and its entities. Accordingly, PPTT can also provide a way to derive various semantic knowledge
about this world such as the happens-before relation between events involving an entity, e.g., since the
creation phase usually occurs before the execution phase, invent X (creation phase) is likely to happen-
before use X (execution phase). In addition, entailment relations can be derived: since the creation phase
of an object X must have occurred if X is in its execution phase, it implies that use X is likely to entail
invent X.
In addition, there are ups and downs in stories; some entities suffer setbacks in their stories. PPTT de-
scribes such ?ups and downs? by means of a recently proposed semantic polarity, excitation (Hashimoto
This work is licenced under a Creative Commons Attribution 4.0 International License. Page numbers and proceedings
footer are added by the organizers. License details: http://creativecommons.org/licenses/by/4.0/
1423
et al., 2012). Excitation classifies templates into excitatory, inhibitory, and neutral; an excitatory tem-
plate like install X and buy X indicates that the main function, effect, purpose or role of the entity referred
to by the X of the template is activated, enhanced, or prepared,
1
while an inhibitory template like unin-
stall X and X is canceled roughly indicates that it is deactivated or suppressed. Neutral templates are
neither excitatory nor inhibitory (e.g., consider X). Roughly speaking, an excitatory template expresses
the events that contribute to turn on the function of X, while an inhibitory template expresses the events
that contribute to turn off or not to turn on the function of X. Then, in PPTT, excitatory and inhibitory
respectively correspond to ?ups? and ?downs? in the story of X. The phases in PPTT are marked accord-
ing to these ups and downs. Accordingly, PPTT can derive many antonymous contradiction pairs like
install X?uninstall X, as Hashimoto et al. did, though we omit the detail for space limitation. Moreover,
PPTT can derive a huge volume of anomalous obstruction, a contradiction-like novel semantic relation
that we propose in this paper, like X is canceled;(cannot) buy X and X is sold out;(cannot) buy X,
which indicate that if X is canceled or sold out, you cannot buy X. Anomalous obstruction should be
used for Why-type QA (Oh et al., 2013), as well as a novel system that warns a user who wants to buy
a commercial product that the product is started to be sold out or canceled in various e-commerce sites
without any application-specific coding.
As suggested, a story has a temporal order between its phases, which we call the canonical temporal
order. In addition, some phases in a story would enable or necessitate another phase in the same story to
occur. In PPTT, these relations are embodied in various temporal-semantic links between phases. Note
that each link between two phases does not guarantee that every possible pair of templates taken from
the two phases has such semantic relations; it just indicates that there exists such tendencies. Despite the
absence of the guarantee, PPTT?s links enable a million-scale derivation of semantic relations with the
help of distributional similarity. In existing resources such as WordNet (Fellbaum, 1998), the links are
assumed to be 100% correct, but it would be hard to have such absolutely correct links in a million-scale.
Hence, we believe that our approximate links are more useful for a large-scale relation derivation.
Note that the goal of our PPTT project is to derive a wide range of semantic relations on a large scale,
rather than to complete a comprehensive template taxonomy. As such, PPTT lacks some templates as
described in later sections. Nevertheless, we believe that our design brings much more good than harm,
since we could generate various semantic relations on a million scale thanks to PPTT. Our experimental
results show that we can derive 4.4 million happens-before relation instances with 79.5% precision,
0.5 million entailment relation instances with 70.0% precision, and one million anomalous obstruction
relation instances with 73.5% precision. Constructing the PPTT taxonomy requires a manual labor cost,
which amounted to three man-months in our case; however, we believe that this cost is lower than the
cost for developing highly-precise automatic acquisition methods for all of happens-before, entailment,
contradiction, and anomalous obstruction relations.
We plan to release PPTT and the derived relation instances after the manual annotation of the derived
instances to the NLP community.
2 Related Works
PPTT might resemble other semantic lexicons created in the long history of NLP (Levin, 1993; Kipper
et al., 2006; Fellbaum, 1998; Bond et al., 2009; Fillmore, 1976; Baker et al., 1998; Halliday, 1985;
Pustejovsky et al., 2003; Puscasu and Mititelu, 2008; Bejar et al., 1991; Jurgens et al., 2012). PPTT
is different in that it primarily aims at deriving various types of semantic relations on a large scale ex-
ploiting the notion of the phase of story, rather than being a comprehensive taxonomy like those existing
semantic lexicons. As a result, PPTT can derive more varieties of semantic relations between templates
than any one of those existing lexicons. From WordNet (Fellbaum, 1998; Bond et al., 2009), we can de-
rive entailment and contradiction relations using synsets and synset-links that represent relations such as
?troponym?, ?antonym? and ?entailment?. However, happens-before and anomalous obstruction relations
1
The above definition is slightly different from the original one in Hashimoto et al. (2012). We inserted the verb ?prepared?
into the original definition. This clarifies that various preparation processes for X, such as buy X, can be regarded as excitatory
templates. We also assume that such templates as X exists and have X, which mean little more than just existence, are regarded
as excitatory templates in PPTT based on the assumption that existence can be regarded as preparation for the function of X.
1424
cannot be derived from it, since there is no information on temporal ordering except that on causality.
From VerbNet (Levin, 1993; Kipper et al., 2006), the hyponymy/synonymy type of entailment relations
may be derived using templates in the same verb classes constructed based on shared syntactic behavior,
possibly with the help of statistical methods. However, the other types of relations that can be derived
from PPTT cannot be derived from VerbNet, since there is no link representing relationships between the
verb classes. FrameNet (Fillmore, 1976; Baker et al., 1998) was used to derive hyponymy/synonymy
types of entailment (Coyne and Rambow, 2009; Aharon et al., 2010) using information such as a Frame-
to-frame relation ?Inheritance? (is-a relation). In addition, happens-before relations can be derived using
?Precedes? (Later-Earlier relations). However, since it does not contain semantic constraints like en-
ablement and necessity that PPTT contains, it is not trivial to derive presupposition type of entailment
or anomalous obstruction instances from it. TimeML (Pustejovsky et al., 2003; Puscasu and Mititelu,
2008) contains various temporal information and can be used to derive context-dependent happens-before
relations such as the relation between ?leaves? and ?will not hear? in the sentence ?If Graham leaves to-
day, he will not hear Sabine? through TLINK (Pustejovsky et al., 2003) annotated manually; thus, it is
difficult to derive context-independent relations from it, while they can be derived from PPTT. Besides,
since it covers only temporal information, it is difficult to derive other types of relations from it. From
Bejar et al.?s semantic relation taxonomy of lexical pairs (Bejar et al., 1991; Jurgens et al., 2012),
using semantic relation categories such as ?act: act attribute? (e.g., creep:slow), lexical entailment rela-
tions were extracted (Turney and Mohammad, 2014). However, it is not trivial to derive happens-before
or anomalous obstruction relations from it since it does not contain information on temporal sequences
between verbs.
Furthermore, our work differs from automatic methods for extracting temporal or causal relations
(Szpektor et al., 2007; Chambers and Jurafsky, 2008; Chambers and Jurafsky, 2009; Talukdar et al.,
2012; Hashimoto et al., 2012; Hashimoto et al., 2014) in that our method does not require that target
pairs co-occur in a document, unlike the previous methods. Hence, our method is likely to be immune
to data sparseness. We could actually derive a wide range of relation instances that were rarely written
in documents because they were too commonsensical (e.g., X is constructed happens-before sew (some-
thing) at X). Needless to say, such commonsensical knowledge is often needed to develop intelligent
systems.
3 PPTT Design
In PPTT, templates are organized hierarchically into three levels. In each level, there are classes that
correspond to phases of stories, which we call Level-0 (L0), Level-1 (L1), and Level-2 (L2) classes.
Each template belongs to only one class at each level. In the following, we describe each level.
3.1 L0-Classes and L0-Links
First we divided the entire story concerning an entity X into five phases: non-existence, existence, func-
tioning, non-existence to existence transition and existence to non-existence transition. Then we created
the five L0-classes listed below, each of which corresponds to one of these five phases.
Non-existence Class The class of templates that do not entail the existence of X, e.g., plan
X.
2
Existence Class The class of templates that entail X?s existence but does not imply the execu-
tion of its main function or the achievement of its objectives, e.g., buy X, X exists.
Functioning Class The class of templates that imply the execution of X?s main function or
the achievement of its objectives, e.g., use X, eat X.
Non-existence to Existence Transition Class (NET Class) The class of templates that ex-
press the transition from a situation in which X does not exist to a situation in which it
exists, e.g., manufacture X.
2
One might think the definition of the Non-existence Class should be ?the templates that DO entail X?s NON-EXISTENCE?.
We did not use such a definition because it would overlook many templates that are consistent with X?s NON-EXISTENCE but
DO NOT entail X?s NON-EXISTENCE, like order X.
1425
Existence to Non-existence Transition Class (ENT Class) The class of templates that ex-
press the transition from a situation in which X exists to a situation in which it does not
exist, e.g., dismantle X.
!"#$%&'()%#*%+,-.((+!"#"$%&'()%*%
/&'()%#*%+,-.((+!"#"$%+,-%*% 01#*2"#'#3+,-.((+!"#"$%,.!%*%
/&'()%#*%+)"+!"#$%&'()%#*%++45.#('2"#+6/!47+,-.((++!"#"$%/0.1()2'!%*%
!"#$%&'()%#*%+)"+/&'()%#*%++45.#('2"#+6!/47+,-.((+!"#"$%1(),3(42,5!%*%
Figure 1: L0-links among L0-classes.
As mentioned in the introduction, we assume
a canonical temporal order among L0-classes.
For instance, templates in the NET class (e.g.,
manufacture X) should refer to events that usu-
ally happen before those events referred to by
templates in the Existence class (e.g., buy X),
Functioning class (e.g., use X) and ENT class
(e.g., dismantle X). We enumerated such tem-
poral restrictions, each of which is represented
by a link in Figure 1, which we call L0-links
and used them for deriving relations. Note that
we did not set any L0-link between the Exis-
tence class and the Functioning class because
the events described by them may happen in various orders or have temporal overlap. For example, X
exists should have temporal overlap with use X.
Of course, such metaphysical notions as the canonical temporal order and the phases must have many
complications and exceptions. First, many templates that have the neutral excitation polarity (Hashimoto
et al., 2012) did not seem to follow the canonical temporal order among L0-classes. For instance, since
the neutral template think about X does not entail the existence of X, it belongs to the Non-existence
class but one can consider X while X exists or while it is functioning or even after it is collapsed and
violate canonical temporal ordering. For this reason, we excluded neutral templates from PPTT and will
deal with them in a different framework as a future work. In addition, although we did not assume a
temporal order between the Existence class and the Functioning class, some templates in these classes
have a happens-before relation as special cases (e.g., buy X in the Existence class happens before eat
X in the Functioning class). The proposed L0-links also cause problems. For instance, order X (Non-
Existence class) may not always happen before create X (NET class) even though the L0-links indicate
a happens-before relation between their classes. We dealt as far as possible with such cases in level 2
with L2-classes, which are finer than L0-classes. Nonetheless, we stress that the overall plausibility of
the canonical temporal order among L0-classes was experimentally confirmed through the derivation of
happens-before relations only using L0-links. Note that the design of the L0-classes was inspired by the
Generative Lexicon (Pustejovsky, 1998) and Aristotle?s Entelecheia (Aristotle, 1987).
3.2 L1-Classes
Excitation
L0-class Excitatory Inhibitory
POTENTIAL class FORECLOSING class
Non-existence class e.g., plan X e.g., prevent X
ENABLING class INCOMMODE class
Existence class e.g., buy X e.g., weaken X
ACTUALIZING class DISORDERING class
Functioning class e.g., X functions e.g., X loses
GENERATING class
NET class e.g., X is born N/A
CORRUPTING class
ENT class N/A e.g., destroy X
Table 1: L1-classes.
Next, we divided some L0-classes into
L1-classes using the excitation polar-
ity (Hashimoto et al., 2012) to intro-
duce ?ups and downs? to PPTT, which
enables to capture semantic inconsis-
tencies between templates (e.g., in-
stall X?uninstall X) and negative in-
teraction between the events referred
to by the templates in PPTT (e.g., X
is canceled;(cannot) hold X). Excita-
tion was originally proposed for recog-
nizing contradictions and causal rela-
tions between templates and then was
successfully applied to other deep se-
mantic processing (Oh et al., 2013; Varga et al., 2013; Kloetzer et al., 2013; Hashimoto et al., 2014).
1426
As shown in Table 1, we divided each of three L0-classes (Non-existence class, Existence class and
Functioning class) into two L1-classes, each of which corresponds to excitatory and inhibitory. Since
the transition to an existence situation can be interpreted as an enhancement of an entity?s function, we
assumed that all the templates in the NET classes are excitatory because they express a transition of
entity X from a non-existence situation to an existence situation. Similarly, we assume all the templates
from the ENT class are inhibitory. Also, L1-classes do not have specific links between them beside the
L0-links from their parent classes.
3.3 L2-Classes and L2-Links
Finally, we divided L1-classes into 41 L2-classes. Specifically, we first roughly grouped together seman-
tically similar templates from the same L1-class and identified the common semantic properties among
them. Note that in the rough grouping, we classified templates so that the resulting groups fit into fine-
grained phases in the story concerning X.
After this initial grouping, we classified all the templates into the L2-classes that are listed in Table
3 alongside the classification criteria and the number of templates in each class. As the classification
criteria, we used the identified common semantic properties among members of each class. Note that
some L2-classes can be regarded as a subset of another L2-class. For instance, the PROHIBIT L2-class
can be seen as a subset of the PREVENTION L2-class. When a template meets the classification criteria
of both a subset class and its superset class, we classified it into the subset class.
We also made links called L2-links between the L2-classes. The motivation behind this is to capture
finer temporal-semantic constraints that could not be specified at Level-0 and Level-1 as well as to
capture the temporal-semantic constraints inside a single L0 or L1-class. For example, the temporal
order between buy X and eat X is encoded in a L2-link between the ACQUISITION and EXECUTION L2-
classes, while there is no L0-link between the Existence L0-class (class of buy X) and the Functioning
L0-class (class of eat X). This exemplifies that the L2- and L0-links complement each other.
Each L2-link has one of the six types of temporal-semantic links that are summarized in Table 2 with
the number of links of each type. The link types were designed to capture how the events referred to by
the templates in a class affect the occurrence or non-occurrence of the events referred to by the templates
in a class in the past, present, or future. C
1
and C
2
being two L2-classes, C
1
?s effect on the occurrence or
non-occurrence of C
2
is represented by Positive (
+
) and Negative (
?
) links, respectively, while C
1
?s effect
on the past, present, or future phase of X expressed by C
2
is represented by Past, Present, and Future
links, respectively. For instance, the Past
+
link from the ABANDONMENT class to the ACQUISITION
class indicates that a template from the ACQUISITION class (e.g., obtain X) must occur before a template
from the ABANDONMENT class (e.g., get rid of X), and the Future
?
link from the PROHIBIT class to
the EXECUTION class indicates that templates from the PROHIBIT class (e.g., ban X) disable templates
from the EXECUTION class (e.g., utilize X). Notice that L2-links represent such semantic constraints as
enablement and necessity in addition to temporal order, and they are useful for deriving various kinds of
semantic relations including entailment and anomalous obstruction, as shown in a later section. The first
author of this paper hand-labeled the links between every combination of L2-class pairs by considering
the name of the classes and a few example templates in each.
Positive Negative
Past If C
1
occurred, C
2
must have occurred.
e.g.,FORGETTING
Past
+
? RECOGNITION; X is forgotten
Past
+
? X is
recognized (55 links)
If C
1
occurred, C
2
COULD NOT have occurred.
e.g.,CREATION
Past
?
? PREVENTION; X is generated
Past
?
? X
is prevented (438 links)
Present While C
1
is taking place, C
2
must be taking place.
e.g.,INITIATION
Present
+
? BEING; X is started
Present
+
? X
exists (73 links)
While C
1
is taking place, C
2
CANNOT take place.
e.g.,ENHANCEMENT
Present
?
? DEGRADATION; X is enhanced
Present
?
? X is deteriorated (496 links)
Future C
1
enables C
2
to occur. e.g.,PREPARATION
Future
+
? EXECUTION;
X is customized
Future
+
? X is executed (90 links)
C
1
DISABLEs C
2
to occur. e.g.,
DEFICIENCY
Future
?
? PROVISION; X does not exist
Future
?
?
X is provided (210 links)
Table 2: Types and numbers of L2-links in PPTT. Link direction is C
1
? C
2
.
1427
Non-existence L0-class: Potential L1-class (578) / Foreclosing L1-class (178)
DESIRE entails that X is desired but unlike PLANNING or DEMAND, it does not entail that X is planned or requested, e.g.,
desire X, want X (48).
PLANNING entails that X is planned but does not entail that X is requested. Unlike DEMAND, it does not assume that a person
other than the Planner will carry out X, e.g., plan X, conspire X (72).
DEMAND entails that X is requested. Unlike PLANNING, it assumes that a person other than the Demander will carry out X,
e.g., order X (252).
APPROVAL entails that X is approved or permitted and that there was a plan or a demand before approving, e.g., permit X, accept
X (80).
FEAR entails that X is expected and that X is a source of anxiety or fear, e.g., fear X, worry about X (13).
ANTICIPATION entails that X is expected but unlike FEAR, does not entail that X is a source of anxiety or fear, e.g., forecast X, predict
X (24).
SEARCH entails that X is searched for but unlike DESIRE or DEMAND, does not entail that X is desired or requested, e.g.,
search for X (89).
PREVENTION entails that X is prevented. Unlike CANCELATION, it does not entail that there was a plan or a demand before
preventing, e.g., preclude X (54).
CANCELATION entails that X is canceled and that there was a plan or demand before canceling, e.g., cancel X, give up X (34).
PROHIBIT entails that X is prohibited. X?s right or ability to be generated or used is taken away. e.g., ban X, forbid X (39).
POSTPONE entails that X is postponed, e.g., postpone X, defer X (15).
DEFICIENCY entails that X does not exist but does not entail that it is prevented, canceled, prohibited, or postponed, as in other
L2-classes of Foreclosing L1-class. e.g., lack X, X is absent (36).
NET L0-class: Generating L1-class (596)
SYMBOLIZATION entails that X transits from non-existence to existence as a kind of (semiotic) representation, e.g., write X, compose
(music) X (13).
CREATION entails that X transits from non-existence to existence. Unlike SYMBOLIZATION, X is not limited to a semiotic
representation, and unlike TRANSFORMATION, it focuses less on transformation from another entity. generate X,
cause X (509).
TRANSFORMATION entails that X transits from non-existence to existence as a result of transformation. Unlike CREATION, it focuses on
the transformation from another entity, e.g., turn into X (74).
ENT L0-class: Corrupting L1-class (622)
COLLAPSE entails that X transits from existence to non-existence by dying, being eliminated, or being destroyed. Unlike CON-
VERSION , it focuses less on transformation, e.g., destroy X, kill X (588).
CONVERSION entails that X transits from existence to non-existence by transforming X into an another entity, e.g., turned from X,
changed from X (34).
Existence L0-class: Enabling L1-class (3,536) / Incommode L1-class (1,355)
RECOGNITION entails that X is recognized or sensed, e.g., find X, feel X (308).
SELECTION entails that X is selected, e.g., appoint X, choose X (139).
ENCOUNTER entails that X emerges as a result of transportation, e.g., send X, X arrives (407).
ACQUISITION entails that X is obtained and possessed, e.g., buy X, catch X (482).
PROVISION entails that X is handed to be possessed, e.g., sell X, render X (422).
ENHANCEMENT entails that X is extended, improved, or supported, e.g., increase X, help X (880).
PREPARATION entails that X is arranged, connected, or qualified in preparation to execute its function, e.g., cook X, install X (822).
BEING entails that X is existing or living but does not entail that X is recognized, selected, encountered, acquired, enhanced,
or prepared, as in other L2-classes of the Enabling L1-class, e.g., X exists, X lives (76).
UNRECOGNIZING entails that X is not recognized or sensed but unlike FORGETTING, does not entail that X was previously recognized,
e.g., overlook X (8).
FORGETTING entails that X is forgotten and that X was once recognized, e.g., forget X, lose memory of X (8).
UNSELECTING entails that X is not selected, e.g., alternate X, reject X (46).
SEPARATION entails that X is left or separated as a result of transportation, e.g., X leaves, send X away (114).
ABANDONMENT entails that X is not possessed as a result of being thrown away, e.g., throw X away, renounce X (58).
DEPRIVATION entails that X was taken away without the permission of a possessor, e.g., steal X, take X away (102).
DEGRADATION entails that X is reduced, deteriorated, or interrupted, e.g., X is weakened, attack X (908).
UNPREPARED entails that X is unprepared, disconnected, or unqualified, e.g., X is uninstalled, X is disconnected (111).
Functioning L0-class: Actualizing L1-class (4,460) / Disordering L1-class (698)
EXECUTION entails that the function of X is executed but unlike WORKING, does not entail that X successfully satisfies its function,
e.g., ignite X (966).
WORKING entails that the function of X is carried out and that X successfully satisfies its function, e.g., X functions, cleaned by
X (3,106).
INITIATION entails that X is started or continued, e.g., start X, open X (185).
SUCCESS entails that X accomplished its goal and the result of the execution of its function is evaluated positively, e.g., accom-
plish X, X wins (203).
SUSPENSION entails that the function of X is suspended but unlike FINISHING, does not entail that its function is terminated, e.g.,
suspend X (133).
DYSFUNCTION entails that the function of X is executed but X is performing poorly, e.g., X is sluggish, bored by X (196).
FINISHING entails that X is terminated, e.g., end X, finish X. (110).
FAILURE entails that X fails to accomplish its goal and the result of the execution of its function is evaluated negatively, e.g., X
is defeated (259).
Table 3: PPTT classes. The number in parentheses indicates the number of templates in PPTT.
1428
Note that the existence of an L2-link does not guarantee that the semantic properties specified by it
hold for all the possible template pairs taken from the class pair it connects. The cost of hand-labelling
the links with such guarantees is prohibitively high because we would have to check all of the template
combinations. We empirically evaluated the validity of the links in our experiments below although this
is not a direct evaluation since the relations we derived are different from the ones given to the links.
4 Construction of PPTT and Relation Derivation
Using the automatic acquisition method proposed by Hashimoto et al. (2012), we collected 10,825 can-
didates of excitatory/inhibitory templates from a 600-million-page web corpus (hereafter, WCorpus).
Hashimoto et al.?s method constructs a network of templates based on their co-occurrence in sentences
with a small number of seed templates of which excitation polarity are assigned manually, and infers the
polarity of all the templates in the network by a constraint solver based on the spin model (Takamura et
al., 2005). Then, we added the 20,000 most frequent templates in the corpus that could not be extracted
automatically for a total of 30,825 templates.
Three human annotators (not the authors) judged the polarity of the templates, and we included the
excitatory and the inhibitory templates but excluded the neutral templates in PPTT due to the reason
discussed in Section 3.1. We also excluded templates whose variable X is the subject of a transitive verb.
This is because the subject position is often occupied by living things, and since the functions/objectives
of such subjects seem difficult to identify, it is often difficult to judge whether such templates should be
classified into the Functioning class or another. After applying these two restrictions, the first author
classified the remaining 12,023 templates in PPTT.
In this work, we derived happens-before, entailment and anomalous obstruction relations among tem-
plates from PPTT. The target data is the set of all the template pairs such that a noun exists with which
both templates of the pair co-occur at least 100 times in WCorpus. We denote this set of the template
pairs by TP100, and all the relation derivations pick up template pairs as relation instances from it. This
is because in our preliminary experiments, we found that the relation instance candidates taken from
outside of TP100 had much lower precision. The relation derivation itself is quite simple and consists
of the following two steps.
Step 1 Select L0-links or types of L2-links that are expected to represent a target semantic
relation (e.g., Present
+
links are expected to represent entailment, since they represent
the relations between classes where ?While C
1
is taking place, C
2
must be taking place?.)
and extract all the class pairs connected by the selected links (e.g., INITIATION L2-class
Present
+
? BEING L2-class). Enumerate all the template pairs from the intersection between
TP100 and the extracted class pairs (e.g., X is started
Present
+
? X exists).
Step 2 If necessary, rank the relation instance candidates that are extracted in Step1 by distri-
butional similarity scores between the templates that compose the candidates, computed
with WCorpus.
5 Experiments
This section reports our experiments on semantic relation derivation. Derived relation instances were
marked by three human annotators (not the authors) who voted to break ties. Unless stated otherwise,
we asked them to mark a template pair as negative if they found any noun that can be placed in both
templates? argument slots and makes the template pair a negative sample for the target relation, and
positive otherwise.
5.1 Happens-Before Relation
Following Regneri et al. (2010), we assumed template
1
(T
1
) has a happens-before relationwith template
2
(T
2
) iff one event expressed by T
1
normally happens before another expressed by T
2
, provided that both
events occur. Below are our four methods to derive happens-before relation instances, each of which
uses different links. Note that we did not use distributional similarity in this experiment.
1429
H1 uses the 55 pairs of L2-classes connected by L2-link Past
+
, meaning that a template in a
class must occur before another.
H2 uses the 90 pairs of L2-classes connected by L2-link Future
+
, i.e., a template in a class
often enables another to occur.
H3 uses the 474 pairs of L2-classes connected by one of the seven L0-links in Figure 1, i.e.,
the canonical temporal order links.
All is the union of H1-H3 results.
We prepared two baselines; HB-Ptn is a pattern-based method based on Chklovski and Pantel (2004a).
It extracts template pairs in TP100 that were connected in WCorpus by one of manually collected 73
conjunctives expressing temporal order, such as after and before, and which either shared the same
argument or the second template was filled by the pronouns it, this, or that. Random is a random
sampling from TP100.
Three annotators annotated 200 random samples from each method?s output. Fleiss? kappa was .56
(moderate agreement). The results of their majority vote are summarized in Table 4. The recall was
estimated against the number of positive samples in TP100 based on the precision of Random. The
precision of all of our four methods is reasonably high for such a difficult task, and the number of
relations derived by All reached about 4.4 million. The recall of All exceeds 65%, which we believe is
quite high. HB-Ptn suffered from low recall, probably due to the data sparseness in WCorpus. Table 5
shows examples of the derived happens-before relations alongside L2-classes of the templates, the L2-
links between the classes and the original Japanese templates. The acquired relations included many
unexpected but correct happens-before relations, like compose (a piece of music) X?relax by X.
Actually, it is difficult to fairly compare our work and previous works on temporal relation acqui-
sition, due to differences in language, the data used, and the methodologies. Nonetheless, our result
with 79.5% precision is at least five times larger than the English data released by Chambers et al.
(cs.stanford.edu/people/nc/schemas), which contains around 870,000 ?before? relation candidates and
happens-before database in the VerbOcean (Chklovski and Pantel, 2004a) that covers 4,205 relations.
Considering our method is completely different from theirs, we believe that our contribution is valuable.
Setting/Method Precision (%) # of Pairs Recall (%)
H1 83.5 1,113,280 18.0
H2 70.5 1,524,557 20.8
H3 67.0 3,837,116 49.7
All 79.5 4,387,781 67.5
HB-Ptn 53.0 32,288 0.3
Random 18.0 28,717,454 100.0
Table 4: Happens-before derivation performance.
boil X?eat X
PREPARATION Class
Future
+
? EXECUTION Class
X wo niru? X wo taberu
compose (a piece of music) X?relax by X
SYMBOLIZATION Class
Past
+
? WORKING Class
X wo sakkyoku-suru? X de rirakkusu-suru
Table 5: Examples of happens-before relation.
5.2 Entailment Relation
Below are our proposed methods to derive entailment relations.
Present+.DIFF extracts the 32 class pairs that are composed of DIFFERENT L2-classes and
are connected by the Present
+
links, meaning that a template in a class must occur simul-
taneously with another template in another class, and ranks all the possible template pairs
taken from each class pair using Hashimoto et al.?s (2009) conditional probability based
similarity measure for entailment recognition.
Present+.SAME extracts the 41 class pairs that are composed of the SAME L2-classes and
are connected with the Present
+
links, and ranks all the template pairs from each class
pair using Hashimoto et al.?s similarity.
Past+ extracts the 55 pairs of L2-classes that are connected with the Past
+
links, meaning that
a template in a class must occur before another, and ranks all the template pairs from each
class pair using Hashimoto et al.?s similarity.
1430
Baseline-HAS is our baseline which is our implementation of Hashimoto et al. (2009) for entailment
recognition; it ranks all the template pairs in TP100 by Hashimoto et al.?s score. Our methods can be
seen as the restrictions of the output of the baseline method using the extracted PPTT?s class pairs.
0e+00 2e+04 4e+04 6e+04 8e+04 1e+05
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Number of template pairs (sorted by score)
Pr
ec
isi
on
Present+.DIFFPresent+.SAMEPast+Baseline-HAS
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Pr
ec
isi
on
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Pr
ec
isi
on
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Pr
ec
isi
on
Figure 2: Entailment derivation performance.
Three annotators hand-labeled 500
random samples from the top 100,000
template pairs for each method. The
kappa was .59 (moderate agreement),
and the results of their majority vote
are presented in Figure 2. Table 6
shows examples of Proposed methods?
outputs. The restriction of the class
pairs in our method contributed to much
higher precision than using the state-of-
the-art method alone.
Since the precision of Past+ is quite
high for the top 100,000 pairs, we an-
notated an additional 500 random sam-
ples from the top 500,000 pairs. Accord-
ing to this annotation, the top 408,610
pairs had 70% precision, implying that
after merging all the top pairs extracted
by Present+.DIFF, Present+.SAME and Past+ whose precisions exceeded 70%, we had 0.49 million
entailment pairs with 70% precision. With Baseline-HAS, we derived only 24,000 with the same preci-
sion. Also, the JapaneseWordNet (v.1.1) covers only 2.4% of the pairs in the manually annotated positive
samples from our proposed methods through the ?synsets? or any ?synlinks?. We analyzed 200 samples
from the positive samples not covered by WordNet and found that 49.5% are the hyponymy type (e.g.,
boil X?heat X), 39.0% are the backward presupposition type (e.g., complete X?start X), and 11.5% are
the synonymy type (e.g., X passes away?X dies). This seems to imply that our methods are better at
deriving all types of entailment, while WordNet might be effective for only the synonymy type. In addi-
tion, by analyzing all the positive samples, we confirmed that the different types of entailment pairs were
derived with different L2-links; 88.1% of the positive samples from Present+.DIFF and Present+.SAME
require that two events referred to by the two templates occur with temporal overlap (e.g., equip X?X
exists, i.e. X is equipped while X exists), while 96.7% of those from Past+ were the backward presuppo-
sition type, in which an event entails another event that happened before it. This shows that the L2-links
were useful for deriving various fine-grained types of entailment.
get X?X exists (X wo nyuushu-suru ? X ga sonzai-suru ) ACQUISITION Class
Present
+
? BEING Class
evolve into X?change into X (X ni shinka-suru ? X ni kawaru ) TRANSFORMATION Class
Present
+
? TRANSFORMATION Class
close (a shop) X?make X (X wo heiten-suru ? X wo tsukuru ) FINISHING Class
Past
+
? CREATION Class
Table 6: Examples of entailment.
5.3 Anomalous Obstruction Relation
We assumed that template
1
(T
1
) like X is sold out has an anomalous obstruction relation with template
2
(T
2
) like buy X (denoted as X is sold out;(cannot) buy X) iff: (A) the event expressed by T
1
prevents
the event expressed by T
2
from occurring; (B) T
1
expresses an event that should not happen if everything
about the variable X goes as expected; and (C) T
2
expresses another event in which the function of X is
executed, enhanced, or prepared. We derived anomalous obstructions, by generating all of the possible
template pairs from the 88 L2-class pairs connected by Future
?
L2-links. These indicate that the events
expressed by the templates in the first class of a pair disable the events expressed by the templates in the
second class. Also, to confirm that the templates of the first class in a pair express an unexpected event,
1431
we required the disabler class to have the inhibitory polarity and the disabled class to be excitatory.
Otherwise, we would obtain such pairs as INITIATION;PLANNING (e.g., start X;schedule X), which
indeed express the prevention relation (Barker and Szpakowicz, 1995), i.e., ?scheduling X would not
occur after starting X,? which is different from anomalous obstruction.
Three annotators annotated 200 random samples for each method, and the results of their majority
vote are summarized in Table 7, where Random refers to a random baseline using TP100. The recall
was estimated using the number of positive samples provided by Random. The kappa was .60 (moderate
agreement). 73.5% precision, 26.4% recall against the positive samples in TP100, and more than one
million outputs of our proposed method are reasonably high/large results for this difficult task. Table 8
shows examples of Proposed?s outputs. ?(cannot)? was attached to disabled templates for readability.
Setting/Method Precision # of Pairs Recall
Proposed 73.5 1,081,405 26.4
Random 10.5 28,717,454 100.0
Table 7: Performance of anomalous obstruc-
tion derivation.
prohibit X;(cannot) exhibit X PROHIBIT Class
Future
?
? EXECUTION Class
X wo kinshi-suru;X wo kookai-suru
break X;(cannot) utilize X COLLAPSE CLASS
Future
?
? EXECUTION CLASS
X wo kowasu;X wo riyo-suru
Table 8: Examples of anomalous obstruction.
6 Conclusion
In this work, we manually constructed a Phased Predicate Template Taxonomy (PPTT), which is a net-
work of semantically coherent classes of templates and derived semantic relations including entailment
from it in a million-instance scale. Future work will extend PPTT to cover non-excitatory/non-inhibitory
templates and generate richer structural knowledge similar to full-fledged scripts (Schank and Abelson,
1977) and narrative schemas (Chambers and Jurafsky, 2011).
Acknowledgements
We would like to thank three anonymous reviewers for many useful comments and advices on the
manuscript of this paper.
References
Roni Ben Aharon, Idan Szpektor, and Ido Dagan. 2010. Generating entailment rules from framenet. In Pro-
ceedings of the ACL 2010 Conference Short Papers, ACLShort ?10, pages 241?246, Stroudsburg, PA, USA.
ACL.
Aristotle. 1987. De Anima (Translated by Hugh Lawson-Tancred). Penguin Classics, London.
Collin F. Baker, Charles J. Fillmore, and John B. Lowe. 1998. The berkeley framenet project. In Proceedings of
the 36th Annual Meeting of the Association for Computational Linguistics and 17th International Conference
on Computational Linguistics - Volume 1, ACL ?98, pages 86?90, Stroudsburg, PA, USA. ACL.
Ken Barker and Stan Szpakowicz. 1995. Interactive semantic analysis of clause level relationships. In Proceedings
of PACLING ?95, Brisbane.
I.I. Bejar, R. Chaffin, and S.E. Embretson. 1991. Cognitive and Psychometric Analysis of Analogical Problem
Solving. Springer-Verlag, New York.
Jonathan Berant, Ido Dagan, and Jacob Goldberger. 2012. Learning entailment relations by global graph structure
optimization. Comput. Linguist., 38(1):73?111, March.
Francis Bond, Hitoshi Isahara, Sanae Fujita, Kiyotaka Uchimoto, Takayuki Kuribayashi, and Kyoko Kanzaki.
2009. Enhancing the japanese wordnet. In Proceedings of the 7th Workshop on Asian Language Resources,
ALR7, pages 1?8, Stroudsburg, PA, USA. ACL.
Nathanael Chambers and Dan Jurafsky. 2008. Unsupervised learning of narrative event chains. In Proceedings of
ACL-08: HLT, pages 789?797, Columbus, Ohio, June. ACL.
1432
Nathanael Chambers and Dan Jurafsky. 2009. Unsupervised learning of narrative schemas and their participants.
In Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint
Conference on Natural Language Processing of the AFNLP: Volume 2 - Volume 2, ACL ?09, pages 602?610,
Stroudsburg, PA, USA. ACL.
Nathanael Chambers and Dan Jurafsky. 2011. Template-based information extraction without the templates. In
Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language
Technologies, pages 976?986, Portland, Oregon, USA, June. ACL.
Timothy Chklovski and Patrick Pantel. 2004a. Path analysis for refining verb relations. In In Proceedings of KDD
Workshop on Link Analysis and Group Detection (LinkKDD-04), Seattle, WA.
Timothy Chklovski and Patrick Pantel. 2004b. Verbocean: Mining the web for fine-grained semantic verb rela-
tions. In Dekang Lin and Dekai Wu, editors, Proceedings of the 2004 Conference on Empirical Methods in
Natural Language Processing, EMNLP ?04, pages 33?40, Barcelona, Spain, July. ACL.
Robert Coyne and Owen Rambow. 2009. Lexpar: A freely available english paraphrase lexicon automatically
extracted from framenet. In Proceedings of the Third IEEE International Conference on Seman- tic Computing.
Ido Dagan, Bill Dolan, Bernardo Magnini, and Dan Roth. 2009. Recognizing textual entailment: Rational,
evaluation and approaches. Natural Language Engineering, 15(4):i?xvii.
Christiane Fellbaum, editor. 1998. WordNet: An Electronic Lexical Database. MIT Press, Cambridge, MA.
Charles J. Fillmore. 1976. Frame semantics and the nature of language. Annals of the New York Academy of
Sciences: Conference on the Origin and Development of Language and Speech, 280(1):20?32.
Michael A.K. Halliday. 1985. An Introduction to Functional Grammar. Arnold, 1st edition.
Chikara Hashimoto, Kentaro Torisawa, KowKuroda, Stijn De Saeger, Masaki Murata, and Jun?ichi Kazama. 2009.
Large-scale verb entailment acquisition from the Web. In Proceedings of the 2009 Conference on Empirical
Methods in Natural Language Processing, pages 1172?1181, Singapore, August. ACL.
Chikara Hashimoto, Kentaro Torisawa, Stijn De Saeger, Jong-Hoon Oh, and Jun?ichi Kazama. 2012. Excitatory
or inhibitory: a new semantic orientation extracts contradiction and causality from the web. In Proceedings of
the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural
Language Learning, EMNLP-CoNLL ?12, pages 619?630, Stroudsburg, PA, USA. ACL.
Chikara Hashimoto, Kentaro Torisawa, Julien Kloetzer, Motoki Sano, Istv?an Varga, Jong-Hoon Oh, and Yutaka
Kidawara? 2014. Toward future scenario generation: Extracting event causality exploiting semantic relation,
context, and association features. In Proceedings of the 52nd Annual Meeting of the Association for Computa-
tional Linguistics, Baltimore, USA, June. Association for Computational Linguistics.
David A. Jurgens, Peter D. Turney, Saif M. Mohammad, and Keith J. Holyoak. 2012. Semeval-2012 task 2: Mea-
suring degrees of relational similarity. In Proceedings of the First Joint Conference on Lexical and Computa-
tional Semantics - Volume 1: Proceedings of the Main Conference and the Shared Task, and Volume 2: Proceed-
ings of the Sixth International Workshop on Semantic Evaluation, SemEval ?12, pages 356?364, Stroudsburg,
PA, USA. Association for Computational Linguistics.
Karin Kipper, Anna Korhonen, Neville Ryant, and Martha Palmer. 2006. Extending verbnet with novel verb
classes. In Proceedings of the Fifth International Conference on Language Resources and Evaluation (LREC
2006), pages 731?738, Genoa, Italy, June.
Julien Kloetzer, Stijn De Saeger, Kentaro Torisawa, Chikara Hashimoto, Jong-Hoon Oh, Motoki Sano, and Kiy-
onori Ohtake. 2013. Two-stage method for large-scale acquisition of contradiction pattern pairs using entail-
ment. In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pages
693?703, Seattle, Washington, USA, October. ACL.
Beth Levin. 1993. English Verb Classes and Alternations. The University of Chicago Press, Chicago and London.
Jong-Hoon Oh, Kentaro Torisawa, Chikara Hashimoto, Motoki Sano, Stijn De Saeger, and Kiyonori Ohtake. 2013.
Why-question answering using intra- and inter-sentential causal relations. In Proceedings of the 51st Annual
Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1733?1743, Sofia,
Bulgaria, August. ACL.
1433
Georgiana Puscasu and Verginica Barbu Mititelu. 2008. Annotation of wordnet verbs with timeml event classes.
In Bente Maegaard Joseph Mariani Jan Odijk Stelios Piperidis Daniel Tapias Nicoletta Calzolari (Confer-
ence Chair), Khalid Choukri, editor, Proceedings of the Sixth International Conference on Language Resources
and Evaluation (LREC?08), Marrakech, Morocco, may. European Language Resources Association (ELRA).
http://www.lrec-conf.org/proceedings/lrec2008/.
James Pustejovsky, Jos Castao, Robert Ingria, Roser Saur, Robert Gaizauskas, Andrea Setzer, and Graham Katz.
2003. Timeml: Robust specification of event and temporal expressions in text. In in Fifth International Work-
shop on Computational Semantics (IWCS-5.
James Pustejovsky. 1998. The Generative Lexicon. MIT Press, Cambridge.
Michaela Regneri, Alexander Koller, and Manfred Pinkal. 2010. Learning script knowledge with web experi-
ments. In Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages
979?988, Uppsala, Sweden, July. ACL.
Roger C. Schank and Robert P. Abelson. 1977. Scripts, Plans, Goals and Understanding: an Inquiry into Human
Knowledge Structures. L. Erlbaum, Hillsdale, NJ.
Idan Szpektor, Eyal Shnarch, and Ido Dagan. 2007. Instance-based evaluation of entailment rule acquisition.
In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 456?463,
Prague, Czech Republic, June. ACL.
Hiroya Takamura, Takashi Inui, andManabu Okumura. 2005. Extracting semantic orientations of words using spin
model. In Proceedings of the 43rd Annual Meeting of the Association for Computational Linguistics (ACL?05),
pages 133?140, Ann Arbor, Michigan, June. Association for Computational Linguistics.
Partha Pratim Talukdar, Derry Wijaya, and Tom Mitchell. 2012. Acquiring temporal constraints between relations.
In Proceedings of the 21st ACM International Conference on Information and Knowledge Management, CIKM
?12, pages 992?1001, New York, NY, USA. ACM.
P. D. Turney and S. M. Mohammad. 2014. Experiments with three approaches to recognizing lexical entailment.
Natural Language Engineering, FirstView:1?40, 5.
Istv?an Varga, Motoki Sano, Kentaro Torisawa, Chikara Hashimoto, Kiyonori Ohtake, Takao Kawai, Jong-Hoon
Oh, and Stijn De Saeger. 2013. Aid is out there: Looking for help from tweets during a large scale disaster.
In Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long
Papers), pages 1619?1629, Sofia, Bulgaria, August. ACL.
Hila Weisman, Jonathan Berant, Idan Szpektor, and Ido Dagan. 2012. Learning verb inference rules from
linguistically-motivated evidence. In Proceedings of the 2012 Joint Conference on Empirical Methods in Natu-
ral Language Processing and Computational Natural Language Learning, pages 194?204, Jeju Island, Korea,
July. ACL.
1434
Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing, pages 825?835,
Edinburgh, Scotland, UK, July 27?31, 2011. c?2011 Association for Computational Linguistics
Relation Acquisition using Word Classes and Partial Patterns
Stijn De Saeger?? Kentaro Torisawa? Masaaki Tsuchida? Jun?ichi Kazama?
Chikara Hashimoto? Ichiro Yamada? Jong Hoon Oh? Istva?n Varga? Yulan Yan?
? Information Analysis Laboratory, National Institute of
Information and Communications Technology, 619-0289 Kyoto, Japan
{stijn,torisawa,kazama,ch,rovellia,istvan,yulan}@nict.go.jp
? Information and Media Processing Laboratories, NEC Corporation, 630-0101 Nara, Japan
m-tsuchida@cq.jp.nec.com
? Human & Information Science Research Division,
NHK Science & Technology Research Laboratories, 157-8510 Tokyo, Japan
yamada.i-hy@nhk.or.jp
Abstract
This paper proposes a semi-supervised rela-
tion acquisition method that does not rely on
extraction patterns (e.g. ?X causes Y? for
causal relations) but instead learns a combi-
nation of indirect evidence for the target re-
lation ? semantic word classes and partial
patterns. This method can extract long tail
instances of semantic relations like causality
from rare and complex expressions in a large
JapaneseWeb corpus? in extreme cases, pat-
terns that occur only once in the entire cor-
pus. Such patterns are beyond the reach of cur-
rent pattern based methods. We show that our
method performs on par with state-of-the-art
pattern based methods, and maintains a rea-
sonable level of accuracy even for instances
acquired from infrequent patterns. This abil-
ity to acquire long tail instances is crucial for
risk management and innovation, where an ex-
haustive database of high-level semantic rela-
tions like causation is of vital importance.
1 Introduction
Pattern based relation acquisition methods rely on
lexico-syntactic patterns (Hearst, 1992) for extract-
ing relation instances. These are templates of natu-
ral language expressions such as ?X causes Y ? that
signal an instance of some semantic relation (i.e.,
causality). Pattern based methods (Agichtein and
Gravano, 2000; Pantel and Pennacchiotti, 2006b;
Pas?ca et al, 2006; De Saeger et al, 2009) learn many
? This work was done when all authors were at the National
Institute of Information and Communications Technology.
such patterns to extract new instances (word pairs)
from the corpus.
However, since extraction patterns are learned us-
ing statistical methods that require a certain fre-
quency of observations, pattern based methods fail
to capture relations from complex expressions in
which the pattern connecting the two words is rarely
observed. Consider the following sentence:
?Curing hypertension alleviates the deteriora-
tion speed of the renal function, thereby lower-
ing the risk of causing intracranial bleeding?
Humans can infer that this sentence expresses a
causal relation between the underlined noun phrases.
But the actual pattern connecting them, i.e., ?Cur-
ing X alleviates the deterioration speed of the re-
nal function, thereby lowering the risk of causing
Y ?, is rarely observed more than once even in a 108
page Web corpus. In the sense that the term pat-
tern implies a recurring event, this expression con-
tains no pattern for detecting the causal relation be-
tween hypertension and intracranial bleeding. This
is what we mean by ?long tail instances? ? words
that co-occur infrequently, and only in sparse extrac-
tion contexts.
Yet an important application of relation extraction
is mining the Web for so-called unknown unknowns
? in the words of D. Rumsfeld, ?things we don?t
know we don?t know? (Torisawa et al, 2010). In
knowledge discovery applications like risk manage-
ment and innovation, the usefulness of relation ex-
traction lies in its ability to find many unexpected
remedies for diseases, causes of social problems,
and so on. To give an example, our relation extrac-
825
tion system found a blog post mentioning Japanese
automaker Toyota as a hidden cause of Japan?s de-
flation. Several months later the same connection
was made in an article published in an authoritative
economic magazine.
We propose a semi-supervised relation extraction
method that does not rely on direct pattern evidence
connecting the two words in a sentence. We argue
that the role of binary patterns can be replaced by a
combination of two types of indirect evidence: se-
mantic class information about the target relation
and partial patterns, which are fragments or sub-
patterns of binary patterns. The intuition is this: if
a sentence like the example sentence above contains
some wordX belonging to the class of medical con-
ditions and another word Y from the class of trau-
mas, and X matches the partial pattern ?. . . causing
X?, there is a decent chance that this sentence ex-
presses a causal relation between X and Y . We
show that just using this combination of indirect
evidence we can pick up semantic relations with
roughly 50% precision, regardless of the complexity
or frequency of the expression in which the words
co-occur. Furthermore, by combining this idea with
a straightforward machine learning approach, the
overall performance of our method is on par with
state-of-the-art pattern based methods. However,
our method manages to extract a large number of
instances from sentences that contain no pattern that
can be learned by pattern induction methods.
Our method is a two-stage system. Figure 1
presents an overview. In Stage 1 we apply a state-
of-the-art pattern based relation extractor to a Web
corpus to obtain an initial batch of relation instances.
In Stage 2 a supervised classifier is built from vari-
ous components obtained from the output of Stage
1. Given the output of Stage 1 and access to a
Web corpus, the Stage 2 extractor is completely
self-sufficient, and the whole method requires no
supervision other than a handful of seed patterns
to start the first stage extractor. The whole proce-
dure is therefore minimally supervised. Semantic
word classes and partial patterns play a crucial role
throughout all steps of the process.
We evaluate our method on three relation acqui-
sition tasks (causation, prevention and material re-
lations) using a 600 million Japanese Web page cor-
Figure 1: Proposed method: data flow.
pus (Shinzato et al, 2008) and show that our sys-
tem can successfully acquire relations from both
frequent and infrequent patterns. Our system ex-
tracted 100,000 causal relations with 84.6% preci-
sion, 50,000 prevention relations with 58.4% preci-
sion and 25,000 material relations with 76.1% preci-
sion. In the extreme case, we acquired several thou-
sand word pairs co-occurring only in patterns that
appear once in the entire corpus. We call such pat-
terns single occurrence (SO) patterns. Word pairs
that co-occur only with SO patterns represent the
theoretical limiting case of relations that cannot be
acquired using existing pattern based methods. In
this sense our method can be seen as complemen-
tary with pattern based approaches, and merging our
method?s output with that of a pattern based method
may be beneficial.
2 Stage 1 Extractor
This section introduces our Stage 1 extractor: the
pattern based method from (De Saeger et al, 2009),
which we call CDP for ?class dependent patterns?.
We give a brief overview below, and refer the reader
to the original paper for a more comprehensive ex-
planation.
CDP takes a set of seed patterns as input, and au-
tomatically learns new class dependent patterns as
paraphrases of the seed patterns. Class dependent
patterns are semantic class restricted versions of or-
dinary lexico-syntactic patterns. Existing methods
use class independent patterns such as ?X causes
Y ? to learn causal relations betweenX and Y . Class
dependent patterns however place semantic class re-
826
strictions on the noun pairs they may extract, like
?Yaccidents causes Xincidents?. The accidents and
incidents subscripts specify the semantic class of the
X and Y slot fillers.
These class restrictions make it possible to distin-
guish between multiple senses of highly ambiguous
patterns (so-called ?generic? patterns). For instance,
given the generic pattern ?Y by X?, if we restrict
Y and X in to the semantic classes of injuries and
accidents (as in ?death by drowning?), the class de-
pendent pattern ?Yinjuries by Xaccidents? becomes a
valid paraphrase of ?X causes Y ? and can safely be
used to extract causal relations, whereas other class
dependent versions of the same generic pattern (e.g.,
?Yproducts byXcompanies?, as in ?iPhone by Apple?)
may not.
CDP ranks each noun pair in the corpus accord-
ing to a score that reflects its likelihood of being
a proper instance of the target relation, by calcu-
lating the semantic similarity of a set of seed pat-
terns to the class dependent patterns this noun pair
co-occurs with. The output of CDP is a list of noun
pairs ranked by score, together with the highest scor-
ing class dependent pattern each noun pair co-occurs
with. This list becomes the input to Stage 2 of our
method, as shown in Figure 1. We adopted CDP as
Stage 1 extractor because, besides having generally
good performance, the class dependent patterns pro-
vide the two fundamental ingredients for Stage 2 of
our method ? the target semantic word classes for a
given relation (in the form of the semantic class re-
strictions attached to patterns), and partial patterns.
To obtain fine-grained semantic word classes we
used the large scale word clustering algorithm from
(Kazama and Torisawa, 2008), which uses the EM
algorithm to compute the probability that a word w
belongs to class c, i.e., P (c|w). Probabilistic cluster-
ing defines no discrete boundary between members
and non-members of a semantic class, so we simply
assume w belongs to c whenever P (c|w) ? 0.2. For
this work we clustered 106 nouns into 500 classes.
Finally, we adopt the structural representation of
patterns introduced in (Lin and Pantel, 2001). All
sentences in our corpus are dependency parsed, and
patterns consist of words on the path of dependency
relations connecting two nouns.
3 Stage 2 Extractor
We use CDP as our Stage 1 extractor, and the top
N noun pairs along with the class dependent pat-
terns that extract them are given as input to Stage 2,
which represents the main contribution of this work.
As shown in Figure 1, Stage 2 consists of three mod-
ules: a candidate generator, a training data gener-
ator and a supervised classifier. The training data
generator builds training data for the classifier from
the top N output of CDP and sentences retrieved
from the Web corpus. This classifier then scores and
ranks the candidate relations generated by the can-
didate relation generator. We introduce each module
below.
Candidate Generator This module generates
sentences containing candidate word pairs for the
target relation from the corpus. It does so using the
semantic class restrictions and partial patterns ob-
tained from the output of CDP. The set of all seman-
tic class pairs obtained from the class dependent pat-
terns that extracted the topN results become the tar-
get semantic class pairs from which new candidate
instances are generated. We extract all sentences
containing a word pair belonging to one of the target
class pairs from the corpus.
From these sentences we keep only those that con-
tain a trace of evidence for the target semantic re-
lation. For this we decompose the class dependent
patterns from the Stage 1 extractor into partial pat-
terns. As mentioned previously, patterns consist of
words on the path of dependency relations connect-
ing the two target words in a syntactic tree. To obtain
partial patterns we split this dependency path into its
two constituent branches, each one leading from the
leaf word (i.e. variable) to the syntactic head of the
pattern. For example, ?X subj?? causes obj?? Y ? is
split into two partial patterns ?X subj?? causes? and
?causes obj?? Y ?. These partial patterns capture the
predicate structures in binary patterns.1 We discard
partial patterns with syntactic heads other than verbs
or adjectives.
The candidate genarator retrieves all sentences
from the corpus in which two nouns belonging to
one of the target semantic classes co-occur and
1 In Japanese, case information is encoded in post-positions
attached to the noun.
827
where at least one of the nouns matches a partial pat-
tern. As shown in Figure 1, these sentences and the
candidate noun pairs they contain (called (noun pair,
sentence) triples hereafter) are submitted to the clas-
sifier for scoring. Restricting candidate noun pairs
by this combination of semantic word classes and
partial pattern matching proved to be quite powerful.
For instance, in the case of causal relations we found
that close to 60% of the (noun pair, sentence) triples
produced by the candidate generator were correct
(Figure 6).
Training Data Generator As shown in Figure 1,
the (noun pair, sentence) triples used as training data
for the SVM classifier were generated from the top
results of the Stage 1 extractor and the corpus. We
consider the noun pairs in the top N output of the
Stage 1 extractor as true instances of the target re-
lation (even though they may contain erroneous ex-
tractions), and retrieve from the corpus all sentences
in which these noun pairs co-occur and that match
one of the partial patterns mentioned above. In our
experiments we set N to 25, 000. We randomly se-
lect positive training samples from this set of (noun
pair, sentence) triples.
Negative training samples are also selected ran-
domly, as follows. If one member of the target noun
pair in the positive samples above matches a partial
pattern but the other does not, we randomly replace
the latter by another noun found in the same sen-
tence, and generate this new (noun pair, sentence)
triple as a negative training sample. In the causal
relation experiments this approach had about 5%
chance of generating false negatives ? noun pairs
contained in the top N results of the Stage 1 extrac-
tor. Such samples were discarded. Our experimen-
tal results show that this scheme works quite well in
practice. We randomly sample M positive and neg-
ative samples from the autogenerated training data
to train the SVM. M was empirically set to 50,000
in our experiments.
SVM Classifier We used a straightforward fea-
ture set for training the SVM classifier. Because
our classifier will be faced with sentences contain-
ing long and infrequent patterns where the distance
between the two target nouns may be quite large,
we did not try to represent lexico-syntactic patterns
as features but deliberately restricted the feature set
to local context features of the candidate noun pair
in the target sentence. Concretely, we looked at bi-
grams and unigrams surrounding both nouns of the
candidate relation, as the local context around the
target words may contain many telling expressions
like ?increase in X? or ?X deficiency? which are use-
ful clues for causal relations. Also, in Japanese case
information is encoded in post-positions attached to
the noun, which is captured by the unigram features.
In addition to these base features, we include the
semantic classes to which the candidate noun pair
belongs, the partial patterns they match in this sen-
tence, and the infix words inbetween the target noun
pair. Note that this feature set is not intended to
be optimal beyond the actual claims of this paper,
and we have deliberately avoided exhaustive fea-
ture engineering so as not to obscure the contribu-
tion of semantic classes and partial pattern to our
approach. Clearly an optimal classifier will incorpo-
rate many more advanced features (see GuoDong et
al. (2005) for a comprehensive overview), but even
without sophisticated feature engineering our clas-
sifier achieved sufficient performance levels to sup-
port our claims. An overview of the feature set is
given in Table 1. The relative contribution of each
type of features is discussed in section 4. In prelim-
inary experiments we found a polynomial kernel of
degree 3 gave the best results, which suggests the ef-
fectiveness of combining different types of indirect
evidence.
The SVM classifier outputs (noun pair, sentence)
triples, ranked by SVM score. To obtain the final
output of our method we assign each unique noun
pair the maximum score from all (noun pair, sen-
tence) triples it occurs in, and discard all other sen-
tences for this noun pair. In section 4 below we eval-
uate the acquired noun pairs in the context of the
sentence that maximizes their score.
4 Evaluation
We demonstrate the effectiveness of semantic word
classes and partial pattern matching for relation ex-
traction by showing that the method proposed in this
paper performs at the level of other state-of-the-art
relation acquisition methods. In addition we demon-
strate that our method can successfully extract re-
lation instances from infrequent patterns, and we
828
Feature type Description Number of features
Morpheme features Unigram and bigram morphemes surrounding both target words. 554,395
POS features Coarse- and fine-grained POS tags of the noun pair and morpheme features. 2,411
Semantic features Semantic word classes of the target noun pair. 1000 (500 classes ?2)
Infix word features Morphemes found inbetween the target noun pair. 94,448
Partial patterns Partial patterns matching the target noun pair. 86
Table 1: Feature set used in the Stage 2 classifier, and their number for the causal relation experiments.
explore several criteria for what constitutes an in-
frequent pattern ? including the theoretical limit-
ing case of patterns observed only once in the en-
tire corpus. These instances are impossible to ac-
quire by pattern based methods. The ability to ac-
quire relations from extremely infrequent expres-
sions with decent accuracy demonstrates the utility
of combining semantic word classes with partial pat-
tern matching.
4.1 Experimental Setting
We evaluate our method on three semantic relation
acquisition tasks: causality, prevention and mate-
rial. Two concepts stand in a causal relation when
the source concept (the ?cause?) is directly or indi-
rectly responsible for the subsequent occurrence of
the target concept (its ?effect?). In a prevention rela-
tion the source concept directly or indirectly acts to
avoid the occurrence of the target concept, and in a
material relation the source concept is a material or
ingredient of the target concept.
For our experiments we used the latest version
of the TSUBAKI corpus (Shinzato et al, 2008),
a collection of 600 million Japanese Web pages
dependency parsed by the Japanese dependency
parser KNP2. In our implementation of CDP, lexico-
syntactic patterns consist of words on the path con-
necting two nouns in a dependency parse tree. We
discard patterns from dependency paths longer than
8 constituent nodes. Furthermore, we estimated pat-
tern frequencies in a subset of the corpus (50 million
pages, or 1/12th of the entire corpus) and discarded
patterns that co-occur with less than 10 unique noun
pairs in this smaller corpus. These restrictions do
not apply to the proposed method, which can extract
noun pairs connected by patterns of arbitrary length,
even if found only once in the corpus. For our pur-
2 http://nlp.kuee.kyoto-u.ac.jp/nl-resource/knp.html
pose we treat dependency paths whose observed fre-
quency is below this threshold as insufficiently fre-
quent to be considered as ?patterns?. This threshold
is of course arbitrary, but in section 4 we show that
our results are not affected by these implementation
details.
We asked three human judges to evaluate ran-
dom (noun pair, sentence) triples, i.e. candidate
noun pairs in the context of some corpus sentence
in which they co-occur. If the judges find the sen-
tence contains sufficient evidence that the target re-
lation holds between the candidate nouns, they mark
the noun pair correct. To evaluate the performance
of each method we use two evaluation criteria: strict
(all judges must agree the candidate relation is cor-
rect) and lenient (decided by the judges? majority
vote). Over all experiments the interrater agreement
(Kappa) ranged between 0.57 and 0.82 with an aver-
age of 0.72, indicating substantial agreement (Lan-
dis and Koch, 1977).
4.1.1 Methods Compared
We compare our results to two pattern based
methods: CDP (the Stage 1 extractor) and Espresso
(Pantel and Pennacchiotti, 2006a).
Espresso is a popular bootstrapping based method
that uses a set of seed instances to induce extraction
patterns for the target relation and then acquire new
instances in an iterative bootstrapping process. In
each iteration Espresso performs pattern induction,
pattern ranking and selection using previously ac-
quired instances, and uses the newly acquired pat-
terns to extraction new instances. Espresso com-
putes a reliability score for both instances and pat-
terns based on their pointwise mutual information
(PMI) with the top-scoring patterns and instances
from the previous iteration.3 We refer to (Pantel and
3 In our implementation of Espresso we found that, despite
the many parameters for controlling the bootstrapping process,
829
30%
40%
50%
60%
70%
80%
90%
100%
0 10K 20K 30K 40K 50K 60K 70K 80K 90K 100K
Proposed (L)
Proposed (S)
Prop. w/o CDP (L)
Prop. w/o CDP (S)
Prop. w/o pattern (L)
Prop. w/o pattern (S)
Espresso (L)
Espresso (S)CDP (L)CDP (S)
Figure 2: Precision of acquired relations (causality). L
and S denote lenient and strict evaluation.
Pennacchiotti, 2006a) for a more detailed descrip-
tion.
For all methods compared we rank the acquired
noun pairs by their score and evaluated 500 random
samples from the top 100,000 results. For noun pairs
acquired by CDP and Espresso we select the pattern
that extracted this noun pair (in the case of Espresso,
the pattern with the highest PMI for this noun pair),
and randomly select a sentence in which the noun
pair co-occurs with that pattern from our corpus. For
the proposed method we evaluate noun pairs in the
context of the (noun pair, sentence) triple with the
highest SVM score.
4.2 Results and Discussion
The performance of each method on the causality,
prevention and material relations are shown in Fig-
ures 2, 3 and 4 respectively. In the causality exper-
iments (Figure 2) the proposed method performs on
par with CDP for the top 25,000 results, both achiev-
ing close to 90% precision. But whereas CDP?s per-
it remains very difficult to prevent semantic drift (Komachi et
al., 2008) from occurring. One small adjustment to the al-
gorithm stabilized the bootstrapping process considerably and
gave overall better results. In the pattern induction step (sec-
tion 3.2 in (Pantel and Pennacchiotti, 2006a)), Espresso com-
putes a reliability score for each candidate pattern based on the
weighted PMI of the pattern with all instances extracted so far.
As the number of extracted instances increases this dispropor-
tionally favours high frequency (i.e. generic) patterns, so in-
stead of using all instances for computing pattern reliability we
only use the m most reliable instances from the previous iter-
ation, which were used to extract the candidate patterns of the
current iteration (m = 200, like the original).
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
0 10K 20K 30K 40K 50K 60K 70K 80K 90K 100K
Proposed (L)
Proposed (S)
Prop. w/o CDP (L)
Prop. w/o CDP (S)
Prop. w/o pattern (L)
Prop. w/o pattern (S)
Espresso (L)
Espresso (S)CDP (L)CDP (S)
Figure 3: Precision of acquired relations (prevention). L
and S denote lenient and strict evaluation.
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
0 10K 20K 30K 40K 50K 60K 70K 80K 90K 100K
Proposed (L)
Proposed (S)
Prop. w/o CDP (L)
Prop. w/o CDP (S)
Prop. w/o pattern (L)
Prop. w/o pattern (S)
Espresso (L)
Espresso (S)CDP (L)CDP (S)
Figure 4: Precision of acquired relations (material). L
and S denote lenient and strict evaluation.
formance drops from there our method maintains
the same high precision throughout (84.6%, lenient).
Both our method and CDP outperform Espresso by
a large margin.
For the prevention relation (Figure 3), precision
is considerably lower for all methods except the top
10,000 of CDP (82% precision, lenient). The pro-
posed method peaks at around 20,000 results (67%
precision, lenient) and performance remains more or
less constant from there on. The proposed method
overtakes CDP?s performance around the top 45,000
mark, which suggests that combining the results of
both methods may be beneficial.
In the material relations the proposed method
slightly outperforms both pattern based methods
in the top 10,000 results (92% precision, lenient).
830
However for this relation our method produced only
35,409 instances. The reason is that the top 25,000
results of CDP were all extracted by just 12 patterns,
and these contained many patterns whose syntactic
head is not a verb or adjective (like ?Y rich in X? or
?Y containing X?). Only 12 partial patterns were ob-
tained, which greatly reduced the output of the pro-
posed method. Taking into account the high perfor-
mance of CDP for material relations, this suggests
that for some relations our method?s N and M pa-
rameters could use some tuning. In conclusion, in
all three relations our method performs at a level
comparable to state-of-the-art pattern based meth-
ods, which is remarkable given that it only uses in-
direct evidence.
Dealing with Difficult Extractions How does our
method handle noun pairs that are difficult to ac-
quire by pattern based methods? The graphs marked
?Prop. w/o CDP? (Proposed without CDP) in Fig-
ures 2 , 3 and 4 show the number and precision of
evaluated samples from the proposed method that do
not co-occur in our corpus with any of the patterns
that extracted the top N results of the first stage ex-
tractor. These graphs show that our method is not
simply regenerating CDP?s top results but actually
extracts many noun pairs that do not co-occur in pat-
terns that are easily learned. Figure 2 shows that
roughly two thirds of the evaluated samples are in
this category, and that their performance is not sig-
nificantly worse than the overall result. The same
conclusion holds for the prevention results (Figure
3), where over 80% of the proposed method?s sam-
ples are noun pairs that do not co-occur with eas-
ily learnable patterns. Their precision is about 5%
worse than all samples from the proposed method.
For material relations (Figure 4) about half of all
evaluated samples are in this category, but their pre-
cision is markedly worse compared to all results.
For genuinely infrequent patterns, the graphs
marked ?Prop. w/o pattern? (Proposed without pat-
tern) in Figures 2 , 3 and 4 show the number and
precision of noun pairs evaluated for the proposed
method that were acquired from sentences without
any discernible pattern. As explained in section 4
above, these constitute noun pairs co-occurring in a
sentence in which the path of dependency relations
connecting them is either longer than 8 nodes or can
 0
 5
 10
 15
 20
1 2 32 1024 32768 1.05x106 3.36x107
% o
f al
l sa
mp
les
# of noun pairs co-occurring with patterns
Pattern frequency, CDPPattern frequency, ProposedPattern frequency, Espresso
Figure 5: Frequencies of patterns in the evaluation data
(causation).
extract fewer than 10 noun pairs in 50 million Web
pages. Note that in theory it is possible that these
noun pairs could not be acquired by pattern based
methods due to this threshold ? patterns must be
able to extract more than 10 different noun pairs in
a subset of our corpus, while the proposed method
does not have this constraint. So at least in the-
ory, pattern based methods might be able to acquire
all noun pairs obtained by our method by lowering
this threshold. To see that this is unlikely to be the
case, consider Figure 5, which shows the pattern fre-
quency of the patterns induced by CDP and Espresso
for the causality experiment. The x-axis represents
pattern frequency in terms of the number of unique
noun pairs a pattern co-occurs with in our corpus (on
a log scale), and the y-axis shows the percentage of
samples that was extracted by patterns of a given fre-
quency.4 Figure 5 shows that for the pattern based
methods, the large majority of noun pairs was ex-
tracted by patterns that co-occur with several thou-
sand different noun pairs. Extrapolating the original
frequency threshold of 10 nounpairs to the size of
our entire corpus roughly corresponds to about 120
distinct noun pairs (10 times in 1/12th of the entire
corpus). In Figure 5, the histograms for the pattern
based methods CDP and Espresso start around 1000
noun pairs, which is far above this new lowerbound.
4 In the case of CDP we ignore semantic class restrictions
on the patterns when comparing frequencies. For Espresso, the
most frequent pattern (?Y by X? at the 24,889,329 data point
on the x-axis) extracted up to 53.8% of the results, but the graph
was cut at 20% for readability.
831
Cau
sali
ty
??????? ??????????????????????????????????????????[????]??????
Because ?catecholamine? causes a rapid increase of heart rate, the change of circulation inside the blood vessels leads to blood vessel
disorders and promotes [thrombus generation].
????? ??????????????????????????????????? [????]?????????????
When we injected Xylocaine during a ?tachycardia seizure?, the patient suddenly lost consciousness and fell into a fit of [convulsions].
???????? ????????? ????????? [???]???????????????
(. . . ) The reason is that by taking a lot of ?animal proteins? the causative agents of [tragomaschalia] increase.
*???????????? ?????? ?????????????????????? [???]?
* [Radon] heightens the (body?s) antioxidative function and is effective for eliminating activated oxygen, which is a cause of aging and
?lifestyle-related? diseases.
Pre
ven
tion
???????????????????? ???? ??????????????[???]?????????????
Because the fatty meat of tuna contains DHA and ?EPA? in abundance, it is effective for preventing [neuralgia].
??????? ????? ??????? [????]?????????
If you use ?nitrogen gas? instead of air you may prevent [dust explosions].
??????????? ??????? ???????????????????????? [???]???????????
In ancient Europe ?orthosiphon aristatus? tea was called a ?diet tea?, and supposedly it helps preventing triglycerides and [adult diseases].
* ?? ???????????????????????? [????]????????
* (It) is something that prevents [scratches] on the screen if the ?calash? gets stuck between the screens during storage.
Table 2: Causality and Prevention relations acquired from Single Occurrence (SO) patterns. ?X? and [Y] indicate the
relation instance?s source and target words, and ?*? indicates erroneous extractions.
Thus, pattern based methods naturally tend to induce
patterns that are much more frequent than the range
of patterns our method can capture, and it is unlikely
that this is a result of implementation details like pat-
tern frequency threshold.
The precision of noun pairs in the category ?Prop.
w/o pattern? is clearly lower than the overall re-
sults, but the graphs demonstrate that our method
still handles these difficult cases reasonably well.
The 500 samples evaluated contained 155 such in-
stances for causality, 403 for prevention and 276 for
material. For prevention, the high ratio of these noun
pairs helps explain why the overall performance was
lower than for the other relations.
Finally, the theoretical limiting case for pattern
based algorithms consists of patterns that only co-
occur with a single noun pair in the entire corpus
(single occurrence or SO patterns). Pattern based
methods learn new patterns that share many noun
pairs with a set of reliable patterns in order to extract
new relation instances. If a noun pair that co-occurs
with a SO pattern also co-occurs with more reliable
patterns there is no need to learn the SO pattern. If
that same noun pair does not co-occur with any other
reliable pattern, the SO pattern is beyond the reach
of any pattern induction method. Thus, SO patterns
are effectively useless for pattern based methods.
For the 500 samples evaluated from the causality
and prevention relations acquired by our method we
found 7 causal noun pairs that co-occur only in SO
patterns and 29 such noun pairs for prevention. The
precision of these instances was 42.9% and 51.7%
respectively. In total we found 8,716 causal noun
pairs and 7,369 prevention noun pairs that co-occur
only with SO patterns. Table 2 shows some example
relations from our causality and prevention experi-
ments that were extracted from SO patterns. To con-
clude, our method is able to acquire correct relations
even from the most extreme infrequent expressions.
Semantic Classes, Partial Patterns or Both? In
the remainder of this section we look at how the
combination of semantic word classes and partial
patterns benefits our method. For each relation we
evaluated 1000 random (noun pair, sentence) triples
satisfying the two conditions from section 3 ?
matching semantic class pairs and partial patterns.
Surprisingly, the precision of these samples was
59% for causality, 40% for prevention and 50.4%
for material, showing just how compelling these two
types of indirect evidence are in combination.
To estimate the relative contribution of each
heuristic we compared our candidate generation
method against two baselines. The first baseline
evaluates the precision of random noun pairs from
832
 50
 60
 70
 80
 90
 100
 0  200  400  600  800  1000
pre
cis
ion
 (%
)
(noun pair, sentence) triples ranked by score
Base features onlyAll minus semantic classesAll minus infix wordsAll minus partial patternsAll features
Figure 6: Contribution of feature sets (causality).
 30
 40
 50
 60
 70
 80
 90
 100
 0  200  400  600  800  1000
pre
cis
ion
 (%
)
(noun pair, sentence) triples ranked by score
Base features onlyAll minus semantic classesAll minus infix wordsAll minus partial patternsAll features
Figure 7: Contribution of feature sets (prevention).
the target semantic classes that co-occur in a sen-
tence. The second baseline does the same for the
second heuristic, selecting random sentences con-
taining a noun pair that matches some partial pat-
tern. Evaluating 100 samples for causality and pre-
vention, we found the precision of the semantic class
baseline was 16% for causality and 5% for preven-
tion. The pattern fragment baseline gave 9% for
causality and 22% for prevention. This is consid-
erably lower than the precision of random samples
that satisfy both the semantic class and partial pat-
tern conditions, showing that the combination of se-
mantic classes and partial patterns is more effective
than either one individually.
Finally, we investigated the effect of the various
feature sets used in the classifier. Figures 6, 7 and
8 show the results for the respective semantic re-
lations. The ?Base features? graph shows the per-
 30
 40
 50
 60
 70
 80
 90
 100
 0  200  400  600  800  1000
pre
cis
ion
 (%
)
(noun pair, sentence) triples ranked by score
Base features onlyAll minus semantic classesAll minus infix wordsAll minus partial patternsAll features
Figure 8: Contribution of feature sets (material).
formance the unigram, bigram and part-of-speech
features. ?All features? uses all features in Table
1. The other graphs show the effect of removing
one type of features. These graphs suggest that the
contribution of the individual feature types (seman-
tic class information, partial patterns or infix words)
to the classification performance is relatively minor,
but in combination they do give a marked improve-
ment over the base features, at least for some rela-
tions like causation and material. In other words,
the main contribution of semantic word classes and
partial patterns to our method?s performance lies not
in the final classification step but seems to occur at
earlier stages of the process, in the candidate and
training data generation steps.
5 Related Work
Using lexico-syntactic patterns to extract semantic
relations was first explored by Hearst (Hearst, 1992),
and has inspired a large body of work on semi-
supervised relation acquisition methods (Berland
and Charniak, 1999; Agichtein and Gravano, 2000;
Etzioni et al, 2004; Pantel and Pennacchiotti,
2006b; Pas?ca et al, 2006; De Saeger et al, 2009),
two of which were used in this work.
Some researchers have addressed the sparse-
ness problems inherent in pattern based methods.
Downey et al (2007) starts from the output of
the unsupervised information extraction system Tex-
tRunner (Banko and Etzioni, 2008), and uses lan-
guage modeling techniques to estimate the reliabil-
ity of sparse extractions. Pas?ca et al (2006) alle-
833
viates pattern sparseness by using infix patterns that
are generalized using classes of distributionally sim-
ilar words. In addition, their method employs clus-
tering based semantic similarities to filter newly ex-
tracted instances in each iteration of the bootstrap-
ping process. A comparison with our method would
have been instructive, but we were unable to imple-
ment their method because the original paper con-
tains insufficient detail to allow replication.
There is a large body of research in the super-
vised tradition that does not use explicit pattern rep-
resentations ? kernel based methods (Zelenko et
al., 2003; Culotta, 2004; Bunescu and Mooney,
2005) and CRF based methods (Culotta et al, 2006).
These approaches are all fully supervised, whereas
in our work the automatic generation of candi-
dates and training data is an integral part of the
method. An interesting alternative is distant super-
vision (Mintz et al, 2009), which trains a classi-
fier using an existing database (Freebase) containing
thousands of semantic relations, with millions of in-
stances. We believe our method is more general, as
depending on external resources like a database of
semantic relations limits both the range of seman-
tic relations (i.e., Freebase contains only relations
between named entities, and none of the relations
in this work) and languages (i.e., no resource com-
parable to Freebase exists for Japanese) to which
the technology can be applied. Furthermore, it is
unclear whether distant supervision can deal with
noisy input such as automatically acquired relation
instances.
Finally, inference based methods (Carlson et al,
2010; Schoenmackers et al, 2010; Tsuchida et al,
2010) are another attempt at relation acquisition that
goes beyond pattern matching. Carlson et al (2010)
proposed a method based on inductive logic pro-
gramming (Quinlan, 1990). Schoenmackers et al
(2010) takes relation instances produced by Tex-
tRunner (Banko and Etzioni, 2008) as input and in-
duces first-order Horn clauses, and new instances are
infered using a Markov Logic Network (Richardson
and Domingo, 2006; Huynh and Mooney, 2008).
Tsuchida et al (2010) generated new relation hy-
potheses by substituting words in seed instances
with distributionally similar words. The difference
between these works and ours lies in the treatment
of evidence. While the above methods learn infer-
ence rules to acquire new relation instances from in-
dependent information sources scattered across dif-
ferent Web pages, our method takes the other option
of working with all the clues and indirect evidence a
single sentence can provide. In the future, a combi-
nation of both approaches may prove beneficial.
6 Conclusion
We have proposed a relation acquisition method that
is able to acquire semantic relations from infrequent
expressions by focusing on the evidence provided by
semantic word classes and partial pattern matching
instead of direct extraction patterns. We experimen-
tally demonstrated the effectiveness of this approach
on three relation acquisition tasks, causality, preven-
tion and material relations. In addition we showed
our method could acquire a significant number of
relation instances that are found in extremely infre-
quent expressions, the most extreme case of which
are single occurrence patterns, which are beyond
the reach of existing pattern based methods. We be-
lieve this ability is of crucial importance for acquir-
ing valuable long tail instances. In future work we
will investigate whether the current framework can
be extended to acquire inter-sentential relations.
References
Eugene Agichtein and Luis Gravano. 2000. Snowball:
extracting relations from large plain-text collections.
In Proc. of the fifth ACM conference on Digital li-
braries, pages 85?94.
Michele Banko and Oren Etzioni. 2008. The tradeoffs
between open and traditional relation extraction. In
Proc. of the 46th ACL-08:HLT, pages 28?36.
Matthew Berland and Eugene Charniak. 1999. Find-
ing parts in very large corpora. In Proceedings of the
37th Annual Meeting of the Association for Computa-
tional Linguistics, pages 57?64, College Park, Mary-
land, USA, June.
Razvan C. Bunescu and Raymond J. Mooney. 2005. A
shortest path dependency kernel for relation extrac-
tion. In Proceedings of the Conference on Human
Language Technology and Empirical Methods in Nat-
ural Language Processing (HLT ?05), pages 724?731.
Andrew Carlson, Justin Betteridge, Bryan Kisiel, Burr
Settles, Estevam R. Hruschka Jr., and Tom M.
Mitchell. 2010. Toward an architecture for neverend-
ing language learning. In Proc of the 24th AAAI, pages
1306?1313.
834
Aron Culotta, Andrew McCallum, and Jonathan Betz.
2006. Integrating probabilistic extraction models and
data mining to discover relations and patterns in text.
In Human Language Technology Conference of the
North American Chapter of the Association of Com-
putational Linguistics (HLT/NAACL), pages 296?303.
Aron Culotta. 2004. Dependency tree kernels for rela-
tion extraction. In In Proceedings of the 42nd Annual
Meeting of the Association for Computational Linguis-
tics (ACL-04, pages 423?429.
Stijn De Saeger, Kentaro Torisawa, Jun?ichi Kazama,
Kow Kuroda, and Masaki Murata. 2009. Large Scale
Relation Acquisition Using Class Dependent Patterns.
In Proc. of the 9th International Conference on Data
Mining (ICDM), pages 764?769.
Doug Downey, Stefan Schoenmackers, and Oren Etzioni.
2007. Sparse information extraction: Unsupervised
language models to the rescue. In Proceedings of the
45th Annual Meeting of the Association for Computa-
tional Linguistics (ACL2007).
Oren Etzioni, Michael Cafarella, Doug Downey, Stanley
Kok, Ana-Maria Popescu, Tal Shaked, Stephen Soder-
land, Daniel Weld, and Alexander Yates. 2004. Web-
scale information extraction in KnowItAll. In Proc. of
the 13th international conference on World Wide Web
(WWW04), pages 100?110.
Zhou GuoDong, Su Jian, Zhang Jie, and Zhang Min.
2005. Exploring various knowledge in relation extrac-
tion. In Proc. of the 43rd Annual Meeting on Associ-
ation for Computational Linguistics, ACL ?05, pages
419?444.
Marti Hearst. 1992. Automatic acquisition of hyponyms
from large text corpora. In Proc. of the 14th In-
ternational Conference on Computational Linguistics
(COLING?92), pages 539?545.
Tuyen N. Huynh and Raymond J. Mooney. 2008.
Discriminative structure and parameter learning for
markov logic networks. In Proc. of the 25th ICML,
pages 416?423.
Jun?ichi Kazama and Kentaro Torisawa. 2008. Inducing
gazetteers for named entity recognition by large-scale
clustering of dependency relations. In Proc. of the
46th Annual Meeting of the Association for Compu-
tational Linguistics: Human Language Technologies
(ACL-08: HLT), pages 407?415.
Mamoru Komachi, Taku Kudo, Masashi Shimbo, and
Yuji Matsumoto. 2008. Graph-based analysis of se-
mantic drift in espresso-like bootstrapping algorithms.
In Proc. of EMNLP?08. Honolulu, USA, pages 1011?
1020.
Dekang Lin and Patrick Pantel. 2001. Dirt - discovery
of inference rules from text. In Proc. of the ACM
SIGKDD Conference on Knowledge Discovery and
Data Mining, pages 323?328.
Mike Mintz, Steven Bills, Rion Snow, and Daniel Juraf-
sky. 2009. Distant supervision for relation extraction
without labeled data. In Proc. of the Joint Conference
of the 47th Annual Meeting of the ACL and the 4th
International Joint Conference on Natural Language
Processing of the AFNLP, pages 1003?1011.
Marius Pas?ca, Dekang Lin, Jeffrey Bigham, Andrei Lif-
chits, and Alpa Jain. 2006. Names and Similarities on
the Web: Fact Extraction in the Fast Lane. In Proc. of
the COLING-ACL06, pages 809?816.
Patrick Pantel and Marco Pennacchiotti. 2006a.
Espresso: Leveraging generic patterns for automati-
cally harvesting semantic relations. In Proc. of the
21st International Conference on Computational Lin-
guistics and 44th Annual Meeting of the Associa-
tion for Computational Linguistics (COLING-ACL-06,
pages 113?120.
Patrick Pantel and Pennacchiotti Pennacchiotti, Marco.
2006b. Espresso: Leveraging generic patterns for au-
tomatically harvesting semantic relations. In Proc. of
the COLING-ACL06, pages 113?120.
J. R. Quinlan. 1990. Learning logical definitions from
relations. Machine Learning, 5(3):239?266.
Matthew Richardson and Pedro Domingo. 2006.
Markov logic networks. Machine Learning, 26:107?
136.
Stefan Schoenmackers, Oren Etzioni, Daniel S. Weld,
and Jesse Davis. 2010. Learning first-order horn
clauses from web text. In Proc. of EMNLP2010, pages
1088?1098.
Keiji Shinzato, Tomohide Shibata, Daisuke Kawahara,
Chikara Hashimoto, and Sadao Kurohashi. 2008.
TSUBAKI: An open search engine infrastructure for
developing new information access. In Proc. of IJC-
NLP, pages 189?196.
Kentaro Torisawa, Stijn De Saeger, Jun?ichi Kazama,
Asuka Sumida, Daisuke Noguchi, Yasunari Kakizawa,
Masaaki Murata, Kow Kuroda, and Ichiro Yamada.
2010. Organizing the web?s information explosion to
discover unknown unknowns. New Generation Com-
puting, 28(3):217?236.
Masaaki Tsuchida, Stijn De Saeger, Kentaro Torisawa,
Masaki Murata, Jun?ichi Kazama, Kow Kuroda, and
Hayato Ohwada. 2010. Large scale similarity-based
relation expansion. In Proc of the 4th IUCS, pages
140?147.
Dmitry Zelenko, Chinatsu Aone, and Anthony
Richardella. 2003. Kernel methods for relation
extraction. Journal of Machine Learning Research,
pages 1083?1106.
835
Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural
Language Learning, pages 368?378, Jeju Island, Korea, 12?14 July 2012. c?2012 Association for Computational Linguistics
Why Question Answering using Sentiment Analysis and Word Classes
Jong-Hoon Oh? Kentaro Torisawa? Chikara Hashimoto ?
Takuya Kawada? Stijn De Saeger? Jun?ichi Kazama? Yiou Wang??
Information Analysis Laboratory
Universal Communication Research Institute
National Institute of Information and Communications Technology (NICT)
{? rovellia,? torisawa,? ch,? tkawada,?stijn,? kazama,??wangyiou}@nict.go.jp
Abstract
In this paper we explore the utility of sen-
timent analysis and semantic word classes
for improving why-question answering on a
large-scale web corpus. Our work is moti-
vated by the observation that a why-question
and its answer often follow the pattern that if
something undesirable happens, the reason is
also often something undesirable, and if some-
thing desirable happens, the reason is also of-
ten something desirable. To the best of our
knowledge, this is the first work that intro-
duces sentiment analysis to non-factoid ques-
tion answering. We combine this simple idea
with semantic word classes for ranking an-
swers to why-questions and show that on a set
of 850 why-questions our method gains 15.2%
improvement in precision at the top-1 answer
over a baseline state-of-the-art QA system that
achieved the best performance in a shared task
of Japanese non-factoid QA in NTCIR-6.
1 Introduction
Question Answering (QA) research for factoid ques-
tions has recently achieved great success as demon-
strated by IBM?s Watson at Jeopardy: its accuracy
has been reported to be around 85% on factoid ques-
tions (Ferrucci et al2010). Although recent shared
QA tasks (Voorhees, 2004; Pe?as et al2011; Fuku-
moto et al2007) have stimulated the research com-
munity to move beyond factoid QA, comparatively
little attention has been paid to QA for non-factoid
questions such as why questions and how to ques-
tions, and the performance of the state-of-art non-
factoid QA systems reported in the literature (Mu-
rata et al2007; Surdeanu et al2011; Verberne et
al., 2010) remains considerably lower than that of
factoid QA (i.e., 34% in MRR at top-150 results on
why-questions (Verberne et al2010)).
In this paper we explore the utility of sentiment
analysis (Pang et al2002; Turney, 2002; Nakagawa
et al2010) and semantic word classes for improv-
ing why-question answering (why-QA) on a large-
scale web corpus. The inspiration behind this work
is the observation that why-questions and their an-
swers often have the following tendency:
? if something undesirable happens, the reason is
often also something undesirable, and
? if something desirable happens, its reason is of-
ten also desirable.
Consider the following question Q1, and its an-
swer candidates A1-1 and A1-2.
? Q1: Why does cancer occur?
? A1-1: Carcinogens such as nitrosamine and
benzopyrene may increase the risk of cancer by
altering DNA in cells.
? A1-2: Maintaining a healthy weight may lower
the risk of various types of cancer.
Here A1-1 describes an undesirable event related to
cancer, while A1-2 suggests a desirable action for
its prevention. Our hypothesis suggests that A1-1
is more appropriate for answering Q1. If this hy-
pothesis holds, we can obtain a significant improve-
ment in performance on why-QA tasks by exploiting
the sentiment orientation1 of expressions obtainable
1 In this paper we denote the desirable/undesirable polar-
ity of an expression by the term ?sentiment orientation? instead
of ?semantic orientation? to avoid confusion with our different
notion of ?semantic word classes.?
368
by automatic sentiment analysis of questions and an-
swers.
A second observation motivating this work is that
there are often significant associations between the
lexico-semantic classes of words in a question and
those in its answer sentence. For instance, questions
concerning diseases like Q1 often have answers that
include references to specific semantic word classes
such as chemicals (like A1-1), viruses, body parts,
and so on. Capturing such statistical correlations be-
tween diseases and harmful substances may lead to
higher why-QA performance. For this purpose we
use classes of semantically similar words that were
automatically acquired from a large web corpus us-
ing an EM-based clustering method (Kazama and
Torisawa, 2008).
Another issue is that simply introducing the sen-
timent orientation of words or phrases in question
and answer sentences in a naive way is insufficient,
since answer candidate sentences may contain mul-
tiple sentiment expressions with different polarities
in answer candidates (i.e., about 33% of correct an-
swers had such multiple sentiment expressions with
different polarities in our test set). For example, if
A1-2 contained a second sentiment expression with
negative polarity like the example below,
?Trusting a specific food is not effective
for preventing cancer, but maintaining a
healthy weight may help lower the risk of
various types of cancer.?
both A1-1 and A1-2 would contain sentiment ex-
pressions with the same polarity as that of Q1. Thus,
it is difficult to expect that the sentiment orientation
alone will work well for recognizing A1-1 as a cor-
rect answer to Q1. To address this problem, we con-
sider the combination of sentiment polarity and the
contents of sentiment expressions associated with
the polarity in questions and their answer candidates
as well. To deal with the data sparseness problem
arising in using the content of sentiment expressions,
we developed a feature set that combines the polar-
ity and the semantic word classes effectively.
We exploit these two main ideas (concerned with
the sentiment orientation and the semantic classes
described so far) for training a supervised classi-
fier to rank answer candidates to why-questions.
Through a series of experiments on 850 Japanese
why-questions, we showed that the proposed seman-
tic features were effective in identifying correct an-
swers, and our proposed method obtained more than
15% improvement in precision of its top answer
(P@1) over our baseline, which achieved the best
performance in the non-factoid QA task in NTCIR-
6 (Murata et al2007). We also show that our
method can potentially perform with high precision
(64.8% in P@1) when answer candidates containing
at least one correct answer are given to our re-ranker.
2 Approach
Our proposed method is composed of answer re-
trieval and answer re-ranking. The first step, an-
swer retrieval, extracts a set of answer candidates to
a why-question from 600 million Japanese Web cor-
pus. The answer retrieval is our implementation of
the state-of-art method that has shown the best per-
formance in the shared task of Japanese non-factoid
QA in NTCIR-6 (Murata et al2007; Fukumoto et
al., 2007). The second step, answer re-ranking, is
the focus of this work.
2.1 Answer Retrieval
We use Solr2 to retrieve documents from a 600 mil-
lion Japanese Web page corpus3for a given why-
question. Let a set of content words in a why-
question be T = {t1, ? ? ? , tn}. Two boolean queries
for a why-question, ?t1 AND ? ? ? AND tn? and ?t1
OR ? ? ? OR tn,? are given to Solr and top-300 doc-
uments for each query are retrieved. Note that re-
trieved documents by each query have different cov-
erage and relevance to a given why-question. To
keep balance between the coverage and relevance of
retrieved documents, we use a set of retrieved doc-
uments by these two queries for obtaining answer
candidates. Each document in the result of docu-
ment retrieval is split into a set of answer candi-
dates consisting of five subsequent sentences4. Sub-
sequent answer candidates can share up to two sen-
tences to avoid errors due to wrong document seg-
mentation.
2 http://lucene.apache.org/solr
3 To the best of our knowledge, few Japanese non-factoid
QA systems in the literature have used such a large-scale cor-
pus.
4 The length of acceptable answer candidates for why-
QA in the literature ranges from one sentence to two para-
graphs (Fukumoto et al2007; Murata et al2007; Higashinaka
and Isozaki, 2008; Verberne et al2007; Verberne et al2010).
369
Answer candidate ac for question q is ranked
according to scoring function S(q, ac) given in
Eq. (1) (Murata et al2007). Murata et al2007)?s
method uses text search to look for answer candi-
dates containing terms from the question with ad-
ditional clue terms referring to ?reason? or ?cause.?
Following the original method we used riyuu (rea-
son), genin (cause) and youin (cause) as clue terms.
The top-20 answer candidates for each question are
passed on to the next step, which is answer re-
ranking. S(q, ac) assigns a score to answer candi-
dates like tf -idf , where 1/dist(t1, t2) functions like
tf and 1/df(t2) is idf for given terms t1 and t2 that
are shared by q and ac.
S(q, ac) = maxt1?T
?
t2?T
?? log(ts(t1, t2)) (1)
ts(t1, t2) =
N
2? dist(t1, t2)? df(t2)
Here T is a set of terms including nouns, verbs, and
adjectives in question q that appear in answer can-
didate ac. Note that the clue terms are added to T
if they exist in ac. N is the total number of docu-
ments (600 million), dist(t1, t2) represents the dis-
tance (the number of characters) between t1 and t2
in answer candidate ac, df(t) is the document fre-
quency of term t, and ? ? {0, 1} is an indicator,
where ? = 1 if ts(t1, t2) > 1, ? = 0 otherwise.
2.2 Answer Re-ranking
Our re-ranker is a supervised classifier (SVMs)
(Vapnik, 1995) that uses three types of feature
sets: features expressing morphological and syn-
tactic analysis of questions and answer candidates,
features representing semantic word classes appear-
ing in questions and answer candidates, and features
from sentiment analysis. All answer candidates of a
question are ranked in a descending order of their
score given by SVMs. We trained and tested the
re-ranker using 10-fold cross validation on a cor-
pus composed of 850 why-questions and their top-
20 answer candidates provided by the answer re-
trieval procedure in Section 2.1. The answer candi-
dates were manually annotated by three human an-
notators (not by the authors). Our corpus construc-
tion method is described in more detail in Section 4.
3 Features for Answer Re-ranking
This section describes our feature sets for answer
re-ranking: features expressing morphological and
syntactic analysis (MSA), features representing se-
mantic word class (SWC), and features indicat-
ing sentiment analysis (SA). MSA, which has been
widely used for re-ranking answers in the literature,
is used to identify associations between questions
and answers at the morpheme, word phrase, and syn-
tactic dependency levels. The other two feature sets
are proposed in this paper. SWC is devised for iden-
tifying semantic word class associations between
questions and answers. SA is used for identify-
ing sentiment orientation associations between ques-
tions and answers as well as expressing the combi-
nation of each sentiment expression and its polarity.
Table 1 summarizes the respective feature sets, each
of which is described in detail below.
3.1 Morphological and Syntactic Analysis
MSA including n-grams of morphemes, words, and
syntactic dependencies has been widely used for re-
ranking answers in non-factoid QA (Higashinaka
and Isozaki, 2008; Surdeanu et al2011; Verberne
et al2007; Verberne et al2010). We use MSA as
a baseline feature set in this work.
We represent all sentences in a question and
its answer candidate in three ways: morphemes,
word phrases (bunsetsu5) and syntactic dependency
chains. These are obtained using a morphological
analyzer6 and a dependency parser7. From each
question and answer candidate we extract n-grams
of morphemes, word phrases, and syntactic depen-
dencies, where n ranges from 1 to 3. Syntactic de-
pendency n-grams are defined as a syntactic depen-
dency chain containing n word phrases. Syntactic
dependency 1-grams coincide with word phrase 1-
grams, so they are ignored.
Table 1 defines four types of MSA (MSA1 to
MSA4). MSA1 is n-gram features from all sen-
tences in a question and its answer candidates and
distinguishes an n-gram feature found in a ques-
tion from that same feature found in answer candi-
dates. MSA2 contains n-grams found in the answer
5 A bunsetsu is a syntactic constituent composed of a content
word and several function words such as post-positions and case
markers. It is the smallest unit of syntactic analysis in Japanese.
6 http://nlp.ist.i.kyoto-u.ac.jp/EN/index.php?JUMAN
7 http://nlp.ist.i.kyoto-u.ac.jp/EN/index.php?KNP
370
MSA1 Morpheme n-grams, word phrase n-grams, and syntactic dependency n-grams in a question and its answer candidate, where n ranges
from 1 to 3. n-grams in a question and those in an answer candidate are distinguished.
MSA2 MSA1?s n-grams in an answer candidate that contain a question term.
MSA3 MSA1?s n-grams that contain a clue term including riyuu (reason), genin (cause) and youin (cause). These n-grams in a question and
those in an answer candidate are distinguished.
MSA4 The ratio of the number of question terms in an answer candidate to the total number of question terms.
SWC1 Word class n-grams in a question and its answer candidate. These n-grams in a question and those in an answer candidate are distin-
guished.
SWC2 SWC1?s n-grams in an answer candidate whose original MSA1?s n-grams contain any question term.
SA@W1 Word polarity n-grams in a question and its answer candidate. These n-grams in a question and those in an answer candidate are
distinguished.
SA@W2 SA@W1?s n-grams in an answer candidate whose original MSA1 n-grams contain any question term.
SA@W3 Joint class-polarity n-grams in a question and its answer candidate. These n-grams in a question and those in an answer candidate are
distinguished.
SA@W4 SA@W3?s n-grams in an answer candidates whose original MSA1 n-grams contain any question term.
SA@P1 The indicator for polarity agreement between sentiment phrases, one in a question and the other in an answer candidate: 1 if any pair of
such sentiment phrases has polarity in agreement, 0 otherwise.
SA@P2 The phrase-polarity, positive or negative, of a pair of sentiment phrases for which the indicator in SA@P1 is 1.
SA@P3 Morpheme n-grams, word phrase n-grams, and syntactic dependency n-grams in sentiment phrases are coupled with their phrase-polarity,
where n ranges from 1 to 3. These n-grams in a question and those in an answer candidate are distinguished.
SA@P4 SA@P3?s n-grams in an answer candidates that contain a question term.
SA@P5 The ratio of the number of question terms in sentences that have sentiment phrases in answer candidates to the total number of question
terms.
SA@P6 Word class n-grams in sentiment phrases are coupled with phrase-polarity. These n-grams in a question and those in an answer candidate
are distinguished.
SA@P7 SA@P6?s n-grams in an answer candidates, whose original MSA1?s n-grams include any question term.
SA@P8 Joint class-polarity n-grams in sentiment phrases of a question and its answer candidate are coupled with phrase-polarity of the sentiment
phrases. These n-grams in a question and those in an answer candidate are distinguished.
SA@P9 SA@P8?s n-grams in an answer candidates, whose original MSA1?s n-grams include any question term.
SA@P10 A pair of SA@P6?s n-grams, one from sentiment phrases in a question and the other from those in an answer candidate, where the two
sentiment phrases should have the same sentiment orientation.
Table 1: Features used in training our re-ranker
candidates that themselves contain a term from the
question (e.g., ?types of cancer? in example A1-2).
MSA3 is the n-gram feature that contains one of the
clue terms used for answer retrieval (riyuu (reason),
genin (cause) or youin (cause)). Here too, n-grams
obtained from the questions and answer candidates
are distinguished. Finally, MSA4 is the percentage
of the question terms found in an answer candidate.
3.2 Semantic Word Class
Semantic word classes are sets of semantically simi-
lar words. We construct these semantic word classes
by using the noun clustering algorithm proposed in
Kazama and Torisawa (2008). The algorithm fol-
lows the distributional hypothesis, which states that
semantically similar words tend to appear in simi-
lar contexts (Harris, 1954). By treating syntactic de-
pendency relations between words as ?contexts,? the
clustering method defines a probabilistic model of
noun-verb dependencies with hidden classes as:
p(n, v, r) =
?
c
p(n|c)p(?v, r?|c)p(c) (2)
Here, n is a noun, v is a verb or noun on which n de-
pends via a grammatical relation r (post-positions in
Japanese), and c is a hidden class. Dependency rela-
tion frequencies were obtained from our 600-million
page web corpus, and model parameters p(n|c),
p(?v, r?|c) and p(c) were estimated using the EM
algorithm (Hofmann, 1999). We successfully clus-
tered 5.5 million nouns into 500 classes. For each
noun n, EM clustering estimates a probability dis-
tribution over hidden variables representing seman-
tic classes. From this distribution we obtained dis-
crete semantic word classes by assigning each noun
n to semantic class c = argmaxc? p(c?|n). The
resulting classes actually form clean semantic cat-
egories such as chemicals, nutrients, diseases and
conditions, in our examples of Q1 and Q2. The fol-
lowing are the top-10 words (English translation) ac-
cording to p(c|n) for these classes.
chemicals: acetylene, hydrogenation product,
phosphoric monoester, methacrylate, levoglu-
cosan, ammonium salt, halogenated organic
compound, benzonitrile, alkyne, nitrosamine
371
nutrients: glucide, carbonhydrate, mineral, salt,
sugar, water, fat, vitamin, nutrients, protein
diseases: pneumonia, neuritis, cancer, oral leuko-
plakia, pachymeningitis, acidosis, encephalitis,
abdominal injury, valvulitis, gingivitis
conditions: proficiency, decrepitude, deficiency,
impurity, abnormalities, floated, crisis, dis-
placement, condition, shortage
Semantic word class (SWC) features are used to
capture associations between semantic classes of
words in the question and those in the answer candi-
dates. For example:
? Q2: Why does rickets (Wdisease) occur in chil-
dren?
? A2: Deficiency (Wcondition) of vitamin D
(Wnutrients) can cause rickets (Wdisease).
Wcondition, Wdisease and Wnutrients represent se-
mantic word classes of conditions, diseases and nu-
trients, respectively. If this question-answer pair is
given to the classifier as a positive training sample,
we expect it to learn that if a disease name appears
in a question then, everything else being equal, an-
swers including nutrient names are more likely to be
correct. Note that in principle the same association
could be learned between word pairs, i.e., rickets and
vitamin D. However, we found that word level asso-
ciations are often too specific, and because of data
sparseness this knowledge cannot easily be general-
ized to unseen questions. This is our main motiva-
tion for introducing broad coverage semantic word
classes into the feature set.
We call the feature set with the word classes SWC
and use two types of SWC, as shown in Table 1. To
obtain the first type (SWC1), we convert all nouns
in the MSA1 n-grams into their respective word
classes, and keep all n-grams that contain at least
one word class. We call these features word class
n-grams. Again, word class n-grams obtained from
questions are distinguished from the ones in answer
candidates. For example, we extract ?Wdisease oc-
cur? as a word class 2-gram from Q2.
The second type of SWC, SWC2, represents word
class n-grams in an answer candidate, in which
question terms are replaced by their respective se-
mantic word classes. For example, Wdisease in word
class 2-gram ?cause Wdisease? from A2 is the se-
mantic word class of rickets, one of the question
terms. These features capture the correspondence
between semantic word classes in the question and
answer candidates.
3.3 Sentiment Analysis
Sentiment analysis (SA) features are classified into
word-polarity and phrase-polarity features. We use
opinion extraction tool8 and sentiment orientation
lexicon in the tool for these features.
3.3.1 Opinion Extraction Tool
Opinion extraction tool is a software, the im-
plementation of Nakagawa et al2010). It ex-
tracts linguistic expressions representing opinions
(henceforth, we call them sentiment phrases) from
a Japanese sentence and then identifies the polarity
of these sentiment phrases using machine learning
techniques. For example, rickets occur in Q2 and
Deficiency of vitamin D can cause rickets in A2 can
be identified as sentiment phrases with a negative
polarity. The tool identifies sentiment phrases and
their polarity by using polarities of words and de-
pendency subtrees as evidence, where these polari-
ties are given in a word polarity dictionary.
In this paper, we use a trained model and a word
polarity dictionary (containing about 35,000 entries)
distributed via the ALAGIN forum9 for our sen-
timent analysis. Table 2 shows the performance
of opinion extraction tool, precision (P), recall (R)
and F-value (F), in this setting (reported in the
Japanese homepage of this tool). In the evaluation of
sentiment-phrase extraction, an extracted sentiment
phrase is determined as correct if its head word is
the same as one in the gold standard. Polarity clas-
sification is evaluated under the condition that all of
the sentiment phrases are correctly extracted.
P R F
Sentiment-phrase extraction 0.602 0.408 0.486
Polarity classification (pos.) 0.873 0.893 0.883
Polarity classification (neg.) 0.866 0.842 0.854
Table 2: The performance of opinion extraction tool
3.3.2 Word Polarity (SA@W)
Polarities of words are identified by simply look-
ing up the word polarity dictionary of opinion ex-
8 Available at http://alaginrc.nict.go.jp/opinion/index_e.html
9 http://www.alagin.jp/index-e.html. Only the members of
the ALAGIN forum can access these resources.
372
traction tool. Word polarity features are used
for identifying associations between the polarity of
words in a question and that in a correct answer. For
example:
? Q2: Why does rickets (W?) occur in children?
? A2: Deficiency (W?) of vitamin D can cause
rickets (W?).
Here, W? represents negative word polarities. We
expect our classifier to learn from this question and
answer pair that if a word with negative polarity ap-
pears in a question then its correct answer is likely
to contain a negative polarity word as well.
SA@W1 and SA@W2 in Table 1 are sentiment
analysis features from word polarity n-grams, which
contain at least one word that has word polarities.
We obtain these n-grams by converting all nouns in
MSA1 n-grams into their word polarities through
dictionary lookup. For example, from Q2 in the
above example we extract ?W? occur? as a word
polarity 2-gram. SA@W1 is concerned with all
word polarity n-grams in questions and answer can-
didates. For SA@W2, we restrict word polarity
n-grams from SA@W1 to those whose original n-
gram include a question term.
Furthermore, word polarities are coupled with se-
mantic word classes so that our classifier can iden-
tify meaningful combinations of both. For example,
deficiency in A2 can be represented asW?condition by
its respective semantic word class and word polar-
ity, which allows for the representation of undesir-
able conditions. This in turn lets our system learn
meaningful correlations between words expressing
these kind of negative conditions and their connec-
tion to questions asking about diseases. SA@W3
and SA@W4 are features from this combination.
They are defined in the same way as SA@W1 and
SA@W2 except that word polarities are replaced
with the combination of semantic word classes and
word polarities. We call n-grams in SA@W3 and
SA@W4 joint (word) class-polarity n-grams.
3.3.3 Phrase Polarity (SA@P)
Opinion extraction tool is applied to question and
its answer candidate to identify sentiment phrases
and their phrase-polarities. In preliminary tests we
found that sentiment phrases do not help to iden-
tify correct answers if answer sentences including
the sentiment phrases do not have any term from the
question. So we restrict the target sentiment phrases
to those acquired from sentences containing at least
one question term. From these sentiment phrases we
extract three categories of features.
First, SA@P1 and SA@P2 are features concerned
with phrase-polarity agreement between sentiment
phrases in a question and its answer candidate. We
consider all possible pairs of sentiment phrases from
the question and answer. If any such pair agrees
in phrase-polarity, an indicator for the agreement
and its polarity in the agreement become features
SA@P1 and SA@P2, respectively.
Secondly, following the original hypothesis un-
derlying this paper, we assume that sentiment
phrases often represent the core part of the cor-
rect answer (e.g., A2 above) and it is important
to express the content of the sentiment phrases in
features. SA@P3 and SA@P4 were devised for
this purpose. SA@P3 represents this sentiment
phrase contents as n-grams of morphemes, words,
and syntactic dependencies of sentiment phrases,
together with their phrase-polarity. Furthermore,
SA@P4 is the subset of SA@P3 n-grams restricted
to those that include terms found in the question,
and SA@P5 indicates the percentage of sentiment
n-grams from the question that are found in a given
answer candidate.
Finally, features SA@P6 through SA@P9 use se-
mantic word classes to generalize the content fea-
tures mentioned above. These features consist of
word class n-grams and joint class-polarity n-grams
taken from sentiment phrases, together with their
phrase polarity. Similar to the definition of SA@P4,
for SA@P7 and SA@P9 we restrict ourselves to n-
grams containing a question term. SA@P10 repre-
sents the semantic content of two sentiment phrases
with the same sentiment orientation (one from a
question and the other from an answer candidate)
using word class n-grams, together with the phrase-
polarity in agreement.
4 Test Set
We prepared three sets of why-questions (QS1, QS2
and QS3) and used these questions to build two test
sets for our experiments.
Why-questions in QS1 are taken from the
Japanese version of Yahoo! Answers (called Ya-
hoo! Chiebukuro)10. We automatically extracted
10 We used ?Yahoo! Chiebukuro Data (2nd edition)? which is
373
questions consisting of a single sentence and con-
taining the interrogative naze (why), and our anno-
tators verified that these questions are meaningful
without further context. For example, they discarded
questions like ?Why doesn?t the WBC (world box-
ing council) make an objection to the WBC (World
baseball classic)?? (the object of the objection is
unclear) and ?Why do minors trade at the auction
even though it is disallowed by the rules? (informa-
tion about which auction is not provided).
Because questions in Yahoo! Answers are aimed
at human readers, users often ?set the stage? by giv-
ing lots of background information about their ques-
tion. This often leads to large stylistic differences
between the questions in Yahoo! Answers and those
typically posed to a QA system. We therefore cre-
ated a second set of why-questions, QS2, whose
style should be more appropriate for a QA system
(examples showing these differences are given in the
supplementary materials of this paper). Six human
annotators (not the authors) were asked to create
why-questions in their own words, keeping in mind
that the questions they create are for a QA system. In
addition, the annotators were asked to verify on the
Web that the questions they created ask about some
real event or phenomena. For example, a question
like ?Why does Mars appear blue?? is disallowed in
QS2 because ?Mars appears blue? is false. Note that
the correct answer to these questions does not have
to be either in our target corpus or in real-world Web
texts. These two sets of why-questions, QS1 and
QS2, are used to build a test set for evaluating our
proposed method.
Finally, QS3 contains why-questions that have at
least one answer in our target corpus (600 million
Japanese Web page corpus). For creating such why-
questions, four human annotators (not the authors)
were given a text passage composed of three contin-
uous sentences and asked to locate the reasons for
some event as described in this passage. Then they
created a why-question for which the description is a
correct answer. Because randomly selected passages
from our target corpus have little chance of generat-
ing good why-questions we extracted passages from
our target corpus that include at least one of the clue
terms used in our answer retrieval step (i.e. riyuu
(reason), genin (cause), or youin (cause)). This set-
provided by Yahoo Japan Corporation and contains 16 million
questions asked from April, 2004 to April 2009.
ting may not necessarily reflect a ?real world? dis-
tribution of why-questions, in which ideally a wide
range of people ask questions that may or may not
have an answer in our corpus. However, QS3 al-
lows us to evaluate our method under the idealized
conditions where we have a perfect answer retrieval
module whose answer candidates always contain at
least one correct answer (the source passage used
for creating the why-question). This setting allows
us to estimate the ideal-case performance of our
method. Under these circumstances we found that
our method achieves almost 65% precision in P@1,
which suggests that it can potentially perform with
high precision if the answer candidates given by the
answer retrieval module contain at least one correct
answer. This is the main purpose of QS3. Addition-
ally, we use QS3 for building training data, to check
whether questions that do not reflect the real-world
distribution of why-questions are useful for improv-
ing the system?s performance on ?real-world? ques-
tions (see Section 5.1).
In addition, we checked QS1, QS2 and QS3 for
questions having the same topic, to avoid the pos-
sibility that the distribution of questions is biased
towards certain topics. We manually extracted the
questions? topic words and randomly selected a sin-
gle representative question from all questions with
the same topic. For example, ?Why does Twitter
only allow 140 characters?? and ?Why is Twitter
so popular?? both have as topic Twitter. In the end
we obtained 250 questions in QS1, 250 questions in
QS2 and 350 questions in QS3.
For evaluation we prepared two test sets, Set1 and
Set2. Set1 contains question-answer pairs whose
questions are taken from QS1 and QS2. In our ex-
periment, we evaluate systems with 10-fold cross
validation on Set1. Set2 has question-answer pairs
whose questions are from QS3. Set2 is mainly used
for estimating estimate the ideal-case performance
of our method with a perfect answer retrieval mod-
ule. Furthermore Set2 is used as additional training
data in evaluating systems with 10-fold cross vali-
dation on Set1. We used our answer retrieval sys-
tem to obtain the top-20 answer candidates for each
question, and all question-answer (candidate) pairs
were checked by three annotators, where their inter-
rater agreement (Fleiss? kappa) was 0.634, indicat-
ing substantial agreement. Finally, correct answers
to each question were determined by majority vote.
374
Q1:???????????????????????????????????????????
(Why does the increase of greenhouse gases such as carbon dioxide in the atmosphere lead to a rise of ocean level?)
A1: .. ????????????????????????????????????????????????????????
??????????????????????????????????????? ... ???????????????????
???????????????????????
(The burning of fossil fuels contributes to the increase of atmospheric concentrations of greenhouse gases and this makes the atmosphere absorb more
thermal radiation. As a result, Earth?s average surface temperature increases. This is global warming. ... There are warnings that the increase of sea
water and melting of polar ice due to the global warming may cause sea-surface height to rise by 9?88 cm on average.
Q2:?????????????????????????????
(Why does hemoglobin deficiency cause lack of oxygen in the human body?)
A2:... ????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????..
(... Hemoglobin has an important role in the human body of carrying oxygen to the organs and transferring carbon dioxide back to the lungs, to be
dispensed from the organism. If the amount of hemoglobin produced by the body is insufficient due to iron deficiency, the amount of oxygen delivered
throughout the body decreases, causing oxygen deficiency. ... )
Table 3: Correct question-answer pairs in our test set
Table 3 shows a sample of correct question-answer
pairs in our test set. Please see the supplementary
materials of this paper for more examples.
Note that word and phrase polarities are not con-
sidered by the annotators in building our test sets
and these polarities are automatically identified us-
ing a word polarity dictionary and opinion extraction
tool. We confirmed that about 35% of questions and
40% of answer candidates had at least one sentiment
phrase by opinion extraction tool, and about 45% of
questions and 85% of answer candidates contained
at least one word having polarity by a word polarity
dictionary.
5 Experiments
We use TinySVM11 with a linear kernel for training
our re-ranker. Evaluation was done by P@1 (Pre-
cision of the top answer) and MAP (Mean Average
Precision). P@1 measures how many questions have
a correct top answer candidate. MAP, widely used in
evaluation of IR systems, measures the overall qual-
ity of the top-n answer candidates (n=20 in this ex-
periment) using the formula:
MAP =
1
|Q|
?
q?Q
?n
k=1(Prec(k)? rel(k))
|Aq|
(3)
Here Q is a set of why-questions, Aq is a set of cor-
rect answers to why-question q ? Q, Prec(k) is the
precision at cut-off k in the top-n answer candidates,
rel(k) is an indicator, 1 if the item at rank k is a cor-
rect answer in Aq, 0 otherwise.
We evaluated all systems using 10-fold cross val-
idation in two ways. In the first setting we per-
formed 10-fold cross validation on Set1. Set1 con-
11 http://chasen.org/?taku/software/TinySVM/
sists of 10,000 question-answer pairs (500 questions
with their 20 answer candidates), and was parti-
tioned into 10 subsamples such that the questions
in one subsample do not overlap with those of the
other subsamples. 9 subsamples (9,000 question-
answer pairs) were used as training data and the
remaining subsample (1,000 question-answer pairs)
was retained as test data. This experiment is called
CV(Set1). It shows the effect of answer re-ranking
when evaluating our proposed method with train-
ing data built with real world why-questions alone.
In the second setting, we used the same 10 sub-
samples of Set1 as in CV(Set1) and exploited Set2
(composed of 7,000 question-answer pairs) as ad-
ditional training data for 10-fold cross validation.
As a result, in each fold 16,000 question-answer
pairs (9,000 from Set1 and 7,000 from Set2) were
used as training data for re-rankers, and all systems
were evaluated on the remaining 1,000 question-
answer pair subsample from Set1. We call this set-
ting CV(Set1+Set2). It verifies whether training
data that does not necessarily reflect a real-world
distribution of why-questions can improve why-QA
performance on real-world questions.
5.1 Results
Table 4 shows the evaluation results of six different
systems. For each system, we represent the perfor-
mance in P@1 and MAP. B-QA is a system of our
answer retrieval and the other five re-rank top-20 an-
swer candidates using their own re-ranker.
B-QA: our answer retrieval system, our implemen-
tation of Murata et al2007).
B-Ranker: a system that has a re-ranker trained
with morphological and syntactic analysis
(MSA) features alone.
375
System CV(Set1) CV(Set1+Set2)P@1 MAP P@1 MAP
B-QA 0.222 (0.368) 0.270 (0.447) 0.222 (0.368) 0.270 (0.447)
B-Ranker 0.256 (0.424) 0.319 (0.528) 0.274 (0.454) 0.323 (0.535)
B-Ranker+CR 0.262 (0.434) 0.319 (0.528) 0.278 (0.460) 0.325 (0.538)
B-Ranker+WN 0.257 (0.425) 0.320 (0.530) 0.275 (0.455) 0.325 (0.538)
Proposed 0.336 (0.56) 0.377 (0.624) 0.374 (0.619) 0.391 (0.647)
UpperBound 0.604 (1) 0.604 (1) 0.604 (1) 0.604 (1)
Table 4: Comparison of systems
B-Ranker+CR: a system has a re-ranker trained
with our MSA features and the causal relation
(CR) features used in Higashinaka and Isozaki
(2008). The CR features include binary fea-
tures indicating whether an answer candidate
contains a causal relation pattern, which causal
relation pattern the answer candidate has, and
whether the question-answer pair contains a
causal relation instance ? cause in the answer,
effect in the question). We acquired causal
relation instances from our target corpus us-
ing the method from (De Saeger et al2009),
and exploited the top-100,000 causal relation
instances and the patterns that extracted them
for CR features. Note that these CR features
are introduced only for comparing our semantic
features with ones in Higashinaka and Isozaki
(2008) and they are not a part of our method.
B-Ranker+WN: its re-ranker is trained with our
MSA features and the WordNet features in Ver-
berne et al2010). The WordNet features in-
clude the percentage of the question terms and
their synonyms in WordNet synsets found in
an answer candidate and the semantic related-
ness score between a question and its answer
candidate, the average of the concept similar-
ity between each question term and all of the
answer terms by WordNet::Similarity (Peder-
sen et al2004). We used the Japanese Word-
Net 1.1 (Bond et al2009) for these WordNet
features. Note that the Japanese WordNet 1.1
has 93,834 Japanese words linked to 57,238
WordNet synsets, while the English WordNet
3.0 covers 155,287 words linked to 117,659
synsets. Due to this lower coverage, the Word-
Net features in Japanese may have a less power
for finding a correct answer than those in En-
glish used in Verberne et al2010).
Proposed: our proposed method. All of the MSA,
SWC and SA features are used for training our
re-ranker.
UpperBound: a system that ranks all n correct an-
swers as the top n results of the 20 answer can-
didates if there are any. This indicates the per-
formance upperbound in this experiment. The
relative performance of each system compared
to UpperBound is shown in parentheses.
The proposed method achieved the best perfor-
mance both in CV(Set1) and CV(Set1+Set2). Our
method shows a significant improvement (11.4?
15.2% in P@1 and 10.7?12.1% in MAP) over our
answer retrieval method, B-QA. Its improvement
over B-Ranker, B-Ranker+CR and B-Ranker+WN
(7.6?10% in P@1 and 5.7?6.6% in MAP) shows
the effectiveness of our proposed feature set over
the features used in previous works. Both B-
Ranker+CR and B-Ranker+WN did not show signif-
icant performance improvement over B-Ranker. At
least in our setting, the causal relation and WordNet
features did not prove effective. The performance
gap between B-Ranker and B-QA (3.4?5.2% in P@1
and 4.9?5.3% in MAP) suggests the effectiveness
of re-ranking. All systems consistently show better
performance in CV(Set1+Set2) than CV(Set1). This
suggests that training data built with why-questions
that does not reflect real-world distribution of why-
questions is useful in training re-rankers.
We investigate the contribution of each type of
features to the performance by removing one fea-
ture set from the all feature sets in training our re-
ranker. In this experiment, we split SA into SA@W
(features expressing words and their polarity) and
SA@P (features expressing phrases and their po-
larity) to investigate their contribution either. The
results are summarized in Table 5.
In Table 5, MSA+SWC+SA represents our pro-
posed method using all feature sets. The perfor-
mance gap between MSA+SWC+SA and the others
confirms that all the features contributed to a higher
376
System CV(Set1) CV(Set1+Set2)P@1 MAP P@1 MAP
SWC+SA 0.302 0.324 0.314 0.332
MSA+SWC 0.308 0.349 0.318 0.358
MSA+SA 0.300 0.352 0.314 0.364
MSA+SWC+SA@W 0.312 0.358 0.325 0.365
MSA+SWC+SA@P 0.323 0.369 0.358 0.384
MSA+SWC+SA 0.336 0.377 0.374 0.391
UpperBound 0.604 0.604 0.604 0.604
Table 5: Evaluation with different combination of feature
sets used in training our re-ranker
performance. The significant performance improve-
ment by SA (features from sentiment analysis) and
SWC (features from semantic word classes) (The
gap between MSA+SWC+SA and MSA+SWC was
2.8?6% and that between MSA+SWC+SA and
MSA+SA was 3.6%?6% in P@1) supports the hy-
pothesis for sentiment analysis and semantic word
classes in this paper.
Though the performance gap between
MSA+SWC+SA and MSA+SWC+SA@P
(1.3%?1.6% in P@1) shows that SA@W is
useful in training our re-ranker, we found that
MSA+SWC+SA@W made only 0.4?0.7% im-
provement over MSA+SWC. We believe that this
is mainly because SA@W and SWC are based on
semantic and sentiment information at the word
level, and these often capture a similar type of
information. For instance, disease names that are
grouped together into one class in SWC are typi-
cally classified as negative in SA@W. Therefore the
similarity in the information provided by SA@W
and SWC causes a classifier trained with both of
these features to obtain only a minor improvement
over a classifier using only one of the features.
To estimate the ideal-case performance of our
proposed method, we made another experiment by
using Set1 as training data for our re-ranker and
Set2 as test data for evaluating our proposed method.
Here, we assume a perfect answer retrieval module
that adds the source passage that was used for gener-
ating the original why-question in Set2 as a correct
answer to the set of existing answer candidates, giv-
ing 21 answer candidates. The performance of our
method in this setting was 64.8% in P@1 and 66.6%
in MAP. This evaluation result suggests that our re-
ranker can potentially perform with high precision
when at least one correct answer in answer candi-
dates is given by the answer retrieval module.
6 Related Work
In the QA literature, Higashinaka and Isozaki
(2008), Verberne et al2010), and Surdeanu et al
(2011) are closest to our work. The first two deal
with why-questions, the last with how-questions.
Similar to our method, they use machine learn-
ing techniques to re-rank answer candidates to non-
factoid questions based on various combinations of
syntactic, semantic and other statistical features such
as the density and frequency of question terms in the
answer candidates and patterns for causal relations
in the answer candidates. Especially for why-QA,
Higashinaka and Isozaki (2008) used causal relation
features and Verberne et al2010) exploited Word-
Net features as a kind of semantic features for train-
ing their re-ranker, where we used these features, re-
spectively, for B-Ranker+CR and B-Ranker+WN in
our experiment.
Our work differs from the above approaches in
that we propose semantic word classes and senti-
ment analysis as a new type of semantic features,
and show their usefulness in why-QA. Sentiment
analysis has been used before on the slightly un-
usual task of opinion question answering, where the
system is asked to answer subjective opinion ques-
tions (Stoyanov et al2005; Dang, 2008; Li et al
2009). To the best of our knowledge though, no pre-
vious work has systematically explored the use of
sentiment analysis in a general QA setting beyond
opinion questions.
7 Conclusion
In this paper, we have explored the utility of senti-
ment analysis and semantic word classes for ranking
answer candidates to why-questions. We proposed a
set of semantic features that exploit sentiment anal-
ysis and semantic word classes obtained from large-
scale noun clustering, and used them to train an an-
swer candidate re-ranker. Through a series of exper-
iments on 850 why-questions, we showed that the
proposed semantic features were effective in identi-
fying correct answers, and our proposed method ob-
tained more than 15% improvement in precision of
its top answer (P@1) over our baseline, a state-of-
the-art IR based QA system. We plan to use new se-
mantic knowledge such as semantic orientation, ex-
citatory or inhibitory, proposed in Hashimoto et al
(2012) for improving why-QA.
377
References
Francis Bond, Hitoshi Isahara, Sanae Fujita, Kiyotaka
Uchimoto, Takayuki Kuribayashi, and Kyoko Kan-
zaki. 2009. Enhancing the japanese wordnet. In Pro-
ceedings of the 7th Workshop on Asian Language Re-
sources, pages 1?8.
Hoa Tran Dang. 2008. Overview of the TAC 2008 opin-
ion question answering and summarization tasks. In
Proc. TAC 2008.
Stijn De Saeger, Kentaro Torisawa, Jun?ichi Kazama,
Kow Kuroda, and Masaki Murata. 2009. Large scale
relation acquisition using class dependent patterns. In
Proc. of ICDM 2009, pages 764?769.
David A. Ferrucci, Eric W. Brown, Jennifer Chu-Carroll,
James Fan, David Gondek, Aditya Kalyanpur, Adam
Lally, J. William Murdock, Eric Nyberg, John M.
Prager, Nico Schlaefer, and Christopher A. Welty.
2010. Building Watson: An overview of the DeepQA
project. AI Magazine, 31(3):59?79.
Junichi Fukumoto, Tsuneaki Kato, Fumito Masui, and
Tsunenori Mori. 2007. An overview of the 4th ques-
tion answering challenge (QAC-4) at NTCIR work-
shop 6. In Proc. of NTCIR-6.
Zellig Harris. 1954. Distributional structure. Word,
10(23):146?162.
Chikara Hashimoto, Kentaro Torisawa, Stijn De Saeger,
Jong-Hoon Oh, and Jun?ichi Kazama. 2012. Excita-
tory or inhibitory: A new semantic orientation extracts
contradiction and causality from the web. In Proceed-
ings of EMNLP-CoNLL 2012.
Ryuichiro Higashinaka and Hideki Isozaki. 2008.
Corpus-based question answering for why-questions.
In Proc. of IJCNLP, pages 418?425.
Thomas Hofmann. 1999. Probabilistic latent semantic
indexing. In Proc. of the 22nd annual international
ACM SIGIR conference on Research and development
in information retrieval, SIGIR ?99, pages 50?57.
Jun?ichi Kazama and Kentaro Torisawa. 2008. Inducing
gazetteers for named entity recognition by large-scale
clustering of dependency relations. In Proc. of ACL-
08: HLT, pages 407?415.
Fangtao Li, Yang Tang, Minlie Huang, and Xiaoyan
Zhu. 2009. Answering opinion questions with ran-
dom walks on graphs. In Proc. of the Joint Conference
of the 47th Annual Meeting of the ACL and the 4th
International Joint Conference on Natural Language
Processing of the AFNLP: Volume 2 - Volume 2, pages
737?745.
Masaki Murata, Sachiyo Tsukawaki, Toshiyuki Kana-
maru, Qing Ma, and Hitoshi Isahara. 2007. A system
for answering non-factoid Japanese questions by using
passage retrieval weighted based on type of answer. In
Proc. of NTCIR-6.
Tetsuji Nakagawa, Kentaro Inui, and Sadao Kurohashi.
2010. Dependency tree-based sentiment classification
using CRFs with hidden variables. In Human Lan-
guage Technologies: The 2010 Annual Conference of
the North American Chapter of the Association for
Computational Linguistics, pages 786?794, Los An-
geles, California, June. Association for Computational
Linguistics.
Bo Pang, Lillian Lee, and Shivakumar Vaithyanathan.
2002. Thumbs up? Sentiment classification using ma-
chine learning techniques. In Proc. of the 2002 Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP), pages 79?86.
Ted Pedersen, Siddharth Patwardhan, and Jason Miche-
lizzi. 2004. WordNet::Similarity: measuring the
relatedness of concepts. In Demonstration Papers
at HLT-NAACL 2004, HLT-NAACL?Demonstrations
?04, pages 38?41.
Anselmo Pe?as, Eduard H. Hovy, Pamela Forner, ?lvaro
Rodrigo, Richard F. E. Sutcliffe, Corina Forascu, and
Caroline Sporleder. 2011. Overview of QA4MRE at
CLEF 2011: Question answering for machine reading
evaluation. In CLEF.
Veselin Stoyanov, Claire Cardie, and Janyce Wiebe.
2005. Multi-perspective question answering using the
opqa corpus. In Proceedings of the conference on Hu-
man Language Technology and Empirical Methods in
Natural Language Processing, HLT ?05, pages 923?
930.
Mihai Surdeanu, Massimiliano Ciaramita, and Hugo
Zaragoza. 2011. Learning to rank answers to non-
factoid questions from web collections. Computa-
tional Linguistics, 37(2):351?383.
Peter D. Turney. 2002. Thumbs up or thumbs down?:
semantic orientation applied to unsupervised classifi-
cation of reviews. In Proc. of the 40th Annual Meeting
on Association for Computational Linguistics, ACL
?02, pages 417?424.
Vladimir N. Vapnik. 1995. The nature of statistical
learning theory. Springer-Verlag New York, Inc., New
York, NY, USA.
Suzan Verberne, Lou Boves, Nelleke Oostdijk, and Peter-
Arno Coppen. 2007. Evaluating discourse-based an-
swer extraction for why-question answering. In SIGIR,
pages 735?736.
Suzan Verberne, Lou Boves, Nelleke Oostdijk, and Peter-
Arno Coppen. 2010. What is not in the bag of words
for why-QA? Computational Linguistics, 36:229?
245.
Ellen M. Voorhees. 2004. Overview of the TREC 2004
question answering track. In TREC.
378
Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural
Language Learning, pages 619?630, Jeju Island, Korea, 12?14 July 2012. c?2012 Association for Computational Linguistics
Excitatory or Inhibitory: A New Semantic Orientation Extracts
Contradiction and Causality from the Web
Chikara Hashimoto? Kentaro Torisawa? Stijn De Saeger?
Jong-Hoon Oh? Jun?ichi Kazama?
National Institute of Information and Communications Technology
Kyoto, 619-0289, JAPAN
{? ch, ? torisawa, ? stijn, ? rovellia, ?kazama}@nict.go.jp
Abstract
We propose a new semantic orientation, Ex-
citation, and its automatic acquisition method.
Excitation is a semantic property of predicates
that classifies them into excitatory, inhibitory
and neutral. We show that Excitation is useful
for extracting contradiction pairs (e.g., destroy
cancer ? develop cancer) and causality pairs
(e.g., increase in crime ? heighten anxiety).
Our experiments show that with automatically
acquired Excitation knowledge we can extract
one million contradiction pairs and 500,000
causality pairs with about 70% precision from
a 600 million page Web corpus. Furthermore,
by combining these extracted causality and
contradiction pairs, we can generate one mil-
lion plausible causality hypotheses that are not
written in any single sentence in our corpus
with reasonable precision.
1 Introduction
Recognizing semantic relations between events in
texts is crucial for such NLP tasks as question an-
swering (QA). For example, to answer the question
?What ruined the crops in Japan?? a QA system
must recognize that the sentence ?the Fukushima
nuclear power plant caused radioactive pollution
and contaminated the crops in Japan? contains a
causal relation and that contaminate crops entails
ruin crops but contradicts preserve crops.
To facilitate the acquisition of causality, contra-
diction, paraphrase and entailment relations between
events we propose a new semantic orientation, Ex-
citation, that classifies unary predicates (templates,
hereafter) into excitatory, inhibitory and neutral. An
excitatory template entails that the main function or
effect of the referent of its argument is activated or
enhanced (e.g., cause X, preserve X), while an in-
hibitory template entails that it is deactivated or sup-
pressed (e.g., ruin X, contaminate X, prevent X).
Excitation is useful for extracting contradiction;
if two templates with similar distributional profiles
have opposite Excitation polarities, they tend to be
contradictions (e.g., contaminate crops and preserve
crops). With extracted contradictions we can distin-
guish paraphrases from contradictions among distri-
butionally similar phrases. Furthermore, contradic-
tion in itself is important knowledge for Recogniz-
ing Textual Entailment (RTE) (Voorhees, 2008).
Excitation is also a powerful indicator of causal-
ity. In the physical world, the activation or de-
activation of one thing often causes the activation
or deactivation of another. Two excitatory or in-
hibitory templates that co-occur in some temporal
or logical order in the same narrative often describe
a causal chain of events, like ?the Fukushima nu-
clear power plant caused radioactive pollution and
contaminated crops in Japan?.
In this paper we propose both the concept of Ex-
citation and an automatic method for its acquisition.
Our method acquires Excitation templates based on
certain natural, language independent constraints on
narrative structures found in text. We also propose
acquisition methods for contradiction and causal-
ity relations based on Excitation. Our methods ex-
tract one million contradiction pairs with over 70%
precision, and 500,000 causality pairs with about
70% precision from a 600 million page Web corpus.
Moreover, by combining these extracted causality
pairs and contradiction pairs, we generated one mil-
lion plausible causality hypotheses that were not
619
written in any single sentence in our corpus with rea-
sonable precision. For example, a causality hypoth-
esis prevent radioactive pollution ? preserve crops
can be generated from an extracted causality cause
radioactive pollution ? contaminate crops.
We target the Japanese language in this paper.
2 What is Excitation?
Excitation classifies templates into excitatory, in-
hibitory, and neutral, as explained below.
excitatory templates entail that the function, ef-
fect, purpose or role of their argument?s refer-
ent is activated or enhanced. (e.g., cause X, buy
X, produce X, import X, increase X, enable X)
inhibitory templates entail that the function, ef-
fect, purpose or role of their argument?s refer-
ent is deactivated or suppressed. (e.g., prevent
X, discard X, remedy X, decrease X, disable X)
neutral templates are neither excitatory nor in-
hibitory. (e.g., consider X, proportional to X,
related to X, evaluate X, close to X)
For example, when fire fills the X slot of cause X,
it suggests that the effect of fire is activated. If pre-
vent X?s slot is filled with flu, the effect of flu is sup-
pressed. In this study, we aim to acquire excitatory
and inhibitory templates that are useful for extract-
ing contradiction and causality, though neutral tem-
plates are the most frequent in our data (See Section
5.1). Collectively we call excitatory and inhibitory
templates Excitation templates, and excitatory and
inhibitory two opposite polarities.
Excitation is independent of the good/bad seman-
tic orientation. (Hatzivassiloglou and McKeown,
1997; Turney, 2002; Rao and Ravichandran, 2009).
For example, sophisticate X and complicate X are
both excitatory, but only the former has a positive
connotation. Similarly, remedy X and degrade X are
both inhibitory but only the latter is negative.
General Inquirer (Stone et al1966) deals with
semantic factors some of which were proposed by
Osgood et al1957). Their ?activity? factor involves
binary opposition between ?active? and ?passive.?
Notice that activity and Excitation are independent.
In General Inquirer, both accelerate X and abolish
X are active, but only the former is excitatory. Both
accept X and abate X are passive, but only the lat-
ter is inhibitory. Pustejovsky (1995) proposed telic
and agentive roles, which inspired our excitatory no-
tion, but they have no corresponding notion of in-
hibitory. Andreevskaia and Bergler (2006) acquired
the increase/decrease semantic orientation, which is
a subclass of Excitation.
Excitation is inverted if a template?s predicate is
negated. For example, preserve X is excitatory,
while don?t preserve X is inhibitory. We acknowl-
edge that this may seem somewhat counter-intuitive
and will address this issue in future work.
3 Excitation Template Acquisition
This section presents our acquisition method of Ex-
citation templates. We introduce constraints in the
co-occurrence of templates in text that seem both ro-
bust and language independent in Section 3.1. Our
method exploits these constraints for the acquisition
of Excitation templates. First we construct a tem-
plate network where nodes are templates and links
represent that two connected templates have either
SAME or OPPOSITE polarities. Given 46 manually
prepared seed templates we calculate the Excitation
value of each template, a value in range [?1, 1] that
is positive if the template is excitatory and negative
if it is inhibitory. Technically, our method treats all
templates as excitatory or inhibitory, and, upon com-
pletion, regards templates with small absolute Exci-
tation values as neutral.
The whole method is a bootstrapping process.
Each iteration expands the network and the Excita-
tion value of each template is (re-)calculated.
3.1 Characteristics of Excitation Templates
Our method exploits natural discourse constraints on
the possible combinations of (a) the polarity of co-
occurring templates, (b) the nouns that fill their ar-
gument slots and (c) the connectives that link the
templates in a given sentence. Table 1 shows the
constraints and Figure 1 shows examples that will
be explained shortly. Though our target is Japanese
we believe these constraints are universal discourse
principles, and as such not language dependent. Ex-
amples are given in English for ease of explanation.
We first identify two categories of connectives
in our target sentences: AND/THUS-type (e.g., and,
thus and since) and BUT-type (e.g., but and though).
Both types suggest a sort of consistency or inconsis-
tency between predicates. We manually classified
169 frequently used connectives into AND/THUS-
620
(1) He smoked cigarettes, AND/THUS he suffered lung
cancer. (Both smoke X and suffer X are excitatory.)
(2) He quit cigarettes, AND/THUS was immune from lung
cancer. (quit X and immune from X are inhibitory.)
(3) He smoked cigarettes, BUT didn?t suffer lung cancer.
(smoke X is excitatory, not suffer X is inhibitory.)
(4) He quit cigarettes, BUT he suffered lung cancer. (quit
X is inhibitory, but suffer X is excitatory.)
(5) He underwent cancer treatment, AND/THUS he could
cure the cancer. (undergo X is excitatory, cure X is
inhibitory.)
(6) He underwent cancer treatment, BUT still had cancer.
(Both undergo X and have X are excitatory.)
(7) Unnatural: He smoked cigarettes, BUT he suffered
lung cancer. (smoke X and suffer X are excitatory.)
Figure 1: Examples of constraints: (cigarettes, lung can-
cer) is PNP and (cancer treatment, cancer) is NNP.
PNPs NNPs others
AND/THUS SAME OPPOSITE N/A
BUT OPPOSITE SAME N/A
Table 1: Constraint matrix.
and BUT-type (See supplementary materials).
Next we extract sentences from the Web in which
two templates co-occur and are joined by one of
these connectives, and then classify the noun pairs
filling the templates? argument slots into ?positively-
associated? and ?negatively-associated? noun pairs
(PNPs and NNPs). Mirroring our definition of Excita-
tion, PNPs are noun pairs in which the referent of the
first noun facilitates the emergence of the referent
of the second noun. PNPs can range from causally
related noun pairs like (cigarettes, lung cancer) to
?material-product? relation pairs like (semiconduc-
tor, electronic circuit). We found that PNPs only
fill the argument slots of (a) same Excitation polar-
ity templates connected by AND/THUS-type connec-
tives (examples 1 and 2 in Figure 1), or (b) opposite
Excitation polarity templates connected by a BUT-
type connectives (examples 3 and 4). Violating such
constraints (example 7) seems unnatural. Similarly,
NNPs are noun pairs in which the referent of one
noun suppresses the emergence of the referent of the
other noun. Examples include such ?inverse causal-
ity? pairs as (cancer treatment, cancer). NNPs only
fill the argument slots of (a) opposite Excitation po-
larity templates connected by AND/THUS-type con-
nectives (example 5), or (b) same polarity templates
connected by a BUT-type connective (example 6).
All these constraints are summarized in Table 1,
which we will call the constraint matrix. Accord-
ing to the constraint matrix, we can know whether
two templates? polarities are the same or opposite if
we know whether a noun pair filling the two tem-
plates? slots is PNP or NNP. Conversely, we can
know whether a noun pair is PNP or NNP if we know
whether two templates whose slots are filled with
the noun pair have the same or opposite polarities.
We believe these constraints capture certain univer-
sal principles of discourse, since it is difficult in any
language to produce natural sounding sentences that
violate these constraints. We empirically confirm
their validity for Japanese in Section 5.1.
3.2 Bootstrapping Approach to Excitation
Template Acquisition
To calculate the Excitation values for the templates,
we construct a template network where templates
are connected by links indicating polarity agreement
between two connected templates (either SAME or
OPPOSITE polarity), as determined by the constraint
matrix. Excitation values are determined by spread-
ing activation applied to the network, given a small
number of manually prepared seed templates.
However, we cannot construct the network unless
we know whether each noun pair is PNP or NNP, due
to the configuration of the constraint matrix, and cur-
rently we have no feasible method to classify all of
them into PNPs and NNPs in advance. We therefore
adopt a bootstrapping method (Figure 2) that starts
from manually prepared excitatory and inhibitory
seed templates (Step 1 in Figure 2). Our method
begins by extracting noun pairs from the Web that
co-occur with two seed templates connected by a
AND/THUS- or BUT-type connective, and classifies
these noun pairs into PNPs and NNPs based on the
constraint matrix (Steps 2 and 3). Next, we automat-
ically extract additional (non-seed) template pairs
from the Web that co-occur with these PNPs and
NNPs. Links (either SAME or OPPOSITE) between
all template pairs are determined by the constraint
matrix (Step 4), and we construct a template network
from both seed and non-seed template pairs (Step 5).
Our method calculates the Excitation values for
all the templates in the network by first assign-
ing Excitation values +1 and ?1 to the excitatory
and inhibitory seed templates, and applies a spread-
ing activation method proposed by Takamura et al
(2005) (Step 6) to the network. This method calcu-
621
1. Prepare initial seed templates with fixed excitation values (either
+1 or ?1).
2. Make seed template pairs that are combinations of two seed tem-
plates and a connective (either AND/THUS-type or BUT-type).
3. Extract noun pairs that co-occur with one of the seed template
pairs from the Web. Classify the noun pairs into PNPs and NNPs
based on the constraints matrix. Filter out those noun pairs that
appear as both PNP and NNP on the Web or those whose occur-
rence frequency is less than or equal to F, which is set to 5.
4. Extract additional (non-seed) template pairs that are filled by one
of the PNPs or NNPs from the Web. Determine the link type
(SAME or OPPOSITE) for each template pair based on the con-
straint matrix. If a template pair appears on the Web as having
both link types, we determine its link type by majority vote.
5. Construct the template network from all the template pairs. Re-
move from the network those templates whose number of linked
templates is less than D, which is set to 5.
6. Apply Takamura et al method to the network and fix the Exci-
tation value of each template.
7. Extract the top- and bottom-ranked N ? i templates from the
result of Takamura et al method. N is a constant, which is
set to 30. i is the iteration number. They are used as additional
seed templates for the next iteration. The top-ranked templates
are given Excitation value +1 and the bottom-ranked templates
are assigned ?1. Go to Step 2.
Figure 2: Bootstrapping for template acquisition.
lates all templates? excitation values by solving the
network constraints imposed by the SAME and OP-
POSITE links, and the Excitation values of the seed
templates (This method is detailed in Section 3.3).
In each iteration i, our method selects the N ? i top-
ranked and bottom-ranked templates as additional
seed templates for the next iteration (N is set to 30)
(Step 7). Our method then constructs a new tem-
plate network using the augmented seed templates
and restarts the calculation process. Figure 2 sum-
marizes our bootstrapping process.
Bootstrapping stops after M iterations, with M
set to 7 based on our preliminary experiments.
To prepare the initial seed templates we con-
structed a maximal template network that could in
theory be created by our bootstrapping method. This
maximal network consists of any two templates that
co-occur in a sentence with any connective, regard-
less of their arguments. We manually selected 36
excitatory and 10 inhibitory seed templates from
among 114 templates with the most links in the net-
work (See supplementary materials).
3.3 Determining Excitation in the Network
This section details Step 6 of our bootstrapping
method, i.e., how Takamura et al method calcu-
lates the Excitation value of each template. Their
method is based on the spin model in physics, where
each electron has a spin of either up or down. We
chose this method due to the straightforward parallel
between the spin model and our Excitation template
model. Both models capture the spreading of acti-
vation (either spin direction or excitation polarity)
between neighboring objects in a network. Deter-
mining the optimal algorithm for this task is beyond
our current scope, but for the purpose of our experi-
ments we found that Takamura et al method gave
satisfactory results.
The spin model defines an energy function on a
spin network, and each electron?s spin can be esti-
mated by minimizing this function:
E(x,W ) = ?1/2? ?ijwijxixj
Here, xi, xj ? x are spins of electrons i and j, and
matrix W = {wij} assigns weights to links between
electrons. We regard templates as electrons and Ex-
citation polarities as their spins (up and down corre-
spond to excitatory and inhibitory). We define the
weight wij of the link between templates i and j as:
wij =
{
1/
?
d(i)d(j) if SAME(i, j)
?1/
?
d(i)d(j) if OPPOSITE(i, j)
Here, d(i) denotes the number of templates linked
to i. SAME(i, j) (OPPOSITE(i, j)) indicates a SAME
(OPPOSITE) link exists between i and j. We obtain
excitation values by minimizing the above energy
function. Note that after minimizing E, xi and xj
tend to get the same polarity when wij is positive.
When wij is negative, xi and xj tend to have op-
posite polarities. Initially seed templates are given
values +1 or ?1 depending on whether they are ex-
citatory or inhibitory, and others are given 0.
We used SUPPIN (http://www.lr.pi.titech.
ac.jp/?takamura/pubs/SUPPIN-0.01.tar.gz),
an implementation of Takamura et al method. Its
parameter ? is set to the default value (0.75).
4 Knowledge Acquisition by Excitation
This section shows how the concept of Excitation
can be used for automatic knowledge acquisition.
4.1 Contradiction Extraction
Our first knowledge acquisition method extracts
contradiction pairs like destroy cancer ? develop
cancer, based on our assumption that they often con-
sist of distributionally similar templates that have a
sharp contrast in Excitation value. Concretely, we
622
extract two phrases as a contradiction pair if (a)
their templates have opposite Excitation polarities,
(b) they share the same argument noun, and (c) the
part-of-speech of their predicates is the same. Then
the contradiction pairs are ranked by Ct:
Ct(p1, p2) = |s1| ? |s2| ? sim(t1, t2)
Here p1 and p2 are two phrases that satisfy condi-
tions (a), (b) and (c) above, t1 and t2 are their re-
spective templates, and |s1| and |s2| are the absolute
values of t1 and t2?s excitation values. sim(t1, t2) is
the distributional similarity proposed by Lin (1998).
Note that ?contradiction? here includes what we
call ?quasi-contradiction.? This consists of two
phrases such that, if the tendencies of the events they
describe get stronger, they eventually become con-
tradictions. For example, the pair emit smells ? re-
duce smells is not logically contradictory since the
two events can happen at the same time. However,
they become almost contradictory when their ten-
dencies get stronger (i.e., emit smells more strongly
? thoroughly reduce smells). We believe quasi-
contradictions are useful for NLP tasks.
4.2 Causality Extraction
Our second knowledge acquisition method extracts
causality pairs like increase in crime ? heighten
anxiety that co-occur with AND/THUS-type connec-
tives in a sentence. The assumption is that if two
templates (t1 and t2) with a strong Excitation ten-
dency are connected by an AND/THUS-type connec-
tive in a sentence, the event described by t1 and its
argument n1 tends to be a cause of the event de-
scribed by t2 and its argument n2. Here, Excitation
strength is expressed by absolute Excitation values.
The intuition is that, if the referent of n1 is strongly
activated or suppressed, it tends to have some causal
effect on the referent of n2 in the same sentence.
We focus on extracting causality pairs that co-
occur with only ?non-causal connectives? like and,
which are AND/THUS-type connectives that do NOT
explicitly signal causality, since causal connectives
like thus can mask the effectiveness of Excitation.
We prepared 139 non-causal connectives (See sup-
plementary materials). We extract two templates
such as increase in X and heighten Y co-occurring
with only non-causal connectives, as well as the
noun pair that fills the two templates? slots (e.g.,
(crime, anxiety)) to obtain causal phrase pairs. In
Japanese, the temporal order between events is usu-
ally determined by precedence in the sentence. Cs
ranks the obtained causality pairs:
Cs(p1, p2) = |s1| ? |s2|
Here p1 and p2 are the phrases of causality pair, and
|s1| and |s2| are absolute Excitation values of p1?s
and p2?s templates. As is common in the literature,
this notion of causality should be interpreted prob-
abilistically rather than logically, i.e., we interpret
causality A ? B as ?if A happens, the probability of
B increases?. This interpretation is often more use-
ful for NLP tasks than a strict logical interpretation.
4.3 Causality Hypothesis Generation
Our third knowledge acquisition method generates
plausible causality hypotheses that are not written in
any single sentence using the previously extracted
contradiction and causality pairs. We assume that if
a causal relation (e.g., increase in crime ? heighten
anxiety ) is valid, its inverse (e.g., decrease in crime
? diminish anxiety ) is often valid as well. From
a logical definition of causation, taking the inverse
of an implication obviously does not preserve valid-
ity. However, at least under our probabilistic inter-
pretation, taking the inverse of a given causality pair
using the extracted contradiction pairs proves to be
a viable strategy for generating non-trivial causality
hypotheses, as our experiments in Section 5.4 show.
For an extracted causality pair, we generate its
inverse as a causality hypothesis by replacing both
phrases in the original pair with their contradiction
counterparts. For instance, a causality hypothesis
decrease in crime ? diminish anxiety is generated
from a causality increase in crime ? heighten anxi-
ety by two contradictions, decrease in crime ? in-
crease in crime and diminish anxiety ? heighten
anxiety. Since we are interested in finding new
causal hypotheses, we filter out hypotheses whose
phrase pair co-occurs in a sentence in our corpus.
Remaining causality hypotheses are ranked by Hp.
Hp(q1, q2) = Ct(p1, q1)? Ct(p2, q2)? Cs?(p1, p2)
Here, q1 and q2 are two phrases of a causality hy-
pothesis. p1 and p2 are two phrases of a hypothesis?s
original causality. That is, p1 ? q1 and p2 ? q2 are
contradiction pairs, and Ct(p1, q1) and Ct(p2, q2)
are their contradiction scores. Cs?(p1, p2) is the
original causality?s causality score. Cs? can be Cs
623
from Section 4.2, but based on preliminary experi-
ments we found the following score works better:
Cs?(p1, p2) = |s1| ? |s2| ? npfreq(n1, n2)
|s1| and |s2| are absolute Excitation values of p1?s
and p2?s templates, whose slots are filled with n1 and
n2. npfreq(n1, n2) is the co-occurrence frequency
of (n1, n2) with polarity-identical template pairs (if
(n1, n2) is PNP) or with polarity-opposite template
pairs (if (n1, n2) is NNP). Thus, npfreq indicates a
sort of association strength between two nouns.
5 Experiments
This section shows that our template acquisition
method acquired many Excitation templates. More-
over, using only the acquired templates we extracted
one million contradiction pairs with more than 70%
precision, and 500,000 causality pairs with about
70% precision. Further, using only these extracted
contradiction and causality pairs we generated one
million causality hypotheses with 57% precision.
In our experiments we removed evaluation sam-
ples containing the initial seed templates and exam-
ples used for annotation instruction from the evalua-
tion data. Three annotators (not the authors) marked
all evaluation samples, which were randomly shuf-
fled so that they could not identify which sample was
produced by which method. Information about the
predicted labels or ranks was also removed from the
evaluation data. Final judgments were made by ma-
jority vote between the annotators. They were non-
experts without formal training in linguistics or se-
mantics. See supplementary materials for our anno-
tation manuals (translated into English).
We used 600 million Japanese Web pages
(Akamine et al2010) parsed by KNP (Kawahara
and Kurohashi, 2006) as a corpus. We restricted
the argument positions of templates to ha (topic),
ga (nominative), wo (accusative), ni (dative), and de
(instrumental). We discarded templates appearing
fewer than 20 times in compound sentences (regard-
less of connectives) in our corpus.
5.1 Excitation Template Acquisition
We show that our proposed method for template ex-
traction (PROPtmp) successfully acquired many Ex-
citation templates from which we obtained a huge
number of contradiction and causality pairs, and that
Excitation is a reasonably comprehensible notion
even for non-experts. We also show that PROPtmp
outperformed two baselines by a large margin.
The template network constructed by PROPtmp
contained 10,825 templates. Among these, the boot-
strapping process classified 8,685 templates as exci-
tatory and 2,140 as inhibitory. Note that these can-
didates in fact also contain neutral templates, as ex-
plained at the beginning of Section 3.
Baselines The baseline methods are ALLEXC and
SIM. ALLEXC regards all templates that are ran-
domly extracted from the Web as excitatory, since in
our data excitatory templates outnumber inhibitory
ones. Actually, in our data neutral templates rep-
resent the most frequent class, but since our objec-
tive is to acquire excitatory and inhibitory templates,
a baseline marking all templates as neutral would
make little sense. SIM is a distributional similarity
baseline that takes as input the same 10,825 tem-
plates of PROPtmp above, constructs a network by
connecting two templates whose distributional simi-
larity is greater than zero, and regards two connected
templates as having the same polarity. The weight
of the links between templates is set to their distri-
butional similarity based on Lin (1998). Then SIM
is given the same initial seed templates as PROPtmp,
by which it calculates the Excitation values of tem-
plates using Takamura et al method. As a result,
SIM assigned positive Excitation values to all tem-
plates, and except for the 10 inhibitory initial seed
templates no templates were regarded inhibitory.
Evaluation scheme We randomly sampled 100
templates each from PROPtmp?s 8,685 excitatory
candidates, PROPtmp?s 2,140 inhibitory candidates,
all the ALLEXC?s templates, and all the SIM?s tem-
plates, i.e., 400 templates in total. To make the an-
notators? judgements easier, we randomly filled the
argument slot of each template with a noun filling its
argument slot in our Web corpus. Three annotators
labeled each sample (a combination of a template
and a noun) as ?excitatory,? ?inhibitory,? ?neutral,? or
?undecided? if they were not sure about its label.
Results for excitatory In the top graph in Fig-
ure 3, ?Proposed? shows PROPtmp?s precision curve.
The curve is drawn from its 100 samples whose X-
axis positions represent their ranks. We plot a dot for
every 5 samples. Among the 100 samples, 37 were
judged as excitatory, 6 as inhibitory, 45 as neutral,
and 6 as ?undecided?. For the remaining 6 samples,
624
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  2000  4000  6000  8000  10000
Pre
cisio
n
?Proposed?
?Sim?
?Allexc?
 0.4
 0.6
 0.8
 1
 0  500  1000  1500  2000  2500
Pre
cisio
n
Top-N
?Proposed?
Figure 3: Precision of template acquisition: excitatory
(top) and inhibitory (bottom).
the three annotators gave three different labels and
the label was not fixed (?split-votes? hereafter). For
calculating precision, only the 37 samples labeled
excitatory were regarded as correct. PROPtmp out-
performed all baselines by a large margin, with an
estimated 70% precision for the top 2,000 templates.
?Allexc? and ?Sim? in Figure 3 denote ALLEXC and
SIM. Among ALLEXC?s 100 samples, 19 were
judged as excitatory, 5 as inhibitory, 74 as neutral,
and 2 as ?undecided?. SIM?s low performance re-
flects the fact that templates with opposite polarities
are sometimes distributionally similar, and as a re-
sult get connected by SAME links.
Results for inhibitory ?Proposed? in the bottom
graph in Figure 3 shows the precision curve drawn
from the 100 samples of PROPtmp?s inhibitory can-
didates. Among the 100 samples, 41 were judged as
inhibitory, 15 as excitatory, 32 as neutral, 4 as ?unde-
cided?, and 8 as ?split-votes?. Only the 41 inhibitory
samples were regarded as correct. From the curve
we estimate that PROPtmp achieved about 70% pre-
cision for the top 500. Note that SIM could not ac-
quire any inhibitory templates, yet we can think of
no other reasonable baseline for this task.
Inter-annotator agreement The Fleiss? kappa
(Fleiss, 1971) of annotator judgements was 0.48
(moderate agreement (Landis and Koch, 1977)). For
training, the annotators were given a one-page anno-
tation manual (see supplementary materials), which
basically described the same contents in Section 2,
in addition to 14 examples of excitatory, 14 exam-
ples of inhibitory, and 6 examples of neutral tem-
plates that were manually prepared by the authors.
Using the manual and the examples, we instructed
all the annotators face-to-face for a few hours. We
also made sure the evaluation data did not contain
any examples used during instruction.
Observations about argument positions Among
the 200 evaluation samples of PROPtmp (for both ex-
citatory and inhibitory evaluations), 52 were judged
as excitatory, 47 as inhibitory, and 77 as neutral. For
the excitatory templates, the numbers of nominative,
topic, accusative, dative, and instrumental argument
positions are 15, 11, 10, 8, and 8, respectively. For
the inhibitory templates, the numbers are 17, 11, 16,
3, and 0. For the neutral templates, the numbers are
8, 23, 17, 21, and 8. Accordingly, we found no no-
ticeable bias with regard to their numbers. Likewise,
we found no noticeable bias regarding their useful-
ness for contradiction and causality acquisition re-
ported shortly, too.
Summary PROPtmp works well, as it outperforms
the baselines. Its performance demonstrates the va-
lidity of our constraint matrix in Table 1. Besides,
since our annotators were non-experts but showed
moderate agreement, we conclude that Excitation is
a reasonably comprehensible notion.
5.2 Contradiction Extraction
This section shows that our proposed method for
contradiction extraction (PROPcont) extracted one
million contradiction pairs with more than 70% pre-
cision, and that Excitation values are useful for con-
tradiction ranking. As input for PROPcont we took
the top 2,000 excitatory and the top 500 inhibitory
templates from the previous experiment (i.e., the
other templates were regarded as neutral).
Baselines Our baseline methods are RANDcont
and PROPcont-NE. RANDcont randomly combines
two phrases, each consisting of a template and a
noun that they share. It does not rank its output.
PROPcont-NE is the same as PROPcont except that it
does not use Excitation values; ranking is based only
on sim(t1, t2). PROPcont-NE does combine phrases
with opposite template polarities, just like PROPcont.
Evaluation scheme We randomly sampled 200
phrase pairs from the top one million results of each
625
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  200000  400000  600000  800000  1e+06
Pre
cisio
n
Top-N
?Proposed?
?Proposed-ne?
?Random?
Figure 4: Precision of contradiction extraction.
PROPcont and PROPcont-NE, and 100 samples from
the output of RANDcont?s output, giving 500 sam-
ples. Three annotators labeled whether the samples
are contradictions. Fleiss? kappa was 0.78 (substan-
tial agreement).
Results ?Proposed? in Figure 4 shows the preci-
sion curve of PROPcont. PROPcont achieved an esti-
mated 70% precision for its top one million results.
Readers might wonder whether PROPcont?s output
consists of a small number of template pairs that are
filled with many different nouns. If this were the
case, PROPcont?s performance would be somewhat
misleading. However, we found that PROPcont?s 200
samples contained 194 different template pairs, sug-
gesting that our method can acquire a large variety
of contradiction phrases. ?Proposed-ne? is the pre-
cision curve for PROPcont-NE. Its precision is more
than 10% lower than PROPcont at the top one million
results. ?Random? shows that RANDcont?s precision
is only 4%. Table 2 shows examples of PROPcont?s
outputs and their English translation. The labels
?Cont,? ?Quasi? and ?6? denote whether a pair is con-
tradictory, quasi-contradictory, or not contradictory.
Among PROPcont?s 145 samples judged by the an-
notators as contradiction, 46 were judged as quasi-
contradictory by one of the authors. The first 6
case in Table 2 was caused by the template, X??
??? (improve X). It is tricky since it is excitatory
when taking arguments like function, while it is in-
hibitory when taking arguments like disorder. How-
ever, PROPtmp currently cannot distinguish these us-
ages and judged it as inhibitory in our experiments
in Section 5.1, though it must be interpreted as ex-
citatory for the 6 case. The second 6 case was due
to PROPtmp?s error; it incorrectly judged the neutral
template, X????? (related to X), as inhibitory.
Rank Contradiction Pairs Label
8,767 ??????????? ????????????? Cont
repair imbalance ? become imbalanced
103,581 ?????? ??????? Cont
assist the driver ? disturb the driver
151,338 ????????? ?????? Quasi
calm tension ? feel tension
184,014 ??????? ??????? 6
improve function ? boost function
316,881 ?????? ???????? Cont
yen depreciation stops ? yen depreciation develops
317,028 ???????? ???????? Cont
noise gets worse ? noise abates
334,642 ????? ??????? Cont
a sour taste is augmented ? a sour taste is lost
487,496 ??????? ??????? Quasi
feel pain ? reduce pain
529,173 ???????? ?????????? Cont
access occurs ? curb access
555,049 ?????? ??????? Cont
lose nuclear plants ? augment nuclear plants
608,895 ????????? ??????? Quasi
radioactivity is released ? radioactivity is reduced
638,092 ???????? ????????? Cont
Euro falls ? Euro gets strong
757,423 ??????? ????????? Quasi
have share (in market) ? share decreases
833,941 ?????????? ?????????? 6
generate active oxygen ? related to active oxygen
848,331 ??????? ????????? Cont
destroy cancer ? develop cancer
982,980 ????????? ??????????? Cont
virus becomes extinct ? virus is activated
Table 2: Examples of PROPcont?s outputs.
Summary PROPcont is a low cost but high perfor-
mance method, since it acquired one million con-
tradiction pairs with over 70% precision from only
the 46 initial seed templates. Besides, Excitation
contributes to contradiction ranking since PROPcont
outperformed PROPcont-NE by a 10% margin for the
top one million results. Thus we conclude that our
assumption on contradiction extraction is valid.
5.3 Causality Extraction
We show that our method for causality extraction
(PROPcaus) extracted 500,000 causality pairs with
about 70% precision, and that Excitation values con-
tribute to the ranking of causal pairs. PROPcaus took
as input all 10,825 templates classified by PROPtmp.
Baselines RANDcaus randomly extracts two
phrases that co-occur in a sentence with one of the
AND/THUS-type connectives, i.e., it uses not only
non-causal connectives but also causal ones like
thus. FREQ is the same as PROPcaus except that it
ranks its output by the phrase pair co-occurrence
frequency rather than Excitation values.
626
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  200000  400000  600000  800000  1e+06
Pre
cisio
n
Top-N
?Proposed?
?Freq?
?Random?
Figure 5: Precision of causality extraction.
Evaluation scheme We randomly sampled 100
pairs each from the top one million results of
PROPcaus and FREQ, and all RANDcaus?s output.
The annotators were shown the original sentences
from which the samples were extracted. Fleiss?
kappa was 0.68 (substantial agreement).
Results ?Proposed? in Figure 5 is the precision
curve for PROPcaus. From this curve the estimated
precision of PROPcaus is about 70% around the top
500,000. Note that PROPcaus outperformed FREQ
by a large margin, and extracted a large variety of
causal pairs since its 100 samples contained 91 dif-
ferent template pairs. Table 3 shows examples of
PROPcaus?s output along with English translations.
The labels ?4? and ?6? denote whether a pair is
causality or not. The 6 cases in Table 3 were
exceptions to our assumption described in Section
4.2; even if two Excitation templates co-occur in a
sentence with an AND/THUS-type connective, they
sometimes do not constitute causality. Actually, the
first 6 case consists of two phrases that co-occurred
in a sentence with a (non-causal) AND/THUS-type
connective but described two events that happen as
the effects of introducing the RAID storage system;
both are caused by the third event. In the second 6
case, the two phrases co-occurred in a sentence with
a (non-causal) AND/THUS-type connective but just
described two opposing events.
Summary PROPcaus performs well since it ex-
tracted 500,000 causality pairs with about 70%
precision. Moreover, Excitation values contribute
to causality ranking since PROPcaus outperformed
FREQ by a large margin. Then we conclude that our
assumption on causality extraction is confirmed.
Rank Causality Pairs Label
1,036 ?????????????????? 4
increase basal metabolism ? enhance fat-burning ability
2,128 ?????????????????? 4
increase desire to learn ? facilitate self-learning
6,471 ?????????????? 6
improve reliability ? increase capacity
29,638 ???????????????????????? 4
circulating thyroid hormone level increases ? improves metabolism
56,868 ??????????????? 4
exports increase ? GDP grows
267,364 ???????????????? 4
promote blood circulation ? improve metabolism
268,670 ???????????????? 4
BSE outbreak occurs ? import ban (on beef) is issued
290,846 ????????????????? 4
improve the view ? improve the efficiency of work
322,121 ??????????????????? 4
giant earthquake occurs ? meltdown is triggered
532,106 ??????????????? 4
good at thermal efficiency ? enhance heating efficiency
563,462 ???????????????? 4
promote inflation (in Japan) ? yen depreciation develops
591,175 ???????????????? 6
bring profit ? bring detriment
657,676 ?????????????? 4
physical strength declines ? immune system weakens
676,902 ?????????????????? 4
sharp fall in government bond futures occurs ? interest rates increase
914,101 ?????????????? 4
have a margin of error ? cause trouble
Table 3: Examples of PROPcaus?s outputs.
5.4 Causality Hypothesis Generation
Here we show that our causality hypothesis genera-
tion method in Section 4.3 (PROPhyp) extracted one
million hypotheses with about 57% precision.
This experiment took the top 100,000 results of
PROPcaus as input, generated hypotheses from them,
and randomly selected 100 samples from the top one
million hypotheses. We evaluated only PROPcaus,
since we could not think of any reasonable baseline
for this task. Randomly coupling two phrases might
be a baseline, but it would perform so poorly that it
could not be a reasonable baseline.
The annotators judged each sample in the same
way as Section 5.3, except that we presented them
with source causality pairs from which hypotheses
were generated, as well as the original sentences of
these source pairs. Fleiss? kappa was 0.51 (moderate
agreement).
As a result, PROPhyp generated one million hy-
potheses with 57% precision. It generated various
kinds of hypotheses, since these 100 samples con-
tained 99 different template pairs. Table 4 shows
some causal hypotheses generated by PROPhyp. The
source causal pair is shown in parentheses. The la-
627
bels ?4? and ?6? denote whether a pair is causality
or not. The first 6 case was due to an error made by
Rank Causality Hypotheses (and their Origin) Label
18,886 ?????????????????? 4
(???????????????) 4
alleviate stress ? remedy insomnia
(increase stress ? continue to have insomnia)
93,781 ???????????????? 4
(????????????) 4
halt deflation ? tax revenue increases
(deflation is promoted ? tax revenes declines)
121,163 ?????????????????? 4
(???????????????) 4
enjoyment increases ? stress decreases
(enjoyment decreases ? stress grows)
205,486 ?????????????? 4
(??????????????) 4
decrease in crime ? diminish anxiety
(increase in crime ? heighten anxiety)
253,531 ????????????????? 4
(????????????????????) 4
reduce chlorine ? bacteria grow
(generate chlorine ? bacteria extinct)
450,353 ???????????????? 4
(????????????) 4
expand demand ? decrease unemployment rate
(decrease demand ? increase unemployment rate)
464,546 ??????????????????? 6
(??????????????????) 6
(ability of) digestion deteriorates ? cholesterol increases
(aid digestion ? decrease cholesterol)
538,310 ??????????????? 4
(?????????????) 4
relieve fatigue ? improve immunity
(feel fatigued ? immunity is weakened)
789,481 ??????????????? 4
(????????????????) 4
conditions improve ? prevent troubles
(conditions become bad ? cause troubles)
837,850 ????????????????? 6
(????????????????) 4
control economic conditions ? accompany problems
(economic conditions improve ? problems are solved)
Table 4: Examples of causality hypotheses.
our causality extraction method PROPcaus; the case
was erroneous since its original causality was erro-
neous. The second 6 case was due to the fact that
one of the contradiction phrase pairs used to gener-
ate the hypothesis was in fact not contradictory (?
?????????? 6? ??????? ?con-
trol economic conditions 6? economic conditions im-
prove?).
From these results, we conclude that our assump-
tion on causality hypothesis generation is valid.
6 Related Work
While the semantic orientation involving good/bad
(or desirable/undesirable) has been extensively stud-
ied (Hatzivassiloglou and McKeown, 1997; Turney,
2002; Rao and Ravichandran, 2009; Velikovich et
al., 2010), we believe Excitation represents a gen-
uinely new semantic orientation.
Most previous methods of contradiction extrac-
tion require either thesauri like Roget?s or WordNet
(Harabagiu et al2006; Mohammad et al2008; de
Marneffe et al2008) or large training data for su-
pervision (Turney, 2008). In contrast, our method
requires only a few seed templates. Lin et al2003)
used a few ?incompatibility? patterns to acquire
antonyms, but they did not report their method?s per-
formance on the incompatibility identification task.
Many methods for extracting causality or script-
like knowledge between events exist (Girju, 2003;
Torisawa, 2005; Torisawa, 2006; Abe et al2008;
Chambers and Jurafsky, 2009; Do et al2011; Shi-
bata and Kurohashi, 2011), but none uses a notion
similar to Excitation. As we have shown, we expect
that Excitation will improve their performance.
Regarding the acquisition of semantic knowledge
that is not explicitly written in corpora, Tsuchida et
al. (2011) proposed a novel method to generate se-
mantic relation instances as hypotheses using auto-
matically discovered inference rules. We think that
automatically generating plausible semantic knowl-
edge that is not written (explicitly) in corpora as hy-
potheses and augmenting semantic knowledge base
is important for the discovery of so-called ?unknown
unknowns? (Torisawa et al2010), among others.
7 Conclusion
We proposed a new semantic orientation, Excitation,
and its acquisition method. Our experiments showed
that Excitation allows to acquire one million con-
tradiction pairs with over 70% precision, as well as
causality pairs and causality hypotheses of the same
volume with reasonable precision from the Web. We
plan to make all our acquired knowledge resources
available to the research community soon (Visit
http://www.alagin.jp/index-e.html).
We will investigate additional applications of Ex-
citation in future work. For instance, we expect that
Excitation and its related semantic knowledge ac-
quired in this study will improve the performance
of Why-QA system like the one proposed by Oh et
al. (2012).
628
References
Shuya Abe, Kentaro Inui, and Yuji Matsumoto. 2008.
Two-phrased event relation acquisition: Coupling the
relation-oriented and argument-oriented approaches.
In Proceedings of the 22nd International Conference
on Computational Linguistics (COLING 2008), pages
1?8.
Susumu Akamine, Daisuke Kawahara, Yoshikiyo Kato,
Tetsuji Nakagawa, Yutaka I. Leon-Suematsu, Takuya
Kawada, Kentaro Inui, Sadao Kurohashi, and Yutaka
Kidawara. 2010. Organizing information on the web
to support user judgments on information credibil-
ity. In Proceedings of 2010 4th International Uni-
versal Communication Symposium Proceedings (IUCS
2010), pages 122?129.
Alina Andreevskaia and Sabine Bergler. 2006. Semantic
tag extraction from wordnet glosses. In Proceedings
of the 5th International Conference on Language Re-
sources and Evaluation (LREC 2006).
Nathanael Chambers and Dan Jurafsky. 2009. Unsu-
pervised learning of narrative schemas and their par-
ticipants. In Proceedings of the 47th Annual Meeting
of the ACL and the 4th IJCNLP of the AFNLP (ACL-
IJCNLP 2009), pages 602?610.
Marie-Catherine de Marneffe, Anna Rafferty, and
Christopher D. Manning. 2008. Finding contradiction
in text. In Proceedings of the 48th Annual Meeting of
the Association of Computational Linguistics: Human
Language Technologies (ACL-08: HLT), pages 1039?
1047.
Quang Xuan Do, Yee Seng Chan, and Dan Roth. 2011.
Minimally supervised event causality identification.
In Proceedings of the 2011 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2011), pages 294?303.
Joseph L. Fleiss. 1971. Measuring nominal scale agree-
ment among many raters. Psychological Bulletin,
76(5):378?382.
Roxana Girju. 2003. Automatic detection of causal re-
lations for question answering. In Proceedings of the
41st Annual Meeting of the Association for Compu-
tational Linguistics (ACL 2003), Workshop on Multi-
lingual Summarization and Question Answering - Ma-
chine Learning and Beyond, pages 76?83.
Sanda Harabagiu, Andrew Hickl, and Finley Lacatusu.
2006. Negation, contrast and contradiction in text pro-
cessing. In Proceedings of the 21st National Confer-
ence on Artificial Intelligence (AAAI-06), pages 755?
762.
Vasileios Hatzivassiloglou and Kathleen R. McKeown.
1997. Predicting the semantic orientation of adjec-
tives. In Proceedings of the 35 Annual Meeting of
the Association for Computational Linguistics and the
8the Conference of the European Chapter of the Asso-
ciation of Computational Linguistics, pages 174?181.
Daisuke Kawahara and Sadao Kurohashi. 2006. A fully-
lexicalized probabilistic model for Japanese syntactic
and case structure analysis. In Proceedings of the Hu-
man Language Technology Conference of the North
American Chapter of the ACL (HLT-NAACL2006),
pages 176?183.
J. Richard Landis and Gary G. Koch. 1977. The mea-
surement of observer agreement for categorical data.
Biometrics, 33(1):159?174.
Dekang Lin, Shaojun Zhao Lijuan Qin, and Ming Zhou.
2003. Identifying synonyms among distributionally
similar words. In Proceedings of the 18th Inter-
national Joint Conference on Artificial Intelligence
(IJCAI-03), pages 1492?1493.
Dekang Lin. 1998. Automatic retrieval and clustering
of similar words. In Proceedings of the 36th Annual
Meeting of the Association for Computational Linguis-
tics and 17th International Conference on Computa-
tional Linguistics (COLING-ACL1998), pages 768?
774.
Saif Mohammad, Bonnie Dorr, and Greame Hirst. 2008.
Computing word-pair antonymy. In Proceedings of
the 2008 Conference on Empirical Methods in Natu-
ral Language Processing, pages 982?991.
Jong-Hoon Oh, Kentaro Torisawa, Chikara Hashimoto,
Takuya Kawada, Stijn De Saeger, Junichi Kazama, and
Yiou Wang. 2012. Why question answering using
sentiment analysis and word classes. In Proceedings
of EMNLP-CoNLL 2012: Conference on Empirical
Methods in Natural Language Processing and Natural
Language Learning.
Charles E. Osgood, George J. Suci, and Percy H. Tannen-
baum. 1957. The measurement of meaning. Univer-
sity of Illinois Press.
James Pustejovsky. 1995. The Generative Lexicon. MIT
Press.
Delip Rao and Deepak Ravichandran. 2009. Semi-
supervised polarity lexicon induction. In Proceedings
of the 12th Conference of the European Chapter of the
ACL, pages 675?682.
Tomohide Shibata and Sadao Kurohashi. 2011. Acquir-
ing strongly-related events using predicate-argument
co-occurring statistics and case frames. In Proceed-
ings of the 5th International Joint Conference on Natu-
ral Language Processing (IJCNLP 2011), pages 1028?
1036.
Philip J. Stone, Dexter C. Dunphy, Marshall S. Smith,
and Daniel M. Ogilvie. 1966. The General Inquirer:
A Computer Approach to Content Analysis. MIT
Press.
Hiroya Takamura, Takashi Inui, and Manabu Okumura.
2005. Extracting semantic orientation of words using
629
spin model. In Proceedings of the 43rd Annual Meet-
ing of the ACL, pages 133?140.
Kentaro Torisawa, Stijn De Saeger, Jun?ichi Kazama,
Asuka Sumida, Daisuke Noguchi, Yasunari Kakizawa,
Masaki Murata, Kow Kuroda, and Ichiro Yamada.
2010. Organizing the web?s information explosion
to discover unknown unknowns. New Generation
Computing (Special Issue on Information Explosion),
28(3):217?236.
Kentaro Torisawa. 2005. Automatic acquisition of ex-
pressions representing preparation and utilization of
an object. In Proceedings of the Recent Advances
in Natural Language Processing (RANLP05), pages
556?560.
Kentaro Torisawa. 2006. Acquiring inference rules
with temporal constraints by using japanese coordi-
nated sentences and noun-verb co-occurrences. In
Proceedings of the Human Language Technology Con-
ference of the North American Chapter of the ACL
(HLT-NAACL2006), pages 57?64.
Masaaki Tsuchida, Kentaro Torisawa, Stijn De Saeger,
Jong-Hoon Oh, Jun?ichi Kazama, Chikara Hashimoto,
and Hayato Ohwada. 2011. Toward finding semantic
relations not written in a single sentence: An inference
method using auto-discovered rules. In Proceedings
of the 5th International Joint Conference on Natural
Language Processing (IJCNLP 2011), pages 902?910.
Peter D. Turney. 2002. Thumbs up or thumbs down?
semantic orientation applied to unsupervised classifi-
cation of reviews. In Proceedings of the 40th Annual
Meeting of the Association for Computational Linguis-
tics (ACL 2002), pages 417?424.
Peter Turney. 2008. A uniform approach to analogies,
synonyms, antonyms, and associations. In Proceed-
ings of the 22nd International Conference on Compu-
tational Linguistics (COLING 2008), pages 905?912.
Leonid Velikovich, Sasha Blair-Goldensohn, Kerry Han-
nan, and RyanMcDonald. 2010. The viability of web-
derived polarity lexicons. In Human Language Tech-
nologies: The 2010 Annual Conference of the North
American Chapter of the ACL, pages 777?785.
Ellen M. Voorhees. 2008. Contradictions and justifica-
tions: Extensions to the textual entailment task. In
Proceedings of the 48th Annual Meeting of the Associ-
ation of Computational Linguistics: Human Language
Technologies (ACL-08: HLT), pages 63?71.
630
Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pages 693?703,
Seattle, Washington, USA, 18-21 October 2013. c?2013 Association for Computational Linguistics
Two-stage Method for Large-scale Acquisition of
Contradiction Pattern Pairs using Entailment
Julien Kloetzer? Stijn De Saeger? Kentaro Torisawa? Chikara Hashimoto?
Jong-Hoon Oh? Motoki Sano? Kiyonori Ohtake??
Information Analysis Laboratory,
National Institute of Information and Communications Technology (NICT), Kyoto, Japan
{?julien, ? stijn, ? torisawa, ? ch, ?rovellia, ?msano, ??kiyonori.ohtake}@nict.go.jp
Abstract
In this paper we propose a two-stage method
to acquire contradiction relations between
typed lexico-syntactic patterns such as Xdrug
prevents Ydisease and Ydisease caused by
Xdrug . In the first stage, we train an SVM
classifier to detect contradiction pattern pairs
in a large web archive by exploiting the exci-
tation polarity (Hashimoto et al, 2012) of the
patterns. In the second stage, we enlarge the
first stage classifier?s training data with new
contradiction pairs obtained by combining the
output of the first stage?s classifier and that of
an entailment classifier. We acquired this way
750,000 typed Japanese contradiction pattern
pairs with an estimated precision of 80%. We
plan to release this resource to the NLP com-
munity.
1 Introduction
The ability to detect contradictory information in
text has many practical applications. Among those,
Murakami et al (2009) pointed out that a contra-
diction recognition system can detect conflicts and
anomalies in large bodies of texts and flag them to
help users identify unreliable information. For ex-
ample, many Japanese web pages claim that agari-
cus prevents cancer, where agaricus is a species of
mushroom found in a variety of commercial prod-
ucts. Although this has been accepted by many
Japanese people, by Googling keywords ?agaricus?,
?promotes? and ?cancer?, we can find pages claim-
ing that ?agaricus promotes cancer?, some of which
point to a study authorized by the Japanese Min-
istry of Health, Labour and Welfare1 reporting that
1 http://www.mhlw.go.jp/topics/bukyoku/iyaku/syoku-
anzen/qa/060213-1.html
a commercial product containing agaricus promoted
cancer. Obviously, the existence of these pages casts
serious doubt on the ability of agaricus to prevent
cancer and encourages readers to dig more about this
subject.
The above example suggests that recognizing
contradictory information can guide users to a true
fact. Likewise, we believe that contradiction recog-
nition is also useful when dealing with non-factual
information that occupy most of our daily lives. For
instance, there is a big controversy recently whether
Japan should join an economic partnership agree-
ment called the Trans Pacific Partnership (TPP), and
quite serious but contradictory claims are plentiful in
the mass media and on the web, e.g., TPP will wipe
out Japan?s agricultural businesses and TPP will
strengthen Japan?s agricultural businesses. Neither
of these are facts; they are predictions that can only
be realized or disputed after the underlying decision-
making is done: joining or refusing the TPP.
Furthermore, after reading documents including
contradictory predictions, one should notice that
each of them is supported by a convincing the-
ory that has no obvious defect, e.g., ?Exports of
Japan?s agricultural products will increase thanks to
the TPP? or ?A large amount of low-price agricul-
tural products will be imported to Japan due to the
TPP?. Even if one of these predictions may just hap-
pen to be true because of unexpected reasons such as
minor fluctuations in the Japanese yen, we must sur-
vey such theories that support contradictory predic-
tions, conduct balanced decision-making, and pre-
pare counter measures for the expected problems af-
ter examining multiple viewpoints. Contradiction
recognition should be useful to select documents to
be surveyed.
693
Figure 1: Method workflow
We have developed a method for recog-
nizing pairs of contradictory binary patterns
such as ??X promotes Y?, ?X prevents Y?? and
??X will wipe out Y?, ?X will strengthen Y??. To
solve the problem described above, we can easily
develop a system that can find contradictory text
fragments from the web like ?agaricus promotes
cancer? and ?agaricus prevents cancer? from the
discovered contradictory pattern pairs.
Our method is a two-stage procedure with three
supervised classifiers (Fig. 1). In the first stage,
we build a classifier BASE to recognize contradic-
tions between binary patterns, and a classifier ENT
to recognize entailment. In the second stage, we
combine the contradiction pairs recognized by BASE
and the entailment pairs recognized by ENT to ex-
pand BASE?s training data and train a new contra-
diction classifier, EXP. This expansion using en-
tailment is one key idea of this work: we acquired
750,000 contradiction pairs with 80% precision us-
ing the expanded training data, more than doubling
the 285,000 pairs acquired at the same precision
level without expansion. We also demonstrate that
this result is not trivial by showing that our method
outperforms an alternative one based on Integer Lin-
ear Programming inspired by the successful entail-
ment recognition method of Berant et al (2011).
As another technical contribution of this work, we
exploit the recently proposed semantic polarity of
excitation (Hashimoto et al, 2012) to recognize con-
tradictions between binary patterns. Hashimoto et
al. (2012) previously showed that excitation polari-
ties are useful to recognize contradictions between
phrases that consist of a noun and a predicate, such
as ?promote cancer? and ?prevent cancer?. While
it is trivial to extend this framework to contradic-
tions between unary patterns such as ?promote X?
and ?prevent X? by replacing the common nouns
in each pair with a variable, the information rep-
resented in unary patterns is often vague, and it is
unlikely that a contradiction between unary patterns
directly leads to the discovery of unreliable infor-
mation to be flagged or to a meaningful survey of
complex problems. As exemplified by the agaricus
and TPP examples, contradictions between binary
patterns that include two variables such as ?X pro-
motes Y? or ?X will wipe out Y? are more useful
than those between unary patterns. We also show
that it is not trivial to recognize contradictions be-
tween binary patterns using contradictions between
unary patterns.
Most works dealing with contradiction recogni-
tion up till now (Harabagiu et al, 2006; Bobrow
et al, 2007; Kawahara et al, 2008; Kawahara et
al., 2010; Ohki et al, 2011) focus on recognizing
contradictions between full sentences or documents,
not text fragments that match our relatively short
patterns (survey in Section 5). We expect that the
contradictory pattern pairs we acquired can be used
as building blocks in such full-fledged contradiction
recognition for full sentences or documents, simi-
larly to antonym pairs in Harabagiu et al (2006).
Also, we should emphasize that our method
focuses on the most challenging part of contra-
diction recognition according to the classification
of De Marneffe et al (2008). Since we discard
patterns with negations, an evident source of contra-
dictions like ??X causes Y?, ?X does not cause Y??,
most of our output are non-trivial contradic-
tions related to high-level semantic phenomena,
e.g., contradiction pairs related to antonyms
like ??X? Y?????, ?X? Y??????
(??X increases Y?, ?X decreases Y??), lexical contra-
dictions like ??X? Y????, ?Y? X?????
(??X wins against Y?, ?Y wins against X??), or
contradictions due to common-sense knowledge
like ??X? Y???????, ?X? Y??????
(??X reassures Y?, ?X betrays Y??). We believe
acquiring such contradictions in a large scale is a
valuable contribution.
The following is the outline of this paper. Sec-
tion 2 details our target and our proposed method.
Evaluation results are discussed in Section 3. Sec-
694
Figure 2: Detailed data flow
tion 4 details our features set, and Section 5 related
work. Section 6 provides a conclusion.
2 Proposed method
As showed in Figure 1, our method consists of
three supervised classifiers. Classifiers BASE and
EXP recognize contradiction relations between bi-
nary patterns, and ENT recognizes entailment rela-
tions between binary patterns. The contradiction
pairs recognized by BASE and the entailment pairs
recognized by ENT are combined to generate new
contradiction pairs, part of which are then added to
BASE training data to train the EXP classifier. Our
final output is the set of all binary pattern pairs re-
garded as contradictions by EXP. Since the depen-
dencies between these three classifiers, their distinct
sets of training data, and the two data sets to be clas-
sified (we describe those in the two sections below)
is a bit complex, we show a complete description of
the whole process in Figure 2.
The key idea is in the scheme that expands the
training data. Logically speaking, patterns p and r
are contradictory if there exists a pattern q such that
p entails q and q contradicts r. For example, since
?X causes Y? entails ?X promotes Y? and ?X pro-
motes Y? contradicts ?X prevents Y?, then ?X causes
Y? contradicts ?X prevents Y?. Hence, by combin-
ing entailment and contradiction pairs, we can ob-
tain more contradiction pairs.
Following this property of contradiction relations,
we collect a set of pattern pairs {?p, r?} for which
there exists a pattern q such that ENT recognizes that
p entails q and BASE recognizes that q contradicts r.
Then we rank these pairs based on a novel scoring
function called Contradiction Derivation Precision
(CDP) and expand BASE training data by adding to
it the top-ranked pairs according to CDP in order to
train EXP. This ranking scheme selects highly accu-
rate contradiction pairs and prevents errors caused
by BASE and ENT from being propagated to EXP.
In the following, after defining the patterns for
which we acquire contradiction relations, we de-
scribe BASE, EXP, ENT, and our expansion scheme.
2.1 Patterns
In this work, a binary pattern is a word sequence
on the path of dependency relations connecting two
nouns in a syntactic dependency tree, like ?X causes
Y?, and we say a noun pair co-occurs with a pattern
if the two nouns are connected by this pattern in the
dependency tree of a sentence in the corpus.
We focus on typed binary patterns, which place
semantic class restrictions on the noun pairs they
co-occur with, e.g., ?Yorganization is in Xlocation?.
Subscripts organization and location indicate the se-
mantic classes of the X and Y slots. Since typed
patterns can distinguish between multiple senses
of ambiguous patterns, they greatly reduce errors
due to pattern ambiguity (De Saeger et al, 2009;
Schoenmackers et al, 2010; Berant et al, 2011).
We automatically induced semantic classes from our
corpus using the EM-based noun clustering algo-
695
rithm presented in Kazama and Torisawa (2008),
and clustered one million nouns into 500 rela-
tively clean semantic classes, including for example
classes of diseases and of chemical substances.
The binary patterns and their co-occurring noun
pairs were extracted from our corpus of 600 mil-
lion Japanese web pages dependency parsed with
KNP (Kurohashi and Nagao, 1994). We restricted
our patterns to the most frequent 3.9 million pat-
terns of the form ?X-[case particle] Y-[case parti-
cle] predicate? such as ?X-ga Y-ni aru? (?X is in Y?)
which do not contain any negation, number, symbol
or punctuation character. Based on our observation
that patterns in meaningful contradiction and entail-
ment pairs tend to share many co-occurring noun
pairs, we used as input to our classifiers the set Pall
of 792 million pattern pairs for which both patterns
share three co-occurring noun pairs.
2.2 BASE: First stage Classifier for
Contradiction
Below, we detail BASE: its training data and input
data to be classified, and some experimental results.
Our first stage classifier for contradictions, BASE,
is an SVM that uses commonsensical surface and
lexical resources based features, such as n-grams ex-
tracted from patterns, which will be detailed in Sec-
tion 4. An important point to be stressed here is
that we restricted the pattern pairs to be classified
by BASE by exploiting their excitation polarity, a
semantic orientation proposed by Hashimoto et al
(2012). Excitation characterizes unary patterns as
excitatory, inhibitory, or neutral. Excitatory unary
patterns, such as ?cause X? or ?increase X?, entail
that the function, effect, purpose, or role of their ar-
gument?s referent is activated or enhanced, and in-
hibitory unary patterns, such as ?prevent X? or ?X
disappears?, entail that the function, effect, purpose,
or role of their argument?s referent is deactivated or
suppressed. Neutral unary patterns like ?close to X?
are neither excitatory nor inhibitory.
We exploited excitation to restrict the input of
BASE. Based on the result of Hashimoto et al
(2012) showing that two unary patterns with op-
posite polarity have a higher chance to be a con-
tradiction, we extracted from set Pall the set Popp
of binary pattern pairs that contain unary patterns
with opposite excitation polarities as sub-patterns.
??Y cause X?, ?Y prevent X?? is an example of such
a pair since the unary sub-patterns ?cause X? and
?prevent X? are respectively excitatory and in-
hibitory. We used here 6,470 excitation unary pat-
terns hand-labeled as either excitatory (4,882 pat-
terns) or inhibitory (1,588 patterns). Set Popp con-
tains 8 million pattern pairs with roughly 38% true
contradiction pairs, and is the input to BASE. We
will show in experiments at the end of this section
that this restriction is necessary to obtain good per-
formance for BASE. We also tried to add the excita-
tion polarities in BASE?s feature set and classify Pall,
but the performance was worse.
Training Data Another key feature of BASE is
that it is distantly supervised. We did not use
training samples that are directly manually anno-
tated. Instead we automatically generated training
data from a smaller set of (non-)contradiction unary
pattern pairs. We first prepared a set of roughly
800 unary pattern pairs hand-labeled by three human
annotators as contradictions (238 pairs) and non-
contradictions (558 pairs) using majority vote. The
inter-annotator agreement was 0.78 (Fleiss?kappa).
Inspired by Hashimoto et al (2012), we selected
these unary pattern pairs among pairs with high dis-
tributional similarity, with and without restricting
them to having opposite excitation polarity, such as
to get a fair distribution of contradictions and non-
contradictions.
We then extracted from set Pall all 256,000 pat-
tern pairs containing a contradictory unary pattern
pair, and all 5.2 million pattern pairs containing a
non-contradictory unary pattern pair, which we re-
spectively used as positive and negative training data
(estimated 79% and 73% accuracy from 200 hand-
labeled samples). Table 1 shows some examples.
The optimal composition of training data for
BASE was determined according to preliminary ex-
periments using our development set (1,000 manu-
ally labelled samples. See Section 3.1). We trained
20 different classifiers using from 6,250 to 50,000
positive samples (4 sets) and from 12,500 to 200,000
negative samples (5 sets), doubling the amounts in
each step, for a total of 20 configurations. We could
not try a larger training data due to long training time
but we do not expect it to be a problem because the
worst performance was observed with large train-
696
Table 1: Examples of training samples for BASE obtained from unary pattern pairs
Binary pattern pair (the unary pattern pair that extracted it is underlined) Unary pattern pair label
Y ? X ??? (X is bad in Y too) - Y ?? X ??? (X is good even in Y) contradiction
Y ? X ???? (Y too heads toward X) - Y ? X ??? (Y too comes out of X) contradiction
X ?Y ? ??? (add Y to X) - X ?Y ? ??? (insert X into Y) non-contradiction
Y ? X ??? (Y too comes to X) - Y ?? X ??? (go to X with Y) non-contradiction
Figure 3: Effect of the restriction using excitation
ing data (25,000 positives and 200,000 negatives;
the difference from the optimal setting was 2.3% in
average precision). The optimal training data set,
Trainbase, consists of 12,500 positives and 100,000
negatives samples as described above and is the one
we use in our experiments below and in Section 3.
Since BASE input for classification data is Popp
we also tried sampling Trainbase from Popp. We
obtained 56.27% average precision for our classi-
fier BASE, and 52.99% when restricting the source
of training data to pairs in Popp. We believe that the
difference lies in the size of the sets from which we
sampled our training data: while there are 5.46 mil-
lion binary pattern pairs in Pall with a hand-labeled
unary pattern pair in Pall, there are only 237,000
pairs in Popp. We believe this much smaller sam-
ple source lead to a lower performance because it
included much less variations of the patterns.
To train BASE and other classifiers mentioned in
this paper, we used the SVM tool TinySVM2 with
a polynomial kernel of degree 2, the setting which
showed the best performance during our preliminary
experiments.
Effect of Excitation Polarities We also empiri-
cally examined the effect of the restriction on the
patterns using excitation polarities. We used our test
set (2,000 manually annotated samples described in
2 http://chasen.org/?taku/software/TinySVM/
Section 3.1) and 250 manually annotated samples
(majority vote from 3 annotators) from top ranked
pairs of Pall to draw precision curves for BASE over
the top 2 million binary pairs from both Popp and
Pall. In each case we assumed that pairs were dis-
tributed uniformly (i.e., with a constant interval) in
the ranked list of pairs of Popp and Pall, and com-
puted precision accordingly. Since the pairs sets
are reasonably large and were sampled randomly we
thought this was a reasonable hypothesis. The pre-
cision over Popp is higher than that over Pall with
a large margin, suggesting that the restriction using
excitation polarities is beneficial.
2.3 ENT: First stage Classifier for Entailment
ENT is an SVM classifier for entailment trained us-
ing 27,500 hand-annotated binary pattern pairs (set
Trainent, 45% of positive entailment pairs) created
for some previous work (Kloetzer et al, 2013). It es-
sentially uses the same feature set as that for BASE
with the addition of several distributional similar-
ity measures (see Section 4 below for more details).
This classifier is given all pairs of Pall as input and
scores each of them. For this study, we considered
the 44.5 million pattern pairs with a positive SVM
score as entailment pairs. Manual annotation of 200
random samples revealed that the precision of these
pairs was 63% and that the top 7.1 million pairs had
80% precision (result interpolated from the top 16%
of the annotated samples).
2.4 Second stage: Training Data Expansion
and Classifier EXP
Below, we show how we combine BASE?s top output
(hereafter C) and ENT?s top output (hereafter E) in
the second stage of our method to expand Trainbase
and train a new classifier, EXP.
The training data expansion process is based on
the following logical constraint: if a pattern p entails
a pattern q and pattern q contradicts a third pattern r,
then p must contradict r. For example, because ?X
697
Table 2: Examples of triplets ?p, q,r? where p entails q, q contradicts r, and hence p contradicts r
Pattern p Pattern q Pattern r X/Y examples SV M Score(p, r) CDP (p, r)
Y ?? X ???? Y ?? X ????? Y ? X ???? ??/? 0.3 0.98X disappears from Y X vanishes from Y Y is full of X anger/eye
Y ? X ????? Y ? X ???? Y ?? X ???? ??/?? -0.3 0.61stop X in Y finish X in Y start X in Y April/activity
X ? Y ??? X ? Y ??? X ? Y ??? ???/?? 0.07 0.45X shows Y X have Y X loses Y team/confidence
Algorithm 1 Training data expansion: C is the top 5%
output of BASE, E is the top output of ENT (score > 0)
1: procedure EXPAND(C, E)
2: Compute the set of expanded pairs C? = {?p, r? |
?q : ?p, q?? E,?q, r?? C}.
3: Rank the pairs in C? using CDP.
4: Add the N top-ranked pairs in C? \ C as new positive
samples to Trainbase.
5: Remove incoherent negative training samples using
negative cleaning.
6: end procedure
causes Y? (pattern p) entails ?X promotes Y? (pattern
q) and the latter contradicts ?X prevents Y? (pattern
r), we conclude that ?X causes Y? (p) contradicts
?X prevents Y? (r). We call the former contradic-
tion ?q, r? a source contradiction pair, and the later
pair ?p, r? an expanded contradiction pair. Based on
this idea, we combine C and E to aggressively ex-
pand Trainbase. This process is described in Al-
gorithm 1, and Table 2 shows examples of triples
?p, q,r? obtained in our experiments.
Expanding pairs fromC andE compounds the er-
rors made by BASE and ENT, hence it is crucial to
select a highly precise subset of the expanded pairs.
Taking the top pairs according to their SVM score
would achieve this, but since BASE already handles
correctly such pairs, they should not help much as
new training data. We therefore propose a new scor-
ing function for selecting highly precise expanded
pairs: Contradiction Derivation Precision (CDP ).
CDP was designed according to the following
assumption: a source contradiction pair that derives
correct expanded pairs with a high precision should
be reliable. Probably, all the expanded pairs derived
from such a reliable source pair will be correct and
should be included in the new training data .
In our formulation of CDP , correctness of an ex-
panded pair is judged according to the pair?s SVM
score using BASE. In other words, we regard an
expanded pair that has an SVM score above some
threshold ? as a true contradiction. A source contra-
diction pair that derives true contradiction pairs with
a high precision is regarded as a reliable source con-
tradiction pair. CDP , which is defined over a ex-
panded pairs, is the maximum precision among that
of the source contradiction pairs that derive a given
expanded pair.
We first define CDPsub(q, r) over a source con-
tradiction pair ?q, r? as the ratio of expanded pairs
obtained from ?q, r? whose SVM score is above
threshold ?. This ratio corresponds to the precision
of the expanded pairs derived from the source con-
tradiction pair ?q, r?.
CDPsub(q, r) = |{?p, r? ? Ex(q, r) | Sc(p, r) > ?}|
|Ex(q, r)|
HereEx(q, r) is the set of expanded pairs derived
from a source pair ?q, r?, and Sc is the SVM score
given by BASE. In our experiments, we set ? = 0.46
such that pattern pairs for which BASE gives a score
over ? corresponds to the top 5% of BASE?s output.
CDP (p, r) over an expanded pair is defined as fol-
lows, where Source(p, r) is the set of source con-
tradiction pairs that were derived into the expanded
pair ?p, r?.
CDP (p, r) = max?q,r??Source(p,r)CDPsub(q, r)
We then expand the top 5% contradictions of
BASE?s output (set C) and pattern pairs scored pos-
itively by ENT (set E), rank all expanded pairs not
already in C according to CDP, and add the top N
pairs with the highest CDP values as positives to
Trainbase to train EXP. The value of N shall be
determined empirically in later experiments using
a development set. Note that, since CDP (p, r) is
independent of ?p, r??s SVM score, even pairs that
were assigned a negative score by BASE can become
highly ranked by CDP (second triplet in Table 2)
698
and be added to train EXP, hence we expect EXP to
learn something new from these pairs.
Finally, after the addition of expanded pairs, we
remove incoherent training samples. We propose to
remove from the negative training samples of EXP
any pattern pair that may conflict with the newly
added positives; we call this step negative cleaning.
Intuitively, since the content word pairs in a pattern
pair should present some of the strongest evidence
for determining the patterns (non-)contradiction sta-
tus, we remove any negative sample that shares a
content word pair with one of the added expanded
pairs. The final training data for EXP, set Trainexp,
consists of the following: (1) positive samples from
Trainbase, (2) (positive) expanded pairs, and (3)
negative training samples from Trainbase, cleaned
using negative cleaning. We confirmed in our exper-
iments that negative cleaning was necessary to train
a strong EXP classifier (details omitted for reason of
space).
After training EXP with Trainexp, we classify
Popp with EXP to produce the final output of the
whole method. Note that while this expansion pro-
cess can be re-iterated with EXP?s output, our exper-
iments failed to show any improvement with subse-
quent iterations.
3 Evaluation
This section presents our experimental results. We
describe first how we constructed test and develop-
ment data, and then report comparison results be-
tween our method and others including BASE and an
Integer Linear Programming-based (ILP) method.
3.1 Development and Test Data
We asked three human annotators to label 3,000 bi-
nary pattern pairs randomly sampled from Popp as
contradiction or non-contradiction to be used as de-
velopment (1,000 pairs) and test (2,000 pairs) sets.
We considered a pattern pair as a true contradic-
tion relation if at least two out of the three annota-
tors marked it as positive. The inter-rater agreement
score (Fleiss Kappa) was 0.523, indicating moderate
agreement (Landis and Koch, 1977). As a definition
of contradiction, we used the notion of incompati-
bility (i.e., two statements are extremely unlikely to
be simultaneously true) proposed by De Marneffe et
Figure 4: Precision of all the compared methods
al. (2008). We then say binary patterns such as ?X
causes Y? and ?X prevents Y? are contradictory if
the above definition holds for any noun pair that can
instantiate the patterns? variables in the provided se-
mantic class pair.
Because our semantic classes are obtained by au-
tomatic clustering and have no meaningful labels,
we followed Szpektor et al (2007) and provided the
annotators with three random noun pairs that co-
occur with the patterns as a proxy for the class pair.
The annotators marked a given pattern pair as posi-
tive if the contradiction relation between the patterns
held for all three noun pairs presented.
3.2 Experimental Results
Here we show how our proposed method outper-
forms baseline methods. We compare the following
four methods:
? PROPOSED: our proposed method. N , the
number of newly added positive training sam-
ples during the training data expansion pro-
cess, was set to 6,000 according to preliminary
experiments using the development set. We
tried 50 different values of N from 1,000 up to
50,000, adding 1,000 each time, and chose the
N value giving the highest average precision
against our development set (1,000 samples).
? BASE: our first stage classifier.
? PROP-SCORE: same as PROPOSED except for
the use of BASE?s SVM score instead of CDP .
N was set to 30,000 in the same way we set N
for PROPOSED.
? HAS: an adaptation of the contradiction ex-
traction method presented in Hashimoto et al
699
(2012). For a binary pattern pair we first
extracted its unary pattern pair with opposite
polarity (or one at random in case there are
two) and scored it based on our implementa-
tion of Hashimoto et al (2012); the score is
based on the distributional similarity between
unary patterns and an excitation score obtained
using a minimally supervised method based on
the spin model. We then scored the binary pat-
tern pair by the score of this unary pattern pair.
We ranked the pattern pairs of our test set (2,000
random pairs from set Popp) based on the score pro-
duced by each method. For each tested method we
assumed that pairs in the test set were distributed
uniformly like explained in Section 2.2. The pre-
cision curves we obtained are shown in Figure 4.
PROPOSED clearly outperformed BASE and ac-
quired around 750,000 contradiction pattern pairs
with an estimated precision of 80%, out of which
some examples are shown in Table 3. These pairs
cover 26,941 content word pairs and reduce to
272,164 untyped pairs, showing that PROPOSED
does not just acquire a handful of contradictions in
many different class pairs. Also, when matching
these pairs against an antonyms database (extracted
from the dictionary of the morphical analyzer JU-
MAN) we found that only 100,886 of these pattern
pairs contain an antonym pair, which means that
most of the extracted pairs? contradictions are due
to more complex phenomena than simple antonymy.
With the same precision, BASE and PROP-SCORE
acquired only 285,000 pairs (covering 11,794 con-
tent word pairs) and 636,000 pairs respectively. This
implies that our two-stage method can more than
double the number of highly precise contradiction
pairs we acquire as well as increasing their vari-
ety, and that ranking expanded pairs using our scor-
ing function CDP is better than with SVM score,
though even PROP-SCORE performs better than
BASE in our setting. Finally, the poor performance
of HAS suggests that extending the Hashimoto et
al.?s framework to recognition of binary patterns is
not a trivial task.
As to why adding only 6,000 top pairs ranked
by CDP performs better than adding 30,000 pairs
ranked by SVM score, the pattern pairs added in
PROP-SCORE had high SVM scores given by BASE
and as such are already handled nicely by BASE.
Table 3: Examples of pairs acquired by PROPOSED: con-
tradiction (label +) and non-contradiction (label -)
Lab. Pattern pairs (with rank) X/Y example
Y ? X ???? - Y ?? X ????? ??/??
+ X finished Y - X started from Y sale/yesterday
Rank 228,039
X ? Y ??? - Y ? X ??? ??/????
+ X wins against Y - Y wins against X Japan/Vietnam
Rank: 258,068
X ? Y ??? - X ?? Y ??? ?/??
- X lose Y - Have Y in X people/interest
Rank 474,143
Y ? X ???? - Y ?? X ??? ??/??
+ Lose X in Y - Have X in Y too confidence/
Rank 522,534 oneself
Y ? X ????? - X ? Y ???? 9 ?/??
- Y falls down to X - raise Y to X 9th/ranking
Rank 538,901
X ? Y ????? - X ?? Y ??? ?/????
+ Y exists in X - Keep Y out X inside/virus
Rank 620,430
X ?? Y ??? - X ? Y ???? ?/?
- Remove Y off X - X answer with Y I (or me)/eyes
Rank 652,530
Y ? X ?????? - X ? Y ??? ?/??
+ Kick out Y from X - Y remains in X body/fatigue
Rank 697,177
Y ? X ?????? - Y ? X ????? ?/??
+ X reassures Y - X betrays Y I/her
Rank: 749,916
Hence, we think the effect of adding a new sam-
ple from PROP-SCORE is smaller than that in PRO-
POSED, because in PROPOSED we add to the train-
ing data pattern pairs with both high and low (possi-
bly negative) SVM scores.
Finally, while the quality of the entailment pairs
plays a very important role in the assumption that
was the base of CDP , these results show that even
a simple rule such as ?Use entailment pairs with
SVM score over 0 to expand contradictions before
ranking them with CDP ? is sufficient to make the
method work. Though it may be possible to design
a more complex CDP formula which takes entail-
ment score into account, we did not explore this di-
rection in this work.
Comparison with an ILP-based method Finally,
we would like to compare our method with an ILP-
based method. The interaction between contradic-
tion and entailment that forms the basis for our ex-
pansion method has a natural interpretation as an op-
timization problem. We thus compared our method
to the following ILP formulation of this interaction
inspired by Berant et al (2011), using our test set:
700
Figure 5: Comparison between PROPOSED, BASE and
BASE+ILP on a restricted test set (1,306 samples)
(1) G = argmax
?
p6=q
(e(p, q)??)?Epq +(c(p, q)??)?Cpq
(2) s.t. ?p,q,r Epq + Cqr ? Cpr ? 1
(3) ?p,q Epq + Cpq ? 1
(4) ?p,q Epq ? {0, 1} (5) ?p,q Cpq ? {0, 1}
The objective in Equation (1) is a sum over the
weights of every pair of patterns ?p, q?, where Epq
indicates whether a pair ?p, q? is an entailment pair
(Equation (4)), andCpq indicates whether it is a con-
tradiction pair (Equation (5)). e(p, q) and c(p, q) are
the score given respectively by ENT and BASE, and
? is a prior defining the weight of a pair as neither
entailment nor contradiction that shall be set before
any experimentation. Equation (2) states the tran-
sitivity relation which is the basis of our expansion
method. Finally, Equation (3) states that a given pat-
tern pair cannot be a contradiction pair and an entail-
ment pair at the same time. Since our patterns are
class-dependent, we solved separate ILP instances
for each semantic class pair.
We drew a precision curve for each of BASE,
PROPOSED and BASE+ILP. To draw the curve for
BASE+ILP, we incrementally raised the sample?s
non-contradiction non-entailment prior ? (more de-
tails in Berant et al (2011)). Because of the com-
putational difficulty of ILP (NP-complete) and the
size of our data, the computation for the ILP-based
method ran out of memory on a 72GB machine for
116 class pairs out of the 1,031 that our test set cov-
ers. For this reason, we only used the 1,306 samples
of the test set covered by the remaining 915 class
pairs. We also measured the performance of BASE
and PROPOSED on the same restricted test set.
Figure 5 shows that under these conditions the
ILP-based method performance resembles BASE
and is worse than PROPOSED on all data points.
PROPOSED performs slightly worse in this setting
compared to when classifying the whole of Popp,
but this only means that its performance is good for
the 116 class pairs we ignored in this experiment.
While this comparison is only made in a restricted
setting, our expansion method still outperforms ILP
and is clearly more scalable. The ILP results could
be improved by adding more constraints (contradic-
tion is symmetric, entailment is transitive), but this
would also make the problem even more intractable
in terms of computational costs.
4 Features
In this section we present the features used in our
classifiers, which are mainly categorized into three:
surface features (i.e., those reflecting the patterns?
content itself), features based on external lexical re-
sources, and distributional similarity based features;
all features are listed in Table 4. ENT uses all the
features while BASE and EXP use all except for the
distributional similarity based ones. The optimality
of the feature sets was confirmed through ablation
tests using the development set (results omitted for
the sake of space).
Since patterns with a contradiction or entailment
relation are often superficially similar, for instance,
in case structure or inflection, we use a number of
surface features based on string similarity measures,
extending the feature sets used by Malakasiotis and
Androutsopoulos (2007) for entailment recognition.
They include bag-of-words features such as n-grams
and similarity scores concerning the bag-of-words
such as their Euclidian distance.
To complement the surface features with knowl-
edge about the content words, we used lexi-
cal databases including such as antonymy, syn-
onymy, entailment, or allography. The presence
of such word pairs is usually a good indicator of
(non-)contradiction or (non-)entailment at the pat-
tern level. More specifically, for any word pair
?wp,wq? taken from a pattern pair ?p, q? we mark
the presence of ?wp,wq? in each of the lexical re-
sources as a binary feature. We used the Japanese
lexical resources distributed by the ALAGIN Fo-
rum3: the verb entailment database (117,000 verb
3 http://www.alagin.jp/
701
Table 4: Features summary, computed over a pair of patterns ?p, q?
su
rfa
ce Similarity measures: common elements ratios, Dice coefficient, Jaccard and discounted Jaccard scores, Cosine, Euclidian, Manhattan, Levenshteinand Jaro distances; computed over: the patterns? 1-, 2- and 3-grams sets of: characters, morphemes, their stems & POS; content words and stems
binary feature for each of the patterns? subtrees, 1- and 2-grams ; patterns? lengths and length ratios
le
x.
r. entries in databases of verb entailments and non-entailments, synonyms, antonyms, allographs ; checked over: pairs of content words,
pairs of content word stems, same for the reverse pattern pair ?q, p?
di
s.s
. Distributional similarity measures: Common elements ratios, Jaccard and discounted Jaccard scores, sets and sets intersection cardinality,
DIRT (Lin and Pantel, 2001), Weeds (Weeds and Weir, 2003) and Hashimoto (Hashimoto et al, 2009) scores; computed over: patterns?
co-occurring noun pairs, POS tags of those, nouns co-occurring in each variable slot, nouns co-occurring with each unary sub-patterns
ot
he
r binary feature for each semantic class pair and individual semantic classes
patterns frequency rank in the given semantic class pair
pairs; Alagin ID A-2), the databases of synonyms,
antonyms and meronyms (respectively 111,000,
5000 and 2500 pairs; Alagin ID A-9), and the al-
lographic word database (2.7 million pairs; Alagin
ID A-7). We also used the information concerning
allographic words in the dictionary of the morpho-
logical analyzer JUMAN4.
Distributional similarity values between patterns
are based on the idea that patterns that appear in
similar contexts tend to have similar meanings and
as such are useful to recognize entailment (Lin and
Pantel, 2001). We computed as features several dis-
tributional similarity measures on the sets of each
pattern?s co-occurring noun pairs and their POS
tags, of nouns co-occurring in each variable slot, and
with each of the pattern?s unary sub-patterns.
We also added a few more uncategorizable fea-
tures. See Table 4 for more details.
5 Related Work
A number of previous work dealt with the recogni-
tion of contradictions between sentences. Harabagiu
et al (2006) proposed a contradiction detection
method that focuses on negation, antonymy and
some discourse information. Kawahara et al (2010)
also used negations and antonyms to extract con-
trastive/contradictory statements from the web to
present users with a bird ?s-eye view of statements
about a given topic. Bobrow et al (2007) showed
a method using logical forms with relatively precise
results. Ohki et al (2011) proposed a method to rec-
ognize confinment, a novel semantic relation related
to both entailment and contradiction. While we do
not deal ourselves directly with sentences, we expect
that the binary pattern pairs we acquire can play a
role similar to that of basic linguistic resources such
4 http://nlp.ist.i.kyoto-u.ac.jp/EN/index.php?JUMAN
as antonyms and negations in these works. Closer
to our work, Ritter et al (2008) presented a method
for detecting contradictions between functional re-
lations like ?X was born in Y?, but these constitute
only a part of the semantic relations expressed by the
binary patterns we deal with in this paper.
Other works analyzed contradictions from lin-
guistic/semantic viewpoints. Voorhees (2008) ana-
lyzed the contradiction recognition-task of the RTE3
contest. Magnini and Cabrio (2010) examined rela-
tions between contradictions and textual entailment
samples. De Marneffe et al (2008) presented a
typology of contradictions, and showed that con-
tradictions can arise from a multitude of phenom-
ena. They showed contradictions based on lexical or
world knowledge are challenging and require a high-
level understanding of language and/or the world.
As stated in the introduction, these are the types of
contradictions our method focuses on.
6 Conclusion
This paper showed how to acquire a large number of
contradiction pairs between lexico-syntactic binary
patterns by exploiting (1) the interaction between
contradiction and entailment, and (2) excitation po-
larities. In the end, we could acquire 750,000 typed
contradiction pattern pairs with an estimated 80%
precision. The resulting contradiction pairs cov-
ered ones deeply related to world knowledge such
as the pair ??X reassures Y?, ?X betrays Y??. We ex-
pect our work to lead to a high level analysis of
textual information, such as flagging unreliable in-
formation or identifying important documents to be
surveyed for understanding complex social prob-
lems. We plan to release the data we acquired to
the NLP community through the ALAGIN Forum5.
5 http://www.alagin.jp/
702
References
J. Berant, I. Dagan, and J. Goldberger. 2011. Global
learning of typed entailment rules. In Proceedings of
ACL 2011, pages 610?619.
D. G. Bobrow, C. Condoravdi, R. Crouch, V. De Paiva,
L. Karttunen, T. H. King, R. Nairn, L. Price, and
A. Zaenen. 2007. Precision-focused textual inference.
In Proceedings of the ACL-PASCAL Workshop on Tex-
tual Entailment and Paraphrasing, page 16?21.
M.-C. De Marneffe, A. N. Rafferty, and C. D. Manning.
2008. Finding contradictions in text. Proceedings of
ACL 2008, page 1039?1047.
S. De Saeger, K. Torisawa, J. Kazama, K. Kuroda, and
M. Murata. 2009. Large scale relation acquisition us-
ing class dependent patterns. In Proceedings of ICDM
2009, page 764?769.
S.M. Harabagiu, A. Hickl, and V.F. Lacatusu. 2006.
Negation, contrast and contradiction in text process-
ing. In Proceedings of AAAI 2006, pages 755?762.
C. Hashimoto, K. Torisawa, K. Kuroda, S. De Saeger,
M. Murata, and J. Kazama. 2009. Large-scale verb
entailment acquisition from the web. In Proceedings
of EMNLP 2009, volume 3, page 1172?1181.
C. Hashimoto, K. Torisawa, S. De Saeger, J.-H. Oh, and
J. Kazama. 2012. Excitatory or inhibitory: A new se-
mantic orientation extracts contradiction and causality
from the web. In Proceedings of EMNLP 2012.
D. Kawahara, S. Kurohashi, and K. Inui. 2008. Grasp-
ing major statements and their contradictions toward
information credibility analysis of web contents. In
Proceedings of WI-IAT 2008, volume 1, page 393?
397.
D. Kawahara, K. Inui, and S. Kurohashi. 2010. Iden-
tifying contradictory and contrastive relations between
statements to outline web information on a given topic.
In Proceedings of COLING 2010, page 534?542.
J. Kazama and K. Torisawa. 2008. Inducing gazetteers
for named entity recognition by large-scale clustering
of dependency relations. Proceedings of ACL 2008,
page 407?415.
J. Kloetzer, S. De Saeger, K. Torisawa, M. Sano,
C. Hashimoto, and J. Gotoh. 2013. Large-scale acqui-
sition of entailment pattern pairs. In Information Pro-
cessing Society of Japan (IPSJ) Kansai-Branch Con-
vention.
S. Kurohashi and M. Nagao. 1994. KN parser: Japanese
dependency/case structure analyzer. In Proceedings
of the Workshop on Sharable Natural Language Re-
sources, page 48?55.
J. R. Landis and G. G. Koch. 1977. The measurement of
observer agreement for categorical data. Biometrics,
page 159?174.
D. Lin and P. Pantel. 2001. Dirt - discovery of inference
rules from text. In Proceedings of the ACM SIGKDD
Conference on Knowledge Discovery and Data Min-
ing, pages 323?328.
B. Magnini and E. Cabrio. 2010. Contradiction-focused
qualitative evaluation of textual entailment. In Pro-
ceedings of the Workshop on Negation and Speculation
in Natural Language Processing, page 86?94.
P. Malakasiotis and I. Androutsopoulos. 2007. Learning
textual entailment using SVMs and string similarity
measures. In Proceedings of the ACL- PASCAL Work-
shop on Textual Entailment and Paraphrasing, page 42
?47.
K. Murakami, E. Nichols, S. Matsuyoshi, A. Sumida,
S. Masuda, K. Inui, and Y. Matumoto. 2009. State-
ment map: assisting information crediblity analysis
by visualizing arguments. In Proceedings of the 3rd
workshop on Information credibility on the web, page
43?50. ACM.
M. Ohki, S. Matsuyoshi, J. Mizuno, K. Inui, E. Nichols,
K. Murakami, S. Masuda, and Y. Matsumoto. 2011.
Recognizing confinement in web texts. In the Pro-
ceedings of the Ninth International Conference on
Computational Semantics, page 215?224.
A. Ritter, D. Downey, S. Soderland, and O. Etzioni.
2008. It?s a contradiction?no, it?s not: a case study
using functional relations. In Proceedings of EMNLP
2008, pages 11?20.
S. Schoenmackers, O. Etzioni, D. S Weld, and J. Davis.
2010. Learning first-order horn clauses from web text.
In Proceedings of EMNLP 2010, page 1088?1098.
I. Szpektor, E. Shnarch, and I. Dagan. 2007. Instance-
based evaluation of entailment rule acquisition. In
Proceedings of ACL 2007, volume 45, page 456?463.
E. M. Voorhees. 2008. Contradictions and justifications:
Extensions to the textual entailment task. In Proceed-
ings of ACL 2008, page 63?71.
J. Weeds and D. Weir. 2003. A general framework for
distributional similarity. In Proceedings of EMNLP
2003, page 81?88. Association for Computational
Linguistics.
703
Proceedings of NAACL-HLT 2013, pages 63?73,
Atlanta, Georgia, 9?14 June 2013. c?2013 Association for Computational Linguistics
Minimally Supervised Method for Multilingual Paraphrase Extraction
from Definition Sentences on the Web
Yulan Yan? Chikara Hashimoto? Kentaro Torisawa?
Takao Kawai? Jun?ichi Kazama? Stijn De Saeger??
? ? ? ?? ?? Information Analysis Laboratory
Universal Communication Research Institute
National Institute of Information and Communications Technology (NICT)
{? yulan, ? ch, ? torisawa, ??stijn}@nict.go.jp
Abstract
We propose a minimally supervised method
for multilingual paraphrase extraction from
definition sentences on the Web. Hashimoto
et al (2011) extracted paraphrases from
Japanese definition sentences on the Web, as-
suming that definition sentences defining the
same concept tend to contain paraphrases.
However, their method requires manually an-
notated data and is language dependent. We
extend their framework and develop a mini-
mally supervised method applicable to multi-
ple languages. Our experiments show that our
method is comparable to Hashimoto et al?s
for Japanese and outperforms previous unsu-
pervised methods for English, Japanese, and
Chinese, and that our method extracts 10,000
paraphrases with 92% precision for English,
82.5% precision for Japanese, and 82% preci-
sion for Chinese.
1 Introduction
Automatic paraphrasing has been recognized as an
important component for NLP systems, and many
methods have been proposed to acquire paraphrase
knowledge (Lin and Pantel, 2001; Barzilay and
McKeown, 2001; Shinyama et al, 2002; Barzilay
and Lee, 2003; Dolan et al, 2004; Callison-Burch,
2008; Hashimoto et al, 2011; Fujita et al, 2012).
We propose a minimally supervised method for
multilingual paraphrase extraction. Hashimoto et al
(2011) developed a method to extract paraphrases
from definition sentences on the Web, based on
their observation that definition sentences defining
the same concept tend to contain many paraphrases.
Their method consists of two steps; they extract def-
inition sentences from the Web, and extract phrasal
(1) a. Paraphrasing is the use of your own words to express the au-
thor?s ideas without changing the meaning.
b. Paraphrasing is defined as a process of transforming an expres-
sion into another while keeping its meaning intact.
(2) a. ?????????????????????????
???????????????? (Paraphrasing refers to
the replacement of an expression into another without changing
the semantic content.)
b. ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?
???????????????????????
????????? (Paraphrasing is a process of trans-
forming an expression into another of the same language while
preserving the meaning and content as much as possible.)
(3) a. ????????????????????????
??????? (Paraphrasing refers to the transformation
of sentence structure by the translator without changing the
meaning of original text.)
b. ?????????????????????????
(Paraphrasing is a translation method of keeping the content of
original text but not keeping the expression.)
Figure 1: Multilingual definition pairs on ?paraphrasing.?
paraphrases from the definition sentences. Both
steps require supervised classifiers trained by manu-
ally annotated data, and heavily depend on their tar-
get language. However, the basic idea is actually
language-independent. Figure 1 gives examples of
definition sentences on the Web that define the same
concept in English, Japanese, and Chinese (with En-
glish translation). As indicated by underlines, each
definition pair has a phrasal paraphrase.
We aim at extending Hashimoto et al?s method
to a minimally supervised method, thereby enabling
acquisition of phrasal paraphrases within one lan-
guage, but in different languages without manually
annotated data. The first contribution of our work
is to develop a minimally supervised method for
multilingual definition extraction that uses a clas-
sifier distinguishing definition from non-definition.
The classifier is learnt from the first sentences in
63
Defini?n	 ?sentences	 Defini?n	 ?pairs	 ? Paraphrase	 ?candidates	 ?
Ranked	 ?paraphrase	 ?candidates	 ?Classifier	Web	
Defini?on	 ?Extrac?on	 ?(Sec?on	 ?2.1)	 Paraphrase	 ?Extrac?on	 ?(Sec?on	 ?2.2)	
Ranking	 ?by	 ?Score	Automa?cally	 ?constructed	 ?training	 ?data	
Web	 Wikipedia	
Figure 2: Overall picture of our method.
Wikipedia articles, which can be regarded as the def-
inition of the title of Wikipedia article (Kazama and
Torisawa, 2007) and hence can be used as positive
examples. Our method relies on a POS tagger, a de-
pendency parser, a NER tool, noun phrase chunking
rules, and frequency thresholds for each language,
in addition to Wikipedia articles, which can be seen
as a manually annotated knowledge base. How-
ever, our method needs no additional manual anno-
tation particularly for this task and thus we catego-
rize our method as a minimally supervised method.
On the other hand, Hashimoto et al?s method heav-
ily depends on the properties of Japanese like the
assumption that characteristic expressions of defini-
tion sentences tend to appear at the end of sentence
in Japanese. We show that our method is applica-
ble to English, Japanese, and Chinese, and that its
performance is comparable to state-of-the-art super-
vised methods (Navigli and Velardi, 2010). Since
the three languages are very different we believe that
our definition extraction method is applicable to any
language as long as Wikipedia articles of the lan-
guage exist.
The second contribution of our work is to de-
velop a minimally supervised method for multi-
lingual paraphrase extraction from definition sen-
tences. Again, Hashimoto et al?s method utilizes
a supervised classifier trained with annotated data
particularly prepared for this task. We eliminate the
need for annotation and instead introduce a method
that uses a novel similarity measure considering
the occurrence of phrase fragments in global con-
texts. Our paraphrase extraction method is mostly
language-independent and, through experiments for
the three languages, we show that it outperforms
unsupervised methods (Pas?ca and Dienes, 2005;
Koehn et al, 2007) and is comparable to Hashimoto
et al?s supervised method for Japanese.
Previous methods for paraphrase (and entailment)
extraction can be classified into a distributional sim-
ilarity based approach (Lin and Pantel, 2001; Gef-
fet and Dagan, 2005; Bhagat et al, 2007; Szpek-
tor and Dagan, 2008; Hashimoto et al, 2009) and a
parallel corpus based approach (Barzilay and McK-
eown, 2001; Shinyama et al, 2002; Barzilay and
Lee, 2003; Dolan et al, 2004; Callison-Burch,
2008). The former can exploit large scale monolin-
gual corpora, but is known to be unable to distin-
guish paraphrase pairs from antonymous pairs (Lin
et al, 2003). The latter rarely mistakes antonymous
pairs for paraphrases, but preparing parallel corpora
is expensive. As with Hashimoto et al (2011), our
method is a kind of parallel corpus approach in that it
uses definition pairs as a parallel corpus. However,
our method does not suffer from a high labor cost
of preparing parallel corpora, since it can automati-
cally collect definition pairs from the Web on a large
scale. The difference between ours and Hashimoto
et al?s is that our method requires no manual label-
ing of data and is mostly language-independent.
2 Proposed Method
Our method first extracts definition sentences from
the Web, and then extracts paraphrases from the def-
inition sentences, as illustrated in Figure 2.
2.1 Definition Extraction
2.1.1 Automatic Construction of Training Data
Our method learns a classifier that classifies sen-
tences into definition and non-definition using auto-
matically constructed training data, TrDat. TrDat?s
positive examples, Pos, are the first sentences of
Wikipedia articles and the negative examples, Neg,
are randomly sampled Web sentences. The former
can be seen as definition, while the chance that the
sentences in the latter are definition is quite small.
Our definition extraction not only distinguishes
definition from non-definition but also identities the
defined term of a definition sentence, and in the
paraphrase extraction step our method couples two
definition sentences if their defined terms are identi-
cal. For example, the defined terms of (1a) and (1b)
in Figure 1 are both ?Paraphrasing? and thus the two
definition sentences are coupled. For Pos, we mark
up the title of Wikipedia article as the defined term.
For Neg, we randomly select a noun phrase in a sen-
64
(A)
N-gram definition pattern N-gram non-definition pattern
?[term] is the [term] may be
[term] is a type of [term] is not
(B)
Subsequence definition pattern Subsequence non-definition pattern
[term] is * which is located you may * [term]
[term] is a * in the was [term] * , who is
(C)
Subtree definition pattern Subtree non-definition pattern
[term] is defined as the NP [term] will not be
Table 1: Examples of English patterns.
tence and mark it up as a (false) defined term. Any
marked term is uniformly replaced with [term].
2.1.2 Feature Extraction and Learning
As features, we use patterns that are characteristic
of definition (definition patterns) and those that are
unlikely to be a part of definition (non-definition pat-
terns). Patterns are either N-grams, subsequences, or
dependency subtrees, and are mined automatically
from TrDat. Table 1 shows examples of patterns
mined by our method. In (A) of Table 1, ??? is
a symbol representing the beginning of a sentence.
In (B), ?*? represents a wildcard that matches any
number of arbitrary words. Patterns are represented
by either their words? surface form, base form, or
POS. (Chinese words do not inflect and thus we do
not use the base form for Chinese.)
We assume that definition patterns are fre-
quent in Pos but are infrequent in Neg, and
non-definition patterns are frequent in Neg but
are infrequent in Pos. To see if a given pat-
tern ? is likely to be a definition pattern, we
measure ??s probability rate Rate(?). If the
probability rate of ? is large, ? tends to be a
definition pattern. The probability rate of ? is:
Rate(?) =
freq(?,Pos)/|Pos|
freq(?,Neg)/|Neg|
, iffreq(?,Neg) 6= 0.
Here, freq(?,Pos) = |{s ? Pos : ? ? s}| and
freq(?,Neg) = |{s ? Neg : ? ? s}|. We write ? ? s
if sentence s contains ?. If freq(?,Neg) = 0,
Rate(?) is set to the largest value of all the patterns?
Rate values. Only patterns whose Rate is more
than or equal to a Rate threshold ?pos and whose
freq(?,Pos) is more than or equal to a frequency
threshold are regarded as definition patterns. Simi-
larly, we check if ? is likely to be a non-definition
pattern. Only patterns whose Rate is less or equal
English Japanese Chinese
Type Representation Pos Neg Pos Neg Pos Neg
N-gram
Surface 120 400 30 100 20 100
Base 120 400 30 100 ? ?
POS 2,000 4,000 500 500 100 400
Subsequence
Surface 120 400 30 100 20 40
Base 120 400 30 100 ? ?
POS 2,000 2,000 500 500 200 400
Subtree
Surface 5 10 5 10 5 5
Base 5 10 5 10 ? ?
POS 25 50 25 50 25 50
Table 2: Values of frequency threshold.
to a Rate threshold ?neg and whose freq(?,Neg)
is more than or equal to a frequency threshold are
regarded as non-definition patterns. The probability
rate is based on the growth rate (Dong and Li,
1999).
?pos and ?neg are set to 2 and 0.5, while the fre-
quency threshold is set differently according to lan-
guages, pattern types (N-gram, subsequence, and
subtree), representation (surface, base, and POS),
and data (Pos and Neg), as in Table 2. The thresholds
in Table 2 were determined manually, but not really
arbitrarily. Basically they were determined accord-
ing to the frequency of each pattern in our data (e.g.
how frequently the surface N-gram of English ap-
pears in English positive training samples (Pos)).
Below, we detail how patterns are acquired. First,
we acquire N-gram patterns. Then, subsequence
patterns are acquired using the N-gram patterns as
input. Finally, subtree patterns are acquired using
the subsequence patterns as input.
N-gram patterns We collect N-gram patterns
from TrDat with N ranging from 2 to 6. We filter
out N-grams using thresholds on the Rate and fre-
quency, and regard those that are kept as definition
or non-definition N-grams.
Subsequence patterns We generate subsequence
patterns as ordered combinations of N-grams with
the wild card ?*? inserted between them (we use
two or three N-grams for a subsequence). Then, we
check each of the generated subsequences and keep
it if there exists a sentence in TrDat that contains the
subsequence and whose root node is contained in the
subsequence. For example, subsequence ?[term]
is a * in the? is kept if a term-marked sentence like
?[term] is a baseball player in the Dominican Re-
public.? exists in TrDat. Then, patterns are filtered
65
out using thresholds on the Rate and frequency as
we did for N-grams.
Subtree patterns For each definition and non-
definition subsequence, we retrieve all the term-
marked sentences that contain the subsequence from
TrDat, and extract a minimal dependency subtree
that covers all the words of the subsequence from
each retrieved sentence. For example, assume that
we retrieve a term-marked sentence ?[term] is
usually defined as the way of life of a group of peo-
ple.? for subsequence ?[term] is * defined as the?.
Then we extract from the sentence the minimal de-
pendency subtree in the left side of (C) of Table 1.
Note that all the words of the subsequence are con-
tained in the subtree, and that in the subtree a node
(?way?) that is not a part of the subsequence is re-
placed with its dependency label (?NP?) assigned by
the dependency parser. The patterns are filtered out
using thresholds on the Rate and frequency.
We train a SVM classifier1 with a linear kernel,
using binary features that indicate the occurrence of
the patterns described above in a target sentence.
In theory, we could feed all the features to the
SVM classifier and let the classifier pick informa-
tive features. But we restricted the feature set for
practical reasons: the number of features would be-
come tremendously large. There are two reasons for
this. First, the number of sentences in our automati-
cally acquired training data is huge (2,439,257 posi-
tive sentences plus 5,000,000 negative sentences for
English, 703,208 positive sentences plus 1,400,000
negative sentences for Japanese and 310,072 posi-
tive sentences plus 600,000 negative sentences for
Chinese). Second, since each subsequence pattern
is generated as a combination of two or three N-
gram patterns and one subsequence pattern can gen-
erate one or more subtree patterns, using all possi-
ble features leads to a combinatorial explosion of
features. Moreover, since the feature vector will be
highly sparse with a huge number of infrequent fea-
tures, SVM learning becomes very time consuming.
In preliminary experiments we observed that when
using all possible features the learning process took
more than one week for each language. We there-
fore introduced the current feature selection method,
in which the learning process finished in one day but
1http://svmlight.joachims.org.
Original Web sentence: Albert Pujols is a baseball player.
Term-marked sentence 1: [term] is a baseball player.
Term-marked sentence 2: Albert Pujols is a [term].
Figure 3: Term-marked sentences from a Web sentence.
still obtains good results.
2.1.3 Definition Extraction from the Web
We extract a large amount of definition sen-
tences by applying this classifier to sentences in our
Web archive. Because our classifier requires term-
marked sentences (sentences in which the term be-
ing defined is marked) as input, we first have to iden-
tify all such defined term candidates for each sen-
tence. For example, Figure 3 shows a case where a
Web sentence has two NPs (two candidates of de-
fined term). Basically we pick up NPs in a sen-
tence by simple heuristic rules. For English, NPs are
identified using TreeTagger (Schmid, 1995) and two
NPs are merged into one when they are connected by
?for? or ?of?. After applying this procedure recur-
sively, the longest NPs are regarded as candidates of
defined terms and term-marked sentences are gener-
ated. For Japanese, we first identify nouns that are
optionally modified by adjectives as NPs, and allow
two NPs connected by ??? (of ), if any, to form
a larger NP. For Chinese, nouns that are optionally
modified by adjectives are considered as NPs.
Then, each term-marked sentence is given a fea-
ture vector and classified by the classifier. The term-
marked sentence whose SVM score (the distance
from the hyperplane) is the largest among those from
the same original Web sentence is chosen as the final
classification result for the original Web sentence.
2.2 Paraphrase Extraction
We use all the Web sentences classified as defini-
tion and all the sentences in Pos for paraphrase ex-
traction. First, we couple two definition sentences
whose defined term is the same. We filter out defini-
tion sentence pairs whose cosine similarity of con-
tent word vectors is less than or equal to threshold
C, which is set to 0.1. Then, we extract phrases
from each definition sentence, and generate all pos-
sible phrase pairs from the coupled sentences. In
this study, phrases are restricted to predicate phrases
that consist of at least one dependency relation and
in which all the constituents are consecutive in a
66
f1
The ratio of the number of words shared between two can-
didate phrases to the number of all of the words in the two
phrases. Words are represented by either their surface form
(f1,1), base form (f1,2) or POS (f1,3).
f2
The identity of the leftmost word (surface form (f2,1), base
form (f2,2) or POS (f2,3)) between two candidate phrases.
f3
The same as f2 except that we use the rightmost word.
There are three corresponding subfunctions (f3,1 to f3,3).
f4
The ratio of the number of words that appear in a candidate
phrase segment of a definition sentence s1 and in a segment
that is NOT a part of the candidate phrase of another def-
inition sentence s2 to the number of all the words of s1?s
candidate phrase. Words are in their base form (f4,1).
f5 The reversed (s1 ? s2) version of f4,1 (f5,1).
f6
The ratio of the number of words (the surface form) of a
shorter candidate phrase to that of a longer one (f6,1).
f7
Cosine similarity between two definition sentences from
which two candidate phrases are extracted. Only content
words in the base form are used (f7,1).
f8
The ratio of the number of parent dependency subtrees that
are shared by two candidate phrases to the number of all the
parent dependency subtrees. The parent dependency sub-
trees are adjacent to the candidate phrases and represented
by their surface form (f8,1), base form (f8,2), or POS (f8,3).
f9
The same as f8 except that we use child dependency sub-
trees. There are 3 subfunctions (f9,1 to f9,3) of f9 type.
f10
The ratio of the number of context N-grams that are shared
by two candidate phrases to the number of all the context N-
grams of both candidate phrases. The context N-grams are
adjacent to the candidate phrases and represented by either
the surface form, the base form, or POS. The N ranges from
1 to 3, and the context is either left-side or right-side. Thus,
there are 18 subfunctions (3? 3? 2).
Table 3: Local similarity subfunctions, f1,1 to f10,18.
sentence. Accordingly, if two definition sentences
that are coupled have three such predicate phrases
respectively, we get nine phrase pairs, for instance.
A phrase pair extracted from a definition pair is a
paraphrase candidate and is given a score that indi-
cates the likelihood of being a paraphrase, Score. It
consists of two similarity measures, local similarity
and global similarity, which are detailed below.
Local similarity Following Hashimoto et al, we
assume that two candidate phrases (p1, p2) tend to
be a paraphrase if they are similar enough and/or
their surrounding contexts are sufficiently similar.
Then, we calculate the local similarity (localSim) of
(p1, p2) as the weighted sum of 37 similarity sub-
functions that are grouped into 10 types (Table 3.)
For example, the f1 type consists of three subfunc-
tions, f1,1, f1,2, and f1,3. The 37 subfunctions are
inspired by Hashimoto et al?s features. Then, local-
Sim is defined as:
localSim(p1, p2) = max
(dl,dm)?DP (p1,p2)
ls(p1, p2, dl, dm).
Here, ls(p1, p2, dl, dm) =
?10
i=1
?ki
j=1
wi,j?fi,j(p1,p2,dl,dm)
ki .
DP (p1, p2) is the set of all definition sentence pairs
that contain (p1, p2). (dl, dm) is a definition sen-
tence pair containing (p1, p2). ki is the number
of subfunctions of fi type. wi,j is the weight for
fi,j . wi,j is uniformly set to 1 except for f4,1
and f5,1, whose weight is set to ?1 since they
indicate the unlikelihood of (p1, p2)?s being a
paraphrase. As the formula indicates, if there is
more than one definition sentence pair that contains
(p1, p2), localSim is calculated from the definition
sentence pair that gives the maximum value of
ls(p1, p2, dl, dm). localSim is local in the sense that
it is calculated based on only one definition pair
from which (p1, p2) are extracted.
Global similarity The global similarity (global-
Sim) is our novel similarity function. We decompose
a candidate phrase pair (p1, p2) into Comm, the com-
mon part between p1 and p2, and Diff , the difference
between the two. For example, Comm and Diff of
(?keep the meaning intact?, ?preserve the meaning?)
is (?the meaning?) and (?keep, intact?, ?preserve?).
globalSim measures the semantic similarity of
the Diff of a phrase pair. It is proposed based on
the following intuition: phrase pair (p1, p2) tend
to be a paraphrase if their surface difference (i.e.
Diff ) have the same meaning. For example, if
?keep, intact? and ?preserve? mean the same, then
(?keep the meaning intact?, ?preserve the meaning?)
is a paraphrase.
globalSim considers the occurrence of Diff in
global contexts (i.e., all the paraphrase candidates
from all the definition pairs). The globalSim of a
given phrase pair (p1, p2) is measured by basically
counting how many times the Diff of (p1, p2) ap-
pears in all the candidate phrase pairs from all the
definition pairs. The assumption is that Diff tends to
share the same meaning if it appears repeatedly in
paraphrase candidates from all definition sentence
pairs, i.e., our parallel corpus. Each occurrence of
Diff is weighted by the localSim of the phrase pair
in which Diff occurs. Precisely, globalSim is defined
as:
67
Threshold The frequency threshold of Table 2 (Section 2.1.2).
NP rule Rules for identifying NPs in sentences (Section 2.1.3).
POS list The list of content words? POS (Section 2.2).
Tagger/parser POS taggers, dependency parsers and NER tools.
Table 4: Language-dependent components.
globalSim(p1, p2) =
?
(pi,pj)?PP (p1,p2)
localSim(pi, pj)
M
.
PP (p1, p2) is the set of candidate phrase pairs
whose Diff is the same as (p1, p2).2 M is the num-
ber of similarity subfunction types whose weight is
1, i.e. M = 8 (all the subfunction types except f4
and f5). It is used to normalize the value of each
occurrence of Diff to [0, 1].3 globalSim is global
in the sense that it considers all the definition pairs
that have a phrase pair with the same Diff as a target
candidate phrase pair (p1, p2).
The final score for a candidate phrase pair is:
Score(p1, p2) = localSim(p1, p2) + ln globalSim(p1, p2).
The way of combining the two similarity functions
has been determined empirically after testing several
other ways of combining them. This ranks all the
candidate phrase pairs.
Finally, we summarize language-dependent com-
ponents that we fix manually in Table 4.
3 Experiments
3.1 Experiments of Definition Extraction
We show that our unsupervised definition extrac-
tion method is competitive with state-of-the-art su-
pervised methods for English (Navigli and Velardi,
2010), and that it extracts a large number of defini-
tions reasonably accurately for English (3,216,121
definitions with 70% precision), Japanese (651,293
definitions with 62.5% precision), and Chinese
(682,661 definitions with 67% precision).
2If there are more than one (pi, pj) in a definition pair, we
use only one of them that has the largest localSim value.
3Although we claim that our idea of using globalSim is ef-
fective, we do not claim that the above formula for calculating
is the optimal way to implement the idea. Currently we are in-
vestigating a more mathematically well-motivated model.
3.1.1 Preparing Corpora
First we describe Pos, Neg, and the Web corpus
from which definition sentences are extracted. As
the source of Pos, we used the English Wikipedia
of April 2011 (3,620,149 articles), the Japanese
Wikipedia of October 2011 (830,417 articles), and
the Chinese Wikipedia of August 2011 (365,545 ar-
ticles). We removed category articles, template ar-
ticles, list articles and so on from them. Then the
number of sentences of Pos was 2,439,257 for En-
glish, 703,208 for Japanese, and 310,072 for Chi-
nese. We verified our assumption that Wikipedia
first sentences can mostly be seen as definition by
manually checking 200 random samples from Pos.
96.5% of English Pos, 100% of Japanese Pos, and
99.5% of Chinese Pos were definitions.
As the source of Neg, we used 600 million
Japanese Web pages (Akamine et al, 2010) and
the ClueWeb09 corpus for English (about 504 mil-
lion pages) and Chinese (about 177 million pages).4
From each Web corpus, we collected the sentences
satisfying following conditions: 1) they contain 5
to 50 words and at least one verb, 2) less than half
of their words are numbers, and 3) they end with a
period. Then we randomly sampled sentences from
the collected sentences as Neg so that |Neg| was
about twice as large as |Pos|: 5,000,000 for English,
1,400,000 for Japanese, and 600,000 for Chinese.
In Section 3.1.3, we use 10% of the Web corpus as
the input to the definition classifier. The number of
sentences are 294,844,141 for English, 245,537,860
for Japanese, and 68,653,130 for Chinese.
All the sentences were POS-tagged and parsed.
We used TreeTagger and MSTParser (McDonald
et al, 2006) for English, JUMAN (Kurohashi and
Kawahara, 2009a) and KNP (Kurohashi and Kawa-
hara, 2009b) for Japanese, MMA (Kruengkrai et al,
2009) and CNP (Chen et al, 2009) for Chinese.
3.1.2 Comparison with Previous Methods
We compared our method with the state-of-the-
art supervised methods proposed by Navigli and Ve-
lardi (2010), using their WCL datasets v1.0 (http:
//lcl.uniroma1.it/wcl/), definition and non-
definition datasets for English (Navigli et al, 2010).
Specifically, we used its training data (TrDatwcl,
hereafter), which consisted of 1,908 definition and
4http://lemurproject.org/clueweb09.php/
68
Method Precision Recall F1 Accuracy
Proposeddef 86.79 86.97 86.88 89.18
WCL-1 99.88 42.09 59.22 76.06
WCL-3 98.81 60.74 75.23 83.48
Table 5: Definition classification results on TrDatwcl.
2,711 non-definition sentences, and compared the
following three methods. WCL-1 and WCL-3 are
methods proposed by Navigli and Velardi (2010).
They were trained and tested with 10 fold cross vali-
dation using TrDatwcl. Proposeddef is our method,
which used TrDat for acquiring patterns (Section
2.1.2) and training. We tested Proposeddef on each
of TrDatwcl?s 10 folds and averaged the results.
Note that, for Proposeddef , we removed sentences
in TrDatwcl from TrDat in advance for fairness.
Table 5 shows the results. The numbers for WCL-
1 and WCL-3 are taken from Navigli and Velardi
(2010). Proposeddef outperformed both methods in
terms of recall, F1, and accuracy. Thus, we conclude
that Proposeddef is comparable to WCL-1/WCL-3.
We conducted ablation tests of our method to in-
vestigate the effectiveness of each type of pattern.
When using only N-grams, F1 was 85.41. When
using N-grams and subsequences, F1 was 86.61.
When using N-grams and subtrees, F1 was 86.85.
When using all the features, F1 was 86.88. The re-
sults show that each type of patterns contribute to the
performance, but the contributions of subsequence
patterns and subtree patterns do not seem very sig-
nificant.
3.1.3 Experiments of Definition Extraction
We extracted definitions from 10% of the Web
corpus. We applied Proposeddef to the cor-
pus of each language, and the state-of-the-art su-
pervised method for Japanese (Hashimoto et al,
2011) (Hashidef , hereafter) to the Japanese corpus.
Hashidef was trained on their training data that con-
sisted of 2,911 sentences, 61.1% of which were def-
initions. Note that we removed sentences in TrDat
from 10% of the Web corpus in advance, while we
did not remove Hashimoto et al?s training data from
the corpus. This means that, for Hashidef , the train-
ing data is included in the test data.
For each method, we filtered out its positive out-
puts whose defined term appeared more than 1,000
times in 10% of the Web corpus, since those terms
tend to be too vague to be a defined term or re-
fer to an entity outside the definition sentence. For
example, if ?the college? appears more than 1,000
times in 10% of the corpus, we filter out sen-
tences like ?The college is one of three colleges
in the Coast Community College District and was
founded in 1947.? For Proposeddef , the number of
remaining positive outputs is 3,216,121 for English,
651,293 for Japanese, and 682,661 for Chinese. For
Hashidef , the number of positive outputs is 523,882.
For Proposeddef of each language, we randomly
sampled 200 sentences from the remaining positive
outputs. For Hashidef , we first sorted its output by
the SVM score in descending order and then ran-
domly sampled 200 from the top 651,293, i.e., the
same number as the remaining positive outputs of
Proposeddef of Japanese, out of all the remaining
sentences of Hashidef .
For each language, after shuffling all the samples,
two human annotators evaluated each sample. The
annotators for English and Japanese were not the au-
thors, while one of the Chinese annotators was one
of the authors. We regarded a sample as a defini-
tion if it was regarded as a definition by both an-
notators. Cohen?s kappa (Cohen, 1960) was 0.55
for English (moderate agreement (Landis and Koch,
1977)), 0.73 for Japanese (substantial agreement),
and 0.69 for Chinese (substantial agreement).
For English, Proposeddef achieved 70% precision
for the 200 samples. For Japanese, Proposeddef
achieved 62.5% precision for the 200 samples, while
Hashidef achieved 70% precision for the 200 sam-
ples. For Chinese, Proposeddef achieved 67% pre-
cision for the 200 samples. From these results, we
conclude that Proposeddef can extract a large num-
ber of definition sentences from the Web moderately
well for the three languages.
Although the precision is not very high, our ex-
periments in the next section show that we can still
extract a large number of paraphrases with high pre-
cision from these definition sentences, due mainly to
our similarity measures, localSim and globalSim.
3.2 Experiments of Paraphrase Extraction
We show (1) that our paraphrase extraction method
outperforms unsupervised methods for the three lan-
guages, (2) that globalSim is effective, and (3) that
our method is comparable to the state-of-the-art su-
69
ProposedScore: Our method. Outputs are ranked by Score.
Proposedlocal: This is the same as ProposedScore except that it ranks
outputs by localSim. The performance drop from ProposedScore
shows globalSim?s effectiveness.
Hashisup: Hashimoto et al?s supervised method. Training data is the
same as Hashimoto et al Outputs are ranked by the SVM score
(the distance from the hyperplane). This is for Japanese only.
Hashiuns: The unsupervised version of Hashisup. Outputs are
ranked by the sum of feature values. Japanese only.
SMT: The phrase table construction method of Moses (Koehn et al,
2007). We assume that Moses should extract a set of two phrases
that are paraphrases of each other, if we input monolingual par-
allel sentence pairs like our definition pairs. We used default
values for all the parameters. Outputs are ranked by the product
of two phrase translation probabilities of both directions.
P&D: The distributional similarity based method by Pas?ca and Di-
enes (2005) (their ?N-gram-Only? method). Outputs are ranked
by the number of contexts two phrases share. Following Pas?ca
and Dienes (2005), we used the parameters LC = 3 and
MaxP = 4, while MinP , which was 1 in Pas?ca and Dienes
(2005), was set to 2 since our target was phrasal paraphrases.
Table 6: Evaluated paraphrase extraction methods.
pervised method for Japanese.
3.2.1 Experimental Setting
We extracted paraphrases from definition sen-
tences in Pos and those extracted by Proposeddef in
Section 3.1.3. First we coupled two definition sen-
tences whose defined term was the same. The num-
ber of definition pairs was 3,208,086 for English,
742,306 for Japanese, and 457,233 for Chinese.
Then we evaluated six methods in Table 6.5 All
the methods except P&D took the same definition
pairs as input, while P&D?s input was 10% of the
Web corpus. The input can be seen as the same for
all the methods, since the definition pairs were de-
rived from that 10% of the Web corpus. In our ex-
periments Exp1 and Exp2 below, all evaluation sam-
ples were shuffled so that human annotators could
not know which sample was from which method.
Annotators were the same as those who conducted
the evaluation in Section 3.1.3. Cohen?s kappa (Co-
hen, 1960) was 0.83 for English, 0.88 for Japanese,
5We filtered out phrase pairs in which one phrase contained a
named entity but the other did not contain the named entity from
the output of ProposedScore, Proposedlocal, SMT , and P&D,
since most of them were not paraphrases. We used Stanford
NER (Finkel et al, 2005) for English named entity recognition
(NER), KNP for Japanese NER, and BaseNER (Zhao and Kit,
2008) for Chinese NER. Hashisup and Hashiuns did the named
entity filtering of the same kind (footnote 3 of Hashimoto et al
(2011)), and thus we did not apply the filter to them any further.
and 0.85 for Chinese, all of which indicated reason-
ably good (Landis and Koch, 1977). We regarded a
candidate phrase pair as a paraphrase if both annota-
tors regarded it as a paraphrase.
Exp1 We compared the methods that take def-
inition pairs as input, i.e. ProposedScore, Pro-
posedlocal, Hashisup, Hashiuns, and SMT . We ran-
domly sampled 200 phrase pairs from the top 10,000
for each method for evaluation. The evaluation of
each candidate phrase pair (p1, p2) was based on
bidirectional checking of entailment relation, p1 ?
p2 and p2 ? p1, with p1 and p2 embedded in con-
texts, as Hashimoto et al (2011) did. Entailment
relation of both directions hold if (p1, p2) is a para-
phrase. We used definition pairs from which candi-
date phrase pairs were extracted as contexts.
Exp2 We compared ProposedScore and P&D.
Since P&D restricted its output to phrase pairs in
which each phrase consists of two to four words,
we restricted the output of ProposedScore to 2-to-4-
words phrase pairs, too. We randomly sampled 200
from the top 3,000 phrase pairs from each method
for evaluation, and the annotators checked entail-
ment relation of both directions between two phrases
using Web sentence pairs that contained the two
phrases as contexts.
3.2.2 Results
From Exp1, we obtained precision curves in the
upper half of Figure 4. The curves were drawn from
the 200 samples that were sorted in descending order
by their score, and we plotted a dot for every 5 sam-
ples. ProposedScore outperformed Proposedlocal for
the three languages, and thus globalSim was effec-
tive. ProposedScore outperformed Hashisup. How-
ever, we observed that ProposedScore acquired many
candidate phrase pairs (p1, p2) for which p1 and p2
consisted of the same content words like ?send a
postcard to the author? and ?send the author a post-
card,? while the other methods tended to acquire
more content word variations like ?have a chance?
and ?have an opportunity.? Then we evaluated all
the methods in terms of how many paraphrases with
content word variations were extracted. We ex-
tracted from the evaluation samples only candidate
phrase pairs whose Diff contained a content word
(content word variation pairs), to see how many
70
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200
Prec
ision
(A) Top N (#Samples)  0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200(B) Top N (#Samples)  0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200(C) Top N (#Samples)
?Proposed_score?
?Proposed_local?
?SMT?
?Hashi_sup?
?Hashi_uns?
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200
Prec
ision
(a) Top N (#Samples)  0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200(b) Top N (#Samples)  0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200(c) Top N (#Samples)
?Proposed_score_cwv?
?Proposed_local_cwv?
?SMT_cwv?
?Hashi_sup_cwv?
?Hashi_uns_cwv?
Figure 4: Precision curves of Exp1: English (A)(a), Chinese (B)(b), and Japanese (C)(c).
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200
Prec
ision
(A) Top N (#Samples)  0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200(B) Top N (#Samples)  0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200(C) Top N (#Samples)
?Proposed_score?
?Proposed_score_cwv?
?Pasca?
?Pasca_cwv?
Figure 5: Precision curves of Exp2: English (A), Chinese (B), and Japanese (C).
of them were paraphrases. The lower half of Fig-
ure 4 shows the results (curves labeled with cwv).
The number of samples for ProposedScore reduced
drastically compared to the others for English and
Japanese, though precision was kept at a high level.
It is due mainly to the globalSim; the Diff of the
non-content word variation pairs appears frequently
in paraphrase candidates, and thus their globalSim
scores are high.
From Exp2, precision curves in Figure 5 were
obtained. P&D acquired more content word varia-
tion pairs as the curves labeled by cwv indicates.
However, ProposedScore?s precision outperformed
P&D?s by a large margin for the three languages.
From all of these results, we conclude (1) that our
paraphrase extraction method outperforms unsuper-
vised methods for the three languages, (2) that glob-
alSim is effective, and (3) that our method is com-
parable to the state-of-the-art supervised method for
Japanese, though our method tends to extract fewer
content word variation pairs than the others.
Table 7 shows examples of English paraphrases
extracted by ProposedScore.
is based in Halifax = is headquartered in Halifax
used for treating HIV = used to treat HIV
is a rare form = is an uncommon type
is a set = is an unordered collection
has an important role = plays a key role
Table 7: Examples of extracted English paraphrases.
4 Conclusion
We proposed a minimally supervised method for
multilingual paraphrase extraction. Our experiments
showed that our paraphrase extraction method out-
performs unsupervised methods (Pas?ca and Dienes,
2005; Koehn et al, 2007; Hashimoto et al, 2011)
for English, Japanese, and Chinese, and is compara-
ble to the state-of-the-art language dependent super-
vised method for Japanese (Hashimoto et al, 2011).
71
References
Susumu Akamine, Daisuke Kawahara, Yoshikiyo Kato,
Tetsuji Nakagawa, Yutaka I. Leon-Suematsu, Takuya
Kawada, Kentaro Inui, Sadao Kurohashi, and Yutaka
Kidawara. 2010. Organizing information on the web
to support user judgments on information credibil-
ity. In Proceedings of 2010 4th International Uni-
versal Communication Symposium Proceedings (IUCS
2010), pages 122?129.
Regina Barzilay and Lillian Lee. 2003. Learning to
paraphrase: An unsupervised approach using multiple-
sequence alignment. In Proceedings of HLT-NAACL
2003, pages 16?23.
Regina Barzilay and Kathleen R. McKeown. 2001. Ex-
tracting paraphrases from a parallel corpus. In Pro-
ceedings of the 39th Annual Meeting of the ACL joint
with the 10th Meeting of the European Chapter of the
ACL (ACL/EACL 2001), pages 50?57.
Rahul Bhagat, Patrick Pantel, and Eduard Hovy. 2007.
Ledir: An unsupervised algorithm for learning direc-
tionality of inference rules. In Proceedings of Confer-
ence on Empirical Methods in Natural Language Pro-
cessing (EMNLP2007), pages 161?170.
Chris Callison-Burch. 2008. Syntactic constraints on
paraphrases extracted from parallel corpora. In Pro-
ceedings of the 2008 Conference on Empirical Meth-
ods in Natural Language Processing, pages 196?205.
Wenliang Chen, Jun?ichi Kazama, Kiyotaka Uchimoto,
and Kentaro Torisawa. 2009. Improving dependency
parsing with subtrees from auto-parsed data. In Pro-
ceedings of the 2009 Conference on Empirical Meth-
ods in Natural Language Processing, EMNLP ?09,
pages 570?579, Singapore. Association for Computa-
tional Linguistics.
Jacob Cohen. 1960. Coefficient of agreement for nom-
inal scales. In Educational and Psychological Mea-
surement, pages 37?46.
Bill Dolan, Chris Quirk, and Chris Brockett. 2004. Un-
supervised construction of large paraphrase corpora:
exploiting massively parallel news sources. In Pro-
ceedings of the 20th international conference on Com-
putational Linguistics (COLING 2004), pages 350?
356, Geneva, Switzerland, Aug 23?Aug 27.
Guozhu Dong and Jinyan Li. 1999. Efficient mining of
emerging patterns: discovering trends and differences.
In Proceedings of the fifth ACM SIGKDD international
conference on Knowledge discovery and data mining,
KDD ?99, pages 43?52, San Diego, California, United
States.
Jenny Rose Finkel, Trond Grenager, and Christopher
Manning. 2005. Incorporating non-local information
into information extraction systems by gibbs sampling.
In Proceedings of the 43nd Annual Meeting of the As-
sociation for Computational Linguistics (ACL 2005),
pages 363?370.
Atsushi Fujita, Pierre Isabelle, and Roland Kuhn. 2012.
Enlarging paraphrase collections through generaliza-
tion and instantiation. In Proceedings of the 2012 Joint
Conference on Empirical Methods in Natural Lan-
guage Processing and Computational Natural Lan-
guage Learning (EMNLP-CoNLL 2012), pages 631?
642.
Maayan Geffet and Ido Dagan. 2005. The distributional
inclusion hypotheses and lexical entailment. In Pro-
ceedings of the 43rd Annual Meeting of the Associa-
tion for Computational Linguistics (ACL 2005), pages
107?114.
Chikara Hashimoto, Kentaro Torisawa, Kow Kuroda,
Stijn De Saeger, Masaki Murata, and Jun?ichi Kazama.
2009. Large-scale verb entailment acquisition from
the web. In Proceedings of the 2009 Conference on
Empirical Methods in Natural Language Processing
(EMNLP 2009), pages 1172?1181.
Chikara Hashimoto, Kentaro Torisawa, Stijn De Saeger,
Jun?ichi Kazama, and Sadao Kurohashi. 2011. Ex-
tracting paraphrases from definition sentences on the
web. In Proceedings of the 49th Annual Meeting of
the Association for Computational Linguistics: Hu-
man Language Technologies, pages 1087?1097, Port-
land, Oregon, USA, June. Association for Computa-
tional Linguistics.
Jun?ichi Kazama and Kentaro Torisawa. 2007. Exploit-
ing Wikipedia as external knowledge for named entity
recognition. In Proceedings of the 2007 Joint Confer-
ence on Empirical Methods in Natural Language Pro-
cessing and Computational Natural Language Learn-
ing (EMNLP-CoNLL), pages 698?707, Prague, Czech
Republic, June. Association for Computational Lin-
guistics.
Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran, Richard
Zens, Chris Dyer, Ondr?ej Bojar, Alexandra Con-
stantin, and Evan Herbst. 2007. Moses: Open source
toolkit for statistical machine translation. In Proceed-
ings of the 45th Annual Meeting of the Association for
Computational Linguistics Companion Volume Pro-
ceedings of the Demo and Poster Sessions, pages 177?
180, Prague, Czech Republic, June. Association for
Computational Linguistics.
Canasai Kruengkrai, Kiyotaka Uchimoto, Jun?ichi
Kazama, Yiou Wang, Kentaro Torisawa, and Hitoshi
Isahara. 2009. An error-driven word-character hybrid
model for joint chinese word segmentation and pos
tagging. In Proceedings of the Joint Conference of the
72
47th Annual Meeting of the ACL and the 4th Interna-
tional Joint Conference on Natural Language Process-
ing of the AFNLP, pages 513?521, Suntec, Singapore,
August. Association for Computational Linguistics.
Sadao Kurohashi and Daisuke Kawahara. 2009a.
Japanese morphological analyzer system ju-
man version 6.0 (in japanese). Kyoto University,
http://nlp.ist.i.kyoto-u.ac.jp/EN/index.php?JUMAN.
Sadao Kurohashi and Daisuke Kawahara. 2009b.
Japanese syntax and case analyzer knp version 3.0
(in japanese). Kyoto University, http://nlp.ist.i.kyoto-
u.ac.jp/EN/index.php?KNP.
J. Richard Landis and Gary G. Koch. 1977. Measure-
ment of observer agreement for categorical data. Bio-
metrics, 33(1):159?174.
Dekang Lin and Patrick Pantel. 2001. Discovery of infer-
ence rules for question answering. Natural Language
Engineering, 7(4):343?360.
Dekang Lin, Shaojun Zhao Lijuan Qin, and Ming Zhou.
2003. Identifying synonyms among distributionally
similar words. In Proceedings of the 18th Inter-
national Joint Conference on Artificial Intelligence
(IJCAI-03), pages 1492?1493.
Ryan McDonald, Kevin Lerman, and Fernando Pereira.
2006. Multilingual dependency analysis with a two-
stage discriminative parser. In Proceedings of the
Tenth Conference on Computational Natural Lan-
guage Learning, CoNLL-X ?06, pages 216?220, New
York City, New York.
Roberto Navigli and Paola Velardi. 2010. Learning
word-class lattices for definition and hypernym extrac-
tion. In Proceedings of the 48th Annual Meeting of
the Association for Computational Linguistics, pages
1318?1327, Uppsala, Sweden, July. Association for
Computational Linguistics.
Roberto Navigli, Paola Velardi, and Juana Mar??a Ruiz-
Mart??nez. 2010. An annotated dataset for extracting
definitions and hypernyms from the web. In Proceed-
ings of LREC 2010, pages 3716?3722.
Marius Pas?ca and Pe?ter Dienes. 2005. Aligning needles
in a haystack: paraphrase acquisition across the web.
In Proceedings of the Second international joint con-
ference on Natural Language Processing, IJCNLP?05,
pages 119?130, Jeju Island, Korea.
Helmut Schmid. 1995. Improvements in part-of-speech
tagging with an application to german. In Proceedings
of the ACL SIGDAT-Workshop, pages 47?50.
Yusuke Shinyama, Satoshi Sekine, and Kiyoshi Sudo.
2002. Automatic paraphrase acquisition from news ar-
ticles. In Proceedings of the 2nd international Con-
ference on Human Language Technology Research
(HLT2002), pages 313?318.
Idan Szpektor and Ido Dagan. 2008. Learning entail-
ment rules for unary template. In Proceedings of the
22nd International Conference on Computational Lin-
guistics (COLING2008), pages 849?856.
Hai Zhao and Chunyu Kit. 2008. Unsupervised seg-
mentation helps supervised learning of character tag-
ging for word segmentation and named entity recog-
nition. In Proceedings of the Sixth SIGHAN Workshop
on Chinese Language Processing, pages 106?111, Hy-
derabad, India.
73
Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics, pages 1087?1097,
Portland, Oregon, June 19-24, 2011. c?2011 Association for Computational Linguistics
Extracting Paraphrases from Definition Sentences on the Web
Chikara Hashimoto? Kentaro Torisawa? Stijn De Saeger?
Jun?ichi Kazama? Sadao Kurohashi?
? ? ? ? National Institute of Information and Communications Technology
Kyoto, 619-0237, JAPAN
? ?Graduate School of Informatics, Kyoto University
Kyoto, 606-8501, JAPAN
{? ch,? torisawa, ? stijn,? kazama}@nict.go.jp
?kuro@i.kyoto-u.ac.jp
Abstract
We propose an automatic method of extracting
paraphrases from definition sentences, which
are also automatically acquired from the Web.
We observe that a huge number of concepts
are defined in Web documents, and that the
sentences that define the same concept tend
to convey mostly the same information using
different expressions and thus contain many
paraphrases. We show that a large number
of paraphrases can be automatically extracted
with high precision by regarding the sentences
that define the same concept as parallel cor-
pora. Experimental results indicated that with
our method it was possible to extract about
300,000 paraphrases from 6? 108 Web docu-
ments with a precision rate of about 94%.
1 Introduction
Natural language allows us to express the same in-
formation in many ways, which makes natural lan-
guage processing (NLP) a challenging area. Ac-
cordingly, many researchers have recognized that
automatic paraphrasing is an indispensable compo-
nent of intelligent NLP systems (Iordanskaja et al,
1991; McKeown et al, 2002; Lin and Pantel, 2001;
Ravichandran and Hovy, 2002; Kauchak and Barzi-
lay, 2006; Callison-Burch et al, 2006) and have tried
to acquire a large amount of paraphrase knowledge,
which is a key to achieving robust automatic para-
phrasing, from corpora (Lin and Pantel, 2001; Barzi-
lay and McKeown, 2001; Shinyama et al, 2002;
Barzilay and Lee, 2003).
We propose a method to extract phrasal para-
phrases from pairs of sentences that define the same
concept. The method is based on our observation
that two sentences defining the same concept can
be regarded as a parallel corpus since they largely
convey the same information using different expres-
sions. Such definition sentences abound on the Web.
This suggests that we may be able to extract a large
amount of phrasal paraphrase knowledge from the
definition sentences on the Web.
For instance, the following two sentences, both of
which define the same concept ?osteoporosis?, in-
clude two pairs of phrasal paraphrases, which are
indicated by underlines 1? and 2?, respectively.
(1) a. Osteoporosis is a disease that 1? decreases the
quantity of bone and 2? makes bones fragile.
b. Osteoporosis is a disease that 1? reduces bone
mass and 2? increases the risk of bone fracture.
We define paraphrase as a pair of expressions be-
tween which entailment relations of both directions
hold. (Androutsopoulos and Malakasiotis, 2010).
Our objective is to extract phrasal paraphrases
from pairs of sentences that define the same con-
cept. We propose a supervised method that exploits
various kinds of lexical similarity features and con-
textual features. Sentences defining certain concepts
are acquired automatically on a large scale from the
Web by applying a quite simple supervised method.
Previous methods most relevant to our work
used parallel corpora such as multiple translations
of the same source text (Barzilay and McKeown,
2001) or automatically acquired parallel news texts
(Shinyama et al, 2002; Barzilay and Lee, 2003;
Dolan et al, 2004). The former requires a large
amount of manual labor to translate the same texts
1087
in several ways. The latter would suffer from the
fact that it is not easy to automatically retrieve large
bodies of parallel news text with high accuracy. On
the contrary, recognizing definition sentences for
the same concept is quite an easy task at least for
Japanese, as we will show, and we were able to find
a huge amount of definition sentence pairs from nor-
mal Web texts. In our experiments, about 30 million
definition sentence pairs were extracted from 6?108
Web documents, and the estimated number of para-
phrases recognized in the definition sentences using
our method was about 300,000, for a precision rate
of about 94%. Also, our experimental results show
that our method is superior to well-known compet-
ing methods (Barzilay and McKeown, 2001; Koehn
et al, 2007) for extracting paraphrases from defini-
tion sentence pairs.
Our evaluation is based on bidirectional check-
ing of entailment relations between paraphrases that
considers the context dependence of a paraphrase.
Note that using definition sentences is only the
beginning of our research on paraphrase extraction.
We have a more general hypothesis that sentences
fulfilling the same pragmatic function (e.g. defini-
tion) for the same topic (e.g. osteoporosis) convey
mostly the same information using different expres-
sions. Such functions other than definition may in-
clude the usage of the same Linux command, the
recipe for the same cuisine, or the description of re-
lated work on the same research issue.
Section 2 describes related works. Section 3
presents our proposed method. Section 4 reports on
evaluation results. Section 5 concludes the paper.
2 Related Work
The existing work for paraphrase extraction is cat-
egorized into two groups. The first involves a dis-
tributional similarity approach pioneered by Lin and
Pantel (2001). Basically, this approach assumes that
two expressions that have a large distributional simi-
larity are paraphrases. There are also variants of this
approach that address entailment acquisition (Geffet
and Dagan, 2005; Bhagat et al, 2007; Szpektor and
Dagan, 2008; Hashimoto et al, 2009). These meth-
ods can be applied to a normal monolingual corpus,
and it has been shown that a large number of para-
phrases or entailment rules could be extracted. How-
ever, the precision of these methods has been rela-
tively low. This is due to the fact that the evidence,
i.e., distributional similarity, is just indirect evidence
of paraphrase/entailment. Accordingly, these meth-
ods occasionally mistake antonymous pairs for para-
phrases/entailment pairs, since an expression and its
antonymous counterpart are also likely to have a
large distributional similarity. Another limitation of
these methods is that they can find only paraphrases
consisting of frequently observed expressions since
they must have reliable distributional similarity val-
ues for expressions that constitute paraphrases.
The second category is a parallel corpus approach
(Barzilay and McKeown, 2001; Shinyama et al,
2002; Barzilay and Lee, 2003; Dolan et al, 2004).
Our method belongs to this category. This approach
aligns expressions between two sentences in par-
allel corpora, based on, for example, the overlap
of words/contexts. The aligned expressions are as-
sumed to be paraphrases. In this approach, the ex-
pressions do not need to appear frequently in the
corpora. Furthermore, the approach rarely mistakes
antonymous pairs for paraphrases/entailment pairs.
However, its limitation is the difficulty in preparing
a large amount of parallel corpora, as noted before.
We avoid this by using definition sentences, which
can be easily acquired on a large scale from theWeb,
as parallel corpora.
Murata et al (2004) used definition sentences in
two manually compiled dictionaries, which are con-
siderably fewer in the number of definition sen-
tences than those on the Web. Thus, the coverage of
their method should be quite limited. Furthermore,
the precision of their method is much poorer than
ours as we report in Section 4.
For a more extensive survey on paraphrasing
methods, see Androutsopoulos and Malakasiotis
(2010) and Madnani and Dorr (2010).
3 Proposed method
Our method, targeting the Japanese language, con-
sists of two steps: definition sentence acquisition
and paraphrase extraction. We describe them below.
3.1 Definition sentence acquisition
We acquire sentences that define a concept (defini-
tion sentences) as in Example (2), which defines ??
1088
???? (osteoporosis), from the 6?108 Web pages
(Akamine et al, 2010) and the Japanese Wikipedia.
(2) ??????????????????????
(Osteoporosis is a disease that makes bones fragile.)
Fujii and Ishikawa (2002) developed an unsuper-
vised method to find definition sentences from the
Web using 18 sentential templates and a language
model constructed from an encyclopedia. On the
other hand, we developed a supervised method to
achieve a higher precision.
We use one sentential template and an SVM clas-
sifier. Specifically, we first collect definition sen-
tence candidates by a template ??NP??.*?, where
? is the beginning of sentence and NP is the noun
phrase expressing the concept to be defined followed
by a particle sequence, ??? (comitative) and ???
(topic) (and optionally followed by comma), as ex-
emplified in (2). As a result, we collected 3,027,101
sentences. Although the particle sequence tends
to mark the topic of the definition sentence, it can
also appear in interrogative sentences and normal as-
sertive sentences in which a topic is strongly empha-
sized. To remove such non-definition sentences, we
classify the candidate sentences using an SVM clas-
sifier with a polynominal kernel (d = 2).1 Since
Japanese is a head-final language and we can judge
whether a sentence is interrogative or not from the
last words in the sentence, we included morpheme
N -grams and bag-of-words (with the window size
of N ) at the end of sentences in the feature set. The
features are also useful for confirming that the head
verb is in the present tense, which definition sen-
tences should be. Also, we added the morpheme
N -grams and bag-of-words right after the particle
sequence in the feature set since we observe that
non-definition sentences tend to have interrogative
related words like ??? (what) or ???? ((what) on
earth) right after the particle sequence. We chose 5
as N from our preliminary experiments.
Our training data was constructed from 2,911 sen-
tences randomly sampled from all of the collected
sentences. 61.1% of them were labeled as positive.
In the 10-fold cross validation, the classifier?s ac-
curacy, precision, recall, and F1 were 89.4, 90.7,
1We use SVMlight available at http://svmlight.
joachims.org/.
92.2, and 91.4, respectively. Using the classifier,
we acquired 1,925,052 positive sentences from all
of the collected sentences. After adding definition
sentences from Wikipedia articles, which are typi-
cally the first sentence of the body of each article
(Kazama and Torisawa, 2007), we obtained a total
of 2,141,878 definition sentence candidates, which
covered 867,321 concepts ranging from weapons to
rules of baseball. Then, we coupled two definition
sentences whose defined concepts were the same
and obtained 29,661,812 definition sentence pairs.
Obviously, our method is tailored to Japanese. For
a language-independent method of definition acqui-
sition, see Navigli and Velardi (2010) as an example.
3.2 Paraphrase extraction
Paraphrase extraction proceeds as follows. First,
each sentence in a pair is parsed by the depen-
dency parser KNP2 and dependency tree frag-
ments that constitute linguistically well-formed con-
stituents are extracted. The extracted dependency
tree fragments are called candidate phrases here-
after. We restricted candidate phrases to predicate
phrases that consist of at least one dependency re-
lation, do not contain demonstratives, and in which
all the leaf nodes are nominal and all of the con-
stituents are consecutive in the sentence. KNP indi-
cates whether each candidate phrase is a predicate
based on the POS of the head morpheme. Then,
we check all the pairs of candidate phrases between
two definition sentences to find paraphrase pairs.3
In (1), repeated in (3), candidate phrase pairs to be
checked include ( 1? decreases the quantity of bone,
1? reduces bone mass), ( 1? decreases the quantity
of bone, 2? increases the risk of bone fracture), ( 2?
makes bones fragile, 1? reduces bone mass), and ( 2?
makes bones fragile, 2? increases the risk of bone
fracture).
(3) a. Osteoporosis is a disease that 1? decreases the
quantity of bone and 2? makes bones fragile.
b. Osteoporosis is a disease that 1? reduces bone
mass and 2? increases the risk of bone fracture.
2http://nlp.kuee.kyoto-u.ac.jp/
nl-resource/knp.html.
3Our method discards candidate phrase pairs in which one
subsumes the other in terms of their character string, or the dif-
ference is only one proper noun like ?toner cartridges that Ap-
ple Inc. made? and ?toner cartridges that Xerox made.? Proper
nouns are recognized by KNP.
1089
f1 The ratio of the number of morphemes shared between two candidate phrases to the number of all of the morphemes in the two phrases.
f2 The ratio of the number of a candidate phrase?s morphemes, for which there is a morpheme with small edit distance (1 in our experiment) in
another candidate phrase, to the number of all of the morphemes in the two phrases. Note that Japanese has many orthographical variations
and edit distance is useful for identifying them.
f3 The ratio of the number of a candidate phrase?s morphemes, for which there is a morpheme with the same pronunciation in another candidate
phrase, to the number of all of the morphemes in the two phrases. Pronunciation is also useful for identifying orthographic variations.
Pronunciation is given by KNP.
f4 The ratio of the number of morphemes of a shorter candidate phrase to that of a longer one.
f5 The identity of the inflected form of the head morpheme between two candidate phrases: 1 if they are identical, 0 otherwise.
f6 The identity of the POS of the head morpheme between two candidate phrases: 1 or 0.
f7 The identity of the inflection (conjugation) of the head morpheme between two candidate phrases: 1 or 0.
f8 The ratio of the number of morphemes that appear in a candidate phrase segment of a definition sentence s1 and in a segment that is NOT a
part of the candidate phrase of another definition sentence s2 to the number of all of the morphemes of s1?s candidate phrase, i.e. how many
extra morphemes are incorporated into s1?s candidate phrase.
f9 The reversed (s1 ? s2) version of f8.
f10 The ratio of the number of parent dependency tree fragments that are shared by two candidate phrases to the number of all of the parent de-
pendency tree fragments of the two phrases. Dependency tree fragments are represented by the pronunciation of their component morphemes.
f11 A variation of f10; tree fragments are represented by the base form of their component morphemes.
f12 A variation of f10; tree fragments are represented by the POS of their component morphemes.
f13 The ratio of the number of unigrams (morphemes) that appear in the child context of both candidate phrases to the number of all of the child
context morphemes of both candidate phrases. Unigrams are represented by the pronunciation of the morpheme.
f14 A variation of f13; unigrams are represented by the base form of the morpheme.
f15 A variation of f14; the numerator is the number of child context unigrams that are adjacent to both candidate phrases.
f16 The ratio of the number of trigrams that appear in the child context of both candidate phrases to the number of all of the child context
morphemes of both candidate phrases. Trigrams are represented by the pronunciation of the morpheme.
f17 Cosine similarity between two definition sentences from which a candidate phrase pair is extracted.
Table 1: Features used by paraphrase classifier.
The paraphrase checking of candidate phrase
pairs is performed by an SVM classifier with a linear
kernel that classifies each pair of candidate phrases
into a paraphrase or a non-paraphrase.4 Candidate
phrase pairs are ranked by their distance from the
SVM?s hyperplane. Features for the classifier are
based on our observation that two candidate phrases
tend to be paraphrases if the candidate phrases them-
selves are sufficiently similar and/or their surround-
ing contexts are sufficiently similar. Table 1 lists the
features used by the classifier.5 Basically, they rep-
resent either the similarity of candidate phrases (f1-
9) or that of their contexts (f10-17). We think that
they have various degrees of discriminative power,
and thus we use the SVM to adjust their weights.
Figure 1 illustrates features f8-12, for which you
may need supplemental remarks. English is used for
ease of explanation. In the figure, f8 has a positive
value since the candidate phrase of s1 contains mor-
phemes ?of bone?, which do not appear in the can-
4We use SVMperf available at http://svmlight.
joachims.org/svm perf.html.
5In the table, the parent context of a candidate phrase con-
sists of expressions that appear in ancestor nodes of the candi-
date phrase in terms of the dependency structure of the sentence.
Child contexts are defined similarly.
Figure 1: Illustration of features f8-12.
didate phrase of s2 but do appear in the other part
of s2, i.e. they are extra morphemes for s1?s candi-
date phrase. On the other hand, f9 is zero since there
is no such extra morpheme in s2?s candidate phrase.
Also, features f10-12 have positive values since the
two candidate phrases share two parent dependency
tree fragments, (that increases) and (of fracture).
We have also tried the following features, which
we do not detail due to space limitation: the sim-
ilarity of candidate phrases based on semantically
similar nouns (Kazama and Torisawa, 2008), entail-
ing/entailed verbs (Hashimoto et al, 2009), and the
identity of the pronunciation and base form of the
head morpheme; N -grams (N=1,2,3) of child and
parent contexts represented by either the inflected
form, base form, pronunciation, or POS of mor-
1090
Original definition sentence pair (s1, s2) Paraphrased definition sentence pair (s?1, s?2)
s1: Osteoporosis is a disease that reduces bonemass and makes bones
fragile.
s?1: Osteoporosis is a disease that decreases the quantity of bone and
makes bones fragile.
s2: Osteoporosis is a disease that decreases the quantity of bone and
increases the risk of bone fracture.
s?2: Osteoporosis is a disease that reduces bone mass and increases
the risk of bone fracture.
Figure 2: Bidirectional checking of entailment relation (?) of p1 ? p2 and p2 ? p1. p1 is ?reduces bone mass?
in s1 and p2 is ?decreases the quantity of bone? in s2. p1 and p2 are exchanged between s1 and s2 to generate
corresponding paraphrased sentences s?1 and s?2. p1 ? p2 (p2 ? p1) is verified if s1 ? s?1 (s2 ? s?2) holds. In this
case, both of them hold. English is used for ease of explanation.
pheme; parent/child dependency tree fragments rep-
resented by either the inflected form, base form, pro-
nunciation, or POS; adjacent versions (cf. f15) of
N -gram features and parent/child dependency tree
features. These amount to 78 features, but we even-
tually settled on the 17 features in Table 1 through
ablation tests to evaluate the discriminative power
of each feature.
The ablation tests were conducted using training
data that we prepared. In preparing the training data,
we faced the problem that the completely random
sampling of candidate paraphrase pairs provided us
with only a small number of positive examples.
Thus, we automatically collected candidate para-
phrase pairs that were expected to have a high like-
lihood of being positive as examples to be labeled.
The likelihood was calculated by simply summing
all of the 78 feature values that we have tried, since
they indicate the likelihood of a given candidate
paraphrase pair?s being a paraphrase. Note that val-
ues of the features f8 and f9 are weighted with ?1,
since they indicate the unlikelihood. Specifically,
we first randomly sampled 30,000 definition sen-
tence pairs from the 29,661,812 pairs, and collected
3,000 candidate phrase pairs that had the highest
likelihood from them. The manual labeling of each
candidate phrase pair (p1, p2) was based on bidirec-
tional checking of entailment relation, p1 ? p2 and
p2 ? p1, with p1 and p2 embedded in contexts.
This scheme is similar to the one proposed by
Szpektor et al (2007). We adopt this scheme since
paraphrase judgment might be unstable between an-
notators unless they are given a particular context
based on which they make a judgment. As de-
scribed below, we use definition sentences as con-
texts. We admit that annotators might be biased by
this in some unexpected way, but we believe that
this is a more stable method than that without con-
texts. The labeling process is as follows. First, from
each candidate phrase pair (p1, p2) and its source
definition sentence pair (s1, s2), we create two para-
phrase sentence pairs (s?1, s?2) by exchanging p1 and
p2 between s1 and s2. Then, annotators check if s1
entails s?1 and s2 entails s?2 so that entailment rela-
tions of both directions p1 ? p2 and p2 ? p1 are
checked. Figure 2 shows an example of bidirectional
checking. In this example, both entailment relations,
s1 ? s?1 and s2 ? s?2, hold, and thus the candidate
phrase pair (p1, p2) is judged as positive. We used
(p1, p2), for which entailment relations of both di-
rections held, as positive examples (1,092 pairs) and
the others as negative ones (1,872 pairs).6
We built the paraphrase classifier from the train-
ing data. As mentioned, candidate phrase pairs were
ranked by the distance from the SVM?s hyperplane.
4 Experiment
In this paper, our claims are twofold.
I. Definition sentences on the Web are a treasure
trove of paraphrase knowledge (Section 4.2).
II. Our method of paraphrase acquisition from
definition sentences is more accurate than well-
known competing methods (Section 4.1).
We first verify claim II by comparing our method
with that of Barzilay and McKeown (2001) (BM
method), Moses7 (Koehn et al, 2007) (SMT
method), and that of Murata et al (2004) (Mrt
method). The first two methods are well known for
accurately extracting semantically equivalent phrase
pairs from parallel corpora.8 Then, we verify claim
6The remaining 36 pairs were discarded as they contained
garbled characters of Japanese.
7http://www.statmt.org/moses/
8As anonymous reviewers pointed out, they are unsuper-
vised methods and thus unable to be adapted to definition sen-
1091
I by comparing definition sentence pairs with sen-
tence pairs that are acquired from the Web using Ya-
hoo!JAPANAPI9 as a paraphrase knowledge source.
In the latter data set, two sentences of each pair
are expected to be semantically similar regardless of
whether they are definition sentences. Both sets con-
tain 100,000 pairs.
Three annotators (not the authors) checked evalu-
ation samples. Fleiss? kappa (Fleiss, 1971) was 0.69
(substantial agreement (Landis and Koch, 1977)).
4.1 Our method vs. competing methods
In this experiment, paraphrase pairs are extracted
from 100,000 definition sentence pairs that are ran-
domly sampled from the 29,661,812 pairs. Before
reporting the experimental results, we briefly de-
scribe the BM, SMT, and Mrt methods.
BM method Given parallel sentences like multi-
ple translations of the same source text, the BM
method works iteratively as follows. First, it collects
from the parallel sentences identical word pairs and
their contexts (POS N -grams with indices indicat-
ing corresponding words between paired contexts)
as positive examples and those of different word
pairs as negative ones. Then, each context is ranked
based on the frequency with which it appears in pos-
itive (negative) examples. The most likely K posi-
tive (negative) contexts are used to extract positive
(negative) paraphrases from the parallel sentences.
Extracted positive (negative) paraphrases and their
morpho-syntactic patterns are used to collect addi-
tional positive (negative) contexts. All the positive
(negative) contexts are ranked, and additional para-
phrases and their morpho-syntactic patterns are ex-
tracted again. This iterative process finishes if no
further paraphrase is extracted or the number of iter-
ations reaches a predefined threshold T . In this ex-
periment, following Barzilay and McKeown (2001),
K is 10 and N is 1 to 3. The value of T is not given
in their paper. We chose 3 as its value based on our
preliminary experiments. Note that paraphrases ex-
tracted by this method are not ranked.
tences. Nevertheless, we believe that comparing these methods
with ours is very informative, since they are known to be accu-
rate and have been influential.
9http://developer.yahoo.co.jp/webapi/
SMT method Our SMT method uses Moses
(Koehn et al, 2007) and extracts a phrase table, a
set of two phrases that are translations of each other,
given a set of two sentences that are translations of
each other. If you give Moses monolingual parallel
sentence pairs, it should extract a set of two phrases
that are paraphrases of each other. In this experi-
ment, default values were used for all parameters.
To rank extracted phrase pairs, we assigned each of
them the product of two phrase translation probabil-
ities of both directions that were given by Moses.
For other SMT methods, see Quirk et al (2004) and
Bannard and Callison-Burch (2005) among others.
Mrt method Murata et al (2004) proposed a
method to extract paraphrases from two manually
compiled dictionaries. It simply regards a difference
between two definition sentences of the same word
as a paraphrase candidate. Paraphrase candidates are
ranked according to an unsupervised scoring scheme
that implements their assumption. They assume that
a paraphrase candidate tends to be a valid paraphrase
if it is surrounded by infrequent strings and/or if it
appears multiple times in the data.
In this experiment, we evaluated the unsupervised
version of our method in addition to the supervised
one described in Section 3.2, in order to compare
it fairly with the other methods. The unsupervised
method works in the same way as the supervised
one, except that it ranks candidate phrase pairs by
the sum of all 17 feature values, instead of the dis-
tance from the SVM?s hyperplane. In other words,
no supervised learning is used. All the feature val-
ues are weighted with 1, except for f8 and f9, which
are weighted with ?1 since they indicate the unlike-
lihood of a candidate phrase pair being paraphrases.
BM, SMT, Mrt, and the two versions of our method
were used to extract paraphrase pairs from the same
100,000 definition sentence pairs.
Evaluation scheme Evaluation of each para-
phrase pair (p1, p2) was based on bidirectional
checking of entailment relations p1 ? p2 and p2 ?
p1 in a way similar to the labeling of the training
data. The difference is that contexts for evaluation
are two sentences that are retrieved from the Web
and contain p1 and p2, instead of definition sen-
tences from which p1 and p2 are extracted. This
1092
is intended to check whether extracted paraphrases
are also valid for contexts other than those from
which they are extracted. The evaluation proceeds
as follows. For the top m paraphrase pairs of each
method (in the case of the BM method, randomly
sampled m pairs were used, since the method does
not rank paraphrase pairs), we retrieved a sentence
pair (s1, s2) for each paraphrase pair (p1, p2) from
the Web, such that s1 contains p1 and s2 contains p2.
In doing so, we make sure that neither s1 nor s2 are
the definition sentences from which p1 and p2 are
extracted. For each method, we randomly sample
n samples from all of the paraphrase pairs (p1, p2)
for which both s1 and s2 are retrieved. Then, from
each (p1, p2) and (s1, s2), we create two paraphrase
sentence pairs (s?1, s?2) by exchanging p1 and p2 be-
tween s1 and s2. All samples, each consisting of
(p1, p2), (s1, s2), and (s?1, s?2), are checked by three
human annotators to determine whether s1 entails
s?1 and s2 entails s?2 so that entailment relations of
both directions are verified. In advance of evaluation
annotation, all the evaluation samples are shuffled
so that the annotators cannot find out which sample
is given by which method for fairness. We regard
each paraphrase pair as correct if at least two annota-
tors judge that entailment relations of both directions
hold for it. You may wonder whether only one pair
of sentences (s1, s2) is enough for evaluation since a
correct (wrong) paraphrase pair might be judged as
wrong (correct) accidentally. Nevertheless, we sup-
pose that the final evaluation results are reliable if
the number of evaluation samples is sufficient. In
this experiment, m is 5,000 and n is 200. We use
Yahoo!JAPAN API to retrieve sentences.
Graph (a) in Figure 3 shows a precision curve
for each method. Sup and Uns respectively indi-
cate the supervised and unsupervised versions of our
method. The figure indicates that Sup outperforms
all the others and shows a high precision rate of
about 94% at the top 1,000. Remember that this
is the result of using 100,000 definition sentence
pairs. Thus, we estimate that Sup can extract about
300,000 paraphrase pairs with a precision rate of
about 94%, if we use all 29,661,812 definition sen-
tence pairs that we acquired.
Furthermore, we measured precision after trivial
paraphrase pairs were discarded from the evaluation
samples of each method. A candidate phrase pair
Definition sentence pairs Sup Uns BM SMT Mrt
with trivial 1,381,424 24,049 9,562 18,184
without trivial 1,377,573 23,490 7,256 18,139
Web sentence pairs Sup Uns BM SMT Mrt
with trivial 277,172 5,101 4,586 4,978
without trivial 274,720 4,399 2,342 4,958
Table 2: Number of extracted paraphrases.
(p1, p2) is regarded as trivial if the pronunciation is
the same between p1 and p2,10 or all of the con-
tent words contained in p1 are the same as those
of p2. Graph (b) gives a precision curve for each
method. Again, Sup outperforms the others too, and
maintains a precision rate of about 90% until the top
1,000. These results support our claim II.
The upper half of Table 2 shows the number of
extracted paraphrases with/without trivial pairs for
each method.11 Sup and Uns extracted many more
paraphrases. It is noteworthy that Sup performed the
best in terms of both precision rate and the number
of extracted paraphrases.
Table 3 shows examples of correct and incorrect
outputs of Sup. As the examples indicate, many of
the extracted paraphrases are not specific to defini-
tion sentences and seem very reusable. However,
there are few paraphrases involving metaphors or id-
ioms in the outputs due to the nature of definition
sentences. In this regard, we do not claim that our
method is almighty. We agree with Sekine (2005)
who claims that several different methods are re-
quired to discover a wider variety of paraphrases.
In graphs (a) and (b), the precision of the SMT
method goes up as rank goes down. This strange be-
havior is due to the scoring by Moses that worked
poorly for the data; it gave 1.0 to 82.5% of all the
samples, 38.8% of which were incorrect. We suspect
SMTmethods are poor at monolingual alignment for
paraphrasing or entailment tasks since, in the tasks,
data is much noisier than that used for SMT. See
MacCartney et al (2008) for similar discussion.
4.2 Definition pairs vs. Web sentence pairs
To collect Web sentence pairs, first, we randomly
sampled 1.8 million sentences from the Web corpus.
10There are many kinds of orthographic variants in Japanese,
which can be identified by their pronunciation.
11We set no threshold for candidate phrase pairs of each
method, and counted all the candidate phrase pairs in Table 2.
1093
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  1000  2000  3000  4000  5000
Pre
cisi
on
Top-N
?Sup_def?
?Uns_def?
?SMT_def?
?BM_def?
?Mrt_def?
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  1000  2000  3000  4000  5000
Pre
cisi
on
Top-N
?Sup_def_n?
?Uns_def_n?
?SMT_def_n?
?BM_def_n?
?Mrt_def_n?
(a) Definition sentence pairs with trivial paraphrases (b) Definition sentence pairs without trivial paraphrases
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  1000  2000  3000  4000  5000
Pre
cisi
on
Top-N
?Sup_www?
?Uns_www?
?SMT_www?
?BM_www?
?Mrt_www?
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  1000  2000  3000  4000  5000
Pre
cisi
on
Top-N
?Sup_www_n?
?Uns_www_n?
?SMT_www_n?
?BM_www_n?
?Mrt_www_n?
(c) Web sentence pairs with trivial paraphrases (d) Web sentence pairs without trivial paraphrases
Figure 3: Precision curves of paraphrase extraction.
Rank Paraphrase pair
Correct
13 ?????????????? (send a message to the e-mail address)????????????????? (send
an e-mail message to the e-mail address)
19 ????????? (requested by a customer)?????????? (commissioned by a customer)
70 ?????????? (describe the fiscal condition of company) ??????????? (indicate the fiscal state
of company)
112 ???????????? (get information)???????? (get news)
656 ???????? (it is a convention)????????? (it is a rule)
841 ??????????????? (represent the energy scale of earthquake)????????? (represent the scale
of earthquake)
929 ???????? (cause the oxidation of cells)????????? (cause cellular aging)
1,553 ??????? (remove dead skin cells)??????? (peel off dead skin cells)
2,243 ????????? (required for the development of fetus)??????????????? (indispensable for the
growth and development of fetus)
2,855 ??????? (correct eyesight)???????? (perform eyesight correction)
2,931 ????????? (call it even)?????????? (call it quits)
3,667 ?????????????? (accumulated on a hard disk)?????????????????? (stored on a
hard disk drive)
4,870 ????????? (excrete harmful substance)?????????? (discharge harmful toxin)
5,501 ????????????????????????? (mount two processor cores on one CPU)????????
????????????????? (build two processor cores into one package)
10,675 ??????? (trade foreign currencies)???????? (exchange one currency for another)
112,819 ??????????? (become a regular staff member of the company where (s)he has worked as a temp) ???
????????? (employed by the company where (s)he has worked as a temp)
193,553 ????????????? (access Web sites)??????????? (visit WWW sites)
Incorrect
903 ?????????? (send to a Web browser)??????????? (send to a PC)
2,530 ?????? (intend to balance)?????????? (intend to refresh)
3,008 ???????????? (unable to digest with digestive enzymes)???????????? (hard to digest with
digestive enzymes)
Table 3: Examples of correct and incorrect paraphrases extracted by our supervised method with their rank.
1094
We call them sampled sentences. Then, using Ya-
hoo!JAPANAPI, we retrieved up to 20 snippets rele-
vant to each sampled sentence using all of the nouns
in each sentence as a query. After that, each snippet
was split into sentences, which we call snippet sen-
tences. We paired a sampled sentence and a snippet
sentence that was the most similar to the sampled
sentence. Similarity is the number of nouns shared
by the two sentences. Finally, we randomly sampled
100,000 pairs from all the pairs.
Paraphrase pairs were extracted from the Web
sentence pairs by using BM, SMT, Mrt and the su-
pervised and unsupervised versions of our method.
The features used with our methods were selected
from all of the 78 features mentioned in Section 3.2
so that they performed well for Web sentence pairs.
Specifically, the features were selected by ablation
tests using training data that was tailored to Web
sentence pairs. The training data consisted of 2,741
sentence pairs that were collected in the same way as
the Web sentence pairs and was labeled in the same
way as described in Section 3.2.
Graph (c) of Figure 3 shows precision curves. We
also measured precision without trivial pairs in the
same way as the previous experiment. Graph (d)
shows the results. The lower half of Table 2 shows
the number of extracted paraphrases with/without
trivial pairs for each method.
Note that precision figures of our methods in
graphs (c) and (d) are lower than those of our meth-
ods in graphs (a) and (b). Additionally, none of the
methods achieved a precision rate of 90% using Web
sentence pairs.12 We think that a precision rate of
at least 90% would be necessary if you apply auto-
matically extracted paraphrases to NLP tasks with-
out manual annotation. Only the combination of Sup
and definition sentence pairs achieved that precision.
Also note that, for all of the methods, the numbers
of extracted paraphrases from Web sentence pairs
are fewer than those from definition sentence pairs.
From all of these results, we conclude that our
claim I is verified.
12Precision of SMT is unexpectedly good. We found some
Web sentence pairs consisting of two mostly identical sentences
on rare occasions. The method worked relatively well for them.
5 Conclusion
We proposed a method of extracting paraphrases
from definition sentences on the Web. From the ex-
perimental results, we conclude that the following
two claims of this paper are verified.
1. Definition sentences on the Web are a treasure
trove of paraphrase knowledge.
2. Our method extracts many paraphrases from
the definition sentences on the Web accurately;
it can extract about 300,000 paraphrases from
6 ? 108 Web documents with a precision rate
of about 94%.
Our future work is threefold. First, we will release
extracted paraphrases from all of the 29,661,812
definition sentence pairs that we acquired, after hu-
man annotators check their validity. The result will
be available through the ALAGIN forum.13
Second, we plan to induce paraphrase rules
from paraphrase instances. Though our method
can extract a variety of paraphrase instances on
a large scale, their coverage might be insufficient
for real NLP applications since some paraphrase
phenomena are highly productive. Therefore, we
need paraphrase rules in addition to paraphrase in-
stances. Barzilay and McKeown (2001) induced
simple POS-based paraphrase rules from paraphrase
instances, which can be a good starting point.
Finally, as mentioned in Section 1, the work in
this paper is only the beginning of our research on
paraphrase extraction. We are trying to extract far
more paraphrases from a set of sentences fulfilling
the same pragmatic function (e.g. definition) for the
same topic (e.g. osteoporosis) on the Web. Such
functions other than definition may include the us-
age of the same Linux command, the recipe for the
same cuisine, or the description of related work on
the same research issue.
Acknowledgments
We would like to thank Atsushi Fujita, Francis
Bond, and all of the members of the Information
Analysis Laboratory, Universal Communication Re-
search Institute at NICT.
13http://alagin.jp/
1095
References
Susumu Akamine, Daisuke Kawahara, Yoshikiyo Kato,
Tetsuji Nakagawa, Yutaka I. Leon-Suematsu, Takuya
Kawada, Kentaro Inui, Sadao Kurohashi, and Yutaka
Kidawara. 2010. Organizing information on the web
to support user judgments on information credibil-
ity. In Proceedings of 2010 4th International Uni-
versal Communication Symposium Proceedings (IUCS
2010), pages 122?129.
Ion Androutsopoulos and Prodromos Malakasiotis.
2010. A survey of paraphrasing and textual entailment
methods. Journal of Artificial Intelligence Research,
38:135?187.
Colin Bannard and Chris Callison-Burch. 2005. Para-
phrasing with bilingual parallel corpora. In Proceed-
ings of the 43rd Annual Meeting of the Association for
Computational Linguistics (ACL-2005), pages 597?
604.
Regina Barzilay and Lillian Lee. 2003. Learning to
paraphrase: An unsupervised approach using multiple-
sequence alignment. In Proceedings of HLT-NAACL
2003, pages 16?23.
Regina Barzilay and Kathleen R. McKeown. 2001. Ex-
tracting paraphrases from a parallel corpus. In Pro-
ceedings of the 39th Annual Meeting of the ACL joint
with the 10th Meeting of the European Chapter of the
ACL (ACL/EACL 2001), pages 50?57.
Rahul Bhagat, Patrick Pantel, and Eduard Hovy. 2007.
Ledir: An unsupervised algorithm for learning direc-
tionality of inference rules. In Proceedings of Confer-
ence on Empirical Methods in Natural Language Pro-
cessing (EMNLP2007), pages 161?170.
Chris Callison-Burch, Philipp Koehn, and Miles Os-
borne. 2006. Improved statistical machine translation
using paraphrases. In Proceedings of the 2006 Human
Language Technology Conference of the North Ameri-
can Chapter of the Association for Computational Lin-
guistics (HLT-NAACL 2006), pages 17?24.
Bill Dolan, Chris Quirk, and Chris Brockett. 2004. Un-
supervised construction of large paraphrase corpora:
exploiting massively parallel news sources. In Pro-
ceedings of the 20th international conference on Com-
putational Linguistics (COLING 2004), pages 350?
356.
Joseph L. Fleiss. 1971. Measuring nominal scale agree-
ment among many raters. Psychological Bulletin,
76(5):378?382.
Atsushi Fujii and Tetsuya Ishikawa. 2002. Extraction
and organization of encyclopedic knowledge informa-
tion using the World Wide Web (written in Japanese).
Institute of Electronics, Information, and Communica-
tion Engineers, J85-D-II(2):300?307.
Maayan Geffet and Ido Dagan. 2005. The distributional
inclusion hypotheses and lexical entailment. In Pro-
ceedings of the 43rd Annual Meeting of the Associa-
tion for Computational Linguistics (ACL 2005), pages
107?114.
Chikara Hashimoto, Kentaro Torisawa, Kow Kuroda,
Stijn De Saeger, Masaki Murata, and Jun?ichi Kazama.
2009. Large-scale verb entailment acquisition from
the web. In Proceedings of the 2009 Conference on
Empirical Methods in Natural Language Processing
(EMNLP 2009), pages 1172?1181.
Lidija Iordanskaja, Richard Kittredge, and Alain
Polgue`re. 1991. Lexical selection and paraphrase in
a meaning-text generation model. In Ce?cile L. Paris,
William R. Swartout, and William C. Mann, editors,
Natural language generation in artificial intelligence
and computational linguistics, pages 293?312. Kluwer
Academic Press.
David Kauchak and Regina Barzilay. 2006. Para-
phrasing for automatic evaluation. In Proceedings of
the 2006 Human Language Technology Conference of
the North American Chapter of the Association for
Computational Linguistics (HLT-NAACL 2006), pages
455?462.
Jun?ichi Kazama and Kentaro Torisawa. 2007. Exploit-
ing Wikipedia as external knowledge for named entity
recognition. In Proceedings of the 2007 Joint Confer-
ence on Empirical Methods in Natural Language Pro-
cessing and Computational Natural Language Learn-
ing (EMNLP-CoNLL 2007), pages 698?707, June.
Jun?ichi Kazama and Kentaro Torisawa. 2008. Inducing
gazetteers for named entity recognition by large-scale
clustering of dependency relations. In Proceedings of
the 46th Annual Meeting of the Association for Com-
putational Linguistics: Human Language Technolo-
gies (ACL-08: HLT), pages 407?415.
Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran, Richard
Zens, Chris Dyer, Ondr?ej Bojar, Alexandra Con-
stantin, and Evan Herbst. 2007. Moses: Open Source
Toolkit for Statistical Machine Translation. In Pro-
ceedings of the 45th Annual Meeting of the Associa-
tion for Computational Linguistics (ACL 2007), pages
177?180.
J. Richard Landis and Gary G. Koch. 1977. The mea-
surement of observer agreement for categorical data.
Biometrics, 33(1):159?174.
Dekang Lin and Patrick Pantel. 2001. Discovery of infer-
ence rules for question answering. Natural Language
Engineering, 7(4):343?360.
Bill MacCartney, Michel Galley, and Christopher D.
Manning. 2008. A phrase-based alignment model for
natural language inference. In Proceedings of the 2008
1096
Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP-2008), pages 802?811.
Nitin Madnani and Bonnie Dorr. 2010. Generating
phrasal and sentential paraphrases: A survey of data-
driven methods. Computational Linguistics, 36(3).
Kathleen R. McKeown, Regina Barzilay, David Evans,
Vasileios Hatzivassiloglou, Judith L. Klavans, Ani
Nenkova, Carl Sable, Barry Schiffman, and Sergey
Sigelman. 2002. Tracking and summarizing news
on a daily basis with columbia?s newsblaster. In Pro-
ceedings of the 2nd international conference on Hu-
man Language Technology Research, pages 280?285.
Masaki Murata, Toshiyuki Kanemaru, and Hitoshi Isa-
hara. 2004. Automatic paraphrase acquisition based
on matching of definition sentences in plural dictionar-
ies (written in Japanese). Journal of Natural Language
Processing, 11(5):135?149.
Roberto Navigli and Paola Velardi. 2010. Learning
word-class lattices for definition and hypernym extrac-
tion. In Proceedings of the 48th Annual Meeting of
the Association for Computational Linguistics (ACL
2010), pages 1318?1327.
Chris Quirk, Chris Brockett, and William Dolan. 2004.
Monolingual machine translation for paraphrase gen-
eration. In Proceedings of the 2004 Conference on
Empirical Methods in Natural Language Processing
(EMNLP-2004), pages 142?149.
Deepak Ravichandran and Eduard H. Hovy. 2002.
Learning surface text patterns for a question answer-
ing system. In Proceedings of the 40th Annual Meet-
ing of the Association for Computational Linguistics
(ACL 2002), pages 41?47.
Satoshi Sekine. 2005. Automatic paraphrase discovery
based on context and keywords between ne pairs. In
Proceedings of the Third International Workshop on
Paraphrasing (IWP-2005), pages 80?87.
Yusuke Shinyama, Satoshi Sekine, and Kiyoshi Sudo.
2002. Automatic paraphrase acquisition from news ar-
ticles. In Proceedings of the 2nd international Con-
ference on Human Language Technology Research
(HLT2002), pages 313?318.
Idan Szpektor and Ido Dagan. 2008. Learning entail-
ment rules for unary template. In Proceedings of the
22nd International Conference on Computational Lin-
guistics (COLING2008), pages 849?856.
Idan Szpektor, Eyal Shnarch, and Ido Dagan. 2007.
Instance-based evaluation of entailment rule acquisi-
tion. In Proceedings of the 45th Annual Meeting of the
Association of Computational Linguistics (ACL 2007),
pages 456?463.
1097
Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 1619?1629,
Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics
Aid is Out There:
Looking for Help from Tweets during a Large Scale Disaster
Istva?n Varga? Motoki Sano? Kentaro Torisawa? Chikara Hashimoto?
Kiyonori Ohtake? Takao Kawai? Jong-Hoon Oh? Stijn De Saeger?
?Information Analysis Laboratory,
National Institute of Information and Communications Technology (NICT), Japan
{istvan, msano, torisawa, ch, kiyonori.ohtake, rovellia, stijn}@nict.go.jp
?Knowledge Discovery Research Laboratories, NEC Corporation, Japan
t-kawai@bx.jp.nec.com
Abstract
The 2011 Great East Japan Earthquake
caused a wide range of problems, and as
countermeasures, many aid activities were
carried out. Many of these problems and
aid activities were reported via Twitter.
However, most problem reports and corre-
sponding aid messages were not success-
fully exchanged between victims and lo-
cal governments or humanitarian organi-
zations, overwhelmed by the vast amount
of information. As a result, victims could
not receive necessary aid and humanitar-
ian organizations wasted resources on re-
dundant efforts. In this paper, we propose
a method for discovering matches between
problem reports and aid messages. Our
system contributes to problem-solving in
a large scale disaster situation by facilitat-
ing communication between victims and
humanitarian organizations.
1 Introduction
The 2011 Great East Japan Earthquake in March
11, 2011 killed 15,883 people and destroyed over
260,000 households (National Police Agency of
Japan, 2013). Accustomed way of living suddenly
became unmanageable and people found them-
selves in extreme conditions for months.
Just after the disaster, many people used Twitter
for posting problem reports and aid messages as
it functioned while most communication channels
suffered disruptions (Winn, 2011; Acar and Mu-
raki, 2011; Sano et al, 2012). Examples of such
problem reports and aid messages, translated from
Japanese tweets, are given below (P1, A1).
P1 My friend said infant formula is sold out. If
somebody knows shops in Sendai-city where
they still have it in stock, please let us know.
A1 At Jusco supermarket in Sendai, you can still
buy water and infant formula.
If A1 would have been forwarded to the sender
of P1, it could have helped since it would help
the ?friend? to obtain infant formula. But in re-
ality, the majority of such reports/messages, es-
pecially unforeseen ones went unnoticed amongst
the mass of information (Ohtake et al, 2013). In
addition, there were cases where many humani-
tarian organizations responded to the same prob-
lems and wasted precious resources. For instance,
many volunteers responded to problems which
were heavily reported by public media, leading
to oversupply (Saijo, 2012). Such waste of re-
sources could have been avoided if the organiza-
tions would have successfully shared the aid mes-
sages for the same problems.
Such observations motivated this work. We de-
veloped methods for recognizing problem reports
and aid messages in tweets and finding proper
matches between them. By browsing the discov-
ered matches, victims can be assisted to over-
come their problems, and humanitarian organiza-
tions can avoid redundant relief efforts. We define
problem reports, aid messages and their successful
matches as follows.
Problem report: A tweet that informs about the
possibility or emergence of a problem that re-
quires a treatment or countermeasure.
Aid message: A tweet that (1) informs about sit-
uations or actions that can be a remedy or so-
lution for a problem, or (2) informs that the
problem is solved or is about to be solved.
Problem-aid tweet match: A tweet pair is a
problem-aid tweet match (1) if the aid mes-
sage informs how to overcome the problem,
(2) if the aid message informs about the set-
1619
tlement of the problem, or (3) if the aid mes-
sage provides information which contributes
to the settlement of the problem.
In this work we excluded direct requests, such as
?Send us food!?, from problem reports. This is be-
cause it is relatively easy to recognize such direct
requests by checking mood types (i.e., imperative)
and their behavior is quite different from prob-
lem reports like ?People in Sendai are starving?.
Problem reports in this work do not directly state
which actions are required, only implying the ne-
cessity of a countermeasure through claiming the
existence of problems.
An underlying assumption of our method is that
we can find a noun-predicate dependency relation
that works as an indicator of problems and aids in
problem reports and aid messages, which we refer
to as problem nucleus and aid nucleus.1 An exam-
ple of problem nucleus is ?infant formula is sold
out? in P1, and that of aid nucleus is ?(can) buy
infant formula? in A1. Many problem-aid tweet
matches can be recognized through problem and
aid nuclei pairs.
We also assume that if the problem and aid nu-
clei match, they share the same noun. Then, the
semantics of predicates in the nuclei is the main
factor that decides whether the nuclei constitute
a match. We introduce a semantic classification
of predicates according to the framework of ex-
citation polarities proposed in Hashimoto et al
(2012). Our hypothesis is that excitation polarities
along with trouble expressions can characterize
problem reports, aid messages and their matches.
We developed a supervised method encoding such
information into its features.
An evident alternative to this approach is to use
sentiment analysis (Mandel et al, 2012; Tsagkali-
dou et al, 2011) assuming that problem reports
should include something ?bad? while aid mes-
sages describe something ?good?. However, we
will show that this does not work well in our exper-
iments. We think this is due to mismatch between
the concepts of problem/aid and sentiment polar-
ity. Note that previous work on ?demand? recogni-
tion also found similar tendencies (Kanayama and
Nasukawa, 2008).
Another issue in this task is, of course, the
context surrounding problem/aid nuclei. The fol-
1We found that out of 500 random tweets only 4.5% of
problem reports and 9.1% of aid messages did not contain
any problem report/aid message nuclei.
lowing (imaginary) tweets exemplify the problems
caused by contexts.
FP1 I do not believe infant formula is sold out
in Sendai.
FA1 At Jusco supermarket in Iwaki, you can still
buy infant formula.
The problem nuclei of FP1 and P1 are the same
but FP1 is not a problem report because of the ex-
pression ?I do not believe?. The aid nuclei of FA1
and A1 are the same but FA1 does not constitute
a proper match with P1 because FA1 and P1 re-
fer to different cities, ?Iwaki? and ?Sendai?. In
this work, the problems concerning the modality
and other semantic modifications to problem/aid
nuclei by context are dealt with by the introduc-
tion of features representing the text surrounding
the nuclei in machine learning. As for the loca-
tion problem, we apply a location recognizer to all
tweets and restrict the matching candidates to the
tweet pairs referring to the same location.
2 Approach
!"#$%"&"'()*&+*,*&-.(.+*,/+/0$0,/0,)-+$*#.(,'+
!"#$%&'("&!#")("&*#+,-.&"(
12001.+ 12001+/0$0,/0,)-+#0&*3",+
$#"4&0!+#0$"#1+$#"4&0!+,5)&05.+
/-0('&11/+&("&*#+,-.&"(
*(/+!0..*'0++*(/+,5)&05.+
$#"4&0!+#0$"#1+$#"4&0!+,5)&05.+ *(/+!0..*'0+*(/+,5)&05.+
!"#$%&'2/-0()3&&)('/)*4(
$#"4&0!+*,/+*(/+,"5,+*#0+1%0+.*!06+.*!0+'0"'#*$%()*&+&")*3",+
&")*3",+#0)"',(70#+
!"#$%&'2/-0('/)*4("&*#+,-.&"(
Figure 1: Problem-aid matching system overview.
We developed machine learning based systems
to recognize problem reports, aid messages and
problem-aid tweet matches. Figure 1 illustrates
the whole system. First, location names in tweets
are identified by matching tweets against our loca-
tion dictionary, described in Section 3. Then, each
tweet is paired with each dependency relation in
the tweet, which is a candidate of problem/aid nu-
clei and given to the problem report and aid mes-
sage recognizers. A tweet-nucleus-candidate pair
judged as problem report is combined with another
tweet-nucleus-candidate pair recognized as an aid
message if the two nuclei share the same noun and
the tweets share the same location name, and given
to the problem-aid match recognizer.
1620
In the following, problem and aid nuclei are
denoted by a noun-template pair. A template is
composed of a predicate and its argument posi-
tion. For instance, ?water supply stopped? in P2
is a problem nucleus, ?water supply recovered? in
A2 is an aid nucleus and they are denoted by the
noun-template pairs ?water supply, X stopped? and
?water supply, X recovered?.
P2 In Sendai city, water supply stopped.
A2 In Sendai city, water supply recovered.
Roughly speaking, we regard the tasks of prob-
lem report recognition and aid message recogni-
tion as the tasks of finding proper problem/aid
nuclei in tweets and our method performs these
tasks based on the semantic properties of nouns
and templates in problem/aid nucleus candidates
and their surrounding contexts.
The basic intuition behind this approach can
be explained using excitation polarity proposed in
Hashimoto et al (2012). Excitation polarity differ-
entiates templates into ?excitatory? or ?inhibitory?
with regard to the main function or effect of en-
tities referred to by their argument noun. While
excitatory templates (e.g., cause X, buy X, suf-
fer from X) entail that the main function or ef-
fect is activated or enhanced, inhibitory templates
(e.g., ruin X, prevent X, X runs out) entail that
the main function or effect is deactivated or sup-
pressed. The templates that do not fit into the
above categorization are classified as ?neutral?.
We observed that problem reports in general
included either of (A) a dependency relation be-
tween a noun referring to some trouble and an
excitatory template or (B) a dependency rela-
tion between a noun not referring to any trouble
and an inhibitory template. Examples of (A) in-
clude ?carbon monoxide poisoning, suffer from
X?, ?false rumor, spread X?. They refer to events
that activate troubles. On the other hand, (B) is
exemplified by ?school, X is collapsed?, ?battery,
X runs out?, which imply that some non-trouble
objects such as resources, appliances and facilities
are dysfunctional. We assume that if we can find
such dependency relations in tweets, the tweets are
likely to be problem reports.
Contrary, a tweet is more likely to be an aid
message when it includes either (C) a dependency
relation between a noun referring to some trouble
and an inhibitory template or (D) a dependency re-
lation between a noun not referring to any trou-
trouble non-trouble
excitatory (A) problem nucleus (D) aid nucleus
inhibitory (C) aid nucleus (B) problem nucleus
Table 1: Problem/aid-excitation matrix.
ble and an excitatory template. Examples of (C)
are ?flu, X was eradicated (in some shelter)? and
?debris, remove X?. They represent the dysfunc-
tion of troubles and can mean the solution or the
settlement of troubles. On the other hand, exam-
ples of (D) include ?school, X re-build? and ?baby
formula, buy X?. They entail that some resources
function properly or become available. These for-
mulations are summarized in Table 1.
As an interesting consequence of such a view
on problem/aid nucleus, we can say the following
regarding problem-aid tweet matchings: when a
problem nucleus and an aid nucleus are an ade-
quate match, the excitation polarities of their tem-
plates are opposite. Consider the following tweets.
P3 Some people were going back to Iwaki, but the
water system has not come back yet. It?s ter-
rible that bath is unusable.
A3 We open the bath for the public, located on
the 2F of Iwaki Kuhon temple. If you?re stay-
ing at a relief shelter and would like to take a
bath, you can use it.
?Bath is unusable? in P3 is a problem nucleus
while ?open the bath? in A3 is an aid nucleus.
Since the problem reported in P3 can be solved
with A3, they are a successful match. The in-
hibitory template ?X is unusable? indicates that
the function of ?bath?, a non-trouble expression,
is suppressed. The excitatory template ?open X?
indicates that the function of ?bath? is activated.
The same holds when we consider the noun re-
ferring to troubles like ?flu?. The polarity of the
template in a problem nucleus should be excita-
tory like ?flu is raging? while that of an aid nucleus
should be inhibitory like ?flu, X was eradicated?.
These examples keep the constraint that the prob-
lem and aid nucleus should have opposite polari-
ties when they constitute a match.
Note that the formulations of problem report,
aid message and their matches or the excitation
matrix (Table 1) were not presented to our anno-
tators and our test/training data may contain data
that contradict with the formulations. These for-
mulations constitute the hypothesis to be validated
in this work.
1621
An important point to be stressed here is that
there are problem-aid tweet matches that do not
fit into our formulations. For instance, we as-
sume that the problem nucleus and aid nucleus in
a proper match share the same noun. However,
tweet pairs such as ?There are many injured people
in Sendai city? and ?We are sending ambulances
to Sendai? can constitute a proper match, but there
is no proper problem-aid nuclei pair that share the
same noun in these tweets. (We can find the de-
pendency relations sharing ?Sendai? but they do
not express anything about the contents of prob-
lem and aid.) The point is that the tweet pairs can
be judged because people know ambulances can
be a countermeasure to injured people as world
knowledge. Introducing such world knowledge is
beyond the scope of this current study.
Also, we exclude direct requests from problem
reports. As mentioned in the introduction, identi-
fying direct requests is relatively easy, hence we
excluded them from our target.
3 Problem Report and Aid Message
Recognizers
We recognize problem reports and aid messages in
given tweets using a supervised classifier, SVMs
with linear kernel, which worked best in our pre-
liminary experiments. The feature set given to
the SVMs are summarized in the top part of Ta-
ble 2. Note that we used a common feature
set for both the problem report recognizer and
aid message recognizer and that it is categorized
into several types: features concerning trouble
expressions (TR), excitation polarity (EX), their
combination (TREX1) and word sentiment polar-
ity (WSP), features expressing morphological and
syntactic structures of nuclei and their context sur-
rounding problem/aid nuclei (MSA), features con-
cerning semantic word classes (SWC) appearing
in nuclei and their context, request phrases, such
as ?Please help us?, appearing in tweets (REQ),
and geographical locations in tweets recognized
by our location recognizer (GL). MSA is used to
express the modality of nuclei and other contex-
tual information surrounding nuclei. REQ was in-
troduced based on our observation that if there are
some requests in tweets, problem nuclei tend to
appear as justification for the requests.
We also attempted to represent nucleus template
IDs, noun IDs and their combinations directly in
our feature set to capture typical templates fre-
TR Whether the nucleus noun is a trouble/non-trouble expression.
EX1 The excitation polarity and the value of the excitation score of the
nucleus template.
TREX1 All possible combinations of trouble/non-trouble of TR and exci-
tation polarities of EX1.
WSP1 Whether the nucleus noun is positive/negative/not in theWord Sen-
timent Polarity (WSP) dictionary.
WSP2 Whether the nucleus template is positive/negative/not in the WSP
dictionary.
WSP3 Whether the nucleus template is followed by a positive/negative
word within the tweet.
MSA1 Morpheme n-grams, syntactic dependency n-grams in the tweet
and morpheme n-grams before and after the nucleus template.
(1 ? n ? 3)
MSA2 Character n-grams of the nucleus template to capture conjugation
and modality variations. (1 ? n ? 3)
MSA3 Morpheme and part-of-speech n-grams within the bunsetsu con-
taining the nucleus template to capture conjugation and modality
variations. (1 ? n ? 3) (A bunsetsu is a syntactic constituent
composed of a content word and several function words, the small-
est unit of syntactic analysis in Japanese.)
MSA4 The part-of-speech of the nucleus template?s head to capture
modality variations outside the nucleus template?s bunsetsu.
MSA5 The number of bunsetsu between the nucleus noun and the nucleus
template. We found that a long distance between the noun and the
template suggests parsing errors.
MSA6 Re-occurrence of the nucleus noun?s postpositional particle be-
tween the nucleus noun and the nucleus template. We found
that the re-occurrence of the same postpositional particle within
a clause suggests parsing errors.
SWC1 The semantic class n-grams in the tweet.
SWC2 The semantic class(es) of the nucleus noun.
REQ Presence of a request phrase in the tweet, identified from within
426 manually collected request phrases.
GL Geographical locations in the tweet identified using our location
recognizer. Existence/non-existence of locations in tweets are also
encoded.
EX2 Whether the problem and aid nucleus templates have the same or
opposite excitation polarities.
EX3 Product of the values of the excitation scores for the problem and
the aid nucleus template.
TREX2 All possible combinations of trouble/non-trouble of TR, excitation
polarity EX1 of the problem nucleus template and excitation po-
larity EX1 of the aid nucleus template.
SIM1 Common semantic word classes of the problem report and aid mes-
sage.
SIM2 Whether there are common nouns modifying the common nucleus
noun or not in the problem report and aid message.
SIM3 Whether the words in the same word class modify the common
nucleus noun or not in the problem report and aid message.
SIM4 The semantic similarity score between the problem nucleus tem-
plate and the aid nucleus template.
CTP Whether the problem nucleus template and the aid nucleus tem-
plate are in contradiction relation dictionary or not.
SSR1 Problem report recognizer?s SVM score of problem nucleus tem-
plate.
SSR2 Problem report recognizer?s SVM score of aid nucleus template.
SSR3 Aid message recognizer?s SVM score of the problem nucleus tem-
plate.
SSR4 Aid message recognizer?s SVM score of the aid nucleus template.
Table 2: Features used with the problem re-
port recognizer and the aid message recognizer
(above); additional features used in training the
problem-aid match recognizer (below).
quently appearing in problem and aid nuclei, but
since there was no improvement we omit them.
The other feature types need some non-trivial
dictionaries. In the following, we explain how we
created the dictionaries for each feature type along
with the motivation behind their introduction.
Trouble Expressions (TR) As mentioned previ-
ously, trouble expressions work as good evidence
for recognizing problem reports and aid messages.
The TR feature indicates whether the noun in the
problem/aid nucleus candidate is a trouble ex-
1622
pression or not. For this purpose, we created
a list of trouble expressions following the semi-
supervised procedure presented in De Saeger et al
(2008). After manual validation of the list, we ob-
tained 20,249 expressions referring to some trou-
bles, such as ?tsunami? and ?flu?. The value of the
TR feature is determined by checking whether the
nucleus noun is contained in the list.
Excitation Polarities (EX) The excitation po-
larities are also important in recognizing problem
reports and aid messages as mentioned before. For
constructing the dictionary for excitation polarities
of templates, we applied the bootstrapping proce-
dure in Hashimoto et al (2012) to 600 millionWeb
pages. Hashimoto?s method provides the value of
the excitation score in [?1, 1] for each template
indicating the polarities and their strength. Posi-
tive value indicates excitatory, negative value in-
hibitory and small absolute value neutral. After
manual checking of the results by the majority
vote of three human annotators (other than the au-
thors), we limited the templates to the ones that
have score values consistent with the majority vote
of the annotators, obtaining a dictionary consisting
of 7,848 excitatory, 836 inhibitory and 7,230 neu-
tral templates. The Fleiss? (1971) kappa-score was
0.48 (moderate agreement). We used the excita-
tion score values as feature values. Excitation has
already been used in many works, such as causal-
ity and contradiction extraction (Hashimoto et al,
2012) or Why-QA (Oh et al, 2013).
Word Sentiment Polarity (WSP) As we sug-
gested before, full-fledged sentiment analysis to
recognize the expressions, including clauses and
phrases, that refer to something good or bad was
not effective in our task. However, the sentiment
polarity, assigned to single words turned out to
be effective. To identify the sentiment polarity
of words, we employed the word sentiment polar-
ity dictionary used with a sentiment analysis tool
for Japanese, the Opinion Extraction Tool soft-
ware2, which is an implementation of Nakagawa
et al (2010). The dictionary includes 9,030 posi-
tive and 27,951 negative words. Note that we used
the Opinion Extraction Tool in the experiments to
check the effectiveness of the full-fledged senti-
ment analysis in this task.
Semantic Word Class (SWC) We assume that
nouns in the same semantic class behave simi-
2Provided at the ALAGIN Forum (http://www.alagin.jp/).
larly in crisis situations. For example, if ?infec-
tion? appears in a problem report, the tweets in-
cluding ?pulmonary embolism? are also likely to
be problem reports. Semantic word class features
are used to capture such tendencies. We applied
an EM-style word clustering algorithm in Kazama
and Torisawa (2008) to 600 millionWeb pages and
clustered 1 million nouns into 500 classes. This
algorithm has been used in many works, such as
relation extraction (De Saeger et al, 2011) and
Why-QA (Oh et al, 2012), and can generate vari-
ous kinds of semantically clean word classes, such
as foods, disease names, and natural disasters. We
used the word classes in tweets as features.3
Geographical Locations (GL) Our location
recognizer matches tweets against our loca-
tion dictionary. Location names and their
existence/non-existence in tweets constitute evi-
dence, thus we encoded such information into our
features. The location dictionary was created from
the Japan Post code data4 and Wikipedia, contain-
ing 2.7 million location names including cities,
schools and other facilities (Kazama et al, 2013).
4 Problem-Aid Match Recognizer
After problem report and aid message recogni-
tion, the positive outputs of the respective classi-
fiers are used as input in this step. The problem-
aid match recognizer classifies an aid message-
nucleus pair together with the problem report-
nucleus pair employing SVMs with linear ker-
nel, which performed best in this task again. The
problem-aid match recognizer uses all the features
used in the problem report recognizer and the aid
message recognizer along with additional features
regarding: excitation polarity (EX) and trouble
expressions (TR), distributional similarity (SIM),
contradiction (CTP) and SVM-scores of the prob-
lem report and aid message recognizers (SSR).
Here also we attempted to capture typical or fre-
quent matches of nuclei using template and noun
IDs and their combinations, but we did not observe
any improvement so we omit them from the fea-
ture set. The bottom part of Table 2 summarizes
the additional feature set, some of which are de-
scribed below in more detail.
3There is a slight complication here. For each noun n, EM
clustering estimates a probability distribution P (n|c?) for n
and semantic class c?. From this distribution we obtained
discrete semantic word classes by assigning each noun n to
semantic class c = argmaxc? p(c?|n).
4http://www.post.japanpost.jp/zipcode/download.html
1623
As for TR and EX, our intuition is that if a prob-
lem nucleus and an aid nucleus are an adequate
match, their excitation polarities are opposite, as
described in Section 2. We encode whether the ex-
citation polarities of nuclei templates are the same
or not in our features. Also, the excitation polar-
ities of problem and aid nuclei and TR are com-
bined (TREX1, TREX2) so that the classifier can
know whether the nuclei follow the constraint for
adequate matches described in Section 2.
As for SIM, if an aid message matches a prob-
lem report, besides the common nucleus noun, it is
reasonable to assume that certain contexts are se-
mantically similar. We capture this characteristic
in three ways. SIM1 looks for common semantic
word classes in the problem report and aid mes-
sage. SIM2 and SIM3 target the modifiers of the
common nucleus noun if they exist.
We also observed that if an aid message matches
a problem report, the problem nucleus template
and aid nucleus template are often distributionally
similar. A typical example is ?X is sold out? and
?buy X?. SIM4 captures this tendency. As the dis-
tributional similarity between templates, we used
a Bayesian distributional similarity measure pro-
posed by Kazama et al (2010).5
CTP indicates whether the problem and aid nu-
clei are in contradiction relation or not. This fea-
ture was implemented based on the observation
that when problem and aid nuclei are in contradic-
tion relation, they are often proper matches (e.g.,
?blackout, ?X starts?? and ?blackout, ?X ends??).
CTP indicates whether nucleus pairs are in the
one million contradiction phrase pairs6 automat-
ically obtained by applying a method proposed by
Hashimoto et al (2012) to 600 million Web pages.
5 Experiments
We evaluated our problem report recognizer and
problem-aid match recognizer. For the sake of
space, we give only the performance figures of the
aid message recognizer at the end of Section 5.1.
We collected tweets posted during and after
the 2011 Great East Japan Earthquake, between
March 10 and April 4, 2011. After applying
keyword-based filtering with a list of over 300
5The original similarity was defined over noun pairs and it
was estimated from dependency relations. Obtaining similar-
ity between template pairs, not noun pairs, is straightforward
given the same dependency relations. We used 600 million
Web pages for this similarity estimation.
6The precision of the pairs was reported as around 70%.
disaster related keywords, we obtained 55 million
tweets. After dependency parsing7, we used them
in our evaluation.
5.1 Problem Report Recognition
Firstly, we evaluated our problem report recog-
nizer. Particularly, we assessed the effect of ex-
citation polarities and trouble expressions in two
settings. The first is against a naturally distributed
gold standard data. The second targets problem
reports with problem nuclei unseen in the training
data.
In both experiments we observed that the per-
formance drops when excitation polarities and
trouble expressions are removed from the feature
set. The performance drop was larger in the sec-
ond experiment which suggests that the excitation
polarities and trouble expressions are more effec-
tive against unseen problem reports.
Training and test data for problem report recog-
nition consist of tweet-nucleus candidate pairs
randomly sampled from our 55 million tweet data.
The training data (R) and test data (T ) consist of
13,000 and 1,000 pairs, respectively, manually la-
beled by three annotators (other than the authors)
as problem or other. Final judgment was made by
majority vote. The Fleiss? kappa score for train-
ing and test data for annotation judgement is 0.74
(substantial agreement).
Our problem report recognizer and its variants
are listed in Table 3. Table 4 shows the evalua-
tion results. The proposed method achieved about
44% recall and nearly 80% precision, outperform-
ing all other systems in terms of precision, F-score
and average precision8. The improvement in pre-
cision when using TR&EX is statistically signif-
icant (p < 0.05).9 Note that F-measure dropped
PROPOSED: Our proposed method with all features used.
PROPOSED-*: The proposed method without the feature set de-
noted by ?*?. Here EX and TR denote all excitation po-
larity and trouble expression related features, respectively,
including their combinations (TREX1).
PROPOSED+OET: The proposed method incorporating the
classification results of problem nucleus candidates by the
Opinion Extraction Tool as additional binary features.
RULE-BASED: The method that regards only nuclei satisfying
the constraint in Table 1 as problem nuclei.
Table 3: Evaluated problem report recognizers.
7http://nlp.ist.i.kyoto-u.ac.jp/EN/index.php?KNP
8We calculate average precision using the formula: aP =?n
k=1
(Prec(k)?rel(k))
n , where Prec(k) is the precision atcut-off k and rel(k) is an indicator function equaling 1 if
the item at rank k is relevant, zero otherwise.
9Throughout this paper we performed two-tailed test of
1624
Recognition system R (%) P (%) F (%) aP (%)
PROPOSED 44.26 79.41 56.83 71.82
PROPOSED-TR&EX 45.08 74.83 56.26 69.67
PROPOSED-EX 44.67 74.66 55.89 69.90
PROPOSED-TR 43.85 74.31 55.15 69.44
PROPOSED-MSA 28.69 70.71 40.81 57.74
PROPOSED-SWC 43.42 75.97 55.25 70.61
PROPOSED-WSP 43.14 77.83 55.50 70.45
PROPOSED-REQ 42.64 76.16 55.50 54.67
PROPOSED-GL 44.14 78.34 55.50 56.46
PROPOSED+OET 44.24 79.41 56.82 71.81
RULE-BASED 30.32 67.96 41.93 n/a
Table 4: Recall (R), precision (P), F-score (F) and
average precision (aP) of the problem report rec-
ognizers.
whenever each type of feature was removed, im-
plying that each type of feature is effective in this
task. Especially note the performance drop if we
remove excitation polarities (EX), trouble expres-
sion (TR) and both excitation and trouble expres-
sion features (TR&EX), confirming that they are
crucial in recognizing problem reports with high
accuracy. Also note that the performance of PRO-
POSED+OET was actually slightly worse than that
of the proposed method. This suggests that full-
fledged sentiment analysis is not effective at least
in this setting. The rule-based method achieved
relatively high precision despite of the low recall,
demonstrating the importance of problem and aid
nuclei formulations described in Section 1.
The second experiment assessed the efficiency
of our problem report recognizer against unseen
problem nuclei under the condition that every tem-
plate in nuclei has excitation polarity. We sampled
the training and test data so that the problem nu-
cleus nouns and templates in the training and test
data are disjoint. First we created a subset of the
test data by selecting the samples which had nu-
clei with excitation templates. We call this sub-
set T ?. Next, we removed samples from training
data R if either of their problem nouns or tem-
plates appeared in the nuclei of T ?. The result-
ing new training data (called R?) and test data (T ?)
consist of 6,484 and 407 tweet-nucleus candidate
pairs, respectively. We trained our problem report
recognizer using R? and tested its performance us-
ing T ?. Figure 2 shows the precision-recall curves
obtained by changing the threshold on the SVM
scores. The effectiveness of excitation polarities
and trouble expressions was more evident in this
setting. The PROPOSED?s performance was ac-
tually better in this setting (almost 50% recall at
population proportion (Ott and Longnecker, 2010) using
SVM-threshold=0.
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 0  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1
Pre
cisi
on
Recall
PROPOSED-TRPROPOSED-EX PROPOSED-TR&EXPROPOSED
Figure 2: Precision-recall curves of problem re-
port recognizers against unseen problem nuclei.
more that 80% precision), than the previous set-
ting, showing that excitation templates and trouble
expressions are crucial in achieving high perfor-
mance especially for unseen problem nuclei. The
same was confirmed when we removed excitation
polarity and trouble expression related features,
with performance dropping by 7.43 points in terms
of average precision. The improvement in pre-
cision when using TR&EX is statistically signif-
icant (p < 0.01). This implies, assuming that we
have a wide-coverage dictionary of templates with
excitation polarities, that excitation polarities are
important in dealing with unexpected problems in
disaster situations.
We also evaluated the aid-message recognizer,
using tweet-nucleus pairs in R and T as train-
ing and test data and the annotation scheme was
also the same. The average Fleiss? kappa score
was 0.55 (moderate agreement). Our recognizer
achieved 53.82% recall and 65.67% precision and
showed similar tendencies with the problem report
recognizer, with the excitation polarities and trou-
ble expressions contributing to higher accuracy.
We can conclude that excitation polarities and
trouble expressions are important in identifying
problem reports and aid messages during disaster
situations.
5.2 Problem-Aid Matching
Next, we evaluated the performance of the
problem-aid match recognizer. We applied our
problem report recognizer and aid message recog-
nizer to all 55 million tweets and combined the
tweet-nucleus pairs judged as problem reports and
aid messages, respectively, to create the training
and test data.
The training data consists of two parts (M1 and
M2). M1 includes many variations of the aid
messages for each problem report, while M2 en-
1625
sures diversity in nouns and templates in problem
nuclei. For M1, we randomly picked up problem
reports from the output of the problem report rec-
ognizer and to each we attached up to 30 randomly
picked, distinct aid messages that have the same
nucleus noun. Building M2 follows the construc-
tion method of M1, except that: (1) we used up
to 30 distinct problem nuclei for each noun; (2)
for each problem report we attached only one ran-
domly picked aid message.
In creating the test data T2, we followed the
construction method used for M2 to assess the
performance of our proposal with a large variety
of problems. M1, M2 and T2 consist of 3,000,
6,000 and 1,000 samples, respectively. The an-
notation was done by majority vote of three hu-
man annotators (other than the authors), the aver-
age Fleiss? kappa-score for training and test data
was 0.63 (substantial agreement).
We trained the problem-aid match recognizers
of Table 5 with M1 and M2. The evaluation
results performed on T2 are shown in Table 6.
We can observe that, among the nuclei related
features, the trouble expression (TR) and excita-
tion polarity (EX) features and their combination
(TR&EX) contribute most to the performance, al-
though the contribution of nuclei related features
is less in comparison to the problem report and aid
message recognition. The improvement in preci-
sion when using TR&EX is marginally significant
(p = 0.056). Instead, morphological and syntactic
analysis (MSA) and semantic word class (SWC)
features greatly improved performance.
As the final experiments, we evaluated top-
ranking matches of our problem-aid match recog-
nizer, where the recognizer classified all the possi-
ble combinations of tweet-nuclei pairs taken from
55 million tweets. In addition, we assessed the ef-
fectiveness of excitation polarities and trouble ex-
pressions by comparing all positive matches pro-
duced by our full problem-aid match recognizer
(PROPOSED) and those produced by the problem-
aid match recognizer (PROPOSED-TR&EX) that
PROPOSED: Our proposed method with all features used.
PROPOSED-*: The proposed method without the feature set de-
noted by ?*?. Here also EX and TR denote all excitation
polarity and trouble expression related features, respec-
tively, including their combinations (TREX1 and TREX2).
RULE-BASED: The method that judges only problem-aid nuclei
combinations with opposite excitation polarities as proper
matches.
Table 5: Evaluated problem-aid match recogniz-
ers.
Matching system R (%) P (%) F (%) aP (%)
PROPOSED 30.67 70.42 42.92 55.16
PROPOSED-TR&EX 28.83 67.14 40.33 53.99
PROPOSED-EX 31.29 67.11 42.68 54.19
PROPOSED-TR 30.56 69.33 42.42 54.85
PROPOSED-MSA 13.50 53.66 21.57 44.52
PROPOSED-SWC 26.99 67.69 38.59 52.23
PROPOSED-WSP 30.61 69.51 42.50 54.81
PROPOSED-CTP 30.06 70.00 42.05 54.94
PROPOSED-SIM 29.95 70.11 41.97 54.98
PROPOSED-REQ 30.58 70.25 42.61 54.67
PROPOSED-GL 30.61 70.31 42.65 55.02
PROPOSED-SSR 30.67 69.44 42.72 54.91
RULE-BASED 15.33 17.36 16.28 n/a
Table 6: Recall (R), precision (P), F-score (F) and
average precision (aP) of the problem-aid match
recognizers.
did not use excitation polarities and trouble ex-
pressions in its feature set. Note that PROPOSED-
TR&EX was fed by the problem report and aid
message recognizers that didn?t use excitation po-
larities and trouble expressions. For both systems?
training data we used R for the problem report
and aid message recognizers; M1 and M2 for the
problem-aid matching recognizers.
PROPOSED and PROPOSED-TR&EX output 15.2
million and 13.4 million positive matches, cover-
ing 1,691 and 1,442 nucleus nouns, respectively.
Table 7 shows match samples identified with PRO-
POSED. We observed that the output of each sys-
tem was dominated by just a handful of frequent
nucleus nouns, such as ?water? or ?gasoline?. We
preferred to assess the performance of our system
against a large variation of problem-aid nuclei,
thus we restricted the number of matches to 10
for each noun10. After this restriction the number
of matches found by PROPOSED and PROPOSED-
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  1000  2000  3000  4000  5000  6000  7000  8000  9000
Pre
cisi
on
Rank
PROPOSED (unseen)PROPOSED-TR&EX (unseen)PROPOSED (all)PROPOSED-TR&EX (all)
Figure 3: Problem-aid match recognition perfor-
mance for ?all? and ?unseen? problem reports.
10Note that this setting is a pessimistic estimation of our
system?s overall performance, since according to our obser-
vations problem reports with very frequent nucleus nouns had
proper matches with a higher accuracy than problem reports
with less frequent nucleus nouns.
1626
Problem report: ???????????????????
??????????????????????????
??????????????????????????
(Starting from the 17th, the Iwaki Joban Hospital, the Iwaki
Urology Clinique, the Takebayashi Sadakichi Memorial Clin-
ique and the Izumi Central Clinique have all suspended dial-
ysis sessions. Patients are advised to urgently make contact.)
Aid message: ???????????????????
??????????????????????????
(Restart of dialysis sessions: short dialysis sessions are
available at the Iwaki Urology Clinique between 9 AM and
4 PM.)
Problem report: ??????????????????
?????????????????????????
?????????????????????????
?????
(Please spread this message. According to my father in
Sendai, there are more and more people whose phones ran
out of battery. We need phone chargers!)
Aid message: ???????????????????
???????????
([Please spread] At the City Hall of Wakabayashi-ku, Sendai,
you can recharge your phone battery.)
Table 7: Examples from the output of the proposed
method in the ?all? setting. Problem report and aid
message nuclei are boldfaced in the English trans-
lations.
TR&EX was 8,484 and 7,363, respectively.
The performance of PROPOSED and
PROPOSED-TR&EX were assessed in two
settings: ?all? and ?unseen?. For ?all?, we selected
400 problem-aid matches from the outputs of the
respective systems after applying the 10-match
restriction. For ?unseen?, first we removed the
samples from the systems? outputs if either the
nucleus noun or template pair appear in the nuclei
of the problem-aid match recognizers? training
data. Next we applied the same sampling process
as with ?all?. Three annotators (other than the
authors) manually labeled the sample sets, final
judgment being made by majority vote. The
Fleiss? kappa score for all test data was 0.73
(substantial agreement).
Figure 3 shows the systems? precision curves,
drawn from the samples whose X-axis positions
represent the ranks according to SVM scores. In
both scenarios we can confirm that excitation po-
larity and trouble expression related features con-
tribute to this task. In the ?all? setting in terms
of average precision calculated over the top 7,200
matches, PROPOSED?s 62.36% is 10.48 points
higher than that of PROPOSED-TR&EX. For un-
seen problem/aid nuclei PROPOSED method?s av-
erage precision of 58.57% calculated at the top
3,800 matches is 5.47 points higher than that of
PROPOSED-TR&EX at the same data point. The
improvement in precision when using TR&EX is
statistically significant in both settings (p < 0.01).
6 Related Work
Twitter has been observed as a platform for situ-
ational awareness during various crisis situations
(Starbird et al, 2010; Vieweg et al, 2010), as sen-
sors for an earthquake reporting system (Sakaki et
al., 2010; Okazaki and Matsuo, 2010) or to de-
tect epidemics (Aramaki et al, 2011). Besides
Twitter, blogs or forums have also been the tar-
get of community response analysis (Qu et al,
2009; Torrey et al, 2007). Similar to our work
are the ones of Neubig et al (2011) and Ishino et
al. (2012), who tackle specific problems that occur
during disasters (i.e., safety information and trans-
portation information, respectively); and Munro
(2011), who extracted ?actionable messages? (re-
quests and aids, indiscriminately), matching being
performed manually. Our work differs from (Neu-
big et al, 2011) and (Ishino et al, 2012) in that we
do not restrict the range of problem reports, and as
opposed to (Munro, 2011), matching is automatic.
Systems such as that of Seki (2011)11 or Munro
(2013)12 are successful examples of crisis crowd-
sourcing, but these require extensive human inter-
vention to coordinate useful information.
Another category of related work relevant to our
task is troubleshooting. Baldwin et al (2007) and
Raghavan et al (2010) use discussion forums to
solve technical problems using supervised learn-
ing methods, but these approaches presume that
the solution of a specific problem is within the
same thread. In our work we do not employ struc-
tural characteristics of tweets as restrictions (e.g.,
a problem report and its aid message need to be in
the same tweet chain).
7 Conclusions
In this paper, we proposed a method to dis-
cover matches between problem reports and aid
messages from tweets in large-scale disasters.
Through a series of experiments, we demonstrated
that the performance of the problem-aid match-
ing can be improved with the usage of seman-
tic orientation of excitation polarities, proposed in
(Hashimoto et al, 2012), and trouble expressions.
We are planning to deploy our system and re-
lease model files of the classifiers to assist relief
efforts in future crisis scenarios.
11http://www.sinsai.info/
12http://www.mission4636.org/
1627
References
Adam Acar and Yuya Muraki. 2011. Twitter for cri-
sis communication: Lessons learned from Japan?s
tsunami disaster. International Journal of Web
Based Communities, 7(3):392?402.
Eiji Aramaki, Sachiko Maskawa, and Mizuki Morita.
2011. Twitter catches the flu: Detecting influenza
epidemics using Twitter. In Proceedings of the Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP 2011), pages 1568?1576.
Timothy Baldwin, David Martinez, and Richard B.
Penman. 2007. Automatic thread classification for
Linux user forum information access. In Proceed-
ings of the 12th Australasian Document Computing
Symposium (ADCS 2007), pages 72?79.
Stijn De Saeger, Kentaro Torisawa, and Jun?ichi
Kazama. 2008. Looking for trouble. In Proceed-
ings of the 22nd International Conference on Com-
putational Linguistics (COLING 2008), pages 185?
192.
Stijn De Saeger, Kentaro Torisawa, Masaaki Tsuchida,
Jun?ichi Kazama, Chikara Hashimoto, Ichiro Ya-
mada, Jong-Hoon Oh, Istva?n Varga, and Yulan Yan.
2011. Relation acquisition using word classes and
partial patterns. In Proceedings of the Conference
on Empirical Methods in Natural Language Pro-
cessing (EMNLP 2011), pages 825?835.
Joseph L. Fleiss. 1971. Measuring nominal scale
agreement among many raters. Psychological Bul-
letin, 5:378?382.
Chikara Hashimoto, Kentaro Torisawa, Stijn
De Saeger, Jong-Hoon Oh, and Jun?ichi Kazama.
2012. Excitatory or inhibitory: A new semantic
orientation extracts contradiction and causality from
the web. In Proceedings of the 2012 Joint Confer-
ence on Empirical Methods in Natural Language
Processing and Computational Natural Language
Learning (EMNLP-CoNLL 2012), pages 619?630.
Aya Ishino, Shuhei Odawara, Hidetsugu Nanba, and
Toshiyuki Takezawa. 2012. Extracting transporta-
tion information and traffic problems from tweets
during a disaster: Where do you evacuate to? In
Proceedings of the Second International Conference
on Advances in Information Mining and Manage-
ment (IMMM 2012), pages 91?96.
Hiroshi Kanayama and Tetsuya Nasukawa. 2008. Tex-
tual demand analysis: Detection of users? wants and
needs from opinions. In Proceedings of the 22nd In-
ternational Conference on Computational Linguis-
tics (COLING 2008), pages 409?416.
Jun?ichi Kazama and Kentaro Torisawa. 2008. Induc-
ing gazetteers for named entity recognition by large-
scale clustering of dependency relations. In Pro-
ceedings of the 46th Annual Meeting of the Associ-
ation for Computational Linguistics: Human Lan-
guage Technologies (ACL-08: HLT), pages 407?
415.
Jun?ichi Kazama, Stijn De Saeger, Kow Kuroda,
Masaki Murata, and Kentaro Torisawa. 2010. A
Bayesian method for robust estimation of distribu-
tional similarities. In Proceedings of the 48th An-
nual Meeting of the Association for Computational
Linguistics (ACL 2010), pages 247?256.
Jun?ichi Kazama, Stijn De Saeger, Kentaro Torisawa,
Jun Goto, and Istva?n Varga. 2013. Saigaiji jouhou
e no shitsumon outo shisutemu no tekiyou no koko-
romi. (An attempt for applying question-answering
system on disaster related information). In Pro-
ceeding of the Nineteenth Annual Meeting of The
Association for Natural Language Processing. (in
Japanese).
Benjamin Mandel, Aron Culotta, John Boulahanis,
Danielle Stark, Bonnie Lewis, and Jeremy Rodrigue.
2012. A demographic analysis of online sentiment
during Hurricane Irene. In Proceedings of the Sec-
ond Workshop on Language Analysis in Social Me-
dia (LASM 2012), pages 27?36.
Robert Munro. 2011. Subword and spatiotempo-
ral models for identifying actionable information in
Haitian Kreyol. In Proceedings of the Fifteenth
Conference on Computational Natural Language
Learning (CoNLL-2011), pages 68?77.
Robert Munro. 2013. Crowdsourcing and the
crisis-affected community. Information Retrieval,
16(2):210?266.
Tetsuji Nakagawa, Kentaro Inui, and Sadao Kurohashi.
2010. Dependency tree-based sentiment classifica-
tion using CRFs with hidden variables. In Human
Language Technologies: The 2010 Annual Confer-
ence of the North American Chapter of the Associ-
ation for Computational Linguistics (NAACL HLT
2010), pages 786?794.
National Police Agency of Japan. 2013. Damage sit-
uation and public countermeasures associated with
2011 Tohoku district ? off the Pacific Ocean Earth-
quake. http://www.npa.go.jp/archive/
keibi/biki/higaijokyo_e.pdf. (accessed
on 30 April, 2013).
Graham Neubig, Yuichiroh Matsubayashi, Masato
Hagiwara, and Koji Murakami. 2011. Safety infor-
mation mining? what can NLP do in a disaster?.
In Proceedings of the 5th International Joint Con-
ference on Natural Language Processing (IJCNLP
2011), pages 965?973.
Jong-Hoon Oh, Kentaro Torisawa, Chikara Hashimoto,
Takuya Kawada, Stijn De Saeger, Jun?ichi Kazama,
and Yiou Wang. 2012. Why question answering
using sentiment analysis and word classes. In Pro-
ceedings of the 2012 Joint Conference on Empirical
Methods in Natural Language Processing and Com-
putational Natural Language Learning (EMNLP-
CoNLL 2012), pages 368?378.
1628
Jong-Hoon Oh, Kentaro Torisawa, Chikara Hashimoto,
Motoki Sano, Stijn De Saeger, and Kiyonori Ohtake.
2013. Why-question answering using intra- and
inter-sentential causal relations. In Proceedings of
the 51st Annual Meeting of the Association for Com-
putational Linguistics (ACL 2013).
Kiyonori Ohtake, Kentaro Torisawa, Jun Goto, and
Stijn De Saeger. 2013. Saigaiji ni okeru hi-
saisha to kyuuen kyuujosha kan no souhoko komyu-
nikeeshon. (Bi-directional communication between
victims and rescures during a crisis). In Proceeding
of the Nineteenth Annual Meeting of The Association
for Natural Language Processing. (in Japanese).
Makoto Okazaki and Yutaka Matsuo. 2010. Seman-
tic Twitter: Analyzing tweets for real-time event
notification. In Proceedings of the 2008/2009 in-
ternational conference on Social software: Re-
cent trends and developments in social software
(BlogTalk 2008), pages 63?74.
R. Lyman Ott and Michael T. Longnecker, 2010. An
Introduction to Statistical Methods and Data Analy-
sis, chapter 10.2. Brooks Cole, 6th edition.
Yan Qu, Philip Fei Wu, and Xiaoqing Wang. 2009.
Online community response to major disaster: A
study of Tianya forum in the 2008 Sichuan Earth-
quake. In 42st Hawaii International International
Conference on Systems Science (HICSS-42), pages
1?11.
Preethi Raghavan, Rose Catherine, Shajith Ikbal,
Nanda Kambhatla, and Debapriyo Majumdar. 2010.
Extracting problem and resolution information from
online discussion forums. In Proceedings of the
16th International Conference on Management of
Data (COMAD 2010).
Takeo Saijo. 2012. Hito-o tasukeru sungoi shikumi. (A
stunning system that saves people). Diamond Inc.
(in Japanese).
Takeshi Sakaki, Makoto Okazaki, and Yutaka Matsuo.
2010. Earthquake shakes Twitter users: Real-time
event detection by social sensors. In Proceedings
of the 19th International Conference on World Wide
Web (WWW 2010), pages 851?860.
Motoki Sano, Istva?n Varga, Jun?ichi Kazama, and Ken-
taro Torisawa. 2012. Requests in tweets dur-
ing a crisis: A systemic functional analysis of
tweets on the Great East Japan Earthquake and
the Fukushima Daiichi nuclear disaster. In Pa-
pers from the 39th International Systemic Func-
tional Congress (ISFC39), pages 135?140.
Haruyuki Seki. 2011. Higashi-nihon daishinsai fukkou
shien platform sinsai.info no naritachi to kongo no
kadai. (The organizational structure of sinsai.info
restoration support platform for the 2011 Great East
Japan Earthquake and future challenges). Journal of
digital practices, 2(4):237?241. (in Japanese).
Kate Starbird, Leysia Palen, Amanda L. Hughes, and
Sarah Vieweg. 2010. Chatter on the red: What
hazards threat reveals about the social life of mi-
croblogged information. In Proceedings of The
2010 ACM Conference on Computer Supported Co-
operative Work (CSCW 2010), pages 241?250.
Cristen Torrey, Moira Burke, Matthew L. Lee,
Anind K. Dey, Susan R. Fussell, and Sara B. Kiesler.
2007. Connected giving: Ordinary people coordi-
nating disaster relief on the Internet. In Proceedings
of the 40th Annual Hawaii International Conference
on System Sciences (HICSS-40), pages 179?188.
Katerina Tsagkalidou, Vassiliki Koutsonikola, Athena
Vakali, and Konstantinos Kafetsios. 2011. Emo-
tional aware clustering on micro-blogging sources.
In Proceedings of the 4th international conference
on Affective computing and intelligent interaction
(ACII 2011), pages 387?396.
Sarah Vieweg, Amanda L. Hughes, Kate Starbird, and
Leysia Palen. 2010. Microblogging during two nat-
ural hazards events: What Twitter may contribute
to situational awareness. In Proceedings of the
SIGCHI Conference on Human Factors in Comput-
ing Systems (CHI 2010), pages 1079?1088.
Patrick Winn. 2011. Japan tsunami disaster: As Japan
scrambles, Twitter reigns. GlobalPost, 18 March.
1629
Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 1733?1743,
Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics
Why-Question Answering
using Intra- and Inter-Sentential Causal Relations
Jong-Hoon Oh? Kentaro Torisawa? Chikara Hashimoto ? Motoki Sano?
Stijn De Saeger? Kiyonori Ohtake?
Information Analysis Laboratory
Universal Communication Research Institute
National Institute of Information and Communications Technology (NICT)
{?rovellia,? torisawa,? ch,? msano,?stijn,?kiyonori.ohtake}@nict.go.jp
Abstract
In this paper, we explore the utility of
intra- and inter-sentential causal relations
between terms or clauses as evidence for
answering why-questions. To the best of
our knowledge, this is the first work that
uses both intra- and inter-sentential causal
relations for why-QA. We also propose
a method for assessing the appropriate-
ness of causal relations as answers to a
given question using the semantic orienta-
tion of excitation proposed by Hashimoto
et al (2012). By applying these ideas
to Japanese why-QA, we improved preci-
sion by 4.4% against all the questions in
our test set over the current state-of-the-
art system for Japanese why-QA. In addi-
tion, unlike the state-of-the-art system, our
system could achieve very high precision
(83.2%) for 25% of all the questions in the
test set by restricting its output to the con-
fident answers only.
1 Introduction
?Why-question answering? (why-QA) is a task to
retrieve answers from a given text archive for a
why-question, such as ?Why are tsunamis gen-
erated?? The answers are usually text fragments
consisting of one or more sentences. Although
much research exists on this task (Girju, 2003;
Higashinaka and Isozaki, 2008; Verberne et al,
2008; Verberne et al, 2011; Oh et al, 2012), its
performance remains much lower than that of the
state-of-the-art factoid QA systems, such as IBM?s
Watson (Ferrucci et al, 2010).
In this work, we propose a quite straightfor-
ward but novel approach for such difficult why-
QA task. Consider the sentence A1 in Table 1,
which represents the causal relation between the
cause, ?the ocean?s water mass ..., waves are gen-
A1 [Tsunamis that can cause large coastal inundation
are generated]effect because [the ocean?s water
mass is displaced and, much like throwing a stone
into a pond, waves are generated.]cause
A2 [Earthquake causes seismic waves which set up
the water in motion with a large force.]cause
This causes [a tsunami.]effect
A3 [Tsunamis]effect are caused by [the sudden dis-
placement of huge volumes of water.]cause
A4 [Tsunamis weaken as they pass through
forests]effect because [the hydraulic resistance of
the trees diminish their energy.]cause
A5 [Automakers in Japan suspended production for an
array of vehicles]effect because [the magnitude 9
earthquake and tsunami hit their country on Friday,
March 11, 2011.]cause
Table 1: Examples of intra/inter-sentential causal
relations. Cause and effect parts of each causal re-
lation, marked with [..]cause and [..]effect, are con-
nected by the underlined cue phrases for causality,
such as because, this causes, and are caused by.
erated,? and its effect, ?Tsunamis ... are gener-
ated.? This is a good answer to the question, ?Why
are tsunamis generated??, since the effect part is
more or less equivalent to the (propositional) con-
tent of the question. Our method finds text frag-
ments that include such causal relations with an
effect part that resembles a given question and pro-
vides them as answers.
Since this idea looks quite intuitive, many peo-
ple would probably consider it as a solution to
why-QA. However, to our surprise, we could not
find any previous work on why-QA that took this
approach. Some methods utilized the causal re-
lations between terms as evidence for finding an-
swers (i.e., matching a cause term with an answer
text and its effect term with a question) (Girju,
2003; Higashinaka and Isozaki, 2008). Other ap-
proaches utilized such clue terms for causality as
?because? as evidence for finding answers (Mu-
rata et al, 2007). However, these algorithms did
not check whether an answer candidate, i.e., a text
fragment that may be provided as an answer, ex-
plicitly contains a complex causal relation sen-
1733
tence with the effect part that resembles a ques-
tion. For example, A5 in Table 1 is an incorrect an-
swer to ?Why are tsunamis generated??, but these
previous approaches would probably choose it as a
proper answer due to ?because? and ?earthquake?
(i.e., a cause of tsunamis). At least in our exper-
imental setting, our approach outperformed these
simpler causality-based QA systems.
Perhaps this approach was previously deemed
infeasible due to two non-trivial technical chal-
lenges. The first challenge is to accurately iden-
tify a wide range of causal relations like those in
Table 1 in answer candidates. To meet this chal-
lenge, we developed a sequence labeling method
that identifies not only intra-sentential causal re-
lations, i.e., the causal relations between two
terms/phrases/clauses expressed in a single sen-
tence (e.g., A1 in Table 1), but also the inter-
sentential causal relations, which are the causal
relations between two terms/phrases/clauses ex-
pressed in two adjacent sentences (e.g., A2) in a
given text fragment.
The second challenge is assessing the appropri-
ateness of each identified causal relation as an an-
swer to a given question. This is important since
the causal relations identified in the answer candi-
dates may have nothing to do with a given ques-
tion. In this case, we have to reject these causal
relations because they are inappropriate as an an-
swer to the question. When a single answer candi-
date contains many causal relations, we also have
to select the appropriate ones. Consider the causal
relations in A1?A4. Those in A1?A3 are appro-
priate answers to ?Why are tsunamis generated??,
but not the one in A4. To assess the appropri-
ateness, the system must recognize textual entail-
ment, i.e., ?tsunamis (are) generated? in the ques-
tion is entailed by all ?tsunamis are generated? in
A1, ?cause a tsunami? in A2 and ?tsunamis are
caused? in A3 but not by ?tsunamis weaken? in
A4. This quite difficult task is currently being
studied by many researchers in the RTE field (An-
droutsopoulos and Malakasiotis, 2010; Dagan et
al., 2010; Shima et al, 2011; Bentivogli et al,
2011). To meet this challenge, we developed a
relatively simple method that can be seen as a
lightweight approximation for this difficult RTE
task, using excitation polarities (Hashimoto et al,
2012).
Through our experiments on Japanese why-QA,
we show that a combination of the above methods
can improve why-QA accuracy. In addition, our
proposed method can be successfully combined
with other approaches to why-QA and can con-
tribute to higher accuracy. As a final result, we im-
proved the precision by 4.4% against all the ques-
tions in our test set over the current state-of-the-art
system of Japanese why-QA (Oh et al, 2012). The
difference in the performance became much larger
when we only compared the highly confident an-
swers of each system. When we made our sys-
tem provide only its confident answers according
to their confidence score given by our system, the
precision of these confident answers was 83.2%
for 25% of all the questions in our test set. In the
same setting, the precision of the state-of-the-art
system (Oh et al, 2012) was only 62.4%.
2 Related Work
Although there were many previous works on the
acquisition of intra- and inter-sentential causal re-
lations from texts (Khoo et al, 2000; Girju, 2003;
Inui and Okumura, 2005; Chang and Choi, 2006;
Torisawa, 2006; Blanco et al, 2008; De Saeger et
al., 2009; De Saeger et al, 2011; Riaz and Girju,
2010; Do et al, 2011; Radinsky et al, 2012), their
application to why-QA was limited to causal re-
lations between terms (Girju, 2003; Higashinaka
and Isozaki, 2008).
As previous attempts to improve why-QA per-
formance, such semantic knowledge as Word-
Net synsets (Verberne et al, 2011), semantic
word classes (Oh et al, 2012), sentiment analy-
sis (Oh et al, 2012), and causal relations between
terms (Girju, 2003; Higashinaka and Isozaki,
2008) has been used. These previous studies took
basically bag-of-words approaches and used the
semantic knowledge to identify certain seman-
tic associations using terms and n-grams. On
the other hand, our method explicitly identifies
intra- and inter-sentential causal relations between
terms/phrases/clauses that have complex struc-
tures and uses the identified relations to answer
a why-question. In other words, our method
considers more complex linguistic structures than
those used in the previous studies. Note that our
method can complement the previous approaches.
Through our experiments, we showed that it is
possible to achieve a higher precision by combin-
ing our proposed method with bag-of-words ap-
proaches considering semantic word classes and
sentiment analysis in our previous work (Oh et al,
1734
Document	 ?retrieval	 ?from	 ?Japanese	 ?web	 ?texts	 ?
Answer	 ?candidate	 ?extrac?on	
Answer	 ?candidate	 ?extrac?on	 ?	 ?from	 ?the	 ?retrieved	 ?documents	 ?
Answer	 ?re-??ranker	 ?
Answer	 ?re-??ranking	
top-n answer	 ?candidates	 ?by	 ?answer	 ?re-??ranking	 ?
Training	 ?data	 ?for	 ?answer	 ?re-??ranking	 ?
Training	 ?data	 ?for	 ?causal	 ?rela?on	 ?recogni?on	 ?
Causal	 ?rela?on	 ?recogni?on	 ?model	 ?top-n answer	 ?candidates	 ?
training	 ?
training	 ?
Why-??ques?on	 ?
recogni?on	 ?	 ?
recogni?on	 ?	 ?
Figure 1: System architecture
2012).
3 System Architecture
We first describe the system architecture of
our QA system before describing our proposed
method. It is composed of two components: an-
swer candidate extraction and answer re-ranking
(Fig. 1). This architecture is basically the same as
that used in our previous work (Oh et al, 2012).
We extended our previous work by introducing
causal relations recognized from answer candi-
dates to the answer re-ranking. The features used
in our previous work are very different from those
in this work, and we found that combining both
improves accuracy.
Answer candidate extraction: In our previous
work, we implemented the method of Murata et
al. (2007) for our answer candidate extractor. We
retrieved documents from Japanese web texts us-
ing Boolean AND and OR queries generated from
the content words in why-questions. Then we ex-
tracted passages of five sentences from these re-
trieved documents and ranked them with the rank-
ing function proposed by Murata et al (2007).
This method ranks a passage higher when it con-
tains more query terms that are closer to each other
in the passage. We used a set of clue terms, includ-
ing the Japanese counterparts of cause and reason,
as query terms for the ranking. The top ranked
passages are regarded as answer candidates in the
answer re-ranking. See Murata et al (2007) for
more details.
Answer re-ranking: Re-ranking the answer
candidates is done by a supervised classifier
(SVMs) (Vapnik, 1995). In our previous work, we
employed three types of features for training the
re-ranker: morphosyntactic features (n-grams of
morphemes and syntactic dependency chains), se-
mantic word class features (semantic word classes
obtained by automatic word clustering (Kazama
and Torisawa, 2008)) and sentiment polarity fea-
tures (word and phrase polarities). Here, we used
semantic word classes and sentiment polarities for
identifying such semantic associations between a
why-question and its answer as ?if a disease?s
name appears in a question, then answers that in-
clude nutrient names are more likely to be correct?
by semantic word classes and ?if something un-
desirable happens, the reason is often also some-
thing undesirable? by sentiment polarities. In this
work, we propose causal relation features gener-
ated from intra- and inter-sentential causal rela-
tions in answer candidates and use them along
with the features proposed in our previous work
for training our re-ranker.
4 Causal Relations for Why-QA
We describe causal relation recognition in Sec-
tion 4.1 and describe the features (of our re-ranker)
generated from causal relations in Section 4.2.
4.1 Causal Relation Recognition
We restrict causal relations to those expressed by
such cue phrases for causality as (the Japanese
counterparts of) because and as a result like in
the previous work (Khoo et al, 2000; Inui and
Okumura, 2005) and recognize them in the fol-
lowing two steps: extracting causal relation candi-
dates and recognizing causal relations from these
candidates.
4.1.1 Extracting Causal Relation Candidates
We identify cue phrases for causality in answer
candidates using the regular expressions in Ta-
ble 2. Then, for each identified cue phrase, we
extract three sentences as a causal relation candi-
date, where one contains the cue phrase and the
other two are the previous and next sentences in
the answer candidates. When there is more than
one cue phrase in an answer candidate, we use
all of them for extracting the causal relation can-
didates, assuming that each of the cue phrases is
linked to different causal relations. We call a cue
phrase used for extracting a causal relation candi-
date a c-marker (causality marker) of the candi-
date to distinguish it from the other cue phrases in
the same causal relation candidate.
1735
Regular expressions Examples
(D|?)? ?? P? ?? (for),??? (for),????
(as a result),???? (for)
?? ?? (since or because of)
?? (??|?) ???? (from the fact that),??
? (by the fact that)
(??|??) C ??? (because),??? (It is be-
cause)
D? RCT (P|C)+ ??? (the reason is), ???
(is the cause),?????? (from
this reason)
Table 2: Regular expressions for identifying cue
phrases for causality. D, P and C represent
demonstratives (e.g., ?? (this) and ?? (that)),
postpositions (including case markers such as ?
(nominative), ? (genitive)), and copula (e.g., ?
? (is) and ??? (is)) in Japanese, respectively.
RCT, which represents Japanese terms meaning
reason, cause, or thanks to, is defined as fol-
lows: RCT = {?? (reason), ?? (cause), ?
? (cause), ??? (cause), ??? (thanks to),
?? (thanks to),?? (reason) }.
4.1.2 Recognizing Causal Relations
Next, we recognize the spans of the cause and ef-
fect parts of a causal relation linked to a c-marker.
We regard this task as a sequence labeling problem
and use Conditional Random Fields (CRFs) (Laf-
ferty et al, 2001) as a machine learning frame-
work. In our task, CRFs take three sentences
of a causal relation candidate as input and gen-
erate their cause-effect annotations with a set of
possible cause-effect IOB labels, including Begin-
Cause (B-C), Inside-Cause (I-C), Begin-Effect (B-
E), Inside-Effect (I-E), and Outside (O). Fig 2
shows an example of such sequence labeling. Al-
though this example is about sequential labeling
shown on English sentences for ease of explana-
tion, it was actually done on Japanese sentences.
We used the three types of feature sets in Table 3
for training the CRFs, where j is in the range of
i? 4 ? j ? i+4 for current position i in a causal
relation candidate.
Type Features
Morphological feature mj , mj+1j , posj , posj+1j
Syntactic feature sj , sj+1j , bj , bj+1j
C-marker feature (mj , cm), (mj+1j , cm)
(sj , cm), (sj+1j , cm)
Table 3: Features for training CRFs, where
xj+1j = xjxj+1
Morphological features: mj and posj in Ta-
ble 3 represent the jth morpheme and the POS tag.
S1:	 ?Earthquake	 ?causes	 ?seismic	 ?waves	 ?which	 ?set	 ?up	 ?the	 ?water	 ?in	 ?mo?on	 ?with	 ?a	 ?large	 ?force.	 ?EOS	 ?S2:	 ?This	 ?causes	 ?a	 ?tsunami.	 ?EOS	 ?S3:	 ?EOA	 ?
S1	 ? Earthquake	 ? causes	 ? ?	 ? with	 ? a	 ? large	 ? force	 ? .	 ? EOS	 ?IOB	 ? B-??C	 ? I-??C	 ? I-??C	 ? I-??C	 ? I-??C	 ? I-??C	 ? I-??C	 ? I-??C	 ? O	 ?S2	 ? This	 ? causes	 ? a	 ? tsunami	 ? .	 ? EOS	 ?IOB	 ? O	 ? O	 ? B-??E	 ? I-??E	 ? I-??E	 ? O	 ?S3	 ? EOA	 ?IOB	 ? O	 ?
CRFs	 ?
A	 ?causal	 ?rela?on	 ?candidate	 ?from	 ?A2	 ?
Figure 2: Recognizing causal relations by se-
quence labeling: Underlined text This causes rep-
resents a c-marker, and EOS and EOA represent
end-of-sentence and end-of-answer candidates.
??	 ? ??	 ? ???	 ? ???	 ? ???????	 ? ???	 ? ??	 ? ????????	 ?
water	 ? ice	 ? if	 ?(it)	 ?becomes	 ? its	 ?volume	 ? because	 ?(it)	 ?	 ?increases	 ? an	 ?iceberg	 ? water	 ? float	 ?on	 ?(water)	 ?
Subtree	 ?informa?on	 ?used	 ?for	 ?syntac?c	 ?features	 ?	 ?
subtree	 ? subtree	 ? child	 ? child	 ? c-??marker	 ? subtree-??of-??parent	 ?
subtree-??of-??parent	 ?
parent	 ?
???????	 ?
???	 ?
[??????????????]cause???[?????????????]effect	 ?(Because	 ?[the	 ?volume	 ?of	 ?the	 ?water	 ?increases	 ?if	 ?it	 ?becomes	 ?ice]cause,	 ?[an	 ?iceberg	 ?floats	 ?on	 ?water]effect.)	 ?
????????	 ?
root	 ?
c-??marker	 ?node	 ?
Figure 3: Example of syntactic information related
to a c-marker used for syntactic features
We use JUMAN1, a Japanese morphological ana-
lyzer, for generating our morphological features.
Syntactic features: The span of the causal rela-
tions in a given causal relation candidate strongly
depends on the c-marker in the candidate. Es-
pecially for intra-sentential causal relations, their
cause and effect parts often appear in the subtrees
of the c-marker?s node or those of the c-marker?s
parent node in a syntactic dependency tree struc-
ture. Fig. 3 shows an example that follows this ob-
servation, where the c-marker node is represented
in a hexagon and the other nodes are in a rectan-
gle. Note that each node in Fig. 3 is a word phrase
(called a bunsetsu), which is the smallest unit of
syntactic analysis in Japanese. A bunsetsu is a
syntactic constituent composed of a content word
and several function words such as postpositions
and case markers. Syntactic dependency is repre-
sented by an arrow in Fig. 3. For example, there
is syntactic dependency from word phrase ??
1 http://nlp.ist.i.kyoto-u.ac.jp/EN/index.php?JUMAN
1736
(water) to??? (if (it) becomes), i.e.,?? dep???
???. We encode this subtree information into
sj , which is the syntactic information of a word
phrase to which the jth morpheme belongs. sj
only has one of six values: 1) the c-marker?s node
(c-marker), 2) the c-marker?s child node (child),
3) the c-marker?s parent node (parent), 4) in the c-
marker?s subtree but not the c-marker?s child node
(subtree), 5) in the subtree of the c-marker?s par-
ent node but not the c-marker?s node (subtree-of-
parent) and 6) the others (others). bj is the word
phrase information of the jth morpheme (mj) that
represents whether mj is in the beginning or in-
side a word phrase. For generating our syntactic
features, we use KNP2, a Japanese syntactic de-
pendency parser.
C-marker features: As our c-marker features,
we use a pair composed of c-marker cm and one
of the following: mj , mj+1j , sj , or sj+1j .
4.2 Causal Relation Features
We use terms, partial trees (in a syntactic depen-
dency tree structure), and the semantic orienta-
tion of excitation (Hashimoto et al, 2012) to as-
sess the appropriateness of each causal relation ob-
tained by our causal relation recognizer as an an-
swer to a given question. Finding answers with
term matching and partial tree matching has been
used in the literature of question answering (Girju,
2003; Narayanan and Harabagiu, 2004; Moschitti
et al, 2007; Higashinaka and Isozaki, 2008; Ver-
berne et al, 2008; Surdeanu et al, 2011; Verberne
et al, 2011; Oh et al, 2012), while that with the
excitation polarity is proposed in this work.
We use three types of features. Each fea-
ture type expresses the causal relations in an an-
swer candidate that are determined to be appro-
priate as answers to a given question by term
matching (tf1?tf4), partial tree matching (pf1?
pf4) and excitation polarity matching (ef1?ef4).
We call these causal relations used for generating
our causal relation features candidates of an ap-
propriate causal relation in this section. Note that
if one answer candidate has more than one candi-
date of an appropriate causal relation found by one
matching method, we generated features for each
appropriate candidate and merged all of them for
the answer candidate.
2 http://nlp.ist.i.kyoto-u.ac.jp/EN/index.php?KNP
Type Description
tf1 word n-grams of causal relations
tf2 word class version of tf1
tf3 indicator for the existence of candidates of an
appropriate causal relation identified by term
matching in an answer candidate
tf4 number of matched terms in candidates of an ap-
propriate causal relation
pf1 syntactic dependency n-grams (n dependency
chain) of causal relations
pf2 word class version of pf1
pf3 indicator for the existence of candidates of an ap-
propriate causal relation identified by partial tree
matching in an answer candidate
pf4 number of matched partial trees in candidates of
an appropriate causal relation
ef1 types of noun-polarity pairs shared by causal re-
lations and the question
ef2 ef1 coupled with each noun?s word class
ef3 indicator for the existence of candidates of an ap-
propriate causal relation identified by excitation
polarity matching in an answer candidate
ef4 number of noun-polarity pairs shared by the
question and the candidates of an appropriate
causal relation
Table 4: Causal relation features: n in n-grams
is n = {2, 3} and n-grams in an effect part are
distinguished from those in a cause part.
4.2.1 Term Matching
Our term matching method judges that a causal re-
lation is a candidate of an appropriate causal rela-
tion if its effect part contains at least one content
word (nouns, verbs, and adjectives) in the ques-
tion. For example, all the causal relations of A1?
A4 in Table 1 are candidates of an appropriate
causal relation to the question, ?Why is a tsunami
generated??, by term matching with question term
tsunami.
tf1?tf4 are generated from candidates of an ap-
propriate causal relation identified by term match-
ing. The n-grams of tf1 and tf2 are restricted
to those containing at least one content word in
a question. We distinguish this matched word
from the other words by replacing it with QW, a
special symbol representing a word in the ques-
tion. For example, word 3-gram ?this/cause/QW?
is extracted from This causes tsunamis in A2 for
?Why is a tsunami generated?? Further, we cre-
ate a word class version of word n-grams by con-
verting the words in these word n-grams into their
corresponding word class using the semantic word
classes (500 classes for 5.5 million nouns) from
our previous work (Oh et al, 2012). These word
classes were created by applying the automatic
word clustering method of Kazama and Torisawa
(2008) to 600 million Japanese web pages. For
example, the word class version of word 3-gram
1737
?this/cause/QW? is ?this/cause/QW,WCtsunami?,
where WCtsunami represents the word class of
a tsunami. tf3 is a binary feature that indi-
cates the existence of candidates of an appropri-
ate causal relation identified by term matching in
an answer candidate. tf4 represents the degree
of the relevance of the candidates of an appro-
priate causal relation measured by the number of
matched terms: one, two, and more than two.
4.2.2 Partial Tree Matching
Our partial tree matching method judges a causal
relation as a candidate of an appropriate causal re-
lation if its effect part contains at least one par-
tial tree in a question, where the partial tree covers
more than one content word. For example, only
the causal relation A1 among A1?A4 is a can-
didate of an appropriate causal relation for ques-
tion ?Why are tsunamis generated?? by partial
tree matching because only its effect part contains
partial tree ?tsunamis dep??? (are) generated? of the
question.
pf1?pf4 are generated from candidates of an
appropriate causal relation identified by the par-
tial tree matching. The syntactic dependency n-
grams in pf1 and pf2 are restricted to those that
contain at least one content word in a question. We
distinguish this matched content word from the
other content words in the n-gram by converting
it to QW, which represents a content word in the
question. For example, syntactic dependency 2-
gram ?QW dep??? cause? and its word class version
?QW,WCtsunami dep??? cause? are extracted from
Tsunamis that can cause in A1. pf3 is a binary
feature that indicates whether an answer candidate
contains candidates of an appropriate causal rela-
tion identified by partial tree matching. pf4 rep-
resents the degree of the relevance of the candi-
date of an appropriate causal relation measured by
the number of matched partial trees: one, two, and
more than two.
4.2.3 Excitation Polarity Matching
Hashimoto et al (2012) proposed a semantic ori-
entation called excitation polarities. It classifies
predicates with their argument position (called
templates) into excitatory, inhibitory and neu-
tral. In the following, we denote a template
as ?[argument position,predicate].? According to
Hashimoto?s definition, excitatory templates im-
ply that the function, effect, purpose, or the role of
an entity filling an argument position in the tem-
plates is activated/enhanced. On the contrary, in-
hibitory templates imply that the effect, purpose
or the role of an entity is deactivated/suppressed.
Neutral templates are those that neither activate
nor suppress the function of an argument.
We assume that the meanings of a text can
be roughly captured by checking whether each
noun in the text is activated or suppressed in the
sense of the excitation polarity framework, where
the activation and suppression of each entity (or
noun) can be detected by looking at the excita-
tion polarities of the templates that are filled by
the entity. For instance, effect part ?tsunamis
that can cause large coastal inundation are gen-
erated? of A1 roughly means that ?tsunamis? are
activated and ?inundation? is (or can be) acti-
vated. This activation/suppression configuration
of the nouns is consistent with sentence ?tsunamis
are caused? in which ?tsunamis? are activated.
This consistency suggests that A1 is a good an-
swer to question ?Why are tsunamis caused??, al-
though the ?tsunamis? are modified by different
predicates; ?cause? and ?generate.? On the other
hand, effect part ?tsunamis weaken as they pass
through forests? of A4 implies that ?tsunamis?
are suppressed. This suggests that A4 is not
a good answer to ?Why are tsunamis caused??
Note that the consistency checking between ac-
tivation/suppression configurations of nouns3 in
texts can be seen as a rough but lightweight ap-
proximation of the recognition of textual entail-
ments or paraphrases.
Following the definition of excitation polarity
in Hashimoto et al (2012), we manually classi-
fied templates4 to each polarity type and obtained
8,464 excitatory templates, such as [?, ???]
([subject, increase]) and [?, ????] ([sub-
ject, improve]), 2,262 inhibitory templates, such
as [?, ??] ([object, prevent]) and [?, ??]
([subject, die]), and 7,230 neutral templates such
as [?, ???] ([object, consider]). With these
templates, we obtain activation/suppression con-
figurations (including neutral) for the nouns in the
causal relations in the answer candidates and ques-
3 Because the activation/suppression configurations of
nouns come from an excitation polarity of templates, ?[argu-
ment position,predicate],? the semantics of verbs in the tem-
plates are implicitly considered in this consistency checking.
4 Varga et al (2013) has used the same templates as ours,
except they restricted their excitation/inhibitory templates to
those whose polarity is consistent with that given by the au-
tomatic acquisition method of Hashimoto et al (2012).
1738
tions.
Next, we assume that a causal relation is ap-
propriate as an answer to a question if the effect
part of the causal relation and the question share
at least one common noun with the same polarity.
More detailed information concerning the config-
urations of all the nouns in all the candidates of an
appropriate causal relation (including their cause
parts) and the question are encoded into our fea-
ture set ef1?ef4 in Table 4 and the final judgment
is done by our re-ranker.
For generating ef1 and ef2, we classified all the
nouns coupled with activation/suppression/neutral
polarities in a causal relation into three types:
SAME (the question contains the same noun with
the same polarity), DiffPOL (the question con-
tains the same noun with different polarity), and
OTHER (the others). ef1 indicates whether each
type of noun-polarity pair exists in a causal rela-
tion. Note that the types for the effect and cause
parts are represented in distinct features. ef2 is the
same as ef1 except that the types are augmented
with the word classes of the corresponding nouns.
In other words, ef2 indicates whether each type
of noun-polarity pair exists in the causal relation
for each word class. ef3 indicates the existence of
candidates of an appropriate causal relation iden-
tified by this matching scheme, and ef4 repre-
sents the number of noun-polarity pairs shared by
the question and the candidates of an appropriate
causal relations (one, two, and more than two).
5 Experiments
We experimented with causal relation recognition
and why-QA with our causal relation features.
5.1 Data Set for Why-Question Answering
For our experiments, we used the same why-QA
data set as the one used in our previous work (Oh
et al, 2012). This why-QA data set is composed
of 850 Japanese why-questions and their top-20
answer candidates obtained by answer candidate
extraction from 600 million Japanese web pages.
Three annotators checked the top-20 answer can-
didates of these 850 questions and the final judg-
ment was made by their majority vote. Their inter-
rater agreement by Fleiss? kappa reported in Oh et
al. (2012) was substantial (? = 0.634). Among the
850 questions, 250 why-questions were extracted
from the Japanese version of Yahoo! Answers,
and another 250 were created by annotators. In
our previous work, we evaluated the system with
these 500 questions and their answer candidates as
training and test data in 10-fold cross-validation.
The other 350 why-questions were manually built
from passages describing the causes or reasons of
events/phenomena. These questions and their an-
swer candidates were used as additional training
data for testing subsamples in each fold during the
10-fold cross-validation. In our why-QA experi-
ments, we evaluated our why-QA system with the
same settings.
5.2 Data Set for Causal Relation Recognition
We built a data set composed of manually anno-
tated causal relations for evaluating our causal re-
lation recognition. As source data for this data set,
we used the same 10-fold data that we used for
evaluating our why-QA (500 questions and their
answer candidates). We extracted the causal re-
lation candidates from the answer candidates in
each fold, and then our annotator (not an author)
manually marked the span of the cause and effect
parts of a causal relation for each causal relation
candidate, keeping in mind that the causal rela-
tion must be expressed in terms of a c-marker in
a given causal relation candidate. Finally, we had
a data set made of 16,051 causal relation candi-
dates, 8,117 of which had a true causal relation;
the number of intra- and inter-sentential causal re-
lations were 7,120 and 997, respectively.
Note that this data set can be partitioned into ten
folds by using the 10-fold partition of its source
data. We performed 10-fold cross validation to
evaluate our causal relation recognition with this
10-fold data.
5.3 Causal Relation Recognition
We used CRF++5 for training our causal relation
recognizer. In our evaluation, we judged a sys-
tem?s output as correct if both spans of the cause
and effect parts overlapped those in the gold stan-
dard. Evaluation was done by precision, recall,
and F1.
Precision Recall F1
BASELINE 41.9 61.0 49.7
INTRA-SENT 84.5 75.4 79.7
INTER-SENT 80.2 52.6 63.6
ALL 83.8 71.1 77.0
Table 5: Results of causal relation recognition (%)
Table 5 shows the result. BASELINE represents
5 http://code.google.com/p/crfpp/
1739
the result for our baseline system that recognizes
a causal relation by simply taking the two phrases
adjacent to a c-marker (i.e., before and after) as
cause and effect parts of the causal relation. We
assumed that the system had an oracle for judging
correctly whether each phrase is a cause part or an
effect part. In other words, we judged that a causal
relation recognized by BASELINE is correct if both
cause and effect parts in the gold standard are adja-
cent to a c-marker. INTRA-SENT and INTER-SENT
represent the results for intra- and inter-sentential
causal relations and ALL represents the result for
the both causal relations by our method. From
these results, we confirmed that our method rec-
ognized both intra- and inter-sentential causal rela-
tions with over 80% precision, and it significantly
outperformed our baseline system in both preci-
sion and recall rates.
Precision Recall F1
ALL-?MORPH? 80.8 66.4 72.9
ALL-?SYNTACTIC? 82.9 67.0 74.1
ALL-?C-MARKER? 76.3 51.4 61.4
ALL 83.8 71.1 77.0
Table 6: Ablation test results for causal relation
recognition (%)
We also investigated the contribution of the
three types of features used in our causal rela-
tion recognition to the performance. We evalu-
ated the performance when we removed one of
the three types of features (ALL-?MORPH?, ALL-
?SYNTACTIC? and ALL-?C-MARKER?) and com-
pared the results in these settings with the one
when all the feature sets were used (ALL). Ta-
ble 6 shows the result. We confirmed that all the
feature sets improved the performance, and we got
the best performance when using all of them. We
used the causal relations obtained from the 10-fold
cross validation for our why-QA experiments.
5.4 Why-Question Answering
We performed why-QA experiments to confirm
the effectiveness of intra- and inter-sentential
causal relations in a why-QA task. In
this experiment, we compared five systems:
four baseline systems (MURATA, OURCF, OH
and OH+PREVCF) and our proposed method
(PROPOSED).
MURATA corresponds to our answer candidate
extraction.
OURCF uses a re-ranker trained with only our
causal relation features.
OH, which represents our previous work (Oh et
al., 2012), has a re-ranker trained with mor-
phosyntactic, semantic word class, and senti-
ment polarity features.
OH+PREVCF is a system with a re-ranker
trained with the features used in OH and with
the causal relation feature proposed in Hi-
gashinaka and Isozaki (2008). The causal re-
lation feature includes an indicator that deter-
mines whether the causal relations between
two terms appear in a question-answer pair;
cause in an answer and its effect in a question.
We acquired the causal relation instances (be-
tween terms) from 600 million Japanese web
pages using the method of De Saeger et al
(2009) and exploited the top-100,000 causal
relation instances in this system.
PROPOSED has a re-ranker trained with our
causal relation features as well as the three
types of features proposed in Oh et al (2012).
Comparison between OH and PROPOSED re-
veals the contribution of our causal relation
features to why-QA.
We used TinySVM6 with a linear kernel
for training the re-rankers in OURCF, OH,
OH+PREVCF and PROPOSED. Evaluation was
done by P@1 (Precision of the top-answer) and
Mean Average Precision (MAP); they are the same
measures used in Oh et al (2012). P@1 measures
how many questions have a correct top-answer
candidate. MAP measures the overall quality of
the top-20 answer candidates. As mentioned in
Section 5.1, we used 10-fold cross-validation with
the same setting as the one used in Oh et al (2012)
for our experiments.
P@1 MAP
MURATA 22.2 27.0
OURCF 27.8 31.4
OH 37.4 39.1
OH+PREVCF 37.4 38.9
PROPOSED 41.8 41.0
Table 7: Why-QA results (%)
Table 7 shows the evaluation results. Our pro-
posed method outperformed the other four sys-
tems and improved P@1 by 4.4% over OH, which
is the-state-of-the-art system for Japanese why-
6 http://chasen.org/?taku/software/TinySVM/
1740
QA. OURCF showed the performance improve-
ment over MURATA. Although this suggests the
effectiveness of our causal relation features, the
overall performance of OURCF was lower than
that of OH. OH+PREVCF outperformed neither
OH nor PROPOSED. This suggests that our ap-
proach is more effective than previous causality-
based approaches (Girju, 2003; Higashinaka and
Isozaki, 2008), at least in our setting.
 20
 30
 40
 50
 60
 70
 80
 90
 100
 10  20  30  40  50  60  70  80  90  100
P
re
ci
si
on
 (%
)
% of questions
PROPOSED
OH
OurCF
Figure 4: Effect of causal relation features on the
top-answers
We also compared confident answers of
OURCF, OH, and PROPOSED by making each sys-
tem provide only the k confident top-answers (for
k questions) selected by their SVM scores given
by each system?s re-ranker. This reduces the num-
ber of questions that can be answered by a system,
but the top-answers become more reliable as k de-
creases. Fig. 4 shows this result, where the x axis
represents the percentage of questions (against all
the questions in our test set) whose top-answers
are given by each system, and the y axis repre-
sents the precision of the top-answers at a certain
point on the x axis. When both systems provided
top-answers for 25% of all the questions in our test
set, our method achieved 83.2% precision, which
is much higher than OH?s (62.4%). This exper-
iment confirmed that our causal relation features
were also effective in improving the quality of the
highly confident answers.
However, the high precision by our method was
bound to confident answers for a small number
of questions, and the difference in the precision
between OH and PROPOSED in Fig. 4 became
smaller as we considered more answers with lower
confidence. We think that one of the reasons is the
relatively small coverage of the excitation polarity
lexicon, a core resource in our excitation polarity
matching. We are planning to enlarge the lexicon
to deal with this problem.
Next, we investigated the contribution of the
intra- and inter-sentential causal relations to the
performance of our method. We used only one
of the two types of causal relations for generating
causal relation features (INTRA-SENT and INTER-
SENT) for training our re-ranker and compared the
results in these settings with the one when both
were used (ALL (PROPOSED)). Table 8 shows
the result. Both intra- and inter-sentential causal
relations contributed to the performance improve-
ment.
P@1 MAP
INTER-SENT 39.0 39.7
INTRA-SENT 40.4 40.5
ALL (PROPOSED) 41.8 41.0
Table 8: Results with/without intra- and inter-
sentential causal relations (%)
We also investigated the contributions of the
three types of causal relation features by ablation
tests (Table 9). When we do not use the fea-
tures by excitation polarity matching (ALL-{ef1?
ef4}), the performance is the worst. This implies
that the contribution of excitation polarity match-
ing exceeds the other two.
P@1 MAP
ALL-{tf1?tf4} 40.8 40.7
ALL-{pf1?pf4} 41.0 40.9
ALL-{ef1?ef4} 39.6 40.5
ALL (PROPOSED) 41.8 41.0
Table 9: Ablation test results for why-QA (%)
6 Conclusion
In this paper, we explored the utility of intra- and
inter-sentential causal relations for ranking answer
candidates to why-questions. We also proposed a
method for assessing the appropriateness of causal
relations as answers to a given question using the
semantic orientation of excitation. Through ex-
periments, we confirmed that these ideas are ef-
fective for improving why-QA, and our proposed
method achieved 41.8% P@1, which is 4.4% im-
provement over the current state-of-the-art system
of Japanese why-QA. We also showed that our
system achieved 83.2% precision for its confident
answers, when it only provided its confident an-
swers for 25% of all the questions in our test set.
1741
References
Ion Androutsopoulos and Prodromos Malakasiotis.
2010. A survey of paraphrasing and textual entail-
ment methods. Journal of Artificial Intelligence Re-
search (JAIR), 38(1):135?187.
Luisa Bentivogli, Peter Clark, Ido Dagan, Hoa Dang,
and Danilo Giampiccolo. 2011. The seventh pascal
recognizing textual entailment challenge. In Pro-
ceedings of TAC.
E. Blanco, N. Castell, and Dan I. Moldovan. 2008.
Causal relation extraction. In Proceedings of
LREC?08.
Du-Seong Chang and Key-Sun Choi. 2006. Incremen-
tal cue phrase learning and bootstrapping method for
causality extraction using cue phrase and word pair
probabilities. Information Processing and Manage-
ment, 42(3):662?678.
Ido Dagan, Bill Dolan, Bernardo Magnini, and Dan
Roth. 2010. Recognizing textual entailment: Ratio-
nal, evaluation and approaches. Natural Language
Engineering, 16(1):1?17.
Stijn De Saeger, Kentaro Torisawa, Jun?ichi Kazama,
Kow Kuroda, and Masaki Murata. 2009. Large
scale relation acquisition using class dependent pat-
terns. In Proceedings of ICDM ?09, pages 764?769.
Stijn De Saeger, Kentaro Torisawa, Masaaki Tsuchida,
Jun?ichi Kazama, Chikara Hashimoto, Ichiro Ya-
mada, Jong Hoon Oh, Istv?n Varga, and Yulan Yan.
2011. Relation acquisition using word classes and
partial patterns. In Proceedings of EMNLP ?11,
pages 825?835.
Quang Xuan Do, Yee Seng Chan, and Dan Roth. 2011.
Minimally supervised event causality identification.
In Proceedings of EMNLP ?11, pages 294?303.
David A. Ferrucci, Eric W. Brown, Jennifer Chu-
Carroll, James Fan, David Gondek, Aditya Kalyan-
pur, Adam Lally, J. William Murdock, Eric Nyberg,
John M. Prager, Nico Schlaefer, and Christopher A.
Welty. 2010. Building Watson: An overview of the
DeepQA project. AI Magazine, 31(3):59?79.
Roxana Girju. 2003. Automatic detection of causal
relations for question answering. In Proceedings of
the ACL 2003 workshop on Multilingual summariza-
tion and question answering, pages 76?83.
Chikara Hashimoto, Kentaro Torisawa, Stijn De
Saeger, Jong-Hoon Oh, and Jun?ichi Kazama. 2012.
Excitatory or inhibitory: A new semantic orientation
extracts contradiction and causality from the web. In
Proceedings of EMNLP-CoNLL ?12.
Ryuichiro Higashinaka and Hideki Isozaki. 2008.
Corpus-based question answering for why-
questions. In Proceedings of IJCNLP ?08, pages
418?425.
Takashi Inui and Manabu Okumura. 2005. Investigat-
ing the characteristics of causal relations in Japanese
text. In In Annual Meeting of the Association
for Computational Linguistics (ACL) Workshop on
Frontiers in Corpus Annotations II: Pie in the Sky.
Jun?ichi Kazama and Kentaro Torisawa. 2008. In-
ducing gazetteers for named entity recognition by
large-scale clustering of dependency relations. In
Proceedings of ACL-08: HLT, pages 407?415.
Christopher S. G. Khoo, Syin Chan, and Yun Niu.
2000. Extracting causal knowledge from a medical
database using graphical patterns. In Proceedings of
ACL ?00, pages 336?343.
John Lafferty, Andrew McCallum, and Fernando
Pereira. 2001. Conditional random fields: Prob-
abilistic models for segmenting and labeling se-
quence data. In Proceedings of ICML ?01, pages
282?289.
Alessandro Moschitti, Silvia Quarteroni, Roberto
Basili, and Suresh Manandhar. 2007. Exploiting
syntactic and shallow semantic kernels for question
answer classification. In Proceedings of ACL ?07,
pages 776?783.
Masaki Murata, Sachiyo Tsukawaki, Toshiyuki Kana-
maru, Qing Ma, and Hitoshi Isahara. 2007. A sys-
tem for answering non-factoid Japanese questions
by using passage retrieval weighted based on type
of answer. In Proceedings of NTCIR-6.
Srini Narayanan and Sanda Harabagiu. 2004. Ques-
tion answering based on semantic structures. In Pro-
ceedings of COLING ?04, pages 693?701.
Jong-Hoon Oh, Kentaro Torisawa, Chikara Hashimoto,
Takuya Kawada, Stijn De Saeger, Jun?ichi Kazama,
and Yiou Wang. 2012. Why question answering
using sentiment analysis and word classes. In Pro-
ceedings of EMNLP-CoNLL ?12, pages 368?378.
Kira Radinsky, Sagie Davidovich, and Shaul
Markovitch. 2012. Learning causality for
news events prediction. In Proceedings of WWW
?12, pages 909?918.
Mehwish Riaz and Roxana Girju. 2010. Another look
at causality: Discovering scenario-specific contin-
gency relationships with no supervision. In ICSC
?10, pages 361?368.
Hideki Shima, Hiroshi Kanayama, Cheng wei Lee,
Chuan jie Lin, Teruko Mitamura, Yusuke Miyao,
Shuming Shi, and Koichi Takeda. 2011. Overview
of NTCIR-9 RITE: Recognizing Inference in TExt.
In Proceedings of NTCIR-9.
Mihai Surdeanu, Massimiliano Ciaramita, and Hugo
Zaragoza. 2011. Learning to rank answers to non-
factoid questions from web collections. Computa-
tional Linguistics, 37(2):351?383.
1742
Kentaro Torisawa. 2006. Acquiring inference rules
with temporal constraints by using japanese coordi-
nated sentences and noun-verb co-occurrences. In
Proceedings of HLT-NAACL ?06, pages 57?64.
Vladimir N. Vapnik. 1995. The nature of statistical
learning theory. Springer-Verlag New York, Inc.,
New York, NY, USA.
Istvan Varga, Motoki Sano, Kentaro Torisawa, Chikara
Hashimoto, Kiyonori Ohtake, Takao Kawai, Jong-
Hoon Oh, and Stijn De Saeger. 2013. Aid is out
there: Looking for help from tweets during a large
scale disaster. In Proceedings of ACL ?13.
Suzan Verberne, Lou Boves, Nelleke Oostdijk, and
Peter-Arno Coppen. 2008. Using syntactic infor-
mation for improving why-question answering. In
Proceedings of COLING ?08, pages 953?960.
Suzan Verberne, Lou Boves, and Wessel Kraaij. 2011.
Bringing why-qa to web search. In Proceedings of
ECIR ?11, pages 491?496.
1743
Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 987?997,
Baltimore, Maryland, USA, June 23-25 2014. c?2014 Association for Computational Linguistics
Toward Future Scenario Generation: Extracting Event Causality
Exploiting Semantic Relation, Context, and Association Features
Chikara Hashimoto? Kentaro Torisawa? Julien Kloetzer? Motoki Sano?
Istva?n Varga? Jong-Hoon Oh? Yutaka Kidawara??
? ? ? ? ? ??National Institute of Information and Communications Technology, Kyoto, 619-0289, Japan
?NEC Knowledge Discovery Research Laboratories, Nara, 630-0101, Japan
{
? ch, ? torisawa, ? julien, ? msano, ? rovellia, ??kidawara}@nict.go.jp
Abstract
We propose a supervised method of
extracting event causalities like conduct
slash-and-burn agriculture?exacerbate
desertification from the web using se-
mantic relation (between nouns), context,
and association features. Experiments
show that our method outperforms base-
lines that are based on state-of-the-art
methods. We also propose methods of
generating future scenarios like conduct
slash-and-burn agriculture?exacerbate
desertification?increase Asian dust (from
China)?asthma gets worse. Experi-
ments show that we can generate 50,000
scenarios with 68% precision. We also
generated a scenario deforestation con-
tinues?global warming worsens?sea
temperatures rise?vibrio parahaemolyti-
cus fouls (water), which is written in no
document in our input web corpus crawled
in 2007. But the vibrio risk due to global
warming was observed in Baker-Austin
et al (2013). Thus, we ?predicted? the
future event sequence in a sense.
1 Introduction
The world can be seen as a network of causal-
ity where people, organizations, and other kinds
of entities causally depend on each other. This
network is so huge and complex that it is almost
impossible for humans to exhaustively predict the
consequences of a given event. Indeed, after the
Great East Japan Earthquake in 2011, few ex-
pected that it would lead to an enormous trade
deficit in Japan due to a sharp increase in en-
ergy imports. For effective decision making that
carefully considers any form of future risks and
chances, we need a system that helps humans do
scenario planning (Schwartz, 1991), which is a
decision-making scheme that examines possible
future events and assesses their potential chances
and risks. Our ultimate goal is to develop a system
that supports scenario planning through generat-
ing possible future events using big data, which
would contain what Donald Rumsfeld called ?un-
known unknowns?1 (Torisawa et al, 2010).
To this end, we propose a supervised method
of extracting such event causality as conduct
slash-and-burn agriculture?exacerbate desertifi-
cation and use its output to generate future sce-
narios (scenarios), which are chains of causal-
ity that have been or might be observed in
this world like conduct slash-and-burn agricul-
ture?exacerbate desertification?increase Asian
dust (from China)?asthma gets worse. Note that,
in this paper, A?B denotes that A causes B, which
means that ?if A happens, the probability of B in-
creases.? Our notion of causality should be inter-
preted probabilistically rather than logically.
Our method extracts event causality based on
three assumptions that are embodied as features
of our classifier. First, we assume that two nouns
(e.g. slash-and-burn agriculture and desertifica-
tion) that take some specific binary semantic rela-
tions (e.g. A CAUSES B) tend to constitute event
causality if combined with two predicates (e.g.
conduct and exacerbate). Note that semantic re-
lations are not restricted to those directly relevant
to causality like A CAUSES B but can be those that
might seem irrelevant to causality like A IS AN
INGREDIENT FOR B (e.g. plutonium and atomic
bomb as in plutonium is stolen?atomic bomb is
made). Our underlying intuition is the observation
that event causality tends to hold between two en-
tities linked by semantic relations which roughly
entail that one entity strongly affects the other.
Such semantic relations can be expressed by (oth-
erwise unintuitive) patterns like A IS AN INGRE-
DIENT FOR B. As such, semantic relations like the
MATERIAL relation can also be useful. (See Sec-
1http://youtu.be/GiPe1OiKQuk
987
tion 3.2.1 for a more intuitive explanation.)
Our second assumption is that there are gram-
matical contexts in which event causality is more
likely to appear. We implement what we con-
sider likely contexts for event causality as con-
text features. For example, a likely context of
event causality (underlined) would be: CO2 levels
rose, so climatic anomalies were observed, while
an unlikely context would be: It remains uncertain
whether if the recession is bottomed the declining
birth rate is halted. Useful context information in-
cludes the mood of the sentences (e.g., the uncer-
tainty mood expressed by uncertain above), which
is represented by lexical features (Section 3.2.2).
The last assumption embodied in our associa-
tion features is that each word of the cause phrase
must have a strong association (i.e., PMI, for ex-
ample) with that of the effect phrase as slash-and-
burn agriculture and desertification in the above
example, as in Do et al (2011).
Our method exploits these features on top of our
base features such as nouns and predicates. Exper-
iments using 600 million web pages (Akamine et
al., 2010) show that our method outperforms base-
lines based on state-of-the-art methods (Do et al,
2011; Hashimoto et al, 2012) by more than 19%
of average precision.
We require that event causality be self-
contained, i.e., intelligible as causality without the
sentences from which it was extracted. For ex-
ample, omit toothbrushing?get a cavity is self-
contained, but omit toothbrushing?get a girl-
friend is not since this is not intelligible without a
context: He omitted toothbrushing every day and
got a girlfriend who was a dental assistant of den-
tal clinic he went to for his cavity. This is im-
portant since future scenarios, which are gener-
ated by chaining event causality as described be-
low, must be self-contained, unlike Hashimoto et
al. (2012). To make event causality self-contained,
we wrote guidelines for manually annotating train-
ing/development/test data. Annotators regarded
as event causality only phrase pairs that were
interpretable as event causality without contexts
(i.e., self-contained). From the training data, our
method seemed to successfully learn what self-
contained event causality is.
Our scenario generation method generates sce-
narios by chaining extracted event causality; gen-
erating A?B?C from A?B and B?C. The chal-
lenge is that many acceptable scenarios are over-
looked if we require the joint part of the chain (B
above) to be an exact match. To increase the num-
ber of acceptable scenarios, our method identifies
compatibility w.r.t causality between two phrases
by a recently proposed semantic polarity, exci-
tation (Hashimoto et al, 2012), which properly
relaxes the chaining condition (Section 3.1 de-
scribes it). For example, our method can iden-
tify the compatibility between sea temperatures
are high and sea temperatures rise to chain global
warming worsens?sea temperatures are high
and sea temperatures rise?vibrio parahaemolyti-
cus2 fouls (water). Accordingly, we generated
a scenario deforestation continues?global warm-
ing worsens?sea temperatures rise?vibrio para-
haemolyticus fouls (water), which is written in
no document in our input web corpus that was
crawled in 2007, but the vibrio risk due to global
warming has actually been observed in the Baltic
sea and reported in Baker-Austin et al (2013). In
a sense, we ?predicted? the event sequence re-
ported in 2013 by documents written in 2007. Our
experiments also show that we generated 50,000
scenarios with 68% precision, which include con-
duct terrorist operations?terrorist bombing oc-
curs?cause fatalities and injuries?cause eco-
nomic losses and the above ?slash-and-burn agri-
culture? scenario (Section 5.2). Neither is written
in any document in our input corpus.
In this paper, our target language is Japanese.
However, we believe that our ideas and methods
are applicable to many languages. Examples are
translated into English for ease of explanation.
Supplementary notes of this paper are available
at http://khn.nict.go.jp/analysis/
member/ch/acl2014-sup.pdf.
2 Related Work
For event causality extraction, clues used by
previous methods can roughly be categorized
as lexico-syntactic patterns (Abe et al, 2008;
Radinsky et al, 2012), words in context (Oh et
al., 2013), associations among words (Torisawa,
2006; Riaz and Girju, 2010; Do et al, 2011), and
predicate semantics (Hashimoto et al, 2012). Be-
sides features similar to those described above, we
propose semantic relation features3 that include
those that are not obviously related to causality.
We show that such thorough exploitation of new
and existing features leads to high performance.
2A bacterium in the sea causing food-poisoning.
3Radinsky et al (2012) and Tanaka et al (2012) used se-
mantic relations to generalize acquired causality instances.
988
Other clues include shared arguments (Torisawa,
2006; Chambers and Jurafsky, 2008; Chambers
and Jurafsky, 2009), which we ignore since we tar-
get event causality about two distinct entities.
To the best of our knowledge, future scenario
generation is a new task, although previous works
have addressed similar tasks (Radinsky et al,
2012; Radinsky and Horvitz, 2013). Neither in-
volves chaining and restricts themselves to only
one event causality step. Besides, the events they
predict must be those for which similar events
have previously been observed, and their method
only applies to news domain.
Some of the scenarios we generated are written
on no page in our input web corpus. Similarly,
Tsuchida et al (2011) generated semantic knowl-
edge like causality that is written in no sentence.
However, their method cannot combine more than
two pieces of knowledge unlike ours, and their tar-
get knowledge consists of nouns, but ours consists
of verb phrases, which are more informative.
Tanaka et al (2013)?s web information analy-
sis system provides a what-happens-if QA service,
which is based on our scenario generation method.
3 Event Causality Extraction Method
This section describes our event causality extrac-
tion method. Section 3.1 describes how to extract
event causality candidates, and Section 3.2 details
our features. Section 3.3 shows how to rank event
causality candidates.
3.1 Event Causality Candidate Extraction
We extract the event causality between two events
represented by two phrases from single sentences
that are dependency parsed.4 We obtained sen-
tences from 600 million web pages. Each phrase
in the event causality must consist of a predicate
with an argument position (template, hereafter)
like conduct X and a noun like slash-and-burn
agriculture that completes X. We also require the
predicate of the cause phrase to syntactically de-
pend on the effect phrase in the sentence from
which the event causality was extracted; we guar-
antee this by verifying the dependencies of the
original sentence. In Japanese, since the tempo-
ral order between events is usually determined by
precedence in a sentence, we require the cause
phrase to precede the effect phrase. For context
4We used a Japanese dependency parser called J.DepP
(Yoshinaga and Kitsuregawa, 2009), available at http://
www.tkl.iis.u-tokyo.ac.jp/?ynaga/jdepp/.
feature extraction, the event causality candidates
are accompanied by the original sentences from
which they were extracted.
Excitation We only keep the event causality
candidates each phrase of which consists of exci-
tation templates, which have been shown to be ef-
fective for causality extraction (Hashimoto et al,
2012) and other semantic NLP tasks (Oh et al,
2013; Varga et al, 2013; Kloetzer et al, 2013a).
Excitation is a semantic property of templates that
classifies them into excitatory, inhibitory, and neu-
tral. Excitatory templates such as cause X entail
that the function, effect, purpose or role of their ar-
gument?s referent is activated, enhanced, or man-
ifested, while inhibitory templates such as lower
X entail that it is deactivated or suppressed. Neu-
tral ones like proportional to X belong to neither
of them. We collectively call both excitatory and
inhibitory templates excitation templates. We ac-
quired 43,697 excitation templates by Hashimoto
et al?s method and the manual annotation of exci-
tation template candidates.5 We applied the exci-
tation filter to all 272,025,401 event causality can-
didates from the web and 132,528,706 remained.
After applying additional filters (see Section A
in the supplementary notes) including those based
on a stop-word list and a causal connective list
to remove unlikely event causality candidates that
are not removed by the above filter, we finally ac-
quired 2,451,254 event causality candidates.
3.2 Features for Event Causality Classifier
3.2.1 Semantic Relation Features
We hypothesize that two nouns with some particu-
lar semantic relations are more likely to constitute
event causality. Below we describe the semantic
relations that we believe are likely to constitute
event causality.
CAUSATION is the causal relation between two
entities and is expressed by binary patterns like
A CAUSES B. Deforestation and global warming
might complete the A and B slots. We manually
collected 748 binary patterns for this relation. (See
Section B in the supplementary notes for examples
of our binary patterns.)
MATERIAL is the relation between a material
and a product made of it (e.g. plutonium and
5Hashimoto et al?s method constructs a network of tem-
plates based on their co-occurrence in web sentences with a
small number of polarity-assigned seed templates and infers
the polarity of all the templates in the network by a constraint
solver based on the spin model (Takamura et al, 2005).
989
atomic bomb) and can be expressed by A IS MADE
OF B. Its relation to event causality might seem
unclear, but a material can be seen as a ?cause?
of a product. Indeed materials can participate
in event causality with the help of such template
pairs as A is stolen?B is made as in plutonium is
stolen?atomic bomb is made. We manually col-
lected 187 binary patterns for this relation.
NECESSITY?s patterns include A IS NECES-
SARY FOR B, which can be filled with verbal apti-
tude and ability to think. Noun pairs with this rela-
tion can constitute event causality when combined
with template pairs like improve A?cultivate B.
We collected 257 patterns for this relation.
USE is the relation between means (or instru-
ments) and the purpose for using them. A IS USED
FOR B is a pattern of the relation, which can be
filled with e-mailer and exchanges of e-mail mes-
sages. Note that means can be seen as ?causing?
or ?realizing? the purpose of using the means in
this relation, and actually event causality can be
obtained by incorporating noun pairs of this rela-
tion into template pairs like activate A?conduct
B. 2,178 patterns were collected for this relation.
PREVENTION is the relation expressed by pat-
terns like A PREVENTS B, which can be filled with
toothbrushing and periodontal disease. This rela-
tion is, so to speak, ?negative CAUSATION? since
the entity denoted by the noun completing the A
slot makes the entity denoted by the B noun NOT
realized. Such noun pairs mean event causality
by substituting them into template pairs like omit
A?get B. The number of patterns is 490.
The experiments in Section 5.1.1 show that not
only CAUSATION and PREVENTION (?negative
CAUSATION?) but the other relations are also ef-
fective for event causality extraction.
In addition, we invented the EXCITATION rela-
tion that is expressed by binary patterns made of
excitatory and inhibitory templates (Section 3.1).
For instance, we make binary patterns A RISES B
and A LOWERS B from excitatory template rise X
and inhibitory template lower X respectively. The
EXCITATION relation roughly means that A acti-
vates B (excitatory) or suppresses it (inhibitory).
We simply add an additional argument position to
each template in the 43,697 excitation templates to
make binary patterns. We restricted the argument
positions (represented by Japanese postpositions)
of the A slot to either ha (topic marker), ga (nomi-
native), or de (instrumental) and those of the B slot
to either ha, ga, de, wo (accusative), or ni (dative),
SR1: Binary pattern of our semantic relations that co-
occurs with two nouns of an event causality candi-
date in our web corpus.
SR2: Semantic relation types (e.g CAUSATION and EN-
TAILMENT) of the binary pattern of SR1. EXCITA-
TION is divided into six sub types based on the ex-
citation polarity of the binary patterns, the argument
positions, and the existence of causative markers. A
CAUSATION pattern, B BY A, constitutes an indepen-
dent relation called the BY relation.
Table 1: Semantic relation features.
and obtained 55,881 patterns.
Moreover, for broader coverage, we acquired
binary patterns that entail or are entailed by one
of the patterns of the above six semantic relations.
Those patterns were acquired from our web cor-
pus by Kloetzer et al (2013b)?s method, which ac-
quired 185 million entailment pairs with 80% pre-
cision from our web corpus and was used for con-
tradiction acquisition (Kloetzer et al, 2013a). We
acquired 335,837 patterns by this method. They
are class-dependent patterns, which have seman-
tic class restrictions on arguments. The semantic
classes were obtained from our web corpus based
on Kazama and Torisawa (2008). See De Saeger
et al (2009), De Saeger et al (2011) and Kloet-
zer et al (2013a) for more on our patterns. They
collectively constitute the ENTAILMENT relation.
Table 1 shows our semantic relation features. To
use them, we first make a database that records
which noun pairs co-occur with each binary pat-
tern. Then we check a noun pair (the nouns of the
cause and effect phrases) for each event causality
candidate, and give the candidate all the patterns
in the database that co-occur with the noun pair.
3.2.2 Context Features
We believe that contexts exist where event causal-
ity candidates are more likely to appear, as de-
scribed in Section 1. We developed features that
capture the characteristics of likely contexts for
Japanese event causality (See Section C in the sup-
plementary notes). In a nutshell, they represent a
connective (C1 and C2 in Section C), the distance
between the elements of event causality candidate
(C3 and C4), words in context (C5 to C8), the ex-
istence of adnominal modifier (9 to C10), and the
existence of additional arguments of cause and ef-
fect predicates (C13 to C20), among others.
3.2.3 Association Features
These features measure the association strength
between slash-and-burn agriculture and deser-
990
AC1: The CEA value, the sum of AC2, AC3, and AC4.
AC2: Do et al?s S
pp
. This is the association measure
between predicates, which is the product of AC5,
AC6 and AC7 below. They are calculated from the
132,528,706 event causality candidates in Section
3.1. We omit Do et al?s Dist, which is a constant
since we set our window size to one.
AC3: Do et al?s S
pa
. This is the association measure be-
tween arguments and predicates, which is the sum
of AC8 and AC9. They are calculated from the
132,528,706 event causality candidates.
AC4: Do et al?s S
aa
, which is PMI between arguments.
We obtained it in the same way as Filter 5 in the sup-
plementary notes.
AC5: PMI between predicates.
AC6 / AC7: Do et al?s max / IDF .
AC8: PMI between a cause noun and an effect predicate.
AC9: PMI between a cause predicate and an effect noun.
Table 2: CEA-based association features.
tification in conduct slash-and-burn agricul-
ture?exacerbate desertification for instance and
consist of CEA-, Wikipedia-, definition-, and web-
based features. CEA-based features are based
on the Cause Effect Association (CEA) measure
of Do et al (2011). It consists of association
measures like PMI between arguments (nouns),
between arguments and predicates, and between
predicates (Table 2). Do et al used it (along
with discourse relations) to extract event causality.
Wikipedia-based features are the co-occurrence
counts and the PMI values between cause and ef-
fect nouns calculated using Wikipedia (as of 2013-
Sep-19). We also checked whether an Wikipedia
article whose title is a cause (effect) noun con-
tains its effect (cause) noun, as detailed in Section
D.1 in the supplementary notes. Definition-based
features, as detailed in Section D.2 in the sup-
plementary notes, resemble the Wikipedia-based
features except that the information source is the
definition sentences automatically acquired from
our 600 million web pages using the method of
Hashimoto et al (2011). Web-based features
provide association measures between nouns us-
ing various window sizes in the 600 million web
pages. See Section D.3 for detail. Web-based as-
sociation measures were obtained from the same
database as AC4 in Table 2.
3.2.4 Base Features
Base features represent the basic properties of
event causality like nouns, templates, and their ex-
citation polarities (See Section E in the supple-
mentary notes). For B3 and B4, 500 semantic
classes were obtained from our web corpus using
the method of Kazama and Torisawa (2008).
3.3 Event Causality Scoring
Using the above features, a classifier6 classifies
each event causality candidate into causality and
non-causality. An event causality candidate is
given a causality score CScore, which is the SVM
score (distance from the hyperplane) that is nor-
malized to [0, 1] by the sigmoid function 1
1+e
?x
.
Each event causality candidate may be given mul-
tiple original sentences, since a phrase pair can ap-
pear in multiple sentences, in which case it is given
more than one SVM score. For such candidates,
we give the largest score and keep only one origi-
nal sentence that corresponds to the largest score.7
Original sentences are also used for scenario gen-
eration, as described below.
4 Future Scenario Generation Method
Our future scenario generation method creates
scenarios by chaining event causalities. A naive
approach chains two phrase pairs by exact match-
ing. However, this approach would overlook many
acceptable scenarios as discussed in Section 1. For
example, global warming worsens?sea tempera-
tures are high and sea temperatures rise?vibrio
parahaemolyticus fouls (water) can be chained to
constitute an acceptable scenario, but the joint part
is not the same string. Note that the two phrases
are not simply paraphrases; temperatures may be
rising but remain cold, or they may be decreasing
even though they remain high.
What characterizes two phrases that can be the
joint part of acceptable scenarios? Although we
have no definite answer yet, we name it the causal-
compatibility of two phrases and provide its pre-
liminary characterization based on the excitation
polarity. Remember that excitatory templates like
cause X entail that X?s function or effect is acti-
vated, but inhibitory templates like lower X entail
that it is suppressed (Section 3.1). Two phrases
are causally-compatible if they mention the same
entity (typically described by a noun) that is pred-
icated by the templates of the same excitation po-
larity. Indeed, both X rise and X are high are ex-
citatory and hence sea temperatures are high and
sea temperatures rise are causally-compatible.8
6We used SVMlight with the polynominal kernel (d = 2),
available at http://svmlight.joachims.org.
7Future work will exploit other original sentences, as sug-
gested by an anonymous reviewer.
8Using other knowledge like verb entailment (Hashimoto
et al, 2009) can be helpful too, which is further future work.
991
Scenarios (scs) generated by chaining causally-
compatible phrase pairs are scored by Score(sc),
which embodies our assumption that an acceptable
scenario consists of plausible event causality pairs:
Score(sc) =
?
cs?CAUS(sc)
CScore(cs)
where CAUS(sc) is a set of event causality
pairs that constitutes sc and cs is a member of
CAUS(sc). CScore(cs), which is cs?s score,
was described in Section 3.3.
Our method optionally applies the following
two filters to scenarios for better precision: An
original sentence filter removes a scenario if two
event causality pairs that are chained in it are ex-
tracted from original sentences between which no
word overlap exists other than words constituting
causality pairs. In this case, the two event causal-
ity pairs tend to be about different topics and con-
stitute an incoherent scenario. A common argu-
ment filter removes a scenario if a joint part con-
sists of two templates that share no argument in
our ?argument, template? database, which is com-
piled from the syntactic dependency data between
arguments and templates extracted from our web
corpus. Such a scenario tends to be incoherent too.
5 Experiments
5.1 Event Causality Extraction
Next we describe our experiments on event causal-
ity extraction and show (a) that most of our fea-
tures are effective and (b) that our method outper-
forms the baselines based on state-of-the-art meth-
ods (Do et al, 2011; Hashimoto et al, 2012). Our
method achieved 70% precision at 13% recall; we
can extract about 69,700 event causality pairs with
70% precision, as described below.
For the test data, we randomly sampled 23,650
examples of ?event causality candidate, origi-
nal sentence? among which 3,645 were positive
from 2,451,254 event causality candidates ex-
tracted from our web corpus (Section 3.1). For
the development data, we identically collected
11,711 examples among which 1,898 were posi-
tive. These datasets were annotated by three anno-
tators (not the authors), who annotated the event
causality candidates without looking at the origi-
nal sentences. The final label was determined by
majority vote. The training data were created
by the annotators through our preliminary experi-
ments and consists of 112,110 among which 9,657
Method Ave. prec. (%)
Proposed 46.27
w/o Context features 45.68
w/o Association features 45.66
w/o Semantic relation features 44.44
Base features only 41.29
Table 3: Ablation tests.
Semantic relations Ave. prec. (%)
All semantic relations (Proposed) 46.27
CAUSATION 45.86
CAUSATION and PREVENTION 45.78
None (w/o Semantic relation features) 44.44
Table 4: Ablation tests on semantic relations.
were positive. The Kappa (Fleiss, 1971) of their
judgments was 0.67 (substantial agreement (Lan-
dis and Koch, 1977)). These three datasets have
no overlap in terms of phrase pairs. About nine
man-months were required to prepare the data.
Our evaluation is based on average precision;9
we believe that it is important to rank the plausible
event causality candidates higher.
5.1.1 Ablation Tests
We evaluated the features of our method by ab-
lation tests. Table 3 shows the results of remov-
ing the semantic relation, the context, and the as-
sociation features from our method. All the fea-
ture types are effective and contribute to the per-
formance gain that was about 5% higher than the
Base features only. Proposed achieved 70% pre-
cision at 13% recall. We then estimated that, with
the precision rate, we can extract 69,700 event
causality pairs from the 2,451,254 event causality
candidates, among which the estimated number of
positive examples is 377,794.
Next we examined whether the semantic rela-
tions that do not seem directly relevant to causality
like MATERIAL are effective. Table 4 shows that
the performance degraded (46.27 ? 45.86) when
we only used the CAUSATION binary patterns and
their entailing and entailed patterns compared to
Proposed. Even when adding the PREVENTION
(?negative CAUSATION?) patterns and their entail-
ing and entailed patterns, the performance was still
slightly worse than Proposed. The performance
was even worse when using no semantic relation
(?None? in Table 4). Consequently we conclude
that not only semantic relations directly relevant
9It is obtained by computing the precision for each point
in the ranked list where we find a positive sample and aver-
aging all the precision figures (Manning and Schu?tze, 1999).
992
Method Ave. prec. (%)
w/o Wikipedia-based features 46.52
Proposed 46.27
w/o definition-based features 46.21
w/o Web-based features 46.15
w/o CEA-based features 45.80
Table 5: Ablation tests on association features.
Method Ave. prec. (%)
Proposed 46.27
Proposed-CEA 45.80
CEA
sup
21.77
CEA
uns
16.57
Table 6: Average precision of our proposed meth-
ods and baselines using CEA.
to causality like CAUSATION but also those that
seem to lack direct relevance to causality like MA-
TERIAL are somewhat effective.
Finally, Table 5 shows the performance drop
by removing the Wikipedia-, definition-, web-,
and CEA-based features. The CEA-based fea-
tures were the most effective, while the Wikipedia-
based ones slightly degraded the performance.
5.1.2 Comparison to Baseline Methods
We compared our method and two baselines based
on Do et al (2011): CEA
uns
is an unsupervised
method that uses CEA to rank event causality can-
didates, and CEA
sup
is a supervised method us-
ing SVM and the CEA features, whose ranking is
based on the SVM scores. The baselines are not
complete implementations of Do et al?s method
which uses discourse relations identified based on
Lin et al (2010) and exploits them with CEA
within an ILP framework. Nonetheless, we believe
that this comparison is informative since CEA can
be seen as the main component; they achieved a
F1 of 41.7% for extracting causal event relations,
but with only CEA they still achieved 38.6%.
Table 6 shows the average precision of the com-
pared methods. Proposed is our proposed method.
Proposed-CEA is Proposed without the CEA-
features and shows their contribution. Proposed
is the best and the CEA features slightly contribute
to the performance, as Proposed-CEA indicates.
We observed that CEA
sup
and CEA
uns
performed
poorly and tended to favor event causality candi-
dates whose phrase pairs were highly relevant to
each other but described the contrasts of events
rather than event causality (e.g. build a slow mus-
cle and build a fast muscle) probably because their
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  0.2  0.4  0.6  0.8  1
P
re
ci
si
on
Recall
	
	



Figure 1: Precision-recall curves of proposed
methods and baselines using CEA.
Method Ave. prec. (%)
Proposed 49.64
Cs
uns
30.38
Cs
sup
27.49
Table 7: Average precision of our proposed
method and baselines using Cs.
main components are PMI values. Figure 1 shows
their precision-recall curves.
Next we compared our method with the base-
lines based on Hashimoto et al (2012). They de-
veloped an automatic excitation template acqui-
sition method that assigns each template an ex-
citation value in range [?1, 1] that is positive if
the template is excitatory and negative if it is in-
hibitory. They ranked event causality candidates
by Cs(p
1
, p
2
) = |s
1
| ? |s
2
|, where p
1
and p
2
are
the two phrases of event causality candidates, and
|s
1
| and |s
2
| are the absolute excitation values of
p
1
?s and p
2
?s templates. The baselines are as fol-
lows: Cs
uns
is an unsupervised method that uses
Cs for ranking, and Cs
sup
is a supervised method
using SVM with Cs as the only feature that uses
SVM scores for ranking. Note that some event
causality candidates were not given excitation val-
ues for their templates, since some templates were
acquired by manual annotation without Hashimoto
et al?s method. To favor the baselines for fairness,
the event causality candidates of the development
and test data were restricted to those with excita-
tion values. Since Cs
sup
performed slightly better
when using all of the training data in our prelimi-
nary experiments, we used all of it.
Table 7 shows the average precision of the com-
pared methods. Proposed is our method. Its av-
erage precision is different from that in Table 6
due to the difference in test data described above.
Cs
uns
and Cs
sup
did not perform well. Many
993
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  0.2  0.4  0.6  0.8  1
P
re
ci
si
on
Recall

	

	
Figure 2: Precision-recall curves of proposed
methods and baselines using Cs.
phrase pairs described two events that often hap-
pen in parallel but are not event causality (e.g. re-
duce the intake of energy and increase the energy
consumption) in the highly ranked event causality
candidates of Cs
uns
and Cs
sup
. Figure 2 shows
their precision-recall curves.
Hashimoto et al (2012) extracted 500,000 event
causalities with about 70% precision. However, as
described in Section 1, our event causality crite-
ria are different; since they regarded phrase pairs
that were not self-contained as event causality
(their annotators checked the original sentences of
phrase pairs to see if they were event causality),
their judgments tended to be more lenient than
ours, which explains the performance difference.
In preliminary experiments, since our proposed
method?s performance degraded when Cs was in-
corporated, we did not use it in our method.
5.2 Future Scenario Generation
To show that our future scenario generation meth-
ods can generate many acceptable scenarios with
reasonable precision, we experimentally com-
pared four methods: Proposed, our scenario
generation method without the two filters, Pro-
posed+Orig, our method with the original sen-
tence filter, Proposed+Orig+Comm, our method
with the original sentence and common argument
filters, and Exact, a method that chains event
causality by exact matching.
Beginning events As the beginning event of a
scenario, we extracted nouns that describe social
problems (social problem nouns, e.g. deforesta-
tion) from Wikipedia to focus our evaluation on
the ability to generate scenarios about them, which
is a realistic use-case of scenario generation. We
extracted 557 social problem nouns and used the
cause phrases of the event causality candidates that
Two-step Three-step
Exact 1,000 (44.10) 1,000 (23.50)
Proposed 2,000 (32.25) 2,000 (12.55)
Proposed+Orig 995 (36.28) 602 (17.28)
Proposed+Orig+Comm 708 (38.70) 339 (17.99)
Table 8: Number of scenario samples and their
precision (%) in parentheses.
consisted of one of the social problem nouns as the
scenario?s beginning event.
Event causality We applied our event causality
extraction method to 2,451,254 candidates (Sec-
tion 3.1) and culled the top 1,200,000 phrase pairs
from them (See Section F in the supplementary
notes for examples). Some phrase pairs have the
same noun pairs and the same template polar-
ity pairs (e.g. omit toothbrushing?get a cavity
and neglect toothbrushing?have a cavity, where
omit X and neglect X are inhibitory and get X and
have X are excitatory). We removed such phrase
pairs except those with the highest CScore, and
960,561 phrase pairs remained, from which we
generated two- or three-step scenarios that con-
sisted of two or three phrase pairs.
Evaluation samples The numbers of two- and
three-step scenarios generated by Proposed were
217,836 and 5,288,352, while those of Exact were
22,910 and 72,746. We sampled 2,000 from Pro-
posed?s two- and three-step scenarios and 1,000
from those of Exact. We applied the filters to the
sampled scenarios of Proposed, and the results
were regarded as the sample scenarios of Pro-
posed+Orig and Proposed+Orig+Comm. Table
8 shows the number and precision of the samples.
Note that, for the diversity of the sampled scenar-
ios, our sampling proceeded as follows: (i) Ran-
domly sample a beginning event phrase from the
generated scenarios. (ii) Randomly sample an ef-
fect phrase for the beginning event phrase from the
scenarios. (iii) Regarding the effect phrase as a
cause phrase, randomly sample an effect phrase
for it, and repeat (iii) up to the specified number
of steps (2 or 3). The samples were annotated by
three annotators (not the authors), who were in-
structed to regard a sample as acceptable if each
event causality that constitutes it is plausible and
the sample as a whole constitutes a single coherent
story. Final judgment was made by majority vote.
Fleiss? kappa of their judgments was 0.53 (moder-
ate agreement), which is lower than the kappa for
the causality judgment. This is probably because
994
Two-step Three-step
Exact 2,085 1,237
Proposed 5,773 0
Proposed+Orig 4,107 0
Proposed+Orig+Comm 3,293 21,153
Table 9: Estimated number of acceptable scenar-
ios with a 70% precision rate.
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  10000 20000 30000 40000 50000 60000 70000
P
re
ci
si
on
Estimated number of acceptable scenarios

	

	

	

Figure 3: Precision-scenario curves (2-step).
scenario judgment requires careful consideration
about various possible futures for which individ-
ual annotators tend to draw different conclusions.
Result 1 Table 9 shows the estimated number
of acceptable scenarios generated with 70% pre-
cision. The estimated number is calculated as the
product of the recall at 70% precision and the
number of acceptable scenarios in all the gener-
ated scenarios, which is estimated by the anno-
tated samples. Figures 3 and 4 show the precision-
scenario curves for the two- and three-step sce-
narios, which illustrate how many acceptable sce-
narios can be generated with what precision. The
curve is drawn in the same way as the precision-
recall curve except that the X-axis indicates the
estimated number of acceptable scenarios. At
70% precision, all of the proposed methods out-
performed Exact in the two-step setting, and Pro-
posed+Orig+Comm outperformed Exact in the
three-step setting.
Result 2 To evaluate the top-ranked scenarios
of Proposed+Orig+Comm in the three-step set-
ting with more samples, the annotators labeled 500
samples from the top 50,000 of its output. 341
(68.20%) were acceptable, and the estimated num-
ber of acceptable scenarios at a precision rate of
70% and 80% are 26,700 and 5,200 (See Section H
in the supplementary notes). The ?terrorist oper-
ations? scenario and the ?slash-and-burn agricul-
ture? scenario in Section 1 were ranked 16,386th
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  100000 200000 300000 400000 500000 600000 700000
P
re
ci
si
on
Estimated number of acceptable scenarios

	

	

	

Figure 4: Precision-scenario curves (3-step).
and 21,968th. Next we examined how many of
the top 50,000 scenarios were acceptable and non-
trivial, i.e., found in no page in our input web cor-
pus, using the 341 acceptable samples. A scenario
was regarded as non-trivial if its nouns co-occur in
no page of the corpus. 22 among the 341 samples
were non-trivial. Accordingly, we estimate that
we can generate 2,200 (50,000?22
500
) acceptable and
non-trivial scenarios from the top 50,000. (See
Section G in the supplementary notes for exam-
ples of the generated scenarios.)
Discussion Scenario deforestation contin-
ues?global warming worsens?sea temperatures
rise?vibrio parahaemolyticus fouls (water)
was generated by Proposed+Orig+Comm. It
is written in no page in our input web corpus,
which was crawled in 2007.10 But we did find
a paper Baker-Austin et al (2013) that observed
the emerging vibrio risk in the Baltic sea due to
global warming. In a sense, we ?predicted? an
event observed in 2013 from documents written
in 2007, although the scenario was ranked as low
as 240,738th.
6 Conclusion
We proposed a supervised method for event
causality extraction that exploits semantic rela-
tion, context, and association features. We also
proposed methods for our new task, future sce-
nario generation. The methods chain event causal-
ity by causal-compatibility. We generated non-
trivial scenarios with reasonable precision, and
?predicted? future events from web documents.
Increasing their rank is future work.
10The corpus has pages where global warming, sea tem-
peratures, and vibrio parahaemolyticus happen to co-occur.
But they are either diaries where the three words appear sep-
arately in different topics or lists of arbitrary words.
995
References
Shuya Abe, Kentaro Inui, and Yuji Matsumoto. 2008.
Two-phrased event relation acquisition: Coupling
the relation-oriented and argument-oriented ap-
proaches. In Proceedings of the 22nd International
Conference on Computational Linguistics (COLING
2008), pages 1?8.
Susumu Akamine, Daisuke Kawahara, Yoshikiyo
Kato, Tetsuji Nakagawa, Yutaka I. Leon-Suematsu,
Takuya Kawada, Kentaro Inui, Sadao Kurohashi,
and Yutaka Kidawara. 2010. Organizing informa-
tion on the web to support user judgments on in-
formation credibility. In Proceedings of 2010 4th
International Universal Communication Symposium
Proceedings (IUCS 2010), pages 122?129.
Craig Baker-Austin, Joaquin A. Trinanes, Nick G. H.
Taylor, Rachel Hartnell, Anja Siitonen, and Jaime
Martinez-Urtaza. 2013. Emerging vibrio risk at
high latitudes in response to ocean warming. Nature
Climate Change, 3:73?77.
Nathanael Chambers and Dan Jurafsky. 2008. Unsu-
pervised learning of narrative event chains. In Pro-
ceedings of the 48th Annual Meeting of the Asso-
ciation of Computational Linguistics: Human Lan-
guage Technologies (ACL-08: HLT), pages 789?
797.
Nathanael Chambers and Dan Jurafsky. 2009. Unsu-
pervised learning of narrative schemas and their par-
ticipants. In Proceedings of the 47th Annual Meet-
ing of the ACL and the 4th IJCNLP of the AFNLP
(ACL-IJCNLP 2009), pages 602?610.
Stijn De Saeger, Kentaro Torisawa, Jun?ichi Kazama,
Kow Kuroda, and Masaki Murata. 2009. Large
scale relation acquisition using class dependent pat-
terns. In Proceedings of the IEEE International
Conference on Data Mining (ICDM 2009), pages
764?769.
Stijn De Saeger, Kentaro Torisawa, Masaaki Tsuchida,
Jun?ichi Kazama, Chikara Hashimoto, Ichiro Ya-
mada, Jong-Hoon Oh, Istva?n Varga, and Yulan Yan.
2011. Relation acquisition using word classes and
partial patterns. In Proceedings of the Conference
on Empirical Methods in Natural Language Pro-
cessing (EMNLP 2011), pages 825?835.
Quang Xuan Do, Yee Seng Chan, and Dan Roth. 2011.
Minimally supervised event causality identification.
In Proceedings of the 2011 Conference on Empirical
Methods in Natural Language Processing (EMNLP
2011), pages 294?303.
Joseph L. Fleiss. 1971. Measuring nominal scale
agreement among many raters. Psychological Bul-
letin, 76(5):378?382.
Chikara Hashimoto, Kentaro Torisawa, Kow Kuroda,
Masaki Murata, and Jun?ichi Kazama. 2009. Large-
scale verb entailment acquisition from the web. In
Proceedings of EMNLP 2009: Conference on Em-
pirical Methods in Natural Language Processing,
pages 1172?1181.
Chikara Hashimoto, Kentaro Torisawa, Stijn
De Saeger, Jun?ichi Kazama, and Sadao Kuro-
hashi. 2011. Extracting paraphrases from definition
sentences on the web. In Proceedings of the 49th
Annual Meeting of the Association for Computa-
tional Linguistics: Human Language Technologies,
pages 1087?1097.
Chikara Hashimoto, Kentaro Torisawa, Stijn De
Saeger, Jong-Hoon Oh, and Jun?ichi Kazama. 2012.
Excitatory or inhibitory: A new semantic orienta-
tion extracts contradiction and causality from the
web. In Proceedings of EMNLP-CoNLL 2012: Con-
ference on Empirical Methods in Natural Language
Processing and Natural Language Learning, pages
619?630.
Jun?ichi Kazama and Kentaro Torisawa. 2008. Induc-
ing gazetteers for named entity recognition by large-
scale clustering of dependency relations. In Pro-
ceedings of the 46th Annual Meeting of the Associ-
ation for Computational Linguistics: Human Lan-
guage Technologies (ACL-08: HLT), pages 407?
415.
Julien Kloetzer, Stijn De Saeger, Kentaro Torisawa,
Chikara Hashimoto, Jong-Hoon Oh, and Kiyonori
Ohtake. 2013a. Two-stage method for large-scale
acquisition of contradiction pattern pairs using en-
tailment. In Proceedings of the Conference on Em-
pirical Methods in Natural Language Processing
(EMNLP 2013), pages 693?703.
Julien Kloetzer, Kentaro Torisawa, Stijn De Saeger,
Motoki Sano, Chikara Hashimoto, and Jun Gotoh.
2013b. Large-scale acquisition of entailment pattern
pairs. In Information Processing Society of Japan
(IPSJ) Kansai-Branch Convention 2013.
J. Richard Landis and Gary G. Koch. 1977. The mea-
surement of observer agreement for categorical data.
Biometrics, 33(1):159?174.
Ziheng Lin, Hwee Tou Ng, and Min-Yen Kan. 2010. A
pdtb-styled end-to-end discourse parser. Technical
report, School of Computing, National University of
Singapore.
Chris Manning and Hinrich Schu?tze. 1999. Foun-
dations of Statistical Natural Language Processing.
MIT Press.
Jong-Hoon Oh, Kentaro Torisawa, Chikara Hashimoto,
Motoki Sano, Stijn De Saeger, and Kiyonori Ohtake.
2013. Why-question answering using intra- and
inter-sentential causal relations. In Proceedings of
the 51st Annual Meeting of the Association for Com-
putational Linguistics (ACL 2013), pages 1733?
1743.
996
Kira Radinsky and Eric Horvitz. 2013. Mining the
web to predict future events. In Proceedings of Sixth
ACM International Conference on Web Search and
Data Mining (WSDM 2013), pages 255?264.
Kira Radinsky, Sagie Davidovich, and Shaul
Markovitch. 2012. Learning causality for news
events prediction. In Proceedings of International
World Wide Web Conference 2012 (WWW 2012),
pages 909?918.
Mehwish Riaz and Roxana Girju. 2010. Another look
at causality: Discovering scenario-specific contin-
gency relationships with no supervision. In 2010
IEEE Fourth International Conference on Semantic
Computing, pages 361?368.
Peter Schwartz. 1991. The Art of the Long View. Dou-
bleday.
Hiroya Takamura, Takashi Inui, and Manabu Okumura.
2005. Extracting semantic orientation of words us-
ing spin model. In Proceedings of the 43rd Annual
Meeting of the Association for Computational Lin-
guistics (ACL 2005), pages 133?140.
Shohei Tanaka, Naoaki Okazaki, and Mitsuru Ishizuka.
2012. Acquiring and generalizing causal inference
rules from deverbal noun constructions. In Proceed-
ings of 24th International Conference on Compu-
tational Linguistics (COLING 2012), pages 1209?
1218.
Masahiro Tanaka, Stijn De Saeger, Kiyonori Ohtake,
Chikara Hashimoto, Makoto Hijiya, Hideaki Fujii,
and Kentaro Torisawa. 2013. WISDOM2013: A
large-scale web information analysis system. In
Companion Volume of the Proceedings of the 6th In-
ternational Joint Conference on Natural Language
Processing (IJCNLP 2013) (Demo Track), pages
45?48.
Kentaro Torisawa, Stijn de Saeger, Jun?ichi Kazama,
Asuka Sumida, Daisuke Noguchi, Yasunari Kak-
izawa, Masaki Murata, Kow Kuroda, and Ichiro Ya-
mada. 2010. Organizing the web?s information ex-
plosion to discover unknown unknowns. New Gen-
eration Computing (Special Issue on Information
Explosion), 28(3):217?236.
Kentaro Torisawa. 2006. Acquiring inference rules
with temporal constraints by using japanese coordi-
nated sentences and noun-verb co-occurrences. In
Proceedings of the Human Language Technology
Conference of the North American Chapter of the
ACL (HLT-NAACL2006), pages 57?64.
Masaaki Tsuchida, Kentaro Torisawa, Stijn De
Saeger, Jong Hoon Oh, Jun?ichi Kazama, Chikara
Hashimoto, and Hayato Ohwada. 2011. Toward
finding semantic relations not written in a single sen-
tence: An inference method using auto-discovered
rules. In Proceedings of the 5th International Joint
Conference on Natural Language Processing (IJC-
NLP 2011), pages 902?910.
Istva?n Varga, Motoki Sano, Kentaro Torisawa, Chikara
Hashimoto, Kiyonori Ohtake, Takao Kawai, Jong-
Hoon Oh, and Stijn De Saeger. 2013. Aid is out
there: Looking for help from tweets during a large
scale disaster. In Proceedings of the 51st Annual
Meeting of the Association for Computational Lin-
guistics (ACL 2013), pages 1619?1629.
Naoki Yoshinaga and Masaru Kitsuregawa. 2009.
Polynomial to linear: Efficient classification with
conjunctive features. In Proceedings of the 2009
Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP 2009), pages 542?1551.
997
