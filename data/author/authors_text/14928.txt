Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics:shortpapers, pages 11?17,
Portland, Oregon, June 19-24, 2011. c?2011 Association for Computational Linguistics
Temporal Restricted Boltzmann Machines for Dependency Parsing
Nikhil Garg
Department of Computer Science
University of Geneva
Switzerland
nikhil.garg@unige.ch
James Henderson
Department of Computer Science
University of Geneva
Switzerland
james.henderson@unige.ch
Abstract
We propose a generative model based on
Temporal Restricted Boltzmann Machines for
transition based dependency parsing. The
parse tree is built incrementally using a shift-
reduce parse and an RBM is used to model
each decision step. The RBM at the current
time step induces latent features with the help
of temporal connections to the relevant previ-
ous steps which provide context information.
Our parser achieves labeled and unlabeled at-
tachment scores of 88.72% and 91.65% re-
spectively, which compare well with similar
previous models and the state-of-the-art.
1 Introduction
There has been significant interest recently in ma-
chine learning methods that induce generative mod-
els with high-dimensional hidden representations,
including neural networks (Bengio et al, 2003; Col-
lobert and Weston, 2008), Bayesian networks (Titov
and Henderson, 2007a), and Deep Belief Networks
(Hinton et al, 2006). In this paper, we investi-
gate how these models can be applied to dependency
parsing. We focus on Shift-Reduce transition-based
parsing proposed by Nivre et al (2004). In this class
of algorithms, at any given step, the parser has to
choose among a set of possible actions, each repre-
senting an incremental modification to the partially
built tree. To assign probabilities to these actions,
previous work has proposed memory-based classi-
fiers (Nivre et al, 2004), SVMs (Nivre et al, 2006b),
and Incremental Sigmoid Belief Networks (ISBN)
(Titov and Henderson, 2007b). In a related earlier
work, Ratnaparkhi (1999) proposed a maximum en-
tropy model for transition-based constituency pars-
ing. Of these approaches, only ISBNs induce high-
dimensional latent representations to encode parse
history, but suffer from either very approximate or
slow inference procedures.
We propose to address the problem of inference
in a high-dimensional latent space by using an undi-
rected graphical model, Restricted Boltzmann Ma-
chines (RBMs), to model the individual parsing
decisions. Unlike the Sigmoid Belief Networks
(SBNs) used in ISBNs, RBMs have tractable infer-
ence procedures for both forward and backward rea-
soning, which allows us to efficiently infer both the
probability of the decision given the latent variables
and vice versa. The key structural difference be-
tween the two models is that the directed connec-
tions between latent and decision vectors in SBNs
become undirected in RBMs. A complete parsing
model consists of a sequence of RBMs interlinked
via directed edges, which gives us a form of Tempo-
ral Restricted Boltzmann Machines (TRBM) (Tay-
lor et al, 2007), but with the incrementally speci-
fied model structure required by parsing. In this pa-
per, we analyze and contrast ISBNs with TRBMs
and show that the latter provide an accurate and
theoretically sound model for parsing with high-
dimensional latent variables.
2 An ISBN Parsing Model
Our TRBM parser uses the same history-
based probability model as the ISBN
parser of Titov and Henderson (2007b):
P (tree) = ?tP (vt|v1, ..., vt?1), where each
11
Figure 1: An ISBN network. Shaded nodes represent
decision variables and ?H? represents a vector of latent
variables. W (c)HH denotes the weight matrix for directed
connection of type c between two latent vectors.
vt is a parser decision of the type Left-Arc,
Right-Arc, Reduce or Shift. These decisions are fur-
ther decomposed into sub-decisions, as for example
P (Left-Arc|v1, ..., vt?1)P (Label|Left-Arc, v1, ..., vt?1).
The TRBMs and ISBNs model these probabilities.
In the ISBN model shown in Figure 1, the de-
cisions are shown as boxes and the sub-decisions
as shaded circles. At each decision step, the ISBN
model also includes a vector of latent variables, de-
noted by ?H?, which act as latent features of the
parse history. As explained in (Titov and Hender-
son, 2007b), the temporal connections between la-
tent variables are constructed to take into account the
structural locality in the partial dependency struc-
ture. The model parameters are learned by back-
propagating likelihood gradients.
Because decision probabilities are conditioned on
the history, once a decision is made the correspond-
ing variable becomes observed, or visible. In an
ISBN, the directed edges to these visible variables
and the large numbers of heavily inter-connected la-
tent variables make exact inference of decision prob-
abilities intractable. Titov and Henderson (2007a)
proposed two approximation procedures for infer-
ence. The first was a feed forward approximation
where latent variables were allowed to depend only
on their parent variables, and hence did not take into
account the current or future observations. Due to
this limitation, the authors proposed to make latent
variables conditionally dependent also on a set of
explicit features derived from the parsing history,
specifically, the base features defined in (Nivre et al,
2006b). As shown in our experiments, this addition
results in a big improvement for the parsing task.
The second approximate inference procedure,
called the incremental mean field approximation, ex-
tended the feed-forward approximation by updating
the current time step?s latent variables after each
sub-decision. Although this approximation is more
accurate than the feed-forward one, there is no ana-
lytical way to maximize likelihood w.r.t. the means
of the latent variables, which requires an iterative
numerical method and thus makes inference very
slow, restricting the model to only shorter sentences.
3 Temporal Restricted Boltzmann
Machines
In the proposed TRBM model, RBMs provide an an-
alytical way to do exact inference within each time
step. Although information passing between time
steps is still approximated, TRBM inference is more
accurate than the ISBN approximations.
3.1 Restricted Boltzmann Machines (RBM)
An RBM is an undirected graphical model with a
set of binary visible variables v, a set of binary la-
tent variables h, and a weight matrix W for bipar-
tite connections between v and h. The probability
of an RBM configuration is given by: p(v,h) =
(1/Z)e?E(v,h) where Z is the partition function and
E is the energy function defined as:
E(v,h) = ??iaivi ? ?jbjhj ? ?i,jvihjwij
where ai and bj are biases for corresponding visi-
ble and latent variables respectively, and wij is the
symmetric weight between vi and hj . Given the vis-
ible variables, the latent variables are conditionally
independent of each other, and vice versa:
p(hj = 1|v) = ?(bj +?iviwij) (1)
p(vi = 1|h) = ?(ai +?jhjwij) (2)
where ?(x) = 1/(1 + e?x) (the logistic sigmoid).
RBM based models have been successfully used
in image and video processing, such as Deep Belief
Networks (DBNs) for recognition of hand-written
digits (Hinton et al, 2006) and TRBMs for mod-
eling motion capture data (Taylor et al, 2007). De-
spite their success, RBMs have seen limited use in
the NLP community. Previous work includes RBMs
for topic modeling in text documents (Salakhutdinov
and Hinton, 2009), and Temporal Factored RBM for
language modeling (Mnih and Hinton, 2007).
3.2 Proposed TRBM Model Structure
TRBMs (Taylor et al, 2007) can be used to model
sequences where the decision at each step requires
some context information from the past. Figure 2
12
Figure 2: Proposed TRBM Model. Edges with no arrows
represent undirected RBM connections. The directed
temporal connections between time steps contribute a
bias to the latent layer inference in the current step.
shows our proposed TRBM model with latent to
latent connections between time steps. Each step
has an RBM with weights WRBM composed of
smaller weight matrices corresponding to different
sub-decisions. For instance, for the action Left-Arc,
WRBM consists of RBM weights between the la-
tent vector and the sub-decisions: ?Left-Arc? and
?Label?. Similarly, for the action Shift, the sub-
decisions are ?Shift?, ?Part-of-Speech? and ?Word?.
The probability distribution of a TRBM is:
p(vT1 ,hT1 ) = ?Tt=1p(vt,ht|h(1), ...,h(C))
where vT1 denotes the set of visible vectors from time
steps 1 to T i.e. v1 to vT . The notation for latent
vectors h is similar. h(c) denotes the latent vector
in the past time step that is connected to the current
latent vector through a connection of type c. To sim-
plify notation, we will denote the past connections
{h(1), ...,h(C)} by historyt. The conditional distri-
bution of the RBM at each time step is given by:
p(vt,ht|historyt) = (1/Z)exp(?iaivti +?i,jvtihtjwij
+?j(bj +?c,lw(c)HHljh
(c)
l )htj)
where vti and htj denote the ith visible and jth latent
variable respectively at time step t. h(c)l denotes a
latent variable in the past time step, and w(c)HHlj de-
notes the weight of the corresponding connection.
3.3 TRBM Likelihood and Inference
Section 3.1 describes an RBM where visible vari-
ables can take binary values. In our model, similar to
(Salakhutdinov et al, 2007), we have multi-valued
visible variables which we represent as one-hot bi-
nary vectors and model via a softmax distribution:
p(vtk = 1|ht) =
exp(ak +
?
j htjwkj)
?
i exp(ai +
?
j htjwij)
(3)
Latent variable inference is similar to equation 1
with an additional bias due to the temporal connec-
tions.
?tj = p(htj = 1|vt, historyt)
= ??(bj +?c,lw(c)HHljh
(c)
l +?ivtiwij)?
? ?(b?j +?ivtiwij), (4)
b?j = bj +?c,lw
(c)
HHlj
?(c)l .
Here, ? denotes the mean of the corresponding la-
tent variable. To keep inference tractable, we do not
do any backward reasoning across directed connec-
tions to update ?(c). Thus, the inference procedure
for latent variables takes into account both the parse
history and the current observation, but no future ob-
servations.
The limited set of possible values for the visi-
ble layer makes it possible to marginalize out latent
variables in linear time to compute the exact likeli-
hood. Let vt(k) denote a vector with vtk = 1 and
vti(i 6=k) = 0. The conditional probability of a sub-
decision is:
p(vt(k)|historyt) = (1/Z)?hte?E(v
t(k),ht) (5)
= (1/Z)eak?j(1 + eb
?
j+wkj),
where Z = ?i?visibleeai?j?latent(1 + eb
?
j+wij ).
We actually perform this calculation once for
each sub-decision, ignoring the future sub-decisions
in that time step. This is a slight approximation,
but avoids having to compute the partition function
over all possible combinations of values for all sub-
decisions.1
The complete probability of a derivation is:
p(vT1 ) = p(v1).p(v2|history2)...p(vT |historyT )
3.4 TRBM Training
The gradient of an RBM is given by:
? log p(v)/?wij = ?vihj?data ? ?vihj?model (6)
where ??d denotes the expectation under distribu-
tion d. In general, computing the exact gradient
is intractable and previous work proposed a Con-
trastive Divergence (CD) based learning procedure
that approximates the above gradient using only one
step reconstruction (Hinton, 2002). Fortunately, our
model has only a limited set of possible visible val-
ues, which allows us to use a better approximation
by taking the derivative of equation 5:
1In cases where computing the partition function is still not
feasible (for instance, because of a large vocabulary), sampling
methods could be used. However, we did not find this to be
necessary.
13
? log p(vt(k)|historyt)
?wij
=
(?ki ? p(vt(i)|historyt)) ?(b
?
j + wij)
(7)
Further, the weights on the temporal connections
are learned by back-propagating the likelihood gra-
dients through the directed links between steps.
The back-proped gradient from future time steps is
also used to train the current RBM weights. This
back-propagation is similar to the Recurrent TRBM
model of Sutskever et al (2008). However, unlike
their model, we do not use CD at each step to com-
pute gradients.
3.5 Prediction
We use the same beam-search decoding strategy as
used in (Titov and Henderson, 2007b). Given a
derivation prefix, its partial parse tree and associ-
ated TRBM, the decoder adds a step to the TRBM
for calculating the probabilities of hypothesized next
decisions using equation 5. If the decoder selects a
decision for addition to the candidate list, then the
current step?s latent variable means are inferred us-
ing equation 4, given that the chosen decision is now
visible. These means are then stored with the new
candidate for use in subsequent TRBM calculations.
4 Experiments & Results
We used syntactic dependencies from the English
section of the CoNLL 2009 shared task dataset
(Hajic? et al, 2009). Standard splits of training, de-
velopment and test sets were used. To handle word
sparsity, we replaced all the (POS, word) pairs with
frequency less than 20 in the training set with (POS,
UNKNOWN), giving us only 4530 tag-word pairs.
Since our model can work only with projective trees,
we used MaltParser (Nivre et al, 2006a) to projec-
tivize/deprojectivize the training input/test output.
4.1 Results
Table 1 lists the labeled (LAS) and unlabeled (UAS)
attachment scores. Row a shows that a simple ISBN
model without features, using feed forward infer-
ence procedure, does not work well. As explained
in section 2, this is expected since in the absence of
explicit features, the latent variables in a given layer
do not take into account the observations in the pre-
vious layers. The huge improvement in performance
Model LAS UAS
a. ISBN w/o features 38.38 54.52
b. ISBN w/ features 88.65 91.44
c. TRBM w/o features 86.01 89.78
d. TRBM w/ features 88.72 91.65
e. MST (McDonald et al, 2005) 87.07 89.95
f . Malt??AE (Hall et al, 2007) 85.96 88.64
g. MSTMalt (Nivre and McDonald, 2008) 87.45 90.22
h. CoNLL 2008 #1 (Johansson and Nugues, 2008) 90.13 92.45
i. ensemble3100% (Surdeanu and Manning, 2010) 88.83 91.47
j. CoNLL 2009 #1 (Bohnet, 2009) 89.88 unknown
Table 1: LAS and UAS for different models.
on adding the features (row b) shows that the feed
forward inference procedure for ISBNs relies heav-
ily on these feature connections to compensate for
the lack of backward inference.
The TRBM model avoids this problem as the in-
ference procedure takes into account the current ob-
servation, which makes the latent variables much
more informed. However, as row c shows, the
TRBM model without features falls a bit short of
the ISBN performance, indicating that features are
indeed a powerful substitute for backward inference
in sequential latent variable models. TRBM mod-
els would still be preferred in cases where such fea-
ture engineering is difficult or expensive, or where
the objective is to compute the latent features them-
selves. For a fair comparison, we add the same set
of features to the TRBM model (row d) and the per-
formance improves by about 2% to reach the same
level (non-significantly better) as ISBN with fea-
tures. The improved inference in TRBM does how-
ever come at the cost of increased training and test-
ing time. Keeping the same likelihood convergence
criteria, we could train the ISBN in about 2 days and
TRBM in about 5 days on a 3.3 GHz Xeon proces-
sor. With the same beam search parameters, the test
time was about 1.5 hours for ISBN and about 4.5
hours for TRBM. Although more code optimization
is possible, this trend is likely to remain.
We also tried a Contrastive Divergence based
training procedure for TRBM instead of equation
7, but that resulted in about an absolute 10% lower
LAS. Further, we also tried a very simple model
without latent variables where temporal connections
are between decision variables themselves. This
14
model gave an LAS of only 60.46%, which indi-
cates that without latent variables, it is very difficult
to capture the parse history.
For comparison, we also include the performance
numbers for some state-of-the-art dependency pars-
ing systems. Surdeanu and Manning (2010) com-
pare different parsing models using CoNLL 2008
shared task dataset (Surdeanu et al, 2008), which
is the same as our dataset. Rows e? i show the per-
formance numbers of some systems as mentioned in
their paper. Row j shows the best syntactic model
in CoNLL 2009 shared task. The TRBM model has
only 1.4% lower LAS and 0.8% lower UAS com-
pared to the best performing model.
4.2 Latent Layer Analysis
We analyzed the latent layers in our models to see if
they captured semantic patterns. A latent layer is a
vector of 100 latent variables. Every Shift operation
gives a latent representation for the corresponding
word. We took all the verbs in the development set2
and partitioned their representations into 50 clus-
ters using the k-means algorithm. Table 2 shows
some partitions for the TRBM model. The partitions
look semantically meaningful but to get a quantita-
tive analysis, we computed pairwise semantic simi-
larity between all word pairs in a given cluster and
aggregated this number over all the clusters. The se-
mantic similarity was calculated using two different
similarity measures on the wordnet corpus (Miller
et al, 1990): path and lin. path similarity is a score
between 0 and 1, equal to the inverse of the shortest
path length between the two word senses. lin simi-
larity (Lin, 1998) is a score between 0 and 1 based
on the Information Content of the two word senses
and of the Least Common Subsumer. Table 3 shows
the similarity scores.3 We observe that TRBM la-
tent representations give a slightly better clustering
than ISBN models. Again, this is because of the fact
that the inference procedure in TRBMs takes into ac-
count the current observation. However, at the same
time, the similarity numbers for ISBN with features
2Verbs are words corresponding to POS tags: VB, VBD,
VBG, VBN, VBP, VBZ. We selected verbs as they have good
coverage in Wordnet.
3To account for randomness in k-means clustering, the clus-
tering was performed 10 times with random initializations, sim-
ilarity scores were computed for each run and a mean was taken.
Cluster 1 Cluster 2 Cluster 3 Cluster 4
says needed pressing renewing
contends expected bridging cause
adds encouraged curing repeat
insists allowed skirting broken
remarked thought tightening extended
Table 2: K-means clustering of words according to their
TRBM latent representations. Duplicate words in the
same cluster are not shown.
Model path lin
ISBN w/o features 0.228 0.381
ISBN w/features 0.366 0.466
TRBM w/o features 0.386 0.487
TRBM w/ features 0.390 0.489
Table 3: Wordnet similarity scores for clusters given by
different models.
are not very low, which shows that features are a
powerful way to compensate for the lack of back-
ward inference. This is in agreement with their good
performance on the parsing task.
5 Conclusions & Future Work
We have presented a Temporal Restricted Boltz-
mann Machines based model for dependency pars-
ing. The model shows how undirected graphical
models can be used to generate latent representa-
tions of local parsing actions, which can then be
used as features for later decisions.
The TRBM model for dependency parsing could
be extended to a Deep Belief Network by adding
one more latent layer on top of the existing one
(Hinton et al, 2006). Furthermore, as done for
unlabeled images (Hinton et al, 2006), one could
learn high-dimensional features from unlabeled text,
which could then be used to aid parsing. Parser la-
tent representations could also help other tasks such
as Semantic Role Labeling (Henderson et al, 2008).
A free distribution of our implementation is avail-
able at http://cui.unige.ch/
?
garg.
Acknowledgments
This work was partly funded by Swiss NSF grant
200021 125137 and European Community FP7
grant 216594 (CLASSiC, www.classic-project.org).
15
References
Y. Bengio, R. Ducharme, P. Vincent, and C. Janvin. 2003.
A neural probabilistic language model. The Journal of
Machine Learning Research, 3:1137?1155.
B. Bohnet. 2009. Efficient parsing of syntactic and
semantic dependency structures. In Proceedings of
the Thirteenth Conference on Computational Natural
Language Learning: Shared Task, CoNLL ?09, pages
67?72. Association for Computational Linguistics.
R. Collobert and J. Weston. 2008. A unified architecture
for natural language processing: Deep neural networks
with multitask learning. In Proceedings of the 25th
international conference on Machine learning, pages
160?167. ACM.
J. Hajic?, M. Ciaramita, R. Johansson, D. Kawahara, M.A.
Mart??, L. Ma`rquez, A. Meyers, J. Nivre, S. Pado?,
J. ?Ste?pa?nek, et al 2009. The CoNLL-2009 shared
task: Syntactic and semantic dependencies in multiple
languages. In Proceedings of the Thirteenth Confer-
ence on Computational Natural Language Learning:
Shared Task, pages 1?18. Association for Computa-
tional Linguistics.
J. Hall, J. Nilsson, J. Nivre, G. Eryigit, B. Megyesi,
M. Nilsson, and M. Saers. 2007. Single malt or
blended? A study in multilingual parser optimiza-
tion. In Proceedings of the CoNLL Shared Task Ses-
sion of EMNLP-CoNLL 2007, pages 933?939. Associ-
ation for Computational Linguistics.
J. Henderson, P. Merlo, G. Musillo, and I. Titov. 2008.
A latent variable model of synchronous parsing for
syntactic and semantic dependencies. In Proceedings
of the Twelfth Conference on Computational Natural
Language Learning, pages 178?182. Association for
Computational Linguistics.
G.E. Hinton, S. Osindero, and Y.W. Teh. 2006. A fast
learning algorithm for deep belief nets. Neural com-
putation, 18(7):1527?1554.
G.E. Hinton. 2002. Training products of experts by min-
imizing contrastive divergence. Neural Computation,
14(8):1771?1800.
R. Johansson and P. Nugues. 2008. Dependency-
based syntactic-semantic analysis with PropBank and
NomBank. In Proceedings of the Twelfth Conference
on Computational Natural Language Learning, pages
183?187. Association for Computational Linguistics.
D. Lin. 1998. An information-theoretic definition of
similarity. In Proceedings of the 15th International
Conference on Machine Learning, volume 1, pages
296?304.
R. McDonald, F. Pereira, K. Ribarov, and J. Hajic?. 2005.
Non-projective dependency parsing using spanning
tree algorithms. In Proceedings of the conference on
Human Language Technology and Empirical Methods
in Natural Language Processing, pages 523?530. As-
sociation for Computational Linguistics.
G.A. Miller, R. Beckwith, C. Fellbaum, D. Gross, and
K.J. Miller. 1990. Introduction to wordnet: An on-
line lexical database. International Journal of lexicog-
raphy, 3(4):235.
A. Mnih and G. Hinton. 2007. Three new graphical mod-
els for statistical language modelling. In Proceedings
of the 24th international conference on Machine learn-
ing, pages 641?648. ACM.
J. Nivre and R. McDonald. 2008. Integrating graph-
based and transition-based dependency parsers. Pro-
ceedings of ACL-08: HLT, pages 950?958.
J. Nivre, J. Hall, and J. Nilsson. 2004. Memory-based
dependency parsing. In Proceedings of CoNLL, pages
49?56.
J. Nivre, J. Hall, and J. Nilsson. 2006a. MaltParser: A
data-driven parser-generator for dependency parsing.
In Proceedings of LREC, volume 6.
J. Nivre, J. Hall, J. Nilsson, G. Eryiit, and S. Marinov.
2006b. Labeled pseudo-projective dependency pars-
ing with support vector machines. In Proceedings
of the Tenth Conference on Computational Natural
Language Learning, pages 221?225. Association for
Computational Linguistics.
A. Ratnaparkhi. 1999. Learning to parse natural
language with maximum entropy models. Machine
Learning, 34(1):151?175.
R. Salakhutdinov and G. Hinton. 2009. Replicated soft-
max: an undirected topic model. Advances in Neural
Information Processing Systems, 22.
R. Salakhutdinov, A. Mnih, and G. Hinton. 2007. Re-
stricted Boltzmann machines for collaborative filter-
ing. In Proceedings of the 24th international confer-
ence on Machine learning, page 798. ACM.
M. Surdeanu and C.D. Manning. 2010. Ensemble mod-
els for dependency parsing: cheap and good? In Hu-
man Language Technologies: The 2010 Annual Con-
ference of the North American Chapter of the Associ-
ation for Computational Linguistics, pages 649?652.
Association for Computational Linguistics.
M. Surdeanu, R. Johansson, A. Meyers, L. Ma`rquez, and
J. Nivre. 2008. The CoNLL-2008 shared task on
joint parsing of syntactic and semantic dependencies.
In Proceedings of the Twelfth Conference on Compu-
tational Natural Language Learning, pages 159?177.
Association for Computational Linguistics.
I. Sutskever, G. Hinton, and G. Taylor. 2008. The recur-
rent temporal restricted boltzmann machine. In NIPS,
volume 21, page 2008.
G.W. Taylor, G.E. Hinton, and S.T. Roweis. 2007.
Modeling human motion using binary latent variables.
Advances in neural information processing systems,
19:1345.
16
I. Titov and J. Henderson. 2007a. Constituent parsing
with incremental sigmoid belief networks. In Pro-
ceedings of the 45th Annual Meeting on Association
for Computational Linguistics, volume 45, page 632.
I. Titov and J. Henderson. 2007b. Fast and robust mul-
tilingual dependency parsing with a generative latent
variable model. In Proceedings of the CoNLL Shared
Task Session of EMNLP-CoNLL, pages 947?951.
17
Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 145?149,
Jeju, Republic of Korea, 8-14 July 2012. c?2012 Association for Computational Linguistics
Unsupervised Semantic Role Induction with Global Role Ordering
Nikhil Garg
University of Geneva
Switzerland
nikhil.garg@unige.ch
James Henderson
University of Geneva
Switzerland
james.henderson@unige.ch
Abstract
We propose a probabilistic generative model
for unsupervised semantic role induction,
which integrates local role assignment deci-
sions and a global role ordering decision in a
unified model. The role sequence is divided
into intervals based on the notion of primary
roles, and each interval generates a sequence
of secondary roles and syntactic constituents
using local features. The global role ordering
consists of the sequence of primary roles only,
thus making it a partial ordering.
1 Introduction
Unsupervised semantic role induction has gained
significant interest recently (Lang and Lapata,
2011b) due to limited amounts of annotated corpora.
A Semantic Role Labeling (SRL) system should
provide consistent argument labels across different
syntactic realizations of the same verb (Palmer et al,
2005), as in
(a.) [ Mark ]A0 drove [ the car ]A1
(b.) [ The car ]A1 was driven by [ Mark ]A0
This simple example also shows that while certain
local syntactic and semantic features could provide
clues to the semantic role label of a constituent, non-
local features such as predicate voice could provide
information about the expected semantic role se-
quence. Sentence a is in active voice with sequence
(A0, PREDICATE, A1) and sentence b is in passive
voice with sequence (A1, PREDICATE, A0). Addi-
tional global preferences, such as arguments A0 and
A1 rarely repeat in a frame (as seen in the corpus),
could also be useful in addition to local features.
Supervised SRL systems have mostly used local
classifiers that assign a role to each constituent inde-
pendently of others, and only modeled limited cor-
relations among roles in a sequence (Toutanova et
al., 2008). The correlations have been modeled via
role sets (Gildea and Jurafsky, 2002), role repeti-
tion constraints (Punyakanok et al, 2004), language
model over roles (Thompson et al, 2003; Pradhan
et al, 2005), and global role sequence (Toutanova
et al, 2008). Unsupervised SRL systems have ex-
plored even fewer correlations. Lang and Lapata
(2011a; 2011b) use the relative position (left/right)
of the argument w.r.t. the predicate. Grenager and
Manning (2006) use an ordering of the linking of se-
mantic roles and syntactic relations. However, as the
space of possible linkings is large, language-specific
knowledge is used to constrain this space.
Similar to Toutanova et al (2008), we propose to
use global role ordering preferences but in a gener-
ative model in contrast to their discriminative one.
Further, unlike Grenager and Manning (2006), we
do not explicitly generate the linking of semantic
roles and syntactic relations, thus keeping the pa-
rameter space tractable. The main contribution of
this work is an unsupervised model that uses global
role ordering and repetition preferences without as-
suming any language-specific constraints.
Following Gildea and Jurafsky (2002), previous
work has typically broken the SRL task into (i) argu-
ment identification, and (ii) argument classification
(Ma`rquez et al, 2008). The latter is our focus in this
work. Given the dependency parse tree of a sentence
with correctly identified arguments, the aim is to as-
sign a semantic role label to each argument.
145
Algorithm 1 Generative process
?????? PARAMETERS ??????
for all predicate p do
for all voice vc ? {active, passive} do
draw ?orderp,vc ? Dirichlet(?order)
for all interval I do
draw ?SRp,I ? Dirichlet(?SR)
for all adjacency adj ? {0, 1} do
draw ?STOPp,I,adj ? Beta(?STOP )
for all role r ? PR ? SR do
for all feature type f do
draw ?Fp,r,f ? Dirichlet(?F )
???????? DATA ????????
given a predicate p with voice vc:
choose an ordering o ? Multinomial(?orderp,vc )
for all interval I ? o do
draw an indicator s ? Binomial(?STOPp,I,0 )
while s 6= STOP do
choose a SR r ? Multinomial(?SRp,I )
draw an indicator s ? Binomial(?STOPp,I,1 )
for all generated roles r do
for all feature type f do
choose a value vf ? Multinomial(?Fp,r,f )
2 Proposed Model
We assume the roles to be predicate-specific. We
begin by introducing a few terms:
Primary Role (PR) For every predicate, we assume
the existence of K primary roles (PRs) denoted by
P1, P2, ..., PK . These roles are not allowed to re-
peat in a frame and serve as ?anchor points? in the
global role ordering. Intuitively, the model attempts
to choose PRs such that they occur with high fre-
quency, do not repeat, and their ordering influences
the positioning of other roles. Note that a PR may
correspond to either a core role or a modifier role.
For ease of explication, we create 3 additional PRs:
START denoting the start of the role sequence, END
denoting its end, and PRED denoting the predicate.
Secondary Role (SR) The roles that are not PRs are
called secondary roles (SRs). Given N roles in total,
there are (N ?K) SRs, denoted by S1, S2, ..., SN?K .
Unlike PRs, SRs are not constrained to occur only
once in a frame and do not participate in the global
role ordering.
Interval An interval is a sequence of SRs bounded
by PRs, for instance (P2, S3, S5, PRED).
Ordering An ordering is the sequence of PRs ob-
served in a frame. For example, if the complete role
Figure 1: Proposed model. Shaded and unshaded
nodes represent visible and hidden variables resp.
sequence is (START ,P2, S1, S1, PRED, S3, END), the
ordering is defined as (START , P2, PRED, END).
Features We have explored 1 frame level (global)
feature (i) voice: active/passive, and 3 argument
level (local) features (i) deprel: dependency relation
of an argument to its head in the dependency parse
tree, (ii) head: head word of the argument, and (iii)
pos-head: Part-of-Speech tag of head.
Algorithm 1 describes the generative story of our
model and Figure 1 illustrates it graphically. Given a
predicate and its voice, an ordering is selected from
a multinomial. This ordering gives us the sequence
of PRs (PR1, PR2, ..., PRN ). Each pair of consec-
utive PRs, PRi, PRi+1, in an ordering corresponds
to an interval Ii. For each such interval, we generate
0 or more SRs (SRi1, SRi2, ...SRiM ) as follows.
Generate an indicator variable: CONTINUE/STOP
from a binomial distribution. If CONTINUE, gen-
erate a SR from the multinomial corresponding to
the interval. Generate another indicator variable and
continue the process till a STOP has been generated.
In addition to the interval, the indicator variable also
depends on whether we are generating the first SR
(adj = 0) or a subsequent one (adj = 1). For each
role, primary as well as secondary, we now generate
the corresponding constituent by generating each of
its features independently (F1, F2, ..., FT ).
Given a frame instance with predicate p and voice
vc, Figure 2 gives (i) Eq. 1: the joint distribution
of the ordering o, role sequence r, and constituent
sequence f , and (ii) Eq. 2: the marginal distribution
of an instance. The likelihood of the whole corpus
is the product of marginals of individual instances.
146
P (o, r, f |p, vc) = P (o|p, vc)
? ?? ?
ordering
? ?{ri?r?PR}P (fi|ri, p)
? ?? ?
Primary Roles
? ?{I?o}P (r(I), f(I)|I, p)
? ?? ?
Intervals
(1)
where P (r(I), f(I)|I, p) =
?
ri?r(I)
P (continue|I, p, adj)
? ?? ?
generate indicator
P (ri|I, p)
? ?? ?
generate SR
P (fi|ri, p)
? ?? ?
generate features
? P (stop|I, p, adj)
? ?? ?
end of the interval
and P (fi|ri, p) = ?tP (fi,t|ri, p)
P (f |p, vc) = ?o?{r?seq(o)}P (o, r, f |p, vc) where seq(o) = {role sequences allowed under ordering o} (2)
Figure 2: ri and fi denote the role and features at position i respectively, and r(I) and f(I) respectively
denote the SR sequence and feature sequence in interval I . fi,t denotes the value of feature t at position i.
This particular choice of model is inspired from
different sources. Firstly, making the role order-
ing dependent only on PRs aligns with the obser-
vation by Pradhan et al (2005) and Toutanova et
al. (2008) that including the ordering information
of only core roles helped improve the SRL perfor-
mance as opposed to the complete role sequence.
Although our assumption here is softer in that we
assume the existence of some roles which define
the ordering which may or may not correspond to
core roles. Secondly, generating the SRs indepen-
dently of each other given the interval is based on
the intuition that knowing the core roles informs
us about the expected non-core roles that occur be-
tween them. This intuition is supported by the statis-
tics in the annotated data, where we found that if we
consider the core roles as PRs, then most of the in-
tervals tend to have only a few types of SRs and a
given SR tends to occur only in a few types of in-
tervals. The concept of intervals is also related to
the linguistic theory of topological fields (Diderich-
sen, 1966; Drach, 1937). This simplifying assump-
tion that given the PRs at the interval boundary, the
SRs in that interval are independent of the other
roles in the sequence, keeps the parameter space lim-
ited, which helps unsupervised learning. Thirdly,
not allowing some or all roles to repeat has been
employed as a useful constraint in previous work
(Punyakanok et al, 2004; Lang and Lapata, 2011b),
which we use here for PRs. Lastly, conditioning the
(STOP/CONTINUE) indicator variable on the adja-
cency value (adj) is inspired from the DMV model
(Klein and Manning, 2004) for unsupervised depen-
dency parsing. We found in the annotated corpus
that if we map core roles to PRs, then most of the
time the intervals do not generate any SRs at all. So,
the probability to STOP should be very high when
generating the first SR.
We use an EM procedure to train the model. In
the E-step, we calculate the expected counts of all
the hidden variables in our model using the Inside-
Outside algorithm (Baker, 1979). In the M-step, we
add the counts corresponding to the Bayesian priors
to the expected counts and use the resulting counts
to calculate the MAP estimate of the parameters.
3 Experiments
Following the experimental settings of Lang and La-
pata (2011b), we use the CoNLL 2008 shared task
dataset (Surdeanu et al, 2008), only consider ver-
bal predicates, and run unsupervised training on the
standard training set. The evaluation measures are
also the same: (i) Purity (PU) that measures how
well an induced cluster corresponds to a single gold
role, (ii) Collocation (CO) that measures how well
a gold role corresponds to a single induced cluster,
and (iii) F1 which is the harmonic mean of PU and
CO. Final scores are computed by weighting each
predicate by the number of its argument instances.
We chose a uniform Dirichlet prior with concentra-
tion parameter as 0.1 for all the model parameters
in Algorithm 1 (set roughly, without optimization1).
50 training iterations were used.
3.1 Results
Since the dataset has 21 semantic roles in total, we
fix the total number of roles in our model to be 21.
Further, we set the number of PRs to 2 (excluding
START , END and PRED), and SRs to 21-2=19.
1Removing the Bayesian priors completely, resulted in the
EM algorithm getting to a local maxima quite early, giving a
substantially lower performance.
147
Model Features PU CO F1
0 Baseline2 d 81.6 78.1 79.8
1a Proposed d 82.3 78.6 80.4
1b Proposed d,h 82.7 77.2 79.9
1c Proposed d,p-h 83.5 78.5 80.9
1d Proposed d,p-h,h 83.2 77.1 80.0
Table 1: Evaluation. d refers to deprel, h refers to
head and p-h refers to pos-head.
Table 1 gives the results using different feature
combinations. Line 0 reports the performance of
Lang and Lapata (2011b)?s baseline, which has been
shown difficult to outperform. This baseline maps
20 most frequent deprel to a role each, and the rest
are mapped to the 21st role. By just using deprel as
a feature, the proposed model outperforms the base-
line by 0.6 points in terms of F1 score. In this con-
figuration, the only addition over the baseline is the
ordering model. Adding head as a feature leads to
sparsity, which results in a substantial decrease in
collocation (lines 1b and 1d). However, just adding
pos-head (line 1c) does not cause this problem and
gives the best F1 score. To address sparsity, we in-
duced a distributed hidden representation for each
word via a neural network, capturing the semantic
similarity between words. Preliminary experiments
improved the F1 score when using this word repre-
sentation as a feature instead of the word directly.
Lang and Lapata (2011b) give the results of three
methods on this task. In terms of F1 score, the La-
tent Logistic and Graph Partitioning methods result
in slight reduction in performance over the baseline,
while the Split-Merge method results in an improve-
ment of 0.6 points. Table 1, line 1c achieves an im-
provement of 1.1 points over the baseline.
3.2 Further Evaluation
Table 2 shows the variation in performance w.r.t.
the number of PRs3 in the best performing config-
uration (Table 1, line 1c). On one extreme, when
there are 0 PRs, there are only two possible in-
tervals: (START,PRED) and (PRED,END) which
means that the only context information a SR has
is whether it is to the left or right of the predicate.
2The baseline F1 reported by Lang and Lapata (2011b) is
79.5 due to a bug in their system (personal communication).
3Note that the system might not use all available PRs to label
a given frame instance. #PRs refers to the max #PRs.
# PRs PU CO F1
0 81.67 78.07 79.83
1 82.91 78.99 80.90
2 83.54 78.47 80.93
3 83.68 78.23 80.87
4 83.72 78.08 80.80
Table 2: Performance variation with the number of
PRs (excluding START , END and PRED)
With only this additional ordering information, the
performance is the same as the baseline. Adding just
1 PR leads to a big increase in both purity and col-
location. Increasing the number of PRs beyond 1
leads to a gradual increase in purity and decline in
collocation, with the best F1 score at 2 PRs. This
behavior could be explained by the fact that increas-
ing the number of PRs also increases the number of
intervals, which makes the probability distributions
more sparse. In the extreme case, where all the roles
are PRs and there are no SRs, the model would just
learn the complete sequence of roles, which would
make the parameter space too large to be tractable.
For calculating purity, each induced cluster (or
role) is mapped to a particular gold role that has
the maximum instances in the cluster. Analyzing the
output of our model (line 1c in Table 1), we found
that about 98% of the PRs and 40% of the SRs got
mapped to the gold core roles (A0,A1, etc.). This
suggests that the model is indeed following the intu-
ition that (i) the ordering of core roles is important
information for SRL systems, and (ii) the intervals
bounded by core roles provide good context infor-
mation for classification of other roles.
4 Conclusions
We propose a unified generative model for unsu-
pervised semantic role induction that incorporates
global role correlations as well as local feature infor-
mation. The results indicate that a small number of
ordered primary roles (PRs) is a good representation
of global ordering constraints for SRL. This repre-
sentation keeps the parameter space small enough
for unsupervised learning.
Acknowledgments
This work was funded by the Swiss NSF grant
200021 125137 and EC FP7 grant PARLANCE.
148
References
J.K. Baker. 1979. Trainable grammars for speech recog-
nition. The Journal of the Acoustical Society of Amer-
ica, 65:S132.
P. Diderichsen. 1966. Elementary Danish Grammar.
Gyldendal, Copenhagen.
E. Drach. 1937. Grundstellung der Deutschen Satzlehre.
Diesterweg, Frankfurt.
D. Gildea and D. Jurafsky. 2002. Automatic label-
ing of semantic roles. Computational Linguistics,
28(3):245?288.
T. Grenager and C.D. Manning. 2006. Unsupervised dis-
covery of a statistical verb lexicon. In Proceedings of
the 2006 Conference on Empirical Methods in Natu-
ral Language Processing, pages 1?8. Association for
Computational Linguistics.
D. Klein and C.D. Manning. 2004. Corpus-based in-
duction of syntactic structure: Models of dependency
and constituency. In Proceedings of the 42nd Annual
Meeting on Association for Computational Linguis-
tics, page 478. Association for Computational Linguis-
tics.
J. Lang and M. Lapata. 2011a. Unsupervised semantic
role induction via split-merge clustering. In Proceed-
ings of the 49th Annual Meeting of the Association for
Computational Linguistics, Portland, Oregon.
J. Lang and M. Lapata. 2011b. Unsupervised seman-
tic role induction with graph partitioning. In Proceed-
ings of the 2011 Conference on Empirical Methods in
Natural Language Processing, pages 1320?1331, Ed-
inburgh, Scotland, UK., July. Association for Compu-
tational Linguistics.
L. Ma`rquez, X. Carreras, K.C. Litkowski, and S. Steven-
son. 2008. Semantic role labeling: an introduc-
tion to the special issue. Computational linguistics,
34(2):145?159.
M. Palmer, D. Gildea, and P. Kingsbury. 2005. The
proposition bank: An annotated corpus of semantic
roles. Computational Linguistics, 31(1):71?106.
S. Pradhan, K. Hacioglu, V. Krugler, W. Ward, J.H. Mar-
tin, and D. Jurafsky. 2005. Support vector learning for
semantic argument classification. Machine Learning,
60(1):11?39.
V. Punyakanok, D. Roth, W. Yih, and D. Zimak. 2004.
Semantic role labeling via integer linear programming
inference. In Proceedings of the 20th international
conference on Computational Linguistics, page 1346.
Association for Computational Linguistics.
M. Surdeanu, R. Johansson, A. Meyers, L. Ma`rquez, and
J. Nivre. 2008. The conll-2008 shared task on joint
parsing of syntactic and semantic dependencies. In
Proceedings of the Twelfth Conference on Computa-
tional Natural Language Learning, pages 159?177.
Association for Computational Linguistics.
C. Thompson, R. Levy, and C. Manning. 2003. A gen-
erative model for semantic role labeling. Machine
Learning: ECML 2003, pages 397?408.
K. Toutanova, A. Haghighi, and C.D. Manning. 2008. A
global joint model for semantic role labeling. Compu-
tational Linguistics, 34(2):161?191.
149
