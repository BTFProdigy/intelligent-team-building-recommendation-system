Tuning Support Vector Machines for Biomedical Named Entity Recognition
Jun?ichi Kazama? Takaki Makino? Yoshihiro Ohta? Jun?ichi Tsujii? ?
? Department of Computer Science, Graduate School of Information Science and Technology,
University of Tokyo, Bunkyo-ku, Tokyo 113-0033, Japan
? Department of Complexity Science and Engineering, Graduate School of Frontier Sciences,
University of Tokyo, Bunkyo-ku, Tokyo 113-0033, Japan
? Central Research Laboratory, Hitachi, Ltd., Kokubunji, Tokyo 185-8601, Japan
? CREST, JST (Japan Science and Technology Corporation)
Abstract
We explore the use of Support Vector Ma-
chines (SVMs) for biomedical named en-
tity recognition. To make the SVM train-
ing with the available largest corpus ? the
GENIA corpus ? tractable, we propose to
split the non-entity class into sub-classes,
using part-of-speech information. In ad-
dition, we explore new features such as
word cache and the states of an HMM
trained by unsupervised learning. Experi-
ments on the GENIA corpus show that our
class splitting technique not only enables
the training with the GENIA corpus but
also improves the accuracy. The proposed
new features also contribute to improve
the accuracy. We compare our SVM-
based recognition system with a system
using Maximum Entropy tagging method.
1 Introduction
Application of natural language processing (NLP) is
now a key research topic in bioinformatics. Since
it is practically impossible for a researcher to grasp
all of the huge amount of knowledge provided in
the form of natural language, e.g., journal papers,
there is a strong demand for biomedical information
extraction (IE), which extracts knowledge automati-
cally from biomedical papers using NLP techniques
(Ohta et al, 1997; Proux et al, 2000; Yakushiji et
al., 2001).
The process called named entity recognition,
which finds entities that fill the information slots,
e.g., proteins, DNAs, RNAs, cells etc., in the
biomedical context, is an important building block in
such biomedical IE systems. Conceptually, named
entity recognition consists of two tasks: identifica-
tion, which finds the region of a named entity in
a text, and classification, which determines the se-
mantic class of that named entity. The following il-
lustrates biomedical named entity recognition.
?Thus, CIITAPROTEIN not only acti-
vates the expression of class II genesDNA
but recruits another B cell-specific
coactivator to increase transcriptional
activity of class II promotersDNA in
B cellsCELLTYPE.?
Machine learning approach has been applied to
biomedical named entity recognition (Nobata et al,
1999; Collier et al, 2000; Yamada et al, 2000;
Shimpuku, 2002). However, no work has achieved
sufficient recognition accuracy. One reason is the
lack of annotated corpora for training as is often
the case of a new domain. Nobata et al (1999) and
Collier et al (2000) trained their model with only
100 annotated paper abstracts from the MEDLINE
database (National Library of Medicine, 1999), and
Yamada et al (2000) used only 77 annotated paper
abstracts. In addition, it is difficult to compare the
techniques used in each study because they used a
closed and different corpus.
To overcome such a situation, the GENIA cor-
pus (Ohta et al, 2002) has been developed, and at
this time it is the largest biomedical annotated cor-
pus available to public, containing 670 annotated ab-
stracts of the MEDLINE database.
Another reason for low accuracies is that biomed-
ical named entities are essentially hard to recognize
using standard feature sets compared with the named
entities in newswire articles (Nobata et al, 2000).
Thus, we need to employ powerful machine learning
techniques which can incorporate various and com-
plex features in a consistent way.
Support Vector Machines (SVMs) (Vapnik, 1995)
and Maximum Entropy (ME) method (Berger et al,
1996) are powerful learning methods that satisfy
such requirements, and are applied successfully to
other NLP tasks (Kudo and Matsumoto, 2000; Nak-
agawa et al, 2001; Ratnaparkhi, 1996). In this pa-
per, we apply Support Vector Machines to biomed-
ical named entity recognition and train them with
                                            Association for Computational Linguistics.
                              the Biomedical Domain, Philadelphia, July 2002, pp. 1-8.
                         Proceedings of the Workshop on Natural Language Processing in
the GENIA corpus. We formulate the named entity
recognition as the classification of each word with
context to one of the classes that represent region
and named entity?s semantic class. Although there
is a previous work that applied SVMs to biomedi-
cal named entity task in this formulation (Yamada et
al., 2000), their method to construct a classifier us-
ing SVMs, one-vs-rest, fails to train a classifier with
entire GENIA corpus, since the cost of SVM train-
ing is super-linear to the size of training samples.
Even with a more feasible method, pairwise (Kre?el,
1998), which is employed in (Kudo and Matsumoto,
2000), we cannot train a classifier in a reasonable
time, because we have a large number of samples
that belong to the non-entity class in this formula-
tion. To solve this problem, we propose to split the
non-entity class to several sub-classes, using part-of-
speech information. We show that this technique not
only enables the training feasible but also improves
the accuracy.
In addition, we explore new features such as word
cache and the states of an unsupervised HMM for
named entity recognition using SVMs. In the exper-
iments, we show the effect of using these features
and compare the overall performance of our SVM-
based recognition system with a system using the
Maximum Entropy method, which is an alternative
to the SVM method.
2 The GENIA Corpus
The GENIA corpus is an annotated corpus of pa-
per abstracts taken from the MEDLINE database.
Currently, 670 abstracts are annotated with named
entity tags by biomedical experts and made avail-
able to public (Ver. 1.1).1 These 670 abstracts are a
subset of more than 5,000 abstracts obtained by the
query ?human AND blood cell AND transcription
factor? to the MEDLINE database. Table 1 shows
basic statistics of the GENIA corpus. Since the GE-
NIA corpus is intended to be extensive, there exist
24 distinct named entity classes in the corpus.2 Our
task is to find a named entity region in a paper ab-
stract and correctly select its class out of these 24
classes. This number of classes is relatively large
compared with other corpora used in previous stud-
ies, and compared with the named entity task for
newswire articles. This indicates that the task with
the GENIA corpus is hard, apart from the difficulty
of the biomedical domain itself.
1Available via http://www-tsujii.is.s.u-tokyo.ac.jp/GENIA/
2The GENIA corpus also has annotations for conjunc-
tive/disjunctive named entity expressions such as ?human B- or
T-cell lines? (Kim et al, 2001). In this paper we ignore such
expressions and consider that constituents in such expressions
are annotated as a dummy class ?temp?.
Table 1: Basic statistics of the GENIA corpus
# of sentences 5,109
# of words 152,216
# of named entities 23,793
# of words in NEs 50,229
# of words not in NEs 101,987
Av. length of NEs (?) 2.11 (1.40)
3 Named Entity Recognition Using SVMs
3.1 Named Entity Recognition as Classification
We formulate the named entity task as the classi-
fication of each word with context to one of the
classes that represent region information and named
entity?s semantic class. Several representations to
encode region information are proposed and exam-
ined (Ramshaw and Marcus, 1995; Uchimoto et al,
2000; Kudo and Matsumoto, 2001). In this paper,
we employ the simplest BIO representation, which
is also used in (Yamada et al, 2000). We modify
this representation in Section 5.1 in order to acceler-
ate the SVM training.
In the BIO representation, the region information
is represented as the class prefixes ?B-? and ?I-?, and
a class ?O?. B- means that the current word is at the
beginning of a named entity, I- means that the cur-
rent word is in a named entity (but not at the be-
ginning), and O means the word is not in a named
entity. For each named entity class C, class B-C and
I-C are produced. Therefore, if we have N named
entity classes, the BIO representation yields 2N + 1
classes, which will be the targets of a classifier. For
instance, the following corresponds to the annota-
tion ?Number of glucocorticoid receptorsPROTEIN in
lymphocytesCELLTYPE and ...?.
Number of glucocorticoid receptors
O O B-PROTEIN I-PROTEIN
in lymphocytes and ...
O B-CELLTYPE O ...
3.2 Support Vector Machines
Support Vector Machines (SVMs) (Cortes and Vap-
nik, 1995) are powerful methods for learning a clas-
sifier, which have been applied successfully to many
NLP tasks such as base phrase chunking (Kudo and
Matsumoto, 2000) and part-of-speech tagging (Nak-
agawa et al, 2001).
The SVM constructs a binary classifier that out-
puts +1 or ?1 given a sample vector x ? Rn. The de-
cision is based on the separating hyperplane as fol-
lows.
c(x) =
?????
+1 if w ? x + b > 0, w ? Rn, b ? R,
?1 otherwise
The class for an input x, c(x), is determined by see-
ing which side of the space separated by the hyper-
plane, w ? x + b = 0, the input lies on.
Given a set of labeled training samples
{(y1, x1), ? ? ? , (yL, xL)}, xi ? Rn, yi ? {+1,?1},
the SVM training tries to find the optimal hy-
perplane, i.e., the hyperplane with the maximum
margin. Margin is defined as the distance between
the hyperplane and the training samples nearest
to the hyperplane. Maximizing the margin insists
that these nearest samples (support vectors) exist
on both sides of the separating hyperplane and the
hyperplane lies exactly at the midpoint of these
support vectors. This margin maximization tightly
relates to the fine generalization power of SVMs.
Assuming that |w?xi+b| = 1 at the support vectors
without loss of generality, the SVM training can be
formulated as the following optimization problem.3
minimize 1
2
||w||2
subject to yi(w ? xi + b) ? 1, i = 1, ? ? ? , L.
The solution of this problem is known to be written
as follows, using only support vectors and weights
for them.
f (x) = w ? x + b=
?
i?S V s
yi?ix ? xi + b (1)
In the SVM learning, we can use a function k(xi, x j)
called a kernel function instead of the inner prod-
uct in the above equation. Introducing a kernel
function means mapping an original input x using
?(x), s.t. ?(xi) ??(x j) = k(xi, x j) to another, usually
a higher dimensional, feature space. We construct
the optimal hyperplane in that space. By using ker-
nel functions, we can construct a non-linear separat-
ing surface in the original feature space. Fortunately,
such non-linear training does not increase the com-
putational cost if the calculation of the kernel func-
tion is as cheap as the inner product. A polynomial
function defined as (sxi ? x j + r)d is popular in ap-
plications of SVMs to NLPs (Kudo and Matsumoto,
2000; Yamada et al, 2000; Kudo and Matsumoto,
2001), because it has an intuitively sound interpre-
tation that each dimension of the mapped space is a
3For many real-world problems where the samples may be
inseparable, we allow the constraints are broken with some
penalty. In the experiments, we use so-called 1-norm soft mar-
gin formulation described as:
minimize 1
2
||w||2 + C
L?
i=1
?i
subject to yi(w ? xi + b) ? 1 ? ?i, i = 1, ? ? ? , L,
?i ? 0, i = 1, ? ? ? , L.
(weighted) conjunction of d features in the original
sample.
3.3 Multi-Class SVMs
As described above, the standard SVM learning con-
structs a binary classifier. To make a named entity
recognition system based on the BIO representation,
we require a multi-class classifier. Among several
methods for constructing a multi-class SVM (Hsu
and Lin, 2002), we use a pairwise method proposed
by Kre?el (1998) instead of the one-vs-rest method
used in (Yamada et al, 2000), and extend the BIO
representation to enable the training with the entire
GENIA corpus. Here we describe the one-vs-rest
method and the pairwise method to show the neces-
sity of our extension.
Both one-vs-rest and pairwise methods construct
a multi-class classifier by combining many binary
SVMs. In the following explanation, K denotes the
number of the target classes.
one-vs-rest Construct K binary SVMs, each of
which determines whether the sample should
be classified as class i or as the other classes.
The output is the class with the maximum f (x)
in Equation 1.
pairwise Construct K(K ? 1)/2 binary SVMs, each
of which determines whether the sample should
be classified as class i or as class j. Each binary
SVM has one vote, and the output is the class
with the maximum votes.
Because the SVM training is a quadratic optimiza-
tion program, its cost is super-linear to the size of the
training samples even with the tailored techniques
such as SMO (Platt, 1998) and kernel evaluation
caching (Joachims, 1998). Let L be the number of
the training samples, then the one-vs-rest method
takes time in K ? OS V M(L). The BIO formula-
tion produces one training sample per word, and
the training with the GENIA corpus involves over
100,000 training samples as can be seen from Ta-
ble 1. Therefore, it is apparent that the one-vs-
rest method is impractical with the GENIA corpus.
On the other hand, if target classes are equally dis-
tributed, the pairwise method will take time in K(K?
1)/2?OS V M(2L/K). This method is worthwhile be-
cause each training is much faster, though it requires
the training of (K ? 1)/2 times more classifiers. It
is also reported that the pairwise method achieves
higher accuracy than other methods in some bench-
marks (Kre?el, 1998; Hsu and Lin, 2002).
3.4 Input Features
An input x to an SVM classifier is a feature repre-
sentation of the word to be classified and its context.
We use a bit-vector representation, each dimension
of which indicates whether the input matches with
a certain feature. The following illustrates the well-
used features for the named entity recognition task.
wk,i =
???????????
1 if a word at k,Wk, is the ith word
in the vocabularyV
0 otherwise (word feature)
posk,i =
???????????
1 if Wk is assigned the ith POS tag
in the POS tag list POS
0 otherwise (part-of-speech feature)
prek,i =
???????????
1 if Wk starts with the ith prefix
in the prefix list P
0 otherwise (prefix feature)
suf k,i =
???????????
1 if Wk starts with the ith suffix
in the suffix list S
0 otherwise (suffix feature)
subk,i =
???????????
1 if Wk contains the ith substring
in the substring list SB
0 otherwise (substring feature)
pck,i =
?????
1 if Wk(k < 0) was assigned ith class
0 otherwise (preceding class feature)
In the above definitions, k is a relative word position
from the word to be classified. A negative value rep-
resents a preceding word?s position, and a positive
value represents a following word?s position. Note
that we assume that the classification proceeds left
to right as can be seen in the definition of the pre-
ceding class feature. For the SVM classification, we
does not use a dynamic argmax-type classification
such as the Viterbi algorithm, since it is difficult to
define a good comparable value for the confidence of
a prediction such as probability. The consequences
of this limitation will be discussed with the experi-
mental results.
Features usually form a group with some vari-
ables such as the position unspecified. In this paper,
we instantiate all features, i.e., instantiate for all i,
for a group and a position. Then, it is convenient to
denote a set of features for a group g and a position
k as gk (e.g., wk and posk). Using this notation, we
write a feature set as {w?1,w0, pre?1, pre0, pc?1}.4
This feature description derives the following input
vector.5
x = {w?1,1,w?1,2, ? ? ? ,w?1,|V|,w0,1, ? ? ? ,w0,|V|,
pre?1,1, ? ? ? , pre0,|P|, pc?1,1, ? ? ? , pc?1,K}
4We will further compress this as {?w, pre?[?1,0], pc?1}.
5Although a huge number of features are instantiated, only
a few features have value one for a given g and k pair.
4 Named Entity Recognition Using ME
Model
The Maximum Entropy method, with which we
compare our SVM-based method, defines the prob-
ability that the class is c given an input vector x as
follows.
P(c|x) = 1
Z(x)
?
i
? fi(c,x)i ,
where Z(x) is a normalization constant, and fi(c, x)
is a feature function. A feature function is defined
in the same way as the features in the SVM learn-
ing, except that it includes c in it like f (c, x) =
(c is the jth class) ? wi,k(x). If x contains pre-
viously assigned classes, then the most probable
class sequence, c?T1 = argmaxc1,??? ,cT
?T
t=1 P(ct|xt) is
searched by using the Viterbi-type algorithm. We
use the maximum entropy tagging method described
in (Kazama et al, 2001) for the experiments, which
is a variant of (Ratnaparkhi, 1996) modified to use
HMM state features.
5 Tuning of SVMs for Biomedical NE Task
5.1 Class Splitting Technique
In Section 3.3, we described that if target classes are
equally distributed, the pairwise method will reduce
the training cost. In our case, however, we have a
very unbalanced class distribution with a large num-
ber of samples belonging to the class ?O? (see Table
1). This leads to the same situation with the one-vs-
rest method, i.e., if LO is the number of the samples
belonging to the class ?O?, then the most dominant
part of the training takes time in K ? OS V M(LO).
One solution to this unbalanced class distribution
problem is to split the class ?O? into several sub-
classes effectively. This will reduce the training cost
for the same reason that the pairwise method works.
In this paper, we propose to split the non-entity
class according to part-of-speech (POS) informa-
tion of the word. That is, given a part-of-speech
tag set POS, we produce new |POS| classes, ?O-
p? p ? POS. Since we use a POS tagger that out-
puts 45 Penn Treebank?s POS tags in this paper, we
have new 45 sub-classes which correspond to non-
entity regions such as ?O-NNS? (plural nouns), ?O-
JJ? (adjectives), and ?O-DT? (determiners).
Splitting by POS information seems useful for im-
proving the system accuracy as well, because in the
named entity recognition we must discriminate be-
tween nouns in named entities and nouns in ordi-
nal noun phrases. In the experiments, we show this
class splitting technique not only enables the feasi-
ble training but also improves the accuracy.
5.2 Word Cache and HMM Features
In addition to the standard features, we explore word
cache feature and HMM state feature, mainly to
solve the data sparseness problem.
Although the GENIA corpus is the largest anno-
tated corpus for the biomedical domain, it is still
small compared with other linguistic annotated cor-
pora such as the Penn Treebank. Thus, the data
sparseness problem is severe, and must be treated
carefully. Usually, the data sparseness is prevented
by using more general features that apply to a
broader set of instances (e.g., disjunctions). While
polynomial kernels in the SVM learning can effec-
tively generate feature conjunctions, kernel func-
tions that can effectively generate feature disjunc-
tions are not known. Thus, we should explicitly add
dimensions for such general features.
The word cache feature is defined as the disjunc-
tion of several word features as:
wck{k1,??? ,kn},i ? ?k?kwk,i
We intend that the word cache feature captures the
similarities of the patterns with a common key word
such as follows.
(a) ?human W?2 W?1 W0? and ?human W?1 W0?
(b) ?W0 gene? and ?W0 W1 gene?
We use a left word cache defined as lwck,i ?
wc{?k,??? ,0},i, and a right word cache defined as
rwck,i ? wc{1,??? ,k},i for patterns like (a) and (b) in
the above example respectively.
Kazama et al (2001) proposed to use as features
the Viterbi state sequence of a hidden Markov model
(HMM) to prevent the data sparseness problem in
the maximum entropy tagging model. An HMM is
trained with a large number of unannotated texts by
using an unsupervised learning method. Because
the number of states of the HMM is usually made
smaller than |V|, the Viterbi states give smoothed
but maximally informative representations of word
patterns tuned for the domain, from which the raw
texts are taken.
The HMM feature is defined in the same way as
the word feature as follows.
hmmk,i =
???????????
1 if the Viterbi state for Wk is
the ith state in the HMM?s statesH
0 otherwise (HMM feature)
In the experiments, we train an HMM using raw
MEDLINE abstracts in the GENIA corpus, and
show that the HMM state feature can improve the
accuracy.
5.3 Implementation Issues
Towards practical named entity recognition using
SVMs, we have tackled the following implementa-
tion issues. It would be impossible to carry out the
experiments in a reasonable time without such ef-
forts.
Parallel Training: The training of pairwise SVMs
has trivial parallelism, i.e., each SVM can be trained
separately. Since computers with two or more CPUs
are not expensive these days, parallelization is very
practical solution to accelerate the training of pair-
wise SVMs.
Fast Winner Finding: Although the pairwise
method reduces the cost of training, it greatly in-
creases the number of classifications needed to de-
termine the class of one sample. For example, for
our experiments using the GENIA corpus, the BIO
representation with class splitting yields more than
4,000 classification pairs. Fortunately, we can stop
classifications when a class gets K ? 1 votes and this
stopping greatly saves classification time (Kre?el,
1998). Moreover, we can stop classifications when
the current votes of a class is greater than the others?
possible votes.
Support Vector Caching: In the pairwise method,
though we have a large number of classifiers, each
classifier shares some support vectors with other
classifiers. By storing the bodies of all support vec-
tors together and letting each classifier have only the
weights, we can greatly reduce the size of the clas-
sifier. The sharing of support vectors also can be
exploited to accelerate the classification by caching
the value of the kernel function between a support
vector and a classifiee sample.
6 Experiments
To conduct experiments, we divided 670 abstracts
of the GENIA corpus (Ver. 1.1) into the train-
ing part (590 abstracts; 4,487 sentences; 133,915
words) and the test part (80 abstracts; 622 sen-
tences; 18,211 words).6 Texts are tokenized by us-
ing Penn Treebank?s tokenizer. An HMM for the
HMM state features was trained with raw abstracts
of the GENIA corpus (39,116 sentences).7 The
number of states is 160. The vocabulary for the
word feature is constructed by taking the most fre-
quent 10,000 words from the above raw abstracts,
the prefix/suffix/prefix list by taking the most fre-
quent 10,000 prefixes/suffixes/substrings.8
The performance is measured by precision, recall,
and F-score, which are the standard measures for the
6Randomly selected set used in (Shimpuku, 2002). We do
not use paper titles, while he used.
7These do not include the sentences in the test part.
8These are constructed using the training part to make the
comparison with the ME method fair.
Table 2: Training time and accuracy with/without
the class splitting technique. The number of training
samples includes SOS and EOS (special words for
the start/end of a sentence).
no splitting splitting
training time acc. time acc.
samples (sec.) (F-score) (sec.) (F-
score)
16,000 2,809 37.04 5,581 36.82
32,000 13,614 40.65 9,175 41.36
48,000 21,174 42.44 9,709 42.49
64,000 40,869 42.52 12,502 44.34
96,000 - - 21,922 44.93
128,000 - - 36,846 45.99
named entity recognition. Systems based on the BIO
representation may produce an inconsistent class se-
quence such as ?O B-DNA I-RNA O?. We interpret
such outputs as follows: once a named entity starts
with ?B-C? then we interpret that the named entity
with class ?C? ends only when we see another ?B-?
or ?O-? tag.
We have implemented SMO algorithm (Platt,
1998) and techniques described in (Joachims, 1998)
for soft margin SVMs in C++ programming lan-
guage, and implemented support codes for pairwise
classification and parallel training in Java program-
ming language. To obtain POS information required
for features and class splitting, we used an English
POS tagger described in (Kazama et al, 2001).
6.1 Class Splitting Technique
First, we show the effect of the class splitting
described in Section 5.1. Varying the size of
training data, we compared the change in the
training time and the accuracy with and with-
out the class splitting. We used a feature set
{?w, pre, suf , sub, pos?[?2,??? ,2], pc[?2,?1]} and the in-
ner product kernel.9 The training time was mea-
sured on a machine with four 700MHz PentiumIIIs
and 16GB RAM. Table 2 shows the results of the
experiments. Figure 1 shows the results graphi-
cally. We can see that without splitting we soon suf-
fer from super-linearity of the SVM training, while
with splitting we can handle the training with over
100,000 samples in a reasonable time. It is very im-
portant that the splitting technique does not sacrifice
the accuracy for speed, rather improves the accuracy.
6.2 Word Cache and HMM State Features
In this experiment, we see the effect of the word
cache feature and the HMM state feature described
in Section 3.4. The effect is assessed by the
accuracy gain observed by adding each feature
set to a base feature set and the accuracy degra-
dation observed by subtracting it from a (com-
9Soft margin constant C is 1.0 throughout the experiments.
Table 3: Effect of each feature set assessed by
adding/subtracting (F-score). Changes in bold face
means positive effect.
feature set (A) adding (B) sub. (k=2) (C) sub. (k=3)
Base 42.86 47.82 49.27
Left cache 43.25 (+0.39) 47.77 (-0.05) 49.02 (-0.25)
Right cache 42.34 (-0.52) 47.81 (-0.01) 49.07 (-0.20)
HMM state 44.70 (+1.84) 47.25 (-0.57) 48.03 (-1.24)
POS 44.82 (+1.96) 48.29 (+0.47) 48.75 (-0.52)
Prec. class 44.58 (+1.72) 43.32 (-4.50) 43.84 (-5.43)
Prefix 42.77 (-0.09) 48.11 (+0.29) 48.73 (-0.54)
Suffix 45.88 (+3.02) 47.07 (-0.75) 48.48 (-0.79)
Substring 42.16 (-0.70) 48.38 (+0.56) 50.23 (+0.96)
plete) base set. The first column (A) in Ta-
ble 3 shows an adding case where the base fea-
ture set is {w[?2,??? ,2]}. The columns (B) and
(C) show subtracting cases where the base feature
set is {?w, pre, suf , sub, pos, hmm?[?k,??? ,k], lwck, rwck,
pc[?2,?1]} with k = 2 and k = 3 respectively. The
kernel function is the inner product. We can see that
word cache and HMM state features surely improve
the recognition accuracy. In the table, we also in-
cluded the accuracy change for other standard fea-
tures. Preceeding classes and suffixes are definitely
helpful. On the other hand, the substring feature is
not effective in our setting. Although the effects of
part-of-speech tags and prefixes are not so definite,
it can be said that they are practically effective since
they show positive effects in the case of the maxi-
mum performance.
6.3 Comparison with the ME Method
In this set of experiments, we compare our
SVM-based system with a named entity recog-
nition system based on the Maximum Entropy
method. For the SVM system, we used the fea-
ture set {?w, pre, suf , pos, hmm?[?3,??? ,3], lwc3, rwc3,
pc[?2,?1]}, which is shown to be the best in the pre-
vious experiment. The compared system is a max-
imum entropy tagging model described in (Kazama
et al, 2001). Though it supports several character
type features such as number and hyphen and some
conjunctive features such as word n-gram, we do not
use these features to compare the performance un-
der as close a condition as possible. The feature set
used in the maximum entropy system is expressed
as {?w, pre, suf , pos, hmm?[?2,??? ,2], pc[?2,?1]}.10 Both
systems use the BIO representation with splitting.
Table 4 shows the accuracies of both systems. For
the SVM system, we show the results with the inner
product kernel and several polynomial kernels. The
row ?All (id)? shows the accuracy from the view-
10When the width becomes [?3, ? ? ? , 3], the accuracy de-
grades (53.72 to 51.73 in F-score).
 0
 5000
 10000
 15000
 20000
 25000
 30000
 35000
 40000
 45000
 0  20000  40000  60000  80000  100000  120000  140000
Tra
inin
g T
ime
 (se
cond
s)
Number of training samples
No splitSplit
(a) Training size vs. time
 0.36
 0.37
 0.38
 0.39
 0.4
 0.41
 0.42
 0.43
 0.44
 0.45
 0.46
 0  5000  10000  15000  20000  25000  30000  35000  40000  45000
Ter
m A
ccu
rac
y (F
-Sco
re)
Training Time (seconds)
No splitSplit
(b) Training time vs. accuracy
Figure 1: Effect of the class splitting technique.
point of the identification task, which only finds the
named entity regions. The accuracies for several ma-
jor entity classes are also shown. The SVM system
with the 2-dimensional polynomial kernel achieves
the highest accuracy. This comparison may be un-
fair since a polynomial kernel has the effect of us-
ing conjunctive features, while the ME system does
not use such conjunctive features. Nevertheless, the
facts: we can introduce the polynomial kernel very
easily; there are very few parameters to be tuned;11
we could achieve the higher accuracy; show an ad-
vantage of the SVM system.
It will be interesting to discuss why the SVM sys-
tems with the inner product kernel (and the polyno-
mial kernel with d = 1) are outperformed by the ME
system. We here discuss two possible reasons. The
first is that the SVM system does not use a dynamic
decision such as the Viterbi algorithm, while the ME
system uses it. To see this, we degrade the ME sys-
tem so that it predicts the classes deterministically
without using the Viterbi algorithm. We found that
this system only marks 51.54 in F-score. Thus, it can
be said that a dynamic decision is important for this
named entity task. However, although a method to
convert the outputs of a binary SVM to probabilistic
values is proposed (Platt, 1999), the way to obtain
meaningful probabilistic values needed in Viterbi-
type algorithms from the outputs of a multi-class
SVM is unknown. Solving this problem is certainly
a part of the future work. The second possible rea-
son is that the SVM system in this paper does not
use any cut-off or feature truncation method to re-
move data noise, while the ME system uses a sim-
ple feature cut-off method.12 We observed that the
ME system without the cut-off only marks 49.11 in
11C, s, r, and d
12Features that occur less than 10 times are removed.
F-score. Thus, such a noise reduction method is
also important. However, the cut-off method for the
ME method cannot be applied without modification
since, as described in Section 3.4, the definition of
the features are different in the two approaches. It
can be said the features in the ME method is ?finer?
than those in SVMs. In this sense, the ME method
allows us more flexible feature selection. This is an
advantage of the ME method.
The accuracies achieved by both systems can be
said high compared with those of the previous meth-
ods if we consider that we have 24 named entity
classes. However, the accuracies are not sufficient
for a practical use. Though higher accuracy will be
achieved with a larger annotated corpus, we should
also explore more effective features and find effec-
tive feature combination methods to exploit such a
large corpus maximally.
7 Conclusion
We have described the use of Support Vector Ma-
chines for the biomedical named entity recognition
task. To make the training of SVMs with the GE-
NIA corpus practical, we proposed to split the non-
entity class by using POS information. In addition,
we explored the new types of features, word cache
and HMM states, to avoid the data sparseness prob-
lem. In the experiments, we have shown that the
class splitting technique not only makes training fea-
sible but also improves the accuracy. We have also
shown that the proposed new features also improve
the accuracy and the SVM system with the polyno-
mial kernel function outperforms the ME-based sys-
tem.
Acknowledgements
We would like to thank Dr. Jin-Dong Kim for pro-
viding us easy-to-use preprocessed training data.
Table 4: Comparison: The SVM-based system and the ME-based system. (precision/recall/F-score)
SVM ME
inner product polynomial (s = 0.01, r = 1.0))
type # d = 1 d = 2 d = 3
All (2,782) 50.7 /49.8 /50.2 54.6 /48.8 /51.5 56.2 /52.8 /54.4 55.1 /51.5 /53.2 53.4 /53.0 /53.2
All(id) 71.8 /70.4 /71.1 75.0 /67.1 /70.8 75.9 /71.4 /73.6 75.3 /70.3 /72.7 73.5 /72.9 /73.2
protein (709) 47.2 /55.2 /50.8 45.7 /64.9 /53.6 49.2 /66.4 /56.5 48.7 /64.7 /55.6 49.1 /62.1 /54.8
DNA (460) 39.9 /37.6 /38.7 48.2 /31.5 /38.1 49.6 /37.0 /42.3 47.9 /37.4 /42.0 47.3 /39.6 /43.1
cell line (121) 54.8 /47.1 /50.7 61.2 /43.0 /50.5 60.2 /46.3 /52.3 62.2 /46.3 /53.1 58.0 /53.7 /55.8
cell type (199) 67.6 /74.4 /70.8 67.4 /74.9 /71.0 70.0 /75.4 /72.6 68.6 /72.4 /70.4 69.9 /72.4 /71.1
lipid (109) 77.0 /61.5 /68.4 83.3 /50.5 /62.9 82.7 /61.5 /70.5 79.2 /56.0 /65.6 68.9 /65.1 /67.0
other names (590) 52.5 /53.9 /53.2 60.2 /55.9 /58.0 59.3 /58.0 /58.6 58.9 /57.8 /58.3 59.0 /61.7 /60.3
References
A. L. Berger, S. A. Della Pietra, and V. J. Della Pietra. 1996. A
maximum entropy approach to natural language processing.
Computational Linguistics, 22(1):39?71.
N. Collier, C. Nobata, and J. Tsujii. 2000. Extracting the names
of genes and gene products with a hidden Markov model. In
Proc. of COLING 2000, pages 201?207.
C. Cortes and V. Vapnik. 1995. Support vector networks. Ma-
chine Learning, 20:273?297.
C. Hsu and C. Lin. 2002. A comparison of methods for multi-
class Support Vector Machines. In IEEE Transactions on
Neural Networks. to appear.
T. Joachims. 1998. Making large-scale support vector machine
learning practical. In Advances in Kernel Methods, pages
169?184. The MIT Press.
J. Kazama, Y. Miyao, and J. Tsujii. 2001. A maximum entropy
tagger with unsupervised hidden markov models. In Proc. of
the 6th NLPRS, pages 333?340.
J. Kim, T. Ohta, Y. Tateisi, H. Mima, and J. Tsujii. 2001. XML-
based linguistic annotation of corpus. In Proc. of the First
NLP and XML Workshop.
U. Kre?el. 1998. Pairwise classification and support vector
machines. In Advances in Kernel Methods, pages 255?268.
The MIT Press.
T. Kudo and Y. Matsumoto. 2000. Use of support vector learn-
ing for chunk identification. In Proc. of CoNLL-2000 and
LLL-2000.
T. Kudo and Y. Matsumoto. 2001. Chunking with Support
Vector Machines. In Proc. of NAACL 2001, pages 192?199.
T. Nakagawa, T. Kudoh, and Y. Matsumoto. 2001. Unknown
word guessing and part-of-speech tagging using support vec-
tor machines. In Proc. of the 6th NLPRS, pages 325?331.
National Library of Medicine. 1999. MEDLINE. available at
http://www.ncbi.nlm.nih.gov/.
C. Nobata, N. Collier, and J. Tsujii. 1999. Automatic term
identification and classification in biology texts. In Proc. of
the 5th NLPRS, pages 369?374.
C. Nobata, N. Collier, and J. Tsujii. 2000. Comparison between
tagged corpora for the named entity task. In Proc. of the
Workshop on Comparing Corpora (at ACL?2000), pages 20?
27.
Y. Ohta, Y. Yamamoto, T. Okazaki, I. Uchiyama, and T. Tak-
agi. 1997. Automatic construction of knowledge base from
biological papers. In Proc. of the 5th ISMB, pages 218?225.
T. Ohta, Y. Tateisi, J. Kim, H. Mima, and Tsujii J. 2002. The
GENIA corpus: An annotated research abstract corpus in
molecular biology domain. In Proc. of HLT 2002.
J. C. Platt. 1998. Fast training of support vector machines us-
ing sequential minimal optimization. In Advances in Kernel
Methods, pages 185?208. The MIT Press.
J. C. Platt. 1999. Probabilistic outputs for support vector ma-
chines and comparisons to regularized likelihood methods.
Advances in Large Margin Classifiers.
D. Proux, F. Prechenmann, and L. Julliard. 2000. A pragmatic
information extraction strategy for gathering data on genetic
interactions. In Proc. of the 8th ISMB, pages 279?285.
L. A. Ramshaw and M. P. Marcus. 1995. Text chunking us-
ing transformation-based learning. In Proc. of the 3rd ACL
Workshop on Very Large Corpora.
A. Ratnaparkhi. 1996. A maximum entropy model for part-
of-speech tagging. In Proc. of the Conference on Empirical
Methods in Natural Language Processing, pages 133?142.
S. Shimpuku. 2002. A medical/biological term recognizer with
a term hidden Markov model incorporating multiple infor-
mation sources. A master thesis. University of Tokyo.
K. Uchimoto, M. Murata, Q. Ma, H. Ozaku, and H. Isahara.
2000. Named entity extraction based on a maximum entropy
model and transformation rules. In Proc. of the 38th ACL,
pages 326?335.
V. Vapnik. 1995. The Nature of Statistical Learning Theory.
Springer Verlag.
A. Yakushiji, Y. Tateisi, Y. Miyao, and J. Tsujii. 2001. Event
extraction from biomedical papers using a full parser. In
Proc. of PSB 2001, pages 408?419.
H. Yamada, T. Kudo, and Y. Matsumoto. 2000. Using sub-
strings for technical term extraction and classification. IPSJ
SIGNotes, (NL-140):77?84. (in Japanese).
An Indexing Scheme for Typed Feature Structures
Takashi NINOMIYA,?? Takaki MAKINO,#? and Jun?ichi TSUJII??
?Department of Computer Science, University of Tokyo
?CREST, Japan Science and Technology Corporation
#Department of Complexity Science and Engineering, University of Tokyo?
?BSI, RIKEN
e-mail: {ninomi, mak, tsujii}@is.s.u-tokyo.ac.jp
Abstract
This paper describes an indexing substrate for typed
feature structures (ISTFS), which is an efficient re-
trieval engine for typed feature structures. Given a
set of typed feature structures, the ISTFS efficiently
retrieves its subset whose elements are unifiable or
in a subsumption relation with a query feature struc-
ture. The efficiency of the ISTFS is achieved by
calculating a unifiability checking table prior to re-
trieval and finding the best index paths dynami-
cally.
1 Introduction
This paper describes an indexing substrate for typed
feature structures (ISTFS), which is an efficient re-
trieval engine for typed feature structures (TFSs)
(Carpenter, 1992). Given a set of TFSs, the ISTFS
can efficiently retrieve its subset whose elements are
unifiable or in a subsumption relation with a query
TFS.
The ultimate purpose of the substrate is aimed at
the construction of large-scale intelligent NLP sys-
tems such as IR or QA systems based on unification-
based grammar formalisms (Emele, 1994). Recent
studies on QA systems (Harabagiu et al, 2001) have
shown that systems using a wide-coverage noun tax-
onomy, quasi-logical form, and abductive inference
outperform other bag-of-words techniques in accu-
racy. Our ISTFS is an indexing substrate that en-
ables such knowledge-based systems to keep and
retrieve TFSs, which can represent symbolic struc-
tures such as quasi-logical forms or a taxonomy and
the output of parsing of unification-based grammars
for a very large set of documents.
The algorithm for our ISTFS is concise and effi-
cient. The basic idea used in our algorithm uses a
necessary condition for unification.
(Necessary condition for unification) Let PathF
be the set of all feature paths defined in
? This research is partially funded by JSPS Research Fellow-
ship for Young Scientists.
TFS F , and FollowedType(pi,F) be the
type assigned to the node reached by fol-
lowing path pi .1 If two TFSs F and G
are unifiable, then FollowedType(pi,F) and
FollowedType(pi,G) are defined and unifiable
for all pi ? (PathF ?PathG).
The Quick Check algorithm described in (Torisawa
and Tsujii, 1995; Malouf et al, 2000) also uses
this condition for the efficient checking of unifia-
bility between two TFSs. Given two TFSs and stat-
ically determined paths, the Quick Check algorithm
can efficiently determine whether these two TFSs
are non-unifiable or there is some uncertainty about
their unifiability by checking the path values. It is
worth noting that this algorithm is used in many
modern unification grammar-based systems, e.g.,
the LKB system (Copestake, 1999) and the PAGE
system (Kiefer et al, 1999).
Unlike the Quick Check algorithm, which checks
unifiability between two TFSs, our ISTFS checks
unifiability between one TFS and n TFSs. The
ISTFS checks unifiability by using dynamically de-
termined paths, not statically determined paths. In
our case, using only statically determined paths
might extremely degrades the system performance.
Suppose that any statically determined paths are not
defined in the query TFS. Because there is no path
to be used for checking unifiability, it is required to
unify a query with every element of the data set. It
should also be noted that using all paths defined in
a query TFS severely degrades the system perfor-
mance because a TFS is a huge data structure com-
prised of hundreds of nodes and paths, i.e., most of
the retrieval time will be consumed in filtering. The
1More precisely, FollowedType(pi,F) returns the type as-
signed to the node reached by following pi from the root node
of FSPAT H(pi,F), which is defined as follows.
FSPAT H(pi,F) = F unionsqPV (pi)
PV (pi) =
{
the least feature structure where
path pi is defined
That is, FollowedType(pi,F) might be defined even if pi does
not exist in F .
ISTFS dynamically finds the index paths in order of
highest filtering rate. In the experiments, most ?non-
unifiable? TFSs were filtered out by using only a few
index paths found by our optimization algorithm.
2 Algorithm
Briefly, the algorithm for the ISTFS proceeds ac-
cording to the following steps.
1. When a set of data TFSs is given, the ISTFS
prepares a path value table and a unifiability
checking table in advance.
2. When a query TFS is given, the ISTFS re-
trieves TFSs which are unifiable with the query
from the set of data TFSs by performing the
following steps.
(a) The ISTFS finds the index paths by using
the unifiability checking table. The index
paths are the most restrictive paths in the
query in the sense that the set of the data
TFSs can be limited to the smallest one.
(b) The ISTFS filters out TFSs that are non-
unifiable by referring to the values of the
index paths in the path value table.
(c) The ISTFS finds exactly unifiable TFSs
by unifying the query and the remains of
filtering one-by-one, in succession.
This algorithm can also find the TFSs that are
in the subsumption relation, i.e., more-specific or
more-general, by preparing subsumption checking
tables in the same way it prepared a unifiability
checking table.
2.1 Preparing Path Value Table and
Unifiability Checking Table
Let D(= {F1,F2, . . . ,Fn}) be the set of data TFSs.
When D is given, the ISTFS prepares two tables, a
path value table Dpi,? and a unifiability checking ta-
ble Upi,? , for all pi ? PathD and ? ? Type. 2 A
TFS might have a cycle in its graph structure. In
that case, a set of paths becomes infinite. Fortu-
nately, our algorithm works correctly even if the set
of paths is a subset of all existing paths. Therefore,
paths which might cause an infinite set can be re-
moved from the path set. We define the path value
table and the unifiability checking table as follows:
Dpi,? ? {F |F ?D ? FollowedType(pi,F) = ?}
Upi,? ? ?
?
(??Type ? ?unionsq? is defined)
|Dpi,? |
2Type is a finite set of types.
Assuming that ? is the type of the node reached by
following pi in a query TFS, we can limit D to a
smaller set by filtering out ?non-unifiable? TFSs. We
have the smaller set:
U ?pi,? ?
?
?
(??Type ? ?unionsq? is defined)
Dpi,?
Upi,? corresponds to the size of U ?pi,? . Note that the
ISTFS does not prepare a table of U ?pi,? statically, but
just prepares a table of Upi,? whose elements are in-
tegers. This is because the system?s memory would
easily be exhausted if we actually made a table of
U ?pi,? . Instead, the ISTFS finds the best paths by re-
ferring to Upi,? and calculates only U ?pi,? where pi is
the best index path.
Suppose the type hierarchy and D depicted in
Figure 1 are given. The tables in Figure 2 show Dpi,?
and Upi,? calculated from Figure 1.
2.2 Retrieval
In what follows, we suppose that D was given, and
we have already calculated Dpi,? and Upi,? .
Finding Index Paths
The best index path is the most restrictive path in the
query in the sense thatD can be limited to the small-
est set by referring to the type of the node reached
by following the index path in the query.
Suppose a query TFS X and a constant k, which is
the maximum number of index paths, are given. The
best index path in PathX is path pi such that Upi,? is
minimum where ? is the type of the node reached
by following pi from the root node of X . We can
also find the second best index path by finding the
path pi s.t. Upi,? is the second smallest. In the same
way, we can find the i-th best index path s.t. i ? k.
Filtering
Suppose k best index paths have already been cal-
culated. Given an index path pi , let ? be the type of
the node reached by following pi in the query. An
element of D that is unifiable with the query must
have a node that can be reached by following pi and
whose type is unifiable with ? . Such TFSs (=U ?pi,? )
can be collected by taking the union of Dpi,? , where
? is unifiable with ? . For each index path, U ?pi,?
can be calculated, and the D can be limited to the
smaller one by taking their intersection. After filter-
ing, the ISTFS can find exactly unifiable TFSs by
unifying the query with the remains of filtering one
by one.
Suppose the type hierarchy and D in Figure 1 are
?

  	

  

   ?????? ?
  
  
:CDR
:CAR
F1 =
?
????
cons
CAR: 1
CDR:
?
?
cons
CAR: 2
CDR:
[ cons
CAR: 3
CDR: nil
]
?
?
?
????
F2 =
[ cons
CAR: 4
CDR: nil
]
,
F3 =
?
?
cons
CAR: 5
CDR:
[ cons
CAR: 6
CDR: nil
]
?
?
D = {F1,F2,F3}
Figure 1: An example of a type hierarchy and TFSs
Dpi,?
?
pi ? integer 1 2 3 4 5 6 list cons nil
? ? ? ? ? ? ? ? ? ? {F1,F2 ,F3} ?
CAR: ? ? {F1} ? ? {F2} {F3} ? ? ?
CDR: ? ? ? ? ? ? ? ? ? {F1 ,F3} {F2}
CDR:CAR: ? ? ? {F1} ? ? ? {F3} ? ? ?
CDR:CDR: ? ? ? ? ? ? ? ? ? {F1} {F3}
CDR:CDR:CAR: ? ? ? ? {F1} ? ? ? ? ? ?
CDR:CDR:CDR: ? ? ? ? ? ? ? ? ? ? {F1}? is an empty set.
Upi,?
?
pi ? integer 1 2 3 4 5 6 list cons nil
? 3 0 0 0 0 0 0 0 3 *3 0
CAR: 3 *3 1 0 0 1 1 0 0 0 0
CDR: 3 0 0 0 0 0 0 0 3 *2 1
CDR:CAR: 2 2 0 1 0 0 0 *1 0 0 0
CDR:CDR: 2 0 0 0 0 0 0 0 *2 1 1
CDR:CDR:CAR: 1 1 0 0 1 0 0 0 0 0 0
CDR:CDR:CDR: 1 0 0 0 0 0 0 0 1 0 1
Figure 2: An example of Dpi,? and Upi,?
QuerySetA QuerySetB
# of the data TFSs 249,994 249,994
Avg. # of unifiables 68,331.58 1,310.70
Avg. # of more specifics 66,301.37 0.00
Avg. # of more generals 0.00 0.00
Table 1: The average number of data TFSs and an-
swers for QuerySetA and QuerySetB
given, and the following query X is given:
X =
?
?
cons
CAR: integer
CDR:
[ cons
CAR: 6
CDR: list
]
?
?
In Figure 2, Upi,? where the pi and ? pair exists in
the query is indicated with an asterisk. The best in-
dex paths are determined in ascending order of Upi,?
indicated with an asterisk in the figure. In this ex-
ample, the best index path is CDR:CAR: and its corre-
sponding type in the query is 6. Therefore the unifi-
able TFS can be found by referring to DCDR:CAR:,6,
and this is {F3}.
3 Performance Evaluation
We measured the performance of the ISTFS on a
IBM xSeries 330 with a 1.26-GHz PentiumIII pro-
cessor and a 4-GB memory. The data set consist-
ing of 249,994 TFSs was generated by parsing the
 
  
  
  
          	 
     
      	 
        
        
 

	


Figure 3: The size of Dpi,? for the size of the data
set
800 bracketed sentences in the Wall Street Journal
corpus (the first 800 sentences in Wall Street Jour-
nal 00) in the Penn Treebank (Marcus et al, 1993)
with the XHPSG grammar (Tateisi et al, 1998). The
size of the data set was 151 MB. We also generated
two sets of query TFSs by parsing five randomly
selected sentences in the Wall Street Journal cor-
pus (QuerySetA and QuerySetB). Each set had 100
query TFSs. Each element of QuerySetA was the
daughter part of the grammar rules. Each element of
QuerySetB was the right daughter part of the gram-
mar rules whose left daughter part is instantiated.
Table 1 shows the number of data TFSs and the av-
erage number of unifiable, more-specific and more-
general TFSs for QuerySetA and QuerySetB. The
total time for generating the index tables (i.e., a set
of paths, the path value table (Dpi,? ), the unifiabil-
ity checking table (Upi,? ), and the two subsumption
checking tables) was 102.59 seconds. The size of
the path value table was 972 MByte, and the size of
the unifiability checking table and the two subsump-
tion checking tables was 13 MByte. The size of the
unifiability and subsumption checking tables is neg-
ligible in comparison with that of the path value ta-
ble. Figure 3 shows the growth of the size of the
path value table for the size of the data set. As seen
in the figure, it grows proportionally.
Figures 4, 5 and 6 show the results of retrieval
time for finding unifiable TFSs, more-specific TFSs
and more-general TFSs respectively. In the figures,
the X-axis shows the number of index paths that
are used for limiting the data set. The ideal time
means the unification time when the filtering rate is
100%, i.e., our algorithm cannot achieve higher ef-
ficiency than this optimum. The overall time is the
sum of the filtering time and the unification time.
As illustrated in the figures, using one to ten index
paths achieves the best performance. The ISTFS
achieved 2.84 times speed-ups in finding unifiables
for QuerySetA, and 37.90 times speed-ups in find-
ing unifiables for QuerySetB.
Figure 7 plots the filtering rate. In finding unifi-
able TFSs in QuerySetA, more than 95% of non-
unifiable TFSs are filtered out by using only three
index paths. In the case of QuerySetB, more than
98% of non-unifiable TFSs are filtered out by using
only one index path.
4 Discussion
Our approach is said to be a variation of path in-
dexing. Path indexing has been extensively studied
in the field of automated reasoning, declarative pro-
gramming and deductive databases for term index-
ing (Sekar et al, 2001), and was also studied in the
field of XML databases (Yoshikawa et al, 2001). In
path indexing, all existing paths in the database are
first enumerated, and then an index for each path is
prepared. Other existing algorithms differed from
ours in i) data structures and ii) query optimization.
In terms of data structures, our algorithm deals with
typed feature structures while their algorithms deal
with PROLOG terms, i.e., variables and instanti-
ated terms. Since a type matches not only the same
type or variables but unifiable types, our problem is
much more complicated. Yet, in our system, hierar-
chical relations like a taxonomy can easily be repre-
sented by types. In terms of query optimization, our
algorithm dynamically selects index paths to mini-
mize the searching cost. Basically, their algorithms
take an intersection of candidates for all paths in a
query, or just limiting the length of paths (McCune,
2001). Because such a set of paths often contains
many paths ineffective for limiting answers, our ap-
proach should be more efficient than theirs.
5 Conclusion and Future Work
We developed an efficient retrieval engine for TFSs,
ISTFS. The efficiency of ISTFS is achieved by cal-
culating a unifiability checking table prior to re-
trieval and finding the best index paths dynamically.
In future work, we are going to 1) minimize the
size of the index tables, 2) develop a feature struc-
ture DBMS on a second storage, and 3) incorporate
structure-sharing information into the index tables.
References
B. Carpenter. 1992. The Logic of Typed Feature Struc-
tures. Cambridge University Press, Cambridge, U.K.
A. Copestake. 1999. The (new) LKB system. Technical
report, CSLI, Stanford University.
M. C. Emele. 1994. TFS ? the typed feature struc-
ture representation formalism. In Proc. of the Interna-
tional Workshop on Sharable Natural Language Re-
sources (SNLR-1994).
S. Harabagiu, D. Moldovan, M. Pas?ca, R. Mihalcea,
M. Surdeanu, R. Bunescu, R. G??rju, V. Rus, and
Mora?rescu. 2001. Falcon: Boosting knowledge for
answer engines. In Proc. of TREC 9.
B. Kiefer, H.-U. Krieger, J. Carroll, and R. Malouf.
1999. A bag of useful techniques for efficient and ro-
bust parsing. In Proc. of ACL-1999, pages 473?480,
June.
R. Malouf, J. Carroll, and A. Copestake. 2000. Effi-
cient feature structure operations without compilation.
Journal of Natural Language Engineering, 6(1):29?
46.
M. Marcus, B. Santorini, and M. A. Marcinkiewicz.
1993. Building a large annotated corpus of En-
glish: the Penn Treebank. Computational Linguistics,
19(2):313?330.
W. McCune. 2001. Experiments with discrimination-
tree indexing and path indexing for term retrieval. Au-
tomated Reasoning, 18(2):147?167.
R. Sekar, I. V. Ramakrishnan, and A. Voronkov. 2001.
Term indexing. In Handbook of Automated Reason-
ing, pages 1853?1964. Elsevier Science Publishers.
Y. Tateisi, K. Torisawa, Y. Miyao, and J. Tsujii. 1998.
Translating the XTAG English grammar to HPSG. In
Proc. of TAG+4, pages 172?175.
K. Torisawa and J. Tsujii. 1995. Compiling HPSG-
style grammar to object-oriented language. In Proc.
of NLPRS-1995, pages 568?573.
M. Yoshikawa, T. Amagasa, T. Shimura, and S. Uemura.
2001. XRel: A path-based approach to storage and re-
trieval of XML documents using relational databases.
ACM Transactions on Internet Technology, 1(1):110?
141.
 
   
   
   
 
               	 
     	  
   
    	  
     

	


     	     
    	     