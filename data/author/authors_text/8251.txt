An Investigation of Various Information Sources for Classifying Biological
Names
Manabu Torii, Sachin Kamboj and K. Vijay-Shanker
Department of Computer and Information Sciences
University of Delaware
Newark, DE 19716
ftorii,kamboj,vijayg@mail.eecis.udel.edu
Abstract
The classification task is an integral part of
named entity extraction. This task has not
received much attention in the biomedi-
cal setting, partly due to the fact that pro-
tein name recognition has been the focus
of the majority of the work in this field.
We study this problem and focus on dif-
ferent sources of information that can be
utilized for the classification task and in-
vestigate the extent of their contributions
for classification in this domain. However,
while developing a specific algorithm for
the classification of the names is not our
main focus, we make use of some simple
techniques to investigate different sources
of information and verify our intuitions
about their usefulness.
1 Introduction
In this paper, we investigate the extent to which
different sources of information contribute towards
the task of classifying the type of biological en-
tity a phrase might refer to. The classification task
is an integral part of named entity extraction. For
this reason, name classification has been studied in
solving the named entity extraction task in the NLP
and information extraction communities (see, for
example, (Collins and Singer, 1999; Cucerzan and
Yarowsky, 1999) and various approaches reported in
the MUC conferences (MUC-6, 1995)). However,
many of these approaches do not distinguish the de-
tection of the names (i.e., identifying a sequence of
characters and words in text as a name) from that of
its classification as separate phases. Yet, we believe
that we will gain from examining the two as sepa-
rate tasks as the classification task, the focus of this
work, is sufficiently distinct from the name identifi-
cation task. More importantly, from the perspective
of the current work, we hope to show that the sources
of information that help in solving the two tasks are
quite distinct.
Similar to the approaches of name classifica-
tion of (Collins and Singer, 1999; Cucerzan and
Yarowsky, 1999), we investigate both name internal
and external clues. However, we believe that the sit-
uation in the specialized domain of biomedicine is
sufficiently distinct, that the clues for this domain
need further investigation and that the classification
task has not received the similar attention deserved.
A large number of name extraction methods pro-
posed in this specialized domain have focused on
extracting protein names only (Fukuda et al, 1998;
Franzen et al, 2002; Tanabe et al, 2002). Since only
one class is recognized, the only task these methods
directly address is that of identifying a string of char-
acters and/or words that constitute a protein name.
These methods do not, at least in an explicit manner,
have to consider the classification task.
There are some important reasons to consider the
detection of names of other types of entities of bio-
logical relevance. Information extraction need not
be limited to protein-protein interactions, and ex-
tracting names of other types of entities will be re-
quired for other types of interactions. Secondly,
classification of names can help improve the preci-
sion of the methods. For example, KEX (Fukuda
et al, 1998) is a protein name recognizer and hence
labels each name it detects as a protein. However,
names of different types of entities share similar sur-
face characteristics (including use of digits, special
characters, and capitalizations). Due to this reason,
KEX and other protein name recognizers can pick
names of entities other than proteins (and label them
as proteins). (Narayanaswamy et al, 2003) reports
that by recognizing that some of these names as not
those of proteins allows their method to improve the
precision of protein name detection. Thirdly detect-
ing names of different classes will help in corefer-
ence resolution, the importance of which is well rec-
ognized in the IE domain. In such specialized do-
mains, the sortal/class information will play an im-
portant role for this task. In fact, the coreference res-
olution method described in (Castan?o et al, 2002)
seeks to use such information by using the UMLS
system1 and by applying type coercion. Finally,
many information extraction methods are based on
identifying or inducing patterns by which informa-
tion (of the kind being extracted) is expressed in nat-
ural language text. If we can tag the text with occur-
rences of various types of names (or phrases that re-
fer to biological entities) then better generalizations
of patterns can be induced.
There are at least two efforts (Narayanaswamy et
al., 2003; Kazama et al, 2002) that consider the
recognition of names of different classes of biomed-
ical relevance. Work reported in (Pustejovsky et al,
2002; Castan?o et al, 2002) also seeks to classify or
find the sortal information of phrases that refer to
biological entities. However, classification was not
the primary focus of these papers and hence the de-
tails and accuracy of the classification methods are
not described in much detail. Other related works
include those of (Hatzivassiloglou et al, 2001; Liu
et al, 2001) that use external or contextual clues to
disambiguate ambiguous expressions. While these
works maybe viewed as similar to word sense dis-
ambiguation (WSD), the one reported in (Hatzivas-
siloglou et al, 2001) in particular is close to classifi-
cation as well. In this work, using context of individ-
ual occurrences, names are disambiguated between
gene, protein and RNA senses.
1The Unified Medical Language System (UMLS) was de-
veloped at National Library of Medicine, a National Institutes
of Health at Bethesda, USA.
While our interest is in classification of phrases
that refer to entities of biomedical significance, in
this work we limit ourselves to name classification.
In our investigations, we wish to use an annotated
corpus for both inducing and evaluating features.
We are unaware of any large corpus where phrases
are annotated with their classes. However, large cor-
pora for named entity extraction in this domain are
being developed, and fortunately, corpora such as
GENIA being developed at University of Tokyo are
freely available. We make use of this corpus and
hence investigate the classification of names only.
However, we believe that the conclusions we draw
in this regard will apply equally to classification of
phrases other than names as well.
2 Sources of Information for Name
Classification
To classify a name we consider both the words
within the name (i.e., name internal) as well as the
nearby words, the context of occurrences.
2.1 Using Name Internal Information
Methods for learning to identify names try to in-
duce patterns of words and special characters that
might constitute names. Hence the entire sequence
of words in a name is important and necessary for
name identification purposes. In contrast, for classi-
fication purposes, some parts of the names are more
important than the others and some may play no role
at all. For example, in the name cyclic AMP re-
sponse element-binding protein, the last word, pro-
tein, is sufficient for its classification. Similarly,
Adherence-isolated monocytes, can be classified on
the basis of its last word, monocytes.
The fact that the last word of a name often bears
the most information about the class of the name is
not surprising. In English, often the type of object
referred by a noun phrase is given by the head noun.
Viewing a name as a noun phrase, the head noun is
likely to determine its class. And in English noun
phrases, the head noun is often the rightmost word
because of the right-branching structure of English
noun phrases. Quite often the nouns correspond to
concepts (or classes) in an ontology. In such cases,
we call these nouns functional terms or f-terms, fol-
lowing the terminology used in some name recog-
nizers proposed for the biomedical domain.
2.1.1 F-terms
The notion of f-terms, was first introduced in the
design of KEX (Fukuda et al, 1998). In this work,
a set of words such as proteins and receptors, were
manually selected as f-terms. In this protein name
recognition system, as well as in Yapex (Franzen et
al., 2002), f-terms are only used for locating names
in text. On the other hand, the system reported
in (Narayanaswamy et al, 2003), which identifies
the names of other classes as well, generalizes them
to also classify names as well. Thus, f-terms are
identified with types/classes.
The existing methods that use f-terms rely on a
manually selected list of f-terms. However, manual
selection methods are usually susceptible to errors of
omission. In Section 4.1, we consider a method that
tries to automatically select a list of f-terms and the
resultant word classes based on the GENIA corpus.
We then use this generated list to test our intuitions
about f-terms.
We also consider f-terms extended to consist of
two consecutive words. We refer to these as bigram
f-terms to differentiate them from single word only
(unigram) f-terms. The use of bigrams will help us
to classify names when the last word is not an f-term,
but the last two words together can uniquely clas-
sify the name. For example, Allergen -specific T cell
clones cannot be classified using the last word alone.
However, a name ending with cell clones as the last
bigram is likely to be a ?Source?.
2.1.2 Suffixes
Often the information about the class designated
by a noun can be found in its suffix, particularly
in a scientific domain. If f-terms can be viewed
as words that designate a class of entities then note
that suffixes also play the same role. For example,
words ending with the suffix -amine are nitrogen
compounds and those ending with -cytes are cells.
Thus using suffixes results in a generalization at the
word level. A method of selecting a list of suffixes
and associating classes with them is described in
Section 4.1.
2.1.3 Example-based Classification
Of course, not all names can be classified on the
basis of f-terms and suffixes only. Sometimes names
are chosen on a more ad hoc manner and do not re-
flect any underlying meaning. In such cases, match-
ing with names found in a dictionary would be the
only name-internal method possible.
We cannot simply use an ?exact matching? algo-
rithm since such a method would only work if the
name was already present in our dictionary. As it is
not reasonable at this time to have a dictionary that
contains all possible names, we can attempt to use
approximate matches to find similar names in the
dictionary and use them for classification purposes.
Such a method then can be thought of finding a way
to generalize from the names in a dictionary, instead
of relying on simple memorization.
However, assuming a large dictionary is not feasi-
ble at this time especially for all the classes. So our
alternate is to look at examples from GENIA corpus.
The candidate examples that we will use for classi-
fication would be the ones that most closely match
a given name that needs to be classified. Hence, the
method we are following here essentially becomes
an example-based classification method such as k-
nearest neighbor method. One approach to this task
is described in Section 4.3.
2.2 Using Context
We now turn our attention to looking at clues that
are outside the name being classified. Using context
has been widely used for WSD and has also been ap-
plied to name classification (for example, in (Collins
and Singer, 1999; Cucerzan and Yarowsky, 1999)).
This approach has also been adopted for the biomed-
ical domain as illustrated in the work of (Hatzivas-
siloglou et al, 2001; Narayanaswamy et al, 2003;
Castan?o et al, 2002)2.
In the WSD work involving the use of context, we
can find two approaches: one that uses few strong
contextual evidences for disambiguation purposes,
as exemplified by (Yarowsky, 1995); and the other
that uses weaker evidences but considers a combi-
nation of a number of them, as exemplified by (Gale
et al, 1992). We explore both the methods. In Sec-
tion 4.4, we discuss our formulation and present a
simple way of extracting contextual clues.
2(Castan?o et al, 2002) can be seen as using context in its
type coercion rules.
3 Experimental Setup
3.1 Division of the corpus
We divided the name-annotated GENIA corpus
(consisting of 2000 abstracts) into two parts?1500
abstracts were used to derive all the clues: f-terms,
suffixes, examples (for matching) and finally contex-
tual features. These derived sources of information
were then used to classify the names found in the re-
maining 500 abstracts. The keys from the annotated
corpus were then used to compute the precision and
recall figures. We will call these two parts the train-
ing and test sections.
Since we pick the names from the test section
and classify them, we are entirely avoiding the name
identification task. Of course, this means that we do
not account for errors in classification that might re-
sult from errors in identifying names. However, we
believe that this is appropriate for two reasons. Our
investigation focuses on how useful the above men-
tioned features are for classification and we felt that
this might be slanted based on the name identifier
we use and its characteristics. Secondly, most of the
errors are due to not finding the correct extent of the
name, either because additional neighboring words
are included or because some words/characters are
not included. In our experience, most of these errors
happen at the beginning part of the name and, hence,
should not unduly affect the classification.
3.2 Classes of Names
In our method, we classify names into one of the
five classes that we call Protein, Protein Part, Chem-
ical, Source and Others. We don?t have any partic-
ularly strong reasons for this set of classes although
we wish to point out that the first four in this choice
corresponds to the classes used by the name recog-
nizer of (Narayanaswamy et al, 2003). It must be
noted that the class proteins not only include pro-
teins but also protein families, and genes; all of
which are recognized by many protein name recog-
nizers. The GENIA class names were then mapped
onto our class names.
3.3 Tokenization
After the assignment of classes, all the extracted
names were tokenized. Noting that changing a digit
by another, a Greek character by another, a Ro-
man numeral by another rarely ever results in ob-
taining another name of a different class, our name
tokenization marks these occurrences accordingly.
To remove variability in naming, hyphens and ex-
tra spaces were removed. Also, as acronyms are not
useful for detecting types, their presence is identi-
fied (in our case we use a simplistic heuristic that
acronyms are words with 2 or more consecutive up-
per case characters).
3.4 Evaluation Methodology
We used an n-fold cross-validation to verify that the
results and conclusions we draw are not slanted by a
particular division of the 2000 abstracts. The corpus
was divided into sets of 500 abstracts - the composi-
tion of each set being random - thus obtaining 4 dif-
ferent partitions. In the first partition, the first three
sets were combined to form the Training Set and the
last was used as the Test Set. In the second partition,
the second, third and fourth sets formed the Training
Set and the first was used as the Test Set and so on.
The overall results that we report in Section 5
were the average of results on the four partitions.
However, the first partition was used for more de-
tailed investigation.
4 Classification Method
Given an unclassified name, we first tried to clas-
sify it on the basis of the f-terms and the suffixes. If
that failed, we applied our string matcher to try to
find a match and assign a category to the unknown
name. Finally, we used context to assign classes to
the names that were still left unclassified.
4.1 F-Term and Suffix Extraction
Since we consider f-terms to be nouns that appear
at the end of a name and denote a type of entity,
their presence in the name suffices for its classifi-
cation. Hence, we use the last words of names
found in the training set to see if they can uniquely
identify the class. To generate a list of f-terms and
their respective classes, we count each word or pair
of words that is found at the end of any name. A
unigram or bigram, w, was selected as an f-term if it
appeared at least 5 times and if the conditional prob-
ability P(classj w) for any class exceeds a threshold
which we set at 0.95.
In the counting to estimate this conditional prob-
ability we ignore the presence of digits, Greek char-
acters and Roman numerals as discussed in the Sec-
tion 3.3. For example, in latent membrane protein
1 the ?1? at the end is ignored and ?protein? will be
selected as the unigram for the count.
The number of f-terms selected for chemicals was
the lowest. This is not surprising considering chem-
ical names have few words defining subtypes of
chemicals. acetate was an example chosen for this
class. Some other examples of extracted f-terms and
their associated classes are: cell, tissue, virus (for
Source); kinase, plasmid and protein (for Proteins);
subunit, site and chain (for Protein Parts) and bind-
ings and defects (for Others). A couple of surprising
words were selected. Due to the limitations of our
method, we do not check if a last name indeed de-
notes a class of entities but merely note that the name
is strongly associated with a class. Hence, protein
names like Ras and Tax were also selected.
For suffix extraction, we considered suffixes of
length three, four and five. Since we argued ear-
lier that the suffixes that we are considering play
the same role as f-terms, we only consider the suf-
fixes of the last word. This prevents the classifica-
tion of cortisol- dependent BA patients (a ?Source?)
as a ?Chemical? on the basis of the suffix -isol. Also,
like in the case of f-terms, digits, Greek characters
etc at the end of a name were ignored. However,
unlike f-terms, if the last word is an acronym the
whole name is dropped, as taking the suffix of an
acronym wouldn?t result in any generalization. The
probability of a class given a suffix is then calculated
and only those suffixes which had a probability of
greater than the probability threshold were selected.
When generating the list of suffixes, we have two
possibilities. We could choose to consider names
which ended with an f-term that was selected or not
consider these names under the assumption that f-
terms would be sufficient to classify such names. We
found that considering the suffixes of the f-terms re-
sults in a significant increase in the recall with lit-
tle or no change in precision. This rather surprising
result can be understood if we consider the kinds
of names that show up in the class Others. A suf-
fix such as ation was selected because a number of
names ending with selected f-terms like transplan-
tation, transformation, and association. This suffix
allows us to classify AP-1 translocation on the basis
of the suffix despite the fact that translocation was
not chosen as an f-term.
4.2 Classification based on f-terms and suffixes
Given a set of f-terms and suffixes, along with their
associated classes, selected from the training part,
names in the test portion were classified by looking
at the words that end the names. If a name ended
with a selected f-term, then the name was tagged as
belonging to the corresponding class. If a match was
not found, the suffix of the last word of the name was
extracted and a match was attempted with the known
list of suffixes. If no match was found, the name was
left unclassified.
4.3 Classifying Names using Similar Examples
We had discussed earlier the use of similar examples
to classify a new occurrence of a name. To find sim-
ilar examples, standard string matching algorithms
are often used which produce a similarity score that
varies inversely with the number of edit operations
needed to match two strings identically. However,
we abandoned the use of standard string matching
programs as their performance for classification pur-
poses was rather poor. Primarily this was due to
the fact that these algorithms do not distinguish be-
tween matches at the beginning and at the end of the
name strings. As discussed before, for classification
purposes the position of words is important and we
noticed that matches at the beginning of the strings
were hardly ever relevant unlike the case with those
at the end. For this reason, we developed our own
matching algorithm.
Given a name in the test corpus, we try to find
how similar it is to candidate examples taken from
the training portion. For each pair of names, we first
try to pair together the individual words that make
up the names allowing for some partial matching.
These partial matches allow for certain kinds of sub-
stitutions that we do not believe will affect the classi-
fication. These include dropping a plural ?s?, substi-
tuting one Greek character by another, changing an
uppercase character by the same character in lower
case, changing an Arabic/Roman single digit by an-
other, changing a Roman numeral by an Arabic one,
and dropping digits. Each substitution draws a small
penalty (although dropping digits incurs a slightly
greater penalty) and only a perfect match receives a
score of 1 for matching of individual words. Com-
plete mismatches receive a score of 0.
We then try to assign a score to the whole pair of
names. We begin by assigning position numbers to
each pair of words (including matches, mismatches
and drops) starting from the rightmost match which
is assigned a position of zero. Mismatches to the
right of the first match, if any, are assigned negative
positions. We then use a weight table that gives more
weightage to lower position numbers (i.e., towards
the end of the strings rather than the beginning) to
assign a weight to each pair of words depending on
the position. Then the score of the entire match is
given by a weighted sum of the match scores, nor-
malized for length of the string. Assigning a score
of 0 for a mismatch is tantamount to saying that a
mismatch does not contribute towards the similarity
score. A negative score for a mismatch would result
in assigning a penalty.
We only consider those strings as candidate exam-
ples if their similarity score is greater than a thresh-
old . To assign a class to a name instance, we look
at the k nearest neighbors, as determined by their
similarity scores to the name being classified. To
assign a class to the name, we weight the voting of
each of the k (or fewer) candidates by their similarity
score. A class is assigned only if the the ratio of the
scores of the top two candidates exceeds a thresh-
old, . The precision should tend to increase with
this ratio. 3
4.4 Classifying Based on Context
To identify the best sources of contextual informa-
tion for classifying names, we considered two pos-
sibilities ? the use of a single strong piece of ev-
idence and the use of a combination of weak evi-
dences. For the former we made use Decision Lists
similar to Yarowsky?s method for Word Sense Dis-
ambiguation (WSD) (Yarowsky, 1995). However,
we found that this method had a poor recall.4
3As always, the reason for using a threshold is that it allows
us to find the appropriate level of compromise between preci-
sion and recall. Given that there are different sources of infor-
mation, there is no need to insist that particular method assign a
class tag if we are not comfortable with the level of confidence
that we have in such an assignment.
4Due to space limitations, we don?t discuss why we might
have obtained the poor recall that we got for the decision list
Hence, we decided to use a combination of weak
evidences and employ the Naive-Bayes assumption
of independence between evidences, similar to the
method described in (Gale et al, 1992). To do
this, the words that occurred within a window and
that matched some template pattern were selected
as features if their scores 5 exceeded some thresh-
old (which we name a). Also, unlike Decision Lists,
all the features presented in the context of a name
instance were involved in its classification and the
probability that a name instance has a certain class
was calculated by multiplying probabilities associ-
ated with all the features. As some of the evi-
dences might be fairly weak, we wanted to classify
only those cases where the combination of features
strongly indicated a particular class. This is done
by comparing the two probabilities associated with
the best two classes for an instance. A class was
assigned to a particular name instance only when
the ratio of the two probabilities was beyond a cer-
tain threshold (which will call b). Together with
the threshold, a for the feature selection, choice of
this threshold could allow trade-off between preci-
sion and recall for classification accuracies.
5 Results and Evaluation
5.1 F-Terms and Suffixes
Table 1 gives the precision and recall values for the
first partition for both f-terms and suffixes.6 As
can be seen, the recall for ?Chemical? is very low
as compared to the other classes. This is due to
two reasons?firstly most chemical names consist of
only one word and secondly we found that chemical
names do not end with an indicative word.
The number of f-terms and suffixes extracted by
our program was considerably less for Chemicals
and Protein Parts as compared to Proteins and Oth-
ers. While this is consistent with the the explana-
tion of poor recall for chemicals, it can be noted that
the low number of f-terms and suffixes extracted for
protein parts did not affect its recall in the same man-
ner. As expected the precision remains high for all
classes.
method.
5The scores were simply the conditional probability of a
class given a word
6The suffix list includes f-terms.
F-Term and suffix String Matching Context
F-Term Suffix Alone After Suffix a = 5, b = 2 a = 2, b = 5
Class Prec. Rec. Prec. Rec. Prec. Rec. Prec. Rec. Prec. Rec. Prec. Rec.
Chemical 0.97 0.05 0.98 0.19 0.89 0.54 0.90 0.59 0.85 0.06 0.55 0.10
Protein 0.97 0.35 0.98 0.55 0.92 0.81 0.93 0.81 0.70 0.31 0.53 0.76
Protein Part 0.98 0.40 0.98 0.33 0.86 0.75 0.85 0.76 0.75 0.05 0.37 0.12
Source 0.98 0.61 0.97 0.62 0.95 0.87 0.94 0.89 0.83 0.10 0.78 0.10
Others 0.99 0.69 0.97 0.71 0.96 0.87 0.96 0.91 0.80 0.05 0.74 0.03
Total 0.98 0.49 0.98 0.57 0.93 0.81 0.93 0.84 0.72 0.17 0.53 0.36
Table 1: Results for the various stages of our method.
Figure 1: Precision-Recall Tradeoff
5.2 Using Examples
For the string matching, we tried three different set
of values for the parameters ,  and k,that is (0.3,
2, 3), (0.7, 2, 1) and (0.7, 2, 5). We found that the
results were marginally better for the set (0.3,2,3)
and, hence, show the results for this set only. Table
1 shows the results of applying the string matching
to the first partition ? all by itself and on names not
classified after the suffix stage. As can be seen, the
recall is higher than the previous stages but with a
slight reduction in precision.
5.3 Results for Context
We ran the context classifier for different values of
the parameters f, a and b but finally chose a value of
5 for f because choosing a higher frequency thresh-
old does not improve the precision but hurts the re-
call. Figure 1 shows the precision plotted against the
recall for different choice of a and b.
The values of the precision and recall on the first
Class Precision Recall
Chemical 0.87 0.62
Protein 0.84 0.90
Protein Part 0.86 0.79
Source 0.94 0.87
Others 0.96 0.90
Total 0.90 0.87
Table 2: Overall Results
partition for each individual class and the two sets
of thresholds are shown in Table 1. The first set,
that considers stronger evidences (since a is higher),
achieves higher precision but recall is not satisfac-
tory. Most of the word evidences chosen tended to
indicate a classification of proteins and hence the
higher recall for this class. Allowing weaker evi-
dences (because a = 2) means more contextual ev-
idences were selected and hence a higher recall was
obtained (particularly for protein). But precision is
lowered except for Source and Others (which inci-
dentally don?t show an increase in recall).
5.4 Overall Results
Table 2 shows the precision and recall for all the dif-
ferent classes, averaging it out for the 4 different par-
titions. We observed very little variance between the
results for the different partitions.
6 Conclusions and Future Work
We have considered a few name internal and exter-
nal sources of information that help in the classifica-
tion of names. Despite using fairly simple methods
to classify the names, we have obtained encourag-
ing results which we take to suggest that that our
intuitions about them are on the right track. We
feel that the effectiveness of f-terms and suffixes that
generalize the idea of f-terms, the matching algo-
rithm that places more emphasis on partial matches
of words to the right vindicates our stance that the
classification of names is a task sufficiently distinct
from the name identification process and warrants
an independent investigation. Even the use of con-
text is different for the two tasks as in the latter task
only the immediately neighboring words are used
and that too for purpose of demarking the extrem-
ities of the name string.
While the high precision of f-terms and suffix
based classification was expected, the recall of these
methods was higher than expected. It is also clear
that these methods do not help much with the chem-
icals class. We believe that in addition to suffix,
the knowledge of other chemical root forms (such as
?meth?), e.g., used in (Narayanaswamy et al, 2003),
would be useful.
We would like to focus more on the matching part
of the work. In particular, rather than hand-coding
our intuitions in terms of weights for the different
parameters, we would like to automatically, e.g., us-
ing a held-out validation set, have these set and see
to what extent the automated choice of parameters
show the bias for the rightmost words in the match-
ing. We would also like to generalize our work fur-
ther by not limiting the classes to the ones chosen
here but allow a wider range of classes. To do this,
we would like to consider the GENIA classes and
collapse classes at various levels of their ontology
and try to see at what level of fine-grained distinc-
tions can classification still be done satisfactorily. In
regards to the use of the contextual method, while
we have some preliminary ideas, we need to inves-
tigate further why the use of a single strong clue,
as exemplified by the decision list method, does not
work as well as it seems to for the WSD task.
References
J. Castan?o, M. Zhang, and J. Pustejovsky. 2002.
Anaphora Resolution in Biomedical Literature. In
Proc. of International Symposium on Reference Res-
olution.
M. Collins and Y. Singer. 1999. Unsupervised Models
for Named Entity Classification. In Proc. of EMNLP
1999.
S. Cucerzan and D. Yarowsky 1999. Language Inde-
pendent Named Entity Recognition Combining Mor-
phological and Contextual Evidence. In Proc. of Joint
SIGDAT Conference on Empirical Methods in NLP
and Very Large Corpora, 90?99.
W. Gale, K. W. Church, and D. Yarowsky. 1992. A
method for disambiguating word senses in a large cor-
pus. Computers and the Humanities, 26:415?439.
K. Fukuda, T. Tsunoda, A. Tamura, and T. Takagi. 1998.
Toward information extraction: identifying protein
names from biological papers. Proc. of ISMB 1998,
707?18.
K. Franze?n, G. Eriksson, F. Olsson, L. Asker, P. Lide?n,
and J. Co?ster. 2002. Protein names and how to
find them. International Journal of Medical Informat-
ics special issue on Natural Language Processing in
Biomedical Applications, 67:49?61.
V. Hatzivassiloglou, P. A. Duboue, and A. Rzhetsky.
2001. Disambiguating proteins, genes, and RNA in
text: a machine learning approach. Bioinformatics, 17
Suppl 1: S97?S106.
J. Kazama, T. Makino, Y. Ota, and J. Tsujii. 2002. Tun-
ing Support Vector Machines for Biomedical Named
Entity Recognition. In Proc. of the ACL-02 Workshop
on Natural Language Processing in the Biomedical
Domain, 1?8.
H. Liu, Y. Lussier, and C. Friedman. 2001. Disambigut-
ing Biomedical Terms in Biomedical Narrative Text:
an Unsupervised. Journal of Biomedical Informatics,
34 (4): 249-61.
Proc. of the Sixth Message Understanding Conference
(MUC-6). 1995. Morgan Kaufmann.
M. Narayanaswamy, K. E. Ravikumar, and K. Vijay-
Shanker. 2003. A Biological Named Entity Recog-
nizer. In Proc. of PSB 2003. 8.
J. Pustejovsky, J. Castan?o, J. Zhang, M. Kotecki, and
B. Cochran. 2002. Robust Relational Parsing Over
Biomedical Literature: Extracting Inhibit Relations.
In Proc. of PSB 2002, 7:362?373.
L. Tanabe and W. J. Wilbur 2002. Tagging gene and
protein names in full text articles. In Proc. of the ACL-
02 Workshop on Natural Language Processing in the
Biomedical Domain, 9?13.
D. Yarowsky. 1995. Unsupervised Word Sense Disam-
biguation Rivaling Supervised Methods. In Proc. of
ACL 1995, 189?196.
Proceedings of the 2007 Joint Conference on Empirical Methods in Natural Language Processing and Computational
Natural Language Learning, pp. 1103?1111, Prague, June 2007. c?2007 Association for Computational Linguistics
Building Domain-Specific Taggers without Annotated (Domain) Data 
John E. Miller1 Manabu Torii2 K. Vijay-Shanker1 
1Computer & Information Sciences University of Delaware Newark, DE 19716 {jmiller,vijay}@cis.udel.edu 
2Biostatistics, Bioinformatics and Biomathematics  Georgetown University Medical Center  Washington, DC 20057 mt352@georgetown.edu  Abstract Part of speech tagging is a fundamental component in many NLP systems. When taggers developed in one domain are used in another domain, the performance can degrade considerably. We present a method for developing taggers for new domains without requiring POS annotated text in the new domain. Our method involves using raw domain text and identifying related words to form a domain specific lexicon. This lexicon provides the initial lexical probabilities for EM training of an HMM model. We evaluate the method by apply-ing it in the Biology domain and show that we achieve results that are comparable with some taggers developed for this domain.  1 Introduction As Natural Language Processing (NLP) technol-ogy advances and more text becomes available, it is being applied more and often in specialized do-mains. Part of Speech (POS) tagging is often a fundamental component to these NLP applications and hence its accuracy can have a significant im-pact on the application?s success. The success that the taggers have attained is often not replicated when the domain is changed. Degradation of accu-racy in a new domain can be overcome by devel-oping an annotated corpus for that specific domain, e.g., as in the Biology domain. However, this solu-tion is feasible only if there is sufficient interest in the use of NLP technology in that domain, and there are sufficient funding and resources. In con-trast, our approach is to use existing resources, and 
rapidly develop taggers for new domains without using the time and effort to develop annotated data. In this work, we use the Wall Street Journal (WSJ) corpus (Marcus et al 1993) and large amounts of domain-specific raw text to develop taggers. We evaluate our methodology in the Biol-ogy domain and show the resulting performance is competitive with some taggers built with super-vised learning for that domain. Also, we note that the accuracy of taggers trained on the WSJ corpus drops off considerably when applied to this domain. Smith et al (2005) report that the Brill tagger (1995) has an accuracy of 86.8% on 1000 sen-tences taken from Medline, and that the Xerox tag-ger (Cutting et al.1992) has an accuracy of 93.1% on the same sentences. They attribute this drop off to the fact that only 57.8% of the 10,000 most fre-quent words can be found in WSJ corpus. This ob-servation provides further impetus to developing lexicon for taggers in the new domains.  In the next section, we discuss our general ap-proach. The details of the EM training of the HMM tagger are given in Section 3. Section 4 provides details of how a domain specific lexicon is created. Next, we discuss the evaluation of our models and analysis based on the results. Section 6 discusses related work and those works from which we have taken some ideas. Section 7 has some concluding remarks.  2 Basic Methodology Inadequate treatment of domain-specific vocabu-lary is often the primary cause in the degradation of performance when a tagger trained in one genre of text is ported to a new domain. The significance of out-of-vocabulary words has been noted in re-duced accuracy of NLP components in the Biology 
1103
domain (e.g., Lease and Charniak, 2005; Smith et al 2004). The handling of domain-specific vocabu-lary is the focus of our approach.  It is quite common to use suffix information in the prediction of POS tags for occurrences of new words. However, its effectiveness may be limited in English, which is not a highly inflected language. However, even for English, we find that not only can suffix information be used online during tag-ging, but also the presence or absence of morpho-logically related words can provide considerable information to pre-build a lexicon that associates possible tags with words.  Consider the example of the word ?broaden?. While the suffix ?en? may be utilized to predict the likelihood of verbal tags (VB and VBP) for the word during tagging, if we were to build a lexicon offline, the existence of the words ?broadened?, ?broadening?, ?broadens? and ?broad? give further evidence to treat ?broaden? as a verb. This type of information has been used before in (Cucerzan and Yarowsky, 2000).  In the above example, the presence or absence of words with the suffix morphemes suggests POS tag information in two ways: 1) The presence of a suffix morpheme in a word suggests a POS tag or a small set of POS tags for the word. This is the type of information most taggers use to predict tags for unknown words during the tagging process; 2) The presence of the morpheme can also indicate possi-ble tags for the words it attaches to. For example, the derivational morpheme ?ment? indicates ?gov-ernment? is likely to be an NN and also that the word it attaches to, ?govern? is likely to be a verb. Inflectional and derivational morphemes don?t at-tach to words of just any POS category; they are particular. Thus, we can propose the possibility of JJ (adjective) to ?broad? and VB or VBP to ?gov-ern? (based on the fact the derivational morphemes ?en? and ?ment? attach to them) even though by themselves they don?t have any suffix information that might be indicative of JJ and VB or VBP.  Additional suffixes (that may or may not be taken from a standard list of English inflectional and derivational morphemes) can also be used. As an example, the suffix ?ate? can be associated with a small set of tags: VB or VBP (?educate?, ?cre-ate?), JJ (?adequate?, ?appropriate?), and NN (?candidate?, ?climate?). Note the possibility or impossibility of the addition of ?tion? and ?ly? can help distinguish between the verbal and adjectival 
situations. In contrast, most taggers that use just suffix information during the tagging process will need strong contextual information (i.e., tags of nearby words) in making their prediction for each occurrence, as such suffixes can be associated with multiple tags. To utilize such information, we need a diction-ary of words in the domain for which we are inter-ested in building a tagger. Such a dictionary will allow us to propose possible tags for a domain word such as ?phosphorylate?. If we can verify whether words like ?phosphorylation?, ?phos-phorylates?, and ?phosphorylately,? are available in the domain then we can obtain considerable in-formation regarding the possible tags that can be associated with ?phosphorylate?. But we cannot assume the availability of a dictionary of words in the domain. However, it would suffice to have a large text corpus, which we call Text-Lex. We use it as a proxy for a domain dictionary by obtaining a list of words and their relative frequency of ap-pearance in the domain.  Rather than using manually developed rules that assign possible tags for words based on the pres-ence or absence of related words, we wish to apply a more empirical methodology. Since this sort of information is specific to a language rather than a domain, we can use an annotated corpus in another domain to provide exemplars. We use the WSJ (Marcus et al 1993) corpus, a POS annotated cor-pus, for this purpose.  For example, we can see that ?phosphorylate? in the Biology domain and ?cre-ate? in the WSJ corpus are similar in the sense both take on ?tion?, ?ed?, and ?ing? suffixes but not ?ly? for instance. Since the WSJ corpus would provide POS tag information for ?create?, we can use it to inform us for ?phosphorylate?. The above method forms the basis for our de-termination of the set of tags that are to be associ-ated with the domain words. However, the actual tag to be assigned for an occurrence in text de-pends on the context of use. We capture this in-formation by using a first-order HMM tagger model. For the transitional probabilities, we begin by using WSJ-based probabilities as a starting point and then adjust to the new domain by using a domain specific text and using EM training. EM also allows for adjusting lexical probabilities de-rived using WSJ words as exemplars. We call the domain specific text used for training of our HMM tagger as Text-EM. While this could be the same 
1104
as Text-Lex, we distinguish the two since Text-EM could be smaller than Text-Lex. From Text-Lex, we only extract a list of words and their frequency of occurrences. In contrast, we use Text-EM as a text and hence as a sequence of words.  In this work, the set of suffixes that we use is adapted those found in a GRE preparation web-page (DeForest, 2000). A few additional suffixes were obtained from the online English Dictionary AllWords.com (2005). In the future we expect to consider automatic mining of useful suffixes from a domain. Furthermore, prefixes are also useful for our purposes. However apart from a few prefixes used in hyphenated words, we haven?t yet incorpo-rated prefix information in a systematic way into our framework.  In this paper, our evaluation domain is molecu-lar biology. Large amounts of text are easily avail-able in the form of Medline abstracts. We use only about 1% of the Medline text database for Text-Lex. Another reason for selecting this evaluation domain is that we have a considerable amount POS-annotated text in this domain, and the most recent techniques of supervised POS tag learning have been used in developing taggers for this do-main. This allows us to evaluate our tagger using the annotated text for evaluation as well as to com-pare our tagger with others developed for this do-main. The POS-annotated text we use is the well-known GENIA (Tateisi et al 2003) corpus that was developed at University of Tokyo.  3 Expectation Maximization Training Our tagger is a first-order Hidden Markov Model (HMM) tagger that is trained using Expectation Maximization (EM) since we do not assume exis-tence of annotated data in the new domain.1 Al-though we use the GENIA corpus, we take only the raw text and strip off the annotated information for obtaining the Text-EM. Our HMM is based on bi-gram modeling and hence our transitional prob-abilities correspond to P(t | t?) where t and t? are POS tags. The emissions that label the transition edges will be discussed in the next section and in-clude domain words as well as certain types of ?coded words?.                                                   1 We considered a 2nd order model as well, but early work showed negligible advantage predicting to the same training set. Following Wang and Schuurmans (2005) we chose to focus on quality of estimation over model complexity. 
The initial transitional probabilities are not ran-domly chosen but rather taken from the WSJ cor-pus. If we take the transitional probabilities as a representation of syntactic preferences, then EM learning using Text-EM may be taken as adjust-ment of the grammatical preferences in the WSJ corpus to those in the new domain. In order to ad-just the grammatical preference to the new domain, we start from smoothed WSJ bigram probabilities. If we started from unsmoothed WSJ bigram prob-abilities, then EM would not allow us to account for transitions that are not observed in the WSJ corpus. For example, in scientific text, transition from RRB (the right round bracket) to VBG may be possible, while it does not occur in the WSJ corpus. Hence, we smooth the WSJ bigram prob-abilities with WSJ unigram probabilities.  We compute smoothed initial bigram probabili-ties as P(t | t?) = ? PWSJ(t | t?) + (1-?) PWSJ(t), where ?=0.9. We felt employing techniques sug-gested in (Brants, 2000) gave too high a preference for unigram probabilities.  The initial emit probability is obtained from the domain text Text-Lex. The process is described in the next section. This information is derived purely from suffix and suffix distribution, or from ortho-graphic information and does not account for the actual context of occurrences in the domain text. We take this suffix-based (and orthographic-based) emit probabilities as reasonable initial lexical probabilities. EM training will adjust them as nec-essary.  We made one minor modification to the stan-dard forward-backward EM algorithm. We dampen the change in transitional and emit probabilities for each iteration. Significant differences in lexical probabilities between the new domain and WSJ can make undue changes in transitional probabili-ties and this in turn can further lead the lexical probabilities to head in the wrong direction. By adding a damping factor, we can prevent the unsu-pervised training to spiral out of control. Hence we let the new transitional probability be given by  P(t | t?) = ? PNEW(t | t?) + (1-?) POLD(t | t?)  where POLD represents the transitional probability in the previous iteration and PNEW represents the probability by standard use of forward-backward algorithm. We use a damping factor of 0.5 for both transitional and emit probabilities. For the emit probabilities, this has the effect of moderating POS 
1105
preferences derived from the training data and pre-serving words and POSes from the lexicon for use in the test set. Even with the damping factor, EM learning fol-lowed the pattern of ?Early Maximum? described by Elworthy (1994), where with good initial esti-mates EM learning only improves accuracy for a few iterations.  For our EM training, we fixed it-eration 2 as our ?best? EM trained model. 4 Development of the Lexicon and Initial Probabilities As noted earlier, we use a domain text, Text-Lex, to develop the initial lexical probabilities for the HMM. The essential process is as follows. Let a word w appear a sufficient number of times in Text-Lex (at least 5 times). We look in Text-Lex for related words in order to assign a feature vector with this word. Each feature is written as ?x+y, where x and y represent suffixes or the empty string (here represented as _).  Features: The feature ?x+y represents the word formed by replacing some suffix x in w by some suffix y. Consider the word ?creation?. ??ion+_? corresponds to the stem word ?create? and ??ion+ion? corresponds to the word ?creation? itself. The feature ??ion+ed? captures information about the word ?created? whereas the feature ?-_+s? cor-responds to word ?creations?. Now consider a word like ?history?. While this might have non-zero values for ?-y+ic? (historic) or ?-_+s? (histories), we are likely to set zero value for ??ory+_? (unless ?hist? or ?histe? is found in Text-Lex). This zero value represents the fact that although ?history? has ?ory? as a suffix, it has no stem. Such a distinction (whether or not there is a stem) bears much information for suffixes like ?ate? and ?ory?.  We use suffix classes rather than actual suffixes as we believe this provides a more appropriate level of abstraction. Given a word w with a suffix x (for a word with no suffix from our list of suf-fixes, x is taken to be _. i.e., empty string), we ex-amine whether removal of x from w leads to an-other word by using a few basic variations that can be found in any rudimentary exposition on English morphology. For example, for the suffix ?ed?, we attempt to replace ?ied? with ?y? which relates ?purified? with ?purify? and recognizes the spell-ing alternation of i/y. Thus for the word ?purify? 
the feature ?-+ed? represents the presence of ?pu-rified? since ?+ed? represents the suffix class rather than the actual suffix. Similarly, we also consider removal of a suffix and, if necessary, add-ing an ?e? to see if such a word exists. This allows us to relate ?creation? with ?create? or ?activate? with ?active?. Also doubling of a few consonants is attempted to relate ?occurrence? and ?occur?. Finally, when a word could have two suffixes, the word is considered to always have the longer func-tional suffix. Hence, we consider ?government? to have ?ment? suffix rather than ?ent? suffix.  Feature Vectors: There are two different types of vectors we use for any word, one called Bin (for binary count) and other called RFreq (for relative frequency). In the Bin vector associated with ?creation?, all these four features will get the value one, assuming that the four corresponding words are found in Text-Lex. On the other hand, assuming ?creatory? is not found in Text-Lex, the feature ?-ion+ory? would get a zero value.  For RFreq vector, instead of ones and zeros, we first start with the frequency of occurrences of each word and then normalize so that the sum of all fea-ture values is one. Thus, for example, a word with 4 features having non-zero frequencies of 10, 20, 30 and 40 will have the respective values set to 0.1, 0.2, 0.3 and 0.4. A word with four features having non-zero frequency, which are 1, 2, 3 and 4, will also have same 4 relative frequency values.  Our intuition is that the Bin vector is helpful in determining the set of tags that can be associated with a word and that the RFreq vector can aug-ment this information regarding the likelihood of these tags. For example, a one for the ?-ing+_? feature in a Bin vector (thus disqualifying a word like ?during?) may be sufficient to predict VBG, JJ and NN tags. However, this may not suffice to provide the ordering of likelihood among these tags for this word. On the other hand, it seems to be the case that when the ?ing? form appears far more often than the ?ed? form, then the NN tag is most likely. But if the ?ed? form is more frequent, then VBG is most likely. Examples in the WSJ corpus include ?smoking?, ?marketing?, ?index-ing?, and ?restructuring? for the first kind, and ?calling?, ?counting?, ?advising?, and ?noting? for the second kind.  Exemplars in WSJ: Given a word w from Text-Lex, we look for similar words from the WSJ cor-pus. Even though the set of words used in this cor-
1106
pus may differ substantially from the domain text, our hypothesis is that words with similar suffix distribution will have similar POS tag assignments regardless of the domain. We follow Cucerzan and Yarowsky (2000) in using the kNN method for finding similar words, but we differ in details of the construction of the feature vectors and distance computation. For the word w we create the Bin and RFreq vectors based on distribution of words in Text-Lex. Following the same method, we create the Bin and RFreq vectors for a word v in the WSJ corpus by using the distributions in the WSJ cor-pus. Then we compute BinDist(w,v) as the number of features in which the two Bin vectors  differ. A similar RFDist is defined as a weighted sum of two distances: the first distance is L1-norm dis-tance based on values of features for which both words have non-zero values for and the second distance is based on values of features for which one word has a zero value and other does not. Thus, if the two words? RFreq vectors are 
? 
< w
1
,...,w
n
>  and 
? 
< v
1
,...,v
n
>respectively then  
? 
RFsame(w,v) = w
i
? v
i
w
i
?0?v
i
?0
?
  
? 
RFdiff (w,v) =
w
i
? v
i
w
i
=0? v
i
?0
?
+ w
i
? v
i
w
i
?0? v
i
=0
?
 and,   
? 
RFDist ( w,v ) = RFsame( w,v ) +?RFdiff ( w,v ) For RFDist(.), we used ? =2. Given a word w, we find the 5 nearest neighbors from the WSJ cor-pus and use their average lexical probabilities to obtain the lexical probabilities for w. We investi-gate the use of Bin vector information and RFreq vector information for computing the distances (i.e., BinDist(.) and RFDist(.)) as well as a hybrid measure that combines these two distances.  We also considered smoothing the lexical prob-abilities obtained in the above fashion. Let w be a word for which the above method suggests tags t1,?,tn in order of likelihood (t1 is most probable).  Then we consider sqrt-score(ti)= 
? 
n +1? i . We then assign probabilities based on this score after normalizing them so that the probabilities for the n tags will sum to 1. Thus, for example, if a word w has three possible tags, no matter what the original lexical probabilities were determined to be, if t1 is 
determined to be most probable, then P(t1|w) will be 0.418 by this method. The second most prob-able tag will be assigned 0.341.   The intuition behind this square root smoothing method is that this smoothing may be appropriate for low frequency words, where empirical prob-abilities based purely on a kNN basis may not be entirely appropriate if the new domain is very dif-ferent. The drawback of course is that if there is sufficient information, we lose useful information by such flattening. And when a tag is significantly more probable for a word then we lose this vital information. For example, the word ?high? is mostly annotated as JJ in WSJ corpus but RB and NN are also possible. Square root smoothing will flatten this distribution considerably. Nevertheless, we wish to investigate whether this method of smoothing the distribution is enough in conjunc-tion with EM. EM adjusts the probability from observing the number and context of occurrences in the domain text.2  Coded Words: No matter how large Text-Lex is, there will be words that do not appear a suffi-cient number of times (we take this number to be 5). We aggregate such words according to their suffixes, if they correspond to one of the prede-fined suffixes. Then each word with suffix x is considered to be an instance of a ?coded? word SFX-x. If a word does not have any of these suf-fixes then they fall into the coded class unknown. For each such coded word, we assign the tags and probabilities based on similarly aggregated words in the WSJ corpus. We have two other broad classes of words that we treat differently. Coded words are formed based on orthographic characteristics, which include but are not limited to Greek letters, Roman numerals, digits, upper or lower case single letters, upper case letter sequences, cardinals, certain prefix words, and their combinations.  Since they are rela-tively easy to tag, we do not use the WSJ corpus for them but handle it programmatically. Finally, if a word occurs often in WSJ or is assigned tags such as CD, FW, MD, PRP, DT, WDT, etc. (tags which can?t be predicted by means of suffix or suf-fix-related words), we add this word together with the tags and probability into the domain lexicon that we are building.                                                   2 We also considered linear and square functions for smooth-ing while reporting only the sqrt results in section 5. 
1107
5 Evaluation and Analysis As noted earlier, our evaluation is on molecular biology text. For Text-Lex, we used 133,666 ti-tles/abstracts of research papers, a small fraction of the Medline database available from the National Library of Medicine. These abstracts were con-tained in just five of the 500 compressed data files in the 2006 version of the Medline database. These abstracts cover topics more broadly in Biomedicine and not just molecular biology.  On the other hand, we use for Text-EM, text which can be regarded to be in a subfield of molecular biology.  Text-EM is the text from the GENIA corpus (version 3.02) described in (Tateisi et al 2003). This corresponds to about 2000 abstracts, which are annotated with POS tag information (using the same tags used in the WSJ corpus). We use a 5-fold cross-validation, i.e., 5 partitions are formed and experiments conducted 5 times and results av-eraged. For each test partition, the remainder parti-tions are used for ?training?. In our case, this is unsupervised since we use EM and hence we to-tally disregard the POS tag information that is as-sociated with the words. We note that both the text for EM training as well as for testing come from the same domain.   We first evaluate the process of building the lexicon. This time we consider the entire GENIA corpus and not any partition. We first considered all words in the GENIA corpus for which we can expect our kNN method to assign a tag. Hence all words that would be treated as coded words are ignored. For each such word, we consider the tags assigned to them in the GENIA corpus and form pairs <w,t>.  We are interested in the word type and not token and hence we will not have any mul-tiple occurrences of a pair <w,t>. Our kNN method identifies 96.3% of these pairs; we can think of this as recall. This makes our approach effective, espe-cially given the fact that the kNN method only as-signs 1.92 tags on an average to these words in the GENIA corpus. Next considering all words appear-ing in the GENIA corpus, our lexicon includes a correct tag in 99.0% of the cases on a word-token basis. These results are summarized below.  Characteristic Statistic kNN Recall (word-type) 96.3% Average Number Tags/Word 1.92 tags Lexicon Recall (word-token) 99.0% 
We now turn to the evaluation of the accuracy of our HMM. As mentioned earlier, these results are based on 5-fold cross-validation experiments. The best results (95.77%) were obtained for the case where we took the lexical probabilities directly from kNN using only RFDist and by discarding all tags assigned with probability less than 0.02.3  These results compare favorably to other taggers developed for the Biology domain. The MedPost tagger (see Section 6) achieved an accuracy of 94.1% when we applied it to the GENIA abstracts. The PennBioIE tagger (see Section 6) achieved an accuracy of 95.1%. Note that output from the PennBioIE tagger is not fully compatible with GENIA annotation due to some differences in its tokenization.  Even if the differences in accuracies can be discounted due to tokenization or even sys-tematic differences in annotation between the train-ing and test corpora, our main point is that our re-sults compare favorably (our tagger competitive) with taggers that were developed for the Biomedi-cine domain using supervised training.   These results are summarized in the table below.  POS Tagger %Accuracy Our HMM (5-fold) 95.77% MedPost 94.1% PennBioIE 95.1% GENIA supervised 98.26%  MedPost seems intended to cover all of Bio-medicine, since its lexicon is based on the 10,000 most frequently occurring words from Medline and for which the set of possible tags were manually specified. The PennBioIE tagger was developed using 315 Medline abstracts using another subfield of molecular biology. None of these accuracies however are as high as those of the GENIA tagger (Tsuruoka et al 2005) which was trained (supervised) using GENIA cor-pus and uses a machine learning model more so-phisticated than the simple first-order HMM tagger we use. This model considers more features includ-ing words to the right. The best results (98.26%) were obtained when lexicon from three different sources were aggregated.                                                    3 Banko and Moore (2004) showed only slight improvement in tag accuracy between .01 and .1 cutoffs with a lexicon built from annotated data. We opted for the .02 cutoff because of our ?noisier? lexicon. 
1108
Returning to the results for our taggers, we also tried BinDist in the kNN method, with and without square root smoothing. These results were typi-cally less than the above-mentioned result. We also compared using a square root smooth on RFDist obtaining results approximately 1% lower than without the square root smooth. We next present some examples that illustrate strengths and weaknesses of the current model. An example that shows that EM training makes good adjustment to the domain is the improvement in tagging of verbal categories. We conducted a de-tailed error analysis on one of the cross-validation partitions and noted that the accuracy on all verbal POS tags improved after EM training. A notewor-thy case is the improvement in tagging of VBP originally misclassified as VB. Since most English words that are VB can also be VBP, and since they are annotated more frequently in WSJ as VB, the initial lexicon usually has a higher probability as-signed to VB for most words. As EM training pro-gresses, we noted that the frequency of VBP mistagged as VB decreases. Similarly, misclassifi-cations of VBG as NN also drops in the final model (by 40.3% on Text-EM) as compared to the initial model based on WSJ transitional probabili-ties and initial lexicon derived using WSJ words as exemplars. Previously, in the context of parsing Biomedical text, Lease and Charniak (2004) mention the oc-currences of sequences of multiple NN is more frequent in the GENIA corpus than in the WSJ corpus and that it could lead to parsing errors. We didn?t observe this problem here, but rather the contrary situation where many JJs were initially mistagged as NN.  About 22% of these misclassifi-cations are corrected after EM training.  While our model adjusts well in these cases to the new domain, sometimes the drift leads to worse performance. An example is in the misclassifica-tion of VBN as JJ. The most frequent word for which this misclassification occurs in the word ?activated?. These misclassifications occur in the context such as ?the activated cells?. The use of VBN rather than JJ is hard to determine on basis of just surface features and perhaps has to do more with the meaning of the word. In supervised set-ting, if sufficient such cases were annotated then this would be learned. But in an unsupervised set-ting this turns out to be a problem case. Despite the fact that RFDist predicted VBN as most probable 
tag for ?activated?, EM training makes this situa-tion worse.  Analysis of words with most frequent errors re-vealed many cases from orthographic coded words. Many occurrences of single lower case letters (which could have LS, SYM or NN tags) were la-beled as LS whereas the GENIA tagging used NN. Our model tagged ?+/-? always as SYM whereas because of the context of use, GENIA annotations were CC. (In fact, GENIA does not appear to use the SYM tag.) Similarly, ?<? and ?>? were often mistagged as SYM by our model whereas based on context they are annotated as JJR.  6 Related Work The impact of out-of-vocabulary words on NLP applications has been noted before. The degrada-tion in performance of components, which were trained on the WSJ corpus, but used on biomedical text has been noted (Lease and Charniak, 2004, Smith et al 2005). Smith et al (2005) use this ob-servation in the design of their POS tagger, Med-Post, by building a Markov model with a lexicon containing the 10,000 most frequent words from Medline, and using annotated text from the Bio-medical text for supervised training.  There are many unsupervised approaches to POS tagging. We focus now on those that are most closely related to our work and contain ideas that have influenced this work. There have been many uses of EM training to build HMM taggers (Kupiec, 1992; Elworthy, 1994; Banko and Moore, 2004; Wang and Schuurmans, 2005). Banko and Moore (2004) achieved better accuracy by restrict-ing the set of possible tags that are associated with words. By eliminating possibilities that may appear rarely with a word, they reduce the chances of un-supervised training spiraling along an unlikely path.  We believe by using our approach we con-siderably reduce the set of tags to what is appropri-ate for each word. Further, we too remove any tag associated with low probability by kNN method.  Usually these tags are noise introduced by some inappropriate exemplar.  Wang and Schuurman (2005) suggest that EM algorithm be modified such that at any iteration the unigram tag probability be held constant to the true probability for each tag. Again, this might serve to stop a drift in unsupervised methods towards mak-ing a tag?s probability become larger than it should 
1109
be. However, the true probability cannot be known ahead of time and certainly not in a new domain. While a WSJ bigram probability need not reflect the corresponding preferences in the new domain, our use of starting from WSJ probabilities and then damping changes to transition probabilities was motivated by a similar concern of not letting a drift towards making some (bigram) tags too frequent during EM iterations.  Using suffixation patterns for purposes of pre-dicting POS tags has been considered before. Al-though as far as we know, we are the first to apply it for domain adaptation purposes. Schone and Ju-rafsky (2001) consider clusters of words (obtained by some ?perfect? clustering algorithm) and then compute a measure of how ?affixy? a cluster is. For example, a cluster containing words ?climb? and ?jump? may be related by suffixing operation +s to a cluster that contains words ?climbs? and ?jumps?. The percentage of words in a cluster that are so related provides a measure of how ?affixy? a cluster. This together with five other attributes of clusters (such as whether words in a cluster pre-cede those of another cluster, optionality) and lan-guage universals induce POS tags for these clusters from corpora. This method does not use POS tagged corpora (although in the reported experi-ment the initial ?perfect? clusters were obtained from the Brown corpus using the POS tag informa-tion). In contrast, we use the POS tagged WSJ cor-pus to assist in the induction of tag information for our lexicon. In this respect, our method is closer to the approach of Cucerzan and Yarowsky (2000). Our use of the kNN method to identify tags and their probabilities for words was inspired by this work.  However, their use of kNN method was in the context of supervised learning. The method was applied for handling words unseen in the train-ing data. The estimated probabilities were used during the tagging process. Instead of just applying the method for unknown words, i.e., words not present in the training data, our approach is to cre-ate the entire lexicon in the new domain. As Lease and Charniak (2004), among others, have noted, the distribution of NN tag sequences as well as tag distributions in the Biomedical domain could differ from WSJ text. Since our aim is to adjust to the new domain, we employed unsupervised learning in the form of EM training, unlike the supervised tagging model development approach of Cucerzan and Yarowsky. Another significant difference is 
that their method determines nearest neighbors not only on the basis of suffix-related words but also on the basis of nearby words context. Since our motivation, on the other hand, is to move to a new domain, we didn?t consider detection of similarity on the basis of word contexts. In contrast, we have shown that the approach of identifying words on the basis of suffixation patterns and using them as exemplars can be applied effectively even when the domain of application is substantially different from the text (the WSJ corpus) providing the ex-emplars. 7 Conclusions As NLP technology continues to be applied in new domains, it becomes more important to consider the issue of portability to new domains. To cope with domain-specific vocabulary and also different use of vocabulary in a new domain, we exploited suffix information of words. While use of suffix information per se has been employed in many ex-isting POS taggers, its use is often limited to an online manner, where each word is examined inde-pendently from the existence of its morphologi-cally related words. As shown in (Cucerzan and Yarowsky, 2000), such information can provide considerable information to build a lexicon that associates possible tags with words. However, we use this information only to provide the initial val-ues. We apply EM algorithm to adjust these initial probabilities to the new domain.  The results in Section 5 show that we achieve good performance in the evaluation domain, which is comparable with two recently developed taggers for this domain. We also show in section 5 exam-ples of how EM unlearns some WSJ bias and ad-justs to the new domain. While we introduce a damping factor to slow down changes in iterations of EM training, we believe there is scope for fur-ther improvement to minimize drift. Furthermore, there is scope to improve our kNN method as dis-cussed at the end of Section 5. In the future, we also expect to consider methods that may auto-matically mine suffixes in a new domain and use these domain-specific suffixes. We used the kNN method to associate words in the new domain with possible POS tags.  Despite the often-stated notion that English is not morphologically rich, we find that suffix-based methods can still help make significant inroads. 
1110
Our method offers the chance to develop good tag-gers for specialized domains. For example, the GENIA corpus and PennBioIE corpus are speciali-zations within molecular biology, but taggers de-veloped on one corpus degrades in performance on the other. Using our method, we could use differ-ent Text-EM for these specializations even if we retain Medline as Text-Lex. In the same way, we could develop a tagger for the medical domain, which has a distinct vocabulary from biology.  References Banko, M. and Moore, R.C. 2004.  Part of Speech Tag-ging in Context. In Proceedings, 20th International Conference on Computational Linguistics (Coling 2004), Geneva, Switzerland, pp.556-561. Baum, L. 1972. An inequality and associated maximiza-tion technique in statistical estimation for probabilis-tic functions of a Markov process. Inequalities 3:1-8.  Brants, T. 2000. TNT - a statistical part-of-speech tag-ger.  In Proceedings of the Sixth Applied Natural Language Processing Conference ANLP-2000.   Brill, E. 1995. Transformation-based error-driven learn-ing and natural language processing: A case study in part of speech tagging. Computational Linguistics, 21(4):543-565.   Cucerzan, S. and Yarowsky, D. 2000. Language inde-pendent minimally supervised induction of lexical probabilities. Proceedings of ACL-2000, Hong Kong, pages 270-277. Cutting, D., Kupiec, J., Pedersen, J., and Sibun, P. 1992. A practical part of sppech tagger. Proceedings of 3rd Conference on Applied Natural Language Process-ing, 53-58.  DeForest, J. 2000. Graduate Record Exam Suffixed web page. Michigan State University. http://www.msu.edu/~defores1/gre/sufx/gre_suffx.htm Elworthy, D. 1994. Does Baum-Welch re-estimation help taggers. In Proceedings of the Fourth Confer-ence on Applied Natural Language Processing, ACL. Kulick, S., Bies, A., Liberman, M., Mandel, M.,  McDonald, R., Palmer, M., Schein, A. and Ungar, L. Integrated Annotation for Biomedical Information Extraction. HLT/NAACL, 2004. Kupiec, J. 1992. Robust Part-of-speech Tagging Using a Hidden Markov Model. Computer Speech and Lan-guage, 6. 
Lease, M. and Charniak, E. 2005. Parsing Biomedical Literature.  IJCNLP-2005: 58-69.   Marcus, M., Santorini, B., Marcinkiewicz, M.A. 1993. Building a large annotated corpus of English: The Penn Treebank.  Computational Linguistics, 19:313-330.   PennBioIE. 2005. Mining The Bibliome Project. http://bioie.ldc.upenn.edu/. Schone, P. and Jurafsky, D. 2001, Language Independ-ent Induction of Part of Speech Class Labels Using Language Universals. IJCAI Workshop on Text Learning: Beyond Supervision.  Smith, L., Rindflesch, T., Wilbur, W.J. 2004. MedPost: a part-of-speech tagger for biological text.  Bioin-formatics 20 (14):2320-2321.   Smith, L., Rindflesch, T., Wilbur, W.J. 2005. The im-portance of the lexicon in tagging biomedical text. Natural Language Engineering 12(2) 1-17. Tateisi, Y., Ohta, T., dong Kim, J., Hong, H., Jian, S., Tsujii, J. 2003. The GENIA corpus: Medline ab-stracts annotated with linguistic information.  In: Third meeting of SIG on Text Mining, Intelligent Systems for Molecular Biology (ISMB).   Tsuruoka, Y., Tateishi, Y., Kim, J. D., Ohta, T., McNaught, J., Ananiadou, S., and Tsujii, J.. 2005. Developing a Robust Part-of-Speech Tagger for Biomedical Text, Advances in Informatics - 10th Panhellenic Conference on Informatics, LNCS 3746: 382-392. Wang, Q. and Schuurmans, D. 2005. Improved estima-tion for unsupervised part-of-speech tagging. In IEEE NLP-KE www.AllWords.com. 2005. English Dictionary and Language Guide. AllSites LLC. www.AllSitesllc.com  
1111
Proceedings of the BioNLP Workshop on Linking Natural Language Processing and Biology at HLT-NAACL 06, pages 118?119,
New York City, June 2006. c?2006 Association for Computational Linguistics
Rapid Adaptation of POS Tagging for Domain Specific Uses John E. Miller1 Michael Bloodgood1 Manabu Torii2 K. Vijay-Shanker1 1Computer & Information Sciences 2Biostatistics, Bioinformatics and Biomathematics University of Delaware Georgetown University Medical Center Newark, DE 19716 Washington, DC 20057 {jmiller,bloodgoo,vijay}@cis.udel.edu mt352@georgetown.edu 
1 Introduction Part-of-speech (POS) tagging is a fundamental component for performing natural language tasks such as parsing, information extraction, and ques-tion answering.  When POS taggers are trained in one domain and applied in significantly different domains, their performance can degrade dramati-cally.  We present a methodology for rapid adapta-tion of POS taggers to new domains.  Our technique is unsupervised in that a manually anno-tated corpus for the new domain is not necessary.  We use suffix information gathered from large amounts of raw text as well as orthographic infor-mation to increase the lexical coverage. We present an experiment in the Biological domain where our POS tagger achieves results comparable to POS taggers specifically trained to this domain.   Many machine-learning and statistical tech-niques employed for POS tagging train a model on an annotated corpus, such as the Penn Treebank (Marcus et al 1993). Most state-of-the-art POS taggers use two main sources of information: 1) Information about neighboring tags, and 2) Infor-mation about the word itself. Methods using both sources of information for tagging are: Hidden Markov Modeling, Maximum Entropy modeling, and Transformation Based Learning (Brill, 1995).  In moving to a new domain, performance can degrade dramatically because of the increase in the unknown word rate as well as domain-specific word use. We improve tagging performance by attacking these problems. Since our goal is to em-ploy minimal manual effort or domain-specific knowledge, we consider only orthographic, inflec-tional and derivational information in deriving POS. We bypass the time, cost, resource, and con-tent expert intensive approach of annotating a cor-pus for a new domain. 
2 Methodology and Experiment The initial components in our POS tagging process are a lexicon and part of speech (POS) tagger trained on a generic domain corpus. The lexicon is updated to include domain specific information based on suffix rules applied to an un-annotated corpus. Documents in the new domain are POS tagged using the updated lexicon and orthographic information. So, the POS tagger uses the domain specific updated lexicon, along with what it knows from generic training, to process domain specific text and output POS tags. In demonstrating feasibility of the approach, we used the fnTBL-1.0 POS tagger (Ngai and Florian, 2001) based on Brill?s Transformation Based Learning (Brill, 1995) along with its lexicon and contextual rules trained on the Wall Street Journal corpus.  To update the lexicon, we processed 104,322 abstracts from five of the 500 compressed data files in the 2005 PubMed/Medline database (Smith et al 2004). As a result of this update, coverage of words with POS tags from the lexicon increased from 73.0% to 89.6% in our test corpus. Suffix rules were composed based on informa-tion from Michigan State University?s Suffixes and Parts of Speech web page for Graduate Record Exams (DeForest, 2000). The suffix endings indi-cate the POS used for new words. However, as seen in the table of suffix examples below, there can be significant lack of precision in assigning POS based just on suffixes.  Suffix POS #uses/ %acc ize; izes VB VBP; VBZ 23/100% ous JJ 195/100% er, or; ers, ors NN; NNS 1471/99.5% ate; ates VB VBP 576/55.7% 
118
Most suffixes did well in determining the actual POS assigned to the word. Some such as ?-er? and ?-or? had very broad use as well. ?-ate? typically forms a verb from a noun or adjective in a generic domain. However in scientific domains it often indicates a noun or adjective word form. (In work just begun, we add POS assignment confirmation tests to suffix rules so as to confirm POS tags while maintaining our domain independent and unsupervised analysis of un-annotated corpora.) Since the fnTBL POS tagger gives preliminary assignment of POS tags based on the first POS listed for that word in the lexicon, it is vital that the first POS tag for a common word be correct. Words ending in ?-ing? can be used in a verbal (VBG), adjectival (JJ) or noun (NN) sense. Our intuition is that the ?-ed? form should also appear often when the verbal sense dominates. In contrast, if the ratio heavily favors the ?-ing? form then we expect the noun sense to dominate.  We incorporated this reasoning into a computa-tionally defined process which assigned the NN tag first to the following words: binding, imaging, learning, nursing, processing, screening, signal-ing, smoking, training, and underlying. Only un-derlying seems out of place in this list.  In addition to inflectional and derivational suf-fixes, we used rules based on orthographic charac-teristics. These rules defined proper noun and number or code categories. 3 Results and Conclusion For testing purposes, we used approximately half the abstracts of the GENIA corpus (version 3.02) described in (Tateisi et al 2003). As the GENIA corpus does not distinguish between common and proper nouns we dropped that distinction in evalu-ating tagger performance.  POS tagging accuracy on our GENIA test set (second half of abstracts) consisting of 243,577 words is shown in the table below. Source Accuracy Original fnTBL lexicon 92.58% Adapted lexicon (Rapid) 94.13% MedPost 94.04% PennBioIE1 93.98%                                                            1 Note that output from the tagger is not fully compatible with GENIA annotation. 
The original fnTBL tagger has an accuracy of 92.58% on the GENIA test corpus showing that it deals well with unknown words from this domain. Our rapid adaptation tagger achieves a modest 1.55% absolute improvement in accuracy, which equates to a 21% error reduction.   There is little difference in performance be-tween our rapid adaptation tagger and the MedPost (Smith et al 2004) and PennBioIE (Kulick et al 2004) taggers. The PennBioIE tagger employs maximum entropy modeling and was developed using 315 manually annotated Medline abstracts. The MedPost tagger also used domain-specific annotated corpora and a 10,000 word lexicon, manually updated with POS tags. We have improved the accuracy of the fnTBL-1.0 tagger for a new domain by adding words and POS tags to its lexicon via unsupervised methods of processing raw text from the new domain. The accuracy of the resulting tagger compares well to those that have been trained to this domain using annotation effort and domain-specific knowledge.  References Brill, E. 1995. Transformation-based error-driven learn-ing and natural language processing: A case study in part of speech tagging. Computational Linguistics, 21(4):543-565.   DeForest, Jessica. 2000. Graduate Record Exam Suffix web page. Michigan State University. http:// www.msu.edu/~defores1/gre/sufx/gre_suffx.htm.  Kulick, S., Bies, A., Liberman, M., Mandel, M., McDonald, R., Palmer, M., Schein, A., Ungar, L. 2004. Integrated annotation for biomedical informa-tion extraction. HLT/NAACL-2004: 61-68. Marcus, M., Santorini, B., Marcinkiewicz, M.A. 1993. Building a large annotated corpus of English: The Penn Treebank.  Computational Linguistics, 19:313-330.   Ngai, G. and Florian, R. 2001.  Transformation-based learning in the fast lane.  In Proceedings of North America ACL 2001(June): 40-47.   Smith, L., Rindflesch, T., Wilbur, W.J. 2004. MedPost: a part-of-speech tagger for bioMedical text.  Bioin-formatics 20 (14):2320-2321.   Tateisi, Y., Ohta, T., dong Kim, J., Hong, H., Jian, S., Tsujii, J. 2003. The GENIA corpus: Medline ab-stracts annotated with linguistic information.  In: Third meeting of SIG on Text Mining, Intelligent Systems for Molecular Biology (ISMB).   
119
BioNLP 2007: Biological, translational, and clinical language processing, pages 179?180,
Prague, June 2007. c?2007 Association for Computational Linguistics
 Adaptation of POS Tagging for Multiple BioMedical Domains John E. Miller1 Manabu Torii2 K. Vijay-Shanker1 1Computer & Information Sciences University of Delaware Newark, DE 19716 {jmiller,vijay}@cis.udel.edu 2Biostatistics, Bioinformatics and Biomathematics Georgetown University Medical Center  Washington, DC 20057 mt352@georgetown.edu   1 Introduction Part of Speech (POS) tagging is often a prerequi-site for tasks such as partial parsing and informa-tion extraction. However, when a POS tagger is simply ported to another domain the tagger?s accu-racy drops. This problem can be addressed through hand annotation of a corpus in the new domain and supervised training of a new tagger. In our meth-odology, we use existing raw text and a generic POS annotated corpus to develop taggers for new domains without hand annotation or supervised training. We focus in particular on out-of-vocabulary words since they reduce accuracy (Lease and Charniak. 2005; Smith et al 2005).  There is substantial information in the deriva-tional suffixes and few inflectional suffixes of English.  We look at individual words and their suffixes along with the morphologically related words to build a domain specific lexicon contain-ing POS tags and probabilities for each word.  2 Adaptation Methodology Our methodology is described in detail in Miller et al(2007) and summarized here: 1) Process ge-neric POS annotated text to obtain state and lexical POS tag probabilities. 2) Obtain a frequency table of words from a large corpus of raw sub-domain text. 3) Construct a partial sub-domain lexicon matching relative frequencies of morphologically related words with words from the generic anno-tated text averaging POS probabilities of the k nearest neighbors. 4) Combine common generic words and orthographic word categories with the partial lexicon making the sub-domain lexicon. 5) Train a first order Hidden Markov Model (HMM) by Expectation Maximization (EM). 6) Apply the Viterbi algorithm with the HMM to tag sub-domain text. 
3 Adaptation to Multiple Domains Molecular Biology Domain: We used the Wall Street Journal corpus (WSJ) (Marcus et al 1993) as our generic POS annotated corpus. For our raw un-annotated text we used 133,666 abstracts from the MEDLINE distribution covering molecular biology and biomedicine sub-domains. We split the GENIA database  (Tateisi et al 2003) into training and test portions and ignored the POS tags for training. We ran a 5-fold cross validation study and obtained an average accuracy of 95.77%.  Medical Domain: Again we used the WSJ as our generic POS annotated corpus. For our raw un-annotated text we used 164,670 abstracts from the MEDLINE distribution with selection based on 83 journals from the medical domain. For our HMM EM training we selected 1966 abstracts (same journals). For evaluation purposes, we selected 1932 POS annotated sentences from the MedPost (Smith et al 2004) distribution (same journals). The MedPost tag set coding was converted to the Penn Treebank tag set using the utilities provided with the MedPost tagger distribution. We obtained an accuracy of 93.17% on the single medical test corpus, a substantial drop from the 95.77% average accuracy obtained in the GENIA corpus.  4 Coding Differences We looked at high frequency tagging errors in the medical test set and found that many errors resulted directly from the differences in the coding styles between GENIA and MedPost. Our model reflects the coding style of the WSJ, used for our generic POS annotated text. GENIA largely fol-lowed the WSJ coding conventions. Annotation in the 1932 sentences taken from MedPost had some systematic differences in coding style from this.  
179
Identified Differences: Lexical differences: 1) Words such as ?more? and ?less? are JJR or RBR in WSJ/GENIA but JJ or RB in MedPost. 2) Tokens such as %, =, /, <, > are typically NN or JJ in WSJ/GENIA but SYM in MedPost. 3)?be? is VB in WSJ/GENIA but VB or VBP in MedPost. 4) Some orthographic categories are JJ in WSJ/GENIA but NN in MedPost. Transition discrepancies: 1) Verbs are tagged VB following a TO or MD in WSJ/GENIA but only following a TO in MedPost. 2) MedPost prefers NN and NN-NN sequences. Ad Hoc Adjustments: We constructed a new lexicon accounting for some of the lexical differ-ences and attained an accuracy of 94.15% versus the previous 93.17%. Next we biased a few initial state transition probabilities, changing P(VB|MD) from very high to a very low and increasing P(NN|NN), and attained an accuracy of 94.63%.  As the coding differences had nothing to do with suffixes and suffix distributions, the central part of our methodology, we tried some ad hoc fixes to determine what our performance might have been. We suffered at least a 1.46% drop in accuracy due to differences in coding, not language use. 5 Evaluation The table shows the accuracy of our tagger and a few well-known taggers in our target biomedical sub-domains.   Molecular Biology %Accuracy - Our  tagger (5-fold) 95.8% - MedPost  94.1% - Penn BioIE1 95.1% - GENIA supervised 98.3% Medical Domain  - Our  tagger  93.17% - Our  tagger (+ lex bias) 94.15% - Our tagger (+ lex & trans bias) 94.63% - MedPost supervised2 96.9% The MedPost and Penn BioIE taggers used an-notated text and supervised training in other bio-medical domains, but they were not trained spe-cifically for the GENIA Molecular Biology sub-domain. Our tagger seems competitive with these                                                  1 PennBioIE. 2005. Mining The Bibliome Project. http://bioie.ldc.upenn.edu/. 2 Based on Medpost test set of 1000 sentences, not on our test set of 1932 sentences.  
taggers.  We cannot claim superior accuracy as these taggers may suffer the same coding bias ef-fects we have noted. The superior performance of the GENIA tagger (Tsuruoka et al 2005) in the Molecular Biology/GENIA domain and the Med-Post tagger (Smith et al 2004) in its biomedical domain owes to their use of supervised training on an annotated training set with evaluation on a test set from the same domain. The approximate 1.5% bias effect due to coding differences is attributable to organizational differences in POS.  6 Conclusions  To cope with domain specific vocabulary and uses of vocabulary, we exploited the suffix information of words and related words to build domain spe-cific lexicons. We trained our HMM using EM and un-annotated text from the specialized domains. We assessed accuracy versus annotated test sets in the specialized domains, noting discrepancies in our results across specialized domains, and con-cluding that our methodology performs competi-tively versus well-known taggers that used anno-tated text and supervised training in other biomedi-cal domains. References M. Lease and E. Charniak. 2005. Parsing Biomedical Literature.  IJCNLP-05: 58-69.   M. Marcus, B. Santorini, M.A. Marcinkiewicz. 1993. Building a large annotated corpus of English: The Penn Treebank.  Comp. Ling., 19:313-330.   J.E. Miller, M. Torii, K. Vijay-Shanker. 2007. Building Domain-Specific Taggers Without Annotated (Do-main) Data. EMNLP-07.   L. Smith, T. Rindflesch, W.J. Wilbur. 2004. MedPost: a part-of-speech tagger for bioMedical text.  Bioinfor-matics 20 (14):2320-2321.   L. Smith, T. Rindflesch, W.J. Wilbur. 2005. The impor-tance of the lexicon in tagging biomedical text. Natu-ral Language Engineering 12(2) 1-17. Y. Tateisi, T. Ohta, J. Dong Kim, H. Hong, S. Jian, J. Tsujii. 2003. The GENIA corpus: Medline abstracts annotated with linguistic information. Third meeting of SIG on Text Mining, ISMB.   Y. Tsuruoka, Y. Tateishi, J.D. Kim, T. Ohta, J. McNaught, S. Ananiadou, J. Tsujii. 2005. Developing a Robust Part-of-Speech Tagger for Biomedical Text, Advances in Informatics, LNCS 3746: 382-392. 
180
