Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval 2014), pages 366?369,
Dublin, Ireland, August 23-24, 2014.
JOINT_FORCES:  
Unite Competing Sentiment Classifiers with Random Forest 
 
 
Oliver D?rr, Fatih Uzdilli, and Mark Cieliebak 
Zurich University of Applied Sciences 
Winterthur, Switzerland 
{dueo, uzdi, ciel}@zhaw.ch 
 
  
 
Abstract 
In this paper, we describe how we cre-
ated a meta-classifier to detect the mes-
sage-level sentiment of tweets. We par-
ticipated in SemEval-2014 Task 9B by 
combining the results of several exist-
ing classifiers using a random forest. 
The results of 5 other teams from the 
competition as well as from 7 general-
purpose commercial classifiers were 
used to train the algorithm. This way, 
we were able to get a boost of up to 
3.24 F1 score points. 
1 Introduction 
The interest in sentiment analysis grows as pub-
licly available text content grows. As one of the 
most used social media platforms, Twitter pro-
vides its users a unique way of expressing them-
selves. Thus, sentiment analysis of tweets has 
become a hot research topic among academia 
and industry. 
In this paper, we describe our approach of com-
bining multiple sentiment classifiers into a meta-
classifier. The introduced system participated in 
SemEval-2014 Task 9: ?Sentiment Analysis in 
Twitter, Subtask?B Message Polarity Classifica-
tion? (Rosenthal et al., 2014). The goal was to 
classify a tweet on the message level using the 
three classes positive, negative, and neutral. The 
performance is measured using the macro-
averaged F1 score of the positive and negative 
classes which is simply named ?F1 score? 
throughout the paper. An almost identical task 
was already run in 2013 (Nakov et al., 2013).  
The tweets for training and development were 
only provided as tweet ids. A fraction (10-15%) 
of the tweets was no longer available on twitter, 
which makes the results of the competition not 
fully comparable. For testing, in addition to last 
year?s data (tweets and SMS) new tweets and 
data from a surprise domain (LiveJournal) were 
provided. An overview of the provided data is 
shown in Table 1. 
Using additional manually labelled data for 
training the algorithm was not allowed for a 
?constrained? submission. Submissions using 
additional data for training were marked as ?un-
constrained?. 
 
Dataset Total Pos Neg Neu 
Training (Tweets) 8224 3058 1210 3956 
Dev (Tweets) 1417 494 286 637 
Test: Twitter2013 3813 1572 601 1640 
Test: SMS2013 2093 492 394 1207 
Test: Twitter2014 1853 982 202 669 
Test: Twitter?14Sarcasm 86 33 40 13 
Test: LiveJournal2014 1142 427 304 411 
Table 1: Number of Documents we were able to 
download for Training, Development and Test-
ing. 
Our System.  The results of 5 other teams from 
the competition as well as from 7 general-
purpose commercial classifiers were used to train 
our algorithm. Scientific subsystems were s_gez 
(Gezici et al., 2013), s_jag (Jaggi et al., 2014), 
s_mar (Marchand et al., 2013), s_fil (Filho and 
Pardo, 2013), s_gun (G?nther and Furrer, 2013). 
They are all ?constrained? and machine learning-
based, some with hybrid rule-based approaches.  
Commercial subsystems were provided by 
This work is licensed under a Creative Commons Attribution 
4.0 International Licence. Page numbers and proceedings 
footer are added by the organisers. Licence details: 
http://creativecommons.org/licenses/by/4.0/ 
 
366
Lymbix (c_lym), MLAnalyzer1 (c_mla), Seman-
tria (c_sem), Sentigem (c_snt), Syttle (c_sky), 
Text-Processing.com (c_txp), and Webknox 
(c_web). Subsystems c_txp and c_web are ma-
chine learning-based, c_sky is rule-based, and 
m_mla is a mix (other tools unknown). All sub-
systems were designed to handle tweets and fur-
ther text types. 
Our submission included a subset of all classi-
fiers including unconstrained ones, leading to an 
unconstrained submission. The 2014 winning 
team obtained an F1 score of 70.96 on the Twit-
ter2014 test set. Our approach was ranked on the 
12th place out of the 50 participating submis-
sions, with an F1 score of 66.79. Our further 
rankings were 12th on the LiveJournal data, 12th 
on the SMS data, 12th on Twitter-2013, and 26th 
on Twitter Sarcasm. 
Improvement. Although our meta-classifier 
did not reach a top position in the competition, 
we were able to beat even the best single subsys-
tem it was based on for almost all test sets (ex-
cept sarcasm). In previous research we showed 
that same behaviour on different systems and 
data sets (Cieliebak et al., 2014). This shows that 
also other systems from the competition, even 
best ones, probably can be improved using our 
approach. 
 
2 Approach 
Meta-Classifier. A meta-classifier is an ap-
proach to predict a classification given the indi-
vidual results of other classifiers by combining 
them. A robust classifier, which can naturally 
handle categorical input such as sentiments by 
design, is the random forest classifier (Breiman, 
2001). The algorithm uses the outputs of individ-
ual classifiers as features and the labels on the 
training data as input for training. Afterwards, in 
the test phase, the random forest makes predic-
tions using the outputs of the same individual 
classifiers. We use the random forest implemen-
tation of the R-package "randomForest" and treat 
the three votes (negative, neutral, positive) as 
categorical input. 
Training Data. To build a meta-classifier, first, 
one has to train all the subsystems with a dataset. 
Second, the meta-classifier has to be trained 
based on the output of the subsystems with a dif-
ferent dataset than the one used for training the 
1 mashape.com/mlanalyzer/ml-analyzer 
subsystems. We decided to take the natural split 
of the data provided by the organizers (see Table 
1). For the scientific subsystems we used the 
Training set to train on; for training the random 
forest classifier we used the Dev set. The com-
mercial systems were used "as-is", in particular, 
we did not train them on any of the provided data 
sets. Table 2 shows the performance of the indi-
vidual subsystems on the different data sets. 
ID
 
D
ev
 
SM
S2
01
3 
T
w
it
te
r2
01
3 
T
w
it
te
r2
01
4 
Sa
rc
as
m
20
14
 
L
iv
eJ
ou
rn
al
20
14
 
s_gez 32.22 31.23 30.77 28.57 51.57 50.83 
s_jag 61.47 56.17 60.21 62.73 44.26 63.91 
s_mar 28.95 22.94 26.68 22.86 31.01 24.47 
s_fil 52.88 49.94 55.61 55.08 38.22 56.41 
s_gun 63.93 61.51 65.33 65.09 48.80 68.91 
       c_lym 48.38 44.40 48.68 54.17 34.87 58.71 
c_mla 49.79 46.41 50.17 47.74 43.16 59.02 
c_sma 55.89 52.26 56.15 53.51 49.33 56.53 
c_sky 56.30 52.04 54.67 56.28 40.60 54.61 
c_txp 43.69 46.47 41.15 44.00 59.74 56.57 
c_web 47.44 41.64 45.21 48.83 45.25 53.45 
c_snt 56.86 58.42 62.17 58.35 36.08 65.74 
Table 2: F1 scores of the individual systems. 
Bold shows the best commercial or scientific 
system per data set; grey cells indicates the over-
all maximum. 
3 Experiments 
There exist three obvious selections of subsys-
tems for our meta-classifier: all subsystems, only 
scientific subsystems, and only commercial sub-
systems (called All_Subsystems, All_Scientific, 
and All_Commercial, respectively). Table 3 
shows performance of these selections of subsys-
tems on the data sets. For comparison, the table 
shows also the performance of the overall best 
individual subsystem in the first row. It turns out 
that All_Subsystems is almost always better than 
the best individual subsystem, while the other 
two meta-classifiers are inferior. 
Testing All Subsets. We performed a systematic 
evaluation on how the performance depends on 
the choice of a particular selection of individual 
subsystems. This resembles feature selection, 
which is a common task in machine learning, and  
                                                 
367
 
As a general trend we see that the performance 
increases with the number of classifiers; howev-
er, there exist certain subsets which perform bet-
ter than using all available classifiers. 
 
Best Subset Selection. In Figure 1, we marked 
for each number of subsystems the highest OOB-
F1-Score on the Dev set by a diamond. In addi-
tion, the subset with the overall highest OOB-F1-
Score, consisting of 7 classifiers, is displayed as 
a filled diamond.  
 
 
Figure 1: Box Plot showing the F1 scores (out-of-
bag) for all subsets on the Dev set. Diamonds 
mark the best combination of classifiers for the 
corresponding number. 
 
We also evaluated the performance of these 
?best? subsets on other unseen test data. In Fig-
ure 2, we show the results of the test set Twit-
ter2014. The scores for the very subsets marked 
in Figure 1 are displayed in the same way here.  
 
 
 
Figure 2: F1 scores of all subsets on the Twit-
ter2014 test set. 
 
For comparison, we marked the performance 
of the system with all classifiers by a straight 
line. We find that all subsets that are ?best? on 
the Dev set perform very well on the Twit-
ter2014 set. In fact, some even beat the system 
with all classifiers. Similar behaviour can be ob-
served for Twitter2013 and LiveJournal2014 (da-
ta not shown), while All_Subsets yields signifi-
cantly superior results on SMS2013 (see Figure 
3). No conclusive observation is possible for 
Sarcasm2014 (data not shown).  
 
To elucidate on the question whether to use a 
subset with the highest OOB-F1 on the Dev set 
(called Max_OOB_Subset) or to use all available 
classifiers, we show in Table 3 the performance 
of these systems on all test sets in rows 2 and 5, 
respectively. Since All_Systems is in 2 out of 5 
cases the best classifier, and 
?Max_OOB_Subset? in 3 out of 5 cases, a deci-
sive answer cannot be drawn. However, we find 
 Dev 
(OOB) 
SMS2013 Twitter2013 Twitter2014 Twitter2014 
Sarcasm 
LiveJournal2014 
Best Individual 63.93 61.51 65.33 65.09 48.80 68.91 
All_Subsystems 63.54 64.22 67.03 67.70 46.37 71.11 
All_Scientific 64.52 60.42 64.54 64.99 43.35 67.86 
All_Commercial 62.11 58.34 60.70 63.86 44.85 65.57 
Max_OOB_Subset 68.27 63.02 67.49 68.33 45.40 71.43 
Our Submission 65.00 62.20 66.61 66.79 45.40 70.02 
Table 3: Performance (in F1 score) of meta-classifiers with different subsystems. The subset used in 
our submission is composed of s_gez, s_jag, s_mar, s_fil, s_gun, c_sma, c_sky, c_snt. 
?Max_OOB_Subset? is composed of s_jag, s_mar, s_gun, c_lym, c_sma, c_sky, c_txp. Bold shows 
best result per data set. The first row shows results of the best individual subsystem. 
368
that All_Systems generalizes better to foreign 
types of data, while Max_OOB_Subset performs 
well on similar data (in this case, tweets). 
 
 
Figure 3: F1 score of all subsets on the SMS2013 
test set. 
4 Conclusion 
We have shown that a meta-classifier approach 
using random forest can beat the performance of 
the individual sentiment classifiers it is based on. 
Typically, the more subsystems are used, the bet-
ter the performance. However, there exist selec-
tions of only few subsystems that perform com-
parable to using all subsystems. In fact, a good 
selection strategy is to select the subset which 
has maximum out-of-bag F1 score on the training 
data. This subset performs slightly better than 
All_Systems on similar data sets, and only slight-
ly worse on new types of data. Advantage of this 
subset is that it requires less classifiers (7 instead 
of 12 in our case), which reduces the cost 
(runtime or license fees) of the meta-classifier. 
5 Acknowledgements 
We would like to thank all system providers for 
giving us the opportunity to use their systems for 
this evaluation, and especially Tobias G?nther 
and Martin Jaggi for carefully reading the manu-
script. 
 
 
 
 
References 
Leo Breiman. 2001. Random Forests. Machine Learn-
ing 45(1), 5-32. 
Mark Cieliebak, Oliver D?rr, Fatih Uzdilli. 2014. Me-
ta-Classifiers Easily Improve Commercial Senti-
ment Detection Tools. In Proceedings of the 9th 
edition of the Language Resources and Evaluation 
Conference (LREC), pages 3100-3104, May 26-31, 
2014, Reykjavik, Iceland. 
Pedro P. Balage Filho, Thiago A. S. Pardo. 2013. 
NILC USP: A Hybrid System for Sentiment Anal-
ysis in Twitter Messages. In Proceedings of the In-
ternational Workshop on Semantic Evaluation 
(SemEval-2013), pages 568-572, June 14-15, 2013, 
Atlanta, Georgia, USA. 
Gizem Gezici, Rahim Dehkharghani, Berrin Yani-
koglu, Dilek Tapucu, Yucel Saygin. 2013. SU-
Sentilab: A Classification System for Sentiment 
Analysis in Twitter. In Proceedings of the Interna-
tional Workshop on Semantic Evaluation 
(SemEval-2013), pages 471-477, June 14-15, 2013, 
Atlanta, Georgia, USA. 
Tobias G?nther, Lenz Furrer. 2013. GU-MLT-LT: 
Sentiment Analysis of Short Messages using Lin-
guistic Features and Stochastic Gradient Descent. 
In Proceedings of the International Workshop on 
Semantic Evaluation (SemEval-2013), pages 328-
332, June 14-15, 2013, Atlanta, Georgia, USA.  
Martin Jaggi, Fatih Uzdilli, and Mark Cieliebak. 
2014. Swiss-Chocolate: Sentiment Detection using 
Sparse SVMs and Part-Of-Speech n-Grams. In 
Proceedings of the International Workshop on Se-
mantic Evaluation (SemEval-2014), August 23-24, 
2014, Dublin, Ireland. 
Morgane Marchand, Alexandru Ginsca, Romaric Be-
san?on, Olivier Mesnard. 2013. [LVIC-LIMSI]: 
Using Syntactic Features and Multi-polarity Words 
for Sentiment Analysis in Twitter. In Proceedings 
of the International Workshop on Semantic Evalua-
tion (SemEval-2013), pages 418-424, June 14-15, 
2013, Atlanta, Georgia, USA. 
Sara Rosenthal, Preslav Nakov, Alan Ritter, and 
Veselin Stoyanov. 2014. SemEval-2014 Task 9: 
Sentiment Analysis in Twitter. In Proceedings of 
the International Workshop on Semantic Evalua-
tion (SemEval-2014), August 23-24, 2014, Dublin, 
Ireland. 
Preslav Nakov, Sara Rosenthal, Zornitsa Kozareva, 
Veselin Stoyanov, Alan Ritter, Theresa Wilson. 
2013. SemEval-2013 Task 2: Sentiment Analysis 
in Twitter. In Proceedings of the International 
Workshop on Semantic Evaluation (SemEval-
2013), pages 312-320, June 14-15, 2013, Atlanta, 
Georgia, USA. 
 
369
Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval 2014), pages 601?604,
Dublin, Ireland, August 23-24, 2014.
Swiss-Chocolate: Sentiment Detection
using Sparse SVMs and Part-Of-Speech n-Grams
Martin Jaggi
ETH Zurich
Z?urich, Switzerland
jaggi@inf.ethz.ch
Fatih Uzdilli and Mark Cieliebak
Zurich University of Applied Sciences
Winterthur, Switzerland
{ uzdi, ciel } @zhaw.ch
Abstract
We describe a classifier to predict the
message-level sentiment of English micro-
blog messages from Twitter. This pa-
per describes the classifier submitted to
the SemEval-2014 competition (Task 9B).
Our approach was to build up on the sys-
tem of the last year?s winning approach
by NRC Canada 2013 (Mohammad et al.,
2013), with some modifications and addi-
tions of features, and additional sentiment
lexicons. Furthermore, we used a sparse
(`
1
-regularized) SVM, instead of the more
commonly used `
2
-regularization, result-
ing in a very sparse linear classifier.
1 Introduction
With the immense growth of user generated text
online, the interest in automatic sentiment analy-
sis of text has greatly increased recently in both
academia and industry.
In this paper, we describe our approach for a
modified SVM based classifier for short text as in
Twitter messages. Our system has participated in
the SemEval-2014 Task 9 competition, ?Sentiment
Analysis in Twitter, Subtask?B Message Polarity
Classification? (Rosenthal et al., 2014). The goal
is to classify a tweet (on the full message level)
into the three classes positive, negative, and neu-
tral. An almost identical competition was already
run in 2013.
Our Results in the Competition. Our approach
was ranked on the 8th place out of the 50 partici-
pating submissions, with an F1-score of 67.54 on
the Twitter-2014 test set. The 2014 winning team
obtained an average F1-score of 70.96.
This work is licenced under a Creative Commons Attribution
4.0 International License. Page numbers and proceedings
footer are added by the organizers. License details: http:
//creativecommons.org/licenses/by/4.0/
(The more detailed rankings of our approach
were 4th rank on the LiveJournal data, 5th on the
SMS data (2013), 18th on Twitter-2013, and 16th
on Twitter Sarcasm, see (Rosenthal et al., 2014)
for full details and all results).
Data. In the competition, the tweets for training
and development were only provided as tweet IDs.
A fraction (10-15%) of the tweets were no longer
available on twitter, which makes the results of the
competition not fully comparable. For testing, in
addition to last years data (tweets and SMS), new
tweets and data from a surprise domain were pro-
vided. An overview of the data, which we were
able to download, is shown in Table 1.
Table 1: Overview of the data we found available
for training, development and testing.
Dataset Total Positive Negative Neutral
Train (Tweets) 8224 3058 1210 3956
Dev (Tweets) 1417 494 286 637
Test: Twitter2014 1853 982 202 669
Test: Twitter2013 3813 1572 601 1640
Test: SMS2013 2093 492 394 1207
Test: Tw2014Sarcasm 86 33 40 13
Test: LiveJournal2014 1142 427 304 411
2 Description of Our Approach
Compared to the previous NRC Canada 2013
approach (Mohammad et al., 2013), our main
changes are the following three: First we use
sparse linear classifiers instead of classical dense
ones. Secondly, we drop n-gram features com-
pletely, in favor of what we call part-of-speech
n-grams, which are n-grams where up to two to-
kens are the original ones, and the rest of the to-
kens is replaced by their corresponding POS tag
(noun, verb, punctuation etc). Third, we added
two new sentiment lexicons, containing numerical
scores associated for all 3 classes (positive, neu-
tral, negative), instead of just 2 as in classical po-
601
larity lexicons. All changes are described in more
detail in Sections 4 and 3 below.
Performance. We tried to reproduce the same
classifier as in (Mohammad et al., 2013) as a base-
line for comparison.
Trying to quantify our contributions, when
adding all our additional features and tricks de-
scribed below, the score of our method increases
from the baseline of 63.25 to 64.81 (on the Twitter-
2013 test set), which is a gain of 1.56 points in F1.
Baseline Approach by NRC Canada 2013.
Unfortunately our replica system of Mohammad
et al. (2013) only achieved an F1-score of 63.25 on
the Twitter-2013 test set, while their score in the
2013 competition on the same test set was 69.02,
nearly 6 points higher in F1.
Part of this big difference might be explained
by the fact that the exact same training sets are
not available anymore. Other possibly more im-
portant differences are the SVM classifier variant
used and class weighting (described in Section 4).
Furthermore, we didn?t implement all features in
the exactly same way, see the more detailed de-
scription in Section 3.1.2 below. Although we had
the impression that these changes individually had
only a relatively minor effect, it might be that the
changes together with the different training set add
up to the difference in score.
3 Features
Before we describe the linear classifier in Sec-
tion 4, we detail the used features for each tweet
message. On average, we generated 843 features
per tweet. For comparison, the average in our
NRC Canada 2013 replica system was only 285.
Most of the increase in features comes from the
fact that we allowed for slightly longer n-grams
(6 instead of 4), and substrings (length 6 instead
of 5).
3.1 New Features
3.1.1 Part of Speech n-grams
We used the ArkTweetNLP structured prediction
POS tagger provided by Owoputi et al. (2013)
together with their provided standard model
(model.20120919) suitable for twitter data.
Part of speech n-grams are n-grams where up
to two tokens are kept as the original ones, and all
other tokens are replaced by their corresponding
POS tag (noun, verb, punctuation etc). We gener-
ated these modified n-grams for all possible posi-
tions of the one or two original tokens within the n
positions, for 3 ? n ? 6.
As features for a classifier, we found POS n-
grams at least as useful (with some more robust-
ness) as the n-grams themselves. In our final
approach, we dropped the use of n-grams com-
pletely, and only used POS n-grams instead. The
idea of replacing some of the tokens by their POS
tag is also investigated by Joshi and Penstein-Ros?e
(2009), where the authors used n ? 3.
3.1.2 Various Changes Compared to NRC
Canada 2013
? We do not allow n-grams (or POS n-grams)
to span over sentence boundaries.
? Substrings of length up to 6 (instead of 5).
? Substring features are weighted in-
creasingly by their length (weights
0.7 ? {1.0, 1.1, 1.2, 1.4, 1.6, 1.9} for lengths
3, 4, . . . )
? Instead of the score itself, we used the sig-
moid value s(t) = 1/(1+ e
?t
)) of each lexi-
con score. For each lexicon, the 4 scores were
the same as in (Mohammad et al., 2013), i.e.
per tweet, we use the number of tokens ap-
pearing in the lexicon, the sum and the max
of the scores, and the last non-zero score.
We skipped some features from the baseline ap-
proach (because their effect was not significant in
our setting): Elongated words (number of words
with one character repeated more than two times),
and word clustering. Also, we had a slightly sim-
plified variant of how to use the lexicon scores.
We didn?t count the lexicon scores separately per
emotion (pos and neg), but only altogether.
3.2 Existing Features
Text Preprocessing. A good tokenization seems
very important for twitter data. We used the pop-
ular tokenizer ArkTweetNLP (Owoputi et al., 2013)
which is suitable for tweets. All text was trans-
formed to lowercase (except for those features in
(Mohammad et al., 2013) which use case infor-
mation). As usual, URLs were normalized to
http://someurl and twitter user IDs to @someuser.
We also employed the usual marking of negated
contexts of a sentence as in (Pang et al., 2002),
602
using the list of negation words from Christopher
Potts? sentiment tutorial
1
.
4 Classifier
We used a linear support vector machine (SVM)
classifier, which is standard for text data. The Lib-
Linear package (Fan et al., 2008) was employed for
training the multi-class classifier.
Multi-Class Formulation, and Class Weights.
We found significant performance changes de-
pending on which type of multi-class SVM, and
also which regularizer (`
1
- or `
2
-norm) is used.
For the multi-class variant, we found the one-
against-all models to perform slightly better than
the Crammer and Singer (2001) formulation.
More importantly, since the 3 classes (posi-
tive, negative and neutral) are quite unbalanced
in size in the training set, it is crucial to set a
good weight for each class in the SVM. We used
(4.52, 1.38, 1.80), which corresponds to the twice
the ratio of each class compared to the average
class size.
Sparse Linear Classifiers. In our setting, an
`
1
-regularized squared loss SVM (one-against-all)
performed best (this is mode L1R L2LOSS SVC in
LibLinear), despite the fact that `
2
-regularization is
generally more commonly used in text applica-
tions. We used C = 0.055 for the regularization
parameter, and ? = 0.003 as the optimization stop-
ping criterion. We did not employ any kernel, but
always used linear classifiers.
Another benefit of the `
1
-regularization is that
the resulting classifier is extremely sparse and
compact, which significantly accelerates the eval-
uation of the classifier on large amounts of text,
e.g. for testing. Our final classifier only uses
1985 non-zero features (1427 unigram/substrings,
and 558 other features, such as lexicon scores, n-
grams, POS n-grams, as explained in the previous
Section 3).
As the resulting classifier is so small, it is also
relatively easy to read and interpret. We have
made our final classifier weights publicly available
for download as a text file
2
. Every line contains
the feature description followed by the 3 weights
corresponding to the 3 sentiment classes.
1
http://sentiment.christopherpotts.
net/lingstruc.html
2
http://www.m8j.net/sentiment/
Our final classifier was trained on 9641 tweets,
which are all we could download from the IDs
given in this years train and dev set.
5 Lexicons
A sentiment lexicon is a mapping from words (or
n-grams) to an association score corresponding to
positive or negative sentiment. Such lists can be
constructed either from manually labeled data (su-
pervised), or automatically labeled data (unsuper-
vised) as for example tweets with a positive or
negative smiley. We used the same set of lexicons
as in (Mohammad et al., 2013), with one addition:
5.1 A Lexicon for 3-Class Classification
Our main new addition was another type of lexi-
con, which not only provides one score per word,
but 3 of them, (being the association to positive,
negative and neutral). The idea here is to improve
on the discrimination quality, especially for neu-
tral text, and treat all 3 labels in this multi-class
task the same way, instead of just 2 as in the pre-
vious approaches.
Data. We found it challenging to find good
datasets to build such a lexicon. We again used the
Sentiment140 corpus (Go et al., 2009) (containing
tweets with positive or negative emoticons). Using
a subset of 100k positive and 100k negative ones,
we added a set of 100k arbitrary (hopefully neu-
tral) tweets. The neutral set was chosen randomly
from the thinknook.com dataset
3
of 1.5mio tweets
(from which we ignored the provided labels, and
counted the tweets as neutral).
We did the same with the movie reviews from
the recent kaggle competition on annotated re-
views from the rotten-tomatoes website
4
. We au-
tomatically built a lexicon from 100k texts in this
dataset, with the data balanced equally for the
three classes.
Features Used in the Lexicon. To construct the
lexicon, we extracted the POS n-grams (as we de-
scribed in Section 3.1.1 above) from all texts. In
comparison, Mohammad et al. (2013) used non-
contiguous n-grams (unigram?unigram, unigram?
bigram, and bigram?bigram pairs). We only used
POS n-grams with 2 tokens kept original, and the
3
http://thinknook.com/twitter-
sentiment-analysis-training-corpus-
dataset-2012-09-22/
4
http://www.kaggle.com/c/
sentiment-analysis-on-movie-reviews/data
603
remaining ones replaced by their POS tag, with n
ranging from 3 to 6.
Building the Lexicon. While in (Mohammad
et al., 2013), the score for each n-gram was com-
puted using point-wise mutual information (PMI)
with the labels, we trained a linear classifier on
the same labels instead. The lexicon weights are
set as the resulting classifier weights for our (POS)
n-grams. We used the same type of sparse SVM
trained with LibLinear, for 3 classes, as in the final
classifier.
Download of the Lexicons. We built 4 lexicons
as described above. Thanks to the sparsity of
the linear weights from the SVM, they are again
relatively small, analogous to the final classifier.
We also provide the lexicons for download as text
files
5
.
5.2 Existing Lexicons
Lexicons from Manually Labeled Data. We
used the same 3 existing sentiment lexicons as in
(Mohammad et al., 2013). All lexicons give a sin-
gle score for each word (if present in the lexicon).
Those existing lexicons are: NRC Emotion Lexi-
con (about 14k words), the MPQA Lexicon (about
8k words), and the Bing Liu Lexicon (about 7k
words).
Lexicons from Automatically Labeled Data.
The NRC hashtag sentiment lexicon was gen-
erated automatically from a set of 775k tweets
containing a hashtag of a small predefined list
of positive and negative hashtags (Mohammad
et al., 2013). Lexicon scores were trained via
PMI (point-wise mutual information). Scores are
not only available for words, but also unigram?
unigram, unigram?bigram, and bigram?bigram
pairs (that can be non-contiguous in the text).
The Sentiment140 lexicon (Go et al., 2009) was
generated automatically from a set of 1.6 million
tweets containing a positive or negative emoticon.
This uses the same features and scoring as above.
6 Conclusion
We have described an SVM classifier to detect the
sentiment of short texts such as tweets. Our sys-
tem is built up on the approach of NRC Canada
(Mohammad et al., 2013), with several modifica-
tions and extensions (e.g. sparse linear classifiers,
5
http://www.m8j.net/sentiment/
POS-n-grams, new lexicons). We have seen that
our system significantly improves the baseline ap-
proach, achieving a gain of 1.56 points in F1 score.
We participated in the SemEval-2014 competi-
tion for Twitter polarity classification, and our sys-
tem was among the top ten out of 50 submissions,
with an F1-score of 67.54 on tweets.
For future work, it would be interesting to in-
corporate our improvements into the most recent
version of NRC Canada or similar systems, to see
how much one could gain there.
References
Crammer, K. and Singer, Y. (2001). On the Algo-
rithmic Implementation of Multiclass Kernel-
based Vector Machines. JMLR, 2:265?292.
Fan, R.-E., Chang, K.-W., Hsieh, C.-J., Wang, X.-
R., and Lin, C.-J. (2008). LIBLINEAR: A Li-
brary for Large Linear Classification. JMLR,
9:1871?1874.
Go, A., Bhayani, R., and Huang, L. (2009). Twit-
ter Sentiment Classification using Distant Su-
pervision. Technical report, The Stanford Natu-
ral Language Processing Group.
Joshi, M. and Penstein-Ros?e, C. (2009). General-
izing dependency features for opinion mining.
In Proceedings of the ACL-IJCNLP 2009 Con-
ference Short Papers, p 313?316, Singapore.
Association for Computational Linguistics.
Mohammad, S. M., Kiritchenko, S., and Zhu, X.
(2013). NRC-Canada: Building the State-of-
the-Art in Sentiment Analysis of Tweets. In
SemEval-2013 - Proceedings of the Interna-
tional Workshop on Semantic Evaluation, pages
321?327, Atlanta, Georgia, USA.
Owoputi, O., O?Connor, B., Dyer, C., Gimpel,
K., Schneider, N., and Smith, N. A. (2013).
Improved Part-Of-Speech Tagging for Online
Conversational Text with Word Clusters. In
Proceedings of NAACL-HLT, pages 380?390.
Pang, B., Lee, L., and Vaithyanathan, S. (2002).
Thumbs up? Sentiment Classification using
Machine Learning Techniques. In ACL-02 con-
ference, pages 79?86, Morristown, NJ, USA.
Association for Computational Linguistics.
Rosenthal, S., Ritter, A., Nakov, P., and Stoyanov,
V. (2014). SemEval-2014 Task 9: Sentiment
Analysis in Twitter. In SemEval 2014 - Pro-
ceedings of the Eighth International Workshop
on Semantic Evaluation, Dublin, Ireland.
604
