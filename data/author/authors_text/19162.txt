Proceedings of NAACL-HLT 2013, pages 201?210,
Atlanta, Georgia, 9?14 June 2013. c?2013 Association for Computational Linguistics
Text Alignment for Real-Time Crowd Captioning
Iftekhar Naim, Daniel Gildea, Walter Lasecki and Jeffrey P. Bigham
Department of Computer Science
University of Rochester
Rochester, NY 14627
Abstract
The primary way of providing real-time cap-
tioning for deaf and hard of hearing people
is to employ expensive professional stenogra-
phers who can type as fast as natural speak-
ing rates. Recent work has shown that a
feasible alternative is to combine the partial
captions of ordinary typists, each of whom
types part of what they hear. In this paper,
we describe an improved method for combin-
ing partial captions into a final output based
on weighted A? search and multiple sequence
alignment (MSA). In contrast to prior work,
our method allows the tradeoff between accu-
racy and speed to be tuned, and provides for-
mal error bounds. Our method outperforms
the current state-of-the-art on Word Error Rate
(WER) (29.6%), BLEU Score (41.4%), and
F-measure (36.9%). The end goal is for
these captions to be used by people, and so
we also compare how these metrics correlate
with the judgments of 50 study participants,
which may assist others looking to make fur-
ther progress on this problem.
1 Introduction
Real-time captioning provides deaf or hard of hear-
ing people access to speech in mainstream class-
rooms, at public events, and on live television. To
maintain consistency between the captions being
read and other visual cues, the latency between when
a word was said and when it is displayed must be
under five seconds. The most common approach to
real-time captioning is to recruit a trained stenogra-
pher with a special purpose phonetic keyboard, who
transcribes the speech to text within approximately 5
seconds. Unfortunately, professional captionists are
quite expensive ($150 per hour), must be recruited in
blocks of an hour or more, and are difficult to sched-
ule on short notice. Automatic speech recognition
(ASR) (Saraclar et al, 2002) attempts to solve this
TXLFNIR[OD]\GRJ
&RPELQHUWKHEURZQIR[MXPSHG
IR[MXPSHGRYHUWKHOD]\
WKHTXLFNEURZQIR[MXPSHGRYHUWKHOD]\GRJ
)LQDO&DSWLRQ
0HUJLQJ,QFRPSOHWH&DSWLRQV
&
&
&
Figure 1: General layout of crowd captioning systems.
Captionists (C1, C2, C3) submit partial captions that are
automatically combined into a high-quality output.
problem by converting speech to text completely au-
tomatically. However, the accuracy of ASR quickly
plummets to below 30% when used on an untrained
speaker?s voice, in a new environment, or in the ab-
sence of a high quality microphone (Wald, 2006b).
An alternative approach is to combine the efforts
of multiple non-expert captionists (anyone who can
type) (Lasecki et al, 2012; Lasecki and Bigham,
2012; Lasecki et al, 2013). In this approach, mul-
tiple non-expert human workers transcribe an audio
stream containing speech in real-time, and their par-
tial input is combined to produce a final transcript
(see Figure 1). This approach has been shown to
dramatically outperform ASR in terms of both accu-
racy and Word Error Rate (WER), even when us-
ing captionists drawn from Amazon?s Mechanical
Turk. Furthermore, recall approached and even ex-
ceeded that of a trained expert stenographer with
seven workers contributing, suggesting that the in-
formation is present to meet the performance of a
stenographer. However, combining these captions
involves real-time alignment of partial captions that
may be incomplete and that often have spelling er-
rors and inconsistent timestamps. In this paper,
we present a more accurate combiner that leverages
201
Multiple Sequence Alignment (MSA) and Natural
Language Processing to improve performance.
Gauging the quality of captions is not easy. Al-
though word error rate (WER) is commonly used in
speech recognition, it considers accuracy and com-
pleteness, not readability. As a result, a lower WER
does not always result in better understanding (Wang
et al, 2003). We compare WER with two other com-
monly used metrics: BLEU (Papineni et al, 2002)
and F-measure (Melamed et al, 2003), and report
their correlation with that of 50 human evaluators.
The key contributions of this paper are as follows:
? We have implemented an A?-search based Mul-
tiple Sequence Alignment algorithm (Lermen
and Reinert, 2000) that can trade-off speed and
accuracy by varying the heuristic weight and
chunk-size parameters. We show that it outper-
forms previous approaches in terms of WER,
BLEU score, and F-measure.
? We propose a beam-search based technique us-
ing the timing information of the captions that
helps to restrict the search space and scales ef-
fectively to align longer sequences efficiently.
? We evaluate the correlation of WER, BLEU,
and F-measure with 50 human ratings of cap-
tion readability, and found that WER was more
highly correlated than BLEU score (Papineni
et al, 2002), implying it may be a more useful
metric overall when evaluating captions.
2 Related Work
Most of the previous research on real-time caption-
ing has focused on Automated Speech Recognition
(ASR) (Saraclar et al, 2002; Cooke et al, 2001;
Praz?a?k et al, 2012). However, experiments show
that ASR systems are not robust enough to be ap-
plied for arbitrary speakers and in noisy environ-
ments (Wald, 2006b; Wald, 2006a; Bain et al, 2005;
Bain et al, 2012; Cooke et al, 2001).
2.1 Crowd Captioning
To address these limitations of ASR-based tech-
niques, the Scribe system collects partial captions
from the crowd and then uses a graph-based in-
cremental algorithm to combine them on the fly
(Lasecki et al, 2012). The system incrementally
builds a chain graph, where each node represents a
set of equivalent words entered by the workers and
the link between nodes are adjusted according to the
order of the input words. A greedy search is per-
formed to identify the path with the highest confi-
dence, based on worker input and an n-gram lan-
guage model. The algorithm is designed to be used
online, and hence has high speed and low latency.
However, due to the incremental nature of the algo-
rithm and due to the lack of a principled objective
function, it is not guaranteed to find the globally op-
timal alignment for the captions.
2.2 Multiple Sequence Alignment
The problem of aligning and combining multiple
transcripts can be mapped to the well-studied Mul-
tiple Sequence Alignment (MSA) problem (Edgar
and Batzoglou, 2006). MSA is an important prob-
lem in computational biology (Durbin et al, 1998).
The goal is to find an optimal alignment from a
given set of biological sequences. The pairwise
alignment problem can be solved efficiently using
dynamic programming in O(N2) time and space,
where N is the sequence length. The complexity of
the MSA problem grows exponentially as the num-
ber of sequences grows, and has been shown to be
NP-complete (Wang and Jiang, 1994). Therefore,
it is important to apply some heuristic to perform
MSA in a reasonable amount of time.
Most MSA algorithms for biological sequences
follow a progressive alignment strategy that first per-
forms pairwise alignment among the sequences, and
then builds a guide tree based on the pairwise simi-
larity between these sequences (Edgar, 2004; Do et
al., 2005; Thompson et al, 1994). Finally, the input
sequences are aligned according to the order spec-
ified by the guide tree. While not commonly used
for biological sequences, MSA with A?-style search
has been applied to these problems by Horton (1997)
and Lermen and Reinert (2000).
Lasecki et al explored MSA in the context of
merging partial captions by using the off-the-shelf
MSA tool MUSCLE (Edgar, 2004), replacing the nu-
cleotide characters by English characters (Lasecki
et al, 2012). The substitution cost for nucleotides
was replaced by the ?keyboard distance? between
English characters, learned from the physical lay-
out of a keyboard and based on common spelling
202
errors. However, MUSCLE relies on a progressive
alignment strategy and may result in suboptimal so-
lutions. Moreover, it uses characters as atomic sym-
bols instead of words. Our approach operates on a
per-word basis and is able to arrive at a solution that
is within a selectable error-bound of optimal.
3 Multiple Sequence Alignment
We start with an overview of the MSA problem us-
ing standard notations as described by Lermen and
Reinert (2000). Let S1, . . . , SK ,K ? 2, be the K
sequences over an alphabet ?, and having length
N1, . . . , NK . The special gap symbol is denoted by
??? and does not belong to ?. Let A = (aij) be a
K ? Nf matrix, where aij ? ? ? {?}, and the ith
row has exactly (Nf ? Ni) gaps and is identical to
Si if we ignore the gaps. Every column of A must
have at least one non-gap symbol. Therefore, the jth
column of A indicates an alignment state for the jth
position, where the state can have one of the 2K ? 1
possible combinations. Our goal is to find the op-
timum alignment matrix AOPT that minimizes the
sum of pairs (SOP) cost function:
c(A) =
?
1?i?j?K
c(Aij) (1)
where c(Aij) is the cost of the pairwise alignment
between Si and Sj according to A. Formally,
c(Aij) =
?Nf
l=1 sub(ail, ajl), where sub(ail, ajl)
denotes the cost of substituting ajl for ail. If ail
and ajl are identical, the substitution cost is usu-
ally zero. For the caption alignment task, we treat
each individual word as a symbol in our alphabet
?. The substitution cost for two words is estimated
based on the edit distance between two words. The
exact solution to the SOP optimization problem is
NP-Complete, but many methods solve it approxi-
mately. In this paper, we adapt weighted A? search
for approximately solving the MSA problem.
3.1 A? Search for MSA
The problem of minimizing the SOP cost func-
tion for K sequences is equivalent to estimating the
shortest path between a single source and single sink
node in a K-dimensional lattice. The total num-
ber of nodes in the lattice is (N1 + 1) ? (N2 +
Algorithm 1 MSA-A? Algorithm
Require: K input sequences S = {S1, . . . , SK} having
length N1, . . . , NK , heuristic weight w, beam size b
1: start? 0K , goal? [N1, . . . , NK ]
2: g(start)? 0, f(start)? w ? h(start).
3: Q? {start}
4: while Q 6= ? do
5: n? EXTRACT-MIN(Q)
6: for all s ? {0, 1}K ? {0K} do
7: ni ? n + s
8: if ni = goal then
9: Return the alignment matrix for the reconstructed
path from start to ni
10: else if ni 6? Beam(b) then
11: continue;
12: else
13: g(ni)? g(n) + c(n, ni)
14: f(ni)? g(ni) + w ? h(ni)
15: INSERT-ITEM(Q, ni, f(ni))
16: end if
17: end for
18: end while
1) ? ? ? ? ? (NK + 1), each corresponding to a dis-
tinct position in K sequences. The source node is
[0, . . . , 0] and the sink node is [N1, . . . , NK ]. The
dynamic programming algorithm for estimating the
shortest path from source to sink treats each node
position [n1, . . . , nK ] as a state and calculates a ma-
trix that has one entry for each node. Assuming the
sequences have roughly same length N , the size of
the dynamic programming matrix is O(NK). At
each vertex, we need to minimize the cost over all
its 2K ? 1 predecessor nodes, and, for each such
transition, we need to estimate the SOP objective
function that requires O(K2) operations. Therefore,
the dynamic programming algorithm has time com-
plexity of O(K22KNK) and space complexity of
O(NK), which is infeasible for most practical prob-
lem instances. However, we can efficiently solve it
via heuristic A? search (Lermen and Reinert, 2000).
We use A? search based MSA (shown in Algo-
rithm 1, illustrated in Figure 2) that uses a prior-
ity queue Q to store dynamic programming states
corresponding to node positions in the K dimen-
sional lattice. Let n = [n1, . . . , nK ] be any node
in the lattice, s be the source, and t be the sink. The
A? search can find the shortest path using a greedy
Best First Search according to an evaluation func-
tion f(n), which is the summation of the cost func-
203

Q Q 7
&
&
&
WKH TXLFN EURZQ IR[ MXPSHG RYHU WKH OD]\ GRJ
WKH EURZQ IR[ MXPSHG
TXLFN IR[ OD]\ GRJ
IR[ MXPSHG RYHU WKH OD]\ BBBBBBBB BBBB
BBBBBBBBBBBBBBBB
BBBBBBBBBBBBBB
WKH EURZQ IR[ MXPSHG
TXLFN IR[ OD]\ GRJ
IR[ MXPSHG RYHU WKH OD]\

WKH EURZQ IR[ MXPSHG
TXLFN IR[ OD]\ GRJ
IR[ MXPSHG RYHU WKH OD]\BBBBBB BBBB
BBBBBB
BBBB WKH EURZQ IR[ MXPSHG
TXLFN IR[ OD]\ GRJ
IR[ MXPSHG RYHU WKH OD]\BBBBBB BBBB
BBBBBBBBBBB
BBBB WKH EURZQ IR[ MXPSHG
TXLFN IR[ OD]\ GRJ
IR[ MXPSHG RYHU WKH OD]\ BBBBBBBB BBBB
BBBBBBBBBBBBBBBB
BBBBBBBBBBBBBB
L
BMXPSHG MXPSHG GRJ
BB
BB
IR[IR[
IR[6

 N
BBBB
RYHU
OD]\
BB
RYHU

BBBB
BB
&DSWLRQ
&DSWLRQ
&DSWLRQ
OD]\BB BB
Figure 2: A? MSA search algorithm. Each branch is one of 2K ? 1 possible alignments for the current input. The
branch with minimum sum of the current alignment cost and the expected heuristic value hpair (precomputed).
tions g(n) and the heuristic function h(n) for node
n. The cost function g(n) denotes the cost of the
shortest path from the source s to the current node
n. The heuristic function h(n) is the approximate
estimated cost of the shortest path from n to the des-
tination t. At each step of the A? search algorithm,
we extract the node with the smallest f(n) value
from the priority queue Q and expand it by one edge.
The heuristic function h(n) is admissible if it never
overestimates the cost of the cheapest solution from
n to the destination. An admissible heuristic func-
tion guarantees that A? will explore the minimum
number of nodes and will always find the optimal
solution. One commonly used admissible heuristic
function is hpair(n):
hpair(n) = L(n ? t) =
?
1?i<j?K
c(A?p(?ni , ?nj ))
(2)
where L(n ? t) denotes the lower bound on the
cost of the shortest path from n to destination t, A?p
is the optimal pairwise alignment, and ?ni is the suf-
fix of node n in the i-th sequence. A? search using
the pairwise heuristic function hpair significantly re-
duces the search space and also guarantees finding
the optimal solution. We must be able to estimate
hpair(n) efficiently. It may appear that we need to
estimate the optimal pairwise alignment for all the
pairs of suffix sequences at every node. However,
we can precompute the dynamic programming ma-
trix over all the pair of sequences (Si, Sj) once from
the backward direction, and then reuse these values
at each node. This simple trick significantly speeds
up the computation of hpair(n).
Despite the significant reduction in the search
space, the A? search may still need to explore a
large number of nodes, and may become too slow
for real-time captioning. However, we can further
improve the speed by following the idea of weighted
A? search (Pohl, 1970). We modify the evaluation
function f(n) = g(n)+hpair(n) to a weighted eval-
uation function f ?(n) = g(n) + whpair(n), where
w ? 1 is a weight parameter. By setting the value
of w to be greater than 1, we increase the relative
weight of the estimated cost to reach the destina-
tion. Therefore, the search prefers the nodes that are
closer to the destination, and thus reaches the goal
faster. Weighted A? search can significantly reduce
the number of nodes to be examined, but it also loses
the optimality guarantee of the admissible heuristic
function. We can trade-off between accuracy and
speed by tuning the weight parameter w.
3.2 Beam Search using Time-stamps
The computational cost of the A? search algorithm
grows exponentially with increase in the number of
sequences. However, in order to keep the crowd-
sourced captioning system cost-effective, only a
small number of workers are generally recruited at
a time (typically K ? 10). We, therefore, are more
concerned about the growth in computational cost as
the sequence length increases.
In practice, we break down the sequences into
smaller chunks by maintaining a window of a given
time interval, and we apply MSA only to the smaller
chunks of captions entered by the workers during
that time window. As the window size increases,
the accuracy of our MSA based combining system
increases, but so does the computational cost and la-
tency. Therefore, it is important to apply MSA with
a relatively small window size for real-time caption-
ing applications. Another interesting application can
be the offline captioning, for example, captioning an
entire lecture and uploading the captions later.
For the offline captioning problem, we can fo-
cus less on latency and more on accuracy by align-
ing longer sequences. To restrict the search space
from exploding with sequence length (N ), we apply
a beam constraint on our search space using the time
stamps of each captioned words. For example, if we
204
1. so now what i want to do is introduce some of the
2. what i wanna do is introduce some of the aspects of the class
3. so now what i want to do is is introduce some of the aspects of the class
4. so now what i want to do is introduce
5. so now what i want to do is introduce some of the operational of the class
6. so i want to introduce some of the operational aspects of the clas
C. so now what i want to do is introduce some of the operational aspects of the class
Figure 3: An example of applying MSA-A? (threshold tv = 2) to combine 6 partial captions (first 6 lines) by human
workers to obtain the final output caption (C).
set the beam size to be 20 seconds, then we ignore
any state in our search space that aligns two words
having more than 20 seconds time lag. Given a fixed
beam size b, we can restrict the number of priority
queue removals by the A? algorithm to O(NbK).
The maximum size of the priority queue is O(NbK).
For each node in the priority queue, for each of the
O(2K) successor states, the objective function and
heuristic estimation requires O(K2) operations and
each priority queue insertion requires O(log(NbK))
i.e. O(logN + K log b) operations. Therefore,
the overall worst case computational complexity is
O
(
NbK2K(K2 + logN + K log b)
)
. Note that for
fixed beam size b and number of sequences K, the
computational cost grows as O(N logN) with the
increase in N . However, in practice, weighted A?
search explores much smaller number of states com-
pared to this beam-restricted space.
3.3 Majority Voting after Alignment
After aligning the captions by multiple workers in a
given chunk, we need to combine them to obtain the
final caption. We do that via majority voting at each
position of the alignment matrix containing a non-
gap symbol. In case of tie, we apply the language
model to choose the most likely word.
Often workers type in nonstandard symbols, ab-
breviations, or misspelled words that do not match
with any other workers? input and end up as a sin-
gle word aligned to gaps in all the other sequences.
To filter out such spurious words, we apply a vot-
ing threshold (tv) during majority voting and filter
out words having less than tv votes. Typically we
set tv = 2 (see the example in Figure 3). While ap-
plying the voting threshold improves the word error
rate and readability, it runs the risk of loosing correct
words if they are covered by only a single worker.
3.4 Incorporating an N-gram Language Model
We also experimented with a version of our system
designed to incorporate the score from an n-gram
language model into the search. For this purpose,
we modified the alignment algorithm to produce a
hypothesized output string as it moves through the
input strings, as opposed to using voting to produce
the final string as a post-processing step. The states
for our dynamic programming are extended to in-
clude not only the current position in each input
string, but also the last two words of the hypothesis
string (i.e. [n1, . . . , nK , wi?1, wi?2]) for use in com-
puting the next trigram language model probability.
We replace our sum-of-all-pairs objective function
with the sum of the alignment cost of each input with
the hypothesis string, to which we add the log of the
language model probability and a feature for the to-
tal number of words in the hypothesis. Mathemati-
cally, we consider the hypothesis string to be the 0th
row of the alignment matrix, making our objective
function:
c(A) =
?
1?i?K
c(A0,i) + wlen
Nf
?
l=1
I(a0,l 6= ?)
+ wlm
Nf
?
l=1
logP (a0,l|a0,l?2, a0,l?1)
where wlm and wlen are negative constants indicat-
ing the relative weights of the language model prob-
ability and the length penalty.
Extending states with two previous words results
in a larger computational complexity. Given K se-
quences of length N each, we can have O(NK) dis-
tinct words. Therefore, the number distinct states
is O(NbK(NK)2) i.e. O(N3K2bK). Each state
can have O(K2K) successors, giving an overall
computational complexity of O(N3K3bK2K(K2 +
logN + logK + K log b)). Alternatively, if the vo-
205
cabulary size |V | is smaller than NK, the number of
distinct states is bounded by O(NbK |V |2).
3.5 Evaluation Metric for Speech to Text
Captioning
Automated evaluation of speech to text captioning is
known to be a challenging task (Wang et al, 2003).
Word Error Rate (WER) is the most commonly used
metric that finds the best pairwise alignment be-
tween the candidate caption and the ground truth
reference sentence. WER is estimated as S+I+DN ,
where S, I , and D is the number of incorrect word
substitutions, insertions, and deletions required to
match the candidate sentence with reference, and N
is the total number of words in the reference. WER
has several nice properties such as: 1) it is easy
to estimate, and 2) it tries to preserve word order-
ing. However, WER does not account for the overall
?readability? of text and thus does not always corre-
late well with human evaluation (Wang et al, 2003;
He et al, 2011).
The widely-used BLEU metric has been shown
to agree well with human judgment for evaluating
translation quality (Papineni et al, 2002). However,
unlike WER, BLEU imposes no explicit constraints
on the word ordering. BLEU has been criticized as
an ?under-constrained? measure (Callison-Burch et
al., 2006) for allowing too much variation in word
ordering. Moreover, BLEU does not directly esti-
mate recall, and instead relies on the brevity penalty.
Melamed et al (2003) suggest that a better approach
is to explicitly measure both precision and recall and
combine them via F-measure.
Our application is similar to automatic speech
recognition in that there is a single correct output,
as opposed to machine translation where many out-
puts can be equally correct. On the other hand, un-
like with ASR, out-of-order output is frequently pro-
duced by our alignment system when there is not
enough overlap between the partial captions to de-
rive the correct ordering for all words. It may be
the case that even such out-of-order output can be
of value to the user, and should receive some sort of
partial credit that is not possible using WER. For
this reason, we wished to systematically compare
BLEU, F-measure, and WER as metrics for our task.
We performed a study to evaluate the agreement
of the three metrics with human judgment. We ran-
Metric Spearman Corr. Pearson Corr.
1-WER 0.5258 0.6282
BLEU 0.3137 0.6181
F-measure 0.4389 0.6240
Table 1: The correlation of average human judgment with
three automated metrics: 1-WER, BLEU, and F-measure.
domly extracted one-minute long audio clips from
four MIT OpenCourseWare lectures. Each clip was
transcribed by 7 human workers, and then aligned
and combined using four different systems: the
graph-based system, and three different versions of
our weighted A? algorithm with different values of
tuning parameters. Fifty people participated in the
study and were split in two equal sized groups. Each
group was assigned two of the four audio clips,
and each person evaluated all four captions for both
clips. Each participant assigned a score between 1
to 10 to these captions, based on two criteria: 1) the
overall estimated agreement of the captions with the
ground truth text, and 2) the readability and under-
standability of the captions.
Finally, we estimated the correlation coefficients
(both Spearman and Pearson) for the three metrics
discussed above with respect to the average score
assigned by the human participants. The results
are presented in Table 1. Among the three metrics,
WER had the highest agreement with the human par-
ticipants. This indicates that reconstructing the cor-
rect word order is in fact important to the users, and
that, in this aspect, our task has more of the flavor of
speech recognition than of machine translation.
4 Experimental Results
We experiment with the MSA-A? algorithm for cap-
tioning different audio clips, and compare the results
with two existing techniques. Our experimental set
up is similar to the experiments by Lasecki et al
(2012). Our dataset consists of four 5-minute long
audio clips extracted from lectures available on MIT
OpenCourseWare. The audio clips contain speech
from electrical engineering and chemistry lectures.
Each audio clip is transcribed by ten non-expert hu-
man workers in real-time. We then combine these
inputs using our MSA-A? algorithm, and also com-
pare with the existing graph-based system and mul-
206
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.58 0.60
0.36
0.47
0.54
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.60
0.63
0.40
0.49
0.41
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.53 0.55
0.35
0.45 0.42
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.49 0.51
0.26
0.36
0.30
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.53 0.55
0.44
0.39 0.37
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.56 0.56
0.45
0.39
0.19
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.43 0.44 0.41
0.35
0.23
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.43
0.46
0.36
0.29
0.09
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.62 0.64
0.53
0.47
0.55
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7 0.63 0.63
0.53
0.45 0.44
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.52 0.54 0.49
0.43 0.39
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.53 0.56
0.46
0.38
0.35
(1.0-WER) BLEU Score F-Measure
D
at
a 
Se
t 1
D
at
a 
Se
t 2
D
at
a 
Se
t 3
D
at
a 
Se
t 4
A*-10-t 
(c=10 sec, threshold=2)
A*-15-t 
(c=15 sec, threshold=2)
A*-15 
(c=15 sec, no threshold)
Graph-
based
MUSCLE
Figure 4: Evaluation of different systems on using three
different automated metrics for measuring transcription
quality: 1- Word Error Rate (WER), BLEU, and F-
measure on the four audio clips.
tiple sequence alignment using MUSCLE.
As explained earlier, we vary the four key pa-
rameters of the algorithm: the chunk size (c), the
heuristic weight (w), the voting threshold (tv), and
the beam size (b). The heuristic weight and chunk
size parameters help us to trade-off between speed
versus accuracy; the voting threshold tv helps im-
prove precision by pruning words having less than
tv votes, and beam size reduces the search space by
restricting states to be inside a time window/beam.
We use affine gap penalty (Edgar, 2004) with dif-
ferent gap opening and gap extension penalty. We
set gap opening penalty to 0.125 and gap extension
penalty to 0.05. We evaluate the performance using
the three standard metrics: Word Error Rate (WER),
BLEU, and F-measure. The performance in terms of
these metrics using different systems is presented in
Figure 4.
Out of the five systems in Figure 4, the first three
are different versions of our A? search based MSA
algorithm with different parameter settings: 1) A?-
10-t system (c = 10 seconds, tv = 2), 2) A?-15-t (c =
15 seconds, tv = 2), and 3) A?-15 (c = 15 seconds, tv
= 1 i.e. no pruning while voting). For all three sys-
tems, the heuristic weight parameter w is set to 2.5
and beam size b = 20 seconds. The other two sys-
tems are the existing graph-based system and mul-
tiple sequence alignment using MUSCLE. Among
the three A? based algorithms, both A?-15-t and A?-
10-t produce better quality transcripts and outper-
form the existing algorithms. Both systems apply
the voting threshold that improves precision. The
system A?-15 applies no threshold and ends up pro-
ducing many spurious words having poor agreement
among the workers, and hence it scores worse in all
the three metrics. The A?-15-t achieves 57.4% aver-
age accuracy in terms of (1-WER), providing 29.6%
improvement with respect to the graph-based sys-
tem (average accuracy 42.6%), and 35.4% improve-
ment with respect to the MUSCLE-based MSA sys-
tem (average accuracy 41.9%). On the same set of
audio clips, Lasecki et al (2012) reported 36.6% ac-
curacy using ASR (Dragon Naturally Speaking, ver-
sion 11.5 for Windows), which is worse than all the
crowd-based based systems used in this experiment.
To measure the statistical significance of this im-
provement, we performed a t-test at both the dataset
level (n = 4 clips) and the word level (n = 2862
words). The improvement over the graph-based
model was statistically significant with dataset level
p-value 0.001 and word level p-value smaller than
0.0001. The average time to align each 15 second
chunk with 10 input captions is ?400 milliseconds.
We have also experimented with a trigram lan-
guage model, trained on the British National Cor-
pus (Burnard, 1995) having ?122 million words.
The language-model-integrated A? search provided
a negligible 0.21% improvement in WER over the
A?-15-t system on average. The task of combin-
ing captions does not require recognizing words; it
only requires aligning them in the correct order. This
could explain why language model did not improve
accuracy, as it does for speech recognition. Since
the standard MSA-A? algorithm (without language
model) produced comparable accuracy and faster
running time, we used that version in the rest of the
207
2 3 4 5 6 7 8
0.42
0.44
0.46
0.48
0.5
0.52
0.54
0.56
0.58
1?
W
ER
Avg Running Time (in Seconds)
 
 
c = 5
c = 10
c = 15
c = 20
c = 40
c = 60
(a) Varying heuristic weights for fixed chunk sizes (c)
2 3 4 5 6 7 8
0.42
0.44
0.46
0.48
0.5
0.52
0.54
0.56
0.58
1?
W
ER
Avg Running Time (in Seconds)
 
 
w = 1.8
w = 2
w = 2.5
w = 3
w = 4
w = 6
w = 8
(b) Varying chunk size for fixed heuristic weight (w)
Figure 5: The trade-off between speed and accuracy for different heuristic weights and chunk size parameters.
experiments.
Next, we look at the critical speed versus accuracy
trade-off for different values of the heuristic weight
(w) and the chunk size (c) parameters. Since WER
has been shown to correlate most with human judg-
ment, we show the next results only with respect to
WER. First, we fix the chunk size at different val-
ues, and then vary the heuristic weight parameter:
w = 1.8, 2, 2.5, 3, 4, 6, and 8. The results are
shown in Figure 5(a), where each curve represents
how time and accuracy changed over the range of
values of w and a fixed value of c. We observe that
for smaller values of w, the algorithm is more accu-
rate, but comparatively slower. As w increases, the
search reaches the goal faster, but the quality of the
solution degrades as well. Next, we fix w and vary
chunk size c = 5, 10, 15, 20, 40, 60 second. We re-
peat this experiment for a range of values of w and
the results are shown in Figure 5(b). We can see that
the accuracy improves steeply up to c = 20 seconds,
and does not improve much beyond c = 40 seconds.
For all these benchmarks, we set the beam size (b)
to 20 seconds and voting threshold (tv) to 2.
In our tests, the beam size parameter (b) did not
play a significant role in performance, and setting it
to any reasonably large value (usually ? 15 seconds)
resulted in similar accuracy and running time. This
is because the A? search with hpair heuristic already
reduces the the search space significantly, and usu-
ally reaches the goal in a number of steps smaller
than the state space size after the beam restriction.
Finally, we investigate how the accuracy of our
algorithm varies with the number of inputs/workers.
We start with a pool of 10 input captions for one of
the audio clips. We vary the number of input cap-
tions (K) to the MSA-A? algorithm from 2 up to 10.
The quality of input captions differs greatly among
the workers. Therefore, for each value of K, we re-
peat the experiment min
(
20,
(10
K
))
times; each time
we randomly select K input captions out of the total
pool of 10. Figure 6 shows that accuracy steeply
increases as the number of inputs increases to 7,
and after that adding more workers does not pro-
vide much improvement in accuracy, but increases
running time.
5 Discussion and Future Work
In this paper, we show that the A? search based
MSA algorithm performs better than existing algo-
rithms for combining multiple captions. The exist-
ing graph-based model has low latency, but it usually
can not find a near optimal alignment because of its
incremental alignment. Weighted A? search on the
other hand performs joint multiple sequence align-
ment, and is guaranteed to produce a solution hav-
ing cost no more than (1 + ?) times the cost of the
optimal solution, given a heuristic weight of (1+ ?).
Moreover, A? search allows for straightforward in-
tegration of an n-gram language model during the
search.
Another key advantage of the proposed algorithm
is the ease with which we can trade-off between
208
0 2 4 6 8 10
0
0.1
0.2
0.3
0.4
0.5
0.6
Av
er
ag
e 
(1?
W
ER
)
Average Running Time (in sec)
Figure 6: Experiments showing how the accuracy of the
final caption by MSA-A? algorithm varies with the num-
ber of inputs from 2 to 10.
speed and accuracy. The algorithm can be tailored
to real-time by using a larger heuristic weight. On
the other hand, we can produce better transcripts for
offline tasks by choosing a smaller weight.
It is interesting to compare our results with those
achieved using the MUSCLE MSA tool of Edgar
(2004). One difference is that our system takes a hi-
erarchical approach in that it aligns at the word level,
but also uses string edit distance at the letter level
as a substitution cost for words. Thus, it is able to
take advantage of the fact that individual transcrip-
tions do not generally contain arbitrary fragments of
words. More fundamentally, it is interesting to note
that MUSCLE and most other commonly used MSA
tools for biological sequences make use of a guide
tree formed by a hierarchical clustering of the in-
put sequences. The guide tree produced by the algo-
rithms may or may not match the evolutionary tree
of the organisms whose genomes are being aligned,
but, nevertheless, in the biological application, such
an underlying evolutionary tree generally exists. In
aligning transcriptions, there is no particular reason
to expect individual pairs of transcriptions to be es-
pecially similar to one another, which may make the
guide tree approach less appropriate.
In order to get competitive results, the A? search
based algorithm aligns sequences that are at least 7-
10 seconds long. The delay for collecting the cap-
tions within a chunk can introduce latency, however,
each alignment usually takes less than 300 millisec-
onds, allowing us to repeatedly align the stream of
words, even before the window is filled. This pro-
vides less accurate but immediate response to users.
Finally, when we have all the words entered in a
chunk, we perform the final alignment and show the
caption to users for the entire chunk.
After aligning the input sequences, we obtain the
final transcript by majority voting at each alignment
position, which treats each worker equally and does
not take individual quality into account. Recently,
some work has been done for automatically estimat-
ing individual worker?s quality for crowd-based data
labeling tasks (Karger et al, 2011; Liu et al, 2012).
Extending these methods for crowd-based text cap-
tioning could be an interesting future direction.
6 Conclusion
In this paper, we have introduced a new A? search
based MSA algorithm for aligning partial captions
into a final output stream in real-time. This method
has advantages over prior approaches both in for-
mal guarantees of optimality and the ability to trade
off speed and accuracy. Our experiments on real
captioning data show that it outperforms prior ap-
proaches based on a dependency graph model and a
standard MSA implementation (MUSCLE). An ex-
periment with 50 participants explored whether ex-
iting automatic metrics of quality matched human
evaluations of readability, showing WER did best.
Acknowledgments Funded by NSF awards IIS-
1218209 and IIS-0910611.
References
Keith Bain, Sara Basson, A Faisman, and D Kanevsky.
2005. Accessibility, transcription, and access every-
where. IBM Systems Journal, 44(3):589?603.
Keith Bain, Eunice Lund-Lucas, and Janice Stevens.
2012. 22. transcribe your class: Using speech recogni-
tion to improve access for at-risk students. Collected
Essays on Learning and Teaching, 5.
Lou Burnard. 1995. Users Reference Guide British Na-
tional Corpus Version 1.0.
Chris Callison-Burch, Miles Osborne, and Philipp
Koehn. 2006. Re-evaluating the role of bleu in ma-
chine translation research. In Proceedings of EACL,
volume 2006, pages 249?256.
209
Martin Cooke, Phil Green, Ljubomir Josifovski, and As-
cension Vizinho. 2001. Robust automatic speech
recognition with missing and unreliable acoustic data.
Speech Communication, 34(3):267?285.
Chuong B Do, Mahathi SP Mahabhashyam, Michael
Brudno, and Serafim Batzoglou. 2005. Prob-
cons: Probabilistic consistency-based multiple se-
quence alignment. Genome Research, 15(2):330?340.
Richard Durbin, Sean R Eddy, Anders Krogh, and
Graeme Mitchison. 1998. Biological sequence analy-
sis: probabilistic models of proteins and nucleic acids.
Cambridge university press.
Robert C Edgar and Serafim Batzoglou. 2006. Multi-
ple sequence alignment. Current opinion in structural
biology, 16(3):368?373.
Robert C Edgar. 2004. MUSCLE: multiple sequence
alignment with high accuracy and high throughput.
Nucleic Acids Research, 32(5):1792?1797.
Xiaodong He, Li Deng, and Alex Acero. 2011. Why
word error rate is not a good metric for speech rec-
ognizer training for the speech translation task? In
IEEE International Conference on Acoustics, Speech
and Signal Processing (ICASSP), 2011, pages 5632?
5635. IEEE.
Phillip B Horton. 1997. Strings, algorithms, and ma-
chine learning applications for computational biology.
Ph.D. thesis, University of California, Berkeley.
David R Karger, Sewoong Oh, and Devavrat Shah. 2011.
Iterative learning for reliable crowdsourcing systems.
In Proceedings of Advances in Neural Information
Processing Systems (NIPS), volume 24, pages 1953?
1961.
Walter Lasecki and Jeffrey Bigham. 2012. Online qual-
ity control for real-time crowd captioning. In Pro-
ceedings of the 14th international ACM SIGACCESS
conference on Computers and accessibility (ASSETS
2012), pages 143?150. ACM.
Walter Lasecki, Christopher Miller, Adam Sadilek, An-
drew Abumoussa, Donato Borrello, Raja Kushalnagar,
and Jeffrey Bigham. 2012. Real-time captioning by
groups of non-experts. In Proceedings of the 25rd an-
nual ACM symposium on User interface software and
technology, UIST ?12.
Walter Lasecki, Christopher Miller, and Jeffrey Bigham.
2013. Warping time for more effective real-time
crowdsourcing. In Proceedings of the ACM confer-
ence on Human Factors in Computing Systems, CHI
?13, page To Appear, New York, NY, USA. ACM.
Martin Lermen and Knut Reinert. 2000. The prac-
tical use of the A* algorithm for exact multiple se-
quence alignment. Journal of Computational Biology,
7(5):655?671.
Qiang Liu, Jian Peng, and Alex Ihler. 2012. Varia-
tional inference for crowdsourcing. In Proceedings of
Advances in Neural Information Processing Systems
(NIPS), volume 25, pages 701?709.
Dan Melamed, Ryan Green, and Joseph P Turian. 2003.
Precision and recall of machine translation. In Pro-
ceedings HLT-NAACL 2003, volume 2, pages 61?63.
Association for Computational Linguistics.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
uation of machine translation. In Proceedings of the
40th annual meeting of Association for Computational
Linguistics, pages 311?318. Association for Computa-
tional Linguistics.
Ira Pohl. 1970. Heuristic search viewed as path finding
in a graph. Artificial Intelligence, 1(3):193?204.
Ales? Praz?a?k, Zdene?k Loose, Jan Trmal, Josef V Psutka,
and Josef Psutka. 2012. Captioning of Live
TV Programs through Speech Recognition and Re-
speaking. In Text, Speech and Dialogue, pages 513?
519. Springer.
Murat Saraclar, Michael Riley, Enrico Bocchieri, and
Vincent Goffin. 2002. Towards automatic closed cap-
tioning: Low latency real time broadcast news tran-
scription. In Proceedings of the International Confer-
ence on Spoken Language Processing (ICSLP), pages
1741?1744.
Julie D Thompson, Desmond G Higgins, and Toby J
Gibson. 1994. Clustal w: improving the sensitivity
of progressive multiple sequence alignment through
sequence weighting, position-specific gap penalties
and weight matrix choice. Nucleic Acids Research,
22(22):4673?4680.
Mike Wald. 2006a. Captioning for deaf and hard of
hearing people by editing automatic speech recogni-
tion in real time. Computers Helping People with Spe-
cial Needs, pages 683?690.
Mike Wald. 2006b. Creating accessible educational mul-
timedia through editing automatic speech recognition
captioning in real time. Interactive Technology and
Smart Education, 3(2):131?141.
Lusheng Wang and Tao Jiang. 1994. On the complexity
of multiple sequence alignment. Journal of Computa-
tional Biology, 1(4):337?348.
Ye-Yi Wang, Alex Acero, and Ciprian Chelba. 2003. Is
word error rate a good indicator for spoken language
understanding accuracy. In IEEE Workshop on Auto-
matic Speech Recognition and Understanding, 2003.
ASRU?03. 2003, pages 577?582. IEEE.
210
Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 236?240,
Baltimore, Maryland, USA, June 23-25 2014.
c
?2014 Association for Computational Linguistics
Sliding Alignment Windows for Real-Time Crowd Captioning
Mohammad Kazemi, Rahman Lavaee, Iftekhar Naim and Daniel Gildea
Dept. of Electrical and Computer Engineering and
Dept. of Computer Science
University of Rochester
Rochester, NY 14627
Abstract
The primary way of providing real-time
speech to text captioning for hard of hear-
ing people is to employ expensive profes-
sional stenographers who can type as fast
as natural speaking rates. Recent work has
shown that a feasible alternative is to com-
bine the partial captions of ordinary typ-
ists, each of whom is able to type only
part of what they hear. In this paper, we
extend the state of the art fixed-window
alignment algorithm (Naim et al, 2013)
for combining the individual captions into
a final output sequence. Our method per-
forms alignment on a sliding window of
the input sequences, drastically reducing
both the number of errors and the latency
of the system to the end user over the pre-
viously published approaches.
1 Introduction
Real-time captioning provides deaf or hard of
hearing people access to speech in mainstream
classrooms, at public events, and on live televi-
sion. Studies performed in the classroom set-
ting show that the latency between when a word
was said and when it is displayed must be under
five seconds to maintain consistency between the
captions being read and other visual cues (Wald,
2005; Kushalnagar et al, 2014). The most com-
mon approach to real-time captioning is to recruit
a trained stenographer with a special purpose pho-
netic keyboard, who transcribes the speech to text
with less than five seconds of latency. Unfortu-
nately, professional captionists are quite expensive
($150 per hour), must be recruited in blocks of an
hour or more, and are difficult to schedule on short
TXLFNIR[OD]\GRJ
&RPELQHUWKHEURZQIR[MXPSHG
IR[MXPSHGRYHUWKHOD]\
WKHTXLFNEURZQIR[MXPSHGRYHUWKHOD]\GRJ
)LQDO&DSWLRQ
0HUJLQJ,QFRPSOHWH&DSWLRQV
&
&
&
Figure 1: General layout of crowd captioning sys-
tems. Captionists (C1, C2, C3) submit partial cap-
tions that are automatically combined into a high-
quality output.
notice. Automatic speech recognition (ASR) sys-
tems (Saraclar et al, 2002), on the other hand, at-
tempts to provide a cheap and fully automated so-
lution to this problem. However, the accuracy of
ASR quickly plummets to below 30% when used
on an untrained speaker?s voice, in a new environ-
ment, or in the absence of a high quality micro-
phone (Wald, 2006). The accuracy of the ASR
systems can be improved using the ?re-speaking?
technique, which requires a person that the ASR
has been trained on to repeat the words said by a
speaker as he hears them. Simultaneously hearing
and speaking, however, is not straightforward, and
requires some training.
An alternative approach is to combine the ef-
forts of multiple non-expert captionists (anyone
who can type), instead of relying on trained work-
ers (Lasecki et al, 2012; Naim et al, 2013). In
this approach, multiple non-expert human work-
ers transcribe an audio stream containing speech
in real-time. Workers type as much as they can of
236
the input, and, while no one worker?s transcript is
complete, the portions captured by various work-
ers tend to overlap. For each input word, a time-
stamp is recorded, indicating when the word is
typed by a worker. The partial inputs are com-
bined to produce a final transcript (see Figure 1).
This approach has been shown to dramatically out-
perform ASR in terms of both accuracy and Word
Error Rate (WER) (Lasecki et al, 2012; Naim et
al., 2013). Furthermore, recall of individual words
irrespective of their order approached and even ex-
ceeded that of a trained expert stenographer with
seven workers contributing, suggesting that the in-
formation is present to meet the performance of
a stenographer (Lasecki et al, 2012). However,
aligning these individual words in the correct se-
quential order remains a challenging problem.
Lasecki et al (2012) addressed this alignment
problem using off-the-shelf multiple sequence
alignment tools, as well as an algorithm based on
incrementally building a precedence graph over
output words. Improved results for the alignment
problem were shown using weighted A
?
search
by Naim et al (2013). To speed the search for
the best alignment, Naim et al (2013) divided se-
quences into chunks of a fixed time duration, and
applied the A
?
alignment algorithm to each chunk
independently. Although this method speeds the
search for the best alignment, it introduces a sig-
nificant number of errors to the output of the sys-
tem due to inconsistency at the boundaries of the
chunks. In this paper, we introduce a novel slid-
ing window technique which avoids the errors pro-
duced by previous systems at the boundaries of
the chunks used for alignment. This technique
produces dramatically fewer errors for the same
amount of computation time.
2 Problem Overview and Background
The problem of aligning and combining multiple
transcripts can be mapped to the well-studiedMul-
tiple Sequence Alignment (MSA) problem (Edgar
and Batzoglou, 2006). Let S
1
, . . . , S
K
,K ? 2,
be the K sequences over an alphabet ?, and hav-
ing length N
1
, . . . , N
K
. For the caption align-
ment task, we treat each individual word as a sym-
bol in our alphabet ?. The special gap symbol
??? represents a missing word and does not be-
long to ?. Let A = (a
ij
) be a K ? N
f
matrix,
where a
ij
? ? ? {?}, and the i
th
row has exactly
(N
f
?N
i
) gaps and is identical to S
i
if we ignore
Algorithm 1 MSA-A
?
Algorithm
Require: K input sequences S = {S
1
, . . . , S
K
} having
length N
1
, . . . , N
K
, heuristic weight w, beam size b
input start ? N
K
, goal ? N
k
output an N ?K matrix of integers indicating the index into
each input sequence of each position in the output se-
quence
1: g(start)? 0, f(start)? w ? h(start).
2: Q? {start}
3: while Q 6= ? do
4: n? EXTRACT-MIN(Q)
5: for all s ? {0, 1}
K
? {0
K
} do
6: n
i
? n + s
7: if n
i
= goal then
8: Return the alignment matrix for the recon-
structed path from start to n
i
9: else if n
i
6? Beam(b) then
10: continue;
11: else
12: g(n
i
)? g(n) + c(n, n
i
)
13: f(n
i
)? g(n
i
) + w ? h(n
i
)
14: INSERT-ITEM(Q,n
i
, f(n
i
))
15: end if
16: end for
17: end while
the gaps. Every column of A must have at least
one non-gap symbol. Therefore, the j
th
column
of A indicates an alignment state for the j
th
posi-
tion, where the state can have one of the 2
K
? 1
possible combinations. Our goal is to find the op-
timum alignment matrix A
OPT
that minimizes the
sum of pairs (SOP) cost function:
c(A) =
?
1?i?j?K
c(A
ij
) (1)
where c(A
ij
) is the cost of the pairwise align-
ment between S
i
and S
j
according toA. Formally,
c(A
ij
) =
?
N
f
l=1
sub(a
il
, a
jl
), where sub(a
il
, a
jl
)
denotes the cost of substituting a
jl
for a
il
. If a
il
and a
jl
are identical, the substitution cost is zero.
The substitution cost for two words is estimated
based on the edit distance between two words. The
exact solution to the SOP optimization problem is
NP-Complete (Wang and Jiang, 1994), but many
methods solve it approximately. Our approach is
based on weighted A
?
search for approximately
solving the MSA problem (Lermen and Reinert,
2000; Naim et al, 2013).
2.1 Weighted A
?
Search for MSA
The problem of minimizing the SOP cost function
for K sequences is equivalent to estimating the
shortest path between a single source node and a
single sink node in a K-dimensional mesh graph,
where each node corresponds to a distinct position
in the K sequences. The source node is [0, . . . , 0]
237
Algorithm 2 Fixed Window Algorithm
Require: K input sequences S = {S
1
, . . . , S
K
} having
lengthN
1
, . . . , N
K
, window parameter chunk length.
1: start time? 0
2: while goal ? [N
1
, . . . , N
K
] do
3: for all i do
4: start[i]? closest word(i, start time)
5: end for
6: end time? start time + chunk length
7: for all i do
8: goal[i]? closest word(i, end time)? 1
9: end for
10: alignmatrix?MSA-A
?
(start, goal)
11: concatenate alignmatrix onto end of finalmatrix
12: start time? end time
13: end while
14: Return finalmatrix
and the sink node is [N
1
, . . . , N
K
]. The total num-
ber of nodes in the lattice is (N
1
+1)?(N
2
+1)?
? ? ??(N
K
+1), and each node has 2
K
?1 possible
successors and predecessors. The A
?
search algo-
rithm treats each node position n = [n
1
, . . . , n
K
]
as a search state, and estimates the cost function
g(n) and the heuristic function h(n) for each state.
The cost function g(n) represents the exact min-
imum SOP cost to align the K sequences from
the beginning to the current position. The heuris-
tic function represents the approximate minimum
cost of aligning the suffixes of the K sequences,
starting after the current position n. The com-
monly used heuristic function is h
pair
(n):
h
pair
(n) = L(n ? t) =
?
1?i<j?K
c(A
?
p
(?
n
i
, ?
n
j
))
(2)
where L(n ? t) denotes the lower bound on the
cost of the shortest path from n to destination t,
A
?
p
is the optimal pairwise alignment, and ?
n
i
is
the suffix of node n in the i-th sequence. The
weighted A
?
search uses a priority queue Q to
store the search states n. At each step of the A
?
search algorithm, the node with the smallest eval-
uation function, f(n) = g(n)+wh
pair
(n) (where
w ? 1), is extracted from the priority queue Q and
expanded by one edge. The search continues un-
til the goal node is extracted from Q. To further
speed up the search, a beam constraint is applied
on the search space using the timestamps of each
individual input words. If the beam size is set to b
seconds, then any state that aligns two words hav-
ing more than b seconds time lag is ignored. The
detailed procedure is shown in Algorithm 1. Af-
ter the alignment, the captions are combined via
majority voting at each position of the alignment
matrix. We ignore the alignment columns where
the majority vote is below a certain threshold t
v
(typically t
v
= 2), and thus filter out spurious er-
rors and spelling mistakes.
Although weighted A
?
significantly speeds the
search for the best alignment, it is still too slow
for very long sequences. For this reason, Naim
et al (2013) divided the sequences into chunks of
a fixed time duration, and applied the A
?
align-
ment algorithm to each chunk independently. The
chunks were concatenated to produce the final out-
put sequence, as shown in Algorithm 2.
2.2 Limitations of Fixed Window Algorithm
The fixed window based alignment has two key
limitations. First, aligning disjoint chunks inde-
pendently tends to introduce a large number of
errors at the boundary of each chunk. This is
because the chunk boundaries are defined with
respect to the timestamps associated with each
word in the captions, but the timestamps can
vary greatly between words that should in fact be
aligned. After all, if the timestamps corresponded
precisely to the original time at which each word
was spoken, the entire alignment problem would
be trivial. The fact that the various instances of
a single word in each transcription may fall on ei-
ther side of a chunk boundary leads to errors where
a word is either duplicated in the final output for
more than one chunk, or omitted entirely. This
problem also causes errors in ordering among the
words remaining within one chunk, because there
is less information available to constrain the order-
ing relations between transcriptions. Second, the
fixed window alignment algorithm requires longer
chunks (? 10 seconds) to obtain reasonable accu-
racy, and thus introduces unsatisfactory latency.
3 Sliding Alignment Windows
In order to address the problems described above,
we explore a technique based on a sliding align-
ment window, shown in Algorithm 3. We start
with alignment with a fixed chunk size. After
aligning the first chunk, we use the information
derived from the alignment to determine where
the next chunk should begin within each transcrip-
tion. We use a single point in the aligned output
as the starting point for the next chunk, and de-
termine the corresponding starting position within
each original transcription. This single point is
determined by a tunable parameter keep length
238
Algorithm 3 Sliding Window Algorithm
Require: K input sequences S = {S
1
, . . . , S
K
}
having length N
1
, . . . , N
K
, window parameters
chunk length and keep length.
1: start? 0
K
, goal? 0
K
2: while goal ? [N
1
, . . . , N
K
] do
3: endtime? chunk length+max
i
time(start[i])
4: for all i do
5: goal[i]? closest word(i, endtime)
6: end for
7: alignmatrix?MSA-A
?
(start, goal)
8: concatenate first keep length columns of
alignmatrix onto end of finalmatrix
9: for all i do
10: start[i]? alignmatrix[keep length][i]
11: end for
12: end while
13: Return finalmatrix
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
 
A
cc
ur
ac
y 
(1 
? W
ER
)
 
 
 Sliding?window, k = 0.50
 Sliding?window, k = 0.67
 Sliding?window, k = 0.85
 Graph?based
 MUSCLE
 Fixed?window
Figure 2: Evaluation of different systems on using
WER metric for measuring transcription quality.
(line 10 of Algorithm 3). The materials in the
output alignment that follow this point is thrown
away, and replaced with the output produced by
aligning the next chunk starting from this point
(line 8). The process continues iteratively, allow-
ing us to avoid using the erroneous output align-
ments in the neighborhood of the arbitrary end-
points for each chunk.
4 Experimental Results
We evaluate our system on a dataset of four 5-
minute long audio clips of lectures in electrical
engineering and chemistry lectures taken from
MIT OpenCourseWare. The same dataset used
by (Lasecki et al, 2012) and (Naim et al, 2013).
Each audio clip is transcribed by 10 non-expert
human workers in real time. We measure the ac-
curacy in terms of Word Error Rate (WER) with
respect to a reference transcription.
We are interested in investigating how the three
5 10 15 20 25 30
0.46
0.48
0.5
0.52
0.54
0.56
0.58
0.6
0.62
 Latency (millisecond)
 
A
cc
ur
ac
y 
(1?
W
ER
)
 
 
 sliding window, k = 50 %
 sliding window, k = 67 %
 sliding window, k = 85 %
 fixed window
(a) varying keep-lengths for fixed heuristic weight
4000 6000 8000 10000 12000 140000.48
0.5
0.52
0.54
0.56
0.58
0.6
0.62
 Average Running Time (millisecond)
 
A
cc
ur
ac
y 
(1 
? W
ER
)
 
 
 w = 3
 w = 4
 w = 6
 w = 8
(b) varying heuristic weights for fixed keep-length
Figure 3: Tradeoff between speed and accuracy
for different heuristic wights and keep-lengths
key parameters of the algorithm, i.e., the chunk
size (c), the heuristic weight (w) and the keep-
length (k), affect the system latency, the search
speed, and the alignment accuracy. The chunk size
directly determines the latency of the system to the
end user, as alignment cannot begin until an entire
chunk is captured. Furthermore, the chunk size,
the heuristic weight, and the keep-length help us
to trade-off speed versus accuracy. We also com-
pare the performance of our algorithm with that
of the most accurate fixed alignment window al-
gorithm (Naim et al, 2013). The performance
in terms of WER for sliding and fixed alignment
windows is presented in Figure 2. Out of the sys-
tems in Figure 2, the first three systems consist of
sliding alignment window algorithm with different
values of keep-length parameter: (1) keep-length
= 0.5; (2) keep-length = 0.67; and (3) keep-length
= 0.85. The other systems are the graph-based al-
gorithm of (Lasecki et al, 2012), the MUSCLE
algorithm of (Edgar, 2004), and the most accu-
239
rate fixed alignment window algorithm of (Naim
et al, 2013). We set the heuristic weight param-
eter (w) to 3 and the chunk size parameter (c) to
5 seconds for all the three sliding window sys-
tems and the fixed window system. Sliding align-
ment window produces better results and outper-
forms the other algorithms even for large values of
the keep-length parameter. The sliding alignment
window with keep-length 0.5 achieves 0.5679 av-
erage accuracy in terms of (1-WER), providing a
18.09% improvement with respect to the most ac-
curate fixed alignment window (average accuracy
0.4857). On the same dataset, Lasecki et al (2012)
reported 36.6% accuracy using the Dragon Natu-
rally Speaking ASR system (version 11.5 for Win-
dows).
To show the trade-off between latency and ac-
curacy, we fix the heuristic weight (w = 3) and
plot the accuracy as a function of chunk size in
Figure 3. We repeat this experiment for different
values of keep-length. We observe that the slid-
ing window approach dominates the fixed window
approach across a wide range of chunk sizes. Fur-
thermore, we can see that for smaller values of the
chunk size parameter, increasing the keep-length
makes the system less accurate. As the chunk
size parameter increases, the performance of slid-
ing window systems with different values of keep-
length parameter converges. Therefore, at larger
chunk sizes, for which there are smaller number of
boundaries, the keep-length parameter has lower
impact.
Next, we show the trade-off between computa-
tion speed and accuracy in Figure 3, as we fix the
heuristic weight and vary the chunk size over the
range [5, 10, 15, 20, 30] seconds. Larger chunks
are more accurately aligned but require computa-
tion time that grows as N
K
in the chunk size N in
the worst case. Furthermore, smaller weights al-
low faster alignment, but provide lower accuracy.
5 Conclusion
In this paper, we present a novel sliding win-
dow based text alignment algorithm for real-time
crowd captioning. By effectively addressing the
problem of alignment errors at chunk boundaries,
our sliding window approach outperforms the ex-
isting fixed window based system (Naim et al,
2013) in terms of word error rate, particularly
when the chunk size is small, and thus achieves
higher accuracy at lower latency.
Acknowledgments Funded by NSF awards IIS-
1218209 and IIS-0910611.
References
Robert C Edgar and Serafim Batzoglou. 2006. Mul-
tiple sequence alignment. Current opinion in struc-
tural biology, 16(3):368?373.
Robert C Edgar. 2004. MUSCLE: multiple sequence
alignment with high accuracy and high throughput.
Nucleic Acids Research, 32(5):1792?1797.
Raja S Kushalnagar, Walter S Lasecki, and Jeffrey P
Bigham. 2014. Accessibility evaluation of class-
room captions. ACM Transactions on Accessible
Computing (TACCESS), 5(3):7.
Walter Lasecki, Christopher Miller, Adam Sadilek, An-
drew Abumoussa, Donato Borrello, Raja Kushalna-
gar, and Jeffrey Bigham. 2012. Real-time caption-
ing by groups of non-experts. In Proceedings of the
25rd annual ACM symposium on User interface soft-
ware and technology, UIST ?12.
Martin Lermen and Knut Reinert. 2000. The practi-
cal use of the A* algorithm for exact multiple se-
quence alignment. Journal of Computational Biol-
ogy, 7(5):655?671.
Iftekhar Naim, Daniel Gildea, Walter Lasecki, and Jef-
frey Bigham. 2013. Text alignment for real-time
crowd captioning. In Proceedings of the 2013 Meet-
ing of the North American chapter of the Association
for Computational Linguistics (NAACL-13).
Murat Saraclar, Michael Riley, Enrico Bocchieri, and
Vincent Goffin. 2002. Towards automatic closed
captioning: Low latency real time broadcast news
transcription. In Proceedings of the International
Conference on Spoken Language Processing (IC-
SLP), pages 1741?1744.
Mike Wald. 2005. Using automatic speech recognition
to enhance education for all students: Turning a vi-
sion into reality. In Proceedings 35th Annual Con-
ference on Frontiers in Education, 2005. FIE ?05.,
pages S3G?S3G, Oct.
Mike Wald. 2006. Creating accessible educational
multimedia through editing automatic speech recog-
nition captioning in real time. Interactive Technol-
ogy and Smart Education, 3(2):131?141.
Lusheng Wang and Tao Jiang. 1994. On the complex-
ity of multiple sequence alignment. Journal of Com-
putational Biology, 1(4):337?348.
240
