Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1713?1723,
October 25-29, 2014, Doha, Qatar.
c
?2014 Association for Computational Linguistics
Random Manhattan Integer Indexing:
Incremental L
1
Normed Vector Space Construction
Behrang Q. Zadeh
?
?
Insight Centre
National University of Ireland, Galway
Galway, Ireland
behrang.qasemizadeh@insight-centre.org
Siegfried Handschuh
??
?
Dept. of Computer Science and Mathematics
University of Passau
Bavaria, Germany
siegfried.handschuh@uni-passau.de
Abstract
Vector space models (VSMs) are math-
ematically well-defined frameworks that
have been widely used in the distributional
approaches to semantics. In VSMs, high-
dimensional vectors represent linguistic
entities. In an application, the similar-
ity of vectors?and thus the entities that
they represent?is computed by a distance
formula. The high dimensionality of vec-
tors, however, is a barrier to the perfor-
mance of methods that employ VSMs.
Consequently, a dimensionality reduction
technique is employed to alleviate this
problem. This paper introduces a novel
technique called Random Manhattan In-
dexing (RMI) for the construction of `
1
normed VSMs at reduced dimensionality.
RMI combines the construction of a VSM
and dimension reduction into an incre-
mental and thus scalable two-step proce-
dure. In order to attain its goal, RMI em-
ploys the sparse Cauchy random projec-
tions. We further introduce Random Man-
hattan Integer Indexing (RMII): a compu-
tationally enhanced version of RMI. As
shown in the reported experiments, RMI
and RMII can be used reliably to estimate
the `
1
distances between vectors in a vec-
tor space of low dimensionality.
1 Introduction
Distributional semantics embraces a set of meth-
ods that decipher the meaning of linguistic en-
tities using their usages in large corpora (Lenci,
2008). In these methods, the distributional proper-
ties of linguistic entities in various contexts, which
are collected from their observations in corpora,
are compared to quantify their meaning. Vector
spaces are intuitive, mathematically well-defined
frameworks to represent and process such infor-
mation.
1
In a vector space model (VSM), linguis-
tic entities are represented by vectors and a dis-
tance formula is employed to measure their distri-
butional similarities (Turney and Pantel, 2010).
In a VSM, each element ~s
i
of the standard basis
of the vector space (informally, each dimension of
the VSM) represents a context element. Given n
context elements, an entity whose meaning is be-
ing analyzed is expressed by a vector ~v as a linear
combination of ~s
i
and scalars ?
i
? R such that
~v = ?
1
~s
1
+ ? ? ?+?
n
~s
n
. The value of ?
i
is derived
from the frequency of the occurrences of the entity
that ~v represents in/with the context element that
~s
i
represents. As a result, the values assigned to
the coordinates of a vector (i.e. ?
i
) exhibit the cor-
relation of entities and context elements in an n-
dimensional real vector space R
n
. Each vector can
be written as a 1?n row matrix, e.g. (?
1
, ? ? ? , ?
n
).
Therefore, a group of m vectors in a vector space
is often represented by a matrix M
m?n
.
Latent semantic analysis (LSA) is a famil-
iar technique that employs a word-by-document
VSM (Deerwester et al., 1990).
2
In this word-
by-document model, the meaning of words (i.e.
the linguistic entities) is described by their occur-
rences in documents (i.e. the context elements).
Given m words and n distinct documents, each
word is represented by an n-dimensional vector
~v
i
= (?
i1
, ? ? ? , ?
in
), where ?
ij
is a numeric value
that associates the word ~v
i
represents to the doc-
ument d
j
, for 1 < j < n. For instance, the
value of ?
ij
may correspond to the frequency of
the word in the document. It is hypothesized that
the relevance of words can be assessed by count-
ing the documents in which they co-occur. There-
fore, words with similar vectors are assumed to
have the same meaning (Figure 1).
1
Amongst other representation frameworks.
2
See Martin and Berry (2007) for an overview of the
mathematical foundation of LSA.
1713
~s
1
? d
1
~s
2
? d
2
~s
3
? d
3
~v
1
~v
2
?
12
?
11
?
13
?
22
?
21
?
23
Figure 1: Illustration of a word-by-document
model consisting of 2 words and 3 documents.
The words are represented in a 3-dimensional vec-
tor space, in which each ~s
i
(each dimension) rep-
resents each of the 3 documents in the model.
~v
1
= (?
11
, ?
12
, ?
13
) and ~v
2
= (?
21
, ?
22
, ?
23
)
represent the two words in the model. The dashed
line shows the Euclidean distance between the two
vectors that represent words, while the sum of
dash-dotted lines is the Manhattan distance be-
tween them.
In order to assess the similarity between vectors,
a vector space V is endowed with a norm struc-
ture. A norm ?.? is a function that maps vectors
from V to the set of non-negative real numbers,
i.e. V 7? [0,?). The pair of (V, ?.?) is then called
a normed space. In a normed space, the similar-
ity between vectors is assessed by their distances.
The distance between vectors is defined by a func-
tion that satisfies certain axioms and assigns a real
value to each pair of vectors, i.e.
dist : V ? V 7? R, d(~v,
~
t) = ?~v ? ~u?. (1)
The smaller the distance between two vectors, the
more similar they are.
Euclidean space is the most familiar example
of a normed space. It is a vector space that is en-
dowed by the `
2
norm. In Euclidean space, the `
2
norm?which is also called the Euclidean norm?
of a vector ~v = (v
1
, ? ? ? , v
n
) is defined as
?~v?
2
=
?
?
?
?
n
?
i=1
v
2
i
. (2)
Using the definition of distance given in Equa-
tion 1 and the `
2
norm, the Euclidean distance is
measured as
dist
2
(~v, ~u) = ?~v ? ~u?
2
=
?
?
?
?
n
?
i=1
(v
i
? u
i
)
2
. (3)
In Figure 1, the dashed line shows the Euclidean
distance between the two vectors. In `
2
normed
vector spaces, various similarity metrics are de-
fined using different normalization of the Eu-
clidean distance between vectors, e.g. the cosine
similarity.
The similarity between vectors, however, can
also be computed in `
1
normed spaces.
3
The `
1
norm for ~v is given by
?~v?
1
=
n
?
i=1
|v
i
|, (4)
where |.| signifies the modulus. The distance in an
`
1
normed vector space is often called the Man-
hattan or the city block distance. According to the
definition given in Equation 1, the Manhattan dis-
tance between two vectors ~v and ~u is given by
dist
1
(~v, ~u) = ?~v ? ~u?
1
=
n
?
k=1
|v
i
? u
j
|. (5)
In Figure 1, the collection of the dash-dotted lines
is the `
1
distance between the two vectors. Similar
to the `
2
spaces, various normalizations of the `
1
distance
4
define a family of `
1
normed similarity
metrics.
As the number of text units that are being mod-
elled in a VSM increases, the number of context
elements that are required to be utilized to capture
their meaning escalates. This phenomenon is ex-
plained using power-law distributions of text units
in context elements (e.g. the familiar Zipfian dis-
tribution of words). As a result, extremely high-
dimensional vectors, which are also sparse?i.e.
most of the elements of the vectors are zero?
represent text units. The high dimensionality of
the vectors results in setbacks, which are colloqui-
ally known as the curse of dimensionality. For in-
stance, in a word-by-document model that consists
of a large number of documents, a word appears
only in a few documents, and the rest of the doc-
uments are irrelevant to the meaning of the word.
Few common documents between words results in
sparsity of the vectors; and the presence of irrele-
vant documents introduces noise.
Dimension reduction, which usually follows the
construction of a VSM, alleviates the problems
3
The definition of the norm is generalized to `
p
spaces
with ?~v?
p
=
(?
i
|v
i
|
p
)
1/p
, which is beyond the scope of
this paper.
4
As long as the axioms in the distance definition hold.
1714
listed above by reducing the number of context el-
ements that are employed for the construction of
the VSM. In its simple form, dimensionality re-
duction can be performed using a selection pro-
cess: choose a subset of contexts and eliminate
the rest using a heuristic. Alternatively, transfor-
mation methods can be employed. A transforma-
tion method maps a vector space V
n
onto a V
m
of
lowered dimension, i.e. ? : V
n
7? V
m
,m  n.
The vector space at reduced dimension, i.e. V
m
,
is often the best approximation of the original V
n
in a sense. LSA employs a dimension reduction
technique called truncated singular value decom-
position (SVD). In a standard truncated SVD, the
transformation guarantees the least distortion in
the `
2
distances.
5
Besides the problem of high computational
complexity of SVD computation,
6
which can be
addressed by incremental techniques (see e.g.
Brand (2006)), matrix factorization methods such
as truncated SVD are data-sensitive: if the struc-
ture of the data being analyzed changes, i.e. when
either the linguistic entities or context elements
are updated, e.g. some are removed or new ones
are added, the transformation should be recom-
puted and reapplied to the whole VSM to reflect
the updates. In addition, a VSM at the original
high dimension must be first constructed. Follow-
ing the construction of the VSM, the dimension
of the VSM is reduced in an independent process.
Therefore, the VSM at reduced dimension is avail-
able for processing only after the whole sequence
of these processes. Construction of the VSM at
its original dimension is computationally expen-
sive and a delay in access to the VSM at reduced
dimension is not desirable. Hence, the application
of truncated SVD is not suitable in several appli-
cations, particularly when dealing with frequently
updated big text?data such as applications in the
web context.
Random indexing (RI) is an alternative method
that solves the problems stated above by combin-
ing the construction of a vector space and the di-
mensionality reduction process. RI, which is in-
troduced in Kanerva et al. (2000), constructs a
VSM directly at reduced dimension. Unlike meth-
ods that first construct a VSM at its original high
dimension and conduct a dimensionality reduction
5
Please note that there are matrix factorization techniques
that guarantee the least distortion in the `
1
distances, see e.g.
Kwak (2008).
6
Matrix factorization techniques, in general.
afterwards, the RI method avoids the construction
of the original high-dimensional VSM. Instead, it
merges the vector space construction and the di-
mensionality reduction process. RI, thus, signifi-
cantly enhances the computational complexity of
deriving a VSM from text. However, the appli-
cation of the RI technique (likewise the standard
truncated SVD in LSA) is limited to `
2
normed
spaces, i.e. when similarities are assessed using a
measure based on the `
2
distance. It can be verified
that using RI causes large distortions in the `
1
dis-
tances between vectors (Brinkman and Charikar,
2005). Hence, if the similarities are computed us-
ing the `
1
distance, then the RI technique is not
suitable for the VSM construction.
Depending on the distribution of vectors in
a VSM, the performance of similarity measures
based on the `
1
and the `
2
norms varies from one
task to another. For instance, it is known that
the `
1
distance is more robust to the presence of
outliers and non-Gaussian noise than the `
2
dis-
tance (e.g. see the problem description in Ke and
Kanade (2003)). Hence, the `
1
distance can be
more reliable than the `
2
distance in certain appli-
cations. For instance, Weeds et al. (2005) suggest
that the `
1
distance outperforms other similarity
metrics in a term classification task. In another
experiment, Lee (1999) observed that the `
1
dis-
tance gives more desirable results than the Cosine
and the `
2
measures.
In this paper, we introduce a novel method
called Random Manhattan Indexing (RMI). RMI
constructs a vector space model directly at re-
duced dimension while it preserves the pairwise
`
1
distances between vectors in the original high-
dimensional VSM. We then introduced a compu-
tationally enhanced version of RMI called Ran-
dom Manhattan Integer Indexing (RMII). RMI
and RMII, similar to RI, merge the construction
of a VSM and dimension reduction into an incre-
mental and thus efficient and scalable process.
In Section 2, we explain and evaluate the RMI
method. In Section 3, the RMII method is ex-
plained. We compare the proposed method with
RI in Section 4. We conclude in Section 5.
2 Random Manhattan Indexing
We propose the RMI method: a novel technique
that adapts an incremental procedure for the con-
struction of `
1
normed vector spaces at a reduced
dimension. The RMI method employs a two-step
1715
procedure: (a) the creation of index vectors and (b)
the construction of context vectors .
In the first step, each context element is as-
signed exactly to one index vector ~r
i
. Index vec-
tors are high-dimensional and generated randomly
such that entries r
j
of index vectors have the fol-
lowing distribution:
r
i
=
?
?
?
?
?
?1
U
1
with probability
s
2
0 with probability 1? s
1
U
2
with probability
s
2
, (6)
where U
1
and U
2
are independent uniform ran-
dom variables in (0, 1). In the second step, each
target linguistic entity that is being analyzed in
the model is assigned to a context vector ~v
c
in
which all the elements are initially set to 0. For
each encountered occurrence of a linguistic entity
and a context element?e.g. through a sequential
scan of an input text collection?~v
c
that represents
the linguistic entity is accumulated by the index
vector ~r
i
that represents the context element, i.e.
~v
c
= ~v
c
+ ~r
i
. This process results in a VSM
of a reduced dimensionality that can be used to
estimate the `
1
distances between linguistic enti-
ties. In the constructed VSM by RMI, the `
1
dis-
tance between vectors is given by the sample me-
dian (Indyk, 2000). For given vectors ~v and ~u, the
approximate `
1
distance between vectors is esti-
mated by
?
L
1
(~u,~v) = median{|v
i
? u
i
|, i = 1, ? ? ? ,m}, (7)
wherem is the dimension of the VSM constructed
by RMI, and |.| denotes the modulus.
RMI is based on the random projection (RP)
technique for dimensionality reduction. In RP, a
high-dimensional vector space is mapped onto a
random subspace of lowered dimension expecting
that?with a high probability?relative distances
between vectors are approximately preserved. Us-
ing the matrix notation, this projection is given by
M
?
p?m
= M
p?n
R
n?m
, m p, n,
(8)
where R is often called the random projection ma-
trix, and M and M
?
denote p vectors in the orig-
inal n-dimensional and reduced m-dimensional
vector spaces, respectively.
In RMI, the stated mapping in Equation 8
is given by Cauchy random projections. Indyk
(2000) suggests that vectors in a high-dimensional
space R
n
can be mapped onto a vector space of
lowered dimension R
m
while the relative pairwise
`
1
distances between vectors are preserved with a
high probability. In Indyk (2000, Theorem 3) and
Indyk (2006, Theorem 5), it is shown that for an
m ? m
0
= log(1/?)
O(1/)
, where ? > 0 and
 ? 1/2, there exists a mapping from R
n
onto
R
m
that guarantees the `
1
distances between any
pair of vectors ~u and ~v in R
n
after the mapping
does not increase by a factor more than 1 +  with
constant probability ?, and it does not decrease by
more than 1?  with probability 1? ?.
In Indyk (2000), this projection is proved to
be obtained using a random projection matrix R
that has Cauchy distribution?i.e. for r
ij
in R,
r
ij
? C(0, 1). Since R has a Cauchy distribu-
tion, for every two vectors ~u and ~v in the high-
dimensional space R
n
, the projected differences
x =
?
~u ?
?
~v also have Cauchy distribution, with
the scale parameter being the `
1
distances, i.e.
x ? C(0,
?
n
i=1
|u
i
? v
i
|). As a result, in Cauchy
random projections, estimating the `
1
distances
boils down to the estimation of the Cauchy scale
parameter from independent and identically dis-
tributed (i.i.d.) samples x. Because the expectation
value of x is infinite,
7
the sample mean cannot be
employed to estimate the Cauchy scale parameter.
Instead, using the 1-stability of Cauchy distribu-
tion, Indyk (2000) proves that the median can be
employed to estimate the Cauchy scale parame-
ter, and thus the `
1
distances at the projected space
R
m
.
Subsequent studies simplified the method pro-
posed by Indyk (2000). Li (2007) shows that R
with Cauchy distribution can be substituted by a
sparse R that has a mixture of symmetric 1-Pareto
distribution. A 1-Pareto distribution can be sam-
pled by 1/U , where U is an independent uniform
random variable in (0, 1). This results in a ran-
dom matrix R that has the same distribution as
described by Equation 6.
The RMI?s two-step procedure is explained us-
ing the basic properties of matrix arithmetic and
the descriptions given above. Given the projection
in Equation 8, the first step of RMI refers to the
construction of R: index vectors are the row vec-
tors of R. The second step of the process refers
to the construction of M
?
: context vectors are the
row vectors of M
?
. Using the distributive prop-
erty of multiplication over addition in matrices,
8
7
That is E(x) =?, since x has a Cauchy distribution.
8
That is, (A+B)C = AC+BC.
1716
it can be verified that the explicit construction of
M and its multiplication to R can be substituted
by a number of summation operations. M can be
represented by the sum of unit vectors in which a
unit vector corresponds to the co-occurrence of a
linguistic entity and a context element. The result
of the multiplication of each unit vector and R is
the row vector that represents the context element
in R?i.e. the index vector. Therefore, M
?
can be
computed by the accumulation of the row vectors
of R that represent encountered context elements,
as stated in the second step of the RMI procedure.
2.1 Alternative Distance Estimators
As stated above, Indyk (2000) suggests using the
sample median for the estimation of the `
1
dis-
tances. However, Li (2008) argues that sam-
ple median estimator can be biased and inaccu-
rate, specifically if m?i.e. the targeted (reduced)
dimensionality?is small. Hence, Li (2008) sug-
gests using the geometric mean estimator instead
of the median sample:
9
?
L
1
(~u,~v) =
(
m
?
i=1
|u
i
? v
i
|
)
1
m
. (9)
We suggest computing the
?
L
1
(~u,~v) in Equation
9 using arithmetic mean of logarithm-transformed
values of |u
i
? v
i
|. Therefore, using the logarith-
mic identities, the multiplications and the power in
Equation 9 are, respectively, transformed to a sum
and a multiplication:
?
L
1
(~u,~v) = exp
(
1
m
m
?
i=1
ln(|u
i
? v
i
|)
)
. (10)
Equation 10 for computing
?
L
1
is more plausible
for computational implementation than Equation
9 (e.g. the overflow is less likely to happen dur-
ing the process). Moreover, calculating the median
involves sorting an array of real numbers. Thus,
computation of the geometric mean in logarithmic
scales can be faster than computation of the me-
dian sample, especially when the value of m is
large.
2.2 RMI?s Parameters
In order to employ the RMI method for the con-
struction of a VSM at reduced dimension and the
estimation of the `
1
distance between vectors, two
9
See also Li et al. (2007, Lemma 5?9).
model parameters should be decided: (a) the tar-
geted (reduced) dimensionality of the VSM, which
is indicated by m in Equation 8 and (b) the num-
ber of non-zero elements in index vectors, which
is determined by s in Equation 6. In contrast to the
classic one-dimension-per-context-element meth-
ods of VSM construction,
10
the value of m in RPs
and thus in RMI is chosen independently of the
number of context elements in the model (n in
Equation 8).
In RMI, m determines the probability and the
maximum expected amount of distortions  in the
pairwise distance between vectors. Based on the
proposed refinements of Indyk (2000, Theorem 3)
by Li et al. (2007), it is verified that the pairwise
`
1
distance between any p vectors is approximated
within a factor 1 ? , if m = O(log p/
2
), with a
constant probability. Therefore, the value of  in
RMI is subject to the number of vectors p in the
model. For a fixed p, a larger m yields to lower
bounds on the distortion with a higher probabil-
ity. Because a small m is desirable from the com-
putational complexity outlook, the choice of m is
often a trade-off between accuracy and efficiency.
According to our experiment, m > 400 is suitable
for most applications.
The number of non-zero elements in index vec-
tors, however, is decided by the number of context
elements n and the sparseness of the VSM ? at
its original dimension. Li (2007) suggests
1
O(
?
?n)
as the value of s in Equation 6. VSMs employed
in distributional semantics are highly sparse. The
sparsity of a VSM in its original dimension ? is
often considered to be around 0.0001?0.01. As
the original dimension of VSM n is very large?
otherwise there would be no need for dimension-
ality reduction?the index vectors are often very
sparse. Similar to m, larger s produces smaller er-
rors; however, it imposes more processes during
the construction of a VSM.
2.3 Experimental Evaluation of RMI
We report the performance of the RMI method
with respect to its ability to preserve the rela-
tive `
1
distance between linguistic entities in a
VSM. Therefore, instead of a task-specific evalua-
tion, we show that the relative `
1
distance between
a set of words in a high-dimensional word-by-
document model remains intact when the model
10
That is, n context elements are modelled in an n-
dimensional VSM.
1717
is constructed at reduced dimensionality using the
RMI technique. We further explore the effect of
the RMI?s parameter setting in the observed re-
sults.
Depending on the structure of the data that is
being analyzed and the objective of the task in
hand, the performance of the `
1
distance for sim-
ilarity measurement varies from one application
to another.
11
The purpose of our reported evalu-
ation, thus, is not to show the superiority of the `
1
distance (thus RMI) to another similarity measure
(e.g. the `
2
distance or the cosine similarity) and
employed techniques for dimensionality reduction
(e.g. RI or truncated SVD) in a specific task. If, in
a task, the `
1
distance shows higher performance
than the `
2
distance, then the RMI technique is
preferable to the RI technique or truncated SVD.
Contrariwise, if the `
2
norm shows higher perfor-
mance than the `
1
, then RI or truncated SVD are
more desirable than the RMI method.
In our experiment, a word-by-document model
is first constructed from the UKWaC corpus at its
original high dimension. UKWaC is a freely avail-
able corpus of 2,692,692 web documents, nearly
2 billion tokens and 4 million types (Baroni et al.,
2009).
12
Therefore, a word-by-document model
constructed from this corpus using the classic one-
dimension-per-context-element method has a di-
mension of 2.69 million. In order to keep the ex-
periments computationally tractable, the reported
results are limited to 31 words from this model,
which are listed in Table 1.
In the designed experiment, a word from the list
is taken as the reference and its `
1
distance to the
remaining 30 words is calculated using the vec-
tor representations in the high-dimensional VSM.
These 30 words are then sorted in ascending or-
der by the calculated `
1
distance. The procedure
is repeated for all the 31 words in the list, one by
one. Therefore, the procedure results in 31 sorted
lists, each containing 30 words. Figure 2 shows an
example of the obtained sorted list, in which the
reference is the word ?research?.
13
The procedure described above is replicated to
obtain the lists of sorted words from VSMs that
are constructed by the RMI method at reduced
11
E.g. see the experiments in Bullinaria and Levy (2007).
12
UkWaC can be obtained from http://goo.gl/
3isfIE.
13
Please note that the number of possible arrangements of
30 words without repetition in a list in which the order is
important (i.e. all permutations of 30 words) is 30!.
PoS Words
N
o
u
n
website email support software
students skills project research
nhs link services organisations
A
d
j
online digital mobile sustainable
global unique excellent disabled
new current fantastic innovative
V
e
r
b
use visit improve provided
help ensure develop
Table 1: Words employed in the experiments.
n
h
s
i
n
n
o
v
a
t
i
v
e
s
u
s
t
a
i
n
a
b
l
e
f
a
n
t
a
s
t
i
c
g
l
o
b
a
l
d
i
s
a
b
l
e
d
m
o
b
i
l
e
d
i
g
i
t
a
l
i
m
p
r
o
v
e
d
e
v
e
l
o
p
u
n
i
q
u
e
o
r
g
a
n
i
s
a
t
i
o
n
s
e
x
c
e
l
l
e
n
t
l
i
n
k
s
o
f
t
w
a
r
e
c
u
r
r
e
n
t
s
k
i
l
l
s
e
n
s
u
r
e
e
m
a
i
l
v
i
s
i
t
p
r
o
v
i
d
e
d
o
n
l
i
n
e
p
r
o
j
e
c
t
w
e
b
s
i
t
e
s
t
u
d
e
n
t
s
s
e
r
v
i
c
e
s
s
u
p
p
o
r
t
h
e
l
p
u
s
e
n
e
w
Figure 2: List of words sorted by their `
1
distance
to the word ?research?. The distance increases
from left to right and top to bottom.
dimensionality, when the method?s parameters?
i.e. the dimensionality of VSM and the number of
non-zero elements in index vectors?are set dif-
ferently. We expect the obtained relative `
1
dis-
tances between each reference word and the 30
other words in an RMI-constructed VSM to be the
same as the obtained relative distances in the orig-
inal high-dimensional VSM. Therefore, for each
VSM that is constructed by the RMI technique,
the resulting sorted lists of words are compared by
the sorted lists that are obtained from the original
high-dimensional VSM.
We employ the Spearman?s rank correlation co-
efficient (?) to compare the sorted lists of words
and thus the degree of distance preservation in the
RMI-constructed VSMs at reduced dimensional-
ity. The Spearman?s rank correlation measures the
strength of association between two ranked vari-
ables, i.e. two lists of sorted words in our experi-
ments. Given a list of sorted words obtained from
the original high-dimensional VSM (list
o
) and its
corresponding list obtained from a VSM of re-
duced dimensionality (list
RMI
), the Spearman?s
rank correlation for the two lists is calculated by
? = 1?
6
?
d
2
i
n(n
2
? 1)
, (11)
where d
i
is the difference in paired ranks of words
in list
o
and list
RMI
, and n = 30 is the number
of words in each list. We report the average of ?
over the 31 lists of sorted words, denoted by ??, to
1718
100
200
400
800
1600
3200
4
8
16
32
64
0.5
0.7
0.9
1
d
i
m
e
n
s
i
o
n
|
n
o
n
-
z
e
r
o
e
l
e
m
e
n
t
s
|
??
0.4
0.6
0.8
??
Figure 3: The ?? axis shows the observed average
Spearman? rank correlation between the order of
the words in the lists that are sorted by the `
1
dis-
tance obtained from the original high-dimensional
VSM and the VSMs that are constructed by RMI
at reduced dimensionality using index vectors of
various numbers of non-zero elements.
indicate the performance of RMI with respect to
its ability for distance preservation. The closer ??
is to 1, the better the performance of RMI.
Figure 3 shows the observed results at a glance
when the distances are estimated using the median
(Equation 7). As shown in the figure, when the di-
mension of the VSM is above 400 and the number
of non-zero elements is more than 12, the obtained
relative distances from the VSMs constructed by
the RMI technique start to be analogous to the rel-
ative distances that are obtained from the origi-
nal high-dimensional VSM, i.e. a high correlation
(?? > 0.90). For the baseline, we report the av-
erage correlation of ??
random
= ?0.004 between
the sorted lists of words obtained from the high-
dimensional VSM and 31 ? 1000 lists of sorted
words that are obtained by randomly assigned dis-
tances.
Figure 4 shows the same results as Figure 3,
however, in minute detail and only for VSMs of
dimension m ? {100, 400, 800, 3200}. In these
plots, squares ( ) indicate the ??while the error bars
show the best and the worst observed ? amongst
all the sorted lists of words. The minimum value
of ?-axis is set to 0.611, which is the worst ob-
served correlation in the baseline (i.e. randomly
generated distances). The dotted line (? = .591)
shows the best observed correlation in the baseline
and the dashed-dotted line shows the average cor-
relation in the baseline (? = ?0.004). As sug-
gested in Section 2.2, it can be verified that an
increase in the dimension of VSMs (i.e. m) in-
creases the stability of the obtained results (i.e.
the probability of preserving distances increases).
Therefore, for large values of m (i.e. m > 400),
the difference between the best and the worst ob-
served ? decreases; average correlation ??? 1 and
the observed relative distances in RMI-constructed
VSMs tend to be identical to those in the original
high-dimensional VSM.
Figure 5 represents the obtained results in the
same setting as above, however, when the dis-
tances are approximated using the geometric mean
(Equation 10). The obtained average correlations
?? from the geometric mean estimations are al-
most identical to the median estimations. How-
ever, as expected, the geometric mean estimations
are more reliable for small values of m; particu-
larly, the worst observed correlations when using
the geometric mean are higher than those observed
when using the median estimator.
?0.5
0
0.5
1
0.8
0.9
?
m = 100 m = 400
20 40 60
?0.5
0
0.5
1
2 12 70
0.8
0.9
|non-zero elements|
?
m = 800
20 40 602 12 70
|non-zero elements|
m = 3200
Figure 4: Detailed observation of the ob-
tained correlation between relative distances in
RMI-constructed VSMs and the original high-
dimensional VSM. The `
1
distance is estimated
using the median. The squares denote ?? and the er-
ror bars show the best and the worst observed cor-
relations. The dashed-dotted line shows the ran-
dom baseline.
1719
?0.5
0
0.5
1
0.8
0.9
?
m = 100 m = 400
20 40 60
?0.5
0
0.5
1
2 12 70
0.8
0.9
|non-zero elements|
?
m = 800
20 40 602 12 70
|non-zero elements|
m = 3200
Figure 5: The observed results when the `
1
dis-
tance in RMI-constructed VSMs is estimated us-
ing the geometric mean.
3 Random Manhattan Integer Indexing
The application of the RMI method is hindered by
two obstacles: float arithmetic operations required
for the construction and processing of the RMI-
constructed VSMs and the calculation of the prod-
uct of large numbers when `
1
distances are esti-
mated using the geometric mean.
The proposed method for the generation of in-
dex vectors in RMI results in index vectors of
non-zero elements that are real numbers. Conse-
quently, index vectors and thus context vectors are
arrays of floating point numbers. These vectors
must be stored and accessed efficiently when using
the RMI technique. However, resources that are
required for the storage and processing of floating
numbers is high. Even if the requirement for the
storage of index vectors is alleviated, e.g., using
a derandomization technique for their generation,
context vectors that are derived from these index
vectors are still arrays of float numbers. To tackle
this problem, we suggest substituting the value of
non-zero elements of RMI?s index vectors (given
in Equation 6) from
1
U
to integer values of b
1
U
c,
where b
1
U
c 6= 0. We argue that the resulting ran-
dom projection matrix still has a Cauchy distribu-
tion. Therefore, the proposed methodology to esti-
mate the `
1
distance between vectors is also valid.
The `
1
distance between context vectors must
be estimated using either the median or the geo-
metric mean. The use of the median estimator?
for the reasons stated in Section 2.1?is not plau-
sible. On the other hand, the computation of the
geometric mean can be laborious as the overflow
is highly likely to happen during its computation.
Using the value of b
1
U
c for non-zero elements of
index vectors, we know that for any pair of context
vectors ~u = (u
1
, ? ? ? , u
m
) and ~v = (v
1
, ? ? ? , v
m
),
if u
i
6= v
i
then |u
i
? v
i
| ? 1. Therefore, for u
i
6=
v
i
, ln |u
i
?v
i
| ? 0 and thus
?
m
i=1
ln(|u
i
?v
i
|) ? 0.
In this case, the exponent in Equation 10 is a scale
factor that can be discarded without a change in
the relative distances between vectors.
14
Based on
the intuition that the distance between a vector and
itself is zero and the explanation given above, in-
spired by smoothing techniques and without being
able to provide mathematical proofs, we suggest
estimating the relative distances between vectors
using
?
L
1
(~u,~v) =
m
?
i=1
u
i
6=v
i
ln(|u
i
? v
i
|). (12)
In order to distinguish the above changes in RMI,
we name the resulting technique random Manhat-
tan integer indexing (RMII). The experiment de-
scribed in Section 2.2 is repeated using the RMII
method. As shown in Figure 6, the obtained results
are almost identical to the observed results when
using the RMI technique. While RMI performs
slightly better than RMII in lower dimensions, e.g.
m = 400, RMII shows more stable behaviour than
RMI at higher dimensions, e.g. m = 800.
4 Comparison of RMI and RI
RMI and RI utilize a similar two-step procedure
consisting of the creation of index vectors and the
construction of context vectors. Both methods are
incremental techniques that construct a VSM at
reduced dimensionality directly, without requiring
the VSM to be constructed at its original high di-
mension. Despite these similarities, RMI and RI
are motivated by different applications and math-
14
Please note that according to the axioms in the distance
definition, the distance between two numbers is always a non-
negative value. When index vectors consist of non-zero ele-
ments of real numbers, the value of |u
i
? v
i
| can be between
0 and 1, i.e. 0 < |u
i
? v
i
| < 1. Therefore, ln(|u
i
? v
i
|) can
be a negative number and thus the exponent scale is required
to make sure that the result is a non-negative number.
1720
?0.5
0
0.5
1
0.8
0.9
?
m = 100 m = 400
20 40 60
?0.5
0
0.5
1
2 12 70
0.8
0.9
|non-zero elements|
?
m = 800
20 40 602 12 70
|non-zero elements|
m = 3200
Figure 6: The observed results when using the
RMII method for the construction and estimation
of the `
1
distances between vectors. The method is
evaluated in the same setup as the RMI technique.
ematical theorems. As described above, RMI ap-
proximates the `
1
distance using a non-linear esti-
mator, which has not yet been employed for the
construction of VSMs and the calculation of `
1
distances in distributional approaches to seman-
tics. Moreover, RMI is justified using Cauchy ran-
dom projections.
In contrast, RI approximates the `
2
distance us-
ing a linear estimator. RI has initially been justi-
fied using the mathematical model of the sparse
distributed memory (SDM)
15
. Later, Sahlgren
(2005) delineates the RI method using the lemma
proposed by Johnson and Lindenstrauss (1984)?
which elucidates random projections in Euclidean
spaces?and the reported refinement in Achlioptas
(2001) for the projections employed in the lemma.
Although both the RMI and RI methods can
be established as ?-stable random projections?
respectively for ? = 1 and ? = 2?the meth-
ods cannot be compared as they address different
goals. If, for a given task, the `
1
norm outperforms
the `
2
norm, then RMI is preferable to RI. Con-
trariwise, if the `
2
norm outperforms the `
1
norm,
then RI is preferable to RMI.
To support the earlier claim that RI-constructed
15
See Kanerva (1993) for an overview of the SDM model.
?0.5
0
0.5
1
0.8
0.9
?
m = 400, the `
1
distance m = 800, the `
1
distance
20 40 60
?0.5
0
0.5
1
2 12 70
0.8
0.9
|non-zero elements|
?
m = 400, median estimator
20 40 602 12 70
|non-zero elements|
m = 800, median estimator
Figure 7: Evaluation of RI for the `
1
distance esti-
mation for m = 400 and m = 800 when the dis-
tances are calculated using the standard definition
of distance in `
1
normed spaces and the median es-
timator. The obtained results using RI do not show
correlation to the `
1
distances in the original high-
dimensional VSM.
VSMs cannot be used for the `
1
distance estima-
tion, we evaluate the RI method in the experimen-
tal setup that has been used for the evaluation of
RMI and RMII. In these experiments, however,
we use RI to construct vector spaces at reduced
dimensionality and estimate the `
1
distance us-
ing Equation 5 (the standard `
1
distance defini-
tion) and Equation 7 (the median estimator) for
m ? 400, 800. As shown in Figure 7, the experi-
ments support the theoretical claims.
5 Conclusion
In this paper, we introduce a novel technique,
named Random Manhattan Indexing (RMI), for
the construction of `
1
normed VSMs directly at
reduced dimensionality. We further suggest the
Random Manhattan Integer Indexing (RMII) tech-
nique, a computationally enhanced version of the
RMI technique. We demonstrated the `
1
distance
preservation ability of the proposed technique in
an experimental setup using a word-by-document
model. In these experiments, we showed how the
variable parameters of the methods, i.e. the num-
ber of non-zero elements in index vectors and the
1721
dimensionality of the VSM, influence the obtained
results. The proposed incremental (and thus effi-
cient and scalable) methods significantly enhance
the computation of the `
1
distances in VSMs.
Acknowledgements
This publication has emanated from research
conducted with the financial support of Sci-
ence Foundation Ireland under Grant Number
SFI/12/RC/2289.
References
[Achlioptas2001] Dimitris Achlioptas. 2001.
Database-friendly random projections. In Pro-
ceedings of the Twentieth ACM SIGMOD-SIGACT-
SIGART Symposium on Principles of Database
Systems, PODS ?01, pages 274?281, New York, NY,
USA. ACM.
[Baroni et al.2009] Marco Baroni, Silvia Bernardini,
Adriano Ferraresi, and Eros Zanchetta. 2009. The
wacky wide web: a collection of very large linguis-
tically processed web-crawled corpora. Language
Resources and Evaluation, 43(3):209?226.
[Brand2006] Matthew Brand. 2006. Fast low-rank
modifications of the thin singular value decom-
position. Linear Algebra and its Applications,
415(1):20?30. Special Issue on Large Scale Linear
and Nonlinear Eigenvalue Problems.
[Brinkman and Charikar2005] Bo Brinkman and Moses
Charikar. 2005. On the impossibility of dimension
reduction in l1. J. ACM, 52(5):766?788.
[Bullinaria and Levy2007] John A. Bullinaria and
Joseph P. Levy. 2007. Extracting semantic repre-
sentations from word co-occurrence statistics: A
computational study. Behavior Research Methods,
39:510?526.
[Deerwester et al.1990] Scott C. Deerwester, Susan T.
Dumais, Thomas K. Landauer, George W. Furnas,
and Richard A. Harshman. 1990. Indexing by latent
semantic analysis. Journal of the American Society
of Information Science, 41(6):391?407.
[Indyk2000] Piotr Indyk. 2000. Stable distribu-
tions, pseudorandom generators, embeddings and
data stream computation. In Foundations of Com-
puter Science, 2000. Proceedings. 41st Annual Sym-
posium on, pages 189?197.
[Indyk2006] Piotr Indyk. 2006. Stable distributions,
pseudorandom generators, embeddings, and data
stream computation. J. ACM, 53(3):307?323, May.
[Johnson and Lindenstrauss1984] William Johnson and
Joram Lindenstrauss. 1984. Extensions of Lips-
chitz mappings into a Hilbert space. In Conference
in modern analysis and probability (New Haven,
Conn., 1982), volume 26 of Contemporary Mathe-
matics, pages 189?206. American Mathematical So-
ciety.
[Kanerva et al.2000] Pentti Kanerva, Jan Kristoferson,
and Anders Holst. 2000. Random indexing of text
samples for latent semantic analysis. In Proceed-
ings of the 22nd Annual Conference of the Cognitive
Science Society, pages 103?6. Erlbaum.
[Kanerva1993] Pentti Kanerva. 1993. Sparse dis-
tributed memory and related models. In Mo-
hamad H. Hassoun, editor, Associative neural mem-
ories: theory and implementation, chapter 3, pages
50?76. Oxford University Press, Inc., New York,
NY, USA.
[Ke and Kanade2003] Qifa Ke and Takeo Kanade.
2003. Robust subspace computation using `
1
norm.
Technical Report CMU-CS-03-172, School of Com-
puter Science, Carnegie Mellon University.
[Kwak2008] Nojun Kwak. 2008. Principal component
analysis based on l1-norm maximization. Pattern
Analysis and Machine Intelligence, IEEE Transac-
tions on, 30(9):1672?1680, Sept.
[Lee1999] Lillian Lee. 1999. Measures of distribu-
tional similarity. In Proceedings of the 37th An-
nual Meeting of the Association for Computational
Linguistics on Computational Linguistics, ACL ?99,
pages 25?32, Stroudsburg, PA, USA. Association
for Computational Linguistics.
[Lenci2008] Alessandro Lenci. 2008. Distributional
semantics in linguistic and cognitive research. From
context to meaning: Distributional models of the lex-
icon in linguistics and cognitive science, special is-
sue of the Italian Journal of Linguistics, 20/1:1?31.
[Li et al.2007] Ping Li, Trevor J. Hastie, and Ken-
neth W. Church. 2007. Nonlinear estimators and tail
bounds for dimension reduction in L
1
using cauchy
random projections. J. Mach. Learn. Res., 8:2497?
2532.
[Li2007] Ping Li. 2007. Very sparse stable random
projections for dimension reduction in l
?
(0 < ? <
2) norm. In Proceedings of the 13th ACM SIGKDD
International Conference on Knowledge Discovery
and Data Mining, KDD ?07, pages 440?449, New
York, NY, USA. ACM.
[Li2008] Ping Li. 2008. Estimators and tail bounds for
dimension reduction in `
?
(0 < ? ? 2) using sta-
ble random projections. In Proceedings of the Nine-
teenth Annual ACM-SIAM Symposium on Discrete
Algorithms, SODA ?08, pages 10?19, Philadelphia,
PA, USA. Society for Industrial and Applied Math-
ematics.
[Martin and Berry2007] Dian I. Martin and Michael W.
Berry, 2007. Handbook of latent semantic analysis,
chapter Mathematical foundations behind latent se-
mantic analysis, pages 35?55. Ro.
1722
[Sahlgren2005] Magnus Sahlgren. 2005. An introduc-
tion to random indexing. In Methods and Applica-
tions of Semantic Indexing Workshop at the 7th In-
ternational Conference on Terminology and Knowl-
edge Engineering, TKE 2005.
[Turney and Pantel2010] Peter D. Turney and Patrick
Pantel. 2010. From frequency to meaning: vec-
tor space models of semantics. J. Artif. Int. Res.,
37(1):141?188, January.
[Weeds et al.2005] Julie Weeds, James Dowdall,
Gerold Schneider, Bill Keller, and David Weir.
2005. Using distributional similarity to organise
biomedical terminology. Terminology, 11(1):3?4.
1723
Proceedings of the 4th International Workshop on Computational Terminology, pages 52?63,
Dublin, Ireland, August 23 2014.
The ACL RD-TEC: A Dataset for Benchmarking Terminology Extraction
and Classification in Computational Linguistics
Behrang Q. Zadeh
?
and Siegfried Handschuh
??
?
Insight Centre of Data Analytics
National University of Ireland, Galway
?
Department of Computer Science and Mathematics
University of Passau, Germany
{behrang.qasemizadeh, siegfried.handschuh}@insight-centre.org
Abstract
This paper introduces ACL RD-TEC: a dataset for evaluating the extraction and classification
of terms from literature in the domain of computational linguistics. The dataset is derived from
the Association for Computational Linguistics anthology reference corpus (ACL ARC). In its
first release, the ACL RD-TEC consists of automatically segmented, part-of-speech-tagged ACL
ARC documents, three lists of candidate terms, and more than 82,000 manually annotated terms.
The annotated terms are marked as either valid or invalid, and valid terms are further classified
as technology and non-technology terms. Technology terms signify methods, algorithms, and
solutions in computational linguistics. The paper describes the dataset and reports the relevant
statistics. We hope the step described in this paper encourages a collaborative effort towards
building a full-fledged annotated corpus from the computational linguistics literature.
1 Introduction
Computational terminology (CT) embraces a set of algorithms that extract terms from domain-specific
corpora and arrange them in domain-specific knowledge structures such as a vocabulary, thesaurus or
ontology. Modern methods in CT often take a corpus-based, distributional approach to fulfil their tasks.
These methods exploit data-centric, data-sensitive techniques for mining and organizing terms. Evalu-
ation of these methods?as described in Vivaldi and Rodr??guez (2007) and Nazarenko and Zargayouna
(2009)?is inherently a difficult task. Regardless of the employed metric and method for the perfor-
mance comparison of CT algorithms, however, choosing a shared dataset consisting of a fixed set of
documents?which can be accessed freely and easily?is a major step towards alleviating a number of
obstacles in the evaluation process. From a mathematical perspective, changes in the document set will
alter the underlying distribution of words and terms in the benchmark dataset. Consequently, this can
vary the performance of methods. From perspectives that involve meaning interpretation, as described
in L?Homme (2014), terms are defined against a context. This context is the representative of a special-
ized subject field and reflects the requirements of the intended application for the extracted terms. In an
evaluation dataset, the specialized subject field is largely defined by the set of documents in this dataset.
Therefore, variation in the set of documents can result in variant set of terms.
Creating datasets for benchmarking CT techniques have been addressed in several research efforts.
The GENIA corpus is a well-known example of such reference datasets in bio-text mining: a corpus
of 2000 abstracts from scientific publications in biological literature that is accompanied by the anno-
tations of 100,000 terms organized in a well-defined ontology (Kim et al., 2003). The Colorado Richly
Annotated Full Text Corpus (CRAFT) is another example of a bio-text mining dataset, which consists
of 97 articles from the PubMed Central Open Access subset annotated with biomedical concepts such as
?mouse genes? (Bada et al., 2012). In a more recent effort, Bernier-Colborne and Drouin (2014) report
on creating a corpus for the evaluation of term extraction in the domain of automotive engineering.
This work is licensed under a Creative Commons Attribution 4.0 International Licence. Page numbers and proceedings footer
are added by the organizers. Licence details: http://creativecommons.org/licenses/by/4.0/
52
The use of these datasets for CT research and terminology extraction has one obstacle: the minimal
prerequisite knowledge that is required to understand these specialized discourse and literature. This un-
derstanding of text is, perhaps, essential to enable a CT researcher to first comprehend and then describe
a linguistic phenomenon. Hence, conducting research in these specialized fields requires a training for
terminologists. For example, research in bio-text mining is often conducted by a team that includes ex-
perts in biology, bioinformaticians and computational linguists who have specialized training in this field.
Conducting CT research in these specialized domains, therefore, may not be the first choice for compu-
tational linguists who have a keen interest and specialized knowledge in the computational analysis of
languages?or want to train themselves to gain this knowledge.
1
In this paper, we introduce the ACL RD-TEC: a Reference Dataset for Terminology Extraction and
Classification in the domain of computational linguistics. The ACL RD-TEC is drawn from the ACL
ARC (Bird et al., 2008). The ACL ARC is a fixed set of scholarly publications in the domain of compu-
tational linguistics. It has been developed with an aim to provide a platform for benchmarking methods
of scholarly document processing.
2
We report further processes and annotations that have been carried
out on the ACL ARC in order to move a step closer to a reference dataset of familiar materials for the
CT research community.
Before describing the dataset, Section 2 delineates the terms that are used in this paper and gives a brief
summary of computational terminology. In Section 3, we explain the automatic and manual processes
performed to create the ACL RD-TEC and summarize the statistics of the current release. Finally, we
conclude and describe our goals for the immediate future in Section 4.
2 Computational Terminology
Computational terminology inherits its complexity from the difficulties in the interpretation of meaning
in language. In terminology, these complications are often summarized by the question ?what counts as
a term?? The Oxford Dictionary defines a term as
?a word or phrase used to describe a thing or to express a concept, specially in a particular kind
of language or branch of study?.
According to the International Organization for Standardization (ISO), a term is
?a verbal designation of a general concept in a specific subject field (ISO 1087-1(2000))?.
As stated by Cabr?e (2010), linguistically, terms are lexical units and carry a special meaning in particular
contexts. A lexical unit is often considered as a lexical form?a single token, part of a word, a word or
a combination of these?that is paired with a single meaning and serves as the basic element of a lan-
guage?s vocabulary. As stated by L?Homme (2014), terms are the denomination of items of knowledge,
i.e. concepts.
According to their lexical forms, terms are usually classified as simple or complex. Simple terms
consist of one token; complex terms are composed of more than one token or word. For instance,
?lexicography? and ?multilingual terminology management? are, respectively, examples of a simple and
a complex term in the domain of computational linguistics. The extracted lexical units constitute a
terminological resource, also known as terminology: a specialized vocabulary of knowledge in a domain.
Terms and their use are studied in a relatively young discipline, which is also called terminology (Cabr?e,
2003; Kageura, 1999):
?the field of activity concerned with the collection, description, processing and presentation of
terms (Sager, 1990)?.
While terminology can be approached from several perspectives, e.g. as a branch of philosophy, soci-
ology, or cognitive science, terminology is dominantly considered as a linguistic and cognitive activity.
1
Considering that knowledge and vocabulary are highly correlated, and vocabulary can be gained by exposure to literature.
2
With an intuition similar to ?eating your own dog food?, as proposed in Harrison (2006).
53
Concept
Term
denotation
(a) General Theory of Terminology
Concept
Term
writer
Text
reader
signify
(b) Terms as Linguistic Units
Figure 1: Association of meaning in the GTT compared to recent theories of terminology: in the GTT,
terms are linguistic labels and denote concepts that exist a priori. In recent theories of terminology, e.g.
CTT, however, terms are treated like other linguistic units. They signify concepts in a communicative
context. In the figures above, the dashed lines indicate the direction in which the meaning of a term
is elaborated according to these theories. The indicated communicative context (the dotted triangle in
Figure b) can be extended in a number of ways, e.g. by considering the application of terms.
Concept
Term
Concept
Term
? ? ?
(a) One-to-One Relation
Concept
Term Term
? ? ?
(b) Synonymous Relation
Term
Concept Concept ? ? ?
(c) Polysemous Relation
Figure 2: Relationships between terms and the concepts they signify: Figure 2a illustrates a mono-
referential, unambiguous relationship between terms and concepts. Figure 2b shows an ambiguity that
may arise when several terms denote the same concept in a synonymous relation. Figure 2c illustrates an
ambiguous term-concept relation, a polysemous relationship where a term may denote several concepts.
Modern terminology is therefore pursued within a linguistic framework and as the study of specialized
languages (Faber, 2012).
The meanings of terms and the process of concept denomination are studied within the framework of
a ?theory of terminology?. As stated in Cabr?e (2003), a theory of terminology elaborates the fundamental
problem of interpretation of meaning into a set of questions in which the definition of a terminological
unit?and its characteristics?is the nucleus. The general theory of terminology (GTT) by W?uster (1974,
as cited in Campo (2013, chap. 2)) is recognized as the first theory of terminology. The GTT, which
is also known as traditional terminology, puts concepts first; terms are unambiguous linguistic labels
that are defined independently of the context in which they are used (L?Homme, 2014) (Figure 1a).
As implied by the given definition in ISO 1087-1(2000), the GTT is the most widely adopted theory
amongst terminologists.
3
Consequently, the GTT regards terms and concepts as having mono-referential
relationships (Figure 2a). The objective behind GTT, understandably, is to eliminate ambiguity in natural
language to improve clarity in technical communication.
In an authoritative institutional organization that promotes or enforces standards, terms can be made
and shared in a top-down manner; hence, the meaning of terms can be interpreted by the mechanism
described in the GTT.
4
However, in practice and in many organizations, new terms are introduced in a
bottom-up synthesis process. A lexical form (which may or may not be newly invented) in contexts that
bear a concept (which may or may not be newly invented) is used frequently inasmuch as it becomes
a term
5
in the organization. In practice, therefore, terms can be ambiguous: a term can refer to several
concepts?similar to polysemy?homonymy in lexical semantics (Figure 2c); or, contrariwise, a particular
concept can be denoted by several terms (Figure 2b). Heid and Gojun (2012) suggest that the rapid
evolution of organizations as well as multi-players that are involved in an uncoordinated way, specifically
in multidisciplinary domains, reinforces this situation and thus term ambiguity.
3
Accordingly, Felber (1982) defines terminology as ?the combined action of groups of subject specialists (terminology
commissions) of specialised organisations?.
4
it is, perhaps, best demonstrated in the applications of controlled natural languages.
5
That is, a norm.
54
Ta
s
k
C
o
n
t
e
x
t
S
i
z
e
A
u
t
o
m
a
t
i
c
T
e
r
m
R
e
c
o
g
n
i
t
i
o
n
D
o
m
a
i
n
-
S
p
e
c
i
fi
c
C
o
r
p
u
s
A
u
t
o
m
a
t
i
c
K
e
y
p
h
r
a
s
e
E
x
t
r
a
c
t
i
o
n
S
i
n
g
l
e
D
o
c
u
m
e
n
t
N
a
m
e
d
E
n
t
i
t
y
R
e
c
o
g
n
i
t
i
o
n
T
e
x
t
S
n
i
p
p
e
t
s
... ...
Figure 3: Lexical unit extraction tasks and the scope of the meaning: the diagram can be extended by
adding new dimensions that take into the consideration characteristics of the communicative context
other than the text size.
In contrast to the GTT, recent theories of terminology, e.g. the communicative theory of terminology
(CTT) by Cabr?e (see 1999, chap. 3), acknowledges the situation stated above and takes a bottom-up
distributional approach to terminology in the sense that the meanings of terms, thus the elements of
domain knowledge, are not preconceived. Terms are linguistic units that are understood differently
with regards to the communicative context, e.g. by the text surrounding them, the application they are
used and so on. Terms signify concepts by syntagmatic and paradigmatic relations that they hold in a
specialized communicative discourse (Figure 1b).
6
Methods that modern CT embraces, therefore, can
be distinguished and classified by the communicative context in which they are employed.
In CT, the task of automatic term recognition (ATR) is at the centre of attention. The input of ATR is a
large collection of documents, i.e. a domain-specific corpus, and the output is a terminological resource.
In ATR, the meaning of the generated terms is interpreted in a wide spectrum of concepts in the domain
that is being investigated and represented by the input corpus. ATR facilitates the automatic construction
of terminological resources; hence, it is a significant processing resource in knowledge engineering tasks
and applications such as information retrieval and machine translation.
As articulated by Kageura and Umino (1996), ATR deals with the computation of measures known as
unithood and termhood. It is believed that the majority of terms in a domain are complex terms. Unithood
indicates the degree to which a sequence of tokens can be combined to form a complex term. It is, thus,
a measure of the syntagmatic relation between the constituents of complex terms: a lexical association
measure to identify collocations. In the absence of explicit linguistic criteria for distinguishing complex
terms from other natural language text phrases, a unithood measure construes the problem of complex
term identification as the identification of stable lexical units (Sager, 1990).
7
Termhood, on the other hand, ?is the degree to which a stable lexical unit is related to some domain-
specific concepts? (Kageura and Umino, 1996). It characterizes a paradigmatic relation between lex-
ical units?either simple or complex terms?and the communicative context that verbalizes domain-
concepts. Termhood, thus, envisages the measurement of meaning. In the absence of a formal answer
to the question ?what domain-specific concepts are??, devising a termhood measure for distinguishing
terms and non-terms is a difficult and often conflictual task?hence, the evaluation of CT.
In ATR, the communicative context is a domain-specific corpus. ATR, therefore, should not be con-
fused with other tasks in CT?such as keyword extraction, entity recognition, etc.?that bear a close
resemblance to it. These tasks are similar to ATR in the sense that they extract stable lexical units from
natural language text. However, they are different from ATR, because the meaning of the extracted
lexical units, thus the termhood measure, is interpreted in a context other than a domain-specific cor-
pus (Figure 3). For example, an automatic keyphrase extraction algorithm extracts lexical units from
a single document that best describe the content of this document. Both unithood and termhood must
be also measured in automatic keyphrase extraction. However, the criterion for their definition and the
information available for their computation are different than ATR.
6
As can be understood, the main difference between the GTT and the CTT is the interpretation of the process of pairing
concepts and lexical forms that is mentioned in the definition of lexical units.
7
See Evert (2004) on the application of lexical association measures for the identification of stable lexical units.
55
Text Term Extraction Term Classification
? ? ?
Terminological Resource
Term Mapping
Figure 4: Significant processes in computational terminology and the direction in which they attach terms
and natural language text.
Text Candidate Term Extraction
Scoring and Ranking
Termhood
Unithood
Term List
Figure 5: Prevalent architecture of the terminology extraction methods.
We can further distinguish CT methods based on the direction in which terms and text are related.
Recent developments of ontological resources have stimulated a research strand that targets the reverse
task of intermediary applications. The goal of these applications is to fill the gap between an available
ontology, i.e. a knowledge base, and natural language text. In these tasks, given a particular concept
in a knowledge base (e.g. a class and its instances in an ontology), a method?which we call term
mapping following Krauthammer and Nenadic (2004)?decides if this concept or its instances has been
mentioned in a given text snippet. Entity linking, which has been promoted through the series of Text
Analysis Conferences,
8
is another term that characterizes these research efforts (see also Rao et al.,
2013). The familiar task of named entity recognition (NER), as introduced at the Message Understanding
Conference (Grishman and Sundheim, 1996), can also be placed in this category. In NER, the types of
target terms are known prior to the extraction task, e.g. city, location and so on.
In contrast to term mapping techniques, there are methods that organize constituent terms of a termino-
logical resource into a variety of classes. In these methods, the usage of terms in a given domain-specific
corpus is assessed to decide about their membership in concept classes. If the classes are known prior to
the assignment task, then the task is known as term classification; otherwise, if the classes are not known,
the task is called term clustering. As suggested by Krauthammer and Nenadic (2004), these three tasks?
i.e. term recognition, term classification and term mapping?are essential for automatic construction and
maintenance of terminological resources and to form a closed loop between terminology and natural
language text (Figure 4).
A more elaborate taxonomy of CT techniques can be obtained by distinguishing additional elements
and characteristics of the communicative context, e.g. the way in which an end user benefits from the
extracted terms, the role of background knowledge, linguistic characteristics of the extracted terms and
so on. We leave this study for another occasion.
2.1 Prevalent Mechanism in Term Extraction Tasks
As suggested in Nakagawa (2001), the algorithms for term recognition are usually in the form of a two-
step procedure: candidate term extraction followed by term scoring and ranking (Figure 5).
Candidate term extraction deals with the term formation and the extraction of candidate terms. In a
few applications, candidate term extraction can assess the morphosyntactic structure of terms, e.g. as
suggested in Ananiadou (1994) and Zweigenbaum and Grabar (1999), to identify candidate terms. In
these methods, existing terminologies are often available before to the extraction task and employed to
identify new candidate terms. Besides this, one can identify four major methods for the extraction of
candidate terms: linguistic filtering based on part of speech (PoS) tag sequences, n-gram technique,
linguistic filtering based on syntactic relations and techniques that rely on the presence of particular
markers in text. Methods for the extraction of candidate terms are not limited to these categories. For
instance, contrastive approaches exploit a reference corpus of general language to identify simple can-
didate terms (Drouin, 2004, 2003); for complex terms, the comparison between corpora is followed by
one of the techniques listed above. A combination of these methods can also be employed to improve
8
http://www.nist.gov/tac/about/
56
the results (e.g. see Aubin and Hamon, 2006).
Linguistic filters in the form of PoS tag sequence patterns are the most widely adopted technique
for the extraction of candidate terms. In this method, any sequence of tokens with certain PoS tags are
assumed as candidate terms (Justeson and Katz, 1995; Daille, 1995). Likewise, the knowledge about PoS
patterns that cannot form candidate terms may be used to restrict the presence of token sequences in a
list of candidate terms (Bourigault, 1992). In the n-gram technique, however, any sequences of tokens of
length n, often 1 ? n ? 6, that appear in the input text are considered as candidate terms. This method
generates a large set of candidate terms. The number of candidate terms, therefore, is often reduced by
filtering n-grams that contain tokens from a stop-word list. When linguistic processing tools are lacking,
such as the case of under-resourced languages (see e.g. Pinnis et al., 2012), or the computational cost or
accuracy hinders their usage, the n-gram technique is favourable.
Linguistic filters that employ syntactic relations have also been used for the extraction of candidate
terms. The first sub-category of these methods use shallow parsing to identify noun phrases as candidate
terms (Nakagawa, 2001). The second sub-category of these methods generate candidate terms from
available terminological resources to identify term variations (Jacquemin and Tzoukermann, 1999). The
third subcategory, which is often employed for multilingual term extraction, exploits the head-modifier
principle to identify candidate terms (Hippisley et al., 2005). Finally, a category of candidate term
extraction methods takes advantage of the presence of specific markers in input text that can be used to
determine boundaries of terms, e.g. the presence of mark-up metadata in Hartmann et al. (2012).
Subsequent to candidate term extraction, a scoring procedure?which can be seen as a semantic
weighting mechanism?is employed to indicate how likely it is that a candidate term is a term we would
like to extract. As Figure 5 suggests, the scoring procedure usually combines termhood and unithood
scores. Although several categorizations of the scoring and ranking methods can be given from a method-
ological point of view (e.g. statistics-based, machine learning-based, rule-based, etc.) or by the kind of
information that is exploited for weighting (e.g. linguistic-based, statistical-based, hybrid) as stated ear-
lier, all these techniques rely on the text and take a corpus-based distributional approach to score and
rank terms. The usage of candidate terms in a communicative context (e.g. domain-corpus) is formulated
in a machine-tractable format, e.g. in the form of a contingency table or a vector space model. It is
then assessed using statistical measures, similarity metrics, language models or a set of rules, depending
on the method employed and the objective of the task in hand, which defines the type of paradigmatic
relation that the termhood measure characterizes.
The c-value algorithm, for instance, is an statistical method of assigning scores to candidate terms in
an ATR task. It is used as a baseline in a number of ATR evaluation tasks. For each candidate term t, the
c-value score of t is calculated using four criteria (Frantzi et al., 1998): the frequency of t in the corpus;
the frequency of t when it appears nested in other terms longer than t; the number of those longer terms
shown by T
t
; and the number of the constituent words of t shown by |t|. The c-value score is given by
c-value(t) =
{
log
2
|t|f (t) if t /? nested
log
2
|t| (f (t)?
1
|T
t
|
?
b?T
t
f (b)) otherwise
, (1)
where T
t
denotes the set of all the terms that contain t and are longer than t, and f(s) denotes the
frequency of an arbitary term s in the corpus. Other widely applied statistical measures for termhood
assements in ATR include term frequency?inverse document frequency (tf -idf ), term frequency (tf ),
and inverse document frequency (idf ). We leave the study of scoring mechanisms for another occasion.
3 The ACL RD-TEC: Further Annotation Layers for ACL ARC
We introduce the ACL RD-TEC, a spin-off of the ACL ARC. In its first release, the ACL RD-TEC
consists of manual annotations that can be used for the evaluation of ATR and term classification tasks
that are explained in the previous section. The current release of the ACL ARC consists of 10,922 articles
that were published between 1965 to 2006. The provided resources in the ACL ARC consist of three
layers: (a) source publications in portable document format (PDF), (b) automatically extracted text from
57
Type Token Sentence Paragraph Section Publication
704,085 36,729,513 1,564,430 510,366 92,935 10,922
Table 1: Summary statistics of the dataset derived from automatic processing of the ACL ARC.
PoS Tag JJ NN NNP VBG FW (Total)
Frequency 150 17,120 4,520 1255 2 (23,047)
Table 2: Summary statistics of the assigned PoS tags to the simple term ?parsing?. The PoS tags are from
the Penn Treebank PoS tagset.
the articles and (c) bibliographic metadata and citation network. Each of the articles in the collection
are assigned to a unique identifier that indicates the source (e.g. journal or conference) and the date (e.g.
1999, 2006, etc.) of publication.
In the preparation of ACL RD-TEC, we further employed the SectLabel module of Luong et al.?s
(2010) ParsCit tool
9
for the automatic identification of logical text sections in ACL ARC?s raw text
files. Using a set of heuristics, sections such as ?bibliography? and ?acknowledgements? are removed
from the corpus and are organized in separate files. In addition, text cleaning is performed, e.g. broken
words and text segments are joined, footnotes and captions are removed and sections are organised into
paragraphs. The sectioning process is followed by the text segmentation process using the OpenNLP
sentence splitter
10
and the Stanford tokenizer. The text is then annotated by the Stanford PoS tagger.
11
The process is finalized by making an inverted index of the cleansed full-text documents and assigning
unique identifiers to each one of the extracted linguistic units: types (i.e. PoS-tagged and lemmatized
words), sentences, paragraphs and (sub)sections. All of these units are stored in separate flat tables, in
which all units, except types, are presented as tuples, consisting of pairs of unique identifiers and their
relative locations in the text units they constitute. Therefore, text units can be easily traced back to the
publications that they appeared in. The statistics of the resulting data are given in Table 1.
Afterwards, candidate terms are extracted from the processed corpus using three methods: PoS-based
filtering, n-gram-based technique and noun phrase (NP) chunking. In order to devise PoS sequence
patterns and maximum length of candidate terms, we started with an observation of sample valid terms,
their PoS sequences patterns and length in the corpus. We extracted 3301 sentences that contained the
lemma ?technology?. We then identified 476 valid terms in these sentences, 65% of which had lengths
of 2 and 3 tokens; only 5% were longer than 5 tokens.
12
Similar to the method proposed by Ittoo et al.
(2010), to alleviate the problem of erroneous PoS tagging, we formulated the PoS patterns for candidate
term extraction based on the actual output of the employed PoS tagger. All the occurrences of the
identified terms were searched for in the corpus and all the PoS tag sequences assigned to them were
extracted. Amongst the 100 extracted patterns, to keep a balance between correct and incorrect patterns
resulted from erroneous PoS tagging, we chose 31 patterns P
i
l
of maximum length 5 that satisfy the
equation
f(P
i
l
)
?
j:length(P
j
)=l
f(P
j
)
>
1
10
l
, (2)
where f denotes the frequency of a PoS pattern and l is its length.
For example, the term ?parsing? is extracted as a valid term in this procedure. This simple term is
encountered 23,047 times in the corpus. As shown in Table 2, the employed PoS tagger assigned several
different PoS tags to this term. Assuming that these PoS tags are the only patterns of length 1, only
NN and NNP satisfy the given formula in Equation 2 above and are added to the inventory of valid PoS
patterns for terms of length l = 1. The rest of PoS patterns?VBG, JJ and FW?are discarded. As it can
be understood from the right hand side of the equation, when the length of PoS patterns increases, the
stated criteria for their selection process becomes easier (e.g. 0.01 for terms of length l = 2 instead of
9
Release version 110505 (http://aye.comp.nus.edu.sg/parsCit/).
10
Release version 1.5.2 (http://opennlp.apache.org/).
11
Release date 9 July 2012; see Toutanova et al. (2003) for a description of the PoS tagger tagset.
12
We eliminate definite and indefinite determiners from the terms.
58
Method Total# Length = 1 Length = 2 Length = 3 Length = 4 Length = 5
PoS-based 1, 322, 445 271, 064 741, 448 284, 725 23, 384 1, 824
n-gram 9, 339, 303 236, 053 1, 054, 792 2, 187, 041 2, 880, 665 2, 980, 752
NP Chunk 1, 813, 222 142, 636 706, 051 623, 633 248, 505 92, 397
Table 3: Summary statistics of the extracted candidate terms.
0.1 for terms of length l = 1). The list of devised PoS patterns is included in the distributed package.
We repeated the procedure described above by extracting sentences that contain lemmas other than
?technology?, e.g. ?algorithm?, ?method?, ?framework?and ?theory?. There is no evidence to support that
the extracted patterns are specific to a category of terms (e.g. technology terms). These patterns seem
to be generic enough to extract terms of any category. We support this claim based on the conducted
manual verification of the extracted candidate terms. In these extracted sentences, the only terms that are
longer than 5 tokens are various transliteration of the term ?very-large-vocabulary speaker-independent
continuous speech recognition?. Based on these observations and the previous studies reported on the
length of terms (e.g. see Maynard, 2000; Bonin et al., 2010), we believe the maximum length of 5 tokens
is a fair trade-off between accuracy and recall in the process of candidate term extraction.
The sentences in the corpus are scanned for occurrences of the devised PoS patterns. Any sequences
of tokens that conform to any of these patterns is considered as a candidate term. The extracted token
sequences construct the list of PoS-based candidate terms. Based on the above observation, in the n-
gram-based extraction of candidate terms, n is set to 1 ? n ? 5 tokens. In addition, n-grams that
begin with a token from a stop-word list
13
are discarded. The remaining n-grams form the second list
of candidate terms. The extracted sentences from the corpus are also chunked by the OpenNLP chunker.
NP chunks that are not longer than 5 tokens constitute the third list of candidate terms. As other lists of
candidate terms, determiners are removed from the NP chunks. From all the above lists, we eliminate
candidates that are shorter than 3 characters. Candidate terms are further augmented by their frequency in
the corpus, distinct documents, sections, and paragraphs and stored separately. Table 3 shows a summary
statistics of the extracted candidate terms.
In an ideal scenario, each occurrence of a candidate term in each sentence could have been annotated
to identify the particular concept?class that the term signals in that context. Such annotations could
have been used in all the tasks described in the previous section. In the absence of an agreed taxonomy
of concepts and classes for computational linguistics and?more importantly?the required resources to
carry out this complex manual annotation task, achieving the ideal goal at once and in a single step seems
infeasible. In order to keep it manageable, we begin the manual annotation task by the verification of the
candidate terms in vocabulary lists as is suggested in the previous evaluations of ATR algorithms.
To proceed with the annotation task, the extracted candidate terms are sorted using scores that are
obtained from several ATR algorithms, e.g. the c-value score (Equation 1). The annotators are provided
with an annotation guideline, consisting of basic definitions (such as the given description in the earlier
sections), rules (e.g. how to deal with term variation, misspelled terms and so on) and examples.
14
During
this process, the annotators are provided with a tool to access concordance view of candidate terms in
the ACL ARC corpus.
15
The annotators are asked to envisage a mind map of computational linguistics
topics and perceive the candidate terms in this map. For a given lexical form t in the list of candidate
terms, if t refers to a significant concept in the computational linguistics domain,
16
the annotators are ask
to mark t as valid. However, this does not guarantee that all the occurrences of t in the corpus are valid
terms. For instance, ?natural language? is a lexical form that appears in the corpus as a term on several
occasions, e.g. in
?? ? ? a natural language is a scheme of communication? ? ? ?.
13
The SMART stop-word list built by Chris Buckley and Gerard Salton, which can be obtained from goo.gl/rBQNbO.
14
The annotator guideline can be accessed in the distributed package.
15
We used the preloaded version of the ACL ARC in the Sketch Engine Corpus Query System available at https://the.
sketchengine.co.uk/bonito/run.cgi/first_form?corpname=preloaded/aclarc_1
16
That is, if they can situate the term in their envisaged mind map.
59
Total# Length = 1 Length = 2 Length = 3 Length = 4 Length = 5
Technology Terms 13,832 757 8,674 3,822 538 41
Invalid Terms 61,818 15,908 33,502 11,027 1,211 170
Valid Terms 22,027 1,495 14,146 5,677 657 52
Total Annotated 83,845 17,403 47,648 16,704 1,868 222
Table 4: Summary statistics of the annotated candidate terms.
Valid Terms
Technology Terms
Annotated Terms
Candidate Terms
All Possible Terms
Figure 6: Relationships between candidate terms, valid terms, technology terms and annotated terms.
Candidate term extraction extracts a subset of all possible terms. ATR targets the identification of valid
terms amongst candidate terms. Technology terms are a subset of valid terms. The dashed area shows
the set of annotated terms.
However, there are a number of occurrences of ?natural language? that cannot be considered as term, e.g.
?? ? ? the speech and natural language groups at SRI reported results ? ? ? ?.
On the other hand, if t is annotated as invalid, then there must be no occurrence of t in the corpus that
can be counted as a term. In the current version, 83,845 terms are annotated as either valid or invalid.
Furthermore, valid terms in the annotated list of terms are classified as those that can signal a technol-
ogy concept. If ?genes? are an essential category of concepts in an ontology that characterizes biological
discipline, we speculate that the presence of technology as a category of concepts is essential in any
ontology or terminological resource that describes an applied discipline like computational linguistics.
As to our definition, technology terms indicate concepts such as methods, algorithms and processes that
are designed, developed and employed to accomplish a certain task in order to fulfil a practical purpose,
i.e. to address a research problem (see also the task in Kovaevi et al., 2012). In computational linguistics,
examples of these terms are ?parsing?, ?information retrieval?, and more delicate terms such as ?linear
interpolation?.
In order to distinguish technology terms amongst other categories of terms, annotators are provided
with several definitions of technology and its known examples in computational linguistics.
17
In addi-
tion, the annotators are exposed to materials on philosophy of technology, e.g. Franssen et al. (2013),
and introduced to the task of ?tech mining? in Porter and Cunningham (2005). Despite all these efforts,
because establishing a precise definition of technology is infeasible, classification of valid terms to tech-
nology and non-technology terms, to a great extent, relies on the intuition of experts who participated in
the annotation task. The annotators are allowed to use other sources of information than the ACL ARC,
e.g. web search, in order to decide about the technology class membership of valid terms. The process of
annotating technology terms in the lists of extracted candidate terms is facilitated by supervised machine
learning-based methods of term weighting, e.g. as reported in Zadeh and Handschuh (2014a,b). Table 4
shows the current statistics of the annotated terms. Figure 6 illustrates relationships between candidate
terms, valid terms and technology terms.
Similar to the valid terms, terms that are annotated as technology terms do not exclusively belong to
this class. For example, ?computational linguistics? is a lexical form that can be classified as a technology
term, e.g., in
?? ? ? promising area of application of computational linguistics techniques? ? ? ?.
However, it can also signal other concepts such as a scientific discipline, e.g. in
?? ? ? theoretical work in computational linguistics? ? ? ?
17
Those terms that are explicitly named as technology in literature are taken as the examples of technology terms. To make
a list of examples, we identified these terms using simple patterns such as ?? ? ? X is a technology? ? ? ?.
60
0 500 1,000 1,500 2,000
0.2
0.4
0.6
0.8
1
Top
n
Verified Terms
P
r
o
p
o
r
t
i
o
n
o
f
P
o
s
t
i
v
e
E
x
a
m
p
l
e
s
t
o
n
Terms
0 500 1,000 1,500 2,000
0
0.1
0.2
0.3
Top
n
Verified Terms
Technology Terms Only
c-value (PoS-based)
c-value (n-gram)
c-value (NP chunk)
tf-idf (PoS-based)
tf-idf (n-gram)
tf-idf (NP chunk)
Figure 7: Comparison between c-value and tf -idf .
, as well as a community, e.g. in
?? ? ? pursued by the computational linguistics community ? ? ? ?.
The data, perhaps, speaks better for itself. Thus, we invite the interested reader to explore the annotated
set of terms in order to gain more insight into the performed annotation task. The dataset can be obtained
freely from the European Language Resources Association, catalogue reference ELRA-T0375.
18
While we hope more researchers become involved in the annotation task, in the current release, all
the annotations are made by one person. In order to assess the quality and reliability of the annotations,
we carried out two preliminary experiments. In the first experiment, a list of terms consisting of 250
terms that have been particularly difficult to annotate are annotated by a researcher who is familiar with
terminology. For example, we particularly found it hard and conflicting to annotate terms that start with
words such as ?automatic, automated, stat-of-the-art, scalable, rapid, full, fast? and so on, e.g. in terms
such as ?fast clustering, ?fast classification, and ?fast prototyping. In addition, deciding on the inclusion
of certain categories of terms is difficult. For example, one may consider ?people? and ?organizations? as
valid domain terms, while another person?with her own specific interest and expertise?may consider
these as invalid terms. This problem is more subtle about categories such as ?languages? and ?linguistic
units?. For instance, one may consider ?English? and ?French? as well as ?clitic? and ?suffix? as terms;
however, another person may not consider them as valid terms in the domain of computational linguistics
(e.g. one may found them too generic to be considered as valid terms). As to our experience, the more
specific we are about the concept categories, the easier it is to annotate the terms. We made sure sample
of these terms are included in the assessment of the annotations. We report an observed agreement A
o
of 0.758 and Cohen?kappa coefficient ? of 0.517 for this set of terms (see Artstein and Poesio, 2008, for
definition of A
o
and ?).
In the second experiment, two postgrad students in the area of natural language processing were given a
list of 389 terms and asked to identify technology terms. The list of annotated terms were then compared
with the annotations in the dataset. The results are A
o
= 0.840 and ? = 0.655 for the first comparison
and A
o
= 0.775 and ? = 0.533 for the second comparison. These measures over the annotations
generated by the participants in the evaluation task are A
o
= 0.828 and ? = 0.627.
As a usage example of the constructed dataset, we use the annotations for the comparison of the top
n terms in the list of candidate terms that are weighted and sorted using Frantzi et al.?s (1998) c-value
and term frequency?inverse document frequency (tf -idf ). We hope other researchers in the domain are
intrigued by the numbers reported in Figure 7 and report the performance of other algorithms.
4 Conclusion and Future Work
The saying ?the shoemaker?s son goes barefoot? is perhaps true when it comes to the state of termino-
logical resources that characterize computational linguistics domain. We report a small action towards
18
http://catalog.elra.info/index.php; the annotated terms are also available from https://github.
com/languagerecipes/the-acl-rd-tec.
61
building a terminological resource from the ACL ARC, which can be used for the evaluation of compu-
tational terminology methods. There are currently three sets of candidate terms, which are augmented by
their frequency in various logical text segments in the corpus and are presented in tabulated inverse index
files. More than 82,000 of these terms are annotated manually as valid and invalid, in which valid terms
are further classified as technology and non-technology terms. The built resource can facilitate the eval-
uation of a number of methods in computational terminology. We invite other researchers to embellish
the dataset by adding their own lists of candidate terms and manual annotations.
During the annotation process we have identified several frequent concepts other than technology and
methods in the computational linguistics domain, e.g. grammar formalism, theories, measures, language
resources, tasks and applications. We hope to continue our effort by adding annotations for at least one
of these concepts. Adding a new concept class will allow us to evaluate term disambiguation methods.
The application of clustering techniques for identification of term variations amongst the annotated terms
and their manual annotation is another goal that can be achieved in the near future. These small steps,
collectively, can provide the shoemaker?s son with a fine pair of leather boots.
Acknowledgements
We thank the anonymous reviewers for their constructive comments, which helped us to improve the
paper. In addition, we thank Professor Marie-Claude L?Homme for her helpful advice. We also thank
Kartik Asooja, Georgeta Bordea, Sapna Negi and Bianca Pereira who participated in the inter-annotator
agreement experiment. This publication has emanated from research supported in part by a research
grant from Science Foundation Ireland (SFI) under Grant Number SFI/12/RC/2289.
References
2000. ISO 1087-1:2000 terminology ? vocabulary ? part 1: Theory and application.
Sophia Ananiadou. 1994. A methodology for automatic term recognition. In Proceedings of the 15th conference on Computa-
tional linguistics - Volume 2, COLING ?94, pages 1034?1038.
Ron Artstein and Massimo Poesio. 2008. Inter-coder agreement for computational linguistics. Comput. Linguist., 34(4).
Sophie Aubin and Thierry Hamon. 2006. Improving term extraction with terminological resources. In Advances in Natural
Language Processing, LNCS 4139, pages 380?387.
Michael Bada, Miriam Eckert, Donald Evans, Kristin Garcia, Krista Shipley, Dmitry Sitnikov, William Baumgartner, K Cohen,
Karin Verspoor, Judith Blake, and Lawrence Hunter. 2012. Concept annotation in the craft corpus. BMC Bioinformatics,
13(1):161.
Gabriel Bernier-Colborne and Patrick Drouin. 2014. Creating a test corpus for term extractors through term annotation. Termi-
nology, 20:1:5073.
Steven Bird, Robert Dale, Bonnie Dorr, Bryan Gibson, Mark Joseph, Min-Yen Kan, Dongwon Lee, Brett Powley, Dragomir
Radev, and Yee Fan Tan. 2008. The ACL anthology reference corpus: A reference dataset for bibliographic research in
computational linguistics. In LREC?08. Marrakech, Morocco.
Francesca Bonin, Felice Dell?Orletta, Simonetta Montemagni, and Giulia Venturi. 2010. A contrastive approach to multi-word
extraction from domain-specific corpora. In LREC?10. ELRA, Valletta, Malta.
Didier Bourigault. 1992. LEXTER: a natural language tool for terminology extraction. In COLING ?92. pages 977?981.
M. Teresa Cabr?e. 1999. TERMINOLOGY: THEORY, METHODS AND APPLICATIONS. John Benjamins.
M. Teresa Cabr?e. 2003. Theories of terminology their description, prescription and explanation. Terminology, 9:2:163?199.
M. Teresa Cabr?e. 2010. Handbook of translation studies, volume 1, chapter Terminology and translation, pages 356?365.
M. Teresa Cabr?e, Anne Condamines, and Fidelia Ibekwe-SanJuan. 2005. Introduction: Application-driven terminology engi-
neering. Terminology, 11:1?19(18).
?
Angela Campo. 2013. The reception of Eugen Wsters work and the development of terminology. Ph.D. thesis, Universit?e de
Montr?eal.
Beatrice Daille. 1995. Combined approach for terminology extraction: lexical statistics and linguistic filtering. Technical
report, UCREL, Lancaster University.
Patrick Drouin. 2003. Term extraction using non-technical corpora as a point of leverage. Terminology, 9(1):99?115.
Patrick Drouin. 2004. Detection of domain specific terminology using corpora comparison. In LREC?04.
Stefan Evert. 2004. The Statistics of Word Cooccurrences Word Pairs and Collocations. Ph.D. thesis, Institut f?ur maschinelle
Sprachverarbeitung, Universit?at Stuttgart.
62
Pamela Faber. 2012. A cognitive linguistics view of terminology and specialized language, volume 20, chapter Terminology
and Specialized Language, pages 13?33. Walter de Gruyter.
Helmut Felber. 1982. Computerized terminology in termnet: The role of terminological data banks. Term banks for tomorrows
world: Translating and the Computer, 4:8?20.
Maarten Franssen, Gert-Jan Lokhorst, and Ibo van de Poel. 2013. Philosophy of technology. In The Stanford Encyclopedia of
Philosophy. Winter 2013 edition.
KaterinaT. Frantzi, Sophia Ananiadou, and Junichi Tsujii. 1998. The c-value/nc-value method of automatic recognition for
multi-word terms. In Research and Advanced Technology for Digital Libraries, LNCS 1513, pages 585?604.
Ralph Grishman and Beth Sundheim. 1996. Message understanding conference-6: A brief history. In Proceedings of COLING
(Vol. 96)., pages 466?471.
Warren Harrison. 2006. Eating your own dog food. IEEE Software, 23(3):5?7.
Silvana Hartmann, Gy?orgy Szarvas, and Iryna Gurevych. 2012. Mining multiword terms from wikipedia. In Semi-Automatic
Ontology Development: Processes and Resources, pages 226?258. IGI Global, Hershey, PA, USA.
Ulrich Heid and Anita Gojun. 2012. Term candidate extraction for terminography and cat: and overview of ttc. In Proceedings
of the 15th Euralex International Congress. Oslo, Norway.
Andrew Hippisley, David Cheng, and Khurshid Ahmad. 2005. The head-modifier principle and multilingual term extraction.
Nat. Lang. Eng., 11(2):129?157.
Ashwin Ittoo, Laura Maruster, Hans Wortmann, and Gosse Bouma. 2010. Textractor: A framework for extracting relevant
domain concepts from irregular corporate textual datasets. In BIS, LNBIP 47, pages 71?82. Springer.
Christian Jacquemin and Evelyne Tzoukermann. 1999. NLP for term variant extraction: synergy between morphology, lexicon
and syntax. Natural language information retrieval, 7:25?74.
John S. Justeson and Slava M. Katz. 1995. Technical terminology: some linguistic properties and an algorithm for identification
in text. Nat. Lang. Eng., 1.1:9?27.
Kyo Kageura. 1999. On the study of dynamics of terminology: A proposal of a theoretical framework. Research Bulletin of the
NACSIS, 11:1?10.
Kyo Kageura and Bin Umino. 1996. Methods of automatic term recognition: A review. Terminology, 3.2 (1996):259?289.
J. . D. Kim, T. Ohta, Y. Tateisi, and J. Tsujii. 2003. Genia corpus?a semantically annotated corpus for bio-textmining.
Bioinformatics, 19(suppl 1):i180?i182.
Aleksandar Kovaevi, Zora Konjovi, Branko Milosavljevi, and Goran Nenadic. 2012. Mining methodologies from nlp publica-
tions: A case study in automatic terminology recognition. Computer Speech & Language, 26(2):105 ? 126.
Michael Krauthammer and Goran Nenadic. 2004. Term identification in the biomedical literature. J. of Biomedical Informatics,
37(6):512?526.
Marie-Claude L?Homme. 2014. Terminologies and taxonomies. Oxford Handbooks Online.
Minh-Thang Luong, Thuy Dung Nguyen, and Min-Yen Kan. 2010. Logical structure recovery in scholarly articles with rich
document features. IJDLS, 1(4):1?23.
Diana Maynard. 2000. Term recognition using combined knowledge sources. Ph.D. thesis, Manchester Metropolitan University.
Hiroshi Nakagawa. 2001. Automatic term recognition based on statistics of compound nouns. Terminology, 6.2:195?210.
Adeline Nazarenko and Ha??fa Zargayouna. 2009. Evaluating term extraction. In Proceedings of the International Conference
RANLP-2009, pages 299?304. Association for Computational Linguistics, Borovets, Bulgaria.
M?arcis Pinnis, Nikola Ljube?si?c, Dan S?tef?anescu, Inguna Skadin?a, Marko Tadi?c, and Tatiana Gornostay. 2012. Term extraction,
tagging, and mapping tools for under-resourced languages. In TKE 2012.
Alan L Porter and Scott W Cunningham. 2005. Tech mining. Competitive Intelligence Magazine, 8(1):30?36.
Delip Rao, Paul McNamee, and Mark Dredze. 2013. Entity linking: Finding extracted entities in a knowledge base. In Multi-
source, Multilingual Information Extraction and Summarization, Theory and Applications of Natural Language Processing.
Juan C. Sager. 1990. Practical Course in Terminology Processing, chapter Term Formation: theory and practice, pages 61?87.
John Benjamins Publishing Company.
Kristina Toutanova, Dan Klein, Christopher D. Manning, and Yoram Singer. 2003. Feature-rich part-of-speech tagging with a
cyclic dependency network. In NAACL ?03. pages 173?180.
Jorge Vivaldi and Horacio Rodr??guez. 2007. Evaluation of terms and term extraction systems: A practical approach. Terminol-
ogy. 13:225?248.
Eugen W?uster. 1974. Die allgemeine terminologielehre?ein grenzgebiet zwischen sprachwissenschaft, logik, ontologie, infor-
matik und den sachwissenschaften. Linguistics, 12(119):61?106.
Behrang Q. Zadeh and Siegfried Handschuh. 2014a. Evaluation of technology term recognition with random indexing.
LREC?14. ELRA, Reykjavik, Iceland.
Behrang Q. Zadeh and Siegfried Handschuh. 2014b. Investigating context parameters in technology term recognition. COLING
Workshop on Synchronic and Diachronic Approaches to Analyzing Technical Language (SADAATL).
Pierre Zweigenbaum and Natalia Grabar. 1999. Automatic acquisition of morphological knowledge for medical language
processing. In Artificial Intelligence in Medicine, LNCS 1620, pages 416?420.
63
