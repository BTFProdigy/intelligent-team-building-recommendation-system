Hunmorph: open source word analysis
Viktor Tro?n
IGK, U of Edinburgh
2 Buccleuch Place
EH8 9LW Edinburgh
v.tron@ed.ac.uk
Gyo?rgy Gyepesi
K-PRO Ltd.
H-2092 Budakeszi
Villa?m u. 6.
ggyepesi@kpro.hu
Pe?ter Hala?csy
Centre of Media Research and Education
Stoczek u. 2
H-1111 Budapest
hp@mokk.bme.hu
Andra?s Kornai
MetaCarta Inc.
350 Massachusetts Avenue
Cambridge MA 02139
andras@kornai.com
La?szlo? Ne?meth
CMRE
Stoczek u. 2
H-1111 Budapest
nemeth@mokk.bme.hu
Da?niel Varga
CMRE
Stoczek u. 2
H-1111 Budapest
daniel@mokk.bme.hu
Abstract
Common tasks involving orthographic
words include spellchecking, stemming,
morphological analysis, and morpho-
logical synthesis. To enable signifi-
cant reuse of the language-specific re-
sources across all such tasks, we have
extended the functionality of the open
source spellchecker MySpell, yield-
ing a generic word analysis library, the
runtime layer of the hunmorph toolkit.
We added an offline resource manage-
ment component, hunlex, which com-
plements the efficiency of our runtime
layer with a high-level description lan-
guage and a configurable precompiler.
0 Introduction
Word-level analysis and synthesis problems range
from strict recognition and approximate matching
to full morphological analysis and generation. Our
technology is predicated on the observation that
all of these problems are, when viewed algorith-
mically, very similar: the central problem is to
dynamically analyze complex structures derived
from some lexicon of base forms. Viewing word
analysis routines as a unified problem means shar-
ing the same codebase for a wider range of tasks, a
design goal carried out by finding the parameters
which optimize each of the analysis modes inde-
pendently of the language-specific resources.
The C/C++ runtime layer of our toolkit, called
hunmorph, was developed by extending the code-
base of MySpell, a reimplementation of the well-
known Ispell spellchecker. Our technology, like
the Ispell family of spellcheckers it descends
from, enforces a strict separation between the
language-specific resources (known as dictionary
and affix files), and the runtime environment,
which is independent of the target natural lan-
guage.
Figure 1: Architecture
Compiling accurate wide coverage machine-
readable dictionaries and coding the morphology
of a language can be an extremely labor-intensive
task, so the benefit expected from reusing the
language-specific input database across tasks can
hardly be overestimated. To facilitate this resource
sharing and to enable systematic task-dependent
optimizations from a central lexical knowledge
base, we designed and implemented a powerful of-
fline layer we call hunlex. Hunlex offers an easy
to use general framework for describing the lexi-
con and morphology of any language. Using this
description it can generate the language-specific
aff/dic resources, optimized for the task at hand.
The architecture of our toolkit is depicted in Fig-
ure 1. Our toolkit is released under a permissive
LGPL-style license and can be freely downloaded
from mokk.bme.hu/resources/hunmorph.
The rest of this paper is organized as follows.
Section 1 is about the runtime layer of our toolkit.
We discuss the algorithmic extensions and imple-
mentational enhancements in the C/C++ runtime
layer over MySpell, and also describe the newly
created Java port jmorph. Section 2 gives an
overview of the offline layer hunlex. In Section 3
we consider the free open source software alterna-
tives and offer our conclusions.
1 The runtime layer
Our development is a prime example of code
reuse, which gives open source software devel-
opment most of its power. Our codebase is a
direct descendant of MySpell, a thread-safe C++
spell-checking library by Kevin Hendricks, which
descends from Ispell Peterson (1980), which in
turn goes back to Ralph Gorin?s spell (1971),
making it probably the oldest piece of linguistic
software that is still in active use and development
(see fmg-www.cs.ucla.edu/fmg-members/
geoff/ispell.html).
The key operation supported by this codebase is
affix stripping. Affix rules are specified in a static
resource (the aff file) by a sequence of conditions,
an append string, and a strip string: for example,
in the rule forming the plural of body the strip
string would be y, and the affix string would be
ies. The rules are reverse applied to complex input
wordforms: after the append string is stripped and
the edge conditions are checked, a pseudo-stem is
hypothesized by appending the strip string to the
stem which is then looked up in the base dictio-
nary (which is the other static resource, called the
dic file).
Lexical entries (base forms) are all associated
with sets of affix flags, and affix flags in turn are
associated to sets of affix rules. If the hypothe-
sized base is found in the dictionary after the re-
verse application of an affix rule, the algorithm
checks whether its flags contain the one that the
affix rule is assigned to. This is a straight table-
driven approach, where affix flags can be inter-
preted directly as lexical features that license en-
tire subparts of morphological paradigms. To pick
applicable affix rules efficiently, MySpell uses a
fast indexing technique to check affixation condi-
tions.
In theory, affix-rules should only specify gen-
uine prefixes and suffixes to be stripped before lex-
ical lookup. But in practice, for languages with
rich morphology, the affix stripping mechanism is
(ab)used to strip complex clusters of affix morphs
in a single step. For instance, in Hungarian, due
to productive combinations of derivational and in-
flectional affixation, a single nominal base can
yield up to a million word forms. To treat all
these combinations as affix clusters, legacy ispell
resources for Hungarian required so many com-
bined affix rule entries that its resource file sizes
were not manageable.
To solve this problem we extended the affix
stripping technique to a multistep method: after
stripping an affix cluster in step i, the resulting
pseudo-stem can be stripped of affix clusters in
step i+ 1. Restrictions of rule application are
checked with the help of flags associated to affixes
analogously to lexical entries: this only required
a minor modification of the data structure coding
affix entries and a recursive call for affix stripping.
By cross-checking flags of prefixes on the suffix
(as opposed to the stem only), simultaneous pre-
fixation and suffixation can be made interdepen-
dent, extending the functionality to describe cir-
cumfixes like German participle ge+t, or Hungar-
ian superlative leg+bb, and in general provide the
correct handling of prefix-suffix dependencies like
English undrinkable (cf. *undrink), see Ne?meth
et al (2004) for more details.
Due to productive compounding in a lot of lan-
guages, proper handling of composite bases is a
feature indispensable for achieving wide coverage.
Ispell incorporates the possibility of specifying
lexical restrictions on compounding implemented
as switches in the base dictionary. However, the
algorithm allows any affixed form of the bases that
has the relevant switch to be a potential member
of a compound, which proves not to be restrictive
enough. We have improved on this by the intro-
duction of position-sensitive compounding. This
means that lexical features can specify whether
a base or affix can occur as leftmost, rightmost
or middle constituent in compounds and whether
they can only appear in compounds. Since these
features can also be specified on affixes, this pro-
vides a welcome solution to a number of resid-
ual problems hitherto problematic for open-source
spellcheckers. In some Germanic languages, ?fo-
gemorphemes?, morphemes which serve linking
compound constituents can now be handled easily
by allowing position specific compound licensing
on the foge-affixes. Another important example is
the German common noun: although it is capital-
ized in isolation, lowercase variants should be ac-
cepted when the noun is a compound constituent.
By handling lowercasing as a prefix with the com-
pound flag enabled, this phenomenon can be han-
dled in the resource file without resort to language
specific knowledge hard-wired in the code-base.
1.1 From spellchecking to morphological
analysis
We now turn to the extensions of the MySpell
algorithm that were required to equip hunmorph
with stemming and morphological analysis func-
tionality. The core engine was extended with an
optional output handling interface that can process
arbitrary string tags associated with the affix-rules
read from the resources. Once this is done, sim-
ply outputting the stem found at the stage of dic-
tionary lookup already yields a stemmer. In mul-
tistep affix stripping, registering output informa-
tion associated with the rules that apply renders
the system capable of morphological analysis or
other word annotation tasks. Thus the processing
of output tags becomes a mode-dependent param-
eter that can be:
? switched off (spell-checking)
? turned on only for tag lookup in the dictio-
nary (simple stemming)
? turned on fully to register tags with all rule-
applications (morphological analysis)
The single most important algorithmic aspect that
distinguishes the recognition task from analysis
is the handling of ambiguous structures. In the
original MySpell design, identical bases are con-
flated and once their switch-set licensing affixes
are merged, there is no way to tell them apart.
The correct handling of homonyms is crucial for
morphological analysis, since base ambiguities
can sometimes be resolved by the affixes. In-
terestingly, our improvement made it possible to
rule out homonymous bases with incorrect simul-
taneous prefixing and suffixing such as English
out+number+?s. Earlier these could be handled
only by lexical pregeneration of relevant forms or
duplication of affixes.
Most importantly, ambiguity arises in relation
to the number of analyses output by the system.
While with spell-checking the algorithm can ter-
minate after the first analysis found, performing
an exhaustive search for all alternative analyses is
a reasonable requirement in morphological analy-
sis mode as well as in some stemming tasks. Thus
the exploration of the search space also becomes
an active parameter in our enhanced implementa-
tion of the algorithm:
? search until the first correct analysis
? search restricted multiple analyses (e.g., dis-
abling compounds)
? search all alternative analyses
Search until the first analysis is a functionality for
recognizers used for spell-checking and stemming
for accelerated document indexing. Preemption
of potential compound analyses by existing lexi-
cal bases serves as a general way of filtering out
spurious ambiguities when a reduction is required
in the space of alternative analyses. In these cases,
frequent compounds which trick the analyzer can
be precompiled to the lexicon. Finally, there is a
possibility to give back a full set of possible anal-
yses. This output then can be passed to a tagger
that disambiguates among the candidate analyses.
Parameters can be used that guide the search (such
as ?do lexical lookup first at all stages? or ?strip the
shortest affix first?), which yield candidate rank-
ings without the use of numerical weights or statis-
tics. These rankings can be used as disambigua-
tion heuristics based on a general idea of blocking
(e.g., Times would block an analysis of time+s).
All further parametrization is managed offline by
the resource compiler layer, see Section 2.
1.2 Reimplementing the runtime layer
In our efforts to gear up the MySpell codebase
to a fully functional word analysis library we suc-
cessfully identified various resource-related, algo-
rithmic and implementational bottlenecks of the
affix-rule based technology. With these lessons
learned, a new project has been launched in or-
der to provide an even more flexible and efficient
open source runtime layer. A principled object-
oriented refactorization of the same basic algo-
rithm described above has already been imple-
mented in Java. This port, called jmorph also uses
the aff/dic resource formats.
In jmorph, various algorithmic options guiding
the search (shortest/longest matching affix) can
be controlled for each individual rule. The im-
plementation keeps track of affix and compound
matches checking conditions only once for a given
substring and caching partial results. As a conse-
quence, it ends up being measurably faster than
the C++ implementation with the same resources.
The main loop of jmorph is driven by config-
uring consumers, i.e., objects which monitor the
recursive step that is running. For example the
analysis of the form besze?desek ?talkative.PLUR?
begins by inspecting the global configuration of
the analysis: this initial consumer specifies how
many analyses, and what kind, need to be found.
In Step 1, the initial consumer finds the rule that
strips ek with stem besze?des, builds a consumer
that can apply this rule to the output of the analy-
sis returned by the next consumer, and launches
the next step with this consumer and stem. In
Step 2, this consumer finds the rule stripping es
with stem besze?d, which is found in the lexicon.
besze?d is not just a string, it is a complete lexi-
cal object which lists the rules that can apply to
it and all the homonyms. The consumer creates a
new analysis that reflects that besze?des is formed
from besze?d by suffixing es (a suffix object), and
passes this back to its parent consumer, which ver-
ifies whether the ek suffixation rule is applicable.
If not, the Step 1 consumer requests further anal-
yses from the Step 2 consumer. If, however, the
answer is positive, the Step 1 consumer returns its
analysis to the Step 0 (initial) consumer, which de-
cides whether further analyses are needed.
In terms of functionality, there are a number of
differences between the Java and the C++ variants.
jmorph records the full parse tree of rule appli-
cations. By offering various ways of serializing
this data structure, it allows for more structured
information in the outputs than would be possible
by simple concatenation of the tag chunks asso-
ciated with the rules. Class-based restrictions on
compounding is implemented and will eventually
supersede the overgeneralizing position-based re-
strictions that the C++ variant and our resources
currently use.
Two major additional features of jmorph are
its capability of morphological synthesis as well
as acting as a guesser (hypothesizing lemmas).
Synthesis is implemented by forward application
of affix rules starting with the base. Rules have
to be indexed by their tag chunks for the search,
so synthesis introduces the non-trivial problem of
chunking the input tag string. This is currently im-
plemented by plug-ins for individual tag systems,
however, this should ideally be precompiled off-
line since the space of possible tags is limited.
2 Resource development and offline
precompilation
Due to the backward compatibility of the runtime
layer with MySpell-style resources, our software
can be used as a spellchecker and simplistic stem-
mer for some 50 languages for which MySpell
resources are available, see lingucomponent.
openoffice.org/spell dic.html.
For languages with complex morphology, com-
piling and maintaining these resources is a painful
undertaking. Without using a unified framework
for morphological description and a principled
method of precompilation, resource developers for
highly agglutinative languages like Hungarian (see
magyarispell.sourceforge.net) have to re-
sort to a maze of scripts to maintain and precom-
pile aff and dic files. This problem is intolerably
magnified once morphological tags or additional
lexicographic information are to be entered in or-
der to provide resources for the analysis routines
of our runtime layer.
The offline layer of our toolkit seeks to remedy
this by offering a high-level description language
in which grammar developers can specify rule-
based morphologies and lexicons (somewhat in
the spirit of lexc Beesley and Karttunen (2003),
the frontend to Xerox?s Finite State Toolkit). This
promises rapid resource development which can
then be used in various tasks. Once primary re-
sources are created, hunlex, the offline precom-
piler can generate aff and dic resources op-
timized for the runtime layer based on various
compile-time configurations.
Figure 2 illustrates the description language
with a fragment of English morphology describ-
ing plural formation. Individual rules are sepa-
rated by commas. The syntax of the rule descrip-
tions organized around the notion of information
blocks. Blocks are introduced by keywords (like
IF:) and allow the encoding of various properties
of a rule (or a lexical entry), among others speci-
fying affixation (+es), substitution, character trun-
cation before affixation (CLIP: 1), regular ex-
pression matches (MATCH: [^o]o), positive and
negative lexical feature conditions on application
(IF: f-v_altern), feature inheritance, output
(continuation) references (OUT: PL_POSS), out-
put tags (TAG: "[PLUR]").
One can specify the rules that can be applied to
the output of a rule and also one can specify appli-
cation conditions on the input to the rule. These
two possibilities allow for many different styles
of morphological description: one based on in-
put feature constraints, one based on continuation
classes (paradigm indexes), and any combination
between these two extremes. On top of this, reg-
ular expression matches on the input can also be
used as conditions on rule application.
Affixation rules ?grouped together? here under
PLUR can be thought of as allomorphic rules of the
plural morpheme. Practically, this allows informa-
tion about the morpheme shared among variants
(e.g., morphological tag, recursion level, some
output information) to be abstracted in a pream-
ble which then serves as a default for the individ-
ual rules. Most importantly, the grouping of rules
PL
TAG: "[PLUR]"
OUT: PL_POSS
# house -> houses
, +s MATCH: [^shoxy] IF: regular
# kiss -> kisses
, +es MATCH: [^c]s IF: regular
# ...
# ethics
, + MATCH: cs IF: regular
# body -> bodies <C> is a regexp macro
, +ies MATCH: <C>y CLIP:1 IF: regular
# zloty -> zlotys
, +s MATCH: <C>y IF: y-ys
# macro -> macros
, +s MATCH: [^o]o IF: regular
# potato -> potatoes
, +es MATCH: [^o]o IF: o-oes
# wife -> wives
, +ves MATCH: fe CLIP: 2 IF: f-ves
# leaf -> leaves
, +ves MATCH: f CLIP: 1 IF: f-ves
;
Figure 2: hunlex grammar fragment
into morphemes serves to index those rules which
can be referenced in output conditions, For exam-
ple, in the above the plural morpheme specifies
that the plural possessive rules can be applied to
its output (OUT: PL_POSS). This design makes it
possible to handle some morphosyntactic dimen-
sions (part of speech) very cleanly separated from
the conditions regulating the choice of allomorphs,
since the latter can be taken care of by input fea-
ture checking and pattern matching conditions of
rules. The lexicon has the same syntax as the
grammar only that morphemes stand for lemmas
and variant rules within the morpheme correspond
to stem allomorphs.
Rules with zero affix morph can be used as
filters that decorate their inputs with features
based on their orthographic shape or other features
present. This architecture enables one to let only
exceptions specify certain features in the lexicon
while regular words left unspecified are assigned
a default feature by the filters (see PL_FILTER in
REGEXP: C [bcdfgklmnprstvwxyz];
DEFINE: N
OUT: SG PL_FILTER
TAG: NOUN
;
PL_FILTER
OUT:
PL
FILTER:
f-ves
y-ys
o-oes
regular
, DEFAULT:
regular
;
Figure 3: Macros and filters in hunlex
Figure 3) potentially conditioned the same way as
any rule application. Feature inheritance is fully
supported, that is, filters for particular dimensions
of features (such as the plural filter in Figure 3)
can be written as independent units. This design
makes it possible to engineer sophisticated filter
chains decorating lexical items with various fea-
tures relevant for their morphological behavior.
With this at hand, extending the lexicon with a reg-
ular lexeme just boils down to specifying its base
and part of speech. On the other hand, indepen-
dent sets of filter rules make feature assignments
transparent and maintainable.
In order to support concise and maintainable
grammars, the description language also allows
(potentially recursive) macros to abbreviate arbi-
trary sets of blocks or regular expressions, illus-
trated in Figure 3.
The resource compiler hunlex is a stand-
alone program written in OCaml which comes
with a command-line as well as a Makefile as
toplevel control interface. The internal workings
of hunlex are as follows.
As the morphological grammar is parsed by the
precompiler, rule objects are created. A block is
read and parsed into functions which each trans-
form the ?affix-rule? data-structure by enriching its
internal representation according to the semantic
content of the block. At the end of each unit,
the empty rule is passed to the composition of
block functions to result in a specific rule. Thanks
to OCaml?s flexibility of function abstraction and
composition, this design makes it easy to imple-
ment macros of arbitrary blocks directly as func-
tions. When the grammar is parsed, rules are ar-
ranged in a directed (possibly cyclic) graph with
edges representing possible rule applications as
given by the output specifications.
Precompilation proceeds by performing a re-
cursive closure on this graph starting from lexi-
cal nodes. Rules are indexed by ?levels? and con-
tiguous rule-nodes that are on the same level are
merged along the edges if constraints on rule ap-
plication (feature and match conditions, etc.) are
satisfied. These precompiled affix-clusters and
complex lexical items are to be placed in the aff
and dic file, respectively.
Instead of affix merging, closure between rules
a and b on different levels causes the affix clus-
ters in the closure of b to be registered as rules in
a hash and their indexes recorded on a. After the
entire lexicon is read, these index sets registered
on rules are considered. The affix cluster rules to
be output into the affix file are arranged into max-
imal subsets such that if two output affix cluster
rules a and b are in the same set, then every item
or affix to which a can be applied, b can also be
applied. These sets of affix clusters correspond to
partial paradigms which each full paradigm either
includes or is disjoint with. The resulting sets of
output rules are assigned to a flag and items ref-
erencing them will specify the appropriate com-
bination of flags in the output dic and aff file.
Since equivalent affix cluster rules are conflated,
the compiled resources are always optimal in the
following three ways.
First, the affix file is redundancy free: no two af-
fix rules have the same form. With hand-coded af-
fix files this can almost never be guaranteed since
one is always inclined to group affix rules by lin-
guistically motivated paradigms thereby possibly
duplicating entries. A redundancy-free set of affix
rules will enhance performance by minimizing the
search space for affixes. Note that conflation of
identical rules by the runtime layer is not possible
without reindexing the flags which would be very
computationally intensive if done at runtime.
Second, given the redundancy free affix-set,
maximizing homogeneous rulesets assigned to a
flag minimizes the number of flags used. Since the
internal representation of flags depends on their
number, this has the practical advantage of reduc-
ing memory requirements for the runtime layer.
Third, identity of output affix rules is calculated
relative to mode and configuration settings, there-
fore identical morphs with different morphologi-
cal tags will be conflated for recognizers (spell-
checking) where ambiguity is irrelevant, while for
analysis it can be kept apart. This is impossible
to achieve without a precompilation stage. Note
that finite state transducer-based systems perform
essentially the same type of optimizations, elimi-
nating symbol redundancy when two symbols be-
have the same in every rule, and eliminating state
redundancy when two states have the exact same
continuations.
Though the bulk of the knowledge used by
spellcheckers, by stemmers, and by morphologi-
cal analysis and generation tools is shared (how
affixes combine with stems, what words allow
compounding), the ideal resources for these var-
ious tasks differ to some extent. Spellcheck-
ers are meant to help one to conform to ortho-
graphic norms and therefore should be error sen-
sitive, stemmers and morphological analyzers are
expected to be more robust and error tolerant espe-
cially towards common violations of standard use.
Although this seems at first to justify the individ-
ual efforts one has to invest in tailoring one?s re-
sources to the task at hand, most of the resource
specifics are systematic, and therefore allow for
automatic fine-tuning from a central knowledge
base. Configuration within hunlex allows the
specification of various features, among others:
? selection of registers and degree of normativ-
ity based on usage qualifiers in the database
(allows for boosting robustness for analysis
or stick to normativity for synthesis and spell-
checking)
? flexible selection of output information:
choice of tagset for different encodings, sup-
port for sense indexes
? arbitrary selection of morphemes
? setting levels of morphemes (grouping of
morphs that are precompiled as a cluster to
be stripped with one rule application by the
runtime layer)
? fine-tuning which morphemes are stripped
during stemming
? arbitrary selection of morphophonological
features that are to be observed or ignored
(allows for enhancing robustness by e.g., tol-
erating non-standard regularizations)
The input description language allows for arbi-
trary attributes (ones encoding part of speech, ori-
gin, register, etc.) to be specified in the descrip-
tion. Since any set of attributes can be selected to
be compiled into the runtime resources, it takes
no more than precompiling the central database
with the appropriate configuration for the runtime
analyzer to be used as an arbitrary word annota-
tion tool, e.g., style annotator or part of speech
tagger. We also provide an implementation of a
feature-tree based tag language which we success-
fully used for the description of Hungarian mor-
phology.
If the resources are created for some filtering
task, say, extracting (possibly inflected) proper
nouns in a text, resource optimization described
above can save considerable amounts of time com-
pared to full analysis followed by post-processing.
While the relevant portion of the dictionary might
be easily filtered therefore speeding up lookup, tai-
loring a corresponding redundancy-free affix file
would be a hopeless enterprise without the pre-
compiler.
As we mentioned, our offline layer can be con-
figured to cluster any or no sets of affixes together
on various levels, and therefore resources can be
optimized for either memory use (affix by affix
stripping) or speed (generally toward one level
stripping). This is a major advantage given po-
tential applications as diverse as spellchecking on
the word processor of an old 386 at one end, and
industrial scale stemming on terabytes of web con-
tent for IR at the other.
In sum, our offline layer allows for the princi-
pled maintenance of a central resource, saving the
redundant effort that would otherwise have to be
invested in encoding very similar knowledge in a
task-specific manner for each word level analysis
task.
3 Conclusion
The importance of word level analysis can hardly
be questioned: spellcheckers reach the extremely
wide audience of all word processor users, stem-
mers are used in a variety of areas ranging from
information retrieval to statistical machine transla-
tion, and for non-isolating languages morpholog-
ical analysis is the initial phase of every natural
language processing pipeline.
Over the past decades, two closely intertwined
methods emerged to handle word analysis tasks,
affix stripping and finite state transducers (FSTs).
Since both technologies can provide industrial
strength solutions for most tasks, when it comes
to choice of actual software and its practical use,
the differences that have the greatest impact are
not lodged in the algorithmic core. Rather, two
other factors play a role: the ease with which one
can integrate the software into applications and the
infrastructure offered to translate the knowledge of
the grammarian to efficient and maintainable com-
putational blocks.
To be sure, in an end-to-end machine learning
paradigm, the mundane differences between how
the systems interact with the human grammari-
ans would not matter. But as long as the gram-
mars are written and maintained by humans, an of-
fline framework providing a high-level language to
specify morphologies and supporting configurable
precompilation that allows for resource sharing
across word-analysis tasks addresses a major bot-
tleneck in resource creation and management.
The Xerox Finite State Toolkit provides com-
prehensive high-level support for morphology
and lexicon development (Beesley and Karttunen,
2003). These descriptions are compiled into mini-
mal deterministic FST-s, which give excellent run-
time performance and can also be extended to
error-tolerant analysis for spellchecking Oflazer
(1996). Nonetheless, XFST is not free software,
and as long as the work is not driven by aca-
demic curiosity alone, the LGPL-style license of
our toolkit, explicitly permitting reuse for com-
mercial purposes as well, can already decide the
choice.
There are other free open source ana-
lyzer technologies, either stand-alone an-
alyzers such as the Stuttgart Finite State
Toolkit (SFST, available only under the
GPL, see www.ims.uni-stuttgart.de/
projekte/gramotron/SOFTWARE/SFST.html,
Smid et al (2004)) or as part of a power-
ful integrated NLP platform such as In-
tex/NooJ (freely available for academic re-
search to individuals affiliated with a university
only, see intex.univ-fcomte.fr; a clone
called Unitex is available under LGPL, see
www-igm.univ-mlv.fr/~unitex.) Unfortu-
nately, NooJ has its limitations when it comes
to implementing complex morphologies (Vajda
et al, 2004) and SFST provides no high-level
offline component for grammar description and
configurable resource creation.
We believe that the liberal license policy and the
powerful offline layer contributed equally to the
huge interest that our project generated, in spite
of its relative novelty. MySpell was not just our
choice: it is also the spell-checking library incor-
porated into OpenOffice.org, a free open-source
office suite with an ever wider circle of users. The
Hungarian build of OpenOffice is already running
our C++ runtime library, but OpenOffice is now
considering to completely replace MySpell with
our code. This would open up the possibility of
introducing morphological analysis capabilities in
the program, which in turn could serve as the first
step towards enhanced grammar checking and hy-
phenation.
Though in-depth grammars and lexica are avail-
able for nearly as many languages in FST-
based frameworks (InXight Corporation?s Lin-
guistX platform supports 31 languages), very lit-
tle of this material is available for grammar hack-
ing or open source dictionary development. In ad-
dition to permissive license and easy to integrate
infrastructure, the fact that the hunmorph routines
are backward compatible with already existing and
freely available spellchecking resources for some
50 languages goes a long way toward explaining
its rapid spread.
For Hungarian, hunlex already serves as the
development framework for the MORPHDB project
which merges three independently developed lex-
ical databases by critically unifying their contents
and supplying it with a comprehensive morpho-
logical grammar. It also provided a framework
for our English morphology project that used the
XTAG morphological database for English (see
ftp.cis.upenn.edu/pub/xtag/morph-1.5,
Karp et al (1992)). A project describing the
morphology of the Bea?s dialect of Romani with
hunlex is also under way.
The hunlex resource precompiler is not archi-
tecturally bound to the aff/dic format used by
our toolkit, and we are investigating the possibility
of generating FST resources with it. This would
decouple the offline layer of our toolkit from the
details of the runtime technology, and would be an
important step towards a unified open source so-
lution for method-independent resource develop-
ment for word analysis software.
Acknowledgements
The development of hunmorph and hunlex is fi-
nancially supported by the Hungarian Ministry
of Informatics and Telecommunications and by
MATA?V Telecom Co., and is led by the Centre
for Media Research and Education at the Budapest
University of Technology. We would like to thank
the anonymous reviewers of the ACL Software
Workshop for their valuable comments on this pa-
per.
Availability
Due to the confligting needs of Unix, Windows,
and MacOs users, the packaging/build environ-
ment for our software has not yet been final-
ized. However, a version of our tools, and
some of the major language resources that have
been created using these tools, are available at
mokk.bme.hu/resouces.
References
Kenneth R. Beesley and Lauri Karttunen. 2003.
Finite State Morphology. CSLI Publications.
Daniel Karp, Yves Schabes, Martin Zaidel, and
Dania Egedi. 1992. A freely available wide cov-
erage morphological analyzer for english. In
Proceedings of the 14th International Confer-
ence on Computational Linguistics (COLING-
92) Nantes, France.
La?szlo? Ne?meth, Viktor Tro?n, Pe?ter Hala?csy,
Andra?s Kornai, Andra?s Rung, and Istva?n Sza-
kada?t. 2004. Leveraging the open-source is-
pell codebase for minority language analysis.
In Proceedings of SALTMIL 2004. European
Language Resources Association. URL http:
//www.lrec-conf.org/lrec2004.
Kemal Oflazer. 1996. Error-tolerant finite-state
recognition with applications to morphological
analysis and spelling correction. Computational
Linguistics, 22(1):73?89.
James Lyle Peterson. 1980. Computer programs
for spelling correction: an experiment in pro-
gram design, volume 96 of Lecture Notes in
Computer Science. Springer.
Helmut Smid, Arne Fitschen, and Ulrich Heid.
2004. SMOR: A German computational mor-
phology covering derivation, composition, and
inflection. In Proceedings of the IVth Interna-
tional Conference on Language Resources and
Evaluation (LREC 2004), pages 1263?1266.
Pe?ter Vajda, Viktor Nagy, and Em??lia Dancsecs.
2004. A Ragoza?si szo?ta?rto?l a NooJ morfolo?giai
modulja?ig [from a morphological dictionary to
a morphological module for NooJ]. In 2nd Hun-
garian Computational Linguistics Conference,
pages 183?190.
Web-based frequency dictionaries for medium density languages
Andra?s Kornai
MetaCarta Inc.
350 Massachusetts Avenue
Cambridge MA 02139
andras@kornai.com
Pe?ter Hala?csy
Media Research and Education Center
Stoczek u. 2
H-1111 Budapest
halacsy@mokk.bme.hu
Viktor Nagy
Institute of Linguistics
Benczu?r u 33
H-1399 Budapest
nagyv@nytud.hu
Csaba Oravecz
Institute of Linguistics
Benczu?r u 33
H-1399 Budapest
oravecz@nytud.hu
Viktor Tro?n
U of Edinburgh
2 Buccleuch Place
EH8 9LW Edinburgh
v.tron@ed.ac.uk
Da?niel Varga
Media Research and Education Center
Stoczek u. 2
H-1111 Budapest
daniel@mokk.bme.hu
Abstract
Frequency dictionaries play an important
role both in psycholinguistic experiment
design and in language technology. The
paper describes a new, freely available,
web-based frequency dictionary of Hun-
garian that is being used for both purposes,
and the language-independent techniques
used for creating it.
0 Introduction
In theoretical linguistics introspective grammati-
cality judgments are often seen as having method-
ological primacy over conclusions based on what
is empirically found in corpora. No doubt the
main reason for this is that linguistics often studies
phenomena that are not well exemplified in data.
For example, in the entire corpus of written En-
glish there seems to be only one attested example,
not coming from semantics papers, of Bach-Peters
sentences, yet the grammaticality (and the pre-
ferred reading) of these constructions seems be-
yond reproach. But from the point of view of the
theoretician who claims that quantifier meanings
can be computed by repeat substitution, even this
one example is one too many, since no such theory
can account for the clearly relevant (though barely
attested) facts.
In this paper we argue that ordinary corpus
size has grown to the point that in some areas
of theoretical linguistics, in particular for is-
sues of inflectional morphology, the dichotomy
between introspective judgments and empirical
observations need no longer be maintained: in
this area at least, it is now nearly possible to
make the leap from zero observed frequency to
zero theoretical probability i.e. ungrammaticality.
In many other areas, most notably syntax, this
is still untrue, and here we argue that facts of
derivational morphology are not yet entirely
within the reach of empirical methods. Both
for inflectional and derivational morphology
we base our conclusions on recent work with
a gigaword web-based corpus of Hungarian
(Hala?csy et al2004) which goes some way
towards fulfilling the goals of the WaCky project
(http://wacky.sslmit.unibo.it, see
also Lu?deling et al2005) inasmuch as the infras-
tructure used in creating it is applicable to other
medium-density languages as well. Section 1
describes the creation of the WFDH Web-based
Frequency Dictionary of Hungarian from the raw
corpus. The critical disambiguation step required
for lemmatization is discussed in Section 2,
and the theoretical implications are presented in
Section 3. The rest of this Introduction is devoted
to some terminological clarification and the
presentation of the elementary probabilistic model
used for psycholinguistic experiment design.
0.1 The range of data
Here we will distinguish three kinds of corpora:
small-, medium-, and large-range, based on the in-
ternal coherence of the component parts. A small-
range corpus is one that is stylistically homoge-
neous, generally the work of a single author. The
largest corpora that we could consider small-range
are thus the oeuvres of the most prolific writers,
rarely above 1m, and never above 10m words. A
medium-range corpus is one that remains within
the confines of a few text types, even if the au-
thorship of individual documents can be discerned
e.g. by detailed study of word usage. The LDC
gigaword corpora, composed almost entirely of
news (journalistic prose), are from this perspec-
1
tive medium range. Finally, a large-range corpus
is one that displays a variety of text types, gen-
res, and styles that approximates that of overall
language usage ? the Brown corpus at 1m words
has considerably larger range than e.g. the Reuters
corpus at 100m words.
The fact that psycholinguistic experiments need
to control for word frequency has been known at
least since Thorndike (1941) and frequency ef-
fects also play a key role in grammaticization (By-
bee, 2003). Since the principal source of variabil-
ity in word (n-gram) frequencies is the choice of
topic, we can subsume overall considerations of
genre under the selection of topics, especially as
the former typically dictates the latter ? for ex-
ample, we rarely see literary prose or poetry deal-
ing with undersea sedimentation rates. We assume
a fixed inventory of topics T1, T2, . . . , Tk, with
k on the order 104, similar in granularity to the
Northern Light topic hierarchy (Kornai et al2003)
and reserve T0 to topicless texts or ?General Lan-
guage?. Assuming that these topics appear in the
language with frequency q1, q2, . . . , qk, summing
to 1 ? q0 ? 1, the ?average? topic is expected to
have frequency about 1/k (and clearly, q0 is on the
same order, as it is very hard to find entirely topi-
cless texts).
As is well known, the salience of different
nouns and noun phrases appearing in the same
structural position is greatly impacted not just by
frequency (generally, less frequent words are more
memorable) but also by stylistic value. For ex-
ample, taboo words are more salient than neutral
words of the same overall frequency. But style is
also closely associated with topic, and if we match
frequency profiles across topics we are therefore
controlling for genre and style as well. Present-
ing psycholinguistical experiments is beyond the
scope of this paper: here we put the emphasis on
creating the computational resource, the frequency
dictionary, that allows for detail matching of fre-
quency profiles.
Defining the range r of a corpus C simply
as
?
j qj where the sum is taken over all topics
touched by documents in C, single-author cor-
pora typically have r < 0.1 even for encyclope-
dic writers, and web corpora have r > 0.9. Note
that r just measures the range, it does not mea-
sure how representative a corpus is for some lan-
guage community. Here we discuss results con-
cerning all three ranges. For small range, we use
the Hungarian translation of Orwell?s 1984 ? 98k
words including punctuation tokens, (Dimitrova et
al., 1998). For mid-range, we consider four topi-
cally segregated subcorpora of the Hungarian side
of our Hungarian-English parallel corpus ? 34m
words, (Varga et al, 2005). For large-range we
use our webcorpus ? 700m words, (Hala?csy et al,
2004).
1 Collecting and presenting the data
Hungarian lags behind ?high density? languages
like English and German but is hugely ahead of
minority languages that have no significant ma-
chine readable material. Varga et al(2005) es-
timated there to be about 500 languages that fit
in the same ?medium density? category, together
accounting for over 55% of the world?s speakers.
Halacsy et al(2004) described how a set of open
source tools can be exploited to rapidly clean the
results of web crawls to yield high quality mono-
lingual corpora: the main steps are summarized
below.
Raw data, preprocessing The raw dataset
comes from crawling the top-level domain, e.g.
.hu, .cz, .hr, .pl etc. Pages that con-
tain no usable text are filtered out, and all text is
converted to a uniform character encoding. Iden-
tical texts are dropped by checksum compari-
son of page bodies (a method that can handle
near-identical pages, usually automatically gener-
ated, which differ only in their headers, datelines,
menus, etc.)
Stratification A spellchecker is used to stratify
pages by recognition error rates. For each page we
measure the proportion of unrecognized (either in-
correctly spelled or out of the vocabulary of the
spellchecker) words. To filter out non-Hungarian
(non-Czech, non-Croatian, non-Polish, etc.) docu-
ments, the threshold is set at 40%. If we lower the
threshold to 8%, we also filter out flat native texts
that employ Latin (7-bit) characters to denote their
accented (8 bit) variants (these are still quite com-
mon due to the ubiquity of US keyboards). Finally,
below the 4% threshold, webpages typically con-
tain fewer typos than average printed documents,
making the results comparable to older frequency
counts based on traditional (printed) materials.
Lemmatization To turn a given stratum of the
corpus into a frequency dictionary, one needs to
collect the wordforms into lemmas based on the
2
same stem: we follow the usual lexicographic
practice of treating inflected, but not derived,
forms of a stem as belonging to the same lemma.
Inflectional stems are computed by a morphologi-
cal analyzer (MA), the choice between alternative
morphological analyses is resolved using the out-
put of a POS tagger (see Section 2 below). When
there are several analyses that match the output of
the tagger, we choose one with the least number of
identified morphemes. For now, words outside the
vocabulary of the MA are not lemmatized at all ?
this decision will be revisited once the planned ex-
tension of the MA to a morphological guesser is
complete.
Topic classification Kornai et al(2003) pre-
sented a fully automated system for the classifica-
tion of webpages according to topic. Combining
this method with the methods described above en-
ables the automatic creation of topic-specific fre-
quency dictionaries and further, the creation of a
per-topic frequency distribution for each lemma.
This enables much finer control of word selection
in psycholinguistic experiments than was hitherto
possible.
1.1 How to present the data?
For Hungarian, the highest quality (4% thresh-
old) stratum of the corpus contains 1.22m unique
pages for a total of 699m tokens, already exceed-
ing the 500m predicted in (Kilgarriff and Grefen-
stette, 2003). Since the web has grown consid-
erably since the crawl (which took place in 2003),
their estimate was clearly on the conservative side.
Of the 699m tokens some 4.95m were outside the
vocabulary of the MA (7% OOV in this mode,
but less than 3% if numerals are excluded and the
analysis of compounds is turned on). The remain-
ing 649.7m tokens fall in 195k lemmas with an
average 54 form types per lemma. If all stems are
considered, the ratio is considerably lower, 33.6,
but the average entropy of the inflectional distri-
butions goes down only from 1.70 to 1.58 bits.
As far as the summary frequency list (which is
less than a megabyte compressed) is concerned,
this can be published trivially. Clearly, the avail-
ability of large-range gigaword corpora is in the
best interest of all workers in language technology,
and equally clearly, only open (freely download-
able) materials allow for replicability of experi-
ments. While it is possible to exploit search engine
queries for various NLP tasks (Lapata and Keller,
2004), for applications which use corpora as unsu-
pervised training material downloadable base data
is essential.
Therefore, a compiled webcorpus should con-
tain actual texts. We believe all ?cover your be-
hind? efforts such as publishing only URLs to be
fundamentally misguided. First, URLs age very
rapidly: in any given year more than 10% be-
come stale (Cho and Garcia-Molina, 2000), which
makes any experiment conducted on such a ba-
sis effectively irreproducible. Second, by present-
ing a quality-filtered and characterset-normalized
corpus the collectors actually perform a service to
those who are less interested in such mundane is-
sues. If everybody has to start their work from the
ground up, many projects will exhaust their fund-
ing resources and allotted time before anything in-
teresting could be done with the data. In contrast,
the Free and Open Source Software (FOSS) model
actively encourages researchers to reuse data.
In this regard, it is worth mentioning that dur-
ing the crawls we always respected robots.txt
and in the two years since the publication of the gi-
gaword Hungarian web corpus, there has not been
a single request by copyright holders to remove
material. We do not advocate piracy: to the con-
trary, it is our intended policy to comply with re-
moval requests from copyright holders, analogous
to Google cache removal requests. Finally, even
with copyright material, there are easy methods
for preserving interesting linguistic data (say un-
igram and bigram models) without violating the
interests of businesses involved in selling the run-
ning texts. 1
2 The disambiguation of morphological
analyses
In any morphologically complex language, the
MA component will often return more than one
possible analysis. In order to create a lemma-
tized frequency dictionary it is necessary to de-
cide which MA alternative is the correct one, and
in the vast majority of cases the context provides
sufficient information for this. This morphologi-
cal disambiguation task is closely related to, but
not identical with, part of speech (POS) tagging,
a term we reserve here for finding the major parts
1This year, we are publishing smaller pilot corpora for
Czech (10m words), Croatian (4m words), and Polish (12m
words), and we feel confident in predicting that these will
face as little actual opposition from copyright holders as the
Hungarian Webcorpus has.
3
of speech (N, V, A, etc). A full tag contains both
POS information and morphological annotation:
in highly inflecting languages the latter can lead
to tagsets of high cardinality (Tufis? et al, 2000).
Hungarian is particularly challenging in this re-
gard, both because the number of ambiguous to-
kens is high (reaching 50% in the Szeged Cor-
pus according to (Csendes et al, 2004) who use
a different MA), and because the ratio of tokens
that are not seen during training (unseen) can be
as much as four times higher than in comparable
size English corpora. But if larger training corpora
are available, significant disambiguation is possi-
ble: with a 1 m word training corpus (Csendes et
al., 2004) the TnT (Brants, 2000) architecture can
achieve 97.42% overall precision.
The ratio of ambiguous tokens is usually cal-
culated based on alternatives offered by a mor-
phological lexicon (either built during the training
process or furnished by an external application;
see below). If the lexicon offers alternative anal-
yses, the token is taken as ambiguous irrespective
of the probability of the alternatives. If an exter-
nal resource is used in the form of a morphological
analyzer (MA), this will almost always overgener-
ate, yielding false ambiguity. But even if the MA
is tight, a considerable proportion of ambiguous
tokens will come from legitimate but rare analyses
of frequent types (Church, 1988). For example the
word nem, can mean both ?not? and ?gender?, so
both ADV and NOUN are valid analyses, but the ad-
verbial reading is about five orders of magnitude
more frequent than the noun reading, (12596 vs. 4
tokens in the 1 m word manually annotated Szeged
Korpusz (Csendes et al, 2004)).
Thus the difficulty of the task is better mea-
sured by the average information required for dis-
ambiguating a token. If word w is assigned
the label Ti with probability P (Ti|w) (estimated
as C(Ti, w)/C(w) from a labeled corpus) then
the label entropy for a word can be calculated
as H(w) = ?
?
i P (Ti|w) logP (Ti|w), and the
difficulty of the labeling task as a whole is the
weighted average of these entropies with respect
to the frequencies of words w:
?
w P (w)H(w).
As we shall see in Section 3, according to this
measure the disambiguation task is not as difficult
as generally assumed.
A more persistent problem is that the ratio of
unseen items has very significant influence on the
performance of the disambiguation system. The
problem is more significant with smaller corpora:
in general, if the training corpus has N tokens and
the test corpus is a constant fraction of this, say
N/10, we expect the proportion of new words to
be cN q?1, where q is the reciprocal of the Zipf
constant (Kornai, 1999). But if the test/train ra-
tio is not kept constant because the training corpus
is limited (manual tagging is expensive), the num-
ber of tokens that are not seen during training can
grow very large. Using the 1.2 m words of Szeged
Corpus for training, in the 699 m word webcor-
pus over 4% of the non-numeric tokens will be un-
seen. Given that TnT performs rather dismally on
unseen items (Oravecz and Dienes, 2002) it was
clear from the outset that for lemmatizing the we-
bcorpus we needed something more elaborate.
The standard solution to constrain the prob-
abilistic tagging model for some of the unseen
items is the application of MA (Hakkani-Tu?r et al,
2000; Hajic? et al, 2001; Smith et al, 2005). Here
a distinction must be made between those items
that are not found in the training corpus (these we
have called unseen tokens) and those that are not
known to the MA ? we call these out of vocabulary
(OOV). As we shall see shortly, the key to the best
tagging architecture we found was to follow dif-
ferent strategies in the lemmatization and morpho-
logical disambiguation of OOV and known (in-
vocabulary) tokens.
The first step in tagging is the annotation of
inflectional features, with lemmatization being
postponed to later processing as in (Erjavec and
Dz?eroski, 2004). This differs from the method of
(Hakkani-Tu?r et al, 2000), where all syntactically
relevant features (including the stem or lemma) of
word forms are determined in one pass. In our ex-
perience, the choice of stem depends so heavily
on the type of linguistic information that later pro-
cessing will need that it cannot be resolved in full
generality at the morphosyntactic level.
Our first model (MA-ME) is based on disam-
biguating the MA output in the maximum entropy
(ME) framework (Ratnaparkhi, 1996). In addi-
tion to the MA output, we use ME features coding
the surface form of the preceding/following word,
capitalization information, and different charac-
ter length suffix strings of the current word. The
MA used is the open-source hunmorph ana-
lyzer (Tro?n et al, 2005) with the morphdb.hu
Hungarian morphological resource, the ME is the
OpenNLP package (Baldridge et al, 2001). The
4
MA-ME model achieves 97.72% correct POS tag-
ging and morphological analysis on the test corpus
(not used in training).
Maximum entropy or other discriminative
Markov models (McCallum et al, 2000) suffer
from the label bias problem (Lafferty et al, 2001),
while generative models (most notably HMMs)
need strict independence assumptions to make the
task of sequential data labeling tractable. Con-
sequently, long distance dependencies and non-
independent features cannot be handled. To cope
with these problems we designed a hybrid archi-
tecture, in which a trigramHMM is combined with
the MA in such a way that for tokens known to the
MA only the set of possible analyses are allowed
as states in the HMM whereas for OOVs all states
are possible. Lexical probabilities P (wi|ti) for
seen words are estimated from the training corpus,
while for unseen tokens they are provided by the
the above MA-ME model. This yields a trigram
HMM where emission probabilities are estimated
by a weighted MA, hence the model is called
WMA-T3. This improves the score to 97.93%.
Finally, it is possible to define another archi-
tecture, somewhat similar to Maximum Entropy
Markov Models, (McCallum et al, 2000), using
the above components. Here states are also the
set of analyses the MA allows for known tokens
and all analyses for OOVs, while emission prob-
abilities are estimated by the MA-ME model. In
the first pass TnT is run with default settings over
the data sequence, and in the second pass the ME
receives as features the TnT label of the preced-
ing/following token as well as the one to be ana-
lyzed. This combined system (TnT-MA-ME) in-
corporates the benefits of all the submodules and
reaches an accuracy of 98.17% on the Szeged Cor-
pus. The results are summarized in Table 1.
model accuracy
TnT 97.42
MA+ME 97.72
WMA+T3 97.93
TnT+MA+ME 98.17
Table 1: accuracy of morphological
disambiguation
We do not consider these results to be final:
clearly, further enhancements are possible e.g. by
a Viterbi search on alternative sentence taggings
using the T3 trigram tag model or by handling
OOVs on a par with known unseen words using
the guesser function of our MA. But, as we dis-
cuss in more detail in Halacsy et al2005, we are
already ahead of the results published elsewhere,
especially as these tend to rely on idealized MA
systems that have their morphological resources
extended so as to have no OOV on the test set.
3 Conclusions
Once the disambiguation of morphological anal-
yses is under control, lemmatization itself is a
mechanical task which we perform in a database
framework. This has the advantage that it sup-
ports a rich set of query primitives, so that we
can easily find e.g. nouns with back vowels that
show stem vowel elision and have approximately
the same frequency as the stem orvos ?doctor?.
Such a database has obvious applications both in
psycholinguistic experiments (which was one of
the design goals) and in settling questions of the-
oretical morphology. But there are always nag-
ging doubts about the closed world assumption be-
hind databases, famously exposed in linguistics by
Chomsky?s example colorless green ideas sleep
furiously: how do we distinguish this from *green
sleep colorless furiously ideas if the observed fre-
quency is zero for both?
Clearly, a naive empirical model that assigns
zero probability to each unseen word form makes
the wrong predictions. Better estimates can be
achieved if unseen words which are known to be
possible morphologically complex forms of seen
lemmas are assigned positive probability. This can
be done if the probability of a complex form is in
some way predictable from the probabilities of its
component parts. A simple variant of this model
is the positional independence hypothesis which
takes the probabilities of morphemes in separate
positional classes to be independent of each other.
Here we follow Antal (1961) and Kornai (1992) in
establishing three positional classes in the inflec-
tional paradigm of Hungarian nouns.
# Position 1 parameters
FAM 0.0001038986
PLUR 0.1372398793
PLUR_POSS 0.0210927964
PLUR_POSS<1> 0.0011609442
PLUR_POSS<1><PLUR> 0.0028751247
PLUR_POSS<2> 0.0004958278
PLUR_POSS<2><PLUR> 0.0000740203
PLUR_POSS<PLUR> 0.0023850120
POSS 0.1461635946
5
POSS<1> 0.0073305415
POSS<1><PLUR> 0.0073652648
POSS<1>_FAM 0.0000092294
POSS<2> 0.0027628071
POSS<2><PLUR> 0.0003006440
POSS<2>_FAM 0.0000030591
POSS<PLUR> 0.0069613929
POSS_FAM 0.0000000001
ZERO1 0.6636759634
# Position 2 parameters
ANP 0.0007780001
ANP<PLUR> 0.0000248301
ZERO2 0.9991971698
# Position 3 parameters
CAS<ABL> 0.0078638013
CAS<ACC> 0.1346412632
CAS<ADE> 0.0045132704
CAS<ALL> 0.0138677701
CAS<CAU> 0.0037332025
CAS<DAT> 0.0301123636
CAS<DEL> 0.0128222999
CAS<ELA> 0.0118596792
CAS<ESS> 0.0010230505
CAS<FOR> 0.0031204983
CAS<ILL> 0.0154186683
CAS<INE> 0.0582887516
CAS<INS> 0.0406197868
CAS<SBL> 0.0386519707
CAS<SUE> 0.0357416253
CAS<TEM> 0.0013095685
CAS<TER> 0.0034032438
CAS<TRA> 0.0017860054
ZERO3 0.5812231804
Table 3: marginal probabilities in noun inflection
The innermost class is used for number and pos-
sessive, with a total of 18 choices including the
zero morpheme (no possessor and singular). The
second positional class is for anaphoric posses-
sives with a total of three choices including the
zero morpheme, and the third (outermost) class
is for case endings with a total of 19 choices
including the zero morpheme (nominative) for a
total of 1026 paradigmatic forms. The parame-
ters were obtained by downhill simplex minimiza-
tion of absolute errors. The average absolute er-
ror is of the values computed by the independece
hypothesis from the observed values is 0.000099
(mean squared error is 9.18 ? 10?7), including the
209 paradigmatic slots for which no forms were
found in the webcorpus at all (but the indepen-
dence model will assign positive probability to any
of them as the product of the component probabil-
ities). When checking the independence hypoth-
esis with ? statistics in the webcorpus for every
nominal inflectional morpheme pair the members
of which are from different dimensions, the ? co-
efficient remained less than 0.1 for each pair but
3. For these 3 the coefficient is under 0.2 (which
means that the shared variance of these pairs is be-
tween 1% and 2%) so we have no reason to discard
the independence hypothesis. If we run the same
test on the 150 million words Hungarian National
Corpus, which was analyzed and tagged by differ-
ent tools, we also get the same result (Nagy, 2005).
It is very easy to construct low probability com-
binations using this model. Taking a less frequent
possessive ending such as the 2nd singular poses-
sor familiar plural -ode?k, the anaphoric plural -e?i,
and a rarer case ending such as the formalis -ke?nt
we obtain combinations such as bara?tode?ke?ike?nt
?as the objects owned by your friends? company?.
The model predicts we need a corpus with about
4.2 ? 1012 noun tokens to see this suffix combina-
tion (not necessarily with the stem bara?t ?friend?)
or about ten trillion tokens. While the current cor-
pus falls short by four orders of magnitude, this
is about the contribution of the anaphoric plural
(which we expect to see only once in about 40k
noun tokens) so for any two of the three position
classes combined the prediction that valid inflec-
tional combinations will actually be attested is al-
ready testable.
Using the fitted distribution of the position
classes, the entropy of the nominal paradigm is
computed simply as the sum of the class entropies,
1.554 + 0.0096 + 2.325 or 3.888 bits. Since the
nominal paradigm is considerably more complex
than the verbal paradigm (which has a total of
52 forms) or the infinitival paradigm (7 forms),
this value can serve as an upper bound on the in-
flectional entropy of Hungarian. In Table 3 we
present the actual values, computed on a variety
of frequency dictionaries. The smallest of these
is based on a single text, the Hungarian transla-
tion of Orwell?s 1984. The mid-range corpora
used in this comparison are segregated in broad
topics: law (EU laws and regulations), literature,
movie subtitles, and software manuals: all were
collected from the web as part of building a bilin-
gual English-Hungarian corpus. Finally, the large-
range is the full webcorpus at the best (4% reject)
quality stratum.
6
1984 law literature subtitles software webcorpus
token 98292 2310742 7971157 2667420 839339 69926550
type 20343 110040 431615 188131 81729 2083023
OOV token 3141 266368 335660 181292 140551 4951743
OOV type 1132 39467 87574 50078 45799 994890
lemma 10644 60602 165259 85491 58939 1189471
lemma excl. OOV 9513 21136 77686 35414 13141 194589
lemma entropy 1.14282 1.04118 1.54922 1.41374 1.14516 1.57708
lemma entropy excl. OOV 1.18071 1.17687 1.61753 1.51718 1.37559 1.69743
Table 3: inflectional entropy of Hungarian computed on a variety of frequency dictionaries
Our overall conclusion is that for many pur-
poses a web-based corpus has significant advan-
tages over more traditional corpora. First, it is
cheap to collect. Second, it is sufficiently hetero-
geneous to ensure that language models based on
it generalize better on new texts of arbitrary topics
than models built on (balanced) manual corpora.
As we have shown, automatically tagged and lem-
matized webcorpora can be used to obtain large
coverage stem and wordform frequency dictionar-
ies. While there is a significant portion of OOV
entries (about 3% for our current MA), in the de-
sign of psycholinguistic experiments it is gener-
ally sufficient to consider stems already known to
the MA, and the variety of these (over three times
the stem lexicon of the standard Hungarian fre-
quency dictionary) enables many controlled exper-
iments hitherto impossible.
References
La?szlo? Antal. 1961. A magyar esetrendszer. Nyelvtu-
doma?nyi E?rtekeze?sek, 29.
Jason Baldridge, Thomas Morton, and Gann Bierner.
2001. The opennlp maximum entropy package.
http://maxent.sourceforge.net.
Thorsten Brants. 2000. TnT ? a statistical part-of-
speech tagger. In Proceedings of the Sixth Applied
Natural Language Processing Conference (ANLP-
2000), Seattle, WA.
Joan Bybee. 2003. Mechanisms of change in gram-
maticization: the role of frequency. In Brian Joseph
and Richard Janda, editors, Handbook of Historical
Linguistics, pages 602?623. Blackwell.
Junghoo Cho and Hector Garcia-Molina. 2000. The
evolution of the web and implications for an incre-
mental crawler. In VLDB ?00: Proceedings of the
26th International Conference on Very Large Data
Bases, pages 200?209, San Francisco, CA, USA.
Morgan Kaufmann Publishers Inc.
Kenneth Ward Church. 1988. A stochastic parts pro-
gram and noun phrase parser for unrestricted text.
In Proceedings of the second conference on Applied
natural language processing, pages 136?143, Mor-
ristown, NJ, USA. Association for Computational
Linguistics.
Do?ra Csendes, Ja?no?s Csirik, and Tibor Gyimo?thy.
2004. The Szeged Corpus: A POS tagged and syn-
tactically annotated Hungarian natural language cor-
pus. In Karel Pala Petr Sojka, Ivan Kopecek, editor,
Text, Speech and Dialogue: 7th International Con-
ference, TSD, pages 41?47.
Ludmila Dimitrova, Tomaz Erjavec, Nancy Ide,
Heiki Jaan Kaalep, Vladimir Petkevic, and Dan
Tufis?. 1998. Multext-east: Parallel and comparable
corpora and lexicons for six central and eastern euro-
pean languages. In Christian Boitet and Pete White-
lock, editors, Proceedings of the Thirty-Sixth Annual
Meeting of the Association for Computational Lin-
guistics and Seventeenth International Conference
on Computational Linguistics, pages 315?319, San
Francisco, California. Morgan Kaufmann Publish-
ers.
Tomaz? Erjavec and Sas?o Dz?eroski. 2004. Machine
learning of morphosyntactic structure: Lemmatizing
unknown Slovene words. Applied Artificial Intelli-
gence, 18(1):17?41.
Jan Hajic?, Pavel Krbec, Karel Oliva, Pavel Kve?ton?,
and Vladim??r Petkevic?. 2001. Serial combination
of rules and statistics: A case study in Czech tag-
ging. In Proceedings of the 39th Association of
Computational Linguistics Conference, pages 260?
267, Toulouse, France.
Dilek Z. Hakkani-Tu?r, Kemal Oflazer, and Go?khan
Tu?r. 2000. Statistical morphological disambigua-
tion for agglutinative languages. In Proceedings of
the 18th conference on Computational linguistics,
pages 285?291, Morristown, NJ, USA. Association
for Computational Linguistics.
Pe?ter Hala?csy, Andra?s Kornai, La?szlo? Ne?meth, Andra?s
Rung, Istva?n Szakada?t, and Viktor Tro?n. 2004. Cre-
ating open language resources for Hungarian. In
Proceedings of Language Resources and Evalua-
tion Conference (LREC04). European Language Re-
sources Association.
7
Pe?ter Hala?csy, Andra?s Kornai, and Da?niel Varga.
2005. Morfolo?giai egye?rtelmu?s??te?s maximum
entro?pia mo?dszerrel (morphological disambiguation
with the maxent method). In Proc. 3rd Hungar-
ian Computational Linguistics Conf. Szegedi Tu-
doma?nyegyetem.
Adam Kilgarriff and Gregory Grefenstette. 2003. In-
troduction to the special issue on the web as corpus.
Computational Linguistics, 29(3):333?348.
Andra?s Kornai, Marc Krellenstein, Michael Mulligan,
David Twomey, Fruzsina Veress, and Alec Wysoker.
2003. Classifying the hungarian web. In A. Copes-
take and J. Hajic, editors, Proc. EACL, pages 203?
210.
Andra?s Kornai. 1992. Frequency in morphology. In
I. Kenesei, editor, Approaches to Hungarian, vol-
ume IV, pages 246?268.
Andra?s Kornai. 1999. Zipf?s law outside the middle
range. In J. Rogers, editor, Proc. Sixth Meeting on
Mathematics of Language, pages 347?356. Univer-
sity of Central Florida.
John Lafferty, Andrew McCallum, and Fernando
Pereira. 2001. Conditional random fields: Prob-
abilistic models for segmenting and labeling se-
quence data. In Proceedings of the 18th Interna-
tional Conference on Machine Learning, pages 282?
289. Morgan Kaufmann, San Francisco, CA.
Mirella Lapata and Frank Keller. 2004. The web
as a baseline: Evaluating the performance of un-
supervised web-based models for a range of NLP
tasks. In Daniel Marcu Susan Dumais and Salim
Roukos, editors, HLT-NAACL 2004: Main Proceed-
ings, pages 121?128, Boston, Massachusetts, USA,
May 2 - May 7. Association for Computational Lin-
guistics.
Anke Luedeling, Stefan Evert, and Marco Baroni.
2005. Using web data for linguistic purposes. In
Marianne Hundt, Caroline Biewer, and Nadjia Nes-
selhauf, editors, Corpus linguistics and the Web.
Rodopi.
Andrew McCallum, Dayne Freitag, and Fernando
Pereira. 2000. Maximum entropy Markov mod-
els for information extraction and segmentation. In
Proceedings of the 17th International Conference on
Machine Learning, pages 591?598. Morgan Kauf-
mann, San Francisco, CA.
Viktor Nagy. 2005. A magyar fo?ne?vi inflexio?
statisztikai modellje (statistical model of nominal
inflection in hungarian. In Proc. Kodola?nyi-ELTE
Conf.
Csaba Oravecz and Pe?ter Dienes. 2002. Effi-
cient stochastic part-of-speech tagging for Hungar-
ian. In Proceedings of the Third International
Conference on Language Resources and Evaluation
(LREC2002), pages 710?717.
Adwait Ratnaparkhi. 1996. A maximum entropy
model for part-of-speech tagging. In Karel Pala
Petr Sojka, Ivan Kopecek, editor, Proceedings of
the Conference on Empirical Methods in Natural
Language Processing, pages 133?142, University of
Pennsylvania.
Noah A. Smith, David A. Smith, and Roy W. Tromble.
2005. Context-based morphological disambiguation
with random fields. In Proceedings of the Confer-
ence on Human Language Technology and Empiri-
cal Methods in Natural Language Processing, Van-
couver.
Edward L. Thorndike. 1941. The Teaching of English
Suffixes. Teachers College, Columbia University.
Viktor Tro?n, Gyo?rgy Gyepesi, Pe?ter Hala?csy, Andra?s
Kornai, La?szlo? Ne?meth, and Da?niel Varga. 2005.
Hunmorph: open source word analysis. In Proceed-
ing of the ACL 2005 Workshop on Software.
Dan Tufis?, Pe?ter Dienes, Csaba Oravecz, and Tama?s
Va?radi. 2000. Principled hidden tagset design for
tiered tagging of Hungarian. In Proceedings of the
Second International Conference on Language Re-
sources and Evaluation.
Da?niel Varga, La?szlo? Ne?meth, Pe?ter Hala?csy, Andra?s
Kornai, Viktor Tro?n, and Viktor Nagy. 2005. Paral-
lel corpora for medium density languages. In Pro-
ceedings of the Recent Advances in Natural Lan-
guage Processing 2005 Conference, pages 590?596,
Borovets. Bulgaria.
8
