Incremental Processing and Acceptability 
Glyn  Morri l l* 
Universitat Polit~cnica de Catalunya 
We describe a left-to-right incremental procedure for the processing of Lambek categorial grammar 
by proof net construction. A simple metric of complexity, the profile in time of the number 
of unresolved valencies, correctly predicts a wide variety of performance phenomena including 
garden pathing, the unacceptability of center embedding, preference for lower attachment, left- 
to-right quantifier scope preference, and heavy noun phrase shift. 
1. Introduction 
Contemporary linguistics rests on abstractions and idealizations which, however fruit- 
ful, should eventually be integrated with human computational performance in lan- 
guage use. In this paper we consider the case of language processing on the basis of 
Lambek categorial grammar (Lambek 1958). We argue that an incremental procedure of 
proof net construction affords an account of various processing phenomena, including 
garden pathing, the unacceptability of center embedding, preference for lower attach- 
ment, left-to-right quantifier scope preference, and heavy noun phrase shift. We give 
examples of each of these phenomena below. 
Garden pathing (Bever 1970) is illustrated by the following contrasts: 
(1) a. The horse raced past the barn. 
b. ?The horse raced past the barn fell. 
(2) a. The boat floated down the river. 
b. ?The boat floated down the river sank. 
(3) a. The dog that knew the cat disappeared. 
b. ?The dog that knew the cat disappeared was rescued. 
Typically, although the b sentences are perfectly well formed they are perceived as 
being ungrammatical due to a strong tendency to interpret heir initial segments as in 
the a sentences. 
The unacceptability of centre embedding is illustrated by the fact that while the 
nested subject relativizations of (4) exhibit little variation in acceptability, the nested 
* Departament deLlenguatges i Sistemes Informatics, Modul C 5 - Campus Nord, Jordi Girona Salgado 
1-3, E-08034 Barcelona. E-maih morrill@lsi.upc.es; http://www-lsi.upc.es/~morrill/ 
(~) 2000 Association for Computational Linguistics 
Computational Linguistics Volume 26, Number 3 
object relativizations (5) exhibit a severe deterioration i acceptability (Chomsky 1965, 
Chap. 1). 
(4) a. The dog that chased the cat barked. 
b. The dog that chased the cat that saw the rat barked. 
c. The dog that chased the cat that saw the rat that ate the cheese barked. 
(5) a. The cheese that the rat ate stank. 
b. ?The cheese that the rat that the cat saw ate stank. 
c. ??The cheese that the rat that the cat that the dog chased saw ate 
stank. 
Discussing such center embedding, Johnson (1998) presents the essential idea devel- 
oped here, noting that processing overload of dependencies invoked in psycholin- 
guistic literature could be rendered in terms of the maximal number of unresolved 
dependencies a represented by proof nets. 
Kimball (1973, 27) considers sentences uch as (6), which are three ways am- 
biguous according to the attachment of the adverb. He points out that the lower the 
attachment of the adverb, the higher the preference (he calls this relationship Right 
Association). 
(6) Joe said that Martha believed that Ingrid fell today. 
Left-to-right quantifier scope preference is illustrated by: 
(7) a. Someone loves everyone. 
b. Everyone is loved by someone. 
Both sentences exhibit both quantifier scopings: 
(8) a. ~xVy(love y x) 
b. Vy3x(love y x) 
However, while the dominant reading of (7a) is (8a), that of (7b) is (8b), i.e., the 
preference is for the first quantifier to have wider scope. Note that the same effect is 
observed when the quantifiers are swapped: 
(9) a. Everyone loves someone. 
b. Someone is loved by everyone. 
While both sentences in (9) have both quantifier scopings, the preferred readings give 
the first quantifier wide scope. 
Finally, we will look at heavy noun phrase shift, which is the preference for com- 
plex object noun phrases to "shift" to the end of the sentence. Consider the two sen- 
tences in (10); the second, in which the "heavy" direct object follows the indirect object, 
is more acceptable than the first. 
320 
Morrill Incremental Processing and Acceptability 
(10) a. ?John gave the painting that Mary hated to Bill. 
b. John gave Bill the painting that Mary hated. 
We argue that a simple metric of categorial processing complexity explains these 
and other performance phenomena. 
2. Lambek Calculus 
We shall assume some familiarity with Lambek categorial grammar as presented in, for 
example, Moortgat (1988, 1997), Morrill (1994), or Carpenter (1998), and limit ourselves 
here to reviewing some central technical and computational spects. 
The types, or (category) formulas, of Lambek calculus are freely generated from 
a set of primitives by the binary infix connectives " /"  (over), "V' (under) (directional 
divisions) and "-" (product). With respect o a semigroup algebra (L, +) (i.e., a set 
L closed under an associative binary operation + of adjunction), each formula A is 
interpreted as a subset \[A\] of L by residuation as follows: 
(11) ~\[a.B\]\] ~- ($1q-82\]$1 E ~a\ ]  & s 2 E ~B~} 
~AkB\]\] = {sirs' C \[\[AB, s'+s E HB\]\]} 
~B/A\] -- (sirs' E \[\[A~,s+s' E ~B\]I} 
A sequent, F ~ A, comprises a succedent formula A and an antecedent configuration 
F, which is a a finite sequence of formulas. 1 A sequent is valid if and only if in all inter- 
pretations the ordered adjunction of elements inhabiting the antecedent formulas al- 
ways yields an element inhabiting the succedent formula. The following Gentzen-style 
sequent presentation is sound and complete for this interpretation (Buszkowski 1986, 
Dogen 1992), and indeed for free semigroups (Pentus 1994): hence the Lambek calculus 
can make an impressive claim to be the logic of concatenation; a parenthetical notation 
A(F) represents a configuration containing a distinguished subconfiguration F. 
F~A A(A)~B 
Cut (12) a. A ~ A id " A(F).::~ B 
F ~ A A(B) ~ C \L  A ,F  ~ B \R  
b. A(F ,A \B)  =~ C F ::~ AkB 
F ~ A A(B) ~ C F ,A=~B /R  
c. &(B/A,F)  ~ C /L r ~ B/A 
F ,A ,B ,A  ~ C F ~ A A =~ B 
? L .R d. F,A.B,A ~ C F,A =~ A.B 
By way of example, "lifting" A ~ B/(A\B) is generated as follows: 
(13) 
A =~ A B=~ B \ L 
A ,A \B  ~ B 
A ~ B/(A\B) /R 
1 Officially, the antecedent is nonempty, a detail we gloss over. 
321 
Computational Linguistics Volume 26, Number 3 
And "composition" A\B, B\C ~ A\C can be derived thus: 
(14) BoB C ~ C \L 
A ~ A B, B\C ~ C 
A,A\B, B\C ~ C 
A\B,B\C ~ A\C \R 
Every rule, with the exception of Cut, where the Cut formula A does not appear 
in the conclusion, has exactly one connective occurrence less in its premisses than in 
its conclusion. Lambek (1958) proved Cut elimination--that every proof has a Cut- 
free counterpart--hence a decision procedure for theoremhood is given by backward- 
chaining proof search in the Cut-free fragment. The nonatomic instances of the id 
axiom are derivable from atomic instances by the rules for the connectives. But even 
in the Cut-free atomic-id calculus there is spurious ambiguity: equivalent derivations 
differing only in irrelevant rule ordering. For example, composition as above has the 
following alternative derivation: 
(15) A=~A B~B \L 
A,A\B ~ B C ~ C 
A,A\B, B\C =~ C 
A\B,B\C =~ A\C \R 
\C 
One approach to this problem consists in defining, within the Cut-free atomic-id 
space, normal form derivations in which the succession of rule application is regulated 
(K6nig 1989, Hepple 1990, Hendriks 1993). Each sequent has a distinguished category 
formula (underlined) on which rule applications are keyed: 
(16) a. P ~ P id 
a(A) ~ B 
A(.a) ~ B_ 
r~4 a (B)~c  \L A ,F~B \R 
b. a(F,A\B) ~ C r ~ A\B 
r~A &(~)~C r ,A~B 
c. A(B/A,F) ~ C /L F ~ B/~ /R 
A~A F~B 
- -  .R  d. A ,F~A.B  
In the regulated calculus there is no spurious ambiguity, and provided there is 
no explicit or implicit antecedent product, i.e., provided .L is not needed, F ~ A is 
a theorem of the Lambek calculus iff F ~ A is a theorem of the regulated calculus. 
However, apart from the issue regarding .L, there is a general cause for dissatisfaction 
with this approach: it assumes the initial presence of the entire sequent o be proved, 
i.e., it is in principle nonincremental; on the other hand, allowing incrementality on 
the basis of Cut would reinstate with a vengeance the problem of spurious ambigu- 
ity, for then what are to be the Cut formulas? Consequently, the sequent approach is 
ill-equipped to address the basic asymmetry of language--the asymmetry of its pro- 
cessing in time---and has never been forwarded in a model of the kind of processing 
phenomena cited in the introduction. 
322 
Morrill Incremental Processing and Acceptability 
An alternative formulation (Ades and Steedman 1982, Steedman 1997), which 
from its inception has emphasized a capacity to produce left-branching, and there- 
fore incrementally processable, analyses, is comprised of combinatory schemata such 
as the following (together with a Cut rule, feeding one rule application into an- 
other): 
(17) a. A ,A \B  => B B /A ,A  =~ B 
b. A ~ (B/A) \B A ~ B/ (A\B)  
c. A \B ,B \C  ~ A \C  C /B ,B /A  =~ C/A 
By a result of Zielonka (1981), the Lambek calculus is not axiomatizable by any fi- 
nite set of combinatory schemata, so no such combinatory presentation can constitute 
the logic of concatenation in the sense of Lambek calculus. Combinatory categorial 
grammar does not concern itself with the capture of all (or only) the concatenatively 
valid combinatory schemata, but rather with incrementality, for example, on a shift- 
reduce design. An approach (also based on regulation of the succession of rule ap- 
plication) to the associated problem of spurious ambiguity is given in Hepple and 
Morrill (1989) but again, to our knowledge, there is no predictive relation between 
incremental combinatory processing and the kind of processing phenomena cited in 
the introduction. 
3. Proof Nets 
Lambek categorial derivations are often presented in the style of natural deduction 
or sequent calculus. Here we are concerned with categorial proof nets (Roorda 1991) 
as the fundamental structures of proof in categorial logic, in the same sense that lin- 
ear proof nets were originally introduced by Girard (1987) as the fundamental struc- 
tures of proof in linear logic. (Cut-free) proof nets exhibit no spurious ambiguity and 
play the role in categorial grammar that parse trees play in phrase structure gram- 
mar. 
Surveys and articles on the topic include Lamarche and Retor? (1996), de Groote 
and Retor? (1996), and Morrill (1999). Still, at the risk of proceeding at a slightly slower 
pace, we aim nonetheless to include here enough details to make the present paper 
self-contained. 
A polar category formula is a Lambek categorial type labeled with input (?) or 
output (o) polarity. A polar category formula tree is a binary ordered tree in which 
the leaves are labeled with polar atoms (literals) and each local tree is one of the 
following (logical) links: 
A ? B" .. B ? A" . 
- -  U - -  1 (18) a. A\B  ? A \B  ? 
B ? A o .. A ? B o . 
b. B /A .  11 B/AO 1 
A ? B" . B ? A ? .. 
c. A.B ? 1 A-B ? 11 
Without polarities, a formula tree is a kind of formation tree of the formula at its root: 
323 
Computational Linguistics Volume 26, Number 3 
daughters are labeled with the immediate subformulas of their mothers. The polar- 
ities indicate sequent sidedness, input for antecedent and output for succedent; the 
polarity propagation follows the sidedness of subformulas in the sequent rules: in the 
antecedent (input) rule for A\B  the subformula A goes in a succedent (output) and the 
subformula B goes in an antecedent (input); in the succedent (output) rule for A\B  the 
subformula A goes in an antecedent (input) and the subformula B goes in a succedent 
(output); etc. The labels i and ii indicate whether the corresponding sequent rule is 
unary or binary. Note that in the output links the order of the subformulas i switched; 
this corresponds to a cyclic reading of sequents: the succedent type is adjacent o the 
first antecedent type. 
A proof frame is a finite sequence of polar category formula trees, exactly one 
of which has a root of output polarity (corresponding to the unique succedent of 
sequents). 
An axiom linking on a set of literal labeled leaves is a partitioning of the set 
into pairs of complementary leaves that is planar in its ordering, i.e., there are no 
two pairs {L1,LB},{La, L4} such that L1 < L2 < L3 < L4. Geometrically, planarity 
means that where the leaves are ordered on a line, paired leaves can be connected in 
the half plane without crossing. Axiom links correspond to id instances in a sequent 
proof. 
A proof structure is a proof frame together with an axiom linking on its leaves. A 
proof net is a proof structure in which every elementary (i.e., visiting vertices at most 
once) cycle crosses the edges of some i-link. 2 Geometrically, an elementary cycle is the 
perimeter of a face or cluster of faces in a planar proof structure. There is a proof net 
with roots A? ,A I " , . . .  ,An" iff A1 , . . . ,A ,  ~ A is a valid sequent. 
4. Incremental Processing Load and Acceptability 
Let us assume the following lexical assignments: 
(19) 
barn - barn 
:= CN 
horse - horse 
:= CN 
past - )~x)~y)~z(past x (y z)) 
:= ( (N \St ) \ (N \St ) ) /N  
raced - race 
:= N\S+ 
the - the 
:= N/CN 
The feature + on S marks the projection of a tensed verb form; a verb phrase modif ied 
by past need not be tensed. Let us consider the incremental processing of (la) as proof 
2 This criterion, adapted from that of Lecomte and Retor6 (1995), derives from Girard's (1987) long trip 
condition, which is an involved mathematical result. Danos and Regnier (1989) express it in terms of 
acydicity and connectivity ofcertain subgraphs. Intuitively, acyclicity assures that the subformulas of
ii-links (binary rules) occur in different subproofs, whereas connectivity assures that the subformulas of
i-links (unary rules) occur in the same subproofs (attributed to Jean Gallier by Philippe de Groote, p.c.). 
However the single-succedent (i uitionistic) nature of Cut-free categorial proofs in fact renders the 
connectivity requirement redundant, hence we have just an acyclicity test. 
324 
Morrill Incremental Processing and Acceptability 
net construction. 3 In the first case, we suppose that one initially expects ome target 
category, perhaps (though not necessarily) S. This 'principle of expectation' seems a 
reasonable or obvious principle of communication; as we shall see, it turns out to 
be technically critical. After perception of the word the there is the following partial 
proof net (for simplicity we omit features, included in lexical entries, from proof nets 
themselves): 
(20) 
N" i i  GN ? \ /  
S ? N/GN" 
the  
Here there are three unmatched valencies/unresolved dependencies; no axiom links 
can yet be placed, but after horse we can build: 
(21) 
S* 
I I 
I I 
N" i i  GN ? I \ /  : 
N/GN ? CN" 
the horse 
Now there are only two unmatched valencies. After raced we have, on the correct 
analysis, the following: 
(22) 
I I 
t I 
N* i i  CN* I N ? i i  S" \ /  : \ /  
S ? N/CN" CN" N\S" 
the  horse  raced  
Note that linking the Ns is possible, but we are interested in the history of 
the correct analysis, and in that, the verb valencies are matched by the adverb that 
3 The procedure is similar in spirit to that in the appendix of Ades and Steedman (1982), but we perform 
"reductions" by axiom links on complementary literal pairs rather than by combinatory schemata on 
category formulas. 
325 
Computational Linguistics Volume 26, Number 3 
follows (henceforth we indicate only the principal connective of a mother node): 
(23) 
S ? 
I I 
I I 
N" ii CN*  I N ? i i  S ? \ /  ', \ /  
/ CN" \ 
I 
I 
I I 
I I 
S ? i N"  
\ /  
\ 
I 
I 
I 
I 
I 
N ? i i  S ? 
\ /  
i i  \ 
! 
N* 
the  horse  raced  past  
Observe that a cycle is created, but as required it crosses the edges of an i-link. At the 
penultimate step we have: 
(24) 
S ? 
I 
I 
I I 
I I 
S ? i N ? \ /  
\ \ 
_m 
I t I I 
I \[ I I 
N ? i i  CN ? I N ? ii S" N ? N"  ii CN ? 
\ /  ', \ /  \ /  
I CN" \ I 
I 
I 
I 
I 
I 
N* ii S" \ /  
i i  \ 
the  horse  raced  past  the  
The final proof net analysis is given in Figure 1. 
The semantics associated with a categorial proof net, i.e., the proof as a lambda 
term (intuitionistic natural deduction proof, under the Curry-Howard correspondence) 
is extracted by associating a distinct index with each output division node and travel- 
ing as follows, starting by going up at the unique output root (de Groote and Retor6 
1996): 
(25) ? traveling up at the mother of an output division link, perform 
the lambda abstraction with respect to the associated index of 
the result of traveling up at the daughter of output polarity; 
traveling up at the mother of an output product link, form the 
ordered pair of the result of traveling up at the right daughter 
(first component) and the left daughter (second component); 
326 
Morrill Incremental Processing and Acceptability 
I I 
I I 
N" ii CN ? I \ /  , 
I 
S ? / CN" 
I 
I 
I I I 
J 
I I I I I 
I I S? i N* N ? ii S* 
, , \ /  \ /  
\] \[ \ i i  \ 
I I 
N ? ii S ? \ ii 
\ / 
I I I I 
I I I I 
N ? N" ii CN" t \ /  , 
I 
/ CN" 
the  horse  raced  past  the  barn 
Figure 1 
Proof net analysis of (la) the horse raced past the barn. 
traveling up at one end of an axiom link, continue down at the 
other end; 
traveling down at an (input) daughter of an input division link, 
perform the functional application of the result of traveling 
down at the mother to the result of traveling up at the other 
(output) daughter; 
traveling down at the left (respectively, right) daughter of an 
input product link, take the first (respectively, second) projection 
of the result of traveling down at the mother; 
traveling down at the (input) daughter of an output division 
link, return the associated index; 
traveling down at a root, return the associated lexical semantics. 
Thus for our example we obtain (26a), which is logically equivalent to (26b). 
(26) a. (&x&y&z(past x (y z)) (the barn) M(race 1) (the horse)) 
b. (past (the barn) (race (the horse))) 
The analysis of (lb) is less straightforward. Whereas in (la) raced expresses a one- 
place predication ("go quickly"), in (lb) it expresses a two-place predication (there 
was some agent racing the horse); horse is modified by an agentless passive participle, 
but the adverbial past the barn is modifying race. Within the confines of the Lambek 
calculus, the characterization we offer assumes the lexical assignment to the passive 
participle given in the following: 4
4 In general, grammar requires the expressivity of more powerful categorial logics than just Larnbek 
calculus; however, so far as we are aware, the characterizations we offer within the Lambek calculus 
bear the same properties with regard to our processing considerations a their more sophisticated 
categorial logic refinements, because the latter are principally concerned with generalizations of word 
order, whereas the semantic dependencies on which our complexity metric depends remain the same. 
327 
Computational Linguistics Volume 26, Number 3 
I . . . . . . . . .  I I I I - -  . . . . . .  I 
SIo I I I I - - - - - -  1 N . . . .  
I I I I \[ I I I I 
' I , ~ / I I , S I. SIo / .  
C N ? C N ? \ N"  I N ? 
\ /  \ /  ', \ /  \ /  
\ g o \ \ 
\/ \ 
/ \ \ 
I 
I 
I 
I 
N* CN ? 
\ /  
/ 
I I 
1 I 
I I I 
I I \[ I 
S ? CN"  
I t 
, I 
i SI? 
N ? 
\ /  
, , 
N ? N ? 
/ 
I I 
I I 
C 'N?  I \ /  , 
/ CN ? 
N ? S ? 
\ /  
\ 
the  horse raced 
Figure 2 
Proof net analysis of (lb) the horse raced past the barn fell. 
p~t  the  barn  fe l l  
(27) fell - fall 
:= N\S+ 
raced - (Ax)~yAz\[(y z) A ~w(x z w)\],race2) 
:= ((CN\CN) / (N\(N\S-))) . (N\(N\S-))  
Here raced is classified as the product of an untensed transitive verbal type, which can 
be modified by the adverbial past the barn by composition, and an adnominalizer of 
this transitive verbal type. According to this, (lb) has the proof net analysis given in 
Figure 2. The semantics extracted is (28a), equivalent to (28b) 
(28) a. (fall (the (Tra(&xAy&z\[(y z) A 3w(x z w)\], race2) )~29~30 
()~uAv)~w(past u (v w)) (the barn) MI(( 
(Tr2(/~p/~s&t\[(s t) A 3q(p t q)\], race2) 29 41) 30) horse))) 
b. (fall (the)~8\[(horse 8) A 37(past (the barn) (race2 8 7))\])) 
Let us assign to each proof net analysis a complexity profile that indicates, before 
and after each word, the number of unmatched literals, i.e., unresolved valencies or 
dependencies, under process at that point. This is a measure of the course of memory 
load in optimal incremental processing. We are not concerned here with resolution of 
lexical ambiguity or serial backtracking: we are supposing sufficient resources that the 
nondeterminism of selection of lexical entries and their parallel consideration is not 
the critical burden. Rather, the question is: which among parallel competing analyses 
places the least load on memory? 
Since entropy degrades the structure of memory, it requires more energy to pursue 
an analysis that is high cost in memory than to pursue one that is low cost. From these 
simple economic onsiderations we derive our main claim: 
(29) Principle of Acceptability 
Acceptability is inversely proportional to the sum in time of the memory 
load of unresolved valencies. 
If other factors are constant, the principle makes a quantitative prediction. We can 
distinguish two cases: synonymy and ambiguity. In the case of synonymy, semantics i
constant. It is then predicted that amongst synonymous forms of expression, the lower 
328 
Morrill Incremental Processing and Acceptabil ity 
~'\S ~? ~? \ /  
. . . . . . .  i i . . . . . . .  I . . . . . . . .  i t . . . . . . . .  i 
i J i t i 
', I ', 1 1 Ii '~ I slo i , , 
cN~ ? . . . . .  ? . . . . . .  'N~ ~'N" 7"  N~ / "  -- / \ / \ / i--', / \ I--i :- ,, ~o N" c'x o \ \ \ x ? N" ~'~? \ \ \ 
~ /  \ /  \ /  ~ /  \ /  \ /  r <:.x, / I i <N ? / i i C'N* 
Figure 3 
Proof net analysis of (4b) the dog that chased the cat that saw the rat barked. 
the complexity curve, the higher the preference for the form of expression. In the case 
of ambiguity, prosodics is constant. It is then predicted that amongst the readings of an 
ambiguous expression, the lower the complexity curve, the more dominant the reading. 
The complexity profile is easily read off a completed proof net: the complexity 
between two words is the number of axiom links bridging rightwards (forwards in 
time) at that point. Thus for (la) and (lb) analyzed in Figures 1 and 2, the complexity 
profiles are as follows: 
(30) 6 b 
5 
4 b a 
3 ab b b 
2 a b 
1 ab a a 
0 a 
a. the horse raced past the barn 
b. the horse raced past the barn fell 
We see that after the first two words the complexity of the locally ambiguous initial 
segment of (lb) is consistently higher than that of its garden path (la). The areas of 
the a and b curves are 12 and 22 respectively, predicting that in (lb) the less costly 
but incorrect analysis could be salient, as indeed it is. 
Johnson (1998) considers center embedding for subject and object relativization 
from a similar point of view. We assume here the relative pronoun lexical assignments 
shown in (31). s
(31) that - AxAyAz\[(y z) A (x z)\] 
:= (CN\CN)/(N\S+) 
that  - AxAyAz\[(y z) A (x z)\] 
:= (CN\CN)/(S+/N) 
The proof net analysis of sentence (4b) is shown in Figure 3, and that of sentence (5b) 
is shown in Figure 4. Let us compare the complexities: 
(32) 9 b 
8 b 
7 b b 
6 b 
5 b 
4 ab ab a a 
3 ab a a a a 
2 ab 
1 ab 
0 ab 
a. the dog that chased the cat that saw the rat barked 
b. the cheese that the rat that the cat saw ate stank 
5 For better linguistic treatment not affecting the point at hand, see Morrill (1994, Chap. 8). 
329 
Computational Linguistics Volume 26, Number 3 
8 ? 
I 
_ _ f 
I , 
CN ? CN"  N ? S ? \ /  \ /  
N"  CN ? \ \ 
/ CN" / 
N"  CN ? 
\ /  
! 
. . . . .  I . . . . . . . . . . .  
I I I I 
I i ' ' '  I ' 
I SlO I S~? CN ? CN ? N*  --  ~ N ? . \ / \ /  ' , , \ /  
NI? I I 
\ \ ( 'N  ? \ N ? \ /  ', \ /  
CN* / / CN ? / . 
N\ ?" 
\ N ? N o S ? 
\ /  \ /  
! \ 
the  cheese  that  the  ra t  
F igure  4 
Proof net analysis of (5b) the cheese that the rat that the cat saw ate stank. 
The profile of (5b) is higher; indeed it rises above 8, thus reaching what is usually taken 
to be the limit of short-term emory. Johnson attributes the increasing ill-formedness 
of centre embedded constructions to the number of incomplete dependencies at the 
"maximal cut" of a proof net. This almost corresponds to the maximum height of 
a complexity profile here, except Johnson includes no target category, whereas we 
will argue in relation to quantifier scope preference that this is critical. However, 
we also differ from Johnson in attributing relative acceptability o the area under the 
complexity curve, not only its maximal height. This is because we believe acceptability 
is to be explained in terms of the energy required to maintain processes in memory 
over time, and not just in terms of peak memory load. Finally, it happens that our 
proposal solves a problem encountered byJohnson. Gibson and Thomas (1996) observe 
that (33a) is easier to comprehend than (33b). 
(33) a. The chance that the nurse who the doctor supervised lost the reports 
bothered the intern. 
b. ?The intern who the chance that the doctor lost the reports bothered 
supervised the nurse. 
Johnson notes that his proposal does not capture this difference since both sentences 
have the same size maximal cut. Under our account, on the other hand, it is the com- 
plexity curves as a whole that account for acceptability. In these sentences, although 
the height is the same, the complexity curves are not: the area of (33a) is less than that 
of (33b). 6Thus, whereas Johnson must look to other factors to explain this difference, 
our account makes the correct prediction. 
6 To save  space  we exc lude  the  proo f  nets ;  the  curves  are:  
ab 
ab 
ab 
ab 
b ab ab b b 
a b 
b b a 
a a a a 
ab 
ab ab 
ab 
330 
Morrill Incremental Processing and Acceptability 
I 
I I 
F . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  I 
i 1 1 I 
I . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  I - -  - -  
I ~ I I I I 
I I I . . . . . . . . . . . . . . .  I I l 
I I F I I I I I I I 
I I I r - -  ~ - - I I - - I  I I -  - t  I 1 I r 
, I I I i I I II I ' I I I i i I I I 
N, (N \ S) / CP, GP / S, N, (N \ S) / CP, CP / S, N, N \ S. (N \ S) \ (N \ $) 
J oe  sMd that  
t 
I I I 
' - ~ I I I 
S, N, {N \ / CP / S. 
Mar tha  be l ieved  that  Ingr id  fel l  today  
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  
I 
p . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  
I I 
i i 
I . . . . . . . . . . . . . . . . .  i _  _ 
i E i 
I i . . . . . . .  i i 
i i i I I I 
l i - -  i - -  i i r 
I i i i i 
(N \ S) / CP, CP / S, N, N \ S, (N \ ) 
I 
I 
I 
t 
I 
I 
I 
\ (N \ s)  
J oe  sa id  that  Mar tha  be l ieved  that  
I i i I , , I \] Ij I II I\[ 
I ~ I ! I I I 
S, X. (N \ S) / CP, CP / S. N. (N \ S) / CP. GP 
Ingr id  fel l  today  
I 
. . . . . . . . . . . .  I 
I I I 
I - -  - -  - -  I T 
I \[ I 
, I , 1 I i I 
N. N \ S. (N \ S) \ (N \ S) 
J oe  said that  Mar tha  be l ieved  that  Ingr id  fel l  today  
Figure 5 
Proof net analyses for (34) Joe said that Martha believed that Ingrid fell today, with lowest (top), 
middle (center), and highest (bottom) attachment of the adverb today. 
5. Preferred Readings 
The examples o far involve comparison of different expressions, having many differ- 
ences to which their relative acceptabilities could be attributed. More factors would 
be held constant by comparing alternative readings of an ambiguous expression, and 
most appropriately of all, a structurally ambiguous expression, where there is no lexi- 
cal alternation. Consider the ambiguity that arises in a sentence such as (34) (repeated 
from (6)) from the possibility of attaching the adverb at different syntactic levels. As 
we saw in the introduction, the lower the attachment of the adverb in such sentences, 
the higher the preference (Kimball 1973, 27). 
(34) Joe said that Martha believed that Ingrid fell today. 
In Figure 5 we give the analyses for the lowest, the middle, and the highest attach- 
ments. We now abbreviate proof nets by flattening formula trees into their linear rep- 
resentations ( ince this conceals the order switching of output links, the notation belies 
the underlying planarity, but the portrayal of word-by-word complexity is unaltered). 
Accordingly, the complexity profiles are: 
(35) 6 c bc 
5 c c bc  bc  
4 abc  
3 
2 abc  ab  a 
1 abc  ab  ab  a a 
0 abc  
a. l owest  a t tachment  
b.  Joe  sa id  that  Mar tha  be l ieved  that  Ingr id  fe l l  today  midd le  a t tachment  
c. h ighest  a t tachment  
331 
Computational Linguistics Volume 26, Number 3 
I 
I 
I I 
I I 
I I L i 
1 i i I I I 
i t t i I I 
N, N / CN, CN, {GN \ CN) 
I 
I 
/ (N 
I 
I 
I I I 
- - - -  - - I - -  I i i I I I ) 
i I I I I t I I 
\ s), (N \ s) / N, N. N \ IN / CN), ON 
the  book  that  shocked Mary 's t i t le  
I I i f i t 
i I I i I I I I -  I i I I i I I I 
i i I I i I I I I i I I I I I i 
N. N / CN. CN. (ON \ ON) / (N \ S), (N \ s) / N. N, N \ (t," / CN), CN 
the  book  that  shocked Mary 's t i t le  
Figure 6 
Proof net analysis for the sensical (top) and nonsensical (bottom) interpretations of (36) the 
book that shocked Mary's title. 
The same effect occurs strongly in (36), where the preferred reading is the one 
given by the lowest attachment, even though that one is the nonsensical reading. 
(36) the book that shocked Mary's title 
The analyses are given in Figure 6. The complexities are thus: 
(37) 4 a a 
3 a a 
2 b b ab 
1 ab b b ab 
0 
a.  
the book that shocked Mary "s title b. 
ab 
sensical 
nonsensical 
6. Left-to-right Quantifier Scope Preference 
Let us consider now another instance of ambiguity: quantifier scope preference. A
rudimentary account of sentence-peripheral quantifier phrase scoping is obtained in 
Lambek calculus by means of lexical assignments such as the following: 7
(38) everyone - )~xVy(x y)
:= St/(N\St) 
everyone - )~xVy(x y)
:= (St/N)\St 
someone - )~x3y(x y)
:= St/(N\St) 
someone - )~x3y(x y)
:= (St/N)\St 
Given these assignments, one analysis of (7a) is that given in Figure 7. This is the 
subject wide scope analysis: its extracted and simplified semantics are as in (39). 
7 For  a more  re f ined t reatment  (not  requ i r ing  mul t ip le  lexical  categor i zat ions) ,  for wh ich  the resu l ts  of  
th is  paper  s tand  unchanged,  see Morr i l l  (1994, Chap.  4). 
332 
Morrill Incremental Processing and Acceptability 
I I 
I I 
I s ? 
I 
L 
s ? 
I 
J 
f 
I I I I 
I I I I I 
S ? N ? N ? S ? 
\ /  \ /  i 
\ \ N ? \ /  \ /  
/ / 
I 
I 
I I 
I 
N ? S ? 
\ /  
/ 
\ /  
\ 
S ? 
someone loves everyone 
Figure 7 
Proof net analysis for the subject wide scope reading of (7a) someone loves everyone (3V). 
(39) a. (Ax3y(x y) M(AxVy(x y) &2(love 2 1))) 
b. 3xVy(love y x) 
A second analysis is that given in Figure 8. This is the object wide scope analysis: its 
extracted and simplified semantics are as in (40). 
(40) a. (.~xVy(x y) .~2(.~x3y(x y) M(love 2 1))) 
b. Vy3x(love y x) 
Let us compare the complexity profiles for the two readings: 
(41) 4 b 
3 
2 a 
1 ab 
0 
ab 
ab 
a. 3V (subject wide scope, Figure 7) 
b. someone loves everyone V3 (object wide scope, Figure 8) 
S ! 
S ? 
I I 
I I 
s ? N" N ? 
\ / \ 
\ 
\ /  
/ 
I 
I 
I I 
I I I I 
S" N ? S ? / ' 
, \ /  
\ N ? / \ /  \ /  
/ \ 
S ? 
someone loves everyone 
Figure 8 
Proof net analysis for the object wide scope reading of (7a) someone loves everyone (V3). 
333 
Computational Linguistics Volume 26, Number 3 
s'o ".'o s'. ,-~ / \ /  I~'. \ \  
S ? / 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  
I 
. . . . . . . . .  I I I I . . . . . . .  I 
I SIo h 1 I 
_ _ N ? . . . . . . . . .  
I CN o CN"  \ N"  I N o N"  N ? - -  --  I 
,' \ /  \ /  I \ /  \ /  \ /  ~, ', ', 
CN ? ON"  \ \ N?  \ \ \ I ,.q, S o \ /  ~ /  \ /  \ J  ', \ /  
\ N o / \  \ , s. 
\ ,  ~ , /  \\/ 
everyone  i s  loved  by  someone 
Figure 9 
Proof net analysis for the subject wide scope reading of (7b) everyone is loved by someone (V3). 
At the only point of difference, the subject wide scope reading, the preferred reading, 
has the lower complexity. 
We emphasize that some target category is expected at the start of language pro- 
cessing. Lambek proof nets have the property that they can be kept planar under 
any cyclic permutation of the roots; one can view them as a circular list and require 
planarity on the interior (or exterior) of a disc. The same proof net would then have 
different complexity profiles depending on whether one set in axiom links clockwise 
or counterclockwise. Language processing, though, takes place in time, which is not 
cyclic, so we order the roots along a line, starting, according to the principle of ex- 
pectation, with the target category. As a reviewer has pointed out, if, for example, the 
target category were placed at the end of the time line, then the predictions of the 
relative acceptabilities in (41) would be reversed! 
For the passive (7b), let there be assignments as in (42). The preposition by projects 
an agentive adverbial phrase; is is a functor over (post)nominal modifiers (the man 
outside, John is outside, etc.) and passive loved is treated exactly like passive raced 
in (27). 
(42) by - )~x)~yAz\[\[z = x\] A (y z)\] 
:= ( (N \S - ) \ (N \S - ) ) /N  
is - )~x)~y(x )~z\[z = y\] y) 
:-- (N\S+)/(CN\CN) 
l oved  - (;~x;~y),z\[(y ) A 3w(x z w)\],love) 
:= ((CN\CN) / (N\(N\S-))) . (N\(N\S-))  
A V3 analysis of (7b) is given in Figure 9. This has semantics, after some simplifi- 
cation, as in (43), which is equivalent to (40). 
(43) V163937\[\[9 = 7\] A (love 16 9)\] 
An 3V analysis of (7b) is given in Figure 10. This has semantics, after some sim- 
plification, as in (44), which is equivalent to (39). 
(44) ~16V1437\[\[7 = 16\] A (love 14 7)\] 
334 
Morrill Incremental Processing and Acceptability 
I . . . . . . . . .  I 
I I 
I - -  I 
j I I t 
S~ I \] S l  ? N* N ? , \ /  \ /  
S" \ 
\ /  
! 
I 
I 
I 
I 
I 
. . . . . . . . .  I I I I . . . . . . .  J 
s o N ? -- - -  
I I I E I I 
t CN o CN ? \ N ? l N* S ? N"  N o S ? 
F ~ I - - - - I  , \ /  \ /  I \ /  \ /  / , , 
CN ? CN"  \ \ No \ \ \ I N"  \ /  \ /  \ /  ,, 
\ \ x o / / " ? / '~  s? 
everyone i s  loved  by 
Figure 10 
Proof net analysis for the object wide scope reading of (7b) everyone is loved by someone (3V). 
Again, the preferred reading has the lower complexity profile: 
(45) 
6 b 
5 
4 b b a 
3 ab 
2 a a 
1 ab 
0 ab 
a. V3 (Figure 9) 
b. everyone is loved by someone 3V (Figure 10) 
7. Preferred Forms 
Another good test would be to compare different expressions that are synonymous, 
holding semantics constant. Our account appears to explain the preference for heavy 
noun phrases to appear at the end of the verb phrase (heavy noun phrase shift). Of 
the following two sentences, repeated from (10), the second is more acceptable: 
(46) a. ?John gave the painting that Mary hated to Bill. 
b. John gave Bill the painting that Mary hated. 
The analyses are given in Figure 11. The complexities are thus: 
(47) 
4 a 
3 a a b 
2 ab ab a b b 
1 ab b b a 
0 
a. John gave the painting that Mary hated to 
b. John gave Bill the painting that Mary hated 
a 
b a 
Bill 
335 
Computational Linguistics Volume 26, Number 3 
I -- - -  I 
, I I , 
S, N, IN \ S) 
John 
/ 
save  
t 
I 
k I I 
- - - - - - L  . . . . . . . .  . . . . . . . .  I 
I I I I I L I 
- - - I -  I - - I I I - - I I 
(N ? PP),  N \[ CN. CN, \ [CN \ CN) \[ (S \[ N), N, (N \ S) / N, PP 
the p. that Mary hated 
/ N, N 
I I 
I -- -- b 
? .  (N \ S I) 
I I 
I I I I I I I 
/ (N - N), N, N \[ C'N. ( 'N.  ff-'N \ CN) / 15; / Nt. N, (N \ / N 
John gave Bill the P. that Mary hated 
Figure 11 
Proof net analysis for (46b) John gave Bill the painting that Mary hated (bottom) and (46a) John 
gave the painting that Mary hated to Bill (top). 
8. Conclusion: Valencies versus Category Complexity 
Finally, another dramatic example of unacceptability 
ing: 8 
is provided by the follow- 
(48) a. That two plus two equals four surprised Jack. 
b. ?That that two plus two equals four surprised Jack astonished Ingrid. 
c. ??That that that two plus two equals four surprised Jack astonished 
Ingrid bothered Frank. 
The passive paraphrases, however, seem more or less equally acceptable: 
(49) a. Jack was surprised that two plus two equals four. 
b. Ingrid was astonished that Jack was surprised that two plus two 
equals four. 
c. Frank was bothered that Ingrid was astonished that Jack was 
surprised that two plus two equals four. 
In Figure 12 we give the analysis of (48b) and in Figure 13 that of (49b). It is very 
interesting to observe that the complexity profile of the latter is in general lower even 
though the analysis has more than twice the total number of links. 
8 In some linguistic analyses it is claimed that sentencial subjects are obligatorily extraposed into a 
presentencial topic position, which is not available in nonroot clauses. Under our account no such 
abstract claims are necessary. 
336 
Morrill Incremental Processing and Acceptability 
f 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  I 
I 
I . . . . . . . . . . . . . . .  
I I 
I I . . . . . .  I 
I I i r I 
I I ~- -  J - - - -  I I - - - -  
I 
t 
I 
I 
I 
l 
I I I I I 
S, CP / S. clip / S. N, (N \ N) / N, N, (N \ S) / N. N, (CP \ S) / N, 
I I 
I I 
N, (CP \ S) / N. N 
that  that  two  p lus  two  equa ls  four  surp .  Jack  as t ,  Ingr id  
Figure 12 
Proof net analysis of (48b) that that two plus two equals four surprised Jack astonished Ingrid. 
I I 
s, N, (N \ S) 
I . . . . .  I 
I I I I 
. . . . . . . . . .  i- . . . . . .  q .  . . . . .  E . . . .  I 
I I I I I ~ I I I 
- -  - -  - -  q -  - -  ~1 1 - -  - -  - - I  . . . .  I . . . . . .  r - -  - -  I P I I 
! 
/ (CN \ GN), ((CN \ CN) / (N ~ (CP \ S))} * (N \ (CP \ S)), ((CP \ S) \ (CP \ S)) \] S 
I ngr ld  w~ ast .  that  
I . . . . .  I 
. . . . . . . . .  L - -~  J . . . . . .  
I P I I I I I i 
', r , 1 , , , I ~ , I I ~ I , , 
N, (N \ S) / (CN \ CN), ((CN \ CN) / (N \ (('P \ S))) . (N \ (CP \ S)), ((CP \ S) \ (CP \ S{)) \[ / S 
Jack w~ surp .  that  
I . . . . . . .  I I 
N, (N \ N} \[ X. N. (N \ S) / X, N, 
two  p lus  two  equa ls  four  
Figure 13 
Proof net analysis of (49b) Ingrid was astonished that Jack was surprised that two plus two equals four. 
(50) 
7 a 
6 a a 
5 a a 
4 b ab 
3 a a b 
2 b b b b ab b 
I ab b b a 
0 a 
a. that that two plus two equals four surp. Jack ast. Ingrid 
b. Ingrid was ast. that Jack was surp. that two plus two equals four 
Acceptability is no doubt a product of many factors other than just the structural 
ones considered here. Still, in as much as structural factors may exist, we think this 
example in particular provides good support for the view that it is resolution of atomic 
valencies, rather than complexity of categories, which underlies their contribution to 
acceptability. 
337 
Computational Linguistics Volume 26, Number 3 
Acknowledgments 
For helpful remarks I thank Gabriel Bes, 
anonymous reviewers, and various 
audiences, and especially for recent 
comment, Ewan Klein and Mark Steedman. 
References 
Ades, Anthony E. and Mark J. Steedman. 
1982. On the Order of Words. Linguistics 
and Philosophy, 4:517-558. 
Bever, Thomas. 1970. The cognitive basis for 
linguistic structures. In J. R. Hayes, editor, 
Cognition and the Growth of Language, Wiley, 
New York. 
Buszkowski, Wojciech. 1986. Completeness 
results for Lambek syntactic alculus. 
Zeitschrift ~r mathematische Logik und 
Grundlage der Mathematik, 32:13-28. 
Carpenter, Bob. 1998. Type-Logical Semantics. 
MIT Press, Cambridge, MA. 
Chomsky, Noam. 1965. Aspects of the Theory 
of Syntax. MIT Press, Cambridge, MA. 
Danos, Vincent and Laurent Regnier. 1989. 
The Structure of Multiplicatives. Archive 
for Mathematical Logic, 28:181-203. 
Dogen, Kosta. 1992. A brief survey of 
frames for the Lambek calculus. Zeitschrift 
fiir mathematische Logik und Grundlage der 
Mathematik, 38:179-187. 
Gibson, E. and J. Thomas. 1996. The 
processing complexity of English 
center-embedded and self-embedded 
structures. Proceedings of NELS, University 
of Massachusetts, Amherst. 
Girard, Jean-Yves. 1987. Linear Logic. 
Theoretical Computer Science, 50:1-102. 
de Groote, Philippe and Christian Retort. 
1996. On the Semantic Readings of 
Proof-Nets. In Geert-Jan Kruijff, Glyn 
Morrill and Richard. T. Oehrle, editors, 
Proceedings of Formal Grammar 1996, 
Prague, pages 57-70. 
Hendriks, Herman. 1993. Studied 
Flexibility: Categories and Types in 
Syntax and Semantics. D.Phil. 
dissertation, Universiteit van Amsterdam, 
Amsterdam. 
Hepple, Mark. 1990. Normal form theorem 
proving for the Lambek calculus. In 
H. Karlgren, editor, Proceedings of the 13th 
International Conference on Computational 
Linguistics (COLING 1990), pages 173-178, 
Stockholm. 
Hepple, Mark and Glyn Morrill. 1989. 
Parsing and Derivational Equivalence. 
Proceedings of the Fourth Conference ofthe 
European Chapter of the Association for 
Computational Linguistics, pages 10-18, 
Manchester. 
Johnson, Mark. 1998. Proof nets and the 
complexity of processing center 
embedded constructions, Journal of Logic, 
Language and Information, 7(4):433-447. 
Kimball, John. 1973. Seven principles of 
surface structure parsing in natural 
language. Cognition, 2:15-47. 
KOnig, Esther. 1989. Parsing as natural 
deduction. Proceedings of the 27th Annual 
Meeting, pages 272-279, Vancouver. 
Association for Computational 
Linguistics. 
Lamarche, Frangois and Christian Retor6. 
1996. Proof nets for the Lambek 
calculus--an overview. In V. Michele 
Abrusci and Claudia Casadio, editors, 
Proofs and Linguistic Categories: Applications 
of Logic to the Analysis and Implementation f
Natural Language. CLUEB, Bologna, 
pages 241-262. 
Lambek, Joachim. 1958. The mathematics of
sentence structure. American Mathematical 
Monthly, 65:154-170. 
Lecomte, Alain and Christian Retor4. 1995. 
An alternative categorial grammar. Glyn 
Morrill and Richard. T. Oehrle, editors, 
Proceedings of Formal Grammar 1995, 
Barcelona, pages 181-196. 
Moortgat, Michael. 1988. Categorial 
Investigations: Logical and Linguistic Aspects 
of the Lambek Calculus. Foris, Dordrecht. 
Moortgat, Michael. 1997. Categorial Type 
Logics. In Johan van Benthem and Alice 
ter Meulen, editors, Handbook of Logic and 
Language. Elsevier, Amsterdam, 
pages 93-177. 
Morrill, Glyn. 1994. Type Logical Grammar: 
Categorial Logic of Signs. Kluwer Academic 
Publishers, Dordrecht. 
Morrill, Glyn. 1999. Geometry of 
Lexico-Syntactic Interaction. Proceedings of 
the Ninth Conference of the European Chapter 
of the Association for Computational 
Linguistics, Bergen, pages 61-70. 
Pentus, Mati. 1994. Language completeness 
of the Lambek calculus. Proceedings of the 
Eighth Annual IEEE Symposium on Logic in 
Computer Science, Paris, pages 487-496. 
Roorda, Dirk. 1991. Resource Logics; 
Proof-Theoretical Investigations. D.Phil. 
dissertation, Universiteit van Amsterdam, 
Amsterdam. 
Steedman, Mark J. 1997. Surface Structure and 
Interpretation. MIT Press, Cambridge, MA. 
Zielonka, Wojciech. 1981. Axiomatizability 
of Ajdukiewicz-Lambek calculus by 
means of cancellation scheme. Zeitschrift 
fi, ir mathematische Logik und Grundlage der 
Mathematik, 27:215-224. 
338 
Proceedings of the Ninth International Workshop on Parsing Technologies (IWPT), pages 18?29,
Vancouver, October 2005. c?2005 Association for Computational Linguistics
Switch Graphs for Parsing Type Logical Grammars?
Bob Carpenter
Alias-i
181 North 11th Street, #401
Brooklyn, NY, 11211
carp@colloquial.com
Glyn Morrill
Universitat Polite`cnica de Catalunya
Departament de Llenguatges i Sistemes Informa`tics
E-08034 Barcelona
morrill@lsi.upc.edu
Abstract
Parsing in type logical grammars amounts
to theorem proving in a substructural
logic. This paper takes the proof net
presentation of Lambek?s associative cal-
culus as a case study. It introduces
switch graphs for online maintenance
of the Danos-Regnier acyclicity condi-
tion on proof nets. Early detection of
Danos-Regnier acyclicity violations sup-
ports early failure in shift-reduce parsers.
Normalized switch graphs represent the
combinatorial potential of a set of anal-
yses derived from lexical and structural
ambiguities. Packing these subanalyses
and memoizing the results leads directly
to a dynamic programming algorithm for
Lambek grammars.
1 Introduction
Following Montague (1970), we take the goal
of a theory of grammar to be that of assign-
ing semantic terms to linguistic expressions.
Type logical grammar is a paradigm for devel-
oping grammatical theories based on a strong
notion of typing for natural language expres-
sions. Specifically, each linguistic expression is
assigned a syntactic type and a semantic term.
For instance, the expression ?John read the book?
of English might be assigned a syntactic type
S and the semantic term read(the(book))(j),
?Supported by CICYT project TIC2002?04019?C03?01.
the expression ?book that John read? the term
that(?x.read(x)(j))(book) and type CN, and
?person that read the book? the type CN and term
that(?y.read(the(book))(y))(person).
2 Lambek?s Associative Calculus
Lambek?s associative calculus L (Lambek 1958)
contains three connectives: concatenation, left divi-
sion, and right division. Logically, concatenation is
conjunction and the divisions are directed implica-
tions. Algebraically, concatenation is a free semi-
group product and the divisions its left and right
residuals. Viewed as a purely syntactic formalism,
L assigns syntactic types to linguistic expressions
modeled as sequences of tokens. From a stipulated
lexical assignment of expressions to syntactic types,
further assignments of expressions to types are de-
rived through purely logical inference, with the logic
representing a sound and complete axiomatization
and inference system over the algebraic structure
(Pentus 1995).
L appears near the bottom of a hierarchy of
substructural logics obtained by dropping structural
rules: Lambek proofs are valid as multiplicative
intuitionistic linear proofs (restoring permutation)
which are valid as conjuntive and implicative rele-
vance proofs (restoring contraction) which are valid
as conjuntive and implicative intuitionistic proofs
(restoring weakening). In type logical grammars,
lexical entries are associated with syntactic types
and intuitionistic (in fact probably relevant) proofs
as semantic representations, notated as terms of the
simply typed ?-calculus with product, under the
Curry-Howard correspondence. The semantics of a
18
derived expression is the result of substituting the
lexical semantics into the reading of the derivation
as an intuitionistic proof.
2.1 Syntactic and Semantic Types
The set of syntactic types is defined recursively on
the basis of a set SynAtom of atomic syntactic types.
The full set SynTyp of syntactic types is the least
set containing the atomic syntactic types SynAtom
and closed under the formation of products (SynTyp?
SynTyp), left divisions (SynTyp\SynTyp), and right
divisions (SynTyp/SynTyp). The two division, or
?slash?, types, A/B, read A over B, and B\A, read B
under A, refine the semantic function types by pro-
viding a directionality of the argument with respect
to the function. A linguistic expression assigned to
type A/B combines with an expression of type B on
its right side to produce an expression of type A. An
expression of type B\A combines with an expression
of syntactic type B on its left to produce an expres-
sion of type A. The product syntactic type A ?B is as-
signed to the concatenation of an expression of type
A to an expression of type B. The distinguishing
feature of Lambek calculus with respect to the ear-
lier categorial grammar of Bar-Hillel is that as well
as the familar cancelation (modus ponens) rules, it
admits also a form of the deduction theorem: if the
result of concatenating an expression e to each B re-
sults in an expression of type A, then it follows that
e is assigned to syntactic type A/B.
Semantic representations in Lambek type logical
grammar are simply typed ?-terms with product. We
assume a set SemAtom of atomic semantic types,
which generate the usual function types ? ? ? and
product types ? ? ?. Terms are grounded on an in-
finite set of distinct variables Var?, along with a set
of distinct contants Con? for each type ?. We as-
sume the usual ?-terms consisting of variables, con-
stants, function applications ?(?), function abstrac-
tions ?x.?, pairs ??, ?? and projections from pairs
pi1? and pi2? onto the first and second element of the
pair respectively. We say that a term ? is closed if
and only if it contains no free variables.
A type map consists of a mapping typ :
SynAtom ? SemTyp. That is, each atomic syn-
tactic type A ? AtomCat is assigned to a (not neces-
sarily atomic) semantic type typ(A) ? SemTyp. Se-
mantic types are assigned to complex syntactic types
as follows:
typ(A ? B) = typ(A) ? typ(B) [Product]
typ(A/B) = typ(B) ? typ(A) [Right Division]
typ(B\A) = typ(B) ? typ(A) [Left Division]
We will often write ? : A where ? is a ?-term of type
typ(A).
2.2 Linguistic Expressions and the Lexicon
In the Lambek calculus, linguistic expressions are
modeled by sequences of atomic symbols. These
atomic symbols are drawn from a finite set Tok of
tokens. The full set of linguistic expressions Tok?
is the set of sequences of tokens. For the sake of
this short version of the paper we admit the empty
sequence; we will address its exclusion (as in the
original definition of L) in a longer version.
The compositional assignment of semantic terms
to linguistic expressions is grounded by a finite set
of assignments of terms and types to expressions.
A lexicon is a finite relation Lex ? Tok? ? Term ?
SynTyp, where all ?w, ?, A? ? Lex are such that the
semantic term ? is of the appropriate type for the
syntactic type A. We assume that the only terms
used in the lexicon are relevant, in the sense of rele-
vance logic, in not containing vacuous abstractions.
Note that the set of atomic semantic types, atomic
syntactic types and the semantic type mapping are
assumed as part of the definition of a lexicon. Type
logical grammar is an example of a fully lexicalized
grammar formalism in that the lexicon is the only
locus of language-specific information.
2.3 Proof Nets
A sequent ? ? ? : A is formed from an antecedent
? consisting of a (possibly empty) sequence of ?-
term and syntactic type pairs, and a consequent pair
? : A, where the terms are of the appropritate type
for the types. Following Roorda (1991), we define
theoremhood with Girard-style proof nets (Girard
1987), a geometric alternative to Lambek?s Gentzen-
style calculus (Lambek 1958).
Proof nets form a graph over nodes labeled by
polar types, where a polar type is the combination
of a syntactic type and one of two polarities, input
(negative) and output (positive). We write A? for the
input polar type, which corresponds to antecedent
types and is thus logicaly negative. We write A? for
19
the output polar type, which is logically positive and
corresponds to a consequent type. A literal is a po-
lar type with an atomic syntactic type. Where A is
an atomic syntactic type, the literals A? and A? are
said to be complementary.
Each polar type defines an ordered binary tree
rooted at that polar type, known as a polar tree. For a
literal, the polar tree is a single node labeled by that
literal. For polar types with complex syntactic types,
the polar tree is rooted at the polar type and unfolded
upwards based on connective and polarity according
to the solid lines in Figure 1, which includes also
other annotation. Examples for some linguistically
motivated types are shown in Figure 2.
The solid edges of the graphs are the edges of
the logical links. Each unfolding is labeled with a
multiplicative linear logic connective, either multi-
plicative conjunction (?) or multiplicative disjunc-
tion (?). This derives from the logical interpretation
of the polar type trees as formula trees in multiplica-
tive linear logic. Unfolding the Lambek connectives
to their linear counterparts, (A/B)? and (B\A)? un-
fold to A??B?; (A/B)? and (B\A)? unfold to A??B?;
(A ? B)? unfolds to A? ? B?; and (A ? B)? unfolds to
A??B?. The type unfoldings correspond to the clas-
sical equivalences between (? ? ?) and (?? ? ?),
between ?(? ? ?) and (? ? ??), and between
?(? ? ?) and (?? ? ??). For atomic syntactic types
A, A? becomes simply A, whereas A? becomes its
linear negation A?; this is the sense in which po-
lar atomic types correspond to logical literals. The
non-commutatitive nature of the Lambek calculus is
reflected in the ordering of the subtrees in the un-
foldings; for commutative logics, the proof trees are
not ordered.
The proof frame for a syntactic sequent
C1, . . . ,Cn ? C0 is the ordered sequence of
polar trees rooted at C?0,C
?
1, . . . ,C
?
n. We convert
sequents to frames in this order, with the output
polar tree first. In general, what follows applies to
any cyclic reordering of these polar trees. Note that
the antecedent types C1, . . .Cn have input (negative)
polarity inputs and the consequent type C0 has
output (positive) polarity. All of our proof frames
are intuitionistic in that they have a single output
conclusion, i.e. a unique polar tree rooted at an
output type.
A partial proof structure consists of a proof frame
with a set of axiom links linking pairs of comple-
mentary literals with at most one link per literal. Ax-
iom links in both directions are shown in Figure 3.
A proof structure is a proof structure in which all
literals are connected to complementary literals by
axiom links.
Proof nets are proof structures meeting certain
conditions. A proof structure is planar if and only if
its axiom links can be drawn in the half-plane with-
out crossing lines; this condition enforces the lack
of commutativity of the Lambek calculus. The fi-
nal condition on proof structures involves switch-
ing. A switching of a proof structure is a subgraph
that arises from the proof structure by removing ex-
actly one edge from each disjunctive (?) link. A
proof structure is said to be Danos-Regnier (DR-)
acyclic if and only if each of its switchings is acyclic
(Danos and Regnier 1989).1A proof net is a planar
DR-acyclic proof structure. A theorem is any se-
quent forming the proof frame of a proof net.
Consider the three proof nets in Figure 4. The first
example has no logical links, and corresponds to the
simplest sequent derivation S ? S . The second ex-
ample represents a determiner, noun and intransitive
verb sequence. Both of these examples are acyclic,
as must be every proof net with no logical ?-links.
The third example corresponds to the type-raising
sequent N ? S/(N\S ). Unlike the other examples,
this proof net involves a ?-link and is cyclic. But
both of its switchings are acyclic, so it satisfies the
Danos-Regnier acyclicity condition.
2.4 Essential Nets and Semantic Trips
A term is said to be pure if and only if it contains
no constants. The linear terms are closed, pure ?-
terms that bind each variable exactly once. Each
proof net in the Lambek calculus corresponds to a
linear (i.e. binding each variable exactly once) ?-
term via the Curry-Howard correspondence. This
term abstracts over variables standing in for the se-
mantics of the inputs in the antecedent of the sequent
and has a body that is determined by the consequent
of the sequent. For instance, the ?-term ?x.?P.P(x)
corresponds to the syntactic sequent x : N, P :
1The full Danos-Regnier condition is that every switching
be acyclic and connected. Fadda and Morrill (2005) show that
for the intuitionistic case (i.e. single output conclusion, as for
L), DR-acyclicity entails the connectedness of every switching.
20


?(?) : A?
{ }
BB
BB
BB
BB
BB
B
**
&
-
5
B
M U
//_______ ? : B?
{ }
  
  
  
  
  
 
OO

?
? : A/B?




xi : B?
{Li}
CC
CC
CC
CC
CC
CC
? : A?
{Ri}
{{
{{
{{
{{
{{
{{
OO

?
?xi.? : A/B?
LL
q
{



OO



? : B?
{ }
>>
>>
>>
>>
>>
>
OO

?(?) : A?
{ }
||
||
||
||
||
|
tt


	
|
qi
oo_ _ _ _ _ _ _
?
? : B\A?




? : A?
{Li}
CC
CC
CC
CC
CC
CC
OO

xi : B?
{Ri}
{{
{{
{{
{{
{{
{{
?
?xi.? : B\A?
RR
M
C
6
-
'
OO





pi1? : A?
{Li}
AA
AA
AA
AA
AA
A
**
&
,
5
A
M
pi2? : B?
{Ri}
}}
}}
}}
}}
}}
}
tt




}
r
?
? : A ? B?


? : B?
{ }
CC
CC
CC
CC
CC
CC
OO

? : A?
{ }
zz
zz
zz
zz
zz
zz
OO

?
??, ?? : A ? B?
RR
N
C
7
.
( LL
p
z



OO

Figure 1: Logical Links with Switch Paths (solid) and Semantic Trip (dashed)
x : S ? x : N? y(x) : S ?
?
y : N\S ?
???? 
u : CN? z(?x.y)(u) : CN? x : N? y : S ?
? ?
z(?x.y)CN\CN?
DDDD
zzzz
?x.y : S/N?
DDDD
zzzz
?
z : (CN\CN)/(S/N)?
RRRRRRR
lllllll
t : S ? v : N? r:N? x(?yw.u)(?v.t)(r):S ? u:S ? w : N? z : N? y(z) : S ?
? ? ? ?
?v.t : N\S ?
>>>>     
x(?yw.u)(?v.t) : N\S ?
NNNNNN
    
?w.u : N\S ?
>>>>     
y : N\S ?
>>>>     
? ?
x(?y.?w.u) : (N\S )\(N\S )?
NNNNNN
pppppp
?y.?w.u : (N\S )\(N\S )?
NNNNNN
pppppp
?
x : ((N\S )\(N\S ))/((N\S )\(N\S ))?
WWWWWWWWWW
gggggggggg
Figure 2: Examples of Polar Type Trees
21
? : A?

 ? : A?
uu V[_ch
{ }
OO

? : A?
))h c _ [ V
? : A?
{ }

OO
Figure 3: Axiom Links with Switch Paths and Semantic Trip
S ? S ?
N? CN? N? S ?
? ?
S ? N/CN?
?? 
CN? N\S ?
?? 
N? S ?
?
N\S ?
?? 
S ?
?
S/(N\S )?
?? 
N?
Figure 4: Three Example Proof Nets
N\S ? P(x) : S and ?x.?P.P(x) corresponds to
the sequent x : N ? ?P.P(x) : S/(N\S ). The ?-
term induced by the Curry-Howard correspondence
can be determined by a unification problem over a
proof net (Roorda 1991). Different proof nets for the
same theorem correspond to different interpretations
through the Curry-Howard correspondence. The es-
sential net of a proof structure is the directed graph
rooted at the root node of the output polar type tree
whose edges are shown as dashed lines in Figures 1
and 3 (LaMarche 1994). Each output division type
introduces a fresh variable on its input subtype (its
argument), as indicated by the labels xi in Figure 1.
The essential nets for the examples in Figure 4 are
shown in Figure 5.
Terms are computed for the polar type trees by
assigning terms to the roots of the polar inputs. The
tree is then unfolded unifying in substitutions as it
goes, as illustrated in the example polar type trees in
Figure 2. The direction of axiom links in the essen-
tial net provide the substitutions necessary to solve
the unification problem of ?-terms in the proof net
established by equating the two halves of each ax-
iom linked complementary pair of literals. A traver-
sal of an essential net carrying out the substitutions
specified by axiom links constitutes a semantic trip
the end result of which is the Curry-Howard ?-term
for the Lambek calculus theorem derived by the
proof net. All ?-terms derived from a semantic trip
with variables or constants assigned to input root po-
lar types will be in ?-? long form. The essential net
directly corresponds to the tree of the semantic term
derived by the Curry-Howard correspondence.
The well-formedness of a set of axiom linkings
over a polar tree may be expressed in terms of the
essential net. Among the conditions are that an es-
sential net must be acyclic and planar. In addition,
essential nets must be connected in two ways. First,
there must be a path from the root of the single out-
put polar tree to the root of each of the input polar
trees. Second, there must be a path from each output
daughter of an output division to the input daugh-
ter. That is, when A/B? is unfolded to B?A?, there
must be a path from A? to B?. These conditions ex-
press the definition of linear semantic terms dictated
through the logic by the Curry-Howard correspon-
dence. The first condition requires each variable (or
term) corresponding to the root of an input polar tree
to occur in the output term, whereas the second con-
dition requires that variables only occur within their
proper scopes so that they are bound. The essen-
tial nets presented in Figure 5 adhere to these con-
ditions and produce well-typed linear ?-terms. The
example presented in Figure 6 shows a set of axiom
links that does not form a proof net; it violates the
condition on variable binding, as is seen from the
lack of path from the N? daughter to the N? daugh-
ter of the N/N? node. The major drawback to us-
ing these conditions directly in parsing is that they
are existential in the sense of requring the existence
of a certain kind of path, and thus difficult to refute
online during parsing. In comparison, the Danos-
22
t(k) : N?

?
??
?
// CN?

N? r(t(k)) : S ?
 

oo
S ?

t : N/CN? k : CN? r : N\S ?
N?

x(j) : S ?

oo
~~||
||
x : N\S ? S ?
?x.x(j) : S/(N\S )?
>>||||
j : N?
Figure 5: Semantic Trips
?(?x.?)(?(x)) : N? //
  B
BB
B
N?

x : N?

N?

?(?x.?) : N/N? //
((PP
PPP
P
?x.? : N/N?
>>||||
N? ?(x) : N?oo
~~||
||
N?

? : (N/N)/(N/N)? ? : N? ? : N\N?
Figure 6: Unbound Variable in Illegal Semantic Trip
N? N?





___________________________








N?



______________






N?
? ?
N/N?
BBBB
|
|
N/N?
B
B
N? N?
? ?
N? (N/N)/(N/N)?
P P P P
nnnn
N? N\N?
B
B
|
|
Figure 7: Switching with Path Violating Danos-Regnier Acyclicity
23
Regnier acyclicity condition is violated by the at-
tempt to close off the binding of the variable. The
path vilolating DR acyclicity is shown in Figure 7,
with the path given in dashed lines and the switch-
ing taking the right daughter of N/N? as the arc to
remove.
3 Parsing with Switch Graphs
The planar connection of all literals into a proof
structure is straightforward to implement. Axiom
links are simply added in such a way that planarity
is maintained until a complete linkage is found. In
our shift-reduce-style parser, planarity is maintained
by a stack in the usual way (Morrill 2000). For dy-
namic programming, we combine switch graphs in
the cells in a Cocke-Kasami-Younger (CKY) parser
(Morrill 1996). The main challenge is enforcing
DR-acyclicity, and this is the main focus of the rest
of the paper. We introduce switch graphs, which not
only maintain DR-acyclicity, but also lead the way
to a normal form for well-formed subsequence frag-
ments of a partial proof structure. This normal form
underlies the packing of ambiguities in subderiva-
tions in exactly the same way as usual in dynamic
programming parsing.
3.1 Switch Graphs
Switch graphs are based on the observation that a
proof structure is DR-acyclic if and only if every cy-
cle contains both edges of a ?-link. If a cycle con-
tains both edges of a ?-link, then any switching re-
moves the cycle. Thus if every cycle in a proof struc-
ture contains both edges of a ?-link, every switching
is acyclic.
The (initial) switch graph of a partial proof struc-
ture is defined as the undirected graph underlying
the partial proof structure with edges labeled with
sets of ?-edge identifiers as indicated in Figures 1
and 3. Each edge in a logical ?-link is labeled with
the singleton set containing an identifier of the link
itself, either Li for the left link of ?-link i or Ri for
the right link of ?-link i. Edges of axiom links and
logical ?-links are labeled with the empty set.
The closure of a switch graph is computed by it-
erating the following operation: if there is an edge
n1 ? n2 labeled with set X1 and an edge edge n2 ? n3
labeled with set X2 such that X1?X2 does not contain
both edges of a ?-link, add an edge n1 ? n3 labeled
with X1?X2. An edge n?m labeled by X is subsumed
by an edge between the same nodes n?m labeled by
Y if Y ? X. The normal switch graph of a partial
proof structure is derived by closing its the initial
switch graph, removing edges that are subsumed by
other edges, and restricting to the literal nodes not
connected by an axiom link. These normal switch
graphs define a unique representation of the combi-
natorial possibilities of a span of polar trees and their
associated links in a partial proof structure. That is,
any partial proof structure substructure that leads to
the same normal switch graph may be substituted in
any proof net while maintaining well-formedness.
The fundamental insight explored in this paper is
that two literals may be connected by an axiom link
in a partial proof structure without violating DR-
acyclicity if and only if they are not connected in
the normal switch graph for the partial proof struc-
ture. The normal switch graph arising from the ad-
dition of an axiom link is easily computed. It is just
the closure generated by adding the new axiom link,
with the two literals being linked removed.
3.2 Shift-Reduce Parsing
In this section, we present the search space for a
shift-reduce-style parsing algorithm based on switch
graphs. The states in the search consist of a global
stack of literals, a lexical stack of literals, the re-
maining tokens to be processed, and the set of links
among nodes on the stacks in the switch graph. The
shift-reduce search space is characterized by an ini-
tial state and state transitions. These are shown in
schematic form in Figure 8. The initial state con-
tains the output type?s literals and switch graph. A
lexical transition is from a state with an empty lexi-
cal stack to one containing the lexical literals of the
next token; the lexical entry?s switch graph merges
with the current one. A shift transition pops a literal
from the lexical stack and pushes it onto the global
stack. A reduce transition adds an axiom link be-
tween the top of the global stack and lexical stack
if they are complementary and are not connected in
the switch graph; the resulting switch graph results
from adding the axiom link and normalizing. The
stack discipline insures that all partial proof struc-
tures considered are planar.
Figure 10 displays as rows the shift-reduce search
24
Stack Lex Sw-Gr Op
A? gr(A?) start(A)
S G
S A? G ? gr(A?) lex(w, A)
Stack Lex Sw-Gr Op
AiS A jL G
S L (G ? i= j) ? {i, j} reduce(i, j)
AS BL G
BAS L G shift(B)
Figure 8: Shift-Reduce Parsing Schematic
N?1 N
?
2 N
?
4 N
?
5
N?0 N1/N?2
9999 
N?3 N4\N?5
9999 
N?1 N
?
2 N
?
4 N
?
5
N?0 N1/N?2
9999 
N?3 N4\N?5
9999 
Figure 9: Modifier Attachment Ambiguity Proof Nets
Stack Lex Tok Sw-Gr Ax Op
N?0 start
N?0 N
?
1 N
?
2 w1 1-2{} lex
? N?2 0=1 reduce
N?2 shift
N?2 N
?
3 w2 lex
N?3 N
?
2 shift
N?3 N
?
2 N
?
4 N
?
5 w3 4-5{} lex
N?2 N
?
5 3=4 reduce
2=5 reduce
Stack Lex Tok Sw-Gr Ax Op
N?0 start
N?0 N
?
1 N
?
2 w1 1-2{} lex
N?1 N
?
0 N
?
2 1-2{} shift
N?2 N
?
1 N
?
0 1-2{} shift
N?2 N
?
1 N
?
0 N
?
3 w2 1-2{} lex
N?1 N
?
0 2=3 reduce
N?1 N
?
0 N
?
4 N
?
5 w3 4-5{} lex
N?0 N
?
5 1=4 reduce
0=5 reduce
Figure 10: Modifier Attachment Ambiguity Shift-Reduce Search States
25
states corresponding to the two valid proof nets
shown in Figure 9. The subscripts on syntactic types
in the diagram is only so that they can be indexed
in the rows of the table describing the search states.
The initial state in both searches is created from the
output type?s literal. The third column of the dia-
grams indicate the token consumed at each lexical
entry. The switch graphs are shown for the rows
for which they?re active. Because there are no ?-
links, all sets of edges are empty. The fifth column
shows the axiom linking made at each reduce step.
The history of these decisions and lexical insertion
choices determines the final proof net. Finally, the
sixth column shows the operation used to derive the
result. Note that reduction is from the top of the lex-
ical stack to the top of the global stack and is only
allowed if the nodes to be linked are not connected in
the switch graph. This is why N?1 cannot reduce with
N?2 in the second diagram in Figure 10; the second
shift is mandatory at this point. Note that as active
nodes are removed, as in the first diagram reduction
step linking 0=2, the switch graph contracts to just
the unlinked nodes. After the reduction, only N?2 is
unlinked, so there can be no switch graph links. The
link between node 4 and 5 is similarly removed al-
most as soon as it?s introduced in the second reduc-
tion step. In the second diagram, the switch graph
links persist as lexical literals are pushed onto the
stack.
Shift-reduce parses stand in one-to-one corre-
spondence with proof nets. The shift and reduce op-
erations may be read directly from a proof net by
working left to right through the literals. Between
literals, the horizontal axiom links represent literals
on the stack. Literals in the current lexical syntac-
tic type represent the lexical stack. Literals that are
shifted to the global stack eventually reduce by ax-
iom linking with a literal to the right; literals that are
reduced from the lexical stack axiom link to their
left with a literal on the global stack.
3.3 Memoized Parsing
Using switch graphs, we reduce associative Lam-
bek calculus parsing to an infinite binary phrase-
structure grammar, where the non-terminals are
normalized switch graphs. The phrase structure
schemes are shown in Steedman notation in Fig-
ure 11. Lexical entries for syntactic type A are de-
rived from the input polar tree rooted at A?. This
polar tree yields a switch graph, which is always a
valid lexical entry in the phrase structure grammar.
Any result of axiom linking adjacent complemen-
tary pairs of literals in the polar tree that maintains
switch-graph acyclicity is also permitted. For in-
stance, allowing empty left-hand sides of sequents,
the input type A/(B/B)? would produce the literals
A?1B
?
2B
?
3 with links 1-2 : {L3}, 1-3 : {R3}. This could
be reduced by taking the axiom link 2=3, to pro-
duce the single node switch graph A?1. In contrast,
(B/B)/A? produces the switch graph B?1B?2A?3 with
links 1-2, 1-3, and 2-3. Thus the complementary B
literals may not be linked.
Given a pair of normal switch graphs, the binary
rule scheme provides a finite set of derived switch
graphs. One or more complementary literals may be
axiom linked in a nested fashion at the borders of
both switch graphs. These sequences are marked as
? and ? and their positions are given relative to the
other literals in the switch graph in Figure 11. Un-
linked combinations are not necessary because the
graph must eventually be connected. This scheme
is non-deterministic in choice of ?. For instance, an
adverb input (N1\S 2)/(N4\S 3)? produces the literals
N?1S
?
2S
?
3N
?
4 and connections 1-2, 1-3:{L4}, 1-4:{R4},
2-3:{L4}, and 2-4:{R4}. When it combines with a
verb phrase input N5\S ?6 with literals N
?
5S
?
6 and con-
nections 5-6, then either the nominals may be linked
(4=5), or the nominals and sentential literals may be
linked (4=5, 3=6). The result of the single linking is
N?1S
?
2S
?
3S
?
6 with connections 1-2, 1-3:{L4}, 1-6:{R4},
2-3:{L4}, and 2-6:{R4}. The result of the double link-
ing is simply N?1S
?
6 with connection 1-6, or in other
words, a verb phrase.
The dynamic programming equality condition is
that two analyses are considered equal if they lead
to the same normalized switch graphs. This equality
is only considered up to the renaming of nodes and
edges. Backpointers to derivations allow semantic
readings to be packed in the form of lexical choices
and axiom linkings. For instance, consider the two
parses in Figure 12.
With a finite set of lexical entries, bottom-up
memoized parsing schemes will terminate. We illus-
trate two derivations of a simple subject-verb-object
construction in Figure 13. This is a so-called spuri-
ous ambiguity because the two derivations produce
26
w
lex
?
G
?
?
?
?
?
?
?
?
?
?
?
?
Lex(w, A), and
A? has switch graph
w. literals ?, links G
?
?
?
?
?
?
?
?
?
?
?
?
?1 ?
G1
? ?2
G2 ? = ?
?1 ?2
(G1 ? G2) ? (? = ?)
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
? = Ai1 , . . . , Ain
? = A jn , . . . , A j1
(? = ?) = i1 = j1, . . . , in = jn
?
?
?
?
?
?
?
?
?
?
?
?
?
?
?
Figure 11: Phrase-Structure Schemes over Switch Graphs
a:N1/N2
a(x):N?1 x:N?2
1-2
b:N3
b:N?3
c:N4\N5
y:N?4 c(y):N?5
4-5 3=4
c(b):N?5
2=5
a(b(c)):N?1
a:N1/N2
a(x):N?1 x:N?2
1-2
b:N3
b:N?3
2=3
a(b):N?1
c:N4\N5
y:N?4 c(y):N?5
4-5 1=4
c(a(b)):N?5
Figure 12: Modifier Attachment Ambiguity Packing
the same semantic term. They are not spurious glob-
ally because the alternative linkings are required for
adverbial modification and object relativization re-
spectively. The ambiguity in the phrase structure
grammar results from the associativity of the combi-
nation of axiom linkings. The two derivations do not
propagate their ambiguity under the dynamic pror-
gramming scheme precisely because they produce
equivalent results. Nevertheless, a worthwhile opti-
mization is to restrict the structure of combinations
of linkings in the phrase-structure schemes to corre-
spond to an unambiguous left-most linking strategy;
this corresponds to the way in which other associa-
tive operators are parsed in programming language.
For instance, x+y+z will be assumed to be x+(y+z)
if + is defined to be right associative.
An unambiguous right-associative context-free
grammar for linkings M over literals A and their
complements A is:
M ? A A | A M A | A A M | A M A M
An example of packing for subject/object scope am-
biguities is shown in Figure 14. The derivations
in Figure 14 produce different semantic interpreta-
tions; one of these is subject-wide scope and the
other object-wide scope. Unsurprisingly, the mem-
oizing parser does not solve P = NP in the affirmi-
tive (Pentus 2003). The size of the switch graphs on
the intermediate structures is not bounded, nor is the
number of alternative switch-paths between literals.
It remains an open question as to whether the switch
graph parser could be bounded for a fixed lexicon
(Pentus 1997).
3.4 Empty Antecedents and Subtending
Lambek?s calculus required the antecedent ? in
a sequent ? ? ? : A to be non-empty.
Proof nets derive theorems ( ? CN/CN) and
((CN/CN)/(CN/CN) ? CN/CN), as shown in Fig-
ure 15. These derivations both allow the construc-
tion of an output, namely the identity term ?x.x and
modifier syntactic type CN/CN, out of no input.
A literal A is said to subtend a complementary
literal A if they are the leftmost and rightmost de-
scendants of a ?-link. In both of the examples in
Figure 15, the output adjective CN/CN? unfolds to
the sequence of literals CN?CN? in which the input
CN? subtends the output CN?. If literals that stand
in a subtending relation are never linked, the set of
theorems is restricted to those derivable in Lambek?s
original calculus.
Consider the proof net in Figure 16. An analysis
in which S ?8 linked to S
?
11 and N
?
9 linked to N
?
10 is
not ruled out by Danos-Regnier acyclicity. It is ruled
out by the subtending condition because S ?8 subtends
S ?11, being the leftmost and right most daughters of
the ?-node (N10\S 11)\(N9\S 8)?. Further note that
there are no cycles violating DR acyclicity; each of
the sixteen switchings is acyclic.
4 Conclusion
We have introduced switch graphs for shift-reduce
and CKY-style parsing of grammars in the asso-
ciative Lambek calculus. Switch graphs encode
27
NN?1
(N\S )/N
N?2 S
?
3 N
?
4
2-3, 2-4, 3-4
1=2
S ?3 N
?
4
3-4
N
N?5
4=5
S ?3
N
N?1
(N\S )/N
N?2 S
?
3 N
?
4
2-3, 2-4, 3-4
N
N?5
4=5
N?2 S
?
3
2-3
1=2
S ?3
N?2 S
?
3
?
N2\S ?3
?? 
N?4
?
N?1 (N2\S 3)/N?4
?? 
N?5
Figure 13: Left vs. Right Attachment: Packing Locally Spurious Attachment Ambiguity
S ?2 N?3 N?4 S ?5 N?7 S ?8
? ? ?
S ?1 N3\S ?2
/// 
N4\S ?5
/// 
N?6 S 8/N?7
/// 
S ?9
? ? ?
S 1/(N3\S 2)?
/// 
(N4\S 5)/N?6
/// 
(S 8/N7)\S ?9
/// 
S ?2 N?3 N?4 S ?5 N?7 S ?8
? ? ?
S ?1 N3\S ?2
/// 
N4\S ?5
/// 
N?6 S 8/N?7
/// 
S ?9
? ? ?
S 1/(N3\S 2)?
/// 
(N4\S 5)/N?6
/// 
(S 8/N7)\S ?9
/// 
S ?1S ?2N?3
1-2:{L3}, 1-3:{R3}
N?4 S ?5N?6
4-5, 4-6, 5-6
S ?1N?6
1-6
N?7 S ?8S ?9
7-9:{L7}, 8-9:{R7}
S ?9
S ?1S ?2N?3
1-2:{L3}, 1-3:{R3}
N?4 S ?5N?6
4-5, 4-6, 5-6
N?7 S ?8S ?9
7-9:{L7}, 8-9:{R7}
N?4 S ?9
4-9
S ?1
Figure 14: Scope Ambiguity: Partial Proof Structure Fragments with Phrase Structure
x : CN? CN?
?
?x.x : CN/CN?
????  y(?x.x)(w) : CN? CN? x : CN? CN?
? ?
w : CN? CN? y(?x.x) : CN/CN?
???? 
?x.x : CN/CN?
???? 
? ?
?w.y(?x.x)(w) : CN/CN?
???? 
y : (CN/CN)/(CN/CN)?
OOOOOO
oooooo
Figure 15: Subtending Examples
28
S ? N?5 N
?
6 S
?
7 S
?
8 N
?
9 N
?
10 S
?
11
? ? ? ?
N5\S ?4
////

N6\S ?7
////

N9\S ?8
////

N10\S ?11
////

S ?12 N
?
13 N
?
14 S
?
15
? ? ? ?
N?2 S
?
3 (N5\S 4)\(N6\S 7)?
?????

(N10\S 11)\(N9\S 8)?
?????

N13\S ?12
////

N14\S ?15
////

? ? ?
S ?0

















_____________________







N?1 N2\S
?
3
////

((N5\S 4)\(N6\S 7))/((N10\S 11)\(N9\S 8))?
OOOOOOO
ooooooo
(N13\S 12)\(N14\S 15)?
?????

Figure 16: Higher-Order Example: Adverbial Intensifier
the axiom-linking possibilities of a sequence of un-
linked literals deriving from underlying polar trees.
We introduced two parsers based on switch graphs.
The shift-reduce parsers are memory efficient and
parses correspond uniquely to (cut free) proof nets.
They can be made more efficient by bounding stack
size. The memoizing parsers are able to pack attach-
ment and scope distinctions that lead to different ?-
terms but have the same combinatory possibilities.
References
D. Bechet. 2003. Incremental parsing of lambek calculus
using proof-net interfaces. In Proc. of the 8th Interna-
tional Workshop on Parsing Technologies.
V. Danos and L. Regnier. 1989. The structure of multi-
plicatives. Arch. Math. Logic, 28:181?203.
P. de Groote and C. Retore?. 1996. On the semantic read-
ings of proof nets. In Proc. of Formal Grammar, pages
57?70.
M. Faddo and G. Morrill. 2005. The Lambek calculus
with brackets. In P. Scott, C. Casadio, and R. Seely,
editors, Language and Grammar: Studies in Math.
Ling. and Nat. Lang. CSLI Press, Stanford.
J.-Y. Girard. 1987. Linear logic. Theoret. Comput. Sci.,
50:1?102.
F. Lamarche. 1994. Proof nets for intuitionistic linear
logic I: Essential nets. Technical report, Imperial Col-
lege, London.
J. Lambek. 1958. The mathematics of sentence structure.
Amer. Math. Mon., 65:154?170.
R. Montague. 1970. Universal grammar. Theoria,
36:373?398.
G. Morrill. 1996. Memoisation of categorial proof nets:
parallelism in categorial processing. Technical Re-
port LSI-96-24-R, Dept. de Llenguatges i Sistemes In-
forma`tics, Universitat Polite`cnica de Catalunya.
G. Morrill. 2000. Incremental processing and accept-
ability. Comput. Ling., 26(3):319?338.
M. Pentus. 1995. Models for the Lambek calculus. An-
nals of Pure and Applied Logic, 75(1?2):179?213.
M. Pentus. 1997. Product-free Lambek calculus and
context-free grammars. Journal of Symbolic Logic,
62(2):648?660.
M. Pentus. 2003. Lambek calculus is NP-complete.
Technical Report TR-203005, CUNY Graduate Cen-
ter.
D. Roorda. 1991. Resource logics: Proof-theoretical
investigations. Ph.D. thesis, Universiteit van Amster-
dam.
29
