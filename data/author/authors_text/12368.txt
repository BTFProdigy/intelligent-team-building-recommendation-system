Statistical Approaches to
Computer-Assisted Translation
Sergio Barrachina?
Universitat Jaume I
Oliver Bender??
RWTH Aachen
Francisco Casacuberta?
Universitat Polite`cnica de Vale`ncia
Jorge Civera?
Universitat Polite`cnica de Vale`ncia
Elsa Cubel?
Universitat Polite`cnica de Vale`ncia
Shahram Khadivi??
RWTH Aachen
Antonio Lagarda?
Universitat Polite`cnica de Vale`ncia
Hermann Ney??
RWTH Aachen
Jesu?s Toma?s?
Universitat Polite`cnica de Vale`ncia
Enrique Vidal?
Universitat Polite`cnica de Vale`ncia
Juan-Miguel Vilar?
Universitat Jaume I
Current machine translation (MT) systems are still not perfect. In practice, the output
from these systems needs to be edited to correct errors. A way of increasing the productivity of
the whole translation process (MT plus human work) is to incorporate the human correction
activities within the translation process itself, thereby shifting the MT paradigm to that of
computer-assisted translation. This model entails an iterative process in which the human
translator activity is included in the loop: In each iteration, a prefix of the translation is validated
(accepted or amended) by the human and the system computes its best (or n-best) translation
suffix hypothesis to complete this prefix. A successful framework for MT is the so-called statis-
tical (or pattern recognition) framework. Interestingly, within this framework, the adaptation
of MT systems to the interactive scenario affects mainly the search process, allowing a great
reuse of successful techniques and models. In this article, alignment templates, phrase-based
models, and stochastic finite-state transducers are used to develop computer-assisted translation
systems. These systems were assessed in a European project (TransType2) in two real tasks: The
translation of printer manuals; manuals and the translation of the Bulletin of the European
Union. In each task, the following three pairs of languages were involved (in both translation
directions): English?Spanish, English?German, and English?French.
? Departament d?Enginyeria i Cie`ncies dels Computadors, Universitat Jaume I, 12071 Castello? de la Plana,
Spain.
?? Lehrstuhl fu?r Informatik VI, RWTH Aachen University of Technology, D-52056 Aachen, Germany.
? Institut Tecnolo`gic d?Informa`tica, Departament de Sistemes Informa`tics i Computacio?, Universitat
Polite`cnica de Vale`ncia, 46071 Vale`ncia, Spain.
? Institut Tecnolo`gic d?Informa`tica, Departament de Comunicacions, Universitat Polite`cnica de Vale`ncia,
46071 Vale`ncia, Spain.
? Departament de Llenguatges i Sistemes Informa`tics, Universitat Jaume I, 12071 Castello? de la Plana,
Spain.
Submission received: 1 June 2006; revised submission received: 20 September 2007; accepted for publication:
19 December 2007.
? 2008 Association for Computational Linguistics
Computational Linguistics Volume 35, Number 1
1. Introduction to Computer-Assisted Translation
Research in the field of machine translation (MT) aims to develop computer systems
which are able to translate text or speech without human intervention. However,
present translation technology has not been able to deliver fully automated high-quality
translations. Typical solutions to improving the quality of the translations supplied by
an MT system require manual post-editing. This serial process prevents the MT system
from taking advantage of the knowledge of the human translator, and the human
translator cannot take advantage of the adaptive ability of the MT system.
An alternative way to take advantage of the existing MT technologies is to use
them in collaboration with human translators within a computer-assisted translation
(CAT) or interactive framework (Isabelle and Church 1997). Historically, CAT and MT
have been considered different but close technologies (Kay 1997) and more so for one
of the most popular CAT technologies, namely, translation memories (Bowker 2002;
Somers 2003). Interactivity in CAT has been explored for a long time. Systems have
been designed to interact with human translators in order to solve different types
of (lexical, syntactic, or semantic) ambiguities (Slocum 1985; Whitelock et al 1986).
Other interaction strategies have been considered for updating user dictionaries or for
searching through dictionaries (Slocum 1985; Whitelock et al 1986). Specific proposals
can be found in Tomita (1985), Zajac (1988), Yamron et al (1993), and Sen, Zhaoxiong,
and Heyan (1997), among others.
An important contribution to CAT technology, carried out within the TransType
project, is worth mentioning (Foster, Isabelle, and Plamondon 1997; Langlais, Foster,
and Lapalme 2000; Foster 2002; Langlais, Lapalme, and Loranger 2002). It entailed an
interesting focus shift in which interaction is directly aimed at the production of the
target text, rather than at the disambiguation of the source text, as in earlier interactive
systems. The idea proposed in that work was to embed data-driven MT techniques
within the interactive translation environment. The hope was to combine the best of
both paradigms: CAT, in which the human translator ensures high-quality output, and
MT, in which the machine ensures a significant gain in productivity.
Following these TransType ideas, the innovative embedding proposed here con-
sists in using a complete MT system to produce full target sentence hypotheses, or
portions thereof, which can be accepted or amended by a human translator. Each cor-
rect text segment is then used by the MT system as additional information to achieve
further, hopefully improved, suggestions. More specifically, in each iteration, a prefix
of the target sentence is somehow fixed by the human translator and, in the next itera-
tion, the system predicts a best (or n-best) translation suffix(es)1 to complete this prefix.
We will refer to this process as interactive-predictive machine translation (IPMT).
This approach introduces two important requirements: First, the models have to
provide adequate completions and, second, this has to happen efficiently. Taking these
requirements into account, stochastic finite-state transducers (SFSTs), alignment tem-
plates (ATs), and phrase-based models (PBMs) are compared in this work. In previous
works these models have proven adequate for conventional MT (Vidal 1997; Amengual
et al 2000; Ney et al 2000; Toma?s and Casacuberta 2001; Och and Ney 2003; Casacuberta
and Vidal 2004; Och and Ney 2004; Vidal and Casacuberta 2004). This article shows that
1 The terms prefix and suffix are used here to denote any substring at the beginning and end (respectively)
of a string of characters (including spaces and punctuation), with no implication of morphological
significance as is usually implied by these terms in linguistics.
4
Barrachina et al Statistical Computer-Assisted Translation
existing efficient searching algorithms can be adapted in order to provide completions
(rather than full translations) also in a very efficient way.
The work presented here has been carried out in the TransType2 (TT2) project
(SchlumbergerSema S.A. et al 2001), which is considered as a follow-up to the inter-
active MT concepts introduced in the precursory TransType project cited previously.
We should emphasize the novel contributions of the present work with respect
to TransType. First, we show how fully fledged statistical MT (SMT) systems can be
extended to handle IPMT. In particular, the TT2 systems always produce complete
sentence hypotheses on which the human translator can work. This is an important
difference to previous work, in which the use of basic MT techniques only allowed the
prediction of single tokens (c.f., Section 2.2). Second, using fully fledged SMT systems,
we have performed systematic offline experiments to simulate the specific conditions of
interactive translation and we report and study the results of these experiments. Thirdly,
the IPMT systems presented in this article were successfully used in several field trials
with professional translators (Macklovitch, Nguyen, and Silva 2005; Macklovitch 2006).
We should finally mention that the work developed in TT2 has gone beyond con-
ventional keyboard-and-mouse interaction, leading to the development of advanced
multi-modal interfaces. Speech is the most natural form of human communication and
its use as feedback in the IPMT framework has been explored by Vidal et al (2006).
On the other hand, human translators can be faster dictating the translation text rather
than typing it, thus it has also been investigated how to improve system performance
and usability when the user dictates the translation first and then edits the recognized
text (Khadivi, Zolnay, and Ney 2005; Khadivi, Zens, and Ney 2006).
The rest of the article is structured as follows. The next section introduces the
general setting for SMT and IPMT. In Section 3, AT, PBM, and SFST are briefly surveyed
along with the corresponding learning procedures. In Section 4, general search proce-
dures for the previous models are outlined and a detailed description of the extension
of these procedures to IPMT scenarios is presented. Section 5 is devoted to introducing
the tasks used for the assessment of the proposal presented in the previous sections:
the pairs of languages, corpora, and assessment procedures. The results are reported in
Section 6. A discussion of these results and the conclusions which can be drawn from
this work are presented in the final section.
2. Statistical Framework
The statistical or pattern recognition framework constitutes a very successful frame-
work for MT. As we will see here, this framework also proves adequate for IPMT.
2.1 Statistical Machine Translation
Assuming that we are given a sentence s in a source language, the text-to-text translation
problem can be stated as finding its translation t in a target language. Using statistical
decision theory, the best translation is given by the equation2
t? = argmax
t
Pr(t|s) (1)
2 We follow the common notation of Pr(x) for Pr(X = x) and Pr(x|y) for Pr(X = x|Y = y), for any random
variables X and Y. Similarly, Pr() will be used to denote ?true? probability functions, and p() or q() will
denote model approximations.
5
Computational Linguistics Volume 35, Number 1
Using Bayes?s Theorem, we arrive at
t? = argmax
t
Pr(t) ? Pr(s|t) (2)
This equation is generally interpreted as follows. The best translation must be a correct
sentence in the target language that conveys the meaning of the source sentence. The
probability Pr(t) represents the well-formedness of t and it is generally called the
language model probability (n-gram models are usually adopted [Jelinek 1998]). On
the other hand, Pr(s|t) represents the relationship between the two sentences (the source
and its translation). It should be of a high value if the source is a good translation of
the target and of a low value otherwise. Note that the translation direction is inverted
from what would be normally expected; correspondingly the models built around this
equation are often called inverted translation models (Brown et al 1990, 1993). As we
will see in Section 3, these models are based on the notion of alignment. It is interesting to
note that if we had perfect models, the use of Equation (1) would suffice. Given that we
have only approximations, the use of Equation (2) allows the language model to correct
deficiencies in the translation model.
In practice all of these models (and possibly others) are often combined into a log-
linear model for Pr(t | s) (Och and Ney 2004):
t? = argmax
t
{
N
?
i=1
?i ? log fi(t, s)
}
(3)
where fi(t, s) can be a model for Pr(s|t), a model for Pr(t|s), a target language model
for Pr(t), or any model that represents an important feature for the translation. N is the
number of models (or features) and ?i are the weights of the log-linear combination.
When using SFSTs, a different transformation can be used. These transducers
have an implicit target language model (which can be obtained from the finite-state
transducer by dropping the source symbols of each transition (Vidal et al 2005)). There-
fore, this separation is no longer needed. SFSTs model joint probability distributions;
therefore, Equation (1) has to be rewritten as
t? = argmax
t
Pr(s, t) (4)
This is the approach followed in GIATI (Casacuberta et al 2004a; Casacuberta and Vidal
2004), but other models for the joint probability can be adopted.
If the input is a spoken sentence, instead of a written one, the problem becomes
more complex; we will not deal with this here. The interested reader may consult
Amengual et al (2000), Ney et al (2000), or Casacuberta et al (2004a, 2004b), for
instance.
2.2 Statistical Interactive-Predictive Machine Translation
Unfortunately, current models and therefore the systems which can be built from them
are still far from perfect. This implies that, in order to achieve good, or even acceptable,
translations, manual post-editing is needed. An alternative to this serial approach (first
MT, then manual correction) is given by the IPMT paradigm. Under this paradigm,
translation is considered as an iterative process where human and computer activity
6
Barrachina et al Statistical Computer-Assisted Translation
Figure 1
Typical example of IPMT with keyboard interaction. The aim is to translate the English sentence
Click OK to close the print dialog into Spanish. Each step starts with a previously fixed target
language prefix tp, from which the system suggests a suffix t?s. Then the user accepts a part of this
suffix (a) and types some keystrokes (k), possibly in order to amend the remaining part of ts.
This produces a new prefix, composed by the prefix from the previous iteration and the accepted
and typed text, (a) (k), to be used as tp in the next step. The process ends when the user enters
the special keystroke ?#?. System suggestions are printed in italics and user input in boldface
typewriter font. In the final translation t, text that has been typed by the user is underlined.
are interwoven. This way, the models take into account both the input sentence and the
corrections of the user.
As previously mentioned, this idea was originally proposed in the TransType
project (Foster, Isabelle, and Plamondon 1997; Langlais, Foster, and Lapalme 2000;
Langlais, Lapalme, and Loranger 2002). In that project, the parts proposed by the sys-
tems were produced using a linear combination of a target language model (trigrams)
and a lexicon model (so-called IBM-1 or -2) (Langlais, Lapalme, and Loranger 2002). As
a result, TransType allowed only single-token completions, where a token could be either
a word or a short sequence of words from a predefined set of sequences. This proposal
was extended to complete full target sentences in the TT2 project, as discussed hereafter.
The approach taken in TT2 is exemplified in Figure 1. Initially, the system provides
a possible translation. From this translation, the user marks a prefix as correct and
provides, as a hint, the beginning of the rest of the translation. Depending on the system
or the user preferences, the hint can be the next word or some letters from it (in the
figure, hints are assumed to be words and are referred to as k). Let us use tp for the prefix
validated by the user together with the hint. The system now has to produce (predict)
a suffix ts to complete the translation. The cycle continues with a new validation and
hint from the user until the translation is completed. This justifies our choice of the term
?interactive-predictive machine translation? for this approach.
The crucial step of the process is the production of the suffix. Again, decision theory
tells us to maximize the probability of the suffix given the available information. That
is, the best suffix will be
t?s = argmax
ts
Pr(ts|s, tp) (5)
which can be straightforwardly rewritten as
t?s = argmax
ts
Pr(tp, ts|s) (6)
7
Computational Linguistics Volume 35, Number 1
Note that, because tpts = t, this equation is very similar to Equation (1). The main
difference is that the argmax search now is performed over the set of suffixes ts that
complete tp instead of complete sentences (t in Equation (1)). This implies that we can
use the same models if the search procedures are adequately modified (Och, Zens, and
Ney 2003).
The situation with respect to finite-state models is similar. Now, Equation (5) is
rewritten as
t?s = argmax
ts
Pr(tp, ts, s) (7)
which allows the use of the same models as in Equation (4) as long as the search
procedure is changed appropriately (Cubel et al 2003, 2004; Civera et al 2004a,
2004b).
3. Statistical and Finite-State Models
The models used are presented in the following subsections: Section 3.1 for the condi-
tional distribution Pr(s|t) in Equation (2) and Section 3.2 for the joint distribution Pr(s, t)
in Equation (4).
3.1 Statistical Alignment Models
The translation models which Brown et al (1993) introduced to deal with Pr(s|t) in
Equation (2) are based on the concept of alignment between the components of a pair
(s, t) (thus they are called statistical alignment models). Formally, if the number of
the source words in s is J and the number of target words in t is I, an alignment is a
function a : {1, ..., J} ? {0, ..., I}. The image of j by a will be denoted as aj, in which the
particular case aj = 0 means that the position j in s is not aligned with any position of t.
By introducing the alignment as a hidden variable in Pr(s|t),
Pr(s|t) =
?
a
Pr(s, a|t) (8)
The alignment that maximizes Pr(s, a|t) is shown to be very useful in practice for
training and for searching.
Different approaches have been proposed for modeling Pr(s, a|t) in Equation (8):
Zero-order models such as model 1, model 2, and model 3 (Brown et al 1993) and the first-
order models such as model 4, model 5 (Brown et al 1993), hidden Markov model (Ney
et al 2000), and model 6 (Och and Ney 2003).
In all these models, single words are taken into account. Moreover, in practice the
summation operator is replaced with the maximization operator, which in turn reduces
the contribution of each individual source word in generating a target word. On the
other hand, modeling word sequences rather than single words in both the alignment
and lexicon models cause significant improvement in translation quality (Och and Ney
8
Barrachina et al Statistical Computer-Assisted Translation
2004). In this work, we use two closely related models: ATs (Och and Ney 2004) and
PBMs (Toma?s and Casacuberta 2001; Koehn, Och, and Marcu 2003; Zens and Ney 2004).
Both models are based on bilingual phrases3 (pairs of segments or word sequences)
in which all words within the source-language phrase are aligned only to words of
the target-language phrase and vice versa. Note that at least one word in the source-
language phrase must be aligned to one word of the target-language phrase, that is,
there are no empty phrases similar to the empty word of the word-based models. In
addition, no gaps and no overlaps between phrases are allowed.
We introduce some notation to deal with phrases. As before, s denotes a source-
language sentence; ?s denotes a generic phrase in s, and ?sk the kth phrase in s. sj denotes
the jth source word in s; s
j?
j denotes the contiguous sequence of words in s beginning
at position j and ending at position j? (inclusive); obviously, if s has J words, s
J
1 denotes
the whole sentence s. An analogous notation is used for target words, phrases, and
sequences in target sentence t.
3.1.1 Alignment Templates. The ATs are based on the bilingual phrases but they are
generalized by replacing words with word classes and by storing the alignment in-
formation for each phrase pair. Formally, an AT Z is a triple (S,T,?a), where S and
T are a source class sequence and a target class sequence, respectively, and ?a is an
alignment from the set of positions in S to the set of positions in T.4 Mapping of source
and target words to bilingual word classes is automatically trained using the method
described by Och (1999). The method is actually an unsupervised clustering method
which partitions the source and target vocabularies, so that assigning words to classes
is a deterministic operation. It is also possible to employ parts-of-speech or semantic
categories instead of the unsupervised clustering method used here. More details can
be found in Och (1999) and Och and Ney (2004). However, it should be mentioned
that the whole AT approach (and similar PBM approaches as they are now called) is
independent of the word clustering concept. In particular, for large training corpora,
omitting the word clustering in the AT system does not much affect the translation
accuracy.
To arrive at our translation model, we first perform a segmentation of the source
and target sentences into K ?blocks? dk ? (ik; bk, jk) (ik ? {1, . . . , I} and jk, bk ? {1, . . . , J}
for 1 ? k ? K). For a given sentence pair (sJ1, t
I
1), the kth bilingual segment (?sk,
?tk)
is (s
jk
bk?1+1
, t
ik
ik?1+1
) (Och and Ney 2003). The AT Zk = (Sk,Tk,?ak) associated with the kth
bilingual segment is: Sk the sequence of word classes in ?sk; Tk the sequence of word
classes in ?tk, and ?ak the alignment between positions in a source class sequence S and
positions in a target class sequence T.
For translating a given source sentence s we use the following decision rule as an
approximation to Equation (1):
(I?, t?I?1) = argmax
I,tI1
{
max
K,dK1 ,?a
K
1
log PAT(s
J
1, t
I
1; d
K
1 ,?a
K
1 )
}
(9)
3 Although the term ?phrase? has a more restricted meaning, in this article it refers to a word sequence.
4 Note that the phrases in an AT are sequences of word classes rather than words, which motivates the use
of a different notation.
9
Computational Linguistics Volume 35, Number 1
We use a log-linear model combination:
log PAT(s
J
1, t
I
1; d
K
1 ,?a
K
1 ) =
I
?
i=1
[
?1 + ?2 ? log p(ti|t
i?1
i?2)+ ?3 ? log p(Ti|T
i?1
i?4 )
]
+
K
?
k=1
[ ?4 + ?5 ? log q(bk|jk?1)+ ?6 ? log p(Tk,?ak|Sk)+
ik
?
i=ik?1+1
?7 ? log p(ti|?sk,?ak) ] (10)
with weights ?i, i = 1, ? ? ? , 7. The weights ?1 and ?4 play a special role and are used
to control the number I of words and number K of segments for the target sentence
to be generated, respectively. The log-linear combination uses the following set of
models:
 p(ti|t
i?1
i?2): Word-based trigram language model
 p(Ti|T
i?1
i?4 ): Class-based five-gram language model
 p(Tk,?ak|Sk): AT at class level, model parameters are estimated directly
from frequency counts in a training corpus
 p(ti|?sk,?ak): Single word model based on a statistical dictionary and ?ak. As
in the preceding model, the model parameters are estimated by using
frequency counts
 q(bk|jk?1) = e|bk?jk?1+1|: Re-ordering model using absolute j distance of
the phrases.
As can be observed, all models are implemented as feature functions which depend on
the source and the target language sentences, as well as on the two hidden variables
(?aK1 , b
K
1 ). Other feature functions can be added to this sort of model as needed. For a
more detailed description the reader is referred to Och and Ney (2004).
Learning alignment templates. To learn the probability of applying an AT, p(Z =
(S,T,?a)|?s ), all bilingual phrases that are consistent with the segmentation are extracted
from the training corpus together with the alignment within these phrases. Thus, we
obtain a count N(Z) of how often an AT occurred in the aligned training corpus. Using
the relative frequency
p(Z) = (S,T,?a)|?s) =
N(Z) ? ?(S,C(?s))
N(C(?s))
(11)
we estimate the probability of applying an AT Z to translate the source language phrase
?s, in which ? is Kronecker?s delta function. The class function C maps words onto their
10
Barrachina et al Statistical Computer-Assisted Translation
classes. To reduce the memory requirements, only probabilities for phrases up to a
maximal length are estimated, and phrases with a probability estimate below a certain
threshold are discarded.
The weights ?i in Equation (10) are usually estimated using held-out data with
respect to the automatic evaluation metric employed using the downhill simplex al-
gorithm from Press et al (2002).
3.1.2 Phrase-Based Models. A simple alternative to AT has been introduced in recent
works: The PBM approach (Toma?s and Casacuberta 2001; Marcu and Wong 2002; Zens,
Och, and Ney 2002; Toma?s and Casacuberta 2003; Zens and Ney 2004). These methods
learn the probability that a sequence of contiguous words?the source phrase?(as a
whole unit) in a source sentence is a translation of another sequence of contiguous
words?the target phrase?(as a whole unit) in the target sentence. In this case, the
statistical dictionaries of single word pairs are substituted by statistical dictionaries of
bilingual phrases or bilingual segments. These models are simpler than ATs, because no
alignments are assumed between word positions inside a bilingual segment and word
classes are not used in the definition of a bilingual phrase.
The simplest formulation is for monotone PBMs (Toma?s and Casacuberta 2007),
assuming a uniform distribution of the possible segmentations of the source and of the
target sentences. In this case, the approximation to Equation (1) is:
(I?, t?I?1) = argmax
I,tI1
{
max
K,dK1
log PPBM(s
J
1, t
I
1; d
K
1 )
}
(12)
In our implementation of this approach, we have also adopted a log-linear model
log PPBM(s
J
1, t
I
1; d
K
1 ) =
I
?
i=1
[
?1 + ?2 ? log p(ti|t
i?1
i?2)+ ?3 ? log p(Ti|T
i?1
i?4 )
]
+
K
?
k=1
[
?4 + ?5 ? log p(?tk|?sk)
]
(13)
with weights ?i, i = 1, ? ? ? , 5. The weights ?1 and ?4 play a special role and are used
to control the number I of words and number K of segments for the target sentence
to be generated, respectively. The log-linear combination uses the following set of
models:
 p(ti|t
i?1
i?2): Word-based trigram language model
 p(Ti|T
i?1
i?4 ): Class-based five-gram language model
 p(?tk|?sk): Statistical dictionary of bilingual phrases.
11
Computational Linguistics Volume 35, Number 1
If segment re-ordering is desired (non-monotone models), the probability of phrase-
alignment q can be introduced (a first-order distortion model is assumed):
log PPBM(s
J
1, t
I
1; d
K
1 ) =
I
?
i=1
[
?1 + ?2 ? log p(ti|t
i?1
i?2)+ ?3 ? log p(Ti|T
i?1
i?4 )
]
+
K
?
k=1
[
?4 + ?5 ? log p(?tk|?sk)+ ?6 ? log q(bk|jk?1)
]
(14)
with the additional model q, similar to the one used for AT.
Learning phrase-based alignment models. The parameters of each model and the weights
?i in Equations (13) and (14) have to be estimated. There are different approaches to
estimating the parameters of each model (Toma?s and Casacuberta 2007). Some of these
techniques correspond to a direct learning of the parameters from a sentence-aligned
corpus using a maximum likelihood approach (Toma?s and Casacuberta 2001; Marcu
and Wong 2002). Other techniques are heuristics based on the previous computation
of word alignments in the training corpus (Zens, Och, and Ney 2002; Koehn, Och, and
Marcu 2003). On the other hand, as for AT, the weights ?i in Equation (13) are usually
optimized using held-out data.
3.2 Stochastic Finite-State Transducers
SFSTs constitute an important framework in syntactic pattern recognition and nat-
ural language processing. The simplicity of finite-state models has given rise to some
concerns about their applicability to real tasks. Specifically in the field of language
translation, it is often argued that natural languages are so complex that these simple
models are never able to cope with the required source-target mappings. However, one
should take into account that the complexity of the mapping between the source and
target domains of a transducer is not always directly related to the complexity of the
domains themselves. Instead, a key factor is the degree of monotonicity or sequentiality
between source and target subsequences of these domains (Casacuberta, Vidal, and
Pico? 2005). Finite-state transducers have been shown to be adequate to handle complex
mappings efficiently (Berstel 1979) and SFSTs are closely related to monotone PBMs.
In Equation (4), Pr(s, t) can be modeled by an SFST T, which is defined as a tuple
??,?,Q, q0, p, f ?, where ? is a finite set of source symbols,? is a finite set of target symbols
(? ?? = ?), Q is a finite set of states, q0 is the initial state, p and f are two functions
p : Q ? ??? ? Q ? [0, 1] (for the probabilities of transitions) and f : Q ? [0, 1] (for the
probabilities of final states) that satisfy ?q ? Q:
f (q) +
?
(s,?t,q? )?????Q
p(q, s,?t, q?) = 1 (15)
Given T, a path with J transitions associated with the translation pair (s, t) ?
?? ??? is a sequence of transitions ? = (q0, s1 , t?1, q1) (q1, s2 , t?2, q2) (q2, s3 , t?3, q3) . . .
(qJ?1, sJ , t?J, qJ ), such that s1 s2 . . . sJ = s and t?1 t?2 . . . t?J = t. The probability of a path is
12
Barrachina et al Statistical Computer-Assisted Translation
the product of its transition probabilities, times the final-state probability of the last
state in the path:
PT(?) =
J
?
j=1
p(qj?1, sj , t?j, qj) ? f (qJ ) (16)
The probability of a translation pair (s, t) according to T is then defined as the sum of
the probabilities of all the paths associated with (s, t):
PT(s, t) =
?
?
PT(?) (17)
Learning finite-state transducers. There are different families of techniques to train an
SFST from a parallel corpus of source?target sentences (Casacuberta and Vidal 2007).
One of the techniques that has been adopted in this work is the grammatical inference
and alignments for transducer inference (GIATI) technique. This technique is in the
category of hybrid methods which use statistical techniques to guide the SFST structure
learning and simultaneously train the associated probabilities.
Given a finite sample of string pairs, the inference of SFSTs using the GIATI tech-
nique is performed as follows (Casacuberta and Vidal 2004; Casacuberta, Vidal, and
Pico? 2005): i) Building training strings: Each training pair is transformed into a single
string from an extended alphabet to obtain a new sample of strings. ii) Inferring a
(stochastic) regular grammar. Typically, a smoothed n-gram is inferred from the sample
of strings obtained in the previous step. iii) Transforming the inferred regular grammar
into a transducer: The symbols associated with the grammar rules are converted back
into input/output symbols, thereby transforming the grammar inferred in the previous
step into a transducer. The transformation of a parallel corpus into a string corpus
is performed using statistical alignments. These alignments are obtained using the
GIZA++ software (Och and Ney 2003).
4. Searching
Searching is an important computational problem in SMT. Algorithmic solutions de-
veloped for SMT can be adapted to the IPMT framework. The main general search
procedures for each model in Section 3 are presented in the following subsections,
each followed by a detailed description of the necessary adaptations to the interactive
framework.
4.1 Searching with Alignment Templates
In offline MT, the generation of the best translation for a given source sentence s is
carried out by producing the target sentence in left-to-right order using the model of
Equation (10). At each step of the generation algorithm we maintain a set of active
hypotheses and choose one of them for extension. A word of the target language is
then added to the chosen hypothesis and its costs get updated. This kind of generation
fits nicely into a dynamic programming (DP) framework, as hypotheses which are
indistinguishable by both language and translation models (and that have covered
the same source positions) can be recombined. Because the DP search space grows
13
Computational Linguistics Volume 35, Number 1
Figure 2
Example of a word graph for the source German sentence was hast du gesagt? (English reference
translation: ?what did you say??).
exponentially with the size of the input, standard DP search is prohibitive, and we resort
to a beam-search heuristic.
4.1.1 Adaptation to the Interactive-Predictive Scenario. The most important modification
is to rely on a word graph that represents possible translations of the given source
sentence. This word graph is generated once for each source sentence. During the
process of human?machine interaction the system makes use of this word graph in
order to complete the prefixes accepted by the human translator. In other words, after
the human translator has accepted a prefix string, the system finds the best path in the
word graph associated with this prefix string so that it is able to complete the target
sentence. Using the word graph in such a way, the system is able to interact with the
human translator in a time efficient way. In Och, Zens, and Ney (2003), an efficient
algorithm for interactive generation using word graphs was presented. A word graph
is a weighted directed acyclic graph, in which each node represents a partial translation
hypothesis and each edge is labeled with a word of the target sentence and is weighted
according to the language and translation model scores. In Ueffing, Och, and Ney (2002),
the authors give a more detailed description of word graphs and show how they can be
easily produced as a by-product of the search process. An example of a word graph is
shown in Figure 2.
The computational cost of this approach is much lower, as the whole search for the
translation must be carried out only once, and the generated word graph can be reused
for further completion requests.
For a fixed source sentence, if no pruning is applied in the production of the word
graph, it represents all possible sequences of target words for which the posterior
probability is greater than zero, according to the models used. However, because of
the pruning generally needed to render the problem computationally feasible, the
resulting word graph only represents a subset of the possible translations. Therefore,
it may happen that the user sets prefixes which cannot be found in the word graph. To
circumvent this problem some heuristics need to be implemented.
First, we look for the node with minimum edit distance to the prefix except for
its last (partial) word.5 Then we select the completion path which starts with the last
5 The edit distance concept for finding the prefix string in a word graph could be refined by casting the edit
distance operations into a suitable probabilistic model.
14
Barrachina et al Statistical Computer-Assisted Translation
(partial) word of the prefix and has the best backward score?this is the score associated
with a path going from the node to the final node. Now, because the original word graph
may not be compatible with the new information provided by the prefix, it might be
impossible to find a completion in this word graph due to incompatibility with the
last (partial) word in the prefix. This problem can be solved to a certain degree by
searching for a completion of the last word with the highest probability using only the
language model. This supplementary heuristic to the usual search increases the perfor-
mance of the system, because some of the rejected words in the pruning process can
be recovered.
A desirable feature of an IPMT system is the possibility of producing a list of
alternative target suffixes, instead of only one. This feature can be easily added by
computing the n-best hypotheses. Of course, these n-best hypotheses do not refer to
the whole target sentence, but only to the suffixes. However, the problem is that in
many cases the sentence hypotheses in the n-best list differ in only one or two words.
Therefore, we introduce the additional requirement that the first four words of the n-
best hypotheses must be different.
4.2 Searching with Phrase-Based Models
The generation of the best translation with PBMs is similar to the one described in the
previous section. Each hypothesis is composed of a prefix of the target sentence, a subset
of source positions that are aligned with the positions of the prefix of the target sentence,
and a score. In this case, we adopted an extension of the best-first strategy where the
hypotheses are stored in several sorted lists, depending on which words in the source
sentence have been translated. This strategy is related to the well-known multi-stack-
decoding algorithm (Berger et al 1996; Toma?s and Casacuberta 2004). In each iteration,
the algorithm extends the best hypothesis from each available list.
While target words are always generated from left to right, there are two alter-
natives in the source word extraction: Monotone search, which takes the source words
from left to right, and non-monotone search, which can take source words in any
order.
4.2.1 Adaptation to the Interactive-Predictive Scenario. Only a simple modification of this
search algorithm is necessary: If the new extended hypothesis is not compatible with
the fixed target prefix, tp, then this hypothesis is not considered. This compatibility is
verified at the character level; therefore the user does not need to type the whole target
word at the end of the target prefix.
In the interactive scenario, speed is a critical aspect. In the PBM approach, monotone
search is much faster than non-monotone search in the tasks which are considered in this
work (Toma?s and Casacuberta 2006). However, monotone search presents a problem for
interactive operation: If a user introduces a prefix that cannot be obtained in a monotone
way from the source, the search algorithm is not able to complete this prefix. In order
to solve this problem without losing computational efficiency, we use the following ap-
proach: Non-monotone search is used for target prefixes, whereas completions (suffixes)
are generated using monotone search.
As for AT models, a list of target suffixes can also be produced. This list can be
obtained easily by keeping the n-best hypotheses in each sorted list. To avoid generating
very similar hypotheses in the n-best list, we apply the following procedure: Starting
from the n-best list resulting from the normal search, we first add hypotheses obtained
15
Computational Linguistics Volume 35, Number 1
by translating a single untranslated word from the source, along with hypotheses
consisting of a single high-probability word according to the target language model; we
then re-order the hypotheses, maximizing the diversity at the beginning of the suffixes,
and keep only the n first hypotheses in the re-ordered list.
4.3 Searching with Stochastic Finite-State Transducers
As discussed by Pico? and Casacuberta (2001), the computation of Equation (4) for SFSTs
under a maximum approximation (i.e., using maximization in Equation (17) instead
of the sum) amounts to a conventional Viterbi search. The algorithm finds the most
probable path among those paths in the SFST which are compatible with the source
sentence s. The corresponding translation, t?, is simply obtained by concatenating the
target strings of the edges of this path.
4.3.1 Adaptation to the Interactive-Predictive Scenario. Here, Equation (7) is used wherein
the optimization is performed over the set of target suffixes (completions) rather than
the set of complete target sentences. To solve this maximization problem, an approach
similar to that proposed for AT in Section 4.1 has been adopted.
First, given the source sentence, a word graph is extracted from the SFST. In this
case, the word graph is just (a pruned version of) the Viterbi search trellis obtained when
translating the whole source sentence. The main difference between the word graphs
generated with ATs and SFSTs is how the nodes and edges are defined in each case. On
the one hand, the nodes are defined as partial hypotheses of the search procedure in
the AT approach, whereas the nodes in the case of SFSTs can be directly mapped into
states in the SFST representing a joint (source word/target string) language model. On
the other hand, the scores associated with the edges in the AT approach are computed
from a combination of the language and translation models, whereas in the case of
SFSTs these scores simply come from the joint language model estimated by the GIATI
technique.
Once the word graph has been generated, the search for the most probable com-
pletion as stated in Equation (6) is carried out in two steps, in a similar way to that
explained for the AT approach. In this case, the computation entailed by both the edit-
distance (prefix error-correcting) and the remaining search is significantly accelerated
by visiting the nodes in topological order and by the incorporation of the beam-search
technique (Amengual and Vidal 1998). Moreover, the error-correcting algorithm takes
advantage of the incremental way in which the user prefix is generated, parsing only
the new suffix appended by the user in the last interaction.
It may be the case that a user prefix ends in an incomplete word during the inter-
active translation process. Therefore, it is necessary to start the translation completion
with a word whose prefix matches this unfinished word. The proposed algorithm thus
searches for such a word. First, it considers the target words of the edges leaving
the nodes returned by the error-correcting algorithm. If this initial search fails, then
a matching word is looked up in the word-graph vocabulary. Finally, as a last resort,
the whole transducer vocabulary is taken into consideration to find a matching word;
otherwise this incomplete word is treated as an entire word.
This error-correcting algorithm returns a set of nodes from which the best comple-
tion would be selected according to the best backward score. Moreover, n-best com-
pletions can also be produced. Among many weighted-graph n-best path algorithms
which are available, the recursive enumeration algorithm presented in Jime?nez and
16
Barrachina et al Statistical Computer-Assisted Translation
Marzal (1999) was adopted for its simplicity in calculating best paths on demand and its
smooth integration with the error-correcting algorithm.
5. Experimental Framework
The models and search procedures introduced in the previous sections were assessed
through a series of IPMT experiments with different corpora. These corpora, along with
the corresponding pre- and post-processing and assessment procedures, are presented
in this section.
5.1 Pre- and Post-Processing
Usually, MT models are trained on a pre-processed version of an original corpus. Pre-
processing provides a simpler representation of the training corpus which makes token
or word forms more homogeneous. In this way automatic training of the MT models is
boosted, and the amount of computation decreases.
The pre-processing steps are: tokenization, removing unnecessary case information,
and tagging some special tokens like numerical sequences, e-mail addresses, and URLs
(?categorization?). In translation from a source language to a target language, there are
some words which are translated identically (because they have the same spelling in
both languages). Therefore, we identify them in the corpus and replace them with some
generic tags to help the translation system.
Post-processing takes place after the translation in order to hide the internal repre-
sentation of the text from the user. Thus, the user will only work with an output which
is very similar to human-generated texts. In detail, the post-processing steps are: de-
tokenization, true-casing, and replacing the tags with their corresponding words.
In an IPMT scenario, the pre-/post-processing must run in real-time and should be
reversible as much as possible. In each human?machine interaction, the current prefix
has to be pre-processed for the interactive-predictive engine and then the generated
completion has to be post-processed for the user. It is crucial that the pre-processing of
prefixes is fully compatible with the training corpus.
5.2 Xerox and EU Corpora
Six bilingual corpora were used for two different tasks and three different language
pairs in the framework of the TT2 project (SchlumbergerSema S.A. et al 2001).
The language pairs involved were English?Spanish, English?French, and English?
German (Khadivi and Goutte 2003), and the tasks were Xerox (Xerox printer manuals)
and EU (Bulletin of the European Union).
The three Xerox corpora were obtained from different user manuals for Xerox print-
ers (SchlumbergerSema S.A. et al 2001). The main features of these corpora are shown
in Table 1. Dividing the corpora into training and test sets was performed by randomly
selecting (without replacement) a specified amount of test sentences and leaving the
remaining ones for training. It is worth noting that the manuals were not the same in
each pair of languages. Even though all training and test sets have similar size, this
probably explains why the perplexity varies considerably over the different language
pairs. The vocabulary size was computed using the tokenized and true-case corpus.
The three bilingual EU corpora were extracted from the Bulletin of the European
Union, which exists in all official languages of the European Union (Khadivi and Goutte
17
Computational Linguistics Volume 35, Number 1
Table 1
The Xerox corpora. For all the languages, the training/test full-sentence overlap and the rate of
out-of-vocabulary test-set words were less than 10% and 1%, respectively. Trigram models were
used to compute the test word perplexity. (K and M denote thousands and millions,
respectively.)
English/Spanish English/German English/French
T
ra
in Sent. pairs (K) 56 49 53
Running words (M) 0.7/0.7 0.6/0.5 0.6/0.7
Vocabulary (K) 15/17 14/25 14/16
T
e
st
Sentences (K) 1.1 1.0 1.0
Running words (K) 8/10 12/12 11/12
Running chars. (K) 46/59 63/73 56/65
Perplexity 99/58 57/93 109/70
2003) and is publicly available on the Internet. The corpora used in the experiments
which are described subsequently were again acquired and processed in the framework
of the TT2 project. The main features of these corpora are shown in Table 2. The
vocabulary size and the training and test set partitions were obtained in a similar way
as with the Xerox corpora.
5.3 Assessment
In all the experiments reported in this article, system performance is assessed by
comparing test sentence translations produced by the translation systems with the
corresponding target language references of the test set. Some of the computed assess-
ment figures measure the quality of the translation engines without any system?user
interactivity:
 Word error rate (WER): The minimum number of substitution, insertion,
and deletion operations needed to convert the word strings produced by
the translation system into the corresponding single-reference word
strings. WER is normalized by the overall number of words in the
reference sentences (Och and Ney 2003).
Table 2
The EU corpora. For all the languages, the training/test full-sentence overlap and the rate of
out-of-vocabulary test-set words were less than 3% and 0.2%, respectively. Trigram models were
used to compute the test word perplexity. (K and M denote thousands and millions,
respectively.)
English/Spanish English/German English/French
T
ra
in Sent. pairs (K) 214 223 215
Running words (M) 5.2/5.9 5.7/5.4 5.3/6.0
Vocabulary (K) 84/97 86/153 84/91
T
e
st
Sentences (K) 0.8 0.8 0.8
Running words (K) 20/23 20/19 20/23
Running chars. (K) 119/135 120/134 119/134
Perplexity 58/46 57/87 58/45
18
Barrachina et al Statistical Computer-Assisted Translation
 Bilingual evaluation understudy (BLEU): This is based on the coverage of
n-grams of the hypothesized translation which occur in the reference
translations (Papineni et al 2001).
Other assessment figures are aimed at estimating the effort needed by a human
translator to produce correct translations using the interactive system. To this end, the
target translations which a real user would have in mind are simulated by the given
references. The first translation hypothesis for each given source sentence is compared
with a single reference translation and the longest common character prefix (LCP) is
obtained. The first non-matching character is replaced by the corresponding reference
character and then a new system hypothesis is produced. This process is iterated until
a full match with the reference is obtained.
Each computation of the LCP would correspond to the user looking for the next
error and moving the pointer to the corresponding position of the translation hypothesis.
Each character replacement, on the other hand, would correspond to a keystroke of
the user. If the first non-matching character is the first character of the new system
hypothesis in a given iteration, no LCP computation is needed; that is, no pointer
movement would be made by the user. Bearing this in mind, we define the following
interactive-predictive performance measures:
 Keystroke ratio (KSR): Number of keystrokes divided by the total number
of reference characters.
 Mouse-action ratio (MAR): Number of pointer movements plus one more
count per sentence (aimed at simulating the user action
needed to accept the final translation), divided by the total number of
reference characters.
 Keystroke and mouse-action ratio (KSMR): KSR plus MAR.
Note that KSR estimates only the user?s actions on the keyboard whereas MAR
estimates actions for which the user would typically use the mouse. From a user
point of view the two types of actions are different and require different types of
effort (Macklovitch, Nguyen, and Silva 2005; Macklovitch 2006). In any case, as an
approximation, KSMR accounts for both KSR and MAR, assuming that both actions
require a similar effort.
In the case of SMT systems, it is well known that an automatically computed
quality measure like BLEU correlates quite well with human judgment (Callison-Burch,
Osborne, and Koehn 2006). In the case of IPMT, we should keep in mind that the
main goal of (automatic) assessment is to estimate the effort of the human translator.
Moreover, translation quality is not an issue here, because the (simulated) human
intervention ensures ?perfect? translation results. The important question is whether
the (estimated) productivity of the human translator can really be increased or not by
the IPMT approach. In order to answer this question, the KSR and KSMR measures will
be used in the IPMT experiments to be reported in the next section.
In order to show the statistical significance of the results, all the assessment figures
reported in the next section are accompanied by the corresponding 95% confidence
intervals. These intervals have been computed using bootstrap sampling techniques, as
proposed by Bisani and Ney (2004), Koehn (2004), and Zhang and Vogel (2004).
19
Computational Linguistics Volume 35, Number 1
6. Results
Two types of results are reported for each corpus and for each translation approach.
The first are conventional MT results, obtained as a reference to give an idea of the
?classical? MT difficulty of the selected tasks. The second aim is to assess the interactive
MT (IPMT) approach proposed in this article.
The results are presented in different subsections. The first two subsections present
the MT and IPMT results for the 1-best translation obtained by the different techniques
in the Xerox and EU tasks, respectively. The third subsection presents further IPMT
results for the 5-best translations on a single pair of languages.
Some of these results may differ from results presented in previous works (Cubel
et al 2003; Och, Zens, and Ney 2003; Civera et al 2004a; Cubel et al 2004; Bender
et al 2005). The differences are due to variations in the pre-/post-processing procedures
and/or recent improvements of the search techniques used by the different systems.
6.1 Experiments with the Xerox Corpora
In this section, the translation results obtained using ATs, PBMs, and SFSTs for all six
language pairs of the Xerox corpus are reported. Word-based trigram and class-based
five-gram target-language models were used for the AT models (the parameters of the
log-linear model are tuned so as to minimize WER on a development corpus); word-
based trigram target-language models were used for PBMs and trigrams were used to
infer GIATI SFSTs.
Off-line MT Results. MT results with ATs, PBMs, and SFSTs are presented in Figure 3.
Results obtained using the PBMs are slightly but consistently better that those achieved
using the other models. In general, the different techniques perform similarly for the
various translation directions. However, the English?Spanish language pair is the one
for which the best translations can be produced.
IPMT Results. Performance has been measured in terms of KSRs and MARs (KSR and
MAR are represented as the lower and upper portions of each bar, respectively, and
KSMR is the whole bar length). The results are shown in Figure 4.
Figure 3
Off-line MT results (BLEU and WER) for the Xerox corpus. Segments above the bars show the
95% confidence intervals. En = English; Sp = Spanish; Fr = French; Ge = German.
20
Barrachina et al Statistical Computer-Assisted Translation
Figure 4
IPMT results for the Xerox corpus. In each bar, KSR is represented by the lower portion, MAR by
the upper portion, and KSMR is the whole bar. Segments above the bars show the 95%
confidence intervals. En = English; Sp = Spanish; Fr = French; Ge = German.
According to these results, a human translator assisted by an AT-based or a SFST-
based interactive system would only need an effort equivalent to typing about 20% of
the characters in order to produce the correct translations for the Spanish to English
task; or even less than 20% if a PBM-based system is used.
For the Xerox task, off-line MT performance and IPMT results show similar tenden-
cies. The PBMs show better performance for both the off-line MT and for the IPMT
assessment figures. The AT and SFST models perform more or less equivalently. In
both scenarios, the best results were achieved for the Spanish?English language pair
followed by French?English and German?English.
The computing times needed by all the systems involved in these experiments were
well within the range of the on-line operational requirements. The average initial time
for each source test sentence was very low (less than 50 msec) for PBMs and SFSTs
and adequate for ATs (772 msec). In the case of ATs and SFSTs, this included the time
required for the generation of the initial word-graph of each sentence. Moreover, the
most critical times incurred in the successive IPMT iterations were very low in all
the cases: 18 msec for ATs, 99 msec for PBMs, and 9 msec for SFSTs. Note, however,
that these average times are not exactly comparable because of the differences in the
computer hardware used by each system (2 Ghz AMD, 1.5 Ghz Pentium, and 2.4 Ghz
Pentium for ATs, PBMs, and SFSTs, respectively).
6.2 Experiments with the EU Corpora
The translation results using the AT, PBM, and SFST approaches for all six language
pairs of the EU corpus are reported in this section. As for the Xerox corpora, in the AT
experiments, word-based trigram and class-based five-gram target-language models
were used; in the PBM experiments, word-based trigram and class-based five-gram
target-language models were also used and five-grams were used to infer GIATI SFSTs.
Off-line MT Results. Figure 5 presents the results obtained using ATs, PBMs, and SFSTs.
Generally speaking, the results are comparable to those obtained on the Xerox corpus
with the exception of the English?Spanish language pair, which were better. With these
corpora, the best results were obtained with the ATs and PBMs for all the pairs and the
best translation direction was French-to-English with all the models used.
21
Computational Linguistics Volume 35, Number 1
Figure 5
Off-line MT results (BLEU and WER) for the EU corpus. Segments above the bars show the 95%
confidence intervals. En = English; Sp = Spanish; Fr = French; Ge = German.
IPMT Results. Figure 6 shows the performance of the AT, PBM, and SFST systems in
terms of KSRs and MARs in a similar way as for the Xerox corpora.
As in the MT experiments, the results are comparable to those obtained on the Xerox
corpus, with the exception of the English?Spanish pair. Similarly, as in MT, the best
results were obtained for the French-to-English translation direction.
Although EU is a more open-domain task, the results demonstrate again the poten-
tial benefit of computer-assisted translation systems. Using PBMs, a human translator
would only need an effort equivalent to typing about 20% of the characters in order
to produce the correct translations for French-to-English translation direction, whereas
for ATs and SFSTs the effort would be about 30%. For the other language pairs, the
efforts would be about 20?30% and 35% of the characters for PBMs and ATs/SFSTs,
respectively.
The systemwise correlation between MT and IPMT results on this corpus is not
as clear as in the Xerox case. One possible cause is the much larger size of the EU
corpus compared to the Xerox corpus. In order to run the EU experiments within rea-
sonable time limits, all the systems have required the use of beam search and/or other
Figure 6
IPMT results for the EU corpus. In each bar, KSR is represented by the lower portion, MAR by
the upper portion and KSMR is the whole bar. Segments above the bars show the 95%
confidence intervals. En = English; Sp = Spanish; Fr = French; Ge = German.
22
Barrachina et al Statistical Computer-Assisted Translation
Table 3
IPMT results (%) for the Xerox corpus (English?Spanish) using ATs, PBMs, and SFSTs for the
1-best hypothesis and 5-best hypotheses. 95% confidence intervals are shown.
1-best 5-best
Technique KSR KSMR KSR KSMR
AT 12.9?0.9 23.2?1.3 11.1?0.8 20.3?1.2
PBM 8.9?0.8 16.7?1.2 7.3?0.6 15.4?1.1
SFST 13.0?1.0 21.8?1.4 11.2?1.0 19.2?1.3
suboptimal pruning techniques, although this was largely unnecessary for the Xerox
corpus. Clearly, the pruning effects are different in the off-line (MT) and the on-line
(IPMT) search processes and the differences may lead to wide performance variations
for the AT, PBM, and SFST approaches.
Nevertheless, as can be seen in Bender et al (2005), the degradation in system
performance due to pruning is generally not too substantial and sufficiently accurate
real-time interactive operation could also be achieved in the EU task with the three
systems tested.
6.3 Results with n-Best Hypotheses
Further experiments were carried out to study the usefulness of n-best hypotheses in
the interactive framework. In this scenario, the user can choose one out of n proposed
translation suffixes and then proceed as in the usual IPMT paradigm. As with the
previous experiments, the automated evaluation is based on a selected target sentence
that best matches a prefix of the reference translation in each IPMT iteration (therefore
KSR is minimized).
Here, only IPMT results for the English-to-Spanish translation direction are re-
ported for both Xerox and EU tasks, using a list of the five best translations. These results
are shown in Tables 3 and 4.
In all the cases there is a clear and significant accuracy improvement when moving
from single-best to 5-best translations. This gain in translation quality diminishes in a
log-wise fashion as we increase the number of best translations. From a practical point
of view, the improvements provided by using n-best completions would come at the
cost of the user having to ponder which of these completions is more suitable. In a
real operational environment, this additional user effort may or may not outweigh the
Table 4
IPMT results (%) for the EU corpus (English?Spanish) using ATs, PBMs, and SFSTs for the 1-best
hypothesis and 5-best hypotheses. 95% confidence intervals are shown.
1-best 5-best
Technique KSR KSMR KSR KSMR
AT 20.2?0.9 32.6?1.3 18.5?0.8 29.9?1.2
PBM 16.3?0.7 27.8?1.1 13.2?0.6 25.0?1.1
SFST 21.3?0.9 33.0?1.3 19.3?0.9 29.9?1.3
23
Computational Linguistics Volume 35, Number 1
benefits of the n-best increased accuracy. Consequently, this feature should be offered to
the users as an option.
7. Practical Issues
IPMT results reported in the previous section provide reasonable estimations of potential
savings of human translator effort, assuming that the goal is to obtain high quality
translations. In real work, however, several practical issues not discussed in this article
may significantly affect the actual system usability and overall user productivity.
One of the most obvious issues is that a carefully designed graphical user interface
(GUI) is needed to let the users actually be in command of the translation process, so
that they really feel the system is assisting them rather than the other way around. In
addition, an adequate GUI has to provide adequate means for the users to easily and
intuitively change at will IPMT engine parameters that may have an impact on their
way of working with the system. To name just a few: The maximum length of system
hypotheses, the value of n for n-best suggestions, or the ?interaction step granularity?;
that is, whether the system should react at each user keystroke, or at the end of each
complete typed word, or after a sufficiently long typing pause, and so on.
Clearly, all these important issues are beyond the scope of the present article. But
we can comment that, in the TT2 project, complete prototypes of some of the systems
presented in this article, including the necessary GUI, were actually implemented and
thoroughly evaluated by professional human translators in their working environ-
ment (Macklovitch, Nguyen, and Silva 2005; Macklovitch 2006).
The results of these field tests showed that the actual productivity depended not
only on the individual translators, but also on the given test texts. In cases where these
texts were quite unrelated to the training data, the system did not significantly help
the human translators to increase their productivity. However, when the test texts were
reasonably well related to the training data, high productivity gains were registered?
close to what could be expected according to the KSR/MAR empirical results.
8. Concluding Remarks
The IPMT paradigm proposed in this article allows for a close collaboration between a
human translator and a machine translation system. This paradigm entails an iterative
process where, in each iteration, a data-driven machine translation engine suggests a
completion for the current prefix of a target sentence which a human translator can
accept, modify, or ignore.
This idea was originally proposed in the TransType project (Langlais, Foster, and
Lapalme 2000), where a simple engine was used which only supported single-token
suggestions. Furthering these ideas, in the TransType2 project (SchlumbergerSema S.A.
et al 2001), state-of-the-art statistical machine translation systems have been developed
and integrated in the IPMT framework.
In a laboratory environment, results on two different tasks suggest that the pro-
posed techniques can reduce the typing effort needed to produce a high-quality transla-
tion of a given source text by as much as 80% with respect to the effort needed to simply
type the whole translation. In real conditions, a high productivity gain was achieved in
many cases.
We have studied here IPMT from the point of view of a standalone CAT tool.
Nevertheless, IPMT can of course be easily and conveniently combined with other
popular translator workbench tools. More specifically, IPMT lends itself particularly
24
Barrachina et al Statistical Computer-Assisted Translation
well to addressing the typical lack of generalization capabilities of translation memories.
When used as a CAT tool, translation memories allow the human translator to keep
producing increasingly long segments of correct target text. Clearly, these segments can
be used by an IPMT engine to suggest to the translator possible translations for source
text segments that are not found in the translation memories as exact matches.
Acknowledgments
This work has been partially supported by
the ST Programme of European Union under
grant IST-2001-32091, by the Spanish project
TIC?2003-08681-C02-02, and the Spanish
research programme Consolider
Ingenio-2010 CSD2007-00018. The authors
wish to thank the anonymous reviewers for
their criticisms and suggestions.
References
Amengual, J. C., J. M. Bened??, A. Castan?o,
A. Castellanos, V. M. Jime?nez, D. Llorens,
A. Marzal, M. Pastor, F. Prat, E. Vidal, and
J. M. Vilar. 2000. The EuTrans-I speech
translation system. Machine Translation,
15:75?103.
Amengual, J. C. and E. Vidal. 1998. Efficient
error-correcting Viterbi parsing. IEEE
Transactions on Pattern Analysis and Machine
Intelligence, 20(10):1109?1116.
Bender, O., S. Hasan, D. Vilar, R. Zens, and
H. Ney. 2005. Comparison of generation
strategies for interactive machine
translation. In Proceedings of the 10th
Annual Conference of the European
Association for Machine Translation (EAMT
05), pages 33?40, Budapest.
Berger, A. L., P. F. Brown, S. A. Della Pietra,
V. J. Della Pietra, J. R. Gillett, A. S. Kehler,
and R. L. Mercer. 1996. Language
translation apparatus and method of using
context-based translation models. United
States Patent No. 5510981, April.
Berstel, J. 1979. Transductions and Context-Free
Languages. B. G. Teubner, Stuttgart.
Bisani, M. and H. Ney. 2004. Bootstrap
estimates for confidence intervals in ASR
performance evaluation. In Proceedings of
the International Conference on Acoustic,
Speech and Signal Processing (ICASSP 04),
volume 1, pages 409?412, Montreal.
Bowker, L. 2002. Computer-Aided Translation
Technology: A Practical Introduction,
chapter 5: Translation-memory systems.
Didactics of Translation. University of
Ottawa Press, pages 92?127.
Brown, P. F., J. Cocke, S. A. Della Pietra,
V. J. Della Pietra, F. Jelinek, J. D. Lafferty,
R. L. Mercer, and P. S. Roosin. 1990.
A statistical approach to machine
translation. Computational Linguistics,
16(2):79?85.
Brown, P. F., S. A. Della Pietra, V. J.
Della Pietra, and R. L. Mercer. 1993. The
mathematics of statistical machine
translation: Parameter estimation.
Computational Linguistics, 19(2):263?310.
Callison-Burch, C., M. Osborne, and
P. Koehn. 2006. Re-evaluating the role of
BLEU in machine translation research. In
Proceedings of the 10th Conference of the
European Chapter of the Association for
Computational Linguistics (EACL 06),
pages 249?256, Trento.
Casacuberta, F., H. Ney, F. J. Och, E. Vidal,
J. M. Vilar, S. Barrachina, I. Garc??a-Varea,
D. Llorens, C. Mart??nez, S. Molau,
F. Nevado, M. Pastor, D. Pico?, A. Sanchis,
and C. Tillmann. 2004a. Some approaches
to statistical and finite-state
speech-to-speech translation. Computer
Speech and Language, 18:25?47.
Casacuberta, F. and E. Vidal. 2004. Machine
translation with inferred stochastic
finite-state transducers. Computational
Linguistics, 30(2):205?225.
Casacuberta, F. and E. Vidal. 2007. Learning
finite-state models for machine translation.
Machine Learning, 66(1):69?91.
Casacuberta, F., E. Vidal, and D. Pico?. 2005.
Inference of finite-state transducers from
regular languages. Pattern Recognition,
38:1431?1443.
Casacuberta, F., E. Vidal, A. Sanchis, and
J. M. Vilar. 2004b. Pattern recognition
approaches for speech-to-speech
translation. Cybernetic and Systems: an
International Journal, 35(1):3?17.
Civera, J., J. M. Vilar, E. Cubel, A. L. Lagarda,
S. Barrachina, E. Vidal, F. Casacuberta,
D. Pico?, and J. Gonza?lez. 2004a. From
machine translation to computer assisted
translation using finite-state models. In
Proceedings of the Conference on Empirical
Methods for Natural Language Processing
(EMNLP 04), pages 349?356, Barcelona.
Civera, J., J. M. Vilar, E. Cubel, A. L. Lagarda,
S. Barrachina, F. Casacuberta, E. Vidal,
D. Pico?, and J. Gonza?lez. 2004b. A syntactic
pattern recognition approach to computer
assisted translation. In Advances in
25
Computational Linguistics Volume 35, Number 1
Statistical, Structural and Syntactical Pattern
Recognition, Proceedings of the Joint IAPR
International Workshops on Syntactical and
Structural Pattern Recognition (SSPR 04)
and Statistical Pattern Recognition
(SPR 04)), Lisbon, Portugal, August 18?20,
volume 3138 of Lecture Notes in Computer
Science. Springer-Verlag, Heidelberg,
pages 207?215.
Cubel, E., J. Civera, J. M. Vilar, A. L. Lagarda,
S. Barrachina, E. Vidal, F. Casacuberta,
D. Pico?, J. Gonza?lez, and L. Rodr??guez.
2004. Finite-state models for computer
assisted translation. In Proceedings of the
16th European Conference on Artificial
Intelligence (ECAI 04), pages 586?590,
Valencia.
Cubel, E., J. Gonza?lez, A. Lagarda,
F. Casacuberta, A. Juan, and E. Vidal. 2003.
Adapting finite-state translation to the
TransType2 project. In Proceedings of the
Joint Conference Combining the 8th
International Workshop of the European
Association for Machine Translation and the
4th Controlled Language Applications Workshop
(EAMT-CLAW 03), pages 54?60, Dublin.
Foster, G. 2002. Text Prediction for Translators.
Ph.D. thesis, Universite? de Montre?al,
Canada.
Foster, G., P. Isabelle, and P. Plamondon.
1997. Target-text mediated interactive
machine translation. Machine Translation,
12(1?2):175?194.
Isabelle, P. and K. Church. 1997. Special issue
on new tools for human translators.
Machine Translation, 12(1?2).
Jelinek, F. 1998. Statistical Methods for Speech
Recognition. The MIT Press, Cambridge,
MA.
Jime?nez, V. M. and A. Marzal. 1999.
Computing the k shortest paths: a new
algorithm and an experimental
comparison. In Algorithm Engineering:
Proceedings of the 3rd International
Workshop (WAE 99), London, UK, July 19?21,
volume 1668 of Lecture Notes in Computer
Science. Springer-Verlag, Heidelberg,
pages 15?29.
Kay, M. 1997. The proper place of men and
machines in language translation. Machine
Translation, 12:3?23. [This article first
appeared as a Xerox PARC Working Paper
in 1980].
Khadivi, S. and C. Goutte. 2003. Tools for
corpus alignment and evaluation of the
alignments (deliverable d4.9). Technical
report, TransType2 (IST-2001-32091).
Khadivi, S., R. Zens, and H. Ney. 2006.
Integration of speech to computer-assisted
translation using finite-state automata.
In Proceedings of the 44th Annual Meeting of
the Association for Computational Linguistics
and 21th International Conference on
Computational Linguistics (COLING/ACL
06), pages 467?474, Sydney.
Khadivi, S., A. Zolnay, and H. Ney. 2005.
Automatic text dictation in
computer-assisted translation. In
Proceedings of the European Conference on
Speech Communication and Technology,
(INTERSPEECH 05-EUROSPEECH),
pages 2265?2268, Lisbon.
Koehn, P. 2004. Statistical significance
tests for machine translation evaluation.
In Proceedings of the Conference on
Empirical Methods for Natural Language
Processing (EMNLP 04), pages 388?395,
Barcelona.
Koehn, P., F. J. Och, and D. Marcu. 2003.
Statistical phrase-based translation. In
Proceedings of the 2003 Meeting of the North
American Chapter of the Association for
Computational Linguistics (NAACL 03),
pages 127?133, Edmonton.
Langlais, P., G. Foster, and G. Lapalme. 2000.
TransType: a computer-aided translation
typing system. In Proceedings of the
NAACL/ANLP Workshop on Embedded
Machine Translation Systems, pages 46?52,
Seattle, WA.
Langlais, P., G. Lapalme, and M. Loranger.
2002. Transtype: Development-evaluation
cycles to boost translator?s productivity.
Machine Translation, 15(4):77?98.
Macklovitch, E. 2006. TransType2: The last
word. In Proceedings of the 5th International
Conference on Languages Resources and
Evaluation (LREC 06), pages 167?172,
Genoa.
Macklovitch, E., N. T. Nguyen, and R. Silva.
2005. User evaluation report. Technical
report, TransType2 (IST-2001-32091).
Marcu, D. and W. Wong. 2002. A
phrase-based, joint probability model
for statistical machine translation.
In Proceedings of the Conference on
Empirical Methods for Natural Language
Processing (EMNLP 02), pages 133?139,
Philadelphia, PA.
Ney, H., S. Nie?en, F. Och, H. Sawaf,
C. Tillmann, and S. Vogel. 2000.
Algorithms for statistical translation of
spoken language. IEEE Transactions on
Speech and Audio Processing, 8(1):24?36.
Och, F. J. 1999. An efficient method for
determining bilingual word classes. In
Proceedings of the 9th Conference of the
European Chapter of the Association for
26
Barrachina et al Statistical Computer-Assisted Translation
Computational Linguistics (EACL 99),
pages 71?76, Bergen.
Och, F. J. and H. Ney. 2003. A systematic
comparison of various statistical
alignment models. Computational
Linguistics, 29(1):19?51.
Och, F. J. and H. Ney. 2004. The alignment
template approach to statistical machine
translation. Computational Linguistics,
30(4):417?450.
Och, F. J., R. Zens, and H. Ney. 2003.
Efficient search for interactive statistical
machine translation. In Proceedings of
the 10th Conference of the European Chapter
of the Association for Computational
Linguistics (EACL 03), pages 387?393,
Budapest.
Papineni, K., S. Roukos, T. Ward, and
W. Zhu. 2001. BLEU: a method for
automatic evaluation of machine
translation. Technical Report RC22176,
Thomas J. Watson Research Center.
Pico?, D. and F. Casacuberta. 2001. Some
statistical-estimation methods for
stochastic finite-state transducers. Machine
Learning, 44:121?142.
Press, W. H., S. A. Teukolsky, W. T.
Vetterling, and B. P. Flannery. 2002.
Numerical Recipes in C++: The Art of
Scientific Computing. Cambridge University
Press, Cambridge, UK.
SchlumbergerSema S.A., Intituto Tecnolo?gico
de Informa?tica, Rheinisch Westfa?lische
Technische Hochschule Aachen Lehrstul
fu?r Informatik VI, Recherche Applique?e
en Linguistique Informatique Laboratory
University of Montreal, Celer Soluciones,
Socie?te? Gamma, and Xerox
Research Centre Europe. 2001. TT2.
TransType2?computer-assisted
translation. Project technical annex.
Information Society Technologies (IST)
Programme, IST-2001-32091.
Sen, Z., Ch. Zhaoxiong, and H. Heyan. 1997.
Interactive approach in machine translation
systems. In Proceedings of IEEE International
Conference on Intelligent Processing Systems
(ICIPS 97), pages 1814?1819, Beijing.
Slocum, J. 1985. A survey of machine
translation: Its history, current status and
future prospects. Computational Linguistics,
11(1):1?17.
Somers, H., 2003. Computers and Translation: a
Translator?s Guide, chapter 3: Translation
memory systems. John Benjamins,
Amsterdam, pages 31?48.
Toma?s, J. and F. Casacuberta. 2001.
Monotone statistical translation using
word groups. In Proceedings of the Machine
Translation Summit VIII (MT SUMMIT
VIII), pages 357?361, Santiago de
Compostela.
Toma?s, J. and F. Casacuberta. 2003.
Combining phrase-based and
template-based alignment models in
statistical translation. In Pattern Recognition
and Image Analysis, Proceedings of the First
Iberian Conference (IbPRIA 03), Puerto
de Andratx, Mallorca, Spain, June 4-6,
volume 2652 of Lecture Notes in Computer
Science. Springer-Verlag, Heidelberg,
pages 1020?1031.
Toma?s, J. and F. Casacuberta. 2004. Statistical
machine translation decoding using
target word reordering. In Advances in
Statistical, Structural and Syntactical Pattern
Recognition, Proceedings of the Joint IAPR
International Workshops on Syntactical
and Structural Pattern Recognition
(SSPR 04) and Statistical Pattern Recognition
(SPR 04), Lisbon, Portugal, August 18?20,
volume 3138 of Lecture Notes in Computer
Science. Springer-Verlag, Heidelberg,
pages 734?743.
Toma?s, J. and F. Casacuberta. 2006. Statistical
phrase-based models for interactive
computer-assisted translation. In
Proceedings of the 44th Annual Meeting
of the Association for Computational
Linguistics and 21th International
Conference on Computational Linguistics
(COLING/ACL 06), pages 835?841, Sydney.
Toma?s, J. and F. Casacuberta. 2007. A
pattern recognition approach to
machine translation: Monotone and
non-monotone phrase-based statistical
models. Technical Report DSIC-II/18/07,
Departamento de Sistemas Informa?ticos y
Computacio?n, Universidad Polite?cnica
de Valencia.
Tomita, M. 1985. Feasibility study of
personal/interactive machine translation
systems. In Proceedings of the First
International Conference on Theoretical
and Methodological Issues in Machine
Translation (TMI 85), pages 289?297,
New York, NY.
Ueffing, N., F. J. Och, and H. Ney. 2002.
Generation of word graphs in statistical
machine translation. In Proceedings of
the Conference on Empirical Methods for
Natural Language Processing (EMNLP 02),
pages 156?163, Philadelphia, PA.
Vidal, E. 1997. Finite-state speech-to-speech
translation. In Proceedings of the
International Conference on Acoustic,
Speech and Signal Processing (ICASSP 97),
volume 1, pages 111?114, Munich.
27
Computational Linguistics Volume 35, Number 1
Vidal, E. and F. Casacuberta. 2004. Learning
finite-state models for machine translation.
In Grammatical Inference: Algorithms and
Applications, Proceedings of the 7th
International Coloquium on Grammatical
Inference (ICGI 04), Athens, Greece,
October 11?13, volume 3264 of Lecture
Notes in Artificial Intelligence. Springer,
Heidelberg, pages 16?27.
Vidal, E., F. Casacuberta, L. Rodr??guez,
J. Civera, and C. Mart??nez. 2006.
Computer-assisted translation using
speech recognition. IEEE Transactions
on Speech and Audio Processing,
14(3):941?951.
Vidal, E., F. Thollard, F. Casacuberta
C. de la Higuera, and R. Carrasco. 2005.
Probabilistic finite-state machines?
part II. IEEE Transactions on Pattern
Analysis and Machine Intelligence,
27(7):1025?1039.
Whitelock, P. J., M. McGee Wood, B. J.
Chandler, N. Holden, and H. J. Horsfall.
1986. Strategies for interactive machine
translation: The experience and
implications of the UMIST Japanese
project. In Proceedings of the 11th
International Conference on Computational
Linguistics (COLING 86), pages 329?334,
Bonn.
Yamron, J., J. Baker, P. Bamberg,
H. Chevalier, T. Dietzel, J. Elder,
F. Kampmann, M. Mandel, L. Manganaro,
T. Margolis, and E. Steele. 1993.
LINGSTAT: an interactive, machine-aided
translation system. In Proceedings of the
Workshop on Human Language Technology,
pages 191?195, Princeton, NJ.
Zajac, R. 1988. Interactive translation: A new
approach. In Proceedings of the 12th
International Conference on Computational
Linguistics (COLING 88), pages 785?790,
Budapest.
Zens, R. and H. Ney. 2004. Improvements
in phrase-based statistical machine
translation. In Proceedings of the Human
Language Technology Conference / North
American Chapter of the Association for
Computational Linguistics Annual Meeting
(HLT-NAACL 04), pages 257?264,
Boston, MA.
Zens, R., F. J. Och, and H. Ney. 2002.
Phrase-based statistical machine
translation. In Advances in Artificial
Intelligence. 25th Annual German Conference
on Artificial Intelligence (KI 02), Aachen,
Germany, September 16?22, Proceedings,
volume 2479 of Lecture Notes on Artificial
Intelligence. Springer Verlag, Heidelberg,
pages 18?32.
Zhang, Y. and S. Vogel. 2004. Measuring
confidence intervals for the machine
translation evaluation metrics. In
Proceedings of the Tenth International
Conference on Theoretical and
Methodological Issues in Machine
Translation (TMI 04), pages 294?301,
Baltimore, MD.
28
Architectures for speech-to-speech translation
using finite-state models
Francisco Casacuberta Enrique Vidal
Dpt. de Sistemes Informa`tics i Computacio? &
Institut Tecnolo`gic d?Informa`tica
Universitat Polite`cnica de Vale`ncia
46071 Vale`ncia, SPAIN.
fcn@iti.upv.es, evidal@iti.upv.es
Juan Miguel Vilar
Dpt. de Llenguatges i Sistemes Informa`tics
Universitat Jaume I
Castello?, SPAIN.
jvilar@lsi.uji.es
Abstract
Speech-to-speech translation can be ap-
proached using finite state models and
several ideas borrowed from automatic
speech recognition. The models can be
Hidden Markov Models for the accous-
tic part, language models for the source
language and finite state transducers for
the transfer between the source and target
language. A ?serial architecture? would
use the Hidden Markov and the language
models for recognizing input utterance
and the transducer for finding the transla-
tion. An ?integrated architecture?, on the
other hand, would integrate all the mod-
els in a single network where the search
process takes place. The output of this
search process is the target word sequence
associated to the optimal path. In both
architectures, HMMs can be trained from
a source-language speech corpus, and the
translation model can be learned automat-
ically from a parallel text training cor-
pus. The experiments presented here cor-
respond to speech-input translations from
Spanish to English and from Italian to En-
glish, in applications involving the inter-
action (by telephone) of a customer with
the front-desk of a hotel.
1 Introduction
Present finite-state technology allows us to build
speech-to-speech translation (ST) systems using
ideas very similar to those of automatic speech
recognition (ASR). In ASR the acoustic hidden
Markov models (HMMs) can be integrated into the
language model, which is typically a finite-state
grammar (e.g. a N-gram). In ST the same HMMs
can be integrated in a translation model which con-
sists in a stochastic finite-state transducer (SFST).
Thanks to this integration, the translation process
can be efficiently performed by searching for an
optimal path of states through the integrated net-
work by using well-known optimization procedures
such as (beam-search accelerated) Viterbi search.
This ?integrated architecture? can be compared with
the more conventional ?serial architecture?, where
the HMMs, along with a suitable source language
model, are used as a front-end to recognize a se-
quence of source-language words which is then pro-
cessed by the translation model. A related approach
has been proposed in (Bangalore and Ricardi, 2000;
Bangalore and Ricardi, 2001).
In any case, a pure pattern-recognition approach
can be followed to build the required systems.
Acoustic models can be trained from a suffi-
ciently large source-language speech training set,
in the very same way as in speech recognition.
On the other hand, using adequate learning algo-
rithms (Casacuberta, 2000; Vilar, 2000), the trans-
lation model can also be learned from a sufficiently
large training set consisting of source-target parallel
text.
In this paper, we comment the results obtained us-
ing this approach in EUTRANS, a five-year joint ef-
fort of four European institutions, partially funded
by the European Union.
                                            Association for Computational Linguistics.
                           Algorithms and Systems, Philadelphia, July 2002, pp. 39-44.
                          Proceedings of the Workshop on Speech-to-Speech Translation:
2 Finite-state transducers and speech
translation
The statistical framework allow us to formulate the
speech translation problem as follows: Let x be an
acoustic representation of a given utterance; typi-
cally a sequence of acoustic vectors or ?frames?.
The translation of x into a target-language sentence
can be formulated as the search for a word se-
quence, t?, from the target language such that:
t? = argmax
t
Pr(t|x). (1)
Conceptually, the translation can be viewed as a
two-step process (Ney, 1999; Ney et al, 2000):
x ? s ? t,
where s is a sequence of source-language words
which would match the observed acoustic sequence
x and t is a target-language word sequence associ-
ated with s. Consequently,
Pr(t|x) =
?
s
Pr(t, s|x), (2)
and, with the natural assumption that Pr(x|s, t) does
not depend on the target sentence t,
t? = argmax
t
(
?
s
Pr(s, t) ? Pr(x|s)
)
. (3)
Using a SFST as a model for Pr(s, t) and HMMs
to model Pr(x|s), Eq. 3 is transformed in the opti-
mization problem:
t? = argmax
t
(
?
s
PrT (s, t) ? PrM(x|s)
)
, (4)
where PrT (s, t) is the probability supplied by the
SFST and PrM(x|s) is the density value supplied
by the corresponding HMMs associated to s for the
acoustic sequence x.
2.1 Finite-state transducers
A SFST, T , is a tuple ?Q,?,?, R, q0, F, P ?, where
Q is a finite set of states; q0 is the initial state; ? and
? are finite sets of input symbols (source words) and
output symbols (target words), respectively (??? =
?); R is a set of transitions of the form (q, a, ?, q?)
for q, q? ? Q, a ? ?, ? ? ?? and1 P : R ? IR+
(transition probabilities) and F : Q ? IR+ (final-
state probabilities) are functions such that ?q ? Q:
F (q) +
?
?(a, ?, q?) ? ???? ?Q :
(q, a, ?, q?) ? R
P (q, a, ?, q?) = 1.
Fig. 1 shows a small fragment of a SFST for Spanish
to English translation.
A particular case of finite-state transducers are
known as subsequential transducers (SSTs). These
are finite-state transducers with the restriction of be-
ing deterministic (if (q, a, ?, q), (q, a, ??, q?) ? R,
then ? = ?? and q = q?). SSTs also have output
strings associated to the (final) states. This can fit
well under the above formulation by simply adding
an end-off-sentence marker to each input sentence.
For a pair (s, t) ? ?? ? ??, a translation form,
?, is a sequence of transitions in a SFST T :
? : (q0, s1, ?t1, q1), (q1, s2, ?t2, q2),
. . . , (qI?1, sI , ?tI , qI),
where ?tj denotes a substring of target words (the
empty string for ?tj is also possible), such that
?t1 ?t2 ... ?tI = t and I is the length of the source sen-
tence s. The probability of ? is
PrT (?) = F (qI) ?
I?
i=0
P (qi?1, si, ?ti, qi). (5)
Finally, the probability of the pair (s, t) is
PrT (s, t) =
?
??d(s,t)
PrT (?) (6)
? max
??d(s,t)
PrT (?), (7)
where d(s, t) is the set of all translation forms for
the pair (s, t).
These models have implicit source and target lan-
guage models embedded in their definitions, which
are simply the marginal distributions of PrT . In
practice, the source (target) language model can be
obtained by removing the target (source) words from
each transition of the model.
1By?? and?? we denote the sets of finite-length strings on
? and ?, respectively
0 1una / a  (0.5)la / the (0.5)
2habitaci?n / room (0.1)
4
habitaci?n / room (0.3)
3habitaci?n / ?   (0.6)
doble / with two beds (1)
doble / double room (0.3)
individual / single room (0.7)
Figure 1: Example of SFST. ? denotes the empty string. The source sentence ?una habitacio?n doble? can
be translated to either ?a double room? or ?a room with two beds?. The most probable translation is the
first one with probability of 0.09.
The structural (states and transitions) and the
probabilistic components of a SFST can be learned
automatically from training pairs in a single process
using the MGTI technique (Casacuberta, 2000). Al-
ternatively, the structural component can be learned
using the OMEGA technique (Vilar, 2000), while
the probabilistic component is estimated in a second
step using maximum likelihood or other possible cri-
teria (Pico? and Casacuberta, 2001). One of the main
problems that appear during the learning process is
the modelling of events that have not been seen in
the training set. This problem can be confronted,
in a similar way as in language modelling, by using
smoothing techniques in the estimation process of
the probabilistic components of the SFST (Llorens,
2000). Alternatively, smoothing can be applied in
the process of learning both components (Casacu-
berta, 2000).
2.2 Architectures for speech translation
Using Eq. 7 as a model for Pr(s, t) in Eq. 4,
t? = argmax
t
(
?
s
max
??d(s,t)
PrT (?) ? PrM(x|s)
)
,
(8)
For the computation of PrM(x|s) in Eq. 8, let
b be an arbitrary segmentation of x into I acous-
tic subsequences, each of which associated with a
source word (therefore, I is the number of words in
s). Then:
PrM(x|s) =
?
b
I?
i=1
PrM(x?i|si), (9)
where x?i is the i-th. acoustic segment of b, and each
source word si has an associated HMM that supplies
the density value PrM(x?i|si).
Finally, by substituting Eq. 5 and Eq. 9 into Eq. 8
and approximating sums by maximisations:
t? = argmax
??d(s,t),b
I?
i=1
P (qi?1, si, t?i, qi) ? PrM(x?i|si).
(10)
Solving this maximisation yields (an approximation
to) the most likely target-language sentence t? for the
observed source-language acoustic sequence x.
This computation can be accomplished using the
well known Viterbi algorithm. It searches for an op-
timal sequence of states in an integrated network (in-
tegrated architecture) which is built by substituting
each edge of the SFST by the corresponding HMM
of the source word associated to the edge.
This integration process is illustrated in Fig. 2. A
small SFST is presented in the first panel (a) of this
figure. In panel (b), the source words in each edge
are substituted by the corresponding phonetic tran-
scription. In panel (c) each phoneme is substituted
by the corresponding HMM of the phone. Clearly,
this direct integration approach often results in huge
finite-state networks. Correspondingly, a straight-
forward (dynamic-programming) search for an op-
timal target sentence may require a prohibitively
high computational effort. Fortunately, this compu-
tational cost can be dramatically reduced by means
of standard heuristic acceleration techniques such as
beam search.
An alternative, which sacrifices optimality more
drastically, is to break the search down into two
steps, leading to a so-called ?serial architecture?. In
the first step a conventional source-language speech
decoding system (using just a source-language lan-
guage model) is used to obtain a single (may be mul-
tiple) hypothesis for the sequence of uttered words.
In the second step, this text sequence is translated
into a target-language sentence.
0 1la / the 2maleta / ?
3bolsa / ? 4
azul / blue suitcase
azul / blue bag
a) Original FST.
0 l / ? 1a / the
m / ?
b / ?
a / ?
o / ?
l / ? e / ? t / ? 2t / ?
a / ? a / ? z / ?s / ?
l / ? s / ?
3s / ?
a / ? a / ? z / ?s / ?
u / ?
4
l / blue suitcase
u / ? l / blue bag
b) Lexical expansion.
0 l a 1   the   m
b
a l e
t
t
a
2
 
a 
o l s
s
a
3
 
a 
z
s
u l
4
             blue suitcase           
z
s
u
l
 
      blue bag
c) Phonetic expansion.
Figure 2: Example of the integration process of the lexical knowledge (figure b) and the phonetic knowledge
(figure c) in a FST (figure a). ? denotes the empty string in panels a and b. In panel c, source symbols are
typeset in small fonts, target strings are typeset in large fonts and edges with no symbols denote empty
transitions.
Using Pr(s, t) = Pr(t | s) ? Pr(s) in Eq. 3 and
approximating the sum by the maximum, the opti-
mization problem can be presented as
(t?, s?) = argmax
t,s
(Pr(t|s) ? Pr(s) ? Pr(x|s)) ,
(11)
and the two-step approximation reduces to
s? ? argmax
s
{Pr(s) ? Pr(x|s)} , (12)
t? ? argmax
t
Pr(t|s?) (13)
= argmax
t
Pr(s?, t). (14)
In other words, the search for an optimal target-
language sentence is now approximated as follows:
1. Word decoding of x. A source-language sen-
tence s? is searched for using a source language
model, PrN (s), for Pr(s) and the correspond-
ing HMMs, PrM(x|s), to model Pr(x|s):
s? ? argmax
s
(PrN (s) ? PrM(x|s)) .
2. Translation of s?. A target-language sentence t?
is searched for using a SFST, PrT (s?, t), as a
model of Pr(s?, t)
t? ? argmax
t
PrT (s?, t).
A better alternative for this crude ?two-step? ap-
proach is to use Pr(s, t) = Pr(s | t) ?Pr(t) in Eq. 3.
Now, approximating the sum by the maximum, the
optimization problem can be presented as
(t?, s?) = argmax
t,s
(Pr(s | t) ? Pr(t) ? Pr(x | s)) ,
(15)and now the two-step approximation reduces to
s? ? argmax
s
{Pr(s | t) ? Pr(x | s)} , (16)
t? ? argmax
t
Pr(s? | t) ? Pr(t) (17)
= argmax
t
Pr(s?, t). (18)
The main problem of this approach is the term
t that appears in the first maximisation (Eq. 16).
A possible solution is to follow an iterative proce-
dure where t, that is used for computing s?, is the
one obtained from argmaxt Pr(s?, t) in the previous
iteration (Garc??a-Varea et al, 2000). In this case,
Pr(s | t) can be modelled by a source language
model that depends on a previously computed t?:
PrN ,t?(s). In the first iteration no t? is known, but
PrN ,t?(s) can be approximated by PrN (s). Follow-
ing this idea, the search can be formulated as:
Initialization:
Let PrN ,t(s) be approximated by a source lan-
guage model PrN (s).
while not convergence
1. Word decoding of x. A source-language sen-
tence s? is searched for using a source lan-
guage model that depends on the target sen-
tence, PrN ,t?(s), for Pr(s | t) (t? is the t? com-
puted in the previous iteration) and the corre-
sponding HMMs, PrM(x | s), to model Pr(x |
s):
s? ? argmax
s
(
PrN ,t?(s) ? PrM(x | s)
)
.
2. Translation of s?. A target-language sentence t?
is searched for using a SFST, PrT (s?, t), as a
model of Pr(s?, t)
t? ? argmax
t
PrT (s?, t).
end of while
The first iteration corresponds to the sequential ar-
chitecture proposed above.
While this seems a promising idea, only very
preliminary experiments were carried out (Garc??a-
Varea et al, 2000) and it has not been considered in
the experiments presented in the present paper.
3 Experiments and results
Three sets of speech-to-speech translation proto-
types have been implemented for Spanish to English
and for Italian to English. In all of them, the appli-
cation was the translation of queries, requests and
complaints made by telephone to the front desk of
a hotel. Three tasks of different degree of difficulty
have been considered.
In the first one (EUTRANS-0), Spanish-to-English
translation systems were learned from a big and
well controlled training corpus: about 170k differ-
ent pairs (? 2M running words), with a lexicon of
about 700 words. In the second one (EUTRANS-
I), also from Spanish to English, the systems were
learned from a random subset of 10k pairs (? 100k
running words) from the previous corpus; this was
established as a more realistic training corpus for the
kind of application considered. In the third and most
difficult one, from Italian to English (EUTRANS-II),
the systems were learned from a small training cor-
pus that was obtained from a transcription of a spon-
taneous speech corpus: about 3k pairs (? 60k run-
ning words), with a lexicon of about 2,500 words.
For the serial architecture, the speech decoding
was performed in a conventional way, using the
same acoustic models as with the integrated archi-
tecture and trigrams of the source language models.
For the integrated architecture, the speech decoding
of an utterance is a sub-product of the translation
process (the sequence of source words associated to
the optimal sequence of transitions that produces the
sequence of target words).
The acoustic models of phone units were trained
with the HTK Toolkit (Woodland, 1997). For the
EUTRANS-0 and EUTRANS-I prototypes, a training
speech corpus of 57,000 Spanish running words was
used, while the EUTRANS-II Italian acoustic models
were trained from another corpus of 52,000 running
words
Performance was assessed on the base of 336
Spanish sentences in the case of EUTRANS-0
and EUTRANS-I and 278 Italian sentences in
EUTRANS-II. In all the cases, the test sentences (as
well as the corresponding speakers) were different
from those appearing in the training data.
For the easiest task, EUTRANS-0, (well controlled
and a large training set), the best result was achieved
with an integrated architecture and a SFST obtained
with the OMEGA learning technique. A Transla-
tion Word Error Rate of 7.6% was achieved, while
the corresponding source-language speech decoding
Word Error Rate was 8.4%. Although these figures
may seem strange (and they would certainly be in
the case of a serial architecture), they are in fact con-
sistent with the fact that, in this task (corpus), the tar-
get language exhibits a significantly lower perplex-
ity than the source language.
For the second, less easy task EUTRANS-I, (well
controlled task but a small training set), the best
result was achieved with an integrated architecture
and a SFST obtained with the MGTI learning tech-
nique (10.5% of word error rate corresponding to the
speech decoding and 12.6% of translation word er-
ror rate).
For the most difficult task, EUTRANS-II (spon-
taneous task and a small training set), the best result
was achieved with a serial architecture and a SFST
obtained with the MGTI learning technique (22.1%
of word error rate corresponding to the speech de-
coding and 37.9% of translation word error rate).
4 Conclusions
Several systems have been implemented for speech-
to-speech translation based on SFSTs. Some of them
were implemented for translation from Italian to En-
glish and the others for translation from Spanish to
English. All of them support all kinds of finite-state
translation models and run on low-cost hardware.
They are currently accessible through standard tele-
phone lines with response times close to or better
than real time.
From the results presented, it appears that the in-
tegrated architecture allows for the achievement of
better results than the results achieved with a serial
architecture when enough training data is available
to train the SFST. However, when the training data
is insufficient, the results obtained by the serial ar-
chitecture were better than the results obtained by
the integrated architecture. This effect is possible
because the source language models for the exper-
iments with the serial architecture were smoothed
trigrams. In the case of sufficient training data, the
source language model associated to a SFST learnt
by the MGTI or OMEGA is better than trigrams
(Section 2.1). However, in the other case (not suf-
ficient training data) these source languages were
worse than trigrams. Consequently an important
degradation is produced in the implicit decoding of
the input utterance.
Acknowledgments
The authors would like to thank the researchers that
participated in the EUTRANS project and have de-
veloped the methodologies that are presented in this
paper.
This work has been partially supported by the Eu-
ropean Union under grant IT-LTR-OS-30268, by the
project TT2 in the ?IST, V Framework Programme?,
and Spanish project TIC 2000-1599-C02-01.
References
S. Bangalore and G. Ricardi. 2000. Stochastic finite-
state models for spoken language machine translation.
In Workshop on Embeded Machine Translation Sys-
tems.
S. Bangalore and G. Ricardi. 2001. A finite-state ap-
proach to machine translation. In The Second Meeting
of the North American Chapter of the Association for
Computational Linguistics.
F. Casacuberta. 2000. Inference of finite-state trans-
ducers by using regular grammars and morphisms.
In Grammatical Inference: Algorithms and Applica-
tions, volume 1891 of Lecture Notes in Artificial Intel-
ligence, pages 1?14. Springer-Verlag.
I. Garc??a-Varea, A. Sanchis, and F. Casacuberta. 2000.
A new approach to speech-input statistical translation.
In Proceedings of the International Conference on Pat-
tern Recognition (ICPR2000), volume 2, pages 907?
910, Barcelona, Sept. IAPR, IEEE Press.
D. Llorens. 2000. Suavizado de auto?matas y traduc-
tores finitos estoca?sticos. Ph.D. thesis, Universitat
Polite`cnica de Vale`ncia.
H. Ney, S. Nie?en, F. Och, H. Sawaf, C. Tillmann, and
S. Vogel. 2000. Algorithms for statistical translation
of spoken language. IEEE Transactions on Speech and
Audio Processing, 8(1):24?36.
H. Ney. 1999. Speech translation: Coupling of recogni-
tion and translation. In Proceedins of the IEEE Inter-
national Conference on Acoustic, Speech and Signal
Processing, pages 517?520, Phoenix, AR, March.
D. Pico? and F. Casacuberta. 2001. Some statistical-
estimation methods for stochastic finite-state transduc-
ers. Machine Learning, 44:121?141.
J.M. Vilar. 2000. Improve the learning of subsequen-
tial transducers by using alignments and dictionaries.
In Grammatical Inference: Algorithms and Applica-
tions, volume 1891 of Lenture Notes in Artificial Intel-
ligence, pages 298?312. Springer-Verlag.
S. Young; J. Odell; D. Ollason; V. Valtchev; P. Wood-
land. 1997. The HTK Book (Version 2.1). Cambridge
University Department and Entropic Research Labora-
tories Inc.
From Machine Translation to Computer Assisted Translation using
Finite-State Models
Jorge Civera, Elsa Cubel, Antonio L. Lagarda, David Pico?,
Jorge Gonza?lez, Enrique Vidal, Francisco Casacuberta
Instituto Tecnolo?gico de Informa?tica
Dpto. de Sistemas Informa?ticos y Computacio?n, Universidad Polite?cnica de Valencia
E-46071 Valencia, Spain
jorcisai@iti.upv.es
Juan M. Vilar, Sergio Barrachina
Dpto. de Lenguajes y Sistemas Informa?ticos, Universidad Jaime I,
E-12071 Castello?n de la Plana, Spain
jvilar@lsi.uji.es
Abstract
State-of-the-art machine translation techniques are
still far from producing high quality translations.
This drawback leads us to introduce an alterna-
tive approach to the translation problem that brings
human expertise into the machine translation sce-
nario. In this framework, namely Computer As-
sisted Translation (CAT), human translators inter-
act with a translation system, as an assistance tool,
that dinamically offers, a list of translations that best
completes the part of the sentence already trans-
lated. In this paper, finite state transducers are
presented as a candidate technology in the CAT
paradigm. The appropriateness of this technique
is evaluated on a printer manual corpus and re-
sults from preliminary experiments confirm that hu-
man translators would reduce to less than 25% the
amount of work to be done for the same task.
1 Introduction
State-of-the-art machine translation techniques are
still far from producing high quality translations.
This drawback leads us to introduce an alternative
approach to the translation problem that brings
human expertise into the machine translation sce-
nario. (Langlais et al, 2000) proposed this idea that
can be illustrated as follows. Initially, the human
translator is provided with a possible translation
for the sentence to be translated. Unfortunately in
most of the cases, this translation is not perfect, so
the translator amends it and asks for a translation
of the part of the sentence still to be translated
(completion). This latter interaction is repeated as
many times as needed until the final translation is
achieved.
The scenario described in the previous para-
graph, can be seen as an iterative refinement of
the translations offered by the translation system,
that without possessing the desired quality, help the
translator to increase his/her productivity. Nowa-
days, this lack of translation excellence is a common
characteristic in all machine translation systems.
Therefore, the human-machine synergy represented
by the CAT paradigm seems to be more promising
than fully-automatic translation in the near future.
The CAT paradigm has two important as-
pects: the models need to provide adequate com-
pletions and they have to do so efficiently to per-
form under usability constrains. To fulfill these two
requirements, Stochastic Finite State Transducers
(SFST) have been selected since they have proved
in the past to be able to provide adequate transla-
tions (Vidal, 1997; Knight and Al-Onaizan, 1998;
Amengual et al, 2000; Casacuberta et al, 2001;
Bangalore and Ricardi, 2001). In addition, efficient
parsing algorithms can be easily adapted in order to
provide completions.
The rest of the paper is structured as follows.
The following section introduces the general setting
for machine translation and finite state models. In
section 3, the search procedure for an interactive
translation is presented. Experimental results are
presented in section 4. Finally, some conclusions
and future work are explained in section 5.
2 Machine translation with finite-state
transducers
Given a source sentence   , the goal of MT is to find
a target sentence

t that maximizes:
t   argmax
t

t  s   argmax
t

t 	 s  (1)
The joint distribution  t 	 s  can be modeled
by a Stochastic Finite State Transducer 
 (Pico? and
Casacuberta, 2001):

t   argmax
t

t 	 s  argmax
t

t 	 s  (2)
A Stochastic Finite-State Transducer (SFST)
is a finite-state network whose transitions are la-
beled by three items:
1. a source symbol (a word from the source lan-
guage vocabulary);
2. a target string (a sequence of words from the
target language vocabulary) and
3. a transition probability.
They have been successfully applied into
many translation tasks (Vidal, 1997; Amengual et
al., 2000; Casacuberta et al, 2001). Furthermore,
there exist efficient search algorithms like Viterbi
(Viterbi, 1967) for the best path and the Recur-
sive Enumeration Algorithm (REA) (Jime?nez and
Marzal, 1999) for the  -best paths.
One possible way of inferring SFSTs is the
Grammatical Inference and Alignments for Trans-
ducer Inference (GIATI) technique (the previous
name of this technique was MGTI - Morphic-
Generator Transducer Inference) (Casacuberta et
al., 2004). Given a finite sample of string pairs, it
works in three steps:
1. Building training strings. Each training pair
is transformed into a single string from an ex-
tended alphabet to obtain a new sample of
strings. The ?extended alphabet? contains
words or substrings from source and target sen-
tences coming from training pairs.
2. Inferring a (stochastic) regular grammar.
Typically, smoothed  -gram is inferred from
the sample of strings obtained in the previous
step.
3. Transforming the inferred regular grammar
into a transducer. The symbols associated
to the grammar rules are transformed into
source/target symbols by applying an ade-
quate transformation, thereby transforming the
grammar inferred in the previous step into a
transducer.
The transformation of a parallel corpus into
a corpus of single sentences is performed with the
help of statistical alignments: each word is joined
with its translation in the output sentence, creating
an ?extended word?. This joining is done taking
care not to invert the order of the output words. The
third step is trivial with this arrangement. In our
experiments, the alignments are obtained using the
GIZA software (Och and Ney, 2000; Al-Onaizan et
al., 1999), which implements IBM statistical mod-
els (Brown et al, 1993).
3 Interactive search
The concept of interactive search is closely related
to the CAT paradigm. This paradigm introduces the
new factor t into the general machine translation
equation (Equation 1). t represents a prefix in the
target language obtained as a result of the interac-
tion between the human translator and the machine
translation system.
As a side effect of this reformulation, the op-
timization defined in Equation 3 is performed over
the set of target suffixes rather than the set of com-
plete target sentences. Thence, the goal of CAT in
the finite-state transducer framework is to find a pre-
diction of the best suffix

t  , given a source sentence
s, a prefix of the target sentence t  and a SFST 
 :

t  argmax
t 
Proceedings of the ACL Workshop on Building and Using Parallel Texts, pages 95?98,
Ann Arbor, June 2005. c?Association for Computational Linguistics, 2005
Experiments Using MAR for Aligning Corpora?
Juan Miguel Vilar
Departamento de Lenguajes y Sistemas Informa?ticos
Universitat Jaume I
Castello?n (Spain)
jvilar@lsi.uji.es
Abstract
We present some experiments conducted
within the context of one of the shared
tasks of the ACL 2005 Workshop on
Building and Using Parallel Texts. We
have employed a new model for finding
the alignments. This new model takes
a recursive approach in order to find the
alignments. As its computational costs are
quite high, a method for splitting the train-
ing sentences in smaller parts is used.
1 Introduction
We present the experiments we conducted within the
context of the shared task of the track on building
and using parallel texts for languages with scarce
resources of the ACL 2005 Workshop on Build-
ing and Using Parallel Texts. The aim of the task
was to align the words of sentence pairs in differ-
ent language pairs. We have participated using the
Romanian-English corpora.
We have used a new model, the MAR (from the
Spanish initials of Recursive Alignment Model) that
allowed us to find structured alignments that were
later transformed in a more conventional format.
The basic idea of the model is that the translation of
a sentence can be obtained in three steps: first, the
sentence is divided in two parts; second, each part
is translated separately using the same process; and
?Work partially supported by Bancaixa through the project
?Sistemas Inductivos, Estad??sticos y Estructurales, para la Tra-
duccio?n Automa?tica (SIEsTA)?.
third, the two translations are joined. The high com-
putational costs associated with the training of the
model made it necessary to split the training pairs in
smaller parts using a simple heuristic.
Initial work with this model can be seen in (Vi-
lar Torres, 1998). A detailed presentation can be
found in (Vilar and Vidal, 2005). This model shares
some similarities with the stochastic inversion trans-
duction grammars (SITG) presented by Wu in (Wu,
1997). The main point in common is the num-
ber of possible alignments between the two models.
On the other hand, the parametrizations of SITGs
and the MAR are completely different. The gen-
erative process of SITGs produces simultaneously
the input and output sentences and the parameters
of the model refer to the rules of the nontermi-
nals. This gives a clear symmetry to both input
and output sentences. Our model clearly distin-
guishes an input and output sentence and the pa-
rameters are based on observable properties of the
sentences (their lengths and the words composing
them). Also, the idea of splitting the sentences un-
til a simple structure is found in the Divisive Clus-
tering presented in (Deng et al, 2004). Again, the
main difference is in the probabilistic modeling of
the alignments. In Divisive Clustering a uniform dis-
tribution on the alignments is assumed while MAR
uses a explicit parametrization.
The rest of the paper is structured as follows: the
next section gives an overview of the MAR, then we
explain the task and how the corpora were split, after
that, how the alignments were obtained is explained,
finally the results and conclusions are presented.
95
2 The MAR
We provide here a brief description of the model,
a more detailed presentation can be found in (Vilar
and Vidal, 2005). The idea is that the translation of
a sentence x? into a sentence y? can be performed in
the following steps1:
(a) If x? is small enough, IBM?s model 1 (Brown et
al., 1993) is employed for the translation.
(b) If not, a cut point is selected in x? yielding two
parts that are independently translated applying
the same procedure recursively.
(c) The two translations are concatenated either in
the same order that they were produced or sec-
ond first.
2.1 Model parameters
Apart from the parameters of model 1 (a stochas-
tic dictionary and a discrete distribution of lenghts),
each of the steps above defines a set of parameters.
We will consider now each set in turn.
Deciding the submodel The first decision is
whether to use IBM?s model 1 or to apply the MAR
recursively. This decision is taken on account of the
length of x?. A table is used so that:
Pr(IBM | x?) ? MI(|x?|),
Pr(MAR | x?) ? MM (|x?|).
Clearly, for every x? we have that Pr(IBM | x?) +
Pr(MAR | x?) = 1.
Deciding the cut point It is assumed that the
probability of cutting the input sentence at a given
position b is most influenced by the words around it:
xb and xb+1. We use a table B such that:
Pr(b | x?) ?
B(xb, xb+1)
?|x?|?1
i=1 B(xi, xi+1)
.
That is, a weight is assigned to each pair of words
and they are normalized in order to obtaing a proper
probability distribution.
1We use the following notational conventions. A string or
sequence of words is indicated by a bar like in x?, individual
words from the sequence carry a subindex and no bar like in xi,
substrings are indicated with the first and last position like in x?ji .
Finally, when the final position of the substring is also the last
of the string, a dot is used like in x?.i
Deciding the concatenation direction The direc-
tion of the concatenation is also decided as a func-
tion of the two words adjacent to the cut point, that
is:
Pr(D | b, x?) ? DD(xb, xb+1),
Pr(I | b, x?) ? DI(xb, xb+1),
where D stands for direct concatenation (i.e.
the translation of x?b1 will precede the transla-
tion of x?.b+1) and I stands for inverse. Clearly,
DD(xb, xb+1) + DI(xb, xb+1) = 1 for every
pair (xb, xb+1).
2.2 Final form of the model
With these parameters, the final model is:
pT (y? | x?) =
MI(|x?|)pI(y? | x?)
+MM (|x?|)
|x?|?1?
b=1
B(xb, xb+1)
?|x?|?1
i=1 B(xi, xi+1)
?
(
DD(xb, xb+1)
|y?|?1?
c=1
pT (y?
c
1 | x?
b
1)pT (y?
.
c+1 | x?
.
b+1)
+DI(xb, xb+1)
|y?|?1?
c=1
pT (y?
.
c+1 | x?
b
1)pT (y?
c
1 | x?
.
b+1)
)
were pI represents the probability assigned by
model 1 to a pair of sentences.
2.3 Model training
The training of the model parameters is done max-
imizing the likelihood of the training sample. For
each training pair (x?, y?) and each parameter P rele-
vant to it, the value of
C(P ) =
P
pT (y? | x?)
? pT (y? | x?)
? P
(1)
is computed. This corresponds to the counts of P
in that pair. As the model is polynomial on all
its parameters except for the cuts (the B?s), Baum-
Eagon?s inequality (Baum and Eagon, 1967) guar-
antees that normalization of the counts increases the
likelihood of the sample. For the cuts, Gopalakr-
ishnan?s inequality (Gopalakrishnan et al, 1991) is
used.
96
Table 1: Statistics of the training corpus. Vocabulary
refers to the number of different words.
Language Sentences Words Vocabulary
Romanian 48 481 976 429 48 503
English 48 481 1 029 507 27 053
The initial values for the dictionary are trained
using model 1 training and then a series of itera-
tions are made updating the values of every param-
eter. Some additional considerations are taken into
account for efficiency reasons, see (Vilar and Vidal,
2005) for details.
A potential problem here is the large number of
parameters associated with cuts and directions: two
for each possible pair of words. But, as we are in-
terested only in aligning the corpus, no provision is
made for the data sparseness problem.
3 The task
The aim of the task was to align a set of 200 transla-
tion pairs between Romanian and English. As train-
ing material, the text of 1984, the Romanian Con-
stitution and a collection of texts from the Web were
provided. Some details about this corpus can be seen
in Table 1.
4 Splitting the corpus
To reduce the high computational costs of training of
the parameters of MAR, a heuristic was employed in
order to split long sentences into smaller parts with
a length less than l words.
Suppose we are to split sentences x? and y?. We
begin by aligning each word in y? to a word in x?.
Then, a score and a translation is assigned to each
substring x?ji with a length below l. The translation is
produced by looking for the substring of y? which has
a length below l and which has the largest number
of words aligned to positions between i and j. The
pair so obtained is given a score equal to sum of: (a)
the square of the length of x?ji ; (b) the square of the
number of words in the output aligned to the input;
and (c) minus ten times the sum of the square of the
number of words aligned to a nonempty position out
of x?ji and the number of words outside the segment
chosen that are aligned to x?ji .
These scores are chosen with the aim of reduc-
ing the number of segments and making them as
?complete? as possible, ie, the words they cover are
aligned to as many words as possible.
After the segments of x? are so scored, the partition
of x? that maximizes the sum of scores is computed
by dynamic programming.
The training material was split in parts up to ten
words in length. For this, an alignment was obtained
by training an IBM model 4 using GIZA++ (Och and
Ney, 2003). The test pairs were split in parts up to
twenty words. After the split, there were 141 945
training pairs and 337 test pairs. Information was
stored about the partition in order to be able to re-
cover the correct alignments later.
5 Aligning the corpus
The parameters of the MAR were trained as ex-
plained above: first ten IBM model 1 iterations were
used for giving initial values to the dictionary proba-
bilities and then ten more iterations for retraining the
dictionary together with the rest of the parameters.
The alignment of a sentence pair has the form of a
tree similar to those in Figure 1. Each interior node
has two children corresponding to the translation of
the two parts in which the input sentence is divided.
The leaves of the tree correspond to those segments
that were translated by model 1.
As the reference alignments do not have this kind
of structure it is necessary to ?flatten? them. The
procedure we have employed is very simple: if we
are in a leaf, every output word is aligned to every
input word; if we are in an interior node, the ?flat?
alignments for the children are built and then com-
bined. Note that the way leaves are labeled tends to
favor recall over precision.
The flat alignment corresponding to the trees of
Figure 1 are:
economia si finantele publice
economy and public finance
and
Winston se intoarse brusc .
Winston turned round abruptly .
97
economia si finantele publice
economy and public finance
economia si
economy and
finantele publice
public finance
economia
economy
si
and
finantele
finance
publice
public
Winston se intoarse brusc .
Winston turned round abruptly .
Winston se intoarse
Winston turned round
brusc .
abruptly .
Winston
Winston
se intoarse
turned round
brusc
abruptly
.
.
Figure 1: Two trees representing the alignment of two pair of sentences.
Precision Recall F-Measure AER
0.5404 0.6465 0.5887 0.4113
Table 2: Results for the task
6 Results and discussion
The results for the alignment can be seen in Ta-
ble 2. As mentioned above, there is a certain prefer-
ence for recall over precision. For comparison, us-
ing GIZA++ on the split corpus yields a precision
of 0.6834 and a recall of 0.5601 for a total AER
of 0.3844.
Note that although the definition of the task al-
lowed to mark the alignment as either probable or
sure, we marked all the alignments as sure, so pre-
cision and recall measures are given only for sure
alignments.
There are aspects that deserve further experimen-
tation. The first is the split of the original corpus.
It would be important to evaluate its influence, and
to try to find methods of using MAR without any
split at all. A second aspect of great importance is
the method used for ?flattening?. The way leaves
of the tree are treated probably could be improved
if the dictionary probabilities were somehow taken
into account.
7 Conclusions
We have presented the experiments done using a
new translation model for finding word alignments
in parallel corpora. Also, a method for splitting the
input before training the models has been presented.
References
Leonard E. Baum and J. A. Eagon. 1967. An inequal-
ity with applications to statistical estimation for prob-
abilistic functions of Markov processes and to a model
for ecology. Bulletin of the American Mathematical
Society, 73:360?363.
Peter F. Brown, Stephen A. Della Pietra, Vincent J. Della
Pietra, and Robert L. Mercer. 1993. The mathemat-
ics of statistical machine translation: Parameter esti-
mation. Computational Linguistics, 19(2):263?311,
June.
Yonggang Deng, Shankar Kumar, and William Byrne.
2004. Bitext chunk alignment for statistical machine
translation. Research Note 50, CLSP Johns Hopkins
University, April.
P. S. Gopalakrishnan, Dimitri Kanevsky, Arthur Na?das,
and David Nahamoo. 1991. An inequality for ra-
tional functions with applications to some statistical
problems. IEEE Transactions on Information Theory,
37(1):107?113, January.
Franz Josef Och and Hermann Ney. 2003. A system-
atic comparison of various statistical alignment mod-
els. Computational Linguistics, 29(1):19?51.
Juan Miguel Vilar and Enrique Vidal. 2005. A recursive
statistical translation model. In Workshop on Build-
ing and Using Parallel Texts, Ann-Arbour (Michigan),
June.
Juan Miguel Vilar Torres. 1998. Aprendizaje de Tra-
ductores Subsecuenciales para su empleo en tareas
de dominio restringido. Ph.D. thesis, Departamento
de Sistemas Informa?ticos y Computacio?n, Universidad
Polite?cnica de Valencia, Valencia (Spain). (in Span-
ish).
Dekai Wu. 1997. Stochastic inversion transduction
grammars and bilingual parsing of parallel corpora.
Computational Linguistics, 23(3):377?403.
98
Proceedings of the ACL Workshop on Building and Using Parallel Texts, pages 199?207,
Ann Arbor, June 2005. c?Association for Computational Linguistics, 2005
A Recursive Statistical Translation Model?
Juan Miguel Vilar
Dpto. de Lenguajes y Sistemas
Informa?ticos
Universitat Jaume I
Castello?n (Spain)
jvilar@lsi.uji.es
Enrique Vidal
Dpto. de Sistemas Informa?ticos
y Computacio?n
Universidad Polite?cnica de Valencia
Instituto Tecnolo?gico de Informa?tica
Valencia (Spain)
evidal@iti.upv.es
Abstract
A new model for statistical translation is
presented. A novel feature of this model
is that the alignments it produces are hier-
archically arranged. The generative pro-
cess begins by splitting the input sen-
tence in two parts. Each of the parts is
translated by a recursive application of
the model and the resulting translation
are then concatenated. If the sentence
is small enough, a simpler model (in our
case IBM?s model 1) is applied.
The training of the model is explained. Fi-
nally, the model is evaluated using the cor-
pora from a large vocabulary shared task.
1 Introduction
Suppose you were to find an English translation for
a Spanish sentence. One possible approach is to as-
sume that every English sentence is a candidate but
that different English sentences have different prob-
abilities of being the correct translation. Then, the
translation task can be divided in two parts: define
an adequate probability distribution that answers to
the question ?given this English sentence, which is
the probability that it is a good translation of that
Spanish sentence??; and use that distribution in or-
der to find the most likely translation of your input
sentence.
?Work partially supported by Bancaixa through the project
?Sistemas Inductivos, Estad??sticos y Estructurales, para la Tra-
duccio?n Automa?tica (Siesta)?.
This approach is referred to as the statistical ap-
proach to machine translation. The usual approach
is to define an statistical model and train its parame-
ters from a training corpus consisting in pairs of sen-
tences that are known to be translation of each other.
Different models have been presented in the litera-
ture, see for instance (Brown et al, 1993; Och and
Ney, 2004; Vidal et al, 1993; Vogel et al, 1996).
Most of them rely on the concept of alignment: a
mapping from words or groups of words in a sen-
tence into words or groups in the other (in the case
of (Vidal et al, 1993) the mapping goes from rules
in a grammar for a language into rules of a grammar
for the other language). This concept of alignment
has been also used for tasks like authomatic vocab-
ulary derivation and corpus alignment (Dagan et al,
1993).
A new statistical model is proposed in this pa-
per, which was initially introduced in (Vilar Torres,
1998). This model is designed so that the align-
ment between two sentences can be seen in an struc-
tured manner: each sentence is divided in two parts
and they are put in correspondence; then each of
those parts is similarly divided and related to its
translation. This way, the alignment can be seen as
a tree structure which aligns progressively smaller
segments of the sentences. This recursive procedure
gives its name to the model: MAR, which comes
from ?Modelo de Alineamiento Recursivo?, which
is Spanish for ?Recursive Alignment Model?.
The rest of the paper is structured as follows: af-
ter a comment on previous works, we introduce the
notation that we will use throughout the paper, then
we briefly explain the model 1 from IBM, next we
199
introduce our model, then we explain the process
of parameter estimation, and how to use the model
to translate new test sentences. Finally, we present
some experiments and results, together with conclu-
sions.
2 Previous works
The initial formulation of the proposed model,
including the training procedures, was presented
in (Vilar Torres, 1998), along with preliminary ex-
periments in a small translation task which provided
encouraging results.
This model shares some similarities with the
stochastic inversion transduction grammars (SITG)
presented by Wu in (Wu, 1997). The main point
in common is the type of possible alignments con-
sidered in both models. Some of the properties
of these alignments are studied in (Zens and Ney,
2003). However, the parametrizations of SITGs and
the MAR are completely different. The generative
process of SITGs produces simultaneously the in-
put and output sentences and the parameters of the
model refer to the rules of the nonterminals. This
provides a symmetry to both input and output sen-
tences. In contrast, our model clearly distinguishes
the input and output sentences and the parameters
are based on observable properties of the strings
(their lengths and the words composing them). On
the other hand, the MAR idea of splitting the sen-
tences until a simple structure is found, also ap-
pears in the Divisive Clustering approach presented
in (Deng et al, 2004). Again, the main difference
lies in the probabilistic modeling of the alignments.
In Divisive Clustering a uniform distribution on the
alignments is assumed while MAR uses a explicit
parametrization.
3 Some notation
In the rest of the paper, we use the following nota-
tion. Sentences are taken as concatenations of sym-
bols (words) and represented using a letter and a
small bar, like in x?. The individual words are de-
signed by the name of the sentence and a subindex
indicating the position, so x? = x1x2 . . . xn. The
length of a sentence is indicated by |x?|. Segments
of a sentence are denoted by x?ji = xi . . . xj . For the
substrings of the form x?|x?|i we use the notation x?.i.
Consistently, x? denotes the input sentence and y?
its translation and both are assumed to have at least
one word. The input and output vocabularies are X
and Y , respectively. Finally, we assume that we are
presentend a set M for training our models. The ele-
ments of this set are pairs (x?, y?) where y? is a possible
translation for x?.
4 IBM?s model 1
IBM?s model 1 is the simplest of a hierarchy of five
statistical models introduced in (Brown et al, 1993).
Each model of the hierarchy can be seen as a refine-
ment of the previous ones. Although model 1, which
we study here, relies on the concept of alignment,
its formulation allows an interpretation of it as a re-
lationship between multisets of words (the order of
the words is irrelevant in the final formula).
A word of warning is in order here. The model we
are going to present has an important difference with
the original: we do not use the empty word. This is
a virtual word which does not belong to the vocabu-
lary of the task and that is added to the beginning of
each sentence in order to allow words in the output
that cannot be justified by the words in the input. We
have decided not to incorporate it because of the use
we are going to make of the model. As we will see,
model 1 is going to be used repeatedly over different
substrings of the input sentence in order to analyze
their contribution to the total translation. This means
that we would have an empty word in each of these
substrings. We have decided to avoid this ?prolifer-
ation? of empty words. Future work may introduce
the concept in a more appropriate way.
The model 1 makes two assumptions. That a
stochastic dictionary can be employed to model the
probability that word y is the translation of word x
and that all the words in the input sentence have the
same weight in producing a word in the output. This
leads to:
pI(y? | x?) =
?(|x?|, |y?|)
|x?||y?|
|y?|?
j=1
|x?|?
i=1
t(yj | xi). (1)
Where t is the stochastic dictionary and ? represents
a table that relates the length of the alignment with
the length of the input sentence (we assume that
there is a finite range of possible lengths). This ex-
plicit relations between the lengths is not present in
200
the original formulation of the model, but we prefer
to include it so that the probabilities are adequately
normalized.
Clearly, this model is not adequate to describe
complex translations in which complicated patterns
and word order changes may appear. Nevertheless,
this model can do a good job to describe the transla-
tion of short segments of texts. For example, it can
be adequate to model the translation of the Spanish
?gracias? into the English ?thank you?.
5 A Recursive Alignment Model
To overcome that limitation of the model we will
take the following approach: if the sentence is com-
plex enough, it will be divided in two and the two
halves will be translated independently and joined
later; if the sentence is simple, the model 1 will be
used.
Let us formalize this intuition for the generative
model. We are given an input sentence x? and the first
decission is whether x? is going to be translated by
IBM?s model 1 or it is complex enough to be trans-
lated by MAR. In the second case, three steps are
taken: a cut point of x? is defined, each of the result-
ing parts are translated, and the corresponding trans-
lations are concatenated. For the translation of the
second step, the same process is recursively applied.
The concatenation of the third step can be done in
a ?direct? way (the translation of the first part and
then the translation of the second) or in an ?inverse?
way (the translation of the second part and then the
translation of the first). The aim of this choice is to
allow for the differences in word order between the
input and ouput languages.
So, we are proposing an alignment model in
which IBM?s model 1 will account for translation
of elementary segments or individual words while
translation of larger and more complex segments or
whole sentences will rely on a hierarchical align-
ment pattern in which model 1 alignments will be
on the lowest level of the hierarchy.
Following this discussion, the model can be for-
mally described through a series of four random ex-
periments:
? The first is the selection of the model. It has
two possible outcomes: IBM and MAR, with
obvious meanings.
? The second is the choice of b, a cut point of x?.
The segment x?b1 will be used to generate one of
the parts of the translation, the segment x?.b+1
will generate the other. It takes values from 1
to |x?| ? 1.
? The third is the decision about the order of the
concatenation. It has two possible outcomes:
D (for direct) and I (for inverse).
? The fourth is the translation of each of the
halves of x?. They take values in Y+.
The translation probability can be approximated
as follows:
pT (y? | x?) = Pr(M = IBM | x?)pI(y? | x?)
+ Pr(M = MAR | x?)pM (y? | x?).
The value of pI(y? | x?) corresponds to IBM?s
model 1 (Equation 1). To derive pM (y? | x?), we ob-
serve that:
pM (y? | x?) =
|x?|?1?
b=1
Pr(b | x?)
?
d?{D,I}
Pr(d | b, x?)
?
y?1?Y+
Pr(y?1 | b, d, x?)
?
y?2?Y+
Pr(y?2 | b, d, x?, y?1) Pr(y? | d, b, x?, y?1, y?2).
Note that the probability that y? is generated from
a pair (y?1, y?2) is 0 if y? 6= y?1y?2 and 1 if y? = y?1y?2, so
the last two lines can be rewritten as:
?
y?1?Y+
Pr(y?1 | b, d, x?)
?
y?2?Y+
Pr(y?2 | b, d, x?, y?1) Pr(y? | b, d, x?, y?1, y?2)
=
?
y?1,y?2?Y
+
y?=y?1y?2
Pr(y?1 | b, d, x?) Pr(y?2 | b, d, x?, y?1)
=
?
y?1 ? pref(y?)? y?
Pr(y?1 | b, d, x?) Pr(y?
?1
1 y? | b, d, x?, y?1)
=
|y?|?1?
c=1
Pr(y?c1 | b, d, x?) Pr(y?
.
c+1 | b, d, x?, y?
c
1),
201
where pref(y?) is the set of prefixes of y?. And finally:
pM (y? | x?) =
|x?|?1?
b=1
Pr(b | x?)
?
d?{D,I}
Pr(d | b, x?)
|y?|?1?
c=1
Pr(y?c1 | b, d, x?) Pr(y?
.
c+1 | b, d, x?, y?
c
1).
(2)
The number of parameters of this model is very
large, so it is necessary to introduce some simplifi-
cations in it. The first one relates to the decision of
the translation model: we assume that it can be done
just on the basis of the length of the input sentence.
That is, we cat set up two tables, MI and MM , so
that
Pr(M = IBM | x?) ? MI(|x?|),
Pr(M = MAR | x?) ? MM (|x?|).
Obviously, for any x? ? X+, we will haveMI(|x?|)+
MM (|x?|) = 1. On the other hand, since it is not
possible to break a one word sentence, we define
MI(1) = 1. This restriction comes in the line men-
tioned before: the translation of longer sentences
will be structured whereas shorter ones can be trans-
lated directly.
In order to decide the cut point, we will assume
that the probability of cutting the input sentence at
a given position b is most influenced by the words
around it: xb and xb+1. We use a table B such that:
Pr(b | x?) ?
B(xb, xb+1)
?|x?|?1
i=1 B(xi, xi+1)
.
This can be interpreted as having a weight for each
pair of words and normalizing these weights in each
sentence in order to obtaing a proper probability dis-
tribution.
Two more tables, DD and DI , are used to store the
probabilities that the alignment be direct or inverse.
As before, we assume that the decission can be made
on the basis of the symbols around the cut point:
Pr(d = D | b, x?) = DD(xb, xb+1),
Pr(d = I | b, x?) = DI(xb, xb+1).
Again, we have DD(xb, xb+1) + DI(xb, xb+1) = 1
for every pair of words (xb, xb+1).
Finally, a probability must be assigned to the
translation of the two halves. Assuming that they are
independent we can apply the model in a recursive
manner:
Pr(y?c1 | b, d, x?) ?
{
pT (y?c1 | x?
b
1) if d = D,
pT (y?c1 | x?
.
b+1) if d = I ,
Pr(y?.c+1 | b, d, x?, y?
c
1) ?
{
pT (y?.c+1 | x?
.
b+1) if d = D,
pT (y?.c+1 | x?
b
1) if d = I .
Finally, we can rewrite (2) as:
pM (y? | x?) =
|x?|?1?
b=1
B(xb, xb+1)
?|x?|?1
i=1 B(xi, xi+1)
?
(
DD(xb, xb+1)
|y?|?1?
c=1
pT (y?
c
1 | x?
b
1)pT (y?
.
c+1 | x?
.
b+1)
+DI(xb, xb+1)
|y?|?1?
c=1
pT (y?
.
c+1 | x?
b
1)pT (y?
c
1 | x?
.
b+1)
)
.
The final form of the complete model is then:
pT (y? | x?) =
MI(|x?|)pI(y? | x?)
+MM (|x?|)
|x?|?1?
b=1
B(xb, xb+1)
?|x?|?1
i=1 B(xi, xi+1)
?
(
DD(xb, xb+1)
|y?|?1?
c=1
pT (y?
c
1 | x?
b
1)pT (y?
.
c+1 | x?
.
b+1)
+DI(xb, xb+1)
|y?|?1?
c=1
pT (y?
.
c+1 | x?
b
1)pT (y?
c
1 | x?
.
b+1)
)
.
(3)
6 Parameter estimation
Once the model is defined, it is necessary to find
a way of estimating its parameters given a training
corpus M. We will use maximun likelihood estima-
tion. In our case, the likelihood of the sample corpus
is:
V =
?
(x?,y?)?M
pT (y? | x?).
202
In order to maximize V , initial values are given
to the parameters and they are reestimated using re-
peatedly Baum-Eagon?s (Baum and Eagon, 1967)
and Gopalakrishnan?s (Gopalakrishnan et al, 1991)
inequalities. Let P be a parameter of the model (ex-
cept for those in B) and let F(P ) be its ?family? (i.e.
the set of parameters such that
?
Q?F(P ) Q = 1).
Then, a new value of P can be computed as follows:
N (P ) =
P
? V
? P
?
Q?F(P )
Q
? V
? Q
=
?
(x?,y?)?M
P
pT (y? | x?)
? pT (y? | x?)
? P
?
Q?F(P )
?
(x?,y?)?M
Q
pT (y? | x?)
? pT (y? | x?)
? Q
=
C(P )
?
Q?F(P )
C(Q)
,
(4)
where
C(P ) =
?
(x?,y?)?M
P
pT (y? | x?)
? pT (y? | x?)
? P
, (5)
are the ?counts? of parameter P . This is correct as
long as V is a polynomial in P . However, we have a
problem for B since V is a rational function of these
parameters. We can solve it by assuming, without
lose of generality, that
?
x1,x2?X B(x1, x2) = 1.
Then Gopalakrishnan?s inequality can be applied
similarly and we get:
N (P ) =
C + C(P )
?
Q?F(P )
C + C(Q)
, (6)
where C is an adequate constant. Now it is easy
to design a reestimation algorithm. The algorithm
gives arbitrary initial values to the parameters (typi-
cally those corresponding to uniform probabilities),
computes the counts of the parameters for the corpus
and, using either (4) or (6), gets new values for the
parameters. This cycle is repeated until a stopping
criterion (in our case a prefixed number of iterations)
is met. This algorithm can be seen in Figure 1
7 Some notes on efficiency
Estimating the parameters as discussed above entails
high computational costs: computing pT (y? | x?) re-
quires O(mn) arithmetic operations involving the
values of pT (y?ji | x?lk) for every possible value of
i, j, k and l, which are O(m2n2). This results in a
global cost of O(m3n3). On the other hand, com-
puting ? pT? P costs as much as computing pT . So it is
interesting to keep the number of computed deriva-
tives low.
7.1 Reduction of the parameters to train
In the experiments we have followed some heuristics
in order not to reestimate certain parameters:
? The values of MI ?and, consequently,
of MM? for lengths higher than a threshold
are assumed to be 0 and therefore there is no
need to estimate them.
? As a consequence, the values of ? for lengths
above the same threshold, need not be reesti-
mated.
? The values of t for pairs of words with counts
under a certain threshold are not reestimated.
Furthermore, during the computation of counts, the
recursion is cut on those substring pairs where the
value of the probability for the translation is very
small.
7.2 Efficient computation of model 1
Other source of optimization is the realization that
for computing pT (y? | x?), it is necessary to com-
pute the value of pI for each possible pair (x?ieib, y?oeob)
(where ib, ie, ob and oe stand for input begin, in-
put end, output begin and output end, respectively).
Fortunately, it is possible to accelerate this compu-
tations. First, define:
I(ib, ie, ob, oe) =
pI(x?ieib, y?
oe
ob)
?(ie? ib + 1, oe? ob + 1)
=
1
(ie? ib + 1)oe?ob+1
oe?
j=ob
ie?
i=ib
t(y?j | x?i).
Now let
S(ib, ie, j) =
ie?
i=ib
t(y?j | x?i).
203
Algorithm Maximum likelihood estimation
give initial values to the parameters;
repeat
initialize the counts to 0;
for each (x?, y?) ? M do
compute pT (y? | x?);
for each parameter P involved in the alignment of (x?, y?) do
CP := CP +
P
pT (y? | x?)
? pT (y? | x?)
? P
;
endfor
endfor
for each parameter P do
reestimate P using (4) or (6);
endfor
until the stopping criterion is met;
End Maximum likelihood estimation
Figure 1: Algorithm for maximum likelihood estimation of the parameters of MAR
This leads to
I(ib, ie, ob, oe) = S(ib, ie, ob),
if ob = oe, and to
I(ib, ie, ob, oe) =
I(ib, ie, ob, oe? 1)S(ib, ie, ob)
(ie? ib + 1)
,
if ob 6= oe.
So we can compute all values of I with the algo-
rithm in Figure 2.
7.3 Splitting the corpora
Another way of reducing the costs of training has
been the use of a heuristic to split long sentences
into smaller parts with a length less than l words.
Suppose we are to split sentences x? and y?. We
begin by aligning each word in y? to a word in x?.
Then, a score and a translation is assigned to each
substring x?ji with a length below l. The translation is
produced by looking for the substring of y? which has
a length below l and which has the largest number
of words aligned to positions between i and j. The
pair so obtained is given a score equal to sum of: (a)
the square of the length of x?ji ; (b) the square of the
number of words in the output aligned to the input;
and (c) minus ten times the sum of the square of the
number of words aligned to a nonempty position out
of x?ji and the number of words outside the segment
chosen that are aligned to x?ji .
After the segments of x? are so scored, the partition
of x? that maximizes the sum of scores is computed
by dynamic programming.
8 Translating the test sentences
The MAR model can be used to obtain adequate
bilingual templates which can be used to translate
new test sentences using an appropriate template-
based translation system. Here we have adopted the
pharaoh program (Koehn, 2004).
8.1 Finding the templates
The parameters of the MAR were trained using the
algorithm above: first ten IBM model 1 iterations
were used for giving initial values to the dictionary
probabilities and then five more iterations for re-
training the dictionary together with the rest of the
parameters.
The alignment of a pair has the form of a tree sim-
ilar to the one in Figure 3 (this is one of the sen-
tences from the Spanish-English part of the training
corpus). Each interior node has two children corre-
sponding to the translation of the two parts in which
the input sentence is divided. The leaves of the tree
correspond to those segments that were translated by
model 1. The templates generated were those de-
fined by the leaves. Further templates were obtained
by interpreting each pair of words in the dictionary
as a template.
204
Algorithm all IBM
for ob := 1 to |y?| do
for oe := ob to |y?| do
for ib := 1 to |x?| do
S := 0;
for ie := ib to |x?| do
S := S + t(yoe | xie);
I(ib, ie, ob, oe) :=
{
S/(ie? ib + 1) if ob = oe,
I(ib, ie, ob, oe? 1)? S/(ie? ib + 1) otherwise;
End all IBM
Figure 2: Efficient computation of different values of IBM?s model 1.
Equipos a presi?n transportables
Transportable pressure equipment
Equipos
equipment
a presi?n transportables
Transportable pressure
a presi?n
pressure
transportables
Transportable
Figure 3: A sample alignment represented as a tree.
Each template was assigned four weights1 in or-
der to use the pharaoh program. For the templates
obtained from the alignments, the first weight was
the probability assigned to it by MAR, the second
weight was the count for the template, i.e., the num-
ber of times that template was found in the corpus,
the third weight was the normalized count, i.e., the
number of times the template appeared in the corpus
divided by the number of times the input part was
present in the corpus, finally, the fourth weight was
a small constant (10?30). The intention of this last
weight was to ease the combination with the tem-
plates from the dictionary. For these, the first three
weights were assigned the same small constant and
the fourth was the probability of the translation of
the pair obtained from the stochastic dictionary. This
weighting schema allowed to separate the influence
of the dictionary in smoothing the templates.
1They should have been probabilities, but in two of the cases
there was no normalization and in one they were even greater
than one!
Table 1: Statistics of the training corpora. The
languages are German (De), English (En), Span-
ish (Es), Finnish (Fi) and French (Fr).
Languages Sentences Words (input/output)
De-En 751 088 15 257 871 / 16 052 702
Es-En 730 740 15 725 136 / 15 222 505
Fi-En 716 960 11 318 863 / 15 493 334
Fr-En 688 031 15 599 184 / 13 808 505
9 Experiments
In order to test the model, we have decided to par-
ticipate in the shared task for this workshop.
9.1 The task
The aim of the task was to translate a set of 2,000
sentences from German, Spanish, Finnish and
French into English. Those sentences were ex-
tracted from the Europarl corpus (Koehn, Unpub-
lished). As training material, four different corpora
were provided, one for each language pair, compris-
ing around 700 000 sentence pairs each. Some de-
tails about these corpora can be seen in Table 1. An
automatic alignment for each corpus was also pro-
vided.
The original sentence pairs were splitted using the
techniques discussed in section 7.3. The total num-
ber of sentences after the split is presented in Ta-
ble 2. Two different alignments were used: (a) the
one provided in the definition of the task and (b)
one obtained using GIZA++ (Och and Ney, 2003)
to train an IBM?s model 4. As it can be seen, the
number of parts is very similar in both cases. The
205
Table 2: Number of training pairs after splitting to
a maximum length of ten. ?Provided? refers to the
alignment provided in the task, ?GIZA++? to those
obtained with GIZA++.
Sentence pairs
Languages Provided GIZA++
De-En 2 351 121 2 282 316
Es-En 2 160 039 2 137 301
Fi-En 2 099 634 2 017 130
Fr-En 2 112 931 2 080 200
Table 3: Number of templates for each language
pair: ?Alignment? shows the number of templates
derived from the alignments; ?dictionary?, those ob-
tained from the dictionary; and ?total? is the sum.
(a) Using the alignments provided with the task.
Lang. Alignment Dictionary Total
De-En 2 660 745 1 840 582 4 501 327
Es-En 2 241 344 1 385 086 3 626 430
Fi-En 2 830 433 2 852 583 5 683 016
Fr-En 2 178 890 1 222 266 3 401 156
(b) Using GIZA++.
Lang. Alignment Dictionary Total
De-En 2 672 079 1 796 887 4 468 966
Es-En 2 220 533 1 350 526 3 571 059
Fi-En 2 823 769 2 769 929 5 593 698
Fr-En 2 140 041 1 181 990 3 322 031
number of pairs after splitting is roughly three times
the original.
Templates were extracted as described in sec-
tion 8.1. The number of templates we obtained can
be seen in Table 3. Again, the influence of the
type of alignment was small. Except for Finnish,
the number of dictionary templates was roughly two
thirds of the templates extracted from the align-
ments.
9.2 Obtaining the translations
Once the templates were obtained, the development
corpora were used to search for adequate values of
Table 4: Best weights for each language pair. The
columns are for the probability given by the model,
the counts of the templates, the normalized counts
and the weight given to the dictionary.
(a) Using the alignments provided with the task.
Languages Model Count Norm Dict
De-En 0.0 3.0 0.0 0.3
Es-En 0.0 2.9 0.0 0.4
Fi-En 0.0 7.0 0.0 0.0
Fr-En 0.0 7.0 1.0 1.0
(b) Using GIZA++.
Languages Model Count Norm Dict
De-En 0.0 3.0 0.0 0.0
Es-En 0.0 2.9 0.0 0.4
Fi-En 0.0 3.0 1.5 0.0
Fr-En 0.0 3.0 1.0 0.4
Table 5: BLEU scores of the translations.
BLEU
Languages Provided GIZA++
De-En 18.08 18.89
Es-En 21.65 21.48
Fi-En 13.31 13.79
Fr-En 21.25 19.86
the weights that pharaoh uses for each template
(these are the weights passed to option weight-t,
the other weights were not changed as an initial ex-
ploration seemed to indicate that they had little im-
pact). As expected, the best weights differed be-
tween language pairs. The values can be seen in
table 4.
It is interesting to note that the probabilities as-
signed by the model to the templates seemed to
be better not taken into account. The most impor-
tant feature was the counts of the templates, which
sometimes were helped by the use of the dictionary,
although that effect was small. Normalization of
counts also had little impact.
206
10 Results and discussion
The results over the test sets can be seen in Table 5.
It can be seen that, except for French, the influence
of the initial alignment is very small. Also, the best
results are obtained for Spanish and French, which
are more similar to English that German or Finnish.
There are still many open questions that deserve
more experimentation. The first is the influence of
the split of the original corpora. Although the simi-
larity of results seem to indicate that it has little in-
fluence, this has to be tested. Two more relevant as-
pects are whether the weighting schema is the best
for the decoder. In particular, it is surprising that the
normalization of counts had so little effect.
Finally, the average number of words per template
is below two, which probably is too low. It is inter-
esting to find alternate ways of obtaining the tem-
plates, for instance using internal nodes up to a given
height or covering portions of the sentences up to a
predefined number of words.
11 Conclusions
A new translation model has been presented. This
model produces translations in a recursive way: the
input sentence is divided in two parts, each is trans-
lated using the same procedure recursively and the
translations are concatenated. The model has been
used for finding the templates in a large vocabulary
translation task. This involved using several heuris-
tics to improve training time, including a method for
splitting the input before training the models. Fi-
nally, the influence of using a stochastic dictionary
together with the templates as a means of smoothing
has been explored.
References
Leonard E. Baum and J. A. Eagon. 1967. An inequal-
ity with applications to statistical estimation for prob-
abilistic functions of Markov processes and to a model
for ecology. Bulletin of the American Mathematical
Society, 73:360?363.
Peter F. Brown, Stephen A. Della Pietra, Vincent J. Della
Pietra, and Robert L. Mercer. 1993. The mathemat-
ics of statistical machine translation: Parameter esti-
mation. Computational Linguistics, 19(2):263?311,
June.
Ido Dagan, Kenneth W. Church, and William A. Gale.
1993. Robust bilingual word alignment for machine
aided translation. In Proceedings of the Workshop on
Very Large Corpora, Columbus, Ohio (USA). ACL.
Yonggang Deng, Shankar Kumar, and William Byrne.
2004. Bitext chunk alignment for statistical machine
translation. Research Note 50, CLSP Johns Hopkins
University, April.
P. S. Gopalakrishnan, Dimitri Kanevsky, Arthur Na?das,
and David Nahamoo. 1991. An inequality for ra-
tional functions with applications to some statistical
problems. IEEE Transactions on Information Theory,
37(1):107?113, January.
Philipp Koehn. 2004. Pharaoh: A beam search decoder
for phrase-based statistical machine translation mod-
els. In AMTA, pages 115?124.
Philipp Koehn. Unpublished. Europarl: A multilingual
corpus for evaluation of machine translation. Draft.
Franz Josef Och and Hermann Ney. 2003. A system-
atic comparison of various statistical alignment mod-
els. Computational Linguistics, 29(1):19?51.
Franz Joseph Och and Hermann Ney. 2004. The align-
ment template approach to statistical machine transla-
tion. Computational Linguistics, 30(4):417?449, De-
cember.
Enrique Vidal, Roberto Pieraccini, and Esther Levin.
1993. Learning associations between grammars: A
new approach to natural language understanding. In
Proceedings of the EuroSpeech?93, pages 1187?1190,
Berlin (Germany).
Juan Miguel Vilar Torres. 1998. Aprendizaje de Tra-
ductores Subsecuenciales para su empleo en tareas
de dominio restringido. Ph.D. thesis, Departamento
de Sistemas Informa?ticos y Computacio?n, Universidad
Polite?cnica de Valencia, Valencia (Spain). (in Span-
ish).
Stephan Vogel, Hermann Ney, and Christoph Tillmann.
1996. HMM-based word alignment in statistical trans-
lation. In Proceedings of the COLING?96, pages 836?
841, Copenhagen (Denmark), August.
Dekai Wu. 1997. Stochastic inversion transduction
grammars and bilingual parsing of parallel corpora.
Computational Linguistics, 23(3):377?403.
Richard Zens and Hermann Ney. 2003. A comparative
study on reordering constraints in statistical machine
translation. In Proceedings of the Annual Meeting of
the Association for Computational Linguistics, pages
144?151, Sapporo (Japan), July. Association for Com-
putational Lingustics.
207
