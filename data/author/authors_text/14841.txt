Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics, pages 190?200,
Portland, Oregon, June 19-24, 2011. c?2011 Association for Computational Linguistics
Collecting Highly Parallel Data for Paraphrase Evaluation
David L. Chen
Department of Computer Science
The University of Texas at Austin
Austin, TX 78712, USA
dlcc@cs.utexas.edu
William B. Dolan
Microsoft Research
One Microsoft Way
Redmond, WA 98052, USA
billdol@microsoft.com
Abstract
A lack of standard datasets and evaluation
metrics has prevented the field of paraphras-
ing from making the kind of rapid progress
enjoyed by the machine translation commu-
nity over the last 15 years. We address both
problems by presenting a novel data collection
framework that produces highly parallel text
data relatively inexpensively and on a large
scale. The highly parallel nature of this data
allows us to use simple n-gram comparisons to
measure both the semantic adequacy and lex-
ical dissimilarity of paraphrase candidates. In
addition to being simple and efficient to com-
pute, experiments show that these metrics cor-
relate highly with human judgments.
1 Introduction
Machine paraphrasing has many applications for
natural language processing tasks, including ma-
chine translation (MT), MT evaluation, summary
evaluation, question answering, and natural lan-
guage generation. However, a lack of standard
datasets and automatic evaluation metrics has im-
peded progress in the field. Without these resources,
researchers have resorted to developing their own
small, ad hoc datasets (Barzilay and McKeown,
2001; Shinyama et al, 2002; Barzilay and Lee,
2003; Quirk et al, 2004; Dolan et al, 2004), and
have often relied on human judgments to evaluate
their results (Barzilay and McKeown, 2001; Ibrahim
et al, 2003; Bannard and Callison-Burch, 2005).
Consequently, it is difficult to compare different sys-
tems and assess the progress of the field as a whole.
Despite the similarities between paraphrasing and
translation, several major differences have prevented
researchers from simply following standards that
have been established for machine translation. Pro-
fessional translators produce large volumes of bilin-
gual data according to a more or less consistent spec-
ification, indirectly fueling work on machine trans-
lation algorithms. In contrast, there are no ?profes-
sional paraphrasers?, with the result that there are
no readily available large corpora and no consistent
standards for what constitutes a high-quality para-
phrase. In addition to the lack of standard datasets
for training and testing, there are also no standard
metrics like BLEU (Papineni et al, 2002) for eval-
uating paraphrase systems. Paraphrase evaluation
is inherently difficult because the range of potential
paraphrases for a given input is both large and unpre-
dictable; in addition to being meaning-preserving,
an ideal paraphrase must also diverge as sharply as
possible in form from the original while still sound-
ing natural and fluent.
Our work introduces two novel contributions
which combine to address the challenges posed by
paraphrase evaluation. First, we describe a frame-
work for easily and inexpensively crowdsourcing ar-
bitrarily large training and test sets of independent,
redundant linguistic descriptions of the same seman-
tic content. Second, we define a new evaluation
metric, PINC (Paraphrase In N-gram Changes), that
relies on simple BLEU-like n-gram comparisons to
measure the degree of novelty of automatically gen-
erated paraphrases. We believe that this metric,
along with the sentence-level paraphrases provided
by our data collection approach, will make it possi-
190
ble for researchers working on paraphrasing to com-
pare system performance and exploit the kind of
automated, rapid training-test cycle that has driven
work on Statistical Machine Translation.
In addition to describing a mechanism for collect-
ing large-scale sentence-level paraphrases, we are
also making available to the research community
85K parallel English sentences as part of the Mi-
crosoft Research Video Description Corpus 1.
The rest of the paper is organized as follows. We
first review relevant work in Section 2. Section 3
then describes our data collection framework and the
resulting data. Section 4 discusses automatic evalua-
tions of paraphrases and introduces the novel metric
PINC. Section 5 presents experimental results estab-
lishing a correlation between our automatic metric
and human judgments. Sections 6 and 7 discuss pos-
sible directions for future research and conclude.
2 Related Work
Since paraphrase data are not readily available, var-
ious methods have been used to extract parallel text
from other sources. One popular approach exploits
multiple translations of the same data (Barzilay and
McKeown, 2001; Pang et al, 2003). Examples of
this kind of data include the Multiple-Translation
Chinese (MTC) Corpus 2 which consists of Chinese
news stories translated into English by 11 transla-
tion agencies, and literary works with multiple trans-
lations into English (e.g. Flaubert?s Madame Bo-
vary.) Another method for collecting monolingual
paraphrase data involves aligning semantically par-
allel sentences from different news articles describ-
ing the same event (Shinyama et al, 2002; Barzilay
and Lee, 2003; Dolan et al, 2004).
While utilizing multiple translations of literary
work or multiple news stories of the same event can
yield significant numbers of parallel sentences, this
data tend to be noisy, and reliably identifying good
paraphrases among all possible sentence pairs re-
mains an open problem. On the other hand, multiple
translations on the sentence level such as the MTC
Corpus provide good, natural paraphrases, but rela-
1Available for download at http://research.
microsoft.com/en-us/downloads/
38cf15fd-b8df-477e-a4e4-a4680caa75af/
2Linguistic Data Consortium (LDC) Catalog Number
LDC2002T01, ISBN 1-58563-217-1.
tively little data of this type exists. Finally, some ap-
proaches avoid the need for monolingual paraphrase
data altogether by using a second language as the
pivot language (Bannard and Callison-Burch, 2005;
Callison-Burch, 2008; Kok and Brockett, 2010).
Phrases that are aligned to the same phrase in the
pivot language are treated as potential paraphrases.
One limitation of this approach is that only words
and phrases are identified, not whole sentences.
While most work on evaluating paraphrase sys-
tems has relied on human judges (Barzilay and
McKeown, 2001; Ibrahim et al, 2003; Bannard and
Callison-Burch, 2005) or indirect, task-based meth-
ods (Lin and Pantel, 2001; Callison-Burch et al,
2006), there have also been a few attempts at creat-
ing automatic metrics that can be more easily repli-
cated and used to compare different systems. Para-
Metric (Callison-Burch et al, 2008) compares the
paraphrases discovered by an automatic system with
ones annotated by humans, measuring precision and
recall. This approach requires additional human an-
notations to identify the paraphrases within paral-
lel texts (Cohn et al, 2008) and does not evalu-
ate the systems at the sentence level. The more
recently proposed metric PEM (Paraphrase Evalu-
ation Metric) (Liu et al, 2010) produces a single
score that captures the semantic adequacy, fluency,
and lexical dissimilarity of candidate paraphrases,
relying on bilingual data to learn semantic equiva-
lences without using n-gram similarity between can-
didate and reference sentences. In addition, the met-
ric was shown to correlate well with human judg-
ments. However, a significant drawback of this ap-
proach is that PEM requires substantial in-domain
bilingual data to train the semantic adequacy evalu-
ator, as well as sample human judgments to train the
overall metric.
We designed our data collection framework for
use on crowdsourcing platforms such as Amazon?s
Mechanical Turk. Crowdsourcing can allow inex-
pensive and rapid data collection for various NLP
tasks (Ambati and Vogel, 2010; Bloodgood and
Callison-Burch, 2010a; Bloodgood and Callison-
Burch, 2010b; Irvine and Klementiev, 2010), includ-
ing human evaluations of NLP systems (Callison-
Burch, 2009; Denkowski and Lavie, 2010; Zaidan
and Callison-Burch, 2009). Of particular relevance
are the paraphrasing work by Buzek et al (2010)
191
and Denkowski et al (2010). Buzek et al automati-
cally identified problem regions in a translation task
and had workers attempt to paraphrase them, while
Denkowski et al asked workers to assess the validity
of automatically extracted paraphrases. Our work is
distinct from these earlier efforts both in terms of
the task ? attempting to collect linguistic descrip-
tions using a visual stimulus ? and the dramatically
larger scale of the data collected.
3 Data Collection
Since our goal was to collect large numbers of para-
phrases quickly and inexpensively using a crowd,
our framework was designed to make the tasks short,
simple, easy, accessible and somewhat fun. For each
task, we asked the annotators to watch a very short
video clip (usually less than 10 seconds long) and
describe in one sentence the main action or event
that occurred in the video clip
We deployed the task on Amazon?s Mechanical
Turk, with video segments selected from YouTube.
A screenshot of our annotation task is shown in Fig-
ure 1. On average, annotators completed each task
within 80 seconds, including the time required to
watch the video. Experienced annotators were even
faster, completing the task in only 20 to 25 seconds.
One interesting aspect of this framework is that
each annotator approaches the task from a linguisti-
cally independent perspective, unbiased by the lexi-
cal or word order choices in a pre-existing descrip-
tion. The data thus has some similarities to parallel
news descriptions of the same event, while avoiding
much of the noise inherent in news. It is also simi-
lar in spirit to the ?Pear Stories? film used by Chafe
(1997). Crucially, our approach allows us to gather
arbitrarily many of these independent descriptions
for each video, capturing nearly-exhaustive cover-
age of how native speakers are likely to summarize
a small action. It might be possible to achieve sim-
ilar effects using images or panels of images as the
stimulus (von Ahn and Dabbish, 2004; Fei-Fei et al,
2007; Rashtchian et al, 2010), but we believed that
videos would be more engaging and less ambiguous
in their focus. In addition, videos have been shown
to be more effective in prompting descriptions of
motion and contact verbs, as well as verbs that are
generally not imageable (Ma and Cook, 2009).
Watch and describe a short segment of a video
You will be shown a segment of a video clip and asked to describe the main action/event in that segment in
ONE SENTENCE.
Things to note while completing this task:
The video will play only a selected segment by default. You can choose to watch the entire clip and/or
with sound although this is not necessary.
Please only describe the action/event that occurred in the selected segment and not any other parts of
the video.
Please focus on the main person/group shown in the segment
If you do not understand what is happening in the selected segment, please skip this HIT and move
onto the next one
Write your description in one sentence
Use complete, grammatically-correct sentences
You can write the descriptions in any language you are comfortable with
Examples of good descriptions:
A woman is slicing some tomatoes.
A band is performing on a stage outside.
A dog is catching a Frisbee.
The sun is rising over a mountain landscape.
Examples of bad descriptions (With the reasons why they are bad in parentheses):
Tomato slicing 
(Incomplete sentence)
This video is shot outside at night about a band performing on a stage
(Description about the video itself instead of the action/event in the video)
I like this video because it is very cute
(Not about the action/event in the video)
The sun is rising in the distance while a group of tourists standing near some railings are taking
pictures of the sunrise and a small boy is shivering in his jacket because it is really cold
(Too much detail instead of focusing only on the main action/event)
Segment starts: 25 | ends: 30 | length: 5 seconds
Play Segment ? Play Entire Video
Please describe the main event/action in the selected segment (ONE SENTENCE):
Note: If you have a hard time typing in your native language on an English keyboard, you may find
Google's transliteration service helpful.
http://www.google.com/transliterate
Language you are typing in (e.g. English, Spanish, French, Hindi, Urdu, Mandarin Chinese, etc):
Your one-sentence description:
Please provide any comments or suggestions you may have below, we appreciate your input!
Figure 1: A screenshot of our annotation task as it was
deployed on Mechanical Turk.
3.1 Quality Control
One of the main problems with collecting data using
a crowd is quality control. While the cost is very low
compared to traditional annotation methods, work-
ers recruited over the Internet are often unqualified
for the tasks or are incentivized to cheat in order to
maximize their rewards.
To encourage native and fluent contributions, we
asked annotators to write the descriptions in the lan-
guage of their choice. The result was a significant
amount of translation data, unique in its multilingual
parallelism. While included in our data release, we
leave aside a full discussion of this multilingual data
for future work.
192
To ensure the quality of the annotations being pro-
duced, we used a two-tiered payment system. The
idea was to reward workers who had shown the abil-
ity to write quality descriptions and the willingness
to work on our tasks consistently. While everyone
had access to the Tier-1 tasks, only workers who had
been manually qualified could work on the Tier-2
tasks. The tasks were identical in the two tiers but
each Tier-1 task only paid 1 cent while each Tier-2
task paid 5 cents, giving the workers a strong incen-
tive to earn the qualification.
The qualification process was done manually by
the authors. We periodically evaluated the workers
who had submitted the most Tier-1 tasks (usually on
the order of few hundred submissions) and granted
them access to the Tier-2 tasks if they had performed
well. We assessed their work mainly on the gram-
maticality and spelling accuracy of the submitted de-
scriptions. Since we had hundreds of submissions to
base our decisions on, it was fairly easy to identify
the cheaters and people with poor English skills 3.
Workers who were rejected during this process were
still allowed to work on the Tier-1 tasks.
While this approach requires significantly more
manual effort initially than other approaches such
as using a qualification test or automatic post-
annotation filtering, it creates a much higher quality
workforce. Moreover, the initial effort is amortized
over time as these quality workers are retained over
the entire duration of the data collection. Many of
them annotated all the available videos we had.
3.2 Video Collection
To find suitable videos to annotate, we deployed a
separate task. Workers were asked to submit short
(generally 4-10 seconds) video segments depicting
single, unambiguous events by specifying links to
YouTube videos, along with the start and end times.
We again used a tiered payment system to reward
and retain workers who performed well.
Since the scope of this data collection effort ex-
tended beyond gathering English data alone, we
3Everyone who submitted descriptions in a foreign language
was granted access to the Tier-2 tasks. This was done to encour-
age more submissions in different languages and also because
we could not verify the quality of those descriptions other than
using online translation services (and some of the languages
were not available to be translated).
?? Someone	 ?is	 ?coa?ng	 ?a	 ?pork	 ?chop	 ?in	 ?a	 ?glass	 ?bowl	 ?of	 ?flour.	 ??? A	 ?person	 ?breads	 ?a	 ?pork	 ?chop.	 ??? Someone	 ?is	 ?breading	 ?a	 ?piece	 ?of	 ?meat	 ?with	 ?a	 ?white	 ?powdery	 ?substance.	 ??? A	 ?chef	 ?seasons	 ?a	 ?slice	 ?of	 ?meat.	 ??? Someone	 ?is	 ?pu?g	 ?flour	 ?on	 ?a	 ?piece	 ?of	 ?meat.	 ??? A	 ?woman	 ?is	 ?adding	 ?flour	 ?to	 ?meat.	 ??? A	 ?woman	 ?is	 ?coa?ng	 ?a	 ?piece	 ?of	 ?pork	 ?with	 ?breadcrumbs.	 ??? A	 ?man	 ?dredges	 ?meat	 ?in	 ?bread	 ?crumbs.	 ??? A	 ?person	 ?breads	 ?a	 ?piece	 ?of	 ?meat.	 ??? A	 ?woman	 ?is	 ?breading	 ?some	 ?meat.	 ??? Someone	 ?is	 ?breading	 ?meat.	 ??? A	 ?woman	 ?coats	 ?a	 ?meat	 ?cutlet	 ?in	 ?a	 ?dish.	 ??? A	 ?woman	 ?is	 ?coa?ng	 ?a	 ?pork	 ?loin	 ?in	 ?bread	 ?crumbs.	 ??? The	 ?laldy	 ?coated	 ?the	 ?meat	 ?in	 ?bread	 ?crumbs.	 ??? The	 ?woman	 ?is	 ?breading	 ?pork	 ?chop.	 ??? A	 ?woman	 ?adds	 ?a	 ?mixture	 ?to	 ?some	 ?meat.	 ??? The	 ?lady	 ?put	 ?the	 ?ba?er	 ?on	 ?the	 ?meat.	 ?
Figure 2: Examples of English descriptions collected for
a particular video segment.
tried to collect videos that could be understood
regardless of the annotator?s linguistic or cultural
background. In order to avoid biasing lexical
choices in the descriptions, we muted the audio and
excluded videos that contained either subtitles or
overlaid text. Finally, we manually filtered the sub-
mitted videos to ensure that each met our criteria and
was free of inappropriate content.
3.3 Data
We deployed our data collection framework on Me-
chanical Turk over a two-month period from July to
September in 2010, collecting 2,089 video segments
and 85,550 English descriptions. The rate of data
collection accelerated as we built up our workforce,
topping 10K descriptions a day when we ended our
data collection. Of the descriptions, 33,855 were
from Tier-2 tasks, meaning they were provided by
workers who had been manually identified as good
performers. Examples of some of the descriptions
collected are shown in Figure 2.
Overall, 688 workers submitted at least one En-
glish description. Of these workers, 113 submitted
at least 100 descriptions and 51 submitted at least
500. The largest number of descriptions submitted
by a single worker was 3496 4. Out of the 688 work-
ers, 50 were granted access to the Tier-2 tasks. The
4This number exceeds the total number of videos because
the worker completed both Tier-1 and Tier-2 tasks for the same
videos
193
Tier 1 Tier 2
pay $0.01 $0.05
# workers (English) 683 50
# workers (total) 835 94
# submitted (English) 51510 33829
# submitted (total) 68578 55682
# accepted (English) 51052 33825
# accepted (total) 67968 55658
Table 1: Statistics for the two video description tasks
success of our data collection effort was in part due
to our ability to retain these good workers, building a
reliable and efficient workforce. Table 1 shows some
statistics for the Tier-1 and Tier-2 tasks 5. Overall,
we spent under $5,000 including Amazon?s service
fees, some pilot experiments and surveys.
On average, 41 descriptions were produced for
each video, with at least 27 for over 95% of the
videos. Even limiting the set to descriptions pro-
duced from the Tier-2 tasks, there are still 16 de-
scriptions on average for each video, with at least 12
descriptions for over 95% of the videos. For most
clusters, then, we have a dozen or more high-quality
parallel descriptions that can be paired with one an-
other to create monolingual parallel training data.
4 Paraphrase Evaluation Metrics
One of the limitations to the development of ma-
chine paraphrasing is the lack of standard metrics
like BLEU, which has played a crucial role in driv-
ing progress in MT. Part of the issue is that a
good paraphrase has the additional constraint that
it should be lexically dissimilar to the source sen-
tence while preserving the meaning. These can be-
come competing goals when using n-gram overlaps
to establish semantic equivalence. Thus, researchers
have been unable to rely on BLEU or some deriva-
tive: the optimal paraphrasing engine under these
terms would be one that simply returns the input.
To combat such problems, Liu et al (2010) have
proposed PEM, which uses a second language as
pivot to establish semantic equivalence. Thus, no
n-gram overlaps are required to determine the se-
mantic adequacy of the paraphrase candidates. PEM
5The numbers for the English data are slightly underesti-
mated since the workers sometimes incorrectly filled out the
form when reporting what language they were using.
also separately measures lexical dissimilarity and
fluency. Finally, all three scores are combined us-
ing a support vector machine (SVM) trained on hu-
man ratings of paraphrase pairs. While PEM was
shown to correlate well with human judgments, it
has some limitations. It only models paraphrasing at
the phrase level and not at the sentence level. Fur-
ther, while it does not need reference sentences for
the evaluation dataset, PEM does require suitable
bilingual data to train the metric. The result is that
training a successful PEM becomes almost as chal-
lenging as the original paraphrasing problem, since
paraphrases need to be learned from bilingual data.
The highly parallel nature of our data suggests
a simpler solution to this problem. To measure
semantic equivalence, we simply use BLEU with
multiple references. The large number of reference
paraphrases capture a wide space of sentences with
equivalent meanings. While the set of reference sen-
tences can of course never be exhaustive, our data
collection method provides a natural distribution of
common phrases that might be used to describe an
action or event. A tight cluster with many simi-
lar parallel descriptions suggests there are only few
common ways to express that concept.
In addition to measuring semantic adequacy and
fluency using BLEU, we also need to measure lexi-
cal dissimilarity with the source sentence. We intro-
duce a new scoring metric PINC that measures how
many n-grams differ between the two sentences. In
essence, it is the inverse of BLEU since we want to
minimize the number of n-gram overlaps between
the two sentences. Specifically, for source sentence
s and candidate sentence c:
PINC(s, c) =
1
N
N?
n=1
1? | n-grams ? n-gramc || n-gramc |
where N is the maximum n-gram considered and n-
grams and n-gramc are the lists of n-grams in the
source and candidate sentences, respectively. We
use N = 4 in our evaluations.
The PINC score computes the percentage of n-
grams that appear in the candidate sentence but not
in the source sentence. This score is similar to the
Jaccard distance, except that it excludes n-grams that
only appear in the source sentence and not in the
candidate sentence. In other words, it rewards candi-
194
dates for introducing new n-grams but not for omit-
ting n-grams from the original sentence. The results
for each n are averaged arithmetically. PINC eval-
uates single sentences instead of entire documents
because we can reliably measure lexical dissimilar-
ity at the sentence level. Also notice that we do not
put additional constraints on sentence length: while
extremely short and extremely long sentences are
likely to score high on PINC, they still must main-
tain semantic adequacy as measured by BLEU.
We use BLEU and PINC together as a 2-
dimensional scoring metric. A good paraphrase, ac-
cording to our evaluation metric, has few n-gram
overlaps with the source sentence but many n-gram
overlaps with the reference sentences. This is con-
sistent with our requirement that a good paraphrase
should be lexically dissimilar from the source sen-
tence while preserving its semantics.
Unlike Liu et al (2010), we treat these two cri-
teria separately, since different applications might
have different preferences for each. For example,
a paraphrase suggestion tool for a word processing
software might be more concerned with semantic
adequacy, since presenting a paraphrase that does
not preserve the meaning would likely result in a
negative user experience. On the other hand, a query
expansion algorithm might be less concerned with
preserving the precise meaning so long as additional
relevant terms are added to improve search recall.
5 Experiments
To verify the usefulness of our paraphrase corpus
and the BLEU/PINC metric, we built and evaluated
several paraphrase systems and compared the auto-
matic scores to human ratings of the generated para-
phrases. We also investigated the pros and cons of
collecting paraphrases using video annotation rather
than directly eliciting them.
5.1 Building paraphrase models
We built 4 paraphrase systems by training English to
English translation models using Moses (Koehn et
al., 2007) with the default settings. Using our para-
phrase corpus to train and to test, we divided the sen-
tence clusters associated with each video into 90%
for training and 10% for testing. We restricted our
attention to sentences produced from the Tier-2 tasks
1	 ?
5	 ?
10	 ?
all	 ?68.9	 ?
69	 ?
69.1	 ?
69.2	 ?
69.3	 ?
69.4	 ?
69.5	 ?
69.6	 ?
69.7	 ?
69.8	 ?
69.9	 ?
44.5	 ? 45	 ? 45.5	 ? 46	 ? 46.5	 ? 47	 ? 47.5	 ? 48	 ? 48.5	 ?
BLEU
	 ?
PINC	 ?
Figure 3: Evaluation of paraphrase systems trained on
different numbers of parallel sentences. As more training
pairs are used, the model produces more varied sentences
(PINC) but preserves the meaning less well (BLEU)
in order to avoid excessive noise in the datasets, re-
sulting in 28,785 training sentences and 3,367 test
sentences. To construct the training examples, we
randomly paired each sentence with 1, 5, 10, or
all parallel descriptions of the same video segment.
This corresponds to 28K, 143K, 287K, and 449K
training pairs respectively. For the test set, we used
each sentence once as the source sentence with all
parallel descriptions as references (there were 16
references on average, with a minimum of 10 and a
maximum of 31.) We also included the source sen-
tence as a reference for itself.
Overall, all the trained models produce reasonable
paraphrase systems, even the model trained on just
28K single parallel sentences. Examples of the out-
puts produced by the models trained on single paral-
lel sentences and on all parallel sentences are shown
in Table 2. Some of the changes are simple word
substitutions, e.g. rabbit for bunny or gun for re-
volver, while others are phrasal, e.g. frying meat for
browning pork or made a basket for scores in a bas-
ketball game. One interesting result of using videos
as the stimulus to collect training data is that some-
times the learned paraphrases are not based on lin-
guistic closeness, but rather on visual similarity, e.g.
substituting cricket for baseball.
To evaluate the results quantitatively, we used the
BLEU/PINC metric. The performance of all the
trained models is shown in Figure 3. Unsurprisingly,
there is a tradeoff between preserving the meaning
195
Original sentence Trained on 1 parallel sentence Trained on all parallel sentences
a bunny is cleaning its paw a rabbit is licking its paw a rabbit is cleaning itself
a man fires a revolver a man is shooting targets a man is shooting a gun
a big turtle is walking a huge turtle is walking a large tortoise is walking
a guy is doing a flip over a park bench a man does a flip over a bench a man is doing stunts on a bench
milk is being poured into a mixer a man is pouring milk into a mixer a man is pouring milk into a bowl
children are practicing baseball children are doing a cricket children are playing cricket
a boy is doing karate a man is doing karate a boy is doing martial arts
a woman is browning pork in a pan a woman is browning pork in a pan a woman is frying meat in a pan
a player scores in a basketball game a player made a basketball game a player made a basket
Table 2: Examples of paraphrases generated by the trained models.
and producing more varied paraphrases. Systems
trained on fewer parallel sentences are more con-
servative and make fewer mistakes. On the other
hand, systems trained on more parallel sentences of-
ten produce very good paraphrases but are also more
likely to diverge from the original meaning. As a
comparison, evaluating each human description as
a paraphrase for the other descriptions in the same
cluster resulted in a BLEU score of 52.9 and a PINC
score of 77.2. Thus, all the systems performed very
well in terms of retaining semantic content, although
not as well in producing novel sentences.
To validate the results suggested by the automatic
metrics, we asked two fluent English speakers to
rate the generated paraphrases on the following cate-
gories: semantic, dissimilarity, and overall. Seman-
tic measures how well the paraphrase preserves the
original meaning while dissimilarity measures how
much the paraphrase differs from the source sen-
tence. Each category is rated from 1 to 4, with 4
being the best. A paraphrase identical to the source
sentence would receive a score of 4 for meaning and
1 for dissimilarity and overall. We randomly se-
lected 200 source sentences and generated 2 para-
phrases for each, representing the two extremes: one
paraphrase produced by the model trained with sin-
gle parallel sentences, and the other by the model
trained with all parallel sentences. The average
scores of the two human judges are shown in Ta-
ble 3. The results confirm our finding that the sys-
tem trained with single parallel sentences preserves
the meaning better but is also more conservative.
5.2 Correlation with human judgments
Having established rough correspondences between
BLEU/PINC scores and human judgments of se-
Semantic Dissimilarity Overall
1 3.09 2.65 2.51
All 2.91 2.89 2.43
Table 3: Average human ratings of the systems trained on
single parallel sentences and on all parallel sentences.
mantic equivalence and lexical dissimilarity, we
quantified the correlation between these automatic
metrics and human ratings using Pearson?s corre-
lation coefficient, a measure of linear dependence
between two random variables. We computed the
inter-annotator agreement as well as the correlation
between BLEU, PINC, PEM (Liu et al, 2010) and
the average human ratings on the sentence level. Re-
sults are shown in Table 4.
In order to measure correlation, we need to score
each paraphrase individually. Thus, we recomputed
BLEU on the sentence level and left the PINC scores
unchanged. While BLEU is typically not reliable at
the single sentence level, our large number of ref-
erence sentences makes BLEU more stable even at
this granularity. Empirically, BLEU correlates fairly
well with human judgments of semantic equiva-
lence, although still not as well as the inter-annotator
agreement. On the other hand, PINC correlates as
well as humans agree with each other in assessing
lexical dissimilarity. We also computed each met-
ric?s correlation with the overall ratings, although
neither should be used alone to assess the overall
quality of paraphrases.
PEM had the worst correlation with human judg-
ments of all the metrics. Since PEM was trained on
newswire data, its poor adaptation to this domain is
expected. However, given the large amount of train-
ing data needed (PEM was trained on 250K Chinese-
196
Semantic Dissimilarity Overall
Judge A vs. B 0.7135 0.6319 0.4920
BLEU vs. Human 0.5095 N/A 0.2127
PINC vs. Human N/A 0.6672 0.0775
PEM vs. Human N/A N/A 0.0654
PINC vs. Human (BLEU > threshold)
threshold = 0 N/A 0.6541 0.1817
threshold = 30 N/A 0.6493 0.1984
threshold = 60 N/A 0.6815 0.3986
threshold = 90 N/A 0.7922 0.4350
Combined BLEU and PINC vs. Human
Arithmetic Mean N/A N/A 0.3173
Geometric Mean N/A N/A 0.3003
Harmonic Mean N/A N/A 0.3036
PINC ?
Sigmoid(BLEU) N/A N/A 0.3532
Table 4: Correlation between the human judges as well
as between the automatic metrics and the human judges.
English sentence pairs and 2400 human ratings of
paraphrase pairs), it is difficult to use PEM as a gen-
eral metric. Adapting PEM to a new domain would
require sufficient in-domain bilingual data to sup-
port paraphrase extraction. In contrast, our approach
only requires monolingual data, and evaluation can
be performed using arbitrarily small, highly-parallel
datasets. Moreover, PEM requires sample human
ratings in training, thereby lessening the advantage
of having automatic metrics.
Since lexical dissimilarity is only desirable when
the semantics of the original sentence is unchanged,
we also computed correlation between PINC and the
human ratings when BLEU is above certain thresh-
olds. As we restrict our attention to the set of para-
phrases with higher BLEU scores, we see an in-
crease in correlation between PINC and the human
assessments. This confirms our intuition that PINC
is a more useful measure when semantic content has
been preserved.
Finally, while we do not believe any single score
could adequately describe the quality of a para-
phrase outside of a specific application, we experi-
mented with different ways of combining BLEU and
PINC into a single score. Almost any simple combi-
nation, such as taking the average of the two, yielded
decent correlation with the human ratings. The best
correlation was achieved by taking the product of
PINC and a sigmoid function of BLEU. This follows
the intuition that semantic preservation is closer to a
-??0.1	 ?
0	 ?
0.1	 ?
0.2	 ?
0.3	 ?
0.4	 ?
0.5	 ?
0.6	 ?
1	 ? 2	 ? 3	 ? 4	 ? 5	 ? 6	 ? 7	 ? 8	 ? 9	 ? 10	 ? 11	 ? 12	 ? All	 ?
Pears
on's	 ?
Corre
la?on
	 ?
Number	 ?of	 ?references	 ?for	 ?BLEU	 ?
BLEU	 ?with	 ?source	 ?vs.	 ?Seman?c	 ? BLEU	 ?without	 ?source	 ?vs.	 ?Seman?c	 ?BLEU	 ?with	 ?source	 ?vs.	 ?Overall	 ? BLEU	 ?without	 ?source	 ?vs.	 ?Overall	 ?
Figure 4: Correlation between BLEU and human judg-
ments as we vary the number of reference sentences.
binary decision (i.e. a paraphrase either preserves
the meaning or it does not, in which case PINC does
not matter at all) than a linear function. We used
an oracle to pick the best logistic function in our
experiment. In practice, some sample human rat-
ings would be required to tune this function. Other
more complicated methods for combining BLEU
and PINC are also possible with sample human rat-
ings, such as using a SVM as was done in PEM.
We quantified the utility of our highly parallel
data by computing the correlation between BLEU
and human ratings when different numbers of refer-
ences were available. The results are shown in Fig-
ure 4. As the number of references increases, the
correlation with human ratings also increases. The
graph also shows the effect of adding the source sen-
tence as a reference. If our goal is to assess seman-
tic equivalence only, then it is better to include the
source sentence. If we are trying to assess the overall
quality of the paraphrase, it is better to exclude the
source sentence, since otherwise the metric will tend
to favor paraphrases that introduce fewer changes.
5.3 Direct paraphrasing versus video
annotation
In addition to collecting paraphrases through video
annotations, we also experimented with the more
traditional task of presenting a sentence to an anno-
tator and explicitly asking for a paraphrase. We ran-
domly selected a thousand sentences from our data
and collected two paraphrases of each using Me-
chanical Turk. We conducted a post-annotation sur-
197
vey of workers who had completed both the video
description and the direct paraphrasing tasks, and
found that paraphrasing was considered more diffi-
cult and less enjoyable than describing videos. Of
those surveyed, 92% found video annotations more
enjoyable, and 75% found them easier. Based on
the comments, the only drawback of the video an-
notation task is the time required to load and watch
the videos. Overall, half of the workers preferred the
video annotation task while only 16% of the workers
preferred the paraphrasing task.
The data produced by the direct paraphrasing task
also diverged less, since the annotators were in-
evitably biased by lexical choices and word order
in the original sentences. On average, a direct para-
phrase had a PINC score of 70.08, while a parallel
description of the same video had a score of 78.75.
6 Discussions and Future Work
While our data collection framework yields useful
parallel data, it also has some limitations. Finding
appropriate videos is time-consuming and remains a
bottleneck in the process. Also, more abstract ac-
tions such as reducing the deficit or fighting for jus-
tice cannot be easily captured by our method. One
possible solution is to use longer video snippets or
other visual stimuli such as graphs, schemas, or il-
lustrated storybooks to convey more complicated in-
formation. However, the increased complexity is
also likely to reduce the semantic closeness of the
parallel descriptions.
Another limitation is that sentences produced by
our framework tend to be short and follow simi-
lar syntactic structures. Asking annotators to write
multiple descriptions or longer descriptions would
result in more varied data but at the cost of more
noise in the alignments. Other than descriptions, we
could also ask the annotators for more complicated
responses such as ?fill in the blanks? in a dialogue
(e.g. ?If you were this person in the video, what
would you say at this point??), their opinion of the
event shown, or the moral of the story. However, as
with the difficulty of aligning news stories, finding
paraphrases within these more complex responses
could require additional annotation efforts.
In our experiments, we only used a subset of our
corpus to avoid dealing with excessive noise. How-
ever, a significant portion of the remaining data is
useful. Thus, an automatic method for filtering those
sentences could allow us to utilize even more of the
data. For example, sentences from the Tier-2 tasks
could be used as positive examples to train a string
classifier to determine whether a noisy sentence be-
longs in the same cluster or not.
We have so far used BLEU to measure seman-
tic adequacy since it is the most common MT met-
ric. However, other more advanced MT metrics
that have shown higher correlation with human judg-
ments could also be used.
In addition to paraphrasing, our data collection
framework could also be used to produces useful
data for machine translation and computer vision.
By pairing up descriptions of the same video in dif-
ferent languages, we obtain parallel data without re-
quiring any bilingual skills. Another application for
our data is to apply it to computer vision tasks such
as video retrieval. The dataset can be readily used
to train and evaluate systems that can automatically
generate full descriptions of unseen videos. As far as
we know, there are currently no datasets that contain
whole-sentence descriptions of open-domain video
segments.
7 Conclusion
We introduced a data collection framework that pro-
duces highly parallel data by asking different an-
notators to describe the same video segments. De-
ploying the framework on Mechanical Turk over a
two-month period yielded 85K English descriptions
for 2K videos, one of the largest paraphrase data re-
sources publicly available. In addition, the highly
parallel nature of the data allows us to use standard
MT metrics such as BLEU to evaluate semantic ad-
equacy reliably. Finally, we also introduced a new
metric, PINC, to measure the lexical dissimilarity
between the source sentence and the paraphrase.
Acknowledgments
We are grateful to everyone in the NLP group at
Microsoft Research and Natural Language Learning
group at UT Austin for helpful discussions and feed-
back. We thank Chris Brockett, Raymond Mooney,
Katrin Erk, Jason Baldridge and the anonymous re-
viewers for helpful comments on a previous draft.
198
References
Vamshi Ambati and Stephan Vogel. 2010. Can crowds
build parallel corpora for machine translation systems?
In Proceedings of the NAACL HLT 2010 Workshop on
Creating Speech and Language Data with Amazon?s
Mechanical Turk.
Colin Bannard and Chris Callison-Burch. 2005. Para-
phrasing with bilingual parallel corpora. In Proceed-
ings of the 43rd Annual Meeting of the Association for
Computational Linguistics (ACL-05).
Regina Barzilay and Lillian Lee. 2003. Learning to
paraphrase: An unsupervised approach using multiple-
sequence alignment. In Proceedings of Human Lan-
guage Technology Conference / North American Asso-
ciation for Computational Linguistics Annual Meeting
(HLT-NAACL-2003).
Regina Barzilay and Kathleen McKeown. 2001. Extract-
ing paraphrases from a parallel corpus. In Proceed-
ings of the 39th Annual Meeting of the Association for
Computational Linguistics (ACL-2001).
Michael Bloodgood and Chris Callison-Burch. 2010a.
Bucking the trend: Large-scale cost-focused active
learning for statistical machine translation. In Pro-
ceedings of the 48th Annual Meeting of the Association
for Computational Linguistics (ACL-2010).
Michael Bloodgood and Chris Callison-Burch. 2010b.
Using Mechanical Turk to build machine translation
evaluation sets. In Proceedings of the NAACL HLT
2010 Workshop on Creating Speech and Language
Data with Amazon?s Mechanical Turk.
Olivia Buzek, Philip Resnik, and Benjamin B. Beder-
son. 2010. Error driven paraphrase annotation us-
ing Mechanical Turk. In Proceedings of the NAACL
HLT 2010 Workshop on Creating Speech and Lan-
guage Data with Amazon?s Mechanical Turk.
Chris Callison-Burch, Philipp Koehn, and Miles Os-
borne. 2006. Improved statistical machine trans-
lation using paraphrases. In Proceedings of Human
Language Technology Conference / North American
Chapter of the Association for Computational Linguis-
tics Annual Meeting (HLT-NAACL-06).
Chris Callison-Burch, Trevor Cohn, and Mirella Lap-
ata. 2008. Parametric: An automatic evaluation met-
ric for paraphrasing. In Proceedings of the 22nd In-
ternational Conference on Computational Linguistics
(COLING-2008).
Chris Callison-Burch. 2008. Syntactic constraints on
paraphrases extracted from parallel corpora. In Pro-
ceedings of the 2008 Conference on Empirical Meth-
ods in Natural Language Processing (EMNLP-2008).
Chris Callison-Burch. 2009. Fast, cheap, and creative:
Evaluating translation quality using Amazon?s Me-
chanical Turk. In Proceedings of the 2009 Conference
on Empirical Methods in Natural Language Process-
ing (EMNLP-2009).
Wallace L. Chafe. 1997. The Pear Stories: Cognitive,
Cultural and Linguistic Aspects of Narrative Produc-
tion. Ablex, Norwood, NJ.
Trevor Cohn, Chris Callison-Burch, and Mirella Lapata.
2008. Constructing corpora for the development and
evaluation of paraphrase systems. Computational Lin-
guistics, 34:597?614, December.
Michael Denkowski and Alon Lavie. 2010. Explor-
ing normalization techniques for human judgments of
machine translation adequacy collected using Amazon
Mechanical Turk. In Proceedings of the NAACL HLT
2010 Workshop on Creating Speech and Language
Data with Amazon?s Mechanical Turk.
Michael Denkowski, Hassan Al-Haj, and Alon Lavie.
2010. Turker-assisted paraphrasing for English-
Arabic machine translation. In Proceedings of the
NAACL HLT 2010 Workshop on Creating Speech and
Language Data with Amazon?s Mechanical Turk.
Bill Dolan, Chris Quirk, and Chris Brockett. 2004.
Unsupervised construction of large paraphrase cor-
pora: Exploiting massively parallel news sources. In
Proceedings of the 20th International Conference on
Computational Linguistics (COLING-2004).
Li Fei-Fei, Asha Iyer, Christof Koch, and Pietro Perona.
2007. What do we perceive in a glance of a real-world
scene? Journal of Vision, 7(1):1?29.
Ali Ibrahim, Boris Katz, and Jimmy Lin. 2003. Extract-
ing structural paraphrases from aligned monolingual
corpora. In Proceedings of the 41st Annual Meeting of
the Association for Computational Linguistics (ACL-
03).
Ann Irvine and Alexandre Klementiev. 2010. Using Me-
chanical Turk to annotate lexicons for less commonly
used languages. In Proceedings of the NAACL HLT
2010 Workshop on Creating Speech and Language
Data with Amazon?s Mechanical Turk.
Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran, Richard
Zens, Chris Dyer, Ondrej Bojar, Alexandra Con-
stantin, and Evan Herbst. 2007. Moses: Open source
toolkit for statistical machine translation. In Proceed-
ings of the 45th Annual Meeting of the Association for
Computational Linguistics (ACL-07).
Stanley Kok and Chris Brockett. 2010. Hitting the right
paraphrases in good time. In Proceedings of Human
Language Technologies: The Conference of the North
American Chapter of the Association for Computa-
tional Linguistics (NAACL-HLT-2010).
Dekang Lin and Patrick Pantel. 2001. DIRT-discovery
of inference rules from text. In Proceedings of the
199
Seventh ACM SIGKDD International Conference on
Knowledge Discovery and Data Mining (KDD-2001).
Chang Liu, Daniel Dahlmeier, and Hwee Tou Ng. 2010.
PEM: A paraphrase evaluation metric exploiting par-
allel texts. In Proceedings of the 2010 Conference on
Empirical Methods in Natural Language Processing
(EMNLP-2010).
Xiaojuan Ma and Perry R. Cook. 2009. How well do vi-
sual verbs work in daily communication for young and
old adults. In Proceedings of ACM CHI 2009 Confer-
ence on Human Factors in Computing Systems.
Bo Pang, Kevin Knight, and Daniel Marcu. 2003.
Syntax-based alignment of multiple translations: Ex-
tracting paraphrases and generating new sentences. In
Proceedings of Human Language Technology Confer-
ence / North American Association for Computational
Linguistics Annual Meeting (HLT-NAACL-2003).
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. BLEU: a method for automatic
evaluation of machine translation. In Proceedings of
the 40th Annual Meeting of the Association for Com-
putational Linguistics (ACL-2002), pages 311?318,
Philadelphia, PA, July.
Chris Quirk, Chris Brockett, and William Dolan. 2004.
Monolingual machine translation for paraphrase gen-
eration. In Proceedings of the 2004 Conference on
Empirical Methods in Natural Language Processing
(EMNLP-2004).
Cyrus Rashtchian, Peter Young, Micah Hodosh, and Ju-
lia Hockenmaier. 2010. Collecting image annotations
using Amazon?s Mechanical Turk. In Proceedings of
the NAACL HLT 2010 Workshop on Creating Speech
and Language Data with Amazon?s Mechanical Turk.
Yusuke Shinyama, Satoshi Sekine, Kiyoshi Sudo, and
Ralph Grishman. 2002. Automatic paraphrase acqui-
sition from news articles. In Proceedings of Human
Language Technology Conference.
Luis von Ahn and Laura Dabbish. 2004. Labeling im-
ages with a computer game. In Proceedings of ACM
CHI 2004 Conference on Human Factors in Comput-
ing Systems.
Omar F. Zaidan and Chris Callison-Burch. 2009. Feasi-
bility of human-in-the-loop minimum error rate train-
ing. In Proceedings of the 2009 Conference on
Empirical Methods in Natural Language Processing
(EMNLP-2009).
200
Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics, pages 430?439,
Jeju, Republic of Korea, 8-14 July 2012. c?2012 Association for Computational Linguistics
Fast Online Lexicon Learning for Grounded Language Acquisition
David L. Chen
Department of Computer Science
The University of Texas at Austin
1616 Guadalupe, Suite 2.408
Austin, TX 78701, USA
dlcc@cs.utexas.edu
Abstract
Learning a semantic lexicon is often an impor-
tant first step in building a system that learns
to interpret the meaning of natural language.
It is especially important in language ground-
ing where the training data usually consist of
language paired with an ambiguous perceptual
context. Recent work by Chen and Mooney
(2011) introduced a lexicon learning method
that deals with ambiguous relational data by
taking intersections of graphs. While the al-
gorithm produced good lexicons for the task of
learning to interpret navigation instructions, it
only works in batch settings and does not scale
well to large datasets. In this paper we intro-
duce a new online algorithm that is an order
of magnitude faster and surpasses the state-
of-the-art results. We show that by changing
the grammar of the formal meaning represen-
tation language and training on additional data
collected from Amazon?s Mechanical Turk we
can further improve the results. We also in-
clude experimental results on a Chinese trans-
lation of the training data to demonstrate the
generality of our approach.
1 Introduction
Learning to understand the semantics of human lan-
guages has been one of the ultimate goals of natural
language processing (NLP). Traditional learning ap-
proaches have relied on access to parallel corpora of
natural language sentences paired with their mean-
ings (Mooney, 2007; Zettlemoyer and Collins, 2007;
Lu et al, 2008; Kwiatkowski et al, 2010). How-
ever, constructing such semantic annotations can be
difficult and time-consuming. More recently, there
has been work on learning from ambiguous super-
vision where a set of potential sentence meanings
are given, only one (or a small subset) of which are
correct (Chen and Mooney, 2008; Liang et al, 2009;
Bordes et al, 2010; Chen andMooney, 2011). Given
the training data, the system needs to infer the cor-
recting meaning for each training sentence.
Building a lexicon of the formal meaning repre-
sentations of words and phrases, either implicitly
or explicitly, is usually an important step in infer-
ring the meanings of entire sentences. In particu-
lar, Chen and Mooney (2011) first learned a lexicon
to help them resolve ambiguous supervision of re-
lational data in which the number of choices is ex-
ponential. They represent the perceptual context as
a graph and allow each sentence in the training data
to align to any connected subgraph. Their lexicon
learning algorithm finds the common connected sub-
graph that occurs with a word by taking intersections
of the graphs that represent the different contexts in
which the word appears. While the algorithm pro-
duced a good lexicon for their application of learn-
ing to interpret navigation instructions, it only works
in batch settings and does not scale well to large
datasets. In this paper we introduce a novel online
algorithm that is an order of magnitude faster and
also produces better results on their navigation task.
In addition to the new lexicon learning algorithm,
we also look at modifying the meaning representa-
tion grammar (MRG) for their formal semantic lan-
guage. By using a MRG that correlates better to the
structure of natural language, we further improve the
performance on the navigation task. Since our al-
430
gorithm can scale to larger datasets, we present re-
sults on collecting and training on additional data
from Amazon?s Mechanical Turk. Finally, we show
the generality of our approach by demonstrating our
system?s ability to learn from a Chinese translation
of the training data.
2 Background
A common way to learn a lexicon across many dif-
ferent contexts is to find the common parts of the for-
mal representations associated with different occur-
rences of the same words or phrases (Siskind, 1996).
For graphical representations, this involves find-
ing the common subgraph between multiple graphs
(Thompson and Mooney, 2003; Chen and Mooney,
2011). In this section we review the lexicon learning
algorithm introduced by Chen and Mooney (2011)
as well as the overall task they designed to test se-
mantic understanding of navigation instructions.
2.1 Navigation Task
The goal of the navigation task is to build a sys-
tem that can understand free-form natural-language
instructions and follow them to move to the in-
tended destination (MacMahon et al, 2006; Shimizu
and Haas, 2009; Matuszek et al, 2010; Kollar et
al., 2010; Vogel and Jurafsky, 2010; Chen and
Mooney, 2011). Chen and Mooney (2011) de-
fined a learning task in which the only supervi-
sion the system receives is in the form of observ-
ing how humans behave when following sample
navigation instructions in a virtual world. For-
mally, the system is given training data in the
form: {(e1, a1, w1), (e2, a2, w2), . . . , (en, an, wn)},
where ei is a written natural language instruction, ai
is an observed action sequence, and wi is a descrip-
tion of the virtual world. The goal is then to build a
system that can produce the correct aj given a pre-
viously unseen (ej , wj) pair.
Since the observed actions ai only consists of
low-level actions (e.g. turn left, turn right, walk for-
ward) and not high-level concepts (e.g. turn your
back against the wall and walk to the couch), Chen
and Mooney first use a set of rules to automatically
construct the space of reasonable plans using the ac-
tion trace and knowledge about the world. The space
is represented compactly using a graph as shown in
Figure 1: Examples of landmarks plans constructed by
Chen and Mooney (2011) and how they computed the in-
tersection of two graphs.
Figure 1. This is what they called a landmarks plan
and consists of the low-level observed actions in-
terleaved with verification steps indicating what ob-
jects should be observed after each action.
Given that these landmarks plans contain a lot of
extraneous details, Chen andMooney learn a lexicon
and use it to identify and remove the irrelevant parts
of the plans. They use a greedy method to remove
nodes from the graphs that are not associated with
any of the words in the instructions. The remain-
ing refined landmarks plans are then treated as su-
pervised training data for a semantic-parser learner,
KRISP (Kate and Mooney, 2006). Once a seman-
tic parser is trained, it can be used at test time to
transform novel instructions into formal navigation
plans which are then carried out by a virtual robot
(MacMahon et al, 2006).
2.2 Lexicon Learning
The central component of the system is the lexi-
con learning process which associates words and
short phrases (n-grams) to their meanings (con-
nected graphs). To learn the meaning of an n-gram
w, Chen and Mooney first collect all navigation
plans g that co-occur with w. This forms the ini-
tial candidate meaning set for w. They then repeat-
edly take the intersections between the candidate
meanings to generate additional candidate mean-
ings. They use the term intersection to mean a max-
imal common subgraph (i.e. it is not a subgraph of
any other common subgraphs). In general, there are
431
multiple possible intersections between two graphs.
In this case, they bias toward finding large connected
components by greedily removing the largest com-
mon connected subgraph from both graphs until the
two graphs have no overlapping nodes. The out-
put of the intersection process consists of all the re-
moved subgraphs. An example of the intersection
operation is shown in Figure 1.
Once the list of candidate meanings are generated,
they are ranked by the following scoring metric for
an n-gram w and a graph g:
Score(w, g) = p(g|w) ? p(g|?w)
Intuitively, the score measures how much more
likely a graph g appears whenw is present compared
to when it is not. The probabilities are estimated by
counting how many examples contain the word w or
graph g, ignoring multiple occurrences in a single
example.
3 Online Lexicon Learning Algorithm
While the algorithm presented by Chen and Mooney
(2011) produced good lexicons, it only works in
batch settings and does not scale well to large
datasets. The bottleneck of their algorithm is the in-
tersection process which is time-consuming to per-
form. Moreover, their algorithm requires taking
many intersections between many different graphs.
Even though they use beam-search to limit the size
of the candidate set, if the initial candidate meaning
set for a n-gram is large, it can take a long time to
take just one pass through the list of all candidates.
Moreover, reducing the beam size could also hurt the
quality of the lexicon learned.
In this section, we present another lexicon learn-
ing algorithm that is much faster and works in an on-
line setting. The main insight is that most words or
short phrases correspond to small graphs. Thus, we
concentrate our attention on only candidate mean-
ings that are less than a certain size. Using this con-
straint, we generate all the potential small connected
subgraphs for each navigation plan in the training
examples and discard the original graph. Pseudo-
code for the new algorithm, Subgraph Generation
Online Lexicon Learning (SGOLL) algorithm, is
shown in Algorithm 1.
As we encounter each new training example
which consists of a written navigation instruction
Algorithm 1 SUBGRAPH GENERATION ONLINE
LEXICON LEARNING (SGOLL)
input A sequence of navigation instructions
and the corresponding navigation plans
(e1, p1), . . . , (en, pn)
output Lexicon , a set of phrase-meaning pairs
1: main
2: for training example (ei, pi) do
3: Update((ei, pi))
4: end for
5: OutputLexicon()
6: end main
7:
8: function Update(training example (ei, pi))
9: for n-gram w that appears in ei do
10: for connected subgraph g of pi such that
the size of g is less than or equal to m do
11: Increase the co-occurrence count of g
and w by 1
12: end for
13: end for
14: Increase the count of examples, each n-gram
w and each subgraph g
15: end function
16:
17:
18: function OutputLexicon()
19: for n-gram w that has been observed do
20: if Number of times w has been observed is
less than minSup then
21: skip w
22: end if
23: for subgraph g that has co-occurred with w
do
24: if score(w, g) > threshold t then
25: add (w, g) to Lexicon
26: end if
27: end for
28: end for
29: end function
432
and the corresponding navigation plan, we first seg-
ment the instruction into word tokens and construct
n-grams from them. From the corresponding navi-
gation plan, we find all connected subgraphs of size
less than or equal to m. We then update the co-
occurrence counts between all the n-grams w and
all the connected subgraphs g. We also update the
counts of how many examples we have encountered
so far and counts of the n-grams w and subgraphs
g. At any given time, we can compute a lexicon
using these various counts. Specifically, for each
n-gram w, we look at all the subgraphs g that co-
occurred with it, and compute a score for the pair
(w, g). If the score is higher than the threshold t, we
add the entry (w, g) to the lexicon. We use the same
scoring function as Chen and Mooney, which can be
computed efficiently using the counts we keep. In
contrast to Chen and Mooney?s algorithm though,
we add the constraint of minimum support by not
creating lexical entries for any n-gram w that ap-
peared in less than minSup training examples. This
is to prevent rarely seen n-grams from receiving high
scores in our lexicon simply due to their sparsity.
Unless otherwise specified, we compute lexical en-
tries for up to 4-grams with threshold t = 0.4, max-
imum subgraph size m = 3, and minimum support
minSup = 10.
It should be noted that SGOLL can also become
computationally intractable if the sizes of the nav-
igations plans are large or if we set the maximum
subgraph size m to a large number. Moreover, the
memory requirement can be quite high if there are
many different subgraphs g associated with each n-
gram w. To deal with such scalability issues, we
could use beam-search and only keep the top k can-
didates associated with each w. Another important
step is to define canonical orderings of the nodes in
the graphs. This allows us to determine if two graphs
are identical in constant time and also lets us use a
hash table to quickly update the co-occurrence and
subgraph counts. Thus, even given a large number
of subgraphs for each training example, each sub-
graph can be processed very quickly. Finally, this
algorithm readily lends itself to being parallelized.
Each processor would get a fraction of the training
data and compute the counts individually. Then the
counts can be merged together at the end to produce
the final lexicon.
3.1 Changing the Meaning Representation
Grammar
In addition to introducing a new lexicon learning
algorithm, we also made another modification to
the original system proposed by Chen and Mooney
(2011). To train a semantic parser using KRISP
(Kate and Mooney, 2006), they had to supply a
MRG, a context-free grammar, for their formal nav-
igation plan language. KRISP learns string-kernel
classifiers that maps natural language substrings to
MRG production rules. Consequently, it is impor-
tant that the production rules in the MRG mirror the
structure of natural language (Kate, 2008).
The original MRG used by Chen and Mooney is a
compact grammar that contains many recursive rules
that can be used to generate an infinite number of ac-
tions or arguments. While these rules are quite ex-
pressive, they often do not correspond well to any
words or phrases in natural language. To alleviate
this problem, we designed another MRG by expand-
ing out many of the rules. For example, the original
MRG contained the following production rules for
generating an infinite number of travel actions from
the root symbol S.
*S -> *Action
*Action -> *Action, *Action
*Action -> *Travel
*Travel -> Travel( )
*Travel -> Travel( steps: *Num )
We expand out the production rules as shown be-
low to map S directly to specific travel actions so
they correspond better to patterns such as ?go for-
ward? or ?walk N steps?.
*S -> Travel( )
*S -> Travel( steps: *Num )
*S -> Travel( ), *Action
*S -> Travel( steps: *Num ), *Action
*Action -> *Action, *Action
*Action -> Travel( )
*Action -> Travel( steps: *Num )
While this process of expanding the produc-
tion rules resulted in many more rules, these ex-
panded rules usually correspond better with words
or phrases in natural language. We still retain some
of the recursive rules to ensure that the formal lan-
guage remains as expressive as before.
433
4 Collecting Additional Data with
Mechanical Turk
One of the motivations for studying ambiguous su-
pervision is the potential ease of acquiring large
amounts of training data. Without requiring seman-
tic annotations, a human only has to demonstrate
how language is used in context which is generally
simple to do. We validate this claim by collecting
additional training data for the navigation domain
using Mechanical Turk (Snow et al, 2008).
There are two types of data we are interested in
collecting: natural language navigation instructions
and follower data. Thus, we created two tasks on
Mechanical Turk. The first one asks the workers
to supply instructions for a randomly generated se-
quence of actions. The second one asks the workers
to try to follow a given navigation instruction in our
virtual environment. The latter task is used to gener-
ate the corresponding action sequences for instruc-
tions collected from the first task.
4.1 Task Descriptions
To facilitate the data collection, we first recreated
the 3D environments used to collect the original data
(MacMahon et al, 2006). We built a Java appli-
cation that allows the user to freely navigate the
three virtual worlds constructed by MacMahon et
al. (2006) using the discrete controls of turning left,
turning right, and moving forward one step.
The follower task is fairly straightforward using
our application. The worker is given a navigation
instruction and placed at the starting location. They
are asked to follow the navigation instruction as best
as they could using the three discrete controls. They
could also skip the problem if they did not under-
stand the instruction or if the instruction did not de-
scribe a viable route. For each Human Intelligence
Task (HIT), we asked the worker to complete 5 fol-
lower problems. We paid them $0.05 for each HIT,
or 1 cent per follower problem. The instructions
used for the follower problems were mainly col-
lected from ourMechanical Turk instructor task with
some of the instructions coming from data collected
byMacMahon (2007) that was not used by Chen and
Mooney (2011).
The instructor task is slightly more involved be-
cause we ask the workers to provide new navigation
Chen & Mooney MTurk
# instructions 3236 1011
Vocabulary size 629 590
Avg. # words 7.8 (5.1) 7.69 (7.12)
Avg. # actions 2.1 (2.4) 1.84 (1.24)
Table 1: Statistics about the navigation instruction cor-
pora. The average statistics for each instruction are
shown with standard deviations in parentheses.
instructions. The worker is shown a 3D simulation
of a randomly generated action sequence between
length 1 to 4 and asked to write short, free-form in-
structions that would lead someone to perform those
actions. Since this task requires more time to com-
plete, each HIT consists of only 3 instructor prob-
lems. Moreover, we pay the workers $0.10 for each
HIT, or about 3 cents for each instruction they write.
To encourage quality contributions, we use a
tiered payment structure (Chen and Dolan, 2011)
that rewards the good workers. Workers who have
been identified to consistently provide good instruc-
tions were allowed to do higher-paying version of
the same HITs that paid $0.15 instead of $0.10.
4.2 Data Statistics
Over a 2-month period we accepted 2,884 follower
HITs and 810 instructor HITs from 653 workers.
This corresponds to over 14,000 follower traces and
2,400 instructions with most of them consisting of
single sentences. For instructions with multiple sen-
tences, we merged all the sentences together and
treated it as a single sentence. The total cost of
the data collection was $277.92. While there were
2,400 instructions, we filtered them to make sure
they were of reasonable quality. First, we discarded
any instructions that did not have at least 5 follower
traces. Then we looked at all the follower traces and
discarded any instruction that did not have majority
agreement on what the correct path is.
Using our strict filter, we were left with slightly
over 1,000 instructions. Statistics about the new
corpus and the one used by Chen and Mooney can
be seen in Table 1. Overall, the new corpus has a
slightly smaller vocabulary, and each instruction is
slightly shorter both in terms of the number of words
and the number of actions.
434
5 Experiments
We evaluate our new lexicon learning algorithm as
well as the other modifications to the navigation sys-
tem using the same three tasks as Chen and Mooney
(2011). The first task is disambiguating the train-
ing data by inferring the correct navigation plans as-
sociated with each training sentence. The second
task is evaluating the performance of the semantic
parsers trained on the disambiguated data. We mea-
sure the performance of both of these tasks by com-
paring to gold-standard data using the same partial
correctness metric used by Chen and Mooney which
gives credit to a parse for producing the correct ac-
tion type and additional credit if the arguments were
also correct. Finally, the third task is to complete the
end-to-end navigation task. There are two versions
of this task, the complete task uses the original in-
structions which are several sentences long and the
other version uses instructions that have been man-
ually split into single sentences. Task completion
is measured by the percentage of trials in which the
system reached the correct destination (and orienta-
tion in the single-sentence version).
We follow the same evaluation scheme as Chen
and Mooney and perform leave-one-map-out exper-
iments. For the first task, we build a lexicon using
ambiguous training data from two maps, and then
use the lexicon to produce the best disambiguated
semantic meanings for those same data. For the sec-
ond and third tasks, we train a semantic parser on the
automatically disambiguated data, and test on sen-
tences from the third, unseen map.
For all comparisons to the Chen and Mooney re-
sults, we use the performance of their refined land-
marks plans system which performed the best over-
all. Moreover, it provides the most direct compari-
son to our approach since both use a lexicon to re-
fine the landmarks plans. Other than the modifi-
cations discussed, we use the same components as
their system including using KRISP to train the se-
mantic parsers and using the execution module from
MacMahon et al (2006) to carry out the navigation
plans.
5.1 Inferring Navigation Plans
First, we examine the quality of the refined naviga-
tion plans produced using SGOLL?s lexicon. The
Precision Recall F1
Chen and Mooney 78.54 78.10 78.32
SGOLL 87.32 72.96 79.49
Table 2: Partial parse accuracy of how well each algo-
rithm can infer the gold-standard navigation plans.
Precision Recall F1
Chen and Mooney 90.22 55.10 68.37
SGOLL 92.22 55.70 69.43
SGOLL with
new MRG 88.36 57.03 69.31
Table 3: Partial parse accuracy of the semantic parsers
trained on the disambiguated navigation plans.
precision, recall, and F1 (harmonic mean of preci-
sion and recall) of these plans are shown in Table 2.
Compared to Chen and Mooney, the plans produced
by SGOLL has higher precision and lower recall.
This is mainly due to the additional minimum sup-
port constraint we added which discards many noisy
lexical entries from infrequently seen n-grams.
5.2 Training Semantic Parsers
Next we look at the performance of the semantic
parsers trained on the inferred navigation plans. The
results are shown in Table 3. Here SGOLL per-
forms almost the same as Chen and Mooney, with
slightly better precision. We also look at the effect of
changing the MRG. Using the new MRG for KRISP
to train the semantic parser produced slightly lower
precision but higher recall, with similar overall F1
score.
5.3 Executing Navigation Plans
Finally, we evaluate the system on the end-to-end
navigation task. In addition to SGOLL and SGOLL
with the newMRG, we also look at augmenting each
of the training splits with the data we collected using
Mechanical Turk.
Completion rates for both the single-sentence
tasks and the complete tasks are shown in Table 4.
Here we see the benefit of each of our modifications.
SGOLL outperforms Chen and Mooney?s system on
both versions of the navigation task. Using the new
MRG to train the semantic parsers further improved
performance on both tasks. Finally, augmenting the
435
Single-sentence Complete
Chen and Mooney 54.40% 16.18%
SGOLL 57.09% 17.56%
SGOLL with new
MRG 57.28% 19.18%
SGOLL with new
MRG and
MTurk data 57.62% 20.64%
Table 4: End-to-end navigation task completion rates.
Computation Time
Chen and Mooney (2011) 2,227.63
SGOLL 157.30
SGOLL with MTurk data 233.27
Table 5: The time (in seconds) it took to build the lexicon.
training data with additional instructions and fol-
lower traces collected from Mechanical Turk pro-
duced the best results.
5.4 Computation Times
Having established the superior performance of our
new system compared to Chen and Mooney?s, we
next look at the computational efficiency of SGOLL.
The average time (in seconds) it takes for each al-
gorithm to build a lexicon is shown in Table 5.
All the results are obtained running the algorithms
on Dell PowerEdge 1950 servers with 2x Xeon
X5440 (quad-core) 2.83GHz processors and 32GB
of RAM. Here SGOLL has a decidedly large advan-
tage over the lexicon learning algorithm from Chen
and Mooney, requiring an order of magnitude less
time to run. Even after incorporating the new Me-
chanical Turk data into the training set, SGOLL still
takes much less time to build a lexicon. This shows
how inefficient it is to perform graph intersection op-
erations and how our online algorithm can more re-
alistically scale to large datasets.
5.5 Experimenting with Chinese Data
In addition to evaluating the system on English data,
we also translated the corpus used by Chen and
Mooney into Mandarin Chinese.1 To run our sys-
1The translation can be downloaded at http://www.cs.
utexas.edu/?ml/clamp/navigation/
tem, we first segmented the sentences using the
Stanford Chinese Word Segmenter (Chang et al,
2008). We evaluated using the same three tasks as
before. This resulted in a precision, recall, and F1
of 87.07, 71.67, and 78.61, respectively for the in-
ferred plans. The trained semantic parser?s preci-
sion, recall, and F1 were 88.87, 58.76, and 70.74, re-
spectively. Finally, the system completed 58.70% of
the single-sentence task and 20.13% of the complete
task. All of these numbers are very similar to the En-
glish results, showing the generality of the system in
its ability to learn other languages.
5.6 Discussion
We have introduced a novel, online lexicon learn-
ing algorithm that is much faster than the one pro-
posed by Chen and Mooney and also performs bet-
ter on the navigation tasks they devised. Having
a computationally efficient algorithm is critical for
building systems that learn from ambiguous super-
vision. Compared to systems that train on super-
vised semantic annotations, a system that only re-
ceives weak, ambiguous training data is expected to
have to train on much larger datasets to achieve sim-
ilar performance. Consequently, such system must
be able to scale well in order to keep the learning
process tractable. Not only is SGOLLmuch faster in
building a lexicon, it can also be easily parallelized.
Moreover, the online nature of SGOLL allows the
lexicon to be continually updated while the system
is in use. A deployed navigation system can gather
new instructions from the user and receive feedback
about whether it is performing the correct actions.
As new training examples are collected, we can up-
date the corresponding n-gram and subgraph counts
without rebuilding the entire lexicon.
One thing to note though is that while SGOLL
makes the lexicon learning step much faster and
scalable, another bottleneck in the overall system
is training the semantic parser. Existing semantic-
parser learners such as KRISP were not designed to
scale to very large datasets and have trouble training
on more than a few thousand examples. Thus, de-
signing new scalable algorithms for learning seman-
tic parsers is critical to scaling the entire system.
We have performed a pilot data collection of new
training examples using Mechanical Turk. Even
though the instructions were collected from very dif-
436
ferent sources (paid human subjects from a univer-
sity for the original data versus workers recruited
over the Internet), we showed that adding the new
data into the training set improved the system?s per-
formance on interpreting instructions from the orig-
inal corpus. It verified that we are indeed collecting
useful information and that non-experts are fully ca-
pable of training the system by demonstrating how
to use natural language in relevant contexts.
6 Related Work
The earliest work on cross-situational word learning
was by Siskind (1996) who developed a rule-based
system to solve the referential ambiguity problem.
However, it did not handle noise and was tested only
on artificial data. More recently, Fazly et al (2010)
proposed a probabilistic incremental model that can
learn online similar to our algorithm and was tested
on transcriptions of child-directed speech. However,
they generated the semantic representations from the
text itself rather than from the environment. More-
over, the referential ambiguity was introduced artifi-
cially by including the correct semantic representa-
tion of the neighboring sentence.
Our work falls into the larger framework of learn-
ing the semantics of language from weak supervi-
sion. This problem can be seen as an alignment
problem where each sentence in the training data
needs to be aligned to one or more records that rep-
resent its meaning. Chen and Mooney (2008) previ-
ously introduced another task that aligns sportscast-
ing commentaries to events in a simulated soccer
game. Using an EM-like retraining method, they
alternated between building a semantic parser and
estimating the most likely alignment. Liang et al
(2009) developed an unsupervised approach using a
generative model to solve the alignment problem.
They demonstrated improved results on matching
sentences and events on the sportscasting task and
also introduced a new task of aligning weather fore-
casts to weather information. Kim and Mooney
(2010) further improved the generative alignment
model by incorporating the full semantic parsing
model from Lu et al (2008). This resulted in a
joint generative model that outperformed all previ-
ous results. In addition to treating the ambiguous
supervision problem as an alignment problem, there
have been other approaches such as treating it as a
ranking problem (Bordes et al, 2010), or a PCFG
learning problem (Borschinger et al, 2011).
Parallel to the work of learning from ambigu-
ous supervision, other recent work has also looked
at training semantic parsers from supervision other
than logical-form annotations. Clarke et al (2010)
and Liang et al (2011) trained systems on question
and answer pairs by automatically finding semantic
interpretations of the questions that would generate
the correct answers. Artzi and Zettlemoyer (2011)
use conversation logs between a computer system
and a human user to learn to interpret the human
utterances. Finally, Goldwasser et al (2011) pre-
sented an unsupervised approach of learning a se-
mantic parser by using an EM-like retraining loop.
They use confidence estimation as a proxy for the
model?s prediction quality, preferring models that
have high confidence about their parses.
7 Conclusion
Learning the semantics of language from the per-
ceptual context in which it is uttered is a useful ap-
proach because only minimal human supervision is
required. In this paper we presented a novel online
algorithm for building a lexicon from ambiguously
supervised relational data. In contrast to the pre-
vious approach that computed common subgraphs
between different contexts in which an n-gram ap-
peared, we instead focus on small, connected sub-
graphs and introduce an algorithm, SGOLL, that is
an order of magnitude faster. In addition to being
more scalable, SGOLL also performed better on the
task of interpreting navigation instructions. In addi-
tion, we showed that changing the MRG and collect-
ing additional training data from Mechanical Turk
further improve the performance of the overall nav-
igation system. Finally, we demonstrated the gener-
ality of the system by using it to learn Chinese navi-
gation instructions and achieved similar results.
Acknowledgments
The research in this paper was supported by the Na-
tional Science Foundation (NSF) under the grants
IIS-0712097 and IIS-1016312. We thank Lu Guo for
performing the translation of the corpus into Man-
darin Chinese.
437
References
Yoav Artzi and Luke Zettlemoyer. 2011. Bootstrapping
semantic parsers from conversations. In Proceedings
of the 2011 Conference on Empirical Methods in Nat-
ural Language Processing (EMNLP-11).
Antoine Bordes, Nicolas Usunier, and Jason Weston.
2010. Label ranking under ambiguous supervision for
learning semantic correspondences. In Proceedings of
the 27th International Conference on Machine Learn-
ing (ICML-2010).
Benjamin Borschinger, Bevan K. Jones, and Mark John-
son. 2011. Reducing grounded learning tasks to gram-
matical inference. In Proceedings of the 2011 Confer-
ence on Empirical Methods in Natural Language Pro-
cessing (EMNLP-11).
Pi-Chuan Chang, Michel Galley, and Chris Manning.
2008. Optimizing Chinese word segmentation for ma-
chine translation performance. In Proceedings of the
ACL Third Workshop on Statistical Machine Transla-
tion.
David L. Chen and William B. Dolan. 2011. Collecting
highly parallel data for paraphrase evaluation. In Pro-
ceedings of the 49th Annual Meeting of the Association
for Computational Linguistics (ACL-2011), Portland,
OR, June.
David L. Chen and Raymond J. Mooney. 2008. Learn-
ing to sportscast: A test of grounded language ac-
quisition. In Proceedings of 25th International Con-
ference on Machine Learning (ICML-2008), Helsinki,
Finland, July.
David L. Chen and Raymond J. Mooney. 2011. Learn-
ing to interpret natural language navigation instruc-
tions from observations. In Proceedings of the 25th
AAAI Conference on Artificial Intelligence (AAAI-11).
James Clarke, Dan Goldwasser, Ming-Wei Chang, and
Dan Roth. 2010. Driving semantic parsing from
the worlds response. In Proceedings of the Four-
teenth Conference on Computational Natural Lan-
guage Learning (CoNLL-2010), pages 18?27.
Afsaneh Fazly, Afra Alishahi, and Suzanne Steven-
son. 2010. A probabilistic computational model of
cross-situational word learning. Cognitive Science,
34(6):1017?1063.
Dan Goldwasser, Roi Reichart, James Clarke, and Dan
Roth. 2011. Confidence driven unsupervised semantic
parsing. In Proceedings of the 49th Annual Meeting of
the Association for Computational Linguistics (ACL-
11).
Rohit J. Kate and Raymond J. Mooney. 2006. Us-
ing string-kernels for learning semantic parsers. In
Proceedings of the 21st International Conference on
Computational Linguistics and 44th Annual Meet-
ing of the Association for Computational Linguis-
tics (COLING/ACL-06), pages 913?920, Sydney, Aus-
tralia, July.
Rohit J. Kate. 2008. Transforming meaning repre-
sentation grammars to improve semantic parsing. In
Proceedings of the Twelfth Conference on Compu-
tational Natural Language Learning (CoNLL-2008),
pages 33?40, Manchester, UK, August.
Joohyun Kim and Raymond J. Mooney. 2010. Genera-
tive alignment and semantic parsing for learning from
ambiguous supervision. In Proceedings of the 23rd In-
ternational Conference on Computational Linguistics
(COLING-10).
Thomas Kollar, Stefanie Tellex, Deb Roy, and Nicholas
Roy. 2010. Toward understanding natural language
directions. In Proceedings of the 5th ACM/IEEE In-
ternational Conference on Human-Robot Interaction
(HRI).
Tom Kwiatkowski, Luke Zettlemoyer, Sharon Goldwa-
ter, and Mark Steedman. 2010. Inducing probabilistic
CCG grammars from logical form with higher-order
unification. In Proceedings of the 2010 Conference on
Empirical Methods in Natural Language Processing
(EMNLP-10).
Percy Liang, Michael I. Jordan, and Dan Klein. 2009.
Learning semantic correspondences with less supervi-
sion. In Joint Conference of the 47th Annual Meeting
of the Association for Computational Linguistics and
the 4th International Joint Conference on Natural Lan-
guage Processing of the Asian Federation of Natural
Language Processing (ACL-IJCNLP).
Percy Liang, Michael I. Jordan, and Dan Klein. 2011.
Learning dependency-based compositional semantics.
In Proceedings of the 49th Annual Meeting of the As-
sociation for Computational Linguistics (ACL-11).
Wei Lu, Hwee Tou Ng, Wee Sun Lee, and Luke S. Zettle-
moyer. 2008. A generative model for parsing natural
language to meaning representations. In Proceedings
of the 2008 Conference on Empirical Methods in Natu-
ral Language Processing (EMNLP-08), Honolulu, HI,
October.
Matt MacMahon, Brian Stankiewicz, and Benjamin
Kuipers. 2006. Walk the talk: Connecting language,
knowledge, and action in route instructions. In Pro-
ceedings of the Twenty-First National Conference on
Artificial Intelligence (AAAI-06).
Matt MacMahon. 2007. Following Natural Language
Route Instructions. Ph.D. thesis, Electrical and Com-
puter Engineering Department, University of Texas at
Austin.
Cynthia Matuszek, Dieter Fox, and Karl Koscher. 2010.
Following directions using statistical machine transla-
tion. In Proceedings of the 5th ACM/IEEE Interna-
tional Conference on Human-Robot Interaction (HRI).
438
Raymond J. Mooney. 2007. Learning for semantic pars-
ing. In A. Gelbukh, editor, Computational Linguistics
and Intelligent Text Processing: Proceedings of the 8th
International Conference, CICLing 2007, Mexico City,
pages 311?324. Springer Verlag, Berlin.
Nobuyuki Shimizu and Andrew Haas. 2009. Learning to
follow navigational route instructions. In Proceedings
of the Twenty-first International Joint Conference on
Artificial Intelligence (IJCAI-2009).
Jeffrey M. Siskind. 1996. A computational study
of cross-situational techniques for learning word-to-
meaning mappings. Cognition, 61(1):39?91, October.
Rion Snow, Brendan O?Connor, Daniel Jurafsky, and An-
drew Y. Ng. 2008. Cheap and fast - but is it good?
evaluating non-expert annotations for natural language
tasks. In Proceedings of the 2008 Conference on
Empirical Methods in Natural Language Processing
(EMNLP-08).
Cynthia A. Thompson and Raymond J. Mooney. 2003.
Acquiring word-meaning mappings for natural lan-
guage interfaces. Journal of Artificial Intelligence Re-
search, 18:1?44.
Adam Vogel and Dan Jurafsky. 2010. Learning to fol-
low navigational directions. In Proceedings of the 48th
Annual Meeting of the Association for Computational
Linguistics (ACL-10).
Luke S. Zettlemoyer and Michael Collins. 2007. Online
learning of relaxed CCG grammars for parsing to logi-
cal form. In Proceedings of the 2007 Joint Conference
on Empirical Methods in Natural Language Process-
ing and Computational Natural Language Learning
(EMNLP-CoNLL-07), pages 678?687, Prague, Czech
Republic, June.
439
