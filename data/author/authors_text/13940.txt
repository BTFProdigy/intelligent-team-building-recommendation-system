Proceedings of ACL-08: HLT, pages 647?655,
Columbus, Ohio, USA, June 2008. c?2008 Association for Computational Linguistics
Phrase Chunking using Entropy Guided Transformation Learning
Ruy L. Milidiu?
Departamento de Informa?tica
PUC-Rio
Rio de Janeiro, Brazil
milidiu@inf.puc-rio.br
C??cero Nogueira dos Santos
Departamento de Informa?tica
PUC-Rio
nogueira@inf.puc-rio.br
Julio C. Duarte
Centro Tecnolo?gico do Exe?rcito
Rio de Janeiro, Brazil
jduarte@ctex.eb.br
Abstract
Entropy Guided Transformation Learning
(ETL) is a new machine learning strategy
that combines the advantages of decision
trees (DT) and Transformation Based Learn-
ing (TBL). In this work, we apply the ETL
framework to four phrase chunking tasks: Por-
tuguese noun phrase chunking, English base
noun phrase chunking, English text chunking
and Hindi text chunking. In all four tasks,
ETL shows better results than Decision Trees
and also than TBL with hand-crafted tem-
plates. ETL provides a new training strat-
egy that accelerates transformation learning.
For the English text chunking task this corre-
sponds to a factor of five speedup. For Por-
tuguese noun phrase chunking, ETL shows the
best reported results for the task. For the other
three linguistic tasks, ETL shows state-of-the-
art competitive results and maintains the ad-
vantages of using a rule based system.
1 Introduction
Phrase Chunking is a Natural Language Processing
(NLP) task that consists in dividing a text into syn-
tactically correlated parts of words. Theses phrases
are non-overlapping, i.e., a word can only be a mem-
ber of one chunk (Sang and Buchholz, 2000). It pro-
vides a key feature that helps on more elaborated
NLP tasks such as parsing and information extrac-
tion.
Since the last decade, many high-performance
chunking systems were proposed, such as, SVM-
based (Kudo and Matsumoto, 2001; Wu et al,
2006), Winnow (Zhang et al, 2002), voted-
perceptrons (Carreras and Ma`rquez, 2003),
Transformation-Based Learning (TBL) (Ramshaw
and Marcus, 1999; Megyesi, 2002) and Hidden
Markov Model (HMM) (Molina and Pla, 2002),
Memory-based (Sang, 2002). State-of-the-art
systems for English base noun phrase chunking and
text chunking are based in statistical techniques
(Kudo and Matsumoto, 2001; Wu et al, 2006;
Zhang et al, 2002).
TBL is one of the most accurate rule-based tech-
niques for phrase chunking tasks (Ramshaw and
Marcus, 1999; Ngai and Florian, 2001; Megyesi,
2002). On the other hand, TBL rules must follow
patterns, called templates, that are meant to cap-
ture the relevant feature combinations. The process
of generating good templates is highly expensive.
It strongly depends on the problem expert skills to
build them. Even when a template set is available
for a given task, it may not be effective when we
change from a language to another (dos Santos and
Oliveira, 2005).
In this work, we apply Entropy Guided Transfor-
mation Learning (ETL) for phrase chunking. ETL is
a new machine learning strategy that combines the
advantages of Decision Trees (DT) and TBL (dos
Santos and Milidiu?, 2007a). The ETL key idea is to
use decision tree induction to obtain feature com-
binations (templates) and then use the TBL algo-
rithm to generate transformation rules. ETL pro-
duces transformation rules that are more effective
than decision trees and also eliminates the need of
a problem domain expert to build TBL templates.
We evaluate the performance of ETL over four
647
phrase chunking tasks: (1) English Base Noun
Phrase (NP) chunking; (2) Portuguese NP chunk-
ing; (3) English Text Chunking; and (4) Hindi Text
Chunking. Base NP chunking consists in recogniz-
ing non-overlapping text segments that contain NPs.
Text chunking consists in dividing a text into syn-
tactically correlated parts of words. For these four
tasks, ETL shows state-of-the-art competitive results
and maintains the advantages of using a rule based
system.
The remainder of the paper is organized as fol-
lows. In section 2, the ETL strategy is described.
In section 3, the experimental design and the corre-
sponding results are reported. Finally, in section 4,
we present our concluding remarks.
2 Entropy Guided Transformation
Learning
Entropy Guided Transformation Learning (ETL)
is a new machine learning strategy that com-
bines the advantages of Decision Trees (DT) and
Transformation-Based Learning (TBL) (dos Santos
and Milidiu?, 2007a). The key idea of ETL is to use
decision tree induction to obtain templates. Next,
the TBL strategy is used to generate transformation
rules. The proposed method is illustrated in the Fig.
1.
Figure 1: ETL - Entropy Guided Transformation Learn-
ing.
A combination of DT and TBL is presented in
(Corston-Oliver and Gamon, 2003). The main dif-
ference between Corston-Oliver & Gamon work and
the ETL strategy is that they extract candidate rules
directly from the DT, and then use the TBL strategy
to select the appropriate rules. Another difference is
that they use a binary DT, whereas ETL uses a DT
that is not necessarily binary.
An evolutionary approach based on Genetic Al-
gorithms (GA) to automatically generate TBL tem-
plates is presented in (Milidiu? et al, 2007). Us-
ing a simple genetic coding, the generated template
sets have efficacy near to the handcrafted templates
for the tasks: English Base Noun Phrase Identifica-
tion, Text Chunking and Portuguese Named Entities
Recognition. The main drawback of this strategy is
that the GA step is computationally expensive. If we
need to consider a large context window or a large
number of features, it can be infeasible.
The remainder of this section is organized as fol-
lows. In section 2.1, we describe the DT learning
algorithm. In section 2.2, the TBL algorithm is de-
picted. In section 2.3, we depict the process of ob-
taining templates from a decision tree decomposi-
tion. Finally, in section 2.4, we present a template
evolution scheme that speeds up the TBL step.
2.1 Decision Trees
Decision tree learning is one of the most widely used
machine learning algorithms. It performs a parti-
tioning of the training set using principles of Infor-
mation Theory. The learning algorithm executes a
general to specific search of a feature space. The
most informative feature is added to a tree structure
at each step of the search. Information Gain Ratio,
which is based on the data Entropy, is normally used
as the informativeness measure. The objective is to
construct a tree, using a minimal set of features, that
efficiently partitions the training set into classes of
observations. After the tree is grown, a pruning step
is carried out in order to avoid overfitting.
One of the most used algorithms for induction of
a DT is the C4.5 (Quinlan, 1993). We use Quinlan?s
C4.5 system throughout this work.
2.2 Transformation-Based Learning
Transformation Based error-driven Learning (TBL)
is a successful machine learning algorithm intro-
duced by Eric Brill (Brill, 1995). It has since been
used for several Natural Language Processing tasks,
such as part-of-speech (POS) tagging (Brill, 1995),
English text chunking (Ramshaw and Marcus, 1999;
dos Santos and Milidiu?, 2007b), spelling correc-
648
tion (Mangu and Brill, 1997), Portuguese appos-
itive extraction (Freitas et al, 2006), Portuguese
named entity extraction (Milidiu? et al, 2006) and
Portuguese noun-phrase chunking (dos Santos and
Oliveira, 2005), achieving state-of-the-art perfor-
mance in many of them.
TBL uses an error correcting strategy. Its main
scheme is to generate an ordered list of rules that
correct classification mistakes in the training set,
which have been produced by an initial classifier.
The requirements of the algorithm are:
? two instances of the training set, one that has
been correctly labeled, and another that re-
mains unlabeled;
? an initial classifier, the baseline system, which
classifies the unlabeled training set by trying
to apply the correct class for each sample. In
general, the baseline system is based on simple
statistics of the labeled training set; and
? a set of rule templates, which are meant to
capture the relevant feature combinations that
would determine the sample?s classification.
Concrete rules are acquired by instantiation of
this predefined set of rule templates.
? a threshold value, that is used as a stopping cri-
teria for the algorithm and is needed to avoid
overfitting to the training data.
The learning method is a mistake-driven greedy
procedure that iteratively acquires a set of transfor-
mation rules. The TBL algorithm can be depicted as
follows:
1. Starts applying the baseline system, in order to
guess an initial classification for the unlabeled
version of the training set;
2. Compares the resulting classification with the
correct one and, whenever a classification error
is found, all the rules that can correct it are gen-
erated by instantiating the templates. This tem-
plate instantiation is done by capturing some
contextual data of the sample being corrected.
Usually, a new rule will correct some errors, but
will also generate some other errors by chang-
ing correctly classified samples;
3. Computes the rules? scores (errors repaired - er-
rors created). If there is not a rule with a score
above an arbitrary threshold, the learning pro-
cess is stopped;
4. Selects the best scoring rule, stores it in the set
of learned rules and applies it to the training
set;
5. Returns to step 2.
When classifying a new sample item, the resulting
sequence of rules is applied according to its genera-
tion order.
2.3 DT Template Extraction
There are many ways to extract feature combinations
from decision trees. In an path from the root to the
leaves, more informative features appear first . Since
we want to generate the most promising templates
only, we just combine the more informative ones.
The process we use to extract templates from a
DT includes a depth-first traversal of the DT. For
each visited node, we create a new template that
combines its parent node template with the feature
used to split the data at that node. This is a very
simple decomposition scheme. Nevertheless, it re-
sults into extremely effective templates. We also use
pruned trees in all experiments shown in section 3.
Fig. 2 shows an excerpt of a DT generated for the
English text chunking task1. Using the described
method to extract templates from the DT shown in
Fig. 2, we obtain the template set listed in the left
side of Table 1. In order to generate more feature
combinations, without largely increasing the num-
ber of templates, we extend the template set by in-
cluding templates that do not have the root node fea-
ture. The extended template set for the DT shown in
Fig. 2 is listed in the right side of the Table 1.
We have also tried some other strategies that ex-
tract a larger number of templates from a DT. How-
ever, the efficacy of the learned rules is quite similar
to the one generated by the first method. This rein-
forces the conjecture that a DT generates informa-
tive feature combinations.
1CK[0] = Chunk tag of the current word (initial classifier
result); CK[?1] = previous word Chunk tag; CK[1] = next word
Chunk tag; POS[0] = current word POS tag; WRD[0] = current
word.
649
Table 1: Text chunking DT Template set example
Template set Extended template set
CK[0] CK[0]
CK[0] CK[1] CK[0] CK[1] CK[1]
CK[0] CK[1] WRD[0] CK[0] CK[1] WRD[0] CK[1] WRD[0]
CK[0] CK[1] WRD[0] CK[?1] CK[0] CK[1] WRD[0] CK[?1] CK[1] WRD[0] CK[?1]
CK[0] CK[1] POS[0] CK[0] CK[1] POS[0] CK[1] POS[0]
CK[0] CK[?1] CK[0] CK[?1] CK[?1]
Figure 2: Text chunking decision tree excerpt.
2.4 Template Evolution Speedup
TBL training time is highly sensitive to the number
and complexity of the applied templates. In (Cur-
ran and Wong, 2000), it is argued that we can bet-
ter tune the training time vs. templates complex-
ity trade-off by using an evolutionary template ap-
proach. The main idea is to apply only a small num-
ber of templates that evolve throughout the training.
When training starts, templates are short, consisting
of few feature combinations. As training proceeds,
templates evolve to more complex ones that contain
more feature combinations. In this way, only a few
templates are considered at any point in time. Nev-
ertheless, the descriptive power is not significantly
reduced.
The template evolution approach can be easily im-
plemented by using template sets extracted from a
DT. We implement this idea by successively training
TBL models. Each model uses only the templates
that contain feature combinations up to a given tree
level. For instance, using the tree shown in Fig. 2,
we have the following template sets for the three first
training rounds2:
1. CK[0] CK[1];
CK[0] CK[?1]
2. CK[0] CK[1] WRD[0];
CK[0] CK[1] POS[0]
3. CK[0] CK[1] WRD[0] CK[?1]
Using the template evolution strategy, the training
time is decreased by a factor of five for the English
text chunking task. This is a remarkable reduction,
since we use an implementation of the fastTBL algo-
rithm (Ngai and Florian, 2001) that is already a very
fast TBL version. The efficacy of the rules gener-
ated by the sequential training is quite similar to the
one obtained by training with all the templates at the
same time.
3 Experiments
This section presents the experimental setup and re-
sults of the application of ETL to four phrase chunk-
ing tasks. ETL results are compared with the results
of DT and TBL using hand-crafted templates.
In the TBL step, for each one of the four chunking
tasks, the initial classifier assigns to each word the
chunk tag that was most frequently associated with
the part-of-speech of that word in the training set.
The DT learning works as a feature selector and
is not affected by irrelevant features. We have tried
several context window sizes when training the clas-
sifiers. Some of the tested window sizes would be
very hard to be explored by a domain expert using
2We ignore templates composed of only one feature test.
650
TBL alone. The corresponding huge number of pos-
sible templates would be very difficult to be man-
aged by a template designer.
For the four tasks, the following experimental
setup provided us our best results.
ETL in the ETL learning, we use the features word,
POS and chunk. In order to overcome the spar-
sity problem, we only use the 200 most fre-
quent words to induce the DT. In the DT learn-
ing, the chunk tag of the word is the one applied
by the initial classifier. On the other hand, the
chunk tag of neighbor words are the true ones.
We report results for ETL trained with all the
templates at the same time as well as using tem-
plate evolution.
TBL the results for the TBL approach refers to TBL
trained with the set of templates proposed in
(Ramshaw and Marcus, 1999).
DT the best result for the DT classifier is shown.
The features word, POS and chunk are used to
generate the DT classifier. The chunk tag of a
word and its neighbors are the ones guessed by
the initial classifier. Using only the 100 most
frequent words gives our best results.
In all experiments, the term WS=X subscript
means that a window of size X was used for the
given model. For instance, ETLWS=3 corresponds
to ETL trained with window of size three, that is,
the current token, the previous and the next one.
3.1 Portuguese noun phrase chunking
For this task, we use the SNR-CLIC corpus de-
scribed in (Freitas et al, 2005). This corpus is
tagged with both POS and NP tags. The NP tags
are: I, for in NP; O, for out of NP; and B for the
leftmost word of an NP beginning immediately af-
ter another NP. We divided the corpus into 3514-
sentence (83346 tokens) training set and a 878-
sentence (20798 tokens) test set.
In Table 2 we compare the results3 of ETL with
DT and TBL. We can see that ETL, even with a
small window size, produces better results than DT
and TBL. The F?=1 of the ETLWS=7 classifier is
1.8% higher than the one of TBL and 2.6% higher
than the one of the DT classifier.
3#T = Number of templates.
Table 2: Portuguese noun phrase chunking.
Acc. Prec. Rec. F?=1 # T
(%) (%) (%) (%)
BLS 96.57 62.69 74.45 68.06 ?
DTWS=13 97.35 83.96 87.27 85.58 ?
TBL 97.45 85.48 87.32 86.39 100
ETLWS=3 97.61 86.12 87.24 86.67 21
ETLWS=5 97.68 86.85 87.49 87.17 35
ETLWS=7 97.82 88.15 88.20 88.18 34
ETLWS=9 97.82 88.02 88.34 88.18 40
Table 3 shows the results4 of ETL using template
evolution. As we can see, for the task of Portuguese
noun phrase chunking, the template evolution strat-
egy reduces the average training time in approxi-
mately 35%. On the other hand, there is a decrease
of the classifier efficacy in some cases.
Table 3: Portuguese noun phrase chunking using ETL
with template evolution.
Acc. Prec. Rec. F?=1 TTR
(%) (%) (%) (%) (%)
ETLWS=3 97.61 86.22 87.27 86.74 20.7
ETLWS=5 97.56 86.39 87.10 86.74 38.2
ETLWS=7 97.69 87.35 87.89 87.62 37.0
ETLWS=9 97.76 87.55 88.14 87.85 41.9
In (dos Santos and Oliveira, 2005), a special set
of six templates is shown. These templates are
designed to reduce classification errors of prepo-
sition within the task of Portuguese noun phrase
chunking. These templates use very specific do-
main knowledge and are difficult to DT and TBL
to extract. Table 4 shows the results of an experi-
ment where we include these six templates into the
Ramshaw&Marcus template set and also into the
template sets generated by ETL. Again, ETL pro-
duces better results than TBL.
Table 5 shows the results of using a committee
composed by the three best ETL classifiers. The
classification is done by selecting the most popular
tag among all the three committee members. The
achieved F?=1, 89.14% is the best one ever reported
for the SNR-CLIC corpus.
4TTR = Training time reduction.
651
Table 4: Portuguese noun phrase chunking using six ad-
ditional hand-crafted templates.
Acc. Prec. Rec. F?=1 # T
(%) (%) (%) (%)
BLS 96.57 62.69 74.45 68.06 ?
TBL 97.60 86.79 88.12 87.45 106
ETLWS=3 97.73 86.95 88.40 87.67 27
ETLWS=5 97.87 88.35 89.02 88.68 41
ETLWS=7 97.91 88.12 89.22 88.67 40
ETLWS=9 97.93 88.53 89.11 88.82 46
Table 5: Committee with the classifiers ETLWS=5,
ETLWS=7 and ETLWS=9, shown in Table 4.
Results (%)
Accuracy 97.97
Precision 88.62
Recall 89.67
F?=1 89.14
3.2 English base noun phrase chunking
The data used in the base NP chunking experiments
is the one by Ramshaw & Marcus (Ramshaw and
Marcus, 1999). This corpus contains sections 15-
18 and section 20 of the Penn Treebank, and is pre-
divided into 8936-sentence (211727 tokens) training
set and a 2012-sentence (47377 tokens) test. This
corpus is tagged with both POS and chunk tags.
Table 6 compares the results of ETL with DT
and TBL for the base NP chunking. We can see
that ETL, even using a small window size, produces
better results than DT and TBL. The F?=1 of the
ETLWS=9 classifier is 0.87% higher than the one of
TBL and 2.31% higher than the one of the DT clas-
sifier.
Table 7 shows the results of ETL using template
evolution. The template evolution strategy reduces
the average training time in approximately 62%.
Differently from the Portuguese NP chunking, we
observe an increase of the classifier efficacy in al-
most all the cases.
Table 8 shows the results of using a committee
composed by the eight ETL classifiers reported in
this section. Table 8 also shows the results for a
committee of SVM models presented in (Kudo and
Matsumoto, 2001). SVM?s results are the state-of-
Table 6: Base NP chunking.
Acc. Prec. Rec. F?=1 # T
(%) (%) (%) (%)
BLS 94.48 78.20 81.87 79.99 ?
DTWS=11 97.03 89.92 91.16 90.53 ?
TBL 97.42 91.68 92.26 91.97 100
ETLWS=3 97.54 91.93 92.78 92.35 68
ETLWS=5 97.55 92.43 92.77 92.60 85
ETLWS=7 97.52 92.49 92.70 92.59 106
ETLWS=9 97.63 92.62 93.05 92.84 122
Table 7: Base NP chunking using ETL with template evo-
lution.
Acc. Prec. Rec. F?=1 TTR
(%) (%) (%) (%) (%)
ETLWS=3 97.58 92.07 92.74 92.41 53.9
ETLWS=5 97.63 92.66 93.16 92.91 57.9
ETLWS=7 97.61 92.56 93.04 92.80 65.1
ETLWS=9 97.59 92.50 93.01 92.76 69.4
the-art for the Base NP chunking task. On the other
hand, using a committee of ETL classifiers, we pro-
duce very competitive results and maintain the ad-
vantages of using a rule based system.
Table 8: Base NP chunking using a committee of eight
ETL classifiers.
Accuracy Precision Recall F?=1
(%) (%) (%) (%)
ETL 97.72 92.87 93.34 93.11
SVM ? 94.15 94.29 94.22
3.3 English text chunking
The data used in the English text chunking exper-
iments is the CoNLL-2000 corpus, which is de-
scribed in (Sang and Buchholz, 2000). It is com-
posed by the same texts as the Ramshaw & Marcus
(Ramshaw and Marcus, 1999) corpus.
Table 9 compares the results of ETL with DTs and
TBL for English text chunking. ETL, even using a
small window size, produces better results than DTs
and TBL. The F?=1 of the ETLWS=3 classifier is
0.28% higher than the one of TBL and 2.17% higher
than the one of the DT classifier. It is an interesting
linguistic finding that the use of a window of size 3
652
(the current token, the previous token and the next
token) provides the current best results for this task.
Table 9: English text Chunking.
Acc. Prec. Rec. F?=1 # T
(%) (%) (%) (%)
BLS 77.29 72.58 82.14 77.07 ?
DTWS=9 94.29 89.55 91.00 90.27 ?
TBL 95.12 92.05 92.28 92.16 100
ETLWS=3 95.24 92.32 92.56 92.44 105
ETLWS=5 95.12 92.19 92.27 92.23 167
ETLWS=7 95.13 92.24 92.32 92.28 183
ETLWS=9 95.07 92.10 92.27 92.19 205
Table 10 shows the results of ETL using template
evolution. The template evolution strategy reduces
the average training time by approximately 81%. On
the other hand, there is a small decrease of the clas-
sifier efficacy in all cases.
Table 10: English text chunking using ETL with template
evolution.
Acc. Prec. Rec. F?=1 TTR
(%) (%) (%) (%) (%)
ETLWS=3 95.21 92.14 92.53 92.34 77.2
ETLWS=5 94.98 91.84 92.25 92.04 80.8
ETLWS=7 95.03 91.89 92.28 92.09 83.0
ETLWS=9 95.01 91.87 92.21 92.04 84.5
Table 11 shows the results of using a committee
composed by the eight ETL classifiers reported in
this section. Table 11 also shows the results for a
SVM model presented in (Wu et al, 2006). SVM?s
results are the state-of-the-art for the Text chunking
task. On the other hand, using a committee of ETL
classifiers, we produce very competitive results and
maintain the advantages of using a rule based sys-
tem.
Table 11: English text Chunking using a committee of
eight ETL classifiers.
Accuracy Precision Recall F?=1
(%) (%) (%) (%)
ETL 95.50 92.63 92.96 92.79
SVM ? 94.12 94.13 94.12
Table 12 shows the results, broken down by chunk
type, of using a committee composed by the eight
ETL classifiers reported in this section.
Table 12: English text chunking results, broken down by
chunk type, for the ETL committee.
Precision Recall F?=1
(%) (%) (%)
ADJP 75.59 72.83 74.19
ADVP 82.02 79.56 80.77
CONJP 35.71 55.56 43.48
INTJ 00.00 00.00 00.00
LST 00.00 00.00 00.00
NP 92.90 93.08 92.99
PP 96.53 97.63 97.08
PRT 66.93 80.19 72.96
SBAR 86.50 85.05 85.77
VP 92.84 93.58 93.21
Overall 92.63 92.96 92.79
3.4 Hindi text chunking
The data used in the Hindi text chunking exper-
iments is the SPSAL-2007 corpus, which is de-
scribed in (Bharati and Mannem, 2007). This cor-
pus is pre-divided into a 20000-tokens training set, a
5000-tokens development set and a 5000-tokens test
set. This corpus is tagged with both POS and chunk
tags.
To fairly compare our approach with the ones
presented in the SPSAL-2007, the POS tags of the
test corpus were replaced by the ones predicted by
an ETL-based Hindi POS Tagger. The description
of our ETL pos tagger is beyond the scope of this
work. Since the amount of training data is very small
(20000 tokens), the accuracy of the ETL Hindi POS
tagger is low, 77.50% for the test set.
The results are reported in terms of chunking ac-
curacy, the same performance measure used in the
SPSAL-2007. Table 13 compares the results of ETL
with DT and TBL for Hindi text chunking. ETL pro-
duces better results than DT and achieves the same
performance of TBL using 60% less templates. We
believe that ETL performance is not as good as in
the other tasks mainly because of the small amount
of training data, which increases the sparsity prob-
lem.
We do not use template evolution for Hindi text
653
chunking. Since the training corpus is very small,
the training time reduction is not significant.
Table 13: Hindi text Chunking.
Accuracy # Templates
(%)
BLS 70.05 ?
DTWS=5 78.20 ?
TBL 78.53 100
ETLWS=5 78.53 30
Table 14 compares the results of ETL with the two
best Hindi text chunkers at SPSAL-2007 (Bharati
and Mannem, 2007). The first one is a combination
of Hidden Markov Models (HMM) and Conditional
Random Fields (CRF) (PVS and Gali, 2007). The
second is based in Maximum Entropy Models (Max-
Ent) (Dandapat, 2007). ETL performs better than
MaxEnt and worst than HMM+CRF. It is important
to note that the accuracy of the POS tagger used by
(PVS and Gali, 2007) (78.66%) is better than ours
(77.50%). The POS tagging quality directly affects
the chunking accuracy.
Table 14: Comparison with best systems of SPSAL-2007
Accuracy
(%)
HMM + CRF 80.97
ETLWS=5 78.53
MaxEnt 74.92
4 Conclusions
In this paper, we approach the phrase chunking
task using Entropy Guided Transformation Learning
(ETL). We carry out experiments with four phrase
chunking tasks: Portuguese noun phrase chunking,
English base noun phrase chunking, English text
chunking and Hindi text chunking. In all four tasks,
ETL shows better results than Decision Trees and
also than TBL with hand-crafted templates. ETL
provides a new training strategy that accelerates
transformation learning. For the English text chunk-
ing task this corresponds to a factor of five speedup.
For Portuguese noun phrase chunking, ETL shows
the best reported results for the task. For the other
three linguistic tasks, ETL shows competitive results
and maintains the advantages of using a rule based
system.
References
Akshar Bharati and Prashanth R. Mannem. 2007. In-
troduction to shallow parsing contest on south asian
languages. In Proceedings of the IJCAI and the Work-
shop On Shallow Parsing for South Asian Languages
(SPSAL), pages 1?8.
Eric Brill. 1995. Transformation-based error-driven
learning and natural language processing: A case
study in part-of-speech tagging. Comput. Linguistics,
21(4):543?565.
Xavier Carreras and Llu??s Ma`rquez. 2003. Phrase recog-
nition by filtering and ranking with perceptrons. In
Proceedings of RANLP-2003, Borovets, Bulgaria.
Simon Corston-Oliver and Michael Gamon. 2003. Com-
bining decision trees and transformation-based learn-
ing to correct transferred linguistic representations. In
Proceedings of the Ninth Machine Tranlsation Sum-
mit, pages 55?62, New Orleans, USA. Association for
Machine Translation in the Americas.
J. R. Curran and R. K. Wong. 2000. Formalisation
of transformation-based learning. In Proceedings of
the Australian Computer Science Conference - ACSC,
pages 51?57, Canberra, Australia.
Sandipan Dandapat. 2007. Part of speech tagging and
chunking with maximum entropy model. In Proceed-
ings of the IJCAI and the Workshop On Shallow Pars-
ing for South Asian Languages (SPSAL), pages 29?32.
C??cero N. dos Santos and Ruy L. Milidiu?. 2007a. En-
tropy guided transformation learning. Technical Re-
port 29/07, Departamento de Informtica, PUC-Rio.
C??cero N. dos Santos and Ruy L. Milidiu?. 2007b. Prob-
abilistic classifications with tbl. In Proceedings of
Eighth International Conference on Intelligent Text
Processing and Computational Linguistics ? CICLing,
pages 196?207, Mexico City, Mexico, February.
C??cero N. dos Santos and Claudia Oliveira. 2005. Con-
strained atomic term: Widening the reach of rule tem-
plates in transformation based learning. In EPIA,
pages 622?633.
M. C. Freitas, M. Garrao, C. Oliveira, C. N. dos Santos,
and M. Silveira. 2005. A anotac?a?o de um corpus para
o aprendizado supervisionado de um modelo de sn. In
Proceedings of the III TIL / XXV Congresso da SBC,
Sa?o Leopoldo - RS - Brasil.
M. C. Freitas, J. C. Duarte, C. N. dos Santos, R. L. Mi-
lidiu?, R. P. Renteria, and V. Quental. 2006. A ma-
chine learning approach to the identification of appos-
654
itives. In Proceedings of Ibero-American AI Confer-
ence, Ribeira?o Preto, Brazil, October.
T. Kudo and Y. Matsumoto. 2001. Chunking with sup-
port vector machines. In Proceedings of the NAACL-
2001.
Lidia Mangu and Eric Brill. 1997. Automatic rule ac-
quisition for spelling correction. In Proceedings of
The Fourteenth International Conference on Machine
Learning, ICML 97. Morgan Kaufmann.
Bea?ta Megyesi. 2002. Shallow parsing with pos taggers
and linguistic features. Journal of Machine Learning
Research, 2:639?668.
Ruy L. Milidiu?, Julio C. Duarte, and Roberto Cavalcante.
2006. Machine learning algorithms for portuguese
named entity recognition. In Proceedings of Fourth
Workshop in Information and Human Language Tech-
nology (TIL?06), Ribeira?o Preto, Brazil.
Ruy L. Milidiu?, Julio C. Duarte, and C??cero N. dos San-
tos. 2007. Tbl template selection: An evolutionary
approach. In Proceedings of Conference of the Span-
ish Association for Artificial Intelligence - CAEPIA,
Salamanca, Spain.
Antonio Molina and Ferran Pla. 2002. Shallow parsing
using specialized hmms. J. Mach. Learn. Res., 2:595?
613.
Grace Ngai and Radu Florian. 2001. Transformation-
based learning in the fast lane. In Proceedings of
North Americal ACL, pages 40?47, June.
Avinesh PVS and Karthik Gali. 2007. Part-of-speech
tagging and chunking using conditional random fields
and transformation based learning. In Proceedings of
the IJCAI and the Workshop On Shallow Parsing for
South Asian Languages (SPSAL), pages 21?24.
J. Ross Quinlan. 1993. C4.5: programs for machine
learning. Morgan Kaufmann Publishers Inc., San
Francisco, CA, USA.
Lance Ramshaw and Mitch Marcus. 1999. Text chunk-
ing using transformation-based learning. In S. Arm-
strong, K.W. Church, P. Isabelle, S. Manzi, E. Tzouk-
ermann, and D. Yarowsky, editors, Natural Language
Processing Using Very Large Corpora. Kluwer.
Erik F. Tjong Kim Sang and Sabine Buchholz. 2000.
Introduction to the conll-2000 shared task: chunking.
In Proceedings of the 2nd workshop on Learning lan-
guage in logic and the 4th CONLL, pages 127?132,
Morristown, NJ, USA. Association for Computational
Linguistics.
Erik F. Tjong Kim Sang. 2002. Memory-based shallow
parsing. J. Mach. Learn. Res., 2:559?594.
Yu-Chieh Wu, Chia-Hui Chang, and Yue-Shi Lee. 2006.
A general and multi-lingual phrase chunking model
based on masking method. In Proceedings of 7th In-
ternational Conference on Intelligent Text Processing
and Computational Linguistics, pages 144?155.
Tong Zhang, Fred Damerau, and David Johnson. 2002.
Text chunking based on a generalization of winnow. J.
Mach. Learn. Res., 2:615?637.
655
Proceedings of the Fourteenth Conference on Computational Natural Language Learning: Shared Task, pages 64?69,
Uppsala, Sweden, 15-16 July 2010. c?2010 Association for Computational Linguistics
Hedge Detection Using the RelHunter Approach?
Eraldo R. Fernandes? and Carlos E. M. Crestana? and Ruy L. Milidiu??
Departamento de Informa?tica, PUC-Rio
Rio de Janeiro, Brazil
{efernandes, ccrestana, milidiu}@inf.puc-rio.br
Abstract
RelHunter is a Machine Learning based
method for the extraction of structured in-
formation from text. Here, we apply Rel-
Hunter to the Hedge Detection task, pro-
posed as the CoNLL-2010 Shared Task1.
RelHunter?s key design idea is to model
the target structures as a relation over enti-
ties. The method decomposes the original
task into three subtasks: (i) Entity Iden-
tification; (ii) Candidate Relation Gener-
ation; and (iii) Relation Recognition. In
the Hedge Detection task, we define three
types of entities: cue chunk, start scope
token and end scope token. Hence, the
Entity Identification subtask is further de-
composed into three token classification
subtasks, one for each entity type. In
the Candidate Relation Generation sub-
task, we apply a simple procedure to gen-
erate a ternary candidate relation. Each in-
stance in this relation represents a hedge
candidate composed by a cue chunk, a
start scope token and an end scope to-
ken. For the Relation Recognition sub-
task, we use a binary classifier to discrim-
inate between true and false candidates.
The four classifiers are trained with the
Entropy Guided Transformation Learning
algorithm. When compared to the other
hedge detection systems of the CoNLL
shared task, our scheme shows a competi-
tive performance. The F -score of our sys-
tem is 54.05 on the evaluation corpus.
? This work is partially funded by CNPq and FAPERJ
grants 557.128/2009-9 and E-26/170028/2008.
? Holds a CNPq doctoral fellowship and has financial
support from IFG, Brazil.
?Holds a CAPES doctoral fellowship.
?Holds a CNPq research fellowship.
1Closed Task 2: detection of hedge cues and their scopes.
1 Introduction
Hedges are linguistic devices that indicate un-
certain or unreliable information within a text.
The detection of hedge structures is important for
many applications that extract facts from textual
data. The CoNLL-2010 Shared Task (Farkas et
al., 2010) is dedicated to hedge detection.
A hedge structure consists of a cue and a scope.
In Figure 1, we present a sentence with two hedge
instances. The hedge cues are highlighted and
their scopes are delimited by brackets. The hedge
cue comprises one or more keywords that indi-
cate uncertainty. The hedge scope is the uncertain
statement which is hedged by the cue. The scope
always includes the corresponding cue.
[ They indicate that [ the demonstration
is possible in this context ] and there is a
correlation ]
Figure 1: Sentence with two hedge instances.
Over the last two decades, several Computa-
tional Linguistic problems have been successfully
modeled as local token classification tasks (Brill,
1995; Milidiu? et al, 2009). Nevertheless, the
harder problems consist in identifying complex
structures within a text. These structures comprise
many tokens and show non local token dependen-
cies.
Phrase chunking (Sang and Buchholz, 2000) is
a task that involves structure recognition. Pun-
yakanok and Roth decompose this task into
four subtasks, that are sequentially solved (Pun-
yakanok and Roth, 2001). They use Hidden
Markov Models for the first three subtasks. They
find out that task decomposition improves the
overall token classification modeling.
Clause identification (Sang and De?jean, 2001)
is another task that requires structure recognition.
As clauses may embed other clauses, these struc-
64
tures involve stronger dependencies than phrase
chunks. Carreras et al propose an approach that
extends Punyakanok and Roth?s previous work
(Carreras et al, 2002). Their system comprises
complex methods for training and extraction, in
order to exploit the specific dependency aspects of
clause structures.
Phrase Recognition is a general type of task that
includes both phrase chunking and clause iden-
tification. Carreras et al propose the Filtering-
Ranking Perceptron (FRP) system for this general
task (Carreras et al, 2005). The FRP task model-
ing is strongly related to previous proposals (Pun-
yakanok and Roth, 2001; Carreras et al, 2002).
However, it simultaneously learns to solve three
subtasks. FRP is very effective, although compu-
tationally expensive at both training and prediction
time. Currently, FRP provides the best performing
clause identification system.
In Morante and Daelemans (2009), the hedge
detection task is solved as two consecutive classi-
fication tasks. The first one consists of classify-
ing the tokens of a sentence as hedge cues using
the IOB tagging style. The second task consists of
classifying tokens of a sentence as being the start
of a hedge scope, the end of one, or neither. The
result of those two tasks is combined using a set of
six rules to solve the hedge detection task.
Here, we describe RelHunter, a new method
for the extraction of structured information from
text. Additionally, we apply it to the Hedge Detec-
tion task. RelHunter extends the modeling strat-
egy used both in Carreras et al (2005) and Pun-
yakanok et al (2001). Other applications of this
method are presented in Fernandes at al. (2009b;
2010).
The remainder of this text is organized as fol-
lows. In Section 2, we present an overview of the
RelHunter method. The modeling approach for
the Hedge Detection task is presented in Sections
3 and 4. The experimental findings are depicted
and discussed in Section 5. Finally, in Section 6,
we present our final remarks.
2 RelHunter Overview
The central idea of RelHunter is to model the tar-
get structures as a relation over entities. To learn
how to extract this relation from text, RelHunter
uses two additional schemes: task decomposition
and interdependent classification.
We decompose the original task into three sub-
tasks: (i) Entity Identification; (ii) Candidate Re-
lation Generation; and (iii) Relation Recognition.
In Figure 2, we illustrate the application of Rel-
Hunter to hedge detection. We use the sentence
introduced by Figure 1.
Entity Identification is a local subtask, in which
simple entities are detected without any concern
about the structures they belong to. The outcome
of this subtask is the entity set. For instance, for
hedge detection, we identify three types of enti-
ties: hedge cues, tokens that start a scope and to-
kens that end a scope.
The second subtask is performed by a simple
procedure that generates the candidate relation
over the entity set. This relation includes true and
false candidates. This procedure considers do-
main specific knowledge to avoid the generation
of all possible candidates. In the hedge detection
task, we define the candidate relation as the set
of entity triples that comprise a hedge cue, a start
scope token and an end scope token, such that the
start token does not occur after the end token and
the hedge cue occurs between the start and the end
tokens.
The Relation Recognition subtask is a binary
classification problem. In this subtask, we dis-
criminate between true and false candidates. The
output relation produced in this subtask contains
the identified hedge instances.
3 Hedge Detection using RelHunter
In this section, we detail the RelHunter method
and describe its application to hedge detection.
3.1 Entity Identification
We consider three specific entity types: cue chunk,
start scope token, and end scope token. We divide
entity identification into three token classification
tasks, one for each entity type. Thus, we use the
original corpus to train three classifiers.
The cue chunk subtask is approached as a to-
ken classification problem by using the IOB tag-
ging style. The token tag is defined as follows: I,
when it is inside a hedge cue; O, when it is outside
a hedge cue; and B, when it begins a hedge cue
immediately after a distinct cue. As the baseline
classifier, we use the Cue Dictionary proposed in
Morante and Daelemans (2009), classifying each
occurrence of those words as a cue.
The start scope and end scope subtasks are
modeled as binary token classification problems.
65
Figure 2: Diagram of the RelHunter method.
As the baseline classifier for the start scope sub-
task, we assign the first token of each hedge cue as
the start of a scope.
We have two baseline classifiers for the end
scope subtask: END and END-X. The END sys-
tem classifies as an end token the second to the
last token of each sentence that contains a cue.
Due to the frequent occurrence of parenthesized
clauses at the end of sentences in full articles, the
END-X system extends the END system with an
additional operation. It reassigns an end scope tag,
from a close parentheses token, to the token before
its corresponding open parentheses.
3.2 Candidate Relation Generation
We define as the candidate hedge relation the set
of entity triples that comprise a hedge cue, a start
scope token and an end scope token, such that the
start token does not occur after the end token and
the hedge cue occurs between the start and the end
tokens.
3.3 Relation Recognition
We train a binary classifier to discriminate be-
tween positive and negative candidates within the
candidate relation. This classifier is trained on the
relation dataset, which is built by a general pro-
cedure. This dataset contains an entry for each
candidate. For each candidate, we generate two
feature sets: local features and global features.
The local features include local information
about each candidate entity, namely: cue chunk,
start scope token and end scope token. These fea-
tures are retrieved from the original corpus. For
the start and end tokens, we use all their features in
the original corpus. For the cue chunk, we use the
features of the rightmost token within the chunk.
The global features follow Carreras et al
(2002). These features are generated by consid-
ering the whole sentence where the candidate lies
in. They inform about the occurrence of relevant
elements within sentence fragments. We consider
as relevant elements the three entity types and ver-
bal chunks.
For each candidate entity, we consider three
fragments. The first one contains all the tokens be-
fore the entity. The second, all the entity tokens,
and the third all the tokens after the entity. Simi-
larly, for the whole candidate, we have three more
fragments: one containing all the tokens before the
candidate, another containing all the candidate to-
kens, and the third one containing all the tokens
after the candidate. Thus, there are 12 fragments
for each candidate, three for each entity plus three
for the whole candidate.
For each relevant element and fragment, we
generate two global features in the relation dataset:
a flag indicating the occurrence of the element
within the fragment and a counter showing its fre-
quency.
The relation dataset has km local features and
6r(k + 1) global features, where k is the relation
cardinality (number of entities), m is the number
of features in the original corpus, and r is the num-
ber of relevant elements.
Our current RelHunter implementation uses the
Entropy Guided Transformation Learning (ETL)
as its learning engine (Milidiu? et al, 2008; dos
Santos and Milidiu?, 2009). For instance, we train
four ETL based classifiers: one for each Entity
Identification subtask and one for the Relation
Recognition subtask. In the next section, we de-
scribe an important issue explored by the ETL al-
gorithm.
66
4 Interdependent Classification
The input to the Relation Recognition subtask is
the candidate relation, i.e., a set of hedge candi-
dates. The corresponding classifier must discrim-
inate positive from negative candidates. However,
identifying one candidate as positive implies that
some other candidates must be negatives. This in-
volves a special modeling issue: interdependent
classification. The learning engine may explore
these dependencies, when building the classifier
for this subtask.
Interdependent classification is usually assumed
for neighboring examples. When the learning
model adopts a Markovian Property, then the
neighborhood is given by a context window. This
is the case for Markovian Fields such as Hidden
Markov Models. Another model that also explores
interdependent examples is ETL.
ETL is a very attractive modeling tool and has
been applied to several classification tasks (Mi-
lidiu? et al, 2008; dos Santos and Milidiu?, 2009;
Fernandes et al, 2009a; Fernandes et al, 2010).
ETL uses an annotated corpus, where the corre-
sponding class is attached to each example. The
corpus is partitioned into segments. Each segment
is a sequence of examples. Examples within the
same segment are considered dependent. Con-
versely, examples within different segments are
considered independent. Moreover, an example
classification depends only on the features of the
examples from its corresponding context window.
Hence, to apply ETL we need to provide three
modeling ingredients: segment definition, exam-
ple ordering within a segment and the context win-
dow size. Given that, classification dependencies
are explored by the ETL classifier. Hence, Rel-
Hunter uses ETL as its learning engine.
We include in the same segment the hedge can-
didates that have the same cue and start scope to-
kens. Within a segment, we order the candidates
by the order of the end token in the original cor-
pus. We use a context window of 7 candidates,
i.e., three candidates before the current, the current
candidate and three candidates after the current.
5 Experimental Results
We use the corpus provided in the CoNLL-2010
Shared Task to train and evaluate our hedge de-
tection system. We add the following annota-
tion to the corpus: word stems, part-of-speech
tags, phrase chunks, and clause annotations. Word
stems have been generated by the Porter stemmer
(Porter, 1980). The additional annotation has been
generated by ETL based systems (dos Santos and
Milidiu?, 2009; Fernandes et al, 2009b; Milidiu? et
al., 2008).
The CoNLL corpus is based on the BioScope
corpus (Vincze et al, 2008). Since it contains doc-
uments of two different kinds ? paper abstracts and
full papers ? we split it into two subcorpora. The
first subcorpus is called ABST and contains all the
paper abstracts. The second is called FULL and
contains all the full papers.
We have two experimental setups: Development
and Evaluation. In the Development Setup, we use
ABST as the training corpus and FULL as the de-
velopment corpus. This is a conservative decision
since the CoNLL Evaluation Corpus is comprised
only of full articles. In the Evaluation Setup, we
use the union of ABST and FULL as the train-
ing corpus and report the performance over the
CoNLL Evaluation Corpus.
5.1 Development
Here, we report the development setup experimen-
tal findings. In Table 1, we show the performance
of the three baseline classifiers. The start and end
classifiers are evaluated with golden standard cue
chunks. All results are obtained with the END-X
baseline system, except when explicitly stated.
Task Precision Recall F-score
Cue 51.96 51.65 51.80
Start scope 72.01 72.22 72.11
End scope 65.90 58.97 62.24
Table 1: Development performance of the three
Baseline Classifiers.
In Table 2, we report the performance of the
three entity identification ETL classifiers. Again,
the start and end classifiers are evaluated with
golden standard cue chunks. These results indi-
cate that the end scope subtask is the hardest one.
Indeed, our ETL classifier is not able to improve
the baseline classifier performance. The last ta-
ble line shows the performance of the RelHunter
method on the target task ? hedge detection.
5.2 Evaluation
Here, we report the evaluation setup findings. In
Table 3, we show the performance of the three
67
Task Precision Recall F-score
Cue 81.23 73.20 77.01
Start scope 91.81 72.37 80.94
End scope 65.90 58.97 62.24
Hedge 53.49 34.43 41.89
Table 2: Development performance of the three
entity identification ETL classifiers and the Rel-
Hunter method to hedge detection.
baseline classifiers. The start and end classifiers
are evaluated with golden standard cue chunks.
Task Precision Recall F-score
Cue 45.12 60.02 51.52
Start scope 75.51 75.73 75.62
End scope 81.01 72.56 76.55
Table 3: Evaluation performance of the three
Baseline Classifiers.
In Table 4, we report the performance of the
three entity identification ETL classifiers. Again,
the start and end classifiers are evaluated with
golden standard cue chunks. The last table line
shows the performance of the RelHunter method
on the target task ? hedge detection.
Task Precision Recall F-score
Cue 78.73 77.05 77.88
Start scope 89.21 77.86 83.15
End scope 81.01 72.56 76.55
Hedge 57.84 50.73 54.05
Table 4: Evaluation performance of the three
entity identification ETL classifiers and the Rel-
Hunter method to hedge detection.
In Table 5, we report the Hedge Detection per-
formances when using END and END-X, as the
baseline classifier for the end scope subtask. The
use of END-X improves the overall system F -
score by more than ten twelve.
In Table 6, we report the Final Results of the
CoNLL-2010 Shared Task ? Closed Task 2. For
the sake of comparison, we also include the per-
formance of the RelHunter system with END-X,
that has been developed and tested after the com-
End scope Precision Recall F-score
END 45.96 38.04 41.63
END-X 57.84 50.73 54.05
Table 5: Evaluation performance of the RelHunter
system when using END and END-X.
petition end. The version with the END baseline
holds rank 7 at the competition.
Official System P R FRank
1 Morante 59.62 55.18 57.32
2 Rei 56.74 54.60 55.65
3 Velldal 56.71 54.02 55.33
- RelHunter 57.84 50.73 54.05
4 Li 57.42 47.92 52.24
5 Zhou 45.32 43.56 44.42
6 Zhang 45.94 42.69 44.25
7 Fernandes 45.96 38.04 41.63
8 Vlachos 41.18 35.91 38.37
9 Zhao 34.78 41.05 37.66
10 Tang 34.49 31.85 33.12
11 Ji 21.87 17.23 19.27
12 Ta?ckstro?m 02.27 02.03 02.15
Table 6: Evaluation performance of the CoNLL-
2010 systems and the RelHunter method with the
END-X end scope classifier.
6 Conclusion
We propose RelHunter, a new machine learning
based method for the extraction of structured in-
formation from text. RelHunter consists in model-
ing the target structures as a relation over entities.
To learn how to extract this relation from text, Rel-
Hunter uses two main schemes: task decomposi-
tion and interdependent classification.
RelHunter decomposes the identification of en-
tities into several but simple token classification
subtasks. Additionally, the method generates a
candidate relation over the identified entities and
discriminates between true and false candidates
within this relation.
RelHunter uses the Entropy Guided Transfor-
mation Learning algorithm as its learning engine.
As Hidden Markov Models, ETL is able to con-
sider interdependent examples. RelHunter ex-
68
ploits this powerful feature in order to tackle de-
pendencies among the hedge candidates.
RelHunter is easily applied to many complex
Computational Linguistic problems. We show its
effectiveness by applying it to hedge detection.
Other successful applications of this method are
presented in Fernandes et al (2009b; 2010).
RelHunter explores the dependency among lin-
guistic structures by using a powerful feature of
the ETL algorithm. Nevertheless, this feature
is restricted to sequentially organized examples,
since ETL has been initially proposed for token
classification problems. Linguistic structures in-
volve topologies that are frequently more complex
than that. The ETL algorithm may be extended to
consider more complex topologies. We conjecture
that it is possible to consider quite general topolo-
gies. This would contribute to the construction of
better solutions to many Computational Linguistic
tasks.
Acknowledgments
The authors thank Evelin Amorim and Eduardo
Motta for coding dataset normalization procedures
that are very handy for Hedge Detection.
References
Eric Brill. 1995. Transformation-based error-driven
learning and natural language processing: a case
study in part-of-speech tagging. Computational Lin-
guistics, 21(4):543?565.
Xavier Carreras, Llu??s Ma`rquez, Vasin Punyakanok,
and Dan Roth. 2002. Learning and inference for
clause identification. In Proceedings of the Thir-
teenth European Conference on Machine Learning,
pages 35?47.
Xavier Carreras, Llu??s Ma`rquez, and Jorge Castro.
2005. Filtering-ranking perceptron learning for par-
tial parsing. Machine Learning, 60(1?3):41?71.
C??cero N. dos Santos and Ruy L. Milidiu?, 2009. Foun-
dations of Computational Intelligence, Volume 1:
Learning and Approximation, volume 201 of Stud-
ies in Computational Intelligence, chapter Entropy
Guided Transformation Learning, pages 159?184.
Springer.
Richa?rd Farkas, Veronika Vincze, Gyo?rgy Mo?ra, Ja?nos
Csirik, and Gyo?rgy Szarvas. 2010. The CoNLL-
2010 Shared Task: Learning to Detect Hedges and
their Scope in Natural Language Text. In Proceed-
ings of the Fourteenth Conference on Computational
Natural Language Learning (CoNLL-2010): Shared
Task, pages 1?12, Uppsala, Sweden, July. Associa-
tion for Computational Linguistics.
Eraldo R. Fernandes, C??cero N. dos Santos, and Ruy L.
Milidiu?. 2009a. Portuguese language processing
service. In Proceedings of the Web in Ibero-America
Alternate Track of the 18th World Wide Web Confer-
ence (WWW?2009), Madrid.
Eraldo R. Fernandes, Bernardo A. Pires, C??cero N. dos
Santos, and Ruy L. Milidiu?. 2009b. Clause identifi-
cation using entropy guided transformation learning.
In Proceedings of the 7th Brazilian Symposium in In-
formation and Human Language Technology (STIL),
Sa?o Carlos, Brazil.
Eraldo R. Fernandes, Bernardo A. Pires, C??cero N.
dos Santos, and Ruy L. Milidiu?. 2010. A ma-
chine learning approach to Portuguese clause iden-
tification. In Proceedings of the Nineth Interna-
tional Conference on Computational Processing of
the Portuguese Language (PROPOR), volume 6001
of Lecture Notes in Artificial Intelligence, pages 55?
64, Porto Alegre, Brazil. Springer.
Ruy L. Milidiu?, C??cero N. dos Santos, and Julio C.
Duarte. 2008. Phrase chunking using entropy
guided transformation learning. In Proceedings of
ACL-08: HLT, pages 647?655, Columbus, USA.
Association for Computational Linguistics.
Ruy L. Milidiu?, C??cero N. dos Santos, and Carlos
E. M. Crestana. 2009. A token classification ap-
proach to dependency parsing. In Proceedings of
the 7th Brazilian Symposium in Information and Hu-
man Language Technology (STIL?2009), Sa?o Carlos,
Brazil.
Roser Morante and Walter Daelemans. 2009. Learn-
ing the scope of hedge cues in biomedical texts. In
Proceedings of the BioNLP 2009 Workshop, pages
28?36, Boulder, USA, June. Association for Com-
putational Linguistics.
Martin F. Porter. 1980. An algorithm for suffix strip-
ping. Program, 14(3):130?137.
Vasin Punyakanok and Dan Roth. 2001. The use of
classifiers in sequential inference. In Proceedings of
the Conference on Advances in Neural Information
Processing Systems (NIPS), pages 995?1001. MIT
Press.
Erik F. Tjong Kim Sang and Sabine Buchholz.
2000. Introduction to the CoNLL-2000 shared task:
Chunking. In Proceedings of CoNLL-2000 and
LLL-2000, Lisbon, Portugal.
Erik F. T. K. Sang and Herve? De?jean. 2001. Introduc-
tion to the CoNLL-2001 shared task: Clause identifi-
cation. In Proceedings of Fifth Conference on Com-
putational Natural Language Learning, Toulouse,
France.
Veronika Vincze, Gyo?rgy Szarvas, Richa?rd Farkas,
Gyo?rgy Mo?ra, and Ja?nos Csirik. 2008. The Bio-
Scope corpus: biomedical texts annotated for uncer-
tainty, negation and their scopes. BMC Bioinformat-
ics, 9 (Suppl 11):S9.
69
