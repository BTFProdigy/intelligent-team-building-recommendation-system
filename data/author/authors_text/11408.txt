Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 131?140,
Singapore, 6-7 August 2009.
c
?2009 ACL and AFNLP
Generalized Expectation Criteria for
Bootstrapping Extractors using Record-Text Alignment
Kedar Bellare
Dept. of Computer Science
University of Massachusetts
Amherst, MA 01003
kedarb@cs.umass.edu
Andrew McCallum
Dept. of Computer Science
University of Massachusetts
Amherst, MA 01003
mccallum@cs.umass.edu
Abstract
Traditionally, machine learning ap-
proaches for information extraction
require human annotated data that can be
costly and time-consuming to produce.
However, in many cases, there already
exists a database (DB) with schema
related to the desired output, and records
related to the expected input text. We
present a conditional random field (CRF)
that aligns tokens of a given DB record
and its realization in text. The CRF model
is trained using only the available DB and
unlabeled text with generalized expecta-
tion criteria. An annotation of the text
induced from inferred alignments is used
to train an information extractor. We eval-
uate our method on a citation extraction
task in which alignments between DBLP
database records and citation texts are
used to train an extractor. Experimental
results demonstrate an error reduction
of 35% over a previous state-of-the-art
method that uses heuristic alignments.
1 Introduction
A substantial portion of information on the Web
consists of unstructured and semi-structured text.
Information extraction (IE) systems segment and
label such text to populate a structured database
that can then be queried and mined efficiently.
In this paper, we mainly deal with information
extraction from text fragments that closely resem-
ble structured records. Examples of such texts
include citation strings in research papers, con-
tact addresses on person homepages and apart-
ment listings in classified ads. Pattern match-
ing and rule-based approaches for IE (Brin, 1998;
Agichtein and Gravano, 2000; Etzioni et al, 2005)
that only use specific patterns, and delimiter and
font-based cues for segmentation are prone to fail-
ure on such data because these cues are gen-
erally not broadly reliable. Statistical machine
learning methods such as hidden Markov models
(HMMs) (Rabiner, 1989; Seymore et al, 1999;
Freitag and McCallum, 1999) and conditional ran-
dom fields (CRFs) (Lafferty et al, 2001; Peng
and McCallum, 2004; Sarawagi and Cohen, 2005)
have become popular approaches to address the
text extraction problem. However, these methods
require labeled training data, such as annotated
text, which is often scarce and expensive to pro-
duce.
In many cases, however, there already exists a
database with schema related to the desired out-
put, and records that are imperfectly rendered in
the available unlabeled text. This database can
serve as a source of significant supervised guid-
ance to machine learning methods. Previous work
on using databases to train information extrac-
tors has taken one of three simpler approaches.
In the first, a separate language model is trained
on each column of the database and these mod-
els are then used to segment and label a given
text sequence (Agichtein and Ganti, 2004; Can-
isius and Sporleder, 2007). However, this ap-
proach does not model context, errors or differ-
ent formats of fields in text, and requires large
number of database entries to learn an accurate
language model. The second approach (Sarawagi
and Cohen, 2004; Michelson and Knoblock, 2005;
Mansuri and Sarawagi, 2006) uses database or
dictionary lookups in combination with similarity
measures to add features to the text sequence. Al-
though these features are very informative, learn-
ing algorithms still require annotated data to make
use of them. The final approach heuristically
labels texts using matching records and learns
extractors from these annotations (Ramakrishnan
and Mukherjee, 2004; Bellare and McCallum,
2007; Michelson and Knoblock, 2008). Heuris-
131
tic labeling decisions, however, are made indepen-
dently without regard for the Markov dependen-
cies among labels in text and are sensitive to subtle
changes in text.
Here we propose a method that automatically
induces a labeling of an input text sequence us-
ing a word alignment with a matching database
record. This induced labeling is then used to train
a text extractor. Our approach has several advan-
tages over previous methods. First, we are able
to model field ordering and context around fields
by learning an extractor from annotations of the
text itself. Second, a probabilistic model for word
alignment can exploit dependencies among align-
ments, and is also robust to errors, formatting dif-
ferences, and missing fields in text and the record.
Our word alignment model is a conditional ran-
dom field (CRF) (Lafferty et al, 2001) that gen-
erates alignments between tokens of a text se-
quence and a matching database record. The
structure of the graphical model resembles IBM
Model 1 (Brown et al, 1993) in which each tar-
get (record) word is assigned one or more source
(text) words. The alignment is generated con-
ditioned on both the record and text sequence,
and therefore supports large sets of rich and non-
independent features of the sequence pairs. Our
model is trained without the need for labeled word
alignments by using generalized expectation (GE)
criteria (Mann and McCallum, 2008) that penal-
ize the divergence of specific model expectations
from target expectations. Model parameters are
estimated by minimizing this divergence. To limit
over-fitting we include a L
2
-regularization term in
the objective. The model expectations in GE cri-
teria are taken with respect to a set of alignment
latent variables that are either specific to each se-
quence pair (local) or summarizing the entire data
set (global). This set is constructed by including
all alignment variables a that satisfy a certain bi-
nary feature (e.g., f(a,x
1
,y
1
,x
2
) = 1, for la-
beled record (x
1
,y
1
), and text sequence x
2
). One
example global criterion is that ?an alignment ex-
ists between two orthographically similar
1
words
95% of the time.? Here the criterion has a target
expectation of 95% and is defined over alignments
{a = ?i, j? | x
1
[i] ? x
2
[j],?x
1
,x
2
}. Another cri-
terion for extraction can be ?the word ?EMNLP?
is always aligned with the record label booktitle?.
1
Two words are orthographically similar if they have low
edit distance.
This criterion has a target of 100% and defined
for {a = ?i, j? | y
1
[i] = booktitle ? x
2
[j] =
?EMNLP?,?y
1
,x
2
}. One-to-one correspondence
between words in the sequence pair can be speci-
fied as collection of local expectation constraints.
Since we directly encode prior knowledge of how
alignments behave in our criteria, we obtain suffi-
ciently accurate alignments with little supervision.
We apply our method to the task of citation
extraction. The input to our training algorithm
is a set of matching DBLP
2
-record/citation-text
pairs and global GE criteria
3
of the following two
types: (1) alignment criteria that consider fea-
tures of mapping between record and text words,
and, (2) extraction criteria that consider features
of the schema label assigned to a text word. In
our experiments, the parallel record-text pairs are
collected manually but this process can be auto-
mated using systems that match text sequences
to records in the DB (Michelson and Knoblock,
2005; Michelson and Knoblock, 2008). Such sys-
tems achieve very high accuracy close to 90% F1
on semi-structured domains similar to ours.
4
Our
trained alignment model can be used to directly
align new record-text pairs to create a labeling of
the texts. Empirical results demonstrate a 20.6%
error reduction in token labeling accuracy com-
pared to a strong baseline method that employs a
set of high-precision alignments. Furthermore, we
provide a 63.8% error reduction compared to IBM
Model 4 (Brown et al, 1993). Alignments learned
by our model are used to train a linear-chain CRF
extractor. We obtain an error reduction of 35.1%
over a previous state-of-the-art extraction method
that uses heuristically generated alignments.
2 Record-Text Alignment
Here we provide a brief description of the record-
text alignment task. For the sake of clarity and
space, we describe our approach on a fictional
restaurant address data set. The input to our sys-
tem is a database (DB) consisting of records (pos-
sibly containing errors) and corresponding texts
that are realizations of these DB records. An ex-
ample of a matching record-text pair is shown in
2
http://www.informatik.uni-trier.de/?ley/db/
3
Expectation criteria used in our experiments are listed at
http://www.cs.umass.edu/?kedarb/dbie expts.txt.
4
To obtain more accurate record-text pairs, matching
methods can be tuned for high precision at the expense
of recall. Alternatively, humans can cheaply provide
match/mismatch labels on automatically matched pairs.
132
Record
name address city state phone
restaurant katsu n. hillhurst avenue los angeles 665-1891
Text
katzu, 1972 hillhurst ave., los feliz, california
Table 1: An example of a matching record-text pair for restaurant addresses.
Table 1. This example displays the differences
between the record and text: (1) spelling errors:
katsu ? katzu, (2) word insertions (restaurant),
deletions (1972), substitutions (angeles ? feliz),
(3) abbreviations (avenue ? ave.), (4) missing
fields in text (phone=665-1891), and (5) extra
fields in text (state=california). These discrep-
ancies plus the unknown ordering of fields within
text can be addressed through word alignment.
restaurant [name]       
katsu [name]       
*null* [name]       
n. [address]       
hillhurst [address]       
avenue [address]       
*null* [address]       
los [city]       
angeles [city]       
*null* [city]       
*null* [state]       
665-1891 [phone]       
*null* [phone]       
k
a
t
z
u
,
1
9
7
2
h
i
l
l
h
u
r
s
t
a
v
e
.
,
l
o
s
f
e
l
i
z
,
c
a
l
i
f
o
r
n
i
a
Table 2: Example of a word alignment.  repre-
sents aligned tokens. Vertical text at the bottom
are the text tokens. Horizontal text on the left are
tokens from the DB record with labels shown in
braces.
An example word alignment between the record
and text is shown in Table 2. Tokenization of
record/text string is based on whitespace charac-
ters. We add a special *null* token at the field
boundaries for each label in the schema to model
word insertions. The record sequence is obtained
by concatenating individual fields according to the
DB schema order. As in statistical word align-
ment, we assume the DB record to be our source
and the text to be our target. The induced labeling
of the text is given by (name, address, address,
address, city, city, state) which can be used to
train an information extractor. In the next section,
we present our approach to address this task.
3 Approach
We first define notation that will be used
throughout this section. Let (x
1
,y
1
) be a
database record with token sequence x
1
=
?x
1
[1], x
1
[2], . . . , x
1
[m]? and label sequence y
1
=
?y
1
[1], y
1
[2], . . . , y
1
[m]? with y
1
[?] ? Y where
Y is the database schema. Let x
2
=
?x
2
[1], x
2
[2], . . . , x
2
[n]? be the text sequence. Let
a = ?a
1
, a
2
, . . . , a
n
? be an alignment sequence
of same length as the target text sequence. The
alignment a
i
= j assigns the DB token-label pair
(x
1
[j], y
1
[j]) to the text token x
2
[i].
3.1 Conditional Random Field for Alignment
Our conditional random field (CRF) for alignment
has a graphical model structure that resembles that
of IBM Model 1 (Brown et al, 1993). The CRF
is an undirected graphical model that defines a
probability distribution over alignment sequences
a conditioned on the inputs (x
1
,y
1
,x
2
) as:
p
?
(a|x
1
,y
1
,x
2
) =
exp(
P
n
t=1
?
>
~
f(a
t
,x
1
,y
1
,x
2
,t))
Z
?
(x
1
,y
1
,x
2
)
, (1)
where
~
f(a
t
,x
1
,y
1
,x
2
, t) are feature functions
defined over the alignments and inputs, ? are
the model parameters and Z
?
(x
1
,y
1
,x
2
) =
?
a
?
exp(
?
n
t=1
?
>
~
f(a
?
t
,x
1
,y
1
,x
2
, t)) is the par-
tition function.
The feature vector
~
f(a
t
,x
1
,y
1
,x
2
, t) is the
concatenation of two types of feature functions:
(1) alignment features f
align
(a
t
,x
1
,x
2
, t) defined
on source-target tokens, and, (2) extraction fea-
tures f
extr
(a
t
,y
1
,x
2
, t) defined on source labels
and target text. To obtain the probability of an
alignment in a particular position t we marginal-
ize out the alignments over the rest of the positions
{1, . . . , n}\{t},
p
?
(a
t
|x
1
,y
1
,x
2
) =
?
{a[1...n]}\{a
t
}
p
?
(a|x
1
,y
1
,x
2
)
133
=exp(?
>
~
f(a
t
,x
1
,y
1
,x
2
, t))
exp(
?
a
?
?
>
~
f(a
?
,x
1
,y
1
,x
2
, t))
(2)
Furthermore, the marginal over label y
t
assigned
to the text token x
2
[t] at time step t during align-
ment is given by
p
?
(y
t
|x
2
) =
?
{a
t
|y
1
[a
t
]=y
t
}
p
?
(a
t
|x
1
,y
1
,x
2
),
(3)
where {a
t
| y
1
[a
t
] = y
t
} is the set of alignments
that result in a labeling y
t
for token x
2
[t]. Hence-
forth, we abbreviate p
?
(a
t
|x
1
,y
1
,x
2
) to p
?
(a
t
).
The gradient of p
?
(a
t
) with respect to parameters
? is given by
?p
?
(a
t
)
??
= p
?
(a
t
)
[
~
f(a
t
,x
1
,y
1
,x
2
, t)
?E
p
?
(a)
(
~
f(a,x
1
,y
1
,x
2
, t)
)]
,(4)
where the expectation term in the above equation
sums over all alignments a at position t. We use
the Baum-Welch and Viterbi algorithms to com-
pute marginal probabilities and best alignment se-
quences respectively.
3.2 Expectation Criteria and Parameter
Estimation
LetD = ?(x
(1)
1
,y
(1)
1
,x
(1)
2
), . . . , (x
(K)
1
,y
(K)
1
,x
(K)
2
)?
be a data set of K record-text pairs gathered man-
ually or automatically through matching (Michel-
son and Knoblock, 2005; Michelson and
Knoblock, 2008). A global expectation criterion
is defined on the set of alignment latent variables
A
f
= {a|f(a,x
(i)
1
,y
(i)
1
,x
(i)
2
) = 1,?i = 1 . . .K}
on the entire data set that satisfy a given bi-
nary feature f(a,x
1
,y
1
,x
2
). Similarly a local
expectation criterion is defined only for a
specific instance (x
(i)
1
,y
(i)
1
,x
(i)
2
) with the set
A
f
= {a|f(a,x
(i)
1
,y
(i)
1
,x
(i)
2
) = 1}. For a feature
function f , a target expectation p, and, a weight
w, our criterion minimizes the squared divergence
?(f, p, w,?) = w
(
E
p
?
(A
f
)
|A
f
|
? p
)
2
, (5)
where E
p
?
(A
f
) =
?
a?A
f
p
?
(a) is the sum of
marginal probabilities given by Equation (2) and
|A
f
| is the size of the variable set. The weight
w influences the importance of satisfying a given
expectation criterion. Equation (5) is an instance
of generalized expectation criteria (Mann and Mc-
Callum, 2008) that penalizes the divergence of
a specific model expectation from a given target
value. The gradient of the divergence with respect
to ? is given by,
??(f, p, w,?)
??
= 2w
(
E
p
?
(A
f
)
|A
f
|
? p
)
?
?
?
1
|A
f
|
?
a?A
f
?p
?
(a)
??
? p
?
?
, (6)
where the gradient
?p
?
(a)
??
is given by Eq. (4).
Given expectation criteria C = ?F,P,W? with
a set of binary feature functions F = ?f
1
, . . . , f
l
?,
target expectations P = ?p
1
, . . . , p
l
? and weights
W = ?w
1
, . . . , w
l
?, we maximize the objective
O(?;D, C) = max
?
?
l
?
i=1
?(f
i
, p
i
, w
i
,?)?
||?||
2
2
,
(7)
where ||?||
2
/2 is the regularization term added to
limit over-fitting. Hence the gradient of the objec-
tive is
?O(?;D, C)
??
= ?
l
?
i=1
??(f
i
, p
i
, w
i
,?)
??
??.
We maximize our objective (Equation 7) using the
L-BFGS algorithm. It is sometimes necessary to
restart maximization after resetting the Hessian
calculation in L-BFGS due to non-convexity of
our objective.
5
Also, non-convexity may lead to
a local instead of a global maximum. Our experi-
ments show that local maxima do not adversely af-
fect performance since our accuracy is within 4%
of a model trained with gold-standard labels.
3.3 Linear-chain CRF for Extraction
The alignment CRF (AlignCRF) model described
in Section 3.1 is able to predict labels for a text
sequence given a matching DB record. However,
without corresponding records for texts the model
does not perform well as an extractor because it
has learned to rely on the DB record and alignment
features (Sutton et al, 2006). Hence, we train
a separate linear-chain CRF on the alignment-
induced labels for evaluation as an extractor.
The extraction CRF (ExtrCRF) employs a
fully-connected state machine with a unique state
5
Our L-BFGS optimization procedure checks whether the
approximate Hessian computed from cached gradient vectors
is positive semi-definite. The optimization is restarted if this
check fails.
134
per label y ? Y in the database schema. The CRF
induces a conditional probability distribution over
label sequences y = ?y
1
, . . . , y
n
? and input text
sequences x = ?x
1
, . . . , x
n
? as
p
?
(y|x) =
exp
(
?
n
t=1
?
>
~g(y
t?1
, y
t
,x, t)
)
Z
?
(x)
.
(8)
In comparison to our earlier zero-order AlignCRF
model, our ExtrCRF is a first-order model. All
the feature functions in this model g(y
t?1
, y
t
,x, t)
are a conjunction of the label pair (y
t?1
, y
t
) and
input observational features. Z
?
(x) in the equa-
tion above is the partition function. Inference in
the model is performed using the Viterbi algo-
rithm.
Given expectation criteria C and data set
D = ?(x
(1)
1
,y
(1)
1
,x
(1)
2
), . . . , (x
(K)
1
,y
(K)
1
,x
(K)
2
)?,
we first estimate the parameters ? of AlignCRF
model as described in Section 3.2. Next, for all
text sequences x
(i)
2
, i = 1 . . .K we compute the
marginal probabilities of the labels p
?
(y
t
|x
(i)
2
),?t
using Equation (3). To estimate parameters ? we
minimize the KL-divergence between p
?
(y|x) =
?
n
t=1
p
?
(y
t
|x) and p
?
(y|x) for all sequences x,
KL(p
?
?p
?
) =
?
y
p
?
(y|x) log(
p
?
(y|x)
p
?
(y|x)
)
= H(p
?
(y|x))
?
?
t,y
t?1
,y
t
E
p
?
(y
t?1
,y
t
)
[?
>
~g(y
t?1
, y
t
,x, t)]
+ log(Z
?
(x)). (9)
The gradient of the above equation is given by
?KL
??
=
?
t,y
t?1
,y
t
E
p
?
(y
t?1
,y
t
|x)
[~g(y
t?1
, y
t
,x, t)]
?E
p
?
(y
t?1
,y
t
|x)
[~g(y
t?1
, y
t
,x, t)]. (10)
Both the expectations can be computed using the
Baum-Welch algorithm. The parameters ? are es-
timated for a given data set D and learned param-
eters ? by optimizing the objective
O(?;D,?) = min
?
K
?
i=1
KL(p
?
(y|x
(i)
2
)?p
?
(y|x
(i)
2
)
+???
2
/2.
The objective is minimized using L-BFGS. Since
the objective is convex we are guaranteed to obtain
a global minima.
4 Experiments
In this section, we present details about the appli-
cation of our method to citation extraction task.
Data set. We collected a set of 260 random
records from the DBLP bibliographic database.
The schema of DBLP has the following labels
{author, editor, address, title, booktitle, pages,
year, journal, volume, number, month, url, ee,
cdrom, school, publisher, note, isbn, chapter, se-
ries}. The complexity of our alignment model de-
pends on the number of schema labels and number
of tokens in the DB record. We reduced the num-
ber of schema labels by: (1) mapping the labels
address, booktitle, journal and school to venue, (2)
mapping month and year to date, and (3) dropping
the fields url, ee, cdrom, note, isbn and chapter,
since they never appeared in citation texts. We
also added the other label O for fields in text that
are not represented in the database. Therefore, our
final DB schema is {author, title, date, venue, vol-
ume, number, pages, editor, publisher, series, O}.
For each DBLP record we searched on the web
for matching citation texts using the first author?s
last name and words in the title. Each citation text
found is manually labeled for evaluation purposes.
An example of a matching DBLP record-citation
text pair is shown in Table 3. Our data set
6
con-
tains 522 record-text pairs for 260 DBLP entries.
Features and Constraints. We use a variety of
rich, non-independent features in our models to
optimize system performance. The input features
in our models are of the following two types:
(a) Extraction features in the AlignCRF
model (f(a
t
,y
1
,x
2
, t)) and ExtrCRF model
(g(y
t?1
, y
t
,x, t)) are conjunctions of assigned la-
bels and observational tests on text sequence at
time step t. The following observational tests
are used: (1) regular expressions to detect to-
kens containing all characters (ALLCHAR), all dig-
its (ALLDIGITS) or both digits and characters (AL-
PHADIGITS), (2) number of characters or digits
in the token (NUMCHAR=3, NUMDIGITS=1), (3)
domain-specific patterns for date and pages, (4)
token identity, suffixes, prefixes and character n-
grams, (5) presence of a token in lexicons such as
?last names,? ?publisher names,? ?cities,? (6) lex-
icon features within a window of 10, (7) regular
6
The data set can be found at
http://www.cs.umass.edu/?kedarb/dbie cite data.sgml.
135
DBLP record Citation text
[Chengzhi Li]
author
[Edward W. Knightly]
author
[Coordinated Net-
work Scheduling: A Framework for End-to-End Services.]
title
[69-]
pages
[2000]
date
[ICNP]
venue
[C. Li]
author
[and]
O
[E. Knightly.]
author
[Coordinated network schedul-
ing: A framework for end-to-end services.]
title
[In Proceedings of IEEE
ICNP]
venue
[?00,]
date
[Osaka, Japan,]
venue
[November 2000.]
date
Table 3: Example of matching record-text pair found on the web.
expression features within a window of 10, and (8)
token identity features within a window of 3.
(b) Alignment features in the AlignCRF model
(f(a
t
,x
1
,x
2
, t)) that operate on the aligned
source token x
1
[a
t
] and target token x
2
[t]. Again
the observational tests used for alignment are: (1)
exact token match tests whether the source-target
tokens are string identical, (2) approximate token
match produces a binary feature after binning the
Jaro-Winkler edit distance (Cohen et al, 2003) be-
tween the tokens, (3) substring token match tests
whether one token is a substring of the other,
(4) prefix token match returns true if the pre-
fixes match for lengths {1, 2, 3, 4}, (5) suffix to-
ken match returns true if the prefixes match for
lengths {1, 2, 3, 4}, and (6) exact and approximate
token matches at offsets {?1,?1} and {+1,+1}
around the alignment.
Thus, a conditional model lets us use these ar-
bitrary helpful features that cannot be exploited
tractably in a generative model.
As is common practice (Haghighi and Klein,
2006; Mann and McCallum, 2008), we simulate
user-specified expectation criteria through statis-
tics on manually labeled citation texts. For ex-
traction criteria, we select for each label, the top
N extraction features ordered by mutual informa-
tion (MI) with that label. Also, we aggregate the
alignment features of record tokens whose align-
ment with a target text token results in a correct
label assignment. The top N alignment features
that have maximum MI with this correct label-
ing are selected as alignment criteria. We bin tar-
get expectations of these criteria into 11 bins as
[0.05, 0.1, 0.2, 0.3, . . . , 0.9, 0.95].
7
In our exper-
iments, we set N = 10 and use a fixed weight
w = 10.0 for all expectation criteria (no tuning
of parameters was performed). Table 4 shows a
sample of GE criteria used in our experiments.
8
7
Mann and McCallum (2008) note that GE criteria are ro-
bust to deviation of specified targets from actual expectations.
8
A complete list of expectation criteria is available at
http://www.cs.umass.edu/?kedarb/dbie expts.txt.
Label Feature Prior
alignment PREFIX MATCH4 0.95
author LEXICON LASTNAME 0.6
title WINDOW WORD=Maintenance 0.95
venue WINDOW WORD=Conference 0.95
date YEAR PATTERN 0.95
volume NUMDIGITS=2 0.6
number NUMDIGITS=1 0.6
pages PAGES PATTERN 0.95
editor WORD PREFIX[2]=ed 0.95
publisher WORD=Press 0.95
series WORD=Notes 0.95
O WORD=and 0.7
Table 4: Sample of expectation criteria used by
our model.
Experimental Setup. Our experiments use a 3:1
split of the data for training and testing. We re-
peat the experiment 20 times with different ran-
dom splits of the data. We train the AlignCRF
model using the training data and the automati-
cally created expectation criteria (Section 3.2). We
evaluate our alignment model indirectly in terms
of token labeling accuracy (i.e., percentage of cor-
rectly labeled tokens in test citation data) since we
do not have annotated alignments. The alignment
model is then used to train a ExtrCRF model as
described in Section 3.3. Again, we use token la-
beling accuracy for evaluation. We also measure
F1 performance as the harmonic mean of precision
and recall for each label.
4.1 Alternate approaches
We compare our method against alternate ap-
proaches that either learn alignment or extraction
models from training data.
Alignment approaches. We use GIZA++ (Och
and Ney, 2003) to train generative directed align-
ment models: HMM and IBM Model4 (Brown et
al., 1993) from training record-text pairs. These
models are currently being used in state-of-the-art
machine translation systems. Alignments between
matching DB records and text sequences are then
used for labeling at test time.
136
Extraction approaches. The first alternative
(DB-CRF) trains a linear-chain CRF for extrac-
tion on fields of the database entries only. Each
field of the record is treated as a separate labeled
text sequence. Given an unlabeled text sequence,
it is segmented and labeled using the Viterbi algo-
rithm. This method is an enhanced representative
for (Agichtein and Ganti, 2004) in which a lan-
guage model is trained for each column of the DB.
Another alternative technique constructs par-
tially annotated text data using the matching
records and a labeling function. The labeling func-
tion employs high-precision alignment rules to as-
sign labels to text tokens using labeled record to-
kens. We use exact and approximate token match-
ing rules to create a partially labeled sequence,
skipping tokens that cannot be unambiguously la-
beled. In our experiments, we achieve a pre-
cision of 97% and a recall of 70% using these
rules. Given a partially annotated citation text,
we train a linear-chain CRF by maximizing the
marginal likelihood of the observed labels. This
marginal CRF training method (Bellare and Mc-
Callum, 2007) (M-CRF) was the previous state-
of-the-art on this data set. Additionally, if a match-
ing record is available for a test citation text,
we can partially label tokens and use constrained
Viterbi decoding with labeled positions fixed at
their observed values (M+R-CRF approach).
Our third approach is similar to (Mann and Mc-
Callum, 2008). We create extraction expectation
criteria from labeled text sequences in the training
data and uses these criteria to learn a linear-chain
CRF for extraction (MM08). The performance
achieved by this approach is an upper bound on
methods that: (1) use labeled training records to
create extraction criteria, and, (2) only use extrac-
tion criteria without any alignment criteria.
Finally, we train a supervised linear-chain CRF
(GS-CRF) using the labeled text sequences from
the training set. This represents an upper bound on
the performance that can be achieved on our task.
All the extraction methods have access to the same
features as the ExtrCRF model.
4.2 Results
Table 5 shows the results of various alignment
algorithms applied to the record-text data set.
Alignment methods use the matching record to
perform labeling of a test citation text. The Align-
CRF model outperforms the best generative align-
HMM Model4 AlignCRF
accuracy 78.5% 79.8% 92.7%
author 92.7 94.9 99.0
title 93.3 95.1 97.3
date 69.5 66.3 81.9
venue 73.3 73.1 91.2
volume 50.0 49.2 78.5
number 53.5 66.3 68.0
pages 38.2 44.1 88.2
editor 22.8 21.5 78.1
publisher 29.7 31.0 72.6
series 77.4 77.3 74.6
O 49.6 58.8 85.7
Table 5: Token-labeling accuracy and per-label F1
for different alignment methods. These methods
all use matching DB records at test time. Bold-
faced numbers indicate the best performing model.
HMM, Model4: generative alignment models
from GIZA++, AlignCRF: alignment model from
this paper.
ment model Model4 (IBM Model 4) with an er-
ror reduction of 63.8%. Our conjecture is that
Model4 is getting stuck in sub-optimal local max-
ima during EM training since our training set only
contains hundreds of parallel record-text pairs.
This problem may be alleviated by training on a
large parallel corpus. Additionally, our alignment
model is superior toModel4 since it leverages rich
non-independent features of input sequence pairs.
Table 6 shows the performance of various ex-
traction methods. Except M+R-CRF, all extrac-
tion approaches, do not use any record information
at test time. In comparison to the previous state-
of-the-artM-CRF, theExtrCRFmethod provides
an error reduction of 35.1%. ExtrCRF also pro-
duces an error reduction of 21.7% compared to
M+R-CRF without the use of matching records.
These reductions are significant at level p = 0.005
using the two-tailed t-test. Training only on DB
records is not helpful for extraction as we do not
learn the transition structure
9
and additional con-
text information
10
in text. This explains the low
accuracy of the DB-CRF method. Furthermore,
theMM08 approach (Mann and McCallum, 2008)
achieves low accuracy since it does not use any
9
In general, the editor field follows the title field while the
author field precedes it.
10
The token ?Vol.? generally precedes the volume field in
text. Similarly, tokens ?pp? and ?pages? occur before the
pages field.
137
DB-CRF M-CRF M+R-CRF
?
MM08 ExtrCRF GS-CRF
accuracy 70.4% 88.9% 90.8% 73.5% 92.8% 96.5%
author 72.4 93.7 94.1 85.4 98.5 99.0
title 79.4 96.7 98.4 83.1 94.6 98.1
date 60.1 74.5 76.2 57.8 81.7 93.5
venue 67.3 89.4 91.5 73.2 89.8 95.9
volume 20.3 69.4 74.2 27.7 78.9 90.5
number 30.1 72.8 80.8 47.8 75.1 91.4
pages 41.4 80.9 84.5 49.6 92.1 94.1
editor 7.1 71.1 79.3 75.3 73.3 93.7
publisher 62.1 67.5 77.2 40.2 58.5 82.2
series 65.2 74.9 76.3 65.9 73.8 85.8
O 54.1 7.0 8.3 57.7 91.9 94.5
Table 6: Token-labeling accuracy and per-label F1 for different extraction methods. Except M+R-CRF
?
,
all other approaches do not use any records at test time. Bold-faced numbers indicate the best performing
model. DB-CRF: CRF trained on DB fields. M+R-CRF, M-CRF: CRFs trained from heuristic align-
ments. ExtrCRF: Extraction model presented in this paper. GS-CRF: CRF trained on human annotated
citation texts.
alignment criteria during training. Hence, align-
ment information is crucial for obtaining high ac-
curacy.
Note that we do not observe a decrease in per-
formance of ExtrCRF over AlignCRF although
we are not using the test records during decoding.
This is because: (1) a first-order model in Extr-
CRF improves performance compared to a zero-
order model in AlignCRF and (2) the use of noisy
DB records in the test set for alignment often in-
creases extraction error.
Both our models have a high F1 value for the
other label O because we provide our algorithm
with constraints for the label O. In contrast, since
there is no realization of the O field in the DB
records, both M-CRF and M+R-CRF methods
fail to label such tokens correctly. Our alignment
model trained using expectation criteria achieves
a performance of 92.7% close to gold-standard
training (GS-CRF) (96.5%). Furthermore, Ex-
trCRF obtains an accuracy of 92.8% similar to
AlignCRF without access to DB records due to
better modeling of transition structure and context.
5 Related Work
Recent research in information extraction (IE) has
focused on reducing the labeling effort needed
to train supervised IE systems. For instance,
Grenager et al (2005) perform unsupervised
HMM learning for field segmentation, and bias
the model to prefer self-transitions and transi-
tions on boundary tokens. Unfortunately, such
unsupervised IE approaches do not attain perfor-
mance close to state-of-the-art supervised meth-
ods. Semi-supervised approaches that learn a
model with only a few constraints specifying
prior knowledge have generated much interest.
Haghighi and Klein (2006) assign each label in
the model certain prototypical features and train a
Markov random field for sequence tagging from
these labeled features. In contrast, our method
uses GE criteria (Mann and McCallum, 2008) ?
allowing soft-labeling of features with target ex-
pectation values ? to train conditional models with
complex and non-independent input features. Ad-
ditionally, in comparison to previous methods, an
information extractor trained from our record-text
alignments achieves accuracy of 93% making it
useful for real-world applications. Chang et al
(2007) use beam search for decoding unlabeled
text with soft and hard constraints, and train a
model with top-K decoded label sequences. How-
ever, this model requires large number of labeled
examples (e.g., 300 annotated citations) to boot-
strap itself. Active learning is another popular ap-
proach for reducing annotation effort. Settles and
Craven (2008) provide a comparison of various ac-
tive learning strategies for sequence labeling tasks.
We have shown, however, that in domains where a
database can provide significant supervision, one
can bootstrap accurate extractors with very little
human effort.
138
Another area of research, related to the task
described in our paper, is learning extractors
from database records. These records are also
known as field books and reference sets in liter-
ature (Canisius and Sporleder, 2007; Michelson
and Knoblock, 2008). Both Agichtein and Ganti
(2004) and Canisius and Sporleder (2007) train a
language model for each database column. The
language modeling approach is sensitive to word
re-orderings in text and other variability present
in real-world text (e.g., abbreviation). We allow
for word and field re-orderings through alignments
and model complex transformations through fea-
ture functions. Michelson and Knoblock (2008)
extract information from unstructured texts using a
rule-based approach to align segments of text with
fields in a DB record. Our probabilistic alignment
approach is more robust and uses rich features of
the alignment to obtain high performance.
Recently, Snyder and Barzilay (2007) and Liang
et al (2009) have explored record-text matching in
domains with unstructured texts. Unlike a semi-
structured text sequence obtained by noisily con-
catenating fields from a single record, an unstruc-
tured sequence may contain fields from multiple
records embedded in large amounts of extraneous
text. Hence, the problems of record-text matching
and word alignment are significantly harder in un-
structured domains. Snyder and Barzilay (2007)
achieve a state-of-the-art performance of 80% F1
on matching multiple NFL database records to
sentences in the news summary of a football game.
Their algorithm is trained using supervised ma-
chine learning and learns alignments at the level of
sentences and DB records. In contrast, this paper
presents a semi-supervised learning algorithm for
learning token-level alignments between records
and texts. Liang et al (2009) describe a model that
simultaneously performs record-text matching and
word alignment in unstructured domains. Their
model is trained in an unsupervised fashion using
EM. It may be possible to further improve their
model performance by incorporating prior knowl-
edge in the form of expectation criteria.
Traditionally, generative word alignment mod-
els have been trained on massive parallel cor-
pora (Brown et al, 1993). Recently, discrim-
inative alignment methods trained using anno-
tated alignments on small parallel corpora have
achieved superior performance. Taskar et al
(2005) train a discriminative alignment model
from annotated alignments using a large-margin
method. Labeled alignments are also used by
Blunsom and Cohn (2006) to train a CRF word
alignment model. Our method is trained using a
small number of easily specified expectation cri-
teria thus avoiding tedious and expensive human
labeling of alignments. An alternate method of
learning alignment models is proposed by McCal-
lum et al (2005) in which the training set consists
of sequence pairs classified as match or mismatch.
Alignments are learned to identify the class of a
given sequence pair. However, this method relies
on carefully selected negative examples to pro-
duce high-accuracy alignments. Our method pro-
duces good alignments as we directly encode prior
knowledge about alignments.
6 Conclusion and Future Work
Information extraction is an important first step in
data mining applications. Earlier approaches for
learning reliable extractors have relied on manu-
ally annotated text corpora. This paper presents a
novel approach for training extractors using align-
ments between texts and existing database records.
Our approach achieves performance close to su-
pervised training with very little supervision.
In the future, we plan to surpass supervised ac-
curacy by applying our method to millions of par-
allel record-text pairs collected automatically us-
ing matching. We also want to explore the addi-
tion of Markov dependencies into our alignment
model and other constraints such as monotonicity
and one-to-one correspondence.
Acknowledgments
This work was supported in part by the Center
for Intelligent Information Retrieval and in part by
The Central Intelligence Agency, the National Se-
curity Agency and National Science Foundation
under NSF grant #IIS-0326249. Any opinions,
findings and conclusions or recommendations ex-
pressed in this material are the authors? and do not
necessarily reflect those of the sponsor.
References
Eugene Agichtein and Venkatesh Ganti. 2004. Mining
reference tables for automatic text segmentation. In
KDD.
Eugene Agichtein and Luis Gravano. 2000. Snow-
ball: Extracting relations from large plain-text col-
lections. In ICDL.
139
Kedar Bellare and Andrew McCallum. 2007. Learn-
ing extractors from unlabeled text using relevant
databases. In IIWeb workshop at AAAI 2007.
Phil Blunsom and Trevor Cohn. 2006. Discriminative
word alignment with conditional random fields. In
ACL.
Sergey Brin. 1998. Extracting patterns and relations
from the world wide web. In EDBT Workshop,
pages 172?183.
Peter Brown, Vincent J. Della Pietra, Stephen A. Della
Pietra, and Robert Mercer. 1993. The mathematics
of statistical machine translation: parameter estima-
tion. Computational Linguistics, 19:263?311.
Sander Canisius and Caroline Sporleder. 2007. Boot-
strapping information extraction from field books.
In EMNLP-CoNLL.
M. Chang, L. Ratinov, and D. Roth. 2007. Guiding
semi-supervision with constraint-driven learning. In
ACL, pages 280?287.
William Cohen, Pradeep Ravikumar, and Stephen Fien-
berg. 2003. A comparison of string distance metrics
for name-matching tasks. In IJCAI.
O. Etzioni, M. Cafarella, D. Downey, A.-M. Popescu,
T. Shaked, S. Soderland, D. S. Weld, and A. Yates.
2005. Unsupervised named-entity extraction from
the Web: An experimental study. Artificial Intelli-
gence, 165.
D. Freitag and A. McCallum. 1999. Information ex-
traction with HMM and shrinkage. In AAAI.
T. Grenager, D. Klein, and C. D. Manning. 2005. Un-
supervised learning of field segmentation models for
information extraction. In ACL.
Aria Haghighi and Dan Klein. 2006. Prototype-driven
learning for sequence models. In HLT-NAACL.
John Lafferty, Andrew McCallum, and Fernando C N
Pereira. 2001. Conditional random fields: Prob-
abilistic models for segmenting and labeling se-
quence data. In ICML, page 282.
P. Liang, M. I. Jordan, and D. Klein. 2009. Learning
semantic correspondences with less supervision. In
Association for Computational Linguistics (ACL).
Gideon S. Mann and Andrew McCallum. 2008.
Generalized expectation criteria for semi-supervised
learning of conditional random fields. In Proceed-
ings of ACL?08, pages 870?878.
I. R. Mansuri and S. Sarawagi. 2006. Integrating un-
structured data into relational databases. In ICDE.
Andrew McCallum, Kedar Bellare, and Fernando
Pereira. 2005. A conditional random field for
discriminatively-trained finite-state string edit dis-
tance. In UAI.
MatthewMichelson and Craig A. Knoblock. 2005. Se-
mantic annotation of unstructured and ungrammati-
cal text. In IJCAI, pages 1091?1098.
Matthew Michelson and Craig A. Knoblock. 2008.
Creating relational data from unstructured and un-
grammatical data sources. JAIR, 31:543?590.
Franz Josef Och and Hermann Ney. 2003. A sys-
tematic comparison of various statistical alignment
models. Computational Linguistics, 29.
Fuchun Peng and A. McCallum. 2004. Accurate infor-
mation extraction from research papers using condi-
tional random fields. In HLT-NAACL.
Lawrence R. Rabiner. 1989. A tutorial on hidden
markov models and selected applications in speech
processing. IEEE, 17:257?286.
Sridhar Ramakrishnan and Sarit Mukherjee. 2004.
Taming the unstructured: Creating structured con-
tent from partially labeled schematic text sequences.
In CoopIS/DOA/ODBASE, volume 2, page 909.
Sunita Sarawagi and William W. Cohen. 2004. Ex-
ploiting dictionaries in named entity extraction:
combining semi-markov extraction processes and
data integration methods. In KDD, page 89.
Sunita Sarawagi and William W. Cohen. 2005. Semi-
Markov conditional random fields for information
extraction. In NIPS.
Burr Settles and Mark Craven. 2008. An analysis
of active learning strategies for sequence labeling
tasks. In EMNLP, pages 1070?1079.
K. Seymore, A. McCallum, and R. Rosenfeld. 1999.
Learning hidden markov model structure for infor-
mation extraction. In Proceedings of the AAAI
Workshop on ML for IE.
Benjamin Snyder and Regina Barzilay. 2007.
Database-text alignment via structured multi-label
classification. In IJCAI.
Charles Sutton, Michael Sindelar, and Andrew McCal-
lum. 2006. Reducing weight undertraining in struc-
tured discriminative learning. In HLT-NAACL.
Ben Taskar, Simon Lacoste-Julien, and Dan Klein.
2005. A discriminative matching approach to word
alignment. In HLT-EMNLP, pages 73?80.
140
Proceedings of the NAACL HLT Student Research Workshop and Doctoral Consortium, pages 61?65,
Boulder, Colorado, June 2009. c?2009 Association for Computational Linguistics
Loss-Sensitive Discriminative Training of Machine Transliteration Models
Kedar Bellare
Department of Computer Science
University of Massachusetts Amherst
Amherst, MA 01003, USA
kedarb@cs.umass.edu
Koby Crammer
Department of Computer Science
University of Pennsylvania
Philadelphia, PA 19104, USA
crammer@cis.upenn.edu
Dayne Freitag
SRI International
San Diego, CA 92130, USA
dayne.freitag@sri.com
Abstract
In machine transliteration we transcribe a
name across languages while maintaining its
phonetic information. In this paper, we
present a novel sequence transduction algo-
rithm for the problem of machine transliter-
ation. Our model is discriminatively trained
by the MIRA algorithm, which improves the
traditional Perceptron training in three ways:
(1) It allows us to consider k-best translitera-
tions instead of the best one. (2) It is trained
based on the ranking of these transliterations
according to user-specified loss function (Lev-
enshtein edit distance). (3) It enables the user
to tune a built-in parameter to cope with noisy
non-separable data during training. On an
Arabic-English name transliteration task, our
model achieves a relative error reduction of
2.2% over a perceptron-based model with sim-
ilar features, and an error reduction of 7.2%
over a statistical machine translation model
with more complex features.
1 Introduction and Related Work
Proper names and other technical terms are fre-
quently encountered in natural language text. Both
machine translation (Knight and Graehl, 1997) and
cross-language information retrieval (Jeong et al,
1999; Virga and Khudanpur, 2003; Abdul-Jaleel and
Larkey, 2003) can benefit by explicitly translating
such words from one language into another. This
approach is decidedly better than treating them uni-
formly as out-of-vocabulary tokens. The goal of ma-
chine transliteration is to translate words between
alphabets of different languages such that they are
phonetically equivalent.
Given a source language sequence f =
f1f2 . . . fm from an alphabet F , we want to produce
a target language sequence e = e1e2 . . . en in the al-
phabet E such that it maximizes some score function
s(e, f),
e = argmax
e?
s(e?, f).
Virga and Khudanpur (2003) model this scoring
function using a separate translation and language
model, that is, s(e, f) = Pr(f |e)Pr(e). In con-
strast, Al-Onaizan and Knight (2002) directly model
the translation probability Pr(e|f) using a log-linear
combination of several individually trained phrase
and character-based models. Others have treated
transliteration as a phrase-based transduction (Sherif
and Kondrak, 2007). All these approaches are adap-
tations of statistical models for machine transla-
tion (Brown et al, 1994). In general, the parame-
ters of the scoring function in such approaches are
trained generatively and do not utilize complex fea-
tures of the input sequence pairs.
Recently, there has been interest in applying
discriminatively-trained sequence alignment mod-
els to many real-world problems. McCallum et al
(2005) train a conditional random field model to
discriminate between matching and non-matching
string pairs treating alignments as latent. Learning
accurate alignments in this model requires finding
?close? non-match pairs which can be a challenge.
A similar conditional latent-variable model has been
applied to the task of lemmatization and genera-
tion of morphological forms (Dreyer et al, 2008).
61
Zelenko and Aone (2006) model transliteration as
a structured prediction problem where the letter ei
is predicted using local and global features derived
from e1e2 . . . ei?1 and f . Bergsma and Kondrak
(2007) address cognate identification by training a
SVM classification model using phrase-based fea-
tures obtained from a Levenshtein alignment. Both
these models do not learn alignments that is needed
to obtain high performance on transliteration tasks.
Freitag and Khadivi (2007) describe a discrimina-
tively trained sequence alignment model based on
averaged perceptron, which is closely related to the
method proposed in this paper.
Our approach improves over previous directions
in two ways. First, our system produces better k-best
transliterations than related approaches by training
on multiple hypotheses ranked according to a user-
specified loss function (Levenshtein edit distance).
Hence, our method achieves a 19.2% error reduction
in 5-best performance over a baseline only trained
with 1-best transliterations. This is especially help-
ful when machine transliteration is part of a larger
machine translation or information retrieval pipeline
since additional sentence context can be used to
choose the best among top-K transliterations. Sec-
ond, our training procedure accounts for noise and
non-separability in the data. Therefore, our translit-
eration system would work well in cases where per-
son names were misspelled or in cases in which a
single name had many reasonable translations in the
foreign language.
The training algorithm we propose in this pa-
per is based on the K-best MIRA algorithm which
has been used earlier in structured prediction prob-
lems (McDonald et al, 2005a; McDonald et al,
2005b). Our results demonstrate a significant im-
provement in accuracy of 7.2% over a statistical
machine translation (SMT) system (Zens et al,
2005) and of 2.2% over a perceptron-based edit
model (Freitag and Khadivi, 2007).
2 Sequence Alignment Model
Let e = e1e2 . . . en and f = f1f2 . . . fm be se-
quences from the target alhabet E and source al-
phabet F respectively. Let a = a1a2 . . . al be a se-
quence of alignment operations needed to convert f
into e. Each alignment operation either appends a
letter to the end of the source sequence, the target
sequence or both sequences. Hence, it is a member
of the cross-product ak ? E?{?}?F?{?}\{(?, ?)},
where ? is the null character symbol. Let ak1 =
a1a2 . . . ak denote the sequence of first k alignment
operations. Similarly ek1 and fk1 are prefixes of e and
f of length k.
We define the scoring function between a word
and its transliteration to be the a maximum over all
possible alignment sequences a,
s(e, f) = max
a
s(a, e, f) ,
where the score of a specific alignment a between
two words is given by a linear relation,
s(a, e, f) = w ? ?(a, e, f),
for a parameter vector w and a feature vec-
tor ?(a, e, f). Furthermore, let ?(a, e, f) =?l
k=1 ?(ak, e, i, f , j) be the sum of feature vec-
tors associated with individual alignment operations.
Here i, j are positions in sequences e, f after per-
forming operations ak1 . For fixed sequences e and f
the function s(e, f) can be efficiently computed us-
ing a dynamic programming algorithm,
s(ei1, f j1 ) =
max
?
??
??
s(ei?11 , f j1 ) + w ? ?(?ei, ??, e, i, f , j)
s(ei1, f j?11 ) + w ? ?(??, fj?, e, i, f , j)
s(ei?11 , f j?11 ) + w ? ?(?ei, fj?, e, i, f , j).
(1)
Given a source sequence f computing the best scor-
ing target sequence e = argmaxe? s(e?, f) among
all possible sequences E? requires a beam search
procedure (Freitag and Khadivi, 2007). This pro-
cedure can also be used to produce K-best target
sequences {e?1, e?2, . . . , e?K} such that s(e?1, f) ?
s(e?2, f) ? . . . ? s(e?K , f).
In this paper, we employ the same features as
those used by Freitag and Khadivi (2007). All lo-
cal feature functions ?(ak, e, i, f , j) are conjunc-
tions of the alignment operation ak and forward or
backward-looking character m-grams in sequences
e and f at positions i and j respectively. For
the source sequence f both forward and backward-
looking m-gram features are included. We restrict
the m-gram features in our target sequence e to only
62
be backward-looking since we do not have access to
forward-looking m-grams during beam-search. An
order M model is one that uses m-gram features
where m = 0, 1, . . . M .
Our training algorithm takes as input a data set
D of source-target transliteration pairs and outputs
a parameter vector u. The algorithm pseudo-code
appears in Fig. (1). In the algorithm, the function
L(e?, e) defines a loss incurred by predicting e? in-
stead of e. In most structured prediction problems,
the targets are of equal length and in such cases the
Hamming loss function can be used. However, in
our case the targets may differ in terms of length and
thus we use the Levenshtein edit distance (Leven-
shtein, 1966) with unit costs for insertions, deletions
and substitutions. Since the targets are both in the
same alphabet E this loss function is well-defined.
The user also supplies three paramters: (1) T - the
number of training iterations (2) K - the number
of best target hypotheses used (3) C - a complex-
ity parameter. A low C is useful if the data is non-
separable and noisy.
The final parameter vector u returned by the al-
gorithm is the average of the intermediate parameter
vectors produced during training. We find that av-
eraging helps to improve performance. At test time,
we use the beam search procedure to produce K-
best hypotheses using the parameter vector u.
3 Experimental Results
We apply our model to the real-world Arabic-
English name transliteration task on a data set of
10,084 Arabic names from the LDC. The data set
consists of Arabic names in an ASCII-based alpha-
bet and its English rendering. Table 1 shows a
few examples of Arabic-English pairs in our data
set. We use the same training/development/testing
(8084/1000/1000) set as the one used in a previ-
ous benchmark study (Freitag and Khadivi, 2007).
The development and testing data were obtained
by randomly removing entries from the training
data. The absence of short vowels (e.g. ?a? in
?NB?I, nab?i?), doubled consonants (e.g. ?ww?
in ?FWAL, fawwal?) and other diacritics in Arabic
make the transliteration a hard problem. Therefore,
it is hard to achieve perfect accuracy on this data set.
For training, we set K = 20 best hypotheses and
Input parameters
Training Data D
Complexity parameter C > 0
Number of epochs T
Initialize w0 = 0 (zero vector) ; ? = 0 ; u = 0
Repeat T times:
For Each (e, f) ? D :
1. a = argmaxa?w? ? ?(a?, e, f) (Find best scoring
alignment between e and f using dynamic program-
ming)
2. Generate a list of K-best target hypotheses
{e?1, e?2, . . . , e?K} given the current parameters w? .
Let the corresponding alignments for the targets be
{a?1,a?2, . . . ,a?K}.
3. Set w?+1 to be the solution of :
minw 12 ||w ?w? ||2 + C
?K
k=1 ?k
subject to (for k = 1 . . .K) :
w ? (?(a, e, f)? ?(a?k, e?k, f)) ? L(e, e?k)? ?k
?k ? 0
4. u? u+ w?+1
5. ? ? ? + 1
Output Scoring function s(a, e, f) = u ? ?(a, e, f)
Figure 1: The k-best MIRA algorithm for discriminative
learning of transliterations.
Arabic English
NB?I nab?i
HNBLI hanbali
FRIFI furayfi
MLKIAN malikian
BI;ANT bizant
FWAL fawwal
OALDAWI khalidawi
BUWUI battuti
H;? hazzah
Table 1: Examples of Arabic names in the ASCII alpha-
bet and their English transliterations.
C = 1.0 and run the algorithm for T = 10 epochs.
To evaluate our algorithm, we generate 1-best (or 5-
best) hypotheses using the beam search procedure
and measure accuracy as the percentage of instances
in which the target sequence e is one of the 1-best
(or 5-best) targets. The input features are based on
character m-grams for m = 1, 2, 3. Unlike previ-
63
ous generative transliteration models, no additional
language model feature is used.
We compare our model against a state-of-the-art
statistical machine translation (SMT) system (Zens
et al, 2005) and an averaged perceptron edit
model (PTEM) with identical features (Freitag and
Khadivi, 2007). The SMT system directly models
the posterior probability Pr(e|f) using a log-linear
combination of several sub-models: a character-
based phrase translation model, a character-based
lexicon model, a character penalty and a phrase
penalty. In the PTEM model, the update rule only
considers the best target sequence and modifies the
parameters w?+1 = w? + ?(a, e, f) ? ?(a?, e?, f)
if the score s(e?, f) ? s(e, f).
Model (train+dev) 1-best 5-best
SMT 0.528 0.824
PTEM 0.552 0.803
MIRA 0.562 0.841
Table 2: The 1-best and 5-best accuracy of differ-
ent models on the Arabic-English transliteration task.
At 95% confidence level, MIRA/PTEM outperform the
SMT model in 1-best accuracy and MIRA outperforms
PTEM/SMT in 5-best accuracy.
Table 2 shows the 1-best and 5-best accuracy of
each model trained on the combined train+dev data
set. All the models are evaluated on the same test
set. Both MIRA and PTEM algorithms outperform
the SMT model in terms of 1-best accuracy. The
differences in accuracy are significant at 95% con-
fidence level, using the bootstrapping method for
hypothesis testing. The difference in 1-best per-
formance of MIRA and PTEM is not significant.
At 5-best, the MIRA model outperforms both SMT
and PTEM model. We conjecture that using the
problem-specific Levenshtein loss function helps fil-
ter bad target sequences from the K-best outputs
during training.
In a second experiment we studied the effect
of changing C on the performance of the algo-
rithm. We ran the algorithm with the above set-
tings, except varying the value of the complexity
parameter to one of 7 values in the range C =
0.00001, 0.0001, . . . , 0.1, 1.0, training only using
the train set, and evaluating the resulting model on
Model (train) 1-best 5-best
C = 1.0 0.545? 0.832
C = 0.5 0.548? 0.83
C = 0.2 0.549? 0.834
C = 0.01 0.545 0.852?
C = 0.001 0.518 0.843
C = 0.0001 0.482 0.798
C = 0.00001 0.476 0.798
Table 3: The effect of varying model parameter C on 1,5-
best accuracy on the test set. All the models are trained
with Levenshtein loss and 20-best targets. The super-
script ? indicates the models that achieved the greatest
performance on the dev set for a particular column.
the test set. The results are summarized in Table 3.
The entry marked with a star ? indicates the model
that achieved the best performance on the dev set for
a particular choice of evaluation measure (1-best or
5-best). We find that changing C does have an effect
on model performance. As the value of C decreases,
the performance at lower ranks improves: C = 0.01
is good for 5-best accuracy and C = 0.001 for 20-
best accuracy (not in table). As C is further reduced,
a greater number of iterations are needed to con-
verge. In our model, where the alignments are not
observed but inferred during training, we find that
making small incremental updates makes our algo-
rithm more robust. Indeed, setting C = 0.01 and
training on the train+dev set improves 5-best per-
formance of our model from 0.841 to 0.861. Hence,
the choice of C is important.
4 Conclusions and Future Work
We have shown a significant improvement in accu-
racy over state-of-the-art transliteration models by
taking into consideration the ranking of multiple
hypotheses (top-K) by Levenshtein distance, and
making the training algorithm robust to noisy non-
separable data. Our model does consistently well
at high (K = 1) and low ranks (K = 5), and can
therefore be used in isolation or in a pipelined sys-
tem (e.g. machine translation or cross-language in-
formation retrieval) to achieve better performance.
In a pipeline system, more features of names around
proper nouns and previous mentions of the name can
be used to improve scoring of K-best outputs.
64
In our experiments, the Levenshtein loss function
uses only unit costs for edit operations and is not
specifically tuned towards our application. In fu-
ture work, we may imagine penalizing insertions
and deletions higher than substitutions and other
non-uniform schemes for better transliteration per-
formance. Our K-best framework can also be easily
extended to cases where one name has multiple for-
eign translations that are equally likely.
References
Nasreen Abdul-Jaleel and Leah S. Larkey. 2003. Statis-
tical transliteration for English-Arabic cross language
information retrieval. In CIKM ?03, pages 139?146,
New York, NY, USA. ACM.
Yaser Al-Onaizan and Kevin Knight. 2002. Machine
transliteration of names in arabic text. In Proceed-
ings of the ACL-02 Workshop on Computational Ap-
proaches to Semitic Languages, pages 1?13.
Shane Bergsma and Greg Kondrak. 2007. Alignment-
based discriminative string similarity. In ACL, pages
656?663, June.
Peter F. Brown, Stephen Della Pietra, Vincent J. Della
Pietra, and Robert L. Mercer. 1994. The mathematics
of statistical machine translation: Parameter estima-
tion. Computational Linguistics, 19(2):263?311.
Markus Dreyer, Jason Smith, and Jason Eisner. 2008.
Latent-variable modeling of string transductions with
finite-state methods. In Proceedings of the 2008 Con-
ference on Empirical Methods in Natural Language
Processing, pages 1080?1089, Honolulu, Hawaii, Oc-
tober. Association for Computational Linguistics.
Dayne Freitag and Shahram Khadivi. 2007. A sequence
alignment model based on the averaged perceptron. In
EMNLP-CoNLL, pages 238?247.
K.S. Jeong, S. H. Myaeng, J.S. Lee, and K.-S.
Choi. 1999. Automatic identification and back-
transliteration of foreign words for information re-
trieval. Information Processing and Management,
35:523?540.
Kevin Knight and Jonathan Graehl. 1997. Machine
transliteration. In Philip R. Cohen and Wolfgang
Wahlster, editors, Proceedings of the Thirty-Fifth An-
nual Meeting of the Association for Computational
Linguistics and Eighth Conference of the European
Chapter of the Association for Computational Linguis-
tics, pages 128?135, Somerset, New Jersey. Associa-
tion for Computational Linguistics.
Vladimir I. Levenshtein. 1966. Binary codes capable of
correcting deletions, insertions, and reversals. Soviet
Physics Doklady, 10(8):707?710.
Andrew McCallum, Kedar Bellare, and Fernando Pereira.
2005. A conditional random field for discriminatively-
trained finite-state string edit distance. In UAI.
Ryan McDonald, Koby Crammer, and Fernando Pereira.
2005a. Flexible text segmentation with structured
multilabel classification. In HLT-EMNLP, pages 987?
994, Vancouver, BC, Canada, October. Association for
Computational Linguistics.
Ryan McDonald, Koby Crammer, and Fernando Pereira.
2005b. Online large-margin training of dependency
parsers. In ACL, pages 91?98, Ann Arbor, Michigan,
June.
Tarek Sherif and Grzegorz Kondrak. 2007. Substring-
based transliteration. In ACL, pages 944?951, Prague,
Czech Republic, June. Association for Computational
Linguistics.
Paola Virga and Sanjeev Khudanpur. 2003. Translit-
eration of proper names in cross-lingual information
retrieval. In Proceedings of the ACL 2003 workshop
on Multilingual and Mixed-language Named Entity
Recognition, pages 57?64, Morristown, NJ, USA. As-
sociation for Computational Linguistics.
Dmitry Zelenko and Chinatsu Aone. 2006. Discrimi-
native methods for transliteration. In EMNLP, pages
612?617, Sydney, Australia, July. Association for
Computational Linguistics.
R. Zens, O. Bender, S. Hasan, S. Khadivi, E. Matusov,
J. Xu, Y. Zhang, and H. Ney. 2005. The RWTH
Phrase-based Statistical Machine Translation System.
In Proceedings of the International Workshop on Spo-
ken Language Translation (IWSLT), Pittsburgh, PA,
USA.
65
