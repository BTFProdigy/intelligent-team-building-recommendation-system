Decomposition Kernels for Natural Language Processing
Fabrizio Costa Sauro Menchetti Alessio Ceroni
Dipartimento di Sistemi e Informatica,
Universita` degli Studi di Firenze,
via di S. Marta 3, 50139 Firenze, Italy
{costa,menchett,passerini,aceroni,p-f} AT dsi.unifi.it
Andrea Passerini Paolo Frasconi
Abstract
We propose a simple solution to the se-
quence labeling problem based on an ex-
tension of weighted decomposition ker-
nels. We additionally introduce a multi-
instance kernel approach for representing
lexical word sense information. These
new ideas have been preliminarily tested
on named entity recognition and PP at-
tachment disambiguation. We finally sug-
gest how these techniques could be poten-
tially merged using a declarative formal-
ism that may provide a basis for the inte-
gration of multiple sources of information
when using kernel-based learning in NLP.
1 Introduction
Many tasks related to the analysis of natural lan-
guage are best solved today by machine learning
and other data driven approaches. In particular,
several subproblems related to information extrac-
tion can be formulated in the supervised learning
framework, where statistical learning has rapidly
become one of the preferred methods of choice.
A common characteristic of many NLP problems
is the relational and structured nature of the rep-
resentations that describe data and that are inter-
nally used by various algorithms. Hence, in or-
der to develop effective learning algorithms, it is
necessary to cope with the inherent structure that
characterize linguistic entities. Kernel methods
(see e.g. Shawe-Taylor and Cristianini, 2004) are
well suited to handle learning tasks in structured
domains as the statistical side of a learning algo-
rithm can be naturally decoupled from any rep-
resentational details that are handled by the ker-
nel function. As a matter of facts, kernel-based
statistical learning has gained substantial impor-
tance in the NLP field. Applications are numerous
and diverse and include for example refinement
of statistical parsers (Collins and Duffy, 2002),
tagging named entities (Cumby and Roth, 2003;
Tsochantaridis et al, 2004), syntactic chunking
(Daume? III and Marcu, 2005), extraction of rela-
tions between entities (Zelenko et al, 2003; Cu-
lotta and Sorensen, 2004), semantic role label-
ing (Moschitti, 2004). The literature is rich with
examples of kernels on discrete data structures
such as sequences (Lodhi et al, 2002; Leslie et
al., 2002; Cortes et al, 2004), trees (Collins and
Duffy, 2002; Kashima and Koyanagi, 2002), and
annotated graphs (Ga?rtner, 2003; Smola and Kon-
dor, 2003; Kashima et al, 2003; Horva?th et al,
2004). Kernels of this kind can be almost in-
variably described as special cases of convolu-
tion and other decomposition kernels (Haussler,
1999). Thanks to its generality, decomposition
is an attractive and flexible approach for defining
the similarity between structured objects starting
from the similarity between smaller parts. How-
ever, excessively large feature spaces may result
from the combinatorial growth of the number of
distinct subparts with their size. When too many
dimensions in the feature space are irrelevant, the
Gram matrix will be nearly diagonal (Scho?lkopf
et al, 2002), adversely affecting generalization in
spite of using large margin classifiers (Ben-David
et al, 2002). Possible cures include extensive use
of prior knowledge to guide the choice of rele-
vant parts (Cumby and Roth, 2003; Frasconi et al,
2004), the use of feature selection (Suzuki et al,
2004), and soft matches (Saunders et al, 2002). In
(Menchetti et al, 2005) we have shown that better
generalization can indeed be achieved by avoid-
ing hard comparisons between large parts. In a
17
weighted decomposition kernel (WDK) only small
parts are matched, whereas the importance of the
match is determined by comparing the sufficient
statistics of elementary probabilistic models fit-
ted on larger contextual substructures. Here we
introduce a position-dependent version of WDK
that can solve sequence labeling problems without
searching the output space, as required by other re-
cently proposed kernel-based solutions (Tsochan-
taridis et al, 2004; Daume? III and Marcu, 2005).
The paper is organized as follows. In the next
two sections we briefly review decomposition ker-
nels and its weighted variant. In Section 4 we in-
troduce a version of WDK for solving supervised
sequence labeling tasks and report a preliminary
evaluation on a named entity recognition problem.
In Section 5 we suggest a novel multi-instance ap-
proach for representing WordNet information and
present an application to the PP attachment am-
biguity resolution problem. In Section 6 we dis-
cuss how these ideas could be merged using a
declarative formalism in order to integrate mul-
tiple sources of information when using kernel-
based learning in NLP.
2 Decomposition Kernels
An R-decomposition structure (Haussler, 1999;
Shawe-Taylor and Cristianini, 2004) on a set X is
a triple R = ? ~X , R,~k? where ~X = (X1, . . . ,XD)
is a D?tuple of non?empty subsets of X , R is
a finite relation on X1 ? ? ? ? ? XD ? X , and
~k = (k1, . . . , kD) is a D?tuple of positive defi-
nite kernel functions kd : Xd ? Xd 7? IR. R(~x, x)
is true iff ~x is a tuple of ?parts? for x ? i.e. ~x
is a decomposition of x. Note that this defini-
tion of ?parts? is very general and does not re-
quire the parthood relation to obey any specific
mereological axioms, such as those that will be
introduced in Section 6. For any x ? X , let
R?1(x) = {(x1, . . . , xD) ? ~X : R(~x, x)} de-
note the multiset of all possible decompositions1
of x. A decomposition kernel is then defined as
the multiset kernel between the decompositions:
KR(x, x?) =
?
~x ? R?1(x)
~x? ? R?1(x?)
D
?
d=1
?d(xd, x?d) (1)
1Decomposition examples in the string domain include
taking all the contiguous fixed-length substrings or all the
possible ways of dividing a string into two contiguous sub-
strings.
where, as an alternative way of combining the ker-
nels, we can use the product instead of a summa-
tion: intuitively this increases the feature space di-
mension and makes the similarity measure more
selective. Since decomposition kernels form a
rather vast class, the relation R needs to be care-
fully tuned to different applications in order to
characterize a suitable kernel. As discussed in
the Introduction, however, taking all possible sub-
parts into account may lead to poor predictivity be-
cause of the combinatorial explosion of the feature
space.
3 Weighted Decomposition Kernels
A weighted decomposition kernel (WDK) is char-
acterized by the following decomposition struc-
ture:
R = ? ~X , R, (?, ?1, . . . , ?D)?
where ~X = (S,Z1, . . . , ZD), R(s, z1, . . . , zD, x)
is true iff s ? S is a subpart of x called the selector
and ~z = (z1, . . . , zD) ? Z1?? ? ??ZD is a tuple of
subparts of x called the contexts of s in x. Precise
definitions of s and ~z are domain-dependent. For
example in (Menchetti et al, 2005) we present two
formulations, one for comparing whole sequences
(where both the selector and the context are subse-
quences), and one for comparing attributed graphs
(where the selector is a single vertex and the con-
text is the subgraph reachable from the selector
within a short path). The definition is completed
by introducing a kernel on selectors and a kernel
on contexts. The former can be chosen to be the
exact matching kernel, ?, on S ? S, defined as
?(s, s?) = 1 if s = s? and ?(s, s?) = 0 otherwise.
The latter, ?d, is a kernel on Zd ? Zd and pro-
vides a soft similarity measure based on attribute
frequencies. Several options are available for con-
text kernels, including the discrete version of prob-
ability product kernels (PPK) (Jebara et al, 2004)
and histogram intersection kernels (HIK) (Odone
et al, 2005). Assuming there are n categorical
attributes, each taking on mi distinct values, the
context kernel can be defined as:
?d(z, z?) =
n
?
i=1
ki(z, z?) (2)
where ki is a kernel on the i-th attribute. Denote by
pi(j) the observed frequency of value j in z. Then
18
ki can be defined as a HIK or a PPK respectively:
ki(z, z?) =
mi
?
j=1
min{pi(j), p?i(j)} (3)
ki(z, z?) =
mi
?
j=1
?
pi(j) ? p?i(j) (4)
This setting results in the following general form
of the kernel:
K(x, x?) =
?
(s, ~z) ? R?1(x)
(s?, ~z?) ? R?1(x?)
?(s, s?)
D
?
d=1
?d(zd, z?d) (5)
where we can replace the summation of kernels
with
?D
d=1 1 + ?d(zd, z?d).
Compared to kernels that simply count the num-
ber of substructures, the above function weights
different matches between selectors according to
contextual information. The kernel can be after-
wards normalized in [?1, 1] to prevent similarity
to be boosted by the mere size of the structures
being compared.
4 WDK for sequence labeling and
applications to NER
In a sequence labeling task we want to map input
sequences to output sequences, or, more precisely,
we want to map each element of an input sequence
that takes label from a source alphabet to an ele-
ment with label in a destination alphabet.
Here we cast the sequence labeling task into
position specific classification, where different se-
quence positions give independent examples. This
is different from previous approaches in the lit-
erature where the sequence labeling problem is
solved by searching in the output space (Tsochan-
taridis et al, 2004; Daume? III and Marcu, 2005).
Although the method lacks the potential for col-
lectively labeling all positions simultaneously, it
results in a much more efficient algorithm.
In the remainder of the section we introduce
a specialized version of the weighted decompo-
sition kernel suitable for a sequence transduction
task originating in the natural language process-
ing domain: the named entity recognition (NER)
problem, where we map sentences to sequences of
a reduced number of named entities (see Sec.4.1).
More formally, given a finite dictionary ? of
words and an input sentence x ? ??, our input ob-
jects are pairs of sentences and indices r = (x, t)
Figure 1: Sentence decomposition.
where r ? ?? ? IN. Given a sentence x, two in-
tegers b ? 1 and b ? e ? |x|, let x[b] denote the
word at position b and x[b..e] the sub-sequence of
x spanning positions from b to e. Finally we will
denote by ?(x[b]) a word attribute such as a mor-
phological trait (is a number or has capital initial,
see 4.1) for the word in sentence x at position b.
We introduce two versions of WDK: one with
four context types (D = 4) and one with in-
creased contextual information (D = 6) (see
Eq. 5). The relation R depends on two integers
t and i ? {1, . . . , |x|}, where t indicates the po-
sition of the word we want to classify and i the
position of a generic word in the sentence. The
relation for the first kernel version is defined as:
R = {(s, zLL, zLR, zRL, zRR, r)} such that the
selector s = x[i] is the word at position i, the zLL
(LeftLeft) part is a sequence defined as x[1..i] if
i < t or the null sequence ? otherwise and the
zLR (LeftRight) part is the sequence x[i + 1..t] if
i < t or ? otherwise. Informally, zLL is the initial
portion of the sentence up to word of position i,
and zLR is the portion of the sentence from word
at position i + 1 up to t (see Fig. 1). Note that
when we are dealing with a word that lies to the
left of the target word t, its zRL and zRR parts are
empty. Symmetrical definitions hold for zRL and
zRR when i > t. We define the weighted decom-
position kernel for sequences as
K(r, r?)=
|x|
?
t=1
|x?|
?
t?=1
??(s, s?)
?
d?{LL,LR,RL,RR}
?(zd, z?d) (6)
where ??(s, s?) = 1 if ?(s) = ?(s?) and 0 oth-
erwise (that is ?? checks whether the two selector
words have the same morphological trait) and ?
is Eq. 2 with only one attribute which then boils
down to Eq. 3 or Eq. 4, that is a kernel over the his-
togram for word occurrences over a specific part.
Intuitively, when applied to word sequences,
this kernel considers separately words to the left
19
of the entry we want to transduce and those to
its right. The kernel computes the similarity for
each sub-sequence by matching the corresponding
bag of enriched words: each word is matched only
with words that have the same trait as extracted by
? and the match is then weighted proportionally to
the frequency count of identical words preceding
and following it.
The kernel version with D=6 adds two parts
called zLO (LeftOther) and zRO (RightOther) de-
fined as x[t+1..|r|] and x[1..t] respectively; these
represent the remaining sequence parts so that x =
zLL ? zLR ? zLO and x = zRL ? zRR ? zRO.
Note that the WDK transforms the sentence
in a bag of enriched words computed in a pre-
processing phase thus achieving a significant re-
duction in computational complexity (compared to
the recursive procedure in (Lodhi et al, 2002)).
4.1 Named Entity Recognition Experimental
Results
Named entities are phrases that contain the names
of persons, organizations, locations, times and
quantities. For example in the following sentence:
[PER Wolff ] , currently a journalist in [LOC
Argentina ] , played with [PER Del Bosque ] in the
final years of the seventies in [ORG Real Madrid].
we are interested in predicting that Wolff and Del
Bosque are people?s names, that Argentina is a
name of a location and that Real Madrid is a name
of an organization.
The chosen dataset is provided by the shared
task of CoNLL?2002 (Saunders et al, 2002)
which concerns language?independent named en-
tity recognition. There are four types of phrases:
person names (PER), organizations (ORG), loca-
tions (LOC) and miscellaneous names (MISC),
combined with two tags, B to denote the first item
of a phrase and I for any non?initial word; all other
phrases are classified as (OTHER). Of the two
available languages (Spanish and Dutch), we run
experiments only on the Spanish dataset which is a
collection of news wire articles made available by
the Spanish EFE News Agency. We select a sub-
set of 300 sentences for training and we evaluate
the performance on test set. For each category, we
evaluate the F?=1 measure of 4 versions of WDK:
word histograms are matched using HIK (Eq. 3)
and the kernels on various parts (zLL, zLR,etc) are
combined with a summation SUMHIK or product
PROHIK; alternatively the histograms are com-
Table 1: NER experiment D=4
CLASS SUMHIS PROHIS SUMPRO PROPRO
B-LOC 74.33 68.68 72.12 66.47
I-LOC 58.18 52.76 59.24 52.62
B-MISC 52.77 43.31 46.86 39.00
I-MISC 79.98 80.15 77.85 79.65
B-ORG 69.00 66.87 68.42 67.52
I-ORG 76.25 75.30 75.12 74.76
B-PER 60.11 56.60 59.33 54.80
I-PER 65.71 63.39 65.67 60.98
MICRO F?=1 69.28 66.33 68.03 65.30
Table 2: NER experiment with D=6
CLASS SUMHIS PROHIS SUMPRO PROPRO
B-LOC 74.81 73.30 73.65 73.69
I-LOC 57.28 58.87 57.76 59.44
B-MISC 56.54 64.11 57.72 62.11
I-MISC 78.74 84.23 79.27 83.04
B-ORG 70.80 73.02 70.48 73.10
I-ORG 76.17 78.70 74.26 77.51
B-PER 66.25 66.84 66.04 67.46
I-PER 68.06 71.81 69.55 69.55
MICRO F?=1 70.69 72.90 70.32 72.38
bined with a PPK (Eq. 4) obtaining SUMPPK,
PROPPK.
The word attribute considered for the selector
is a word morphologic trait that classifies a word
in one of five possible categories: normal word,
number, all capital letters, only capital initial and
contains non alphabetic characters, while the con-
text histograms are computed counting the exact
word frequencies.
Results reported in Tab. 1 and Tab. 2 show that
performance is mildly affected by the different
choices on how to combine information on the var-
ious contexts, though it seems clear that increasing
contextual information has a positive influence.
Note that interesting preliminary results can be
obtained even without the use of any refined lan-
guage knowledge, such as part of speech tagging
or shallow/deep parsing.
5 Kernels for word semantic ambiguity
Parsing a natural language sentence often involves
the choice between different syntax structures that
are equally admissible in the given grammar. One
of the most studied ambiguity arise when deciding
between attaching a prepositional phrase either to
the noun phrase or to the verb phrase. An example
could be:
1. eat salad with forks (attach to verb)
2. eat salad with tomatoes (attach to noun)
20
The resolution of such ambiguities is usually per-
formed by the human reader using its past expe-
riences and the knowledge of the words mean-
ing. Machine learning can simulate human experi-
ence by using corpora of disambiguated phrases to
compute a decision on new cases. However, given
the number of different words that are currently
used in texts, there would never be a sufficient
dataset from which to learn. Adding semantic in-
formation on the possible word meanings would
permit the learning of rules that apply to entire cat-
egories and can be generalized to all the member
words.
5.1 Adding Semantic with WordNet
WordNet (Fellbaum, 1998) is an electronic lexi-
cal database of English words built and annotated
by linguistic researchers. WordNet is an exten-
sive and reliable source of semantic information
that can be used to enrich the representation of a
word. Each word is represented in the database by
a group of synonym sets (synset), with each synset
corresponding to an individual linguistic concept.
All the synsets contained inWordNet are linked by
relations of various types. An important relation
connects a synset to its hypernyms, that are its im-
mediately broader concepts. The hypernym (and
its opposite hyponym) relation defines a semantic
hierarchy of synsets that can be represented as a
directed acyclic graph. The different lexical cat-
egories (verbs, nouns, adjectives and adverbs) are
contained in distinct hierarchies and each one is
rooted by many synsets.
Several metrics have been devised to compute
a similarity score between two words using Word-
Net. In the following we resort to a multiset ver-
sion of the proximity measure used in (Siolas and
d?Alche Buc, 2000), though more refined alterna-
tives are also possible (for example using the con-
ceptual density as in (Basili et al, 2005)). Given
the acyclic nature of the semantic hierarchies, each
synset can be represented by a group of paths that
follows the hypernym relations and finish in one of
the top level concepts. Two paths can then be com-
pared by counting how many steps from the roots
they have in common. This number must then be
normalized dividing by the square root of the prod-
uct between the path lengths. In this way one can
accounts for the unbalancing that arise from dif-
ferent parts of the hierarchies being differently de-
tailed. Given two paths pi and pi?, let l and l? be
their lengths and n be the size of their common
part, the resulting kernel is:
k(pi, pi?) = n?
l ? l?
(7)
The demonstration that k is positive definite arise
from the fact that n can be computed as a posi-
tive kernel k? by summing the exact match ker-
nels between the corresponding positions in pi and
pi? seen as sequences of synset identifiers. The
lengths l and l? can then be evaluated as k?(pi, pi)
and k?(pi?, pi?) and k is the resulting normalized
version of k?.
The kernel between two synsets ? and ?? can
then be computed by the multi-set kernel (Ga?rtner
et al, 2002a) between their corresponding paths.
Synsets are organized into forty-five lexicogra-
pher files based on syntactic category and logical
groupings. Additional information can be derived
by comparing the identifiers ? and ?? of these file
associated to ? and ??. The resulting synset kernel
is:
??(?, ??) = ?(?, ??) +
?
pi??
?
pi????
k(pi, pi?) (8)
where ? is the set of paths originating from ? and
the exact match kernel ?(?, ??) is 1 if ? ? ?? and
0 otherwise. Finally, the kernel ?? between two
words is itself a multi-set kernel between the cor-
responding sets of synsets:
??(?, ??) =
?
???
?
?????
??(?, ??) (9)
where ? are the synsets associated to the word ?.
5.2 PP Attachment Experimental Results
The experiments have been performed using the
Wall-Street Journal dataset described in (Ratna-
parkhi et al, 1994). This dataset contains 20, 800
training examples and 3, 097 testing examples.
Each phrase x in the dataset is reduced to a verb
xv, its object noun xn1 and prepositional phrase
formed by a preposition xp and a noun xn2 . The
target is either V or N whether the phrase is at-
tached to the verb or the noun. Data have been pre-
processed by assigning to all the words their cor-
responding synsets. Additional meanings derived
from specific synsets have been attached to the
words as described in (Stetina and Nagao, 1997).
The kernel between two phrases x and x? is then
computed by combining the kernels between sin-
gle words using either the sum or the product.
21
Method Acc Pre Rec
S 84.6% ? 0.65% 90.8% 82.2%
P 84.8% ? 0.65% 92.2% 81.0%
SW 85.4% ? 0.64% 90.9% 83.6%
SWL 85.3% ? 0.64% 91.1% 83.2%
PW 85.9% ? 0.63% 92.2% 83.1%
PWL 86.2% ? 0.62% 92.1% 83.7%
Table 3: Summary of the experimental results on
the PP attachment problem for various kernel pa-
rameters.
Results of the experiments are reported in Tab. 3
for various kernels parameters: S or P denote if
the sum or product of the kernels between words
are used, W denotes that WordNet semantic infor-
mation is added (otherwise the kernel between two
words is just the exact match kernel) and L denotes
that lexicographer files identifiers are used. An ad-
ditional gaussian kernel is used on top ofKpp. The
C and ? parameters are selected using an inde-
pendent validation set. For each setting, accuracy,
precision and recall values on the test data are re-
ported, along with the standard deviation of the es-
timated binomial distribution of errors. The results
demonstrate that semantic information can help in
resolving PP ambiguities. A small difference ex-
ists between taking the product instead of the sum
of word kernels, and an additional increase in the
amount of information available to the learner is
given by the use of lexicographer files identifiers.
6 Using declarative knowledge for NLP
kernel integration
Data objects in NLP often require complex repre-
sentations; suffice it to say that a sentence is nat-
urally represented as a variable length sequence
of word tokens and that shallow/deep parsers are
reliably used to enrich these representations with
links between words to form parse trees. Finally,
additional complexity can be introduced by in-
cluding semantic information. Various facets of
this richness of representations have been exten-
sively investigated, including the expressiveness
of various grammar formalisms, the exploitation
of lexical representation (e.g. verb subcategoriza-
tion, semantic tagging), and the use of machine
readable sources of generic or specialized knowl-
edge (dictionaries, thesauri, domain specific on-
tologies). All these efforts are capable to address
language specific sub-problems but their integra-
tion into a coherent framework is a difficult feat.
Recent ideas for constructing kernel functions
starting from logical representations may offer an
appealing solution. Ga?rtner et al (2002) have pro-
posed a framework for defining kernels on higher-
order logic individuals. Cumby and Roth (2003)
used description logics to represent knowledge
jointly with propositionalization for defining a ker-
nel function. Frasconi et al (2004) proposed
kernels for handling supervised learning in a set-
ting similar to that of inductive logic programming
where data is represented as a collection of facts
and background knowledge by a declarative pro-
gram in first-order logic. In this section, we briefly
review this approach and suggest a possible way of
exploiting it for the integration of different sources
of knowledge that may be available in NLP.
6.1 Declarative Kernels
The definition of decomposition kernels as re-
ported in Section 2 is very general and covers al-
most all kernels for discrete structured data de-
veloped in the literature so far. Different kernels
are designed by defining the relation decompos-
ing an example into its ?parts?, and specifying
kernels for individual parts. In (Frasconi et al,
2004) we proposed a systematic approach to such
design, consisting in formally defining a relation
by the set of axioms it must satisfy. We relied
on mereotopology (Varzi, 1996) (i.e. the theory
of parts and places) in order to give a formal def-
inition of the intuitive concepts of parthood and
connection. The formalization of mereotopolog-
ical relations allows to automatically deduce in-
stances of such relations on the data, by exploit-
ing the background knowledge which is typically
available on structured domains. In (Frasconi et
al., 2004) we introduced declarative kernels (DK)
as a set of kernels working on mereotopological
relations, such as that of proper parthood (?P) or
more complex relations based on connected parts.
A typed syntax for objects was introduced in order
to provide additional flexibility in defining kernels
on instances of the given relation. A basic kernel
on parts KP was defined as follows:
KP (x, x?)=
?
s?P x
s??P x?
?T (s, s?)
(
?(s, s?)+KP (s, s?)
)
(10)
where ?T matches objects of the same type and ?
is a kernel over object attributes.
22
Declarative kernels were tested in (Frasconi et
al., 2004) on a number of domains with promising
results, including a biomedical information extrac-
tion task (Goadrich et al, 2004) aimed at detecting
protein-localization relationships within Medline
abstracts. A DK on parts as the one defined in
Eq. (10) outperformed state-of-the-art ILP-based
systems Aleph and Gleaner (Goadrich et al, 2004)
in such information extraction task, and required
about three orders of magnitude less training time.
6.2 Weighted Decomposition Declarative
Kernels
Declarative kernels can be combined with WDK
in a rather straightforward way, thus taking the ad-
vantages of both methods. A simple approach is
that of using proper parthood in place of selec-
tors, and topology to recover the context of each
proper part. A weighted decomposition declara-
tive kernel (WD2K) of this kind would be defined
as in Eq. (10) simply adding to the attribute ker-
nel ? a context kernel that compares the surround-
ing of a pair of objects?as defined by the topol-
ogy relation?using some aggregate kernel such as
PPK or HIK (see Section 3). Note that such defini-
tion extends WDK by adding recursion to the con-
cept of comparison by selector, and DK by adding
contexts to the kernel between parts. Multiple con-
texts can be easily introduced by employing differ-
ent notions of topology, provided they are consis-
tent with mereotopological axioms. As an exam-
ple, if objects are words in a textual document, we
can define l-connection as the relation for which
two words are l-connected if there are consequen-
tial within the text with at most l words in be-
tween, and obtain growingly large contexts by in-
creasing l. Moreover, an extended representation
of words, as the one employing WordNet semantic
information, could be easily plugged in by includ-
ing a kernel for synsets such as that in Section 5.1
into the kernel ? on word attributes. Additional
relations could be easily formalized in order to ex-
ploit specific linguisitc knowledge: a causal rela-
tion would allow to distinguish between preceding
and following context so to take into consideration
word order; an underlap relation, associating two
objects being parts of the same super-object (i.e.
pre-terminals dominated by the same non-terminal
node), would be able to express commanding no-
tions.
The promising results obtained with declarative
kernels (where only very simple lexical informa-
tion was used) together with the declarative ease
to integrate arbitrary kernels on specific parts are
all encouraging signs that boost our confidence in
this line of research.
References
Roberto Basili, Marco Cammisa, and Alessandro Mos-
chitti. 2005. Effective use of wordnet seman-
tics via kernel-based learning. In 9th Conference
on Computational Natural Language Learning, Ann
Arbor(MI), USA.
S. Ben-David, N. Eiron, and H. U. Simon. 2002. Lim-
itations of learning via embeddings in euclidean half
spaces. J. of Mach. Learning Research, 3:441?461.
M. Collins and N. Duffy. 2002. New ranking algo-
rithms for parsing and tagging: Kernels over dis-
crete structures, and the voted perceptron. In Pro-
ceedings of the Fortieth Annual Meeting on Associa-
tion for Computational Linguistics, pages 263?270,
Philadelphia, PA, USA.
C. Cortes, P. Haffner, and M. Mohri. 2004. Ratio-
nal kernels: Theory and algorithms. J. of Machine
Learning Research, 5:1035?1062.
A. Culotta and J. Sorensen. 2004. Dependency tree
kernels for relation extraction. In Proc. of the 42nd
Annual Meeting of the Association for Computa-
tional Linguistics, pages 423?429.
C. M. Cumby and D. Roth. 2003. On kernel meth-
ods for relational learning. In Proc. Int. Conference
on Machine Learning (ICML?03), pages 107?114,
Washington, DC, USA.
H. Daume? III and D. Marcu. 2005. Learning as search
optimization: Approximate large margin methods
for structured prediction. In International Confer-
ence on Machine Learning (ICML), pages 169?176,
Bonn, Germany.
C. Fellbaum, editor. 1998. WordNet: An Electronic
Lexical Database. The MIT Press.
P. Frasconi, S. Muggleton, H. Lodhi, and A. Passerini.
2004. Declarative kernels. Technical Report RT
2/2004, Universita` di Firenze.
T. Ga?rtner, P. A. Flach, A. Kowalczyk, and A. J. Smola.
2002a. Multi-instance kernels. In C. Sammut and
A. Hoffmann, editors, Proceedings of the 19th In-
ternational Conference on Machine Learning, pages
179?186. Morgan Kaufmann.
T. Ga?rtner, J.W. Lloyd, and P.A. Flach. 2002b. Ker-
nels for structured data. In S. Matwin and C. Sam-
mut, editors, Proceedings of the 12th International
Conference on Inductive Logic Programming, vol-
ume 2583 of Lecture Notes in Artificial Intelligence,
pages 66?83. Springer-Verlag.
23
T. Ga?rtner. 2003. A survey of kernels for structured
data. SIGKDD Explorations Newsletter, 5(1):49?
58.
M. Goadrich, L. Oliphant, and J. W. Shavlik. 2004.
Learning ensembles of first-order clauses for recall-
precision curves: A case study in biomedical infor-
mation extraction. In Proc. 14th Int. Conf. on Induc-
tive Logic Programming, ILP ?04, pages 98?115.
D. Haussler. 1999. Convolution kernels on discrete
structures. Technical Report UCSC-CRL-99-10,
University of California, Santa Cruz.
T. Horva?th, T. Ga?rtner, and S. Wrobel. 2004. Cyclic
pattern kernels for predictive graph mining. In Pro-
ceedings of the Tenth ACM SIGKDD International
Conference on Knowledge Discovery and Data Min-
ing, pages 158?167. ACM Press.
T. Jebara, R. Kondor, and A. Howard. 2004. Proba-
bility product kernels. J. Mach. Learn. Res., 5:819?
844.
H. Kashima and T. Koyanagi. 2002. Kernels for
Semi?Structured Data. In Proceedings of the Nine-
teenth International Conference on Machine Learn-
ing, pages 291?298.
H. Kashima, K. Tsuda, and A. Inokuchi. 2003.
Marginalized kernels between labeled graphs. In
Proceedings of the Twentieth International Confer-
ence on Machine Learning, pages 321?328, Wash-
ington, DC, USA.
C. S. Leslie, E. Eskin, and W. S. Noble. 2002. The
spectrum kernel: A string kernel for SVM protein
classification. In Pacific Symposium on Biocomput-
ing, pages 566?575.
H. Lodhi, C. Saunders, J. Shawe-Taylor, N. Cristian-
ini, and C. Watkins. 2002. Text classification us-
ing string kernels. Journal of Machine Learning Re-
search, 2:419?444.
S. Menchetti, F. Costa, and P. Frasconi. 2005.
Weighted decomposition kernels. In Proceedings of
the Twenty-second International Conference on Ma-
chine Learning, pages 585?592, Bonn, Germany.
Alessandro Moschitti. 2004. A study on convolution
kernels for shallow semantic parsing. In 42-th Con-
ference on Association for Computational Linguis-
tic, Barcelona, Spain.
F. Odone, A. Barla, and A. Verri. 2005. Building ker-
nels from binary strings for image matching. IEEE
Transactions on Image Processing, 14(2):169?180.
A Ratnaparkhi, J. Reynar, and S. Roukos. 1994. A
maximum entropy model for prepositional phrase
attachment. In Proceedings of the ARPA Human
Language Technology Workshop, pages 250?255,
Plainsboro, NJ.
C. Saunders, H. Tschach, and J. Shawe-Taylor. 2002.
Syllables and other string kernel extensions. In Pro-
ceedings of the Nineteenth International Conference
on Machine Learning, pages 530?537.
B. Scho?lkopf, J. Weston, E. Eskin, C. S. Leslie, and
W. S. Noble. 2002. A kernel approach for learn-
ing from almost orthogonal patterns. In Proc. of
ECML?02, pages 511?528.
J. Shawe-Taylor and N. Cristianini. 2004. Kernel
Methods for Pattern Analysis. Cambridge Univer-
sity Press.
G. Siolas and F. d?Alche Buc. 2000. Support vector
machines based on a semantic kernel for text cate-
gorization. In Proceedings of the IEEE-INNS-ENNS
International Joint Conference on Neural Networks,
volume 5, pages 205 ? 209.
A.J. Smola and R. Kondor. 2003. Kernels and regular-
ization on graphs. In B. Scho?lkopf and M.K. War-
muth, editors, 16th Annual Conference on Compu-
tational Learning Theory and 7th Kernel Workshop,
COLT/Kernel 2003, volume 2777 of Lecture Notes
in Computer Science, pages 144?158. Springer.
J Stetina and M Nagao. 1997. Corpus based pp attach-
ment ambiguity resolution with a semantic dictio-
nary. In Proceedings of the Fifth Workshop on Very
Large Corpora, pages 66?80, Beijing, China.
J. Suzuki, H. Isozaki, and E. Maeda. 2004. Convo-
lution kernels with feature selection for natural lan-
guage processing tasks. In Proc. of the 42nd Annual
Meeting of the Association for Computational Lin-
guistics, pages 119?126.
I. Tsochantaridis, T. Hofmann, T. Joachims, and Y. Al-
tun. 2004. Support vector machine learning for in-
terdependent and structured output spaces. In Proc.
21st Int. Conf. on Machine Learning, pages 823?
830, Banff, Alberta, Canada.
A.C. Varzi. 1996. Parts, wholes, and part-whole re-
lations: the prospects of mereotopology. Data and
Knowledge Engineering, 20:259?286.
D. Zelenko, C. Aone, and A. Richardella. 2003. Ker-
nel methods for relation extraction. Journal of Ma-
chine Learning Research, 3:1083?1106.
24
Proceedings of 52nd Annual Meeting of the Association for Computational Linguistics: System Demonstrations, pages 85?90,
Baltimore, Maryland USA, June 23-24, 2014.
c?2014 Association for Computational Linguistics
kLogNLP: Graph Kernel?based Relational Learning of Natural Language
Mathias Verbeke
?
Paolo Frasconi
?
Kurt De Grave
?
Fabrizio Costa
?
Luc De Raedt
?
?
Department of Computer Science, KU Leuven, Belgium
{mathias.verbeke, kurt.degrave, luc.deraedt}@cs.kuleuven.be
?
Dipartimento di Sistemi e Informatica, Universit`a degli Studi di Firenze, Italy,
p-f@dsi.unifi.it
?
Institut f?ur Informatik, Albert-Ludwigs-Universit?at, Germany,
costa@informatik.uni-freiburg.de
Abstract
kLog is a framework for kernel-based
learning that has already proven success-
ful in solving a number of relational tasks
in natural language processing. In this pa-
per, we present kLogNLP, a natural lan-
guage processing module for kLog. This
module enriches kLog with NLP-specific
preprocessors, enabling the use of exist-
ing libraries and toolkits within an elegant
and powerful declarative machine learn-
ing framework. The resulting relational
model of the domain can be extended by
specifying additional relational features in
a declarative way using a logic program-
ming language. This declarative approach
offers a flexible way of experimentation
and a way to insert domain knowledge.
1 Introduction
kLog (Frasconi et al., 2012) is a logical and re-
lational language for kernel-based learning. It has
already proven successful for several tasks in com-
puter vision (Antanas et al., 2012; Antanas et al.,
2013) and natural language processing. For ex-
ample, in the case of binary sentence classifica-
tion, we have shown an increase of 1.2 percent
in F1-score on the best performing system in the
CoNLL 2010 Shared Task on hedge cue detec-
tion (Wikipedia dataset) (Verbeke et al., 2012a).
On a sentence labeling task for evidence-based
medicine, a multi-class multi-label classification
problem, kLog showed improved results over both
the state-of-the-art CRF-based system of Kim et
al. (2011) and a memory-based benchmark (Ver-
beke et al., 2012b). Also for spatial relation ex-
traction from natural language, kLog has shown
to provide a flexible relational representation to
model the task domain (Kordjamshidi et al., 2012).
kLog has two distinguishing features. First, it is
able to transform relational into graph-based rep-
resentations, which allows to incorporate struc-
tural features into the learning process. Subse-
quently, kernel methods are used to work in an ex-
tended high-dimensional feature space, which is
much richer than most of the direct proposition-
alisation approaches. Second, it uses the logic
programming language Prolog for defining and
using (additional) background knowledge, which
renders the model very interpretable and provides
more insights into the importance of individual
(structural) features.
These properties prove especially advantageous
in the case of NLP. The graphical approach of
kLog is able to exploit the full relational represen-
tation that is often a natural way to express lan-
guage structures, and in this way allows to fully
exploit contextual features. On top of this rela-
tional learning approach, the declarative feature
specification allows to include additional back-
ground knowledge, which is often essential for
solving NLP problems.
In this paper, we present kLogNLP
1
, an NLP
module for kLog. Starting from a dataset and a
declaratively specified model of the domain (based
on entity-relationship modeling from database the-
ory), it transforms the dataset into a graph-based
relational format. We propose a general model
that fits most tasks in NLP, which can be extended
by specifying additional relational features in a
declarative way. The resulting relational represen-
tation then serves as input for kLog, and thus re-
sults in a full relational learning pipeline for NLP.
kLogNLP is most related to Learning-Based
Java (LBJ) (Rizzolo and Roth, 2010) in that it of-
fers a declarative pipeline for modeling and learn-
ing tasks in NLP. The aims are similar, namely ab-
stracting away the technical details from the pro-
grammer, and leaving him to reason about the
modeling. However, whereas LBJ focuses more
on the learning side (by the specification of con-
straints on features which are reconciled at in-
ference time, using the constrained conditional
1
Software available at http://dtai.cs.
kuleuven.be/klognlp
85
Interpretations
(small relational DBs)
Extensionalized 
database
Graph
Kernel matrix/
feature vectors
Statistical 
learner
Raw dataset
(sentence)
Feature extraction
based on model
Declarative feature 
construction
Graphicalization
Feature 
generation
Graph kernel 
(NSPDK)
kLog
kLogNLP
kLogNLP
(E/R-)model
Figure 1: General kLog workflow extended with the kLogNLP module
model framework), due to its embedding in kLog,
kLogNLP focuses on the relational modeling, in
addition to declarative feature construction and
feature generation using graph kernels. kLog in it-
self is related to several frameworks for relational
learning, for which we refer the reader to (Fras-
coni et al., 2012).
The remainder of this paper is organized ac-
cording to the general kLog workflow, preceded
with the kLogNLP module, as outlined in Fig-
ure 1. In Section 2, we discuss the modeling of the
data, and present a general relational data model
for NLP tasks. Also the option to declaratively
construct new features using logic programming is
outlined. In the subsequent parts, we will illustrate
the remaining steps in the kLog pipeline, namely
graphicalization and feature generation (Section
3), and learning (Section 4) in an NLP setting. The
last section draws conclusions and presents ideas
for future work.
2 Data Modeling
kLog employs a learning from interpretations set-
ting (De Raedt et al., 2008). In learning from
interpretations, each interpretation is a set of tu-
ples that are true in the example, and can be
seen as a small relational database. Listing 3, to
be discussed later, shows a concise example. In
the NLP setting, an interpretation most commonly
corresponds to a document or a sentence. The
scope of an interpretation is either determined by
the task (e.g., for document classification, the in-
terpretations will at least need to comprise a sin-
gle document), or by the amount of context that
is taken into account (e.g., in case the task is sen-
tence classification, the interpretation can either be
a single sentence, or a full document, depending
on the scope of the context that you want to take
into account).
Since kLog is rooted in database theory, the
modeling of the problem domain is done using an
entity-relationship (E/R) model (Chen, 1976). It
gives an abstract representation of the interpreta-
tions. E/R models can be seen as a tool that is tai-
word
depRel
nextW
wordID
depType
lemma
POS-tag
wordString
namedEntity
hasWord
sentID
nextS
coref
synonymous
sentence
Figure 2: Entity-relationship diagram of the
kLogNLP model
lored to model the domain at hand. As the name
indicates, E/R models consist of entities, which we
will represent as purple rectangles, and relations,
represented as orange diamonds. Both entities and
relations can have several attributes (yellow ovals).
Key attributes (green ovals) uniquely identify an
instance of an entity. We will now discuss the
E/R model we propose as a starting point in the
kLogNLP pipeline.
2.1 kLogNLP model
Since in NLP, most tasks are situated at either
the document, sentence, or token level, we pro-
pose the E/R model in Figure 2 as a general do-
main model suitable for most settings. It is able
to represent interpretations of documents as a se-
quence (nextS) of sentence entities, which
are composed of a sequence (nextW) of word
entities. Next to the sequence relations, also the
dependency relations between words (depRel)
are taken into account, where each relation has
its type (depType) as a property. Furthermore,
also the coreference relationship between words
or phrases (coref) and possibly synonymy re-
lations (synonymous) are taken into account.
The entities in our model also have a primary key,
namely wordID and sentID for words and sen-
tences respectively. Additional properties can be
attached to words such as the wordString it-
self, its lemma and POS-tag, and an indication
whether the word is a namedEntity.
This E/R model of Figure 2 is coded declara-
tively in kLog as shown in Listing 1. The kLog
syntax is an extension of the logical programming
language Prolog. In the next step this script will
be used for feature extraction and generation. Ev-
86
ery entity or relationship is declared with the key-
word signature. Each signature is of a certain
type; either extensional or intensional.
kLogNLP only acts at the extensional level. Each
signature is characterized by a name and a list
of typed arguments. There are three possible ar-
gument types. First of all, the type can be the
name of an entity set which has been declared
in another signature (e.g., line 4 in Listing 1; the
nextS signature represents the sequence relation
between two entities of type sentence, namely
sent 1 and sent 2). The type self is used to
denote the primary key of an entity. An example is
word id (line 6), which denotes the unique iden-
tifier of a certain word in the interpretation. The
last possible type is property, in case the argu-
ment is neither a reference to another entity nor a
primary key (e.g., postag, line 9).
We will first discuss extensional signatures, and
the automated extensional feature extraction pro-
vided by kLogNLP, before illustrating how the
user can further enrich the model with intensional
predicates.
1 begin_domain.
2 signature sentence(sent_id::self)::
extensional.
3
4 signature nextS(sent_1::sentence, sent_2
::sentence)::extensional.
5
6 signature word(word_id::self,
7 word_string::property,
8 lemma::property,
9 postag::property,
10 namedentity::property
11 )::extensional.
12
13 signature nextW(word_1::word, word_2::
word)::extensional.
14
15 signature corefPhrase(coref_id::self)::
extensional.
16 signature isPartOfCorefPhrase(
coref_phrase::corefPhrase, word::
word)::extensional.
17 signature coref(coref_phrase_1::
corefPhrase, coref_phrase_2::
corefPhrase)::extensional.
18
19 signature synonymous(word_1::word,
word_2::word)::extensional.
20
21 signature dependency(word_1::word,
22 word_2::word,
23 dep_rel::property
24 )::extensional.
25
26 kernel_points([word]).
27 end_domain.
Listing 1: Declarative representation of the
kLogNLP model
2.2 Extensional Feature Extraction
kLog assumes a closed-world, which means that
atoms that are not known to be true, are assumed
to be false. For extensional signatures, this en-
tails that all ground atoms need to be listed ex-
plicitly in the relational database of interpreta-
tions. These atoms are generated automatically
by the kLogNLP module based on the kLog script
and the input dataset. Considering the defined at-
tributes and relations in the model presented in
Listing 1, the module interfaces with NLP toolk-
its to preprocess the data to the relational format.
The user can remove unnecessary extensional sig-
natures or modify the number of attributes given in
the standard kLogNLP script as given in Listing 1
according to the needs of the task under consider-
ation.
An important choice is the inclusion of the
sentence signature. By inclusion, the gran-
ularity of the interpretation is set to the docu-
ment level, which implies that more context can
be taken into account. By excluding this signa-
ture, the granularity of the interpretation is set to
the sentence level.
Currently, kLogNLP interfaces with the follow-
ing NLP toolkits:
NLTK The Python Natural Language Toolkit
(NLTK) (Bird et al., 2009) offers a suite
of text processing libraries for tokenization,
stemming, tagging and parsing, and offers an
interface to WordNet.
Stanford CoreNLP Stanford CoreNLP
2
pro-
vides POS tagging, NER, parsing and
coreference resolution functionality.
The preprocessing toolkit to be used can be
set using the kLogNLP flags mechanism, as il-
lustrated by line 3 of Listing 2. Subsequently,
the dataset predicate (illustrated in line 4 of
Listing 2) calls kLogNLP to preprocess a given
dataset
3
. This is done according to the speci-
fied kLogNLP model, i.e., the necessary prepro-
cessing modules to be called in the preprocess-
ing toolkit are determined based on the presence
of the entities, relationships, and their attributes in
the kLogNLP script. For example, the presence
2
http://nlp.stanford.edu/software/
corenlp.shtml
3
Currently supported dataset formats are directories con-
sisting of (one or more) plain text files or XML files consist-
ing of sentence and/or document elements.
87
of namedentity as a property of word results
in the addition of a named entity recognizer in the
preprocessing toolkit. The resulting set of inter-
pretations is output to a given file. In case sev-
eral instantiations of a preprocessing module are
available in the toolkit, the preferred one can be
chosen by setting the name of the property accord-
ingly. The names as given in Listing 1 outline the
standard settings for each module. For instance, in
case the Snowball stemmer is preferred above the
standard (Wordnet) lemmatizer in NLTK, it can be
selected by changing lemma into snowball as
name for the word lemma property (line 8).
1 experiment :-
2 % kLogNLP
3 klognlp_flag(preprocessor,
stanfordnlp),
4 dataset(?/home/hedgecuedetection/
train/?,?trainingset.pl?),
5 attach(?trainingset.pl?),
6 % Kernel parametrization
7 new_feature_generator(my_fg,nspdk),
8 klog_flag(my_fg,radius,1),
9 klog_flag(my_fg,distance,1),
10 klog_flag(my_fg,match_type, hard),
11 % Learner parametrization
12 new_model(my_model,libsvm_c_svc),
13 klog_flag(my_model,c,0.1),
14 kfold(target, 10, my_model, my_fg).
Listing 2: Full predicate for 10-fold classification
experiment
Each interpretation can be regarded as a small
relational database. We will illustrate the exten-
sional feature extraction step on the CoNLL-2010
dataset on hedge cue detection, a binary classifi-
cation task where the goal is to detect uncertainty
in sentences. This task is situated at the sentence
level, so we left out the sentence and nextS
signatures, as no context from other sentences was
taken into account. A part of a resulting interpre-
tation is shown in Listing 3.
1 word(w1,often,often,rb,0,1).
2 depRel(w1,w5,adv).
3 nextW(w1,w2).
4 word(w2,the,the,dt,0,2).
5 depRel(w2,w4,nmod).
6 nextW(w2,w3).
7 word(w3,response,response,nn,0,3).
8 nextW(w3,w4).
9 depRel(w3,w4,nmod).
10 word(w4,may,may,md,0,5).
11 nextW(w4,w5).
Listing 3: Part of an interpretation
Optionally, additional extensional signatures
can easily be added to the knowledge base by the
user, as deemed suitable for the task under consid-
eration. At each level of granularity (document,
sentence, or word level), the user is given the
corresponding interpretation and entity IDs, with
which additional extensional facts can be added
using the dedicated Python classes. We will now
turn to declarative feature construction. The fol-
lowing steps are inherently part of the kLog frame-
work. We will briefly illustrate their use in the
context of NLP.
2.3 Declarative Feature Construction
The kLog script presented in Listing 1 can now
be extended using declarative feature construction
with intensional signatures. In contrast to ex-
tensional signatures, intensional signatures intro-
duce novel relations using a mechanism resem-
bling deductive databases. This type of signatures
is mostly used to add domain knowledge about the
task at hand. The ground atoms are defined implic-
itly using Prolog definite clauses.
For example, in case of sentence labeling for
evidence-based medicine, the lemma of the root
word proved to be a distinguishing feature (Ver-
beke et al., 2012b), which can be expressed as
1 signature lemmaRoot(sent_id::sentence,
lemmaOfRoot::property)::intensional.
2 lemmaRoot(S,L) :-
3 hasWord(S, I),
4 word(I,_,L,_,_,_),
5 depRel(I,_,root).
Also more complex features can be constructed.
For example, section headers in documents (again
in the case of sentence labeling using document
context) can be identified as follows:
1 hasHeaderWord(S,X) :-
2 word(W,X,_,_,_,_),
3 hasWord(S,W),
4 (atom(X) -> name(X,C) ; C = X),
5 length(C,Len),
6 Len > 4,
7 all_upper(C).
8
9 signature isHeaderSentence(sent_id::
sentence)::intensional.
10 isHeaderSentence(S) :-
11 hasHeaderWord(S,_).
12
13 signature hasSectionHeader(sent_id::
sentence, header::property)::
intensional.
14 hasSectionHeader(S,X) :-
15 nextS(S1,S),
16 hasHeaderWord(S1,X).
17 hasSectionHeader(S,X) :-
18 nextS(S1,S),
19 not isHeaderSentence(S),
20 once(hasSectionHeader(S1,X)).
In this case, first the sentences that contain a
header word are identified using the helper pred-
88
word(often,often,rb,0,1) word(the,the,dt,0,2) word(response,response,nn,0,3) word(variable,variable,nn,0,4) word(may,may,md,0,5)
nextW
depRel(adv)
nextW
depRel(nmod)
nextW
depRel(nmod)
nextW
depRel(sbj)
Figure 3: Graphicalization of the (partial) interpretation in Listing 3. For the sake of clarity, attributes of
entities and relationships are depicted inside the respective entity or relationship.r=0 d=2
r=1 d=2v u
INSTANCE G
FEATURESA
Figure 4: Illustration of the NSPDK feature concept. Left: instance G with 2 vertices v, u as roots for
neighborhood subgraphs (A, B) at distance 2. Right: some of the neighborhood pairs, which form the
NSPDK features, at distance d = 2 and radius r = 0 and 1 respectively. Note that neighborhood subgraphs
can overlap.
icate hasHeaderWord, where a header word is
defined as an upper case string that has more than
four letters (lines 1-7). Next, all sentences that rep-
resent a section header are identified using the in-
tensional signature isHeaderSentence (lines
9-11), and each sentence in the paragraphs follow-
ing a particular section header is labeled with this
header, using the hasSectionHeader predi-
cate (lines 13-20).
Due to the relational approach, the span can be
very large. Furthermore, since these features are
defined declaratively, there is no need to reprocess
the dataset each time a new feature is introduced,
which renders experimentation very flexible
4
.
3 Graphicalization and Feature
Generation
In this step, a technique called graphicalization
transforms the relational representations from the
previous step into graph-based ones and derives
features from a grounded entity/relationship dia-
gram using graph kernels. This can be interpreted
as unfolding the E/R diagram over the data. An ex-
ample of the graphicalization of the interpretation
part in Listing 3 can be found in Figure 3.
From the resulting graphs, features can be ex-
tracted using a feature generation technique that is
based on Neighborhood Subgraph Pairwise Dis-
4
Note that changes in the extensional signatures do re-
quire reprocessing the dataset. However, for different runs of
an experiment with varying parameters for the feature gener-
ator or the learner, kLogNLP uses a caching mechanism to
check if the extensional signatures have changed, when call-
ing the dataset predicate.
tance Kernel (NSPDK) (Costa and De Grave,
2010), a particular type of graph kernel. Infor-
mally the idea of this kernel is to decompose a
graph into small neighborhood subgraphs of in-
creasing radii r ? r
max
. Then, all pairs of such
subgraphs whose roots are at a distance not greater
than d ? d
max
are considered as individual fea-
tures. The kernel notion is finally given as the frac-
tion of features in common between two graphs.
Formally, the kernel is defined as:
?
r,d
(G,G
?
) =
?
A,B?R
?1
r,d
(G)
A
?
,B
?
?R
?1
r,d
(G
?
)
1
A
?
=
A
?
? 1
B
?
=
B
?
(1)
whereR
?1
r,d
(G) indicates the multiset of all pairs
of neighborhoods of radius r with roots at distance
d that exist inG, and where 1 denotes the indicator
function and
?
=
the isomorphism between graphs.
For the full details, we refer the reader to (Costa
and De Grave, 2010). The neighborhood pairs are
illustrated in Figure 4 for a distance of 2 between
two arbitrary roots (v and u).
In kLog, the feature set is generated in a combi-
natorial fashion by explicitly enumerating all pairs
of neighborhood subgraphs; this yields a high-
dimensional feature space that is much richer than
most of the direct propositionalization approaches.
The result is an extended high-dimensional fea-
ture space on which a statistical learning algorithm
can be applied. The feature generator is initialized
using the new feature generator predicate
and hyperparameters (e.g., maximum distance and
radius, and match type) can be set using the kLog
flags mechanism (Listing 2, lines 6-10).
89
4 Learning
In the last step, different learning tasks can be per-
formed on the resulting extended feature space. To
this end, kLog interfaces with several solvers, in-
cluding LibSVM (Chang and Lin, 2011) and SVM
SGD (Bottou, 2010). Lines 11-15 (Listing 2) illus-
trate the initialization of LibSVM and its use for
10-fold cross-validation.
5 Conclusions and Future Work
In this paper, we presented kLogNLP, a natu-
ral language processing module for kLog. Based
on an entity-relationship representation of the do-
main, it transforms a dataset into the graph-based
relational format of kLog. The basic kLogNLP
model can be easily extended with additional
background knowledge by adding relations us-
ing the declarative programming language Prolog.
This offers a more flexible way of experimenta-
tion, as new features can be constructed on top
of existing ones without the need to reprocess the
dataset. In future work, interfaces will be added
to other (domain-specific) NLP frameworks (e.g.,
the BLLIP parser with the self-trained biomedical
parsing model (McClosky, 2010)) and additional
dataset formats will be supported.
Acknowledgments
This research is funded by the Research Founda-
tion Flanders (FWO project G.0478.10 - Statistical
Relational Learning of Natural Language). KDG
was supported by ERC StG 240186 ?MiGraNT?.
References
Laura Antanas, Paolo Frasconi, Fabrizio Costa, Tinne
Tuytelaars, and Luc De Raedt. 2012. A relational
kernel-based framework for hierarchical image un-
derstanding. In Lecture Notes in Computer Science,,
pages 171?180. Springer, November.
Laura Antanas, McElory Hoffmann, Paolo Frasconi,
Tinne Tuytelaars, and Luc De Raedt. 2013. A re-
lational kernel-based approach to scene classifica-
tion. IEEE Workshop on Applications of Computer
Vision, 0:133?139.
Steven Bird, Ewan Klein, and Edward Loper.
2009. Natural Language Processing with Python.
O?Reilly Media, Inc., 1st edition.
L?eon Bottou. 2010. Large-scale machine learning with
stochastic gradient descent. In Proc. of the 19th In-
ternational Conference on Computational Statistics
(COMPSTAT?2010), pages 177?187. Springer.
Chih-Chung Chang and Chih-Jen Lin. 2011. LIB-
SVM: A library for support vector machines. ACM
Transactions on Intelligent Systems and Technol-
ogy, 2:27:1?27:27. Software available at http://
www.csie.ntu.edu.tw/
?
cjlin/libsvm.
Peter Pin-Shan Chen. 1976. The entity-relationship
model - toward a unified view of data. ACM Trans.
Database Syst., 1(1):9?36, March.
Fabrizio Costa and Kurt De Grave. 2010. Fast neigh-
borhood subgraph pairwise distance kernel. In Proc.
of the 26th International Conference on Machine
Learning,, pages 255?262. Omnipress.
Luc De Raedt, Paolo Frasconi, Kristian Kersting, and
Stephen Muggleton, editors. 2008. Probabilistic
Inductive Logic Programming - Theory and Appli-
cations, volume 4911 of Lecture Notes in Computer
Science. Springer.
Paolo Frasconi, Fabrizio Costa, Luc De Raedt, and
Kurt De Grave. 2012. klog: A language for log-
ical and relational learning with kernels. CoRR,
abs/1205.3981.
Su Kim, David Martinez, Lawrence Cavedon, and Lars
Yencken. 2011. Automatic classification of sen-
tences to support evidence based medicine. BMC
Bioinformatics, 12(Suppl 2):S5.
Parisa Kordjamshidi, Paolo Frasconi, Martijn van Ot-
terlo, Marie-Francine Moens, and Luc De Raedt.
2012. Relational learning for spatial relation extrac-
tion from natural language. In Inductive Logic Pro-
gramming, pages 204?220. Springer.
David McClosky. 2010. Any Domain Parsing: Au-
tomatic Domain Adaptation for Natural Language
Parsing. Ph.D. thesis, Brown University, Provi-
dence, RI, USA. AAI3430199.
N. Rizzolo and D. Roth. 2010. Learning based java for
rapid development of nlp systems. In LREC, Val-
letta, Malta, 5.
Mathias Verbeke, Paolo Frasconi, Vincent Van Asch,
Roser Morante, Walter Daelemans, and Luc
De Raedt. 2012a. Kernel-based logical and re-
lational learning with kLog for hedge cue detec-
tion. In Proc. of the 21st International Conference
on Inductive Logic Programming, pages 347?357.
Springer, March.
Mathias Verbeke, Vincent Van Asch, Roser Morante,
Paolo Frasconi, Walter Daelemans, and Luc
De Raedt. 2012b. A statistical relational learn-
ing approach to identifying evidence based medicine
categories. In Proc. of the 2012 Joint Conference on
Empirical Methods in Natural Language Process-
ing and Computational Natural Language Learning,
pages 579?589. ACL.
90
