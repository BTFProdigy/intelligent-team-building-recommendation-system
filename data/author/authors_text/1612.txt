Coling 2008: Proceedings of the workshop on Cognitive Aspects of the Lexicon (COGALEX 2008), pages 55?63
Manchester, August 2008
Extracting Sense Trees from the Romanian Thesaurus by  
Sense Segmentation & Dependency Parsing  
Neculai Curteanu 
Institute for Computer Science,  
Romanian Academy, Ia?i Branch 
ncurteanu@yahoo.com 
Alex Moruz  
Institute for Computer Science, 
Romanian Academy, Ia?i Branch 
Faculty of Computer Science,  
?Al. I. Cuza? University, Ia?i 
mmoruz@info.uaic.ro 
Diana Trandab?? 
Institute for Computer Science, 
Romanian Academy, Ia?i Branch 
Faculty of Computer Science, ?Al. 
I. Cuza? University, Ia?i 
dtrandabat@info.uaic.ro 
 
Abstract 
This paper aims to introduce a new pars-
ing strategy for large dictionary (thesauri) 
parsing, called Dictionary Sense Segmen-
tation & Dependency (DSSD), devoted to 
obtain the sense tree, i.e. the hierarchy of 
the defined meanings, for a dictionary en-
try. The real novelty of the proposed ap-
proach is that, contrary to dictionary 
?standard? parsing, DSSD looks for and 
succeeds to separate the two essential 
processes within a dictionary entry pars-
ing: sense tree construction and sense 
definition parsing. The key tools to ac-
complish the task of (autonomous) sense 
tree building consist in defining the dic-
tionary sense marker classes, establishing 
a tree-like hierarchy of these classes, and 
using a proper searching procedure of 
sense markers within the DSSD parsing 
algorithm. A similar but more general 
approach, using the same techniques and 
data structures for (Romanian) free text 
parsing is SCD (Segmentation-Cohesion-
Dependency) (Curteanu; 1988, 2006), 
which DSSD is inspired from. A DSSD-
based parser is implemented in Java, 
building currently 91% correct sense 
trees from DTLR (Dic?ionarul Tezaur al 
                                                 
? 2008. Licensed under the Creative Commons Attri-
bution-Noncommercial-Share Alike 3.0 Unported 
license (http://creativecommons.org/licenses/by-nc-
sa/3.0/). Some rights reserved. 
Limbii Rom?ne ? Romanian Language 
Thesaurus) entries, with significant re-
sources to improve and enlarge the 
DTLR lexical semantics analysis. 
1 Introduction 
Since the last decade, researchers have proven 
the need for machine readable dictionaries. The 
idea behind parsing a dictionary entry is the crea-
tion of a lexical-semantic tree of senses corre-
sponding to the meanings that define the diction-
ary lexical entry. The aim of this paper is to in-
troduce a new parsing strategy for thesauri shal-
low parsing, called Dictionary Sense Segmenta-
tion & Dependency (DSSD), devoted to the task 
of extracting the sense tree, i.e. the hierarchy of 
the lexical-semantics defined meanings for a dic-
tionary entry. The concrete task which DSSD 
algorithm was used for is to obtain the sense tree 
from an entry of the Romanian Language The-
saurus (DTLR ? Dic?ionarul Tezaur al Limbii 
Rom?ne) within the eDTLR research project 
(Cristea et al, 2007) devised for DTLR elec-
tronic acquisition and processing (Curteanu et al, 
2007). 
In order to obtain the sense tree for a head 
word, the dictionary entry is divided into primary 
and secondary senses, respecting a sense hierar-
chy introduced by sense markers. For the DTLR 
dictionary, the sense markers hierarchy (pre-
sented in Section 3) includes 5 levels. Those are, 
from the topmost level: capital letter markers 
(A., B., etc.), Roman numeral markers (I., II., 
etc.), Arabic numeral markers (1., 2., etc.), filled 
diamond ? and empty diamond ?. Besides the 
55
five levels, there exists also a special marker 
category, the so-called literal enumeration, con-
sisting of lowercase letter markers a), b), c), etc. 
The literal enumeration can appear at any of the 
5 levels, as presented in Section 3. 
Thus, using the sense markers, any dictionary 
entry is represented as a tree of senses, the lower 
levels being more specific instances of the higher 
levels. 
For example, for the dictionary entry verb, the 
sense tree contains 3 senses corresponding to 
level 3, one of them having a sub-sense corre-
sponding to level 5. Each sense/sub-sense can 
have its own definition (gloss) or examples. 
 
<entry> 
 <hw>VERB</hw> 
 <senses> 
  <marker level=?3?>1. 
   <definition>?</definition> 
   <marker level=?5?>? 
   <definition>?</definition> 
   </marker> 
  </marker> 
  <marker level=?3?>2. 
   <definition>?</definition> 
  </marker> 
  <marker level=?3?>3. 
   <definition>?</definition> 
  </marker> 
 </senses> 
</entry> 
 
The presented method can be applied to any 
dictionary, provided that a hierarchy of the sense 
markers of the dictionary is established. 
The paper is organized as follows: Section 2 
points out the characteristic features of DSSD 
strategy, discussing the special relationship be-
tween DSSD and SCD parsing strategy for gen-
eral text, on one hand, and between DSSD and 
the standard dictionary entry parsing (DEP), on 
the other hand. Section 3 presents the main com-
ponents of the DSSD strategy: DTLR sense 
marker classes, their dependency hyper-tree 
structure, and the DSSD parsing algorithm. The 
final Section 4 discusses the current stage im-
plementation (in Java) of the DSSD algorithm, 
exposing several parsed examples. Possible 
sources of error and ambiguity in the DSSD pars-
ing process are discussed, and further develop-
ments of DSSD analysis software are outlined. 
2 DSSD compared to Free Text Parsing 
and to Dictionary ?Standard? Parsing 
This section outlines the origins of the DSSD 
idea, pointing out the connections between 
DSSD and free text parsing based on the SCD 
linguistic strategy (Curteanu 2006), on one hand, 
and between DSSD and dictionary standard 
parsing, e.g. (Neff, Boguraev; 1989), (Lemnitzer, 
Kunze; 2005), (Hauser, Storrer; 1993), on the 
other hand. The main difference (and positive 
feature) of the DSSD strategy compared to the 
standard approach to dictionary entry parsing 
(DEP), e.g. LexParse system in (Hauser, Storrer; 
1993), (Kammerer; 2000), (Lemnitzer, Kunze; 
2005), or JavaCC grammar-based parsing in 
(Curteanu, Amihaesei; 2004), is that DSSD de-
tached completely the process of sense tree 
building from the process of sense definition 
parsing, within the DEP general task. This fact is 
clearly reflected in Fig. 2, which compares, at the 
macro-code level, the main four DEP operations 
for standard DEP and DSSD strategies. 
 
2.1 SCD Marker Classes, Hierarchy, and 
Parsing Algorithms 
 DSSD parsing strategy involves a configuration 
of components that is similar (but less general) to 
the SCD (Segmentation-Cohesion-Dependency) 
parsing strategy, developed and applied to (Ro-
manian) free text analysis (and generation) 
(Curteanu; 2006). The process of solving the 
parsing of DTLR entries have been inspired by 
the resemblance between the classes of DTLR 
sense markers and the SCD marker classes on 
one side, and between the sense trees of (DTLR) 
dictionary entries and the discourse trees of fi-
nite-clause dependency trees at sentence or para-
graph levels on the other side. While discourse 
trees provide a formal similarity to the sense 
trees, nucleus?satellite rhetorical relations among 
discourse segments is quite different to the sub-
sumption relation of lexical semantics nature 
among the sub-sense definitions (sub-senses) of a 
dictionary entry. 
The subsumption relation is defined as fol-
lows: sense1 subsumes sense2 if (informally) 
sense1 is less informative (or, more general) than 
sense2, or if (formally) the sense tree of sense1 is 
a (proper) subtree of sense2. DSSD parsing of an  
56
entry sense tree works in an akin Breadth-First, 
Top-Down manner as SCD does, for those 
classes of markers that produce only segmenta-
tion and binary dependency between discourse 
segments or finite clauses, ignoring the more 
complex ?cohesion? relationship. Thus one can 
rightly say that DSSD approach is derived from 
the SCD parsing strategy (Fig. 1). 
SCD parsing strategy is exposed at large in 
(Curteanu 2006). SCD-based discourse parsing 
presents a special interest for DSSD because of 
their (formal) algorithmic analogy. The method 
proposed by the SCD strategy includes building 
the discourse tree by the intensive use of dis-
course markers, while discourse segments are 
obtained by clause parsing. Employing the re-
sults of the SCD clausal parsing and a database 
which contains information about the discourse 
markers, one can obtain the discourse structure 
of a text. The outcome is represented as a dis-
course tree whose terminal nodes are clause-like 
structures, having specified on the arcs the name 
of the involved rhetorical relations.  
The SCD segmentation / parsing algorithm in 
(Curteanu 2006) may have the same shape of a 
Breadth-First (or sequential-linear) processing 
form as DSSD does, using as input a morpho-
logically tagged text, obtaining the finite clauses 
and sub-clausal phrase (XG-)structures. Data 
representation is in standard XML and the im-
plementation of the SCD algorithm for free text 
parsing is made in Java. (Curteanu 2006) pre-
sents recursive Breadth-First (and Depth-First), 
or parallel Breadth-First shapes of the SCD 
segmentation-parsing algorithms.  
The relationship between SCD and DSSD 
parsing strategies, the former devoted to the free 
text parsing and the latter to be used for DEP, 
could be summarized as follows: the two strate-
gies work formally with the same technology, 
using very similar analysis tools and data struc-
tures, including the same Breadth-First search 
strategy. The clear distinction between SCD and 
DSSD consists in the quite different kind of texts 
to be analyzed (free text vs. dictionary entry 
text), and the two different (but complementary) 
semantics that drive the corresponding parsing 
structures: predicational and rhetorical (cohe-
sion-proper) semantics for SCD, and lexical se-
mantics (cohesion-free) for DSSD. The table in 
Fig. 1 gives a detailed comparison between the 
two parsing strategies. The SCD parsing technol-
ogy, especially with its presently discovered 
DSSD sub-sort, evolves (at least) three features: 
generality (different text structures), flexibility 
(different underlying semantics), and adequacy 
(proper text markers and their corresponding hi-
erarchies).  
Parsing 
Strategy 
SCD markers &  
DSSD markers  
Semantics to be applied on the parsed 
textual spans  
Resulted structures of the 
parsing process 
 M4-class (discourse) markers rhetorical discourse semantics , i.e. RST dis-course (high-level cohesion) dependencies   
discourse tree (of RST-based dis-
course segments) 
 M3-class (inter-clause) mark-ers 
inter-clause predicational semantics, i.e. Predi-
cate-Argument (global-level cohesion) dependen-
cies among finite clauses  
clause-level dependency trees based 
on syntactic or semantic relations 
SCD M2-class (clause) markers 
single finite-clause predicational semantics, i.e. 
Predicate-Argument (local-level cohesion) de-
pendencies among VG-NGs (Verbal Group ? 
Noun Groups) 
single finite clause(s) 
 M1-class intra-clausal (phrase) markers 
non-finite predicational semantics, i.e. (local-
level cohesion) dependencies inside VG and NGs 
(Verbal Group ? Noun Groups) 
simple and complex VGs; simple 
and complex (predication-related) 
NGs 
 M0-class flexionary markers of  lexical categories  lexical semantics categories  
lexical textual words = inflected 
words 
SCD -
DSSD 
M(?1)-class of lemmatization 
markers for DTLR lexical 
entries  
semantic description at the lexicon level  lexical lemmatized words =  dictionary entries  
DSSD 
sense and subsense defini-
tion markers of a DTLR 
lexical entry  
subsumption relations between the subsenses of a 
DTLR lexical entry (cohesion-free semantics) 
sense trees and (XCES-TEI 2007 
codification-based) sense definitons 
of DTLR entries 
Fig. 1. DSSD vs. SCD marker classes, the corresponding semantics and textual structures 
57
2.2 DSSD Approach vs. Standard DEP  
Another perspective on DSSD is outlined in this 
section: the novelties of DSSD approach fetched 
to the standard DEP, e.g. (Neff, Boguraev; 
1989), (Lemnitzer, Kunze; 2005), (Kammerer, 
2000). DSSD applies the same ?technology? as 
SCD strategy does, i.e. marker classes, specific 
hierarchies, and adequate searching procedures 
embedded and governing the parsing algorithms. 
Most important, DSSD parse and construct the 
sense tree of a (DTLR) dictionary entry, inde-
pendently of, and possibly lacking the, DTLR 
sense definition parsing process.  
In the standard DEP, including the Java-
grammar based construction of parsers in the 
JavaCC environment (Curteanu, Amihaesei, 
2004; Curteanu et al, 2007), building the sense 
tree for an entry is inherently embedded into the 
general process of parsing all the sense and 
sub-sense definitions enclosed into the dictionary 
entry. In the same typically (standard) DEP way 
works also the parser in (Neff, Boguraev; 1989) 
or LexParse, (Kammerer; 2000: 10-11) specify-
ing that the LexParse recognition strategy is a 
Depth-First, Top-Down one. 
The advantage of the proposed DSSD ap-
proach is that it ?ignores?, at least in the begin-
ning, the ?details? of sense definitions, concen-
trating only on the sense marker discovery and 
their dependency establishing. The result is that 
DSSD parsing concentrates on and obtains, in the 
first place, the sense tree of a DTLR entry. Of 
course, parsing of a dictionary entry does not 
means only its sense tree, but the entry sense tree 
represents the essential, indispensable structure 
for any kind of DEP.  
Based on different types of DTD standards for 
dictionary text representation, such as CON-
CEDE-TEI (Erjavec et al 2000; Kilgarriff 1999, 
Tufis 2001) or (XCES-TEI; 2007), the parsing 
process may continue ?in depth? for identifying 
the (other important) fields of sense and 
sub-sense definitions. DSSD strategy has the 
quality of being able to compute independently 
the entry sense tree, prior to the process of sense 
definition parsing. Subsequently, the process of 
parsing the sense definitions can be performed 
separately, one by one, avoiding the current 
situation when the general parsing of an entry 
may be stopped simply because of a single (even 
if the last one) unparsable sense definition.  
The procedural pseudo-code in Fig. 2 shows 
clearly the important difference between stan-
dard DEP and DSSD parsing, with the essential 
advantage provided by DSSD: standard DEP is 
based on Depth-First search, while DSSD works 
with Breadth-First one. Specifically, the proce-
dural running of the four operations that are 
compared for the standard DEP and DSSD 
strategies, labeled with 1, 2, 3, 4, are organ-
ized in quite different cycles: in the table left-
side (standard DEP), there is a single, large run-
ning cycle, 1 + 2, under 2 being embedded 
(and strictly depending) the sub-cycle 3 + 4. 
The DSSD parsing exhibits two distinct (and in-
Dictionary Classical Parsing Strategy DSSD Parsing Strategy 
 
For i from 0 to MarkerNumber  
  1  Sense-i Marker Recognition;  
  2  Sense-i Definition Parsing;  
  If(Success) 
      3  Attach (Parsed) Sense-i Definition to Node-i; 
      4  Add Node-i to EntrySenseTree;  
  Else Fail and Stop. 
EndFor 
 
Output: EntrySenseTree with Parsed Sense Definitions 
(only if all sense definitions are parsed).  
 
 
Notice:  MarkerNumber is the number of the input 
marker sequence.  
 
For i from 0 to MarkerNumber  
  1  Sense-i Marker Recognition;  
  Assign (Unparsed) Sense-i Definition to Node-i;  
  4  Add Node-i to EntrySenseTree;  
  Standby on Sense-i Definition Parsing;  
EndFor 
Output: EntrySenseTree.  
 
Node-k = Root(EntrySenseTree); 
While not all nodes in EntrySenseTree are visited  
  2  Sense-k Definition Parsing;  
If(Success) 
  3  Attach Sense-k Definition to Node-k;  
Else Attach Sense-k Parsing Result to Node-k;  
Node-k = getNextDepthFirstNode(EntrySenseTree) 
Continue 
EndWhile. 
 
Output: EntrySenseTree with Parsed or Unparsed Sense 
Definitions  
Fig. 2. A macro-code comparison of classical and DSSD parsing strategies 
58
dependently) running cycles: 1 + 4, for con-
structing the (DTLR) sense trees, and 2 + 3, 
devoted to parse the sense definitions and to at-
tach the parsed or unparsed sense definitions to 
their corresponding nodes in the sense tree(s).  
We emphasize firstly, that the second proce-
dural cycle is optional, and secondly, that the 
first cycle is working on the sense marker se-
quence of the entry (either correct or not), the 
DSSD output being an entry sense tree in any 
case (either correct or not). This is why the 
DSSD algorithm never returns on FAIL, regard-
less whether the obtained sense tree is correct or 
not.  
3 DTLR Marker Classes, their Depend-
ency Structure, and the DSSD Parsing 
Algorithm 
As already pointed out, DSSD can be viewed as 
a simplified version of SCD, since only the seg-
mentation and dependency aspects are involved, 
the (local) cohesion matters being without object 
for the (one-word) lexical semantics of DSSD. 
As in the case of SCD, the DSSD parsing strat-
egy requires a set of marker classes (in our case, 
DTLR sense markers), arranged in a hierarchy 
illustrated in Fig. 3, and described below: 
The capital letter marker class (A., B., etc.) is 
the topmost level on the sense hierarchy of 
DTLR markers (see Fig. 3) for any given dic-
tionary entry. When it appears, this marker des-
ignates the (largest-grained meaning) primary 
senses of the lexical word defined. If the top 
level marker has only one element of this kind, 
then the marker is not explicitly represented.  
The Roman numeral marker class (I., II., etc.) 
is the second-level of sense analysis for a given 
DTLR entry. It is subsumed by a capital letter 
marker if some exists for the head word; if a 
capital letter marker does not exist (it is not ex-
plicitly represented), the Roman numeral marker 
appears on the topmost level of the sense tree. If 
the lexical entry has only one sense value for this 
analysis level, the marker is not explicitly repre-
sented. 
The Arabic numeral marker class (1., 2., etc.) 
is the third-level of sense analysis for a DTLR 
entry. It is subsumed by a Roman numeral 
marker if there exists some for the entry; if a 
Roman numeral marker is not explicitly repre-
sented, it is subsumed by the first explicit marker 
on a higher level. If the entry has only one sense 
value for this level of sense analysis, the marker 
is not explicitly represented. These first three 
levels encode the primary senses of a DTLR 
lexical entry.  
Fig. 3. The tree-like dependency structure for 
the classes of DTLR markers 
 
The filled diamond marker class is the fourth-
level of sense analysis and it is used for enumer-
ating secondary (finer-grained) senses of a 
DTLR entry. It is generally subsumed by any 
explicit DTLR sense marker on a higher level, 
i.e. any of the primary sense markers.  
The empty diamond marker class is the fifth-
level of sense analysis and it is used for enumer-
ating expressions for a given, secondary sub-
sense. It is generally subsumed by a filled dia-
mond marker or by any primary sense marker.  
The lowercase letter markers a), b), c), etc. are 
not an actual class of sense markers, but rather a 
procedure used to refine, through literal enu-
meration, a semantic paradigm of a DTLR entry 
sense or sub-sense. A lowercase letter marker 
does not have a specific level on the marker class 
tree-like hierarchy since it belongs to the sense 
marker level (of either primary or secondary 
sense) that is its parent. The important rules of 
the literal enumeration procedure in DTLR are: 
(a)  it associates with the hierarchy level of the 
sense marker class to which is assigned (in 
Fig. 3), and (b)  it can embed lower (than its par-
ent level) senses, provided that each literal enu-
meration is closed finally on the sense level to 
which it belongs.  
Fig. 3 is a hyper-tree hierarchy of the DTLR 
sense marker classes since (at least) the lowest 
hyper-node contains recursively embedded dia-
           a), b), c), ?   
    DTLR Entry  
          a), b), c),   
       A., B., C.,  ?   
        a), b), c),   
       I., II., III.,  ?   
        a), b), c),   
        1., 2., 3.,   
        a), b), c),  ?   
  
 
         ?  
          ?
 
59
mond-marker nodes. The dashed arrows point to 
the upper or lower levels of DTLR sense marker 
hierarchy, from the literal enumeration layer-
embedded level. The continuous-dashed arrows 
in Fig. 3 point downwards from the higher to the 
lower priority levels of DTLR marker class hy-
per-tree. Because of its special representation 
characteristics, the literal enumeration is illus-
trated on a layer attached to the hierarchy level 
to which it belongs, on each of the sense levels. 
Some examples supporting the marker hierarchy 
in Fig. 3, including the literal enumeration that 
can appear at any DTLR sense level, are pre-
sented below: 
 
I. Literal enumeration under a filled diamond 
(secondary sense): 
<entry> 
 <hw>V???2</hw> 
 <pos>s. f.</pos> 
 <senses> 
  <marker>I.  
   <marker>1. 
   <definition> (De obicei determinat prin ?de 
vie?) Arbust din familia vitaceelor, cu r?d?cina puternic?, cu 
tulpina scurt?, ?</definition> 
    <marker>? 
    <definition> C o m p u s e: vi??-alb? = 
</definition> 
     <marker>a) 
     <definition> arbust ag???tor din familia 
ranunculaceelor, cu tulpina sub?ire, cu frunze penate...; 
</definition> 
     </marker> 
     <marker>b) 
     <definition>(regional) luminoas? 
(Clematis recta). Cf. CONV. LIT. XXIII, 571, BORZA, D. 49, 
301; </definition> 
     </marker> 
     <marker>c) 
     <definition>(?nvechit) ?mp?r?teas? 
(Bryonia alba).....</definition> 
     </marker> 
    </marker> 
   </marker> 
  </marker> 
 </senses> 
</entry> 
 
II. Literal enumeration under an Arabic nu-
meral (primary sense): 
<entry> 
 <hw>VERIG???</hw> 
 <pos>s. f.</pos> 
 <senses> 
  <definition>Diminutiv al lui  v e r i g ?. Cf. LB, 
POLIZU, DDRF, BARCIANU, ALEXI, W., TDRG, CADE, SCRIBAN, D., 
DL, DM, DEX.</definition> 
  <marker>1. 
   <marker>a)  
   <definition> (Prin Transilv. ?i prin sudul 
Mold.) Cf.  v e r i g ? (2 c). Cf. ALR II 6 653/95, 192, 605. 
</definition> 
   </marker> 
   <marker> b)  
   <definition>Cf. v e r i g ? (2 b). ?i am dat 
cercel ?n  narea ta ?i verigu?e ?n urechile tale. BIBLIA (1688), 
5431/25. La ferestre sp?nzurau ni?te perdelu?e de adamasc?, 
aninate ?n ni?te verigu?e ce se ?n?irau pe o varg? de fier. 
GANE, N. II, 160. </definition> 
   </marker> 
  </marker> 
  <marker>2.  
  <definition> (Popular) Verighet?. Cf. SCRIBAN, D., 
?IPLEA, P. P., BUD, P. P. Mi-o dat o verigu?? ?i-ntr-on an i-am fost 
dr?gu??. B?RLEA, C. P. 143. </definition> 
  </marker> 
 </senses> 
</entry> 
 
III. Literal enumeration directly under the en-
try root: 
<entry> 
 <hw>VENTRIC?A</hw> 
 <pos>s. f.</pos> 
 <senses> 
  <definition> Numele mai multor specii de plante 
erbacee (folosite ?n medicin?): </definition> 
  <marker>a) 
  <definition> ventrilic? (c) (Veronica persica). 
Cf. GRECESCU, FL. 442, PAN?U, PL., CADE. Un gorun negru ?i 
singuratic? e n?p?dit la poale de ventricele cu spicuri 
alb?strii....; </definition>  
  </marker> 
  <marker>b)  
  <definition> ventrilic? (a) (Veronica officinalis). 
Cf. TDRG, BORZA, D. 179, 300; </definition> 
  </marker> 
  <marker>c)  
  <definition>bobornic (Veronica prostrata). Cf. 
BORZA, D. 179, 300. </definition> 
  </marker> 
 </senses> 
</entry> 
 
The DSSD algorithm for the construction of 
the DTLR sense tree, according to the marker 
hierarchy described in Fig. 3, is the following: 
 
Stack S 
Tree T 
S.push(root) 
while article has more markers 
  crt = get_next_marker() 
  while crt > S.top() ? get to the 
first higher rank marker in the 
stack 
    S.pop() 
  if(crt = lowercaseLetter) 
    S.top.addPart(crt) ? add a low-
ercase marker as a subset of the 
higher level sense value 
60
  crt.level=S.top.level+1 ? the 
lowercase letter maker is given a 
level in accordance to the level of 
its parent 
    S.push(crt) 
  else 
    S.top.add_son(crt) ? add the 
son to the higher level marker in 
the stack 
    S.push(crt) ? add the current 
marker to the stack 
 
The DSSD parsing algorithm was imple-
mented in Java and running examples of its ap-
plication on DTLR entries are presented in Sec-
tion 4. While the DTLR sense marker recogni-
tion in DSSD is achieved with a Breadth-First 
search, the marker sequence analysis for sense 
tree construction is based on a Depth-First pars-
ing of the sense marker sequence input, as it uses 
a stack to keep track of previous unfinished (in 
terms of attaching subsenses) sense markers. 
4 DTLR Parsing with DSSD Algorithm: 
Examples and Developments 
4.1 DSSD Parser Applied on DTLR Entries 
The enclosed Fig. 4 shows the result of applying 
the DSSD Java parser described in Section 3 on a 
DTLR entry. We notice that the presented input 
example (VENIT2) represents just sequences of 
DTLR sense markers. The entry for which the 
parsing was conducted is given only as tags, in 
part below (the entire entry spans for more than 
two dictionary pages): 
 
<entry> 
 <hw><VEN?T2, -? </hw> 
 <pos>adj. </pos> 
 <senses> 
  <definition>?</definition> 
  <marker>1. 
  <definition>?</definition> 
  <marker>2. 
  <definition>?</definition> 
   <marker>? 
    <marker> a)  
    <definition>?</definition> 
    </marker> 
    <marker> b)  
    <definition>?</definition> 
    </marker> 
    <marker> c)  
    <definition>?</definition> 
    </marker> 
   </marker> 
   <marker>? 
    <marker> a)  
    <definition>?</definition> 
    </marker> 
    <marker> b) 
    <definition>?</definition> 
    </marker> 
   </marker> 
  </marker> 
 </senses> 
</entry> 
 
 
Fig. 4. DSSD parsing for the sense tree build-
ing of DTLR entry VENIT2 
 
As one can see, the input of the sense tree 
parser is the DSSD marker sequence of the con-
sidered DTLR entry (the <list> tag in Figure 4). 
The output of the parsing is much less verbose 
than the original dictionary entry, since the sense 
definitions and the entire example text is not de-
picted, in order to better observe the sense tree of 
the entry. Also, this representation proves that 
the understanding of the sense definitions is not 
strictly necessary for building the sense tree, a 
task for which the marker hierarchy discussed in 
Section 3 is sufficient.  
Fig. 5 presents the sense tree for the dictionary 
entry ?VI?RME? (En: worm). It can be seen that 
this particular entry is quite large, with the origi-
nal dictionary text spanning for more than six 
pages of DTLR thesaurus. 
After its completion, the DSSD parser was 
tested on more than 500 dictionary entries (of 
medium and large sizes), the only ones already in 
electronic format to which we had access to at 
the moment (the vast majority of dictionary vol-
umes is only available in printed form). The suc-
cess rate was determined to be 91.18%, being  
61
 
 
Fig. 5. Sense tree for the dictionary entry 
?VI?RME? 
 
computed as a perfect match between the output 
of the program and the gold standard. 
Furthermore, it is worth noting that an article 
with only one incorrect parse (i.e. one node in the 
sense tree attached incorrectly) was considered to 
be erroneously parsed in its entirety, an approach 
which disregards all the other correctly attached 
nodes in that entry. This fact shows also signifi-
cant improvement resources of the DSSD parsing 
process. 
 
4.2 Error and Ambiguity Sources in DTLR 
Parsing 
It is worth to mention some sources of error and 
ambiguity found in DSSD parsing for DTLR 
sense tree computing. We grouped the error 
sources in three main classes: 
 
I. Inconsistencies in writing the original DTLR 
article 
A first source of parsing errors is the non-
monotony of the marker values on the same level 
of sense marker hierarchy (Fig. 3): 
Ex.1. A. [B. missing] ? C. etc.;  
Ex.2. 2. [instead of 1.]... 2. etc.;  
Ex.3. a)? b) ? c) ? b) [instead of d)]etc.  
The tree structure returned by the parser does 
not consider the consistency of each marker 
level. Thus, in Ex.1, it will place the two markers 
A. and C. as brother nodes in the sense tree. A 
(partial but feasible) solution for the parser is to 
check the strict monotony of the marker 
neighbors, an operation which is useful also 
when sense markers interfere with literal enu-
meration.  
A validity of the marker succession at each 
level will be checked after the completion of the 
sense tree parsing.  
 
II. Ambiguity in deciding which is the regent 
and which is the dependent (sub)sense 
An inherently ambiguity was found for the fol-
lowing sequences of DTLR sense markers:  
Ex.4. 1. a) b) c) ? [?]  
The problem occurs since one can not discern 
between attaching the first (and / or second) ??? 
as depending on c) or on the upper level marker 
(1.). Solving these ambiguities is a problem re-
lated on syntactic and / or semantic contexts of 
the involved (multiple) pairs of markers. 
Namely, if ?c)? is the last small letter in the lit-
eral enumeration, then ??? is attached to the ?1.? 
marker (and sense), while if ?c)? in the literal 
enumeration, followed by ???, has a continuation 
?d)? in the literal enumeration, then ??? depends 
on its small letter ?c)? regent sense. 
 
III. More refined subsense classification 
A third source of errors when creating the 
sense tree is met within the following marker 
sequence I. 1. ? a) b) c) a) b). Even if at a quick 
62
look the problem with the inconsistent literal 
enumeration is similar to the problems presented 
in the first class, at a closer inspection we real-
ized that under the full diamond ? there are three 
subsenses (three expressions), two of them hav-
ing literal enumeration: (1) vi??-alb? = a)... b)... 
c); (2) vi??-neagr? = ...; (3) vi?a-evreilor = 
a)...b). To solution this problem makes necessary 
a more refined subsense classification within the 
sense definition and adding possible new mark-
ers to the hierarchy. Working to solve these prob-
lems is in good progress, as it concerns types of 
sense structure closely related to various sense 
definition parsing, the next step in the develop-
ment of the DSSD dictionary parser.  
We already identified seven definition types, 
encoded as follows, together with the most im-
portant dependency conditions among the defini-
tions below, within DTLR senses and subsenses:  
1. MorfDef (Morphological Definitions); 
 2. SpecDef (Specification-based Definitions); 
 3. SpSpec (Spaced-character Definitions); 
 4. RegDef (Regular-font Definitions); 
 5. BoldDef (Bold-font Definitions); 
 6. ItalDef (Italic-font Definitions); 
 7. ExemDef (Example-based Definitions),  
The 4, 5, 6, definition types are possibly fol-
lowed by the literal enumeration scheme of 
sense codification.  
Further developments of DSSD analysis soft-
ware are meant to be achieved: (a)  The complete 
parsing of a DTLR entry entails the natural ex-
tension of DSSD approach towards sense defini-
tion parsing and representation within the XCES 
TEI P5 (2007) standard set of tags. (b)  A spe-
cialized subset of TEI P5 tags for representing all 
the types of definitions met within the primary 
and secondary senses of a DTLR entry is neces-
sary. (c)  Resolution of all the references within a 
DTLR entry is necessary: references to the ex-
cerpt sources (sigles), reference to a sense within 
the same entry (internal reference), or to a 
(sub)sense within another entry (external refer-
ence). (d)  Verification of the sense-tree correct-
ness can be achieved by restoring the linear 
structure of a DTLR entry from its parsed sense-
tree representation, and comparing it with the 
DTLR original entry. 
 
Acknowledgement. The present research was 
financed within the eDTLR grant, PNCDI II 
Project No. 91_013/18.09.2007. 
 
 
 
References 
Cristea, D., R?schip, M., For?scu, C., Haja, G., Flo-
rescu, C., Aldea, B., D?nil?, E. (2007): The Digital 
Form of the Thesaurus Dictionary of the Romanian 
Language. In Proceedings of the 4th International 
IEEE Conference SpeD 2007. 
Curteanu, Neculai (1988): Augmented X-bar Schemes. 
COLING'88 Proceedings, Budapest, pp. 130-132. 
Curteanu, N., E. Amih?esei (2004): Grammar-based 
Java Parsers for DEX and DTLR Romanian Dic-
tionaries. ECIT-2004 Conference, Iasi, Romania. 
Curteanu, N. (2006): Local and Global Parsing with 
Functional (F)X-bar Theory and SCD Linguistic 
Strategy. (I.+II.), Computer Science Journal of 
Moldova, Academy of Science of Moldova, Vol. 
14 no. 1 (40):74-102 and no. 2 (41):155-182. 
Curteanu, N., D. Trandab??, G. Pavel, C. Vere?tiuc, C. 
Bolea (2007): eDTLR ? Thesaurus Dictionary of 
the Romanian Language in electronic form. Re-
search Report at the PNCDI II Project No. 
91_013/18.09.2007, Phase 2007, and (D. Cristea, 
D. Tufi?, Eds.) eDTLR Parsing ? The Current 
Stage, Problems, and Development Solutions, Ro-
manian Academy Editorial House (in Romanian ? 
to appear). 
DLR Revision Group (1952): Codification Rules for 
the Dictionary (Thesaurus) of the Romanian Lan-
guage. Institute of Philology, Bucharest, Romanian 
Academy. 
Erjavec, T, Evans, R., Ide, N., Kilgariff A., (2000): 
The CONCEDE Model for Lexical Databases. Re-
search Report on TEI-CONCEDE LDB Project, 
Univ. of Ljubljana, Slovenia. 
Hauser, R., Storrer, A. (1993). Dictionary Entry Pars-
ing Using the LexParse System. Lexikographica 9 
(1993), 174-219 
Kammerer, M. (2000): W?terbuchparsing 
Grunds?tzliche ?berlegungen und ein Kurzbericht 
?ber praktische Erfahrungen, http://www.matthias-
kammerer.de/content/WBParsing.pdf 
Lemnitzer, L., Kunze, C. (2005): Dictionary Entry 
Parsing, ESSLLI 2005 
Neff, M., Boguraev, B. (1989) Dictionaries, Diction-
ary Grammars and Dictionary Entry Parsing, 
Proc. of the 27th annual meeting on Association for 
Computational Linguistics Vancouver, British Co-
lumbia, Canada Pages: 91 - 101 
Tufi?, Dan (2001): From Machine Readable Diction-
aries to Lexical Databases, RACAI, Romanian 
Academy, Bucharest, Romania.  
XCES TEI Standard, Variant P5 (2007): 
http://www.tei-c.org/Guidelines/P5/  
 
63
Proceedings of the 2nd Workshop on Cognitive Aspects of the Lexicon (CogALex 2010), pages 38?47,
Beijing, August 2010
An Optimal and Portable Parsing Method for  
Romanian, French, and German Large Dictionaries  
 
Neculai Curteanu 
Institute of Computer  
Science,  
Romanian Academy,  
Ia?i Branch  
ncurteanu@yahoo.com 
Alex Moruz  
Institute of Computer 
Science, Romanian Academy; 
Faculty of Computer  
Science,  
?Al. I. Cuza? University, Ia?i 
mmoruz@info.uaic.ro 
Diana Trandab??  
Institute for Computer Science, 
Romanian Academy; 
Faculty of Computer  
Science,  
?Al. I. Cuza? University, Ia?i  
dtrandabat@info.uaic.ro 
 
 
Abstract 
This paper presents a cross-linguistic 
analysis of the largest dictionaries cur-
rently existing for Romanian, French, and 
German, and a new, robust and portable 
method for Dictionary Entry Parsing 
(DEP), based on Segmentation-
Cohesion-Dependency (SCD) configura-
tions. The SCD configurations are ap-
plied successively on each dictionary en-
try to identify its lexicographic segments 
(the first SCD configuration), to extract 
its sense tree (the second configuration), 
and to parse its atomic sense definitions 
(the third one). Using previous results on 
DLR (The Romanian Thesaurus ? new 
format), the present paper adapts and ap-
plies the SCD-based technology to other 
four large and complex thesauri: DAR 
(The Romanian Thesaurus ? old format), 
TLF (Le Tr?sor de la Langue Fran?aise), 
DWB (Deutsches W?rterbuch ? 
GRIMM), and GWB (G?the-
W?rterbuch). This experiment is illu-
strated on significantly large parsed en-
tries of these thesauri, and proved the fol-
lowing features: (1) the SCD-based me-
thod is a completely formal grammar-
free approach for dictionary parsing, with 
efficient (weeks-time adaptable) model-
ing through sense hierarchies and parsing 
portability for a new dictionary. (2) SCD-
configurations separate and run sequen-
tially and independently the processes of 
lexicographic segment recognition, sense 
tree extraction, and atomic definition  
 
parsing. (3) The whole DEP process with 
SCD-configurations is optimal. (4) SCD-
configurations, through sense marker 
classes and their dependency hyper-
graphs, offer an unique instrument of lex-
icon construction comparison, sense con-
cept design and DEP standardization. 
1 Introduction 
The general idea behind parsing a large dictio-
nary can be reduced to transforming a raw text 
entry into an indexable linguistic resource. Thus, 
for each dictionary entry, a structured representa-
tion of its senses has to be created, together with 
a detailed description of the entry?s form: i.e. 
morphology, syntax, orthography, phonetics, lex-
ical semantics, etymology, usage, variants etc.  
The aim of this paper is to present an efficient 
dictionary entry parsing (DEP) method, based on 
Segmentation-Cohesion-Dependency (SCD) con-
figurations (Curteanu, 2006), applied on a set of 
five large and complex dictionaries: DLR (The 
Romanian Thesaurus ? new format), DAR (The 
Romanian Thesaurus ? old format), TLF (Le 
Tr?sor de la Langue Fran?aise), DWB 
(Deutsches W?rterbuch ? GRIMM), and GWB 
(G?the-W?rterbuch).  
The paper is structured in 8 sections: Section 2 
presents the state of the art in DEP, with an em-
phasis on the comparison between the proposed 
method and other dictionary parsing strategies, 
before detailing the SCD-based proposed method 
in Section 3. The following sections present the 
application of the proposed method to the five 
dictionaries. The paper ends with a discussion on 
38
comparative results and development directions 
concerning optimality, portability, standardiza-
tion, and dictionary networks. 
2 Dictionary Entry Parsing 
Natural language text parsing is a complex 
process whose prerequisite essential stage is a 
thorough modeling of the linguistic process to be 
developed, i.e. the structures and relations aimed 
to constitute the final result of the analysis. Simi-
larly, for DEP, the semantics of the lexical struc-
tures, the sense markers, and the hierarchies (de-
pendencies) between sense structures must be 
specified.  
Standard approaches to dictionary entry pars-
ing (referred to from now on as standard DEP), 
such as the one used by (Neff and Boguraev, 
1989), the LexParse system presented in (Hauser 
and Storrer, 1993; Kammerer, 2000; Lemnitzer 
and Kunze, 2005), or lexicographic grammars, as 
those presented in (Curteanu & Amihaesei, 2004; 
Tufis et al, 1999), recognize the sense / subsense 
definitions in a strictly sequential manner, along 
with the incremental building of the entry sense 
tree. The interleaving of the two running 
processes is the main source of errors and ineffi-
ciency for the whole DEP process. 
Both the standard DEP (Figure 1) and our 
proposed method based on SCD-configurations 
(Figure 2) involve the following three running 
cycles and four essential phases for extracting the 
sense-tree structure from a dictionary:  
[A1], [B1] ? parsing the lexicographic seg-
ments of an entry; 
[A2], [B2] ? parsing the sense-description 
segment of the dictionary entry, at the level of 
explicitly defined senses, until and not including 
the contents of the atomic definitions / senses; at 
this stage, the sense-tree of the sense-description 
segment is built having (sets of) atomic senses / 
definitions in their leaf-nodes.  
[A3], [B3] ? parsing the atomic definitions / 
senses. 
Phase_1 := Sense-i Marker Recognition;  
Phase_2 := Sense-i Definition Parsing;  
Phase_3 := Attach Parsed Sense-i Definition 
  to Node-i; 
Phase_4 := Add Node-i to EntrySense-Tree. 
The parsing cycles and phases of existing ap-
proaches, called standard DEP, are summarized 
by the pseudo-code in Fig. 1, where Marker-
Number is the number of markers in the dictio-
nary-entry marker sequence and EntrySegment-
Number is the number of lexicographic segments 
of the parsed entry. 
[A1].  For s from 1 to EntrySegmentNumber  
  If(Segment-s = Sense-Segment) 
[A2].   For i from 0 to MarkerNumber  
  Phase_1  Sense-i Marker Recognition;  
  Phase_2  Sense-i Definition Parsing;  
[A3].    If(Success) 
   Phase_3  Attach Parsed Sense-i   
     Defi nition to Node-i; 
   Phase_4  Add Node-i to Entry 
     Sense Tree;  
[/A3].   Else Fail and Stop. 
[/A2].  EndFor 
   Output: EntrySenseTree with  
   Parsed Sense Definitions  
   (only if all sense definitions are parsed). 
  Else Segment-s Parsing; 
  Continue 
[/A1]. EndFor 
 Output: Entry parsed segments, including the  
 Sense-Segment (only if all definitions in the  
 Sense-Segment are parsed). 
Fig. 1. Standard dictionary entry parsing 
The main drawback of the classical, standard 
DEP, is the embedding of the parsing cycles, 
[A1] [A2] [A3] ... [/A3] [/A2] [/A1], derived 
from the intuitive, but highly inefficient parsing 
strategy based on the general Depth-First search-
ing. After presenting the SCD-based dictionary 
parsing method, section 3.2. compares the pars-
ing cycles and phases of standard DEP to the 
ones of SCD-based DEP.  
3 Parsing with SCD Configurations  
The SCD configuration(s) method is a 
procedural, recognition-generation computa-
tional device, that is distinct from the traditional 
and cumbersome formal grammars, being able to 
successfully replace them for several tasks of 
natural language parsing, including text free 
parsing (Curteanu, 2006) and thesauri parsing 
(Curteanu et al, 2008). For SCD-based parsing, 
the semantics and the linguistic modeling of the 
text to be analyzed should be clearly specified at 
each parsing level, and implemented within the 
following components of each SCD 
configuration (hereafter, SCD-config):  
? A set of marker classes: a marker is a 
boundary for a specific linguistic category 
(e.g. A., I., 1., a)., etc.). Markers are 
joined into marker classes, with respect to 
39
their functional similarity (e.g. {A., B., C., 
?}, {1., 2., 3., ?}, {a)., b)., ?});  
? A hypergraph-like hierarchy that estab-
lishes the dependencies among the marker 
classes;  
? A searching (parsing) algorithm. 
Once an SCD configuration is defined, parsing 
with the SCD configuration implies identifying 
the markers in the text to be parsed, constructing 
the sequences of markers and categories, recog-
nizing the marked text structures (spans within 
the bounding markers) corresponding to the SCD 
configuration semantics, and classifying them 
according to the marker sequences within the 
pre-established hierarchy assigned to that SCD 
configuration. The last step settles the dependen-
cies and correlations among the parsed textual 
structures. Identifying the lexicographic seg-
ments of an entry, the syntactic and semantic 
structure of each segment, the senses, definitions 
and their corresponding markers, is the result of 
an in-depth lexical semantics analysis. Designing 
the classes and the hypergraph structure of their 
dependencies are essential cognitive aspects of 
working with SCD configurations, and need to 
be pre-established for each dictionary.  
Within the parsing process, each SCD confi-
guration, i.e. marker classes, hierarchy, and 
searching algorithm, is completely commanded 
by its attached semantics. The semantically-
driven parsing process, either for free or specia-
lized texts, consists in a number of SCD configu-
rations applied sequentially (in cascade), each 
one on a different semantic level. The semantic 
levels (each one driving an SCD configuration) 
are subsuming each other in a top-down, mono-
tonic manner, starting with the most general se-
mantics of the largest text span, until the most 
specific level.  
3.1 SCD Configurations for DEP  
The SCD-based process for DEP consists in three 
SCD configurations, applied sequentially on the 
levels and sublevels of the dictionary entry, 
where each level should be monotonic at the lex-
ical-semantics subsumption relation.  
The task of applying the SCD configurations 
to DEP requires knowing the semantics of the 
corresponding classes of sense and definition 
markers, together with their hierarchical repre-
sentation. 
The first SCD configuration (SCD-config1) is 
devoted to the task of obtaining the partition of 
the entry lexicographic segments (Hauser & 
Storrer, 1993). Since usually there are no depen-
dency relations between lexicographic segments, 
SCD-config1 is not planned to establish the de-
pendency relations (cycle [A1] in Fig. 1, or cycle 
[B1] in Fig. 2).  
The second important task of DEP is to parse 
each lexicographic segment according to its spe-
cific semantics and linguistic structure. The most 
prominent lexicographic segment of each entry is 
the sense-description one, the central operation 
being the process of extracting the sense tree 
from the segment. This is the purpose of the 
second SCD configuration (denoted 
SCD-config2), corresponding exactly to the 
DSSD parsing algorithm in (Curteanu et al, 
2008), which, for the DLR sense trees, has a pre-
cision of 91.18%. In order to refine the lexical-
semantics of primary senses, one has to descend, 
under secondary senses, into the definitions and 
definition examples, which constitute the text 
spans situated between two sequentially-related 
nodes of the parsed sense tree. This SCD confi-
guration is represented as cycle [B2] in Fig. 2. 
The third step of DEP parsing (cycle [B3] in 
Fig. 2) is represented by the configuration 
SCD-config3, needed to complete the DEP. 
SCD-config3 consists in a specific set of marker 
classes for the segmentation at dictionary defini-
tions, the hypergraph-like hierarchy of the 
classes of markers for these sense definitions, 
and the parsing algorithm to establish the depen-
dencies among atomic senses / definitions. As a 
prerequisite groundwork, an adequate modeling 
of the sense definitions is needed and the seg-
mentation of definitions is implemented as an 
essential step to establish the dependency-by-
subsumption among the sense types of the consi-
dered thesaurus. The final result of the entry 
parsing process should be the sequential applica-
tion of the SCD-config1, SCD-config2, and 
SCD-config3 configurations.  
3.2 A Structural Analysis: Standard DEP vs. 
SCD Configurations  
A pilot experiment of parsing with SCD configu-
rations was its application to the DLR thesaurus 
parsing (Curteanu et al, 2008); the process of 
sense tree building has been completely detached 
40
and extracted from the process of sense definition 
parsing. 
The sense-tree parsing with SCD-based DEP 
cycles and phases is summarized in pseudo-code 
in Fig. 2 and comparative Table 1 below. 
[B1].  For s from 1 to EntrySegmentNumber  
  Segment-s Parsing; 
  If(Segment-s = Sense-Segment)  
   Standby on Sense-Segment Parsing; 
  Else Continue 
[/B1]. EndFor 
 Output: Entry parsed segments, not including the  
 Sense-Segment; 
[B2].  For i from 0 to MarkerNumber  
  Phase_1  Sense-i Marker Recognition;  
   Assign (Unparsed) Sense-i Definition to  
   Node-i;  
  Phase_4  Add Node-i to EntrySenseTree;  
   Standby on Sense-i Definition Parsing;  
[/B2]. EndFor 
 Output: EntrySenseTree (with unparsed sense  
 definitions).  
  Node-k = Root(EntrySenseTree); 
[B3]. While not all nodes in EntrySenseTree are  
   visited  
  Phase_2  Sense-k Definition Parsing;  
   If(Success) 
  Phase_3  Attach Parsed Sense-k Definition to  
   Node-k;  
  Else Attach Sense-k Parsing Result to Node-k;  
   Node-k = getNextDepth 
   FirstNode(EntrySenseTree) 
  Continue 
[/B3]. EndWhile. 
 Output: EntrySenseTree (with parsed or unparsed  
definitions). 
 Output: Entry parsed segments, including the  
 Sense-Segment. 
Fig. 2. SCD-based dictionary entry parsing  
 
Standard DEP SCD-based DEP 
(Phase_1;  
 Phase_2 
 (Phase_3;  
  Phase_4)  
 ) 
(Phase_1;  
 Phase_4)  
(Phase_2;  
 Phase_3) 
Table 1: Dictionary parsing phases in  
standard DEP and SCD-based DEP  
 
Table 1 presents the ordering of the dictionary 
parsing phases in the standard DEP strategy (the 
four phases are embedded) and the SCD-based 
DEP strategy (the phases are organized in a li-
nearly sequential order). 
Since the process of sense tree construction 
(cycle Phase_1 + Phase_4) has been made com-
pletely detachable from the parsing of the (atom-
ic) sense definitions (cycle Phase_2 + Phase_3), 
the whole SCD-based DEP process is much more 
efficient and robust. An efficiency feature of the 
SCD-based parsing technique is that, working 
exclusively on sense marker sequences, outputs 
of [B2] and [B3] cycles in Fig. 2 (i.e. sense trees) 
are obtained either the sense definition parsing 
process succeeds or not, either correct or not! 
These properties of the new parsing method 
with SCD configurations have been effectively 
supported by the parsing experiments on large 
Romanian, French, and German dictionaries. 
4 Romanian DLR Parsing  
The study of the application of SCD-
configuration to DEP started with the analysis of 
the DLR parsing (Curteanu et al, 2008). Fig. 3 
presents the hierarchy of SCD-config2 for DLR 
sense marker classes,  
Fig. 3. Hierarchy of DLR marker classes 
devoted to sense tree parsing. The dashed ar-
rows point to the upper or lower levels of DLR 
sense marker hierarchy, from the literal enume-
ration layer-embedded level. The continuous-
dashed arrows in Fig. 3 point downwards from 
the higher to the lower priority levels of DLR 
marker class hypergraph. Because of its special 
representation characteristics, the literal enume-
ration is illustrated on a layer attached to the hie-
a), b), c), ?   
   DLR Entry 
a), b), c), ?   
   A., B., C.,  ?   
a), b), c), ?   
   I., II., III.,  ?   
a), b), c), ?   
    1., 2., 3.,      
        
  
                 
                ?   
  
? 
BoldDefMark,  
ItalDefMark 
?
a), b), c), ? 
a), b), c), ? 
a), b), c), ? 
41
rarchy level (dashed line) to which it belongs, on 
each of the sense levels.  
A detailed description of the DLR sense tree 
extraction with SCD-config2 (denoted as DSSD 
algorithm) is found in (Curteanu et al, 2008). 
4.1 DLR Parsing: Problems and Results  
The three SCD-configurations establish the de-
pendencies among DLR senses (SCD-config1-2) 
and definitions (SCD-config3). However, DLR is 
encoded by default inheritance rules of senses 
(definitions), acting on all the node levels of the 
sense / definition trees. 
The sense tree parser (output of SCD-config2) 
was tested on more than 500 dictionary entries of 
large and medium sizes. The success rate was 
91.18%, being computed as a perfect match be-
tween the output of the program and the gold 
standard. Furthermore, it is worth noting that an 
entry with only one incorrect parse (i.e. one node 
in the sense tree attached incorrectly) was consi-
dered to be erroneously parsed in its entirety, an 
approach which disregards all the other correctly 
attached nodes in that entry.  
A first source of parsing errors is the non-
monotony of the marker values: ?A. [B. missing] 
? C. ??; ?2. [instead of 1.]... 2. ??; ??a)? b) 
? c) ? b) [instead of d)] ??. Another major 
source of parsing errors comes from the inherent 
ambiguity in deciding which is the regent and 
which is the dependent (sub)sense in marker se-
quences as ?1. a) b) c) ? [?]??.  
For evaluating SCD-config3, 52 dictionary en-
tries of various sizes were used as a gold stan-
dard, totaling a number of approximately 2000 
chunks and 22,000 words. The results are given 
in Table 2. Upon further analysis of the evalua-
tion results, the most frequent errors were found 
to be due to faulty sigle (abbreviation of the 
source of examples) segmentation. A detailed 
analysis of the error types for the DLR dictionary 
is discussed in (Curteanu et al, 2009). 
 
Evaluation 
Type 
Precision Recall 
F-
measure 
Exact Match 84.32% 72.09% 77.73% 
Overlap 92.18% 91.97% 92.07% 
Table 2: Evaluation results for segmentation of 
DLR atomic sense elements  
 
Correcting the acquisition of sigles leads to a 
94.43% f-measure for exact match (the number 
of correctly identified sense and definition units) 
and a 98.01% f-measure for overlap (the number 
of correctly classified words in each entry). To 
achieve the DLR parsing process completely, the 
last operation to be executed is to establish the 
dependency relations between atomic senses / 
definitions, under all the sense nodes in the com-
puted sense-tree of the entry. Currently, the DLR 
is parsed almost completely, including at atomic 
senses / definitions, the lexicographic segments 
and sense-trees being obtained with a correctness 
rate above 90% for explicitly marked sense defi-
nitions. 
5 Romanian DAR Parsing  
The structure of the main lexicographical seg-
ments in DAR is outlined below: 
I. The French Translation segment, denoted 
FreSeg, contains the French translations of the 
lemma and the main sense hierarchy of the entry 
word. The translation of the sense structure into 
Romanian and the complete description of the 
sense tree in DAR are in a subsumption relation. 
In some cases, the French translation may not 
exist for specific Romanian lemmas.  
II. The general description segment (RomSeg) 
is composed of several paragraphs and contains 
morphologic, syntactic, semantic, or usage in-
formation on the entry word. RomSeg usually 
starts with the entry word in italics (otherwise, 
the entry word occurs in the first row of the first 
paragraph). 
III. The third segment of a DAR entry, called 
SenseSeg, is the lexical-semantic description of 
the entry word. SenseSeg is the main objective of 
the lexicographic analysis of the entry parsing in 
order to obtain its sense tree. 
IV. The fourth segment of a DAR, NestSeg, 
contains one or more ?nests?, which are seg-
ments of text describing morphological, syntac-
tic, phonological, regional, etc. variants of an 
entry, sometimes with an attached description of 
the specific senses. The structure of the DAR 
nest segment is similar to that of a typical DAR 
entry, and the recursive nature of DAR entries 
comes from the sense parsing of nest segments. 
42
V. The fifth segment of DAR entries, denoted 
EtymSeg, contains etymological descriptions of 
the entry word and is introduced by an etymolo-
gy-dash (long dash ???). Among the five seg-
ments of a DAR entry, the only compulsory ones 
are FreSeg and SenseSeg. The other three seg-
ments are optional in the entry description, de-
pending on each entry word. 
5.1 DAR Marker Classes and Hierarchy 
The priority ordering of DAR marker classes is:  
1.  Capital letters (LatCapLett_Enum): A., B., ... 
2.  Capital roman numerals (LatCap-
Numb_Enum): I., II., ... 
3.  Arabic numerals (ArabNumb_Enum): 10., 20. 
These markers introduce the primary senses, in a 
similar manner to those in DLR. 
4. For introducing secondary senses, DAR uses 
the same sense markers used in DLR for defini-
tions of type MorfDef, RegDef, BoldDef, ItalDef, 
SpecDef, SpSpecDef, and DefExem, and a set of 
markers specific to DAR: ||, |, #, ?.  
5. According to the level of the lexical-semantic 
description, DAR uses literal enumeration on 
two levels: (5.a) lowercase Latin letters (LatS-
mallLett_Enum): a.), b.), ? (5.b) a LatSmal 
lLett_Enum can have another enumeration, using 
lowercase Greek letters (GreSmallLett_Enum): 
?.), ?.), ?.), ? 
The hierarchies for sense markers in DAR are 
given in Fig. 4. 
 
5.2 Special problems in DAR parsing 
A first difficulty for parsing the DAR lexico-
graphic segments is the occurrence of the 
New_Paragraph (NewPrg). For NewPrg marker  
 
Fig. 4: Dependency hypergraph for DAR 
 
recognition we used an implicit level of enumera-
tion, LatSmaNum_Enum discriminating the cases 
when NewPrg is (or not) accompanied by anoth-
er type of DAR sense marker.  
The second difficult problem in DAR parsing 
is the process of refining the NewPrg marker 
with literal enumerations (LatSmallLett_Enum), 
which can be in turn refined by an implicit enu-
meration using NewPrg. This has been solved by 
interpreting the sense levels for enumerations 
according to their context.  
Using SCD configurations, we have parsed 37 
DAR entries of large and medium sizes. The re-
sults of the DAR parsing have been evaluated 
manually, and we estimated the parsing precision 
as really promising, taking into account the diffi-
cult problems raised by DAR. The lack of a gold 
standard for DAR entries did not allow perform-
ing an automatic evaluation at this moment. 
 
DAR Entry Parsing (Excerpt): 
- <entry> 
- <lexsegm value="FreSeg." class="0"> 
- <sense value="LARG, -?" class="1"> 
  <definition>adj., s. a. ?i f. I. 1?. {i}Large, vaste.{/i} 2?. (Fig.) 
{i}Large, ample, majestueux. Largement. {/i}3?. {i}Au large, ? 
?{i}Femme l?g?re, dessal?e{/i}.</definition>  
- </sense > 
- </lexsegm > 
 
NewPrg + Lett_Numb_Enum 
  
DAR Entry 
NewPrg + Lett_Numb_Enum 
 
LatCapLett_Enum 
NewPrg + Lett_Numb_Enum 
 
ArabNumb_Enum 
NewPrg + Lett_Numb_Enum 
 
        ||, |, #, ? + DAR markers 
SpecDefMark 
Sp SpecDefMark 
MorfDefMark 
RegDefMark 
BoldDefMark 
ItalDefMark 
ExemDefMark 
NewPrg + Lett_Numb_Enum 
 
 
NewPrg + LatSmaNumb_Enum 
 
NewPrg + LatSmaNumb_Enum 
 
NewPrg + LatSmaLett_Enum 
 
Non-NewPrg * SmaLett_Enum 
Labeled hypernode 
 
LatSmaLett_Enum 
 
 
GreSmaLett_Enu  
Labeled hypernode 
S aLett_Enum 
43
- <segm value="SenseSeg." class="0"> 
- <sense value="I." class="8"> 
- <definition>  A d j. ?i a d v. </definition> 
- <sense value="1?." class="12"> 
- <definition>  
  A d j. (?n opozi?ie cu ? n g u s t) Extins ?n toate direc?iile; 
?{i}Larg {/i}{i}= {/i}largus.  
  <SRCCITE source="ANON. CAR.">ANON. 
CAR.</SRCCITE>   {i}Calea ceaia larg?.{/i}  
  <AUTHCITE source="EV." author="CORESI" sigla="CORESI, 
EV." ? 
  </definition> 
</sense> 
- <sense value="2?." class="12"> 
- <definition>  F i g. (Literar, dup? fr.) Mare, amplu, ? 
  <AUTHCITE source="C. I." volume="II" ?</AUTHCITE> ? 
  </definition> 
- <sense value="||" class="20"> 
  <definition>Adv. {i}Musafirul... se urca ?</definition>  
  </sense> 
  </sense> 
- <sense value="3?." class="12"> 
- <definition>  (?n func?iune predicativ?,?)  
?    ?   ?  
</definition> 
  </sense> 
  </sense> 
- <sense value="II." class="8"> 
- <definition>  S u b s t. </definition> 
- <sense value="1?. " class="12">  
- <definition>   S. a. L?rgime. {b}Inimii ?nchise...   </definition> 
  </sense> 
?    ?   ?  
- <sense value="2?." class="12"> 
- <sense value=" NewPrg " class="13"> 
  <definition>{i}L?RG?ME{/i} s f. v. {b}larg{/b}.</definition>  
  </sense> 
- <sense value="NewPrg" class="13"> 
  <definition>{i}L?RG?M?NT{/i} ? S. A. V. 
{i}larg{/i}.</definition>  
?    ?   ?  
  </sense> 
  </sense> 
  </lexsegm> 
  </entry> 
6 French TLF Parsing  
The French TLF, a very well-organized and 
structured thesaurus, provides both similarities 
and distinctive characteristics in comparison to 
the Romanian DLR. The structure of TLF lex-
icographic segments, obtained with the 
SCD-config1, is relatively simple. A TLF entry 
commences with the sense-description segment, 
optionally (but very frequently) followed by a 
package of ?final? segments, introduced by spe-
cific labels, as in the pattern:  
 REM. 1. ?  2. ?  3. ?   
 PRONONC. ET ORTH. ? ?  Eng.: ? 
 ?TYMOL. ET HIST. I. ... 1. a) ? b) ? 2. ?  
  3. ? II. ?  
 STAT. Fr?q. abs. litt?r.: ?          Fr?q. rel.  
  litt?r.: ?  
 D?R. 1. ?2. ?3. a) ? b) ? Rem. a) ? b) ? 
 BBG.  ?  
As one may notice, some final segments can 
enclose particular sense descriptions, similarly to 
those met in the proper sense-description seg-
ment. The sense markers in TLF resemble to 
those in DLR, but there are also significant dif-
ferences. The dependency hypergraph of the 
TLF marker classes is the following: 
?
?
?1., ?2.,?3., ...
Optional hypernode
Entry ? Root 
Optional hypernode
I., II., III., ...
Optional hypernode
A., B., C., ...
Optional hypernode
1., 2., 3., ...
Optional hypernode
a), b), c), ...
Optional hypernode
?, ?, ?, ...
Optional hypernode
Optional hypernode
 
Fig. 5. Dependency hypergraph of TLF  
sense marker classes  
 
Cross-linguistic hints involving TLF entry 
parsing with SCD configurations: (a) A new 
sense marker (compared to DLR) is ??? (inherit-
ance- dash), aiming to signal the presence of an 
inherited sense. (b) When ??? occurs after anoth-
er TLF marker, the ??? role is to inherit a parent 
sense (either regent or not) from the sense-tree. 
(c) When ??? begins at new paragraph (NewPrg), 
its role is of a intermediary subsense, inheriting 
the meaning of the regent (sub)sense. 
(d) Another new TLF marker is ??1., ?2., ?? 
(indexed, small red-ball), defining the new TLF 
sense concept: Indexed Examples to Definitions 
for the whole entry (denoted IdxDefExem). 
(e) The literal enumeration with Latin small let-
ters (LatSmaLett_Enum) is refined with Greek 
small letters (GreSmaLett_Enum). (f) In TLF, 
only the filled diamond ??? marker is present (as 
secondary sense); the empty diamond ??? is 
missing. (g) Some primary senses (?I.?, ?A.?) in 
44
TLF receive reversed priorities (Fig. 5) in the 
marker class hierarchy as compared to DLR.  
6.1 TLF Parsing Results  
For TLF, we processed 31 significant entries 
(TLFi, 2010) of medium and large dimensions 
(entries of 5 pages each, A4 format, in average) 
with the parser based on SCD configurations. 
The parsing results have been evaluated manual-
ly, the correctness rate being above 90%. One of 
the reasons of these very promising results for 
TLF parsing may be the regularity and standar-
dization of the TLF entry texts. An automatic, 
precise evaluation of the SCD-based parser was 
not possible since we are missing currently a 
gold-corpus of TLF entries.  
TLF Entry Parsing (Excerpt): 
- <entry> 
- <lexsegm value="SenseSeg." class="0"> 
- <sense value="ANNONCER" class="1"> 
+ <definition> - <sense value="I." class="2"> 
- <definition>   <i>Emploi trans.</i> ? ? 
  </definition> 
- <sense value="A." class="3"> 
  <definition>[Le suj. d?signe une pers.]</definition>  
- <sense value="1." class="4"> 
- <definition> 
  [L'obj. d?signe un ?v?nement] Faire conna?tre ? 
  </definition> 
- <sense value="a)" class="5"> 
- <definition> 
  [L'?v?nement concerne la vie quotidienne] ? 
  <i>Annoncer qqc. ? qqn, annoncer une bonne</i> ? ? 
  </definition> 
- <sense value="circle" class="10"> 
- <definition> 
  1. ? la mi-novembre, Costals ? 
  <b>annon?a</b>   son retour pour le 25. Dans la lettre ? 
  </definition> 
  </sense> 
- <sense value="circle" class="10"> 
- <definition> 
  2. ?lectre, fille d'un p?re puissant, r?duite?  
  <b>annonce</b> ? ? ?  
  </definition> 
  </sense> 
  </sense> 
- <sense value="b)" class="5"> 
- <definition> 
  <i>JEUX (de cartes). Faire une annonce.</i> ? 
  </definition> 
- <sense value="circle" class="10"> 
- <definition> 
  3. Celui qui la d?tient la belote ?  
  <b>annonce</b>   alors :   <i>belote,</i>  
? ?  
  </definition> 
  </sense> 
  </sense> 
? ? ?  
  </lexsegm> 
- <lexsegm value="FinSeg." class="0"> 
- <sense value="-" class="5"> 
- <definition>   <b>?TYMOL. ET HIST.</b> ? ? 
  <i>Ca</i>   1080   <i>anuncier</i>  
? ? ?  
  </definition> 
  </sense> 
?. ? ?  
- <definition> 
  <b>BBG.</b>   ALLMEN 1956. BRUANT 1901. ? 
  <b>ARRIV?E, subst. f?m.</b>  
  </definition> 
? ? ? 
  </sense> 
  </lexsegm> 
  </entry> 
7 Lexicographic Segments and Sense 
Markers in German DWB and GWB  
The German DWB entries comprise a complex 
structure of the lexicographic segments, which 
provide a non-uniform and non-unitary composi-
tion (Das Woerterbuch-Netz, 2010). One special 
feature is that DWB and GWB lexicographic 
segments are composed of two parts: a first (op-
tional) root-sense subsegment, and the segment 
body, which contain the explicit sense markers, 
easily recognizable. For DWB, the parsing of 
lexicographic segments is not at all a comfortable 
task since they are defined by three distinct 
means:  
(A) After the root-sense of a DWB entry, or 
after the root-sense of a lexicographic segment, 
(a list of) italicized-and-spaced key-words are 
placed to constitute the label of the lexicographic 
segment that follows. Samples of such key-word 
labels for DWB lexicographic segments are: 
?Form, Ausbildung und Ursprung?, ?Formen?, 
?Ableitungen?, 
?Verwandtschaft?,?Verwandtschaft und Form?, 
?Formelles und Etymologisches?, ?Gebrauch?, 
?Herkunft?, ?Grammatisches?, etc., or, for DWB 
sense-description segment: ?Bedeutung und 
Gebrauch? (or just ?Bedeutung?). In the example 
below, they are marked in grey.  
GRUND, m., dialektisch auch f. gemeingerm. 
wort; fraglich ist ? poln. russ. slov. nlaus. grunt m. 
f o r m  u n d  h e r k u n f t .  
1)  f?r das verst?ndnis der vorgeschichte des 
wortes ist die z w i e g e s c h l e c h t i g k e i t ... 
         H. V. SACHSENHEIM spiegel 177, 30;  
st?dtechron. 3, 51, 14. ? ? ? drey starcke grund 
6, 290. b e d e u t u n g .    die bedeutungsgeschichte 
des wortes ? ?  
I.  grund bezeichnet die feste untere begrenzung eines 
dinges.  
A.  grund von gew?ssern; seit ?ltester zeit belegbar: 
profundum (sc. mare) crunt ahd. gl. 1, 232, 18;  
45
1)  am h?ufigsten vom meer (in ?bereinstimmung mit 
dem anord. gebrauch): ... 
(B) The second way to specify the DWB cur-
rent lexicographic segments is to use their labels 
as key-words immediately after the primary 
sense markers. 
(C) The third (and most frequent) way to iden-
tify the lexical description segment(s) of a DWB 
entry is simply the lack of a segment label at the 
beginning of the sense description segment. By 
default, after the entry root-sense segment (which 
can be reduced to the Latin translation of the 
German lemma) the sense-description segment 
comes, without any ?Bedeutung? label, introduc-
ing explicit sense markers and definitions.  
7.1 German DWB and GWB Dependency 
Hypergraphs. Parsing Results  
Without coming into details (see the marker class 
dependency hypergraphs in Fig.6 and Fig.7), one 
can say with a good measure of truth that a gen-
eral resemblance hold between DAR  
Entry ? Root 
I., II., III., ...
A., B., C., ...
1., 2., 3., ...
a), b), c), ...
?, ?, ?, ...
??, ??, ??, ...
Definitions
DefExems
 
Fig. 6. DWB dependency hypergraph 
and DWB, and TLF and GWB, respectively. 
The sense markers in DWB are usual, with the 
remark that sense refinement by literal enumera-
tion is realized on three levels:  
LatSmaLett_Enum ( a), b), ?), GreSma-
Lett_Enum ( ?), ?), ?), and GreDoubleSma-
Lett_Enum ( ??), ??), ?). 
I , II , III , ...
A , B , C , ...
1 , 2 , 3 , ...
a , b , c , ... 
? , ? , ? , ...
?
Entry ? Root 
 
Fig. 7. GWB dependency hypergraph 
 
A number of 17 very large DWB entries have 
been parsed only with SCD-config1 and SCD-
config2. We appreciate on this small but signifi-
cant excerpt of DWB entries that parsing of the 
sense description segment at sense trees is per-
formed with a high precision, but delimitation of 
the lexicographic (sub-)segments and labels is a 
more difficult problem. The lack of a DWB entry 
gold corpus did not allow a precise, automated 
evaluation of the parser.  
8 Directions: Optimal Lexicon Design, 
Standardization, Lexicon Networks  
The special features of parsing with SCD confi-
gurations (SCD-configs) are: ? SCD-configs is a 
completely formal grammar-free approach which 
involves simple, efficient (weeks-time adapta-
ble), thus portable modeling and programs. ? In 
all currently existing DEP methods, the sense 
tree construction of each entry is, more or less, 
recursively embedded and mixed within the defi-
nition parsing procedures. ? SCD-configs pro-
vides a lexical-semantics refinement level on 
each SCD-config. ? SCD-configs separate and 
run sequentially, on independent levels (viz. con-
figurations), the processes of lexicographic seg-
ment recognition, sense tree extraction, and 
atomic definition parsing. ? This makes the 
whole DEP process with SCD-configs to be op-
timal. ? The sense marker classes and their de-
pendency hypergraphs, specific to each thesau-
rus, offer an unique instrument of lexicon con-
46
struction comparison, sense concept design and 
standardization. With the SCD parsing technique, 
one can easily compare the sense categories, 
their marking devices, the complexity and recur-
siveness measure of the sense dependency 
hypergraphs for each thesaurus.  
The cross-linguistic analysis of the five large 
thesauri showed the necessity of a careful lexi-
cal-semantics modeling of each dictionary. 
Equally important, many semantic and lexico-
graphic concepts such as sense markers and defi-
nitions, (indexed) examples to definitions, sense 
and source references etc. can be similar, adapta-
ble, and transferable between corresponding 
SCD-configurations of different thesauri.  
The SCD-configs analysis pointed out the 
need of a more general and adequate terminology 
for the lexical-semantics notions. E.g., compar-
ing the Romanian and French thesauri with the 
German ones, we decided that, while preserving 
the definition type labels MorfDef, DefExem, 
SpecDef and SpSpecDef, we should change the 
RegDef into GlossDef, BoldDef into IdiomDef, 
ItalDef into CollocDef, and add the TLF IdxDe-
fExem (an indexed DefExem) to the sense con-
cept set.  
The future experiments will continue with new 
thesauri parsing: Russian, Spanish, Italian, but 
the true challenge shall be oriented towards Chi-
nese / Japanese thesauri, aiming to establish a 
thorough lexical-semantics comparison and a 
language-independent, portable DEP technology 
based on SCD configurations. A further devel-
opment would be to align the Romanian thesauri 
sense and definition types to TEI P5 standards 
(XCES, 2007), and to design an optimal and 
cross-linguistic compatible network of Romanian 
electronic dictionaries, similar to a very good 
project of dictionary network, i.e. the German 
Woerterbuch-Netz (with links to TLFi entries 
too), whose twelve component lexicons include 
DWB and GWB.  
Acknowledgement. The present research was 
partly financed within the eDTLR grant, PNCDI 
II Project No. 91_013/18.09.2007. 
References 
DLR revision committee. (1952). Coding rules for 
DLR (in Romanian). Romanian Academy, Institute 
of Philology, Bucharest.  
Cristea, D., R?schip, M., For?scu, C., Haja, G., Flo-
rescu, C., Aldea, B., D?nil?, E. (2007). The Digital 
Form of the Thesaurus Dictionary of the Romanian 
Language. In Proc. of the 4th SpeD 2007. 
Curteanu, N., and E. Amih?esei. (2004). Grammar-
based Java Parsers for DEX and DTLR Romanian 
Dictionaries. ECIT-2004, Iasi, Romania. 
Curteanu, N. (2006). Local and Global Parsing with 
Functional (F)X-bar Theory and SCD Linguistic 
Strategy. (I.+II.), Computer Science Journal of 
Moldova, Academy of Science of Moldova, Vol. 
14 no. 1 (40):74-102; no. 2 (41):155-182. 
Curteanu, N., D. Trandab??, A. M. Moruz. (2008). 
Extracting Sense Trees from the Romanian The-
saurus by Sense Segmentation & Dependency 
Parsing, Proceedings of CogAlex Workshop, 
COLING 2008, ISBN 978-1-905593-56-9, :55-63.  
Curteanu, N., Moruz, A., Trandab??, D., Bolea, C., 
Sp?taru, M., Husarciuc, M. (2009). Sense tree 
parsing and definition segmentation in eDTLR 
Thesaurus, in Trandab?? et al (Eds.), Proc. of the 
Workshop "Linguistic Resources and Instruments 
for Romanian Language Processing", Iasi, Roma-
nia, "Al.I.Cuza" University Publishing House, 
ISSN 1843-911X, pp. 65-74, (in Romanian). 
Das Woerterbuch-Netz (2010): http://germazope.uni-
trier.de/Projects/WBB/woerterbuecher/ 
Hauser, R., and A. Storrer. (1993). Dictionary Entry 
Parsing Using the LexParse System. 
Lexikographica (9): 174-219.  
Kammerer, M. (2000). W?terbuchparsing 
Grunds?tzliche ?berlegungen und ein Kurzbericht 
?ber praktische Erfahrungen, http://www.matthias-
kammerer.de/content/WBParsing.pdf 
Le Tr?sor de la Langue Fran?aise informatis? (2010). 
http://atilf.atilf.fr/tlf.htm 
Lemnitzer, L., and C. Kunze. (2005). Dictionary En-
try Parsing, ESSLLI 2005.  
Neff, M., and B. Boguraev. (1989). Dictionaries, Dic-
tionary Grammars and Dictionary Entry Parsing, 
Proc. of the 27th ACL Vancouver, British Colum-
bia, Canada, :91 ? 101.  
Tufi?, Dan. (2001). From Machine Readable Dictio-
naries to Lexical Databases, RACAI, Romanian 
Academy, Bucharest, Romania.  
XCES TEI Standard, Variant P5. (2007). 
http://www.tei-c.org/Guidelines/P5/   
47
