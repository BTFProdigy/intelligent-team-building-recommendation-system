Proceedings of the NAACL HLT 2010 Student Research Workshop, pages 52?57,
Los Angeles, California, June 2010. c?2010 Association for Computational Linguistics
A Data Mining Approach to Learn Reorder Rules for SMT
Avinesh PVS
IIIT Hyderabad
Language Technologies Research Centre
avinesh@research.iiit.ac.in
Abstract
In this paper, we describe a syntax based
source side reordering method for phrase-
based statistical machine translation (SMT)
systems. The source side training corpus is
first parsed, then reordering rules are auto-
matically learnt from source-side phrases and
word alignments. Later the source side train-
ing and test corpus are reordered and given
to the SMT system. Reordering is a common
problem observed in language pairs of distant
language origins. This paper describes an au-
tomated approach for learning reorder rules
from a word-aligned parallel corpus using as-
sociation rule mining. Reordered and gener-
alized rules are the most significant in our ap-
proach. Our experiments were conducted on
an English-Hindi EILMT corpus.
1 Introduction
In recent years SMT systems (Brown et al,
1990), (Yamada and Knight, 2001), (Chiang,
2005), (Charniak et al, 2003) have been in focus. It
is easy to develop a MT system for a new pair of lan-
guages using an existing SMT system and a parallel
corpora. It isn?t a surprise to see SMT being attrac-
tive in terms of less human labour as compared to
traditional rule-based systems. However to achieve
good scores SMT requires large amounts of sentence
aligned parallel text. Such resources are available
only for few languages, whereas for many languages
the online resources are low. So we propose an ap-
proach for a pair of resource rich and resource poor
languages.
Some of the previous approaches include (Collins
et al, 2005), (Xia and McCord, 2004). Former
describes an approach for reordering the source
sentence in German-English MT system. Their
approach involves six transformations on the parsed
source sentence. Later propose an approach which
automatically extracts rewrite patterns by parsing
the source and target sides of the training corpus
for French-English pair. These rewritten patterns
are applied to the source sentence so that the source
and target word orders are similar. (Costa-jussa`
and Fonollosa, 2006) consider Part-Of-Speech
(POS) based source reordering as a translation
task. These approaches modify the source language
word order before decoding in order to produce a
word order similar to the target language. Later
the reordered sentence is given as an input to the
standard phrase-based decoder to be translated
without the reordering condition.
We propose an approach along the same lines
those described above. Here we follow a data
mining approach to learn the reordering/rewrite
rules applied on an English-Hindi MT system. The
rest of the paper is organized as follows. In Section
2 we briefly describe our approach. In Section 3 we
present a rule learning framework using Association
Rule Mining (Agrawal et al, 1993). Section 4
consists of experimental setup and sample rules
learnt. We present some discussion in Section 5 and
finally detail proposed future work in Section 6.
52
  
RB
9
. 15
11
S
ADVP,
,
PP
IN NP
,
NP VP .
ADJP
NP NP
RBS NNS
most
Like
2 things 3
1
4
5however
, 6
VBZ
NN
business 7 RB
is 8 not
JJ
risk?free10 12
VP
VBN
been 14
ADVP
never
RB has 13
VBZ
* Reodered Nodes
1:6  2:3  3:4  4:7  5:1  6:2  7:8  8:18  9:17 10:13  11:16  12:10  13:14  14:14  15:19
Alignments: Source Position : Target Position
CC
and
VP VP
Figure 1: English-Hindi Example
2 Approach
Our approach is inspired by Association rule min-
ing, a popular concept in data mining for discovering
interesting relations between items in large transac-
tion records. For example, the rule {milk, bread} ?
{butter} found in the customer database would indi-
cate if a customer buys milk and bread together, he
or she is also likely to buy butter. Similar notions
can be projected to the learning of reorder rules. For
example, {NNP, VB, NNP} ? {1,3,2} would indi-
cate if NNP,VB and NNP occur together in source
text, then its ordering on the target side would be
{1,3,2}. The original problem of association rule
mining doesn?t consider the order of items in the
rule, whereas in our problem order is important as
well.
In this approach we start with extracting the most
frequent patterns from the English language model.
The English language model consists of both POS
and chunk tag n-gram model built using SRILM
toolkit 1. Then to learn the reordering rules for these
patterns we used a word-aligned English-Hindi par-
allel corpus, where the alignments are generated us-
ing GIZA++ (Och and Ney, 2003). These align-
ments are used to learn the rewrite rules by calculat-
ing the target positions of the source nodes. Fig 1
shows an English phrase structure tree (PS) 2 and its
1http://www-speech.sri.com/projects/srilm/
2Stanford Parser: http://nlp.stanford.edu/software/lex-
alignments corresponding to the target sentence.
2.1 Calculation of target position:
Target position of a node is equal to the target
position of the head among the children (Aho and
Ullman, 1972). For example the head node of a NP
is the right most NN, NNP, NNS (or) NNX. Rules
developed by Collins are used to calculate the head
node (Collins, 2003).
Psn(T,Node)=Psn(T,Head(Node))
In Fig 1, Position of VP in target side is 18.
Psn(T,VP)=Psn(T,Head(VP))=Psn(T,VBZ)=18
3 Association rule mining
We modified the original definition by Rakesh Agar-
wal to suit our needs (Agrawal et al, 1993; Srikant
and Agrawal, 1995) . The problem here is defined
as: Let E=P:{e1,e2,e3,...en } be a sequence of N
children of a node P. Let A={a1,a2,a3,...an } be the
alignment set of the corresponding set E.
Let D=P:{ S1,S2,S3,...Sm } be set consisting of all
possible ordered sequence of children of the node P,
Ex: S1=S:{NP,VP,NP}, where S is the parent node
and NP, VP and NP are its children. Each set in D
has a unique ID, which represents the occurrence of
the source order of the children. A rule is defined
as an implication of the form X?Y where X?E and
parser.shtml
53
Y?Target Positions(E,A). The sets of items X and
Y are called LHS and RHS of the rule. To illus-
trate the concepts, we use a simple example from
the English-Hindi parallel corpus.
Consider the set of items I={Set of POS
tags}
?
{Set of Chunk tags}. For Example,
I={NN,VBZ,NNS,NP,VP} and an example rule
could be {NN,VBZ,NNS} ? {1,3,2}, which means
that when NN, VBZ and NNS occur in a continuous
pattern they are reordered to 1,3 and 2 positions
respectively on the target side. The above example
is a naive example. If we consider the training
corpus with the alignments we could use constraints
on various measures of significance. We use the
best-known constraints, namely minimum threshold
support and confidence. The support supp(X) of an
itemset X is defined as the proportion of sentences
which contain the itemset. The confidence of a rule
is defined as
conf(X?Y)=supp(X
?
Y)/supp(X).
Association rules require language specific mini-
mum support and minimum confidence at the same
time. To achieve this, association rule learning is
done in two steps. Firstly, minimum support is ap-
plied to find all frequent itemsets in the source lan-
guage model. In the second step, these frequent
itemsets and the minimum confidence constraints
are used to generate rules from the word-aligned par-
allel corpus.
3.1 Frequent Pattern mining
For the first task of collecting the most frequent
itemsets we used Fpgrowth algorithm 3 (Borgelt,
2005) implemented by Christian Borgelt. We used
a POS and a chunk tag English language model. In
a given parse tree the pattern model based on the or-
der of pre-terminals is called POS language model
and the pattern model based on the Non-terminals is
called the Chunk language model. The below algo-
rithm is run on every Non-terminal and pre-terminal
node of a parse tree. In the modified version of min-
ing frequent itemsets we also include generalization
of the frequent sets, similar to the work done by
(Chiang, 2005).
3http://www.borgelt.net/fpgrowth.html
Steps for extracting frequent LHSs: Consider
X1,X2,X3,X4,...Xx are all possible children of a
node S. The transaction here is the sequence of chil-
dren of the node S. The sample example is shown in
Fig 2.
1. Collect all occurrences of the children of a node
and their frequencies from the transactions and
name the set L1.
2. Calculate L2=L1 ? L1 which is the frequency
set of two elements.
3. Similarly calculate Ln, till n = maximum pos-
sible children of parent S.
4. Once the maximum possible set is calculated,
K-best frequent sets are collected and then el-
ements which occur above a threshold(?) are
combined to form a single element.
Ex, most common patterns occurring as a chil-
dren of NP are {JJ,NN,NN},{JJ,NN} etc.
5. The threshold was calculated based on various
experiments, and then set to ?=20% less than
the frequency of least frequent itemset between
the elements of the two L?s.
For example,
L3={JJ,NN}?{NN}={JJ,NN,NNP}.
If freq{JJ,NN}=10, and freq{NNP}=20 and
{JJ,NN,NNP}=9, ?=10-(20% of 10)=8.
So {JJ,NN} ? X1.
This way the generalized rules are learnt
for all the tables (Ln, Ln?1..L3). Using these
generalized rules, the initial transactions are
modified.
6. Recalculate L1,L2,..Ln based on the rules learnt
above. Continue the process until no new rules
are extracted at the end of the iteration.
3.2 Generate rules
The second problem is to generate association rules
for these large itemsets with the constraints of min-
imal confidence. Suppose one of the large itemsets
of a parent node S is Lk, Lk = P:{e1,e2,,ek }, as-
sociation rules with these itemsets are generated in
the following way: Firstly a set P:{ e1,e2,..ek } is
54
     
=
10
X2 X3 X4 X5X1  
 X1 X2 X3
X1 X2 X4
X0 X3 X5
X2 X3
X3 X5
X1 X2
X0 X3
corpus
X1 X2 X3
(patterns in the)Transactions
X2 12
X3 20
X4 25
X5 10
L
X1 X2 X3 X1 X2 K?best
Frequent
ItemsetsX12
Threshold
X1 15
S
X3 X4
L 2 = L L1
10
*1
.............. ...........
1
5
9
3
9
Update Val
Figure 2: N-stage Generalization
matched with the source sequences of parent P and
then their corresponding alignment information is
used to generate the target sequence. The numbers
on the rhs represent the position of the elements in
the target sentence. Then by checking the constraint
confidence this rule can be determined as interesting
or not. Constraint confidence used here is the prob-
ability of occurrence of the non-monotone rule.
If c1,c2,c3,c4...cx are the children of a Node X.
LHS is the original order of the children. RHS
is the sorted order of the children on the basis of
Psn(T,Psn(S,ci)), where 1?i?x.
From Fig 1, let us consider the top node and find
the rule based on the head based method.
Suppose that given from the above frequency
rule
Lk = S:{?PP? ?,? ?ADVP? ?,? ?NP? ?VP?}
Children(S) = ?PP? ?,? ?ADVP? ?,? ?NP? ?VP? ?.?
The target positions are calculated as shown in
Table 1: Target Positions of Children(S)
Psn(T,?PP?) = Psn(T,1) =6
Psn(T,?,?) = Psn(T,4) =7
Psn(T,?ADVP?) = Psn(T,5) =1
Psn(T,?,?) = Psn(T,6) =2
Psn(T,?NP?) =Psn(T,7) =8
Psn(T,?VP?) =Psn(T,8) =18
Psn(T,?.?) = Psn(T,15) =19
the Table 1. RHS is calculated based on the target
positions.
LHS = PP , ADVP , NP VP .
RHS = 3 4 1 2 5 6 7
3.2.1 Use of Generalization:
The above rule generated is the most commonly
occurring phenomenon in English to Hindi machine
translation. It is observed that adverbial phrase
generally occurs at the beginning of the sentence
on the Hindi side. The rule generated above will
be captured less frequently because the exact
pattern in LHS is rarely matched. Using the above
generalization in frequent itemset mining we can
merge all the most frequent occurring patterns into
a common pattern.
The above example pattern is modified to the below
using the generalization technique.
Rule: X1 ADVP , X2? 2 3 1 4
3.2.2 Rules and their Application
These generated rules are taken to calculate the
probability of the non-monotone rules with respect
to monotone rules. If the probability of the non-
monotone rule was?0.5 then the rule was appended
to the final list. The final list included all the gener-
alized and non-generalized rules of different parent
nodes.
The final list of rules is applied on both training
and test corpus based on the longest possible se-
quence match. If the rule matches, then the source
structures are reordered as per the rule. Specific
rules are given more priority over the generalized
rules.
55
4 Experiments
Table 2, Table 3 show some of the high frequency
and generalized rules. The total number of rules
learnt were 727 for a 11k training corpus. Number
of generalizations learnt were 54.
Table 2: Most Frequent Rules
Rule LHS RHS
1 IN NP 2 1
2 NP VP NP 1 3 2
3 NP PP 2 1
4 VBG PP 2 1
5 VBZ ADVP NP 2 3 1
Table 3: Generalized Rules
Rule LHS RHS
1 X1 ADVP , X2 2 3 1 4
2 X3 VBZ?VBG X4 1 3 2
3 ADVP X5 . 2 1 3
4 MD RB X6 3 1 2
5 VB X7 NP-TMP 2 3 1
Once the training and test sentences are reordered
using the above rules, they are fed to the Moses sys-
tem. It is clear that without reordering the perfor-
mace of the system is worst. Training and test data
consisted of 11,300 and 500 sentences respectively.
Table 4: Evaluation on Moses
Config Blue Score NIST
Moses Without Reorder 0.2123 5.5315
Moses + Our Reorder 0.2329 5.6605
Moses With Reorder 0.2475 5.7069
5 Discussion
Our method showed a drop in terms of blue score
as compared to Moses reordering; this is proba-
bly due to the reordering based on lexicalized rules
in Moses. The above generalization works effec-
tively in case of the Stanford parser as it stitches
the nodes at top level. English-Hindi tourism corpus
distributed as a part of ICON 2008 shared task. Our
learning based on phrase structure doesn?t handle
the movement of children across nodes. Whereas,
dependency structure based rule learning would help
in handling more constructs in terms of word-level
reordering patterns. Some of the least frequent pat-
terns are actually interesting patterns in terms of re-
ordering. Learning these kinds of patterns would be
a challenging task.
6 Future Work
Work has to be done in terms of prioritization of the
rules, for example first priority should be given to
more specific rules (the one with constraints) then to
the general rules. More constraints with respect to
morphological features would also help in improv-
ing the diversity of the rules. We will also look
into the linguistic clause based reordering features
which would help in reordering of distant pair of lan-
guages. Manual evaluation of the output will throw
some light on the effectiveness of this system. To
further evaluate the approach we would also try the
approach on someother distant language pairs.
References
Rakesh Agrawal, Tomasz Imielin?ski, and Arun Swami.
1993. Mining association rules between sets of items
in large databases. In SIGMOD ?93: Proceedings of
the 1993 ACM SIGMOD international conference on
Management of data, pages 207?216, New York, NY,
USA. ACM.
Alfred V. Aho and Jeffrey D. Ullman. 1972. The The-
ory of Parsing, Translation and Compiling, volume 1.
Prentice-Hall, Englewood Cliffs, NJ.
Christian Borgelt. 2005. An implementation of the fp-
growth algorithm. In OSDM ?05: Proceedings of the
1st international workshop on open source data min-
ing, pages 1?5, New York, NY, USA. ACM.
Peter F. Brown, John Cocke, Stephen A. Della Pietra,
Vincent J. Della Pietra, Fredrick Jelinek, John D. Laf-
ferty, Robert L. Mercer, and Paul S. Roossin. 1990. A
statistical approach to machine translation. COMPU-
TATIONAL LINGUISTICS, 16(2):79?85.
Eugene Charniak, Kevin Knight, and Kenji Yamada.
2003. Syntax-based language models for statistical
machine translation. In MT Summit IX. Intl. Assoc.
for Machine Translation.
David Chiang. 2005. A hierarchical phrase-based model
for statistical machine translation. In In ACL, pages
263?270.
56
Michael Collins, Philipp Koehn, and Ivona Kuc?erova?.
2005. Clause restructuring for statistical machine
translation. In ACL ?05: Proceedings of the 43rd An-
nual Meeting on Association for Computational Lin-
guistics, pages 531?540, Morristown, NJ, USA. Asso-
ciation for Computational Linguistics.
Michael Collins. 2003. Head-driven statistical models
for natural language parsing. Technical report.
Marta R. Costa-jussa` and Jose? A. R. Fonollosa. 2006.
Statistical machine reordering. In EMNLP ?06: Pro-
ceedings of the 2006 Conference on Empirical Meth-
ods in Natural Language Processing, pages 70?76,
Morristown, NJ, USA. Association for Computational
Linguistics.
Franz Josef Och and Hermann Ney. 2003. A system-
atic comparison of various statistical alignment mod-
els. Computational Linguistics, 29(1):19?51.
Ramakrishnan Srikant and Rakesh Agrawal. 1995. Min-
ing generalized association rules. In Research Report
RJ 9963, IBM Almaden Research.
Fei Xia and Michael McCord. 2004. Improving a sta-
tistical mt system with automatically learned rewrite
patterns. In COLING ?04: Proceedings of the 20th
international conference on Computational Linguis-
tics, page 508, Morristown, NJ, USA. Association for
Computational Linguistics.
Kenji Yamada and Kevin Knight. 2001. A syntax-based
statistical translation model. In ACL ?01: Proceedings
of the 39th Annual Meeting on Association for Compu-
tational Linguistics, pages 523?530, Morristown, NJ,
USA. Association for Computational Linguistics.
57
Proceedings of the 2010 Named Entities Workshop, ACL 2010, pages 81?84,
Uppsala, Sweden, 16 July 2010. c?2010 Association for Computational Linguistics
Phrase-based Transliteration System with Simple Heuristics
Avinesh PVS and Ankur Parikh
IIIT Hyderabad
Language Technologies Research Centre
{avinesh,shaileshkumar.parikh}@students.iiit.ac.in
Abstract
This paper presents modeling of translit-
eration as a phrase-based machine transla-
tion system. We used a popular phrase-
based machine translation system for
English-Hindi machine transliteration. We
have achieved an accuracy of 38.1% on the
test set. We used some basic rules to mod-
ulate the existing phrased-based transliter-
ation system. Our experiments show that
phrase-based machine translation systems
can be adopted by modulating the system
to fit the transliteration problem.
1 Introduction
Transliteration is the practice of converting a text
from one writing system into another in a system-
atic way. Most significantly it is used in Machine
Translation (MT) systems, Information Retrieval
systems where a large portion of unknown words
(out of vocabulary) are observed. Named enti-
ties (NE), technical words, borrowed words and
loan words constitute the majority of the unknown
words. So, transliteration can also be termed as
the process of obtaining the phonetic translation
of names across various languages (Shishtla et al,
2009). Transcribing the words from one language
to another without the help of bilingual dictionary
is a challenging task.
Previous work in transliteration include
(Surana and Singh, 2009) who propose a translit-
eration system using two different approaches
of transliterating the named entities based on
their origin. (Sherif and Kondrak, 2007) use
the Viterbi based monotone search algorithm for
searching possible candidate sub-string translit-
erations. (Malik, 2006) solved some special
cases of transliteration for Punjabi using a set of
transliteration rules.
In the recent years Statistical Machine Trans-
lation (SMT) systems (Brown et al, 1990), (Ya-
mada and Knight, 2001), (Chiang, 2005), (Char-
niak et al, 2003) have been in focus. It is easy
to develop a MT system for a new pair of lan-
guage using an existing SMT system and a par-
allel corpora. It isn?t a surprise to see SMT being
attractive in terms of less human labour as com-
pared to other traditional systems. These SMT
systems have also become popular in the transliter-
ation field (Finch and Sumita, 2008), (Finch and
Sumita, 2009), (Rama and Gali, 2009). (Finch
and Sumita, 2008) use a bi-directional decoder
whereas (Finch and Sumita, 2009) use a machine
translation system comprising of two phrase-based
decoders. The first decoder generated from first
token of the target to the last. The second decoder
generated the target from last to first. (Rama and
Gali, 2009) modeled the phrase-based SMT sys-
tem using minimum error rate training (MERT) for
learning model weights.
In this paper we present a phrase-based ma-
chine transliteration technique with simple heuris-
tics for transliterating named entities of English-
Hindi pair using small amount of training and de-
velopment data. The structure of our paper is as
follows. Section 2 describes the modeling of trans-
lation problem to transliteration. Modeling of the
parameters and the heuristics are presented in Sec-
tion 3. Section 4 and 5 we give a brief description
about the data-set and error-analysis. Finally we
conclude in Section 6.
2 Modeling Approach
Transliteration can be viewed as a task of
character-level machine translation process. Both
the problems involve transformation of source to-
kens in one language to target tokens in another
language.
Transliteration differs from machine translation in
two ways (Finch and Sumita, 2009):
1. Reordering of the target tokens is generally
81
h a n m A nu a
h a n u m a nHANUMAN   
hanumAna
hanuman
hanumAna
Input Lowercase After Giza Alignments
h
h
a
a
n
n
u
u
m a
A
n
n am
Post?Processing
Figure 1: English-Hindi transliteration example through our system(To represent Hindi font roman script
is used)
abscent in transliteration.
2. Number of token types (vocabulary) in the
data is relatively very less and finite as com-
pared to the translation data.
The work in this paper is related to the work of
(Rama and Gali, 2009) who also use SMT directly
to transliterate. We can model the translation
problem to transliteration problem by replacing
words with characters. So instead of sentences
let us assume a given word is represented as a
sequence of characters of the source language
F=f1,f2,f3,...fn which needs to be transcribed as
a sequence of characters in the target language
E=e1,e2,e3,...em. 1
The best possible target language sequence of
characters among the possible candidate charac-
ters can be represented as:
Ebest = ArgmaxE P(E|F)
The above equation can be represented in terms
of noisy channel model using Bayes Rule:
Ebest = ArgmaxE P(F|E) ? P(E)
Here P(F|E) represents the transcription model
where as P(E) represents the language model i.e
the character n-gram of the target language. The
above equation returns the best possible output
sequence of characters for the given sequence of
characters F.
We used some heuristics on top of Moses tool
kit, which is a publicly available tool provided by
(Hoang et al, 2007).
1F,E is used to name source and target language sequences
as used in conventional machine translation notations
3 Method
3.1 Pre-processing
Firstly the data on the English side is converted to
lowercase to reduce data sparsity. Each character
of the words in the training and development data
are separated with spaces. We also came across
multi-word sequences which posed a challenge for
our approach. We segmented the multi-words into
separate words, such that they would be transliter-
ated as different words.
3.2 Alignment and Post Processing
Parallel word lists are given to GIZA++ for char-
acter alignments. We observed grow-diag-final-
and as the best alignment heuristic. From the
differences mentioned above between translitera-
tion and translation we came up with some simple
heuristics to do post processing on the GIZA++
alignments.
1. As reordering of the target tokens is not al-
lowed in transliteration. Crossing of the arcs
during the alignments are removed.
As shown in Fig 1. above.
The second A ? a is removed as it was cross-
ing the arcs.
2. If the target character is aligned to NULL
character on the source side then the NULL
is removed, and the target language character
is aligned to the source character aligned to
previous target character.
From Fig 1.
n ? n
NULL ? a
to
82
n ? na
3.3 Training and Parameter Tuning
The language models and translation models were
built on the combined training and the develop-
ment data. But the learning of log-linear weights
during the MERT step is done using development
data separately. It is obvious that the system would
perform better if it was trained on the combined
data. 8-gram language model and a maximum
phrase length of 7 is used during training.
The transliteration systems were modeled using
the minimum error rate training procedure intro-
duced by (Och, 2003). We used BLUE score as a
evaluation metric for our convenience during tun-
ing. BLUE score is commonly used to evaluate
machine translation systems and it is a function of
geometric mean of n-gram precision. It was ob-
served that improvement of the BLUE score also
showed improvements in ACC.
4 Experiments and Results
Training data of 9975 words is used to build
the system models, while the development data
of 1974 words is used for tuning the log-linear
weights for the translation engines. Our accuracies
on test-data are reported in Table 1. Due to time
constraints we couldn?t focus on multiple correct
answers in the training data, we picked just the
first one for our training. Some of the translation
features like word penalty, phrase penalty, reorder
parameters don?t play any role in transliteration
process hence we didn?t include them.
Before the release of the test-data we tested the
system without tuning i.e. default weights were
used on the development data. Later once the test-
data was released the system was tuned on the de-
velopment data to model the weights. We evalu-
ated our system on ACC which accounts for Word
Accuracy for top-1, Mean F-score, Mean Recipro-
cal Rank (MRR).
Table 1: Evaluation on Test Data
Measure Result
ACC 0.381
Mean F-score 0.860
MRR 0.403
MAPref 0.381
5 Error Analysis
From the reference corpora we examined that ma-
jority of the errors were due to foreign origin
words. As the phonetic transcription of these
words is different from the other words. We also
observed from error analysis that the correct tar-
get sequence of characters were occurring at lower
rank in the 20-best list. We would like to see how
different ranking mechanisms like SVM re-rank
etc would help in boosting the correct accuracies
of the system.
6 Conclusion
In this paper we show that the usage of some
heuristics on top of popular phrase-based machine
translation works well for the task of translit-
eration. First the source and target characters
are aligned using GIZA++. Then some heuris-
tics are used to modify the alignments. These
modified alignments are used during estimation
of the weights during minimum error rate train-
ing (MERT). Finally the Hindi characters are de-
coded using the beam-search based decoder. We
also produced the 20-best outputs using the n-best
list provided by moses toolkit. It is very interesting
to see how simple heuristics helped in performing
better than other systems.
References
Peter F. Brown, John Cocke, Stephen A. Della Pietra,
Vincent J. Della Pietra, Fredrick Jelinek, John D.
Lafferty, Robert L. Mercer, and Paul S. Roossin.
1990. A statistical approach to machine translation.
COMPUTATIONAL LINGUISTICS, 16(2):79?85.
Eugene Charniak, Kevin Knight, and Kenji Yamada.
2003. Syntax-based language models for statistical
machine translation. In MT Summit IX. Intl. Assoc.
for Machine Translation.
David Chiang. 2005. A hierarchical phrase-based
model for statistical machine translation. In In ACL,
pages 263?270.
Andrew Finch and Eiichiro Sumita. 2008. Phrase-
based machine transliteration. In In Proc. 3rd Int?l.
Joint Conf NLP, volume 1.
Andrew Finch and Eiichiro Sumita. 2009. Translit-
eration by bidirectional statistical machine transla-
tion. In NEWS ?09: Proceedings of the 2009 Named
Entities Workshop: Shared Task on Transliteration,
pages 52?56, Morristown, NJ, USA. Association for
Computational Linguistics.
83
Hieu Hoang, Alexandra Birch, Chris Callison-burch,
Richard Zens, Rwth Aachen, Alexandra Constantin,
Marcello Federico, Nicola Bertoldi, Chris Dyer,
Brooke Cowan, Wade Shen, Christine Moran, and
Ondej Bojar. 2007. Moses: Open source toolkit for
statistical machine translation. pages 177?180.
M. G. Abbas Malik. 2006. Punjabi machine translit-
eration. In ACL-44: Proceedings of the 21st Inter-
national Conference on Computational Linguistics
and the 44th annual meeting of the Association for
Computational Linguistics, pages 1137?1144, Mor-
ristown, NJ, USA. Association for Computational
Linguistics.
Franz Josef Och. 2003. Minimum error rate train-
ing in statistical machine translation. In ACL ?03:
Proceedings of the 41st Annual Meeting on Asso-
ciation for Computational Linguistics, pages 160?
167, Morristown, NJ, USA. Association for Compu-
tational Linguistics.
Taraka Rama and Karthik Gali. 2009. Modeling ma-
chine transliteration as a phrase based statistical ma-
chine translation problem. In NEWS ?09: Proceed-
ings of the 2009 Named Entities Workshop: Shared
Task on Transliteration, pages 124?127, Morris-
town, NJ, USA. Association for Computational Lin-
guistics.
Tarek Sherif and Grzegorz Kondrak. 2007. Substring-
based transliteration. In Proceedings of the 45th An-
nual Meeting of the Association of Computational
Linguistics, pages 944?951, Prague, Czech Repub-
lic, June. Association for Computational Linguis-
tics.
Praneeth Shishtla, V. Surya Ganesh, Sethuramalingam
Subramaniam, and Vasudeva Varma. 2009. A
language-independent transliteration schema using
character aligned models at news 2009. In NEWS
?09: Proceedings of the 2009 Named Entities Work-
shop: Shared Task on Transliteration, pages 40?
43, Morristown, NJ, USA. Association for Compu-
tational Linguistics.
Harshit Surana and Anil Kumar Singh. 2009. Digitiz-
ing The Legacy of Indian Languages. ICFAI Books,
Hyderabad.
Kenji Yamada and Kevin Knight. 2001. A syntax-
based statistical translation model. pages 523?530.
84
Proceedings of SSST-4, Fourth Workshop on Syntax and Structure in Statistical Translation, pages 34?42,
COLING 2010, Beijing, August 2010.
Phrase Based Decoding using a Discriminative Model
Prasanth Kolachina
LTRC, IIIT-Hyderabad
{prasanth k}@research.iiit.ac.in
Sriram Venkatapathy
LTRC, IIIT-Hyderabad
{sriram}@research.iiit.ac.in
Srinivas Bangalore
AT&T Labs-Research, NY
{srini}@research.att.com
Sudheer Kolachina
LTRC, IIIT-Hyderabad
{sudheer.kpg08}@research.iiit.ac.in
Avinesh PVS
LTRC, IIIT-Hyderabad
{avinesh}@research.iiit.ac.in
Abstract
In this paper, we present an approach to
statistical machine translation that com-
bines the power of a discriminative model
(for training a model for Machine Transla-
tion), and the standard beam-search based
decoding technique (for the translation of
an input sentence). A discriminative ap-
proach for learning lexical selection and
reordering utilizes a large set of feature
functions (thereby providing the power to
incorporate greater contextual and linguis-
tic information), which leads to an effec-
tive training of these models. This model
is then used by the standard state-of-art
Moses decoder (Koehn et al, 2007) for the
translation of an input sentence.
We conducted our experiments on
Spanish-English language pair. We used
maximum entropy model in our exper-
iments. We show that the performance
of our approach (using simple lexical
features) is comparable to that of the
state-of-art statistical MT system (Koehn
et al, 2007). When additional syntactic
features (POS tags in this paper) are used,
there is a boost in the performance which
is likely to improve when richer syntactic
features are incorporated in the model.
1 Introduction
The popular approaches to machine translation
use the generative IBM models for training
(Brown et al, 1993; Och et al, 1999). The param-
eters for these models are learnt using the stan-
dard EM Algorithm. The parameters used in these
models are extremely restrictive, that is, a simple,
small and closed set of feature functions is used
to represent the translation process. Also, these
feature functions are local and are word based. In
spite of these limitations, these models perform
very well for the task of word-alignment because
of the restricted search space. However, they per-
form poorly during decoding (or translation) be-
cause of their limitations in the context of a much
larger search space.
To handle the contextual information, phrase-
based models were introduced (Koehn et al,
2003). The phrase-based models use the word
alignment information from the IBM models and
train source-target phrase pairs for lexical se-
lection (phrase-table) and distortions of source
phrases (reordering-table). These models are still
relatively local, as the target phrases are tightly as-
sociated with their corresponding source phrases.
In contrast to a phrase-based model, a discrim-
inative model has the power to integrate much
richer contextual information into the training
model. Contextual information is extremely use-
ful in making lexical selections of higher quality,
as illustrated by the models for Global Lexical Se-
lection (Bangalore et al, 2007; Venkatapathy and
34
Bangalore, 2009).
However, the limitation of global lexical se-
lection models has been sentence construction.
In global lexical selection models, lattice con-
struction and scoring (LCS) is used for the pur-
pose of sentence construction (Bangalore et al,
2007; Venkatapathy and Bangalore, 2009). In our
work, we address this limitation of global lexi-
cal selection models by using an existing state-of-
art decoder (Koehn et al, 2007) for the purpose
of sentence construction. The translation model
used by this decoder is derived from a discrimina-
tive model, instead of the usual phrase-table and
reordering-table construction algorithms. This al-
lows us to use the effectiveness of an existing
phrase-based decoder while retaining the advan-
tages of the discriminative model. In this paper,
we compare the sentence construction accuracies
of lattice construction and scoring approach (see
section 4.1 for LCS Decoding) and the phrase-
based decoding approach (see section 4.2).
Another advantage of using a discriminative ap-
proach to construct the phrase table and the re-
ordering table is the flexibility it provides to in-
corporate linguistic knowledge in the form of ad-
ditional feature functions. In the past, factored
phrase-based approaches for Machine Translation
have allowed the use of linguistic feature func-
tions. But, they are still bound by the local-
ity of context, and definition of a fixed struc-
ture of dependencies between the factors (Koehn
and Hoang, 2007). Furthermore, factored phrase-
based approaches place constraints both on the
type and number of factors that can be incorpo-
rated into the training. In this paper, though we do
not extensively test this aspect, we show that us-
ing syntactic feature functions does improve the
performance of our approach, which is likely to
improve when much richer syntactic feature func-
tions (such as information about the parse struc-
ture) are incorporated in the model.
As the training model in a standard phrase-
based system is relatively impoverished with re-
spect to contextual/linguistic information, integra-
tion of the discriminative model in the form of
phrase-table and reordering-table with the phrase-
based decoder is highly desirable. We propose to
do this by defining sentence specific tables. For
example, given a source sentence s, the phrase-
table contains all the possible phrase-pairs condi-
tioned on the context of the source sentence s.
In this paper, the key contributions are,
1. We combine a discriminative training model
with a phrase-based decoder. We ob-
tained comparable results with the state-of-
art phrase-based decoder.
2. We evaluate the performance of the lattice
construction and scoring (LCS) approach to
decoding. We observed that even though the
lexical accuracy obtained using LCS is high,
the performance in terms of sentence con-
struction is low when compared to phrase-
based decoder.
3. We show that the incorporation of syntactic
information (POS tags) in our discriminative
model boosts the performance of translation.
In future, we plan to use richer syntactic fea-
ture functions (which the discriminative ap-
proach allows us to incorporate) to evaluate
the approach.
The paper is organized in the following sec-
tions. Section 2 presents the related work. In
section 3, we describe the training of our model.
In section 4, we present the decoding approaches
(both LCS and phrase-based decoder). We de-
scribe the data used in our experiments in section
5. Section 6 consists of the experiments and re-
sults. Finally we conclude the paper in section 7.
2 Related Work
In this section, we present approaches that are di-
rectly related to our approach. In Direct Trans-
lation Model (DTM) proposed for statistical ma-
chine translation by (Papineni et al, 1998; Och
and Ney, 2002), the authors present a discrimi-
native set-up for natural language understanding
(and MT). They use a slightly modified equation
(in comparison to IBM models) as shown in equa-
tion 1. In equation 1, they consider the translation
model from f ? e (p(e|f)), instead of the the-
oretically sound (after the application of Bayes?
rule), e ? f (p(f |e)) and use grammatical fea-
tures such as the presence of equal number of
35
verbs forms etc.
e? = argmax
e
pTM (e|f) ? pLM (e) (1)
In their model, they use generic feature func-
tions such as language model, cooccurence fea-
tures such as presence of a lexical relationship in
the lexicon. Their search algorithm limited the use
of complex features.
Direct Translation Model 2 (DTM2) (Itty-
cheriah and Roukos, 2007) expresses the phrase-
based translation task in a unified log-linear prob-
abilistic framework consisting of three compo-
nents:
1. a prior conditional distribution P0
2. a number of feature functions ?i() that cap-
ture the effects of translation and language
model
3. the weights of the features ?i that are esti-
mated using MaxEnt training (Berger et al,
1996) as shown in equation 2.
Pr(e|f) = P0(e, j|f)Z exp
?
i
?i?i(e, j, f) (2)
In the above equation, j is the skip reordering
factor for the phrase pair captured by?i() and rep-
resents the jump from the previous source word.
Z represents the per source sentence normaliza-
tion term (Hassan et al, 2009). While a uni-
form prior on the set of futures results in a max-
imum entropy model, choosing other priors out-
put a minimum divergence models. Normalized
phrase count has been used as the prior P0 in the
DTM2 model.
The following decision rule is used to obtain opti-
mal translation.
e? = argmax
e
Pr(e|f)
= argmax
e
M?
m=1
?m?m(f, e)
(3)
The DTM2 model differs from other phrase-
based SMT models in that it avoids the redun-
dancy present in other systems by extracting from
a word aligned parallel corpora a set of minimal
phrases such that no two phrases overlap with
each other (Hassan et al, 2009).
The decoding strategy in DTM2 (Ittycheriah
and Roukos, 2007) is similar to a phrase-based de-
coder except that the score of a particular transla-
tion block is obtained from the maximum entropy
model using the set of feature functions. In our
approach, instead of providing the complete scor-
ing function ourselves, we compute the parame-
ters needed by a phrase based decoder, which in
turn uses these parameters appropriately. In com-
parison with the DTM2, we also use minimal non-
overlapping blocks as the entries in the phrase ta-
ble that we generate.
Xiong et al (2006) present a phrase reordering
model under the ITG constraint using a maximum
entropy framework. They model the reordering
problem as a two-class classification problem, the
classes being straight and inverted. The model is
used to merge the phrases obtained from trans-
lating the segments in a source sentence. The
decoder used is a hierarchical decoder motivated
from the CYK parsing algorithm employing a
beam search algorithm. The maximum entropy
model is presented with features extracted from
the blocks being merged and probabilities are es-
timated using the log-linear equation shown in
(4). The work in addition to lexical features and
collocational features, uses an additional metric
called the information gain ratio (IGR) as a fea-
ture. The authors report an improvement of 4%
BLEU score over the traditional distance based
distortion model upon using the lexical features
alone.
p?(y|x) =
1
Z?(x)
exp(
?
i
?i?i(x, y)) (4)
3 Training
The training process of our approach has two
steps:
1. training the discriminative models for trans-
lation and reordering.
2. integrating the models into a phrase based
decoder.
36
The input to our training step are the word-
alignments between source and target sentences
obtained using GIZA++ (implementation of IBM,
HMM models).
3.1 Training discriminative models
We train two models, one to model the transla-
tion of source blocks, and the other to model the
reordering of source blocks. We call the transla-
tion model a ?context dependent block translation
model? for two reasons.
1. It is concerned with the translation of mini-
mal phrasal units called blocks.
2. The context of the source block is used dur-
ing its translation.
The word alignments are used to obtain the set
of possible target blocks, and are added to the tar-
get vocabulary. A target block b is a sequence of n
words that are paired with a sequence ofm source
words (Ittycheriah and Roukos, 2007). In our ap-
proach, we restrict ourselves to target blocks that
are associated with only one source word. How-
ever, this constraint can be easily relaxed.
Similarly, we call the reordering model, a ?con-
text dependent block distortion model?. For train-
ing, we use the maximum entropy software library
Llama presented in (Haffner, 2006).
3.1.1 Context Dependent Block Translation
Model
In this model, the goal is to predict a target
block given the source word and contextual and
syntactic information. Given a source word and its
lexical context, the model estimates the probabil-
ities of the presence or absence of possible target
blocks (see Figure 1).
The probabilities of the candidate target blocks
are obtained from the maximum entropy model.
The probability pei of a candidate target block ei
is estimated as given in equation 5
pei = P (true|ei, fj , C) (5)
where fj is the source word corresponding to ei
and C is its context.
Using the maximum entropy model, binary
classifiers are trained for every target block in the
context window
source word
word syntactically dependent
SOURCE SENTENCE
target word 1 prob p1
............
target word 2 prob p2
prob pKtarget word K
on source word
Figure 1: Word prediction model
vocabulary. These classifiers predict if a particu-
lar target block should be present given the source
word and its context. This model is similar to the
global lexical selection (GLS) model described in
(Bangalore et al, 2007; Venkatapathy and Banga-
lore, 2009) except that in GLS, the predicted tar-
get blocks are not associated with any particular
source word unlike the case here.
For the set of experiments in this paper, we used
a context of size 6, containing three words to the
left and three words to the right. We also used
the POS tags of words in the context window as
features. In future, we plan to use the words syn-
tactically dependent on a source word as global
context(shown in Figure 1).
3.1.2 Context Dependent Block Distortion
Model
An IBM model 3 like distortion model is
trained to predict the relative position of a source
word in the target given its context. Given a
source word and its context, the model estimates
the probability of particular relative position be-
ing an appropriate position of the source word in
the target (see Figure 2).
context window
source wordSOURCE SENTENCE
0p0
1p1 2p2 wpw?1p?1?2p?2?wp?w ...
...
word syntactically dependent
on source word
Figure 2: Position prediction model
Using a maximum entropy model similar to
37
the one described in the context dependent block
translation model, binary classifiers are trained
for every possible relative position in the target.
These classifiers output a probability distribution
over various relative positions given a source word
and its context.
The word alignments in the training corpus are
used to train the distortion model. While comput-
ing the relative position, the difference in sentence
lengths is also taken into account. Hence, the rela-
tive position of the target block located at position
i corresponding to the source word located at po-
sition j is given in equation 6.
r = round(i ? mn ? j) (6)
where, m is the length of source sentence and n is
the number of target blocks. round is the function
to compute the nearest integer of the argument. If
the source word is not aligned to any target word,
a special symbol ?INF? is used to indicate such a
case. In our model, this symbol is also a part of
the target distribution.
The features used to train this model are the
same as those used for the block translation
model. In order to use further lexical information,
we also incorporated information about the target
word for predicting the distribution. The informa-
tion about possible target words is obtained from
the ?context dependent block translation model?.
The probabilities in this case are measured as
shown in equation 7
pr,ei = P (true|r, ei, fj , C) (7)
3.2 Integration with phrase-based decoder
The discriminative models trained are sentence
specific, i.e. the context of the sentence is used
to make predictions in these models. Hence,
the phrase-based decoder is required to use in-
formation specific to a source sentence. In order
to handle this issue, a different phrase-table and
reordering-table are constructed for every input
sentence. The phrase-table and reordering-table
are constructed using the discriminative models
trained earlier.
In Moses (Koehn et al, 2007), the phrase-
table contains the source phrase, the target phrase
and the various scores associated with the phrase
pair such as phrase translation probability, lexical
weighting, inverse phrase translation probability,
etc.1
In our approach, given a source sentence, the
following steps are followed to construct the
phrase table.
1. Extract source blocks (?words? in this work)
2. Use the ?context dependent block translation
model? to predict the possible target blocks.
The set of possible blocks can be predicted
using two criteria, (1) Probability threshold,
and (2) K-best. Here, we use a threshold
value to prune the set of possible candidates
in the target vocabulary.
3. Use the prediction probabilities to assign
scores to the phrase pairs.
A similar set of steps is used to construct the
reordering-table corresponding to an input sen-
tence in the source language.
4 Decoding
4.1 Decoding with LCS Decoder
The lattice construction and scoring algorithm, as
the name suggests, consists of two steps,
1. Lattice construction
In this step, a lattice representing various
possible target sequences is obtained. In the
approach for global lexical selection (Banga-
lore et al, 2007; Venkatapathy and Banga-
lore, 2009), the input to this step is a bag of
words. The bag of words is used to construct
an initial sequence (a single path lattice). To
this sequence, deletion arcs are added to in-
corporate additional paths (at a cost) that fa-
cilitate deletion of words in the initial se-
quence. This sequence is permuted using a
permutation window in order to construct a
lattice representing possible sequences. The
permutation window is used to control the
search space.
In our experiments, we used a similar process
for sentence construction. Using the con-
text dependent block translation algorithm,
1http://www.statmt.org/moses/?n=FactoredTraining.ScorePhrases
38
we obtain a number of translation blocks for
every source word. These blocks are inter-
connected in order to obtain the initial lattice
(see figure 3).
f_(i?1) f_(i) f_(i+1)
t_(i?1,1)
t_(i?1,2)
t_(i?1,3)
t_(i,2)
t_(i,1) t_(i+1,1)
t_(i+1,2)
t_(i+1,3)
.... ...............
SOURCE SENTENCE
INTIAL TARGET LATTICE
Figure 3: Lattice Construction
To control deletions at various source posi-
tions, deletion nodes may be added to the
initial lattice. This lattice is permuted us-
ing a permutation window to construct a lat-
tice representing possible sequences. Hence,
the parameters that dictate lattice construc-
tion are, (1) Threshold for lexical selection,
(2) Using deletion arcs or not, and (3) Per-
mutation window.
2. Scoring
In this step, each of the paths in the lattice
constructed in the earlier step is scored us-
ing a language model (Haffner, 2006), which
is same as the one used in the sentence con-
struction in global lexical selection models.
It is to be noted that we do not use the dis-
criminative reordering model in this decoder,
and only the language model is used to score
various target sequences.
The path with the lowest score is considered
the best possible target sentence for the given
source sentence. Using this decoder, we con-
ducted experiments on the development set by
varying threshold values and the size of the per-
mutation window. The best parameter values ob-
tained using the development set were used for de-
coding the test corpus.
4.2 Decoding with Moses Decoder
In this approach, the phrase-table and the
reordering-table are constructed using the dis-
criminative model for every source sentence (see
section 3.2). These tables are then used by the
state-of-art Moses decoder to obtain correspond-
ing translations.
The various training and decoding parameters
of the discriminative model are computed by ex-
haustively exploring the parameter space, and cor-
respondingly measuring the output quality on the
development set. The best set of parameters were
used for decoding the sentences in the test corpus.
We modified the weights assigned by MOSES to
the translation model, reordering model and lan-
guage model. Experiments were conducted by
performing pruning on the options in the phrase
table and by using the word penalty feature in
MOSES.
We trained a language model of order 5 built on
the entire EUROPARL corpus using the SRILM
package. The method uses improved Kneser-Ney
smoothing algorithm (Chen and Goodman, 1999)
to compute sequence probabilities.
5 Dataset
The experiments were conducted on the Spanish-
English language pair. The latest version of the
Europarl corpus(version-5) was used in this work.
A small set of 200K sentences was selected from
the training set to conduct the experiments. The
test and development sets containing 2525 sen-
tences and 2051 sentences respectively were used,
without making any changes.
Corpus No. of sentences Source Target
Training 200000 59591 36886
Testing 2525 10629 8905
Development 2051 8888 7750
Monolingual 200000 n.a 36886
English (LM)
Table 1: Corpus statistics for Spanish-English cor-
pus.
6 Experiments and Results
The output of our experiments was evaluated us-
ing two metrics, (1) BLEU (Papineni et al, 2002),
and (2) Lexical Accuracy (LexAcc). Lexical ac-
curacy measures the similarity between the un-
ordered bag of words in the reference sentence
39
against the unordered bag of words in the hypoth-
esized translation. Lexical accuracy is a measure
of the fidelity of lexical transfer from the source
to the target sentence, independent of the syntax
of the target language (Venkatapathy and Banga-
lore, 2009). We report lexical accuracies to show
the performance of LCS decoding in comparison
with the baseline system.
We first present the results of the state-of-art
phrase-based model (Moses) trained on a paral-
lel corpus. We treat this as our baseline. The re-
ordering feature used is msd-bidirectional, which
allows for all possible reorderings over a speci-
fied distortion limit. The baseline accuracies are
shown in table 2.
Corpus BLEU Lexical Accuracy
Development 0.1734 0.448
Testing 0.1823 0.492
Table 2: Baseline Accuracy
We conduct two types of experiments to test our
approach.
1. Experiments using lexical features (see sec-
tion 6.1), and
2. Experiments using syntactic features (see
section 6.2).
6.1 Experiments using Lexical Features
In this section, we present results of our exper-
iments that use only lexical features. First, we
measure the translation accuracy using LCS de-
coding. On the development set, we explored the
set of decoding parameters (as described in sec-
tion 4.1) to compute the optimal parameter val-
ues. The best lexical accuracy obtained on the de-
velopment set is 0.4321 and the best BLEU score
obtained is 0.0923 at a threshold of 0.17 and a per-
mutation window size of value 3. The accuracies
corresponding to a few other parameter values are
shown in Table 3.
On the test data, we obtained a lexical accu-
racy of 0.4721 and a BLEU score of 0.1023. As
we can observe, the BLEU score obtained using
the LCS decoding technique is low when com-
pared to the BLEU score of the state-of-art sys-
tem. However, the lexical accuracy is comparable
Threshold Perm. Window LexAcc BLEU
0.16 3 0.4274 0.0914
0.17 3 0.4321 0.0923
0.18 3 0.4317 0.0918
0.16 4 0.4297 0.0912
0.17 4 0.4315 0.0915
Table 3: Lexical Accuracies of Lattice-Output us-
ing lexical features alone for various parameter
values
to the lexical accuracy of Moses. This shows that
the discriminative model provides good lexical se-
lection, while the sentence construction technique
does not perform as expected.
Next, we present the results of the Moses based
decoder that uses the discriminative model (see
section 3.2). In our experiments, we did not use
MERT training for tuning the Moses parameters.
Rather, we explore a set of possible parameter val-
ues (i.e. weights of the translation model, reorder-
ing model and the language model) to check the
performance. We show the BLEU scores obtained
on the development set using Moses decoder in
Table 4.
Reordering LM Translation BLEU
weight(d) weight(l) weight(t)
0 0.6 0.3 0.1347
0 0.6 0.6 0.1354
0.3 0.6 0.3 0.1441
0.3 0.6 0.6 0.1468
Table 4: BLEU for different weight values using
lexical features only
On the test set, we obtained a BLEU score of
0.1771. We observe that both the lexical accuracy
and the BLEU scores obtained using the discrim-
inative training model combined with the Moses
decoder are comparable to the state-of-art results.
The summary of the results obtained using three
approaches and lexical feature functions is pre-
sented in Table 5.
6.2 Experiments using Syntactic Features
In this section, we present the effect of incorpo-
rating syntactic features using our model on the
40
Approach BLEU LexAcc
State-of-art(MOSES) 0.1823 0.492
LCS decoding 0.1023 0.4721
Moses decoder trained
using a discriminative 0.1771 0.4841
model
Table 5: Translation accuracies using lexical fea-
tures for different approaches
translation accuracies. Table 6 presents the results
of our approach that uses syntactic features at dif-
ferent parameter values. Here, we can observe
that the translation accuracies (both LexAcc and
BLEU) are better than the model that uses only
lexical features.
Reordering LM Translation BLEU
weight(d) weight(l) weight(t)
0 0.6 0.3 0.1661
0 0.6 0.6 0.1724
0.3 0.6 0.3 0.1780
0.3 0.6 0.6 0.1847
Table 6: BLEU for different weight values using
syntactic features
Table 7 shows the comparative performance of
the model using syntactic as well as lexical fea-
tures against the one with lexical features func-
tions only.
Model BLEU LexAcc
Lexical features 0.1771 0.4841
Lexical+Syntactic 0.201 0.5431
features
Table 7: Comparison between translation accura-
cies from models using syntactic and lexical fea-
tures
On the test set, we obtained a BLEU score of
0.20 which is an improvement of 2.3 points over
the model that uses lexical features alone. We also
obtained an increase of 6.1% in lexical accuracy
using this model with syntactic features as com-
pared to the model using lexical features only.
7 Conclusions and Future Work
In this paper, we presented an approach to statisti-
cal machine translation that combines the power
of a discriminative model (for training a model
for Machine Translation), and the standard beam-
search based decoding technique (for the transla-
tion of an input sentence). The key contributions
are:
1. We incorporated a discriminative model in
a phrase-based decoder. We obtained com-
parable results with the state-of-art phrase-
based decoder (see section 6.1). The ad-
vantage in using our approach is that it has
the flexibility to incorporate richer contextual
and linguistic feature functions.
2. We show that the incorporation of syntac-
tic information (POS tags) in our discrimina-
tive model boosted the performance of trans-
lation. The lexical accuracy using our ap-
proach improved by 6.1% when syntactic
features were used in addition to the lexi-
cal features. Similarly, the BLEU score im-
proved by 2.3 points when syntactic features
were used compared to the model that uses
lexical features alone. The accuracies are
likely to improve when richer linguistic fea-
ture functions (that use parse structure) are
incorporated in our approach.
In future, we plan to work on:
1. Experiment with rich syntactic and structural
features (parse tree-based features) using our
approach.
2. Experiment on other language pairs such as
Arabic-English and Hindi-English.
3. Improving LCS decoding algorithm using
syntactic cues in the target (Venkatapathy
and Bangalore, 2007) such as supertags.
References
Bangalore, S., P. Haffner, and S. Kanthak. 2007. Statistical machine transla-
tion through global lexical selection and sentence reconstruction. In An-
nual Meeting-Association for Computational Linguistics, volume 45, page
152.
Berger, A.L., V.J.D. Pietra, and S.A.D. Pietra. 1996. A maximum en-
tropy approach to natural language processing. Computational linguistics,
22(1):39?71.
41
Brown, P.F., V.J.D. Pietra, S.A.D. Pietra, and R.L. Mercer. 1993. The mathe-
matics of statistical machine translation: Parameter estimation. Computa-
tional linguistics, 19(2):263?311.
Chen, S.F. and J. Goodman. 1999. An empirical study of smoothing
techniques for language modeling. Computer Speech and Language,
13(4):359?394.
Haffner, P. 2006. Scaling large margin classifiers for spoken language under-
standing. Speech Communication, 48(3-4):239?261.
Hassan, H., K. Sima?an, and A. Way. 2009. A syntactified direct translation
model with linear-time decoding. In Proceedings of the 2009 Conference
on Empirical Methods in Natural Language Processing: Volume 3-Volume
3, pages 1182?1191. Association for Computational Linguistics.
Ittycheriah, A. and S. Roukos. 2007. Direct translation model 2. In Proceed-
ings of NAACL HLT, pages 57?64.
Koehn, P. and H. Hoang. 2007. Factored translation models. In Pro-
ceedings of the 2007 Joint Conference on Empirical Methods in Natu-
ral Language Processing and Computational Natural Language Learning
(EMNLP-CoNLL), pages 868?876.
Koehn, P., F.J. Och, and D. Marcu. 2003. Statistical phrase-based transla-
tion. In Proceedings of the 2003 Conference of the North American Chap-
ter of the Association for Computational Linguistics on Human Language
Technology-Volume 1, pages 48?54. Association for Computational Lin-
guistics.
Koehn, P., H. Hoang, A. Birch, C. Callison-Burch, M. Federico, N. Bertoldi,
B. Cowan, W. Shen, C. Moran, R. Zens, et al 2007. Moses: Open source
toolkit for statistical machine translation. In Annual meeting-association
for computational linguistics, volume 45, page 2.
Och, F.J. and H. Ney. 2002. Discriminative training and maximum entropy
models for statistical machine translation. In Proceedings of ACL, vol-
ume 2, pages 295?302.
Och, F.J., C. Tillmann, H. Ney, et al 1999. Improved alignment models
for statistical machine translation. In Proc. of the Joint SIGDAT Conf.
on Empirical Methods in Natural Language Processing and Very Large
Corpora, pages 20?28.
Papineni, KA, S. Roukos, and RT Ward. 1998. Maximum likelihood and
discriminative training of directtranslation models. In Acoustics, Speech
and Signal Processing, 1998. Proceedings of the 1998 IEEE International
Conference on, volume 1.
Papineni, K., S. Roukos, T. Ward, and W.J. Zhu. 2002. BLEU: a method for
automatic evaluation of machine translation. In Proceedings of the 40th
annual meeting on association for computational linguistics, pages 311?
318. Association for Computational Linguistics.
Venkatapathy, S. and S. Bangalore. 2007. Three models for discriminative
machine translation using Global Lexical Selection and Sentence Recon-
struction. In Proceedings of the NAACL-HLT 2007/AMTA Workshop on
Syntax and Structure in Statistical Translation, pages 96?102. Association
for Computational Linguistics.
Venkatapathy, Sriram and Srinivas Bangalore. 2009. Discriminative Machine
Translation Using Global Lexical Selection. ACM Transactions on Asian
Language Information Processing, 8(2).
Xiong, D., Q. Liu, and S. Lin. 2006. Maximum entropy based phrase reorder-
ing model for statistical machine translation. In Proceedings of the 21st
International Conference on Computational Linguistics and the 44th an-
nual meeting of the Association for Computational Linguistics, page 528.
Association for Computational Linguistics.
42
