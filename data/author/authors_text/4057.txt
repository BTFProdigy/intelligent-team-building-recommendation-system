Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 475?482,
Sydney, July 2006. c?2006 Association for Computational Linguistics
GF Parallel Resource Grammars and Russian
Janna Khegai
Department of Computer Science
Chalmers University of Technology
SE-41296 Gothenburg, Sweden
janna@cs.chalmers.se
Abstract
A resource grammar is a standard library
for the GF grammar formalism. It raises
the abstraction level of writing domain-
specific grammars by taking care of the
general grammatical rules of a language.
GF resource grammars have been built in
parallel for eleven languages and share a
common interface, which simplifies multi-
lingual applications. We reflect on our ex-
perience with the Russian resource gram-
mar trying to answer the questions: how
well Russian fits into the common inter-
face and where the line between language-
independent and language-specific should
be drawn.
1 Introduction
Grammatical Framework (GF) (Ranta, 2004) is a
grammar formalism designed in particular to serve
as an interlingua platform for natural language ap-
plications in sublanguage domains. A domain can
be described using the GF grammar formalism and
then processed by GF. Such descriptions are called
application grammars.
A resource grammar (Ranta, to appear) is a
general-purpose grammar that forms a basis for
application grammars. Resource grammars have
so far been implemented for eleven languages in
parallel. The structural division into abstract and
concrete descriptions, advocated in GF, is used
to separate the language-independent common in-
terface or Application Programming Interface
(API) from corresponding language-specific im-
plementations. Consulting the abstract part is suf-
ficient for writing an application grammar without
descending to implementation details. This ap-
proach raises the level of application grammar de-
velopment and supports multilinguality, thus, pro-
viding both linguistic and computational advan-
tages.
The current coverage is comparable with the
Core Language Engine (CLE) project (Rayner
et al, 2000). Other well-known multilingual
general-purpose grammar projects that GF can
be related to, are LFG grammars (Butt et al,
1999) and HPSG grammars (Pollard and Sag,
1994), although their parsing-oriented unification-
based formalisms are very different from the
GF generation-oriented type-theoretical formal-
ism (Ranta, 2004).
A Russian resource grammar was added after
similar grammars for English, Swedish, French
and German (Arabic, Italian, Finnish, Norwegian,
Danish and Spanish are also supported in GF). A
language-independent API representing the cover-
age of the resource library, therefore, was already
available. The task was to localize modules for
Russian.
A resource grammar has morphological and
syntactic modules. Morphological modules in-
clude a description of word classes, inflectional
paradigms and a lexicon. Syntactic modules com-
prise a description of phrasal structures for ana-
lyzing bigger than one-word entities and various
combination rules. Note, that semantics, defining
the meanings of words and syntactic structures,
is constructed in application grammars. This is
because semantics is rather domain-specific, and,
thus, it is much easier to construct a language-
independent semantic model for a particular do-
main than a general-purpose resource semantics.
In the following sections we consider typical
definitions from different resource modules focus-
ing on aspects specific to Russian. We will also
475
demonstrate the library usage in a sample applica-
tion grammar.
2 Word Classes
Every resource grammar starts with a descrip-
tion of word classes. Their names belong to
the language-independent API, although their im-
plementations are language-specific. Russian fits
quite well into the common API here, since like
all other languages it has nouns, verbs, adjectives
etc. The type system for word classes of a lan-
guage is the most stable part of the resource gram-
mar library, since it follows traditional linguis-
tic descriptions (Shelyakin, 2000; Wade, 2000;
Starostin, 2005). For example, let us look at
the implementation of the Russian adjective type
AdjDegree:
param
Degree = Pos | Comp | Super;
Case = Nom|Gen|Dat|Acc|Inst|Prep;
Animacy = Animate | Inanimate;
Gender = Masc | Fem | Neut;
GenNum = ASingular Gender|APlural;
AdjForm = AF Case Animacy GenNum;
oper
AdjDegree : Type =
{s : Degree => AdjForm => Str};
First, we need to specify parameters (param) on
which inflection forms depend. A vertical slash
(|) separates different parameter values. While in
English the only parameter would be comparison
degree (Degree), in Russian we have many more
parameters:
? Case, for example: bol?xie doma ?
bol?xih domov (big houses ? big houses?).
? Animacy only plays a role in the ac-
cusative case (Acc) in masculine (Masc)
singular (ASingular) and in plural forms
(APlural), namely, accusative animate
form is the same as genitive (Gen) form,
while accusative inanimate form is the same
as nominative (Nom):  lbl bol?xie
doma ?  lbl bol?xih mu?qin (I love
big houses ? I love big men).
? Gender only plays role in singular:
bol?xo