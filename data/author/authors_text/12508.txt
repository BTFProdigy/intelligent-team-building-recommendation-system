Referring Expressions as Formulas of Description Logic
Carlos Areces
INRIA Nancy Grand Est
Nancy, France
areces@loria.fr
Alexander Koller
University of Edinburgh
Edinburgh, UK
a.koller@ed.ac.uk
Kristina Striegnitz
Union College
Schenectady, NY, US
striegnk@union.edu
Abstract
In this paper, we propose to reinterpret the
problem of generating referring expressions
(GRE) as the problem of computing a formula
in a description logic that is only satisfied by
the referent. This view offers a new unifying
perspective under which existing GRE algo-
rithms can be compared. We also show that
by applying existing algorithms for computing
simulation classes in description logic, we can
obtain extremely efficient algorithms for rela-
tional referring expressions without any dan-
ger of running into infinite regress.
1 Introduction
The generation of referring expressions (GRE) is
one of the most active and successful research ar-
eas in natural language generation. Building upon
Dale and Reiter?s work (Dale, 1989; Dale and Reiter,
1995), various researchers have added extensions
such as reference to sets (Stone, 2000), more expres-
sive logical connectives (van Deemter, 2002), and
relational expressions (Dale and Haddock, 1991).
Referring expressions (REs) involving relations,
in particular, have received increasing attention re-
cently; especially in the context of spatial refer-
ring expressions in situated generation (e.g. (Kelle-
her and Kruijff, 2006)), where it seems particularly
natural to use expressions such as ?the book on the
table?. However, the classical algorithm by Dale and
Haddock (1991) was recently shown to be unable
to generate satisfying REs in practice (Viethen and
Dale, 2006). Furthermore, the Dale and Haddock al-
gorithm and most of its successors (such as (Kelle-
her and Kruijff, 2006)) are vulnerable to the prob-
lem of ?infinite regress?, where the algorithm jumps
back and forth between generating descriptions for
two related individuals infinitely, as in ?the book on
the table which supports a book on the table . . . ?.
In this paper, we propose to view GRE as the
problem of computing a formula of description logic
(DL) that denotes exactly the set of individuals that
we want to refer to. This very natural idea has been
mentioned in passing before (Krahmer et al, 2003;
Gardent and Striegnitz, 2007); however, we take it
one step further by proposing DL as an interlingua
for comparing the REs produced by different ap-
proaches to GRE. In this way, we can organize ex-
isting GRE approaches in an expressiveness hierar-
chy. For instance, the classical Dale and Reiter al-
gorithms compute purely conjunctive formulas; van
Deemter (2002) extends this language by adding the
other propositional connectives, whereas Dale and
Haddock (1991) extends it by allowing existential
quantification.
Furthermore, the view of GRE as a problem of
computing DL formulas with a given extension al-
lows us to apply existing algorithms for the lat-
ter problem to obtain efficient algorithms for GRE.
We present algorithms that compute such formulas
for the description logics EL (which allows only
conjunction and existential quantification) andALC
(which also allows negation). These algorithms ef-
fectively compute REs for all individuals in the do-
main at the same time, which allows them to system-
atically avoid the infinite regress problem. The EL
algorithm is capable of generating 67% of the rela-
tional REs in the Viethen and Dale (2006) dataset, in
about 15 milliseconds. The ALC algorithm is even
faster; it computes relational REs for all 100 indi-
viduals in a random model in 140 milliseconds.
The paper is structured as follows. In Section 2,
42
we will first define description logics. We will then
show how to generate REs by computing DL sim-
ilarity sets for ALC and EL in Section 3. In Sec-
tion 4, we evaluate our algorithms and discuss our
results. Section 5 compares our approach to related
research; in particular, it shows how various promi-
nent GRE algorithms fit into the DL framework.
Section 6 concludes and points to future work.
2 Description logics and similarity
In this paper, we will represent referring expres-
sions as formulas of description logic (Baader et al,
2003). In order to make this point, we will now de-
fine the two description logics we will be working
with: ALC and EL.
Formulas (or concepts) ? of ALC are generated
by the following grammar:
?,?? ::= > | p | ?? | ? u ?? | ?R.?
where p is in the set of propositional symbols prop,
and R is in the set of relational symbols rel. EL is
the negation-free fragment of ALC.
Formulas of both ALC and EL are interpreted in
ordinary relational first-order modelsM = (?, || ? ||)
where ? is a non-empty set and || ? || is an interpreta-
tion function such that:
||p|| ? ? for p ? prop
||R|| ? ??? for R ? rel
||??|| = ?? ||?||
||? u ??|| = ||?|| ? ||??||
||?R.?|| = {i | for some i?, (i, i?) ? ||R||
and i? ? ||?||}.
Every formula of a description logic denotes a
set of individuals in the domain; thus we can use
such formulas to describe sets. For instance, in the
model in Fig. 1b, the formula flower denotes the set
{f1, f2}; the formula floweru?in.hat denotes {f2};
and the formula flower u ??in.hat denotes {f1}.
Different description logics differ in the inventory
of logical connectives they allow: While ALC per-
mits negation, EL doesn?t. There are many other
description logics in the literature; some that we
will get back to in Section 5 are CL (EL without
existential quantification, i.e., only conjunctions of
atoms); PL (ALC without existential quantification,
i.e., propositional logic); and ELU (?) (EL plus dis-
junction and atomic negation).
Below, we will use a key notion of formula preser-
vation that we call similarity. For any DL L, we
will say that an individual i is L-similar to i? in a
given modelM if for any formula ? ? L such that
i ? ||?||, we also have i? ? ||?||. Equivalently, there
is no L-formula that holds of i but not of i?. We say
that the L-similarity set of some individual i is the
set of all individuals to which i is L-similar.
Notice that similarity is not necessarily a symmet-
rical relation: For instance, f1 is EL-similar to f2 in
Fig. 1b, but f2 is not EL-similar to f1 (it satisfies the
formula ?in.hat and f1 doesn?t). However, ALC-
similarity is a symmetrical relation because the lan-
guage contains negation; and indeed, f1 is notALC-
similar to f2 either because it satisfies ??in.hat. Be-
causeALC is more expressive than EL, it is possible
for some individual a to be EL-similar but notALC-
similar to some individual b, but not vice versa.
3 Generating referring expressions
Now we apply description logic to GRE. The core
claim of this paper is that it is natural and useful to
view the GRE problem as the problem of computing
a formula of some description logic L whose exten-
sion is a given target set A of individuals.
L-GRE PROBLEM
Input: A modelM and a target set A ? ?.
Output: A formula ? ? L such that ||?|| = A
(if such a formula exists).
In the examples above, it is because flower u
?in.hat denotes exactly {f2} that we can say ?the
flower in the hat? to refer to f2. This perspective pro-
vides a general framework into which many existing
GRE approaches fit: Traditional attribute selection
(Dale and Reiter, 1995) corresponds to building DL
formulas that are conjunctions of atoms; relational
REs as in Dale and Haddock (1991) are formulas of
EL; and so on. We will further pursue the idea of or-
ganizing GRE approaches with respect to the variant
of DL they use in Section 5.
For the rest of this paper, we assume that we are
generating a singular RE, i.e., the target set A will
be a singleton. In this case, we will only be able
to generate a formula that denotes exactly A = {a}
(i.e., a RE that uniquely refers to a) if there is no
43
f1
floor
t
2
table
t
1
table
b
2
c
2
bowl
cup
b
1
bowl
c
1
cup
on
on
on
on
in
in
(a) (b)
r
1
rabbit
r
2
rabbit
r
3
rabbit
r
4
rabbith
1
hat
h
4
hat
h
2
hat
h
3
hat
f
1
flower
f
2
flower
b
1
bathtub
in
in
in
Figure 1: (a) The Dale and Haddock (1991) scenario; (b)
the Stone and Webber (1998) scenario.
other individual b to which a is similar; otherwise,
any formula that is satisfied by a is also satisfied by
b. Conversely, if we know that a is not similar to any
other individual, then there is a formula that is satis-
fied by a and not by anything else; this formula can
serve as a unique singular RE. In other words, we
can reduce the L-GRE problem for a given model
to the problem of computing the L-similarity sets of
this model. Notice that this use of similarity sets can
be seen as a generalization of van Deemter?s (2002)
?satellite sets? to relational descriptions.
In the rest of this section, we will present algo-
rithms that compute the similarity sets of a given
model for ALC and EL, together with characteris-
tic formulas that denote them. In the ALC case,
we adapt a standard algorithm from the literature
for computing simulation classes; we will then fur-
ther adapt this algorithm for EL. In effect, both al-
gorithms compute REs for all individuals in some
model at the same time ? very efficiently and with-
out any danger of infinite regress.
3.1 Computing similarity sets
It can be shown that for ALC, the similarity sets
of a finite model coincide exactly with the simu-
lation classes of this model. Simulation classes
have been studied extensively in the literature (see
e.g., Blackburn et al (2001); Kurtonina and de Ri-
jke (1998)), and there are several efficient algorithms
for computing ALC-simulation classes (Hopcroft,
1971; Paige and Tarjan, 1987; Dovier et al, 2004).
However, these algorithms will only compute the
simulation classes themselves. Here we extend the
Hopcroft (1971) algorithm such that it computes,
along with each set, also a formula that denotes ex-
actly this set. We can then use these formulas as
representations of the referring expressions.
The pseudocode for our ALC algorithm is shown
as Algorithm 1 (with L = ALC) and Algorithm 2.
Given a modelM = (?, || ? ||), the algorithm com-
putes a set RE of ALC formulas such that {||?|| |
? ? RE} is the set of ALC-similarity sets of
M. The algorithm starts with RE = {>} (where
||>|| = ?), and successively refines RE by mak-
ing its elements denote smaller and smaller sets. It
maintains the invariant that at the start and end of ev-
ery iteration, {||?|| | ? ? RE} is always a partition
of ?. The algorithm iterates over all propositional
and relational symbols in prop and rel to construct
new formulas until either all formulas in RE denote
singletons (i.e., there is only one individual that sat-
isfies them), or no progress has been made in the
previous iteration. In each iteration, it calls the pro-
cedure addALC(?, RE ), which intersects ? with any
formula ? ? RE which does not denote a singleton
and which is not equivalent to ? and to ??. In this
case, it replaces ? in RE by ? u ? and ? u ??.
TheALC algorithm computes theALC-similarity
sets of the model in timeO(n3), where n is the num-
ber of individuals in the domain. However, it will
freely introduce negations in the case distinctions,
which can make the resulting formula hard to realize
(see also Section 4.3). This is why we also present
an algorithm for the EL-similarity sets; EL corre-
sponds to positive relational REs, which are gener-
ally much easier to realize.
We obtain the EL algorithm by replacing the call
to addALC in Algorithm 1 by a call to addEL, which
is defined in Algorithm 3. As before, the algo-
rithm maintains a set RE = {?1, . . . , ?n} of for-
mulas (this time of EL) such that ||?1|| ? . . . ?
||?n|| = ?, and which it refines iteratively. However,
where the ALC algorithm maintains the invariant
that ||?1||, . . . , ||?n|| is a partition of ?, we weaken
this invariant to the requirement that there are no
m ? 2 pairwise different indices 1 ? i1, . . . , im ?
n such that ||?i1 || = ||?i2 || ? . . .? ||?im ||. We call ?i1
subsumed if such a decomposition exists.
Because it maintains a weaker invariant, the set
RE may contain more formulas at the same time in
the EL algorithm than in the ALC algorithm. Given
that ? has an exponential number of subsets, there is
a risk that the EL algorithm might have worst-case
44
Algorithm 1: Computing the L-similarity sets
Input: A modelM = (?, || ? ||)
Output: A set RE of formulas such that
{||?|| | ? ? RE} is the set of
L-similarity sets ofM.
RE ? {>}1
for p ? prop do2
addL(p,RE )3
while exists some ? ? RE , |||?|||M > 1 do4
for ? ? RE , R ? rel do5
addL(?R.?,RE )6
if made no changes to RE then7
exit8
exponential runtime (although we are not aware of
such worst-case examples). We leave a more careful
complexity analysis for future work.
We presented both algorithms as first refining RE
according to propositional symbols, and then by re-
lational expressions of increasing depth. But actu-
ally, propositional symbols can be encoded using
new relational symbols (e.g., we could represent that
f1 is a flower in Fig. 1 as a relation labeled flower
from f1 to an additional dummy element d). In this
way, we don?t need to distinguish between proposi-
tions and relations, and any arbitrary preference or-
dering of properties can be used.
3.2 Some examples
Let?s try our algorithms on some examples. We
first run the EL algorithm on the model shown in
Fig. 1a, which is taken from Dale and Haddock
(1991). The algorithm starts with RE = {>}. In
the first loop, it adds the formulas floor, bowl, cup,
and table, and then removes > because it is now
subsumed. Not all of these formulas denote single-
tons; for instance, ||cup|| contains two individuals.
So we iterate over the relations to refine our for-
mulas. After the first iteration over the relations,
we have RE = {floor, bowl u ?on.floor, bowl u
?on.table, cup, table}. Notice that bowl has become
subsumed, but we haven?t distinguished the cups
and tables further.
Now we can use the split between the bowls to
distinguish the cups in the second iteration. The re-
sult of this is RE = {floor, bowlu?on.floor, bowlu
Algorithm 2: addALC(?,RE )
for ? ? RE with |||?||| > 1 do1
if ||? u ?|| 6= ? and ||? u ??|| 6= ? then2
add ? u ? and ? u ?? to RE ;3
remove ? from RE ;4
Algorithm 3: addEL(?, RE )
for ? ? RE with |||?||| > 1 do1
if ? u ? is not subsumed in RE and2
||? u ?|| 6= ? and ||? u ?|| 6= ||?|| then
add ? u ? to RE3
remove subsumed formulas from RE4
?on.table, cup u ?in.(bowl u ?on.floor), cup u
?in.(bowl u ?on.table), table}. At this point, all
formulas except table denote singletons, and further
iterations don?t allow us to refine table; so the al-
gorithm terminates. Each formula with a singleton
extension {a} is a unique description of a; for in-
stance, cup u ?in.(bowl u ?on.table) is only satis-
fied by c2, so we may refer to c2 as ?the cup in the
bowl on the table?. Notice that the algorithm didn?t
focus on any particular individual; it simultaneously
generated REs for all individuals except for the two
tables (which are similar to each other).
The EL algorithm has a harder time with the ex-
ample in Fig. 1b (Stone and Webber, 1998). While
it will correctly identify r1 as ?the rabbit in the hat?
and f2 as ?the flower in the hat?, it will not be able to
compute a RE for f1 because f1 is EL-similar to f2.
Indeed, the algorithm terminates with RE contain-
ing both flower and floweru?in.hat. This is a typical
pattern for asymmetrical cases of similarity in EL: If
there are two formulas ?1 and ?2 in the output set
with ||?1|| ? ||?2||, then there is generally some in-
dividual b ? ||?2|| ? ||?1|| such that all individuals in
||?1|| are similar to b, but not vice versa. By contrast,
theALC algorithm can exploit the greater expressiv-
ity of ALC to split flower into the two new formulas
floweru?in.hat and floweru??in.hat, generating a
unique RE for f1 as well.
4 Discussion
We will now describe two experiments evaluating
the quality of the EL algorithm?s output and the effi-
45
Figure 2: A schematic view of the filing cabinets.
ciency of both of our algorithms, and we discuss the
interface between our algorithms and realization.
4.1 Evaluation: Output quality
To compare the descriptions generated by our al-
gorithm to those humans produce, we use a cor-
pus of human-generated referring expressions col-
lected and made available by Jette Viethen and
Robert Dale.1 They asked human subjects to de-
scribe one of 16 filing cabinet drawers. The draw-
ers had different colors and were arranged in a
four-by-four grid (see Fig. 2). The human subjects
used four non-relational properties (the drawer?s
color, its column and row number, and whether
it is in a corner) and five relational properties
(above, below, next to, left of, right of). Of the 118
referring expressions obtained in the experiment,
only 15 use relations.
Viethen and Dale (2006) describe the data in
more detail and present results of evaluating the Full
Brevity algorithm, the Incremental Algorithm (both
by Dale and Reiter (1995)), and the Relational Al-
gorithm (Dale and Haddock, 1991) on this corpus.
The Incremental Algorithm is dependent on a pre-
defined ordering in which properties are added to
the description. Viethen and Dale, therefore, try all
possible orderings and evaluate what percentage of
descriptions an algorithm can generate with any of
them. The Full Brevity and the Relational Algo-
rithms choose properties based on their discrimina-
tory power and only use the orderings as tie break-
ers. Viethen and Dale found that the Incremental
Algorithm is capable of generating 98 of the 103
non-relational descriptions. However, the Relational
Algorithm was unable to generate even a single one
of the human-generated relational descriptions.
We replicated Viethen and Dale?s experiment for
1http://www.ics.mq.edu.au/?jviethen/drawers
the EL algorithm presented above. In the non-
relational case, our results are the same as theirs for
the Incremental Algorithm: the EL algorithm gener-
ates 98 of the 103 non-relational descriptions, using
four (of the possible) orderings. This is because the
two algorithms perform essentially the same compu-
tations if there are no relations.
When we add relations, our algorithm is able to
generate 10 of the 15 human-produced relational
descriptions correctly (in addition to the 98 non-
relational descriptions). Fig. 3 gives example out-
puts of the EL algorithm for three different order-
ings, which together achieve this coverage. Of the
five human-produced descriptions that the EL algo-
rithm cannot generate, three involve references to
sets (the two blues ones in horizontal sequence/the
two yellow drawers), and two contain so much re-
dundant information that our algorithm cannot re-
produce them: Similarly to the Incremental Algo-
rithm, our algorithm allows for some redundancy,
but stops once it has found a distinguishing descrip-
tion. It does, however, generate other, simpler de-
scriptions for these referents.
4.2 Evaluation: Efficiency
Both the EL and the ALC algorithms took about 15
milliseconds to compute distinguishing formulas for
all 16 individuals in the Viethen and Dale dataset.2
In order to get a more comprehensive picture
of the algorithms? efficiency, we ran them on ran-
dom models with increasing numbers of individu-
als. Each model had random interpretations for ten
different propositional and four relational symbols;
each individual had a 10% chance to be in the exten-
sion of each propositional symbol, and each pair of
individuals had a 10% chance to be related by a re-
lational symbol. The results (averaged over 10 runs
for each model size) are shown in Fig. 4. The EL al-
gorithm takes about 350 ms on average to generate
relational REs for all individuals in the model of size
100, i.e., less than 4 ms on average for each individ-
ual. The ALC algorithm is even faster, at about 140
ms for the model of size 100. As far as we know,
these are by far the fastest published runtimes for
2Runtimes were measured on a MacBook Pro (Intel Core 2
Duo, 2.16 GHz) running Java 1.6 beta. We allowed the Java
VM to warm up, i.e., just-in-time compile all bytecode, before
taking the measurements.
46
id
human-produced description
output of the EL algorithm
2
the orange drawer above the blue drawer
orangeu ?above.blue / orange u ?above.(?below.(orange) u blue) / orange u ?next.(blue) u ?next.(pink)
4
the yellow drawer on the top of the pink one
yellow u ?above.pink / yellow u corner u ?above.pink / yellow u corner u ?above.(?next.(yellow) u pink)
5
? the pink drawer in the fourth column below the yellow one
pink u ?above.orange / pink u ?below.yellow / pink u ?next.(yellow) u ?above.(?next.(yellow) u orange)
6
the yellow drawer on top of the yellow drawer (2?) / ? the drawer after the two blue ones in horizontal sequence
yellow u ?above.yellow / yellow u ?below.pink / yellow u ?next.(blue) u ?next.(pink)
7
the blue drawer below the orange one / ? the blue drawer below the orange drawer in the second column
blueu?above.(blue)u?next.(?above.(orange)ublue) / blueu?below.(orange) / blueu?next.(blue)u?next.(yellow)
10
the blue drawer above the pink drawer (2?)
blueu ?above.(pink) / blue u ?above.(pink) u ?below.(blue) / blue u ?next.(orange) u ?next.(yellow)
11
the yellow drawer next to the orange drawer (2?)
yellow u ?above.orange / yellow u ?below.yellow / yellow u ?next.orange
12
the orange drawer below the pink drawer
orange u ?above.(pink u corner) / orangeu ?below.pink / orange u ?next.yellow
14
? the orange drawer below the two yellow drawers (2?)
orange u ?next.(pink u corner) u ?next.(pink) / orange u ?below.yellow / orange u ?next.(pink u corner)
Figure 3: The relational descriptions from Viethen and Dale (2006), annotated with the drawer id and the outputs of the
EL algorithm using three different orderings. Notice that four descriptions occurred twice in the corpus. Descriptions
that the EL algorithm cannot generate with any ordering are marked by ?. Generated descriptions that match one
produced by humans are in boldface.
any relational GRE algorithm in the literature.
4.3 Interface to realization
Our GRE algorithms do not guarantee that the for-
mula they compute can actually be realized in lan-
guage. For example, none of the formulas our al-
gorithms computed in the Viethen and Dale domain
contained an atom that would commonly be realized
as a noun; the property drawer is never used be-
cause it applies to all individuals in the domain. This
particular problem could easily be worked around
in a post-processing step. However, another prob-
lem arises from the massive use of negation in the
ALC algorithm; it will be hard for any realizer to
find a reasonable way of expressing a formula like
??R.(?Pu?Q) as a smooth noun phrase. Although
we agree with van Deemter (2002) and others that
the careful use of negation and disjunction can im-
prove REs, these connectives must not be overused.
Thus we consider the formulas computed by the EL
algorithm ?safer? with respect to realization.
Of course, we share the problem of interfacing
GRE and realization with every other approach that
separates these two modules, i.e., almost the en-
tire GRE literature (notable exceptions are, e.g., Ho-
racek (1997) and SPUD (Stone and Webber, 1998)).
0
100
200
300
400
10 20 30 40 50 60 70 80 90 100
EL ALC
Figure 4: Average runtimes (in ms) of the two algorithms
on random models with different numbers of individuals.
In principle, we believe that it is a good idea to
handle sentence planning and realization in a single
module; for instance, SPUD can use its awareness
of the syntactic context to generate succinct REs as
in ?take the rabbit from the hat?. We hope that the
ideas we have explored here for efficient and ex-
pressive RE generation can eventually be combined
with recent efficient algorithms for integrated sen-
tence planning and realization, such as in Koller and
Stone (2007).
One problem that arises in our approach is that
47
both algorithms derive some measure of efficiency
from their freedom to build formulas without hav-
ing to respect any linguistic constraints. It seems
straightforward, for instance, to extend Krahmer et
al.?s (2003) approach such that it only considers sub-
graphs that can actually be realized, because their al-
gorithm proceeds by a genuine search for uniquely
identifying subgraphs, and will simply take a differ-
ent branch of the search if some subgraph is useless.
This would be harder in our case. Our algorithms
don?t search in the same way; if we disallow certain
refinements of a partition, we have to allow the al-
gorithms to backtrack and thus jeopardize the worst-
case polynomial runtime. Investigating this inter-
play between efficiency and linguistic constraints is
an interesting avenue for future research.
5 A unified perspective on GRE
Viewing GRE as a problem of generating DL for-
mulas offers a unified perspective: It is the prob-
lem of computing a DL formula with a given exten-
sion. Many existing approaches can be subsumed
under this view; we have summarized this for some
of them in Fig. 5, along with the DL fragment they
use. We already discussed some of these approaches
in Section 3. Furthermore, the non-relational but
negative and disjunctive descriptions generated by
van Deemter (2002) are simply formulas of PL;
and Gardent (2002) generalizes this into generating
formulas of ELU (?), i.e., EL plus disjunction and
atomic negation. The approach presented here fits
well into this landscape, and it completes the pic-
ture by showing how to generate REs inALC, which
combines all connectives used in any of these previ-
ous approaches.
Where our approach breaks new ground is in the
way these formulas are computed: It successively
refines a decomposition of the domain into subsets.
In this way, it is reminiscent of the Incremental Al-
gorithm, which in fact can be seen as a special case
of the EL algorithm. However, unlike Dale and
Haddock (1991) and its successors, such as Kelle-
her and Kruijff (2006), we do not have to take spe-
cial precautions to avoid infinite regress. While Dale
and Haddock?s algorithm attempts to generate a RE
for a single individual, for successive individuals in
the model, our algorithms consider all individuals in
GRE algorithm DL variant
Dale and Reiter (1995) CL
van Deemter (2002) PL
Dale and Haddock (1991) EL
Kelleher and Kruijff (2006) EL
Gardent (2002) ELU (?)
Figure 5: DL variants used by different GRE algorithms.
parallel. It monotonically refines a partition of the
model and never needs to backtrack, and therefore
is always guaranteed to terminate.
Perhaps closest in spirit to our approach is Krah-
mer et al?s graph algorithm (2003), which also com-
putes REs by extending them successively. How-
ever, their subgraphs go beyond the expressive
power of ALC in that they can distinguish between
?the dog that bites a dog? and ?the dog that bites it-
self?. The price they pay for this increase in expres-
sive power is an NP-complete worst-case complex-
ity. Interestingly, Krahmer et al themselves discuss
the possibility of seeing their subgraphs as formu-
las of hybrid logic which are satisfied at the points
where the subgraph can be embedded; and hybrid
logics can be seen as very expressive description
logics (Areces and ten Cate, 2006).
6 Conclusion
In this paper, we have explored the idea of view-
ing the generation of singular REs as the problem
of computing a DL formula with a given extension.
We have shown how such formulas can be computed
efficiently (for ALC and EL) by adapting existing
algorithms from the literature. The EL algorithm
is able to generate 95% of the non-relational and
67% of the relational REs from Viethen and Dale
(2006). Both algorithms are extremely efficient (350
ms and 140 ms respectively to generate relational
REs for all individuals in a random model with 100
individuals); to our knowledge, these are by far the
fastest runtimes for relational GRE reported in the
literature. We have made our implementation avail-
able online at http://code.google.com/p/
crisp-nlg/wiki/DlGre.
Because they compute referring expressions for
all individuals in the domain at once, our algorithms
will perform especially strongly in static settings,
such as the generation of descriptions for museum
48
exhibits, in which the individuals and their proper-
ties don?t change much. However, even in more dy-
namic settings, our algorithms have a chance to out-
perform search algorithms like Dale and Haddock?s
in the average case because they can?t get stuck in
unproductive branches of the search space. Never-
theless, one interesting question for future research
is how to incrementally update simulation classes
when the model changes. Similarly, it would be
interesting to explore how different linguistic con-
straints and attribute orderings can be taken into ac-
count efficiently, how our algorithms could be in-
tegrated with more standard DL T-Box inferences,
and how they can be adapted to use inverse relations
or to compute REs for sets. In exploring these ex-
tensions we will be able to draw on a rich body of
literature that has already considered many variants
of simulation algorithms addressing similar issues.
In experimenting with the Viethen and Dale data,
we found that there is no single ordering that covers
all human-produced descriptions, which seems to be
in contrast to Dale and Reiter?s (1995) assumption
that there is only one ordering for each given do-
main. In fact, it is not even the case that each speaker
consistently uses just one ordering. An interesting
open research question is thus what factors deter-
mine which ordering is used. Unfortunately, both
in the Viethen and Dale dataset and in the TUNA
corpus (van Deemter et al, 2006), only a minor-
ity of referring expressions is relational, maybe be-
cause these domains lend themselves very well to
row/column style propositional REs. We are cur-
rently collecting REs in a domain in which propo-
sitional REs are less preferred.
Acknowledgments. We are grateful to Hector
Geffner (who independently suggested to view GRE as
computation of DL formulas), Kees van Deemter, and
Emiel Krahmer for interesting discussions. We also
thank Jette Viethen and Robert Dale for making their
corpus available, and the reviewers for their comments.
References
C. Areces and B. ten Cate. 2006. Hybrid logics. In
P. Blackburn, F. Wolter, and J. van Benthem, editors,
Handbook of Modal Logics. Elsevier.
F. Baader, D. McGuiness, D. Nardi, and P. Patel-
Schneider, editors. 2003. The Description Logic
Handbook: Theory, implementation and applications.
Cambridge University Press.
P. Blackburn, M. de Rijke, and Y. Venema. 2001. Modal
Logic. Cambridge University Press.
R. Dale and N. Haddock. 1991. Generating referring
expressions involving relations. In Proc. of the 5th
EACL.
R. Dale and E. Reiter. 1995. Computational interpreta-
tions of the Gricean maxims in the generation of refer-
ring expressions. Cognitive Science, 19.
R. Dale. 1989. Cooking up referring expressions. In
Proc. of the 27th ACL.
A. Dovier, C. Piazza, and A. Policriti. 2004. An ef-
ficient algorithm for computing bisimulation equiva-
lence. Theoretical Computer Science, 311(1?3).
C. Gardent and K. Striegnitz. 2007. Generating bridg-
ing definite descriptions. In H. Bunt and R. Muskens,
editors, Computing Meaning, Vol. 3. Springer.
C. Gardent. 2002. Generating minimal definite descrip-
tions. In Proc. of the 40th ACL.
J. Hopcroft. 1971. An n log(n) algorithm for minimizing
states in a finite automaton. In Z. Kohave, editor, The-
ory of Machines and computations. Academic Press.
H. Horacek. 1997. An algorithm for generating refer-
ential descriptions with flexible interfaces. In Proc. of
the 35th ACL.
J. Kelleher and G.-J. Kruijff. 2006. Incremental genera-
tion of spatial referring expressions in situated dialog.
In Proc. of COLING/ACL.
A. Koller and M. Stone. 2007. Sentence generation as
planning. In Proc. of the 45th ACL.
E. Krahmer, S. van Erk, and A. Verleg. 2003. Graph-
based generation of referring expressions. Computa-
tional Linguistics, 29(1).
N. Kurtonina and M. de Rijke. 1998. Expressiveness
of concept expressions in first-order description logics.
Artificial Intelligence, 107.
R. Paige and R. Tarjan. 1987. Three partition refinement
algorithms. SIAM Journal on Computing, 16(6).
M. Stone and B. Webber. 1998. Textual economy
through close coupling of syntax and semantics. In
Proc. of the 9th INLG workshop.
M. Stone. 2000. On identifying sets. In Proc. of the 1st
INLG.
K. van Deemter, I. van der Sluis, and A. Gatt. 2006.
Building a semantically transparent corpus for the gen-
eration of referring expressions. In Proc. of the 4th
INLG.
K. van Deemter. 2002. Generating referring expres-
sions: Boolean extensions of the incremental algo-
rithm. Computational Linguistics, 28(1):37?52.
J. Viethen and R. Dale. 2006. Algorithms for generating
referring expressions: Do they do what people do? In
Proc. of the 4th INLG.
49
Proceedings of the NAACL HLT 2010 Young Investigators Workshop on Computational Approaches to Languages of the Americas,
pages 132?140, Los Angeles, California, June 2010. c?2010 Association for Computational Linguistics
Dialogue Systems for Virtual Environments
Luciana Benotti, Paula Estrella, Carlos Areces
Grupo de Procesamiento de Lenguaje Natural (PLN)
Seccio?n de Ciencias de la Computacio?n
Facultad de Matema?tica, Astronom??a y F??sica (FaMAF)
Universidad Nacional de Co?rdoba, Argentina
Abstract
We present an on-going research project car-
ried out at the Universidad Nacional de Co?rdo-
ba in Argentina. This project investigates the-
oretical and practical research questions re-
lated to the development of a dialogue system
situated in a virtual environment. We describe
the PLN research group in which this project
is being developed and, in particular, we spell
out the areas of expertise of the authors. More-
over, we discuss relevant past, current and fu-
ture collaborations of the research group.
1 Introduction
The goal of this project is to implement a dialogue
system which automatically generates instructions
in order to help a user to fulfill a given task in a 3D
virtual environment. In this context, we will investi-
gate fundamental issues about human-computer in-
teraction. The expected results of the project can be
classified in three areas: pragmatics of interaction;
information representation and inference; and eval-
uation of dialogue systems. Once a working proto-
type is finished, we will adapt it to the specific task
of language learning, using the system as a virtual
language teacher. Our prototype will teach English
to native Spanish speakers. Hence, it will need to
understand and produce both languages.
Initially, we will investigate a model of unidirec-
tional linguistic interaction (i.e., linguistic informa-
tion flows only from the system to the user). In sub-
sequent stages, the model will be extended to allow
bidirectional language exchange. For example, the
user may ask clarifications to the system or redefine
the goal of the interaction.
The architecture of the envisioned dialogue sys-
tem presents both theoretical and practical chal-
lenges. On the theoretical side, heuristics are needed
in order to govern decisions such as what to say,
when, and how (given the current context). In addi-
tion, the system should implement inference meth-
ods in order to figure out how to modify the cur-
rent situation and reach the task goal. The complex-
ity of the theoretical issues is reflected, in practice,
in a system of multiple components: a natural lan-
guage generator, a planner, a 3D interactive envi-
ronment, to mention a few. Designing and imple-
menting all these components from scratch would
require a prohibitive effort. Instead we will adapt
tools already implemented and freely available for
prototyping this kind of systems, such as the plat-
form GIVE1, Generating Instructions in Virtual En-
vironments (Byron et al, 2009).
The quality of each of the components of the sys-
tem affects the perception users have of it. It is im-
perative to carry out extensive evaluation. We plan
to adapt and apply different evaluation techniques
and metrics from the area of Machine Translation to
assess the performance of the system.
The plan of the paper is as follows. Section 2
describes the project in detail. Section 3 spells out
the expected results as well as their foreseen impact
in the Argentinean socio-economic landscape. Sec-
tion 4 presents the PLN research group including its
lines of research. Section 5 discuss past, current and
future collaborations that are relevant to the project.
1http://www.give-challenge.org
132
2 Description of the Project
This section first introduces the virtual environ-
ment in which our dialogue system will be situated,
namely the GIVE platform, which is the basic ar-
chitecture of our dialogue system. Then we explain
in detail the tasks that our situated dialogue system
will implement, and we spell out the evaluation chal-
lenges that such a system poses. We close the sec-
tion discussing the application of our dialogue sys-
tem for the task of second language learning.
2.1 The Virtual Environment
In the scenario proposed by GIVE (Byron et al,
2009), a human user carries out a ?treasure hunt? in
a 3D virtual environment and the task of the genera-
tion system is to provide real-time, natural language
instructions that help the user find the hidden trea-
sure.
In the GIVE setup, the instruction giving system
must guide the user through interconnected rooms.
The final goal is to get a trophy which is hidden in
a safe. In order to achieve this goal, the system in-
structs the user to perform several subtasks such as
deactivating alarms and opening the safe combina-
tion by pressing a sequence of buttons on the walls
of the rooms.
Figure 1: The user?s view of the 3D world
Figure 1 shows a screen-shot of the user?s view on
the 3D world. On the top of the picture, the current
instruction generated by the dialogue system is dis-
played. The picture shows a closed door and an open
door that has an activated alarm (that looks like a red
tile) in the doorway. There are five visible buttons in
this room (two yellow, two red and one green) and
the instruction giver is instructing the user to press
a red button. Pressing a button can have different
effects such as opening a door, moving an object,
deactivating an alarm, etc.
The characteristics of the world, including the
functions of the buttons, are described in the world
specification by the world designers. The user can
move freely around the world (using the direction
keys as indicated in the bottom of the screen) but
she can loose the game if she triggers an alarm. The
user can also ask for help pressing ?H? if she did not
manage to read or understand the last instruction.
For the correct definition of the interaction poli-
cies of our prototype we need a corpus that pro-
vides examples of typical interactions in the domain.
GIVE provides tools for collecting such a corpus in
the form of a Wizard of Oz platform that records all
details of the interaction, thus allowing to easily ob-
tain a corpus of interaction in virtual environments
annotated automatically.
2.2 The Dialogue System Tasks
From the collected corpus we will begin the design,
implementation and testing of our dialogue system.
The main components that we will have to design
and implement can be organized using the tradi-
tional four tasks that a dialogue system should ad-
dress: (1) content planning, (2) generation of refer-
ring expressions, (3) management of the interaction
context, and (4) interpretation of user responses.
(1) Content Planning: Given the envisioned setup
we described before, the first task of the system is to
obtain a plan to reach the desired goal, from the cur-
rent state. The plan will contain physical actions to
be performed in the virtual environment. The second
step is to decide how to transmit this sequence of ac-
tions to the user. E.g, to decide how many actions
to communicate per instruction, and how to aggre-
gate them coherently. The result of the action ag-
gregation process can be represented as a tree de-
scribing the task structure at different levels of ab-
straction. The third and final step is to decide how
to navigate the tree of actions to verbalize the in-
structions (for example, post or preorder as explored
in (Foster et al, 2009)). We will investigate different
133
aggregation policies (e.g., aggregating actions that
manipulate similar objects) and innovative ways in
which to navigate the task tree (e.g., moving to a
lower level of abstraction in case of misunderstand-
ings). Plan computation can be solved using clas-
sical planners (Kautz and Selman, 1999; Hoffmann
and Nebel, 2001; Nau et al, 2004). However, while
there are planners that work well when optimized for
certain applications, none provides services such as
the generation of alternative plans, or the generation
of incomplete plans in case of the absence of plan.
One of the goals of the project is to design and im-
plement these extensions to classical planning algo-
rithms. We will also study the theoretical behavior
(e.g., complexity) of these new algorithms.
(2) Generation of Referring Expressions: Once
content planning is complete, the next step is to gen-
eration adequate referring expressions. This task
involves producing a phrase that describes a refer-
able entity so that the user can identify it (e.g., ?the
vase on the table?). To be acceptable, these expres-
sions should be ?natural:? they should be at the same
time sufficiently but not overly constrained, and they
should not impose on the user a heavier cognitive
load than necessary. For example, producing the
expression ?the vase that is not above the chair or
sofa or under the table? would probably not be ac-
ceptable. Areces et al (2008b) propose to use sym-
bolic minimization of the model that represents the
state of the world, in order to obtain a logical repre-
sentation that describe each object uniquely. In our
project we will implement this method and evaluate
it within the dialogue system.
(3) Management of the Interaction Context: To
manage the use of the interaction context we will use
existing knowledge maintenance systems such as
RACER2 or Pellet3, which support inference tasks
such as definition, maintenance and querying of on-
tologies. These systems have been used as infer-
ence engines in numerous applications in the area
and, in particular, in dialogue systems for text ad-
ventures (Benotti, 2009b). Once we have studied
the behavior of these inference engines on the task,
we will analyze its limitations and investigate the re-
quired extensions.
2http://www.racer-systems.com
3http://clarkparsia.com/pellet
(4) Interpretation of User Responses: The inter-
pretation of user responses in the unidirectional sys-
tem is relatively simple: it amounts to discretizing
the continuous flow of user behavior in the 3D world
into actions meaningful for the domain task. In a
first stage, we will use the discretizer provided by
GIVE. After evaluating it we can determine whether
or not this module meets the requirements of our
task and what are its limitations. In the bidirectional
system, however, the interpretation of user responses
is the task that will require more attention. To start
with, the bidirectional system should be expanded
with capabilities for processing statements coming
from the user (namely, parsing, semantic construc-
tion, resolution of references, etc.). We will study,
in particular, two types of user contributions: re-
quests for clarification of the instruction given (what
we call ?short-term repairs?), and for redefinition of
goals (what we call ?long-term repairs?). We will
implement short-term repairs using the approach de-
scribed in (Purver, 2006). For long-term repairs we
will use the guidelines of (Blaylock, 2005).
A sample interaction with the unidirectional sys-
tem guiding the player in the identification of a par-
ticular blue button is as follows:
(1) System says: Push a blue button.
The user focuses a blue button.
System says: Not this one.
Look for another one.
The user turns and focuses another blue button.
System says: Yes this one!
The user pushes the button.
This interaction illustrates the tasks described
above. To begin with, the verbalization of the in-
struction ?Push a blue button? is making explicit one
of the steps of the plan that needs to be performed in
order to achieve the task goal. As we can see, the
system implements in this case a referring strategy
which does not uniquely identify the referent (the
system generates ?a blue button? when there is more
than one blue button in the domain). But it is ca-
pable of producing further details about the referent
if the user focus in the wrong object. Finally, this
example makes evident that the interpretation of the
user responses is crucial even in a linguistically uni-
directional system. The user cannot make linguistic
134
contributions but can change the context by perform-
ing physical acts, the correct interpretation of such
acts is essential if the system is to react coherently.
2.3 Evaluation
To determine the quality of the obtained prototypes
we propose to create a quality model following the
ISO/IEC 9126 and 14528 standards for the evalua-
tion of software products (ISO/IEC, 2001; ISO/IEC,
1999). These standards were successfully applied
to the Machine Translation domain, resulting in the
FEMTI4, Framework for the Evaluation of Machine
Translation (Estrella et al, 2005). FEMTI guides
evaluators towards creating parameterized evalua-
tion plans that include various aspects of the to-be-
evaluated system and offer a relevant set of met-
rics. The identification of relevant metrics can be
performed using various methods, e.g., based on
previous experience (Hajdinjak and Mihelic, 2006;
Litman and Pan, 2002), conducting surveys or re-
quirement specifications (Lecoeuche et al, 1998), or
collecting such data through Wizard of Oz experi-
ments (Dahlba?ck et al, 1998). After developing a
quality model, several methodologies to assess vari-
ous aspects of the system can be applied: automatic
metrics, subjective metrics or metrics based on the
task (to evaluate both the contribution of each com-
ponent and the quality of the whole system).
The GIVE platform is used every year as a uni-
fied framework for evaluating generation systems.
Systems have to generate natural language instruc-
tions and be able to participate in a real-time interac-
tion situated in a 3D environment. The GIVE Chal-
lenge is one of the shared tasks endorsed by ACL?s
special interests groups in generation, dialogue and
semantics. We plan to participate in the challenge,
which will serve as an additional source of informa-
tion about aspects of the system that need improve-
ment. The evaluation metrics used in the Challenge
(such as average reference identification time) are
described in (Byron et al, 2009). In (Amoia et al,
2010) we extended such metrics in order to measure
alingment between system and user. Once the pro-
totype is evaluated and improved using the results of
the challenge, we will investigate its use as a virtual
language tutor as described in the next section.
4http://www.issco.unige.ch/femti/
2.4 An Application: A Virtual Tutor
The project outcome will be a system capable of giv-
ing natural language instructions situated in a virtual
3D environment. The technology and theoretical ad-
vances of the project could be used in various appli-
cations, but one of the most interesting character-
istics we plan to investigate is that, a priori, by just
changing the linguistic resources, the language of in-
teraction with the system (input and output) can be
changed as desired. After obtaining a first prototype
of an instruction giving dialogue system, we will in-
vestigate its use for distance learning, adapting the
system to operate as a foreign language tutor (Wik
and Hjalmarsson, 2009).
A one-way system that generates instructions in
English can be used to test the user understanding
of a foreign language. The correct interpretation of
the instructions can be evaluated from the proper ex-
ecution of the instructions. The two-way system
will allow the user to formulate clarifications (ei-
ther in their native language or in the foreign lan-
guage). The user may also redefine the objective to
be achieved during the interaction, and thus select
the type of vocabulary he wants to practice.
Virtual worlds (like Second Life) are being
rapidly incorporated into education, both initial
and superior (Doswell, 2005; Molka-Danielsen and
Deutschmann, 2009). The use of a virtual tutor
has certain advantages over a human tutor. Eng-
wall (2004) mentioned the following. (1) Amount
of practice: the chance to practice the new language
is essential for learning, and a virtual tutor provides
opportunities only limited by the technological re-
sources. (2) Prestige: a student may feel embar-
rassed about making mistakes with a human tutor,
and this might limit his willingness to speak in the
foreign language. (3) Augmented Reality: a virtual
tutor can provide additional material (e.g., examples
in context, explanatory images, etc.) with less effort
than a human tutor.
Such a virtual tutor can be used in distance learn-
ing. To develop distance learning systems, it is es-
sential to model the user?s learning progress. This
requires a system aware of the evolution of the user,
and that takes into account their achievements and
their problems. The system must be able to interpret
requirements, and generate appropriate responses,
135
for non-experts uses whose knowledge evolves dur-
ing the interaction. Moreover, the system must be
able to properly represent both the information con-
cerning the course material, and information about
the evolution of the user. For example, the system
must be able to diagnose what part of the course ma-
terial should be reviewed from the wrong answers of
the user. Finally, the system must be able to evaluate
the user interaction in order to decide which learning
objectives have been achieved. The theoretical and
practical results of the project contribute to solving
these difficult problems.
3 Impact of the Project
This project aims to achieve a balance between a
system which is sufficiently generic to be applica-
ble in different areas, and specific enough to ben-
efit from the efficient use of existing techniques
for knowledge management, planning and natural
language processing. Designing and implementing
such a system is a multidisciplinary effort leading to
research in diverse scientific areas:
Pragmatics is an interdisciplinary field which inte-
grates insights from linguistics (e.g., conversational
implicatures (Grice, 1975)), sociology (e.g., conver-
sational analysis (Schegloff, 1987)) and philosophy
(e.g., theory of speech acts (Austin, 1962)). It aims
to explore how the context (in which a conversation
is situated) contributes to the meaning (of everything
that is said during that conversation). The meaning
conveyed during a conversation depends not only on
linguistic information (entities in focus, grammati-
cal and morphological rules, etc.) but also on extra-
linguistic information (physical situation of conver-
sation, previous experiences of speakers, etc.). As a
result, the same sentence may mean different things
in different contexts. The area of pragmatics studies
the process by which a sentence is disambiguated
using its context. A dialogue system needs to have
pragmatic capabilities in order to interact in a nat-
ural way with its users. In particular, it must define
what kind of contextual information should be repre-
sented; and what inference tasks on a sentence and
context are necessary in order to interpret an utter-
ance. In such a system it is important that sentences
makes explicit the right amount of information: too
much information will delay and bore the user, but if
the information is not enough the user will not know
how to perform the task and make mistakes.
One of the major contributions of the project in
this area will be a virtual laboratory for pragmatic
theories: a controlled environment for studying in-
teraction set in a world where physical actions and
language intermingle. The prototype will let us in-
vestigate the impact that different instruction giving
policies (e.g., post order on the tree structure of the
task) have on successful achievement of the goal.
Similar studies have been done before (e.g., (Fos-
ter et al, 2009)) but they usually assume a prede-
termined task. Since our prototype allows for the
specification of the virtual world, the available ac-
tions, and the goal, we will be able to determine
when the impact associated to a particular policy is
dependent on the task or not. We will also investi-
gate short and long term repairs. Repairs are usu-
ally caused by conversational implicatures (Benotti,
2009a). Modeling these implicatures in a generic di-
alogue system is difficult because they are too open
ended. However, since the present prototype pro-
vides a situated interaction, restricted to the virtual
world, it will be possible to test the relationship be-
tween implicatures, the type of repairs they give rise
to, and the inference tasks needed to predict them.
Inference can be understood as any operation that
transforms implicit information in explicit informa-
tion. This definition is general enough to cover tasks
ranging from logical inference (i.e., deduction in
a formal language) to inference tasks common in
AI (e.g., planning and non-monotonic inference), as
well as statistical operations (e.g. obtaining estima-
tors on a data set). A dialogue system has to contin-
ually perform inference operations. E.g., inference
is needed to interpret information received from the
user, incorporate it to the system?s data repository,
and then decide what should be conveyed back to
the user. The very problem of deciding what kind
of logical representation and what type of inference
to use in a given situation is complex (propositional
logic vs. first-order logic, validity vs. model check-
ing, logical inference vs. statistical inference). Inde-
pendently of which type of inference is used, they
are usually computationally expensive. The chal-
lenge here is to find the appropriate balance between
the expressivity of the representation formalism and
136
the cost of the required inference methods.
The main contribution of the project in this area
is in the design, development and study of planning
algorithms. A typical planning system takes three
inputs ?initial state, possible actions and expected
goal? and returns a sequence of actions (a plan) that
when sequentially applied to the initial state, ends
in a state that satisfies the goal. Different methods
to obtain a plan have been studied (forward chain-
ing, backward chaining, coding in terms of proposi-
tional satisfiability, etc.), and they are currently im-
plemented in systems that can solve many planning
tasks efficiently. However, most of these systems
make assumptions that simplify the problem (deter-
ministic atomic time, complete information, absence
of a background theory, etc.). And most of them re-
turn a single plan. We will investigate algorithms
that eliminate some of these simplifications (in par-
ticular, we will study planning with incomplete in-
formation and based on a background theory). We
will also provide extended planning services: alter-
native plans, minimal plans, conditional plans, in-
complete plans, affordability of a given state, etc.
Evaluation of natural language generation systems
is one of the most difficult tasks in the area of NLP.
A given concept can be expressed in many different
ways, all of them correct. Hence, it is not possible
to determining the quality of a generated sentence
simply by, for example, comparing the result with a
gold standard. The problem of absence of gold stan-
dards is shared with another area of the NLP, namely
Machine Translation, for which various evaluation
methodologies, both direct and indirect, have been
proposed. Direct methods applies a metric to the
text generated by the system, while indirect meth-
ods evaluates the performance of the system through
the use of the generated text to perform some task.
But none of these methods is a standard and gener-
ally accepted methodology, which has been proven
to be effective in all cases. Since what is being eval-
uated in this project is a system that interacts via the
generation of natural language instructions, we can
determine its performance through quantitative met-
rics (e.g., average task completion time), qualitative
metrics (e.g., general user satisfaction) and metrics
based on the context (e.g., how well the system ad-
dressed the user needs in particular situations). We
will study the portability of evaluation techniques
from the domain of machine translation and multi-
modal human-computer interaction to the evaluation
of the system proposed in this project.
One of the main contributions of our project at
this respect is the integration of assessment tech-
niques from different areas into a methodology for
evaluating dialog systems for virtual environments,
aiming to estimate their usability and effectiveness.
This methodology could be used both to determine
whether a system is suitable for a task type and
user, and to compare the performance of different
systems of the same type. Another contribution
will be the study and application of software eval-
uation standards to the developed systems, creat-
ing a standardized quality model and proposing a
set of appropriate metrics to assess each of the as-
pects of the model. Finally, the annotated corpus
of human-human interaction, together with the cor-
pus of human-machine interaction collected during
the project will be made public. Such corpora will
serve, for example, to design more general platforms
for evaluating dialog systems, going beyond the as-
pects evaluated by existing platforms like GIVE.
Impact in the Argentinean Landscape: Natural
language processing, and in particular the field of
dialogue systems is a rapidly growing area in devel-
oped countries. The automatic processing of natu-
ral language has become a strategic capability for
companies and the wider community. However, this
area is extremely underdeveloped in Argentina. This
can be attributed to several factors. (a) The relative
youth of the area of NLP, which implies a relative
dearth of trained professionals throughout the world.
(b) The underdevelopment of the area of research in
Artificial Intelligence and Formal Linguistics in Ar-
gentina, for historical reasons and lack of industry
demand. (c) Poor interaction between the few re-
searchers in NLP that are in the region.
NLP is a strategic research area for Argentina
which can achieve academic excellence and indus-
try relevance. We believe in supporting the devel-
opment of this area by promoting the following.
(a) Training of human resources through doctoral
programs and courses taught in Argentina by in-
ternationally renowned professionals. (b) Incorpo-
ration of trained human resources to contribute to
137
the growth and diversification of the critical mass in
the area. (c) Improving interaction between various
groups and individual researchers in NLP, through
the organization of workshops, courses, visits, co-
tutoring, coordinated specialization programs, etc.
The particular topics investigated in the frame-
work of this project are of relevance in the current
Argentinean landscape for at least two reasons. On
the one hand, the project integrates and develops var-
ious key aspects of the area of computational lin-
guistics (syntax, semantics, pragmatics, representa-
tion, inference, evaluation); an area which, as we
mentioned, is today almost nonexistent in Argentina.
This project will be a step towards reversing this sit-
uation. On the other hand, the ultimate goal of the
project is to investigate the use of the developed plat-
form for distance education (specifically, as a tool
for language learning). Distance education is a valu-
able resource to overcome the problem of centraliza-
tion of educational resources in the country.
4 Introducing the Research Group
The PLN5 research group, in which the describe
scientific project will be carried out, was funded
in 2005. Te group is developing an important
role in human resource training, delivering courses
to undergraduate and postgraduate student at the
Universidad de Co?rdoba and other universities. It
also works in the development of various research
projects and integration with other groups in the re-
gion, both within Argentina and with neighboring
countries (Chile, Brazil and Uruguay).
The current project pools together many of the
key areas of expertise of the members of the group.
To begin with, some members of the group special-
ize in computational logic, particularly in the theo-
retical and applied study of languages for knowledge
representation (e.g., modal, hybrid and description
logics). They have also developed automated theo-
rem provers for these languages6. In relation with
the study of knowledge representation, they have
also investigated and developed algorithms for gen-
erating referring expressions (Areces et al, 2008b).
The second line of research of the PLN group that
is relevant for this project is context-based evalua-
5http://www.cs.famaf.unc.edu.ar/?pln
6http://www.glyc.dc.uba.ar/intohylo/
tion. Members of the group have proposed an eval-
uation model for machine translation systems which
relates the context of use to potentially important
quality characteristics (Estrella et al, 2008; Estrella
et al, 2009). This model is general enough to be
applied to other systems that produce natural lan-
guage like the ones proposed in this paper. Thanks to
the background on machine translation systems the
team has experience evaluating and comparing natu-
ral language output produced in different languages
(Spanish and English in particular), which will be
relevant for the development of the language tutor
described in Section 2.4. Finally, the team has ex-
perience developing and evaluating multimodal cor-
pora like those described in Section 2 (Estrella and
Popescu-Belis, 2008).
The third line of research that is relevant for this
project is pragmatics. In this area the team has im-
plemented a conversational agent which is able to
infer and negotiate conversational implicatures us-
ing inference tasks such as classical planning and
planning under incomplete information (Benotti,
2009b). We have also investigated how to infer
conversational implicatures triggered by compara-
tive utterances (Benotti and Traum, 2009). Recently
we have done corpus-based work, which shows what
kinds of implicatures are inferred and negotiated by
human dialogue participants during a task situated
in a 3D virtual environment (Benotti, 2009a).
Other lines of research in the PLN group are not
directly related to the project at this stage, but might
become relevant in the future. They include gram-
mar induction, text mining, statistical syntactic anal-
ysis and ontology population from raw text.
5 Ongoing and Future Collaborations
The members of the PLN in general and the authors
of this paper in particular have several collaborations
with national and international research groups in
computational linguistics and related fields that are
relevant for this project.
At the international level, we have ongoing col-
laboration with the TIM/ISSCO7 Multilingual In-
formation Processing Department at the University
of Geneva, with the Idiap Research Institute8 and
7http://www.issco.unige.ch/en
8http://www.idiap.ch
138
with some members of the PAI9, Pervasive Artifi-
cial Intelligence group of the University of Fribourg.
These collaborations include the evaluation of NLP
systems and the development of multilingual and
multimodal human language technology systems.
Members of the group have a long standing col-
laboration with the TALARIS10 group of the Labo-
ratoire Lorrain de Recherche en Informatique et ses
Applications (LORIA). The main research topic at
TALARIS is computational linguistics with strong
emphasis on semantics and inference. In the frame-
work of this collaboration we are participating in the
2010 edition of the GIVE Challenge. In the pro-
cess of designing the systems that will participate in
the challenge we jointly investigated the use of dif-
ferent referring strategies in situated instruction giv-
ing (Amoia et al, 2010).
We have also collaborated with the Virtual Hu-
mans group of the Institute for Creative Technolo-
gies11 from the University of Southern California.
In particular we computationally modeled the in-
ference of conversational implicatures triggered by
comparative utterances (Benotti and Traum, 2009).
The Institute for Creative Technologies offers In-
ternship programs every year that we plan to use in
order to strengthen our collaboration.
All these collaborations are directly related to the
main theme of the project described in this arti-
cle. The PLN group has also research collaborations
with other international research teams in the frame-
work of other scientific programs. For example, the
PLN group has being part of a recently finished in-
ternational project MICROBIO12 on ontology popu-
lation from raw text. The project was funded by the
Stic-Amsud13 program, a scientific-technological
cooperation program integrated by France, Argen-
tine, Brazil, Chile, Paraguay, Peru and Uruguay. The
expertise obtained during this project might be use-
ful in the future when trying to extend our GIVE on-
tologies to new domains. Similarly, the team main-
tain scientific relations with the University of Texas
at Austin (mainly with Dr. J. Moore in projects re-
9http://diuf.unifr.ch/pai/wiki
10http://talaris.loria.fr
11http://ict.usc.edu/projects/virtual_humans
12http://www.microbioamsud.net
13http://www.sticamsud.org
lated to the development of the ACL214 prover); and
with the Research team Symbiose15 of the Institut de
Recherche en Informatique et Syste?mes Ale?atoires
(working on the use of linguistic techniques for the
modelisation of genomic sequences).
At the national level, the group has inten-
sively collaborated with GLyC16, Grupo de Lo?gica,
Lenguaje y Computabilidad on knowledge represen-
tation and inference (see, e.g. (Areces and Gor??n,
2005; Areces et al, 2008a)). GLyC is part of the
Computer Science Department of the Universidad
de Buenos Aires. During 2010, teams PLN and
GLyC will join forces and collaborate in the organi-
zation of ELiC17, the First School in Computational
Linguistics in Argentina, which will take place in
July at the Universidad de Buenos Aires. ELiC 2010
will be co-located with the ECI18, Escuela de Cien-
cias Informa?ticas which has a long standing repu-
tation as a high-quality winter school in Computer
Science in Argentina, and is being organized yearly
since 1987. With ELiC we aim at creating, for the
first time, a space to introduce the field of computa-
tional linguistics to graduate students in Argentina.
Thanks to the support of the North American Chap-
ter of the Association for Computational Linguis-
tics (NAACL) and of the Universidad de Buenos
Aires, ELiC is offering student travel grants and fee
waivers to encourage participation.
The PLN group is also contacting other groups
working in computational linguistics in Argentina
like the research group in Artificial Intelligence from
the Universidad Nacional del Comahue19. Taking
advantage of previous co-participation in different
project we plan to organize exchange programs in
the framework of a research network.
Finally, the PLN group is planning to orga-
nize a workshop on Computational Linguistics as
a satellite event of IBERAMIA 201020, the Ibero-
American Conference on Artificial Intelligence, that
will be organized by the Universidad del Sur, in the
city of Bah??a Blanca, Argentina.
14http://www.cs.utexas.edu/users/moore/acl2
15http://www.irisa.fr/symbiose
16http://www.glyc.dc.uba.ar
17http://www.glyc.dc.uba.ar/elic2010
18http://www.dc.uba.ar/events/eci/2009/eci2009
19http://www.uncoma.edu.ar/
20http://cs.uns.edu.ar/iberamia2010
139
References
M. Amoia, A. Denis, L. Benotti, and C. Gardent. 2010.
Evaluating referring strategies in situated instruction
giving. Topics in Cognitive Science. Submitted.
C. Areces and D. Gor??n. 2005. Ordered resolution with
selection for H(@). In F. Baader and A. Voronkov,
editors, Proc. of LPAR 2004, volume 3452 of LNCS,
pages 125?141. Springer.
C. Areces, D. Figueira, S. Figueira, and S. Mera. 2008a.
Expressive power and decidability for memory log-
ics. In Logic, Language, Information and Computa-
tion, volume 5110 of LNCSs, pages 56?68. Springer.
C. Areces, A. Koller, and K. Striegnitz. 2008b. Referring
expressions as formulas of description logic. In Proc.
of INLG-08.
J. Austin. 1962. How to do Things with Words. Oxford
University Press.
L. Benotti and D. Traum. 2009. A computational ac-
count of comparative implicatures for a spoken dia-
logue agent. In Proc. of IWCS-8.
L. Benotti. 2009a. Clarification potential of instructions.
In SIGDIAL-09.
L. Benotti. 2009b. Frolog: An accommodating text-
adventure game. In Proc. of EACL-09.
N. Blaylock. 2005. Towards tractable agent-based dia-
logue. Ph.D. thesis, University of Rochester, Depart-
ment of Computer Science.
D. Byron, A. Koller, K. Striegnitz, J. Cassell, R. Dale,
J. Moore, and J. Oberlander. 2009. Report on the 1st
GIVE challenge. In Proc. of ENLG, pages 165?173.
N. Dahlba?ck, A. Jo?nsson, and L. Ahrenberg. 1998. Wiz-
ard of Oz studies?why and how. In Readings in intel-
ligent user interfaces, pages 610?619. Morgan Kauf-
mann Publishers Inc.
J. Doswell. 2005. It?s virtually pedagogical: pedagogi-
cal agents in mixed reality learning environments. In
Proc. of SIGGRAPH-05, page 25. ACM.
O. Engwall, P. Wik, J. Beskow, and G. Granstro?m. 2004.
Design strategies for a virtual language tutor. In
S. Kim and D. Young, editors, Proc. of ICSLP-04, vol-
ume 3, pages 1693?1696.
P. Estrella and A. Popescu-Belis. 2008. Multi-eval: an
evaluation framework for multimodal dialogue anno-
tations. Poster at the Joint IM2 and ASSI.
P. Estrella, A. Popescu-Belis, and N. Underwood. 2005.
Finding the system that suits you best: Towards the
normalization of MT evaluation. In Proc. of ASLIB-
05, pages 23?34.
P. Estrella, A. Popescu-Belis, and M. King. 2008. Im-
proving contextual quality models for MT evaluation
based on evaluators? feedback. In Proc. of LREC-08.
P. Estrella, A. Popescu-Belis, and M. King. 2009. The
femti guidelines for contextual mt evaluation: princi-
ples and tools. In W. Daelemans and V. Hoste, ed-
itors, Evaluation of Translation Technology. Linguis-
tica Antverpiensia.
M. Foster, M. Giuliani, A. Isard, C. Matheson, J. Ober-
lander, and A. Knoll. 2009. Evaluating description
and reference strategies in a cooperative human-robot
dialogue system. In Proc. of IJCAI-09.
P. Grice. 1975. Logic and conversation. In P. Cole
and J. Morgan, editors, Syntax and Semantics: Vol. 3:
Speech Acts, pages 41?58. Academic Press.
M. Hajdinjak and F. Mihelic. 2006. The paradise evalu-
ation framework: Issues and findings. Computational
Linguistics, 32(2):263?272.
J. Hoffmann and B. Nebel. 2001. The FF planning
system: Fast plan generation through heuristic search.
JAIR, 14:253?302.
ISO/IEC. 1999. 14598-1:1999 (E) ? Information Tech-
nology ? Software Product Evaluation ? Part 1: Gen-
eral Overview.
ISO/IEC. 2001. 9126-1:2001 (E) ? Software Engineer-
ing ? Product Quality ? Part 1:Quality Model.
H. Kautz and B. Selman. 1999. Unifying SAT-based
and graph-based planning. In Proc of the IJCAI, pages
318?325.
R. Lecoeuche, C. Mellish, and D. Robertson. 1998. A
framework for requirements elicitation through mixed-
initiative dialogue. In Proc. ICRE-98. IEEE.
D. Litman and S. Pan. 2002. Designing and evaluating
an adaptive spoken dialogue system. User Modeling
and User-Adapted Interaction, 12(2-3):111?137.
J. Molka-Danielsen and M. Deutschmann, editors. 2009.
Learning and Teaching in the Virtual World of Second
Life. Tapir Academic Press.
D. Nau, M. Ghallab, and P. Traverso. 2004. Automated
Planning: Theory & Practice. Morgan Kaufmann
Publishers Inc.
M. Purver. 2006. CLARIE: Handling clarification re-
quests in a dialogue system. Research on Language
and Computation, 4(2-3):259?288.
E. Schegloff. 1987. Some sources of misunderstanding
in talk-in-interaction. Linguistics, 8:201?218.
P. Wik and A. Hjalmarsson. 2009. Embodied conversa-
tional agents in computer assisted language learning.
Speech Commun., 51(10):1024?1037.
140
