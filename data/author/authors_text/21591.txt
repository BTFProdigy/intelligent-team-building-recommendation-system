Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1225?1236,
October 25-29, 2014, Doha, Qatar. c?2014 Association for Computational Linguistics
Human Effort and Machine Learnability in Computer Aided Translation
Spence Green, Sida Wang, Jason Chuang,
*
Jeffrey Heer,
*
Sebastian Schuster,
and Christopher D. Manning
Computer Science Department, Stanford University
{spenceg,sidaw,sebschu,manning}@stanford.edu
*
Computer Science Department, University of Washington
{jcchuang,jheer}@uw.edu
Abstract
Analyses of computer aided translation typi-
cally focus on either frontend interfaces and
human effort, or backend translation and
machine learnability of corrections. How-
ever, this distinction is artificial in prac-
tice since the frontend and backend must
work in concert. We present the first holis-
tic, quantitative evaluation of these issues
by contrasting two assistive modes: post-
editing and interactive machine translation
(MT). We describe a new translator inter-
face, extensive modifications to a phrase-
based MT system, and a novel objective
function for re-tuning to human correc-
tions. Evaluation with professional bilin-
gual translators shows that post-edit is faster
than interactive at the cost of translation
quality for French-English and English-
German. However, re-tuning the MT sys-
tem to interactive output leads to larger, sta-
tistically significant reductions in HTER
versus re-tuning to post-edit. Analysis
shows that tuning directly to HTER results
in fine-grained corrections to subsequent
machine output.
1 Introduction
The goal of machine translation has always been to
reduce human effort, whether by partial assistance
or by outright replacement. However, preoccupa-
tion with the latter?fully automatic translation?at
the exclusion of the former has been a feature of
the research community since its first nascent steps
in the 1950s. Pessimistic about progress during
that decade and future prospects, Bar-Hillel (1960,
p.3) argued that more attention should be paid to a
?machine-post-editor partnership,? whose decisive
problem is ?the region of optimality in the contin-
uum of possible divisions of labor.? Today, with
human-quality, fully automatic machine translation
(MT) elusive still, that decades-old recommenda-
tion remains current.
This paper is the first to look at both sides of
the partnership in a single user study. We compare
two common flavors of machine-assisted transla-
tion: post-editing and interactive MT. We analyze
professional, bilingual translators working in both
modes, looking first at user productivity. Does the
additional machine assistance available in the inter-
active mode affect translation time and/or quality?
Then we turn to the machine side of the part-
nership. The user study results in corrections to
the baseline MT output. Do these corrections help
the MT system, and can it learn from them quickly
enough to help the user? We perform a re-tuning
experiment in which we directly optimize human
Translation Edit Rate (HTER), which correlates
highly with human judgments of fluency and ade-
quacy (Snover et al., 2006). It is also an intuitive
measure of human effort, making fine distinctions
between 0 (no editing) and 1 (complete rewrite).
We designed a new user interface (UI) for the
experiment. The interface places demands on the
MT backend?not the other way around. The most
significant new MT system features are prefix de-
coding, for translation completion based on a user
prefix; and dynamic phrase table augmentation, to
handle target out-of-vocabulary (OOV) words. Dis-
criminative re-tuning is accomplished with a novel
cross-entropy objective function.
We report three main findings: (1) post-editing
is faster than interactive MT, corroborating Koehn
(2009a); (2) interactive MT yields higher quality
translation when baseline MT quality is high; and
(3) re-tuning to interactive feedback leads to larger
held-out HTER gains relative to post-edit. Together
these results show that a human-centered approach
to computer aided translation (CAT) may involve
tradeoffs between human effort and machine
learnability. For example, if speed is the top
priority, then a design geared toward post-editing
1225
AB
C
D E
Figure 1: Main translation interface. The user sees the full document context, with French source inputs
(A) interleaved with suggested English translations (B). The sentence in focus is indicated by the blue
rectangle, which can be moved via two hot keys. Source coverage (C) of the user prefix?shaded in
blue?updates as the user works, as do autocomplete suggestions (D) and a full completion (E).
is appropriate. However, if reductions in HTER
ultimately correspond to lower human effort, then
investing slightly more time in the interactive mode,
which results in more learnable output, may be op-
timal. Mixed UI designs may offer a compromise.
Code and data from our experiments are available at:
http://nlp.stanford.edu/software/phrasal/
A holistic comparison with human subjects nec-
essarily involves many moving parts. Section 2
briefly describes the interface, focusing on NLP
components. Section 3 describes changes to the
backend MT system. Section 4 explains the user
study, and reports human translation time and qual-
ity results. Section 5 describes the MT re-tuning
experiment. Analysis (section 6) and related work
(section 7) round out the paper.
2 New Translator User Interface
Figure 1 shows the translator interface, which is
designed for expert, bilingual translators. Previ-
ous studies have shown that expert translators work
and type quickly (Carl, 2010), so the interface is
designed to be very responsive, and to be primar-
ily operated by the keyboard. Most aids can be
accessed via either typing or four hot keys. The
current design focuses on the point of text entry
and does not include conventional translator work-
bench features such as workflow management, spell
checking, and text formatting tools.
In the trivial post-edit mode, the interactive aids
are disabled and a 1-best translation pre-populates
the text entry box.
We have described the HCI-specific motivations
for and contributions of this new interface in Green
et al. (2014c). This section focuses on interface
elements built on NLP components.
2.1 UI Overview and Walkthrough
We categorized interactions into three groups:
source comprehension: word lookups, source cov-
erage highlighting; target gisting: 1-best transla-
tion, real-time target completion; target genera-
tion: real-time autocomplete, target reordering, in-
sert complete translation. The interaction designs
are novel; those in italic have, to our knowledge,
never appeared in a translation workbench.
Source word lookup When the user hovers over
a source word, a menu of up to four ranked trans-
lation suggestions appears (Figure 2). The menu
is populated by a phrase-table query of the word
plus one token of left context. This query usually
returns in under 50ms. The width of the horizontal
bars indicates confidence, with the most confident
suggestion ?regularly? placed at the bottom, near-
est to the cursor. The user can insert a translation
suggestion by clicking.
Source coverage highlighting The source cover-
age feature (Figure 1C) helps the user quickly find
untranslated words in the source. The interaction is
1226
Figure 2: Source word lookup and target autocom-
plete menus. The menus show different suggestions.
The word lookupmenu (top) is not dependent on the
target context Teachers, whereas the autocomplete
dropdown (bottom) is.
based on the word alignments between source and
target generated by the MT system. We found that
the raw alignments are too noisy to show users, so
the UI filters them with phrase-level heuristics.
1-best translation The most common use of MT
output is gisting (Koehn, 2010, p.21). The gray text
below each black source input shows the best MT
system output (Figure 1B).
Real-time target completion When the user ex-
tends the black prefix, the gray text will update to
the most probable completion (Figure 1E). This up-
date comes from decoding under the full translation
model. All previous systems performed inference
in a word lattice.
Real-time autocomplete The autocomplete
dropdown at the point of text entry is the main
translation aid (Figures 1D and 2). Each real-time
update actually contains a distinct 10-best list for
the full source input. The UI builds up a trie from
these 10-best lists. Up to four distinct suggestions
are then shown at the point of translation. The
suggestion length is based on a syntactic parse of
the fixed source input. As an offline, pre-processing
step, we parse each source input with Stanford
CoreNLP (Manning et al., 2014). The UI combines
those parses with word alignments from the full
translation suggestions to project syntactic con-
stituents to each item on the n-best list. Syntactic
projection is a very old idea that underlies many
MT systems (see: Hwa et al. (2002)). Here we
make novel use of it for suggestion prediction
filtering.
1
Presently, we project noun phrases,
verb phrases (minus the verbal arguments), and
prepositional phrases. Crucially, these units are
natural to humans, unlike statistical target phrases.
Target Reordering Carl (2010) showed that ex-
pert translators tend to adopt local planning: they
read a few words ahead and then translate in a
roughly online fashion. However, word order differ-
ences between languages will necessarily require
longer range planning and movement. To that end,
the UI supports keyboard-based reordering. Sup-
pose that the user wants to move a span in gray
text to the insertion position for editing. Typing
the prefix of this string will update the autocom-
plete dropdown with matching strings from the gray
text. Consequently, sometimes the autocomplete
dropdown will contain suggestions from several
positions in the full suggested translation.
Insert complete translation The user can insert
the full completion via a hot key. Notice that if
the user presses this hot key immediately, all gray
text becomes black, and the interface effectively
switches to post-edit mode. This feature greatly ac-
celerates translation when the MT is mostly correct,
and the user only wants to make a few changes.
2.2 User Activity Logging
A web application serves the Javascript-based in-
terface, relays translation requests to the MT sys-
tem, and logs user records to a database. Each user
record is a tuple of the form (f, e?, h, u), where f
is the source sequence, e? is the latest 1-best ma-
chine translation of f , h is the correction of e?, and
u is the log of interaction events during the transla-
tion session. Our evaluation corpora also include
independently generated references e for each f .
3 Interactive MT Backend
Now we describe modifications to Phrasal (Green
et al., 2014b), the phrase-based MT system that sup-
ports the interface. Phrasal follows the log-linear
approach to phrase-based translation (Och and Ney,
2004) in which the decision rule has the familiar
linear form
e? = arg max
e
w
>
?(e, f) (1)
1
The classic TransType system included a probabilistic
prediction length component (Foster et al., 2002), but we find
that the simpler projection technique works well in practice.
1227
where w ? R
d
is the model weight vector and
?(?) ? R
d
is a feature map.
3.1 Decoding
The default Phrasal search algorithm is cube prun-
ing (Huang and Chiang, 2007). In the post-edit con-
dition, search is executed as usual for each source
input, and the 1-best output is inserted into the tar-
get textbox. However, in interactive mode, the full
search algorithm is executed each time the user
modifies the partial translation. Machine sugges-
tions e? must match user prefix h. Define indicator
function pref(e?, h) to return true if e? begins with
h, and false otherwise. Eq. 1 becomes:
e? = arg max
e s.t.pref(e,h)
w
>
?(e, f) (2)
Cube pruning can be straightforwardly modified to
satisfy this constraint by simple string matching of
candidate translations. Also, the pop limit must be
suspended until at least one legal candidate appears
on each beam, or the priority queue of candidates is
exhausted. We call this technique prefix decoding.
2
There is another problem. Human translators are
likely to insert unknown target words, including
new vocabulary, misspellings, and typographical
errors. They might also reorder source text so as to
violate the phrase-based distortion limit. To solve
these problems, we perform dynamic phrase table
augmentation, adding new synthetic rules specific
to each search. Rules allowing any source word to
align with any unseen or ungeneratable (due to the
distortion limit) target word are created.
3
These
synthetic rules are given rule scores lower than any
other rules in the set of queried rules for that source
input f . Then candidates are allowed to compete
on the beam. Candidates with spurious alignments
will likely be pruned in favor of those that only turn
to synthetic rules as a last resort.
3.2 Tuning
We choose BLEU (Papineni et al., 2002) for base-
line tuning to independent references, and HTER
for re-tuning to human corrections. Our rationale
is as follows: Cer et al. (2010) showed that BLEU-
tuned systems score well across automatic metrics
and also correlate with human judgment better than
2
Och et al. (2003) describe a similar algorithm for word
graphs.
3
Ortiz-Mart?nez et al. (2009) describe a related technique
in which all source and target words can align, with scores set
by smoothing.
systems tuned to other metrics. Conversely, sys-
tems tuned to edit-distance-based metrics like TER
tend to produce short translations that are heavily
penalized by other metrics.
When human corrections become available, we
switch to HTER, which correlates with human judg-
ment and is an interpretable measure of editing
effort. Whereas TER is computed as TER(e, e?),
HTER is HTER(h, e?). HBLEU is an alternative,
but since BLEU is invariant to some permutations
(Callison-Burch et al., 2006), it is less interpretable.
We find that it also does not work as well in practice.
We previously proposed a fast, online tuning al-
gorithm (Green et al., 2013b) based on AdaGrad
(Duchi et al., 2011). The default loss function is
expected error (EE) (Och, 2003; Cherry and Foster,
2012). Expected BLEU is an example of EE, which
we found to be unstable when switching metrics.
This may result from direct incorporation of the
error metric into the gradient computation.
To solve this problem, we propose a cross-
entropy loss which, to our knowledge, is new in
MT. Let
?
E = {e?
i
}
n
i=1
be an n-best list ranked
by a gold metric G(e, e?) ? 0. Assume we
have a preference of a higher G (e.g., BLEU or
1?HTER). Define the model distribution over
?
E
as q(e?|f) ? exp[w
>
?(e?, f)] normalized so that
?
e??
?
E
q(e?|f) = 1; q indicates howmuch the model
prefers each translation. Similarly, define p(e?|f)
based on any function of the gold metric so that
?
e??
?
E
p(e?|f) = 1; p indicates how much the met-
ric prefers each translation. We choose a DCG-
style
4
parameterization that skews the p distribu-
tion toward higher-ranked items on the n-best list:
p(e?
i
|f) ? G(e, e?
i
)/ log(1 + i) for the ith ranked
item. The cross-entropy (CE) loss function is:
`
CE
(w;E) = E
p(e?|f)
[? log(q(e?|f)] (3)
It turns out that if p is simply the posterior distribu-
tion of the metric, then this loss is related to the log
of the standard EE loss:
5
`
EE
(w;E) = ? log[E
p(e?|f)
[q(e?|f)]] (4)
We can show that `
CE
? `
EE
by applying Jensen?s
inequality to the function ? log(?). So minimizing
`
CE
also minimizes a convex upper bound of the
log expected error. This convexity given the n-
4
Discounted cumulative gain (DCG) is widely used in infor-
mation retrieval learning-to-rank settings. n-best MT learning
is standardly formulated as a ranking task.
5
For expected error, p(e?
i
) = G(e, e?
i
) is not usually nor-
malized. Normalizing p adds a negligible constant.
1228
best list does not mean that the overall MT tuning
loss is convex, since the n-best list contents and
order depend on the parameters w. However, all
regret bounds and other guarantees of online con-
vex optimization would now apply in the CE case
since `
CE,t
(w
t?1
;E
t
) is convex for each t. This
is attractive compared to expected error, which is
non-convex even given the n-best list. We empiri-
cally observed that CE converges faster and is less
sensitive to hyperparameters than EE.
Faster decoding trick We found that online tun-
ing also permits a trick that speeds up decoding
during deployment. Whereas the Phrasal default
beam size is 1,200, we were able to reduce the beam
size to 800 and run the tuner longer to achieve the
same level of translation quality. For example, at
the default beam size for French-English, the algo-
rithm converges after 12 iterations, whereas at the
lower beam size it achieves that level after 20 itera-
tions. In our experience, batch tuning algorithms
seem to be more sensitive to the beam size.
3.3 Feature Templates
The baseline system contains 19 dense feature tem-
plates: the nine Moses (Koehn et al., 2007) baseline
features, the eight-feature hierarchical lexicalized
re-ordering model of Galley and Manning (2008),
the (log) count of each rule in the bitext, and an
indicator for unique rules. We found that sparse
features, while improving translation quality, came
at the cost of slower decoding due to feature extrac-
tion and inner products with a higher dimensional
feature map ?. During prototyping, we observed
that users found the system to be sluggish unless
it responded in approximately 300ms or less. This
budget restricted us to dense features.
When re-tuning to corrections, we extract fea-
tures from the user logs u and add them to the
baseline dense model. For each tuning input f ,
the MT system produces candidate derivations d =
(f, e?, a), where a is a word alignment. The user log
u also contains the last MT derivation
6
accepted
by the user d
u
= (f, e?
u
, a
u
). We extract features
by comparing d and d
u
. The heuristic we take is
intersection: ?(d)? ?(d) ? ?(d
u
).
Lexicalized and class-based alignments Con-
sider the alignment in Figure 3. We find that
user derivations often contain many unigram rules,
6
Extracting features from intermediate user editing actions
is an interesting direction for future work.
tarceva
parvient
ainsi
?
stopper
la
croissance
t
a
r
c
e
v
a
w
a
s
t
h
u
s
a
b
l
e
t
o
h
a
l
t
t
h
e
g
r
o
w
t
h
Figure 3: User translation word alignment obtained
via prefix decoding and dynamic phrase table aug-
mentation.
which are less powerful than larger phrases, but
nonetheless provide high-precision lexical choice
information. We fire indicators for both unigram
links and multiword cliques. We also fire class-
based versions of this feature.
Source OOV blanket Source OOVs are usually
more frequent when adapting to a new domain. In
the case of European languages?our experimental
setting?many of the words simply transfer to the
target, so the issue is where to position them. In Fig-
ure 3, the proper noun tarceva is unknown, so the de-
coder OOV model generates an identity translation
rule. We add features in which the source word is
concatenated with the left, right, and left/right con-
texts in the target, e.g., {<s>-tarceva, tarceva-
was, <s>-tarceva-was}. We also add versions
with target words mapped to classes.
3.4 Differences from Previous Work
Our backend innovations support the UI and enable
feature-based learning from human corrections. In
contrast, most previous work on incremental MT
learning has focused on extracting new translation
rules, language model updating, and modifying
translation model probabilities (see: Denkowski
et al. (2014a)). We regard these features as ad-
ditive to our own work: certainly extracting new,
unseen rules should help translation in a new do-
main. Moreover, to our knowledge, all previous
work on updating the weight vector w has consid-
ered simulated post-editing, in which the indepen-
dent references e are substituted for corrections h.
Here we extract features from and re-tune to actual
corrections to the baseline MT output.
1229
4 Translation User Study
We conducted a human translation experiment with
a 2 (translation conditions) ? n (source sentences)
mixed design, where n depended on the language
pair. Translation conditions (post-edit and interac-
tive) and source sentences were the independent
variables (factors). Experimental subjects saw all
factor levels, but not all combinations, since one
exposure to a sentence would influence another.
Subjects completed the experiment remotely on
their own hardware. They received personalized
login credentials for the translation interface, which
administered the experiment. Subjects first com-
pleted a demographic questionnaire about prior ex-
perience with CAT and language proficiency. Next,
they completed a training module that included a
4-minute tutorial video and a practice ?sandbox? for
developing proficiency with the UI. Then subjects
completed the translation experiment. Finally, they
completed an exit questionnaire.
Unlike the experiment of Koehn (2009a), sub-
jects were under time pressure. An idle timer pre-
vented subjects from pausing for more than three
minutes while the translator interface was open.
This constraint eliminates a source of confound in
the timing analysis.
We randomized the order of translation condi-
tions and the assignment of sentences to conditions.
At most five sentences appeared per screen, and
those sentences appeared in the source document
order. Subjects could move among sentences within
a screen, but could not revise previous screens. Sub-
jects received untimed breaks both between trans-
lation conditions and after about every five screens
within a translation condition.
4.1 Linguistic Materials
We chose two language pairs: French-English (Fr-
En) and English-German (En-De). Anecdotally,
French-English is an easy language pair for MT,
whereas English-German is very hard due to re-
ordering and complex German morphology.
We chose three text genres: software, medical,
and informal news. The software text came from
the graphical interfaces of Autodesk AutoCAD and
Adobe Photoshop. The medical text was a drug re-
view from the European Medicines Agency. These
two data sets came from TAUS
7
and included inde-
pendent reference translations. The informal news
text came from the WMT 2013 shared task test set
7http://www.tausdata.org/
(Bojar et al., 2013). The evaluation corpus was con-
structed from equal proportions of the three genres.
The Fr-En dataset contained 3,003 source tokens
(150 segments); the En-De dataset contained 3,002
(173 segments). As a rule of thumb, a human trans-
lator averages about 2,700 source tokens per day
(Ray, 2013, p.36), so the experiment was designed
to replicate a slightly demanding work day.
4.2 Selection of Subjects
For each language pair, we recruited 16 profes-
sional, freelance translators on Proz, which is the
largest online translation community.
8
We posted
ads for both language pairs at a fixed rate of $0.085
per source word, an average rate in the industry. In
addition, we paid $10 to each translator for complet-
ing the training module. All subjects had significant
prior experience with a CAT workbench.
4.3 Results
We analyze the translation conditions in terms of
two response variables: time and quality. We ex-
cluded one Fr-En subject and two En-De subjects
from the models. One subject misunderstood the in-
structions of the experiment and proceeded without
clarification; another skipped the training module
entirely. The third subject had a technical problem
that prevented logging. Finally, we also filtered
segment-level sessions for which the log of transla-
tion time was greater than 2.5 standard deviations
from the mean.
4.3.1 Translation Time
We analyze time with a linear mixed effects model
(LMEM) estimated with the lme4 (Bates, 2007) R
package. When experimental factors are sampled
from larger populations?e.g., humans, sentences,
words?LMEMs are more robust to type II errors
(see: Baayen et al. (2008)). The log-transformed
time is the response variable and translation condi-
tion is the main independent variable. The maximal
random effects structure (Barr et al., 2013) contains
intercepts for subject, sentence id, and text genre,
each with random slopes for translation condition.
We found significant main effects for translation
condition (Fr-En, p < 0.05; En-De, p < 0.01).
The orientation of the coefficients indicates that
interactive is slower for both language pairs. For Fr-
En, the LMEM predicts a mean time (intercept) of
46.0 sec/sentence in post-edit vs. 54.6 sec/sentence
8http://www.proz.com
1230
Fr-En En-De
TER HTER TER HTER
post-edit 47.32 23.51 56.16 37.15
interactive 47.05 24.14 55.89 39.55
Table 1: Automatic assessment of translation qual-
ity. Here we change the definitions of TER and
HTER slightly. TER is the human translations com-
pared to the independent references. HTER is the
baseline MT compared to the human corrections.
in interactive, or 18.7% slower. For En-De, the
mean is 51.8 sec/sentence vs. 63.3 sec/sentence in
interactive, or 22.1% slower.
We found other predictive covariates that reveal
more about translator behavior. When subjects did
not edit the MT suggestion, they were significantly
faster. When token edit distance fromMT or source
input length increased, they were slower. Subjects
were usually faster as the experiment progressed, a
result that may indicate increased proficiency with
practice. Note that all subjects reported profes-
sional familiarity with post-edit, whereas the in-
teractive mode was entirely new to them. In the
exit survey many translators suggested that with
more practice, they could have been as fast in the
interactive mode.
9
4.3.2 Translation Quality
We evaluated translation quality with both auto-
matic and manual measures. Table 1 shows that
in the interactive mode, TER is lower and HTER
is higher: subjects created translations closer to
the references (lower TER), but performed more
editing (higher HTER). This result suggests better
translations in the interactive mode.
To confirm that intuition, we elicited judgments
from professional human raters. The setup followed
the manual quality evaluation of the WMT 2014
shared task (Bojar et al., 2014). We hired six raters?
three for each language pair?who were paid be-
tween $15?20 per hour. The raters logged into Ap-
praise (Federmann, 2010) and for each source seg-
ment, ranked five randomly selected translations.
From these 5-way rankings we extracted pairwise
judgments pi = {<,=}, where u
1
< u
2
indicates
that subject u
1
provided a better translation than
subject u
2
for a given source input (Table 2).
9
See (Green et al., 2014c) for significance levels of the
other covariates along with analysis of subject learning rates,
subject behavior, and qualitative feedback.
Fr-En En-De
#pairwise 14,211 15,001
#ties (=) 5,528 2,964
IAA 0.419 (0.357) 0.407 (0.427)
EW (inter.) 0.512 0.491
Table 2: Pairwise judgments for the manual qual-
ity assessment. Inter-annotator agreement (IAA)
? scores are measured with the official WMT14
script. For comparison, the WMT14 IAA scores
are given in parentheses. EW (inter.) is expected
wins of interactive according to Eq. (6).
Fr-En En-De
sign p sign p
ui (interactive) + ? ?
log edit distance ? ??? + ???
gender (female) ? + ?
log session order ? + ?
Table 3: LMEM manual translation quality results
for each fixed effect with contrast conditions for
binary predictors in (). The signs of the coefficients
can be interpreted as in ordinary regression. edit
distance is token-level edit distance from baseline
MT. session order is the order in which the subject
translated the sentence during the experiment. Sta-
tistical significance was computed with a likelihood
ratio test: ??? p < 0.001; ? p < 0.05.
In WMT the objective is to rank individual sys-
tems; here we need only compare interface condi-
tions. However, we should control for translator
variability. Therefore, we build a binomial LMEM
for quality. The model is motivated by the simple
and intuitive expected wins (EW) measure used at
WMT. Let S be the set of pairwise judgments and
wins(u
1
, u
2
) = |{(u
1
, u
2
, pi) ? S | pi = <}|. The
standard EW measure is:
e(u
1
) =
1
|S|
?
u
1
6=u
2
wins(u
1
, u
2
)
wins(u
1
, u
2
) + wins(u
2
, u
1
)
(5)
Sakaguchi et al. (2014) showed that, despite its sim-
plicity, Eq. (5) is nearly as effective as model-based
methods given sufficient high-quality judgments.
Since we care only about the two translation condi-
tions, we reinterpret the u
i
as interface conditions,
i.e., u
1
= int and u
2
= pe. We can then disregard
1231
the normalizing term to obtain:
e(u
1
) =
wins(u
1
, u
2
)
wins(u
1
, u
2
) + wins(u
2
, u
1
)
(6)
which is the expected value of a Bernoulli distribu-
tion (so e(u
2
) = 1 ? e(u
1
)). The intercept-term
of the binomial LMEM will be approximately this
value subject to other fixed and random effects.
To estimate the model, we convert each pairwise
judgment u
1
< u
2
to two examples where the re-
sponse is 1 for u
1
and 0 for u
2
. We add the fixed
effects shown in Table 3, where the numeric effects
are centered and scaled by their standard deviations.
The maximal random effects structure contains in-
tercepts for sentence id nested within subject along
with random slopes for interface condition.
Table 3 shows the p-values and coefficient orien-
tations. The models yield probabilities that can be
interpreted like Eq. (6) but with all fixed predictors
set to 0. For Fr-En, the value for post-edit is 0.472
vs. 0.527 for interactive. For En-De, post-edit is
0.474 vs. 0.467 for interactive. The difference is
statistically significant for Fr-En, but not for En-De.
When MT quality was anecdotally high (Fr-En),
high token-level edit distance from the initial sug-
gestion decreased quality. When MT was poor (En-
De), significant editing improved quality. Female
En-De translators were better than males, possibly
due to imbalance in the subject pool (12 females vs.
4 males). En-De translators seemed to improve with
practice (positive coefficient for session order).
The Fr-En results are the first showing an inter-
active UI that improves over post-edit.
5 MT Re-tuning Experiment
The human translators corrected the output of the
BLEU-tuned, baseline MT system. No updating of
the MT system occurred during the experiment to
eliminate a confound in the time and quality analy-
ses. Now we investigate re-tuning the MT system
to the corrections by simply re-starting the online
learning algorithm from the baseline weight vector
w, this time scoring with HTER instead of BLEU.
Conventional incremental MT learning experi-
ments typically resemble domain adaptation: small-
scale baselines are trained and tuned on mostly out-
of-domain data, and then re-tuned incrementally
on in-domain data. In contrast, we start with large-
scale systems. This is more consistent with a pro-
fessional translation environment where translators
receive suggestions from state-of-the-art systems
like Google Translate.
Bilingual Monolingual
#Segments #Tokens #Tokens
En-De 4.54M 224M 1.7B
Fr-En 14.8M 842M 2.24B
Table 4: Gross statistics of MT training corpora.
En-De Fr-En
baseline-tune 9,469 8,931
baseline-dev 9,012 9,030
int-tune 680 589
int-test 457 368
pe-tune 764 709
pe-test 492 447
Table 5: Tuning, development, and test corpora
(#segments). tune and dev were used for baseline
system preparation. Re-tuning was performed on
int-tune and pe-tune, respectively. We report held-
out results on the two test data sets. All sets are
supplied with independent references.
5.1 Datasets
Table 4 shows the monolingual and parallel train-
ing corpora. Most of the data come from the con-
strained track of the WMT 2013 shared task (Bojar
et al., 2013). We also added 61k parallel segments
of TAUS data to the En-De bitext, and 26k TAUS
segments to the Fr-En bitext. We aligned the par-
allel data with the Berkeley Aligner (Liang et al.,
2006) and symmetrized the alignments with the
grow-diag heuristic. For each target language we
used lmplz (Heafield et al., 2013) to estimate unfil-
tered, 5-gram Kneser-Ney LMs from the concate-
nation of the target side of the bitext and the mono-
lingual data. For the class-based features, we esti-
mated 512-class source and target mappings with
the algorithm of Green et al. (2014a).
The upper part of Table 5 shows the baseline
tuning and development sets, which also contained
1/3 TAUS medical text, 1/3 TAUS software text,
and 1/3 WMT newswire text (see section 4).
The lower part of Table 5 shows the organization
of the human corrections for re-tuning and testing.
Recall that for each unique source input, eight hu-
man translators produced a correction in each con-
dition. First, we filtered all corrections for which a
log u was not recorded (due to technical problems).
Second, we de-duplicated the corrections so that
each h was unique. Finally, we split the unique
(f, h) tuples according to a natural division in the
1232
System tune BLEU? TER? HTER
baseline bleu 23.12 60.29 44.05
re-tune hter 22.18 60.85 43.99
re-tune+feat hter 21.73 59.71 42.35
(a) En-De int-test results.
System tune BLEU? TER? HTER
baseline bleu 39.33 45.29 28.28
re-tune hter 39.99 45.73 26.96
re-tune+feat hter 40.30 45.28 26.40
(b) Fr-En int-test results.
Table 6: Main re-tuning results for interactive
data. baseline is the BLEU-tuned system used
in the translation user study. re-tune is the base-
line feature set re-tuned to HTER on int-tune. re-
tune+feat adds the human feature templates de-
scribed in section 3.3. bold indicates statistical
significance relative to the baseline at p < 0.001;
italic at p < 0.05 by the permutation test of Riezler
and Maxwell (2005).
data. There were five source segments per docu-
ment, and each document was rendered as a single
screen during the translation experiment. Segment
order was not randomized, so we could split the
data as follows: assign the first three segments of
each screen to tune, and the last two to test. This is
a clean split with no overlap.
This tune/test split has two attractive properties.
First, if we can quickly re-tune on the first few sen-
tences on a screen and provide better translations
for the last few, then presumably the user experience
improves. Second, source inputs f are repeated?
eight translators translated each input in each condi-
tion. This means that a reduction in HTER means
better average suggestions for multiple human trans-
lators. Contrast this experimental design with tun-
ing to the corrections of a single human translator.
There the system might overfit to one human style,
and may not generalize to other human translators.
5.2 Results
Table 6 contains the main results for re-tuning to in-
teractive MT corrections. For both language pairs,
we observe large statistically significant reductions
inHTER.However, the results for BLEU and TER?
which are computed with respect to the independent
references?are mixed. The lower En-De BLEU
score is explained by a higher brevity penalty for
the re-tuned output (0.918 vs. 0.862). However, the
re-tuned 4-gram and 3-gram precisions are signif-
System HTER? System HTER?
int pe
baseline 44.05 baseline 41.05
re-tune (int) 43.99 re-tune (pe) 40.34
re-tune+feat 42.35 ? ?
? ?1.80 ?0.71
Table 7: En-De test results for re-tuning to post-edit
(pe) vs. interactive (int). Features cannot be ex-
tracted from the post-edit data, so the re-tune+feat
system cannot be learned. The Fr-En results are
similar but are omitted due to space.
icantly higher. The unchanged Fr-En TER value
can be explained by the observation that no human
translators produced TER scores higher than the
baselineMT. This odd result has also been observed
for BLEU (Culy and Riehemann, 2003), although
here we do observe a slight BLEU improvement.
The additional features (854 for Fr-En; 847 for
En-De) help significantly and do not slow down
decoding. We used the same L
1
regularization
strength as the baseline, but feature growth could
be further constrained by increasing this parame-
ter. Tuning is very fast at about six minutes for the
whole dataset, so tuning during a live user session
is already practical.
Table 7 compares re-tuning to interactive vs.
post-edit corrections. Recall that the int-test and
pe-test datasets are different and contain different
references. The post-edit baseline is lower because
humans performed less editing in the baseline con-
dition (see Table 1). Features account for the great-
est reduction in HTER. Of course, the features are
based mostly on word alignments, which could be
obtained for the post-edit data by running an online
word alignment tool (see: Farajian et al. (2014)).
However, the interactive logs contain much richer
user state information that we could not exploit due
to data sparsity. We also hypothesize that the fi-
nal interactive corrections might be more useful
since suggestions prime translators (Green et al.,
2013a), and the MT system was able to refine its
suggestions.
6 Re-tuning Analysis
Tables 6 and 7 raise two natural questions: what
accounts for the reduction in HTER, and why are
the TER/BLEU results mixed? Comparison of the
BLEU-tuned baseline to the HTER re-tuned sys-
tems gives some insight. For both questions, fine-
1233
grained corrections appear to make the difference.
Consider this French test example (with gloss):
(1) une
one
ligne
line
de
of
chimioth?rapie
chemotherapy
ant?rieure
previous
The independent reference for une ligne de chimio-
th?rapie is ?previous chemotherapy treatment?, and
the baseline produces ?previous chemotherapy line.?
The source sentence appears seven times with the
following user translations: ?one line or more
of chemotherapy?, ?one prior line of chemother-
apy?, ?one previous line of chemotherapy? (2), ?one
line of chemotherapy before? (2), ?one protocol of
chemotherapy?. The re-tuned, feature-based sys-
tem produces ?one line of chemotherapy before?,
matching two of the humans exactly, and six of the
humans in terms of idiomatic medical jargon (?line
of chemotherapy? vs. ?chemotherapy treatment?).
However, the baseline output would have received
better BLEU and TER scores.
Sometimes re-tuning improves the translations
with respect to both the reference and the human
corrections. This English phrase appears in the
En-De test set:
(2) depending
abh?ngig
on
von
the
der
file
datei
The baseline produces exactly the gloss shown in Ex.
(2). The human translators produced: ?je nach datei?
(6), ?das dokument?, and ?abh?ngig von der datei?.
The re-tuned system rendered the phrase ?je nach
dokument?, which is closer to both the independent
reference ?je nach datei? and the human corrections.
This change improves TER, BLEU, and HTER.
7 Related Work
The process study most similar to ours is that of
Koehn (2009a), who compared scratch, post-edit,
and simple interactive modes. However, he used un-
dergraduate, non-professional subjects, and did not
consider re-tuning. Our experimental design with
professional bilingual translators follows our previ-
ous work Green et al. (2013a) comparing scratch
translation to post-edit.
Many research translation UIs have been pro-
posed including TransType (Langlais et al., 2000),
Caitra (Koehn, 2009b), Thot (Ortiz-Mart?nez and
Casacuberta, 2014), TransCenter (Denkowski et
al., 2014b), and CasmaCat (Alabau et al., 2013).
However, to our knowledge, none of these inter-
faces were explicitly designed according to mixed-
initiative principles from the HCI literature.
Incremental MT learning has been investigated
several times, usually starting from no data (Bar-
rachina et al., 2009; Ortiz-Mart?nez et al., 2010),
via simulated post-editing (Mart?nez-G?mez et al.,
2012; Denkowski et al., 2014a), or via re-ranking
(W?schle et al., 2013). No previous experiments
combined large-scale baselines, full re-tuning of
the model weights, and HTER optimization.
HTER tuning can be simulated by re-
parameterizing an existing metric. Snover et
al. (2009) tuned TERp to correlate with HTER,
while Denkowski and Lavie (2010) did the same
for METEOR. Zaidan and Callison-Burch (2010)
showed how to solicit MT corrections for HTER
from Amazon Mechanical Turk.
Our learning approach is related to coactive learn-
ing (Shivaswamy and Joachims, 2012). Their basic
preference perceptron updates toward a correction,
whereas we use the correction for metric scoring
and feature extraction.
8 Conclusion
We presented a new CAT interface that supports
post-edit and interactive modes. Evaluation with
professional, bilingual translators showed post-edit
to be faster, but prior subject familiarity with post-
edit may have mattered. For French-English, the
interactive mode enabled higher quality translation.
Re-tuning the MT system to interactive corrections
also yielded large HTER gains. Technical contri-
butions that make re-tuning possible are a cross-
entropy objective, prefix decoding, and dynamic
phrase table augmentation. Larger quantities of cor-
rections should yield further gains, but our current
experiments already establish the feasibility of Bar-
Hillel?s virtuous ?machine-post-editor partnership?
which benefits both humans and machines.
Acknowledgements
We thank TAUS for access to their data reposi-
tory. We also thank John DeNero, Chris Dyer,
Alon Lavie, and Matt Post for helpful conversa-
tions. The first author is supported by a National
Science Foundation Graduate Research Fellowship.
This work was also supported by the Defense Ad-
vanced Research Projects Agency (DARPA) Broad
Operational Language Translation (BOLT) program
through IBM. Any opinions, findings, and conclu-
sions or recommendations expressed are those of
the author(s) and do not necessarily reflect the view
of either DARPA or the US government.
1234
References
V. Alabau, R. Bonk, C. Buck, M. Carl, F. Casacuberta,
M. Garc?a-Mart?nez, et al. 2013. Advanced com-
puter aided translation with a web-based workbench.
In 2nd Workshop on Post-Editing Technologies and
Practice.
R.H. Baayen, D.J. Davidson, and D.M. Bates. 2008.
Mixed-effects modeling with crossed random effects
for subjects and items. Journal of Memory and Lan-
guage, 59(4):390?412.
Y. Bar-Hillel. 1960. The present status of automatic
translation of languages. Advances in Computers,
1:91?163.
D. J. Barr, R. Levy, C. Scheepers, and H. J. Tily. 2013.
Random effects structure for confirmatory hypothe-
sis testing: Keep it maximal. Journal of Memory
and Language, 68(3):255?278.
S. Barrachina, O. Bender, F. Casacuberta, J. Civera,
E. Cubel, S. Khadivi, et al. 2009. Statistical ap-
proaches to computer-assisted translation. Compu-
tational Linguistics, 35(1):3?28.
D. M. Bates. 2007. lme4: Linear mixed-
effects models using S4 classes. Technical re-
port, R package version 1.1-5, http://cran.r-
project.org/package=lme4.
O. Bojar, C. Buck, C. Callison-Burch, C. Federmann,
B. Haddow, P. Koehn, et al. 2013. Findings of the
2013 Workshop on Statistical Machine Translation.
In WMT.
O. Bojar, C. Buck, C. Federmann, B. Haddow, P. Koehn,
J. Leveling, et al. 2014. Findings of the 2014 Work-
shop on Statistical Machine Translation. In WMT.
C. Callison-Burch, M. Osborne, and P. Koehn. 2006.
Re-evaluating the role of BLEU in machine transla-
tion research. In EACL.
M. Carl. 2010. A computational framework for a cogni-
tive model of human translation processes. In Aslib
Translating and the Computer Conference.
D. Cer, C. D.Manning, and D. Jurafsky. 2010. The best
lexical metric for phrase-based statistical MT system
optimization. In NAACL.
C. Cherry and G. Foster. 2012. Batch tuning strategies
for statistical machine translation. In NAACL.
C. Culy and S. Z. Riehemann. 2003. The limits of n-
gram translation evaluation metrics. In MT Summit
IX.
M. Denkowski and A. Lavie. 2010. Extending the ME-
TEOR machine translation evaluation metric to the
phrase level. In NAACL.
M. Denkowski, C. Dyer, and A. Lavie. 2014a. Learn-
ing from post-editing: Online model adaptation for
statistical machine translation. In EACL.
M. Denkowski, A. Lavie, I. Lacruz, and C. Dyer.
2014b. Real time adaptive machine translation for
post-editing with cdec and TransCenter. In Work-
shop on Humans and Computer-assisted Translation.
J. Duchi, E. Hazan, and Y. Singer. 2011. Adaptive sub-
gradient methods for online learning and stochastic
optimization. JMLR, 12:2121?2159.
M. A. Farajian, N. Bertoldi, and M. Federico. 2014.
Online word alignment for online adaptive machine
translation. InWorkshop on Humans and Computer-
assisted Translation.
C. Federmann. 2010. Appraise: An open-source
toolkit for manual phrase-based evaluation of trans-
lations. In LREC.
G. Foster, P. Langlais, and G. Lapalme. 2002. User-
friendly text prediction for translators. In EMNLP.
M. Galley and C. D. Manning. 2008. A simple and
effective hierarchical phrase reordering model. In
EMNLP.
S. Green, J. Heer, and C. D. Manning. 2013a. The effi-
cacy of human post-editing for language translation.
In CHI.
S. Green, S. Wang, D. Cer, and C. D. Manning. 2013b.
Fast and adaptive online training of feature-rich trans-
lation models. In ACL.
S. Green, D. Cer, and C. D. Manning. 2014a. An em-
pirical comparison of features and tuning for phrase-
based machine translation. In WMT.
S. Green, D. Cer, and C. D. Manning. 2014b. Phrasal:
A toolkit for new directions in statistical machine
translation. In WMT.
S. Green, J. Chuang, J. Heer, andC.D.Manning. 2014c.
Predictive Translation Memory: A mixed-initiative
system for human language translation. In UIST.
K. Heafield, I. Pouzyrevsky, J. H. Clark, and P. Koehn.
2013. Scalable modified Kneser-Ney language
model estimation. In ACL, Short Papers.
L. Huang and D. Chiang. 2007. Forest rescoring:
Faster decoding with integrated language models. In
ACL.
R. Hwa, P. Resnik, A. Weinberg, and O. Kolak. 2002.
Evaluating translational correspondence using anno-
tation projection. In ACL.
P. Koehn, H. Hoang, A. Birch, C. Callison-Burch,
M. Federico, N. Bertoldi, et al. 2007. Moses: Open
source toolkit for statistical machine translation. In
ACL, Demonstration Session.
P. Koehn. 2009a. A process study of computer-aided
translation. Machine Translation, 23:241?263.
P. Koehn. 2009b. A web-based interactive computer
aided translation tool. In ACL-IJCNLP, Software
Demonstrations.
1235
P. Koehn. 2010. Statistical Machine Translation. Cam-
bridge University Press.
P. Langlais, G. Foster, and G. Lapalme. 2000.
TransType: a computer-aided translation typing sys-
tem. In Workshop on Embedded Machine Transla-
tion Systems.
P. Liang, B. Taskar, and D. Klein. 2006. Alignment by
agreement. In NAACL.
C. Manning, M. Surdeanu, J. Bauer, J. Finkel,
S. Bethard, and D. McClosky. 2014. The Stanford
CoreNLP natural language processing toolkit. In
ACL, System Demonstrations.
P. Mart?nez-G?mez, G. Sanchis-Trilles, and F. Casacu-
berta. 2012. Online adaptation strategies for sta-
tistical machine translation in post-editing scenarios.
Pattern Recognition, 45(9):3193?3203.
F. J. Och and H. Ney. 2004. The alignment template
approach to statistical machine translation. Compu-
tational Linguistics, 30(4):417?449.
F. J. Och, R. Zens, and H. Ney. 2003. Efficient
search for interactive statistical machine translation.
In EACL.
F. J. Och. 2003. Minimum error rate training for statis-
tical machine translation. In ACL.
D. Ortiz-Mart?nez and F. Casacuberta. 2014. The new
Thot toolkit for fully automatic and interactive statis-
tical machine translation. In EACL, System Demon-
strations.
D. Ortiz-Mart?nez, I. Garc?a-Varea, and F. Casacuberta.
2009. Interactive machine translation based on par-
tial statistical phrase-based alignments. In RANLP.
D. Ortiz-Mart?nez, I. Garc?a-Varea, and F. Casacuberta.
2010. Online learning for interactive statistical ma-
chine translation. In NAACL.
K. Papineni, S. Roukos, T. Ward, and W. Zhu. 2002.
BLEU: a method for automatic evaluation of ma-
chine translation. In ACL.
R. Ray. 2013. Ten essential research findings for 2013.
In 2013 Resource Directory & Index. Multilingual.
S. Riezler and J. T. Maxwell. 2005. On some pitfalls in
automatic evaluation and significance testing in MT.
In ACL Workshop on Intrinsic and Extrinsic Evalua-
tion Measures for Machine Translation and/or Sum-
marization.
K. Sakaguchi, M. Post, and B. Van Durme. 2014. Effi-
cient elicitation of annotations for human evaluation
of machine translation. In WMT.
P. Shivaswamy and T. Joachims. 2012. Online struc-
tured prediction via coactive learning. In ICML.
M. Snover, B. Dorr, R. Schwartz, L. Micciulla, and
J. Makhoul. 2006. A study of translation edit rate
with targeted human annotation. In AMTA.
M. Snover, N. Madnani, B. Dorr, and R. Schwartz.
2009. Fluency, adequacy, or HTER? Exploring dif-
ferent human judgments with a tunable MT metric.
In WMT.
K. W?schle, P. Simianer, N. Bertoldi, S. Riezler, and
M. Federico. 2013. Generative and discriminative
methods for online adaptation in SMT. In MT Sum-
mit XIV.
O. F. Zaidan and C. Callison-Burch. 2010. Predicting
human-targeted translation edit rate via untrained hu-
man annotators. In NAACL.
1236
Proceedings of the Ninth Workshop on Statistical Machine Translation, pages 150?156,
Baltimore, Maryland USA, June 26?27, 2014. c?2014 Association for Computational Linguistics
Stanford University?s Submissions to the WMT 2014 Translation Task
Julia Neidert
?
, Sebastian Schuster
?
, Spence Green,
Kenneth Heafield, and Christopher D. Manning
Computer Science Department, Stanford University
{jneid,sebschu,spenceg,heafield,manning}@cs.stanford.edu
Abstract
We describe Stanford?s participation in
the French-English and English-German
tracks of the 2014 Workshop on Statisti-
cal Machine Translation (WMT). Our sys-
tems used large feature sets, word classes,
and an optional unconstrained language
model. Among constrained systems, ours
performed the best according to uncased
BLEU: 36.0% for French-English and
20.9% for English-German.
1 Introduction
Phrasal (Green et al., 2014b) is a phrase-based ma-
chine translation system (Och and Ney, 2004) with
an online, adaptive tuning algorithm (Green et al.,
2013c) which allows efficient tuning of feature-
rich translation models. We improved upon the
basic Phrasal system with sparse features over word
classes, class-based language models, and a web-
scale language model.
We submitted one constrained French-English
(Fr-En) system, one unconstrained English-German
(En-De) system with a huge language model, and
one constrained English-German system without it.
Each system was built using over 100,000 features
and was tuned on over 10,000 sentences. This paper
describes our submitted systems and discusses how
the improvements affect translation quality.
2 Data Preparation & Post-Processing
We used all relevant data allowed by the con-
strained condition, with the exception of HindEn-
Corp and Wiki Headlines, which we deemed too
noisy. Specifically, our parallel data consists of the
Europarl version 7 (Koehn, 2005), parallel Com-
monCrawl (Smith et al., 2013), French-English UN,
Giga-FrEn, and News Commentary corpora pro-
vided by the evaluation. For monolingual data, we
?
These authors contributed equally.
Sentences Tokens
En-De 4.5M 222M
Fr-En 36.3M 2.1B
Table 1: Gross parallel corpus statistics after pre-
processing.
Constrained LM Unconstrained LM
German 1.7B 38.9 B
English 7.2B -
Table 2: Number of tokens in pre-processed mono-
lingual corpora used to estimate the language mod-
els. We split the constrained English data into two
models: 3.7 billion tokens from Gigaword and 3.5
billion tokens from all other sources.
used the provided news crawl data from all years,
English Gigaword version 5 (Parker et al., 2011),
and target sides of the parallel data. This includes
English from the Yandex, CzEng, and parallel Com-
monCrawl corpora. For parallel CommonCrawl,
we concatenated the English halves for various lan-
guage pairs and then deduplicated at the sentence
level.
In addition, our unconstrained English-German
system used German text extracted from the en-
tire 2012, 2013, and winter 2013 CommonCrawl
1
corpora by Buck et al. (2014).
Tables 1 and 2 show the sizes of the pre-
processed corpora of parallel text and monolingual
text from which our systems were built.
2.1 Pre-Processing
We used Stanford CoreNLP to tokenize the English
and German data according to the Penn Treebank
standard (Marcus et al., 1993). The French source
data was tokenized similarly to the French Treebank
1http://commoncrawl.org
150
(Abeill? et al., 2003) using the Stanford French
tokenizer (Green et al., 2013b).
We also lowercased the data and removed any
control characters. Further, we filtered out all lines
that consisted mainly of punctuation marks, re-
moved characters that are frequently used as bullet
points and standardized white spaces and newlines.
We additionally filtered out sentences longer than
100 tokens from the parallel corpora in order to
speed up model learning.
2.2 Alignment
For both systems, we used the Berkeley Aligner
(Liang et al., 2006) with default settings to align
the parallel data. We symmetrized the alignments
using the grow-diag heuristic.
2.3 Language Models
Our systems used up to three language models.
2.3.1 Constrained Language Models
For En-De, we used lmplz (Heafield et al., 2013)
to estimate a 5-gram language model on all WMT
German monolingual data and the German side of
the parallel Common Crawl corpus. To query the
model, we used KenLM (Heafield, 2011).
For the Fr-En system, we also estimated a 5-gram
language model from all the monolingual English
data and the English side of the parallel Common
Crawl, UN, Giga-FrEn, CzEng and Yandex corpora
using the same procedure as above. Additionally,
we estimated a second language model from the
English Gigaword corpus.
All of these language models used interpolated
modified Kneser-Ney smoothing (Kneser and Ney,
1995; Chen and Goodman, 1998).
2.3.2 Unconstrained Language Model
Our unconstrained En-De submission used an ad-
ditional language model trained on German web
text gathered by the Common Crawl Foundation
and processed by Buck et al. (2014). This cor-
pus was formed from the 2012, 2013, and winter
2013 CommonCrawl releases, which consist of web
pages converted to UTF-8 encoding with HTML
stripped. Applying the Compact Language Detec-
tor 2,
2
2.89% of the data was identified as German,
amounting to 1 TB of uncompressed text. After
splitting sentences with the Europarl sentence split-
ter (Koehn, 2005), the text was deduplicated at the
sentence level to reduce the impact of boilerplate
2https://code.google.com/p/cld2/
Order 1 2 3 4 5
Count 226 1,916 6,883 13,292 17,576
Table 3: Number of unique n-grams, in millions,
appearing in the Common Crawl German language
model.
and pages that appeared in multiple crawls, discard-
ing 78% of the data. We treated the resulting data
as normal text, pre-processing it as described in
Section 2.1 to yield 38.9 billion tokens. We built
an unpruned interpolated modified Kneser-Ney lan-
guage model with this corpus (Table 3) and added
it as an additional feature alongside the constrained
language models. At 38.9 billion tokens after dedu-
plication, this monolingual data is almost 23 times
as large as the rest of the German monolingual cor-
pus. Since the test data was also collected from the
web, we cannot be sure that the test sentences were
not in the language model. However, substantial
portions of the test set are translations from other
languages, which were not posted online until after
2013.
2.3.3 Word-Class Language Model
We also built a word-class language model for the
En-De system. We trained 512 word classes on
the constrained German data using the predictive
one-sided class model of Whittaker and Woodland
(2001) with the parallelized clustering algorithm of
Uszkoreit and Brants (2008) by Green et al. (2014a).
All tokens were mapped to their word class; infre-
quent tokens appearing fewer than 5 times were
mapped to a special cluster for unknown tokens.
Finally, we estimated a 7-gram language model on
the mapped corpus with SRILM (Stolcke, 2002)
using Witten-Bell smoothing (Bell et al., 1990).
2.4 Tuning and Test Data
For development, we tuned our systems on all
13,573 sentences contained in the newstest2008-
2012 data sets and tested on the 3,000 sentences of
the newstest2013 data set. The final system weights
were chosen among all tuning iterations using per-
formance on the newstest2013 data set.
2.5 Post-Processing
Our post-processor recases and detokenizes sys-
tem output. For the English-German system, we
combined both tasks by using a Conditional Ran-
dom Field (CRF) model (Lafferty et al., 2001) to
151
learn transformations between the raw output char-
acters and the post-processed versions. For each
test dataset, we trained a separate model on 500,000
sentences selected using the Feature Decay Algo-
rithm for bitext selection (Bi?ici and Yuret, 2011).
Features used include the character type of the cur-
rent and surrounding characters, the token type of
the current and surrounding tokens, and the position
of the character within its token.
The English output was recased using a language
model based recaser (Lita et al., 2003). The lan-
guage model was trained on the English side of the
Fr-En parallel data using lmplz.
3 Translation System
We built our translation systems using Phrasal.
3.1 Features
Our translation model has 19 dense features that
were computed for all translation hypotheses: the
nine Moses (Koehn et al., 2007) baseline features,
the eight hierarchical lexicalized reordering model
features by Galley and Manning (2008), the log
count of each rule, and an indicator for unique rules.
On top of that, the model uses the following addi-
tional features of Green et al. (2014a).
Rule indicator features: An indicator feature for
each translation rule. To combat overfitting, this
feature fires only for rules that occur more than
50 times in the parallel data. Additional indicator
features were constructed by mapping the words in
each rule to their corresponding word classes.
Target unigram class: An indicator feature for
the class of each target word.
Alignments: An indicator feature for each align-
ment in a translation rule, including multi-word
alignments. Again, class-based translation rules
were used to extract additional indicator features.
Source class deletion: An indicator feature for
the class of each unaligned source word in a trans-
lation rule.
Punctuation count ratio: The ratio of target
punctuation tokens to source punctuation tokens
for each derivation.
Functionword ratio: The ratio of target function
words to source functionwords. The functionwords
for each language are the 35 most frequent words
on each side of the parallel data. Numbers and
punctuation marks are not included in this list.
Target-class bigram boundary: An indicator
feature for the concatenation of the word class of
the rightmost word in the left rule and the word
class of the leftmost word in the right rule in each
adjacent rule pair in a derivation.
Length features: Indicator features for the length
of the source side and for the length of the target
side of the translation rule and an indicator feature
for the concatenation of the two lengths.
Rule orientation features: An indicator feature
for each translation rule combined with its orienta-
tion class (monotone, swap, or discontinuous). This
feature also fires only for rules that occur more than
50 times in the parallel data. Again, class-based
translation rules were used to extract additional fea-
tures.
Signed linear distortion: The signed linear dis-
tortion ? for two rules a and b is ? = r(a)?l(b)+1,
where r(x) is the rightmost source index of rule x
and l(x) is the leftmost source index of rule x. Each
adjacent rule pair in a derivation has an indicator
feature for the signed linear distortion of this pair.
Many of these features consider word classes
instead of the actual tokens. For the target side, we
used the same word classes as we used to train the
class-based language model. For the source side,
we trained word classes on all available data using
the same method.
3.2 Tuning
We used an online, adaptive tuning algorithm
(Green et al., 2013c) to learn the feature weights.
The loss function is an online variant of expected
BLEU (Green et al., 2014a). As a sentence-level
metric, we used the extended BLEU+1 metric that
smooths the unigram precision as well as the refer-
ence length (Nakov et al., 2012). For feature selec-
tion, we used L
1
regularization. Each tuning epoch
produces a different set of weights; we tried all of
them on newstest2013, which was held out from the
tuning set, then picked the weights that produced
the best uncased BLEU score.
3.3 System Parameters
We started off with the parameters of our systems
for the WMT 2013 Translation Task (Green et
al., 2013a) and optimized the L
1
-regularization
strength. Both systems used the following tuning
parameters: a 200-best list, a learning rate of 0.02
and a mini-batch size of 20. The En-De system
152
Track Stanford Best Rank
En-De constrained 19.9 20.1 3
En-De unconstrained 20.0 20.6 5
Fr-En constrained 34.5 35.0 3
(a) cased BLEU (%)
Track Stanford Best Rank
En-De constrained 20.7 20.7 1
En-De unconstrained 20.9 21.0 3
Fr-En constrained 36.0 36.0 1
(b) uncased BLEU (%)
Table 4: Official results in terms of cased and uncased BLEU of our submitted systems compared to the
best systems for each track. The ranks for the unconstrained system are calculated relative to all primary
submissions for the language pair, whereas the ranks for the constrained systems are relative to only the
constrained systems submitted.
used a phrase length limit of 8, a distortion limit of
6 and a L
1
-regularization strength of 0.0002. The
Fr-En system used a phrase length limit of 9, a dis-
tortion limit of 5 and a L
1
-regularization strength
of 0.0001.
During tuning, we set the stack size for cube prun-
ing to Phrasal?s default value of 1200. To decode
the test set, we increased the stack size to 3000.
4 Results
Table 4 shows the official results of our systems
compared to other submissions to the WMT shared
task. Both our En-De and Fr-En systems achieved
the highest uncased BLEU scores among all con-
strained submissions. However, our recaser evi-
dently performed quite poorly compared to other
systems, so our constrained systems ranked third by
cased BLEU score. Our unconstrained En-De sub-
mission ranked third among all systems by uncased
BLEU and fifth by cased BLEU.
To demonstrate the effectiveness of the individ-
ual improvements, we show results for four differ-
ent En-De systems: (1) A baseline that contains
only the 19 dense features, (2) a feature-rich trans-
lation system with the additional rich features, (3)
a feature-rich translation system with an additional
word class LM, and (4) a feature-rich translation
system with an additional wordclass LM and a huge
language model. For Fr-En we only built systems
(1)-(3). Results for all systems can be seen in Table
5 and Table 6. From these results, we can see that
both language pairs benefitted from adding rich fea-
tures (+0.4 BLEU for En-De and +0.5 BLEU for
Fr-En). However, we only see improvements from
the class-based language model in the case of the
En-De system (+0.4 BLEU). For this reason our Fr-
En submission did not use a class-based language
model. Using additional data in the form of a huge
language model further improved our En-De sys-
tem by almost 1% BLEU on the newstest2013 data
set. However, we only saw 0.2 BLEU improvement
on the newstest2014 data set.
4.1 Analysis
Gains from rich features are in line with the gains
we saw in the WMT 2013 translation task (Green
et al., 2013a). We suspect that rich features would
improve the translation quality a lot more if we had
several reference translations to tune on.
The word class language model seemed to im-
prove only translations in our En-De system while
it had no effect on BLEU in our Fr-En system. One
of the main reasons seems to be that the 7-gram
word class language model helped particularly with
long range reordering, which happens far more fre-
quently in the En-De language pair compared to the
Fr-En pair. For example, in the following transla-
tion, we can see that the system with the class-based
language model successfully translated the verb in
the second clause (set in italic) while the system
without the class-based language model did not
translate the verb.
Source: It became clear to me that this is my path.
Feature-rich: Es wurde mir klar, dass das mein
Weg.
Word class LM: Es wurde mir klar, dass das mein
Weg ist.
We can also see that the long range of the word
class language model improved grammaticality as
shown in the following example:
Source: Meanwhile, more than 40 percent of the
population are HIV positive.
Feature-rich: Inzwischen sind mehr als 40
Prozent der Bev?lkerung sind HIV positiv.
153
#iterations tune 2013 2013 cased 2014 2014 cased
Dense 8 16.9 19.6 18.7 20.0 19.2
Feature-rich 10 20.1 20.0 19.0 20.0 19.2
+ Word class LM 15 21.1 20.4 19.5 20.7 19.9
+ Huge LM 9 21.0 21.3 20.3 20.9 20.1
Table 5: En-De BLEU results. The tuning set is newstest2008?2012. Scores on newstest2014 were
computed after the system submission deadline using the released references.
#iterations tune 2013 2013 cased 2014 2014 cased
Dense 1 29.1 32.0 30.4 35.6 34.0
Feature-rich 12 37.2 32.5 30.9 36.0 34.5
+ Word class LM 14 35.7 32.3 30.7 ? ?
Table 6: Fr-En BLEU results. The tuning set is newstest2008?2012. Scores on newstest2014 were
computed after the system submission deadline using the released references.
Word class LM: Unterdessen mehr als 40 Prozent
der Bev?lkerung sind HIV positiv.
In this example, the system without the class-
based language model translated the verb twice. In
the second translation, the class-based language
model prevented this long range disagreement. An
analysis of the differences in the translation output
of our Fr-En systems showed that the word class
languagemodelmainly led to different word choices
but does not seem to help grammatically.
4.2 Casing
Our system performed comparatively poorly at cas-
ing, as shown in Table 4. In analysis after the eval-
uation, we found many of these errors related to
words with internal capitals, such as ?McCaskill?,
because the limited recaser we used, which is based
on a language model, considered only all lowercase,
an initial capital, or all uppercase words. We ad-
dressed this issue by allowing any casing seen in the
monolingual data. Some words were not seen at all
in the monolingual data but, since the target side of
the parallel data was included in monolingual data,
these words must have come from the source sen-
tence. In such situations, we preserved the word?s
original case. Table 7 shows the results with the re-
vised casing model. We gained about 0.24% BLEU
for German recasing and 0.15% BLEU for English
recasing over our submitted systems. In future work,
we plan to compare with a truecased system.
En-De Fr-En
Uncased Oracle 20.71 36.05
Conditional Random Field 19.85 ?
Limited Recaser 19.82 34.51
Revised Recaser 20.09 34.66
Table 7: Casing results on newstest2014 performed
after the evaluation. The oracle scores are uncased
BLEU (%) while all other scores are cased. Sub-
mitted systems are shown in italic.
5 Negative Results
We experimented with several additions that did not
make it into the final submissions.
5.1 Preordering
One of the key challenges when translating from
English to German is the long-range reordering of
verbs. For this reason, we implemented a depen-
dency tree based reordering system (Lerner and
Petrov, 2013). We parsed all source side sentences
using the Stanford Dependency Parser (De Marn-
effe et al., 2006) and trained the preordering system
on the entire bitext. Then we preordered the source
side of the bitext and the tuning and development
data sets using our preordering system, realigned
the bitext and tuned a machine translation system
using the preordered data. While preordering im-
proved verb reordering in many cases, many other
parts of the sentences were often also reordered
which led to an overall decrease in translation qual-
154
ity. Therefore, we concluded that this systemwill re-
quire further development before it is useful within
our translation system.
5.2 Minimum Bayes Risk Decoding
We further attempted to improve our output by re-
ordering the best 1000 translations for each sentence
using Minimum Bayes Risk decoding (Kumar and
Byrne, 2004) with BLEU as the distance measure.
This in effect increases the score of candidates that
are ?closer? to the other likely translations, where
?closeness? is measured by the BLEU score for the
candidate when the other translations are used as the
reference. Choosing the best translation following
this reordering improved overall performance when
tuned on the first half of the newstest2013 test set by
only 0.03 BLEU points for the English-German sys-
tem and 0.005 BLEU points for the French-English
system, so we abandoned this approach.
6 Conclusion
We submitted three systems: one constrained Fr-En
system, one constrained En-De system, and one un-
constrained En-De system. Among all constrained
systems, ours performed the best according to un-
cased BLEU. The key differentiating components
of our systems are class-based features, word class
language models, and a huge web-scale language
model. In ongoing work, we are investigating pre-
ordering for En-De translation as well as improved
recasing.
Acknowledgements
We thank Michael Kayser and Thang Luong for
help with experiments. This work was supported
by the Defense Advanced Research Projects Agency
(DARPA) Broad Operational Language Translation
(BOLT) program through IBM. This work used the
Extreme Science and Engineering Discovery Envi-
ronment (XSEDE), which is supported by National
Science Foundation grant number OCI-1053575.
The authors acknowledge the Texas Advanced Com-
puting Center (TACC) at The University of Texas
at Austin for providing HPC resources that have
contributed to the research results reported within
this paper. Any opinions, findings, and conclusions
or recommendations expressed in this material are
those of the author(s) and do not necessarily reflect
the view of DARPA or the US government.
References
Anne Abeill?, Lionel Cl?ment, and Alexandra Kinyon,
2003. Building a treebank for French, chapter 10.
Kluwer.
Timothy C. Bell, John G. Cleary, and Ian H. Witten.
1990. Text compression. Prentice-Hall.
Ergun Bi?ici and Deniz Yuret. 2011. Instance selec-
tion for machine translation using feature decay al-
gorithms. In WMT.
Christian Buck, Kenneth Heafield, and Bas van Ooyen.
2014. N-gram counts and language models from the
common crawl. In LREC.
Stanley Chen and Joshua Goodman. 1998. An empiri-
cal study of smoothing techniques for language mod-
eling. Technical Report TR-10-98, Harvard Univer-
sity, August.
Marie-Catherine De Marneffe, Bill MacCartney,
Christopher D Manning, et al. 2006. Generating
typed dependency parses from phrase structure
parses. In LREC.
Michel Galley and Christopher D. Manning. 2008. A
simple and effective hierarchical phrase reordering
model. In EMNLP.
Spence Green, Daniel Cer, Kevin Reschke, Rob Voigt,
John Bauer, Sida Wang, et al. 2013a. Feature-rich
phrase-based translation: Stanford University?s sub-
mission to the WMT 2013 translation task. In WMT.
Spence Green, Marie-Catherine de Marneffe, and
Christopher D. Manning. 2013b. Parsing models for
identifying multiword expressions. Computational
Linguistics, 39(1):195?227.
Spence Green, Sida Wang, Daniel Cer, and Christo-
pher D. Manning. 2013c. Fast and adaptive online
training of feature-rich translation models. In ACL.
Spence Green, Daniel Cer, and Christopher D. Man-
ning. 2014a. An empirical comparison of features
and tuning for phrase-based machine translation. In
WMT.
Spence Green, Daniel Cer, and Christopher D. Man-
ning. 2014b. Phrasal: A toolkit for new directions
in statistical machine translation. In WMT.
Kenneth Heafield, Ivan Pouzyrevsky, Jonathan H.
Clark, and Philipp Koehn. 2013. Scalable modified
Kneser-Ney language model estimation. In ACL.
Kenneth Heafield. 2011. KenLM: Faster and smaller
language model queries. In WMT.
Reinhard Kneser and Hermann Ney. 1995. Improved
backing-off for m-gram language modeling. In
ICASSP.
155
Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
et al. 2007. Moses: Open source toolkit for statisti-
cal machine translation. In ACL, Demonstration Ses-
sion.
Philipp Koehn. 2005. Europarl: A parallel corpus for
statistical machine translation. InProceedings ofMT
Summit.
Shankar Kumar and William Byrne. 2004. Minimum
bayes-risk decoding for statistical machine transla-
tion. In HLT-NAACL.
John D. Lafferty, Andrew McCallum, and Fernando
C. N. Pereira. 2001. Conditional random fields:
Probabilistic models for segmenting and labeling se-
quence data. In ICML.
Uri Lerner and Slav Petrov. 2013. Source-side classi-
fier preordering for machine translation. In EMNLP.
Percy Liang, Ben Taskar, and Dan Klein. 2006. Align-
ment by agreement. In NAACL.
Lucian Vlad Lita, Abe Ittycheriah, Salim Roukos, and
Nanda Kambhatla. 2003. tRuEcasIng. In ACL.
Mitchell P Marcus, Mary Ann Marcinkiewicz, and
Beatrice Santorini. 1993. Building a large annotated
corpus of English: The Penn Treebank. Computa-
tional Linguistics, 19:313?330.
Preslav Nakov, Francisco Guzman, and Stephan Vogel.
2012. Optimizing for sentence-level BLEU+1 yields
short translations. In COLING.
Franz Josef Och and Hermann Ney. 2004. The align-
ment template approach to statistical machine trans-
lation. Computational Linguistics, 30(4):417?449.
Robert Parker, David Graff, Junbo Kong, Ke Chen,
and Kazuaki Maeda. 2011. English gigaword
fifth edition, june. Linguistic Data Consortium,
LDC2011T07.
Jason Smith, Herv? Saint-Amand, Magdalena Plamada,
Philipp Koehn, Chris Callison-Burch, and Adam
Lopez. 2013. Dirt cheap web-scale parallel text
from the common crawl. In ACL. Association for
Computational Linguistics, August.
Andreas Stolcke. 2002. SRILM?an extensible lan-
guage modeling toolkit. In ICLSP.
Jakob Uszkoreit and Thorsten Brants. 2008. Dis-
tributed word clustering for large scale class-based
language modeling in machine translation. In ACL.
Ed W. D. Whittaker and Philip C. Woodland. 2001. Ef-
ficient class-based language modelling for very large
vocabularies. In ICASSP.
156
