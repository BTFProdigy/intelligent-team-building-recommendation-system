Proceedings of the 2009 Named Entities Workshop, ACL-IJCNLP 2009, pages 194?201,
Suntec, Singapore, 7 August 2009. c?2009 ACL and AFNLP
Czech Named Entity Corpus and SVM-based Recognizer
Jana Kravalova?
Charles University in Prague
Institute of Formal and Applied Linguistics
kravalova@ufal.mff.cuni.cz
Zdene?k Z?abokrtsky?
Charles University in Prague
Institute of Formal and Applied Linguistics
zabokrtsky@ufal.mff.cuni.cz
Abstract
This paper deals with recognition of
named entities in Czech texts. We present
a recently released corpus of Czech sen-
tences with manually annotated named en-
tities, in which a rich two-level classifica-
tion scheme was used. There are around
6000 sentences in the corpus with roughly
33000 marked named entity instances. We
use the data for training and evaluating a
named entity recognizer based on Support
Vector Machine classification technique.
The presented recognizer outperforms the
results previously reported for NE recog-
nition in Czech.
1 Introduction
After the series of Message Understanding
Conferences (MUC; (Grishman and Sundheim,
1996)), processing of named entities (NEs) be-
came a well established discipline within the NLP
domain, usually motivated by the needs of Infor-
mation Extraction, Question Answering, or Ma-
chine Translation. For English, one can find liter-
ature about attempts at rule-based solutions for the
NE task as well as machine-learning approaches,
be they dependent on the existence of labeled data
(such as CoNLL-2003 shared task data), unsuper-
vised (using redundancy in NE expressions and
their contexts, see e.g. (Collins and Singer, 1999))
or a combination of both (such as (Talukdar et al,
2006), in which labeled data are used as a source
of seed for an unsupervised procedure exploiting
huge unlabeled data). A survey of research on
named entity recognition is available in (Ekbal and
Bandyopadhyay, 2008).
There has been considerably less research
done in the NE field in Czech, as discussed in
(S?evc???kova? et al, 2007b). Therefore we focus on
it in this paper, which is structured as follows. In
Section 2 we present a recently released corpus
of Czech sentences with manually annotated in-
stances of named entities, in which a rich classi-
fication scheme is used. In Section 3 we describe
a new NE recognizer developed for Czech, based
on the Support Vector Machine (SVM) classifi-
cation technique. Evaluation of such approach is
presented in Section 4. The summary is given in
Section 5.
2 Manually Annotated Corpus
2.1 Data Selection
We have randomly selected 6000 sentences
from the Czech National Corpus1 from the re-
sult of the query ([word=".*[a-z0-9]"]
[word="[A-Z].*"]). This query makes the
relative frequency of NEs in the selection higher
than the corpus average, which makes the sub-
sequent manual annotation much more effective,
even if it may slightly bias the distribution of NE
types and their observed density.2
2.2 Annotation NE Instances with Two-level
NE Classification
There is no generally accepted typology of Named
Entities. One can see two trends: from the view-
point of unsupervised learning, it is advantageous
to have just a few coarse-grained categories (cf.
the NE classification developed for MUC confer-
ences or the classification proposed in (Collins
and Singer, 1999), where only persons, locations,
and organizations were distinguished), whereas
those interested in semantically oriented applica-
tions prefer more informative (finer-grained) cat-
egories (e.g. (Fleischman and Hovy, 2002) with
1http://ucnk.ff.cuni.cz
2The query is trivially motivated by the fact that NEs in
Czech (as well as in many other languages) are often marked
by capitalization of the first letter. Annotation of NEs in a cor-
pus without such selection would lower the bias, but would
be more expensive due to the lower density of NE instances
in the annotated material.
194
Types of NE
a - Numbers in addresses
c - Bibliographic items
g - Geographical names
i - Institutions
m - Media names
n - Specific number usages
o - Artifact names
p - Personal names
q - Quantitative expressions
t - Time expressions
ah - street numbers at - phone/fax numbers
az - zip codes
cb - volume numbers cn - chapt./sect./fig. numbers
cp - page numbers cr - legisl. act numberscs - article titles
gc - states gh - hydronyms
gl - nature areas / objects gp - planets, cosmic objectsgq - urban parts gr - territorial namesgs - streets, squares gt - continentsgu - cities/towns g_ - underspecifiedia - conferences/contests ic - cult./educ./scient. inst.if - companies, concerns... io - government/political inst.i_ - underspecified
mi - internet links mn - periodical
mr - radio stations mt - TV stationsna - age nc - sport scoreni - itemizer nm - in formulanp - part of personal name nq - town quarternr - ratio nw - flat sizen_ - underspecified
oa - cultural artifacts (books, movies) oc - chemical
oe - measure units om - currency unitsop - products or - directives, normso_ - underspecified
pb - animal names pc - inhabitant names
pd - (academic) titles pf - first names
pm - second names pp - relig./myth personsps - surnames p_ - underspecified
qc - cardinal numbers qo - ordinal numbers
tc - centuries td - daystf - feasts th - hours
tm - months tn - minutes
tp - epochs ts - seconds
ty - years
Figure 1: Two-level hierarchical classification of NEs used in the corpus. Note that the (detailed) NE
types are divided into two columns just because of the space reasons here.
195
eight types of person labels, or Sekine?s Extended
NE Hierarchy, cf. (Sekine, 2003)).
In our corpus, we use a two-level NE classifi-
cation depicted in Figure 1. The first level corre-
sponds to rough categories (called NE supertypes)
such as person names, geographical names etc.
The second level provides a more detailed classi-
fication: e.g. within the supertype of geographi-
cal names, the NE types of names of cities/towns,
names of states, names of rivers/seas/lakes etc.
are distinguished.3 If more robust processing is
necessary, only the first level (NE supertypes)
can be used, while the second level (NE types)
comes into play when more subtle information is
needed. Each NE type is encoded by a unique two-
character tag (e.g., gu for names of cities/towns,
gc for names of states; a special tag, such as g ,
makes it possible to leave the NE type underspec-
ified).
Besides the terms of NE type and supertype, we
use also the term NE instance, which stands for a
continuous subsequence of tokens expressing the
entity in a given text. In the simple plain-text for-
mat, which we use for manual annotations, the NE
instances are marked as follows: the word or the
span of words belonging to the NE is delimited by
symbols < and >, with the former one immediately
followed by the NE type tag (e.g. <pf John> loves
<pf Mary>).
The annotation scheme allows for the embed-
ding of NE instances. There are two types of em-
bedding. In the first case, the NE of a certain
type can be embedded in another NE (e.g., the
river name can be part of a name of a city as in
<gu U?st?? nad <gh Labem>>). In the second case,
two or more NEs are parts of a (so-called) con-
tainer NE (e.g., two NEs, a first name and a sur-
name, form together a person name container NE
such as in <P<pf Paul> <ps Newman>>). The
container NEs are marked with a capital one-letter
tag: P for (complex) person names, T for tempo-
ral expressions, A for addresses, and C for biblio-
graphic items. A more detailed description of the
NE classification can be found in (S?evc???kova? et al,
2007b).
3Given the size of the annotated data, further subdivi-
sion into even finer classes (such as persons divided into cat-
egories such as lawyer, politician, scientist used in (Fleis-
chman and Hovy, 2002)) would result in too sparse annota-
tions.
2.3 Annotated Data Cleaning
After collecting all the sentences annotated by the
annotators, it was necessary to clean the data in or-
der to improve the data quality. For this purpose,
a set of tests was implemented. The tests revealed
wrong or ?suspicious? spots in the data (based e.g.
on the assumption that the same lemma should
manifest an entity of the same type in most its oc-
currences), which were manually checked and cor-
rected if necessary. Some noisy sentences caused
e.g. by wrong sentence segmentation in the origi-
nal resource were deleted; the final size of the cor-
pus is 5870 sentences.
2.4 Morphological Analysis of Annotated
Data
The sentences have been enriched with morpho-
logical tags and lemmas using Jan Hajic??s tagger
shipped with Prague Dependency Treebank 2.0
(Hajic? et al, 2006) integrated into the TectoMT
environment (Z?abokrtsky? et al, 2008). Motivation
for this step was twofold
? Czech is a morphologically rich language,
and named entities might be subject to
paradigms with rich inflection too. For
example, male first name Toma?s? (Thomas)
migh appear also in one of the following
forms: Toma?s?e, Toma?s?ovi, Toma?s?i, Toma?s?em,
Toma?s?ove?, Toma?s?u?m . . . (according to gram-
matical case and number), which would make
the training data without lemmatization much
sparser.
? Additional features (useful for SVM as well
as for any other Machine Learning approach)
can be mined from the lemma and tag se-
quences, as shown in Section 3.2.
2.5 Public Data Release
Manually annotated and cleaned 6000 sentences
with roughly 33000 named entities were released
as Czech Named Entity Corpus 1.0. The corpus
consists of manually annotated sentences and mor-
phological analysis in several formats: a simple
plain text format, a simple xml format, a more
complex xml format based on the Prague Markup
Language (Pajas and S?te?pa?nek, 2006) and contain-
ing also the above mentioned morphological anal-
ysis, and the html format with visually highlighted
NE instances.
For the purposes of supervised machine learn-
ing, division of data into training, development
196
and evaluation subset is provided in the corpus.
The division into training, development and evalu-
ation subsets was made by random division of sen-
tences into three sets, in proportion 80% (training),
10% (development) and 10% (evaluation), see Ta-
ble 1. Other basic quantitative properties are sum-
marized in Table 2 and Table 3.
The resulting data collection, called
Czech Named Entity Corpus 1.0, is
now publicly available on the Internet at
http://ufal.mff.cuni.cz/tectomt.
Set #Sentences #Words #NE instances
train 4696 119921 26491
dtest 587 14982 3476
etest 587 15119 3615
total 5870 150022 33582
Table 1: Division of the annotated corpus into
training, development test, and evaluation test sets.
Lenght #Occurrences Proportion
one-word 23057 68.66%
two-word 6885 20.50%
three-word 1961 5.84%
longer 1679 5.00%
total 33582 100.00%
Table 2: Occurrences of NE instances of different
length in the annotated corpus.
3 SVM-based Recognizer
3.1 NER as a classification task
In this section, we formulate named entity recog-
nition as a classification problem. The task of
named entity recognition as a whole includes sev-
eral problems to be solved:
? detecting ?basic? one-word, two-word and
multiword named entities,
? detecting complex entities containing other
entities (e.g. an institution name containing
a personal name).
Furthermore, one can have different require-
ments on what a correctly recognized named entity
is (and train a separate recognizer for each case):
? an entity whose span and type are correctly
recognized,
NE type #Occurrences Proportion
ps 4040 12.03%
pf 3072 9.15%
P 2722 8.11%
gu 2685 8.00%
qc 2040 6.07%
oa 1695 5.05%
ic 1410 4.20%
ty 1325 3.95%
th 1325 3.95%
s 1285 3.83%
gc 1107 3.30%
if 834 2.48%
io 830 2.47%
tm 559 1.66%
n 512 1.52%
f 506 1.51%
Table 3: Distribution of several most frequent NE
types in the annotated corpus.
? an entity whose span and supertype are cor-
rectly recognized,
? an entity whose span is correctly recognized
(without regard to its type).
Therefore, we subdivide the classification prob-
lem into a few subproblems. Firstly, we indepen-
dently evaluate the recognition system for one-
word named entities, for two-word named enti-
ties and for multiword named entities. For each
of these three problems, we define three tasks, or-
dered from the easiest to the most difficult:
? Named entity span recognition ? all words of
named entity must be found but the type is
not relevant. For one-word entities, this re-
duces to 0/1 classification problem, that is,
each word is either marked as named entity
(1) or as regular word (0). For two-word en-
tities, this 0/1 decision is made for each cou-
ple of subsequent words (bigram) in the sen-
tence.
? Named entity supertype recognition ? all
words of named entity must be found and the
supertype must be correct. This is a multi-
class classification problem, where classes
are named entity classes of the first level in
hierarchy (p, g, i, ...) plus one class
for regular words.
197
? Named entity type recognition ? all words
of named entity must be found and the type
must be correct.
In our solution, a separate SVM classifier
is built for one-word named entities, two-word
named entities and three-word named entities.
Then, as we proceed through the text, we apply the
classifier on each ?window? or ?n-gram? of words
? one-word, two-word and three-word, classifying
the n-gram with the corresponding SVM classi-
fier. We deliberately omit named entities contain-
ing four and more words, as they represent only a
small portion of the instances (5%).
3.2 Features
Classification features which were used by the
SVM classifier(s), are as follows:
? morphological features ? part of speech, gen-
der, case and number,
? orthographic features ? boolean features
such as capital letter at the beginning of the
word or regular expression for time and year
,
? lists of known named entities ? boolean fea-
tures describing whether the word is listed
in lists of Czech most used names and sur-
names, Czech cities, countries or famous in-
stitutions,
? lemma ? some lemmas contain shortcuts de-
scribing the property of lemma, for example
?Prahou? (Prague, 7th case) would lemma-
tize to ?Praha ;G? with mark ? ;G? hinting
that ?Praha? is a geographical name,
? context features ? similar features for pre-
ceding and following words, that is, part of
speech, gender, case and number for the pre-
ceding and following word, orthographic fea-
tures, membership in a list of known entities
and lemma hints for the preceding and fol-
lowing word.
All classification features were transformed into
binary (boolean) features, resulting in roughly
200-dimensional binary feature space.
3.3 Classifier implementation
For the classification task, we decided to use Sup-
port Vector Machine classification method. First,
this solution has been repeatedly shown to give
better scores in NE recognition in comparison to
other Machine Learning methods, see e.g. (Isozaki
and Kazawa, 2002) and (Ekbal and Bandyopad-
hyay, 2008). Second, in our preliminary experi-
ments on our data it outperformed all other solu-
tions too (based on naive Bayes, k nearest neigh-
bors, and decision trees).
As an SVM classifier, we used its CPAN Perl
implementation Algorithm-SVM.4
Technically, the NE recognizer is implemented
as a Perl module included into TectoMT, which is
a modular open source software framework for im-
plementing NLP applications, (Z?abokrtsky? et al,
2008).5
4 Evaluation
4.1 Evaluation metrics
We use the following standard quantities for eval-
uating performance of the presented classifier:
? precision ? the number of correctly predicted
NEs divided by the number of all predicted
NEs,
? recall ? the number of correctly predicted
NEs divided by the number of all NEs in the
data,
? f-score ? harmonic mean of precision and re-
call.
In our opinion, simpler quantities such as accu-
racy (the percentage of correctly marked words)
are not suitable for this task, since the number
of NE instances to be found is not known in ad-
vance.6
4.2 Results
The results for SVM classifier when applied on
the evaluation test set of the corpus are summa-
rized in Table 4. The table evaluates all subtasks
as defined in Section 3.1, that is, for combination
4http://www.cpan.org/authors/id/L/LA/LAIRDM/
5One of the reasons for integrating the classifier into Tec-
toMT is the fact that it requires the input texts to be sentence-
segmented, tokenized, tagged and lemmatized; all the nec-
essary tools for such preprocessing are already available in
TectoMT.
6Counting also all non-NEwords predicted as non-entities
as a success would lead to very high accuracy value without
much information content (obviously most words are not NE
instances).
198
All NEs One-word NEs Two-word NEs
P R F P R F P R F
span+type 0.75 0.62 0.68 0.80 0.71 0.75 0.68 0.62 0.65
span+supertype 0.75 0.67 0.71 0.87 0.78 0.82 0.71 0.64 0.67
span 0.84 0.70 0.76 0.89 0.80 0.84 0.76 0.69 0.72
Table 4: Summary of the SVM classifier performance (P=precision, R=recall, F=f-measure). Recogni-
tion of NEs of different length is evaluated separately. The other dimension corresponds to the gradually
released correctness requirements.
true type predicted type true type description predicted type description errors
oa x cultural artifacts (books, movies) no entity 184
ic x cult./educ./scient. inst. no entity 74
x gu no entity cities/towns 71
x P no entity personal name container 66
if x companies, concerns . . . no entity 60
x ic no entity cult./educ./scient. inst. 59
io x government/political inst. no entity 57
x ps no entity surnames 47
P x personal name container no entity 43
ps x surnames no entity 41
gu x cities/towns no entity 37
x td no entity days 35
op x products no entity 33
x pf no entity first names 31
T x time container no entity 30
Table 5: The most frequent types of errors in NE recognition made by the SVM classifier.
of subtask defined for all entities, one-word enti-
ties and two-word entities and with gradually re-
leased requirements for correctness: correct span
and correct (detailed) type, correct span and cor-
rect supertype, correct span only.
The most common SVM classification errors
are shown in Table 5.
4.3 Discussion
As we can see in Table 4, the classifier recognizes
span and type of all named entities in text with
f-measure = 0.68. This improves the results re-
ported on this data in (S?evc???kova? et al, 2007a),
which was 0.62. For one-word named entities, the
improvement is also noticeable, from 0.70 to 0.75.
In our opinion, the improvement is caused by
better feature selection on one hand. We do not
use as many classification features as the authors
of (S?evc???kova? et al, 2007a), instead we made a
preliminary manual selection of features we con-
sidered to be helpful. For example, we do not use
the whole variety of 15 Czech morphological cat-
egories for every word in context, but we use only
part of speech, gender, case and number. Also,
we avoided using features based on storing words
which occurred in training data, such as boolean
feature, which is true for words, which appeared
in training data as named entity. We tried employ-
ing such features, but in our opinion, they result in
sparsity in space searched by SVM.
It would be highly difficult to correctly compare
the achieved results with results reported on other
languages (such as f-score 88.76% achieved for
English in (Zhang and Johnson, 2003)), especially
because of different task granularity (and obvi-
ously highly different baselines). Furthermore, in
Czech the task is more complicated due to inflec-
tion: many named entities can appear in several
many different forms. For example, the Czech
capital city ?Praha? appeared in these forms in
training data: Praha, Prahy, Prahou, Prahu.
Table 5 describes the most common errors made
by classifier. Clearly, the most problematic classes
are objects (oa) and institutions (ic, if, io),
199
which mostly remain unrecognized. The problem
is that, cultural artifacts like books or movies, or
institutions, tend to have quite new and unusual
names, as opposed to personal names, for which
fairly limited amount of choice exists, and cities,
which do not change and can be listed easily.
Institutions also tend to have long and com-
plicated names, for which it is especially diffi-
cult to find the ending frontier. We believe that
dependency syntax analysis (such as dependency
trees resulting from the maximum spanning tree
parser, (McDonald et al, 2005)) might provide
some clues here. By determining the head of the
clause, e.g. theatre, university, gallery and it?s de-
pendants, we might get some hints about which
words are part of the name and which are not.
Yet another improvement in overall perfor-
mance could be achieved by incorporating hyper-
nym discovery (making use e.g. of Wikipedia) as
proposed in (Kliegr et al, 2008).
5 Conclusions
We have presented a new recently published cor-
pus of Czech sentences with manually annotated
named entities with fine-grained two-level annota-
tion. We used the data for training and evaluating a
named entity recognizer based on Support Vector
Machines classification technique. Our classifier
reached f-measure 0.68 in recognizing and classi-
fying Czech named entities into 62 categories and
thus outperformed the results previously reported
for NE recognition in Czech in (S?evc???kova? et al,
2007a).
We intend to further improve our classifier,
especially recognition of institution and object
names, by employing dependency syntax features.
Another improvement is hoped to be achieved us-
ing WWW-based ontologies.
Acknowledgments
This research was supported by MSM
0021620838, GAAV C?R 1ET101120503, and
MS?MT C?R LC536.
References
Michael Collins and Yoram Singer. 1999. Unsuper-
vised Models for Named Entity Classification. In
Proceedings of the Conference on Empirical Meth-
ods in Natural Language Processing and Very Large
Corpora (EMNLP/VLC), pages 189?196.
Asif Ekbal and Sivaji Bandyopadhyay. 2008. Named
Entity Recognition using Support Vector Machine:
A Language Independent Approach . International
Journal of Computer Systems Science and Engineer-
ing, 4(2):155?170.
Michael Fleischman and Eduard Hovy. 2002. Fine
Grained Classification of Named Entities . In Pro-
ceedings of the 19th International Conference on
Computational Linguistics (COLING), volume I,
pages 267?273.
Ralph Grishman and Beth Sundheim. 1996. Mes-
sage Understanding Conference - 6: A Brief History.
In Proceedings of the 16th International Conference
on Computational Linguistics (COLING), volume I,
pages 466?471.
Jan Hajic?, Jarmila Panevova?, Eva Hajic?ova?, Petr
Sgall, Petr Pajas, Jan S?te?pa?nek, Jir??? Havelka,
Marie Mikulova?, Zdene?k Z?abokrtsky?, and Magda
S?evc???kova?. 2006. Prague Dependency Treebank
2.0.
Hideki Isozaki and Hideto Kazawa. 2002. Effi-
cient Support Vector Classifiers For Named Entity
Recognition. In Proceedings of the 19th Inter-
national Conference on Computational Linguistics
(COLING?02).
Tomas Kliegr, Krishna Chandramouli, Jan Nemrava,
Vojtech Svatek, and Ebroul Izquierdo. 2008.
Wikipedia as the premiere source for targeted hy-
pernym discovery. WBBT ECML08.
Ryan McDonald, Fernando Pereira, Kiril Ribarov, and
Jan Hajic?. 2005. Non-Projective Dependency Pars-
ing using Spanning Tree Algorithms. In Proceed-
ings of Human Langauge Technology Conference
and Conference on Empirical Methods in Natural
Language Processing (HTL/EMNLP), pages 523?
530, Vancouver, BC, Canada.
Petr Pajas and Jan S?te?pa?nek. 2006. XML-based rep-
resentation of multi-layered annotation in the PDT
2.0. In Richard Erhard Hinrichs, Nancy Ide, Martha
Palmer, and James Pustejovsky, editors, Proceed-
ings of the LREC Workshop on Merging and Layer-
ing Linguistic Information (LREC 2006), pages 40?
47, Paris, France.
Satoshi Sekine. 2003. Sekine?s Extended Named En-
tity Hierarchy. http://nlp.cs.nyu.edu/ene/.
Magda S?evc???kova?, Zdene?k Z?abokrtsky?, and Oldr?ich
Kru?za. 2007. Named Entities in Czech: Annotat-
ing Data and Developing NE Tagger. In Va?clav Ma-
tous?ek and Pavel Mautner, editors, Lecture Notes in
Artificial Intelligence, Proceedings of the 10th Inter-
national Conference on Text, Speech and Dialogue,
volume 4629 of Lecture Notes in Computer Science,
pages 188?195, Pilsen, Czech Republic. Springer
Science+Business Media Deutschland GmbH.
200
Partha Pratim Talukdar, Thorsten Brants, Mark Liber-
man, and Fernando Pereira. 2006. A Context Pat-
tern Induction Method for Named Entity Extraction.
In Proceedings of the 10th Conference on Com-
putational Natural Language Learning (CoNLL-X),
pages 141?148.
Magda S?evc???kova?, Zdene?k Z?abokrtsky?, and Oldr?ich
Kru?za. 2007. Zpracova?n?? pojmenovany?ch entit
v c?esky?ch textech. Technical report, U?FAL MFF
UK, Praha.
Zdene?k Z?abokrtsky?, Jan Pta?c?ek, and Petr Pajas. 2008.
TectoMT: Highly Modular MT System with Tec-
togrammatics Used as Transfer Layer. In Proceed-
ings of the 3rd Workshop on Statistical Machine
Translation, ACL.
Tong Zhang and David Johnson. 2003. A robust risk
minimization based named entity recognition sys-
tem. In Walter Daelemans and Miles Osborne, ed-
itors, Proceedings of CoNLL-2003, pages 204?207.
Edmonton, Canada.
201
Human Language Technologies: The 2009 Annual Conference of the North American Chapter of the ACL, pages 19?27,
Boulder, Colorado, June 2009. c?2009 Association for Computational Linguistics
A Study on Similarity and Relatedness
Using Distributional and WordNet-based Approaches
Eneko Agirre? Enrique Alfonseca? Keith Hall? Jana Kravalova?? Marius Pas?ca? Aitor Soroa?
? IXA NLP Group, University of the Basque Country
? Google Inc.
? Institute of Formal and Applied Linguistics, Charles University in Prague
{e.agirre,a.soroa}@ehu.es {ealfonseca,kbhall,mars}@google.com
kravalova@ufal.mff.cuni.cz
Abstract
This paper presents and compares WordNet-
based and distributional similarity approaches.
The strengths and weaknesses of each ap-
proach regarding similarity and relatedness
tasks are discussed, and a combination is pre-
sented. Each of our methods independently
provide the best results in their class on the
RG and WordSim353 datasets, and a super-
vised combination of them yields the best pub-
lished results on all datasets. Finally, we pio-
neer cross-lingual similarity, showing that our
methods are easily adapted for a cross-lingual
task with minor losses.
1 Introduction
Measuring semantic similarity and relatedness be-
tween terms is an important problem in lexical se-
mantics. It has applications in many natural lan-
guage processing tasks, such as Textual Entailment,
Word Sense Disambiguation or Information Extrac-
tion, and other related areas like Information Re-
trieval. The techniques used to solve this problem
can be roughly classified into two main categories:
those relying on pre-existing knowledge resources
(thesauri, semantic networks, taxonomies or ency-
clopedias) (Alvarez and Lim, 2007; Yang and Pow-
ers, 2005; Hughes and Ramage, 2007) and those in-
ducing distributional properties of words from cor-
pora (Sahami and Heilman, 2006; Chen et al, 2006;
Bollegala et al, 2007).
In this paper, we explore both families. For the
first one we apply graph based algorithms to Word-
Net, and for the second we induce distributional
similarities collected from a 1.6 Terabyte Web cor-
pus. Previous work suggests that distributional sim-
ilarities suffer from certain limitations, which make
them less useful than knowledge resources for se-
mantic similarity. For example, Lin (1998b) finds
similar phrases like captive-westerner which made
sense only in the context of the corpus used, and
Budanitsky and Hirst (2006) highlight other prob-
lems that stem from the imbalance and sparseness of
the corpora. Comparatively, the experiments in this
paper demonstrate that distributional similarities can
perform as well as the knowledge-based approaches,
and a combination of the two can exceed the per-
formance of results previously reported on the same
datasets. An application to cross-lingual (CL) sim-
ilarity identification is also described, with applica-
tions such as CL Information Retrieval or CL spon-
sored search. A discussion on the differences be-
tween learning similarity and relatedness scores is
provided.
The paper is structured as follows. We first
present the WordNet-based method, followed by the
distributional methods. Section 4 is devoted to the
evaluation and results on the monolingual and cross-
lingual tasks. Section 5 presents some analysis, in-
cluding learning curves for distributional methods,
the use of distributional similarity to improve Word-
Net similarity, the contrast between similarity and
relatedness, and the combination of methods. Sec-
tion 6 presents related work, and finally, Section 7
draws the conclusions and mentions future work.
2 WordNet-based method
WordNet (Fellbaum, 1998) is a lexical database of
English, which groups nouns, verbs, adjectives and
adverbs into sets of synonyms (synsets), each ex-
pressing a distinct concept. Synsets are interlinked
with conceptual-semantic and lexical relations, in-
cluding hypernymy, meronymy, causality, etc.
Given a pair of words and a graph-based repre-
sentation of WordNet, our method has basically two
19
steps: We first compute the personalized PageR-
ank over WordNet separately for each of the words,
producing a probability distribution over WordNet
synsets. We then compare how similar these two dis-
crete probability distributions are by encoding them
as vectors and computing the cosine between the
vectors.
We represent WordNet as a graph G = (V,E) as
follows: graph nodes represent WordNet concepts
(synsets) and dictionary words; relations among
synsets are represented by undirected edges; and
dictionary words are linked to the synsets associated
to them by directed edges.
For each word in the pair we first compute a per-
sonalized PageRank vector of graph G (Haveliwala,
2002). Basically, personalized PageRank is com-
puted by modifying the random jump distribution
vector in the traditional PageRank equation. In our
case, we concentrate all probability mass in the tar-
get word.
Regarding PageRank implementation details, we
chose a damping value of 0.85 and finish the calcula-
tion after 30 iterations. These are default values, and
we did not optimize them. Our similarity method is
similar, but simpler, to that used by (Hughes and Ra-
mage, 2007), which report very good results on sim-
ilarity datasets. More details of our algorithm can be
found in (Agirre and Soroa, 2009). The algorithm
and needed resouces are publicly available1.
2.1 WordNet relations and versions
The WordNet versions that we use in this work are
the Multilingual Central Repository or MCR (At-
serias et al, 2004) (which includes English Word-
Net version 1.6 and wordnets for several other lan-
guages like Spanish, Italian, Catalan and Basque),
and WordNet version 3.02. We used all the rela-
tions in MCR (except cooccurrence relations and se-
lectional preference relations) and in WordNet 3.0.
Given the recent availability of the disambiguated
gloss relations for WordNet 3.03, we also used a
version which incorporates these relations. We will
refer to the three versions as MCR16, WN30 and
WN30g, respectively. Our choice was mainly moti-
vated by the fact that MCR contains tightly aligned
1http://http://ixa2.si.ehu.es/ukb/
2Available from http://http://wordnet.princeton.edu/
3http://wordnet.princeton.edu/glosstag
wordnets of several languages (see below).
2.2 Cross-linguality
MCR follows the EuroWordNet design (Vossen,
1998), which specifies an InterLingual Index (ILI)
that links the concepts across wordnets of differ-
ent languages. The wordnets for other languages in
MCR use the English WordNet synset numbers as
ILIs. This design allows a decoupling of the rela-
tions between concepts (which can be taken to be
language independent) and the links from each con-
tent word to its corresponding concepts (which is
language dependent).
As our WordNet-based method uses the graph of
the concepts and relations, we can easily compute
the similarity between words from different lan-
guages. For example, consider a English-Spanish
pair like car ? coche. Given that the Spanish Word-
Net is included in MCR we can use MCR as the
common knowledge-base for the relations. We can
then compute the personalized PageRank for each
of car and coche on the same underlying graph, and
then compare the similarity between both probabil-
ity distributions.
As an alternative, we also tried to use pub-
licly available mappings for wordnets (Daude et al,
2000)4 in order to create a 3.0 version of the Span-
ish WordNet. The mapping was used to link Spanish
variants to 3.0 synsets. We used the English Word-
Net 3.0, including glosses, to construct the graph.
The two Spanish WordNet versions are referred to
as MCR16 and WN30g.
3 Context-based methods
In this section, we describe the distributional meth-
ods used for calculating similarities between words,
and profiting from the use of a large Web-based cor-
pus.
This work is motivated by previous studies that
make use of search engines in order to collect co-
occurrence statistics between words. Turney (2001)
uses the number of hits returned by a Web search
engine to calculate the Pointwise Mutual Informa-
tion (PMI) between terms, as an indicator of syn-
onymy. Bollegala et al (2007) calculate a number
of popular relatedness metrics based on page counts,
4http://www.lsi.upc.es/?nlp/tools/download-map.php.
20
like PMI, the Jaccard coefficient, the Simpson co-
efficient and the Dice coefficient, which are com-
bined with lexico-syntactic patterns as model fea-
tures. The model parameters are trained using Sup-
port Vector Machines (SVM) in order to later rank
pairs of words. A different approach is the one taken
by Sahami and Heilman (2006), who collect snip-
pets from the results of a search engine and repre-
sent each snippet as a vector, weighted with the tf?idf
score. The semantic similarity between two queries
is calculated as the inner product between the cen-
troids of the respective sets of vectors.
To calculate the similarity of two words w1 and
w2, Ruiz-Casado et al (2005) collect snippets con-
taining w1 from a Web search engine, extract a con-
text around it, replace it with w2 and check for the
existence of that modified context in the Web.
Using a search engine to calculate similarities be-
tween words has the drawback that the data used will
always be truncated. So, for example, the numbers
of hits returned by search engines nowadays are al-
ways approximate and rounded up. The systems that
rely on collecting snippets are also limited by the
maximum number of documents returned per query,
typically around a thousand. We hypothesize that
by crawling a large corpus from the Web and doing
standard corpus analysis to collect precise statistics
for the terms we should improve over other unsu-
pervised systems that are based on search engine
results, and should yield results that are competi-
tive even when compared to knowledge-based ap-
proaches.
In order to calculate the semantic similarity be-
tween the words in a set, we have used a vector space
model, with the following three variations:
In the bag-of-words approach, for each word w
in the dataset we collect every term t that appears in
a window centered in w, and add them to the vector
together with its frequency.
In the context window approach, for each word
w in the dataset we collect every window W cen-
tered in w (removing the central word), and add it
to the vector together with its frequency (the total
number of times we saw windowW around w in the
whole corpus). In this case, all punctuation symbols
are replaced with a special token, to unify patterns
like , the <term> said to and ? the <term> said to.
Throughout the paper, when we mention a context
window of size N it means N words at each side of
the phrase of interest.
In the syntactic dependency approach, we parse
the entire corpus using an implementation of an In-
ductive Dependency parser as described in Nivre
(2006). For each word w we collect a template of
the syntactic context. We consider sequences of gov-
erning words (e.g. the parent, grand-parent, etc.) as
well as collections of descendants (e.g., immediate
children, grandchildren, etc.). This information is
then encoded as a contextual template. For example,
the context template cooks <term> delicious could
be contexts for nouns such as food, meals, pasta, etc.
This captures both syntactic preferences as well as
selectional preferences. Contrary to Pado and Lap-
ata (2007), we do not use the labels of the syntactic
dependencies.
Once the vectors have been obtained, the fre-
quency for each dimension in every vector is
weighted using the other vectors as contrast set, with
the ?2 test, and finally the cosine similarity between
vectors is used to calculate the similarity between
each pair of terms.
Except for the syntactic dependency approach,
where closed-class words are needed by the parser,
in the other cases we have removed stopwords (pro-
nouns, prepositions, determiners and modal and
auxiliary verbs).
3.1 Corpus used
We have used a corpus of four billion documents,
crawled from the Web in August 2008. An HTML
parser is used to extract text, the language of each
document is identified, and non-English documents
are discarded. The final corpus remaining at the end
of this process contains roughly 1.6 Terawords. All
calculations are done in parallel sharding by dimen-
sion, and it is possible to calculate all pairwise sim-
ilarities of the words in the test sets very quickly
on this corpus using the MapReduce infrastructure.
A complete run takes around 15 minutes on 2,000
cores.
3.2 Cross-linguality
In order to calculate similarities in a cross-lingual
setting, where some of the words are in a language l
other than English, the following algorithm is used:
21
Method Window size RG dataset WordSim353 dataset
MCR16 0.83 [0.73, 0.89] 0.53 (0.56) [0.45, 0.60]
WN30 0.79 [0.67, 0.86] 0.56 (0.58) [0.48, 0.63]
WN30g 0.83 [0.73, 0.89] 0.66 (0.69) [0.59, 0.71]
CW 1 0.83 [0.73, 0.89] 0.63 [0.57, 0.69]
2 0.83 [0.74, 0.90] 0.60 [0.53, 0.66]
3 0.85 [0.76, 0.91] 0.59 [0.52, 0.65]
4 0.89 [0.82, 0.93] 0.60 [0.53, 0.66]
5 0.80 [0.70, 0.88] 0.58 [0.51, 0.65]
6 0.75 [0.62, 0.84] 0.58 [0.50, 0.64]
7 0.72 [0.58, 0.82] 0.57 [0.49, 0.63]
BoW 1 0.81 [0.70, 0.88] 0.64 [0.57, 0.70]
2 0.80 [0.69, 0.87] 0.64 [0.58, 0.70]
3 0.79 [0.67, 0.86] 0.64 [0.58, 0.70]
4 0.78 [0.66, 0.86] 0.65 [0.58, 0.70]
5 0.77 [0.64, 0.85] 0.64 [0.58, 0.70]
6 0.76 [0.63, 0.85] 0.65 [0.58, 0.70]
7 0.75 [0.62, 0.84] 0.64 [0.58, 0.70]
Syn G1,D0 0.81 [0.70, 0.88] 0.62 [0.55, 0.68]
G2,D0 0.82 [0.72, 0.89] 0.55 [0.48, 0.62]
G3,D0 0.81 [0.71, 0.88] 0.62 [0.56, 0.68]
G1,D1 0.82 [0.72, 0.89] 0.62 [0.55, 0.68]
G2,D1 0.82 [0.73, 0.89] 0.62 [0.55, 0.68]
G3,D1 0.82 [0.72, 0.88] 0.62 [0.55, 0.68]
CW+ 4; G1,D0 0.88 [0.81, 0.93] 0.66 [0.59, 0.71]
Syn 4; G2,D0 0.87 [0.80, 0.92] 0.64 [0.57, 0.70]
4; G3,D0 0.86 [0.77, 0.91] 0.63 [0.56, 0.69]
4; G1,D1 0.83 [0.73, 0.89] 0.48 [0.40, 0.56]
4; G2,D1 0.83 [0.73, 0.89] 0.49 [0.40, 0.56]
4; G3,D1 0.82 [0.72, 0.89] 0.48 [0.40, 0.56]
Table 1: Spearman correlation results for the various WordNet-based
models and distributional models. CW=Context Windows, BoW=bag
of words, Syn=syntactic vectors. For Syn, the window size is actually
the tree-depth for the governors and descendants. For examples, G1
indicates that the contexts include the parents and D2 indicates that both
the children and grandchildren make up the contexts. The final grouping
includes both contextual windows (at width 4) and syntactic contexts in
the template vectors. Max scores are bolded.
1. Replace each non-English word in the dataset
with its 5-best translations into English using
state-of-the-art machine translation technology.
2. The vector corresponding to each Spanish word
is calculated by collecting features from all the
contexts of any of its translations.
3. Once the vectors are generated, the similarities
are calculated in the same way as before.
4 Experimental results
4.1 Gold-standard datasets
We have used two standard datasets. The first
one, RG, consists of 65 pairs of words collected by
Rubenstein and Goodenough (1965), who had them
judged by 51 human subjects in a scale from 0.0 to
4.0 according to their similarity, but ignoring any
other possible semantic relationships that might ap-
pear between the terms. The second dataset, Word-
Sim3535 (Finkelstein et al, 2002) contains 353 word
pairs, each associated with an average of 13 to 16 hu-
man judgements. In this case, both similarity and re-
5Available at http://www.cs.technion.ac.il/
?gabr/resources/data/wordsim353/wordsim353.html
Context RG terms and frequencies
ll never forget the * on his face when grin,2,smile,10
he had a giant * on his face and grin,3,smile,2
room with a huge * on her face and grin,2,smile,6
the state of every * will be updated every automobile,2,car,3
repair or replace the * if it is stolen automobile,2,car,2
located on the north * of the Bay of shore,14,coast,2
areas on the eastern * of the Adriatic Sea shore,3,coast,2
Thesaurus of Current English * The Oxford Pocket Thesaurus slave,3,boy,5,shore,3,string,2
wizard,4,glass,4,crane,5,smile,5
implement,5,oracle,2,lad,2
food,3,car,2,madhouse,3,jewel,3
asylum,4,tool,8,journey,6,etc.
be understood that the * 10 may be designed crane,3,tool,3
a fight between a * and a snake and bird,3,crane,5
Table 2: Sample of context windows for the terms in the RG dataset.
latedness are annotated without any distinction. Sev-
eral studies indicate that the human scores consis-
tently have very high correlations with each other
(Miller and Charles, 1991; Resnik, 1995), thus val-
idating the use of these datasets for evaluating se-
mantic similarity.
For the cross-lingual evaluation, the two datasets
were modified by translating the second word in
each pair into Spanish. Two humans translated
simultaneously both datasets, with an inter-tagger
agreement of 72% for RG and 84% for Word-
Sim353.
4.2 Results
Table 1 shows the Spearman correlation obtained on
the RG and WordSim353 datasets, including the in-
terval at 0.95 of confidence6.
Overall the distributional context-window ap-
proach performs best in the RG, reaching 0.89 corre-
lation, and both WN30g and the combination of con-
text windows and syntactic context perform best on
WordSim353. Note that the confidence intervals are
quite large in both RG and WordSim353, and few of
the pairwise differences are statistically significant.
Regarding WordNet-based approaches, the use of
the glosses and WordNet 3.0 (WN30g) yields the
best results in both datasets. While MCR16 is close
to WN30g for the RG dataset, it lags well behind
on WordSim353. This discrepancy is further ana-
lyzed is Section 5.3. Note that the performance of
WordNet in the WordSim353 dataset suffers from
unknown words. In fact, there are nine pairs which
returned null similarity for this reason. The num-
6To calculate the Spearman correlations values are trans-
formed into ranks, and we calculate the Pearson correlation on
them. The confidence intervals refer to the Pearson correlations
of the rank vectors.
22
Figure 1: Effect of the size of the training corpus, for the best distributional similarity model in each dataset. Left: WordSim353 with bag-of-words,
Right: RG with context windows.
Dataset Method overall ? interval
RG MCR16 0.78 -0.05 [0.66, 0.86]
WN30g 0.74 -0.09 [0.61, 0.84]
Bag of words 0.68 -0.23 [0.53, 0.79]
Context windows 0.83 -0.05 [0.73, 0.89]
WS353 MCR16 0.42 (0.53) -0.11 (-0.03) [0.34, 0.51]
WN30g 0.58 (0.67) -0.07 (-0.02) [0.51, 0.64]
Bag of words 0.53 -0.12 [0.45, 0.61]
Context windows 0.52 -0.11 [0.44, 0.59]
Table 3: Results obtained by the different methods on the Span-
ish/English cross-lingual datasets. The ? column shows the perfor-
mance difference with respect to the results on the original dataset.
ber in parenthesis in Table 1 for WordSim353 shows
the results for the 344 remaining pairs. Section 5.2
shows a proposal to overcome this limitation.
The bag-of-words approach tends to group to-
gether terms that can have a similar distribution of
contextual terms. Therefore, terms that are topically
related can appear in the same textual passages and
will get high values using this model. We see this
as an explanation why this model performed better
than the context window approach for WordSim353,
where annotators were instructed to provide high
ratings to related terms. On the contrary, the con-
text window approach tends to group together words
that are exchangeable in exactly the same context,
preserving order. Table 2 illustrates a few exam-
ples of context collected. Therefore, true synonyms
and hyponyms/hyperonyms will receive high simi-
larities, whereas terms related topically or based on
any other semantic relation (e.g. movie and star) will
have lower scores. This explains why this method
performed better for the RG dataset. Section 5.3
confirms these observations.
4.3 Cross-lingual similarity
Table 3 shows the results for the English-Spanish
cross-lingual datasets. For RG, MCR16 and the
context windows methods drop only 5 percentage
points, showing that cross-lingual similarity is feasi-
ble, and that both cross-lingual strategies are robust.
The results for WordSim353 show that WN30g is
the best for this dataset, with the rest of the meth-
ods falling over 10 percentage points relative to the
monolingual experiment. A closer look at the Word-
Net results showed that most of the drop in perfor-
mance was caused by out-of-vocabulary words, due
to the smaller vocabulary of the Spanish WordNet.
Though not totally comparable, if we compute the
correlation over pairs covered in WordNet alne, the
correlation would drop only 2 percentage points. In
the case of the distributional approaches, the fall in
performance was caused by the translations, as only
61% of the words were translated into the original
word in the English datasets.
5 Detailed analysis and system
combination
In this section we present some analysis, including
learning curves for distributional methods, the use
of distributional similarity to improve WordNet sim-
ilarity, the contrast between similarity and related-
ness, and the combination of methods.
5.1 Learning curves for distributional methods
Figure 1 shows that the correlation improves with
the size of the corpus, as expected. For the re-
sults using the WordSim353 corpus, we show the
results of the bag-of-words approach with context
size 10. Results improve from 0.5 Spearman correla-
tion up to 0.65 when increasing the corpus size three
orders of magnitude, although the effect decays at
the end, which indicates that we might not get fur-
23
Method Without similar words With similar words
WN30 0.56 (0.58) [0.48, 0.63] 0.58 [0.51, 0.65]
WN30g 0.66 (0.69) [0.59, 0.71] 0.68 [0.62, 0.73]
Table 4: Results obtained replacing unknown words with their most
similar three words (WordSim353 dataset).
Method overall Similarity Relatedness
MCR16 0.53 [0.45, 0.60] 0.65 [0.56, 0.72] 0.33 [0.21, 0.43]
WN30 0.56 [0.48, 0.63] 0.73 [0.65, 0.79] 0.38 [0.27, 0.48]
WN30g 0.66 [0.59, 0.71] 0.72 [0.64, 0.78] 0.56 [0.46, 0.64]
BoW 0.65 [0.59, 0.71] 0.70 [0.63, 0.77] 0.62 [0.53, 0.69]
CW 0.60 [0.53, 0.66] 0.77 [0.71, 0.82] 0.46 [0.36, 0.55]
Table 5: Results obtained on the WordSim353 dataset and on the two
similarity and relatedness subsets.
ther gains going beyond the current size of the cor-
pus. With respect to results for the RG dataset, we
used a context-window approach with context radius
4. Here, results improve even more with data size,
probably due to the sparse data problem collecting
8-word context windows if the corpus is not large
enough. Correlation improves linearly right to the
end, where results stabilize around 0.89.
5.2 Combining both approaches: dealing with
unknown words in WordNet
Although the vocabulary of WordNet is very ex-
tensive, applications are bound to need the similar-
ity between words which are not included in Word-
Net. This is exemplified in the WordSim353 dataset,
where 9 pairs contain words which are unknown to
WordNet. In order to overcome this shortcoming,
we could use similar words instead, as provided by
the distributional thesaurus. We used the distribu-
tional thesaurus defined in Section 3, using context
windows of width 4, to provide three similar words
for each of the unknown words in WordNet. Results
improve for both WN30 and WN30g, as shown in
Table 4, attaining our best results for WordSim353.
5.3 Similarity vs. relatedness
We mentioned above that the annotation guidelines
of WordSim353 did not distinguish between simi-
lar and related pairs. As the results in Section 4
show, different techniques are more appropriate to
calculate either similarity or relatedness. In order to
study this effect, ideally, we would have two ver-
sions of the dataset, where annotators were given
precise instructions to distinguish similarity in one
case, and relatedness in the other. Given the lack
of such datasets, we devised a simpler approach in
order to reuse the existing human judgements. We
manually split the dataset in two parts, as follows.
First, two humans classified all pairs as be-
ing synonyms of each other, antonyms, iden-
tical, hyperonym-hyponym, hyponym-hyperonym,
holonym-meronym, meronym-holonym, and none-
of-the-above. The inter-tagger agreement rate was
0.80, with a Kappa score of 0.77. This anno-
tation was used to group the pairs in three cate-
gories: similar pairs (those classified as synonyms,
antonyms, identical, or hyponym-hyperonym), re-
lated pairs (those classified as meronym-holonym,
and pairs classified as none-of-the-above, with a hu-
man average similarity greater than 5), and unrelated
pairs (those classified as none-of-the-above that had
average similarity less than or equal to 5). We then
created two new gold-standard datasets: similarity
(the union of similar and unrelated pairs), and relat-
edness (the union of related and unrelated)7.
Table 5 shows the results on the relatedness and
similarity subsets of WordSim353 for the different
methods. Regarding WordNet methods, both WN30
and WN30g perform similarly on the similarity sub-
set, but WN30g obtains the best results by far on
the relatedness data. These results are congruent
with our expectations: two words are similar if their
synsets are in close places in the WordNet hierarchy,
and two words are related if there is a connection
between them. Most of the relations in WordNet
are of hierarchical nature, and although other rela-
tions exist, they are far less numerous, thus explain-
ing the good results for both WN30 and WN30g on
similarity, but the bad results of WN30 on related-
ness. The disambiguated glosses help find connec-
tions among related concepts, and allow our method
to better model relatedness with respect to WN30.
The low results for MCR16 also deserve some
comments. Given the fact that MCR16 performed
very well on the RG dataset, it comes as a surprise
that it performs so poorly for the similarity subset
of WordSim353. In an additional evaluation, we at-
tested that MCR16 does indeed perform as well as
MCR30g on the similar pairs subset. We believe
that this deviation could be due to the method used to
construct the similarity dataset, which includes some
pairs of loosely related pairs labeled as unrelated.
7Available at http://alfonseca.org/eng/research/wordsim353.html
24
Methods combined in the SVM RG dataset WordSim353 dataset WordSim353 similarity WordSim353 relatedness
WN30g, bag of words 0.88 [0.82, 0.93] 0.78 [0.73, 0.81] 0.81 [0.76, 0.86] 0.72 [0.65, 0.77]
WN30g, context windows 0.90 [0.84, 0.94] 0.73 [0.68, 0.79] 0.83 [0.78, 0.87] 0.64 [0.56, 0.71]
WN30g, syntax 0.89 [0.83, 0.93] 0.75 [0.70, 0.79] 0.83 [0.78, 0.87] 0.67 [0.60, 0.74]
WN30g, bag of words, context windows, syntax 0.96 [0.93, 0.97] 0.78 [0.73, 0.82] 0.83 [0.78, 0.87] 0.71 [0.65, 0.77]
Table 6: Results using a supervised combination of several systems. Max values are bolded for each dataset.
Concerning the techniques based on distributional
similarities, the method based on context windows
provides the best results for similarity, and the bag-
of-words representation outperforms most of the
other techniques for relatedness.
5.4 Supervised combination
In order to gain an insight on which would be the up-
per bound that we could obtain when combining our
methods, we took the output of three systems (bag
of words with window size 10, context window with
size 4, and the WN30g run). Each of these outputs is
a ranking of word pairs, and we implemented an or-
acle that chooses, for each pair, the rank that is most
similar to the rank of the pair in the gold-standard.
The outputs of the oracle have a Spearman correla-
tion of 0.97 for RG and 0.92 for WordSim353, which
gives as an indication of the correlations that could
be achieved by choosing for each pair the rank out-
put by the best classifier for that pair.
The previous results motivated the use of a su-
pervised approach to combine the output of the
different systems. We created a training cor-
pus containing pairs of pairs of words from the
datasets, having as features the similarity and rank
of each pair involved as given by the differ-
ent unsupervised systems. A classifier is trained
to decide whether the first pair is more simi-
lar than the second one. For example, a train-
ing instance using two unsupervised classifiers is
0.001364, 31, 0.327515, 64, 0.084805, 57, 0.109061, 59, negative
meaning that the similarities given by the first clas-
sifier to the two pairs were 0.001364 and 0.327515
respectively, which ranked them in positions 31 and
64. The second classifier gave them similarities of
0.084805 and 0.109061 respectively, which ranked
them in positions 57 and 59. The class negative in-
dicates that in the gold-standard the first pair has a
lower score than the second pair.
We have trained a SVM to classify pairs of pairs,
and use its output to rank the entries in both datasets.
It uses a polynomial kernel with degree 4. We did
Method Source Spearman (MC) Pearson (MC)
(Sahami et al, 2006) Web snippets 0.62 [0.32, 0.81] 0.58 [0.26, 0.78]
(Chen et al, 2006) Web snippets 0.69 [0.42, 0.84] 0.69 [0.42, 0.85]
(Wu and Palmer, 1994) WordNet 0.78 [0.59, 0.90] 0.78 [0.57, 0.89]
(Leacock et al, 1998) WordNet 0.79 [0.59, 0.90] 0.82 [0.64, 0.91]
(Resnik, 1995) WordNet 0.81 [0.62, 0.91] 0.80 [0.60, 0.90]
(Lin, 1998a) WordNet 0.82 [0.65, 0.91] 0.83 [0.67, 0.92]
(Bollegala et al, 2007) Web snippets 0.82 [0.64, 0.91] 0.83 [0.67, 0.92]
(Jiang and Conrath, 1997) WordNet 0.83 [0.67, 0.92] 0.85 [0.69, 0.93]
(Jarmasz, 2003) Roget?s 0.87 [0.73, 0.94] 0.87 [0.74, 0.94]
(Patwardhan et al, 2006) WordNet n/a 0.91
(Alvarez and Lim, 2007) WordNet n/a 0.91
(Yang and Powers, 2005) WordNet 0.87 [0.73, 0.91] 0.92 [0.84, 0.96]
(Hughes et al, 2007) WordNet 0.90 n/a
Personalized PageRank WordNet 0.89 [0.77, 0.94] n/a
Bag of words Web corpus 0.85 [0.70, 0.93] 0.84 [0.69, 0.93]
Context window Web corpus 0.88 [0.76, 0.95] 0.89 [0.77, 0.95]
Syntactic contexts Web corpus 0.76 [0.54, 0.88] 0.74 [0.51, 0.87]
SVM Web, WN 0.92 [0.84, 0.96] 0.93 [0.85, 0.97]
Table 7: Comparison with previous approaches for MC.
not have a held-out set, so we used the standard set-
tings of Weka, without trying to modify parameters,
e.g. C. Each word pair is scored with the number
of pairs that were considered to have less similar-
ity using the SVM. The results using 10-fold cross-
validation are shown in Table 6. A combination of
all methods produces the best results reported so far
for both datasets, statistically significant for RG.
6 Related work
Contrary to the WordSim353 dataset, common prac-
tice with the RG dataset has been to perform the
evaluation with Pearson correlation. In our believe
Pearson is less informative, as the Pearson correla-
tion suffers much when the scores of two systems are
not linearly correlated, something which happens
often given due to the different nature of the tech-
niques applied. Some authors, e.g. Alvarez and Lim
(2007), use a non-linear function to map the system
outputs into new values distributed more similarly
to the values in the gold-standard. In their case, the
mapping function was exp (?x4 ), which was chosenempirically. Finding such a function is dependent
on the dataset used, and involves an extra step in the
similarity calculations. Alternatively, the Spearman
correlation provides an evaluation metric that is in-
dependent of such data-dependent transformations.
Most similarity researchers have published their
25
Word pair M&C SVM Word pair M&C SVM
automobile, car 3.92 62 crane, implement 1.68 26
journey, voyage 3.84 54 brother, lad 1.66 39
gem, jewel 3.84 61 car, journey 1.16 37
boy, lad 3.76 57 monk, oracle 1.1 32
coast, shore 3.7 53 food, rooster 0.89 3
asylum, madhouse 3.61 45 coast, hill 0.87 34
magician, wizard 3.5 49 forest, graveyard 0.84 27
midday, noon 3.42 61 monk, slave 0.55 17
furnace, stove 3.11 50 lad, wizard 0.42 13
food, fruit 3.08 47 coast, forest 0.42 18
bird, cock 3.05 46 cord, smile 0.13 5
bird, crane 2.97 38 glass, magician 0.11 10
implement, tool 2.95 55 rooster, voyage 0.08 1
brother, monk 2.82 42 noon, string 0.08 5
Table 8: Our best results for the MC dataset.
Method Source Spearman
(Strube and Ponzetto, 2006) Wikipedia 0.19?0.48
(Jarmasz, 2003) WordNet 0.33?0.35
(Jarmasz, 2003) Roget?s 0.55
(Hughes and Ramage, 2007) WordNet 0.55
(Finkelstein et al, 2002) Web corpus, WN 0.56
(Gabrilovich and Markovitch, 2007) ODP 0.65
(Gabrilovich and Markovitch, 2007) Wikipedia 0.75
SVM Web corpus, WN 0.78
Table 9: Comparison with previous work for WordSim353.
complete results on a smaller subset of the RG
dataset containing 30 word pairs (Miller and
Charles, 1991), usually referred to as MC, making it
possible to compare different systems using differ-
ent correlation. Table 7 shows the results of related
work on MC that was available to us, including our
own. For the authors that did not provide the de-
tailed data we include only the Pearson correlation
with no confidence intervals.
Among the unsupervised methods introduced in
this paper, the context window produced the best re-
ported Spearman correlation, although the 0.95 con-
fidence intervals are too large to allow us to accept
the hypothesis that it is better than all others meth-
ods. The supervised combination produces the best
results reported so far. For the benefit of future re-
search, our results for the MC subset are displayed
in Table 8.
Comparison on the WordSim353 dataset is eas-
ier, as all researchers have used Spearman. The
figures in Table 9) show that our WordNet-based
method outperforms all previously published Word-
Net methods. We want to note that our WordNet-
based method outperforms that of Hughes and Ram-
age (2007), which uses a similar method. Although
there are some differences in the method, we think
that the main performance gain comes from the use
of the disambiguated glosses, which they did not
use. Our distributional methods also outperform all
other corpus-based methods. The most similar ap-
proach to our distributional technique is Finkelstein
et al (2002), who combined distributional similar-
ities from Web documents with a similarity from
WordNet. Their results are probably worse due to
the smaller data size (they used 270,000 documents)
and the differences in the calculation of the simi-
larities. The only method which outperforms our
non-supervised methods is that of (Gabrilovich and
Markovitch, 2007) when based on Wikipedia, prob-
ably because of the dense, manually distilled knowl-
edge contained in Wikipedia. All in all, our super-
vised combination gets the best published results on
this dataset.
7 Conclusions and future work
This paper has presented two state-of-the-art dis-
tributional and WordNet-based similarity measures,
with a study of several parameters, including per-
formance on similarity and relatedness data. We
show that the use of disambiguated glosses allows
for the best published results for WordNet-based
systems on the WordSim353 dataset, mainly due to
the better modeling of relatedness (as opposed to
similarity). Distributional similarities have proven
to be competitive when compared to knowledge-
based methods, with context windows being better
for similarity and bag of words for relatedness. Dis-
tributional similarity was effectively used to cover
out-of-vocabulary items in the WordNet-based mea-
sure providing our best unsupervised results. The
complementarity of our methods was exploited by
a supervised learner, producing the best results so
far for RG and WordSim353. Our results include
confidence values, which, surprisingly, were not in-
cluded in most previous work, and show that many
results over RG and WordSim353 are indistinguish-
able. The algorithm for WordNet-base similarity
and the necessary resources are publicly available8.
This work pioneers cross-lingual extension and
evaluation of both distributional and WordNet-based
measures. We have shown that closely aligned
wordnets provide a natural and effective way to
compute cross-lingual similarity with minor losses.
A simple translation strategy also yields good results
for distributional methods.
8http://ixa2.si.ehu.es/ukb/
26
References
E. Agirre and A. Soroa. 2009. Personalizing pager-
ank for word sense disambiguation. In Proc. of EACL
2009, Athens, Greece.
M.A. Alvarez and S.J. Lim. 2007. A Graph Modeling
of Semantic Similarity between Words. Proc. of the
Conference on Semantic Computing, pages 355?362.
J. Atserias, L. Villarejo, G. Rigau, E. Agirre, J. Carroll,
B. Magnini, and P. Vossen. 2004. The meaning multi-
lingual central repository. In Proc. of Global WordNet
Conference, Brno, Czech Republic.
D. Bollegala, Matsuo Y., and M. Ishizuka. 2007. Mea-
suring semantic similarity between words using web
search engines. In Proceedings of WWW?2007.
A. Budanitsky and G. Hirst. 2006. Evaluating WordNet-
based Measures of Lexical Semantic Relatedness.
Computational Linguistics, 32(1):13?47.
H. Chen, M. Lin, and Y. Wei. 2006. Novel association
measures using web search with double checking. In
Proceedings of COCLING/ACL 2006.
J. Daude, L. Padro, and G. Rigau. 2000. Mapping Word-
Nets using structural information. In Proceedings of
ACL?2000, Hong Kong.
C. Fellbaum, editor. 1998. WordNet: An Electronic Lexi-
cal Database and Some of its Applications. MIT Press,
Cambridge, Mass.
L. Finkelstein, E. Gabrilovich, Y. Matias, E. Rivlin,
Z. Solan, G. Wolfman, and E. Ruppin. 2002. Plac-
ing Search in Context: The Concept Revisited. ACM
Transactions on Information Systems, 20(1):116?131.
E. Gabrilovich and S. Markovitch. 2007. Computing
Semantic Relatedness using Wikipedia-based Explicit
Semantic Analysis. Proc of IJCAI, pages 6?12.
T. H. Haveliwala. 2002. Topic-sensitive pagerank. In
WWW ?02: Proceedings of the 11th international con-
ference on World Wide Web, pages 517?526.
T. Hughes and D. Ramage. 2007. Lexical semantic re-
latedness with random graph walks. In Proceedings of
EMNLP-CoNLL-2007, pages 581?589.
M. Jarmasz. 2003. Roget?s Thesuarus as a lexical re-
source for Natural Language Processing.
J.J. Jiang and D.W. Conrath. 1997. Semantic similarity
based on corpus statistics and lexical taxonomy. In
Proceedings of International Conference on Research
in Computational Linguistics, volume 33. Taiwan.
C. Leacock and M. Chodorow. 1998. Combining local
context and WordNet similarity for word sense iden-
tification. WordNet: An Electronic Lexical Database,
49(2):265?283.
D. Lin. 1998a. An information-theoretic definition of
similarity. In Proc. of ICML, pages 296?304, Wiscon-
sin, USA.
D. Lin. 1998b. Automatic Retrieval and Clustering of
Similar Words. In Proceedings of ACL-98.
G.A. Miller and W.G. Charles. 1991. Contextual corre-
lates of semantic similarity. Language and Cognitive
Processes, 6(1):1?28.
J. Nivre. 2006. Inductive Dependency Parsing, vol-
ume 34 of Text, Speech and Language Technology.
Springer.
S. Pado and M. Lapata. 2007. Dependency-based con-
struction of semantic space models. Computational
Linguistics, 33(2):161?199.
S. Patwardhan and T. Pedersen. 2006. Using WordNet-
based Context Vectors to Estimate the Semantic Re-
latedness of Concepts. In Proceedings of the EACL
Workshop on Making Sense of Sense: Bringing Com-
putational Linguistics and Pycholinguistics Together,
pages 1?8, Trento, Italy.
P. Resnik. 1995. Using Information Content to Evaluate
Semantic Similarity in a Taxonomy. Proc. of IJCAI,
14:448?453.
H. Rubenstein and J.B. Goodenough. 1965. Contextual
correlates of synonymy. Communications of the ACM,
8(10):627?633.
M Ruiz-Casado, E. Alfonseca, and P. Castells. 2005.
Using context-window overlapping in Synonym Dis-
covery and Ontology Extension. In Proceedings of
RANLP-2005, Borovets, Bulgaria,.
M. Sahami and T.D. Heilman. 2006. A web-based ker-
nel function for measuring the similarity of short text
snippets. Proc. of WWW, pages 377?386.
M. Strube and S.P. Ponzetto. 2006. WikiRelate! Com-
puting Semantic Relatedness Using Wikipedia. In
Proceedings of the AAAI-2006, pages 1419?1424.
P.D. Turney. 2001. Mining the Web for Synonyms: PMI-
IR versus LSA on TOEFL. Lecture Notes in Computer
Science, 2167:491?502.
P. Vossen, editor. 1998. EuroWordNet: A Multilingual
Database with Lexical Semantic Networks. Kluwer
Academic Publishers.
Z. Wu and M. Palmer. 1994. Verb semantics and lex-
ical selection. In Proc. of ACL, pages 133?138, Las
Cruces, New Mexico.
D. Yang and D.M.W. Powers. 2005. Measuring semantic
similarity in the taxonomy of WordNet. Proceedings
of the Australasian conference on Computer Science.
27
