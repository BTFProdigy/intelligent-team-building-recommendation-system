Proceedings of the 12th Conference of the European Chapter of the ACL, pages 264?272,
Athens, Greece, 30 March ? 3 April 2009. c?2009 Association for Computational Linguistics
TBL-Improved Non-Deterministic Segmentation and POS Tagging for a
Chinese Parser
Martin Forst & Ji Fang
Intelligent Systems Laboratory
Palo Alto Research Center
Palo Alto, CA 94304, USA
{mforst|fang}@parc.com
Abstract
Although a lot of progress has been made
recently in word segmentation and POS
tagging for Chinese, the output of cur-
rent state-of-the-art systems is too inaccu-
rate to allow for syntactic analysis based
on it. We present an experiment in im-
proving the output of an off-the-shelf mod-
ule that performs segmentation and tag-
ging, the tokenizer-tagger from Beijing
University (PKU). Our approach is based
on transformation-based learning (TBL).
Unlike in other TBL-based approaches to
the problem, however, both obligatory and
optional transformation rules are learned,
so that the final system can output multi-
ple segmentation and POS tagging anal-
yses for a given input. By allowing for
a small amount of ambiguity in the out-
put of the tokenizer-tagger, we achieve a
very considerable improvement in accu-
racy. Compared to the PKU tokenizer-
tagger, we improve segmentation F-score
from 94.18% to 96.74%, tagged word
F-score from 84.63% to 92.44%, seg-
mented sentence accuracy from 47.15%
to 65.06% and tagged sentence accuracy
from 14.07% to 31.47%.
1 Introduction
Word segmentation and tagging are the neces-
sary initial steps for almost any language process-
ing system, and Chinese parsers are no exception.
However, automatic Chinese word segmentation
and tagging has been recognized as a very difficult
task (Sproat and Emerson, 2003), for the follow-
ing reasons:
First, Chinese text provides few cues for word
boundaries (Xia, 2000; Wu, 2003) and part-of-
speech (POS) information. With the exception of
punctuation marks, Chinese does not have word
delimiters such as the whitespace used in English
text, and unlike other languages without whites-
paces such as Japanese, Chinese lacks morpholog-
ical inflections that could provide cues for word
boundaries and POS information. In fact, the lack
of word boundary marks and morphological in-
flection contributes not only to mistakes in ma-
chine processing of Chinese; it has also been iden-
tified as a factor for parsing miscues in Chinese
children?s reading behavior (Chang et al, 1992).
Second, in addition to the two problems de-
scribed above, segmentation and tagging also suf-
fer from the fact that the notion of a word is
very unclear in Chinese (Xu, 1997; Packard, 2000;
Hsu, 2002). While the word is an intuitive and
salient notion in English, it is by no means a
clear notion in Chinese. Instead, for historical
reasons, the intuitive and clear notion in Chinese
language and culture is the character rather than
the word. Classical Chinese is in general mono-
syllabic, with each syllable corresponding to an
independent morpheme that can be visually ren-
dered with a written character. In other words,
characters did represent the basic syntactic unit in
Classical Chinese, and thus became the sociolog-
ically intuitive notion. However, although collo-
quial Chinese quickly evolved throughout Chinese
history to be disyllabic or multi-syllabic, monosyl-
labic Classical Chinese has been considered more
elegant and proper and was commonly used in
written text until the early 20th century in China.
Even in Modern Chinese written text, Classical
Chinese elements are not rare. Consequently, even
if a morpheme represented by a character is no
264
longer used independently in Modern colloquial
Chinese, it might still appear to be a free mor-
pheme in modern written text, because it contains
Classical Chinese elements. This fact leads to a
phenomenon in which Chinese speakers have dif-
ficulty differentiating whether a character repre-
sents a bound or free morpheme, which in turn
affects their judgment regarding where the word
boundaries should be. As pointed out by Hoosain
(Hoosain, 1992), the varying knowledge of Classi-
cal Chinese among native Chinese speakers in fact
affects their judgments about what is or is not a
word. In summary, due to the influence of Classi-
cal Chinese, the notion of a word and the bound-
ary between a bound and free morpheme is very
unclear for Chinese speakers, which in turn leads
to a fuzzy perception of where word boundaries
should be.
Consequently, automatic segmentation and tag-
ging in Chinese faces a serious challenge from
prevalent ambiguities. For example 1, the string
????? can be segmented as (1a) or (1b), de-
pending on the context.
(1) a. ? ??
yo?u y?`jian
have disagreement
b. ?? ?
yo?uy?` jia`n
have the intention meet
The contrast shown in (2) illustrates that even a
string that is not ambiguous in terms of segmenta-
tion can still be ambiguous in terms of tagging.
(2) a. ?/a ?/n
ba?i hua?
white flower
b. ?/d ?/v
ba?i hua?
in vain spend
?spend (money, time, energy etc.) in vain?
Even Chinese speakers cannot resolve such am-
biguities without using further information from
a bigger context, which suggests that resolving
segmentation and tagging ambiguities probably
should not be a task or goal at the word level. In-
stead, we should preserve such ambiguities in this
level and leave them to be resolved in a later stage,
when more information is available.
1(1) and (2) are cited from (Fang and King, 2007)
To summarize, the word as a notion and hence
word boundaries are very unclear; segmentation
and tagging are prevalently ambiguous in Chinese.
These facts suggest that Chinese segmentation and
part-of-speech identification are probably inher-
ently non-deterministic at the word level. How-
ever most of the current segmentation and/or tag-
ging systems output a single result.
While a deterministic approach to Chinese seg-
mentation and POS tagging might be appropriate
and necessary for certain tasks or applications, it
has been shown to suffer from a problem of low
accuracy. As pointed out by Yu (Yu et al, 2004),
although the segmentation and tagging accuracy
for certain types of text can reach as high as 95%,
the accuracy for open domain text is only slightly
higher than 80%. Furthermore, Chinese segmenta-
tion (SIGHAN) bakeoff results also show that the
performance of the Chinese segmentation systems
has not improved a whole lot since 2003. This
fact also indicates that deterministic approaches
to Chinese segmentation have hit a bottleneck in
terms of accuracy.
The system for which we improved the output
of the Beijing tokenizer-tagger is a hand-crafted
Chinese grammar. For such a system, as proba-
bly for any parsing system that presupposes seg-
mented (and tagged) input, the accuracy of the
segmentation and POS tagging analyses is criti-
cal. However, as described in detail in the fol-
lowing section, even current state-of-art systems
cannot provide satisfactory results for our ap-
plication. Based on the experiments presented
in section 3, we believe that a proper amount
of non-deterministic results can significantly im-
prove the Chinese segmentation and tagging accu-
racy, which in turn improves the performance of
the grammar.
2 Background
The improved tokenizer-tagger we developed is
part of a larger system, namely a deep Chinese
grammar (Fang and King, 2007). The system
is hybrid in that it uses probability estimates for
parse pruning (and it is planned to use trained
weights for parse ranking), but the ?core? gram-
mar is rule-based. It is written within the frame-
work of Lexical Functional Grammar (LFG) and
implemented on the XLE system (Crouch et al,
2006; Maxwell and Kaplan, 1996). The input to
our system is a raw Chinese string such as (3).
265
(3)
?? ? ? ?
xia?owa?ng zo?u le .
XiaoWang leave ASP 2 .
?XiaoWang left.?
The output of the Chinese LFG consists of a
Constituent Structure (c-structure) and a Func-
tional Structure (f-structure) for each sentence.
While c-structure represents phrasal structure and
linear word order, f-structure represents various
functional relations between parts of sentences.
For example, (4) and (5) are the c-structure and f-
structure that the grammar produces for (3). Both
c-structure and f-structure information are carried
in syntactic rules in the grammar.
(4) c-structure of (3)
(5) f-structure of (3)
To parse a sentence, the Chinese LFG min-
imally requires three components: a tokenizer-
tagger, a lexicon, and syntactic rules. The
tokenizer-tagger that is currently used in the gram-
mar is developed by Beijing University (PKU)3
and is incorporated as a library transducer (Crouch
et al, 2006).
Because the grammar?s syntactic rules are ap-
plied based upon the results produced by the
tokenizer-tagger, the performance of the latter is
2ASP stands for aspect marker.
3http://www.icl.pku.edu.cn/icl res/
critical to overall quality of the system?s out-
put. However, even though PKU?s tokenizer-
tagger is one of the state-of-art systems, its per-
formance is not satisfactory for the Chinese LFG.
This becomes clear from a small-scale evaluation
in which the system was tested on a set of 101
gold sentences chosen from the Chinese Treebank
5 (CTB5) (Xue et al, 2002; Xue et al, 2005).
These 101 sentences are 10-20 words long and
all of them are chosen from Xinhua sources 4.
Based on the deterministic segmentation and tag-
ging results produced by PKU?s tokenizer-tagger,
the Chinese LFG can only parse 80 out of the
101 sentences. Among the 80 sentences that are
parsed, 66 received full parses and 14 received
fragmented parses. Among the 21 completely
failed sentences, 20 sentences failed due to seg-
mentation and tagging mistakes.
This simple test shows that in order for the
deep Chinese grammar to be practically useful,
the performance of the tokenizer-tagger must be
improved. One way to improve the segmentation
and tagging accuracy is to allow non-deterministic
segmentation and tagging for Chinese for the rea-
sons stated in Section 1. Therefore, our goal
is to find a way to transform PKU?s tokenizer-
tagger into a system that produces a proper amount
of non-deterministic segmentation and tagging re-
sults, one that can significantly improve the sys-
tem?s accuracy without a substantial sacrifice in
terms of efficiency. Our approach is described in
the following section.
3 FST5 Rules for the Improvement of
Segmentation and Tagging Output
For grammars of other languages implemented on
the XLE grammar development platform, the in-
put is usually preprocessed by a cascade of gener-
ally non-deterministic finite state transducers that
perform tokenization, morphological analysis etc.
Since word segmentation and POS tagging are
such hard problems in Chinese, this traditional
setup is not an option for the Chinese grammar.
However, finite state rules seem a quite natural ap-
proach to improving in XLE the output of a sep-
4The reason why only sentences from Xinhua sources
were chosen is because the version of PKU?s tokenizer-tagger
that was integrated into the system was not designed to han-
dle data from Hong Kong and Taiwan.
5We use the abbreviation ?FST? for ?finite-state trans-
ducer?. fst is used to refer to the finite-state tool called fst,
which was developed by Beesley and Karttunen (2003).
266
arate segmentation and POS tagging module like
PKU?s tokenizer-tagger.
3.1 Hand-Crafted FST Rules for Concept
Proving
Although the grammar developer had identified
PKU?s tokenizer-tagger as the most suitable for
the preprocessing of Chinese raw text that is
to be parsed with the Chinese LFG, she no-
ticed in the process of development that (i) cer-
tain segmentation and/or tagging decisions taken
by the tokenizer-tagger systematically go counter
her morphosyntactic judgment and that (ii) the
tokenizer-tagger (as any software of its kind)
makes mistakes. She therefore decided to develop
a set of finite-state rules that transform the output
of the module; a set of mostly obligatory rewrite
rules adapts the POS-tagged word sequence to the
grammar?s standard, and another set of mostly op-
tional rules tries to offer alternative segment and
tag sequences for sequences that are frequently
processed erroneously by PKU?s tokenizer-tagger.
Given the absence of data segmented and tagged
according to the standard the LFG grammar de-
veloper desired, the technique of hand-crafting
FST rules to postprocess the output of PKU?s
tokenizer-tagger worked surprisingly well. Re-
call that based on the deterministic segmentation
and tagging results produced by PKU?s tokenizer-
tagger, our system can only parse 80 out of the 101
sentences, and among the 21 completely failed
sentences, 20 sentences failed due to segmenta-
tion and tagging mistakes. In contrast, after the
application of the hand-crafted FST rules for post-
processing, 100 out of the 101 sentences can be
parsed. However, this approach involved a lot
of manual development work (about 3-4 person
months) and has reached a stage where it is dif-
ficult to systematically work on further improve-
ments.
3.2 Machine-Learned FST Rules
Since there are large amounts of training data that
are close to the segmentation and tagging standard
the grammar developer wants to use, the idea of
inducing FST rules rather than hand-crafting them
comes quite naturally. The easiest way to do this
is to apply transformation-based learning (TBL) to
the combined problem of Chinese segmentation
and POS tagging, since the cascade of transfor-
mational rules learned in a TBL training run can
straightforwardly be translated into a cascade of
FST rules.
3.2.1 Transformation-Based Learning and
?-TBL
TBL is a machine learning approach that has been
employed to solve a number of problems in nat-
ural language processing; most famously, it has
been used for part-of-speech tagging (Brill, 1995).
TBL is a supervised learning approach, since it re-
lies on gold-annotated training data. In addition,
it relies on a set of templates of transformational
rules; learning consists in finding a sequence of in-
stantiations of these templates that minimizes the
number of errors in a more or less naive base-line
output with respect to the gold-annotated training
data.
The first attempts to employ TBL to solve the
problem of Chinese word segmentation go back to
Palmer (1997) and Hockenmaier and Brew (1998).
In more recent work, TBL was used for the adap-
tion of the output of a statistical ?general pur-
pose? segmenter to standards that vary depend-
ing on the application that requires sentence seg-
mentation (Gao et al, 2004). TBL approaches to
the combined problem of segmenting and POS-
tagging Chinese sentences are reported in Florian
and Ngai (2001) and Fung et al (2004).
Several implementations of the TBL approach
are freely available on the web, the most well-
known being the so-called Brill tagger, fnTBL,
which allows for multi-dimensional TBL, and
?-TBL (Lager, 1999). Among these, we chose
?-TBL for our experiments because (like fnTBL)
it is completely flexible as to whether a sample
is a word, a character or anything else and (un-
like fnTBL) it allows for the induction of optional
rules. Probably due to its flexibility, ?-TBL has
been used (albeit on a small scale for the most part)
for tasks as diverse as POS tagging, map tasks, and
machine translation.
3.2.2 Experiment Set-up
We started out with a corpus of thirty gold-
segmented and -tagged daily editions of the Xin-
hua Daily, which were provided by the Institute
of Computational Linguistics at Beijing Univer-
sity. Three daily editions, which comprise 5,054
sentences with 129,377 words and 213,936 char-
acters, were set aside for testing purposes; the re-
maining 27 editions were used for training. With
the idea of learning both obligatory and optional
267
transformational rules in mind, we then split the
training data into two roughly equally sized sub-
sets. All the data were broken into sentences us-
ing a very simple method: The end of a para-
graph was always considered a sentence bound-
ary. Within paragraphs, sentence-final punctua-
tion marks such as periods (which are unambigu-
ous in Chinese), question marks and exclamation
marks, potentially followed by a closing parenthe-
sis, bracket or quote mark, were considered sen-
tence boundaries.
We then had to come up with a way of cast-
ing the problem of combined segmentation and
POS tagging as a TBL problem. Following a strat-
egy widely used in Chinese word segmentation,
we did this by regarding the problem as a charac-
ter tagging problem. However, since we intended
to learn rules that deal with segmentation and
POS tagging simultaneously, we could not adopt
the BIO-coding approach.6 Also, since the TBL-
induced transformational rules were to be con-
verted into FST rules, we had to keep our character
tagging scheme one-dimensional, unlike Florian
and Ngai (2001), who used a multi-dimensional
TBL approach to solve the problem of combined
segmentation and POS tagging.
The character tagging scheme that we finally
chose is illustrated in (6), where a. and b. show the
character tags that we used for the analyses in (1a)
and (1b) respectively. The scheme consists in tag-
ging the last character of a word with the part-of-
speech of the entire word; all non-final characters
are tagged with ?-?. The main advantages of this
character tagging scheme are that it expresses both
word boundaries and parts-of-speech and that, at
the same time, it is always consistent; inconsisten-
cies between BIO tags indicating word boundaries
and part-of-speech tags, which Florian and Ngai
(2001), for example, have to resolve, can simply
not arise.
(6)
? ? ?
a. v - n
b. - v v
Both of the training data subsets were tagged
according to our character tagging scheme and
6In this character tagging approach to word segmentation,
characters are tagged as the beginning of a word (B), inside
(or at the end) of a multi-character word (I) or a word of their
own (O). Their are numerous variations of this approach.
converted to the data format expected by ?-TBL.
The first training data subset was used for learn-
ing obligatory resegmentation and retagging rules.
The corresponding rule templates, which define
the space of possible rules to be explored, are
given in Figure 1. The training parameters of
?-TBL, which are an accuracy threshold and a
score threshold, were set to 0.75 and 5 respec-
tively; this means that a potential rule was only
retained if at least 75% of the samples to which it
would have applied were actually modified in the
sense of the gold standard and not in some other
way and that the learning process was terminated
when no more rule could be found that applied to
at least 5 samples in the first training data subset.
With these training parameters, 3,319 obligatory
rules were learned by ?-TBL.
Once the obligatory rules had been learned on
the first training data subset, they were applied to
the second training data subset. Then, optional
rules were learned on this second training data
subset. The rule templates used for optional rules
are very similar to the ones used for obligatory
rules; a few templates of optional rules are given in
Figure 2. The difference between obligatory rules
and optional rules is that the former replace one
character tag by another, whereas the latter add
character tags. They hence introduce ambiguity,
which is why we call them optional rules. Like in
the learning of the obligatory rules, the accuracy
threshold used was 0.75; the score theshold was
set to 7 because the training software seemed to
hit a bug below that threshold. 753 optional rules
were learned. We did not experiment with the ad-
justment of the training parameters on a separate
held-out set.
Finally, the rule sets learned were converted into
the fst (Beesley and Karttunen, 2003) notation for
transformational rules, so that they could be tested
and used in the FST cascade used for preprocess-
ing the input of the Chinese LFG. For evaluation,
the converted rules were applied to our test data set
of 5,054 sentences. A few example rules learned
by ?-TBL with the set-up described above are
given in Figure 3; we show them both in ?-TBL
notation and in fst notation.
3.2.3 Results
The results achieved by PKU?s tokenizer-tagger
on its own and in combination with the trans-
formational rules learned in our experiments are
given in Table 1. We compare the output of PKU?s
268
tag:m> - <- wd:???@[0] & wd:???@[1] & "/" m WS @-> 0 || ? _ ? [ ( TAG )
tag:q@[1,2,3,4] & {\+q=(-)}. CHAR ]?{0,3} "/" q WS
tag:r>n <- wd:???@[-1] & wd:???@[0]. "/" r WS @-> "/" n TB || ? ( TAG ) ? _
tag:add nr <- tag:(-)@[0] & wd:???@[1]. [..] (@->) "/" n r TB || CHAR _ ?
... ...
Figure 3: Sample rules learned in our experiments in ?-TBL notation on the left and in fst notation on
the right8
tag:A>B <- ch:C@[0].
tag:A>B <- ch:C@[1].
tag:A>B <- ch:C@[-1] & ch:D@[0].
tag:A>B <- ch:C@[0] & ch:D@[1].
tag:A>B <- ch:C@[1] & ch:D@[2].
tag:A>B <- ch:C@[-2] & ch:D@[-1] &
ch:E@[0].
tag:A>B <- ch:C@[-1] & ch:D@[0] &
ch:E@[1].
tag:A>B <- ch:C@[0] & ch:D@[1] & ch:E@[2].
tag:A>B <- ch:C@[1] & ch:D@[2] & ch:E@[3].
tag:A>B <- tag:C@[-1].
tag:A>B <- tag:C@[1].
tag:A>B <- tag:C@[1] & tag:D@[2].
tag:A>B <- tag:C@[-2] & tag:D@[-1].
tag:A>B <- tag:C@[-1] & tag:D@[1].
tag:A>B <- tag:C@[1] & tag:D@[2].
tag:A>B <- tag:C@[1] & tag:D@[2] &
tag:E@[3].
tag:A>B <- tag:C@[-1] & ch:W@[0].
tag:A>B <- tag:C@[1] & ch:W@[0].
tag:A>B <- tag:C@[1] & tag:D@[2] &
ch:W@[0].
tag:A>B <- tag:C@[-2] & tag:D@[-1] &
ch:W@[0].
tag:A>B <- tag:C@[-1] & tag:D@[1] &
ch:W@[0].
tag:A>B <- tag:C@[1] & tag:D@[2] &
ch:W@[0].
tag:A>B <- tag:C@[1] & tag:D@[2] &
tag:E@[3] & ch:W@[0].
tag:A>B <- tag:C@[-1] & ch:W@[1].
tag:A>B <- tag:C@[1] & ch:W@[1].
tag:A>B <- tag:C@[1] & tag:D@[2] &
ch:W@[1].
tag:A>B <- tag:C@[-2] & tag:D@[-1] &
ch:W@[1].
tag:A>B <- tag:C@[-1] & ch:D@[0] &
ch:E@[1].
tag:A>B <- tag:C@[-1] & tag:D@[1] &
ch:W@[1].
tag:A>B <- tag:C@[1] & tag:D@[2] &
ch:W@[1].
tag:A>B <- tag:C@[1] & tag:D@[2] &
tag:E@[3] & ch:W@[1].
tag:A>B <- tag:C@[1,2,3,4] & {\+C=?-?}.
tag:A>B <- ch:C@[0] & tag:D@[1,2,3,4] &
{\+D=?-?}.
tag:A>B <- tag:C@[-1] & ch:D@[0] &
tag:E@[1,2,3,4] & {\+E=?-?}.
tag:A>B <- ch:C@[0] & ch:D@[1] &
tag:E@[1,2,3,4] & {\+E=?-?}.
Figure 1: Templates of obligatory rules used in our
experiments
tag:add B <- tag:A@[0] & ch:C@[0].
tag:add B <- tag:A@[0] & ch:C@[1].
tag:add B <- tag:A@[0] & ch:C@[-1] &
ch:D@[0].
...
Figure 2: Sample templates of optional rules used
in our experiments
tokenizer-tagger run in the mode where it returns
only the most probable tag for each word (PKU
one tag), of PKU?s tokenizer-tagger run in the
mode where it returns all possible tags for a given
word (PKU all tags), of PKU?s tokenizer-tagger
in one-tag mode augmented with the obligatory
transformational rules learned on the first part of
our training data (PKU one tag + deterministic rule
set), and of PKU?s tokenizer-tagger augmented
with both the obligatory and optional rules learned
on the first and second parts of our training data re-
spectively (PKU one tag + non-deterministic rule
set). We give results in terms of character tag ac-
curacy and ambiguity according to our character
tagging scheme. Then we provide evaluation fig-
ures for the word level. Finally, we give results re-
ferring to the sentence level in order to make clear
how serious a problem Chinese segmentation and
POS tagging still are for parsers, which obviously
operate at the sentence level.
These results show that simply switching from
the one-tag mode of PKU?s tokenizer-tagger to its
all-tags mode is not a solution. First of all, since
the tokenizer-tagger always produces only one
segmentation regardless of the mode it is used in,
segmentation accuracy would stay completely un-
affected by this change, which is particularly seri-
ous because there is no way for the grammar to re-
cover from segmentation errors and the tokenizer-
tagger produces an entirely correct segmentation
only for 47.15% of the sentences. Second, the
improved tagging accuracy would come at a very
heavy price in terms of ambiguity; the median
number of combined segmentation and POS tag-
ging analyses per sentence would be 1,440.
269
In contrast, machine-learned transformation
rules are an effective means to improve the out-
put of PKU?s tokenizer-tagger. Applying only
the obligatory rules that were learned already im-
proves segmented sentence accuracy from 47.15%
to 63.14% and tagged sentence accuracy from
14.07% to 27.21%, and this at no cost in terms
of ambiguity. Adding the optional rules that were
learned and hence making the rule set used for
post-processing the output of PKU?s tokenizer-
tagger non-deterministic makes it possible to im-
prove segmented sentence accuracy and tagged
sentence accuracy further to 65.06% and 31.47%
respectively, i.e. tagged sentence accuracy is more
than doubled with respect to the baseline. While
this last improvement does come at a price in
terms of ambiguity, the ambiguity resulting from
the application of the non-deterministic rule set is
very low in comparison to the ambiguity of the
output of PKU?s tokenizer-tagger in all-tags mode;
the median number of analyses per sentences only
increases to 2. Finally, it should be noted that
the transformational rules provide entirely correct
segmentation and POS tagging analyses not only
for more sentences, but also for longer sentences.
They increase the average length of a correctly
segmented sentence from 18.22 words to 21.94
words and the average length of a correctly seg-
mented and POS-tagged sentence from 9.58 words
to 16.33 words.
4 Comparison to related work and
Discussion
Comparing our results to other results in the liter-
ature is not an easy task because segmentation and
POS tagging standards vary, and our test data have
not been used for a final evaluation before. Nev-
ertheless, there are of course systems that perform
word segmentation and POS tagging for Chinese
and have been evaluated on data similar to our test
data.
Published results also vary as to the evalua-
tion measures used, in particular when it comes
to combined word segmentation and POS tag-
ging. For word segmentation considered sepa-
rately, the consensus is to use the (segmentation)
F-score (SF). The quality of systems that perform
both segmentation and POS tagging is often ex-
pressed in terms of (character) tag accuracy (TA),
but this obviously depends on the character tag-
ging scheme adopted. An alternative measure is
POS tagging F-score (TF), which is the geomet-
ric mean of precision and recall of correctly seg-
mented and POS-tagged words. Evaluation mea-
sures for the sentence level have not been given in
any publication that we are aware of, probably be-
cause segmenters and POS taggers are rarely con-
sidered as pre-processing modules for parsers, but
also because the figures for measures like sentence
accuracy are strikingly low.
For systems that perform only word segmenta-
tion, we find the following results in the literature:
(Gao et al, 2004), who use TBL to adapt a ?gen-
eral purpose? segmenter to varying standards, re-
port an SF of 95.5% on PKU data and an SF of
90.4% on CTB data. (Tseng et al, 2005) achieve
an SF of 95.0%, 95.3% and 86.3% on PKU data
from the Sighan Bakeoff 2005, PKU data from
the Sighan Bakeoff 2003 and CTB data from the
Sighan Bakeoff 2003 respectively. Finally, (Zhang
et al, 2006) report an SF of 94.8% on PKU data.
For systems that perform both word segmenta-
tion and POS tagging, the following results were
published: Florian and Ngai (2001) report an SF
of 93.55% and a TA of 88.86% on CTB data.
Ng and Low (2004) report an SF of 95.2% and
a TA of 91.9% on CTB data. Finally, Zhang and
Clark (2008) achieve an SF of 95.90% and a TF
of 91.34% by 10-fold cross validation using CTB
data.
Last but not least, there are parsers that oper-
ate on characters rather than words and who per-
form segmentation and POS tagging as part of the
parsing process. Among these, we would like to
mention Luo (2003), who reports an SF 96.0%
on Chinese Treebank (CTB) data, and (Fung et
al., 2004), who achieve ?a word segmentation pre-
cision/recall performance of 93/94%?. Both the
SF and the TF results achieved by our ?PKU one
tag + non-deterministic rule set? setup, whose out-
put is slightly ambiguous, compare favorably with
all the results mentioned, and even the results
achieved by our ?PKU one tag + deterministic rule
set? setup are competitive.
5 Conclusions and Future Work
The idea of carrying some ambiguity from one
processing step into the next in order not to prune
good solutions is not new. E.g., Prins and van No-
ord (2003) use a probabilistic part-of-speech tag-
ger that keeps multiple tags in certain cases for
a hand-crafted HPSG-inspired parser for Dutch,
270
PKU PKU PKU one tag + PKU one tag +
one tag all tags det. rule set non-det. rule set
Character tag accuracy (in %) 89.98 92.79 94.69 95.27
Avg. number of tags per char. 1.00 1.39 1.00 1.03
Avg. number of words per sent. 26.26 26.26 25.77 25.75
Segmented word precision (in %) 93.00 93.00 96.18 96.46
Segmented word recall (in %) 95.39 95.39 96.84 97.02
Segmented word F-score (in %) 94.18 94.18 96.51 96.74
Tagged word precision (in %) 83.57 87.87 91.27 92.17
Tagged word recall (in %) 85.72 90.23 91.89 92.71
Tagged word F-score (in %) 84.63 89.03 91.58 92.44
Segmented sentence accuracy (in %) 47.15 47.15 63.14 65.06
Avg. nmb. of words per correctly segm. sent. 18.22 18.22 21.69 21.94
Tagged sentence accuracy (in %) 14.07 21.09 27.21 31.47
Avg. number of analyses per sent. 1.00 4.61e18 1.00 12.84
Median nmb. of analyses per sent. 1 1,440 1 2
Avg. nmb. of words per corr. tagged sent. 9.58 13.20 15.11 16.33
Table 1: Evaluation figures achieved by four different systems on the 5,054 sentences of our test set
and Curran et al (2006) show the benefits of us-
ing a multi-tagger rather than a single-tagger for
an induced CCG for English. However, to our
knowledge, this idea has not made its way into
the field of Chinese parsing so far. Chinese pars-
ing systems either pass on a single segmentation
and POS tagging analysis to the parser proper or
they are character-based, i.e. segmentation and
tagging are part of the parsing process. Although
several treebank-induced character-based parsers
for Chinese have achieved promising results, this
approach is impractical in the development of a
hand-crafted deep grammar like the Chinese LFG.
We therefore believe that the development of a
?multi-tokenizer-tagger? is the way to go for this
sort of system (and all systems that can handle a
certain amount of ambiguity that may or may not
be resolved at later processing stages). Our results
show that we have made an important first step in
this direction.
As to future work, we hope to resolve the prob-
lem of not having a gold standard that is seg-
mented and tagged exactly according to the guide-
lines established by the Chinese LFG developer
by semi-automatically applying the hand-crafted
transformational rules that were developed to the
PKU gold standard. We will then induce obliga-
tory and optional FST rules from this ?grammar-
compliant? gold standard and hope that these will
be able to replace the hand-crafted transformation
rules currently used in the grammar. Finally, we
plan to carry out more training runs; in particu-
lar, we intend to experiment with lower accuracy
(and score) thresholds for optional rules. The idea
is to find the optimal balance between ambigu-
ity, which can probably be higher than with our
current set of induced rules without affecting ef-
ficiency too adversely, and accuracy, which still
needs further improvement, as can easily be seen
from the sentence accuracy figures.
References
Kenneth R. Beesley and Lauri Karttunen. 2003. Fi-
nite State Morphology. CSLI Publications, Stan-
ford, CA.
Eric Brill. 1995. Transformation-based error-driven
learning and natural language processing: a case
study in part-of-speech tagging. Computational Lin-
guistics, 21(4):543?565.
J.M Chang, D.L. Hung, and O.J.L. Tzeng. 1992. Mis-
cue analysis of chinese children?s reading behavior
at the entry level. Journal of Chinese Linguistics,
20(1).
Dick Crouch, Mary Dalrymple, Ron Kaplan,
Tracy Holloway King, John Maxwell, and
Paula Newman. 2006. XLE documentation.
http://www2.parc.com/isl/groups/nltt/xle/doc/.
James R. Curran, Stephen Clark, and David Vadas.
2006. Multi-Tagging for Lexicalized-Grammar
Parsing. In In Proceedings of COLING/ACL-06,
pages 697?704, Sydney, Australia.
Ji Fang and Tracy Holloway King. 2007. An lfg chi-
nese grammar for machine use. In Tracy Holloway
271
King and Emily M. Bender, editors, Proceedings of
the GEAF 2007 Workshop. CSLI Studies in Compu-
tational Linguistics ONLINE.
Radu Florian and Grace Ngai. 2001. Multidimen-
sional transformation-based learning. In CoNLL
?01: Proceedings of the 2001 workshop on Com-
putational Natural Language Learning, pages 1?8,
Morristown, NJ, USA. Association for Computa-
tional Linguistics.
Pascale Fung, Grace Ngai, Yongsheng Yang, and Ben-
feng Chen. 2004. A maximum-entropy Chinese
parser augmented by transformation-based learning.
ACM Transactions on Asian Language Information
Processing (TALIP), 3(2):159?168.
Jianfeng Gao, Andi Wu, Mu Li, Chang-Ning Huang,
Hongqiao Li, Xinsong Xia, and Haowei Qin. 2004.
Adaptive Chinese word segmentation. In ACL ?04:
Proceedings of the 42nd Annual Meeting on Associ-
ation for Computational Linguistics, page 462, Mor-
ristown, NJ, USA. Association for Computational
Linguistics.
Julia Hockenmaier and Chris Brew. 1998. Error-
Driven Segmentation of Chinese. International
Journal of the Chinese and Oriental Languages In-
formation Processing Society, 8(1):69??84.
R. Hoosain. 1992. Psychological reality of the
word in chinese. In H.-C. Chen and O.J.L. Tzeng,
editors, Language Processing in Chinese. North-
Holland and Elsevier, Amsterdam.
Kylie Hsu. 2002. Selected Issues in Mandarin Chinese
Word Structure Analysis. The Edwin Mellen Press,
Lewiston, New York, USA.
Torbjo?rn Lager. 1999. The ?-TBL System: Logic Pro-
gramming Tools for Transformation-Based Learn-
ing. In Proceedings of the Third International Work-
shop on Computational Natural Language Learning
(CoNLL?99), Bergen.
Xiaoqiang Luo. 2003. A Maximum Entropy Chinese
Character-Based Parser. In Michael Collins and
Mark Steedman, editors, Proceedings of the 2003
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 192?199.
John Maxwell and Ron Kaplan. 1996. An efficient
parser for LFG. In Proceedings of the First LFG
Conference. CSLI Publications.
Hwee Tou Ng and Jin Kiat Low. 2004. Chinese Part-
of-Speech Tagging: One-at-a-Time or All-at-Once?
Word-Based or Character-Based? . In Dekang
Lin and Dekai Wu, editors, Proceedings of EMNLP
2004, pages 277?284, Barcelona, Spain, July. Asso-
ciation for Computational Linguistics.
Jerome L. Packard. 2000. The Morphology of Chinese.
Cambridge University Press, Cambridge, UK.
David D. Palmer. 1997. A trainable rule-based algo-
rithm for word segmentation. In Proceedings of the
35th annual meeting on Association for Computa-
tional Linguistics, pages 321?328, Morristown, NJ,
USA. Association for Computational Linguistics.
Robbert Prins and Gertjan van Noord. 2003. Reinforc-
ing parser preferences through tagging. Traitement
Automatique des Langues, 44(3):121?139.
Richard Sproat and Thomas Emerson. 2003. The first
international chinese word segmentation bakeoff. In
Proceedings of the Second SIGHAN Workshop on
Chinese Language Processing, pages 133?143.
Huihsin Tseng, Pichuan Chang, Galen Andrew, Daniel
Jurafsky, and Christopher Manning. 2005. A
Conditional Random Field Word Segmenter for
SIGHAN Bakeoff 2005. In Proceedings of Fourth
SIGHAN Workshop on Chinese Language Process-
ing.
A.D. Wu. 2003. Customizable segmentation of mor-
phologically derived words in chinese. Interna-
tional Journal of Computational Linguistics and
Chinese Language Processing, 8(1):1?28.
Fei Xia. 2000. The segmentation guidelines for the
penn chinese treebank (3.0). Technical report, Uni-
versity of Pennsylvania.
Nianwen Xue, Fu-Dong Chiou, and Martha Palmer.
2002. Building a large-scale annotated Chinese cor-
pus. In Proceedings of the 19th. International Con-
ference on Computational Linguistics.
Nianwen Xue, Fei Xia, Fu-Dong Chiou, and Martha
Palmer. 2005. The Penn Chinese treebank: Phrase
structure annotation of a large corpus. Natural Lan-
guage Engineering, pages 207?238.
Tongqiang Xu?????. 1997. On Language??
???. Dongbei Normal University Publishing,
Changchun, China.
Shiwen Yu?????, Baobao Chang ?????,
and Weidong Zhan ?????. 2004. An Intro-
duction of Computational Linguistics ?????
????. Shangwu Yinshuguan Press, Beijing,
China.
Yue Zhang and Stephen Clark. 2008. Joint Word Seg-
mentation and POS Tagging Using a Single Percep-
tron. In Proceedings of ACL-08, Columbus, OH.
Ruiqiang Zhang, Genichiro Kikui, and Eiichiro
Sumita. 2006. Subword-based tagging for
confidence-dependent Chinese word segmentation.
In Proceedings of the COLING/ACL on Main con-
ference poster sessions, pages 961?968, Morris-
town, NJ, USA. Association for Computational Lin-
guistics.
272
Proceedings of the 2nd Workshop on ?Collaboratively Constructed Semantic Resources?, Coling 2010, pages 37?45,
Beijing, August 2010
Pruning Non-Informative Text Through Non-Expert Annotations to
Improve Aspect-Level Sentiment Classification
Ji Fang
Palo Alto Research Center
Ji.Fang@parc.com
Bob Price
Palo Alto Research Center
Bob.Price@parc.com
Lotti Price
Palo Alto Research Center
Lotti.Price@parc.com
Abstract
Sentiment analysis attempts to extract the
author?s sentiments or opinions from un-
structured text. Unlike approaches based
on rules, a machine learning approach
holds the promise of learning robust, high-
coverage sentiment classifiers from la-
beled examples. However, people tend
to use different ways to express the same
sentiment due to the richness of natural
language. Therefore, each sentiment ex-
pression normally does not have many ex-
amples in the training corpus. Further-
more, sentences extracted from unstruc-
tured text (e.g., I filmed my daughter?s
ballet recital and could not believe how
the auto focus kept blurring then focus-
ing) often contain both informative (e.g.,
the auto focus kept blurring then focus-
ing) and extraneous non-informative text
regarding the author?s sentiment towards a
certain topic. When there are few exam-
ples of any given sentiment expression, ex-
traneous non-sentiment information can-
not be identified as noise by the learn-
ing algorithm and can easily become cor-
related with the sentiment label, thereby
confusing sentiment classifiers. In this pa-
per, we present a highly effective proce-
dure for using crowd-sourcing techniques
to label informative and non-informative
information regarding the sentiment ex-
pressed in a sentence. We also show
that pruning non-informative information
using non-expert annotations during the
training phase can result in classifiers with
better performance even when the test data
includes non-informative information.
1 Introduction
Noise in training data can be derived either from
noisy labeling or from noisy features. It has been
shown that labeling quality is one of the important
factors that impacts the performance of a learned
model, and that this quality can be improved by
approaches such as using multiple labelers (Sheng
et al, 2008). However, noisy features can be an
inherent characteristic for some text mining tasks,
and it is unclear how they should be handled.
For example, sentiment analysis/opinion min-
ing from unstructured user generated content such
as online reviews and blogs often relies on learn-
ing sentiments from word-based features extracted
from the training sentences and documents (Pang
et al, 2002; Dave et al, 2003; Kim and Hovy,
2005). However, not all words in the training data
carry information about sentiment. For example,
in sentence (1),
(1)I filmed my daughter?s ballet recital and
could not believe how the auto focus kept blurring
then focusing.
although words such as auto focus, blurring and
focusing are informative for learning sentiment re-
garding the auto focus capability of the camera,
words such as film, daughter and ballet recital are
not informative for that type of sentiment, and they
form noise if included as training data.
If the training data contain a lot of examples
such as (2) in which words such as film, daughter
and ballet recital also appear, but the sentence is
not labelled as invoking sentiment regarding auto
focus, a machine learning algorithm might learn
37
that such words are not informative for sentiment
classification.
(2)I filmed my daughter?s ballet recital and
could not believe how good the picture quality
was.
However, due to the richness of natural lan-
guage, people tend to use different ways to de-
scribe a similar event or to express a similar opin-
ion. Consequently, repeated use of the same ex-
pression is not common in the training data for
sentiment classification. Note that this difficulty
cannot be simply overcome by increasing the size
of the training data. For example, a search on
the completely natural phrase ?I filmed my daugh-
ter?s ballet recital? in Google and Bing returns the
same exact sentence as shown in (1). In other
words, there appears to be only one sentence con-
taining that exact phrase, which implies that even
if we use the entire web as our training data set
we would not find an example such as (2) to help
the learning algorithm to determine which feature
words in (1) are informative and which are not.
Therefore, data sparsity is an inherent problem for
a task such as sentiment analysis, and if we adopt
the bag-of-words approach for sentiment classifi-
cation (Pang et al, 2002), which uses the words
that appear in sentences as training features, our
training data will unavoidably include many noisy
non-informative features.
This paper presents a crowd-sourcing technique
to identify and prune the non-informative features.
We explore the effect of using non-expert annota-
tions to gain low-noise training data for sentiment
classification. We show that the cleaner training
data obtained from non-expert annotations signif-
icantly improve the performance of the sentiment
classifier. We also present evidence that this im-
provement is due to reduction in confusion be-
tween classes due to noise words.
The remainder of this paper is organized as fol-
lows. Section 2 discusses the related work. Sec-
tion 3 describes our approach for pruning non-
informative features. Section 4 presents an empir-
ical study on the effect of training on informative
features in the domain of sentiment analysis. Con-
clusions are summarized in Section 5.
2 Related Work
Feature selection in the domain of sentiment anal-
ysis has focused on the following issues.
a) Should word-based features be selected
based on frequency or presence?
It has been shown that compared to word fre-
quency, word presence is a better sentiment indi-
cator (Pang et al, 2002; Wiebe et al, 2004; Yang
et al, 2006). In other words, unlike in other do-
mains such as topic classification where the fre-
quency of words provides useful information re-
garding the topic class, sentiment information is
not normally indicated by the frequency of certain
words, because people are unlikely to repeatedly
use the same word or phrase to express an opin-
ion in one document. Instead, Researchers (Pang
et al, 2002) found that selecting features based on
word presence rather than word frequency leads
to better performance in the domain of sentiment
analysis.
b) Which are more useful features: uni-
grams, higher-order n-grams or syntactically re-
lated terms?
This issue seems to be debatable. While some
researchers (Pang et al, 2002) reported that un-
igrams outperform both bigrams as well as the
combination of unigrams and bigrams in classi-
fying movie reviews based on sentiment polarity,
some others (Dave et al, 2003) reported the oppo-
site in some settings.
Similarly, some (Dave et al, 2003) found syn-
tactically related terms are not helpful for senti-
ment classification, whereas others (Gamon, 2004;
Matsumoto et al, 2005; Ng et al, 2006) found the
opposite to be true.
c) In terms of part-of-speech, which types of
words are more useful features?
Adjectives and adverbs are commonly used as
features for sentiment learning (Mullen and Col-
lier, 2004; Turney, 2002; Whitelaw et al, 2005).
However, more recent studies show that all con-
tent words including nouns, verbs, adjectives and
adverbs are useful features for sentiment analysis
(Dillard, 2007).
Regardless of which types of features are
used, these traditional approaches are still in-
herently noisy in the sense that non-informative
38
words/features within each sentence are included
as described in Section 1. As far as we are aware,
this is an issue that has not been addressed.
The closest works are Riloff et al (Riloff and
Wiebe, 2003) and Pang et al (Pang et al, 2002)?s
work. Riloff et al explored removing the features
that are subsumed in other features when a com-
bination of different types of features such as un-
igrams, bigrams and syntactically related terms is
used. Pang et al speculated that words that appear
at certain positions in a movie review are more in-
formative for the overall opinion reflected in that
review. However, according to Pang et al, for the
task of predicting the overall polarity of a movie
review, training on word features assumed to be
more informative resulted in worse performance
than training on all word features appearing in the
reviews.
Our approach is different in that we try to iden-
tify and prune non-informative word features at
the sentence level. We focus on identifying which
portion of the sentence is informative for senti-
ment classification. We then completely remove
the non-informative portion of the sentence and
prevent any terms occurring in that portion from
being selected as feature vectors representing that
sentence. Note that the classification of words as
non-informative is not related to their positions in
a sentence nor to their frequency count in the train-
ing corpus. Instead, whether a word is informative
depends purely on the semantics and the context
of the sentence. For example, the word big would
be non-informative in (3), but informative in (4).
(3)That was a big trip, and I took a lot of pic-
tures using this camera.
(4)This camera has a big LCD screen.
Unlike the traditional approach of using ex-
pert annotation to identify the non-informative text
in a sentence, we instead use non-expert annota-
tions without external gold standard comparisons.
There have been an increasing number of exper-
iments using non-expert annotations for various
Natural Language Processing (NLP) tasks. For ex-
ample, Su et al (Su et al, 2007) use non-expert
annotations for hotel name entity resolution. In
(Nakov, 2008), non-expert annotators generated
paraphrases for 250 noun-noun compounds, which
were then used as the gold standard data for eval-
uating an automatic paraphrasing system. Kaisser
and Lowe (Kaisser and Lowe, 2008) also use non-
experts to annotate answers contained in sentences
and use the annotation results to help build a ques-
tion answering corpus. Snow et al (Snow et
al., 2008) reported experiments using non-expert
annotation for the following five NLP tasks: af-
fect recognition, word similarity, recognizing tex-
tual entailment, event temporal ordering, and word
sense disambiguation.
This paper presents a study of using non-expert
annotations to prune non-informative word fea-
tures and training a sentiment classifier based on
such non-expert annotations. The following sec-
tion describes our approach in detail.
3 Non-Informative Feature Pruning
Through Non-Expert Annotations
To prune the non-informative features, a tradi-
tional approach would be to hire and train anno-
tators to label which portion of each training sen-
tence is informative or non-informative. However,
this approach is both expensive and time consum-
ing. We overcome these issues by using crowd-
sourcing techniques to obtain annotations from
untrained non-expert workers such as the ones on
the Amazon Mechanical Turk (AMT) platform1.
To illustrate our approach, we use an example for
sentiment analysis below.
The key to our approach relies on careful de-
sign of simple tasks or HITs that can elicit the
necessary information for both labeling the senti-
ment information and pruning the non-informative
text of a sentence. These tasks can be performed
quickly and inexpensively by untrained non-expert
workers on the AMT platform. We achieved this
goal by designing the following two experiments.
Experiment 1 asks the workers to judge whether
a sentence indicates an opinion towards a certain
aspect of the camera, and if so, whether the opin-
ion is positive, negative or neutral. For example,
the proper annotations for sentence (5) would be
as shown in Figure 1.
1This is an online market place that offers a small amount
of money to people who perform some ?Human Intelligence
Tasks? (HITs). https://www.mturk.com/mturk/
welcome
39
(5) On my trip to California, the camera fell and
broke into two pieces.
Figure 1: Experiment 1
We randomly selected 6100 sentences in total
for this experiment from the Multi-Domain Senti-
ment Dataset created by Blitzer et al (Blitzer et
al., 2007). Each sentence was independently an-
notated by two AMT workers. Each annotation
consisted of a sentence labeled with a camera as-
pect and a sentiment toward that aspect.
One unique characteristic of Experiment1 is
that it makes the detection of unreliable responses
very easy. Because one sentence is unlikely to in-
voke many different aspects of cameras, an anno-
tation is thus suspicious if many aspects of cam-
era are annotated as being invoked. Figure 2 and
Figure 3 illustrate the contrast between a normal
reliable response and a suspicious unreliable re-
sponse.
Due to this favorable characteristic of Experi-
ment 1, we did not have to design a qualification
test. We approved all of the assignments; how-
ever we later filtered out the detected suspicious
responses, which accounted for 8% of the work.
Even though we restricted our AMT workers to
those who have an approval rate of 95% or above,
we still found 20% of them unreliable in the sense
that they provided suspicious responses.
Given our ability to detecting suspicious re-
sponses, we believe it is very unlikely for two reli-
able AMT workers to annotate any given sentence
exactly the same way merely by chance. There-
fore, we consider an annotation to be gold when
both annotators marked the same sentiment toward
the same aspect. We obtained 2718 gold-standard
annotations from the reliable responses. We define
the agreement rate of annotations as follows.
AgreementRate = NumberofGoldAnnotations?2TotalNumberofAnnotations .(1)
Based on this measure, the agreement rate of the
AMT workers in this study is 48.4%.
We held randomly selected 587 gold annotated
sentences as our test set, and used the remain-
ing 2131 sentences as our training sentences. To
prune the non-informative text from the training
sentences, we put the 2131 sentences through Ex-
periment 2 as described below.
Experiment 2 asks the workers to point out
the exact portion of the sentence that indicates
an opinion. The opinion and its associated fea-
ture name are displayed along with the sentence in
which they appear. Such information is automati-
cally generated from the results derived from Ex-
periment 1. An example of Experiment 2 is given
in Figure 4.
Figure 4: Experiment 2
The expected answer for this example is the bat-
tery door keeps falling off.
Using this method, we can remove the non-
informative part of the sentences: One thing I have
to mention is that and prevent any of the words in
that part from being selected as our training fea-
tures.
Experiment 2 requires the workers to enter or
copy and paste text in the box, and 100% of the
workers did it. In our sentiment classification ex-
periment described below, we used all of the re-
sults without further filtering.
We paid $0.01 for each assignment in both ex-
periments, and we acquired all of the annotations
in one week?s time with a total cost of $215, in-
cluding fees paid to Amazon. Our pay rate is about
$0.36/hour. For Experiment 1 alone, if we adopted
a traditional approach and hired two annotators,
they could likely complete the annotations in five
8-hour days. Using this approach, the cost for Ex-
periment 1 alone would be $1200, with a rate of
$15/hour. Therefore, our approach is both cheaper
and faster than the traditional approach.
40
Figure 2: Reliable Response
Figure 3: Unreliable Response
Having described our crowd-souring based ap-
proach for pruning the non-informative features,
we next present an empirical study on the effect of
training on informative features.
4 Pruning Non-Informative Features for
Sentiment Classification
We conducted an experiment on sentiment classifi-
cation in the domain of camera reviews to test the
effect of pruning non-informative features based
on AMT workers? annotations.
In our experiment, we select the Nouns, Verbs,
Adjectives and Adverbs as our unigram features
for training. We define non-informative fea-
tures as the four types of words occurring in the
non-informative portion of the training sentence;
namely, the portion that does not mention any as-
pect of the camera or associated sentiment. For
example, for a training sentence such as (1) (re-
peated below as (6)), training on all features would
select the following words: [film, daughter, ballet,
recital, not-believe2, auto, focus, kept, blurring,
focusing].
(6) I filmed my daughter?s ballet recital and
could not believe how the auto focus kept blurring
then focusing.
By contrast, pruning non-informative features
would yield a shorter list of selected words: [auto,
focus, kept, blurring, focusing].
In our experiment, we compare the performance
2See below for the description regarding how we handle
negation.
of the classifier learned from all of the Nouns,
Verbs, Adjectives and Adverbs in the sentences
with the one learned from these word types oc-
curring only in the informative part of the sen-
tence. When the training set contains all of the fea-
ture words, we refer to it as the All-Features-Set.
When the non-informative features are pruned,
the training set contains only the informative fea-
ture words, which we refer to as the Informative-
Features-Set.
All of the feature words are stemmed using the
Porter Stemmer (Porter, 1980). Negators are at-
tached to the next selected feature word. We also
use a small set of stop words3 to exclude copulas
and words such as take. The reason that we choose
these words as stop words is because they are both
frequent and ambiguous and thus tend to have a
negative impact on the classifier.
All of our training and test sentences are an-
notated through crowd-sourcing techniques as de-
scribed in the last section. In our experiment
we use 2131 sentences in total for training and
587 sentences for hold-out testing. The non-
informative part of the test sentences are not re-
moved. The experiment results and implications
are discussed in detail in the following subsec-
tions.
3The stop words we use include copulas and the following
words: take, takes, make, makes, just, still, even, too, much,
enough, back, again, far, same
41
4.1 Aspect:Polarity Classification Using SVM
In this experiment, the task is to perform a 45 way
sentiment classification. These 45 classes are de-
rived from 22 aspects related to camera purchases
such as picture quality, LCD screen, battery life
and customer support and their associated polar-
ity values positive and negative, as well as a class
of no opinion about any of the 22 aspects. An ex-
ample of such a class is picture quality: positive.
The classifier maps each input sentence into one
of the 45 classes.
One of the approaches we tested is to train the
classifier based on the All-Features-Set derived
from the original raw sentences. We refer to this as
?All Features?. The other approach is to learn from
the Informative-Features-Set derived from the sen-
tences with the non-informative portion removed
by the AMT workers. We refer to this as ?Informa-
tive Features?. The experiment is conducted us-
ing SVM algorithm implemented by Chang et al
(Chang and Lin, 2001). We use linear kernel type
and use the default setting for all other parameters.
The classification accuracy is defined as fol-
lows.
Accuracy = NumberofSentencesCorrectlyClassifiedTotalNumberofSentences .(2)
The experiment results in terms of classification
accuracy are shown in Table 1.
Table 1: Classification Accuracy
All Features Informative Features
41.7% 45.8%
In this experiment, pruning the non-informative
features improves the accuracy by more than 4%.
This improvement is statistically significant by a
one-tailed sign test at p = 0.15. Training on the in-
formative features also consistently improves the
classification accuracy when we vary the size of
the training data as illustrated by the Figure 54.
4To demonstrate the learning curve, we experimented
with the use of different percentages of the training sen-
tences while always testing on the same 587 test sentences.
When the percentage of the training sentences used is less
than 100%, we randomly pick that percentage of training sen-
tences until the test accuracy converges.
Figure 5: Learning Curve
A salient characteristic of this experiment is that
the training data tend to be very sparse for two rea-
sons. First, the number of classes is large, which
means that the number of training examples for
each class will be fewer. As shown in Table 2,
24 out of the 45 classes have fewer than 30 train-
ing examples, which is an indication of how sparse
the training data is. Second, as shown in Section
1, people tend to use different ways to express the
type of sentiments that we aim to learn in this ex-
periment. Therefore, it is difficult to collect re-
peated training examples and this difficulty cannot
be simply overcome by increasing the size of the
training data. This data sparsity means that it is
difficult for the SVM to learn which feature words
are non-informative noise.
Table 2: Class Distribution in Experiment 1
Number of Classes Number of Training Sentences
6 fewer than 10
14 fewer than 20
24 fewer than 30
33 fewer than 50
41 fewer than 100
4 more than 100
4.2 Automatic Feature Selection vs. Pruning
by AMT Workers
As shown in the previous subsection, pruning non-
informative word features using non-expert anno-
tations can significantly improve the performance
of the sentiment classifier. Can we achieve the
same improvement by using automatic feature se-
lection algorithms?
We tried three widely used feature se-
lection techniques LR(Likelihood Ratio),
WLLR(Weighted Log-Likelihood Ratio) (Nigam
et al, 2000; Ng et al, 2006) and MI(Mutual
Information) and applied them to the original raw
training data. We found that in general, the fewer
42
the feature words selected by these algorithms,
the worse the classifier performs. The classifier
performed the best when using all of the available
feature words. In other words, automatic feature
selection offered no benefit. Table 3 shows the
results of using these three automatic feature
selection techniques as well as the results of
not performing automatic feature selection. The
threshold for the LR algorithm was set to be 5; the
threshold for the WLLR algorithm was set to be
0.005; and the threshold for the MI algorithm was
set to be 2000 (using the top 2000 ranked features
out of a total of 3279 features).
Table 3: Automatic Feature Selection Results
No Feature Selection LR WLLR MI
41.7% 35.4% 40.2% 41.1%
This result is not surprising given the data spar-
sity issue in our experiment. Traditional feature
selection methods either try to remove correlated
features which can cause havoc for some meth-
ods or to prune out features uncorrelated with la-
bels to make learning more efficient. However, we
have sparse data so correlations calcuated are very
unstable - if a feature appears once with a label
what can we conclude? So the same properties
that cause difficulties for the learner cause prob-
lems for feature selection techniques as well.
To summarize, pruning non-informative word
features using non-expert annotations can signif-
icantly improve the performance of the sentiment
classifier even when the test data still contain non-
informative features. We believe this is because
pruning non-informative feature words based on
human knowledge leads to better training data that
cannot be achieved by using automatic feature se-
lection techniques. The subsection below com-
pares the two sets of training sentences we used
in this experiment: one comprises the original raw
sentences and the other comprises sentences with
the non-informative text removed. We show that
our approach of pruning non-informative text in-
deed leads to a better set of training data.
4.3 Comparison of Training Data Before and
After the Feature Pruning
Our assumption is that training data is better if data
belonging to closer classes are more similar and
data belonging to further classes are more differ-
ent. In our sentiment classification experiment, an
example of two very close classes are battery life:
positive and battery life: negative. An example of
two very different classes are battery life: positive
and auto focus: negative. The more similar the
training data belonging to closer classes and the
more dissimilar the training data belonging to dif-
ferent classes, the more accurate the classifier can
predict the involved camera aspect, which in turn
should lead to improvements on the overall classi-
fication accuracy.
To test whether the pruned text produced bet-
ter training data than the original text, an adjusted
cosine similarity measure was used. Note that
our measurement can only reflect partial effects
of AMT workers? pruning, because our measure
is essentially term frequency based, which can re-
flect similarity in terms of topic (camera aspects
in our case) but not similarity in terms of polarity
(Pang et al, 2002). Nevertheless, this measure-
ment highlights some of the impact resulting from
the pruning.
To compare training data belonging to any two
classes, we produce a tf-idf score for each word
in those two classes and represent each class as a
vector containing the tf-idf score for each word in
that class. Comparing the similarity of two classes
involves calculating the adjusted cosine similarity
in the following formula.
similarity = A?B||A||||B|| . (3)
A and B in the above formula are vectors of tf-
idf scores, whereas in the standard cosine similar-
ity measure A and B would be vectors containing
tf scores. The motivation for using tf-idf scores
instead of the tf scores is to reduce the importance
of highly common words such as the and a in the
comparison. The similarity score produced by this
formula is a number between 0 and 1; 0 being no
overlap and 1 indicating that the classes are iden-
tical. Word stemming was not used in this experi-
ment.
43
We compared similarity changes in two situa-
tions. First, when two classes share the same as-
pect; this involves comparison between 22 class
pairs such as battery life: positive vs. battery life:
negative. Second, when two classes share different
aspects; for example, battery life: positive vs. auto
focus: negative and battery life: positive vs. auto
focus: positive. In this situation, we compared the
similarity changes in 903 class pairs. If pruning
the non-informative text does indeed provide bet-
ter training data, we expect similarity to increase
in the first situation and to decrease in the second
situation after the pruning. This is precisely what
we found; our finding is summarized in Table 4.
Table 4: Average Similarity Changes in the Pruned Training
Data
Same aspect Different aspect
+0.01 -0.02
In conclusion, AMT workers, by highlighting
the most pertinent information for classification
and allowing us to discard the rest, provided more
useful data than the raw text.
5 Conclusions
To summarize, we found that removing the non-
informative text from the training sentences pro-
duces better training data and significantly im-
proves the performance of the sentiment clas-
sifier even when the test data still contain
non-informative feature words. We also show
that annotations for both sentiment classes and
sentiment-informative texts can be acquired effi-
ciently through crowd-sourcing techniques as de-
scribed in this paper.
6 Acknowledgments
We thank Prateek Sarkar, Jessica Staddon and Bi
Chen for insightful discussions and comments.
We thank the anonymous reviewers? helpful sug-
gestions and feedback. We would also like to
thank Jason Kessler for implementing part of the
sentiment analysis algorithm and the Amazon Me-
chanical Turk experiments.
References
Sheng, Victor S., Provost, Foster, and Ipeirotis, Panagi-
otis G.. 2008. Get Another Label? Improving Data
Quality and Data Mining Using Multiple, Noisy La-
belers. KDD 2008 Proceedings 614-622.
Pang, Bo, Lee, Lillian, and Vaithyanathan, Shivakumar.
2002. Thumbs up? Sentiment classification using
machine learning techniques. Proceedings of the
Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP) 79-86.
Dave, Kushal, Lawrence, Steve, and Pennock, David
M.. 2003. Mining the peanut gallery: Opinion ex-
traction and semantic classification of product re-
views. Proceedings of WWW 519-528.
Kim, Soo?Min and Hovy, Eduard. 2005. Identifying
opinion holders for question answering in opinion
texts. Proceedings of the AAAI Workshop on Ques-
tion Answering in Restricted Domains.
Wiebe, Janyce M. , Wilson, Theresa , Bruce, Rebecca
, Bell, Matthew and Martin, Melanie. 2004. Learn-
ing subjective language. Computational Linguistics,
30(3):277-308.
Yang, Kiduk , Yu, Ning , Valerio, Alejandro and Zhang,
Hui. 2006. WIDIT in TREC-2006 Blog track. Pro-
ceedings of TREC.
Gamon, Michael. 2004. Sentiment classification on
customer feedback data: noisy data, large feature
vectors, and the role of linguistic analysis. Proceed-
ings of the International Conference on Computa-
tional Linguistics (COLING).
Matsumoto, Shotaro, Takamura, Hiroya and Okumura,
Manabu. 2005. Sentiment classification using word
sub-sequences and dependency sub-trees. Proceed-
ings of PAKDD05, the 9th Pacific-Asia Conference
on Advances in Knowledge Discovery and Data
Mining.
Ng, Vincent, Dasgupta, Sajib and Arifin, S. M. Niaz.
2006. Examining the role of linguistic knowledge
sources in the automatic identification and classifi-
cation of reviews. Proceedings of the COLING/ACL
Main Conference Poster Sessions 611-618.
Mullen, Tony and Collier, Nigel. 2004. Sentiment
analysis using support vector machines with diverse
in-formation sources. Proceedings of the Confer-
ence on Empirical Methods in Natural Language
Processing (EMNLP) 412-418.
Turney, Peter. 2002. Thumbs up or thumbs down? Se-
mantic orientation applied to unsupervised classifi-
cation of reviews. Proceedings of the Association
for Computational Linguistics (ACL) 417-424.
44
Whitelaw, Casey, Garg, Navendu and Argamon,
Shlomo. 2005. Using appraisal groups for sen-
timent analysis. Proceedings of the ACM SIGIR
Conference on Information and Knowledge Man-
agement (CIKM) 625-631.
Dillard, Logan. 2007. I Can?t Recommend This Paper
Highly Enough: Valence-Shifted Sentences in Senti-
ment Classification. Master Thesis.
Riloff, Ellen and Wiebe, Janyce. 2003. Learning ex-
traction patterns for subjective expressions. Pro-
ceedings of the Conference on Empirical Methods
in Natural Language Processing (EMNLP).
Su, Qi, Pavlov, Dmitry, Chow, Jyh-Herng and Baker,
Wendell C.. 2007. Internet-Scale Collection of
Human- Reviewed Data. Proceedings of WWW-
2007.
Nakov, Preslav. 2008. Paraphrasing Verbs for
Noun Compound Interpretation. Proceedings of the
Workshop on Multiword Expressions, LREC-2008.
Kaisser, Michael and Lowe, John B.. 2008. A
Re-search Collection of QuestionAnswer Sentence
Pairs. Proceedings of LREC-2008.
Snow, Rion, O?Connor, Brendan, Jurafsky, Daniel and
Ng, Andrew Y. 2008. Cheap and Fast - But is
it Good? Evaluating Non-Expert Annotations for
Natural Language Tasks. Proceedings of the Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP).
Blitzer, John, Dredze, Mark, Biographies, Fernando
Pereira., Bollywood, Boom-boxes and Blenders.
2007. Domain Adaptation for Sentiment Classifica-
tion. Proceedings of the Association for Computa-
tional Linguistics (ACL).
Porter, M.F.. 1980. An algorithm for suffix stripping.
Program.
Chang, Chih-Chung and Lin, Chih-Jen. 2001.
LIBSVM: a library for support vector machines.
Software available at http://www.csie.ntu.
edu.tw/?cjlin/libsvm.
Nigam, K., McCallum, A.K., Thrun, S., and Mitchell,
T.. 2000. Text Classification from labeled and unla-
beled documents using em. Machine Learning 39(2-
3) 103-134.
45
