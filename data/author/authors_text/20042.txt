Unsupervised Relation Extraction from Web Documents
Kathrin Eichler, Holmer Hemsen and Gu?nter Neumann
DFKI GmbH, LT-Lab, Stuhlsatzenhausweg 3 (Building D3 2), D-66123 Saarbru?cken
{FirstName.SecondName}@dfki.de
Abstract
The IDEX system is a prototype of an interactive dynamic Information Extraction (IE) system. A user of the system
expresses an information request in the form of a topic description, which is used for an initial search in order to retrieve
a relevant set of documents. On basis of this set of documents, unsupervised relation extraction and clustering is done by
the system. The results of these operations can then be interactively inspected by the user. In this paper we describe the
relation extraction and clustering components of the IDEX system. Preliminary evaluation results of these components are
presented and an overview is given of possible enhancements to improve the relation extraction and clustering components.
1. Introduction
Information extraction (IE) involves the process of au-
tomatically identifying instances of certain relations of
interest, e.g., produce(<company>, <product>, <lo-
cation>), in some document collection and the con-
struction of a database with information about each
individual instance (e.g., the participants of a meet-
ing, the date and time of the meeting). Currently, IE
systems are usually domain-dependent and adapting
the system to a new domain requires a high amount
of manual labour, such as specifying and implement-
ing relation?specific extraction patterns manually (cf.
Fig. 1) or annotating large amounts of training cor-
pora (cf. Fig. 2). These adaptations have to be made
offline, i.e., before the specific IE system is actually
made. Consequently, current IE technology is highly
statical and inflexible with respect to a timely adapta-
tion to new requirements in the form of new topics.
Figure 1: A hand-coded rule?based IE?system (schemat-
ically): A topic expert implements manually task?specific
extraction rules on the basis of her manual analysis of a
representative corpus.
1.1. Our goal
The goal of our IE research is the conception and im-
plementation of core IE technology to produce a new
Figure 2: A data?oriented IE system (schematically): The
task?specific extraction rules are automatically acquired by
means of Machine Learning algorithms, which are using
a sufficiently large enough corpus of topic?relevant docu-
ments. These documents have to be collected and costly
annotated by a topic?expert.
IE system automatically for a given topic. Here, the
pre?knowledge about the information request is given
by a user online to the IE core system (called IDEX)
in the form of a topic description (cf. Fig. 3). This
initial information source is used to retrieve relevant
documents and extract and cluster relations in an un-
supervised way. In this way, IDEX is able to adapt
much better to the dynamic information space, in par-
ticular because no predefined patterns of relevant re-
lations have to be specified, but relevant patterns are
determined online. Our system consists of a front-end,
which provides the user with a GUI for interactively in-
specting information extracted from topic-related web
documents, and a back-end, which contains the rela-
tion extraction and clustering component. In this pa-
per, we describe the back-end component and present
preliminary evaluation results.
1.2. Application potential
However, before doing so we would like to motivate
the application potential and impact of the IDEX ap-
Figure 3: The dynamic IE system IDEX (schematically):
a user of the IDEX IE system expresses her information
request in the form of a topic description which is used for
an initial search in order to retrieve a relevant set of doc-
uments. From this set of documents, the system extracts
and collects (using the IE core components of IDEX) a set
of tables of instances of possibly relevant relations. These
tables are presented to the user (who is assumed to be the
topic?expert), who will analyse the data further for her in-
formation research. The whole IE process is dynamic, since
no offline data is required, and the IE process is interactive,
since the topic expert is able to specify new topic descrip-
tions, which express her new attention triggered by a novel
relationship she was not aware of beforehand.
proach by an example application. Consider, e.g., the
case of the exploration and the exposure of corruptions
or the risk analysis of mega construction projects. Via
the Internet, a large pool of information resources of
such mega construction projects is available. These
information resources are rich in quantity, but also
in quality, e.g., business reports, company profiles,
blogs, reports by tourists, who visited these construc-
tion projects, but also web documents, which only
mention the project name and nothing else. One of
the challenges for the risk analysis of mega construc-
tion projects is the efficient exploration of the possibly
relevant search space. Developing manually an IE sys-
tem is often not possible because of the timely need
of the information, and, more importantly, is proba-
bly not useful, because the needed (hidden) informa-
tion is actually not known. In contrast, an unsuper-
vised and dynamic IE system like IDEX can be used
to support the expert in the exploration of the search
space through pro?active identification and clustering
of structured entities. Named entities like for example
person names and locations, are often useful indicators
of relevant text passages, in particular, if the names are
in some relationship. Furthermore, because the found
relationships are visualized using an advanced graph-
ical user interface, the user can select specific names
and find associated relationships to other names, the
documents they occur in or she can search for para-
phrases of sentences.
2. System architecture
The back-end component, visualized in Figure 4, con-
sists of three parts, which are described in detail in this
section: preprocessing, relation extraction and relation
clustering.
2.1. Preprocessing
In the first step, for a specific search task, a topic of
interest has to be defined in the form of a query. For
this topic, documents are automatically retrieved from
the web using the Google search engine. HTML and
PDF documents are converted into plain text files. As
the tools used for linguistic processing (NE recogni-
tion, parsing, etc.) are language-specific, we use the
Google language filter option when downloading the
documents. However, this does not prevent some doc-
uments written in a language other than our target
language (English) from entering our corpus. In ad-
dition, some web sites contain text written in several
languages. In order to restrict the processing to sen-
tences written in English, we apply a language guesser
tool, lc4j (Lc4j, 2007) and remove sentences not clas-
sified as written in English. This reduces errors on
the following levels of processing. We also remove sen-
tences that only contain non-alphanumeric characters.
To all remaining sentences, we apply LingPipe (Ling-
Pipe, 2007) for sentence boundary detection, named
entity recognition (NER) and coreference resolution.
As a result of this step database tables are created,
containing references to the original document, sen-
tences and detected named entities (NEs).
2.2. Relation extraction
Relation extraction is done on the basis of parsing po-
tentially relevant sentences. We define a sentence to be
of potential relevance if it at least contains two NEs.
In the first step, so-called skeletons (simplified depen-
dency trees) are extracted. To build the skeletons, the
Stanford parser (Stanford Parser, 2007) is used to gen-
erate dependency trees for the potentially relevant sen-
tences. For each NE pair in a sentence, the common
root element in the corresponding tree is identified and
the elements from each of the NEs to the root are col-
lected. An example of a skeleton is shown in Figure 5.
In the second step, information based on dependency
types is extracted for the potentially relevant sen-
tences. Focusing on verb relations (this can be ex-
tended to other types of relations), we collect for each
verb its subject(s), object(s), preposition(s) with ar-
guments and auxiliary verb(s). We can now extract
verb relations using a simple algorithm: We define a
verb relation to be a verb together with its arguments
(subject(s), object(s) and prepositional phrases) and
consider only those relations to be of interest where at
least the subject or the object is an NE. We filter out
relations with only one argument.
2.3. Relation clustering
Relation clusters are generated by grouping relation
instances based on their similarity.
web documents document
retrieval
topic specific documents plain text documents
sentence/documents+
 NE tables
languagefiltering
syntactic +typed dependencyparsing 
sov?relationsskeletons +
clustering
conversion
Preprocessing
Relation extraction
Relation clustering
sentencesrelevant
filtering of
relationfiltering
table of clustered relations
sentence boundary
resolutioncoreference
detection,NE recognition,
Figure 4: System architecture
Figure 5: Skeleton for the NE pair ?Hohenzollern? and ?Brandenburg? in the sentence ?Subsequent members of
the Hohenzollern family ruled until 1918 in Berlin, first as electors of Brandenburg.?
The comparably large amount of data in the corpus
requires the use of an efficient clustering algorithm.
Standard ML clustering algorithms such as k-means
and EM (as provided by the Weka toolbox (Witten
and Frank, 2005)) have been tested for clustering the
relations at hand but were not able to deal with the
large number of features and instances required for an
adequate representation of our dataset. We thus de-
cided to use a scoring algorithm that compares a re-
lation to other relations based on certain aspects and
calculates a similarity score. If this similarity score ex-
ceeds a predefined threshold, two relations are grouped
together.
Similarity is measured based on the output from the
different preprocessing steps as well as lexical informa-
tion from WordNet (WordNet, 2007):
? WordNet: WordNet information is used to deter-
mine if two verb infinitives match or if they are in
the same synonym set.
? Parsing: The extracted dependency information is
used to measure the token overlap of the two sub-
jects and objects, respectively. We also compare
the subject of the first relation with the object of
the second relation and vice versa. In addition,
we compare the auxiliary verbs, prepositions and
preposition arguments found in the relation.
? NE recognition: The information from this step
is used to count how many of the NEs occurring
in the contexts, i.e., the sentences in which the
two relations are found, match and whether the
NE types of the subjects and objects, respectively,
match.
? Coreference resolution: This type of information
is used to compare the NE subject (or object) of
one relation to strings that appear in the same
coreference set as the subject (or object) of the
second relation.
Manually analyzing a set of extracted relation in-
stances, we defined weights for the different similarity
measures and calculated a similarity score for each re-
lation pair. We then defined a score threshold and clus-
tered relations by putting two relations into the same
cluster if their similarity score exceeded this threshold
value.
3. Experiments and results
For our experiments, we built a test corpus of doc-
uments related to the topic ?Berlin Hauptbahnhof?
by sending queries describing the topic (e.g., ?Berlin
Hauptbahnhof?, ?Berlin central station?) to Google
and downloading the retrieved documents specifying
English as the target language. After preprocessing
these documents as described in 2.1., our corpus con-
sisted of 55,255 sentences from 1,068 web pages, from
which 10773 relations were automatically extracted
and clustered.
3.1. Clustering
From the extracted relations, the system built 306 clus-
ters of two or more instances, which were manually
evaluated by two authors of this paper. 81 of our clus-
ters contain two or more instances of exactly the same
relation, mostly due to the same sentence appearing in
several documents of the corpus. Of the remaining 225
clusters, 121 were marked as consistent, 35 as partly
consistent, 69 as not consistent. We defined consis-
tency based on the potential usefulness of a cluster to
the user and identified three major types of potentially
useful clusters:
? Relation paraphrases, e.g.,
accused (Mr Moore, Disney, In letter)
accused (Michael Moore, Walt Disney
Company)
? Different instances of the same pattern, e.g.,
operates (Delta, flights, from New York)
offers (Lufthansa, flights, from DC)
? Relations about the same topic (NE), e.g.,
rejected (Mr Blair, pressure, from Labour
MPs)
reiterated (Mr Blair, ideas, in speech, on
March)
created (Mr Blair, doctrine)
...
Of our 121 consistent clusters, 76 were classified as be-
ing of the type ?same pattern?, 27 as being of the type
?same topic? and 18 as being of the type ?relation para-
phrases?. As many of our clusters contain two instances
only, we are planning to analyze whether some clusters
should be merged and how this could be achieved.
3.2. Relation extraction
In order to evaluate the performance of the relation ex-
traction component, we manually annotated 550 sen-
tences of the test corpus by tagging all NEs and verbs
and manually extracting potentially interesting verb
relations. We define ?potentially interesting verb rela-
tion? as a verb together with its arguments (i.e., sub-
ject, objects and PP arguments), where at least two
of the arguments are NEs and at least one of them
is the subject or an object. On the basis of this crite-
rion, we found 15 potentially interesting verb relations.
For the same sentences, the IDEX system extracted 27
relations, 11 of them corresponding to the manually
extracted ones. This yields a recall value of 73% and
a precision value of 41%.
There were two types of recall errors: First, errors in
sentence boundary detection, mainly due to noisy in-
put data (e.g., missing periods), which lead to parsing
errors, and second, NER errors, i.e., NEs that were
not recognised as such. Precision errors could mostly
be traced back to the NER component (sequences of
words were wrongly identified as NEs).
In the 550 manually annotated sentences, 1300 NEs
were identified as NEs by the NER component. 402
NEs were recognised correctly by the NER, 588
wrongly and in 310 cases only parts of an NE were
recognised. These 310 cases can be divided into three
groups of errors. First, NEs recognised correctly, but
labeled with the wrong NE type. Second, only parts
of the NE were recognised correctly, e.g., ?Touris-
mus Marketing GmbH? instead of ?Berlin Tourismus
Marketing GmbH?. Third, NEs containing additional
words, such as ?the? in ?the Brandenburg Gate?.
To judge the usefulness of the extracted relations, we
applied the following soft criterion: A relation is con-
sidered useful if it expresses the main information given
by the sentence or clause, in which the relation was
found. According to this criterion, six of the eleven
relations could be considered useful. The remaining
five relations lacked some relevant part of the sen-
tence/clause (e.g., a crucial part of an NE, like the
?ICC? in ?ICC Berlin?).
4. Possible enhancements
With only 15 manually extracted relations out of 550
sentences, we assume that our definition of ?potentially
interesting relation? is too strict, and that more inter-
esting relations could be extracted by loosening the ex-
traction criterion. To investigate on how the criterion
could be loosened, we analysed all those sentences in
the test corpus that contained at least two NEs in order
to find out whether some interesting relations were lost
by the definition and how the definition would have to
be changed in order to detect these relations. The ta-
ble in Figure 6 lists some suggestions of how this could
be achieved, together with example relations and the
number of additional relations that could be extracted
from the 550 test sentences.
In addition, more interesting relations could be
found with an NER component extended by more
types, e.g., DATE and EVENT. Open domain NER
may be useful in order to extract NEs of additional
types. Also, other types of relations could be inter-
esting, such as relations between coordinated NEs,
option example additional relations
extraction of relations,
where the NE is not the
complete subject, object or
PP argument, but only part
of it
Co-operation with <ORG>M.A.X.
2001<\ORG> <V>is<\V> clearly of
benefit to <ORG>BTM<\ORG>.
25
extraction of relations with
a complex VP
<ORG>BTM<\ORG> <V>invited and or
supported<\V> more than 1,000 media rep-
resentatives in <LOC>Berlin<\LOC>.
7
resolution of relative pro-
nouns
The <ORG>Oxford Centre for Maritime
Archaeology<\ORG> [...] which will
<V>conduct<\V> a scientific symposium in
<LOC>Berlin<\LOC>.
2
combination of several of the
options mentioned above
<LOC>Berlin<\LOC> has <V>developed to
become<\V> the entertainment capital of
<LOC>Germany<\LOC>.
7
Figure 6: Table illustrating different options according to which the definition of ?potentially interesting relation?
could be loosened. For each option, an example sentence from the test corpus is given, together with the number
of relations that could be extracted additionally from the test corpus.
e.g., in a sentence like The exhibition [...] shows
<PER>Clemens Brentano<\PER>, <PER>Achim
von Arnim<\PER> and <PER>Heinrich von
Kleist<\PER>, and between NEs occurring in the
same (complex) argument, e.g., <PER>Hanns Peter
Nerger<\PER>, CEO of <ORG>Berlin Tourismus
Marketing GmbH (BTM) <\ORG>, sums it up [...].
5. Related work
Our work is related to previous work on domain-
independent unsupervised relation extraction, in par-
ticular Sekine (2006), Shinyama and Sekine (2006) and
Banko et al (2007).
Sekine (2006) introduces On-demand information ex-
traction, which aims at automatically identifying
salient patterns and extracting relations based on these
patterns. He retrieves relevant documents from a
newspaper corpus based on a query and applies a POS
tagger, a dependency analyzer and an extended NE
tagger. Using the information from the taggers, he ex-
tracts patterns and applies paraphrase recognition to
create sets of semantically similar patterns. Shinyama
and Sekine (2006) apply NER, coreference resolution
and parsing to a corpus of newspaper articles to ex-
tract two-place relations between NEs. The extracted
relations are grouped into pattern tables of NE pairs
expressing the same relation, e.g., hurricanes and their
locations. Clustering is performed in two steps: they
first cluster all documents and use this information to
cluster the relations. However, only relations among
the five most highly-weighted entities in a cluster are
extracted and only the first ten sentences of each arti-
cle are taken into account.
Banko et al (2007) use a much larger corpus, namely
9 million web pages, to extract all relations between
noun phrases. Due to the large amount of data, they
apply POS tagging only. Their output consists of mil-
lions of relations, most of them being abstract asser-
tions such as (executive, hired by, company) rather
than concrete facts.
Our approach can be regarded as a combination of
these approaches: Like Banko et al (2007), we extract
relations from noisy web documents rather than com-
parably homogeneous news articles. However, rather
than extracting relations from millions of pages we re-
duce the size of our corpus beforehand using a query in
order to be able to apply more linguistic preprocessing.
Like Sekine (2006) and Shinyama and Sekine (2006),
we concentrate on relations involving NEs, the assump-
tion being that these relations are the potentially in-
teresting ones. The relation clustering step allows us
to group similar relations, which can, for example, be
useful for the generation of answers in a Question An-
swering system.
6. Future work
Since many errors were due to the noisiness of the ar-
bitrarily downloaded web documents, a more sophisti-
cated filtering step for extracting relevant textual infor-
mation from web sites before applying NE recognition,
parsing, etc. is likely to improve the performance of
the system.
The NER component plays a crucial role for the qual-
ity of the whole system, because the relation extraction
component depends heavily on the NER quality, and
thereby the NER quality influences also the results of
the clustering process. A possible solution to improve
NER in the IDEX System is to integrate a MetaNER
component, combining the results of several NER com-
ponents. Within the framework of the IDEX project
a MetaNER component already has been developed
(Heyl, to appear 2008), but not yet integrated into the
prototype. The MetaNER component developed uses
the results from three different NER systems. The out-
put of each NER component is weighted depending on
the component and if the sum of these values for a pos-
sible NE exceeds a certain threshold it is accepted as
NE otherwise it is rejected.
The clustering step returns many clusters containing
two instances only. A task for future work is to in-
vestigate, whether it is possible to build larger clus-
ters, which are still meaningful. One way of enlarging
cluster size is to extract more relations. This could
be achieved by loosening the extraction criteria as de-
scribed in section 4. Also, it would be interesting to see
whether clusters could be merged. This would require
a manual analysis of the created clusters.
Acknowledgement
The work presented here was partially supported by a
research grant from the?Programm zur Fo?rderung von
Forschung, Innovationen und Technologien (ProFIT)?
(FKZ: 10135984) and the European Regional Develop-
ment Fund (ERDF).
7. References
Michele Banko, Michael J. Cafarella, Stephen Soder-
land, Matthew Broadhead, and Oren Etzioni. 2007.
Open information extraction from the web. In Proc.
of the International Joint Conference on Artificial
Intelligence (IJCAI).
Andrea Heyl. to appear 2008. Unsupervised relation
extraction. Master?s thesis, Saarland University.
Lc4j. 2007. Language categorization library for Java.
http://www.olivo.net/software/lc4j/.
LingPipe. 2007. http://www.alias-i.com/lingpipe/.
Satoshi Sekine. 2006. On-demand information extrac-
tion. In ACL. The Association for Computer Lin-
guistics.
Yusuke Shinyama and Satoshi Sekine. 2006. Preemp-
tive information extraction using unrestricted re-
lation discovery. In Proc. of the main conference
on Human Language Technology Conference of the
North American Chapter of the Association of Com-
putational Linguistics, pages 304?311. Association
for Computational Linguistics.
Stanford Parser. 2007. http://nlp.stanford.edu/
downloads/lex-parser.shtml.
Ian H. Witten and Eibe Frank. 2005. Data Min-
ing: Practical machine learning tools and techniques.
Morgan Kaufmann, San Francisco, 2nd edition.
WordNet. 2007. http://wordnet.princeton.edu/.
Proceedings of COLING 2014, the 25th International Conference on Computational Linguistics: System Demonstrations,
pages 100?104, Dublin, Ireland, August 23-29 2014.
A Marketplace for Web Scale Analytics and Text Annotation Services
Johannes Kirschnick
1
, Torsten Kilias
1
, Holmer Hemsen
1
Alexander L
?
oser
2
, Peter Adolphs
3
, Heiko Ehrig
3
, Holger D?uwiger
3
(1) Technische Universit?at Berlin, Einsteinufer 17, 10587 Berlin, Germany
{firstname.lastname}@tu-berlin.de
(2) Beuth Hochschule f?ur Technik Berlin, Luxemburger Stra?e 10, 13353 Berlin, Germany
aloeser@beuth-hochschule.de
(3) Neofonie GmbH, Robert-Koch-Platz 4, 10115 Berlin, Germany
{firstname.lastname}@neofonie.de
Abstract
We present MIA, a data marketplace which enables massive parallel processing of data from
the Web. End users can combine both text mining and database operators in a structured query
language called MIAQL. MIA offers many cost savings through sharing text data, annotations,
built-in analytical functions and third party text mining applications. Our demonstration show-
cases MIAQL and its execution on the platform for the example of analyzing political campaigns.
1 Introduction
Data-driven services and data marketplaces are young phenomena (Schomm et al., 2013). Commonly
known commercial examples are Factual.com for location-related data, Amazon as a marketplace for
infrastructure and data, and Microsoft?s datamarket.azure.com. These marketplaces offer common data
flow and service characteristics (Muschalle et al., 2012). MIA is such a marketplace, it offers data driven
services in the area of natural language processing in combination with business intelligence services for
analyzing more than 600 million pages of the German language Web (from 2013-2014). The user can
combine linguistic components with standard SQL operators in data execution pipes to create new data
sets. The marketplace permits the user to keep the insightful data exclusive or to grant access permissions
to other users for data, annotation services or pipelines. MIA enables to turn the Web, a particular rich
source of information using extraction, processing and enrichment tasks (e.g., parsing or semantically
annotating) into a valuable knowledge resources to support various business intelligence (BI) tasks. Such
tasks are exemplified by the following questions from the area of political campaign analysis:
? What is the polarity (sentiment) associated with events found in online news media?
? Which newspapers are biased in the last years towards certain political parties?
The MIA project started in 2011, since then we observed many similar queries and demands from sales
departments (monitor and identify leads that soon will buy a car), human resources (identify professionals
with capabilities in text mining), market research (monitor the effectiveness of a campaign) as well as
product development (incorporate feedback from customers into the development process).
1.1 Background
Transforming huge volumes of text into structured information that is suitable and useful for empowering
applications in heterogeneous and previously unknown application areas is a challenge. MIA addresses
this using own and third party research in the areas of text mining and distributed databases.
Single system for analytical and NLP tasks. The parse tree database (PTDB) by Tari (2012) stores
dependency tagged sentences and retrieves subtrees with a key value index based on Lucene. MIA goes
drastically beyond this functionality. It enables GATE (gate.ac.uk) and UIMA (uima.apache.
org) developers to integrate their components. This greatly expands the available processing modules
This work is licensed under a Creative Commons Attribution 4.0 International License. Page numbers and proceedings footer are
added by the organizers. License details: http://creativecommons.org/licenses/by/4.0/
100
on the platform as existing pipelines can be easily incorporated into the marketplace. Furthermore,
it gives users the ability to store and retrieve lexical, syntactic and semantic annotations. The MIA
platform executes these components as user-defined functions in a massively parallel database, enables
the aggregation of resulting annotations with other data sources, such as in-house relational databases,
and conducts these operations, all in a single system. AnnoMarket (Tablan et al., 2013) is a marketplace
for executing GATE pipelines and permits to upload third party extractors, but lacks the functionality to
aggregate and join results. Rather, it requires the user to ship preliminary results to a database where the
user conducts advanced analytical tasks. However, companies may eschew the high investment risk and
the technical difficulties to ship and analyze hundreds of millions of documents.
Declarative languages for text mining. System-T (Chiticariu et al., 2010) includes AQL, a declarative
language for defining extractors through rules. MIAQL extends this idea with SQL predicates for sub-
queries, views, joins and for data crawling that operate on datasets represented as collections of nested
tuples. MIA?s data model incorporates a span-algebra and operators for processing sequences or trees
(Kilias et al., 2013). MIA also leverages our research for extracting relations (Akbik et al., 2012) and for
restricting attribute types (Kirschnick et al., 2013) which builds on the provided abstractions.
1.2 Our Contribution
MIAQL: Text mining and analytical tasks with a single structured query language. We demon-
strate how our declarative language MIAQL empowers end users to describe text mining tasks. MIAQL
also supports common SQL-92 operations, such as joins, views, sub-queries, aggregations and group by.
We showcase how our parallel execution framework compiles a MIAQL query into a dataflow represen-
tation and finally into a set of map/reduce tasks (Dean and Ghemawat, 2008).
Data marketplace for annotation services. We showcase how data providers can integrate data sets,
developers can share modules for text mining or data analytics, application vendors can offer specialized
applications and analysts can use the raw or annotated data for ad-hoc queries.
Optimizations for Web-scale corpora. We showcase on 600 million pages from the German language
Web how our parallel execution framework optimizes queries for distributed multi-core environments and
for file-, key-value- and column-based datastores, such as HBase
1
or the Parquet.io
2
file format.
2 Demonstration
Scenario: How biased are newspapers? Consider an analyst with the hypothesis that certain newspa-
pers bias their reports towards certain political parties. Listing 1 shows a set of queries for determining
such a bias. For solving this task the analyst must first obtain a news corpus, either by crawling or by
buying and downloading the documents. Next, the analyst formulates a query for spotting sentences
that mention a politician and computes the subjectivity. Finally, the analyst counts these tuples over all
documents, groups them by the newspaper/party, aggregates the subjectivity and sorts the results.
2.1 Execution Environment for the Obtain-Annotate-Join-Aggregate-Process
This and many other monitoring processes follow the same schema: Obtaining already exclusive data,
such as fresh data, and make data even more exclusive by complementing (joining), aggregating and
sorting it. Nearly every company uses similar processes in the data warehouse on relational data but not
on text data from the Web. MIA supports this process now also on hundreds of millions of Web pages
with the following technologies:
Simple SQL interface for analysts. MIAQL provides standard SQL-92 statements for data aggrega-
tion, such as COUNTS, MIN, MAX, AVG, GROUP BY, including sub-queries and views. As a result,
MIAQL presents a familiar environment for data analysts and reduces the necessity to learn a new query
language. For example, listing 1 shows aggregations for counting and averaging the subjectivity for each
1
https://hbase.apache.org (Last visited: 16/5/2014)
2
http://parquet.io (Last visited: 16/5/2014)
101
1 CREATE VIEW sentences AS
2 SELECT srcName,text,unnest(splitSentences(text)) AS sentence
3 FROM news2013;
4
5 CREATE VIEW sentencesWithPOSTags AS
6 SELECT
*
,annotatePOSTags(sentence) AS posTags
7 FROM sentences;
8
9 CREATE VIEW sentencesWithSubjectivity AS
10 SELECT
*
,isSentenceSubjective(text,sentence,posTags) AS
sentenceSubjective
11 FROM sentencesWithPOSTags;
12
13 CREATE VIEW sentencesWithEntities AS
14 SELECT
*
,unnest(annotateEntites(sentence, posTags)) AS entity
15 FROM sentencesWithSubjectivity;
16
17 CREATE VIEW filterSentencesWithPoliticians AS
18 SELECT
srcName,party,politician,booleanToInt(sentenceSubjective)
AS subjectivity
19 FROM sentencesWithEntities AS s
JOIN politicians AS p ON s.uri=p.uri;
20
21 SELECT srcName,party,politician,COUNT(
*
), AVG(subjectivity)
22 FROM filterSentencesWithPoliticians
23 GROUP BY srcName, party, politician;
Listing 1: The listing shows a set of views in MIAQL
for correlating mentions of politicians in newspapers and
detecting whether the reporting is subjective. The MIAQL
optimizer compiles this into an execution plan, see Figure 1
for an example.
List of 
Politicians
News
2013
Sentence
Splitting
POS
Annotation
Detect
Subjectivity
Annotate
Entities
AGGREGATE
JOIN
Obtain
Data
Annotate 
Data
External 
Data
Figure 1: MIA supports user defined
functions, optimizes equi, theta and
cross joins into local, broadcast and
repartitioning joins and supports com-
mon aggregate functions of SQL-92.
newspaper and politician/party pair. The query is transparently compiled into the data flow description
language Pig Latin (Olston et al., 2008). This allows programs defined in MIAQL to be processed in a
massively parallel way on a Hadoop system (Dean and Ghemawat, 2008). Figure 1 highlights the execu-
tion plan for the sample MIAQL query, which uses different data sources, processes them by executing
a chain of annotators, joins the results and aggregates them to produce the final answer.
Reuse base annotators and user defined annotators. We observed from our users the need to enrich
raw data with linguistic annotations at various levels. Users of the platform might be interested in named
entities and their referents, topic labels or sentiment judgements for which they need to run specialized
annotators. These annotators in turn might also depend on other levels of linguistic analysis. To prevent
multiple processing of the same data with the same tools, the MIA platform crawls raw data and anno-
tates it on ingestion at the most common linguistic levels. Multiple users can access these annotations
across their projects and can thus save costs. For example, MIA performs sentence splitting, tokeniza-
tion, lemmatization, part-of-speech tagging, named-entity recognition and a document-specific topic
detection for each document. Other processing steps such as dependency parsing or entity linking (Kem-
merer et al., 2014) can be applied on the fly at query time. Analysts may reuse this data in domain specific
annotation functions. In the above listing the subjectivity analysis function reuses for example sentence
boundaries and part-of-speech tags. The system executes such transformations as user-defined functions.
Multiple functions are grouped into logical modules and registered on the platform for reuse, each with
an associated description and a schema mapping from input to output tuples.
Complement Web data with in-house data. MIA permits users to upload in-house data to the dis-
tributed file system with restricted visibility. Our users join this data with the goal of complementing
with existing data. For example, in the listing above a list of German politicians is joined with the list of
extracted sentences to filter out all sentences that are not mentioning one of the defined politicians.
3 Lessons Learned
Data freshness, completeness and veracity. MIA?s strongest asset is the ability to complement exist-
ing (possibly exclusive) in-house data with ?signals? from the Web, avoiding huge data set shipments.
102
MIAQL Application
Marketplace
Data & Modules
          Hadoop
Execution Environment
Select 
from
Repository
HDFS
Custom
Module
Custom
Data
Modules Data abstractions
HBASE ...
Issue
Query
Analyst Developer
write
Re- usable
Analytics
Results
Pig Latin 
Script
Compile Results
Execute
DB
DB
Monitor
Provides
 Backends
Figure 2: This figure shows the architecture of the marketplace. It contains the repository for data sets
and text mining code modules. Developers can upload text mining modules, content providers can upload
data sets and grant selected analysts reuse permissions. The application provides analysts with a Web
interface for browsing the repository, authoring new MIAQL queries and downloading analytic results.
Queries are transparently compiled into Pig Latin and executed on the distributed platform.
The Pig-Latin-based query processing engine provides users with answers within minutes. Currently, our
users tolerate these answering times, for example for monitoring applications. However, users also often
request fresh (minutes- hours) data, for tighter feedback loop integrations. Realizing short updates and
low latency response times are research topics of the project, as well as delivering higher level insights
beyond tabular reports, such as automated visualization and result clustering.
Cloud-based one-stop-shop marketplace vs. on-premise solution. Users can protect their data, func-
tionality and processing results. However, some require running the MIA platform ?behind their fire-
walls?. Currently, they need to ?download? the processed results and execute the join in-house with their
?secret? data. For these users, we investigate operations for selecting the likely minimal and fresh but
still highly complete data sets, such as L?oser et al. (2013).
4 Current Status
The marketplace is currently available in private beta mode and accessible via a Web UI, which is dis-
played in Figure 3. Users can author, execute and monitor new jobs as well as inspect and download the
results, while developers can create and upload new processing modules. New modules can be created
by adhering to a simple tuple based processing interface defined by the platform, which greatly reduces
the friction of writing new modules and leveraging existing text pipelines. The available public datasets
are constantly expanded by continuously crawling the German Web, uploading new news articles and
incorporating new social media posts.
While the project is targeted at providing large scale processing for German language texts, the core
software platform is not tied to a particular language. All language specific contributions are packaged
into separate data and processing modules. Supporting a new language sums up to creating and uploading
new data and algorithm packages. More information as well as a demonstration video for MIA can
be found at the project website www.neofonie.de/forschung/mia. We furthermore encourage
requesting a demo login to the system.
Acknowledgments
We would like to thank the anonymous reviewers for their helpful comments. The work to build the
demonstrator and the underlying technologies received funding from the German Federal Ministry of
103
Figure 3: This figure shows the sophisticated execution environment presented by the MIA platform.
The Web-driven UI supports the analysts with query authoring, data and function modules browsing as
well as job monitoring and results download.
Economics and Energy (BMWi) under grant agreement 01MD11014A, ?A cloud-based Marketplace for
Information and Analytics on the German Web? (MIA).
References
Alan Akbik, Larysa Visengeriyeva, Priska Herger, Holmer Hemsen, and Alexander L?oser. 2012. Unsupervised
Discovery of Relations and Discriminative Extraction Patterns. In COLING, pages 17?32.
Laura Chiticariu, Rajasekar Krishnamurthy, Yunyao Li, Sriram Raghavan, Frederick Reiss, and Shivakumar
Vaithyanathan. 2010. SystemT: An Algebraic Approach to Declarative Information Extraction. In ACL, pages
128?137.
Jeffrey Dean and Sanjay Ghemawat. 2008. MapReduce: Simplified Data Processing on Large Clusters. Commun.
ACM, 51(1):107?113, January.
Steffen Kemmerer, Benjamin Gro?mann, Christina M?uller, Peter Adolphs, and Heiko Ehrig. 2014. The neofonie
nerd system at the erd challenge 2014. SIGIR Forum. To appear.
Torsten Kilias, Alexander L?oser, and Periklis Andritsos. 2013. INDREX: in-database distributional relation ex-
traction. In DOLAP, pages 93?100.
Johannes Kirschnick, Alan Akbik, Larysa Visengeriyeva, and Alexander L?oser. 2013. Effective Selectional Re-
strictions for Unsupervised Relation Extraction. In IJCNLP. The Association for Computer Linguistics.
Alexander L?oser, Christoph Nagel, Stephan Pieper, and Christoph Boden. 2013. Beyond search: Retrieving
complete tuples from a text-database. Information Systems Frontiers, 15(3):311?329.
Alexander Muschalle, Florian Stahl, Alexander L?oser, and Gottfried Vossen. 2012. Pricing Approaches for Data
Markets. In BIRTE, pages 129?144.
Christopher Olston, Benjamin Reed, Utkarsh Srivastava, Ravi Kumar, and Andrew Tomkins. 2008. Pig latin:
a not-so-foreign language for data processing. In Jason Tsong-Li Wang, editor, SIGMOD Conference, pages
1099?1110. ACM.
Fabian Schomm, Florian Stahl, and Gottfried Vossen. 2013. Marketplaces for data: an initial survey. SIGMOD
Record, 42(1):15?26.
Valentin Tablan, Kalina Bontcheva, Ian Roberts, Hamish Cunningham, and Marin Dimitrov. 2013. AnnoMarket:
An Open Cloud Platform for NLP. In ACL (Conference System Demonstrations), pages 19?24.
Luis Tari, Phan Huy Tu, J?org Hakenberg, Yi Chen, Tran Cao Son, Graciela Gonzalez, and Chitta Baral. 2012.
Incremental information extraction using relational databases. IEEE Trans. Knowl. Data Eng., 24(1):86?99.
104
