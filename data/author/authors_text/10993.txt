Coling 2008: Companion volume ? Posters and Demonstrations, pages 173?176
Manchester, August 2008
Entailment-based Question Answering  
for Structured Data 
Bogdan Sacaleanu?, Constantin Orasan?, Christian Spurk?, Shiyan 
Ou?, Oscar Ferrandez?, Milen Kouylekov? and Matteo Negri?  
?LT-Lab, DFKI GmbH / Saarbr?cken, Germany 
?RIILP, University of Wolverhampton / Wolverhampton, UK 
?Fondazione Bruno Kessler (FBK) / Trento, Italy 
?University of Alicante / Alicante, Spain 
 
 
Abstract  
This paper describes a Question Answer-
ing system which retrieves answers from 
structured data regarding cinemas and 
movies. The system represents the first 
prototype of a multilingual and multi-
modal QA system for the domain of tour-
ism. Based on specially designed domain 
ontology and using Textual Entailment as 
a means for semantic inference, the sys-
tem can be used in both monolingual and 
cross-language settings with slight ad-
justments for new input languages. 
1 Introduction 
Question Answering over structured data has 
been traditionally addressed through a deep 
analysis of the question in order to reconstruct a 
logical form, which is then translated in the query 
language of the target data (Androutsopoulos et 
al, 1995, Popescu et al 2003). This approach im-
plies a complex mapping between linguistic ob-
jects (e.g. lexical items, syntactic structures) and 
against data objects (e.g. concepts and relations 
in a knowledge base). Unfortunately, such a 
mapping requires extensive manual work, which 
in many cases represents a bottleneck preventing 
the realization of large scale and portable natural 
language interfaces to structured data.  
This paper presents the first prototype of a 
question answering system which can answer 
questions in several languages about movies and 
cinema using a multilingual ontology and textual 
                                                 
 
? 2008. Licensed under the Creative Commons Attri-
bution-Noncommercial-Share Alike 3.0 Unported li-
cense (http://creativecommons.org/licenses/by-nc-
sa/3.0/). Some rights reserved. 
entailment. The remainder of the paper is struc-
tured as follows: Section 2 presents the concept 
of entailment-based question answering; Section 
3 describes our prototype which implements this 
concept; A brief evaluation is presented in Sec-
tion 4, followed by conclusions in Section 5. 
2 Entailment-based QA 
Recently Textual Entailment (TE) has been pro-
posed as a unifying framework for applied se-
mantics (Dagan and Glickman, 2004), where the 
need for an explicit representation of a mapping 
between linguistic objects and data objects can 
be, at least partially, bypassed through the defini-
tion of semantic inferences at a textual level. In 
this framework, a text (T) is said to entail a hy-
pothesis (H) if the meaning of H can be derived 
from the meaning of T. 
On the basis of the TE framework, the QA 
problem can be recast as an entailment problem, 
where the text (T) is the question (or its affirma-
tive version) and the hypothesis (H) is a rela-
tional answer pattern, which is associated to in-
structions for retrieving the answer to the input 
question. In this framework, given a question Q 
and a set of relational answer patterns P, a QA 
system needs to select those patterns in P that are 
entailed by Q. Instructions associated to answer 
patterns may be viewed as high precision proce-
dures for answer extraction, which are dependent 
on the specific source which is asked for. In case 
of QA over structured data, instructions could be 
queries to a database; whilst in case of QA on the 
Web, an instruction could be the URL of a Web 
page containing the answer to a question or some 
form of IR query to a search engine. 
Therefore, the underlying idea of an entail-
ment-based QA system is to match the user?s re-
quest to a set of predefined question patterns in 
order to get some kind of analysis for the request. 
173
As an example consider the question ?Where 
can I watch the movie ?Dreamgirls? next Satur-
day?? and the predefined question patterns: 
? Which movies are currently running in 
[CINEMA]?  EAT = [MOVIE] 
? Where can I watch the movie [MOVIE] 
on [WEEKDAY]?  EAT = [CINEMA] 
? Where can I see [MOVIE]? 
 EAT = [CINEMA] 
In the example, each of the patterns contains 
placeholders for relevant named entities and has 
an expected answer type (EAT) associated with 
it. The entailment-based QA system should re-
turn that pattern (2) is entailed by the question 
and as a result the retrieval instructions associ-
ated to it will be used to answer the question. 
3 Description of system 
Our question answering system implements the 
concept of entailment-based question answering 
described in the previous section. The overall 
structure of our system is presented in Figure 1.  
Given a question asked by a user of the system 
in a known location, the QA planner forwards it 
to the Instance Annotator in order to find any 
concepts that might be related to the targeted 
domain (i.e. cinema, city, movie). The result is 
then analyzed by the Relation Matcher, which on 
the basis of entailment can either select the most 
appropriate interpretation of the question and im-
plicitly its associated procedure of answering the 
question, or decide that the user request is out-of-
coverage if no such interpretation is available. 
The cross-linguality of our system and, to a 
certain extent, the interaction between its compo-
nents is ensured by a domain ontology which is 
used for all four languages involved in the pro-
ject: English, German, Italian and Spanish, and 
its modules (Ou et al, 2008). Concepts from the 
ontology are used to annotate the user questions 
as well as data from which the answer is ex-
tracted. In the current stage of the project, the 
answers are contained in databases obtained from 
content provides or built from structured web 
pages. As a result, the information in the database 
tables was annotated with concepts from the on-
tology and then converted into an RDF graph to 
Figure 1. System Architecture 
174
facilitate retrieval using SPARQL query lan-
guage (Prud'hommeaux and Seaborne, 2006). 
Question patterns corresponding to one or several 
ontological relations were produced after ques-
tions for users were collected and used in the en-
tailment module. The question patterns used by 
the system are very similar to those presented in 
the previous section and contain placeholders for 
the actual entities that are expected to appear in a 
question. 
The SPARQL query associated with a pattern 
selected for a user question is used to retrieve the 
answers from the knowledge base and prepare for 
presentation. Given that our system is not limited 
to returning only textual information, further 
processing can be applied to the retrieved data. 
For example, for proximity questions the list of 
answers consists of cinema names and their GPS-
coordinates, which are used by the Answer Sort-
ing component to reorder the list of answers on 
the basis of their distance to the user?s location. 
Besides presenting the possible answers to a 
given question, the system can offer additional 
information based on the answer?s type: 
? a map for answers that are location 
names, 
? a route description for answers that are 
cinema names, 
? a video-trailer for answers that are movie 
names and 
? an image for answers that are person 
names. 
Due to the fact that a common semantics is 
shared by all four languages by way of a domain 
ontology, the system can be used not only in a 
monolingual setting, but also in a cross-language 
setting. This corresponds to a user-scenario 
where a tourist asks for information in their own 
language in a foreign location (i.e. English 
speaker in Italy). The only difference between 
monolingual and cross-language scenarios is that 
in the cross-language setting, the QA Core sub-
system (Figure 1) selects a Find Entailed Rela-
tion component according to the user input?s lan-
guage. This is due to the entailment algorithms 
that tend to use language specific resources in 
order to attain high accuracy results of matching 
the user request with one of the lexicalized rela-
tions (patterns). It is only the entailment compo-
nent that has to be provided in order to adapt the 
system to new input languages, once the lexical-
ized relations have been translated either manual 
or automatically. 
Both the Instance Annotator and the Answer 
Retriever are language independent, but location 
dependent (Figure 2). The Answer Retriever de-
pends on the location since it is querying data 
found at that place (i.e. Italy), while the Instance 
Annotator looks up instances of the data in the 
user?s question (i.e. annotates an English ques-
tion). They are language independent since they 
are working with data abstractions like SPARQL 
queries (Answer Retriever) or work at character 
level and do not consider language specific as-
pects, like words, in their look-up process (In-
stance Annotator). 
The current version of the system1 is designed 
according to the SOA (Service Oriented Archi-
tecture) and is implemented as point-to-point in-
tegrated web services. Any of the system?s com-
ponents can be substituted by alternative imple-
mentations with no need for further changes as 
long as the functionality remains the same. 
                                                 
1
 http://attila.dfki.uni-sb.de:8282/ QallMe_Proto-
type_WEB_Update/faces/Page6.jsp 
Figure 2. Cross-language Setting 
175
4 Evaluation 
A preliminary evaluation of the first prototype 
was carried out on randomly selected questions 
from a benchmark specifically designed for the 
project. This benchmark was developed to con-
tain questions about various aspects from the 
domain of tourism and for this reason we filtered 
out questions not relevant to cinema or movies. 
The evaluation of the system did not assess 
whether it can extract the correct answer. Instead, 
it measured to what extent the system can select 
the right SPARQL pattern. The explanation for 
this can be found in the fact that once a correct 
question pattern is selected, the extraction of the 
answer requires only retrieval of the answer from 
the database. Moreover, it should be pointed out 
that the main purpose of this preliminary evalua-
tion was to test the interaction between compo-
nents and indicate potential problems, and it was 
less about their performances.  
Table 1 summarises the results of the evalua-
tion. The number of questions used in the evalua-
tion is different from one language to another. 
This can be explained by the fact that for each 
language a number of questions (in general 500) 
was randomly selected from the benchmark and 
only the ones which referred to cinema or movies 
were selected. The column Questions indicates 
the number of questions assessed. The Correct 
column indicates for how many questions a cor-
rect SPARQL was generated. The Wrong column 
corresponds to the number of questions where a 
wrong or incomplete SPARQL was generated. 
This number also includes cases where no 
SPARQL was generated due to lack of corre-
sponding answer pattern. 
 
 Questions Correct Wrong 
English 167 74 (44.31%) 93 (55.68%) 
German 214 120 (56.04%) 94 (43.92%) 
Spanish 58 50 (86.20%) 8 (13.79%) 
Italian 99 46 (46.46%) 53 (53.53%) 
Table 1: Evaluation results 
As can be seen, the results are very different 
from one language to another. This can be ex-
plained by the fact that different entailment en-
gines are used for each language. In addition, 
even though the benchmark was built using a 
common set of guidelines, the complexity of 
questions varies from one language to another. 
For this reason, for some questions it is more dif-
ficult to find the correct pattern than for others.  
Analysis of the results revealed that one of the 
easiest ways to improve the performance of the 
system is to increase the number of patterns. Cur-
rently the average number of patterns per lan-
guage is 42. Improvement of the entailment en-
gines is another direction which needs to be pur-
sued. Most of the partners involved in the project 
have more powerful entailment engines than 
those integrated in the prototype which were 
ranked highly in RTE competitions. Unfortu-
nately, many of these engines cannot be used di-
rectly in our system due to their slow speed. Our 
system is supposed to give users results in real 
time which imposes some constraints on the 
amount of processing that can be done. 
5 Conclusions 
This paper presented the first prototype of an 
entailment-based QA system, which can answer 
questions about movies and cinema. The use of a 
domain ontology ensures that the system is cross-
language and can be extended to new languages 
with slight adjustments at the entailment engine. 
The system is implemented as a set of web ser-
vices and along a Service Oriented Architecture. 
6 Acknowledgements 
This work is supported by the EU-funded pro-
ject QALL-ME (FP6 IST-033860).  
References 
Androutsopoulos, I. and G.D. Ritchie and P. Thanisch. 
1995. Natural Language Interfaces to Databases -- 
An Introduction, Journal of Natural Language En-
gineering, vol.1, no.1, Cambridge University Press. 
Popescu Ana-Marie, Oren Etzioni, and Henry Kautz. 
2003. Towards a theory of natural language inter-
faces to databases. In Proceedings of the confer-
ence on Intelligent User Interfaces. 
Dagan Ido and Oren Glickman. 2004. Probabilistic 
textual entailment: Generic applied modeling of 
language variability. In PASCAL Workshop on 
Learning Methods for Text Understanding and 
Mining, Grenoble. 
Ou Shiyan, Viktor Pekar, Constantin Orasan, Chris-
tian Spurk, Matteo Negri. 2008. Development and 
alignment of a domain-specific ontology for ques-
tion answering. In Proceedings of the 6th Edition of 
the Language Resources and Evaluation Confer-
ence (LREC-08).  
Prud'hommeaux Eric, Andy Seaborne (eds.). 2006. 
SPARQL Query Language for RDF. RDF Data Ac-
cess Working Group. 
176
Proceedings of the ACL-HLT 2011 System Demonstrations, pages 7?13,
Portland, Oregon, USA, 21 June 2011. c?2011 Association for Computational Linguistics
The ACL Anthology Searchbench
Ulrich Scha?fer Bernd Kiefer Christian Spurk Jo?rg Steffen Rui Wang
Language Technology Lab
German Research Center for Artificial Intelligence (DFKI)
D-66123 Saarbru?cken, Germany
{ulrich.schaefer,kiefer,cspurk,steffen,wang.rui}@dfki.de
http://www.dfki.de/lt
Abstract
We describe a novel application for structured
search in scientific digital libraries. The ACL
Anthology Searchbench is meant to become a
publicly available research tool to query the
content of the ACL Anthology. The applica-
tion provides search in both its bibliographic
metadata and semantically analyzed full tex-
tual content. By combining these two features,
very efficient and focused queries are possi-
ble. At the same time, the application serves
as a showcase for the recent progress in nat-
ural language processing (NLP) research and
language technology. The system currently
indexes the textual content of 7,500 anthol-
ogy papers from 2002?2009 with predicate-
argument-like semantic structures. It also
provides useful search filters based on bib-
liographic metadata. It will be extended to
provide the full anthology content and en-
hanced functionality based on further NLP
techniques.
1 Introduction and Motivation
Scientists in all disciplines nowadays are faced with
a flood of new publications every day. In addi-
tion, more and more publications from the past be-
come digitally available and thus even increase the
amount. Finding relevant information and avoiding
duplication of work have become urgent issues to be
addressed by the scientific community.
The organization and preservation of scientific
knowledge in scientific publications, vulgo text doc-
uments, thwarts these efforts. From a viewpoint of
a computer scientist, scientific papers are just ?un-
structured information?. At least in our own sci-
entific community, Computational Linguistics, it is
generally assumed that NLP could help to support
search in such document collections.
The ACL Anthology1 is a comprehensive elec-
tronic collection of scientific papers in our own field
(Bird et al, 2008). It is updated regularly with
new publications, but also older papers have been
scanned and are made available electronically.
We have implemented the ACL Anthology
Searchbench2 for two reasons: Our first aim is to
provide a more targeted search facility in this col-
lection than standard web search on the anthology
website. In this sense, the Searchbench is meant to
become a service to our own community.
Our second motivation is to use the developed
system as a showcase for the progress that has been
made over the last years in precision-oriented deep
linguistic parsing in terms of both efficiency and
coverage, specifically in the context of the DELPH-
IN community3. Our system also uses further NLP
techniques such as unsupervised term extraction,
named entity recognition and part-of-speech (PoS)
tagging.
By automatically precomputing normalized se-
mantic representations (predicate-argument struc-
ture) of each sentence in the anthology, the search
space is structured and allows to find equivalent or
related predicates even if they are expressed differ-
1http://www.aclweb.org/anthology
2http://aclasb.dfki.de
3http://www.delph-in.net ? DELPH-IN stands for
DEep Linguistic Processing with HPSG INitiative.
7
ently, e.g. in passive constructions, using synonyms,
etc. By storing the semantic sentence structure along
with the original text in a structured full-text search
engine, it can be guaranteed that recall cannot fall
behind the baseline of a fulltext search.
In addition, the Searchbench also provides de-
tailed bibliographic metadata for filtering as well as
autosuggest texts for input fields computed from the
corpus ? two further key features one can expect
from such systems today, nevertheless very impor-
tant for efficient search in digital libraries.
We describe the offline preprocessing and deep
parsing approach in Section 2. Section 3 concen-
trates on the generation of the semantic search in-
dex. In Section 4, we describe the search interface.
We conclude in Section 5 and present an outlook to
future extensions.
2 Parsing the ACL Anthology
The basis of the search index for the ACL Anthol-
ogy are its original PDF documents, currently 8,200
from the years 2002 through 2009. To overcome
quality problems in text extraction from PDF, we
use a commercial PDF extractor based on OCR tech-
niques. This approach guarantees uniform and high-
quality textual representations even from older pa-
pers in the anthology (before 2000) which mostly
were scanned from printed paper versions.
The general idea of the semantics-oriented ac-
cess to scholarly paper content is to parse each sen-
tence they contain with the open-source HPSG (Pol-
lard and Sag, 1994) grammar for English (ERG;
Flickinger (2002)) and then distill and index seman-
tically structured representations for search.
To make the deep parser robust, it is embedded
in a NLP workflow. The coverage (percentage of
full deeply parsed sentences) on the anthology cor-
pus could be increased from 65 % to now more
than 85 % through careful combination of several
robustness techniques; for example: (1) chart prun-
ing, directed search during parsing to increase per-
formance, and also coverage for longer sentences
(Cramer and Zhang, 2010); (2) chart mapping, a
novel method for integrating preprocessing informa-
tion in exactly the way the deep grammar expects
it (Adolphs et al, 2008); (3) new version of the
ERG with better handling of open word classes; (4)
more fine-grained named entity recognition, includ-
ing recognition of citation patterns; (5) new, better
suited parse ranking model (WeScience; Flickinger
et al (2010)). Because of limited space, we will fo-
cus on (1) and (2) below. A more detailed descrip-
tion and further results are available in (Scha?fer and
Kiefer, 2011).
Except for a small part of the named entity recog-
nition components (citations, some terminology)
and the parse ranking model, there are no further
adaptations to genre or domain of the text corpus.
This implies that the NLP workflow could be easily
and modularly adapted to other (scientific or non-
scientific) domains?mainly thanks to the generic
and comprehensive language modelling in the ERG.
The NLP preprocessing component workflow is
implemented using the Heart of Gold NLP mid-
dleware architecture (Scha?fer, 2006). It starts
with sentence boundary detection (SBR) and regu-
lar expression-based tokenization using its built-in
component JTok, followed by the trigram-based PoS
tagger TnT (Brants, 2000) trained on the Penn Tree-
bank (Marcus et al, 1993) and the named entity rec-
ognizer SProUT (Droz?dz?yn?ski et al, 2004).
2.1 Precise Preprocessing Integration with
Chart Mapping
Tagger output is combined with information from
the named entity recognizer, e.g. delivering hypo-
thetical information on citation expressions. The
combined result is delivered as input to the deep
parser PET (Callmeier, 2000) running the ERG.
Here, citations, for example, can be treated as either
persons, locations or appositions.
Concerning punctuation, the ERG can make use
of information on opening and closing quotation
marks. Such information is often not explicit in the
input text, e.g. when, as in our setup, gained through
OCR which does not distinguish between ? and ? or ?
and ?. However, a tokenizer can often guess (recon-
struct) leftness and rightness correctly. This infor-
mation, passed to the deep parser via chart mapping,
helps it to disambiguate.
2.2 Increased Processing Speed and Coverage
through Chart Pruning
In addition to a well-established discriminative max-
imum entropy model for post-analysis parse selec-
8
tion, we use an additional generative model as de-
scribed in Cramer and Zhang (2010) to restrict the
search space during parsing. This restriction in-
creases efficiency, but also coverage, because the
parse time was restricted to at most 60 CPU seconds
on a standard PC, and more sentences could now be
parsed within these bounds. A 4 GB limit for main
memory consumption was far beyond what was ever
needed. We saw a small but negligible decrease in
parsing accuracy, 5.4 % best parses were not found
due to the pruning of important chart edges.
Ninomiya et al (2006) did a very thorough com-
parison of different performance optimization strate-
gies, and among those also a local pruning strategy
similar to the one used here. There is an important
difference between the systems, in that theirs works
on a reduced context-free backbone first and recon-
structs the results with the full grammar, while PET
uses the HPSG grammar directly, with subsumption
packing and partial unpacking to achieve a similar
effect as the packed chart of a context-free parser.
 0
 10
 20
 30
 40
 50
 60
 70
 80
 0  20  40  60  80  100
sentences x 1000mean parse time (CPU s)
sentence length ??
Figure 1: Distribution of sentence length and mean parse
times for mild pruning
In total, we parsed 1,537,801 sentences, of which
57,832 (3.8 %) could not be parsed because of lexi-
con errors. Most of them were caused by OCR ar-
tifacts resulting in unexpected punctuation character
combinations. These can be identified and will be
deleted in the future.
Figure 1 displays the average parse time of pro-
cessing with a mild chart pruning setting, together
with the mean quadratic error. In addition, it con-
tains the distribution of input sentences over sen-
tence length. Obviously, the vast majority of sen-
tences has a length of at most 60 words4. The parse
times only grow mildly due to the many optimiza-
tion techniques in the original system, and also the
new chart pruning method. The sentence length dis-
tribution has been integrated into Figure 1 to show
that the predominant part of our real-world corpus
can be processed using this information-rich method
with very low parse times (overall average parse
time < 2 s per sentence).
The large amount of short inputs is at first surpris-
ing, even more so that most of these inputs can not
be parsed. Most of these inputs are non-sentences
such as headings, enumerations, footnotes, table cell
content. There are several alternatives to deal with
such input, one to identify and handle them in a pre-
processing step, another to use a special root con-
dition in the deep analysis component that is able
to combine phrases with well-defined properties for
inputs where no spanning result could be found.
We employed the second method, which has the
advantage that it handles a larger range of phenom-
ena in a homogeneous way. Figure 2 shows the
change in percentage of unparsed and timed out in-
puts for the mild pruning method with and without
the root condition combining fragments.
 0
 10
 20
 30
 40
 50
 60
 70
 80
 90
 100
 0  20  40  60  80  100
strictstrict timeoutstrict+fragmentsstrict+fragments timeout
sentence length ??
Figure 2: Unparsed and timed out sentences with and
without fragment combination
Figure 2 shows that this changes the curve for un-
parsed sentences towards more expected character-
istics and removes the uncommonly high percent-
age of short sentences for which no parse can be
computed. Together with the parses for fragmented
4It has to be pointed out that extremely long sentences also
may be non-sentences resulting from PDF extraction errors,
missing punctuation etc. No manual correction took place.
9
Figure 3: Multiple semantic tuples may be generated for a sentence
input, we get a recall (sentences with at least one
parse) over the whole corpus of 85.9 % (1,321,336
sentences), without a significant change for any of
the other measures, and with potential for further im-
provement.
3 Semantic Tuple Extraction with DMRS
In contrast to shallow parsers, the ERG not only
handles detailed syntactic analyses of phrases, com-
pounds, coordination, negation and other linguistic
phenomena that are important for extracting seman-
tic relations, but also generates a formal semantic
representation of the meaning of the input sentence
in the Minimal Recursion Semantics (MRS) repre-
sentation format (Copestake et al, 2005). It consists
of elementary predications for each word and larger
constituents, connected via argument positions and
variables, from which predicate-argument structure
can be extracted.
MRS representations resulting from deep parsing
are still relatively close to linguistic structures and
contain more detailed information than a user would
like to query and search for. Therefore, an additional
extraction and abstraction step is performed before
storing semantic structures in the search index.
Firstly, MRS is converted to DMRS (Copes-
take, 2009), a dependency-style version of MRS
that eases extraction of predicate-argument struc-
ture using the implementation in LKB (Copestake,
2002). The representation format we devised for the
search index we call semantic tuples, in fact quintu-
ples <subject, predicate, first object, second object,
adjuncts>; example in Figure 3. The basic extrac-
tion algorithm consists of the following three steps:
(1) calculate the closure for each elementary pred-
ication based on the EQ (variable equivalence) re-
lation, and group the predicates and entities in each
closure respectively; (2) extract the relations of the
groups, which results in a graph as a whole; (3) re-
cursively traverse the graph, form one semantic tu-
ple for each predicate, and fill in the corresponding
information under its scope, i.e. subject, object, etc.
In the example shown in Figure 3, entity groups
like ?our systems?, ?the baseline?, and ?good perfor-
mance on the SRL task?, as well as predicate groups
?beating? and ?achieved? are formed at the first step.
In the second step, the graph structure is extracted,
i.e., the relation between the groups. Finally, two
semantic tuples are filled in with both the predicates
and the corresponding information. Notice that the
modifier(s) of the entity belong to the same entity
group, but the modifier(s) of the predicate will be
put into the Adjuncts slot. Similarly, the coordina-
tion of the entities will be put into one entity group,
while the coordination of predicates will form mul-
tiple semantic tuples.
Since we are extracting predicate-argument struc-
ture, syntactic variations such as passive construc-
tions and relative clauses will be all ?normalized?
into the same form. Consequently, ?the book which
I read?, ?I read the book?, and ?the book was read
by me? will form the exact same semantic tuple <I,
read, the book, N/A, N/A>. The resulting tuple
structures along with their associated text are stored
in an Apache Solr/Lucene5 server which receives
queries from the Searchbench user interface.
4 Searchbench User Interface
The Searchbench user interface (UI) is a web appli-
cation running in every modern, JavaScript-enabled
web browser. As can be seen in Figure 4, the UI
is divided into three parts: (1) a sidebar on the left
(Filters View), where different filters can be set that
constrain the list of found documents; (2) a list of
found documents matching the currently set filters
in the upper right part of the UI (Results View); (3)
5http://lucene.apache.org/solr
10
Figure 4: Searchbench user interface with different filters set and currently looking at the debug menu for a sentence.
the Document View in the lower right part of the UI
with different views of the current document.
A focus in the design of the UI has been to al-
low the user to very quickly browse the papers of the
ACL Anthology and then to find small sets of rele-
vant documents based on metadata and content. This
is mainly achieved by these techniques: (i) changes
in the collection of filters automatically update the
Results View; (ii) metadata and searchable content
from both the Results View and the Document View
can easily be used with a single click as new filters;
(iii) filters can easily be removed with a single click;
(iv) manually entering filter items is assisted by sen-
sible autosuggestions computed from the corpus; (v)
accidental filter changes can easily be corrected by
going back in the browser history.
The following kinds of filters are supported:
Statements (filter by semantic statements, i.e., the
actual content of sentences, see Section 4.1), Key-
words (filter by simple keywords with a full-text
search), Topics (filter by topics of the articles that
were extracted with an extended approach of the un-
supervised term extractor of Frantzi et al (1998)),
Publication (filter by publication title/event), Au-
thors (filter by author names), Year (filter by pub-
lication year), Affiliations (filter by affiliation or-
ganizations), Affiliation Sites (filter by affiliation
cities and countries)6. Found papers always match
all currently set filters. For each filter type multi-
ple different filter items can be set; one could search
for papers written jointly by people from different
research institutes on a certain topic, for example.
Matches of the statements filter and the keywords
filter are highlighted in document snippets for each
paper in the Results View and in the currently se-
lected paper of the Document View.
Besides a header displaying the metadata of the
currently selected paper (including the automatically
extracted topics on the right), the Document View
provides three subviews of the selected paper: (1)
the Document Content View is a raw list of the sen-
tences of the paper and provides different kinds of
interaction with these sentences; (2) the PDF View
shows the original PDF version of the paper; (3) the
Citations View provides citation information includ-
6Affiliations have been added using the ACL Anthology
Network data (Radev et al, 2009).
11
ing link to the ACL Anthology Network (Radev et
al., 2009).
Figure 4 shows the search result for a query com-
bining a statement (?obtain improvements?), a topic
?dependency parsing? and the publication year 2008.
As can be seen in the Results View, six papers
match these filters; sentences with semantically sim-
ilar predicates and passive voice are found, too.
4.1 Semantic Search
The main feature which distinguishes the ACL An-
thology Searchbench from other search applications
for scientific papers is the semantic search in paper
content. This enables the search for (semantic) state-
ments in the paper content as opposed to searching
for keywords in the plain text. Our use of the term
?statement? is loosely along the lines of the same
term used in logic. Very simple sentences often
bear a single statement only, while more complex
sentences (especially when having multiple clauses)
contain multiple statements. Each of the semantic
tuples extracted from the papers of the ACL Anthol-
ogy (cf. Section 3) corresponds to a statement.
The Statements filter is responsible for the seman-
tic search. Statements used in filters may be under-
specified, e.g., one may search for statements with a
certain semantic subject but with arbitrary semantic
predicates and objects. There are two ways in which
a new statement filter can be set: (1) entering a state-
ment manually; (2) clicking a sentence in the Doc-
ument Content View and choosing the statements of
this sentence that shall be set as new statement fil-
ters (cf. Figure 5), i.e. it is possible to formulate and
refine queries ?by example?.
Figure 5: Dialog for choosing statements to be used as
new filters (for sentence ?Our systems achieved good per-
formance on the SRL task, easily beating the baseline.?).
Throughout the user interface, no distinction is
made between the different kinds of semantic ob-
jects and adjuncts so as to make it easy also for
non-linguists to use the search and to be more ro-
bust against bad analyses of the parser. Therefore,
the different semantic parts of a statement are high-
lighted in three different colors only, depending on
whether a part is the semantic subject, the semantic
predicate or anything else (object/adjunct).
In order to disengage even further from the con-
crete wording and make the semantic search even
more ?meaning-based?, we additionally search for
synonyms of the semantic predicates in statement
filters. These synonyms have been computed as an
intersection of the most frequent verbs (semantic
predicates) in the anthology corpus with WordNet
synsets (Fellbaum, 1998), the main reason being re-
duction of the number of meanings irrelevant for the
domain. This relatively simple approach could of
course be improved, e.g. by active learning from
user clicks in search results etc.
5 Summary and Outlook
We have described the ACL Anthology Search-
bench, a novel search application for scientific dig-
ital libraries. The system is fully implemented and
indexes 7,500 papers of the 8,200 parsed ones. For
the other 700, bibliographic metadata was missing.
These and the remaining 10,000 papers are currently
being processed and will be added to the search in-
dex. The goal of the Searchbench is both to serve
as a showcase for benefits and improvement of NLP
for text search and at the same time provide a use-
ful tool for researchers in Computational Linguis-
tics. We believe that the tool by now already sup-
ports targeted search in a large collection of digital
research papers better than standard web search en-
gines. An evaluation comparing Searchbench query
results with web search is in progress.
Optionally, the Searchbench runs in a linguistic
debug mode providing NLP output a typical user
would not need. These analyses are accessible from
a context menu on each sentence (cf. Figure 4). Both
a tabular view of the semantic tuples of a sentence
(cf. Figure 3) and different kinds of information re-
lated to the parsing of the sentence (including the
MRS and a parse tree) can be displayed.
Future work, for which we are urgently seek-
ing funding, could include integration of further
12
NLP-based features such as coreference resolution
or question answering, as well as citation classifi-
cation and graphical navigation along the ideas in
Scha?fer and Kasterka (2010).
Acknowledgments
We are indebted to Peter Adolphs, Bart Cramer, Dan
Flickinger, Stephan Oepen, Yi Zhang for their sup-
port with ERG and PET extensions such as chart
mapping and chart pruning. Melanie Reiplinger,
Benjamin Weitz and Leonie Gro?n helped with pre-
processing. We also thank the anonymous review-
ers for their encouraging comments. The work de-
scribed in this paper has been carried out in the
context of the project TAKE (Technologies for Ad-
vanced Knowledge Extraction), funded under con-
tract 01IW08003 by the German Federal Ministry
of Education and Research, and in the context of the
world-wide DELPH-IN consortium.
References
Peter Adolphs, Stephan Oepen, Ulrich Callmeier,
Berthold Crysmann, Daniel Flickinger, and Bernd
Kiefer. 2008. Some fine points of hybrid natural lan-
guage parsing. In Proceedings of LREC-2008, pages
1380?1387, Marrakesh, Morocco.
Steven Bird, Robert Dale, Bonnie Dorr, Bryan Gibson,
Mark Joseph, Min-Yen Kan, Dongwon Lee, Brett
Powley, Dragomir Radev, and Yee Fan Tan. 2008. The
ACL anthology reference corpus: A reference dataset
for bibliographic research. In Proceedings of LREC-
2008, pages 1755?1759, Marrakesh, Morocco.
Torsten Brants. 2000. TnT ? a statistical part-of-speech
tagger. In Proc. of ANLP, pages 224?231, Seattle, WA.
Ulrich Callmeier. 2000. PET ? A platform for experi-
mentation with efficient HPSG processing techniques.
Natural Language Engineering, 6(1):99?108.
Ann Copestake, Dan Flickinger, Ivan A. Sag, and Carl
Pollard. 2005. Minimal recursion semantics: an in-
troduction. Research on Language and Computation,
3(2?3):281?332.
Ann Copestake. 2002. Implementing Typed Feature
Structure Grammars. CSLI publications, Stanford.
Ann Copestake. 2009. Slacker semantics: why superfi-
ciality, dependency and avoidance of commitment can
be the right way to go. In Proc. of EACL, pages 1?9.
Bart Cramer and Yi Zhang. 2010. Constraining robust
constructions for broad-coverage parsing with preci-
sion grammars. In Proceedings of COLING-2010,
pages 223?231, Beijing, China.
Witold Droz?dz?yn?ski, Hans-Ulrich Krieger, Jakub Pisko-
rski, Ulrich Scha?fer, and Feiyu Xu. 2004. Shallow
processing with unification and typed feature struc-
tures ? foundations and applications. Ku?nstliche In-
telligenz, 2004(1):17?23.
Christiane Fellbaum, editor. 1998. WordNet, An Elec-
tronic Lexical Database. MIT Press.
Dan Flickinger, Stephan Oepen, and Gisle Ytrest?l.
2010. WikiWoods: Syntacto-semantic annotation for
English Wikipedia. In Proceedings of LREC-2010,
pages 1665?1671.
Dan Flickinger. 2002. On building a more efficient
grammar by exploiting types. In Dan Flickinger,
Stephan Oepen, Hans Uszkoreit, and Jun?ichi Tsujii,
editors, Collaborative Language Engineering. A Case
Study in Efficient Grammar-based Processing, pages
1?17. CSLI Publications, Stanford, CA.
Katerina T. Frantzi, Sophia Ananiadou, and Jun?ichi Tsu-
jii. 1998. The C-value/NC-value method of automatic
recognition for multi-word terms. In Proceedings of
ECDL, pages 585?604.
Mitchell P. Marcus, Beatrice Santorini, and Mary Ann
Marcinkiewicz. 1993. Building a large annotated cor-
pus of English. The Penn Treebank. Computational
Linguistics, 19:313?330.
Takashi Ninomiya, Yoshimasa Tsuruoka, Yusuke Miyao,
Kenjiro Taura, and Jun?ichi Tsujii. 2006. Fast and
scalable HPSG parsing. Traitement automatique des
langues (TAL), 46(2).
Carl Pollard and Ivan A. Sag. 1994. Head-Driven Phrase
Structure Grammar. Studies in Contemporary Lin-
guistics. University of Chicago Press, Chicago.
Dragomir R. Radev, Pradeep Muthukrishnan, and Va-
hed Qazvinian. 2009. The ACL anthology network
corpus. In Proceedings of the ACL-2009 Workshop
on Natural Language Processing and Information Re-
trieval for Digital Libraries, Singapore.
Ulrich Scha?fer and Uwe Kasterka. 2010. Scientific
authoring support: A tool to navigate in typed cita-
tion graphs. In Proceedings of the NAACL-HLT 2010
Workshop on Computational Linguistics and Writing,
pages 7?14, Los Angeles, CA.
Ulrich Scha?fer and Bernd Kiefer. 2011. Advances in
deep parsing of scholarly paper content. In Raffaella
Bernardi, Sally Chambers, Bjo?rn Gottfried, Fre?de?rique
Segond, and Ilya Zaihrayeu, editors, Advanced Lan-
guage Technologies for Digital Libraries, LNCS Hot
Topics Series. Springer. to appear.
Ulrich Scha?fer. 2006. Middleware for creating and
combining multi-dimensional NLP markup. In Pro-
ceedings of the EACL-2006 Workshop on Multi-
dimensional Markup in Natural Language Processing,
pages 81?84, Trento, Italy.
13
