Proceedings of NAACL-HLT 2013, pages 63?73,
Atlanta, Georgia, 9?14 June 2013. c?2013 Association for Computational Linguistics
Minimally Supervised Method for Multilingual Paraphrase Extraction
from Definition Sentences on the Web
Yulan Yan? Chikara Hashimoto? Kentaro Torisawa?
Takao Kawai? Jun?ichi Kazama? Stijn De Saeger??
? ? ? ?? ?? Information Analysis Laboratory
Universal Communication Research Institute
National Institute of Information and Communications Technology (NICT)
{? yulan, ? ch, ? torisawa, ??stijn}@nict.go.jp
Abstract
We propose a minimally supervised method
for multilingual paraphrase extraction from
definition sentences on the Web. Hashimoto
et al (2011) extracted paraphrases from
Japanese definition sentences on the Web, as-
suming that definition sentences defining the
same concept tend to contain paraphrases.
However, their method requires manually an-
notated data and is language dependent. We
extend their framework and develop a mini-
mally supervised method applicable to multi-
ple languages. Our experiments show that our
method is comparable to Hashimoto et al?s
for Japanese and outperforms previous unsu-
pervised methods for English, Japanese, and
Chinese, and that our method extracts 10,000
paraphrases with 92% precision for English,
82.5% precision for Japanese, and 82% preci-
sion for Chinese.
1 Introduction
Automatic paraphrasing has been recognized as an
important component for NLP systems, and many
methods have been proposed to acquire paraphrase
knowledge (Lin and Pantel, 2001; Barzilay and
McKeown, 2001; Shinyama et al, 2002; Barzilay
and Lee, 2003; Dolan et al, 2004; Callison-Burch,
2008; Hashimoto et al, 2011; Fujita et al, 2012).
We propose a minimally supervised method for
multilingual paraphrase extraction. Hashimoto et al
(2011) developed a method to extract paraphrases
from definition sentences on the Web, based on
their observation that definition sentences defining
the same concept tend to contain many paraphrases.
Their method consists of two steps; they extract def-
inition sentences from the Web, and extract phrasal
(1) a. Paraphrasing is the use of your own words to express the au-
thor?s ideas without changing the meaning.
b. Paraphrasing is defined as a process of transforming an expres-
sion into another while keeping its meaning intact.
(2) a. ?????????????????????????
???????????????? (Paraphrasing refers to
the replacement of an expression into another without changing
the semantic content.)
b. ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?
???????????????????????
????????? (Paraphrasing is a process of trans-
forming an expression into another of the same language while
preserving the meaning and content as much as possible.)
(3) a. ????????????????????????
??????? (Paraphrasing refers to the transformation
of sentence structure by the translator without changing the
meaning of original text.)
b. ?????????????????????????
(Paraphrasing is a translation method of keeping the content of
original text but not keeping the expression.)
Figure 1: Multilingual definition pairs on ?paraphrasing.?
paraphrases from the definition sentences. Both
steps require supervised classifiers trained by manu-
ally annotated data, and heavily depend on their tar-
get language. However, the basic idea is actually
language-independent. Figure 1 gives examples of
definition sentences on the Web that define the same
concept in English, Japanese, and Chinese (with En-
glish translation). As indicated by underlines, each
definition pair has a phrasal paraphrase.
We aim at extending Hashimoto et al?s method
to a minimally supervised method, thereby enabling
acquisition of phrasal paraphrases within one lan-
guage, but in different languages without manually
annotated data. The first contribution of our work
is to develop a minimally supervised method for
multilingual definition extraction that uses a clas-
sifier distinguishing definition from non-definition.
The classifier is learnt from the first sentences in
63
Defini?n	 ?sentences	 Defini?n	 ?pairs	 ? Paraphrase	 ?candidates	 ?
Ranked	 ?paraphrase	 ?candidates	 ?Classifier	Web	
Defini?on	 ?Extrac?on	 ?(Sec?on	 ?2.1)	 Paraphrase	 ?Extrac?on	 ?(Sec?on	 ?2.2)	
Ranking	 ?by	 ?Score	Automa?cally	 ?constructed	 ?training	 ?data	
Web	 Wikipedia	
Figure 2: Overall picture of our method.
Wikipedia articles, which can be regarded as the def-
inition of the title of Wikipedia article (Kazama and
Torisawa, 2007) and hence can be used as positive
examples. Our method relies on a POS tagger, a de-
pendency parser, a NER tool, noun phrase chunking
rules, and frequency thresholds for each language,
in addition to Wikipedia articles, which can be seen
as a manually annotated knowledge base. How-
ever, our method needs no additional manual anno-
tation particularly for this task and thus we catego-
rize our method as a minimally supervised method.
On the other hand, Hashimoto et al?s method heav-
ily depends on the properties of Japanese like the
assumption that characteristic expressions of defini-
tion sentences tend to appear at the end of sentence
in Japanese. We show that our method is applica-
ble to English, Japanese, and Chinese, and that its
performance is comparable to state-of-the-art super-
vised methods (Navigli and Velardi, 2010). Since
the three languages are very different we believe that
our definition extraction method is applicable to any
language as long as Wikipedia articles of the lan-
guage exist.
The second contribution of our work is to de-
velop a minimally supervised method for multi-
lingual paraphrase extraction from definition sen-
tences. Again, Hashimoto et al?s method utilizes
a supervised classifier trained with annotated data
particularly prepared for this task. We eliminate the
need for annotation and instead introduce a method
that uses a novel similarity measure considering
the occurrence of phrase fragments in global con-
texts. Our paraphrase extraction method is mostly
language-independent and, through experiments for
the three languages, we show that it outperforms
unsupervised methods (Pas?ca and Dienes, 2005;
Koehn et al, 2007) and is comparable to Hashimoto
et al?s supervised method for Japanese.
Previous methods for paraphrase (and entailment)
extraction can be classified into a distributional sim-
ilarity based approach (Lin and Pantel, 2001; Gef-
fet and Dagan, 2005; Bhagat et al, 2007; Szpek-
tor and Dagan, 2008; Hashimoto et al, 2009) and a
parallel corpus based approach (Barzilay and McK-
eown, 2001; Shinyama et al, 2002; Barzilay and
Lee, 2003; Dolan et al, 2004; Callison-Burch,
2008). The former can exploit large scale monolin-
gual corpora, but is known to be unable to distin-
guish paraphrase pairs from antonymous pairs (Lin
et al, 2003). The latter rarely mistakes antonymous
pairs for paraphrases, but preparing parallel corpora
is expensive. As with Hashimoto et al (2011), our
method is a kind of parallel corpus approach in that it
uses definition pairs as a parallel corpus. However,
our method does not suffer from a high labor cost
of preparing parallel corpora, since it can automati-
cally collect definition pairs from the Web on a large
scale. The difference between ours and Hashimoto
et al?s is that our method requires no manual label-
ing of data and is mostly language-independent.
2 Proposed Method
Our method first extracts definition sentences from
the Web, and then extracts paraphrases from the def-
inition sentences, as illustrated in Figure 2.
2.1 Definition Extraction
2.1.1 Automatic Construction of Training Data
Our method learns a classifier that classifies sen-
tences into definition and non-definition using auto-
matically constructed training data, TrDat. TrDat?s
positive examples, Pos, are the first sentences of
Wikipedia articles and the negative examples, Neg,
are randomly sampled Web sentences. The former
can be seen as definition, while the chance that the
sentences in the latter are definition is quite small.
Our definition extraction not only distinguishes
definition from non-definition but also identities the
defined term of a definition sentence, and in the
paraphrase extraction step our method couples two
definition sentences if their defined terms are identi-
cal. For example, the defined terms of (1a) and (1b)
in Figure 1 are both ?Paraphrasing? and thus the two
definition sentences are coupled. For Pos, we mark
up the title of Wikipedia article as the defined term.
For Neg, we randomly select a noun phrase in a sen-
64
(A)
N-gram definition pattern N-gram non-definition pattern
?[term] is the [term] may be
[term] is a type of [term] is not
(B)
Subsequence definition pattern Subsequence non-definition pattern
[term] is * which is located you may * [term]
[term] is a * in the was [term] * , who is
(C)
Subtree definition pattern Subtree non-definition pattern
[term] is defined as the NP [term] will not be
Table 1: Examples of English patterns.
tence and mark it up as a (false) defined term. Any
marked term is uniformly replaced with [term].
2.1.2 Feature Extraction and Learning
As features, we use patterns that are characteristic
of definition (definition patterns) and those that are
unlikely to be a part of definition (non-definition pat-
terns). Patterns are either N-grams, subsequences, or
dependency subtrees, and are mined automatically
from TrDat. Table 1 shows examples of patterns
mined by our method. In (A) of Table 1, ??? is
a symbol representing the beginning of a sentence.
In (B), ?*? represents a wildcard that matches any
number of arbitrary words. Patterns are represented
by either their words? surface form, base form, or
POS. (Chinese words do not inflect and thus we do
not use the base form for Chinese.)
We assume that definition patterns are fre-
quent in Pos but are infrequent in Neg, and
non-definition patterns are frequent in Neg but
are infrequent in Pos. To see if a given pat-
tern ? is likely to be a definition pattern, we
measure ??s probability rate Rate(?). If the
probability rate of ? is large, ? tends to be a
definition pattern. The probability rate of ? is:
Rate(?) =
freq(?,Pos)/|Pos|
freq(?,Neg)/|Neg|
, iffreq(?,Neg) 6= 0.
Here, freq(?,Pos) = |{s ? Pos : ? ? s}| and
freq(?,Neg) = |{s ? Neg : ? ? s}|. We write ? ? s
if sentence s contains ?. If freq(?,Neg) = 0,
Rate(?) is set to the largest value of all the patterns?
Rate values. Only patterns whose Rate is more
than or equal to a Rate threshold ?pos and whose
freq(?,Pos) is more than or equal to a frequency
threshold are regarded as definition patterns. Simi-
larly, we check if ? is likely to be a non-definition
pattern. Only patterns whose Rate is less or equal
English Japanese Chinese
Type Representation Pos Neg Pos Neg Pos Neg
N-gram
Surface 120 400 30 100 20 100
Base 120 400 30 100 ? ?
POS 2,000 4,000 500 500 100 400
Subsequence
Surface 120 400 30 100 20 40
Base 120 400 30 100 ? ?
POS 2,000 2,000 500 500 200 400
Subtree
Surface 5 10 5 10 5 5
Base 5 10 5 10 ? ?
POS 25 50 25 50 25 50
Table 2: Values of frequency threshold.
to a Rate threshold ?neg and whose freq(?,Neg)
is more than or equal to a frequency threshold are
regarded as non-definition patterns. The probability
rate is based on the growth rate (Dong and Li,
1999).
?pos and ?neg are set to 2 and 0.5, while the fre-
quency threshold is set differently according to lan-
guages, pattern types (N-gram, subsequence, and
subtree), representation (surface, base, and POS),
and data (Pos and Neg), as in Table 2. The thresholds
in Table 2 were determined manually, but not really
arbitrarily. Basically they were determined accord-
ing to the frequency of each pattern in our data (e.g.
how frequently the surface N-gram of English ap-
pears in English positive training samples (Pos)).
Below, we detail how patterns are acquired. First,
we acquire N-gram patterns. Then, subsequence
patterns are acquired using the N-gram patterns as
input. Finally, subtree patterns are acquired using
the subsequence patterns as input.
N-gram patterns We collect N-gram patterns
from TrDat with N ranging from 2 to 6. We filter
out N-grams using thresholds on the Rate and fre-
quency, and regard those that are kept as definition
or non-definition N-grams.
Subsequence patterns We generate subsequence
patterns as ordered combinations of N-grams with
the wild card ?*? inserted between them (we use
two or three N-grams for a subsequence). Then, we
check each of the generated subsequences and keep
it if there exists a sentence in TrDat that contains the
subsequence and whose root node is contained in the
subsequence. For example, subsequence ?[term]
is a * in the? is kept if a term-marked sentence like
?[term] is a baseball player in the Dominican Re-
public.? exists in TrDat. Then, patterns are filtered
65
out using thresholds on the Rate and frequency as
we did for N-grams.
Subtree patterns For each definition and non-
definition subsequence, we retrieve all the term-
marked sentences that contain the subsequence from
TrDat, and extract a minimal dependency subtree
that covers all the words of the subsequence from
each retrieved sentence. For example, assume that
we retrieve a term-marked sentence ?[term] is
usually defined as the way of life of a group of peo-
ple.? for subsequence ?[term] is * defined as the?.
Then we extract from the sentence the minimal de-
pendency subtree in the left side of (C) of Table 1.
Note that all the words of the subsequence are con-
tained in the subtree, and that in the subtree a node
(?way?) that is not a part of the subsequence is re-
placed with its dependency label (?NP?) assigned by
the dependency parser. The patterns are filtered out
using thresholds on the Rate and frequency.
We train a SVM classifier1 with a linear kernel,
using binary features that indicate the occurrence of
the patterns described above in a target sentence.
In theory, we could feed all the features to the
SVM classifier and let the classifier pick informa-
tive features. But we restricted the feature set for
practical reasons: the number of features would be-
come tremendously large. There are two reasons for
this. First, the number of sentences in our automati-
cally acquired training data is huge (2,439,257 posi-
tive sentences plus 5,000,000 negative sentences for
English, 703,208 positive sentences plus 1,400,000
negative sentences for Japanese and 310,072 posi-
tive sentences plus 600,000 negative sentences for
Chinese). Second, since each subsequence pattern
is generated as a combination of two or three N-
gram patterns and one subsequence pattern can gen-
erate one or more subtree patterns, using all possi-
ble features leads to a combinatorial explosion of
features. Moreover, since the feature vector will be
highly sparse with a huge number of infrequent fea-
tures, SVM learning becomes very time consuming.
In preliminary experiments we observed that when
using all possible features the learning process took
more than one week for each language. We there-
fore introduced the current feature selection method,
in which the learning process finished in one day but
1http://svmlight.joachims.org.
Original Web sentence: Albert Pujols is a baseball player.
Term-marked sentence 1: [term] is a baseball player.
Term-marked sentence 2: Albert Pujols is a [term].
Figure 3: Term-marked sentences from a Web sentence.
still obtains good results.
2.1.3 Definition Extraction from the Web
We extract a large amount of definition sen-
tences by applying this classifier to sentences in our
Web archive. Because our classifier requires term-
marked sentences (sentences in which the term be-
ing defined is marked) as input, we first have to iden-
tify all such defined term candidates for each sen-
tence. For example, Figure 3 shows a case where a
Web sentence has two NPs (two candidates of de-
fined term). Basically we pick up NPs in a sen-
tence by simple heuristic rules. For English, NPs are
identified using TreeTagger (Schmid, 1995) and two
NPs are merged into one when they are connected by
?for? or ?of?. After applying this procedure recur-
sively, the longest NPs are regarded as candidates of
defined terms and term-marked sentences are gener-
ated. For Japanese, we first identify nouns that are
optionally modified by adjectives as NPs, and allow
two NPs connected by ??? (of ), if any, to form
a larger NP. For Chinese, nouns that are optionally
modified by adjectives are considered as NPs.
Then, each term-marked sentence is given a fea-
ture vector and classified by the classifier. The term-
marked sentence whose SVM score (the distance
from the hyperplane) is the largest among those from
the same original Web sentence is chosen as the final
classification result for the original Web sentence.
2.2 Paraphrase Extraction
We use all the Web sentences classified as defini-
tion and all the sentences in Pos for paraphrase ex-
traction. First, we couple two definition sentences
whose defined term is the same. We filter out defini-
tion sentence pairs whose cosine similarity of con-
tent word vectors is less than or equal to threshold
C, which is set to 0.1. Then, we extract phrases
from each definition sentence, and generate all pos-
sible phrase pairs from the coupled sentences. In
this study, phrases are restricted to predicate phrases
that consist of at least one dependency relation and
in which all the constituents are consecutive in a
66
f1
The ratio of the number of words shared between two can-
didate phrases to the number of all of the words in the two
phrases. Words are represented by either their surface form
(f1,1), base form (f1,2) or POS (f1,3).
f2
The identity of the leftmost word (surface form (f2,1), base
form (f2,2) or POS (f2,3)) between two candidate phrases.
f3
The same as f2 except that we use the rightmost word.
There are three corresponding subfunctions (f3,1 to f3,3).
f4
The ratio of the number of words that appear in a candidate
phrase segment of a definition sentence s1 and in a segment
that is NOT a part of the candidate phrase of another def-
inition sentence s2 to the number of all the words of s1?s
candidate phrase. Words are in their base form (f4,1).
f5 The reversed (s1 ? s2) version of f4,1 (f5,1).
f6
The ratio of the number of words (the surface form) of a
shorter candidate phrase to that of a longer one (f6,1).
f7
Cosine similarity between two definition sentences from
which two candidate phrases are extracted. Only content
words in the base form are used (f7,1).
f8
The ratio of the number of parent dependency subtrees that
are shared by two candidate phrases to the number of all the
parent dependency subtrees. The parent dependency sub-
trees are adjacent to the candidate phrases and represented
by their surface form (f8,1), base form (f8,2), or POS (f8,3).
f9
The same as f8 except that we use child dependency sub-
trees. There are 3 subfunctions (f9,1 to f9,3) of f9 type.
f10
The ratio of the number of context N-grams that are shared
by two candidate phrases to the number of all the context N-
grams of both candidate phrases. The context N-grams are
adjacent to the candidate phrases and represented by either
the surface form, the base form, or POS. The N ranges from
1 to 3, and the context is either left-side or right-side. Thus,
there are 18 subfunctions (3? 3? 2).
Table 3: Local similarity subfunctions, f1,1 to f10,18.
sentence. Accordingly, if two definition sentences
that are coupled have three such predicate phrases
respectively, we get nine phrase pairs, for instance.
A phrase pair extracted from a definition pair is a
paraphrase candidate and is given a score that indi-
cates the likelihood of being a paraphrase, Score. It
consists of two similarity measures, local similarity
and global similarity, which are detailed below.
Local similarity Following Hashimoto et al, we
assume that two candidate phrases (p1, p2) tend to
be a paraphrase if they are similar enough and/or
their surrounding contexts are sufficiently similar.
Then, we calculate the local similarity (localSim) of
(p1, p2) as the weighted sum of 37 similarity sub-
functions that are grouped into 10 types (Table 3.)
For example, the f1 type consists of three subfunc-
tions, f1,1, f1,2, and f1,3. The 37 subfunctions are
inspired by Hashimoto et al?s features. Then, local-
Sim is defined as:
localSim(p1, p2) = max
(dl,dm)?DP (p1,p2)
ls(p1, p2, dl, dm).
Here, ls(p1, p2, dl, dm) =
?10
i=1
?ki
j=1
wi,j?fi,j(p1,p2,dl,dm)
ki .
DP (p1, p2) is the set of all definition sentence pairs
that contain (p1, p2). (dl, dm) is a definition sen-
tence pair containing (p1, p2). ki is the number
of subfunctions of fi type. wi,j is the weight for
fi,j . wi,j is uniformly set to 1 except for f4,1
and f5,1, whose weight is set to ?1 since they
indicate the unlikelihood of (p1, p2)?s being a
paraphrase. As the formula indicates, if there is
more than one definition sentence pair that contains
(p1, p2), localSim is calculated from the definition
sentence pair that gives the maximum value of
ls(p1, p2, dl, dm). localSim is local in the sense that
it is calculated based on only one definition pair
from which (p1, p2) are extracted.
Global similarity The global similarity (global-
Sim) is our novel similarity function. We decompose
a candidate phrase pair (p1, p2) into Comm, the com-
mon part between p1 and p2, and Diff , the difference
between the two. For example, Comm and Diff of
(?keep the meaning intact?, ?preserve the meaning?)
is (?the meaning?) and (?keep, intact?, ?preserve?).
globalSim measures the semantic similarity of
the Diff of a phrase pair. It is proposed based on
the following intuition: phrase pair (p1, p2) tend
to be a paraphrase if their surface difference (i.e.
Diff ) have the same meaning. For example, if
?keep, intact? and ?preserve? mean the same, then
(?keep the meaning intact?, ?preserve the meaning?)
is a paraphrase.
globalSim considers the occurrence of Diff in
global contexts (i.e., all the paraphrase candidates
from all the definition pairs). The globalSim of a
given phrase pair (p1, p2) is measured by basically
counting how many times the Diff of (p1, p2) ap-
pears in all the candidate phrase pairs from all the
definition pairs. The assumption is that Diff tends to
share the same meaning if it appears repeatedly in
paraphrase candidates from all definition sentence
pairs, i.e., our parallel corpus. Each occurrence of
Diff is weighted by the localSim of the phrase pair
in which Diff occurs. Precisely, globalSim is defined
as:
67
Threshold The frequency threshold of Table 2 (Section 2.1.2).
NP rule Rules for identifying NPs in sentences (Section 2.1.3).
POS list The list of content words? POS (Section 2.2).
Tagger/parser POS taggers, dependency parsers and NER tools.
Table 4: Language-dependent components.
globalSim(p1, p2) =
?
(pi,pj)?PP (p1,p2)
localSim(pi, pj)
M
.
PP (p1, p2) is the set of candidate phrase pairs
whose Diff is the same as (p1, p2).2 M is the num-
ber of similarity subfunction types whose weight is
1, i.e. M = 8 (all the subfunction types except f4
and f5). It is used to normalize the value of each
occurrence of Diff to [0, 1].3 globalSim is global
in the sense that it considers all the definition pairs
that have a phrase pair with the same Diff as a target
candidate phrase pair (p1, p2).
The final score for a candidate phrase pair is:
Score(p1, p2) = localSim(p1, p2) + ln globalSim(p1, p2).
The way of combining the two similarity functions
has been determined empirically after testing several
other ways of combining them. This ranks all the
candidate phrase pairs.
Finally, we summarize language-dependent com-
ponents that we fix manually in Table 4.
3 Experiments
3.1 Experiments of Definition Extraction
We show that our unsupervised definition extrac-
tion method is competitive with state-of-the-art su-
pervised methods for English (Navigli and Velardi,
2010), and that it extracts a large number of defini-
tions reasonably accurately for English (3,216,121
definitions with 70% precision), Japanese (651,293
definitions with 62.5% precision), and Chinese
(682,661 definitions with 67% precision).
2If there are more than one (pi, pj) in a definition pair, we
use only one of them that has the largest localSim value.
3Although we claim that our idea of using globalSim is ef-
fective, we do not claim that the above formula for calculating
is the optimal way to implement the idea. Currently we are in-
vestigating a more mathematically well-motivated model.
3.1.1 Preparing Corpora
First we describe Pos, Neg, and the Web corpus
from which definition sentences are extracted. As
the source of Pos, we used the English Wikipedia
of April 2011 (3,620,149 articles), the Japanese
Wikipedia of October 2011 (830,417 articles), and
the Chinese Wikipedia of August 2011 (365,545 ar-
ticles). We removed category articles, template ar-
ticles, list articles and so on from them. Then the
number of sentences of Pos was 2,439,257 for En-
glish, 703,208 for Japanese, and 310,072 for Chi-
nese. We verified our assumption that Wikipedia
first sentences can mostly be seen as definition by
manually checking 200 random samples from Pos.
96.5% of English Pos, 100% of Japanese Pos, and
99.5% of Chinese Pos were definitions.
As the source of Neg, we used 600 million
Japanese Web pages (Akamine et al, 2010) and
the ClueWeb09 corpus for English (about 504 mil-
lion pages) and Chinese (about 177 million pages).4
From each Web corpus, we collected the sentences
satisfying following conditions: 1) they contain 5
to 50 words and at least one verb, 2) less than half
of their words are numbers, and 3) they end with a
period. Then we randomly sampled sentences from
the collected sentences as Neg so that |Neg| was
about twice as large as |Pos|: 5,000,000 for English,
1,400,000 for Japanese, and 600,000 for Chinese.
In Section 3.1.3, we use 10% of the Web corpus as
the input to the definition classifier. The number of
sentences are 294,844,141 for English, 245,537,860
for Japanese, and 68,653,130 for Chinese.
All the sentences were POS-tagged and parsed.
We used TreeTagger and MSTParser (McDonald
et al, 2006) for English, JUMAN (Kurohashi and
Kawahara, 2009a) and KNP (Kurohashi and Kawa-
hara, 2009b) for Japanese, MMA (Kruengkrai et al,
2009) and CNP (Chen et al, 2009) for Chinese.
3.1.2 Comparison with Previous Methods
We compared our method with the state-of-the-
art supervised methods proposed by Navigli and Ve-
lardi (2010), using their WCL datasets v1.0 (http:
//lcl.uniroma1.it/wcl/), definition and non-
definition datasets for English (Navigli et al, 2010).
Specifically, we used its training data (TrDatwcl,
hereafter), which consisted of 1,908 definition and
4http://lemurproject.org/clueweb09.php/
68
Method Precision Recall F1 Accuracy
Proposeddef 86.79 86.97 86.88 89.18
WCL-1 99.88 42.09 59.22 76.06
WCL-3 98.81 60.74 75.23 83.48
Table 5: Definition classification results on TrDatwcl.
2,711 non-definition sentences, and compared the
following three methods. WCL-1 and WCL-3 are
methods proposed by Navigli and Velardi (2010).
They were trained and tested with 10 fold cross vali-
dation using TrDatwcl. Proposeddef is our method,
which used TrDat for acquiring patterns (Section
2.1.2) and training. We tested Proposeddef on each
of TrDatwcl?s 10 folds and averaged the results.
Note that, for Proposeddef , we removed sentences
in TrDatwcl from TrDat in advance for fairness.
Table 5 shows the results. The numbers for WCL-
1 and WCL-3 are taken from Navigli and Velardi
(2010). Proposeddef outperformed both methods in
terms of recall, F1, and accuracy. Thus, we conclude
that Proposeddef is comparable to WCL-1/WCL-3.
We conducted ablation tests of our method to in-
vestigate the effectiveness of each type of pattern.
When using only N-grams, F1 was 85.41. When
using N-grams and subsequences, F1 was 86.61.
When using N-grams and subtrees, F1 was 86.85.
When using all the features, F1 was 86.88. The re-
sults show that each type of patterns contribute to the
performance, but the contributions of subsequence
patterns and subtree patterns do not seem very sig-
nificant.
3.1.3 Experiments of Definition Extraction
We extracted definitions from 10% of the Web
corpus. We applied Proposeddef to the cor-
pus of each language, and the state-of-the-art su-
pervised method for Japanese (Hashimoto et al,
2011) (Hashidef , hereafter) to the Japanese corpus.
Hashidef was trained on their training data that con-
sisted of 2,911 sentences, 61.1% of which were def-
initions. Note that we removed sentences in TrDat
from 10% of the Web corpus in advance, while we
did not remove Hashimoto et al?s training data from
the corpus. This means that, for Hashidef , the train-
ing data is included in the test data.
For each method, we filtered out its positive out-
puts whose defined term appeared more than 1,000
times in 10% of the Web corpus, since those terms
tend to be too vague to be a defined term or re-
fer to an entity outside the definition sentence. For
example, if ?the college? appears more than 1,000
times in 10% of the corpus, we filter out sen-
tences like ?The college is one of three colleges
in the Coast Community College District and was
founded in 1947.? For Proposeddef , the number of
remaining positive outputs is 3,216,121 for English,
651,293 for Japanese, and 682,661 for Chinese. For
Hashidef , the number of positive outputs is 523,882.
For Proposeddef of each language, we randomly
sampled 200 sentences from the remaining positive
outputs. For Hashidef , we first sorted its output by
the SVM score in descending order and then ran-
domly sampled 200 from the top 651,293, i.e., the
same number as the remaining positive outputs of
Proposeddef of Japanese, out of all the remaining
sentences of Hashidef .
For each language, after shuffling all the samples,
two human annotators evaluated each sample. The
annotators for English and Japanese were not the au-
thors, while one of the Chinese annotators was one
of the authors. We regarded a sample as a defini-
tion if it was regarded as a definition by both an-
notators. Cohen?s kappa (Cohen, 1960) was 0.55
for English (moderate agreement (Landis and Koch,
1977)), 0.73 for Japanese (substantial agreement),
and 0.69 for Chinese (substantial agreement).
For English, Proposeddef achieved 70% precision
for the 200 samples. For Japanese, Proposeddef
achieved 62.5% precision for the 200 samples, while
Hashidef achieved 70% precision for the 200 sam-
ples. For Chinese, Proposeddef achieved 67% pre-
cision for the 200 samples. From these results, we
conclude that Proposeddef can extract a large num-
ber of definition sentences from the Web moderately
well for the three languages.
Although the precision is not very high, our ex-
periments in the next section show that we can still
extract a large number of paraphrases with high pre-
cision from these definition sentences, due mainly to
our similarity measures, localSim and globalSim.
3.2 Experiments of Paraphrase Extraction
We show (1) that our paraphrase extraction method
outperforms unsupervised methods for the three lan-
guages, (2) that globalSim is effective, and (3) that
our method is comparable to the state-of-the-art su-
69
ProposedScore: Our method. Outputs are ranked by Score.
Proposedlocal: This is the same as ProposedScore except that it ranks
outputs by localSim. The performance drop from ProposedScore
shows globalSim?s effectiveness.
Hashisup: Hashimoto et al?s supervised method. Training data is the
same as Hashimoto et al Outputs are ranked by the SVM score
(the distance from the hyperplane). This is for Japanese only.
Hashiuns: The unsupervised version of Hashisup. Outputs are
ranked by the sum of feature values. Japanese only.
SMT: The phrase table construction method of Moses (Koehn et al,
2007). We assume that Moses should extract a set of two phrases
that are paraphrases of each other, if we input monolingual par-
allel sentence pairs like our definition pairs. We used default
values for all the parameters. Outputs are ranked by the product
of two phrase translation probabilities of both directions.
P&D: The distributional similarity based method by Pas?ca and Di-
enes (2005) (their ?N-gram-Only? method). Outputs are ranked
by the number of contexts two phrases share. Following Pas?ca
and Dienes (2005), we used the parameters LC = 3 and
MaxP = 4, while MinP , which was 1 in Pas?ca and Dienes
(2005), was set to 2 since our target was phrasal paraphrases.
Table 6: Evaluated paraphrase extraction methods.
pervised method for Japanese.
3.2.1 Experimental Setting
We extracted paraphrases from definition sen-
tences in Pos and those extracted by Proposeddef in
Section 3.1.3. First we coupled two definition sen-
tences whose defined term was the same. The num-
ber of definition pairs was 3,208,086 for English,
742,306 for Japanese, and 457,233 for Chinese.
Then we evaluated six methods in Table 6.5 All
the methods except P&D took the same definition
pairs as input, while P&D?s input was 10% of the
Web corpus. The input can be seen as the same for
all the methods, since the definition pairs were de-
rived from that 10% of the Web corpus. In our ex-
periments Exp1 and Exp2 below, all evaluation sam-
ples were shuffled so that human annotators could
not know which sample was from which method.
Annotators were the same as those who conducted
the evaluation in Section 3.1.3. Cohen?s kappa (Co-
hen, 1960) was 0.83 for English, 0.88 for Japanese,
5We filtered out phrase pairs in which one phrase contained a
named entity but the other did not contain the named entity from
the output of ProposedScore, Proposedlocal, SMT , and P&D,
since most of them were not paraphrases. We used Stanford
NER (Finkel et al, 2005) for English named entity recognition
(NER), KNP for Japanese NER, and BaseNER (Zhao and Kit,
2008) for Chinese NER. Hashisup and Hashiuns did the named
entity filtering of the same kind (footnote 3 of Hashimoto et al
(2011)), and thus we did not apply the filter to them any further.
and 0.85 for Chinese, all of which indicated reason-
ably good (Landis and Koch, 1977). We regarded a
candidate phrase pair as a paraphrase if both annota-
tors regarded it as a paraphrase.
Exp1 We compared the methods that take def-
inition pairs as input, i.e. ProposedScore, Pro-
posedlocal, Hashisup, Hashiuns, and SMT . We ran-
domly sampled 200 phrase pairs from the top 10,000
for each method for evaluation. The evaluation of
each candidate phrase pair (p1, p2) was based on
bidirectional checking of entailment relation, p1 ?
p2 and p2 ? p1, with p1 and p2 embedded in con-
texts, as Hashimoto et al (2011) did. Entailment
relation of both directions hold if (p1, p2) is a para-
phrase. We used definition pairs from which candi-
date phrase pairs were extracted as contexts.
Exp2 We compared ProposedScore and P&D.
Since P&D restricted its output to phrase pairs in
which each phrase consists of two to four words,
we restricted the output of ProposedScore to 2-to-4-
words phrase pairs, too. We randomly sampled 200
from the top 3,000 phrase pairs from each method
for evaluation, and the annotators checked entail-
ment relation of both directions between two phrases
using Web sentence pairs that contained the two
phrases as contexts.
3.2.2 Results
From Exp1, we obtained precision curves in the
upper half of Figure 4. The curves were drawn from
the 200 samples that were sorted in descending order
by their score, and we plotted a dot for every 5 sam-
ples. ProposedScore outperformed Proposedlocal for
the three languages, and thus globalSim was effec-
tive. ProposedScore outperformed Hashisup. How-
ever, we observed that ProposedScore acquired many
candidate phrase pairs (p1, p2) for which p1 and p2
consisted of the same content words like ?send a
postcard to the author? and ?send the author a post-
card,? while the other methods tended to acquire
more content word variations like ?have a chance?
and ?have an opportunity.? Then we evaluated all
the methods in terms of how many paraphrases with
content word variations were extracted. We ex-
tracted from the evaluation samples only candidate
phrase pairs whose Diff contained a content word
(content word variation pairs), to see how many
70
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200
Prec
ision
(A) Top N (#Samples)  0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200(B) Top N (#Samples)  0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200(C) Top N (#Samples)
?Proposed_score?
?Proposed_local?
?SMT?
?Hashi_sup?
?Hashi_uns?
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200
Prec
ision
(a) Top N (#Samples)  0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200(b) Top N (#Samples)  0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200(c) Top N (#Samples)
?Proposed_score_cwv?
?Proposed_local_cwv?
?SMT_cwv?
?Hashi_sup_cwv?
?Hashi_uns_cwv?
Figure 4: Precision curves of Exp1: English (A)(a), Chinese (B)(b), and Japanese (C)(c).
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200
Prec
ision
(A) Top N (#Samples)  0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200(B) Top N (#Samples)  0
 0.2
 0.4
 0.6
 0.8
 1
 0  50  100  150  200(C) Top N (#Samples)
?Proposed_score?
?Proposed_score_cwv?
?Pasca?
?Pasca_cwv?
Figure 5: Precision curves of Exp2: English (A), Chinese (B), and Japanese (C).
of them were paraphrases. The lower half of Fig-
ure 4 shows the results (curves labeled with cwv).
The number of samples for ProposedScore reduced
drastically compared to the others for English and
Japanese, though precision was kept at a high level.
It is due mainly to the globalSim; the Diff of the
non-content word variation pairs appears frequently
in paraphrase candidates, and thus their globalSim
scores are high.
From Exp2, precision curves in Figure 5 were
obtained. P&D acquired more content word varia-
tion pairs as the curves labeled by cwv indicates.
However, ProposedScore?s precision outperformed
P&D?s by a large margin for the three languages.
From all of these results, we conclude (1) that our
paraphrase extraction method outperforms unsuper-
vised methods for the three languages, (2) that glob-
alSim is effective, and (3) that our method is com-
parable to the state-of-the-art supervised method for
Japanese, though our method tends to extract fewer
content word variation pairs than the others.
Table 7 shows examples of English paraphrases
extracted by ProposedScore.
is based in Halifax = is headquartered in Halifax
used for treating HIV = used to treat HIV
is a rare form = is an uncommon type
is a set = is an unordered collection
has an important role = plays a key role
Table 7: Examples of extracted English paraphrases.
4 Conclusion
We proposed a minimally supervised method for
multilingual paraphrase extraction. Our experiments
showed that our paraphrase extraction method out-
performs unsupervised methods (Pas?ca and Dienes,
2005; Koehn et al, 2007; Hashimoto et al, 2011)
for English, Japanese, and Chinese, and is compara-
ble to the state-of-the-art language dependent super-
vised method for Japanese (Hashimoto et al, 2011).
71
References
Susumu Akamine, Daisuke Kawahara, Yoshikiyo Kato,
Tetsuji Nakagawa, Yutaka I. Leon-Suematsu, Takuya
Kawada, Kentaro Inui, Sadao Kurohashi, and Yutaka
Kidawara. 2010. Organizing information on the web
to support user judgments on information credibil-
ity. In Proceedings of 2010 4th International Uni-
versal Communication Symposium Proceedings (IUCS
2010), pages 122?129.
Regina Barzilay and Lillian Lee. 2003. Learning to
paraphrase: An unsupervised approach using multiple-
sequence alignment. In Proceedings of HLT-NAACL
2003, pages 16?23.
Regina Barzilay and Kathleen R. McKeown. 2001. Ex-
tracting paraphrases from a parallel corpus. In Pro-
ceedings of the 39th Annual Meeting of the ACL joint
with the 10th Meeting of the European Chapter of the
ACL (ACL/EACL 2001), pages 50?57.
Rahul Bhagat, Patrick Pantel, and Eduard Hovy. 2007.
Ledir: An unsupervised algorithm for learning direc-
tionality of inference rules. In Proceedings of Confer-
ence on Empirical Methods in Natural Language Pro-
cessing (EMNLP2007), pages 161?170.
Chris Callison-Burch. 2008. Syntactic constraints on
paraphrases extracted from parallel corpora. In Pro-
ceedings of the 2008 Conference on Empirical Meth-
ods in Natural Language Processing, pages 196?205.
Wenliang Chen, Jun?ichi Kazama, Kiyotaka Uchimoto,
and Kentaro Torisawa. 2009. Improving dependency
parsing with subtrees from auto-parsed data. In Pro-
ceedings of the 2009 Conference on Empirical Meth-
ods in Natural Language Processing, EMNLP ?09,
pages 570?579, Singapore. Association for Computa-
tional Linguistics.
Jacob Cohen. 1960. Coefficient of agreement for nom-
inal scales. In Educational and Psychological Mea-
surement, pages 37?46.
Bill Dolan, Chris Quirk, and Chris Brockett. 2004. Un-
supervised construction of large paraphrase corpora:
exploiting massively parallel news sources. In Pro-
ceedings of the 20th international conference on Com-
putational Linguistics (COLING 2004), pages 350?
356, Geneva, Switzerland, Aug 23?Aug 27.
Guozhu Dong and Jinyan Li. 1999. Efficient mining of
emerging patterns: discovering trends and differences.
In Proceedings of the fifth ACM SIGKDD international
conference on Knowledge discovery and data mining,
KDD ?99, pages 43?52, San Diego, California, United
States.
Jenny Rose Finkel, Trond Grenager, and Christopher
Manning. 2005. Incorporating non-local information
into information extraction systems by gibbs sampling.
In Proceedings of the 43nd Annual Meeting of the As-
sociation for Computational Linguistics (ACL 2005),
pages 363?370.
Atsushi Fujita, Pierre Isabelle, and Roland Kuhn. 2012.
Enlarging paraphrase collections through generaliza-
tion and instantiation. In Proceedings of the 2012 Joint
Conference on Empirical Methods in Natural Lan-
guage Processing and Computational Natural Lan-
guage Learning (EMNLP-CoNLL 2012), pages 631?
642.
Maayan Geffet and Ido Dagan. 2005. The distributional
inclusion hypotheses and lexical entailment. In Pro-
ceedings of the 43rd Annual Meeting of the Associa-
tion for Computational Linguistics (ACL 2005), pages
107?114.
Chikara Hashimoto, Kentaro Torisawa, Kow Kuroda,
Stijn De Saeger, Masaki Murata, and Jun?ichi Kazama.
2009. Large-scale verb entailment acquisition from
the web. In Proceedings of the 2009 Conference on
Empirical Methods in Natural Language Processing
(EMNLP 2009), pages 1172?1181.
Chikara Hashimoto, Kentaro Torisawa, Stijn De Saeger,
Jun?ichi Kazama, and Sadao Kurohashi. 2011. Ex-
tracting paraphrases from definition sentences on the
web. In Proceedings of the 49th Annual Meeting of
the Association for Computational Linguistics: Hu-
man Language Technologies, pages 1087?1097, Port-
land, Oregon, USA, June. Association for Computa-
tional Linguistics.
Jun?ichi Kazama and Kentaro Torisawa. 2007. Exploit-
ing Wikipedia as external knowledge for named entity
recognition. In Proceedings of the 2007 Joint Confer-
ence on Empirical Methods in Natural Language Pro-
cessing and Computational Natural Language Learn-
ing (EMNLP-CoNLL), pages 698?707, Prague, Czech
Republic, June. Association for Computational Lin-
guistics.
Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran, Richard
Zens, Chris Dyer, Ondr?ej Bojar, Alexandra Con-
stantin, and Evan Herbst. 2007. Moses: Open source
toolkit for statistical machine translation. In Proceed-
ings of the 45th Annual Meeting of the Association for
Computational Linguistics Companion Volume Pro-
ceedings of the Demo and Poster Sessions, pages 177?
180, Prague, Czech Republic, June. Association for
Computational Linguistics.
Canasai Kruengkrai, Kiyotaka Uchimoto, Jun?ichi
Kazama, Yiou Wang, Kentaro Torisawa, and Hitoshi
Isahara. 2009. An error-driven word-character hybrid
model for joint chinese word segmentation and pos
tagging. In Proceedings of the Joint Conference of the
72
47th Annual Meeting of the ACL and the 4th Interna-
tional Joint Conference on Natural Language Process-
ing of the AFNLP, pages 513?521, Suntec, Singapore,
August. Association for Computational Linguistics.
Sadao Kurohashi and Daisuke Kawahara. 2009a.
Japanese morphological analyzer system ju-
man version 6.0 (in japanese). Kyoto University,
http://nlp.ist.i.kyoto-u.ac.jp/EN/index.php?JUMAN.
Sadao Kurohashi and Daisuke Kawahara. 2009b.
Japanese syntax and case analyzer knp version 3.0
(in japanese). Kyoto University, http://nlp.ist.i.kyoto-
u.ac.jp/EN/index.php?KNP.
J. Richard Landis and Gary G. Koch. 1977. Measure-
ment of observer agreement for categorical data. Bio-
metrics, 33(1):159?174.
Dekang Lin and Patrick Pantel. 2001. Discovery of infer-
ence rules for question answering. Natural Language
Engineering, 7(4):343?360.
Dekang Lin, Shaojun Zhao Lijuan Qin, and Ming Zhou.
2003. Identifying synonyms among distributionally
similar words. In Proceedings of the 18th Inter-
national Joint Conference on Artificial Intelligence
(IJCAI-03), pages 1492?1493.
Ryan McDonald, Kevin Lerman, and Fernando Pereira.
2006. Multilingual dependency analysis with a two-
stage discriminative parser. In Proceedings of the
Tenth Conference on Computational Natural Lan-
guage Learning, CoNLL-X ?06, pages 216?220, New
York City, New York.
Roberto Navigli and Paola Velardi. 2010. Learning
word-class lattices for definition and hypernym extrac-
tion. In Proceedings of the 48th Annual Meeting of
the Association for Computational Linguistics, pages
1318?1327, Uppsala, Sweden, July. Association for
Computational Linguistics.
Roberto Navigli, Paola Velardi, and Juana Mar??a Ruiz-
Mart??nez. 2010. An annotated dataset for extracting
definitions and hypernyms from the web. In Proceed-
ings of LREC 2010, pages 3716?3722.
Marius Pas?ca and Pe?ter Dienes. 2005. Aligning needles
in a haystack: paraphrase acquisition across the web.
In Proceedings of the Second international joint con-
ference on Natural Language Processing, IJCNLP?05,
pages 119?130, Jeju Island, Korea.
Helmut Schmid. 1995. Improvements in part-of-speech
tagging with an application to german. In Proceedings
of the ACL SIGDAT-Workshop, pages 47?50.
Yusuke Shinyama, Satoshi Sekine, and Kiyoshi Sudo.
2002. Automatic paraphrase acquisition from news ar-
ticles. In Proceedings of the 2nd international Con-
ference on Human Language Technology Research
(HLT2002), pages 313?318.
Idan Szpektor and Ido Dagan. 2008. Learning entail-
ment rules for unary template. In Proceedings of the
22nd International Conference on Computational Lin-
guistics (COLING2008), pages 849?856.
Hai Zhao and Chunyu Kit. 2008. Unsupervised seg-
mentation helps supervised learning of character tag-
ging for word segmentation and named entity recog-
nition. In Proceedings of the Sixth SIGHAN Workshop
on Chinese Language Processing, pages 106?111, Hy-
derabad, India.
73
Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 1619?1629,
Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics
Aid is Out There:
Looking for Help from Tweets during a Large Scale Disaster
Istva?n Varga? Motoki Sano? Kentaro Torisawa? Chikara Hashimoto?
Kiyonori Ohtake? Takao Kawai? Jong-Hoon Oh? Stijn De Saeger?
?Information Analysis Laboratory,
National Institute of Information and Communications Technology (NICT), Japan
{istvan, msano, torisawa, ch, kiyonori.ohtake, rovellia, stijn}@nict.go.jp
?Knowledge Discovery Research Laboratories, NEC Corporation, Japan
t-kawai@bx.jp.nec.com
Abstract
The 2011 Great East Japan Earthquake
caused a wide range of problems, and as
countermeasures, many aid activities were
carried out. Many of these problems and
aid activities were reported via Twitter.
However, most problem reports and corre-
sponding aid messages were not success-
fully exchanged between victims and lo-
cal governments or humanitarian organi-
zations, overwhelmed by the vast amount
of information. As a result, victims could
not receive necessary aid and humanitar-
ian organizations wasted resources on re-
dundant efforts. In this paper, we propose
a method for discovering matches between
problem reports and aid messages. Our
system contributes to problem-solving in
a large scale disaster situation by facilitat-
ing communication between victims and
humanitarian organizations.
1 Introduction
The 2011 Great East Japan Earthquake in March
11, 2011 killed 15,883 people and destroyed over
260,000 households (National Police Agency of
Japan, 2013). Accustomed way of living suddenly
became unmanageable and people found them-
selves in extreme conditions for months.
Just after the disaster, many people used Twitter
for posting problem reports and aid messages as
it functioned while most communication channels
suffered disruptions (Winn, 2011; Acar and Mu-
raki, 2011; Sano et al, 2012). Examples of such
problem reports and aid messages, translated from
Japanese tweets, are given below (P1, A1).
P1 My friend said infant formula is sold out. If
somebody knows shops in Sendai-city where
they still have it in stock, please let us know.
A1 At Jusco supermarket in Sendai, you can still
buy water and infant formula.
If A1 would have been forwarded to the sender
of P1, it could have helped since it would help
the ?friend? to obtain infant formula. But in re-
ality, the majority of such reports/messages, es-
pecially unforeseen ones went unnoticed amongst
the mass of information (Ohtake et al, 2013). In
addition, there were cases where many humani-
tarian organizations responded to the same prob-
lems and wasted precious resources. For instance,
many volunteers responded to problems which
were heavily reported by public media, leading
to oversupply (Saijo, 2012). Such waste of re-
sources could have been avoided if the organiza-
tions would have successfully shared the aid mes-
sages for the same problems.
Such observations motivated this work. We de-
veloped methods for recognizing problem reports
and aid messages in tweets and finding proper
matches between them. By browsing the discov-
ered matches, victims can be assisted to over-
come their problems, and humanitarian organiza-
tions can avoid redundant relief efforts. We define
problem reports, aid messages and their successful
matches as follows.
Problem report: A tweet that informs about the
possibility or emergence of a problem that re-
quires a treatment or countermeasure.
Aid message: A tweet that (1) informs about sit-
uations or actions that can be a remedy or so-
lution for a problem, or (2) informs that the
problem is solved or is about to be solved.
Problem-aid tweet match: A tweet pair is a
problem-aid tweet match (1) if the aid mes-
sage informs how to overcome the problem,
(2) if the aid message informs about the set-
1619
tlement of the problem, or (3) if the aid mes-
sage provides information which contributes
to the settlement of the problem.
In this work we excluded direct requests, such as
?Send us food!?, from problem reports. This is be-
cause it is relatively easy to recognize such direct
requests by checking mood types (i.e., imperative)
and their behavior is quite different from prob-
lem reports like ?People in Sendai are starving?.
Problem reports in this work do not directly state
which actions are required, only implying the ne-
cessity of a countermeasure through claiming the
existence of problems.
An underlying assumption of our method is that
we can find a noun-predicate dependency relation
that works as an indicator of problems and aids in
problem reports and aid messages, which we refer
to as problem nucleus and aid nucleus.1 An exam-
ple of problem nucleus is ?infant formula is sold
out? in P1, and that of aid nucleus is ?(can) buy
infant formula? in A1. Many problem-aid tweet
matches can be recognized through problem and
aid nuclei pairs.
We also assume that if the problem and aid nu-
clei match, they share the same noun. Then, the
semantics of predicates in the nuclei is the main
factor that decides whether the nuclei constitute
a match. We introduce a semantic classification
of predicates according to the framework of ex-
citation polarities proposed in Hashimoto et al
(2012). Our hypothesis is that excitation polarities
along with trouble expressions can characterize
problem reports, aid messages and their matches.
We developed a supervised method encoding such
information into its features.
An evident alternative to this approach is to use
sentiment analysis (Mandel et al, 2012; Tsagkali-
dou et al, 2011) assuming that problem reports
should include something ?bad? while aid mes-
sages describe something ?good?. However, we
will show that this does not work well in our exper-
iments. We think this is due to mismatch between
the concepts of problem/aid and sentiment polar-
ity. Note that previous work on ?demand? recogni-
tion also found similar tendencies (Kanayama and
Nasukawa, 2008).
Another issue in this task is, of course, the
context surrounding problem/aid nuclei. The fol-
1We found that out of 500 random tweets only 4.5% of
problem reports and 9.1% of aid messages did not contain
any problem report/aid message nuclei.
lowing (imaginary) tweets exemplify the problems
caused by contexts.
FP1 I do not believe infant formula is sold out
in Sendai.
FA1 At Jusco supermarket in Iwaki, you can still
buy infant formula.
The problem nuclei of FP1 and P1 are the same
but FP1 is not a problem report because of the ex-
pression ?I do not believe?. The aid nuclei of FA1
and A1 are the same but FA1 does not constitute
a proper match with P1 because FA1 and P1 re-
fer to different cities, ?Iwaki? and ?Sendai?. In
this work, the problems concerning the modality
and other semantic modifications to problem/aid
nuclei by context are dealt with by the introduc-
tion of features representing the text surrounding
the nuclei in machine learning. As for the loca-
tion problem, we apply a location recognizer to all
tweets and restrict the matching candidates to the
tweet pairs referring to the same location.
2 Approach
!"#$%"&"'()*&+*,*&-.(.+*,/+/0$0,/0,)-+$*#.(,'+
!"#$%&'("&!#")("&*#+,-.&"(
12001.+ 12001+/0$0,/0,)-+#0&*3",+
$#"4&0!+#0$"#1+$#"4&0!+,5)&05.+
/-0('&11/+&("&*#+,-.&"(
*(/+!0..*'0++*(/+,5)&05.+
$#"4&0!+#0$"#1+$#"4&0!+,5)&05.+ *(/+!0..*'0+*(/+,5)&05.+
!"#$%&'2/-0()3&&)('/)*4(
$#"4&0!+*,/+*(/+,"5,+*#0+1%0+.*!06+.*!0+'0"'#*$%()*&+&")*3",+
&")*3",+#0)"',(70#+
!"#$%&'2/-0('/)*4("&*#+,-.&"(
Figure 1: Problem-aid matching system overview.
We developed machine learning based systems
to recognize problem reports, aid messages and
problem-aid tweet matches. Figure 1 illustrates
the whole system. First, location names in tweets
are identified by matching tweets against our loca-
tion dictionary, described in Section 3. Then, each
tweet is paired with each dependency relation in
the tweet, which is a candidate of problem/aid nu-
clei and given to the problem report and aid mes-
sage recognizers. A tweet-nucleus-candidate pair
judged as problem report is combined with another
tweet-nucleus-candidate pair recognized as an aid
message if the two nuclei share the same noun and
the tweets share the same location name, and given
to the problem-aid match recognizer.
1620
In the following, problem and aid nuclei are
denoted by a noun-template pair. A template is
composed of a predicate and its argument posi-
tion. For instance, ?water supply stopped? in P2
is a problem nucleus, ?water supply recovered? in
A2 is an aid nucleus and they are denoted by the
noun-template pairs ?water supply, X stopped? and
?water supply, X recovered?.
P2 In Sendai city, water supply stopped.
A2 In Sendai city, water supply recovered.
Roughly speaking, we regard the tasks of prob-
lem report recognition and aid message recogni-
tion as the tasks of finding proper problem/aid
nuclei in tweets and our method performs these
tasks based on the semantic properties of nouns
and templates in problem/aid nucleus candidates
and their surrounding contexts.
The basic intuition behind this approach can
be explained using excitation polarity proposed in
Hashimoto et al (2012). Excitation polarity differ-
entiates templates into ?excitatory? or ?inhibitory?
with regard to the main function or effect of en-
tities referred to by their argument noun. While
excitatory templates (e.g., cause X, buy X, suf-
fer from X) entail that the main function or ef-
fect is activated or enhanced, inhibitory templates
(e.g., ruin X, prevent X, X runs out) entail that
the main function or effect is deactivated or sup-
pressed. The templates that do not fit into the
above categorization are classified as ?neutral?.
We observed that problem reports in general
included either of (A) a dependency relation be-
tween a noun referring to some trouble and an
excitatory template or (B) a dependency rela-
tion between a noun not referring to any trouble
and an inhibitory template. Examples of (A) in-
clude ?carbon monoxide poisoning, suffer from
X?, ?false rumor, spread X?. They refer to events
that activate troubles. On the other hand, (B) is
exemplified by ?school, X is collapsed?, ?battery,
X runs out?, which imply that some non-trouble
objects such as resources, appliances and facilities
are dysfunctional. We assume that if we can find
such dependency relations in tweets, the tweets are
likely to be problem reports.
Contrary, a tweet is more likely to be an aid
message when it includes either (C) a dependency
relation between a noun referring to some trouble
and an inhibitory template or (D) a dependency re-
lation between a noun not referring to any trou-
trouble non-trouble
excitatory (A) problem nucleus (D) aid nucleus
inhibitory (C) aid nucleus (B) problem nucleus
Table 1: Problem/aid-excitation matrix.
ble and an excitatory template. Examples of (C)
are ?flu, X was eradicated (in some shelter)? and
?debris, remove X?. They represent the dysfunc-
tion of troubles and can mean the solution or the
settlement of troubles. On the other hand, exam-
ples of (D) include ?school, X re-build? and ?baby
formula, buy X?. They entail that some resources
function properly or become available. These for-
mulations are summarized in Table 1.
As an interesting consequence of such a view
on problem/aid nucleus, we can say the following
regarding problem-aid tweet matchings: when a
problem nucleus and an aid nucleus are an ade-
quate match, the excitation polarities of their tem-
plates are opposite. Consider the following tweets.
P3 Some people were going back to Iwaki, but the
water system has not come back yet. It?s ter-
rible that bath is unusable.
A3 We open the bath for the public, located on
the 2F of Iwaki Kuhon temple. If you?re stay-
ing at a relief shelter and would like to take a
bath, you can use it.
?Bath is unusable? in P3 is a problem nucleus
while ?open the bath? in A3 is an aid nucleus.
Since the problem reported in P3 can be solved
with A3, they are a successful match. The in-
hibitory template ?X is unusable? indicates that
the function of ?bath?, a non-trouble expression,
is suppressed. The excitatory template ?open X?
indicates that the function of ?bath? is activated.
The same holds when we consider the noun re-
ferring to troubles like ?flu?. The polarity of the
template in a problem nucleus should be excita-
tory like ?flu is raging? while that of an aid nucleus
should be inhibitory like ?flu, X was eradicated?.
These examples keep the constraint that the prob-
lem and aid nucleus should have opposite polari-
ties when they constitute a match.
Note that the formulations of problem report,
aid message and their matches or the excitation
matrix (Table 1) were not presented to our anno-
tators and our test/training data may contain data
that contradict with the formulations. These for-
mulations constitute the hypothesis to be validated
in this work.
1621
An important point to be stressed here is that
there are problem-aid tweet matches that do not
fit into our formulations. For instance, we as-
sume that the problem nucleus and aid nucleus in
a proper match share the same noun. However,
tweet pairs such as ?There are many injured people
in Sendai city? and ?We are sending ambulances
to Sendai? can constitute a proper match, but there
is no proper problem-aid nuclei pair that share the
same noun in these tweets. (We can find the de-
pendency relations sharing ?Sendai? but they do
not express anything about the contents of prob-
lem and aid.) The point is that the tweet pairs can
be judged because people know ambulances can
be a countermeasure to injured people as world
knowledge. Introducing such world knowledge is
beyond the scope of this current study.
Also, we exclude direct requests from problem
reports. As mentioned in the introduction, identi-
fying direct requests is relatively easy, hence we
excluded them from our target.
3 Problem Report and Aid Message
Recognizers
We recognize problem reports and aid messages in
given tweets using a supervised classifier, SVMs
with linear kernel, which worked best in our pre-
liminary experiments. The feature set given to
the SVMs are summarized in the top part of Ta-
ble 2. Note that we used a common feature
set for both the problem report recognizer and
aid message recognizer and that it is categorized
into several types: features concerning trouble
expressions (TR), excitation polarity (EX), their
combination (TREX1) and word sentiment polar-
ity (WSP), features expressing morphological and
syntactic structures of nuclei and their context sur-
rounding problem/aid nuclei (MSA), features con-
cerning semantic word classes (SWC) appearing
in nuclei and their context, request phrases, such
as ?Please help us?, appearing in tweets (REQ),
and geographical locations in tweets recognized
by our location recognizer (GL). MSA is used to
express the modality of nuclei and other contex-
tual information surrounding nuclei. REQ was in-
troduced based on our observation that if there are
some requests in tweets, problem nuclei tend to
appear as justification for the requests.
We also attempted to represent nucleus template
IDs, noun IDs and their combinations directly in
our feature set to capture typical templates fre-
TR Whether the nucleus noun is a trouble/non-trouble expression.
EX1 The excitation polarity and the value of the excitation score of the
nucleus template.
TREX1 All possible combinations of trouble/non-trouble of TR and exci-
tation polarities of EX1.
WSP1 Whether the nucleus noun is positive/negative/not in theWord Sen-
timent Polarity (WSP) dictionary.
WSP2 Whether the nucleus template is positive/negative/not in the WSP
dictionary.
WSP3 Whether the nucleus template is followed by a positive/negative
word within the tweet.
MSA1 Morpheme n-grams, syntactic dependency n-grams in the tweet
and morpheme n-grams before and after the nucleus template.
(1 ? n ? 3)
MSA2 Character n-grams of the nucleus template to capture conjugation
and modality variations. (1 ? n ? 3)
MSA3 Morpheme and part-of-speech n-grams within the bunsetsu con-
taining the nucleus template to capture conjugation and modality
variations. (1 ? n ? 3) (A bunsetsu is a syntactic constituent
composed of a content word and several function words, the small-
est unit of syntactic analysis in Japanese.)
MSA4 The part-of-speech of the nucleus template?s head to capture
modality variations outside the nucleus template?s bunsetsu.
MSA5 The number of bunsetsu between the nucleus noun and the nucleus
template. We found that a long distance between the noun and the
template suggests parsing errors.
MSA6 Re-occurrence of the nucleus noun?s postpositional particle be-
tween the nucleus noun and the nucleus template. We found
that the re-occurrence of the same postpositional particle within
a clause suggests parsing errors.
SWC1 The semantic class n-grams in the tweet.
SWC2 The semantic class(es) of the nucleus noun.
REQ Presence of a request phrase in the tweet, identified from within
426 manually collected request phrases.
GL Geographical locations in the tweet identified using our location
recognizer. Existence/non-existence of locations in tweets are also
encoded.
EX2 Whether the problem and aid nucleus templates have the same or
opposite excitation polarities.
EX3 Product of the values of the excitation scores for the problem and
the aid nucleus template.
TREX2 All possible combinations of trouble/non-trouble of TR, excitation
polarity EX1 of the problem nucleus template and excitation po-
larity EX1 of the aid nucleus template.
SIM1 Common semantic word classes of the problem report and aid mes-
sage.
SIM2 Whether there are common nouns modifying the common nucleus
noun or not in the problem report and aid message.
SIM3 Whether the words in the same word class modify the common
nucleus noun or not in the problem report and aid message.
SIM4 The semantic similarity score between the problem nucleus tem-
plate and the aid nucleus template.
CTP Whether the problem nucleus template and the aid nucleus tem-
plate are in contradiction relation dictionary or not.
SSR1 Problem report recognizer?s SVM score of problem nucleus tem-
plate.
SSR2 Problem report recognizer?s SVM score of aid nucleus template.
SSR3 Aid message recognizer?s SVM score of the problem nucleus tem-
plate.
SSR4 Aid message recognizer?s SVM score of the aid nucleus template.
Table 2: Features used with the problem re-
port recognizer and the aid message recognizer
(above); additional features used in training the
problem-aid match recognizer (below).
quently appearing in problem and aid nuclei, but
since there was no improvement we omit them.
The other feature types need some non-trivial
dictionaries. In the following, we explain how we
created the dictionaries for each feature type along
with the motivation behind their introduction.
Trouble Expressions (TR) As mentioned previ-
ously, trouble expressions work as good evidence
for recognizing problem reports and aid messages.
The TR feature indicates whether the noun in the
problem/aid nucleus candidate is a trouble ex-
1622
pression or not. For this purpose, we created
a list of trouble expressions following the semi-
supervised procedure presented in De Saeger et al
(2008). After manual validation of the list, we ob-
tained 20,249 expressions referring to some trou-
bles, such as ?tsunami? and ?flu?. The value of the
TR feature is determined by checking whether the
nucleus noun is contained in the list.
Excitation Polarities (EX) The excitation po-
larities are also important in recognizing problem
reports and aid messages as mentioned before. For
constructing the dictionary for excitation polarities
of templates, we applied the bootstrapping proce-
dure in Hashimoto et al (2012) to 600 millionWeb
pages. Hashimoto?s method provides the value of
the excitation score in [?1, 1] for each template
indicating the polarities and their strength. Posi-
tive value indicates excitatory, negative value in-
hibitory and small absolute value neutral. After
manual checking of the results by the majority
vote of three human annotators (other than the au-
thors), we limited the templates to the ones that
have score values consistent with the majority vote
of the annotators, obtaining a dictionary consisting
of 7,848 excitatory, 836 inhibitory and 7,230 neu-
tral templates. The Fleiss? (1971) kappa-score was
0.48 (moderate agreement). We used the excita-
tion score values as feature values. Excitation has
already been used in many works, such as causal-
ity and contradiction extraction (Hashimoto et al,
2012) or Why-QA (Oh et al, 2013).
Word Sentiment Polarity (WSP) As we sug-
gested before, full-fledged sentiment analysis to
recognize the expressions, including clauses and
phrases, that refer to something good or bad was
not effective in our task. However, the sentiment
polarity, assigned to single words turned out to
be effective. To identify the sentiment polarity
of words, we employed the word sentiment polar-
ity dictionary used with a sentiment analysis tool
for Japanese, the Opinion Extraction Tool soft-
ware2, which is an implementation of Nakagawa
et al (2010). The dictionary includes 9,030 posi-
tive and 27,951 negative words. Note that we used
the Opinion Extraction Tool in the experiments to
check the effectiveness of the full-fledged senti-
ment analysis in this task.
Semantic Word Class (SWC) We assume that
nouns in the same semantic class behave simi-
2Provided at the ALAGIN Forum (http://www.alagin.jp/).
larly in crisis situations. For example, if ?infec-
tion? appears in a problem report, the tweets in-
cluding ?pulmonary embolism? are also likely to
be problem reports. Semantic word class features
are used to capture such tendencies. We applied
an EM-style word clustering algorithm in Kazama
and Torisawa (2008) to 600 millionWeb pages and
clustered 1 million nouns into 500 classes. This
algorithm has been used in many works, such as
relation extraction (De Saeger et al, 2011) and
Why-QA (Oh et al, 2012), and can generate vari-
ous kinds of semantically clean word classes, such
as foods, disease names, and natural disasters. We
used the word classes in tweets as features.3
Geographical Locations (GL) Our location
recognizer matches tweets against our loca-
tion dictionary. Location names and their
existence/non-existence in tweets constitute evi-
dence, thus we encoded such information into our
features. The location dictionary was created from
the Japan Post code data4 and Wikipedia, contain-
ing 2.7 million location names including cities,
schools and other facilities (Kazama et al, 2013).
4 Problem-Aid Match Recognizer
After problem report and aid message recogni-
tion, the positive outputs of the respective classi-
fiers are used as input in this step. The problem-
aid match recognizer classifies an aid message-
nucleus pair together with the problem report-
nucleus pair employing SVMs with linear ker-
nel, which performed best in this task again. The
problem-aid match recognizer uses all the features
used in the problem report recognizer and the aid
message recognizer along with additional features
regarding: excitation polarity (EX) and trouble
expressions (TR), distributional similarity (SIM),
contradiction (CTP) and SVM-scores of the prob-
lem report and aid message recognizers (SSR).
Here also we attempted to capture typical or fre-
quent matches of nuclei using template and noun
IDs and their combinations, but we did not observe
any improvement so we omit them from the fea-
ture set. The bottom part of Table 2 summarizes
the additional feature set, some of which are de-
scribed below in more detail.
3There is a slight complication here. For each noun n, EM
clustering estimates a probability distribution P (n|c?) for n
and semantic class c?. From this distribution we obtained
discrete semantic word classes by assigning each noun n to
semantic class c = argmaxc? p(c?|n).
4http://www.post.japanpost.jp/zipcode/download.html
1623
As for TR and EX, our intuition is that if a prob-
lem nucleus and an aid nucleus are an adequate
match, their excitation polarities are opposite, as
described in Section 2. We encode whether the ex-
citation polarities of nuclei templates are the same
or not in our features. Also, the excitation polar-
ities of problem and aid nuclei and TR are com-
bined (TREX1, TREX2) so that the classifier can
know whether the nuclei follow the constraint for
adequate matches described in Section 2.
As for SIM, if an aid message matches a prob-
lem report, besides the common nucleus noun, it is
reasonable to assume that certain contexts are se-
mantically similar. We capture this characteristic
in three ways. SIM1 looks for common semantic
word classes in the problem report and aid mes-
sage. SIM2 and SIM3 target the modifiers of the
common nucleus noun if they exist.
We also observed that if an aid message matches
a problem report, the problem nucleus template
and aid nucleus template are often distributionally
similar. A typical example is ?X is sold out? and
?buy X?. SIM4 captures this tendency. As the dis-
tributional similarity between templates, we used
a Bayesian distributional similarity measure pro-
posed by Kazama et al (2010).5
CTP indicates whether the problem and aid nu-
clei are in contradiction relation or not. This fea-
ture was implemented based on the observation
that when problem and aid nuclei are in contradic-
tion relation, they are often proper matches (e.g.,
?blackout, ?X starts?? and ?blackout, ?X ends??).
CTP indicates whether nucleus pairs are in the
one million contradiction phrase pairs6 automat-
ically obtained by applying a method proposed by
Hashimoto et al (2012) to 600 million Web pages.
5 Experiments
We evaluated our problem report recognizer and
problem-aid match recognizer. For the sake of
space, we give only the performance figures of the
aid message recognizer at the end of Section 5.1.
We collected tweets posted during and after
the 2011 Great East Japan Earthquake, between
March 10 and April 4, 2011. After applying
keyword-based filtering with a list of over 300
5The original similarity was defined over noun pairs and it
was estimated from dependency relations. Obtaining similar-
ity between template pairs, not noun pairs, is straightforward
given the same dependency relations. We used 600 million
Web pages for this similarity estimation.
6The precision of the pairs was reported as around 70%.
disaster related keywords, we obtained 55 million
tweets. After dependency parsing7, we used them
in our evaluation.
5.1 Problem Report Recognition
Firstly, we evaluated our problem report recog-
nizer. Particularly, we assessed the effect of ex-
citation polarities and trouble expressions in two
settings. The first is against a naturally distributed
gold standard data. The second targets problem
reports with problem nuclei unseen in the training
data.
In both experiments we observed that the per-
formance drops when excitation polarities and
trouble expressions are removed from the feature
set. The performance drop was larger in the sec-
ond experiment which suggests that the excitation
polarities and trouble expressions are more effec-
tive against unseen problem reports.
Training and test data for problem report recog-
nition consist of tweet-nucleus candidate pairs
randomly sampled from our 55 million tweet data.
The training data (R) and test data (T ) consist of
13,000 and 1,000 pairs, respectively, manually la-
beled by three annotators (other than the authors)
as problem or other. Final judgment was made by
majority vote. The Fleiss? kappa score for train-
ing and test data for annotation judgement is 0.74
(substantial agreement).
Our problem report recognizer and its variants
are listed in Table 3. Table 4 shows the evalua-
tion results. The proposed method achieved about
44% recall and nearly 80% precision, outperform-
ing all other systems in terms of precision, F-score
and average precision8. The improvement in pre-
cision when using TR&EX is statistically signif-
icant (p < 0.05).9 Note that F-measure dropped
PROPOSED: Our proposed method with all features used.
PROPOSED-*: The proposed method without the feature set de-
noted by ?*?. Here EX and TR denote all excitation po-
larity and trouble expression related features, respectively,
including their combinations (TREX1).
PROPOSED+OET: The proposed method incorporating the
classification results of problem nucleus candidates by the
Opinion Extraction Tool as additional binary features.
RULE-BASED: The method that regards only nuclei satisfying
the constraint in Table 1 as problem nuclei.
Table 3: Evaluated problem report recognizers.
7http://nlp.ist.i.kyoto-u.ac.jp/EN/index.php?KNP
8We calculate average precision using the formula: aP =?n
k=1
(Prec(k)?rel(k))
n , where Prec(k) is the precision atcut-off k and rel(k) is an indicator function equaling 1 if
the item at rank k is relevant, zero otherwise.
9Throughout this paper we performed two-tailed test of
1624
Recognition system R (%) P (%) F (%) aP (%)
PROPOSED 44.26 79.41 56.83 71.82
PROPOSED-TR&EX 45.08 74.83 56.26 69.67
PROPOSED-EX 44.67 74.66 55.89 69.90
PROPOSED-TR 43.85 74.31 55.15 69.44
PROPOSED-MSA 28.69 70.71 40.81 57.74
PROPOSED-SWC 43.42 75.97 55.25 70.61
PROPOSED-WSP 43.14 77.83 55.50 70.45
PROPOSED-REQ 42.64 76.16 55.50 54.67
PROPOSED-GL 44.14 78.34 55.50 56.46
PROPOSED+OET 44.24 79.41 56.82 71.81
RULE-BASED 30.32 67.96 41.93 n/a
Table 4: Recall (R), precision (P), F-score (F) and
average precision (aP) of the problem report rec-
ognizers.
whenever each type of feature was removed, im-
plying that each type of feature is effective in this
task. Especially note the performance drop if we
remove excitation polarities (EX), trouble expres-
sion (TR) and both excitation and trouble expres-
sion features (TR&EX), confirming that they are
crucial in recognizing problem reports with high
accuracy. Also note that the performance of PRO-
POSED+OET was actually slightly worse than that
of the proposed method. This suggests that full-
fledged sentiment analysis is not effective at least
in this setting. The rule-based method achieved
relatively high precision despite of the low recall,
demonstrating the importance of problem and aid
nuclei formulations described in Section 1.
The second experiment assessed the efficiency
of our problem report recognizer against unseen
problem nuclei under the condition that every tem-
plate in nuclei has excitation polarity. We sampled
the training and test data so that the problem nu-
cleus nouns and templates in the training and test
data are disjoint. First we created a subset of the
test data by selecting the samples which had nu-
clei with excitation templates. We call this sub-
set T ?. Next, we removed samples from training
data R if either of their problem nouns or tem-
plates appeared in the nuclei of T ?. The result-
ing new training data (called R?) and test data (T ?)
consist of 6,484 and 407 tweet-nucleus candidate
pairs, respectively. We trained our problem report
recognizer using R? and tested its performance us-
ing T ?. Figure 2 shows the precision-recall curves
obtained by changing the threshold on the SVM
scores. The effectiveness of excitation polarities
and trouble expressions was more evident in this
setting. The PROPOSED?s performance was ac-
tually better in this setting (almost 50% recall at
population proportion (Ott and Longnecker, 2010) using
SVM-threshold=0.
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 0  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1
Pre
cisi
on
Recall
PROPOSED-TRPROPOSED-EX PROPOSED-TR&EXPROPOSED
Figure 2: Precision-recall curves of problem re-
port recognizers against unseen problem nuclei.
more that 80% precision), than the previous set-
ting, showing that excitation templates and trouble
expressions are crucial in achieving high perfor-
mance especially for unseen problem nuclei. The
same was confirmed when we removed excitation
polarity and trouble expression related features,
with performance dropping by 7.43 points in terms
of average precision. The improvement in pre-
cision when using TR&EX is statistically signif-
icant (p < 0.01). This implies, assuming that we
have a wide-coverage dictionary of templates with
excitation polarities, that excitation polarities are
important in dealing with unexpected problems in
disaster situations.
We also evaluated the aid-message recognizer,
using tweet-nucleus pairs in R and T as train-
ing and test data and the annotation scheme was
also the same. The average Fleiss? kappa score
was 0.55 (moderate agreement). Our recognizer
achieved 53.82% recall and 65.67% precision and
showed similar tendencies with the problem report
recognizer, with the excitation polarities and trou-
ble expressions contributing to higher accuracy.
We can conclude that excitation polarities and
trouble expressions are important in identifying
problem reports and aid messages during disaster
situations.
5.2 Problem-Aid Matching
Next, we evaluated the performance of the
problem-aid match recognizer. We applied our
problem report recognizer and aid message recog-
nizer to all 55 million tweets and combined the
tweet-nucleus pairs judged as problem reports and
aid messages, respectively, to create the training
and test data.
The training data consists of two parts (M1 and
M2). M1 includes many variations of the aid
messages for each problem report, while M2 en-
1625
sures diversity in nouns and templates in problem
nuclei. For M1, we randomly picked up problem
reports from the output of the problem report rec-
ognizer and to each we attached up to 30 randomly
picked, distinct aid messages that have the same
nucleus noun. Building M2 follows the construc-
tion method of M1, except that: (1) we used up
to 30 distinct problem nuclei for each noun; (2)
for each problem report we attached only one ran-
domly picked aid message.
In creating the test data T2, we followed the
construction method used for M2 to assess the
performance of our proposal with a large variety
of problems. M1, M2 and T2 consist of 3,000,
6,000 and 1,000 samples, respectively. The an-
notation was done by majority vote of three hu-
man annotators (other than the authors), the aver-
age Fleiss? kappa-score for training and test data
was 0.63 (substantial agreement).
We trained the problem-aid match recognizers
of Table 5 with M1 and M2. The evaluation
results performed on T2 are shown in Table 6.
We can observe that, among the nuclei related
features, the trouble expression (TR) and excita-
tion polarity (EX) features and their combination
(TR&EX) contribute most to the performance, al-
though the contribution of nuclei related features
is less in comparison to the problem report and aid
message recognition. The improvement in preci-
sion when using TR&EX is marginally significant
(p = 0.056). Instead, morphological and syntactic
analysis (MSA) and semantic word class (SWC)
features greatly improved performance.
As the final experiments, we evaluated top-
ranking matches of our problem-aid match recog-
nizer, where the recognizer classified all the possi-
ble combinations of tweet-nuclei pairs taken from
55 million tweets. In addition, we assessed the ef-
fectiveness of excitation polarities and trouble ex-
pressions by comparing all positive matches pro-
duced by our full problem-aid match recognizer
(PROPOSED) and those produced by the problem-
aid match recognizer (PROPOSED-TR&EX) that
PROPOSED: Our proposed method with all features used.
PROPOSED-*: The proposed method without the feature set de-
noted by ?*?. Here also EX and TR denote all excitation
polarity and trouble expression related features, respec-
tively, including their combinations (TREX1 and TREX2).
RULE-BASED: The method that judges only problem-aid nuclei
combinations with opposite excitation polarities as proper
matches.
Table 5: Evaluated problem-aid match recogniz-
ers.
Matching system R (%) P (%) F (%) aP (%)
PROPOSED 30.67 70.42 42.92 55.16
PROPOSED-TR&EX 28.83 67.14 40.33 53.99
PROPOSED-EX 31.29 67.11 42.68 54.19
PROPOSED-TR 30.56 69.33 42.42 54.85
PROPOSED-MSA 13.50 53.66 21.57 44.52
PROPOSED-SWC 26.99 67.69 38.59 52.23
PROPOSED-WSP 30.61 69.51 42.50 54.81
PROPOSED-CTP 30.06 70.00 42.05 54.94
PROPOSED-SIM 29.95 70.11 41.97 54.98
PROPOSED-REQ 30.58 70.25 42.61 54.67
PROPOSED-GL 30.61 70.31 42.65 55.02
PROPOSED-SSR 30.67 69.44 42.72 54.91
RULE-BASED 15.33 17.36 16.28 n/a
Table 6: Recall (R), precision (P), F-score (F) and
average precision (aP) of the problem-aid match
recognizers.
did not use excitation polarities and trouble ex-
pressions in its feature set. Note that PROPOSED-
TR&EX was fed by the problem report and aid
message recognizers that didn?t use excitation po-
larities and trouble expressions. For both systems?
training data we used R for the problem report
and aid message recognizers; M1 and M2 for the
problem-aid matching recognizers.
PROPOSED and PROPOSED-TR&EX output 15.2
million and 13.4 million positive matches, cover-
ing 1,691 and 1,442 nucleus nouns, respectively.
Table 7 shows match samples identified with PRO-
POSED. We observed that the output of each sys-
tem was dominated by just a handful of frequent
nucleus nouns, such as ?water? or ?gasoline?. We
preferred to assess the performance of our system
against a large variation of problem-aid nuclei,
thus we restricted the number of matches to 10
for each noun10. After this restriction the number
of matches found by PROPOSED and PROPOSED-
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  1000  2000  3000  4000  5000  6000  7000  8000  9000
Pre
cisi
on
Rank
PROPOSED (unseen)PROPOSED-TR&EX (unseen)PROPOSED (all)PROPOSED-TR&EX (all)
Figure 3: Problem-aid match recognition perfor-
mance for ?all? and ?unseen? problem reports.
10Note that this setting is a pessimistic estimation of our
system?s overall performance, since according to our obser-
vations problem reports with very frequent nucleus nouns had
proper matches with a higher accuracy than problem reports
with less frequent nucleus nouns.
1626
Problem report: ???????????????????
??????????????????????????
??????????????????????????
(Starting from the 17th, the Iwaki Joban Hospital, the Iwaki
Urology Clinique, the Takebayashi Sadakichi Memorial Clin-
ique and the Izumi Central Clinique have all suspended dial-
ysis sessions. Patients are advised to urgently make contact.)
Aid message: ???????????????????
??????????????????????????
(Restart of dialysis sessions: short dialysis sessions are
available at the Iwaki Urology Clinique between 9 AM and
4 PM.)
Problem report: ??????????????????
?????????????????????????
?????????????????????????
?????
(Please spread this message. According to my father in
Sendai, there are more and more people whose phones ran
out of battery. We need phone chargers!)
Aid message: ???????????????????
???????????
([Please spread] At the City Hall of Wakabayashi-ku, Sendai,
you can recharge your phone battery.)
Table 7: Examples from the output of the proposed
method in the ?all? setting. Problem report and aid
message nuclei are boldfaced in the English trans-
lations.
TR&EX was 8,484 and 7,363, respectively.
The performance of PROPOSED and
PROPOSED-TR&EX were assessed in two
settings: ?all? and ?unseen?. For ?all?, we selected
400 problem-aid matches from the outputs of the
respective systems after applying the 10-match
restriction. For ?unseen?, first we removed the
samples from the systems? outputs if either the
nucleus noun or template pair appear in the nuclei
of the problem-aid match recognizers? training
data. Next we applied the same sampling process
as with ?all?. Three annotators (other than the
authors) manually labeled the sample sets, final
judgment being made by majority vote. The
Fleiss? kappa score for all test data was 0.73
(substantial agreement).
Figure 3 shows the systems? precision curves,
drawn from the samples whose X-axis positions
represent the ranks according to SVM scores. In
both scenarios we can confirm that excitation po-
larity and trouble expression related features con-
tribute to this task. In the ?all? setting in terms
of average precision calculated over the top 7,200
matches, PROPOSED?s 62.36% is 10.48 points
higher than that of PROPOSED-TR&EX. For un-
seen problem/aid nuclei PROPOSED method?s av-
erage precision of 58.57% calculated at the top
3,800 matches is 5.47 points higher than that of
PROPOSED-TR&EX at the same data point. The
improvement in precision when using TR&EX is
statistically significant in both settings (p < 0.01).
6 Related Work
Twitter has been observed as a platform for situ-
ational awareness during various crisis situations
(Starbird et al, 2010; Vieweg et al, 2010), as sen-
sors for an earthquake reporting system (Sakaki et
al., 2010; Okazaki and Matsuo, 2010) or to de-
tect epidemics (Aramaki et al, 2011). Besides
Twitter, blogs or forums have also been the tar-
get of community response analysis (Qu et al,
2009; Torrey et al, 2007). Similar to our work
are the ones of Neubig et al (2011) and Ishino et
al. (2012), who tackle specific problems that occur
during disasters (i.e., safety information and trans-
portation information, respectively); and Munro
(2011), who extracted ?actionable messages? (re-
quests and aids, indiscriminately), matching being
performed manually. Our work differs from (Neu-
big et al, 2011) and (Ishino et al, 2012) in that we
do not restrict the range of problem reports, and as
opposed to (Munro, 2011), matching is automatic.
Systems such as that of Seki (2011)11 or Munro
(2013)12 are successful examples of crisis crowd-
sourcing, but these require extensive human inter-
vention to coordinate useful information.
Another category of related work relevant to our
task is troubleshooting. Baldwin et al (2007) and
Raghavan et al (2010) use discussion forums to
solve technical problems using supervised learn-
ing methods, but these approaches presume that
the solution of a specific problem is within the
same thread. In our work we do not employ struc-
tural characteristics of tweets as restrictions (e.g.,
a problem report and its aid message need to be in
the same tweet chain).
7 Conclusions
In this paper, we proposed a method to dis-
cover matches between problem reports and aid
messages from tweets in large-scale disasters.
Through a series of experiments, we demonstrated
that the performance of the problem-aid match-
ing can be improved with the usage of seman-
tic orientation of excitation polarities, proposed in
(Hashimoto et al, 2012), and trouble expressions.
We are planning to deploy our system and re-
lease model files of the classifiers to assist relief
efforts in future crisis scenarios.
11http://www.sinsai.info/
12http://www.mission4636.org/
1627
References
Adam Acar and Yuya Muraki. 2011. Twitter for cri-
sis communication: Lessons learned from Japan?s
tsunami disaster. International Journal of Web
Based Communities, 7(3):392?402.
Eiji Aramaki, Sachiko Maskawa, and Mizuki Morita.
2011. Twitter catches the flu: Detecting influenza
epidemics using Twitter. In Proceedings of the Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP 2011), pages 1568?1576.
Timothy Baldwin, David Martinez, and Richard B.
Penman. 2007. Automatic thread classification for
Linux user forum information access. In Proceed-
ings of the 12th Australasian Document Computing
Symposium (ADCS 2007), pages 72?79.
Stijn De Saeger, Kentaro Torisawa, and Jun?ichi
Kazama. 2008. Looking for trouble. In Proceed-
ings of the 22nd International Conference on Com-
putational Linguistics (COLING 2008), pages 185?
192.
Stijn De Saeger, Kentaro Torisawa, Masaaki Tsuchida,
Jun?ichi Kazama, Chikara Hashimoto, Ichiro Ya-
mada, Jong-Hoon Oh, Istva?n Varga, and Yulan Yan.
2011. Relation acquisition using word classes and
partial patterns. In Proceedings of the Conference
on Empirical Methods in Natural Language Pro-
cessing (EMNLP 2011), pages 825?835.
Joseph L. Fleiss. 1971. Measuring nominal scale
agreement among many raters. Psychological Bul-
letin, 5:378?382.
Chikara Hashimoto, Kentaro Torisawa, Stijn
De Saeger, Jong-Hoon Oh, and Jun?ichi Kazama.
2012. Excitatory or inhibitory: A new semantic
orientation extracts contradiction and causality from
the web. In Proceedings of the 2012 Joint Confer-
ence on Empirical Methods in Natural Language
Processing and Computational Natural Language
Learning (EMNLP-CoNLL 2012), pages 619?630.
Aya Ishino, Shuhei Odawara, Hidetsugu Nanba, and
Toshiyuki Takezawa. 2012. Extracting transporta-
tion information and traffic problems from tweets
during a disaster: Where do you evacuate to? In
Proceedings of the Second International Conference
on Advances in Information Mining and Manage-
ment (IMMM 2012), pages 91?96.
Hiroshi Kanayama and Tetsuya Nasukawa. 2008. Tex-
tual demand analysis: Detection of users? wants and
needs from opinions. In Proceedings of the 22nd In-
ternational Conference on Computational Linguis-
tics (COLING 2008), pages 409?416.
Jun?ichi Kazama and Kentaro Torisawa. 2008. Induc-
ing gazetteers for named entity recognition by large-
scale clustering of dependency relations. In Pro-
ceedings of the 46th Annual Meeting of the Associ-
ation for Computational Linguistics: Human Lan-
guage Technologies (ACL-08: HLT), pages 407?
415.
Jun?ichi Kazama, Stijn De Saeger, Kow Kuroda,
Masaki Murata, and Kentaro Torisawa. 2010. A
Bayesian method for robust estimation of distribu-
tional similarities. In Proceedings of the 48th An-
nual Meeting of the Association for Computational
Linguistics (ACL 2010), pages 247?256.
Jun?ichi Kazama, Stijn De Saeger, Kentaro Torisawa,
Jun Goto, and Istva?n Varga. 2013. Saigaiji jouhou
e no shitsumon outo shisutemu no tekiyou no koko-
romi. (An attempt for applying question-answering
system on disaster related information). In Pro-
ceeding of the Nineteenth Annual Meeting of The
Association for Natural Language Processing. (in
Japanese).
Benjamin Mandel, Aron Culotta, John Boulahanis,
Danielle Stark, Bonnie Lewis, and Jeremy Rodrigue.
2012. A demographic analysis of online sentiment
during Hurricane Irene. In Proceedings of the Sec-
ond Workshop on Language Analysis in Social Me-
dia (LASM 2012), pages 27?36.
Robert Munro. 2011. Subword and spatiotempo-
ral models for identifying actionable information in
Haitian Kreyol. In Proceedings of the Fifteenth
Conference on Computational Natural Language
Learning (CoNLL-2011), pages 68?77.
Robert Munro. 2013. Crowdsourcing and the
crisis-affected community. Information Retrieval,
16(2):210?266.
Tetsuji Nakagawa, Kentaro Inui, and Sadao Kurohashi.
2010. Dependency tree-based sentiment classifica-
tion using CRFs with hidden variables. In Human
Language Technologies: The 2010 Annual Confer-
ence of the North American Chapter of the Associ-
ation for Computational Linguistics (NAACL HLT
2010), pages 786?794.
National Police Agency of Japan. 2013. Damage sit-
uation and public countermeasures associated with
2011 Tohoku district ? off the Pacific Ocean Earth-
quake. http://www.npa.go.jp/archive/
keibi/biki/higaijokyo_e.pdf. (accessed
on 30 April, 2013).
Graham Neubig, Yuichiroh Matsubayashi, Masato
Hagiwara, and Koji Murakami. 2011. Safety infor-
mation mining? what can NLP do in a disaster?.
In Proceedings of the 5th International Joint Con-
ference on Natural Language Processing (IJCNLP
2011), pages 965?973.
Jong-Hoon Oh, Kentaro Torisawa, Chikara Hashimoto,
Takuya Kawada, Stijn De Saeger, Jun?ichi Kazama,
and Yiou Wang. 2012. Why question answering
using sentiment analysis and word classes. In Pro-
ceedings of the 2012 Joint Conference on Empirical
Methods in Natural Language Processing and Com-
putational Natural Language Learning (EMNLP-
CoNLL 2012), pages 368?378.
1628
Jong-Hoon Oh, Kentaro Torisawa, Chikara Hashimoto,
Motoki Sano, Stijn De Saeger, and Kiyonori Ohtake.
2013. Why-question answering using intra- and
inter-sentential causal relations. In Proceedings of
the 51st Annual Meeting of the Association for Com-
putational Linguistics (ACL 2013).
Kiyonori Ohtake, Kentaro Torisawa, Jun Goto, and
Stijn De Saeger. 2013. Saigaiji ni okeru hi-
saisha to kyuuen kyuujosha kan no souhoko komyu-
nikeeshon. (Bi-directional communication between
victims and rescures during a crisis). In Proceeding
of the Nineteenth Annual Meeting of The Association
for Natural Language Processing. (in Japanese).
Makoto Okazaki and Yutaka Matsuo. 2010. Seman-
tic Twitter: Analyzing tweets for real-time event
notification. In Proceedings of the 2008/2009 in-
ternational conference on Social software: Re-
cent trends and developments in social software
(BlogTalk 2008), pages 63?74.
R. Lyman Ott and Michael T. Longnecker, 2010. An
Introduction to Statistical Methods and Data Analy-
sis, chapter 10.2. Brooks Cole, 6th edition.
Yan Qu, Philip Fei Wu, and Xiaoqing Wang. 2009.
Online community response to major disaster: A
study of Tianya forum in the 2008 Sichuan Earth-
quake. In 42st Hawaii International International
Conference on Systems Science (HICSS-42), pages
1?11.
Preethi Raghavan, Rose Catherine, Shajith Ikbal,
Nanda Kambhatla, and Debapriyo Majumdar. 2010.
Extracting problem and resolution information from
online discussion forums. In Proceedings of the
16th International Conference on Management of
Data (COMAD 2010).
Takeo Saijo. 2012. Hito-o tasukeru sungoi shikumi. (A
stunning system that saves people). Diamond Inc.
(in Japanese).
Takeshi Sakaki, Makoto Okazaki, and Yutaka Matsuo.
2010. Earthquake shakes Twitter users: Real-time
event detection by social sensors. In Proceedings
of the 19th International Conference on World Wide
Web (WWW 2010), pages 851?860.
Motoki Sano, Istva?n Varga, Jun?ichi Kazama, and Ken-
taro Torisawa. 2012. Requests in tweets dur-
ing a crisis: A systemic functional analysis of
tweets on the Great East Japan Earthquake and
the Fukushima Daiichi nuclear disaster. In Pa-
pers from the 39th International Systemic Func-
tional Congress (ISFC39), pages 135?140.
Haruyuki Seki. 2011. Higashi-nihon daishinsai fukkou
shien platform sinsai.info no naritachi to kongo no
kadai. (The organizational structure of sinsai.info
restoration support platform for the 2011 Great East
Japan Earthquake and future challenges). Journal of
digital practices, 2(4):237?241. (in Japanese).
Kate Starbird, Leysia Palen, Amanda L. Hughes, and
Sarah Vieweg. 2010. Chatter on the red: What
hazards threat reveals about the social life of mi-
croblogged information. In Proceedings of The
2010 ACM Conference on Computer Supported Co-
operative Work (CSCW 2010), pages 241?250.
Cristen Torrey, Moira Burke, Matthew L. Lee,
Anind K. Dey, Susan R. Fussell, and Sara B. Kiesler.
2007. Connected giving: Ordinary people coordi-
nating disaster relief on the Internet. In Proceedings
of the 40th Annual Hawaii International Conference
on System Sciences (HICSS-40), pages 179?188.
Katerina Tsagkalidou, Vassiliki Koutsonikola, Athena
Vakali, and Konstantinos Kafetsios. 2011. Emo-
tional aware clustering on micro-blogging sources.
In Proceedings of the 4th international conference
on Affective computing and intelligent interaction
(ACII 2011), pages 387?396.
Sarah Vieweg, Amanda L. Hughes, Kate Starbird, and
Leysia Palen. 2010. Microblogging during two nat-
ural hazards events: What Twitter may contribute
to situational awareness. In Proceedings of the
SIGCHI Conference on Human Factors in Comput-
ing Systems (CHI 2010), pages 1079?1088.
Patrick Winn. 2011. Japan tsunami disaster: As Japan
scrambles, Twitter reigns. GlobalPost, 18 March.
1629
