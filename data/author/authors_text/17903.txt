Proceedings of the 13th Conference of the European Chapter of the Association for Computational Linguistics, pages 16?19,
Avignon, France, April 23 - 27 2012. c?2012 Association for Computational Linguistics
TransAhead: A Writing Assistant for CAT and CALL 
 
*Chung-chi Huang  ++Ping-che Yang  *Mei-hua Chen *Hung-ting Hsieh  +Ting-hui Kao 
 
   
+Jason S. Chang 
*ISA, NTHU, HsinChu, Taiwan, R.O.C.  
++III, Taipei, Taiwan, R.O.C. +CS, NTHU, HsinChu, Taiwan, R.O.C. 
{u901571,maciaclark,chen.meihua,vincent732,maxis1718,jason.jschang}gmail.com 
 
Abstract 
We introduce a method for learning to 
predict the following grammar and text 
of the ongoing translation given a source 
text. In our approach, predictions are 
offered aimed at reducing users? burden 
on lexical and grammar choices, and 
improving productivity. The method 
involves learning syntactic phraseology 
and translation equivalents. At run-time, 
the source and its translation prefix are 
sliced into ngrams to generate subsequent 
grammar and translation predictions. We 
present a prototype writing assistant, 
TransAhead1, that applies the method to 
where computer-assisted translation and 
language learning meet. The preliminary 
results show that the method has great 
potentials in CAT and CALL (significant 
boost in translation quality is observed). 
1.  Introduction 
More and more language learners use the MT 
systems on the Web for language understanding 
or learning. However, web translation systems 
typically suggest a, usually far from perfect, one-
best translation and hardly interact with the user. 
Language learning/sentence translation could 
be achieved more interactively and appropriately 
if a system recognized translation as a 
collaborative sequence of the user?s learning and 
choosing from the machine-generated predictions 
of the next-in-line grammar and text and the 
machine?s adapting to the user?s accepting 
/overriding the suggestions. 
Consider the source sentence ????????
?????????? (We play an important role 
in closing this deal). The best learning 
environment is probably not the one solely 
                                                          
1Available at http://140.114.214.80/theSite/TransAhead/ 
which, for the time being, only supports Chrome browsers. 
providing the automated translation. A good 
learning environment might comprise a writing 
assistant that gives the user direct control over 
the target text and offers text and grammar 
predictions following the ongoing translations. 
We present a new system, TransAhead, that 
automatically learns to predict/suggest the 
grammatical constructs and lexical translations 
expected to immediately follow the current 
translation given a source text, and adapts to the 
user?s choices. Example TransAhead responses 
to the source ?????????????????? 
and the ongoing translation ?we? and ?we play 
an important role? are shown in Figure 12(a) and 
(b) respectively. TransAhead has determined the 
probable subsequent grammatical constructions 
with constituents lexically translated, shown in 
pop-up menus (e.g., Figure 1(b) shows a 
prediction ?IN[in] VBG[close, end, ?]? due to 
the history ?play role? where lexical items in 
square brackets are lemmas of potential 
translations). TransAhead learns these constructs 
and translations during training. 
At run-time, TransAhead starts with a source 
sentence, and iteratively collaborates with the 
user: by making predictions on the successive 
grammar patterns and lexical translations, and by 
adapting to the user?s translation choices to 
reduce source ambiguities (e.g., word 
segmentation and senses). In our prototype, 
TransAhead mediates between users and 
automatic modules to boost users? writing/ 
translation performance (e.g., productivity). 
2.  Related Work 
CAT has been an area of active research. Our 
work addresses an aspect of CAT focusing on 
language learning. Specifically, our goal is to 
build a human-computer collaborative writing 
assistant: helping the language learner with in- 
text  grammar  and  translation  and  at  the  same 
                                                          
2
 Note that grammatical constituents (in all-capitalized 
words) are represented using Penn parts-of-speech and the 
history based on the user input is shown in shades. 
16
 Figure 1. Example TransAhead responses to a source text under the translation (a) ?we? and (b) ?we play an important role?. Note 
that the grammar/text predictions of (a) and (b) are not placed directly under the current input focus for space limit. (c) and (d) 
depict predominant grammar constructs which follow and (e) summarizes the translations for the source?s character-based ngrams. 
 
time updating the system?s segmentation 
/translation options through the user?s word 
choices. Our intended users are different from 
those of the previous research focusing on what 
professional translator can bring for MT systems 
(e.g., Brown and Nirenburg, 1990). 
More recently, interactive MT (IMT) systems 
have begun to shift the user?s role from analyses 
of the source text to the formation of the target 
translation. TransType project (Foster et al 2002) 
describes such pioneering system that supports 
next word predictions. Koehn (2009) develops 
caitra which displays one phrase translation at a 
time and offers alternative translation options. 
Both systems are similar in spirit to our work. 
The main difference is that we do not expect the 
user to be a professional translator and we 
provide translation hints along with grammar 
predictions to avoid the generalization issue 
facing phrase-based system. 
Recent work has been done on using fully-
fledged statistical MT systems to produce target 
hypotheses completing user-validated translation 
prefix in IMT paradigm. Barrachina et al(2008) 
investigate the applicability of different MT 
kernels within IMT framework. Nepveu et al
(2004) and Ortiz-Martinez et al(2011) further 
exploit user feedbacks for better IMT systems 
and user experience. Instead of trigged by user 
correction, our method is triggered by word 
delimiter and assists in target language learning. 
In contrast to the previous CAT research, we 
present a writing assistant that suggests 
subsequent grammar constructs with translations 
and interactively collaborates with learners, in 
view of reducing users? burden on grammar and 
word choice and enhancing their writing quality. 
3.  The TransAhead System 
3.1 Problem Statement 
For CAT and CALL, we focus on predicting a 
set of grammar patterns with lexical translations 
likely to follow the current target translation 
given a source text. The predictions will be 
examined by a human user directly. Not to 
overwhelm the user, our goal is to return a 
reasonable-sized set of predictions that contain 
suitable word choices and correct grammar to 
choose and learn from. Formally speaking, 
Problem Statement: We are given a target-
language reference corpus Ct, a parallel corpus 
Cst, a source-language text S, and its target 
translation prefix Tp. Our goal is to provide a set 
of predictions based on Ct and Cst likely to 
further translate S in terms of grammar and text. 
For this, we transform S and Tp into sets of 
ngrams such that the predominant grammar 
constructs with suitable translation options 
following Tp are likely to be acquired. 
3.2  Learning to Find Pattern and Translation 
We attempt to find syntax-based phraseology and 
translation equivalents beforehand (four-staged) 
so that a real-time system is achievable. 
Firstly, we syntactically analyze the corpus Ct. 
In light of the phrases in grammar book (e.g., 
one?s in ?make up one?s mind?), we resort to 
parts-of-speech for syntactic generalization. 
Secondly, we build up inverted files of the words 
in Ct for the next stage (i.e., pattern grammar 
generation). Apart from sentence and position 
information, a word?s lemma and part-of-speech 
(POS) are also recorded. 
(b) 
Source text: 
???????????????? 
(a) 
Pop-up predictions/suggestions: 
we MD VB[play, act, ..] , ? 
we VBP[play, act, ..] DT , ? 
we VBD[play, act, ..] DT , ? 
Pop-up predictions/suggestions: 
play role IN[in] VBG[close, end, ..] , ? 
important role IN[in] VBG[close, end, ..] , ? 
role IN[in] VBG[close, end, ..] , ? 
(c) 
(d) 
(e) 
Patterns for ?we?: 
we MD VB , ?, 
we VBP DT , ?, 
we VBD DT , ? 
Patterns for ?we play an important role?: 
play role IN[in] DT , 
play role IN[in] VBG , ?, 
important role IN[in] VBG , ?, 
role IN[in] VBG , ? 
Translations for the source text: 
????: we, ?; ????: close, end, ?;  ?; ????: 
play, ?; ????: critical, ?; ?; ???: act, ?; ?; 
???: heavy, ?; ???: will, wish, ?; ???: cents, ?; 
???: outstanding, ? 
Input your source text and start to interact with TransAhead! 
17
We then leverage the procedure in Figure 2 to 
generate grammar patterns for any given 
sequence of words (e.g., contiguous or not). 
 
Figure 2. Automatically generating pattern grammar. 
 
The algorithm first identifies the sentences 
containing the given sequence of words, query. 
Iteratively, Step (3) performs an AND operation 
on the inverted file, InvList, of the current word 
wi and interInvList, a previous intersected results. 
Afterwards, we analyze query?s syntax-based 
phraseology (Step (5)). For each element of the 
form ([wordPosi(w1),?,wordPosi(wn)], sentence 
number) denoting the positions of query?s words 
in the sentence, we generate grammar pattern 
involving replacing words with POS tags and 
words in wordPosi(wi) with lemmas, and 
extracting fixed-window3  segments surrounding 
query from the transformed sentence. The result 
is a set of grammatical, contextual patterns. 
The procedure finally returns top N 
predominant syntactic patterns associated with 
the query. Such patterns characterizing the 
query?s word usages follow the notion of pattern 
grammar in (Hunston and Francis, 2000) and are 
collected across the target language. 
In the fourth and final stage, we exploit Cst for 
bilingual phrase acquisition, rather than a manual 
dictionary, to achieve better translation coverage 
and variety. We obtain phrase pairs through 
leveraging IBM models to word-align the bitexts, 
?smoothing? the directional word alignments via 
grow-diagonal-final, and extracting translation 
equivalents using (Koehn et al 2003). 
3.3  Run-Time Grammar and Text Prediction 
Once translation equivalents and phraseological 
tendencies are learned, TransAhead then 
predicts/suggests the following grammar and text 
of a translation prefix given the source text using 
the procedure in Figure 3. 
We first slice the source text S and its 
translation prefix Tp into character-level and 
                                                          
3
 Inspired by (Gamon and Leacock, 2010). 
word-level ngrams respectively. Step (3) and (4) 
retrieve the translations and patterns learned 
from Section 3.2. Step (3) acquires the active 
target-language vocabulary that may be used to 
translate the source text. To alleviate the word 
boundary issue in MT raised by Ma et al(2007), 
TransAhead non-deterministically segments the 
source text using character ngrams and proceeds 
with collaborations with the user to obtain the 
segmentation for MT and to complete the 
translation. Note that a user vocabulary of 
preference (due to users? domain of knowledge 
or errors of the system) may be exploited for 
better system performance. On the other hand, 
Step (4) extracts patterns preceding with the 
history ngrams of {tj}. 
 
Figure 3. Predicting pattern grammar and translations. 
 
In Step (5), we first evaluate and rank the 
translation candidates using linear combination: 
( ) ( )( ) ( )1 1 1 2 2   i i pP t s P s t P t T? ?? + + ?  
where ?i is combination weight, P1 and P2 are 
translation and language model respectively, and 
t is one of the translation candidates under S and 
Tp. Subsequently, we incorporate the lemmatized 
translation candidates into grammar constituents 
in GramOptions. For example, we would include 
?close? in pattern ?play role IN[in] VBG? as 
?play role IN[in] VBG[close]?. 
At last, the algorithm returns the 
representative grammar patterns with confident 
translations expected to follow the ongoing 
translation and further translate the source. This 
algorithm will be triggered by word delimiter to 
provide an interactive environment where CAT 
and CALL meet. 
4.  Preliminary Results 
To train TransAhead, we used British National 
Corpus and Hong Kong Parallel Text and 
deployed GENIA tagger for POS analyses. 
To evaluate TransAhead in CAT and CALL, 
we introduced it to a class of 34 (Chinese) first-
year college students learning English as foreign 
language. Designed to be intuitive to the general 
public, esp. language learners, presentational 
tutorial lasted only for a minute. After the tutorial, 
the participants were asked to translate 15 
procedure PatternFinding(query,N,Ct) (1)  interInvList=findInvertedFile(w1 of query) 
for each word wi in query except for w1 (2)     InvList=findInvertedFile(wi) (3a)   newInterInvList= ? ; i=1; j=1 
(3b)   while i<=length(interInvList) and j<=lengh(InvList) 
(3c)      if interInvList[i].SentNo==InvList[j].SentNo 
(3d)         Insert(newInterInvList, interInvList[i],InvList[j]) 
else 
(3e)         Move i,j accordingly 
(3f)    interInvList=newInterInvList 
(4) Usage= ?  
for each element in interInvList 
(5)     Usage+={PatternGrammarGeneration(element,Ct)} (6) Sort patterns in Usage in descending order of frequency (7) return the N patterns in Usage with highest frequency 
procedure MakePrediction(S,Tp) 
(1) Assign sliceNgram(S) to {si} (2) Assign sliceNgram(Tp) to {tj} (3) TransOptions=findTranslation({si},Tp) (4) GramOptions=findPattern({tj}) (5) Evaluate translation options in TransOptions 
           and incorporate them into GramOptions (6) Return GramOptions 
18
Chinese texts from (Huang et al 2011a) one by 
one (half with TransAhead assistance, and the 
other without). Encouragingly, the experimental 
group (i.e., with the help of our system) achieved 
much better translation quality than the control 
group in BLEU (Papineni et al 2002) (i.e., 
35.49 vs. 26.46) and significantly reduced the 
performance gap between language learners and 
automatic decoder of Google Translate (44.82).  
We noticed that, for the source ?????????
?????????, 90% of the participants in the 
experimental group finished with more 
grammatical and fluent translations (see Figure 4) 
than (less interactive) Google Translate (?We 
conclude this transaction plays an important 
role?). In comparison, 50% of the translations of 
the source from the control group were erroneous. 
 
Figure 4. Example translations with TransAhead assistance. 
 
Post-experiment surveys indicate that a) the 
participants found TransAhead intuitive enough 
to collaborate with in writing/translation; b) the 
participants found TransAhead suggestions 
satisfying, accepted, and learned from them; c) 
interactivity made translation and language 
learning more fun and the participants found 
TransAhead very recommendable and would like 
to use the system again in future translation tasks. 
5.  Future Work and Summary 
Many avenues exist for future research and 
improvement. For example, in the linear 
combination, the patterns? frequencies could be 
considered and the feature weight could be better 
tuned. Furthermore, interesting directions to 
explore include leveraging user input such as 
(Nepveu et al 2004) and (Ortiz-Martinez et al 
2010) and serially combining a grammar checker 
(Huang et al 2011b). Yet another direction 
would be to investigate the possibility of using 
human-computer collaborated translation pairs to 
re-train word boundaries suitable for MT. 
In summary, we have introduced a method for 
learning to offer grammar and text predictions 
expected to assist the user in translation and 
writing (or even language learning). We have 
implemented and evaluated the method. The 
preliminary results are encouragingly promising, 
prompting us to further qualitatively and 
quantitatively evaluate our system in the near 
future (i.e., learners? productivity, typing speed 
and keystroke ratios of ?del? and ?backspace? 
(possibly hesitating on the grammar and lexical 
choices), and human-computer interaction, 
among others). 
Acknowledgement 
This study is conducted under the ?Project 
Digital Convergence Service Open Platform? of 
the Institute for Information Industry which is 
subsidized by the Ministry of Economy Affairs 
of the Republic of China. 
References  
S. Barrachina, O. Bender, F. Casacuberta, J. Civera, E. 
Cubel, S. Khadivi, A. Lagarda, H. Ney, J. Tomas, E. 
Vidal, and J.-M. Vilar. 2008. Statistical approaches to 
computer-assisted translation. Computer Linguistics, 
35(1): 3-28. 
R. D. Brown and S. Nirenburg. 1990. Human-computer 
interaction for semantic disambiguation. In Proceedings 
of COLING, pages 42-47. 
G. Foster, P. Langlais, E. Macklovitch, and G. Lapalme. 
2002. TransType: text prediction for translators. In 
Proceedings of ACL Demonstrations, pages 93-94. 
M. Gamon and C. Leacock. 2010. Search right and thou 
shalt find ? using web queries for learner error 
detection. In Proceedings of the NAACL Workshop on 
Innovative Use of NLP for Building Educational 
Applications, pages 37-44. 
C.-C. Huang, M.-H. Chen, S.-T. Huang, H.-C. Liou, and J. 
S. Chang. 2011a. GRASP: grammar- and syntax-based 
pattern-finder in CALL. In Proceedings of ACL. 
C.-C. Huang, M.-H. Chen, S.-T. Huang, and J. S. Chang. 
2011b. EdIt: a broad-coverage grammar checker using 
pattern grammar. In Proceedings of ACL. 
S. Hunston and G. Francis. 2000. Pattern Grammar: A 
Corpus-Driven Approach to the Lexical Grammar of 
English. Amsterdam: John Benjamins. 
P. Koehn, F. J. Och, and D. Marcu. 2003. Statistical phrase-
based translation. In Proceedings of NAACL. 
P. Koehn. 2009. A web-based interactive computer aided 
translation tool. In Proceedings of ACL. 
Y. Ma, N. Stroppa, and A. Way. 2007. Bootstrapping word 
alignment via word packing. In Proceedings of ACL. 
L. Nepveu, G. Lapalme, P. Langlais, and G. Foster. 2004. 
Adaptive language and translation models for interactive 
machine translation. In Proceedings of EMNLP. 
Franz Josef Och and Hermann Ney. 2003. A systematic 
Comparison of Various Statistical Alignment Models. 
Computational Linguistics, 29(1):19-51. 
D. Ortiz-Martinez, L. A. Leiva, V. Alabau, I. Garcia-Varea, 
and F. Casacuberta. 2011. An interactive machine 
translation system with online learning. In Proceedings 
of ACL System Demonstrations, pages 68-73. 
K. Papineni, S. Roukos, T. Ward, W.-J. Zhu. 2002. Bleu: a 
method for automatic evaluation of machine translation. 
In Proceedings of ACL, pages 311-318. 
1. we play(ed) a critical role in closing/sealing this/the deal. 
2. we play(ed) an important role in ending/closing this/the deal. 
19
Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 139?144,
Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics
Linggle: a Web-scale Linguistic Search Engine for Words in Context    Joanne Boisson+, Ting-Hui Kao*, Jian-Cheng Wu*, Tzu-His Yen*, Jason S. Chang* +Institute of Information Systems and Applications *Department of Computer Science National Tsing Hua University HsinChu, Taiwan, R.O.C. 30013 {joanne.boisson, maxis1718, wujc86, joseph.yen, jason.jschang} @gmail.com     Abstract 
In this paper, we introduce a Web-scale lin-guistics search engine, Linggle, that retrieves lexical bundles in response to a given query. The query might contain keywords, wildcards, wild parts of speech (PoS), synonyms, and ad-ditional regular expression (RE) operators. In our approach, we incorporate inverted file in-dexing, PoS information from BNC, and se-mantic indexing based on Latent Dirichlet Al-location with Google Web 1T. The method in-volves parsing the query to transforming it in-to several keyword retrieval commands. Word chunks are retrieved with counts, further filter-ing the chunks with the query as a RE, and fi-nally displaying the results according to the counts, similarities, and topics. Clusters of synonyms or conceptually related words are also provided.  In addition, Linggle provides example sentences from The New York Times on demand. The current implementation of Linggle is the most functionally comprehen-sive, and is in principle language and dataset independent. We plan to extend Linggle to provide fast and convenient access to a wealth of linguistic information embodied in Web scale datasets including Google Web 1T and Google Books Ngram for many major lan-guages in the world. 1 Introduction As a non-native speaker writing in English, one encounters many problems. Doubts concerning the usage of a preposition, the mandatory presen-ce of a determiner, the correctness of the associa-tion of a verb with an object, or the need for syn-onyms of a term in a given context are issues that arise frequently. Printed collocation dictionaries and reference tools based on compiled corpora offer limited coverage of word usage while knowledge of collocations is vital to acquire a 
good level of linguistic competency. We propose to address these limitations with a comprehen-sive system aimed at helping the learners ?know a word by the company it keeps? (Firth, 1957). Linggle (linggle.com). The system based on Web-scaled datasets is designed to be a broad coverage language reference tool for English Second Language learners (ESL). It is conceived to search information related to word usage in context under various conditions. First, we build an inverted file index for the Google Web 1T n-grams to support queries with RE-like patterns including PoS and synonym matches. For example, for the query ?$V $D +important role?, Linggle retrieves 4-grams that start with a verb and a determiner followed by a synonym of important and the keyword role (e.g., play a significant role 202,800). A natural lan-guage interface is also available for users who are less familiar with pattern-based searches. For example, the question ?How can I describe a beach?? would retrieve two word chunks such as ?sandy beach 413,300? and ?rocky beach 16,800?. The n-gram search implementation is achieved through filtering, re-indexing, populat-ing an HBase database with the Web 1T n-grams and augmenting them with the most frequent PoS for words (without disambiguation) derived from the British National Corpus (BNC).   The n-grams returned for a query can then be linked to examples extracted from the New York Times Corpus (Sandhaus, 2008) in order to provide full sentential context for more effective learning.  In some situations, the user might need to search for words in a specific syntactic relation (e.g., Verb-Object collocation). The query absorb $N in n-grams display mode returns all the nouns that follow the verb ordered by decreasing n-gram counts. Some of these nouns might not be objects of the verb absorb. In contrast, the same 
139
query in cluster display mode will control that two words have been labeled verb-object by a parser. Moreover, n-grams grouped by object topic/domain give the learner an overview of the usage of the verb. For example the verb absorb takes clusters of objects related to the topics liq-uid, energy, money, knowledge, and population.  
  Figure 1. An example Linggle search for the que-ry ?absorb $N.?  This tendency of predicates to prefer certain classes of arguments is defined by Wilks (1978) as selectional preferences and widely reported in the literature. Erk and Pad? (2010) extend exper-iments on selectional preference induction to in-verse selectional preference, considering the re-striction imposed on predicates. Inverse sectional preference is also implemented in linggle (e.g. ?$V apple?). Linggle presents clusters of synonymous col-locates (adjectives, nouns and verbs) of a query keyword. We obtained the clusters by building on Lin and Pantel?s (2002) large-scale repository of dependencies and word similarity scores. Us-ing the method proposed by Ritter and Etzioni (2010) we induce selectional preference with a Latent Dirichlet Allocation (LDA) model to seed the clusters. The rest of the paper is organized as follows. We review the related work in the next section. Then we present the syntax of the queries and the functionalities of the system (Section 3). We de-scribe the details of implementation including the indexing of the n-grams and the clustering algo-rithm (Section 4) and draw perspective of devel-opment of Web scale search engines (Section 5). 2 Related work Web-scale Linguistic Search Engine (LSE) has been an area of active research. Recently, the state-of-the-art in LSE research has been re-
viewed in Fletcher (2012). We present in this paper a linguistic search engine that provides a more comprehensive and powerful set of query features.  Kilgarriff et al (2001) describe the implemen-tation of the linguistic search engine Word Sketch (2001) that displays collocations and de-pendencies acquired from a large corpus such as the BNC. Word Sketch is not as flexible as typi-cal search engines, only supporting a fixed set of queries.  Recently, researchers have been attempting to go one step further and work with Web scale da-tasets, but it is difficult for an academic institute to crawl a dataset that is on par with the datasets built by search engine companies. In 2006, Google released the Web 1T for several major languages of the world (trillion-word n-gram da-tasets for English, Japanese, Chinese, and ten European languages), to stimulate NLP research in many areas.  In 2008, Chang described a pro-totype that enhances Google Web 1T bigrams with PoS tags and supports search in the dataset by wildcards (wild-PoS), to identify recurring collocations. Wu, Witten and Franken (2010) describe a more comprehensive system (FLAX) that combines filtered Google data with text ex-amples from the BNC for several learning activi-ties.  In a way similar to Chang (2008) and Wu, Witten and Franken (2010), Stein, Potthast, and Trenkmann (2010) describe the implementation and application of NetSpeak, a system that pro-vides quick access to the Google Web 1T n-gram with RE-like queries (alternator ?|?, one arbitrary word ?*?, arbitrary number of words between two specified words ???). In contrast to Linggle, NetSpeak does not support PoS wildcard or con-ceptual clustering. An important function in both Linggle and NetSpeak is synonym query. NetSpeak uses WordNet (Fellbaum 2010) synsets to support synonym match. But WordNet synsets tend to contain very little synonyms, leading to poor coverage. Alternatively, one can use the distribu-tional approach to similarity based on a very large corpus. Lin and Pantel (2002) report efforts to build a large repository of dependencies ex-tracted from large corpora such as Wikipedia, and provide similarity between words (demo.patrickpantel.com). We use these results both for handling synonym queries and to or-ganize the n-grams into semantic classes.  More recently, Ritter and Etzioni (2010) pro-pose to apply an LDA model (Blei et al 2003) to 
140
the problem of inducing selectional preference. The idea is to consider the verbs in a corpus as the documents of a traditional LDA model. The arguments of the verb that are encountered in the corpus are treated as the words composing a document in the traditional model. The model seems to successfully infer the semantic classes that correspond to the preferred arguments of a verb. The topics are semi-automatically labeled with WordNet classes to produce a repository of human interpretable class-based selectional pref-erence. This choice might be due to the fact that if most LDA topic heads are usually reasonable upon human inspection, some topics are also in-coherent (Newman 2010) and lower frequency words are not handled as successfully. We con-trol the coherence of the topics and rearrange them into human interpretable clusters using a distributional similarity measure.  Microsoft Sempute Project (Sempute Team 2013) also explores core technologies and appli-cations of semantic computing. As part of Sempute project, NeedleSeek is aimed at auto-matically extracting data to support general se-mantic Web searches. While Linggle focuses on n-gram information for language learning, NeedleSeek also uses LDA to support question answering (e.g., What were the Capitals of an-cient China?) . In contrast to the previous research in Web scale linguistic search engines, we present a sys-tem that supports queries with keywords, wild-card words, POS, synonyms, and additional regular expression (RE) operators and displays the results according the count, similarity, and topic with clusters of synonyms or conceptually related words. We exploit and combine the power of both LDA analysis and distributional similarity to provide meaningful semantic classes that are constrained with members of high simi-larity. Distributional similarity (Lin 1998) and LDA topics become two angles of attack to view language usage and corpus patterns. 3 Linggle Functionalities The syntax of Linggle queries involves basic regular expression of keywords enriched with wildcard PoS and synonyms. Linggle queries can be either pattern-based commands or natural lan-guage questions. The natural language queries are currently handled by simple string matching based on a limited set of questions and command pairs provided by a native speaker informant.  
3.1 Natural language queries The handling of queries formulated in natural language has been implemented with handcrafted patterns refined from a corpus of questions found on various websites. Additionally, we asked both native and non-native speakers to use the system for text edition and to write down all the ques-tions that arise during the exercise.  Linggle transforms a question into commands for further processing based on a set of canned texts (e.g., ?How to describe a beach?? will be converted to ?$A beach?). We are in the process of gathering more examples of language-related question and answer pairs from Answers.com to improve the precision, versatility, and coverage. 3.2 Syntax of queries The syntax of the patterns for n-grams is shown in Table 1. The syntax supports two types of que-ry functions: basic keyword search with regular expression capability and semantic search.  Basic search operators enable the users to que-ry zero, one or more arbitrary words up to five words. For example, the query ?set off ? $N? is intended to search for all nouns in the right con-text of set off, within a maximum distance of three words.  In addition, the ??? operator in front of a word represents a search for n-grams with or without the word. For example, a user wanting to deter-mine whether to use the word to between listen and music can formulate the query ?listen ?to music.? Yet another operation ?|? is provided to search for information related to word choice. For ex-ample the query ?build | construct ... dream? can be used to reveal that people build a dream much more often than they construct a dream. A set of PoS symbols (shown in Table 2) is defined to support queries that need more preci-sion than the symbol *. More work might be needed to resolve PoS ambiguity for n-grams. Currently, any word that has been labeled with the requested PoS in the BNC more than 5% of the time is displayed.  The ?+? operator is provided to support se-mantic queries. Placed in front of a word, it is intended to search for synonyms in the context. For example the query ?+sandy beach? would generate rocky beach, stony beach, barren beach in the top three results. The query ?+abandoned beach? generates deserted, destroyed and empty beach at the top of the list. To support conceptual clustering of collocational n-grams, we need to 
141
identify synonyms related to different senses of a given word. Table 3 shows an example of the result obtained for the ambiguous word bank as a unigram query. We can see the two main senses of the word (river bank and institution) as clus-ters.  Operators  Description * Any Word ? With/without the word ? Zero or more words | Alternator $ Part of speech + Synonyms Table 1: Operators in the Linggle queries   Part of speech  Description N Noun V Verb A Adjective R Adverb PP Preposition NP Proper Noun PR Pronoun D Determiner Table 2: Part-of-speech in the Linggle queries   A cluster button on the interface activates or cancels conceptual clustering. When Linggle is switched into a cluster display mode, adjective-nouns, verb-objects and subject-verb relations can be browsed based on the induced conceptual clusters (see Figure 1). The New York Times Example Base In order to display complete sentence examples for users, the New York Times Corpus sentences are indexed by word. When the user searches for words in a specific syntactic relation, morpho-logical query expansion is performed and pat-terns are used to increase both the coverage and the precision of the provided examples. For ex-ample, the bi-gram kill bacteria will be associat-ed with the example sentence ?The bacteria are killed by high temperatures.?. 3.3 Semantic Clusters Two types of semantic clusters are provided in Linggle: selectional preference and clusters of synonyms. Selectional preference expresses for example that an apple is more likely to be eaten or cooked than to be killed or hanged. Different classes of arguments for a predicate (or of predi-cates for an argument) can be found automatical-ly. The favorite class of objects for the verb drink 
is LIQUID with the noun water ranked at the top. Less frequent objects belonging to the same class include liquor in the tail of the list. We aim at grouping arguments and predicates into semantic clusters for better readability.  valley mountain river lake hill bay plain north ridge coast city district town area community municipality country village land region route highway road railway bridge crossing canal railroad junction stream creek tributary  organization business institution company industry organisation agency school department university government court board channel network affiliate outlet supplier manufacturer distributor vendor retailer in-vestor broker provider lender owner creditor share-holder customer employer Table 3: First two level-one clusters of synonyms for the word ?bank? We produce clusters with a two-layer structure. Level one represents loose topical relatedness roughly corresponding to broad domains, while level two is aimed at grouping together closely similar words. For example, among the objects of the verb cultivate, the nouns tie and contact belong to the same level-two cluster. Attitude and spirit belong to another level-two cluster but both pairs are in the same level-one cluster. The nouns fruit and vegetable are clustered together in another level-one cluster. This double-layer representation is a solution to express at once close synonymy and topic relatedness. The clus-ters of symonyms displayed in Table 3 follow the same representation. 4 Implementation of the system In this section, we describe the implementation of Linggle, including how to index and store n-grams for a fast access (Section 4.1) and construction of the LDA models (Section 4.2). We will describe the clustering method in more details in section 5.  4.1 N-grams preprocessing The n-grams are first filtered keeping only the words that are in WordNet and in the British Na-tional Corpus, and then indexed by word and position in the n-gram, in a way similar to the rotated n-gram approach proposed by Lin et. al. (2010). The files are then stored in an Apache 
142
HBase NoSQL base. The major advantages of using a NoSQL database is the excellent perfor-mance in querying the ability of storing large amounts of data across several servers and the capability to scale up when we have additional entries in the dataset, or additional datasets to add to the system. 4.2 LDA models computations Two types of LDA models are calculated for Linggle. The first type is a selectional preference model between heads and modifiers. Six models are calculated in total for the subject-verb, the verb-object and the adjective-noun relations done in a similar way to Ritter and Etzioni?s (2010) model with binary relations instead of triples. The second is a word/synonyms model in which a word is considered as a document in LDA and its synonyms as the words of the document. This second model has the effect of splitting the syno-nyms of a word into different topics, as shown in Table 3.  Seeds                                             parameter: s1 1. Consider the m first topics for a verb v ac-cording to the LDA per document-topic dis-tribution (?) 2. Consider S = o1,?,on, a set of n objects of v.  3. Split S into m classes C1,..,Cm according to their LDA per topic-word probability: oi  is assigned to the topic in which it has the highest probability. 4. For each class Ci, move every object oj that is not similar to any other ok of Ci , according to a similarity threshold s1 into a new created class. Level 2                                           parameter: s2  While (Argmaxci ,cj Sim( ci , cj ) > s2):            Merge Argmaxci ,cj Sim( ci , cj ) into one class. Level 1                                           parameter: s3  While (Argmaxci ,cj Sim(ci , cj ) > s3):            Group Argmaxci ,cj Sim( ci ,cj ) under the             same level 1 cluster. Table 4:  Clustering Algorithm for the object of a giv-en verb  The hyperparameters alpha, eta, that affect the sparsity of the document-topic (theta) and the topic-word (lambda) distributions are both set to 0.5 and the number of topics is set to 300. More research would be necessary to optimize the val-ue for the parameters in the perspective of the clustering algorithm, as quickly discussed in the next section.  
 Sim (ci, cj): 1. Build the Cartesian product C = ci ? cj 2. Get P the set of the similarity between all word pairs in C 3. Return Sim(ci,cj) the mean of the scores in P  Table 5:  Similarity between two classes ti and tj 5 Clustering algorithm The clustering algorithm combines topic model-ing results and a semantic similarity measure. We use Pantel?s dependencies repository to compute LDA models for subject-verbs, verbs-objects and adjective-nouns relations in both di-rections. Currently, we also use Pantel?s similari-ty measure. It has a reasonable precision partly because it relies on parser information instead of bag of words windows. However the coverage of the available scores is lower than what would be needed for Linggle. We will address this issue in the near future by extending it with similarity scores computed from the n-grams. We combine the two distributional semantics approaches in a simple manner inspired by clus-tering by committee algorithm  (CBC). The simi-larity measure is used to refine the LDA topics and to generate finer grain clusters. Conversely, LDA topics can also be seen as the seeds of our clustering algorithm. This algorithm intends to constrain the words that belong to a final cluster more strictly than LDA does in order to obtain clearly interpretable clusters. The exact same algorithm is applied to synonym models, for synonyms of nouns, adjec-tives and verbs (shown in Table 3). Table 4 shows the algorithm for constructing double layer clusters for a set S of objects of a verb v. The objects are first roughly split into classes, attributing a single topic to every object oi. The topic of a word oi is determined accord-ing to its per topic-word probability. More exper-iments could be done using the product of the per document-topic and the per topic-word LDA probabilities instead, in order to take into account the specific verb when assigning a topic to the object. Such a way of assigning topics should also be more sensitive to the LDA hyperparame-ters.  At this stage, some classes are incoherent and that low frequency words that do not appear in the head of any topic are often misclassified. Words are rearranged between the classes and create new classes if necessary using the simi-larity measure. If any word of a class is not simi-
143
lar to any other word in this class (the threshold is set to s1 = 0.09), a new class is created for it. Any two classes are then merged if their simi-larity (computer accordingly to Table 5) is above s2=0.06, forming the level 2 clusters. Classes are then grouped together if the similarity between them is above s3 = 0.02 forming the level 1 clus-ters. Finally, the classes that contain less than three words are not displayed in Linggle and the predi-cate-arguments counts in the Web 1T are re-trieved using a few hand crafted RE and morpho-logical expansion of the nouns and the verbs.  This algorithm appears to generate interpreta-ble semantic classes and to be quite robust re-garding the threshold parameters. More tests and rigorous evaluation are left to future work.   6 Conclusion There are many different directions in which Linggle will be improved. The first one is to al-low users to work with word forms and with multiword expressions. The second one concerns the extension of the coverage of the example base with several large corpora such as Wikipe-dia and the extension of the coverage of the simi-larity measure. The third direction concerns the development of automatic suggestions for text edition, such as suggesting a better adjective or a different preposition in the context of a sentence. Finally, Linggle is currently being extended to Chinese. We presented a prototype that gives access to Web Scale collocations. Linggle displays both word usage and word similarity information. Depending on the type of the input query, the results are displayed under the form of lists or clusters of n-grams. The system is designed to become a multilingual platform for text edition and can also become a valuable resource for natural language processing research. References  David Blei, A. Ng, and M. Jordan. 2003. Latent Di-richlet alocation. Journal of Machine Learning Research, 3:993?1022, January 2003. Jason S. Chang, 2008. Linggle: a web-scale language reference search engine. Unpublished manuscript. Katrin Erk and Sebastian Pad?. 2010. A Flexible, Corpus-Driven Model of Regular and Inverse Se-lectional Preferences. In Proceedings of ACL 2010.  Christiane Fellbaum. 2010. WordNet. MIT Press, Cambridge, MA. 
John Rupert Firth. 1957. The Semantics of Linguistics Science. Papers in linguistics 1934-1951. London: Oxford University Press. William H Fletcher. 2012. Corpus analysis of the world wide web." In The Encyclopedia of Applied Linguistics. Adam Kilgarriff , and David Tugwell. 2001. Word sketch: Extraction and display of significant collo-cations for lexicography. In Proceedings of COL-LOCTION: Computational Extraction, Analysis and Exploitation workshop, 39th ACL and 10th EACL, pp. 32-38. Dekang Lin. 1998. Automatic retrieval and clustering of similar words. In Proceedings of the 17th inter-national conference on Computational linguistics, volume 2. Association for Computational Linguis-tics, pp. 768-774.  Dekang Lin, and Patrick Pantel. 2002. Concept Dis-covery from Text. In Proceedings of Conference on Computational Linguistics (COLING-02). pp. 577-583. Taipei, Taiwan. Dekang Lin, Kenneth Ward Church, Heng Ji, Satoshi Sekine, David Yarowsky, Shane Bergsma, Kailash Patil, Emily Pitler, Rachel Lathbury, Vikram Rao, Kapil Dalwani, Sushant Narsale. 2010. New tools for web-scale n-grams. In Proceedings of LREC. David Newman, Jey Han Lau, Karl Grieser and Timo-thy Baldwin (2010). Automatic Evaluation of Topic Coherence. In Proceedings of Human Lan-guage Technologies, 11th NAACL HLT, Los Ange-les, USA, pp. 100?108. Evan Sandhaus. 2008. "New york times corpus: Cor-pus overview." LDC catalogue LDC2008T19.  Sempute Team. 2013. What is NeedleSeek? http://needleseek.msra.cn/readme.htm Benno Stein, Martin Potthast, and Martin Trenkmann. 2010. Retrieving customary Web language to assist writers. Advances in Information Retrieval. Springer Berlin Heidelberg, pp. 631-635.  Martin Potthast, Martin Trenkmann, and Benno Stein. Using Web N-Grams to Help Second-Language Speakers .2010. SIGIR 10 Web N-Gram Workshop, pages 49-49. Alan Ritter, Mausam, and Oren Etzioni. 2010. A Latent Dirichlet Allocation method for Selectional Preferences. In Proceedings of the 48th Annual Meeting of the Association for Computational Lin-guistics (July 2010), pp. 424-434. Yorick Wilks. 1978. Making preferences more active. Artificial Intelligence 11(3), pp. 197-223.  Shaoqun Wu, Ian H. Witten and Margaret Franken (2010). Utilizing lexical data from a web-derived corpus to expand productive collocation knowledge. ReCALL, 22(1), 83?102. 
144
Proceedings of the Seventeenth Conference on Computational Natural Language Learning: Shared Task, pages 20?25,
Sofia, Bulgaria, August 8-9 2013. c?2013 Association for Computational Linguistics
CoNLL-2013 Shared Task: Grammatical Error Correction NTHU System Description  Ting-Hui Kao+, Yu-Wei Chang*, Hsun-Wen Chiu*, Tzu-Hsi Yen+,  Joanne Boisson*, Jian-Cheng Wu+, Jason S. Chang+
* Institute of Information Systems and Applications + Department of Computer Science National Tsing Hua University  HsinChu, Taiwan, R.O.C. 30013 { maxis1718, teer1990, chiuhsunwen, joseph.yen,  Joanne.boisson, wujc86, jason.jschang} @gmail.com    Abstract 
Grammatical error correction has been an active research area in the field of Natural Language Processing. This paper describes the grammatical error correction system developed at NTHU in participation of the CoNLL-2013 Shared Task. The system consists of four modules in a pipeline to correct errors related to determiners, prepositions, verb forms and noun number. Although more types of errors are involved that than last year?s Shared Task, leading to more complicated problem this year, our system still obtain higher F-score as compared to last year. We received an overall F-measure score of 0.325, which put our system in second place among 17 systems evaluated. 1 Introduction Grammatical error correction is a task involving automatically detecting and correcting grammatical errors and improper choices. Grammatical error correction in writing of English as a second language (L2) or foreign language (EFL) is an important issue, for there are 375 million L2 speakers and 750 million EFL speakers around the world (Graddol, 2006). Most of these non-native speakers tend to make many kinds of error in their writing. An error correction system has the short-term benefit of helping writers improve the quality of writing. In the long run, non-native writers might learn from the corrections and thus gradually gain better command of grammar and word choice. The HOO shared task of 2012 is aimed at detecting and correcting misuse of determiners and prepositions, two types of errors accounting 
for only 38% of all errors. Therefore, there are a lot more errors related to other parts of speech that we have to address in this year?s shared task. In this paper, we describe the system submission from NTHU. The system reads and processes a given sentence through a pipeline of four distinct modules dealing with determiners, prepositions, verb forms and noun plurality. The output of one module feeds into the next module as input. The system finally produces possibly corrected sentences. The rest of the article is organized as follows. Section 2 describes detection and correction approach of each module in detail. Section 3 describes experiment setting and results. Then in Section 4, we discuss strengths and limitations of the proposed system and directions of future work. We conclude in Section 5.  2 System Description The system is designed to read a sentence and process each type of errors in terms and finally produce a corrected sentence. In Section 2.1, we give an overview of the system. Then, in Sections 2.2-2.5, we describe how to correct errors related to noun number, determiner, verb tense, and preposition.   
  Figure 1. System Architecture 
20
Table 1. Moving windows of ?location? Moving Window n-grams MW5 track based on the location based on the location of  on the location of cell the location of cell phone location of cell phone by MW4 based on the location on the location of the location of cell location of cell phone MW3 on the location the location of location of cell MW2 the location location of 2.1 Overview In this section, we give an overview of our system. Figure 1 shows the architecture of the error correction system. In this study, we focus on five different grammatical error types, including the improper usage of Determiner (ArtOrDet), Noun Number (Nn), Verb-Tenses (Vform), Subject-Verb Agreement (SVA), and Preposition (Prep).  In order to deal with these different types of errors systematically, we propose a back-off model based on the moving window approach.  Moving Window  A moving window MW of certain word wi is defined as below. (Leacock et al, 2010; Rozovskaya et al, 2010)   ???,?(?) = {???? ,? ,????? ???  ?, ? = 0, ? ? 1 ?}  (1)  where i denotes the position of word, k the window size, and w the original or replacement word at position i. In our approach, the window size is set to 2 to 5 words.  For example, consider the target word ?location? in the sentence, ?Children can easily be track based on the location of cell phone by parents.? The n-grams in moving windows of related to ?location? of sizes 2 to 5 are shown in Table 1.  Back-off Model To determine whether the target word needs to be changed to a different form (e.g, from ?location? to ?locations?), we first replace the target word with its variant forms (e.g., ?locations? for ?location?) in all MW n-grams and 
Table 2. Trigram information of ?location? and ?locations? in back-off model MW3 n-gram Freq. S3 location on the location the location of location of cell 304,400 3,794,400 1,400 4 M locations on the locations the locations of locations of cell 18,200 374,000 200 0.04 M  then measure the ratio of the counts of the original and replaced n-grams in a corpus. The frequency counts are obtained by querying a linguistic search engine Linggle (Joanne Boisson et al 2013), a web-scale linguistic search engine based on Google Web1T (Brants and Franz, 2006). The sum of n-gram counts, Sk with  the word w (original or replacement) in the ith position is defined as        ??,?(?)  ?=  ? ?????(?????)????  ?? ? ? ?(?)      (2)  With MW and S, we design a Replace function to determine whether is necessary to replace wi with its variant form, w' :  
Figure 2. The function Replace for determining whether to replace a word in location i using moving windows of size k.  The parameters ? and ? in Replace are set empirically.  For instance, in the given sentence ?Children can easily be track based on the location of cell phone by parents?, the target word wi is ?location? and the candidate is ?locations? for the Nn type error. According to Equation 2, the sums S9,3(?location?) of the original trigrams is about 4 million, whereas S9,3(?locations?) of the replaced trigrams is only 0.4 million (see Table 2 for more details). The value of r is 0.096, and depending on the threshold, Replace either returns False or back off to consider again the ratio r of S9,2(?location?) of the original bigrams and S9,2(?locations?) of the replacement bigrams for confidence in replacing the word ?location.?  
function Replace(i, k, w?) r = Si,k(w?)/Si,k(wi) if r > ? return True else if k > 2 and r > ?: return Replace (i, k-1, w?) else: return False 
21
2.2 The number module The number module is designed to correct error related to noun number (i.e., Nn). Two types of error are included, errors of singular noun and plural noun. To correct errors, we identify heads of base noun phrase (i.e., NP consisting of maximal contiguous sequence of tokens without containing another noun phrase or clause) in the given sentence by using part-of-speech tags and GeniaTagger (Tsuruoka et al, 2006), then use the Replace function to replace the original nouns (either singular or plural) to a different form (i.e., singular to plural, or plural to singular). We use two methods in the number module: combining voting with back-off, and using dependency relations.   Combining voting with back-off   Each n-gram in a moving window of various sizes described in Section 2.1 gets to cast a vote. When the sum of frequency counts related to the original noun is higher than that related to the replacement noun, the original noun gets one vote and vise versa. Voting method determines whether to replace the noun based on majority of the votes. For example, all of the 14 replacement n-grams (MWi, k , k = 2, 5) in Table 1 get a vote, because the n-gram with ?location? has higher frequency count that the same n-gram replaced with ?locations?. Intuitively, we should be confident enough to decide to stay with the original noun, i.e., ?location.? Back-off model described in Section 2.1 make a decision to permit the Replace module to change the original noun depend on threshold ?. Both of voting and back-off model need to show that alternative noun number is better. For the scheme of voting and back-off model, we also require the top count ratio and absolute count of 0.95 and 60,000 based on empirical evidence.  Using dependency relations  In some cases, the noun number depends on subject-verb agreement. We use part-of-speech information of subject and governing verb obtained from a tagger to handle such cases. For that, we use 3rd person singular present (i.e., VBZ) and other verb forms (e.g., VBP) to detect noun number mistakes.  Consider the sentence, ?In the society today, there are many ideas or concept that are 
currently in the stages of research and development.?, where ?concept? is a singular noun, but should be plural according to syntactic dependency information. The dependency parser typically produces nsubj(are-7, concept-11) among other relations and the word ?are? is tagged as VBP. Accordingly, we can replace the original noun, ?concept? to its plural form, ?concepts.?  2.3 Determiners module  The determiner is aimed at correcting determiner errors (i.e., errors annotated as ArtOrDet ). Given a sentence, we first identify the base noun phrases and their determiners (or lack of determiner) and using the moving window approach to decide whether there is an error and which alternative form to use. For determiner errors, the variant form of a base NP with a determiner is simple the same NP with determiner removed, while the variant form of a base NP without a determiner is simple the same NP with a determiner added. In addition to the moving window and back-off model, we also use dependency relations to check if a determiner is required for a base noun phrase.  Frequency of n-grams  We adopt the moving window approach and combine it with the back-off model mentioned in Section 2.1 with slight modification for the cases specific to determiner errors. When the head of given Base-NP is the last word of the n-gram, (as in ?Prepare meals for the elderly is my duty.?), the head can often be used as an modifier (as in ?for elderly people? leading to higher counts unrelated to the our case of the word being used as the head.   Therefore, while we adopting the moving window approach, the count of such n-gram is not counted. We set the threshold in the Replace function empirically: ?=5 and ?=0.35.   Dependency  In some cases, the frequency information of n-grams provides limited evidence for identifying mistakes. Therefore, we use more effective rules based on dependency relations to recognize the determiner errors in a way similar to the number module. 
22
Table 3. Verb form n-grams with PMIs. 
Verb Form n-grams PMI Sum happening crash happening happening at 21.5 38.2 59.7 happen crash happen happen at 24.0 35.7 59.7 happened crash happened happened at air crash happened happened at Miami crash happened at 
30.5 43.0 36.2 31.8 43.2 
184.7 
happens crash happens happens at crash happens at 
27.9 42.4 37.0 
107.3 
 We remove a determiner from a noun phrase with a plural head and an existing determiner. Otherwise, this module adds an appropriate determiner before the current noun phrase. For a conjunction (i.e., X and/or Y) of two base NPs, the rules favor adding a determiner such that both NPs have the same kind of determiner. 2.4 The verb-tense module In this section, we mainly concentrate on providing more proper verb tenses. Besides moving window, we introduce accumulated point-wise mutual information (PMI) (Church and Hanks, 1990) to improve the performance of this module. Applying PMI to this topic is based on the hypothesis that an appropriate verb form has a higher PMI measure with the context. To achieve more flexibility than the standard PMI, we use the modified PMI, which is an extension of standard PMI allowing an n-gram s of arbitrary length as input   ???(?) = log ?(?|?)?(??)????                               (3) where wi denotes the i-th word in s, k = | s |, and P(wi) the probability of wi estimated using a very large corpus. P(s|k) is the probability based on maximal likelihood estimation:   ?(?|?) = ???? (?)???? (?)???                               (4)  where S denotes all n-grams of length k. The PMI value of n-grams related to the original and alternative tense forms of a give verb are then calculated to attempt to correct the verb in question with a decision in favor of highest PMI. 
Table 4. Sample search results of ?being ?$PP a dangerous situation? * 
N-gram Count being in a dangerous situation 161 being a dangerous situation 0 being at a dangerous situation 0 being on a dangerous situation 0 ? 0 being about a dangerous situation 0 * Note:? denotes option word and $PP denotes wildcard prepositions  With this extended notion of PMI, we proceed as follows. First, we select each verb in a sentence and extract n-grams in moving window method as described in Section 2.2. Next, we generate more alternative n-grams by substituting all the related verb forms for the selected verb. After that, for all these n-grams, we calculate PMIs and accumulate the measures for each group of verb forms. Finally, if the accumulated PMI of the original verb is lower than the mean value of PMI of all verb forms, the verb in question will be replaced with the verb form associated the highest PMI value. Consider the sentence, ?In late nineteenth century, there was a severe air crash happening at Miami international airport.? We attempt to correct the verbs ?was? and ?happening? in the sentence. Table 3 shows n-grams and corresponding PMIs of each verb form. The accumulated PMI of ?happened? has the maximum value. So, the module changes ?happening? to ?happened.?  2.5 The prepositions module For preposition, we attempt to handle the two types of error: DELETE and REPLACE, and leave the INSERT errors for future work. For DELETE errors, the preposition in question should be deleted from the given sentence, whereas for REPLACE errors the preposition should be replaced with a more appropriate alternative. The third error type of preposition, INSERT, is left for future study. The proposed solution is based on the hypothesis that the usage of preposition often depends on the collocation relation of verb or noun. Therefore, we propose a back-off model, which utilizes the dependency relations to identify the related words of the preposition in question. We proceed as follows: For a target preposition in a given sentence, we extract the n-gram containing the preposition, its prepositional object, and the content word before the 
23
preposition. For example, the n-gram ?being in a dangerous situation? is extracted from the sentence ?This can protect the students from being in a dangerous situation in particularly for the small children who are studying in nursery.? The n-gram ?being in a dangerous situation? is then transformed into a query for a linguistic search engine (e.g., Linggle as described in Joanne et al 2013) to obtain the counts of all preposition variant forms, including NULL (for DELETE) or other prepositions (for REPLACE). The transformation process is very simple involving changing the proposition to a wild part of speech symbol. For example, ?being in a dangerous situation? is transformed to ?being ?$PP a dangerous situation.? The sample search results are shown in Table 4. From the results, we could confirm that the preposition ?in? is used correctly.  Although we use the web-scale n-gram for validation of usage of preposition, however, data sparseness still poses a problem. Furthermore, we cannot obtain information for n-grams with length more than 5, since the Web 1T we used only contains 1 to 5-grams. In order to cope with the data sparseness problem, we transform a query into a more general form, if no result could be obtained in the first round of search. To generalize the query, we remove the modifiers of the prepositional object one after another. Additionally, we also attempt to change the modifiers with the most frequent modifier of the object. Consider the n-gram ?in modern digit world.? The generalized n-grams ?in digit world? and ?in new world? will then be transformed into queries in turns until the results are sufficient for the model to make a decision. To avoid false alarm, empirically determined thresholds are used to measure the ratio of count of a preposition variant form to the original preposition. 3 Experiment To assess the effectiveness of the proposed method, we used the official training and testing data of CoNLL-2013 Shared Task. We also exploited several tools including Linggle, Stanford Parser and Geniatagger in the proposed system. Linggle supports flexible linguistic queries with wild part of speech and returns matching n-grams counts in Google Web 1T 5gram. Stanford Parser and Geniatagger produce syntactical information including dependency relations, 
part-of-speech tags, and phrase boundary. The evaluation scorer, which computes precision, recall, and F-score, is provided by National University of Singapore, the organizer of CoNLL-2013 Shared Task. On the test data, our system obtained the precision, recall and F-score of .3057, 0.346, and .3246, which put us in first place in term of recall and second place in term of F-score. 4 Discussion In this section, we discuss the strengths and limitations of our system and propose approaches to overcome current limitations. The module of noun numbers, moving window and syntactic dependency for correcting errors cannot handle well some ambiguous cases. For example, in this case "In conclusion, what I have mentioned above, we have to agree, tracking system has many benefits?.", according to the gold-standard annotations, ?system has? is corrected to ?systems have?.  However, this module keep the original word because of the 3rd person singular present verb, ?has?. Before ?has? being corrected to ?have?, there was no sufficient evidence to support that ?systems? is a good replacement. In cases like this, it is often difficult to suggest a correction using only the sentential context and n-gram frequency and dependency relations. To correct such an error, we may need to consider the context of the discourse or combine the module of different error types such as noun numbers and verb tense, which is beyond the scope of the current system. We handle the determiner errors with threshold ?  and ?  empirically derived, but it would be more effective if we could use some form of minimal error rate tuning (MERT) to set the parameters. Besides, we found that applying the dependency criteria and moving window method in parallel leads to high recall but low precision. However, the moving window method often fails because of insufficient evidence. In such case, the system can perform better in both precision and recall by favoring the dependency model output. For our system, the performance of correcting verb form errors is severely limited by the lengths of n-gram. The failure related to verb forms correction are mostly caused by the limitation of n-gram length of Web 1T. There is a large portion of sentences where the subject (or the adverbs) and the verb are so far apart, that 
24
they are not within windows of five words. So, it is difficult to use the noun number of the subject to select the correct verb form. Another major area of limitations of handling verb form errors has to do with rare words which lead to unseen n-grams even in a very large dataset like Web 1T. These rare words are mostly name entities that have insufficient coverage when combined other words in n-grams. Intuitively, we can generalize the n-gram matching process as in the case of handling preposition errors. In this study, we use the preposition and object relation (POBJ) to determine whether the use of the preposition is correct. The relation is useful for generalizing the queries and in correcting preposition errors. However, many preposition errors are unrelated to POBJ. For example, in the sentence ?Surveillance technology will help to prevent the family to loss their member...?, the two words ?to loss? should be replace with ?from losing.? Unfortunately, the current system cannot correct such an error in the absence of POBJ relation. In order to correct this kind of error, we have to consider composed relations such as noun-preposition-verb, which is crucial to the capability of correcting such multiple consecutive errors (i.e., preposition plus verb). 5 Conclusion In this paper, we build four modules in determiner, noun number, verb form, and preposition for error detection and correction. For different types of errors, we have developed modules independently in accordance with their features. The constructed modules rely on both moving windows and back-off model to improve grammatical error correction. Additionally, for verb form errors, we introduce point-wise mutual information for higher precision and recall.  We plan to integrate all the modules in a more flexible way than the current pipeline scheme. Yet another direction for future research is to consider the discourse context. 6 Acknowledgements We would like to acknowledge the funding supports from Delta Electronic Corp and National Science Council, Taiwan (contract no: NSC 100-2511-S-007-005-MY3). We are also thankful for helpful comments from the anonymous reviewers.  
References  Joanne Boisson, Ting-Hui Kao, Jian-Cheng Wu, Tzu-Hsi Yen and Jason S. Chang. 2013. Linggle: a Web-scale Linguistic Search Engine for Words in Context. In proceedings of Association for Computational Linguistics demonstrations. (ACL 2013) Thorsten Brants and Alex Franz. 2006. The Google Web 1T 5-gram corpus version 1.1.LDC2006T13 Kenneth W. Church and Patrick Hanks. 1990. Word association norms, mutual information, and lexicography. Computational Linguistics 16(1) (1990) 22?29 Leacock Claudia et al 2010. Automated grammatical error detection for language learners. Synthesis Lectures on Human Language Technologies, 3(1) 1?134. Daniel Dahlmeier, Hwee Tou Ng, Siew Mei Wu. 2013. Building a Large Annotated Corpus of Learner English: The NUS Corpus of Learner English. In Proceedings of the 8th Workshop on Innovative Use of NLP for Building Educational Applications (BEA 2013). Daniel Dahlmeier and Hwee Tou Ng. 2012. Better Evaluation for Grammatical Error Correction. In Proceedings of the 2012 Conference of the North American Chapter of the Association for Computational Linguistics (NAACL 2012). pp. 568 ? 572 David Graddol. 2006. English next: Why global English may mean the end of ?English as a Foreign Language.? UK: British Council. John Lee and Stephanie Seneff. 2006. Automatic Grammar Correction for Second-Language Learners. In INTERSPEECH ICSLP. Hwee Tou Ng, Siew Mei Wu, Yuanbin Wu, Christian Hadiwinoto and Joel Tetreault. 2013. The CoNLL-2013 Shared Task on Grammatical Error Correction. In Proceedings of the Seventeenth Conference on Computational Natural Language Learning. Alla Rozovskaya and Dan Roth. 2010. Generating confusion sets for context-sensitive error correction. In Proceedings of EMNLP, pp. 961?970. Yoshimasa Tsuruoka et al Developing a Robust Part-of-Speech Tagger for Biomedical Text. In Advances in Informatics - 10th Panhellenic Conference on Informatics, pp 382?392. 
25
