Proceedings of the IJCNLP-08 Workshop on NLP for Less Privileged Languages, pages 73?80,
Hyderabad, India, January 2008. c?2008 Asian Federation of Natural Language Processing
Finite State Solutions For Reduplication In Kinyarwanda Language
Jackson Muhirwe
Makerere University
Uganda jmuhirwe@cit.mak.ac.ug
Trond Trosterud
University of Troms
trond.trosterud@hum.uit.no
Abstract
Reduplication, the remaining problem in
computational morphology is a morpholog-
ical process that involves copying the base
form wholly or partially. Reduplication can
also be classified as either bounded or un-
bounded reduplication. Some solutions have
been proposed for bounded reduplication.
Some of the proposed solutions use ordered
replace rules while others use simultaneous
two-level rules. In our attempt to solve both
bounded and unbounded reduplication we
used a combination of two-level rules and
replace rules. All our experiments were
are carried out on Kinyarwanda an under-
resourced language with complex agglutina-
tive morphology.
1 Introduction
Reduplication is known to many computational mor-
phologists as the remaining problem. Unlike con-
catenative morphology, which involves concatena-
tion of different components to create a word, redu-
plication involves copying. Reduplication is there-
fore non-concatenative, and involves copying of ei-
ther the whole word or part of the word. The redupli-
cated part of the word could be a prefix or part of the
stem or even a suffix. This copying is what makes
reduplication an outstanding problem. Depending
on the language, reduplication may be used to show
plurality, iterativity, intensification or completeness
(Kimenyi, 2004). Some of the notable examples
of reduplication in computational morphology that
have been reported include Kinande, Latin, Bam-
bara (Roark and Sproat, 2007); Tagalog and Malay
(Beesley and Karttunen, 2003; Antworth, 1990). In
these cases, one language may be exhibiting full
stem reduplication while another may be exhibiting
partial stem reduplication (Syllable).
Reduplication may generally be divided into two:
bounded and unbounded. Bounded reduplication is
the kind that involves just repeating a given part
of the word. Unbounded reduplication differs from
bounded reduplication in that bounded reduplication
involves copying of a fixed number of morphemes.
Unbounded reduplication is considerably more chal-
lenging to deal with compared with bounded redu-
plication. Unbounded reduplication has received lit-
tle attention from researchers no wonder it is yet
to be fully solved (Roark and Sproat, 2007). In
principle, finite state methods are capable of han-
dling bounded reduplication, and here some solu-
tions have been proposed. In this paper we present
our attempt to solve both bounded and unbounded
reduplication in Kinyarwanda a typical Bantu lan-
guage. Kinyarwanda is the national and official lan-
guage of Rwanda. It is closely related to Kirundi
the national language of Burundi. It is the mother
tongue of about 20 million people living in the
great lakes region of East and Central Africa. Kin-
yarwanda is a less privileged language characterised
by lack of electronic resources and insignificant
presence on the Internet. The language has an offi-
cial orthography where tones, long vowels and con-
sonants are not marked. Kinyarwanda is agglutina-
tive in nature, with complex, mainly prefixing mor-
phology. Verb forms may have slots of up to 20 af-
73
fixes to be attached to the root on both sides: left
and right. Reduplication is a common feature and
generally all verbs undergo some form of redupli-
cation. Adjectives and adverbs tend to undergo full
word reduplication, as we shall see in section 2.
2 Kinyarwanda Reduplication
Kinyarwanda exhibits full word reduplication, full
stem reduplication and partial stem reduplication or
syllable reduplication. Full word reduplication in-
volves copying of the whole word, this phenomenon
has been observed mainly in adjectives and adverbs.
Full stem reduplication involves copying a full stem
of either a verb or a noun. Part of a stem is copied
in partial stem reduplication. To a large extent this
copying is uniform (the large number of example
given below show that) but there are also cases of
un uniformity. There are cases when a nasal (n or m)
and an associative morpheme is inserted between the
copied morpheme and its base form. Kinyarwanda
language exhibits also cases of suffix reduplication
attested mainly in verb extensions which are not
considered in this paper.
For our discussion in this section we shall look at
full word reduplication full stem reduplication and
partial stem reduplication will be considered last.
For readers with an orientation towards theo-
retical linguistics we shall categorise our exam-
ples according to whether they are lexical or gram-
matical, but for implementation purposes this will
not be considered. Lexical reduplication is con-
cerned with words that may appear in the dictio-
nary. Reduplicated words may appear in a dictio-
nary as distinct words from the original word which
underwent reduplication. Grammatical reduplica-
tion is concerned with words or sentences that are
reduplicated based on grammatical rules. For in-
stance, only monosyllabic verbs are reduplicated, bi-
syllabic and polysyllabic are never reduplicated (Ki-
menyi, 2004).
2.1 Full Word Reduplication
All adjectives, adverbs and numerals may undergo
full word reduplication. In this case, the complete
word is copied to form a new word.
Adjectives
munini ?big? > muninimunini ?big?
muto ?small? > mutomuto ??small /young?
mashya ?new? > mashyamashya ?very new?
Adverbs
vuba ?fast? > vubavuba ?very fast?
buhoro ?slowly? > buhorobuhoro ?very slowly?
buke ?little? > bukebuke ?very little?
Numerals
rimwe ??one? rimwerimwe ?one by one or once in a
while?
kabiri ?two? kabirikabiri ?two by two?
gatatu ?three? gatatugatatu ?three by three?
2.2 Full Stem Reduplication
This involves reduplication of the whole stem result-
ing in a new word with a different meaning from
its parent. This kind of reduplication has been ob-
served in both verbs and nouns and can be both at
lexical and grammatical level. Formally, it differs
from word reduplication in that the verb and noun
class prefix does not participate in the reduplication,
whereas word reduplication reduplicates the class
prefix as well, cf. ka-birika-biri vs. gu-taga=taga.
Verbs differ from nouns in that all verbs may be
reduplicated. In many cases, the resulting redupli-
cated verb keeps the same basic meaning, but adds
iterativity , continuity, etc. In other cases, the re-
sult is a change in meaning. For nouns, the situation
is different. Here, reduplication is semantically re-
stricted to meaning ?kind of?, ?associated to?, and
only a subset of the nouns undergo reduplication.
In our transducer, we open for reduplication for
all verbs, whereas reduplicating nouns are singled
out as a separate group in the lexicon.
In all the verb cases we see iterativity, continu-
ity of events or an activity done many times. In the
noun examples it may be noticed that reduplication
refers to the description of an object, to what an ob-
ject does, or to an association based upon the origi-
nal meaning.
2.2.1 Grammatical Reduplication
The examples given below mainly concern lexical
reduplication. Grammatical reduplication involves
reduplication of existing word forms, thereby form-
ing new words with different meanings. Grammat-
ical reduplication may be realized at word level or
74
at sentence level. Here we shall consider redupli-
cation at word level only; sentence level processes
are outside the scope of a morphological transducer.
The reader is advised to consult Kimenyi (1986) for
sentence level reduplication.
Also in this category it is the whole stem that is
reduplicated. Most of the examples belonging to this
category are of verb reduplication.
Examples include the following:
kugenda ?to walk? > kugendagenda ?to walk
around?
kubunda ?to bend? > kubundabunda ?to walk
bending?
kubumba ?to mould? > kubumbabumba ?to con-
tinue moulding?
guhonda ?to knock? > guhondahonda ?to knock
repeatedly?
Notice from the examples above that this type of
reduplication is limited to two-syllable stems, and
most of these verbs end with a nasal cluster NC .
Two syllable verbs referring to continuous events
are never grammatically reduplicated, e.g gukunda
?to love?, kwanga ?to hate? guhinga ?to cultivate?.
They may undergo lexical reduplication, though. So,
in an analysis invoking semantic disambiguation, tri-
syllabic reduplicated verbs will be discarded as can-
didates for grammatical reduplications.
2.3 Partial Stem Reduplication
In this case the initial reduplicated syllable has the
form CV , V C or CV N .
Verbs
kujejeta ?to drop /leak?
gusesera ?to go through a fence with a bent back?
kubabara ?to fill pain?
kunyunyuza ?to suck?
Nouns
iseseme ?nausea?
ingegera ?crook?
umururumba ?greed?
ibijojoba ?rain drops?
2.4 Unbounded Reduplication
This is still a challenge, and it involves two cases
in Kinyarwanda, nasal insertion and the insertion of
the associative between the reduplicates.
2.4.1 Nasal Insertion
These cases may be few but they do exist. The
majority of the cases are verbs. Few nouns exhibit
this kind of behaviour.
Verbs
gutontoma ?to make pig?s noise?
kuvumvura ?to talk (insulting)?
gutantamura ?to tear up?
Nouns
igipampara ?a useless thing?
2.4.2 Associative insertion
Associative insertion has mainly been observed in
demonstratives when they reduplicate. An associa-
tive infix such as na ?and? and nga ?such and such?
is inserted between the reduplicates.
Demonstratives
uyunguyu ?this one?, abangaba ?these ones?
ahangaha ?Here?, ahanaha ?such and such a place?
ikiniki ?this and this one?.
3 The proposed approach
In order to handle the different issues presented
above we used a hybrid approach. The hybrid ap-
proach is a combination of two-level rules and re-
place rules. These two formalisms represent the
state of the art and practice in computational mor-
phology. The two formalisms are powerful, well de-
signed and well understood.
3.1 Two-level Formalism
The two-level formalism has been the dominant
formalism in Computational Morphology since its
invention by Koskenniemi in 1983 (Koskenniemi,
1983). Since then the approach has been used to
develop morphological analysers for very many lan-
guages around the world, including the Bantu lan-
guage Swahili (Hurskainen, 1992). This formalism
has been the major motivation force behind renewed
interests in computational morphology since 1983.
The two-level formalism is based on two-level rules
which are applied to a lexicon to facilitate lexical
to surface level mappings. The two-level rules are
compiled either by hand (Antworth, 1990) or by ma-
chine (Karttunen, 1992) into finite state networks.
75
The rule network may now be applied to a lexi-
con that has been compiled into a finite state net-
work. A two-level based morphological analyser
is developed by composing the two-level rule net-
work with the lower side of the finite state lexicon
network. The two-level rules are symbol to symbol
rules which apply to the lexicon in parallel. The de-
veloper does not have to worry about the order of
the rules. The only problem is that rules tend to con-
flict. With computerised compilers, such conflicts
are no longer a problem. The compiler shows which
rules are conflicting, so that the developer can re-
solve them. The output from a two-level morpho-
logical analyser is never affected by the order of the
rules.
Two-level rules are generally of the form
CP OP LC RC
where CP = Correspondence Part; OP = Operator;
LC = Left Context; RC = Right Context
There are four different kinds of rules that may be
used to describe morphological alternations of any
language.
1. a:b => LC RC. This rule states that lexical
//a// can be realized as surface b ONLY in the
given context. This rule is a context restriction
rule
2. a:b <= LC RC This rule states that lexical //a//
has to be realized as surface b ALWAYS in the
given context. This rule is a surface coercion
rule.
3. a:b <=> LC RC this is a composite rule
which states that lexical //a// is realized as sur-
face be ALWAYS and ONLY in the given con-
text.
4. a:b /<= LC RC This is an exclusion rule that
states that lexical //a// is never realized as sur-
face //b// in the given context.
These rules may be compiled into finite state ac-
ceptors either by hand or automatically using one of
the available Two-level rule compilers. For the pur-
pose of this research we used the Xerox Finite State
Tools.
3.2 Replace Rules
On the other hand the replace rules were introduced
by Karttunen in 1995 motivated by the rewrite rules
model developed by Kay and Kaplan (1994). Re-
place rules were easily accepted by computational
linguistics because that is how linguistics has been
done every where. It was so natural for linguistics to
take up this formalism.
The replace rules are regular expressions that
make it possible to map the lexical level strings to
surface level strings. Replace rules have been very
popular in Computational Morphology and have
been used to develop many morphological analysers.
Replace rules are compiled into a finite state net-
work and this network is applied to the lower side
of the lexicon network to map the lower level strings
to the surface level strings. It is worthy noting that
replace rules are feeding rules and therefore apply
in a cascade. Each rule uses the result of the pre-
ceding rule. Because of this, a linguist writing lan-
guage grammar using replace rules notation must
order rules in a proper way, otherwise the results
may not be right. For implementation purposes, re-
place rules have one clear advantage over two-level
rules. They can map symbols to symbols; symbols
to strings; strings to symbols; and strings to strings.
Replace rules are very handy when it comes to writ-
ing string to string mappings. In this case you write
only one rule instead of the many rules you would
otherwise have to write while using two-level rules.
Replace rules take the following four forms:
Unconditional replacement
A -> B
Unconditional parallel replacement (Several rules
with no contexts)
A1 -> B1, A2 -> B2, ...... An -> Bn
Conditional replacement. (One rule with contexts)
UPPER -> LOWER || LEFT _ RIGHT
Conditional parallel replacement.
UPPER1 -> LOWER1 ||
LEFT1 _ RIGHT1 ,, UPPER2 -> LOWER2 ||
LEFT2 _ RIGHT2,,..,,UPPERn -> LOWERn ||
LEFTn _ RIGHTn
76
3.3 Comparison of the two Formalisms
? Replace rules are organised vertically in a cas-
cade and feed each other. Two-level rules, on
the other hand side, are organised horizontally
and apply in parallel.
? Because replace rules are feeding rules, they
must be properly ordered. Order is not impor-
tant in two-level rules and would not affect the
output.
? Replace rules conceptually produce many in-
termediate levels when mapping from lexical to
surface level.
? Since two-level rules apply simultaneously,
there is no ordering problem. The only prob-
lem that arises are conflicts that the linguist
must deal with. But as we said earlier, this
is no longer a problem since current two-level
compilers can detect the rule conflicts and then
the grammar writer can deal with them accord-
ingly.
3.4 Towards a Hybrid Approach
As much as we have seen that these two formalisms
have differences, they all work very well and are
efficient at doing what they were designed to do.
Networks compiled from these two networks have
the same mathematical properties (Karttunen and
Beesley, 2005), and none of the formalisms can be
claimed to be superior over the other, per se. It is fur-
ther claimed that choosing between two-level rules
and replace rules is just a matter of personal choice.
This is true as far the general areas of application
of each of these rules are concerned. Our experi-
ence has shown that two-level rules are much easier
to learn and conceive how they work. This experi-
ence is also shared by Trosterud and Uibo who also
while working on Sami found it much easier to learn
two-level rules but again proposed that it would be
possible to combine both formalisms (Trosterud and
Uibo, 2005). Independently, Muhirwe and Barya
(2007) also found it easier to learn two-level rules
and they used them to develop their Kinyarwanda
Noun morphological analyser. Beesley and Kart-
tunen also realised that each one of these rules has
strong points and weak points. There are inci-
dences where it is much easier to use two-level rules
and there are other incidences where it is easier to
use replace rules over two-level rules (Beesley and
Karttunen, 2003). Let us look at an example to
strengthen our argument. In solving limited partial
stem reduplication in Tagalog, Antworth used two
level rules to model the solution. This same exam-
ple was repeated by Beesley and Karttunen (2003).
Efforts to rewrite the solution using replace rules re-
sulted in many rules. We used this approach to solve
the problem of partial reduplication in Kinyarwanda.
Alphabet %+:0 b c d f g h j k l m n
p q r s t v x y z a e i o u;
Sets
C = b c d f g h j k l m n p q r s t
v x y z;
V = a i e o u ;
Rules
"R for realisation as Consonant"
R:CC <=> _ E: %+: CC;
where CC in C;
"E realisation as vowel"
E:VV <=> _ %+: (C:) VV;
where VV in V;
Replace rules have an edge over two-level rules
when it comes to string to string mapping. When
the strings are of unknown length, two-level rules
cannot be applied, and we will have to use special
compilation routines from the xfst toolbox. In other
words, replace rules are more appropriate if the map-
ping requires replacement of a string, whereas two-
level rules are more appropriate when only symbols
are involved, and especially when sets of symbols
are involved. Based on this we decided to combine
the two approaches to take advantage of each for-
malism?s strength.
4 Implementation
At the onset, we wanted to solve three problems:
Full wordform reduplication (we will follow estab-
lished practice and refer to it as word reduplication),
stem reduplication and first syllable or partial stem
reduplication. Our hybrid approach was used as fol-
lows. We used the two-level rules to solve the prob-
lem they are best at solving: partial stem reduplica-
tions. Beesley and Karttunen?s compile-replace al-
77
gorithm was then used to handle full word and full
stem reduplication.
4.1 Full word and full stem Reduplication
The full word and full stem reduplication was han-
dled by use of the replace rules and the compile-
replace algorithm. The compile-replace algorithm
is based on the insight that any string S can be
reduplicated using regular expressions of the form
{S}?2. The central idea behind the application of
the compile-replace algorithm therefore is looking
for a way to enclose the stem with the delimiters {
and }?2. This was done by enclosing the whole stem
with ?[{S}?2?] in the lexicon, and given a redupli-
cation context, the compile-replace algorithm is ap-
plied to the lower side of the lexicon network, dou-
bling the stem. When the reduplication context is
not present, the delimiters were simply deleted. As
an example, take a look at part of thelexc lexicon
below:
LEXICON Root
0:?[{ AdjRoots;
0:?[{ AdvRoots;
This continues to the adverb and adjective or to
any other sublexicon
LEXICON AdjRoots
kinini AdjSuff;
kito AdjSuff;
muto AdjSuff;
Lastly we can add the suffix
LEXICON AdjSuff
+Adjective:0 Redupli;
LEXICON Redupli
+Reduplic:}?2?] #;
%+unmarked:0 #;
After compiling the lexicon and applying the
compile-replace algorithm to the lower side, the al-
ternation rules can then be applied to constrain the
surface realisation of the reduplicated words. In this
case most of the surface alternation rules were writ-
ten using replace rules formalism.
4.2 Partial stem reduplication
The solution provided by Antworth in PC Kimmo
is a good solution to handling limited length redu-
plication. We therefore adapted this solution to pro-
vide a solution to first syllable reduplication in Kin-
yarwanda. The rules we used were presented in the
previous section. We used the two-level rules be-
cause of their convenience, but, as noted, one will
get the same result by using replace rules. These
two-level rules were compiled into a finite state net-
work and then intersected using the two-level com-
piler twolc. The rule network was then applied to
the lower side of the lexicon network to produce the
required output on the surface. In the lexicon we had
to include a feature that would interact with the rules
to cause reduplication:
Lexicon PSPrefix
[Redupli]:RE+ PVRoot;
Lexicon PVRoot
jeta VFinal;
In Kinyarwanda, the partial stem reduplication is
of three types, CV , V C and CV N reduplication.
We thus made three different templates, all modeled
upon the rule shown here.
4.3 Emerging Problems in Kinyarwanda
reduplication
The solution provided above for partial reduplica-
tion seemed to work very well until we tested the
results, and then we found that there were some in-
teresting challenges.
1. some stems reduplicate and cause insertion of a
nasal. For example /gu + kama/ > /gukankama/
/gu + toma/ > / gutontoma/
2. there were cases of complex consonants which
when present makes the reduplication problem
harder. Evan Antworth?s solution was for fixed
length CV reduplicates and it is in this case ren-
dered inefficient (Antworth, 1990). Examples
/gucyocyora/
/kunyunyuza/
/gushwashwanya/
3. when demonstratives reduplication, a presenta-
tive affix /nga/ is inserted in the middle of the
reduplicates
In order to solve the first challenge, we carried out
more negative tests and looked for cases of words
that were not recognized. Of these we identified
78
reduplicates where a nasal is inserted and we found
that such cases are not very frequent. The majority
of verbs and nouns undergo full stem reduplication,
for which the provided solution was adequate. The
remaining few undergo partial stem or first syllable
reduplication. There are also cases of stems that un-
dergo both full stem and partial stem reduplication,
but these were not a challenge at all. So our solution
to the nasal insertion challenge was to write a rule
that would insert a nasal between the reduplicating
prefix and the base stem.
[] -> n || _ [ [t o m a] |
[k a m a] | ....| [v u r a]]
The second problem involving complex conso-
nants was solved by representing each complex by
a multicharacter symbol that is not used in the lex-
icon. For example, in /kunyunyuza/ there is a com-
plex consonant ny which is part of the reduplicate.
We represent all occurrences of ny with N and the
following rule will be applied lastly to effect the sur-
face realisation.
N -> ny
The third problem was solved by using replace rules.
The problem of reduplication of demonstratives was
partly solved by application of the compile-replace
algorithm and replace rules. We used a replace rule
to insert /nga/ in all the reduplicated demonstratives.
[] -> [ n g a ] || _ demo .#.
4.4 Evaluation and tests
The partial, full stem and full word reduplication
lexica were compiled and composed together in a fi-
nite state network. We applied the network of all the
rules described above for all the different issues to
the lower side of the lexicon network. We then car-
ried out tests for both analysis and generation. We
did both negative testing and positive testing. Pos-
itive involved testing the system on the words that
were part of the lexicon. These we found were all
correctly analysed. Below are some of the results:
apply up> ikigorigori
iki[CL7-SG]gori[stem_redupli][noun]
apply up> kugendagenda
ku[Inf]genda[stem_redupli][verb]
Demonstratives with nga insertion
aka[DEM-12][dem_redupli][Demonst]
akongako
ako[DEM-12][dem_redupli][Demonst]
Nasal insertion
gutontoma
ku[Inf][Redupli]toma[verb]
Complex consonants
kunyunyuza
ku[Inf][Redupli]Nuza[verb]
Full stem reduplication
gusomasoma
ku[Inf]soma[stem_redupli][verb]
Full word reduplication
muninimunini
munini+Adjective+Reduplic
Negative testing involved selecting words from
our untagged corpus of Kinyarwanda. Since these
words were not part of the lexicon, they were not
recognized and were then duly added to the lexicon.
Adding a new word to the lexicon is very easy since
it only involves identifying the reduplicating part of
the word and it is then added to the appropriate sub-
lexicon. This testing will be continued as we dis-
cover new reduplicated words.
The tests indicated above were manual tests. We
created another test set to be carried out automat-
ically. In this case we created a test file with about
100 known reduplicated forms of different word cat-
egories in Kinyarwanda. The results indicated that
the earlier problems due to unbounded reduplica-
tion: complex consonants, insertion of nasals and
the prefix /nga/ have now been fully solved.
5 Conclusion
The solutions provided in this paper have demon-
strated that existing extended finite state methods are
sufficient to handle all forms of reduplication in Kin-
yarwanda. The hybrid approach proposed in this pa-
per makes it easy to handle all forms of reduplication
problems attested in Kinyarwanda language. This
approach could also be used with other problems in
morphological analysis. The finite state developer
can solve morphological problems using the most
appropriate approach depending on whether what is
being replaced is a symbol or a string.
79
References
Antworth, E.,L. 1990. PC-KIMMO: a Two-level Proces-
sor for Morphological Analysis. No. 16 in Occasional
Publications in academic computing. Dallas: Summer
Institute of Linguistics.
Beesley, K. AND Karttunen L. 2003. Finite State Mor-
phology: CSLI Studies in Computational Linguistics.
Stanford University, CA: CSLI Publications.
Guthrie, M. 1971. Comparative Bantu. Vol. I-IV. Farn-
borough: Gregg International.
Hurskainen, A. 1992. A two-level computer formalism for
the analysis of Bantu Morphology an application to
Swahili Nordic journal of African studies 1(1): 87-119
(1992)
Karttunen, L., Kaplan, R., and Zaenen, A., (1992). Two-
level morphology with composition. Xerox Palo Alto
Research Center - Center for the Study of Language
and Information. Stanford University.
Karttunen, L. 1995. The replace Operator. Proceedings
of ACL-95, pp 16-23, Boston Massachusetts.
Karttunen, L., Beesley, K. R. 2005. Twenty-five years
of finite-state morphology. In Inquiries Into Words, a
Festschrift for Kimmo Koskenniemi on his 60th Birth-
day, CSLI Studies in Computational Linguistics. Stan-
ford CA: CSLI; 2005; 71-83.
Kay, M., Kaplan, R. 1994. Regular Models of Phonolog-
ical rule systems Computational Linguistics, Special
issue on Computational phonology, pg 331-378
Kimenyi, A. 1986. Syntax and semantics of reduplica-
tion: A semiotic account La Linguistique Vol 22 Fasc
2/1986
Kimenyi, A. 2004. Kinyarwanda morphology In the In-
ternational Handbook for inflection and word forma-
tion vol2.
Koskenniemi, K. 1983. Two-level morphology: a gen-
eral computational model for word-form recognition
and production. Publication No. 11. University of
Helsinki: Department of General Linguistics.
Muhirwe, J. and V. Baryamureeba 2007. Towards Com-
putational Morphological Analysis for Kinyarwanda.
Proceedings of the 1st International conference on
Computer science and informatics,Feb 2007, Nairobi,
Kenya.
Roark, B and Sproat, R. 2007. Computational Ap-
proaches to Morphology and Syntax. Oxford Univer-
sity Press, in press.
Trosterud, T and Uibo, H. 2005. Consonant gradation
in Estonian and Smi: two-level solution In: Inquiries
into Words, Constraints and Contexts. Festschrift in
the Honour of Kimmo Koskenniemi 60th anniversary.
CSLI Publications 2005.
80
Proceedings of the Linguistic Annotation Workshop, pages 45?48,
Prague, June 2007. c?2007 Association for Computational Linguistics
Usage of XSL Stylesheets for the annotation of the Sa?mi language corpora
Saara Huhmarniemi
University of Troms?
saara.huhmarniemi@helsinki.fi
Sjur N. Moshagen
Norwegian Sa?mi Parliament
sjur.moshagen@samediggi.no
Trond Trosterud
University of Troms?
trond.trosterud@hum.uit.no
Abstract
This paper describes an annotation system
for Sa?mi language corpora, which consists
of structured, running texts. The annotation
of the texts is fully automatic, starting from
the original documents in different formats.
The texts are first extracted from the origi-
nal documents preserving the original struc-
tural markup. The markup is enhanced by a
document-specific XSLT script which con-
tains document-specific formatting instruc-
tions. The overall maintenance is achieved
by system-wide XSLT scripts.
1 Introduction
Corpus building for a specific language is consid-
ered to require much human effort and time. To
overcome this difficulty, there is a recent develop-
ment of applications for automatic corpus building
using often the Web as a resource e.g. (Baroni and
Bernardini eds., 2006; Sharoff, 2006). For minority
languages, the resources for building a text corpus
are often limited. Automatic tools for building cor-
pus database specifically for the minority languages
are developed e.g. by (Ghani et al, 2005; Scannell,
2004).
The requirement to have the corpus building pro-
cess automatized as much as possible was also cen-
tral in the Sa?mi language corpora project. How-
ever, the collection of texts is done in a ?traditional?
manner: the files are gathered and classified man-
ually. For North Sa?mi, there are texts available in
electronic form which can be exploited in a cor-
pus database, mainly administrative and newspaper
texts. The small amount of those texts forced us
to take into account a wide variety of sources and
formats, and also to include texts that were of low
technical quality. That introduced problems for the
automatic processing of the texts. The solution to
this problem was the document-specific processing
instructions that were implemented in XSLT.
2 The Project
The corpus described here is the first structurally an-
notated text corpus for any Sa?mi language. The cor-
pus database was developed in parallel with the spell
checker and the syntactic analyzer projects for North
and Lule Sa?mi1. The new texts became test mate-
rial for these two applications as soon as they were
added to the corpus database. The requirements for
the markup were constantly being re-evaluated dur-
ing the project. The infrastructure was designed
flexible so that it would accomodate to the differ-
ent needs of the two projects in different phases of
the application development.
At the moment, the corpus database consists of al-
most 6 million words for North Sa?mi and some 240
000 for Lule Sa?mi. Even though the system was pri-
marily designed for the Sa?mi languages, there are
no strictly language-dependent sections in the sys-
tem; it has already been tested with Norwegian and
Finnish, among others.
One of the main applications of the text corpus
database is the syntactically annotated and fully dis-
ambiguated corpus database for Sa?mi languages.
The syntactic annotation is done automatically us-
1http://www.divvun.no/, http://giellatekno.uit.no/
45
ing the tools developed in the syntactic analyzer
project, but the process is out of the scope of this
paper. There is also some parallel texts with Norwe-
gian, and plans for extending parallel text corpora to
different Sa?mi languages and Finnish and Swedish.
The corpus database is freely available for research
purposes. There will be a web-based corpus inter-
face for the syntactically annotated corpus and a re-
stricted access to the system for examining the cor-
pus data directly.
3 XSLT and corpus maintenace
Flexibility and reusability are in general the design
requirements of annotated text corpora. XML has
become the standard annotation system in physical
storage representation. XML Transformation Lan-
guage (XSLT) (Clark ed., 1999) provides an easy
data transformation between different formats and
applications. XSLT is commonly used in the con-
temporary corpus development. The power of XSLT
mainly comes from its sublanguage XPath (Clark
and DeRose eds., 1999). XPath provides an access
to the XML structure, elements, attributes and text
through concise path expressions.
In the Sa?mi language corpora, XSLT is used in
corpus establishment and maintenance. The raw
structural format is produced by text extraction tools
and coverted to a preliminary XML-format using
XSLT. The markup is further enhanced by document
specific information and a system-wide processing
instruction, both implemented in XSLT.
4 The Sa?mi corpus database
4.1 Overall architecture
The corpus database is organized so that the original
text resources, which are the documents in various
formats (Word, PDF, HTML, text) form the source
base. The text is extracted from the original docu-
ments using various freely available text extraction
tools, such as antiword and HTML Tidy. They al-
ready provide a preliminary structural markup: anti-
word produces DocBook and HTML Tidy provides
output in XHTML. There are XSLT scripts for con-
verting the different preliminary formats the to an
intermediate document format.
The intermediate format is further processed to
the desired XML-format using XSLT-scripts. The
result is the final XML-document with structural
markup, see Fig. 1.
Figure 1: The overall architecture of the conversion
process.
The conversion of a document always starts from
the original file, which makes it possible to adapt
for the latest versions of the text extraction tools and
other tools used in the process as well as the changes
in XML-markup.
The annotation process is fully automatic and
can be rerun at will. Some documents may con-
tain errors or formatting that are not taken into ac-
count by the automatic tools. On the other hand,
the automatized annotation process does not allow
manual correction of the texts, nor manual XML-
markup. Those exceptions can be taken into account
by document-specific processing instructions, which
are implemented using XSLT. The script can be used
for adding XML-annotation for specific parts of the
document, fixing smaller errors in the document, or
even to rescue a corrupted file that would be other-
wise unusable. This is a useful feature when build-
ing a corpus for a minority language with diverse
and often limited text resources.
4.2 XML-annotation
In the Sa?mi language corpora, markup of running
text is simple, containing no more structural infor-
mation than what is generally available in the orig-
inal text. The body text can contain sections and
paragraphs and each section can contain sections
and paragraphs. There are four paragraph types: ti-
46
tle, text, table and list. The paragraphs are classified
whenever the information is available in the origi-
nal document. Lists and especially tables contain in-
complete sentences and in many cases numeric data.
When conducting e.g. syntactic analysis, it might
be better to leave tables and even lists or titles out,
whereas for e.g. terminological work the tables are
highly relevant. Tagging for paragraph type makes it
possible to include or exclude the relevant paragraph
types at will.
Inside a paragraph, there is a possibility to
add emphasis markup and other span information,
such as quotes. The sentence-level and word-level
markup is not included in the text corpus. The
markup is added when the text corpus is moved to
the syntactically annotated corpus database.
The XML-annotation does not follow any stan-
dardized XML-format, but it is, in essence, a subset
of the XCES (Ide et al, 2000) format. Furthermore,
the system is designed so that changing the XML-
annotation and moving to a standardized format is a
straightforward process.
4.3 XSLT processing
Each original document in the corpus database is
paired with an XSLT script. The document-specific
XSLT script contains processing instructions that are
applied to the document during the conversion from
the preliminary document format to the final XML-
format (see Fig. 1.). The XPath expressions are pow-
erful tools for accessing portions of text in a docu-
ment and modifying the XML-markup without edit-
ing the XML-file itself. The usage of the XPath ex-
pressions entails that the XML-structure of a docu-
ment does not change, which poses some restrictions
to the intermediate format of the document.
The XSLT script contains the document metadata
and status information, among other relevant data.
The document metadata is stored in variables in
the document-specific XSLT script, and the system-
wide XSLT scripts access these variables and con-
vert them to the required format.
The system-wide XSLT script contains functions
and templates that can be called from the document-
specific XSLT script. There is for example a string-
replacement function for correcting errors that are
of technical origin, such as wrongly converted Sa?mi
characters that were missed by the automatic detec-
tion of wrongly encoded characters.
Another example of a template that can be called
from the document-specific XSLT script is the
string-replacement, that can be used for marking
spelling errors in the text. Due to the variety of con-
ventions of writing Sa?mi, the texts tend to contain
lot of strings that are classified as spelling errors.
The errors disturb the testing of the analyzer, but are
on the other hand interesting from the point of view
of the spell checker project. When a spelling error
is discovered in the text, the erroneous strings and
their corrections are added to the document-specific
metafile from where they are picked by the con-
version process. The errors are thus preserved in
the XML-format but with a correction which can be
used instead of the erroneous string. This is achieved
by a special markup:
<error correct="text">tetx</error>
In this way the original documents stay intact and
the information is preserved also when the file is re-
converted. If the error is not just a single word but
involves more context, it is possible to add the con-
text to the error string.
In addition, the document-specific XSLT script
contains variables that may be used already in the
text extraction phase. An example would be the text
alignment information of a pdf-file.
4.4 Language identification
Most documents in the Sa?mi corpus database con-
tain sections of text that are not in the document?s
main language. Those sections are marked at para-
graph level, using the attribute xml:lang.
The language identification is done using the
TextCat tool (van Noord, 1997). Since the differ-
ent Sa?mi languages and the close relative Finnish re-
semble each other significantly (the same is true for
the Scandinavian languages), the search space was
reduced at the document level. The information of
the document languages was stored to the document-
specific XSLT script.
Since the Sa?mi texts contain lot of quotations
from other languages, especially from the major-
ity language (Norwegian, Swedish or Finnish), the
quoted text fragments are analysed separately using
TextCat and marked with a corresponding xml:lang
attribute. For example:
47
<span type="quote" xml:lang="nob">
"Arbeidet med fylkesplanene"
</span>
(bargu fylkkapla?naiguin).
When a sentence that contains a quotation in a for-
eign language is given to the syntactic analyzer, the
quotation can be considered as a syntactic unit and
that way carried through the analysis.
4.5 Other processing
Character set conversion may be a central task when
a corpus is built for minority languages, due to a
large repertoire of non-standardized 8-bit character
sets, e.g. (McEnery et al, 2000; Trosterud, 1996).
In the Sa?mi corpus database, the text extraction tools
often produced wrongly-utf8 -encoded output, due
to erroneous codepage IDs and font specifications.
There is a specific module for guessing the docu-
ments? original code-page, and for fixing errouneous
utf8-conversion.
There are a couple of other scripts that are ap-
plied to the final XML-documents. For example,
real hyphenation marks in the document are pre-
served for testing of the hyphenator. The hyphen-
tags are marked automatically, taking into account
some language specific cues and information of e.g
list context.
5 Conclusion
The system is flexible and reusable since the central
XSLT processing allows for changes in the XML-
structure as well as the introduction of new struc-
tural information. The intermediate XML-formats
which are produced by the text extraction tools are
straightforward to convert to a format that conforms
to the project?s DTD using XSLT processing. In-
stead of trying to predict the future uses of the corpus
database in the beginning of the project, the infras-
tructure was set up so that it evolves throughout the
project.
The main problem in the heavy usage of XSLT
is that the syntax of the XSLT is quite restricted al-
though XSLT/XPath 2 brings some improvements.
The lack of regular expressions is one of the restric-
tions, so some of the string-replacement functions
had to be implemented by other means. In the fu-
ture, these could probably be replaced with XPath 2
functions.
Fully-automated, XSL/XML-based conversion
has made it possible to build a corpus of decent
size for small languages. After the initial infrastruc-
ture is created, adding new documents does not re-
quire much resources. The system does not involve
any strictly language-dependent processing, so it is
portable to other languages. The result is a clean,
classified and XML-annotated corpus which can be
used in research and different language technology
applications.
References
Marco Baroni and Silvia Bernardini (eds.). 2006.
Wacky! Working papers on the Web as Corpus.
http://wacky.sslmit.unibo.it/.
James Clark (ed.). 1999. XSL Transforma-
tions (XSLT) 1.0. W3C Recommendation.
http://www.w3.org/TR/xslt.
James Clark and Steve DeRose (eds.). 1999. XML
Path Language (XPath) 1.0. W3C Recommendation.
http://www.w3.org/TR/xpath.
Rayid Ghani, Rosie Jones, and Dunja Mladenic. 2005.
Building Minority Language Corpora by Learning to
Generate Web Search Queries. Knowledge and Infor-
mation Systems, 7(1):56?83.
Nancy Ide, Patrice Bonhomme, and Laurent Romary.
2000. XCES: An XML-based Encoding Standard for
Linguistic Corpora. Proceedings of the Second Lan-
guage Resources and Evaluation Conference (LREC)
825?830.
Anthony McEnery, Paul Baker, Rob Gaizauskas, Hamish
Cunningham. 2000 EMILLE: Building a corpus of
South Asian languages. Vivek, A Quarterly in. Artifi-
cial Intelligence, 13(3): 23?32.
Kevin P. Scannell. 2004. Corpus Building for Minority
Languages. http://borel.slu.edu/crubadan/.
Serge Sharoff. 2006. Open-source corpora: using the
net to fish for linguistic data International Journal of
Corpus Linguistics, 11(4): 435-462.
Trond Trosterud. 1996 Funny characters on the net.
How information technology may (or may not) do sup-
port minority languages. Arbete ma?nniska miljo? &
Nordisk Ergonomi, 3:114?125.
Gertjan van Noord. 1997. TextCat Language Guesser.
http://www.let.rug.nl/?vannoord/TextCat/.
48
Proceedings of the 2014 Workshop on the Use of Computational Methods in the Study of Endangered Languages, pages 34?42,
Baltimore, Maryland, USA, 26 June 2014.
c?2014 Association for Computational Linguistics
Modeling the Noun Morphology of Plains Cree
Conor Snoek
1
, Dorothy Thunder
1
, Kaidi L?oo
1
, Antti Arppe
1
,
Jordan Lachler
1
, Sjur Moshagen
2
, Trond Trosterud
2
1
University of Alberta, Canada
2
University of Troms?, Norway
snoek@ualberta.ca, dthunder@ualberta.ca, kloo@ualberta.ca,
arppe@ualberta.ca, lachler@ualberta.ca,
sjur.n.moshagen@uit.no, trond.trosterud@uit.no
Abstract
This paper presents aspects of a com-
putational model of the morphology of
Plains Cree based on the technology of
finite state transducers (FST). The paper
focuses in particular on the modeling of
nominal morphology. Plains Cree is a
polysynthetic language whose nominal
morphology relies on prefixes, suffixes
and circumfixes. The model of Plains
Cree morphology is capable of handling
these complex affixation patterns and
the morphophonological alternations
that they engender. Plains Cree is an
endangered Algonquian language spo-
ken in numerous communities across
Canada. The language has no agreed
upon standard orthography, and exhibits
widespread variation. We describe prob-
lems encountered and solutions found,
while contextualizing the endeavor in the
description, documentation and revitaliza-
tion of First Nations Languages in Canada.
1 Introduction
The Department of Linguistics at the University of
Alberta has a long tradition of working with First
Nations communities in Alberta and beyond. Re-
cently a collaboration has begun with Giellatekno,
a research institute at the University of Troms?,
which has specialized in creating language tech-
nologies, particularly for the indigenous Saami
languages of Scandinavia, but also for other lan-
guages that have received less attention from the
computational linguistic mainstream. This collab-
oration is currently focusing on developing com-
putational tools for promoting and supporting lit-
eracy, language learning and language teaching.
Plains Cree is a morphologically complex lan-
guage, especially with regard to nouns and verbs.
While we are working to develop a complete
finite-state model of Plains Cree morphology, we
focus on nominal morphology in this paper.
In the first section we briefly describe Plains
Cree nominal morphology and give some back-
ground on the language. This is followed by de-
tails on the model and its implementation. Fi-
nally, we discuss the particular situation of de-
veloping tools for a language that lacks a formal,
agreed-upon standard and the challenges that this
presents. We conclude with some comments on
the benefits of this technology to language revital-
ization efforts.
2 Background
2.1 Plains Cree
Plains Cree or n?ehiyaw?ewin is an Algonquian
language spoken across the Prairie Provinces in
what today is Canada. It forms part of the
Cree-Montagnais-Naskapi dialect continuum that
stretches from Labrador to British Columbia. Es-
timates as to the number of speakers of Plains Cree
vary a lot and the exact number is not known,
from a high of just over 83,000 (Statistics Canada
2011, for Cree without differentiating for Cree di-
alects) to as low as 160 (Ethnologue 2013). Wol-
fart (1973) estimated there to be about 20,000 na-
tive speakers, but some recent figures are more
conservative.
Regardless of the exact number of speakers,
there is general agreement that the language is un-
der threat of extinction. In many, if not most, com-
munities where Cree is spoken, children are learn-
ing English as a first language, and encounter Cree
only in the language classroom. However, vigor-
ous revitalization efforts are underway and Cree is
regarded as one of the Canadian First Nations lan-
guages with the best chances to prosper (Cook and
Flynn, 2008).
As a polysynthetic language (Wolvengrey,
34
2011, 35), Plains Cree exhibits substantial mor-
phological complexity. Nouns come in two gen-
der classes: animate and inanimate. Each of these
classes is associated with distinct morphological
patterns. Both animate and inanimate nouns carry
inflectional morphology expressing the grammati-
cal categories of number and locativity. The num-
ber suffixes for animate and inanimate nouns are
different, the plural being marked by -ak in ani-
mates and -a in inanimates. Locativity is marked
by a suffix taking the form -ihk (with a number of
allomorphs). The locative suffix cannot co-occur
with suffixes marking number or obviation, but
does occur in conjunction with possessive affixes.
Obviation is a grammatical category marked on
animate nouns that indicates relative position on
the animacy hierarchy, when there are two third
person participants in the same clause. Obviation
is expressed through the suffix -a, which forms a
mutually exclusive paradigmatic structure with the
locative and number prefixes.
The possessor of a noun in Plains Cree is ex-
pressed through affixes attached to the noun stem.
These affixes mark person and number of the
possessor by means of a paradigmatic inflectional
pattern that includes both prefixes and suffixes.
Since matching prefixes and suffixes need to
co-occur with the noun when it is possessed, it
is possible to treat such prefix-suffix pairings as
circumfixes expressing a single person-number
meaning. The noun maskisin in (1) below
1
is
marked for third person plural possessors as well
as being plural itself. The inanimate gender class
is recognizable in the plural suffix -a, which
would be -ak in the case of an animate noun.
(1)
omaskisiniw?awa
o-maskisin-iw?aw-a
3PL.POSS-shoe-3PL.POSS-PL.IN
?their shoes?
Nouns also occur with derivational morphology
in the form of diminutive and augmentative
suffixes. The diminutive suffix is productive and
forms taking the diminutive suffix can occur with
all the inflectional morphology described above.
1
The following abbreviations are used POSS = possessive
prefix/suffix; LOC = locative suffix; OBV = obviative suffix;
DIM = diminutive suffix; NUM = number marking suffix; IN
= inanimate; PL = plural.
(2)
omaskisinisiw?awa
o-maskisin-is-iw?aw-a
3PL.POSS-shoe-DIM-3PL.POSS-PL.IN
?their little shoes?
The particular form of the diminutive, how-
ever, varies considerably. For example, the most
common form of the suffix is -is.
The suffix triggers morphophonemic changes in
the stem. For example, the ?t? in osk?at?askw- ?car-
rot? changes to ?c? (the alveolar affricate [ts]) when
the diminutive suffix is present resulting in the
form osk?ac?askos. Since the form osk?at?askw- is a -
w final form a further phonological change occurs,
namely the initial vowel in the suffix changes from
i > o.
To sum up, Plains Cree nominal morphology
allows the following productive pattern types:
(3)
stem+NUM
stem+OBV
stem+LOC
stem+DIM+NUM
stem+DIM+OBV
stem+DIM+LOC
POSS+stem+POSS+NUM
POSS+stem+DIM+POSS+NUM
POSS+stem+DIM+POSS+OBV
POSS+stem+POSS+LOC
POSS+stem+DIM+POSS+LOC
Plains Cree can be written both with the Ro-
man alphabet and with a Syllabary. Theoretically
there is a one-to-one match between the two.
However, a number of factors complicate this
relationship. Differing punctuation conventions,
such as capitalization, and the treatment of
loanwords make conversion from one writing
system to another anything but a trivial matter.
Orthography presents a general problem for the
development of computer-based tools, because
unlike nationally standardized languages, ortho-
graphic conventions can vary considerably from
community to community, even from one user
to another. Certain authors have argued for the
adoption of orthographic standards for Plains
Cree (Okim?asis and Wolvengrey, 2008), but there
simply is no centralized institution to enforce
35
orthographic or other standardization. This means
that the wealth of varying forms and dialectal
diversity of the language are apparent in each in-
dividual community. This situation poses specific
challenges to the project of developing language
tools that are more seldom encountered when
making spell-checkers and language learning
tools for more standardized languages.
Similar situations have been encountered in
work on the Saami languages of Scandinavia
(Johnson, 2013). Following their work, we in-
clude dialectal variants in the model, but mark
them with specific tags. This permits a tool such as
a spell-checker to be configured to accept and out-
put a subset of the total possible forms in the mor-
phological model. An example here is the distribu-
tion of the locative suffix described in more detail
in section 4. There is a disparity between com-
munities regarding the acceptability of the occur-
rence of the suffix with certain nouns. The suffix
can be marked with a tag in the FST-model. This
tag can then be used to block the acceptance or
generation of this particular form. The key notion
here is that language learning and teaching tools
are built on the basis of the general FST model.
For Plains Cree there is one inclusive model, en-
compassing as much dialectal variation as possi-
ble. From this, individual tools are created, e.g.
spell-checkers, that selects an appropriate subset
of the dialectally marked forms. A community
can therefore have their own spell-checker, spe-
cific to their own preferences. It is also possi-
ble to allow for ?spelling relaxations? (Johnson,
2013, 67) at the level of user input, meaning that
variant forms will be recognized, but constraining
the output to a selection of forms deemed appro-
priate for a given community. Hence, the spell-
checker used in one particular community could
accept certain noun-locative combinations. At the
same time, other tools, such as paradigm learn-
ing applications, could block this particular noun-
locative combination from being generated: cer-
tain forms are understood, but not taught by the
model. In general, the variation is not difficult to
deal with in terms of the model itself, rather it rep-
resents a difficulty in the availability of accurate
descriptions, since their specifics must be known
and understood to be successfully included in the
model.
This method could, in principle, be used to ex-
tend the Plains Cree FST-model to closely related
Algonquian languages. However, rather than cre-
ating a proliferation of dialectal tags, it is easier
to reproduce the architecture of the model and use
it to create a new model for the related language.
This allows the preservation of formal structures
that follow essentially the same pattern, such as
possessive inflection for example, while replacing
the actual surface forms with those of the target
language.
2.2 Previous computational modeling of
Algonquian languages
Previous work on Algonquian languages that has
taken a computational approach is not extensive.
Hewson (1993) compiled a dictionary of Proto-
Algonquian terms generated through an algorithm.
His data were drawn from fieldwork carried out
by Leonard Bloomfield. Kondrak (2002) applied
algorithms for cognate identification to Algon-
quian data with considerable success. Wolfart and
Pardo (1973) worked on a sizable corpus of Cree
data and developed tools for data management and
analysis in PL/I. Junker and Stewart (2008) have
written on the difficulties of creating search engine
tools for East Cree and describe challenges simi-
lar to the ones we have encountered with regard
to dialectal variation and the absence of agreed on
standard orthographies and other widespread con-
ventions.
In general, computational approaches to Algon-
quian, and other Indigenous North American lan-
guages, have been hampered by the fact that in
many cases large bodies of data to develop and test
methods on are just not available. Even for Plains
Cree, which is relatively widely spoken, and rela-
tively well documented, the available descriptions
are still lacking in many places. As a result, field-
work must be undertaken in order to establish pat-
terns that can be modeled in the formalism neces-
sary for the finite state transducer (FST) to work,
a point that will be expanded on below.
3 Modeling Plains Cree morphology
The finite state transducer technology that forms
the backbone of our morphological model, and
consequently of all the language applications we
are currently developing, is based historically on
work on computational modeling of natural lan-
guages known as two-level morphology (TWOL)
by Koskenniemi (1983). His ideas were further
developed by Beesley and Karttunen (2003).
36
Their framework offers two basic formalisms with
which to encode linguistic data, lexc and twolc.
The Lexicon Compiler, or lexc, is ?a high-level
declarative language and associated compiler?
(Beesley and Karttunen, 2003, 203) used for
encoding stem forms and basic concatenative
morphology. The source files are structured in
terms of a sequence of continuation lexica. Begin-
ning with an inventory of stems the continuation
lexica form states along a path, adding surface
morphological forms and underlying analytic
structure at each stage. A colon (:) separates
underlying and surface forms. Example (4)
demonstrates paths through just three continua-
tion lexica for the animate nouns apiscacihkos
?antelope? and apisim?osos ?deer?. By convention,
the names of continuation lexica are given in
upper case. Stems and affixes represent actual
word forms, and are thus given in lower case. The
?+? sign indicates a morphological tag.
(4)
LEXICON ANSTEMLIST
apiscacihkos ANDECL ;
apisim?osos ANDECL ;
LEXICON ANDECL
< +N:0 +AN:0 +Sg:0 @U.noun.abs@ # > ;
< +N:0 +AN:0 @U.noun.abs@ OBVIATIVE > ;
LEXICON OBVIATIVE
< +Obv:a # > ;
Both forms are directed to the continuation
lexicon here named ANDECL which provides
some morphological tagging in the form of +N to
mark the word as a noun and +AN to denote the
gender class ?animate?. Each of the two nouns has
the possibility of passing through the continuation
lexicon ANDECL as an ?absolutive? noun ? as
indicated by the tag @U.noun.abs@ (a flag
diacritic, as will be explained below). The colons
in the code indicate a distinction between upper
and lower levels of the transducer. The upper form
to the left of the colon is a string containing the
the lemma as well as a number of tags that contain
information about grammatical properties. For
the word form apiscacihkos, the analysis once it
has passed through the ANDECL continuation
lexicon is apiscacihkos+N+AN+Sg.
The surface forms apiscacihkos and apisim?osos
are well-formed strings of Plains Cree, following
the Standard Roman Orthography. Hence, the
path can terminate here as indicated by the hash
mark. The other path, also open to both forms
since they pass through the same continuation
lexicon, leads to a further continuation lexicon
named OBVIATIVE. This rather small lexicon
adds a final -a suffix and the tag +Obv indicating
that the form is inflected for the grammatical
category of obviation. Since no number suffixes
can occur in this form the path does not add a +Sg
or +Pl tag to the underlying form.
(5)
apiscacihkos+N+AN+Obv
apiscacihkosa
?antelope?
These circumfixes were modeled using Flag
Diacritics, which are an ?extension of the finite
state implementation, providing feature-setting
and feature-unification operations? (Beesley and
Karttunen, 2003, 339). Flag diacritics make it
possible for the transducer to remember earlier
states. The transducer may travel all paths through
the prefixes via thousands of stems to all the
suffixes, but the flag diacritics ensure that only
strings with prefixes and suffixes belonging to
the same person-number value are generated. In
our solution for nouns, the continuation lexica
allow all combinations of possession suffixes
and prefixes, but the flag diacritics serve to filter
out all undesired combinations. For example, in
the noun omaskisiniw?awa from (1) above, the
third person prefix o- and the suffix marking both
person and number -iw?aw are annotated in the
lexc file with identical flag diacritics, so that they
will always occur together.
Plains Cree has some very regular and pre-
dictable morphophonological alternations that
can be modeled successfully in the finite state
transducer framework. The formalism used here
is not lexc as in the listing of stems and the
concatenative morphology, but an additional for-
malism called the two-level compiler or twolc that
is well suited to this task. The twolc formalism
was developed by Lauri Karttunen, Todd Yampol,
Kenneth R. Beesley and Ronald M. Kaplan based
on ideas set forth in Koskenniemi (1983).
37
(6)
ac?awewikamikosis
at?awewikamikw-isis
store-DIM
?little store?
In (6) above, at?awewikamikw- ?store? is modi-
fied by the derivational suffix -isis marking the
diminutive form. This derivation is highly pro-
ductive in Plains Cree. The underlying form of the
suffix is -isis but in conjunction with a stem-final
-w, the initial vowel of the suffix changes to -o.
This morphophonemic alternation can be written
in twolc much like a phonological rule:
(7)
i:o <=> w: %>:0 s: +Dim ;
The sign %> is used to mark a suffix bound-
ary, which, along with the +Dim tag, ensures that
it is the first vowel of the suffix that undergoes
substitution. Thus the context is given by the
occurrence of a -w before the suffix boundary,
i.e. stem finally. An additional complication here
is that the presence of the diminutive suffix in a
form again triggers a phonological change in the
stem by which all t?s change to c?s (phonetically
[ts]). In twolc the rules dictating morphophono-
logical alternations apply in parallel, avoiding
possible problems caused by sequential rule
interactions. The noun completes the path through
the continuation lexica and is passed to twolc as
at?awewikamikwisis. There it undergoes two
morphophonological changes giving the correct
surface form ac?awewikamikosis.
Twolc is a powerful mechanism for dealing with
regular alternations. Reliance on twolc can reduce
the number of continuation lexica and hence com-
plexity of the morphology modeling carried out in
lexc. The downside of using large numbers of
twolc rules is the increasing complexity of rule
interactions. We have found that decisions about
which strategy to pursue in the modeling of a par-
ticular morphological pattern must frequently be
made on a case by case basis. For example, in
modeling the interesting case of the form atimw-
?dog? several strategies needed to be employed.
The form triggers a vowel change i > o in con-
junction with the diminutive suffix -isis resulting
in -osis, a change falling under a rule described
in (8) above. A further change here is that the t
in atimw- ?dog? changes to c when the diminutive
suffix is present resulting in the surface form aci-
mosis. Both these forms can be handled by twolc
rules such as the one exemplified in (8) above.
However, atimw- also undergoes changes in the
stem vowel when the noun is marked for a pos-
sessor so that a > i and i > ?e. In the first person,
the possessive prefix takes the form ni- leading to
a sequence of two vowels arising from the prefix
final -i- and stem initial -i-, which is not permit-
ted in Plains Cree. This situation is handled by a
general rule deleting the first vowel in preference
for the latter. However, a set of twolc rules would
be required to change the stem vowels ? a set that
would be specific to this particular word only. The
full set of two level rules are accessible online
2
.
Since the addition of further rules poses the risk
of rule conflicts in an increasingly complex twolc
code, the stem vowel changes are handled in lexc
instead. There are currently over 40 continuation
lexica in the model of nominal morphology alone.
(8)
LEXICON IRREGULARANIMATESTEMS
atim IRREGULARINFLECTION-1 ;
atim:t?em IRREGULARINFLECTION-2 ;
The continuation lexicon contains two ver-
sions of the form atim with two different paths
leading to further inflectional suffixes. In the
second instance of atim, writing the base form to
the left of the colon and the suppletive stem to
the right ensures both that the form -t?em surfaces
correctly. In the analysis the base form atim can
still be recovered. The forms are sent to differing
continuation lexica, since only the suppletive
forms occurs within the paradigm of possessive
prefixes. The word meaning ?my little dog? is
given as an example in (10) below.
(9)
nic?emisis
ni-atimw-isis
1SG.POSS-dog-DIM
?my little dog?
The suppletive form also does not carry an
underlying -w and hence no longer triggers the
vowel change in the diminutive suffix. With this
2
https://victorio.uit.no/langtech/
trunk/langs/crk/src/phonology/crk-phon.
twolc
38
solution we can handle the regular and more
straightforward morphophonological alternations
in twolc, while avoiding undue complexity by
modeling the suppletive forms in lexc.
Finally, we have adopted a system of using spe-
cial tags to denote dialectal variants that are not
equally acceptable in different communities. The
seemingly high level of variation found in Plains
Cree can be related to several reasons described
in more detail in the next section. The variation
is dealt with in the morphological model with a
tagging strategy that marks dialectal forms. This
tagging allows for the systems based on the mor-
phological model to behave in accordance with
the wishes of the user or community of users.
In the setting of a particular teaching institution,
for instance, only a certain subset of the vari-
ants encoded in the morphological model might be
deemed acceptable. Our model permits this com-
munity to adjust the applications they are employ-
ing, e.g. a spell-checker, so that their community-
specific forms are accepted as correct.
The stems are accessible online
3
, and may be
analysed and generated at the webpage for Plains
Cree grammar tools
4
.
4 The necessity for fieldwork in modeling
Plains Cree
We began working on the morphological model
of Plains Cree by examining published sources,
such as Plains Cree: A grammatical study (Wol-
fart, 1973) and Cree: Language of the Plains
(Okim?asis, 2004). Okim?asis? work is clearly
structured and contains a wealth of information.
Nevertheless, the level of explicitness required to
capture the nature of a language in enough de-
tail for applications such as, for example, spell-
checkers is beyond the scope of her work. This
is to say that in formalizing Okim?asis? descrip-
tion we needed to generalize grammatical patterns
that were not always explicitly spelled out in her
work in every detail. It should be apparent here
that a number of factors come in to play here that
make working on Plains Cree quite a different un-
dertaking from working on a European language
with a long history of research in the Western aca-
demic tradition. While official national European
languages such as German, Finnish or Estonian
3
https://victorio.uit.no/langtech/
trunk/langs/crk/src/morphology/stems/
4
http://giellatekno.uit.no/cgi/index.
crk.eng.html
can look on scholarly work dating back some cen-
turies, and are supported by work from a com-
munity of specialists numbering hundreds of peo-
ple, work on Plains Cree (and other languages in
similar situations) is being carried out by what
is at best a handful of people. While Cree lan-
guage specialists form a professional body of re-
searchers with a proud tradition, they are faced
with the enormous task of documenting a language
spoken in many small communities spread over a
huge geographical area. In addition, many of those
specialists are also involved with language revi-
talization and language teaching, with the result
that less time can be devoted to language descrip-
tion, scholarship and the pursuit of larger projects
such as the development of corpora. While such
projects are under development in many areas, the
demands placed on individual researchers and ac-
tivists has resulted in an overall scarcity of re-
sources. While compared to other Indigenous
languages spoken in Canada, Plains Cree is rel-
atively well documented, many of the resources
that would be desirable assets for the development
of a finite state model are not available. As a re-
sult, we have carried out fieldwork to further make
explicit the full inflectional paradigm of nouns in
Plains Cree.
There is considerable variation among speak-
ers and specialists regarding the acceptability of
certain inflectional possibilities. For example, in
the case of one animate noun atim ?dog? it seems
formally reasonable to allow its combination with
the locative suffix -ohk rendering atimohk. This
combination of stem and affix was considered im-
possible or at least implausible by some of our
native speaker consultants. However, the form
itself does occur, albeit in the guise of a place
name for a lake island in northern Saskatchewan
named atim ?dog?. Therefore the form atimohk ?on
the dog? with locative suffix attached can occur
in this very specific and geographically bounded
context
5
. The way of coping with this is to lexi-
calize atimohk as locative of the island Atim, and
to keep the noun atim outside the set of nouns get-
ting regular locatives.
Further inquiry into this matter revealed that
some speakers see the locative suffix as potentially
occurring quite widely, while others are more re-
strictive (Arok Wolvengrey ? p.c.). Here again
there is a problem of scale: individual speakers of
5
Thanks to Jan Van Eijk for pointing this out.
39
any language have only a partial experience of the
possible extent of the language. In the modeling
of the morphology for the purposes of such tech-
nologies as spell-checkers, for example, the expe-
rience of any potential speaker must be taken into
account. While the information that this particu-
lar form is rare or semantically not well-formed
is valuable, retaining the form is important, if the
model is to cover the range of potential usage pat-
terns of all Plains Cree speakers. Ideally, if the
written use of the language is supported by the
tools that can be developed based on our morpho-
logical model, that would lead to a gradually in-
creasing electronic corpus of texts, providing fre-
quency information on both the stems and mor-
phological forms.
We have developed a workflow in which we
construct the maximal paradigms that are theoreti-
cally possible and then submit them to intense na-
tive speaker scrutiny. Only once native speakers
and specialists have approved the forms do they
become part of the actual model. The paradigms
are chosen so as to provide the coverage of the
entire span of morphologically possible forms as
well as all morphophonemic alternations. As such
they present a maximal testbed for the patterns en-
coded in the formalism. Each paradigm consists
of about sixty inflected forms.
Overall, a careful balance must be struck be-
tween directly explicit speaker/specialist input and
theoretically possible forms. We aim to achieve
this balance by taking a threefold approach: First,
by careful consultation with speakers and special-
ists; second, by building a corpus
6
which can serve
as a testing ground for the morphological analyzer
and as a source of data, and third by working
closely with communities willing to test the model
and provide feedback.
5 Applications in language teaching and
revitalization
The development of an explicit model of the mor-
phology of Plains Cree as outlined above is of
benefit not just to researchers but also those in-
volved in teaching and revitalizing the language
within their home communities. Using the gen-
eral technological infrastructure developed by the
researchers at Giellatekno, we are able to take the
6
As noted above, a tool like a spell-checker promotes lit-
eracy and hence contributes naturally to the increase in tex-
tual materials. Until that begins to happen, however, we are
collecting texts through recording and transcription.
FST model of Plains Cree morphology and use it
to create in one go a variety of language tools in-
cluding a spellchecker, a morphological analyzer
and a paradigm generator, which can be integrated
as modules within general software applications
such as a word-processor, an electronic dictionary
or a intelligent computer-aided language learning
(ICALL) application. Each of these tools can as-
sist fluent speakers, as well as new learners, in
their use of Plains Cree as a written language.
The spellchecking functionality within a word-
processor will be a valuable tool for the small-but-
growing number of Plains Cree language profes-
sionals who are engaged in the development of
teaching and literary resources for the language.
It will allow for greater accuracy and consistency
in spelling, as well as faster production of materi-
als. Because dialectal variation is being encoded
directly into the FST model, the spellchecker can
be configured so that writers from all communities
and dialects can use this tool, without worry that
the technology is covertly imposing particular or-
thographic standards which the communities have
not all agreed upon.
The morphological analysis functionality built
from the FST model and integrated within e.g. a
web-based electronic dictionary will allow readers
to highlight Plains Cree text in a document or web-
page to perform a lookup of words in any inflected
form, and not only with the citation (base) form.
This will enable readers to more easily read Plains
Cree documents with unfamiliar words without
needing to stop to repeatedly consult paper dic-
tionaries and grammars. While this does not obvi-
ate the need for printed resources in learning and
teaching of the language, such added functional-
ity can greatly increase the pace at which texts
are read through by language learners. This is not
inconsequential as it can slow down considerably
the onset of weariness brought on by needing to
interrupt the reading process to consult reference
materials, and hence maintain the motivation for
language learning.
The paradigm generation functionality within
e.g. an electronic dictionary allows users to se-
lect a word and receive the full, or alternatively a
smaller but representative, inflected paradigm of
that word. This will be of direct benefit to in-
structors developing materials to teach the com-
plex morphology of the Plains Cree, as well as
their students.
40
We are working in collaboration with Plains
Cree communities in the development and piloting
of these tools, to ensure their accuracy and their
usefulness for teachers, developers, learners and
other community members. The full range of uses
that these tools will be put to will only become ap-
parent over time, but we expect that they will have
a positive impact for community language main-
tenance by supporting the continued development
Plains Cree literacy.
6 Conclusion
We have found the technology of Finite State
Transducers so useful in developing language ap-
plications for Plains Cree because it permits us
to integrate native speaker competence and spe-
cialized linguistic understanding of grammatical
structures into the model directly.
At present the analyzer contains 72 nominal lex-
emes, carefully chosen to cover all morphologi-
cal and morphophonological aspects of the Plains
Cree nominal system. Once the morphological
modeling of this core set of nouns has been final-
ized, scaling up the lexicon will be a trivial task,
as all lexicographic resources classify their stem
in the same way as is done in the morphological
transducer.
We have described our method of working with
native speaker specialists and how their insights
are reflected in the design of the model. This in-
teraction also allows enough possibilities for in-
teractions with language teachers, learners and ac-
tivists so that we make our work truly useful to the
effort of preserving and revitalizing the precious
cultural heritage that is Plains Cree. We are aware
of the limits of tools that relate primarily to the
written forms for languages that have rich oral his-
tories and cultures, but feel that writing and read-
ing Plains Cree will play an ever growing role in
the future of this language.
This work makes practical contributions to lin-
guistic research on Plains Cree. On the one hand,
creating the model required the formalization of
many aspects of Plains Cree morphology which
had not previously been spelled out in full detail,
i.e. it makes explicit what is known, or not known,
about Plains Cree morphology, and thus allows us
to extend the description of Plains Cree morphol-
ogy accordingly. On the other, the morphological
analyses can aid in future linguistic discovery es-
pecially when used in conjunction with corpora.
In the future, we will continue to expand the
morphological model both in its grammatical cov-
erage and in the size of the lexical resources which
go into it. In regard to the latter, we are working
with Cree-speaking communities in Alberta to ex-
pand on existing dictionaries and develop collec-
tions of recordings. The development of this mor-
phological model has led us to carry out fieldwork
on Plains Cree and to actively engage with Cree-
speaking communities. We have worked hard to
bridge the unfortunate gap that sometimes forms
between the linguistic work being carried within
academia and the needs of communities that are
active in language documentation and revitaliza-
tion. We look forward to further fruitful coopera-
tion between activists, educators and researchers.
Acknowledgments
Building a computational model of Plains Cree
morphology is a task that relies on the knowl-
edge, time and goodwill of many people. We
thank the University of Alberta?s Killam Re-
search Fund Cornerstones Grant for supporting
this project. We would like to acknowledge in par-
ticular the crucial advice, attention and effort of
Jean Okim?asis and Arok Wolvengrey, and thank
them for the resources they have contributed. We
wish also to thank Jeff Muehlbauer for his time
and materials, as well as the attendees of the first
Prairies Workshop on Language and Linguistics
for their insights and expertise. Further, it is im-
portant to acknowledge the helpfulness of Earle
Waugh who at the very start of our project made
his dictionary available to us, and who has been
very supportive. Arden Ogg has worked tirelessly
to build connections among researchers working
on Cree, which has greatly promoted and facili-
tated our work. Ahmad Jawad and Intellimedia,
Inc. who have for some time provided the tech-
nological platform to make available a number
of Plains Cree dictionaries through a web-based
interface, have given us invaluable assistance in
terms of resources and introductions. We would
also especially like to thank the staff at Miyo
Wahkohtowin Education for their wonderful en-
thusiasm, and for welcoming us into their commu-
nity. Last but by no means least, we are indebted to
innumerable Elders and native speakers of Plains
Cree whose contributions have made possible all
the dictionaries and text collections we are fortu-
nate to have today.
41
References
Kenneth R. Beesley and Lauri Karttunen. 2003. Fi-
nite State Morphology. CSLI Publications, Stanford
(CA).
Eung-Do Cook and Darin Flynn. 2008. Aborigi-
nal languages of Canada. In: O?Grady, William
and John Archibald (eds.) Contemporary Linguistic
Analysis. Pearson, Toronto (ON).
John Hewson. 1993. A computer-generated dictionary
of Proto-Algonquian, Canadian Museum of Civ-
ilization and Canadian Ethnology Service, Ottawa
(ON).
Ryan Johnson, Lene Antonsen and Trond Trosterud.
2013. Using Finite State Transducers for Making
Efficient Reading Comprehension Dictionaries. In
Stephan Oepen & Kristin Hagen & Janne Bondi Jo-
hannessen (eds.), Proceedings of the 19th Nordic
Conference of Computational Linguistics (NODAL-
IDA 2013), 378-411. Link?oping Electronic Confer-
ence Proceedings No. 85.
Marie-Odile Junker and Terry Stewart. 2008. Build-
ing Search Engines for Algonquian Languages. In
Karl S. Hele & Regna Darnell (eds.), Papers of the
39th Algonquian Conference, 59-71. University of
Western Ontario Press, London (ON).
Grzegorz Kondrak. 2002. Algorithms for Language
Reconstruction, Department of Computer Science,
University of Toronto.
Kimmo Koskenniemi. 1983. Two-level Morphology:
A General Computational Model for Word-Form
Recognition and Production, Publication No. 11.
Department of General Linguistics, University of
Helsinki.
Jean Okim?asis. 2004. Cree: Language of the Plains,
Volume 13 of University of Regina publications.
University of Regina Press, Regina (SK).
Jean Okim?asis and Arok Wolvengrey. 2008. How to
Spell it in Cree. miyw?asin ink, Regina (SK).
H. Christoph Wolfart. 1973. Plains Cree: A grammati-
cal study, Transactions of the American Philosoph-
ical Society No. 5.
H. Christoph Wolfart and Francis Pardo 1973.
Computer-assisted linguistic analysis, University of
Manitoba Anthropology Papers No. 6. Department
of Anthropology, University of Manitoba.
Arok E. Wolvengrey. 2011. Semantic and pragmatic
functions in Plains Cree syntax, LOT, Utrecht (NL).
42
