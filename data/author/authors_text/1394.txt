Proceedings of the 2008 Conference on Empirical Methods in Natural Language Processing, pages 485?494,
Honolulu, October 2008. c?2008 Association for Computational Linguistics
Improving Interactive Machine Translation via Mouse Actions
Germa?n Sanchis-Trilles and Daniel Ortiz-Mart??nez and Jorge Civera
Instituto Tecnolo?gico de Informa?tica
Universidad Polite?cnica de Valencia
{gsanchis,dortiz,jorcisai}@iti.upv.es
Francisco Casacuberta and Enrique Vidal
Departamento de Sistemas Informa?ticos y Computacio?n
Universidad Polite?cnica de Valencia
{fcn,evidal}@dsic.upv.es
Hieu Hoang
University of Edinburgh
hhoang@sms.ed.ac.uk
Abstract
Although Machine Translation (MT) is a very
active research field which is receiving an in-
creasing amount of attention from the research
community, the results that current MT sys-
tems are capable of producing are still quite
far away from perfection. Because of this,
and in order to build systems that yield correct
translations, human knowledge must be inte-
grated into the translation process, which will
be carried out in our case in an Interactive-
Predictive (IP) framework. In this paper, we
show that considering Mouse Actions as a sig-
nificant information source for the underly-
ing system improves the productivity of the
human translator involved. In addition, we
also show that the initial translations that the
MT system provides can be quickly improved
by an expert by only performing additional
Mouse Actions. In this work, we will be using
word graphs as an efficient interface between
a phrase-based MT system and the IP engine.
1 Introduction
Information technology advances in modern society
have led to the need of more efficient methods of
translation. It is important to remark that current
MT systems are not able to produce ready-to-use
texts (Kay, 1997; Hutchins, 1999; Arnold, 2003).
Indeed, MT systems are usually limited to specific
semantic domains and the translations provided re-
quire human post-editing in order to achieve a cor-
rect high-quality translation.
A way of taking advantage of MT systems is to
combine them with the knowledge of a human trans-
lator, constituting the so-called Computer-Assisted
Translation (CAT) paradigm. CAT offers different
approaches in order to benefit from the synergy be-
tween humans and MT systems.
An important contribution to interactive CAT
technology was carried out around the TransType
(TT) project (Langlais et al, 2002; Foster et al,
2002; Foster, 2002; Och et al, 2003). This project
entailed an interesting focus shift in which interac-
tion directly aimed at the production of the target
text, rather than at the disambiguation of the source
text, as in former interactive systems. The idea
proposed was to embed data driven MT techniques
within the interactive translation environment.
Following these TT ideas, (Barrachina and oth-
ers, 2008) propose the usage of fully-fledged statis-
tical MT (SMT) systems to produce full target sen-
tence hypotheses, or portions thereof, which can be
partially or completely accepted and amended by a
human translator. Each partial correct text segment
is then used by the SMT system as additional infor-
mation to achieve further, hopefully improved sug-
gestions. In this paper, we also focus on the inter-
active and predictive, statistical MT (IMT) approach
to CAT. The IMT paradigm fits well within the In-
teractive Pattern Recognition framework introduced
in (Vidal and others, 2007).
485
SOURCE (x): Para encender la impresora:
REFERENCE (y): To power on the printer:
ITER-0 (p) ( )(s?h) To switch on:
ITER-1
(p) To
(sl) switch on:
(k) power
(s?h) on the printer:
ITER-2
(p) To power on the printer:
(sl) ( )
(k) (#)
(s?h) ( )
FINAL (p ? y) To power on the printer:
Figure 1: IMT session to translate a Spanish sentence into English. Non-validated hypotheses are displayed in italics,
whereas accepted prefixes are printed in normal font.
Figure 1 illustrates a typical IMT session. Ini-
tially, the user is given an input sentence x to be
translated. The reference y provided is the trans-
lation that the user would like to achieve at the end
of the IMT session. At iteration 0, the user does not
supply any correct text prefix to the system, for this
reason p is shown as empty. Therefore, the IMT sys-
tem has to provide an initial complete translation sh,
as it were a conventional SMT system. At the next
iteration, the user validates a prefix p as correct by
positioning the cursor in a certain position of sh. In
this case, after the words ?To print a?. Implicitly, he
is also marking the rest of the sentence, the suffix sl,
as potentially incorrect. Next, he introduces a new
word k, which is assumed to be different from the
first word sl1 in the suffix sl which was not validated,
k 6= sl1 . This being done, the system suggests a new
suffix hypothesis s?h, subject to s?h1 = k. Again, the
user validates a new prefix, introduces a new word
and so forth. The process continues until the whole
sentence is correct that is validated introducing the
special word ?#?.
As the reader could devise from the IMT session
described above, IMT aims at reducing the effort
and increasing the productivity of translators, while
preserving high-quality translation. For instance, in
Figure 1, only three interactions were necessary in
order to achieve the reference translation.
In this paper, we will show how Mouse Actions
performed by the human expert can be taken advan-
tage of in order to further reduce this effort.
2 Statistical interactive-predictive MT
In this section we will briefly describe the statistical
framework of IMT. IMT can be seen as an evolution
of the SMT framework, which has proved to be an
efficient framework for building state-of-the-art MT
systems with little human effort, whenever adequate
corpora are available (Hutchings and Somers, 1992).
The fundamental equation of the statistical approach
to MT is
y? = argmax
y
Pr(y |x) (1)
= argmax
y
Pr(x |y)Pr(y) (2)
where Pr(x |y) is the translation model modelling
the correlation between source and target sentence
and Pr(y) is the language model representing the
well-formedness of the candidate translation y.
In practise, the direct modelling of the posterior
probability Pr(y|x) has been widely adopted. To
this purpose, different authors (Papineni et al, 1998;
Och and Ney, 2002) propose the use of the so-called
log-linear models, where the decision rule is given
by the expression
y? = argmax
y
M
?
m=1
?mhm(x,y) (3)
where hm(x,y) is a score function representing an
important feature for the translation of x into y, M
is the number of models (or features) and ?m are the
weights of the log-linear combination.
486
One of the most popular instantiations of log-
linear models is that including phrase-based (PB)
models (Zens et al, 2002; Koehn et al, 2003).
Phrase-based models allow to capture contextual in-
formation to learn translations for whole phrases in-
stead of single words. The basic idea of phrase-
based translation is to segment the source sentence
into phrases, then to translate each source phrase
into a target phrase, and finally to reorder the trans-
lated target phrases in order to compose the tar-
get sentence. Phrase-based models were employed
throughout this work.
In log-linear models, the maximisation problem
stated in Eq. 3 is solved by means of the beam search
algorithm1 which was initially introduced in (Low-
erre, 1976) for its application in the field of speech
recognition. The beam search algorithm attempts to
generate partial solutions, called hypotheses, until
a complete sentence is found; these hypotheses are
stored in a stack and ordered by their score. Such a
score is given by the log-linear combination of fea-
ture functions.
However, Eq. 1 needs to be modified according to
the IMT scenario in order to take into account part
of the target sentence that is already translated, that
is p and k
s?h = argmax
sh
Pr(sh|x,p, k) (4)
where the maximisation problem is defined over the
suffix sh. This allows us to rewrite Eq. 4, by decom-
posing the right side appropriately and eliminating
constant terms, achieving the equivalent criterion
s?h = argmax
sh
Pr(p, k, sh|x). (5)
An example of the intuition behind these variables
can be seen in Figure 1.
Note that, since (p k sh) = y, Eq. 5 is very simi-
lar to Eq. 1. The main difference is that the argmax
search is now performed over the set of suffixes sh
that complete (p k) instead of complete sentences
(y in Eq. 1). This implies that we can use the same
models if the search procedures are adequately mod-
ified (Barrachina and others, 2008).
1Also known as stack decoding algorithm.
3 Phrase-based IMT
The phrase-based approach presented above can be
easily adapted for its use in an IMT scenario. The
most important modification is to rely on a word
graph that represents possible translations of the
given source sentence. The use of word graphs
in IMT has been studied in (Barrachina and oth-
ers, 2008) in combination with two different trans-
lation techniques, namely, the Alignment Templates
technique (Och et al, 1999; Och and Ney, 2004),
and the Stochastic Finite State Transducers tech-
nique (Casacuberta and Vidal, 2007).
3.1 Generation of word graphs
A word graph is a weighted directed acyclic graph,
in which each node represents a partial translation
hypothesis and each edge is labelled with a word of
the target sentence and is weighted according to the
scores given by an SMT model (see (Ueffing et al,
2002) for more details). In (Och et al, 2003), the
use of a word graph is proposed as interface between
an alignment-template SMT model and the IMT en-
gine. Analogously, in this work we will be using
a word graph built during the search procedure per-
formed on a PB SMT model.
During the search process performed by the above
mentioned beam search algorithm, it is possible to
create a segment graph. In such a graph, each node
represents a state of the SMT model, and each edge
a weighted transition between states labelled with a
sequence of target words. Whenever a hypothesis is
extended, we add a new edge connecting the state
of that hypothesis with the state of the extended hy-
pothesis. The new edge is labelled with the sequence
of target words that has been incorporated to the ex-
tended hypothesis and is weighted appropriately by
means of the score given by the SMT model.
Once the segment graph is generated, it can be
easily converted into a word graph by the introduc-
tion of artificial states for the words that compose
the target phrases associated to the edges.
3.2 IMT using word graphs
During the process of IMT for a given source sen-
tence, the system makes use of the word graph gen-
erated for that sentence in order to complete the pre-
fixes accepted by the human translator. Specifically,
487
SOURCE (x): Para encender la impresora:
REFERENCE (y): To power on the printer:
ITER-0 (p) ( )(s?h) To switch on:
ITER-1
(p) To
(sl) |switch on:
(s?h) power on the printer:
ITER-2
(p) To power on the printer:
(sl) ( )
(k) (#)
(s?h) ( )
FINAL (p ? y) To power on the printer:
Figure 2: Example of non-explicit positioning MA which solves an error of a missing word. In this case, the system
produces the correct suffix sh immediately after the user validates a prefix p, implicitly indicating that we wants the
suffix to be changed, without need of any further action. In ITER-1, character | indicates the position where a MA
was performed, sl is the suffix which was rejected by that MA, and s?h is the new suffix that the system suggests after
observing that sl is to be considered incorrect. Character # is a special character introduced by the user to indicate that
the hypothesis is to be accepted.
the system finds the best path in the word graph as-
sociated with a given prefix so that it is able to com-
plete the target sentence, being capable of providing
several completion suggestions for each prefix.
A common problem in IMT arises when the user
sets a prefix which cannot be found in the word
graph, since in such a situation the system is un-
able to find a path through the word graph and pro-
vide an appropriate suffix. The common procedure
to face this problem is to perform a tolerant search
in the word graph. This tolerant search uses the well
known concept of Levenshtein distance in order to
obtain the most similar string for the given prefix
(see (Och et al, 2003) for more details).
4 Enriching user?machine interaction
Although the IMT paradigm has proved to offer in-
teresting benefits to potential users, one aspect that
has not been reconsidered as of yet is the user?
machine interface. Hence, in traditional IMT the
system only received feedback whenever the user
typed in a new word. In this work, we show how
to enrich user?machine interaction by introducing
Mouse Actions (MA) as an additional information
source for the system. By doing so, we will consider
two types of MAs, i.e. non-explicit (or positioning)
MAs and interaction-explicit MAs.
4.1 Non-explicit positioning MAs
Before typing in a new word in order to correct a hy-
pothesis, the user needs to position the cursor in the
place where he wants to type such a word. In this
work, we will assume that this is done by perform-
ing a MA, although the same idea presented can also
be applied when this is done by some other means.
It is important to point out that, by doing so, the user
is already providing some very useful information to
the system: he is validating a prefix up to the posi-
tion where he positioned the cursor, and, in addition,
he is signalling that whatever word is located after
the cursor is to be considered incorrect. Hence, the
system can already capture this fact and provide a
new translation hypothesis, in which the prefix re-
mains unchanged and the suffix is replaced by a new
one in which the first word is different to the first
word of the previous suffix. We are aware that this
does not mean that the new suffix will be correct, but
given that we know that the first word in the previ-
ous suffix was incorrect, the worst thing which can
happen is that the the first word of the new suffix is
incorrect as well. However, if the new suffix hap-
pens to be correct, the user will happily find that he
does not need to correct that word any more.
An example of such behaviour can be seen in
Figure 2. In this example, the SMT system first
provides a translation which the user does not
488
like. Hence, he positions the cursor before word
?postscript?, with the purpose of typing in ?lists?.
By doing so, he is validating the prefix ?To print
a?, and signalling that he wants ?postscript? to be
replaced. Before typing in anything, the system re-
alises that he is going to change the word located
after the cursor, and replaces the suffix by another
one, which is the one the user had in mind in the
first place. Finally, the user only has to accept the
final translation.
We are naming this kind of MA non-explicit be-
cause it does not require any additional action from
the user: he has already performed a MA in order to
position the cursor at the place he wants, and we are
taking advantage of this fact to suggest a new suffix
hypothesis.
Since the user needs to position the cursor before
typing in a new word, it is important to point out
that any improvement achieved by introducing non-
explicit MAs does not require any further effort from
the user, and hence is considered to have no cost.
Hence, we are now considering two different situ-
ations: the first one, the traditional IMT framework,
in which the system needs to find a suffix according
to Eq. 5, and a new one, in which the system needs
to find a suffix in which the first word does not need
to be a given k, but needs to be different to a given
sl1. This constraint can be expressed by the follow-
ing equation:
s?h = argmax
sh:sh1 6=sl1
Pr(p, sh|x, sl) (6)
where sl is the suffix generated in the previous iter-
ation, already discarded by the user, and sl1 is the
first word in sl. k is omitted in this formula because
the user did not type any word at all.
4.2 Interaction-explicit MAs
If the system is efficient and provides suggestions
which are good enough, one could easily picture a
situation in which the expert would ask the system
to replace a given suffix, without typing in any word.
We will be modelling this as another kind of MA,
interaction-explicit MA, since the user needs to in-
dicate explicitly that he wants a given suffix to be
replaced, in contrast to the non-explicit positioning
MA. However, if the underlying MT engine provid-
ing the suffixes is powerful enough, the user would
quickly realise that performing a MA is less costly
that introducing a whole new word, and would take
advantage of this fact by systematically clicking be-
fore introducing any new word. In this case, as
well, we assume that the user clicks before an in-
correct word, hence demanding a new suffix whose
first word is different, but by doing so he is adopting
a more participative and interactive attitude, which
was not demanded in the case of non-explicit posi-
tioning MAs. An example of such an explicit MA
correcting an error can be seen in Figure 3
In this case, however, there is a cost associated to
this kind of MAs, since the user does need to per-
form additional actions, which may or may not be
beneficial. It is very possible that, even after asking
for several new hypothesis, the user will even though
need to introduce the word he had in mind, hence
wasting the additional MAs he had performed.
If we allow the user to perform n MAs before in-
troducing a word, this problem can be formalised in
an analogous way as in the case of non-explicit MAs
as follows:
s?h= argmax
sh:sh1 6=sil1?i?{1..n}
Pr(p, sh|x, s1l , s2l , . . . , snl ) (7)
where sil1 is the first word of the i-th suffix dis-
carded and s1l , s2l , . . . , snl is the set of all n suffixes
discarded.
Note that this kind of MA could also be imple-
mented with some other kind of interface, e.g. by
typing some special key such as F1 or Tab. How-
ever, the experimental results would not differ, and
in our user interface we found it more intuitive to
implement it as a MA.
5 Experimental setup
5.1 System evaluation
Automatic evaluation of results is a difficult problem
in MT. In fact, it has evolved to a research field with
own identity. This is due to the fact that, given an
input sentence, a large amount of correct and differ-
ent output sentences may exist. Hence, there is no
sentence which can be considered ground truth, as is
the case in speech or text recognition. By extension,
this problem is also applicable to IMT.
In this paper, we will be reporting our results as
measured by Word Stroke Ratio (WSR) (Barrachina
489
SOURCE (x): Seleccione el tipo de instalacio?n.
REFERENCE (y): Select the type of installation.
ITER-0 (p) ( )(s?h) Select the installation wizard.
ITER-1
(p) Select the
(sl) |installation wizard.
(s?h) install script.
ITER-2
(p) Select the
(k) type
(s?h) installation wizard.
ITER-3
(p) Select the type
(sl) |installation wizard.
(s?h) of installation.
ITER-4
(p) Select the type of installation.
(sl) ( )
(k) (#)
(s?h) ( )
FINAL (p ? y) Select the type of installation.
Figure 3: Example of explicit interactive MA which corrects an erroneous suffix. In this case, a non-explicit MA is
performed in ITER-1 with no success. Hence, the user introduces word ?type? in ITER-2, which leaves the cursor
position located immediately after word ?type?. In this situation the user would not need to perform a MA to re-
position the cursor and continue typing in order to further correct the remaining errors. However, since he has learnt
the potential benefit of MAs, he performs an interaction-explicit MA in order to ask for a new suffix hypothesis, which
happens to correct the error.
and others, 2008), which is computed as the quotient
between the number of word-strokes a user would
need to perform in order to achieve the translation
he has in mind and the total number of words in
the sentence. In this context, a word-stroke is in-
terpreted as a single action, in which the user types
a complete word, and is assumed to have constant
cost. Moreover, each word-stroke also takes into ac-
count the cost incurred by the user when reading the
new suffix provided by the system.
In the present work, we decided to use WSR in-
stead of Key Stroke Ratio (KSR), which is used in
other works on IMT such as (Och et al, 2003). The
reason for this is that KSR is clearly an optimistic
measure, since in such a scenario the user is often
overwhelmed by receiving a great amount of trans-
lation options, as much as one per key stroke, and
it is not taken into account the time the user would
need to read all those hypotheses.
In addition, and because we are also introducing
MAs as a new action, we will also present results in
terms of Mouse Action Ratio (MAR), which is the
quotient between the amount of explicit MAs per-
formed and the number of words of the final trans-
lation. Hence, the purpose is to elicit the number of
times the user needed to request a new translation
(i.e. performed a MA), on a per word basis.
Lastly, we will also present results in terms of
uMAR (useful MAR), which indicates the amount
of MAs which were useful, i.e. the MAs that actu-
ally produced a change in the first word of the suffix
and such word was accepted. Formally, uMAR is
defined as follows:
uMAR = MAC ? n ?WSCMAC (8)
where MAC stands for ?Mouse Action Count?,
WSC for ?Word Stroke Count? and n is the max-
imum amount of MAs allowed before the user types
in a word. Note that MAC?n ?WSC is the amount
of MAs that were useful since WSC is the amount
of word-strokes the user performed even though he
had already performed n MAs.
Since we will only use single-reference WSR and
MAR, the results presented here are clearly pes-
simistic. In fact, it is relatively common to have the
underlying SMT system provide a perfectly correct
490
Table 1: Characteristics of Europarl for each of the sub-
corpora. OoV stands for ?Out of Vocabulary? words,
Dev. for Development, K for thousands of elements and
M for millions of elements.
De En Es En Fr En
Tr
ai
n
in
g Sentences 751K 731K 688K
Run. words 15.3M16.1M 15.7M15.2M 15.6M13.8M
Avg. len. 20.3 21.4 21.5 20.8 22.7 20.1
Voc. 195K 66K 103K 64K 80K 62K
D
ev
.
Sentences 2000 2000 2000
Run. words 55K 59K 61K 59K 67K 59K
Avg. len. 27.6 29.3 30.3 29.3 33.6 29.3
OoV 432 125 208 127 144 138
Te
st
Sentences 2000 2000 2000
Run. words 54K 58K 60K 58K 66K 58K
Avg. len. 27.1 29.0 30.2 29.0 33.1 29.3
OoV 377 127 207 125 139 133
translation, which is ?corrected? by the IMT proce-
dure into another equivalent translation, increasing
WSR and MAR significantly by doing so.
5.2 Corpora
Our experiments were carried out on the Eu-
roparl (Koehn, 2005) corpus, which is a corpus
widely used in SMT and that has been used in sev-
eral MT evaluation campaigns. Moreover, we per-
formed our experiments on the partition established
for the Workshop on Statistical Machine Translation
of the NAACL 2006 (Koehn and Monz, 2006). The
Europarl corpus (Koehn, 2005) is built from the pro-
ceedings of the European Parliament. Here, we will
focus on the German?English, Spanish?English and
French?English tasks, since these were the language
pairs selected for the cited workshop. The corpus is
divided into three separate sets: one for training, one
for development, and one for test. The characteris-
tics of the corpus can be seen in Table 1.
5.3 Experimental results
As a first step, we built a SMT system for each of
the language pairs cited in the previous subsection.
This was done by means of the Moses toolkit (Koehn
and others, 2007), which is a complete system for
building Phrase-Based SMT models. This toolkit in-
volves the estimation from the training set of four
different translation models, which are in turn com-
Table 2: WSR improvement when considering non-
explicit MAs. ?rel.? indicates the relative improvement.
All results are given in %.
pair baseline non-explicit rel.
Es?En 63.0?0.9 59.2?0.9 6.0?1.4
En?Es 63.8?0.9 60.5?1.0 5.2?1.6
De?En 71.6?0.8 69.0?0.9 3.6?1.3
En?De 75.9?0.8 73.5?0.9 3.2?1.2
Fr?En 62.9?0.9 59.2?1.0 5.9?1.6
En?Fr 63.4?0.9 60.0?0.9 5.4?1.4
bined in a log-linear fashion by adjusting a weight
for each of them by means of the MERT (Och, 2003)
procedure, optimising the BLEU (Papineni et al,
2002) score obtained on the development partition.
This being done, word graphs were generated
for the IMT system. For this purpose, we used a
multi-stack phrase-based decoder which will be dis-
tributed in the near future together with the Thot
toolkit (Ortiz-Mart??nez et al, 2005). We discarded
the use of the Moses decoder because preliminary
experiments performed with it revealed that the de-
coder by (Ortiz-Mart??nez et al, 2005) performs
clearly better when used to generate word graphs
for use in IMT. In addition, we performed an ex-
perimental comparison in regular SMT with the Eu-
roparl corpus, and found that the performance dif-
ference was negligible. The decoder was set to
only consider monotonic translation, since in real
IMT scenarios considering non-monotonic transla-
tion leads to excessive waiting time for the user.
Finally, the word graphs obtained were used
within the IMT procedure to produce the reference
translation contained in the test set, measuring WSR
and MAR. The results of such a setup can be seen in
Table 2. As a baseline system, we report the tradi-
tional IMT framework, in which no MA is taken into
account. Then, we introduced non-explicit MAs, ob-
taining an average improvement in WSR of about
3.2% (4.9% relative). The table also shows the
confidence intervals at a confidence level of 95%.
These intervals were computed following the boot-
strap technique described in (Koehn, 2004). Since
the confidence intervals do not overlap, it can be
stated that the improvements obtained are statisti-
cally significant.
491
 40
 45
 50
 55
 60
 65
 70
 0  1  2  3  4  5
 50
 100
 150
 200
 250
 300
W
SR
M
AR
max. MAs per incorrect word
Spanish -> English
WSR
MAR
 40
 45
 50
 55
 60
 65
 70
 0  1  2  3  4  5
 4
 6
 8
 10
 12
W
SR
u
M
AR
max. MAs per incorrect word
Spanish -> English
WSR
uMAR
 40
 45
 50
 55
 60
 65
 70
 0  1  2  3  4  5
 50
 100
 150
 200
 250
 300
W
SR
M
AR
max. MAs per incorrect word
German -> English
WSR
MAR
 40
 45
 50
 55
 60
 65
 70
 0  1  2  3  4  5
 4
 6
 8
 10
 12
W
SR
u
M
AR
max. MAs per incorrect word
German -> English
WSR
uMAR
 40
 45
 50
 55
 60
 65
 70
 0  1  2  3  4  5
 50
 100
 150
 200
 250
 300
W
SR
M
AR
max. MAs per incorrect word
French -> English
WSR
MAR
 40
 45
 50
 55
 60
 65
 70
 0  1  2  3  4  5
 4
 6
 8
 10
 12
W
SR
u
M
AR
max. MAs per incorrect word
French -> English
WSR
uMAR
Figure 4: WSR improvement when considering one to five maximum MAs. All figures are given in %. The left
column lists WSR improvement versus MAR degradation, and the right column lists WSR improvement versus uMAR.
Confidence intervals at 95% confidence level following (Koehn, 2004).
Once the non-explicit MAs were considered and
introduced into the system, we analysed the effect
of performing up to a maximum of 5 explicit MAs.
Here, we modelled the user in such a way that, in
case a given word is considered incorrect, he will
always ask for another translation hypothesis until
he has asked for as many different suffixes as MAs
considered. The results of this setup can be seen in
Figure 4. This yielded a further average improve-
ment in WSR of about 16% (25% relative improve-
ment) when considering a maximum of 5 explicit
MAs. However, relative improvement in WSR and
492
uMAR increase drop significantly when increasing
the maximum allowed amount of explicit MAs from
1 to 5. For this reason, it is difficult to imagine that
a user would perform more than two or three MAs
before actually typing in a new word. Nevertheless,
just by asking twice for a new suffix before typing
in the word he has in mind, the user might be saving
about 15% of word-strokes.
Although the results in Figure 4 are only
for the translation direction ?foreign??English,
the experiments in the opposite direction (i.e.
English??foreign?) were also performed. How-
ever, the results were very similar to the ones dis-
played here. Because of this, and for clarity pur-
poses, we decided to omit them and only display the
direction ?foreign??English.
6 Conclusions and future work
In this paper, we have considered new input sources
for IMT. By considering Mouse Actions, we have
shown that a significant benefit can be obtained, in
terms of word-stroke reduction, both when consid-
ering only non-explicit MAs and when considering
MAs as a way of offering the user several suffix hy-
potheses. In addition, we have applied these ideas
on a state-of-the-art SMT baseline, such as phrase-
based models. To achieve this, we have first ob-
tained a word graph for each sentence which is to be
translated. Experiments were carried out on a refer-
ence corpus in SMT.
Note that there are other systems (Esteban and
others, 2004) that, for a given prefix, provide n-
best lists of suffixes. However, the functionality of
our system is slightly (but fundamentally) different,
since the suggestions are demanded to be different
in their first word, which implies that the n-best list
is scanned deeper, going directly to those hypothe-
ses that may be of interest to the user. In addition,
this can be done ?on demand?, which implies that
the system?s response is faster and that the user is
not confronted with a large list of hypotheses, which
often results overwhelming.
As future work, we are planning on performing a
human evaluation that assesses the appropriateness
of the improvements described.
Acknowledgements
This work has been partially supported by the Span-
ish MEC under scholarship AP2005-4023 and un-
der grants CONSOLIDER Ingenio-2010 CSD2007-
00018, and by the EC (FEDER) and the Spanish
MEC under grant TIN2006-15694-CO2-01.
References
D. J. Arnold, 2003. Computers and Translation: A trans-
lator?s guide, chapter 8, pages 119?142.
S. Barrachina et al 2008. Statistical approaches to
computer-assisted translation. Computational Lin-
guistics, page In press.
F. Casacuberta and E. Vidal. 2007. Learning finite-state
models for machine translation. Machine Learning,
66(1):69?91.
J. Esteban et al 2004. Transtype2 - an innovative
computer-assisted translation system. In The Compan-
ion Volume to the Proc. ACL?04, pages 94?97.
G. Foster, P. Langlais, and G. Lapalme. 2002. User-
friendly text prediction for translators. In Proc. of
EMNLP?02, pages 148?155.
G. Foster. 2002. Text Prediction for Translators. Ph.D.
thesis, Universite? de Montre?al.
J. Hutchings and H. Somers. 1992. An introduction to
machine translation. In Ed. Academic Press.
J. Hutchins. 1999. Retrospect and prospect in computer-
based translation. In Proc. of MT Summit VII, pages
30?44.
M. Kay. 1997. It?s still the proper place. Machine Trans-
lation, 12(1-2):35?38.
P. Koehn and C. Monz, editors. 2006. Proc. of the Work-
shop on SMT.
P. Koehn et al 2007. Moses: Open source toolkit for
statistical machine translation. In Proc. of the ACL?07.
P. Koehn, F. J. Och, and D. Marcu. 2003. Statistical
phrase-based translation. In Proc. HLT/NAACL?03,
pages 48?54.
P. Koehn. 2004. Statistical significance tests for machine
translation evaluation. In Proc. of EMNLP?04, pages
388?395, Barcelona, Spain.
P. Koehn. 2005. Europarl: A parallel corpus for statisti-
cal machine translation. In Proc. of the MT Summit X,
pages 79?86.
P. Langlais, G. Lapalme, and M. Loranger. 2002.
Transtype: Development-evaluation cycles to boost
translator?s productivity. Machine Translation,
15(4):77?98.
Bruce T. Lowerre. 1976. The harpy speech recogni-
tion system. Ph.D. thesis, Carnegie Mellon University,
Pittsburgh, PA, USA.
493
F. Och and H. Ney. 2002. Discriminative training
and maximum entropy models for statistical machine
translation. In Proc. of the ACL?02, pages 295?302.
F.J. Och and H. Ney. 2004. The alignment template ap-
proach to statistical machine translation. Comput. Lin-
guist., 30(4):417?449.
F. Och, C. Tillmann, and H. Ney. 1999. Improved align-
ment models for statistical machine translation. In
Proc. of EMNLP/WVLC?99, pages 20?28.
F.J. Och, R. Zens, and H. Ney. 2003. Efficient search for
interactive statistical machine translation. In Proc. of
EACL?03, pages 387?393.
F.J. Och. 2003. Minimum error rate training for statis-
tical machine translation. In Proc. of ACL?03, pages
160?167.
D. Ortiz-Mart??nez, I. Garc??a-Varea, and F. Casacuberta.
2005. Thot: a toolkit to train phrase-based statisti-
cal translation models. In Proc. of the MT Summit X,
pages 141?148.
K. Papineni, S. Roukos, and T. Ward. 1998. Maximum
likelihood and discriminative training of direct transla-
tion models. In Proc. of ICASSP?98, pages 189?192.
K. Papineni, S. Roukos, T. Ward, and W.J. Zhu. 2002.
Bleu: A method for automatic evaluation of machine
translation. In Proc. of ACL?02.
N. Ueffing, F. Och, and H. Ney. 2002. Generation of
word graphs in statistical machine translation. In Proc.
of EMNLP?02, pages 156?163.
E. Vidal et al 2007. Interactive pattern recognition. In
Proc. of MLMI?07, pages 60?71.
R. Zens, F.J. Och, and H. Ney. 2002. Phrase-based sta-
tistical machine translation. In Proc. of KI?02, pages
18?32.
494
Statistical Approaches to
Computer-Assisted Translation
Sergio Barrachina?
Universitat Jaume I
Oliver Bender??
RWTH Aachen
Francisco Casacuberta?
Universitat Polite`cnica de Vale`ncia
Jorge Civera?
Universitat Polite`cnica de Vale`ncia
Elsa Cubel?
Universitat Polite`cnica de Vale`ncia
Shahram Khadivi??
RWTH Aachen
Antonio Lagarda?
Universitat Polite`cnica de Vale`ncia
Hermann Ney??
RWTH Aachen
Jesu?s Toma?s?
Universitat Polite`cnica de Vale`ncia
Enrique Vidal?
Universitat Polite`cnica de Vale`ncia
Juan-Miguel Vilar?
Universitat Jaume I
Current machine translation (MT) systems are still not perfect. In practice, the output
from these systems needs to be edited to correct errors. A way of increasing the productivity of
the whole translation process (MT plus human work) is to incorporate the human correction
activities within the translation process itself, thereby shifting the MT paradigm to that of
computer-assisted translation. This model entails an iterative process in which the human
translator activity is included in the loop: In each iteration, a prefix of the translation is validated
(accepted or amended) by the human and the system computes its best (or n-best) translation
suffix hypothesis to complete this prefix. A successful framework for MT is the so-called statis-
tical (or pattern recognition) framework. Interestingly, within this framework, the adaptation
of MT systems to the interactive scenario affects mainly the search process, allowing a great
reuse of successful techniques and models. In this article, alignment templates, phrase-based
models, and stochastic finite-state transducers are used to develop computer-assisted translation
systems. These systems were assessed in a European project (TransType2) in two real tasks: The
translation of printer manuals; manuals and the translation of the Bulletin of the European
Union. In each task, the following three pairs of languages were involved (in both translation
directions): English?Spanish, English?German, and English?French.
? Departament d?Enginyeria i Cie`ncies dels Computadors, Universitat Jaume I, 12071 Castello? de la Plana,
Spain.
?? Lehrstuhl fu?r Informatik VI, RWTH Aachen University of Technology, D-52056 Aachen, Germany.
? Institut Tecnolo`gic d?Informa`tica, Departament de Sistemes Informa`tics i Computacio?, Universitat
Polite`cnica de Vale`ncia, 46071 Vale`ncia, Spain.
? Institut Tecnolo`gic d?Informa`tica, Departament de Comunicacions, Universitat Polite`cnica de Vale`ncia,
46071 Vale`ncia, Spain.
? Departament de Llenguatges i Sistemes Informa`tics, Universitat Jaume I, 12071 Castello? de la Plana,
Spain.
Submission received: 1 June 2006; revised submission received: 20 September 2007; accepted for publication:
19 December 2007.
? 2008 Association for Computational Linguistics
Computational Linguistics Volume 35, Number 1
1. Introduction to Computer-Assisted Translation
Research in the field of machine translation (MT) aims to develop computer systems
which are able to translate text or speech without human intervention. However,
present translation technology has not been able to deliver fully automated high-quality
translations. Typical solutions to improving the quality of the translations supplied by
an MT system require manual post-editing. This serial process prevents the MT system
from taking advantage of the knowledge of the human translator, and the human
translator cannot take advantage of the adaptive ability of the MT system.
An alternative way to take advantage of the existing MT technologies is to use
them in collaboration with human translators within a computer-assisted translation
(CAT) or interactive framework (Isabelle and Church 1997). Historically, CAT and MT
have been considered different but close technologies (Kay 1997) and more so for one
of the most popular CAT technologies, namely, translation memories (Bowker 2002;
Somers 2003). Interactivity in CAT has been explored for a long time. Systems have
been designed to interact with human translators in order to solve different types
of (lexical, syntactic, or semantic) ambiguities (Slocum 1985; Whitelock et al 1986).
Other interaction strategies have been considered for updating user dictionaries or for
searching through dictionaries (Slocum 1985; Whitelock et al 1986). Specific proposals
can be found in Tomita (1985), Zajac (1988), Yamron et al (1993), and Sen, Zhaoxiong,
and Heyan (1997), among others.
An important contribution to CAT technology, carried out within the TransType
project, is worth mentioning (Foster, Isabelle, and Plamondon 1997; Langlais, Foster,
and Lapalme 2000; Foster 2002; Langlais, Lapalme, and Loranger 2002). It entailed an
interesting focus shift in which interaction is directly aimed at the production of the
target text, rather than at the disambiguation of the source text, as in earlier interactive
systems. The idea proposed in that work was to embed data-driven MT techniques
within the interactive translation environment. The hope was to combine the best of
both paradigms: CAT, in which the human translator ensures high-quality output, and
MT, in which the machine ensures a significant gain in productivity.
Following these TransType ideas, the innovative embedding proposed here con-
sists in using a complete MT system to produce full target sentence hypotheses, or
portions thereof, which can be accepted or amended by a human translator. Each cor-
rect text segment is then used by the MT system as additional information to achieve
further, hopefully improved, suggestions. More specifically, in each iteration, a prefix
of the target sentence is somehow fixed by the human translator and, in the next itera-
tion, the system predicts a best (or n-best) translation suffix(es)1 to complete this prefix.
We will refer to this process as interactive-predictive machine translation (IPMT).
This approach introduces two important requirements: First, the models have to
provide adequate completions and, second, this has to happen efficiently. Taking these
requirements into account, stochastic finite-state transducers (SFSTs), alignment tem-
plates (ATs), and phrase-based models (PBMs) are compared in this work. In previous
works these models have proven adequate for conventional MT (Vidal 1997; Amengual
et al 2000; Ney et al 2000; Toma?s and Casacuberta 2001; Och and Ney 2003; Casacuberta
and Vidal 2004; Och and Ney 2004; Vidal and Casacuberta 2004). This article shows that
1 The terms prefix and suffix are used here to denote any substring at the beginning and end (respectively)
of a string of characters (including spaces and punctuation), with no implication of morphological
significance as is usually implied by these terms in linguistics.
4
Barrachina et al Statistical Computer-Assisted Translation
existing efficient searching algorithms can be adapted in order to provide completions
(rather than full translations) also in a very efficient way.
The work presented here has been carried out in the TransType2 (TT2) project
(SchlumbergerSema S.A. et al 2001), which is considered as a follow-up to the inter-
active MT concepts introduced in the precursory TransType project cited previously.
We should emphasize the novel contributions of the present work with respect
to TransType. First, we show how fully fledged statistical MT (SMT) systems can be
extended to handle IPMT. In particular, the TT2 systems always produce complete
sentence hypotheses on which the human translator can work. This is an important
difference to previous work, in which the use of basic MT techniques only allowed the
prediction of single tokens (c.f., Section 2.2). Second, using fully fledged SMT systems,
we have performed systematic offline experiments to simulate the specific conditions of
interactive translation and we report and study the results of these experiments. Thirdly,
the IPMT systems presented in this article were successfully used in several field trials
with professional translators (Macklovitch, Nguyen, and Silva 2005; Macklovitch 2006).
We should finally mention that the work developed in TT2 has gone beyond con-
ventional keyboard-and-mouse interaction, leading to the development of advanced
multi-modal interfaces. Speech is the most natural form of human communication and
its use as feedback in the IPMT framework has been explored by Vidal et al (2006).
On the other hand, human translators can be faster dictating the translation text rather
than typing it, thus it has also been investigated how to improve system performance
and usability when the user dictates the translation first and then edits the recognized
text (Khadivi, Zolnay, and Ney 2005; Khadivi, Zens, and Ney 2006).
The rest of the article is structured as follows. The next section introduces the
general setting for SMT and IPMT. In Section 3, AT, PBM, and SFST are briefly surveyed
along with the corresponding learning procedures. In Section 4, general search proce-
dures for the previous models are outlined and a detailed description of the extension
of these procedures to IPMT scenarios is presented. Section 5 is devoted to introducing
the tasks used for the assessment of the proposal presented in the previous sections:
the pairs of languages, corpora, and assessment procedures. The results are reported in
Section 6. A discussion of these results and the conclusions which can be drawn from
this work are presented in the final section.
2. Statistical Framework
The statistical or pattern recognition framework constitutes a very successful frame-
work for MT. As we will see here, this framework also proves adequate for IPMT.
2.1 Statistical Machine Translation
Assuming that we are given a sentence s in a source language, the text-to-text translation
problem can be stated as finding its translation t in a target language. Using statistical
decision theory, the best translation is given by the equation2
t? = argmax
t
Pr(t|s) (1)
2 We follow the common notation of Pr(x) for Pr(X = x) and Pr(x|y) for Pr(X = x|Y = y), for any random
variables X and Y. Similarly, Pr() will be used to denote ?true? probability functions, and p() or q() will
denote model approximations.
5
Computational Linguistics Volume 35, Number 1
Using Bayes?s Theorem, we arrive at
t? = argmax
t
Pr(t) ? Pr(s|t) (2)
This equation is generally interpreted as follows. The best translation must be a correct
sentence in the target language that conveys the meaning of the source sentence. The
probability Pr(t) represents the well-formedness of t and it is generally called the
language model probability (n-gram models are usually adopted [Jelinek 1998]). On
the other hand, Pr(s|t) represents the relationship between the two sentences (the source
and its translation). It should be of a high value if the source is a good translation of
the target and of a low value otherwise. Note that the translation direction is inverted
from what would be normally expected; correspondingly the models built around this
equation are often called inverted translation models (Brown et al 1990, 1993). As we
will see in Section 3, these models are based on the notion of alignment. It is interesting to
note that if we had perfect models, the use of Equation (1) would suffice. Given that we
have only approximations, the use of Equation (2) allows the language model to correct
deficiencies in the translation model.
In practice all of these models (and possibly others) are often combined into a log-
linear model for Pr(t | s) (Och and Ney 2004):
t? = argmax
t
{
N
?
i=1
?i ? log fi(t, s)
}
(3)
where fi(t, s) can be a model for Pr(s|t), a model for Pr(t|s), a target language model
for Pr(t), or any model that represents an important feature for the translation. N is the
number of models (or features) and ?i are the weights of the log-linear combination.
When using SFSTs, a different transformation can be used. These transducers
have an implicit target language model (which can be obtained from the finite-state
transducer by dropping the source symbols of each transition (Vidal et al 2005)). There-
fore, this separation is no longer needed. SFSTs model joint probability distributions;
therefore, Equation (1) has to be rewritten as
t? = argmax
t
Pr(s, t) (4)
This is the approach followed in GIATI (Casacuberta et al 2004a; Casacuberta and Vidal
2004), but other models for the joint probability can be adopted.
If the input is a spoken sentence, instead of a written one, the problem becomes
more complex; we will not deal with this here. The interested reader may consult
Amengual et al (2000), Ney et al (2000), or Casacuberta et al (2004a, 2004b), for
instance.
2.2 Statistical Interactive-Predictive Machine Translation
Unfortunately, current models and therefore the systems which can be built from them
are still far from perfect. This implies that, in order to achieve good, or even acceptable,
translations, manual post-editing is needed. An alternative to this serial approach (first
MT, then manual correction) is given by the IPMT paradigm. Under this paradigm,
translation is considered as an iterative process where human and computer activity
6
Barrachina et al Statistical Computer-Assisted Translation
Figure 1
Typical example of IPMT with keyboard interaction. The aim is to translate the English sentence
Click OK to close the print dialog into Spanish. Each step starts with a previously fixed target
language prefix tp, from which the system suggests a suffix t?s. Then the user accepts a part of this
suffix (a) and types some keystrokes (k), possibly in order to amend the remaining part of ts.
This produces a new prefix, composed by the prefix from the previous iteration and the accepted
and typed text, (a) (k), to be used as tp in the next step. The process ends when the user enters
the special keystroke ?#?. System suggestions are printed in italics and user input in boldface
typewriter font. In the final translation t, text that has been typed by the user is underlined.
are interwoven. This way, the models take into account both the input sentence and the
corrections of the user.
As previously mentioned, this idea was originally proposed in the TransType
project (Foster, Isabelle, and Plamondon 1997; Langlais, Foster, and Lapalme 2000;
Langlais, Lapalme, and Loranger 2002). In that project, the parts proposed by the sys-
tems were produced using a linear combination of a target language model (trigrams)
and a lexicon model (so-called IBM-1 or -2) (Langlais, Lapalme, and Loranger 2002). As
a result, TransType allowed only single-token completions, where a token could be either
a word or a short sequence of words from a predefined set of sequences. This proposal
was extended to complete full target sentences in the TT2 project, as discussed hereafter.
The approach taken in TT2 is exemplified in Figure 1. Initially, the system provides
a possible translation. From this translation, the user marks a prefix as correct and
provides, as a hint, the beginning of the rest of the translation. Depending on the system
or the user preferences, the hint can be the next word or some letters from it (in the
figure, hints are assumed to be words and are referred to as k). Let us use tp for the prefix
validated by the user together with the hint. The system now has to produce (predict)
a suffix ts to complete the translation. The cycle continues with a new validation and
hint from the user until the translation is completed. This justifies our choice of the term
?interactive-predictive machine translation? for this approach.
The crucial step of the process is the production of the suffix. Again, decision theory
tells us to maximize the probability of the suffix given the available information. That
is, the best suffix will be
t?s = argmax
ts
Pr(ts|s, tp) (5)
which can be straightforwardly rewritten as
t?s = argmax
ts
Pr(tp, ts|s) (6)
7
Computational Linguistics Volume 35, Number 1
Note that, because tpts = t, this equation is very similar to Equation (1). The main
difference is that the argmax search now is performed over the set of suffixes ts that
complete tp instead of complete sentences (t in Equation (1)). This implies that we can
use the same models if the search procedures are adequately modified (Och, Zens, and
Ney 2003).
The situation with respect to finite-state models is similar. Now, Equation (5) is
rewritten as
t?s = argmax
ts
Pr(tp, ts, s) (7)
which allows the use of the same models as in Equation (4) as long as the search
procedure is changed appropriately (Cubel et al 2003, 2004; Civera et al 2004a,
2004b).
3. Statistical and Finite-State Models
The models used are presented in the following subsections: Section 3.1 for the condi-
tional distribution Pr(s|t) in Equation (2) and Section 3.2 for the joint distribution Pr(s, t)
in Equation (4).
3.1 Statistical Alignment Models
The translation models which Brown et al (1993) introduced to deal with Pr(s|t) in
Equation (2) are based on the concept of alignment between the components of a pair
(s, t) (thus they are called statistical alignment models). Formally, if the number of
the source words in s is J and the number of target words in t is I, an alignment is a
function a : {1, ..., J} ? {0, ..., I}. The image of j by a will be denoted as aj, in which the
particular case aj = 0 means that the position j in s is not aligned with any position of t.
By introducing the alignment as a hidden variable in Pr(s|t),
Pr(s|t) =
?
a
Pr(s, a|t) (8)
The alignment that maximizes Pr(s, a|t) is shown to be very useful in practice for
training and for searching.
Different approaches have been proposed for modeling Pr(s, a|t) in Equation (8):
Zero-order models such as model 1, model 2, and model 3 (Brown et al 1993) and the first-
order models such as model 4, model 5 (Brown et al 1993), hidden Markov model (Ney
et al 2000), and model 6 (Och and Ney 2003).
In all these models, single words are taken into account. Moreover, in practice the
summation operator is replaced with the maximization operator, which in turn reduces
the contribution of each individual source word in generating a target word. On the
other hand, modeling word sequences rather than single words in both the alignment
and lexicon models cause significant improvement in translation quality (Och and Ney
8
Barrachina et al Statistical Computer-Assisted Translation
2004). In this work, we use two closely related models: ATs (Och and Ney 2004) and
PBMs (Toma?s and Casacuberta 2001; Koehn, Och, and Marcu 2003; Zens and Ney 2004).
Both models are based on bilingual phrases3 (pairs of segments or word sequences)
in which all words within the source-language phrase are aligned only to words of
the target-language phrase and vice versa. Note that at least one word in the source-
language phrase must be aligned to one word of the target-language phrase, that is,
there are no empty phrases similar to the empty word of the word-based models. In
addition, no gaps and no overlaps between phrases are allowed.
We introduce some notation to deal with phrases. As before, s denotes a source-
language sentence; ?s denotes a generic phrase in s, and ?sk the kth phrase in s. sj denotes
the jth source word in s; s
j?
j denotes the contiguous sequence of words in s beginning
at position j and ending at position j? (inclusive); obviously, if s has J words, s
J
1 denotes
the whole sentence s. An analogous notation is used for target words, phrases, and
sequences in target sentence t.
3.1.1 Alignment Templates. The ATs are based on the bilingual phrases but they are
generalized by replacing words with word classes and by storing the alignment in-
formation for each phrase pair. Formally, an AT Z is a triple (S,T,?a), where S and
T are a source class sequence and a target class sequence, respectively, and ?a is an
alignment from the set of positions in S to the set of positions in T.4 Mapping of source
and target words to bilingual word classes is automatically trained using the method
described by Och (1999). The method is actually an unsupervised clustering method
which partitions the source and target vocabularies, so that assigning words to classes
is a deterministic operation. It is also possible to employ parts-of-speech or semantic
categories instead of the unsupervised clustering method used here. More details can
be found in Och (1999) and Och and Ney (2004). However, it should be mentioned
that the whole AT approach (and similar PBM approaches as they are now called) is
independent of the word clustering concept. In particular, for large training corpora,
omitting the word clustering in the AT system does not much affect the translation
accuracy.
To arrive at our translation model, we first perform a segmentation of the source
and target sentences into K ?blocks? dk ? (ik; bk, jk) (ik ? {1, . . . , I} and jk, bk ? {1, . . . , J}
for 1 ? k ? K). For a given sentence pair (sJ1, t
I
1), the kth bilingual segment (?sk,
?tk)
is (s
jk
bk?1+1
, t
ik
ik?1+1
) (Och and Ney 2003). The AT Zk = (Sk,Tk,?ak) associated with the kth
bilingual segment is: Sk the sequence of word classes in ?sk; Tk the sequence of word
classes in ?tk, and ?ak the alignment between positions in a source class sequence S and
positions in a target class sequence T.
For translating a given source sentence s we use the following decision rule as an
approximation to Equation (1):
(I?, t?I?1) = argmax
I,tI1
{
max
K,dK1 ,?a
K
1
log PAT(s
J
1, t
I
1; d
K
1 ,?a
K
1 )
}
(9)
3 Although the term ?phrase? has a more restricted meaning, in this article it refers to a word sequence.
4 Note that the phrases in an AT are sequences of word classes rather than words, which motivates the use
of a different notation.
9
Computational Linguistics Volume 35, Number 1
We use a log-linear model combination:
log PAT(s
J
1, t
I
1; d
K
1 ,?a
K
1 ) =
I
?
i=1
[
?1 + ?2 ? log p(ti|t
i?1
i?2)+ ?3 ? log p(Ti|T
i?1
i?4 )
]
+
K
?
k=1
[ ?4 + ?5 ? log q(bk|jk?1)+ ?6 ? log p(Tk,?ak|Sk)+
ik
?
i=ik?1+1
?7 ? log p(ti|?sk,?ak) ] (10)
with weights ?i, i = 1, ? ? ? , 7. The weights ?1 and ?4 play a special role and are used
to control the number I of words and number K of segments for the target sentence
to be generated, respectively. The log-linear combination uses the following set of
models:
 p(ti|t
i?1
i?2): Word-based trigram language model
 p(Ti|T
i?1
i?4 ): Class-based five-gram language model
 p(Tk,?ak|Sk): AT at class level, model parameters are estimated directly
from frequency counts in a training corpus
 p(ti|?sk,?ak): Single word model based on a statistical dictionary and ?ak. As
in the preceding model, the model parameters are estimated by using
frequency counts
 q(bk|jk?1) = e|bk?jk?1+1|: Re-ordering model using absolute j distance of
the phrases.
As can be observed, all models are implemented as feature functions which depend on
the source and the target language sentences, as well as on the two hidden variables
(?aK1 , b
K
1 ). Other feature functions can be added to this sort of model as needed. For a
more detailed description the reader is referred to Och and Ney (2004).
Learning alignment templates. To learn the probability of applying an AT, p(Z =
(S,T,?a)|?s ), all bilingual phrases that are consistent with the segmentation are extracted
from the training corpus together with the alignment within these phrases. Thus, we
obtain a count N(Z) of how often an AT occurred in the aligned training corpus. Using
the relative frequency
p(Z) = (S,T,?a)|?s) =
N(Z) ? ?(S,C(?s))
N(C(?s))
(11)
we estimate the probability of applying an AT Z to translate the source language phrase
?s, in which ? is Kronecker?s delta function. The class function C maps words onto their
10
Barrachina et al Statistical Computer-Assisted Translation
classes. To reduce the memory requirements, only probabilities for phrases up to a
maximal length are estimated, and phrases with a probability estimate below a certain
threshold are discarded.
The weights ?i in Equation (10) are usually estimated using held-out data with
respect to the automatic evaluation metric employed using the downhill simplex al-
gorithm from Press et al (2002).
3.1.2 Phrase-Based Models. A simple alternative to AT has been introduced in recent
works: The PBM approach (Toma?s and Casacuberta 2001; Marcu and Wong 2002; Zens,
Och, and Ney 2002; Toma?s and Casacuberta 2003; Zens and Ney 2004). These methods
learn the probability that a sequence of contiguous words?the source phrase?(as a
whole unit) in a source sentence is a translation of another sequence of contiguous
words?the target phrase?(as a whole unit) in the target sentence. In this case, the
statistical dictionaries of single word pairs are substituted by statistical dictionaries of
bilingual phrases or bilingual segments. These models are simpler than ATs, because no
alignments are assumed between word positions inside a bilingual segment and word
classes are not used in the definition of a bilingual phrase.
The simplest formulation is for monotone PBMs (Toma?s and Casacuberta 2007),
assuming a uniform distribution of the possible segmentations of the source and of the
target sentences. In this case, the approximation to Equation (1) is:
(I?, t?I?1) = argmax
I,tI1
{
max
K,dK1
log PPBM(s
J
1, t
I
1; d
K
1 )
}
(12)
In our implementation of this approach, we have also adopted a log-linear model
log PPBM(s
J
1, t
I
1; d
K
1 ) =
I
?
i=1
[
?1 + ?2 ? log p(ti|t
i?1
i?2)+ ?3 ? log p(Ti|T
i?1
i?4 )
]
+
K
?
k=1
[
?4 + ?5 ? log p(?tk|?sk)
]
(13)
with weights ?i, i = 1, ? ? ? , 5. The weights ?1 and ?4 play a special role and are used
to control the number I of words and number K of segments for the target sentence
to be generated, respectively. The log-linear combination uses the following set of
models:
 p(ti|t
i?1
i?2): Word-based trigram language model
 p(Ti|T
i?1
i?4 ): Class-based five-gram language model
 p(?tk|?sk): Statistical dictionary of bilingual phrases.
11
Computational Linguistics Volume 35, Number 1
If segment re-ordering is desired (non-monotone models), the probability of phrase-
alignment q can be introduced (a first-order distortion model is assumed):
log PPBM(s
J
1, t
I
1; d
K
1 ) =
I
?
i=1
[
?1 + ?2 ? log p(ti|t
i?1
i?2)+ ?3 ? log p(Ti|T
i?1
i?4 )
]
+
K
?
k=1
[
?4 + ?5 ? log p(?tk|?sk)+ ?6 ? log q(bk|jk?1)
]
(14)
with the additional model q, similar to the one used for AT.
Learning phrase-based alignment models. The parameters of each model and the weights
?i in Equations (13) and (14) have to be estimated. There are different approaches to
estimating the parameters of each model (Toma?s and Casacuberta 2007). Some of these
techniques correspond to a direct learning of the parameters from a sentence-aligned
corpus using a maximum likelihood approach (Toma?s and Casacuberta 2001; Marcu
and Wong 2002). Other techniques are heuristics based on the previous computation
of word alignments in the training corpus (Zens, Och, and Ney 2002; Koehn, Och, and
Marcu 2003). On the other hand, as for AT, the weights ?i in Equation (13) are usually
optimized using held-out data.
3.2 Stochastic Finite-State Transducers
SFSTs constitute an important framework in syntactic pattern recognition and nat-
ural language processing. The simplicity of finite-state models has given rise to some
concerns about their applicability to real tasks. Specifically in the field of language
translation, it is often argued that natural languages are so complex that these simple
models are never able to cope with the required source-target mappings. However, one
should take into account that the complexity of the mapping between the source and
target domains of a transducer is not always directly related to the complexity of the
domains themselves. Instead, a key factor is the degree of monotonicity or sequentiality
between source and target subsequences of these domains (Casacuberta, Vidal, and
Pico? 2005). Finite-state transducers have been shown to be adequate to handle complex
mappings efficiently (Berstel 1979) and SFSTs are closely related to monotone PBMs.
In Equation (4), Pr(s, t) can be modeled by an SFST T, which is defined as a tuple
??,?,Q, q0, p, f ?, where ? is a finite set of source symbols,? is a finite set of target symbols
(? ?? = ?), Q is a finite set of states, q0 is the initial state, p and f are two functions
p : Q ? ??? ? Q ? [0, 1] (for the probabilities of transitions) and f : Q ? [0, 1] (for the
probabilities of final states) that satisfy ?q ? Q:
f (q) +
?
(s,?t,q? )?????Q
p(q, s,?t, q?) = 1 (15)
Given T, a path with J transitions associated with the translation pair (s, t) ?
?? ??? is a sequence of transitions ? = (q0, s1 , t?1, q1) (q1, s2 , t?2, q2) (q2, s3 , t?3, q3) . . .
(qJ?1, sJ , t?J, qJ ), such that s1 s2 . . . sJ = s and t?1 t?2 . . . t?J = t. The probability of a path is
12
Barrachina et al Statistical Computer-Assisted Translation
the product of its transition probabilities, times the final-state probability of the last
state in the path:
PT(?) =
J
?
j=1
p(qj?1, sj , t?j, qj) ? f (qJ ) (16)
The probability of a translation pair (s, t) according to T is then defined as the sum of
the probabilities of all the paths associated with (s, t):
PT(s, t) =
?
?
PT(?) (17)
Learning finite-state transducers. There are different families of techniques to train an
SFST from a parallel corpus of source?target sentences (Casacuberta and Vidal 2007).
One of the techniques that has been adopted in this work is the grammatical inference
and alignments for transducer inference (GIATI) technique. This technique is in the
category of hybrid methods which use statistical techniques to guide the SFST structure
learning and simultaneously train the associated probabilities.
Given a finite sample of string pairs, the inference of SFSTs using the GIATI tech-
nique is performed as follows (Casacuberta and Vidal 2004; Casacuberta, Vidal, and
Pico? 2005): i) Building training strings: Each training pair is transformed into a single
string from an extended alphabet to obtain a new sample of strings. ii) Inferring a
(stochastic) regular grammar. Typically, a smoothed n-gram is inferred from the sample
of strings obtained in the previous step. iii) Transforming the inferred regular grammar
into a transducer: The symbols associated with the grammar rules are converted back
into input/output symbols, thereby transforming the grammar inferred in the previous
step into a transducer. The transformation of a parallel corpus into a string corpus
is performed using statistical alignments. These alignments are obtained using the
GIZA++ software (Och and Ney 2003).
4. Searching
Searching is an important computational problem in SMT. Algorithmic solutions de-
veloped for SMT can be adapted to the IPMT framework. The main general search
procedures for each model in Section 3 are presented in the following subsections,
each followed by a detailed description of the necessary adaptations to the interactive
framework.
4.1 Searching with Alignment Templates
In offline MT, the generation of the best translation for a given source sentence s is
carried out by producing the target sentence in left-to-right order using the model of
Equation (10). At each step of the generation algorithm we maintain a set of active
hypotheses and choose one of them for extension. A word of the target language is
then added to the chosen hypothesis and its costs get updated. This kind of generation
fits nicely into a dynamic programming (DP) framework, as hypotheses which are
indistinguishable by both language and translation models (and that have covered
the same source positions) can be recombined. Because the DP search space grows
13
Computational Linguistics Volume 35, Number 1
Figure 2
Example of a word graph for the source German sentence was hast du gesagt? (English reference
translation: ?what did you say??).
exponentially with the size of the input, standard DP search is prohibitive, and we resort
to a beam-search heuristic.
4.1.1 Adaptation to the Interactive-Predictive Scenario. The most important modification
is to rely on a word graph that represents possible translations of the given source
sentence. This word graph is generated once for each source sentence. During the
process of human?machine interaction the system makes use of this word graph in
order to complete the prefixes accepted by the human translator. In other words, after
the human translator has accepted a prefix string, the system finds the best path in the
word graph associated with this prefix string so that it is able to complete the target
sentence. Using the word graph in such a way, the system is able to interact with the
human translator in a time efficient way. In Och, Zens, and Ney (2003), an efficient
algorithm for interactive generation using word graphs was presented. A word graph
is a weighted directed acyclic graph, in which each node represents a partial translation
hypothesis and each edge is labeled with a word of the target sentence and is weighted
according to the language and translation model scores. In Ueffing, Och, and Ney (2002),
the authors give a more detailed description of word graphs and show how they can be
easily produced as a by-product of the search process. An example of a word graph is
shown in Figure 2.
The computational cost of this approach is much lower, as the whole search for the
translation must be carried out only once, and the generated word graph can be reused
for further completion requests.
For a fixed source sentence, if no pruning is applied in the production of the word
graph, it represents all possible sequences of target words for which the posterior
probability is greater than zero, according to the models used. However, because of
the pruning generally needed to render the problem computationally feasible, the
resulting word graph only represents a subset of the possible translations. Therefore,
it may happen that the user sets prefixes which cannot be found in the word graph. To
circumvent this problem some heuristics need to be implemented.
First, we look for the node with minimum edit distance to the prefix except for
its last (partial) word.5 Then we select the completion path which starts with the last
5 The edit distance concept for finding the prefix string in a word graph could be refined by casting the edit
distance operations into a suitable probabilistic model.
14
Barrachina et al Statistical Computer-Assisted Translation
(partial) word of the prefix and has the best backward score?this is the score associated
with a path going from the node to the final node. Now, because the original word graph
may not be compatible with the new information provided by the prefix, it might be
impossible to find a completion in this word graph due to incompatibility with the
last (partial) word in the prefix. This problem can be solved to a certain degree by
searching for a completion of the last word with the highest probability using only the
language model. This supplementary heuristic to the usual search increases the perfor-
mance of the system, because some of the rejected words in the pruning process can
be recovered.
A desirable feature of an IPMT system is the possibility of producing a list of
alternative target suffixes, instead of only one. This feature can be easily added by
computing the n-best hypotheses. Of course, these n-best hypotheses do not refer to
the whole target sentence, but only to the suffixes. However, the problem is that in
many cases the sentence hypotheses in the n-best list differ in only one or two words.
Therefore, we introduce the additional requirement that the first four words of the n-
best hypotheses must be different.
4.2 Searching with Phrase-Based Models
The generation of the best translation with PBMs is similar to the one described in the
previous section. Each hypothesis is composed of a prefix of the target sentence, a subset
of source positions that are aligned with the positions of the prefix of the target sentence,
and a score. In this case, we adopted an extension of the best-first strategy where the
hypotheses are stored in several sorted lists, depending on which words in the source
sentence have been translated. This strategy is related to the well-known multi-stack-
decoding algorithm (Berger et al 1996; Toma?s and Casacuberta 2004). In each iteration,
the algorithm extends the best hypothesis from each available list.
While target words are always generated from left to right, there are two alter-
natives in the source word extraction: Monotone search, which takes the source words
from left to right, and non-monotone search, which can take source words in any
order.
4.2.1 Adaptation to the Interactive-Predictive Scenario. Only a simple modification of this
search algorithm is necessary: If the new extended hypothesis is not compatible with
the fixed target prefix, tp, then this hypothesis is not considered. This compatibility is
verified at the character level; therefore the user does not need to type the whole target
word at the end of the target prefix.
In the interactive scenario, speed is a critical aspect. In the PBM approach, monotone
search is much faster than non-monotone search in the tasks which are considered in this
work (Toma?s and Casacuberta 2006). However, monotone search presents a problem for
interactive operation: If a user introduces a prefix that cannot be obtained in a monotone
way from the source, the search algorithm is not able to complete this prefix. In order
to solve this problem without losing computational efficiency, we use the following ap-
proach: Non-monotone search is used for target prefixes, whereas completions (suffixes)
are generated using monotone search.
As for AT models, a list of target suffixes can also be produced. This list can be
obtained easily by keeping the n-best hypotheses in each sorted list. To avoid generating
very similar hypotheses in the n-best list, we apply the following procedure: Starting
from the n-best list resulting from the normal search, we first add hypotheses obtained
15
Computational Linguistics Volume 35, Number 1
by translating a single untranslated word from the source, along with hypotheses
consisting of a single high-probability word according to the target language model; we
then re-order the hypotheses, maximizing the diversity at the beginning of the suffixes,
and keep only the n first hypotheses in the re-ordered list.
4.3 Searching with Stochastic Finite-State Transducers
As discussed by Pico? and Casacuberta (2001), the computation of Equation (4) for SFSTs
under a maximum approximation (i.e., using maximization in Equation (17) instead
of the sum) amounts to a conventional Viterbi search. The algorithm finds the most
probable path among those paths in the SFST which are compatible with the source
sentence s. The corresponding translation, t?, is simply obtained by concatenating the
target strings of the edges of this path.
4.3.1 Adaptation to the Interactive-Predictive Scenario. Here, Equation (7) is used wherein
the optimization is performed over the set of target suffixes (completions) rather than
the set of complete target sentences. To solve this maximization problem, an approach
similar to that proposed for AT in Section 4.1 has been adopted.
First, given the source sentence, a word graph is extracted from the SFST. In this
case, the word graph is just (a pruned version of) the Viterbi search trellis obtained when
translating the whole source sentence. The main difference between the word graphs
generated with ATs and SFSTs is how the nodes and edges are defined in each case. On
the one hand, the nodes are defined as partial hypotheses of the search procedure in
the AT approach, whereas the nodes in the case of SFSTs can be directly mapped into
states in the SFST representing a joint (source word/target string) language model. On
the other hand, the scores associated with the edges in the AT approach are computed
from a combination of the language and translation models, whereas in the case of
SFSTs these scores simply come from the joint language model estimated by the GIATI
technique.
Once the word graph has been generated, the search for the most probable com-
pletion as stated in Equation (6) is carried out in two steps, in a similar way to that
explained for the AT approach. In this case, the computation entailed by both the edit-
distance (prefix error-correcting) and the remaining search is significantly accelerated
by visiting the nodes in topological order and by the incorporation of the beam-search
technique (Amengual and Vidal 1998). Moreover, the error-correcting algorithm takes
advantage of the incremental way in which the user prefix is generated, parsing only
the new suffix appended by the user in the last interaction.
It may be the case that a user prefix ends in an incomplete word during the inter-
active translation process. Therefore, it is necessary to start the translation completion
with a word whose prefix matches this unfinished word. The proposed algorithm thus
searches for such a word. First, it considers the target words of the edges leaving
the nodes returned by the error-correcting algorithm. If this initial search fails, then
a matching word is looked up in the word-graph vocabulary. Finally, as a last resort,
the whole transducer vocabulary is taken into consideration to find a matching word;
otherwise this incomplete word is treated as an entire word.
This error-correcting algorithm returns a set of nodes from which the best comple-
tion would be selected according to the best backward score. Moreover, n-best com-
pletions can also be produced. Among many weighted-graph n-best path algorithms
which are available, the recursive enumeration algorithm presented in Jime?nez and
16
Barrachina et al Statistical Computer-Assisted Translation
Marzal (1999) was adopted for its simplicity in calculating best paths on demand and its
smooth integration with the error-correcting algorithm.
5. Experimental Framework
The models and search procedures introduced in the previous sections were assessed
through a series of IPMT experiments with different corpora. These corpora, along with
the corresponding pre- and post-processing and assessment procedures, are presented
in this section.
5.1 Pre- and Post-Processing
Usually, MT models are trained on a pre-processed version of an original corpus. Pre-
processing provides a simpler representation of the training corpus which makes token
or word forms more homogeneous. In this way automatic training of the MT models is
boosted, and the amount of computation decreases.
The pre-processing steps are: tokenization, removing unnecessary case information,
and tagging some special tokens like numerical sequences, e-mail addresses, and URLs
(?categorization?). In translation from a source language to a target language, there are
some words which are translated identically (because they have the same spelling in
both languages). Therefore, we identify them in the corpus and replace them with some
generic tags to help the translation system.
Post-processing takes place after the translation in order to hide the internal repre-
sentation of the text from the user. Thus, the user will only work with an output which
is very similar to human-generated texts. In detail, the post-processing steps are: de-
tokenization, true-casing, and replacing the tags with their corresponding words.
In an IPMT scenario, the pre-/post-processing must run in real-time and should be
reversible as much as possible. In each human?machine interaction, the current prefix
has to be pre-processed for the interactive-predictive engine and then the generated
completion has to be post-processed for the user. It is crucial that the pre-processing of
prefixes is fully compatible with the training corpus.
5.2 Xerox and EU Corpora
Six bilingual corpora were used for two different tasks and three different language
pairs in the framework of the TT2 project (SchlumbergerSema S.A. et al 2001).
The language pairs involved were English?Spanish, English?French, and English?
German (Khadivi and Goutte 2003), and the tasks were Xerox (Xerox printer manuals)
and EU (Bulletin of the European Union).
The three Xerox corpora were obtained from different user manuals for Xerox print-
ers (SchlumbergerSema S.A. et al 2001). The main features of these corpora are shown
in Table 1. Dividing the corpora into training and test sets was performed by randomly
selecting (without replacement) a specified amount of test sentences and leaving the
remaining ones for training. It is worth noting that the manuals were not the same in
each pair of languages. Even though all training and test sets have similar size, this
probably explains why the perplexity varies considerably over the different language
pairs. The vocabulary size was computed using the tokenized and true-case corpus.
The three bilingual EU corpora were extracted from the Bulletin of the European
Union, which exists in all official languages of the European Union (Khadivi and Goutte
17
Computational Linguistics Volume 35, Number 1
Table 1
The Xerox corpora. For all the languages, the training/test full-sentence overlap and the rate of
out-of-vocabulary test-set words were less than 10% and 1%, respectively. Trigram models were
used to compute the test word perplexity. (K and M denote thousands and millions,
respectively.)
English/Spanish English/German English/French
T
ra
in Sent. pairs (K) 56 49 53
Running words (M) 0.7/0.7 0.6/0.5 0.6/0.7
Vocabulary (K) 15/17 14/25 14/16
T
e
st
Sentences (K) 1.1 1.0 1.0
Running words (K) 8/10 12/12 11/12
Running chars. (K) 46/59 63/73 56/65
Perplexity 99/58 57/93 109/70
2003) and is publicly available on the Internet. The corpora used in the experiments
which are described subsequently were again acquired and processed in the framework
of the TT2 project. The main features of these corpora are shown in Table 2. The
vocabulary size and the training and test set partitions were obtained in a similar way
as with the Xerox corpora.
5.3 Assessment
In all the experiments reported in this article, system performance is assessed by
comparing test sentence translations produced by the translation systems with the
corresponding target language references of the test set. Some of the computed assess-
ment figures measure the quality of the translation engines without any system?user
interactivity:
 Word error rate (WER): The minimum number of substitution, insertion,
and deletion operations needed to convert the word strings produced by
the translation system into the corresponding single-reference word
strings. WER is normalized by the overall number of words in the
reference sentences (Och and Ney 2003).
Table 2
The EU corpora. For all the languages, the training/test full-sentence overlap and the rate of
out-of-vocabulary test-set words were less than 3% and 0.2%, respectively. Trigram models were
used to compute the test word perplexity. (K and M denote thousands and millions,
respectively.)
English/Spanish English/German English/French
T
ra
in Sent. pairs (K) 214 223 215
Running words (M) 5.2/5.9 5.7/5.4 5.3/6.0
Vocabulary (K) 84/97 86/153 84/91
T
e
st
Sentences (K) 0.8 0.8 0.8
Running words (K) 20/23 20/19 20/23
Running chars. (K) 119/135 120/134 119/134
Perplexity 58/46 57/87 58/45
18
Barrachina et al Statistical Computer-Assisted Translation
 Bilingual evaluation understudy (BLEU): This is based on the coverage of
n-grams of the hypothesized translation which occur in the reference
translations (Papineni et al 2001).
Other assessment figures are aimed at estimating the effort needed by a human
translator to produce correct translations using the interactive system. To this end, the
target translations which a real user would have in mind are simulated by the given
references. The first translation hypothesis for each given source sentence is compared
with a single reference translation and the longest common character prefix (LCP) is
obtained. The first non-matching character is replaced by the corresponding reference
character and then a new system hypothesis is produced. This process is iterated until
a full match with the reference is obtained.
Each computation of the LCP would correspond to the user looking for the next
error and moving the pointer to the corresponding position of the translation hypothesis.
Each character replacement, on the other hand, would correspond to a keystroke of
the user. If the first non-matching character is the first character of the new system
hypothesis in a given iteration, no LCP computation is needed; that is, no pointer
movement would be made by the user. Bearing this in mind, we define the following
interactive-predictive performance measures:
 Keystroke ratio (KSR): Number of keystrokes divided by the total number
of reference characters.
 Mouse-action ratio (MAR): Number of pointer movements plus one more
count per sentence (aimed at simulating the user action
needed to accept the final translation), divided by the total number of
reference characters.
 Keystroke and mouse-action ratio (KSMR): KSR plus MAR.
Note that KSR estimates only the user?s actions on the keyboard whereas MAR
estimates actions for which the user would typically use the mouse. From a user
point of view the two types of actions are different and require different types of
effort (Macklovitch, Nguyen, and Silva 2005; Macklovitch 2006). In any case, as an
approximation, KSMR accounts for both KSR and MAR, assuming that both actions
require a similar effort.
In the case of SMT systems, it is well known that an automatically computed
quality measure like BLEU correlates quite well with human judgment (Callison-Burch,
Osborne, and Koehn 2006). In the case of IPMT, we should keep in mind that the
main goal of (automatic) assessment is to estimate the effort of the human translator.
Moreover, translation quality is not an issue here, because the (simulated) human
intervention ensures ?perfect? translation results. The important question is whether
the (estimated) productivity of the human translator can really be increased or not by
the IPMT approach. In order to answer this question, the KSR and KSMR measures will
be used in the IPMT experiments to be reported in the next section.
In order to show the statistical significance of the results, all the assessment figures
reported in the next section are accompanied by the corresponding 95% confidence
intervals. These intervals have been computed using bootstrap sampling techniques, as
proposed by Bisani and Ney (2004), Koehn (2004), and Zhang and Vogel (2004).
19
Computational Linguistics Volume 35, Number 1
6. Results
Two types of results are reported for each corpus and for each translation approach.
The first are conventional MT results, obtained as a reference to give an idea of the
?classical? MT difficulty of the selected tasks. The second aim is to assess the interactive
MT (IPMT) approach proposed in this article.
The results are presented in different subsections. The first two subsections present
the MT and IPMT results for the 1-best translation obtained by the different techniques
in the Xerox and EU tasks, respectively. The third subsection presents further IPMT
results for the 5-best translations on a single pair of languages.
Some of these results may differ from results presented in previous works (Cubel
et al 2003; Och, Zens, and Ney 2003; Civera et al 2004a; Cubel et al 2004; Bender
et al 2005). The differences are due to variations in the pre-/post-processing procedures
and/or recent improvements of the search techniques used by the different systems.
6.1 Experiments with the Xerox Corpora
In this section, the translation results obtained using ATs, PBMs, and SFSTs for all six
language pairs of the Xerox corpus are reported. Word-based trigram and class-based
five-gram target-language models were used for the AT models (the parameters of the
log-linear model are tuned so as to minimize WER on a development corpus); word-
based trigram target-language models were used for PBMs and trigrams were used to
infer GIATI SFSTs.
Off-line MT Results. MT results with ATs, PBMs, and SFSTs are presented in Figure 3.
Results obtained using the PBMs are slightly but consistently better that those achieved
using the other models. In general, the different techniques perform similarly for the
various translation directions. However, the English?Spanish language pair is the one
for which the best translations can be produced.
IPMT Results. Performance has been measured in terms of KSRs and MARs (KSR and
MAR are represented as the lower and upper portions of each bar, respectively, and
KSMR is the whole bar length). The results are shown in Figure 4.
Figure 3
Off-line MT results (BLEU and WER) for the Xerox corpus. Segments above the bars show the
95% confidence intervals. En = English; Sp = Spanish; Fr = French; Ge = German.
20
Barrachina et al Statistical Computer-Assisted Translation
Figure 4
IPMT results for the Xerox corpus. In each bar, KSR is represented by the lower portion, MAR by
the upper portion, and KSMR is the whole bar. Segments above the bars show the 95%
confidence intervals. En = English; Sp = Spanish; Fr = French; Ge = German.
According to these results, a human translator assisted by an AT-based or a SFST-
based interactive system would only need an effort equivalent to typing about 20% of
the characters in order to produce the correct translations for the Spanish to English
task; or even less than 20% if a PBM-based system is used.
For the Xerox task, off-line MT performance and IPMT results show similar tenden-
cies. The PBMs show better performance for both the off-line MT and for the IPMT
assessment figures. The AT and SFST models perform more or less equivalently. In
both scenarios, the best results were achieved for the Spanish?English language pair
followed by French?English and German?English.
The computing times needed by all the systems involved in these experiments were
well within the range of the on-line operational requirements. The average initial time
for each source test sentence was very low (less than 50 msec) for PBMs and SFSTs
and adequate for ATs (772 msec). In the case of ATs and SFSTs, this included the time
required for the generation of the initial word-graph of each sentence. Moreover, the
most critical times incurred in the successive IPMT iterations were very low in all
the cases: 18 msec for ATs, 99 msec for PBMs, and 9 msec for SFSTs. Note, however,
that these average times are not exactly comparable because of the differences in the
computer hardware used by each system (2 Ghz AMD, 1.5 Ghz Pentium, and 2.4 Ghz
Pentium for ATs, PBMs, and SFSTs, respectively).
6.2 Experiments with the EU Corpora
The translation results using the AT, PBM, and SFST approaches for all six language
pairs of the EU corpus are reported in this section. As for the Xerox corpora, in the AT
experiments, word-based trigram and class-based five-gram target-language models
were used; in the PBM experiments, word-based trigram and class-based five-gram
target-language models were also used and five-grams were used to infer GIATI SFSTs.
Off-line MT Results. Figure 5 presents the results obtained using ATs, PBMs, and SFSTs.
Generally speaking, the results are comparable to those obtained on the Xerox corpus
with the exception of the English?Spanish language pair, which were better. With these
corpora, the best results were obtained with the ATs and PBMs for all the pairs and the
best translation direction was French-to-English with all the models used.
21
Computational Linguistics Volume 35, Number 1
Figure 5
Off-line MT results (BLEU and WER) for the EU corpus. Segments above the bars show the 95%
confidence intervals. En = English; Sp = Spanish; Fr = French; Ge = German.
IPMT Results. Figure 6 shows the performance of the AT, PBM, and SFST systems in
terms of KSRs and MARs in a similar way as for the Xerox corpora.
As in the MT experiments, the results are comparable to those obtained on the Xerox
corpus, with the exception of the English?Spanish pair. Similarly, as in MT, the best
results were obtained for the French-to-English translation direction.
Although EU is a more open-domain task, the results demonstrate again the poten-
tial benefit of computer-assisted translation systems. Using PBMs, a human translator
would only need an effort equivalent to typing about 20% of the characters in order
to produce the correct translations for French-to-English translation direction, whereas
for ATs and SFSTs the effort would be about 30%. For the other language pairs, the
efforts would be about 20?30% and 35% of the characters for PBMs and ATs/SFSTs,
respectively.
The systemwise correlation between MT and IPMT results on this corpus is not
as clear as in the Xerox case. One possible cause is the much larger size of the EU
corpus compared to the Xerox corpus. In order to run the EU experiments within rea-
sonable time limits, all the systems have required the use of beam search and/or other
Figure 6
IPMT results for the EU corpus. In each bar, KSR is represented by the lower portion, MAR by
the upper portion and KSMR is the whole bar. Segments above the bars show the 95%
confidence intervals. En = English; Sp = Spanish; Fr = French; Ge = German.
22
Barrachina et al Statistical Computer-Assisted Translation
Table 3
IPMT results (%) for the Xerox corpus (English?Spanish) using ATs, PBMs, and SFSTs for the
1-best hypothesis and 5-best hypotheses. 95% confidence intervals are shown.
1-best 5-best
Technique KSR KSMR KSR KSMR
AT 12.9?0.9 23.2?1.3 11.1?0.8 20.3?1.2
PBM 8.9?0.8 16.7?1.2 7.3?0.6 15.4?1.1
SFST 13.0?1.0 21.8?1.4 11.2?1.0 19.2?1.3
suboptimal pruning techniques, although this was largely unnecessary for the Xerox
corpus. Clearly, the pruning effects are different in the off-line (MT) and the on-line
(IPMT) search processes and the differences may lead to wide performance variations
for the AT, PBM, and SFST approaches.
Nevertheless, as can be seen in Bender et al (2005), the degradation in system
performance due to pruning is generally not too substantial and sufficiently accurate
real-time interactive operation could also be achieved in the EU task with the three
systems tested.
6.3 Results with n-Best Hypotheses
Further experiments were carried out to study the usefulness of n-best hypotheses in
the interactive framework. In this scenario, the user can choose one out of n proposed
translation suffixes and then proceed as in the usual IPMT paradigm. As with the
previous experiments, the automated evaluation is based on a selected target sentence
that best matches a prefix of the reference translation in each IPMT iteration (therefore
KSR is minimized).
Here, only IPMT results for the English-to-Spanish translation direction are re-
ported for both Xerox and EU tasks, using a list of the five best translations. These results
are shown in Tables 3 and 4.
In all the cases there is a clear and significant accuracy improvement when moving
from single-best to 5-best translations. This gain in translation quality diminishes in a
log-wise fashion as we increase the number of best translations. From a practical point
of view, the improvements provided by using n-best completions would come at the
cost of the user having to ponder which of these completions is more suitable. In a
real operational environment, this additional user effort may or may not outweigh the
Table 4
IPMT results (%) for the EU corpus (English?Spanish) using ATs, PBMs, and SFSTs for the 1-best
hypothesis and 5-best hypotheses. 95% confidence intervals are shown.
1-best 5-best
Technique KSR KSMR KSR KSMR
AT 20.2?0.9 32.6?1.3 18.5?0.8 29.9?1.2
PBM 16.3?0.7 27.8?1.1 13.2?0.6 25.0?1.1
SFST 21.3?0.9 33.0?1.3 19.3?0.9 29.9?1.3
23
Computational Linguistics Volume 35, Number 1
benefits of the n-best increased accuracy. Consequently, this feature should be offered to
the users as an option.
7. Practical Issues
IPMT results reported in the previous section provide reasonable estimations of potential
savings of human translator effort, assuming that the goal is to obtain high quality
translations. In real work, however, several practical issues not discussed in this article
may significantly affect the actual system usability and overall user productivity.
One of the most obvious issues is that a carefully designed graphical user interface
(GUI) is needed to let the users actually be in command of the translation process, so
that they really feel the system is assisting them rather than the other way around. In
addition, an adequate GUI has to provide adequate means for the users to easily and
intuitively change at will IPMT engine parameters that may have an impact on their
way of working with the system. To name just a few: The maximum length of system
hypotheses, the value of n for n-best suggestions, or the ?interaction step granularity?;
that is, whether the system should react at each user keystroke, or at the end of each
complete typed word, or after a sufficiently long typing pause, and so on.
Clearly, all these important issues are beyond the scope of the present article. But
we can comment that, in the TT2 project, complete prototypes of some of the systems
presented in this article, including the necessary GUI, were actually implemented and
thoroughly evaluated by professional human translators in their working environ-
ment (Macklovitch, Nguyen, and Silva 2005; Macklovitch 2006).
The results of these field tests showed that the actual productivity depended not
only on the individual translators, but also on the given test texts. In cases where these
texts were quite unrelated to the training data, the system did not significantly help
the human translators to increase their productivity. However, when the test texts were
reasonably well related to the training data, high productivity gains were registered?
close to what could be expected according to the KSR/MAR empirical results.
8. Concluding Remarks
The IPMT paradigm proposed in this article allows for a close collaboration between a
human translator and a machine translation system. This paradigm entails an iterative
process where, in each iteration, a data-driven machine translation engine suggests a
completion for the current prefix of a target sentence which a human translator can
accept, modify, or ignore.
This idea was originally proposed in the TransType project (Langlais, Foster, and
Lapalme 2000), where a simple engine was used which only supported single-token
suggestions. Furthering these ideas, in the TransType2 project (SchlumbergerSema S.A.
et al 2001), state-of-the-art statistical machine translation systems have been developed
and integrated in the IPMT framework.
In a laboratory environment, results on two different tasks suggest that the pro-
posed techniques can reduce the typing effort needed to produce a high-quality transla-
tion of a given source text by as much as 80% with respect to the effort needed to simply
type the whole translation. In real conditions, a high productivity gain was achieved in
many cases.
We have studied here IPMT from the point of view of a standalone CAT tool.
Nevertheless, IPMT can of course be easily and conveniently combined with other
popular translator workbench tools. More specifically, IPMT lends itself particularly
24
Barrachina et al Statistical Computer-Assisted Translation
well to addressing the typical lack of generalization capabilities of translation memories.
When used as a CAT tool, translation memories allow the human translator to keep
producing increasingly long segments of correct target text. Clearly, these segments can
be used by an IPMT engine to suggest to the translator possible translations for source
text segments that are not found in the translation memories as exact matches.
Acknowledgments
This work has been partially supported by
the ST Programme of European Union under
grant IST-2001-32091, by the Spanish project
TIC?2003-08681-C02-02, and the Spanish
research programme Consolider
Ingenio-2010 CSD2007-00018. The authors
wish to thank the anonymous reviewers for
their criticisms and suggestions.
References
Amengual, J. C., J. M. Bened??, A. Castan?o,
A. Castellanos, V. M. Jime?nez, D. Llorens,
A. Marzal, M. Pastor, F. Prat, E. Vidal, and
J. M. Vilar. 2000. The EuTrans-I speech
translation system. Machine Translation,
15:75?103.
Amengual, J. C. and E. Vidal. 1998. Efficient
error-correcting Viterbi parsing. IEEE
Transactions on Pattern Analysis and Machine
Intelligence, 20(10):1109?1116.
Bender, O., S. Hasan, D. Vilar, R. Zens, and
H. Ney. 2005. Comparison of generation
strategies for interactive machine
translation. In Proceedings of the 10th
Annual Conference of the European
Association for Machine Translation (EAMT
05), pages 33?40, Budapest.
Berger, A. L., P. F. Brown, S. A. Della Pietra,
V. J. Della Pietra, J. R. Gillett, A. S. Kehler,
and R. L. Mercer. 1996. Language
translation apparatus and method of using
context-based translation models. United
States Patent No. 5510981, April.
Berstel, J. 1979. Transductions and Context-Free
Languages. B. G. Teubner, Stuttgart.
Bisani, M. and H. Ney. 2004. Bootstrap
estimates for confidence intervals in ASR
performance evaluation. In Proceedings of
the International Conference on Acoustic,
Speech and Signal Processing (ICASSP 04),
volume 1, pages 409?412, Montreal.
Bowker, L. 2002. Computer-Aided Translation
Technology: A Practical Introduction,
chapter 5: Translation-memory systems.
Didactics of Translation. University of
Ottawa Press, pages 92?127.
Brown, P. F., J. Cocke, S. A. Della Pietra,
V. J. Della Pietra, F. Jelinek, J. D. Lafferty,
R. L. Mercer, and P. S. Roosin. 1990.
A statistical approach to machine
translation. Computational Linguistics,
16(2):79?85.
Brown, P. F., S. A. Della Pietra, V. J.
Della Pietra, and R. L. Mercer. 1993. The
mathematics of statistical machine
translation: Parameter estimation.
Computational Linguistics, 19(2):263?310.
Callison-Burch, C., M. Osborne, and
P. Koehn. 2006. Re-evaluating the role of
BLEU in machine translation research. In
Proceedings of the 10th Conference of the
European Chapter of the Association for
Computational Linguistics (EACL 06),
pages 249?256, Trento.
Casacuberta, F., H. Ney, F. J. Och, E. Vidal,
J. M. Vilar, S. Barrachina, I. Garc??a-Varea,
D. Llorens, C. Mart??nez, S. Molau,
F. Nevado, M. Pastor, D. Pico?, A. Sanchis,
and C. Tillmann. 2004a. Some approaches
to statistical and finite-state
speech-to-speech translation. Computer
Speech and Language, 18:25?47.
Casacuberta, F. and E. Vidal. 2004. Machine
translation with inferred stochastic
finite-state transducers. Computational
Linguistics, 30(2):205?225.
Casacuberta, F. and E. Vidal. 2007. Learning
finite-state models for machine translation.
Machine Learning, 66(1):69?91.
Casacuberta, F., E. Vidal, and D. Pico?. 2005.
Inference of finite-state transducers from
regular languages. Pattern Recognition,
38:1431?1443.
Casacuberta, F., E. Vidal, A. Sanchis, and
J. M. Vilar. 2004b. Pattern recognition
approaches for speech-to-speech
translation. Cybernetic and Systems: an
International Journal, 35(1):3?17.
Civera, J., J. M. Vilar, E. Cubel, A. L. Lagarda,
S. Barrachina, E. Vidal, F. Casacuberta,
D. Pico?, and J. Gonza?lez. 2004a. From
machine translation to computer assisted
translation using finite-state models. In
Proceedings of the Conference on Empirical
Methods for Natural Language Processing
(EMNLP 04), pages 349?356, Barcelona.
Civera, J., J. M. Vilar, E. Cubel, A. L. Lagarda,
S. Barrachina, F. Casacuberta, E. Vidal,
D. Pico?, and J. Gonza?lez. 2004b. A syntactic
pattern recognition approach to computer
assisted translation. In Advances in
25
Computational Linguistics Volume 35, Number 1
Statistical, Structural and Syntactical Pattern
Recognition, Proceedings of the Joint IAPR
International Workshops on Syntactical and
Structural Pattern Recognition (SSPR 04)
and Statistical Pattern Recognition
(SPR 04)), Lisbon, Portugal, August 18?20,
volume 3138 of Lecture Notes in Computer
Science. Springer-Verlag, Heidelberg,
pages 207?215.
Cubel, E., J. Civera, J. M. Vilar, A. L. Lagarda,
S. Barrachina, E. Vidal, F. Casacuberta,
D. Pico?, J. Gonza?lez, and L. Rodr??guez.
2004. Finite-state models for computer
assisted translation. In Proceedings of the
16th European Conference on Artificial
Intelligence (ECAI 04), pages 586?590,
Valencia.
Cubel, E., J. Gonza?lez, A. Lagarda,
F. Casacuberta, A. Juan, and E. Vidal. 2003.
Adapting finite-state translation to the
TransType2 project. In Proceedings of the
Joint Conference Combining the 8th
International Workshop of the European
Association for Machine Translation and the
4th Controlled Language Applications Workshop
(EAMT-CLAW 03), pages 54?60, Dublin.
Foster, G. 2002. Text Prediction for Translators.
Ph.D. thesis, Universite? de Montre?al,
Canada.
Foster, G., P. Isabelle, and P. Plamondon.
1997. Target-text mediated interactive
machine translation. Machine Translation,
12(1?2):175?194.
Isabelle, P. and K. Church. 1997. Special issue
on new tools for human translators.
Machine Translation, 12(1?2).
Jelinek, F. 1998. Statistical Methods for Speech
Recognition. The MIT Press, Cambridge,
MA.
Jime?nez, V. M. and A. Marzal. 1999.
Computing the k shortest paths: a new
algorithm and an experimental
comparison. In Algorithm Engineering:
Proceedings of the 3rd International
Workshop (WAE 99), London, UK, July 19?21,
volume 1668 of Lecture Notes in Computer
Science. Springer-Verlag, Heidelberg,
pages 15?29.
Kay, M. 1997. The proper place of men and
machines in language translation. Machine
Translation, 12:3?23. [This article first
appeared as a Xerox PARC Working Paper
in 1980].
Khadivi, S. and C. Goutte. 2003. Tools for
corpus alignment and evaluation of the
alignments (deliverable d4.9). Technical
report, TransType2 (IST-2001-32091).
Khadivi, S., R. Zens, and H. Ney. 2006.
Integration of speech to computer-assisted
translation using finite-state automata.
In Proceedings of the 44th Annual Meeting of
the Association for Computational Linguistics
and 21th International Conference on
Computational Linguistics (COLING/ACL
06), pages 467?474, Sydney.
Khadivi, S., A. Zolnay, and H. Ney. 2005.
Automatic text dictation in
computer-assisted translation. In
Proceedings of the European Conference on
Speech Communication and Technology,
(INTERSPEECH 05-EUROSPEECH),
pages 2265?2268, Lisbon.
Koehn, P. 2004. Statistical significance
tests for machine translation evaluation.
In Proceedings of the Conference on
Empirical Methods for Natural Language
Processing (EMNLP 04), pages 388?395,
Barcelona.
Koehn, P., F. J. Och, and D. Marcu. 2003.
Statistical phrase-based translation. In
Proceedings of the 2003 Meeting of the North
American Chapter of the Association for
Computational Linguistics (NAACL 03),
pages 127?133, Edmonton.
Langlais, P., G. Foster, and G. Lapalme. 2000.
TransType: a computer-aided translation
typing system. In Proceedings of the
NAACL/ANLP Workshop on Embedded
Machine Translation Systems, pages 46?52,
Seattle, WA.
Langlais, P., G. Lapalme, and M. Loranger.
2002. Transtype: Development-evaluation
cycles to boost translator?s productivity.
Machine Translation, 15(4):77?98.
Macklovitch, E. 2006. TransType2: The last
word. In Proceedings of the 5th International
Conference on Languages Resources and
Evaluation (LREC 06), pages 167?172,
Genoa.
Macklovitch, E., N. T. Nguyen, and R. Silva.
2005. User evaluation report. Technical
report, TransType2 (IST-2001-32091).
Marcu, D. and W. Wong. 2002. A
phrase-based, joint probability model
for statistical machine translation.
In Proceedings of the Conference on
Empirical Methods for Natural Language
Processing (EMNLP 02), pages 133?139,
Philadelphia, PA.
Ney, H., S. Nie?en, F. Och, H. Sawaf,
C. Tillmann, and S. Vogel. 2000.
Algorithms for statistical translation of
spoken language. IEEE Transactions on
Speech and Audio Processing, 8(1):24?36.
Och, F. J. 1999. An efficient method for
determining bilingual word classes. In
Proceedings of the 9th Conference of the
European Chapter of the Association for
26
Barrachina et al Statistical Computer-Assisted Translation
Computational Linguistics (EACL 99),
pages 71?76, Bergen.
Och, F. J. and H. Ney. 2003. A systematic
comparison of various statistical
alignment models. Computational
Linguistics, 29(1):19?51.
Och, F. J. and H. Ney. 2004. The alignment
template approach to statistical machine
translation. Computational Linguistics,
30(4):417?450.
Och, F. J., R. Zens, and H. Ney. 2003.
Efficient search for interactive statistical
machine translation. In Proceedings of
the 10th Conference of the European Chapter
of the Association for Computational
Linguistics (EACL 03), pages 387?393,
Budapest.
Papineni, K., S. Roukos, T. Ward, and
W. Zhu. 2001. BLEU: a method for
automatic evaluation of machine
translation. Technical Report RC22176,
Thomas J. Watson Research Center.
Pico?, D. and F. Casacuberta. 2001. Some
statistical-estimation methods for
stochastic finite-state transducers. Machine
Learning, 44:121?142.
Press, W. H., S. A. Teukolsky, W. T.
Vetterling, and B. P. Flannery. 2002.
Numerical Recipes in C++: The Art of
Scientific Computing. Cambridge University
Press, Cambridge, UK.
SchlumbergerSema S.A., Intituto Tecnolo?gico
de Informa?tica, Rheinisch Westfa?lische
Technische Hochschule Aachen Lehrstul
fu?r Informatik VI, Recherche Applique?e
en Linguistique Informatique Laboratory
University of Montreal, Celer Soluciones,
Socie?te? Gamma, and Xerox
Research Centre Europe. 2001. TT2.
TransType2?computer-assisted
translation. Project technical annex.
Information Society Technologies (IST)
Programme, IST-2001-32091.
Sen, Z., Ch. Zhaoxiong, and H. Heyan. 1997.
Interactive approach in machine translation
systems. In Proceedings of IEEE International
Conference on Intelligent Processing Systems
(ICIPS 97), pages 1814?1819, Beijing.
Slocum, J. 1985. A survey of machine
translation: Its history, current status and
future prospects. Computational Linguistics,
11(1):1?17.
Somers, H., 2003. Computers and Translation: a
Translator?s Guide, chapter 3: Translation
memory systems. John Benjamins,
Amsterdam, pages 31?48.
Toma?s, J. and F. Casacuberta. 2001.
Monotone statistical translation using
word groups. In Proceedings of the Machine
Translation Summit VIII (MT SUMMIT
VIII), pages 357?361, Santiago de
Compostela.
Toma?s, J. and F. Casacuberta. 2003.
Combining phrase-based and
template-based alignment models in
statistical translation. In Pattern Recognition
and Image Analysis, Proceedings of the First
Iberian Conference (IbPRIA 03), Puerto
de Andratx, Mallorca, Spain, June 4-6,
volume 2652 of Lecture Notes in Computer
Science. Springer-Verlag, Heidelberg,
pages 1020?1031.
Toma?s, J. and F. Casacuberta. 2004. Statistical
machine translation decoding using
target word reordering. In Advances in
Statistical, Structural and Syntactical Pattern
Recognition, Proceedings of the Joint IAPR
International Workshops on Syntactical
and Structural Pattern Recognition
(SSPR 04) and Statistical Pattern Recognition
(SPR 04), Lisbon, Portugal, August 18?20,
volume 3138 of Lecture Notes in Computer
Science. Springer-Verlag, Heidelberg,
pages 734?743.
Toma?s, J. and F. Casacuberta. 2006. Statistical
phrase-based models for interactive
computer-assisted translation. In
Proceedings of the 44th Annual Meeting
of the Association for Computational
Linguistics and 21th International
Conference on Computational Linguistics
(COLING/ACL 06), pages 835?841, Sydney.
Toma?s, J. and F. Casacuberta. 2007. A
pattern recognition approach to
machine translation: Monotone and
non-monotone phrase-based statistical
models. Technical Report DSIC-II/18/07,
Departamento de Sistemas Informa?ticos y
Computacio?n, Universidad Polite?cnica
de Valencia.
Tomita, M. 1985. Feasibility study of
personal/interactive machine translation
systems. In Proceedings of the First
International Conference on Theoretical
and Methodological Issues in Machine
Translation (TMI 85), pages 289?297,
New York, NY.
Ueffing, N., F. J. Och, and H. Ney. 2002.
Generation of word graphs in statistical
machine translation. In Proceedings of
the Conference on Empirical Methods for
Natural Language Processing (EMNLP 02),
pages 156?163, Philadelphia, PA.
Vidal, E. 1997. Finite-state speech-to-speech
translation. In Proceedings of the
International Conference on Acoustic,
Speech and Signal Processing (ICASSP 97),
volume 1, pages 111?114, Munich.
27
Computational Linguistics Volume 35, Number 1
Vidal, E. and F. Casacuberta. 2004. Learning
finite-state models for machine translation.
In Grammatical Inference: Algorithms and
Applications, Proceedings of the 7th
International Coloquium on Grammatical
Inference (ICGI 04), Athens, Greece,
October 11?13, volume 3264 of Lecture
Notes in Artificial Intelligence. Springer,
Heidelberg, pages 16?27.
Vidal, E., F. Casacuberta, L. Rodr??guez,
J. Civera, and C. Mart??nez. 2006.
Computer-assisted translation using
speech recognition. IEEE Transactions
on Speech and Audio Processing,
14(3):941?951.
Vidal, E., F. Thollard, F. Casacuberta
C. de la Higuera, and R. Carrasco. 2005.
Probabilistic finite-state machines?
part II. IEEE Transactions on Pattern
Analysis and Machine Intelligence,
27(7):1025?1039.
Whitelock, P. J., M. McGee Wood, B. J.
Chandler, N. Holden, and H. J. Horsfall.
1986. Strategies for interactive machine
translation: The experience and
implications of the UMIST Japanese
project. In Proceedings of the 11th
International Conference on Computational
Linguistics (COLING 86), pages 329?334,
Bonn.
Yamron, J., J. Baker, P. Bamberg,
H. Chevalier, T. Dietzel, J. Elder,
F. Kampmann, M. Mandel, L. Manganaro,
T. Margolis, and E. Steele. 1993.
LINGSTAT: an interactive, machine-aided
translation system. In Proceedings of the
Workshop on Human Language Technology,
pages 191?195, Princeton, NJ.
Zajac, R. 1988. Interactive translation: A new
approach. In Proceedings of the 12th
International Conference on Computational
Linguistics (COLING 88), pages 785?790,
Budapest.
Zens, R. and H. Ney. 2004. Improvements
in phrase-based statistical machine
translation. In Proceedings of the Human
Language Technology Conference / North
American Chapter of the Association for
Computational Linguistics Annual Meeting
(HLT-NAACL 04), pages 257?264,
Boston, MA.
Zens, R., F. J. Och, and H. Ney. 2002.
Phrase-based statistical machine
translation. In Advances in Artificial
Intelligence. 25th Annual German Conference
on Artificial Intelligence (KI 02), Aachen,
Germany, September 16?22, Proceedings,
volume 2479 of Lecture Notes on Artificial
Intelligence. Springer Verlag, Heidelberg,
pages 18?32.
Zhang, Y. and S. Vogel. 2004. Measuring
confidence intervals for the machine
translation evaluation metrics. In
Proceedings of the Tenth International
Conference on Theoretical and
Methodological Issues in Machine
Translation (TMI 04), pages 294?301,
Baltimore, MD.
28
From Machine Translation to Computer Assisted Translation using
Finite-State Models
Jorge Civera, Elsa Cubel, Antonio L. Lagarda, David Pico?,
Jorge Gonza?lez, Enrique Vidal, Francisco Casacuberta
Instituto Tecnolo?gico de Informa?tica
Dpto. de Sistemas Informa?ticos y Computacio?n, Universidad Polite?cnica de Valencia
E-46071 Valencia, Spain
jorcisai@iti.upv.es
Juan M. Vilar, Sergio Barrachina
Dpto. de Lenguajes y Sistemas Informa?ticos, Universidad Jaime I,
E-12071 Castello?n de la Plana, Spain
jvilar@lsi.uji.es
Abstract
State-of-the-art machine translation techniques are
still far from producing high quality translations.
This drawback leads us to introduce an alterna-
tive approach to the translation problem that brings
human expertise into the machine translation sce-
nario. In this framework, namely Computer As-
sisted Translation (CAT), human translators inter-
act with a translation system, as an assistance tool,
that dinamically offers, a list of translations that best
completes the part of the sentence already trans-
lated. In this paper, finite state transducers are
presented as a candidate technology in the CAT
paradigm. The appropriateness of this technique
is evaluated on a printer manual corpus and re-
sults from preliminary experiments confirm that hu-
man translators would reduce to less than 25% the
amount of work to be done for the same task.
1 Introduction
State-of-the-art machine translation techniques are
still far from producing high quality translations.
This drawback leads us to introduce an alternative
approach to the translation problem that brings
human expertise into the machine translation sce-
nario. (Langlais et al, 2000) proposed this idea that
can be illustrated as follows. Initially, the human
translator is provided with a possible translation
for the sentence to be translated. Unfortunately in
most of the cases, this translation is not perfect, so
the translator amends it and asks for a translation
of the part of the sentence still to be translated
(completion). This latter interaction is repeated as
many times as needed until the final translation is
achieved.
The scenario described in the previous para-
graph, can be seen as an iterative refinement of
the translations offered by the translation system,
that without possessing the desired quality, help the
translator to increase his/her productivity. Nowa-
days, this lack of translation excellence is a common
characteristic in all machine translation systems.
Therefore, the human-machine synergy represented
by the CAT paradigm seems to be more promising
than fully-automatic translation in the near future.
The CAT paradigm has two important as-
pects: the models need to provide adequate com-
pletions and they have to do so efficiently to per-
form under usability constrains. To fulfill these two
requirements, Stochastic Finite State Transducers
(SFST) have been selected since they have proved
in the past to be able to provide adequate transla-
tions (Vidal, 1997; Knight and Al-Onaizan, 1998;
Amengual et al, 2000; Casacuberta et al, 2001;
Bangalore and Ricardi, 2001). In addition, efficient
parsing algorithms can be easily adapted in order to
provide completions.
The rest of the paper is structured as follows.
The following section introduces the general setting
for machine translation and finite state models. In
section 3, the search procedure for an interactive
translation is presented. Experimental results are
presented in section 4. Finally, some conclusions
and future work are explained in section 5.
2 Machine translation with finite-state
transducers
Given a source sentence   , the goal of MT is to find
a target sentence

t that maximizes:
t   argmax
t

t  s   argmax
t

t 	 s  (1)
The joint distribution  t 	 s  can be modeled
by a Stochastic Finite State Transducer 
 (Pico? and
Casacuberta, 2001):

t   argmax
t

t 	 s  argmax
t

t 	 s  (2)
A Stochastic Finite-State Transducer (SFST)
is a finite-state network whose transitions are la-
beled by three items:
1. a source symbol (a word from the source lan-
guage vocabulary);
2. a target string (a sequence of words from the
target language vocabulary) and
3. a transition probability.
They have been successfully applied into
many translation tasks (Vidal, 1997; Amengual et
al., 2000; Casacuberta et al, 2001). Furthermore,
there exist efficient search algorithms like Viterbi
(Viterbi, 1967) for the best path and the Recur-
sive Enumeration Algorithm (REA) (Jime?nez and
Marzal, 1999) for the  -best paths.
One possible way of inferring SFSTs is the
Grammatical Inference and Alignments for Trans-
ducer Inference (GIATI) technique (the previous
name of this technique was MGTI - Morphic-
Generator Transducer Inference) (Casacuberta et
al., 2004). Given a finite sample of string pairs, it
works in three steps:
1. Building training strings. Each training pair
is transformed into a single string from an ex-
tended alphabet to obtain a new sample of
strings. The ?extended alphabet? contains
words or substrings from source and target sen-
tences coming from training pairs.
2. Inferring a (stochastic) regular grammar.
Typically, smoothed  -gram is inferred from
the sample of strings obtained in the previous
step.
3. Transforming the inferred regular grammar
into a transducer. The symbols associated
to the grammar rules are transformed into
source/target symbols by applying an ade-
quate transformation, thereby transforming the
grammar inferred in the previous step into a
transducer.
The transformation of a parallel corpus into
a corpus of single sentences is performed with the
help of statistical alignments: each word is joined
with its translation in the output sentence, creating
an ?extended word?. This joining is done taking
care not to invert the order of the output words. The
third step is trivial with this arrangement. In our
experiments, the alignments are obtained using the
GIZA software (Och and Ney, 2000; Al-Onaizan et
al., 1999), which implements IBM statistical mod-
els (Brown et al, 1993).
3 Interactive search
The concept of interactive search is closely related
to the CAT paradigm. This paradigm introduces the
new factor t into the general machine translation
equation (Equation 1). t represents a prefix in the
target language obtained as a result of the interac-
tion between the human translator and the machine
translation system.
As a side effect of this reformulation, the op-
timization defined in Equation 3 is performed over
the set of target suffixes rather than the set of com-
plete target sentences. Thence, the goal of CAT in
the finite-state transducer framework is to find a pre-
diction of the best suffix

t  , given a source sentence
s, a prefix of the target sentence t  and a SFST 
 :

t  argmax
t 
Proceedings of the Second Workshop on Statistical Machine Translation, pages 177?180,
Prague, June 2007. c?2007 Association for Computational Linguistics
Domain Adaptation in Statistical Machine Translation with Mixture
Modelling ?
Jorge Civera and Alfons Juan
Universidad Polite?cnica de Valencia
Camino de Vera s/n
46022 Valencia, Spain
{jorcisai,ajuan}@iti.upv.es
Abstract
Mixture modelling is a standard technique
for density estimation, but its use in sta-
tistical machine translation (SMT) has just
started to be explored. One of the main
advantages of this technique is its capabil-
ity to learn specific probability distributions
that better fit subsets of the training dataset.
This feature is even more important in SMT
given the difficulties to translate polysemic
terms whose semantic depends on the con-
text in which that term appears. In this pa-
per, we describe a mixture extension of the
HMM alignment model and the derivation of
Viterbi alignments to feed a state-of-the-art
phrase-based system. Experiments carried
out on the Europarl and News Commentary
corpora show the potential interest and limi-
tations of mixture modelling.
1 Introduction
Mixture modelling is a popular approach for density
estimation in many scientific areas (G. J. McLach-
lan and D. Peel, 2000). One of the most interest-
ing properties of mixture modelling is its capability
to model multimodal datasets by defining soft parti-
tions on these datasets, and learning specific proba-
bility distributions for each partition, that better ex-
plains the general data generation process.
?Work supported by the EC (FEDER) and the Spanish
MEC under grant TIN2006-15694-CO2-01, the Conseller??a
d?Empresa, Universitat i Cie`ncia - Generalitat Valenciana un-
der contract GV06/252, the Universidad Polite?cnica de Valen-
cia with ILETA project and Ministerio de Educacio?n y Ciencia.
In Machine Translation (MT), it is common to
encounter large parallel corpora devoted to hetero-
geneous topics. These topics usually define sets
of topic-specific lexicons that need to be translated
taking into the semantic context in which they are
found. This semantic dependency problem could
be overcome by learning topic-dependent translation
models that capture together the semantic context
and the translation process.
However, there have not been until very recently
that the application of mixture modelling in SMT
has received increasing attention. In (Zhao and
Xing, 2006), three fairly sophisticated bayesian top-
ical translation models, taking IBM Model 1 as a
baseline model, were presented under the bilingual
topic admixture model formalism. These models
capture latent topics at the document level in order to
reduce semantic ambiguity and improve translation
coherence. The models proposed provide in some
cases better word alignment and translation quality
than HMM and IBM models on an English-Chinese
task. In (Civera and Juan, 2006), a mixture exten-
sion of IBM model 2 along with a specific dynamic-
programming decoding algorithm were proposed.
This IBM-2 mixture model offers a significant gain
in translation quality over the conventional IBM
model 2 on a semi-synthetic task.
In this work, we present a mixture extension of the
well-known HMM alignment model first proposed
in (Vogel and others, 1996) and refined in (Och and
Ney, 2003). This model possesses appealing proper-
ties among which are worth mentioning, the simplic-
ity of the first-order word alignment distribution that
can be made independent of absolute positions while
177
taking advantage of the localization phenomenon
of word alignment in European languages, and the
efficient and exact computation of the E-step and
Viterbi alignment by using a dynamic-programming
approach. These properties have made this model
suitable for extensions (Toutanova et al, 2002)
and integration in a phrase-based model (Deng and
Byrne, 2005) in the past.
2 HMM alignment model
Given a bilingual pair (x, y), where x and y are mu-
tual translation, we incorporate the hidden variable
a = a1a2 ? ? ? a|x| to reveal, for each source word po-
sition j, the target word position aj ? {0, 1, . . . , |y|}
to which it is connected. Thus,
p(x | y) =
?
a?A(x,y)
p(x, a | y) (1)
where A(x, y) denotes the set of all possible align-
ments between x and y. The alignment-completed
probability P (x, a | y) can be decomposed in terms
of source position-dependent probabilities as:
p(x, a | y)=
|x|?
j=1
p(aj | a
j?1
1 , x
j?1
1 , y) p(xj | a
j
1, x
j?1
1 , y)
(2)
The original formulation of the HMM alignment
model assumes that each source word is connected
to exactly one target word. This connection depends
on the target position to which was aligned the pre-
vious source word and the length of the target sen-
tence. Here, we drop both dependencies in order to
simplify to a jump width alignment probability dis-
tribution:
p(aj | a
j?1
1 , x
j?1
1 , y) ?
{
p(aj) j = 1
p(aj?aj?1) j > 1
(3)
p(xj | a
j
1, x
j?1
1 , y) ? p(xj | yaj ) (4)
Furthermore, the treatment of the NULL word is
the same as that presented in (Och and Ney, 2003).
Finally, the HMM alignment model is defined as:
p(x | y) =
?
a?A(x,y)
p(a1)
|x|?
j=2
p(aj?aj?1)
|x|?
j=1
p(xj |yaj )
(5)
3 Mixture of HMM alignment models
Let us suppose that p(x | y) has been generated using
a T-component mixture of HMM alignment models:
p(x | y) =
T?
t=1
p(t | y) p(x | y, t)
=
T?
t=1
p(t | y)
?
a?A(x,y)
p(x, a | y, t) (6)
In Eq. 6, we introduce mixture coefficients p(t | y)
to weight the contribution of each HMM alignment
model in the mixture. While the term p(x, a | y, t) is
decomposed as in the original HMM model.
The assumptions of the constituent HMM mod-
els are the same than those of the previous section,
but we obtain topic-dependent statistical dictionaries
and word alignments. Apropos of the mixture coef-
ficients, we simplify these terms dropping its depen-
dency on y, leaving as future work its inclusion in
the model. Formally, the assumptions are:
p(t | y) ? p(t) (7)
p(aj | a
j?1
1 , x
j?1
1 , y, t)?
{
p(aj | t) j=1
p(aj?aj?1 | t)j>1
(8)
p(xj | a
j
1, x
j?1
1 , y, t) ? p(xj | yaj , t) (9)
Replacing the assumptions in Eq. 6, we obtain the
(incomplete) HMM mixture model as follows:
p(x | y) =
T?
t=1
p(t)
?
a?A(x,y)
p(a1 | t)?
?
|x|?
j=2
p(aj?aj?1 | t)
|x|?
j=1
p(xj |yaj , t) (10)
and the set of unknown parameters comprises:
~? =
?
???
???
p(t) t = 1 . . . T
p(i | t) j = 1
p(i? i? | t) j > 1
p(u | v, t) ?u ? X and v ? Y
(11)
X and Y , being the source and target vocabular-
ies.
The estimation of the unknown parameters in
Eq. 10 is troublesome, since topic and alignment
178
data are missing. Here, we revert to the EM opti-
misation algoritm to compute these parameters.
In order to do that, we define the complete version
of Eq. 10 incorporating the indicator variables zt and
za, uncovering, the until now hidden variables. The
variable zt is a T -dimensional bit vector with 1 in
the position corresponding to the component gener-
ating (x, y) and zeros elsewhere, while the variable
za = za1 . . . za|x| where zaj is a |y|-dimensional bit
vector with 1 in the position corresponding to the tar-
get position to which position j is aligned and zeros
elsewhere. Then, the complete model is:
p(x, zt, za | y) ?
T?
t=1
p(t)zt
|y|?
i=1
p(i | t)za1izt?
?
|x|?
j=1
|y|?
i=1
p(xj | yi, t)
zajizt
|y|?
i?=1
p(i? i? | t)
zaj?1i? zajizt
(12)
Given the complete model, the EM algorithm
works in two basic steps in each iteration: the
E(xpectation) step and the M(aximisation) step. At
iteration k, the E step computes the expected value
of the hidden variables given the observed data
(x, y) and the estimate of the parameters ~?(k).
The E step reduces to the computation of the ex-
pected value of zt, zajizt and zaj?1i?zajizt for each
sample n:
zt ? p(t)
|y|?
i=1
?|x|it (13)
zajizt = zajit zt (14)
zaj?1i?zajizt = (zaj?1i?zaji)t zt (15)
where
zajit?
|y|?
k=1
?jkt?jkt
(zaj?1i?zaji)t??j?1it p(i? i
? | t) p(xj |yi, t)?jit
and the recursive functions ? and ? defined as:
?jit =
?
?
?
p(i | t) p(xj | yi, t) j = 1
|y|?
k=1
?j?1kt p(i? k | t) p(xj | yi, t) j > 1
?jit =
?
?
?
1 j = |x|
|y|?
k=1
p(k ? i | t) p(xj+1 | yk, t)?j+1kt j < |x|
The M step finds a new estimate of ~?, by max-
imising Eq. 12, using the expected value of the miss-
ing data from Eqs. 13,14 and 15 over all sample n:
p(t) =
1
N
N?
n=1
znt
p(i | t) ?
N?
n=1
zna1it
p(i? i? | t) ?
N?
n=1
|xn|?
j=1
(znaj?1i?znaji)t
p(u | v, t) ?
N?
n=1
|xn|?
j=1
|yn|?
i=1
znajit ?(xnj , u)?(yni, v)
3.1 Word alignment extraction
The HMM mixture model described in the previous
section was used to generate Viterbi alignments on
the training dataset. These optimal alignments are
the basis for phrase-based systems.
In the original HMM model, the Viterbi align-
ment can be efficiently computed by a dynamic-
programming algorithm with a complexity O(|x| ?
|y|2). In the mixture HMM model, we approximate
the Viterbi alignment by maximising over the com-
ponents of the mixture:
a? ? argmax
a
max
t
p(t) p(x, a | y, t)
So we have that the complexity of the compu-
tation of the Viterbi alignment in a T-component
HMM mixture model is O(T ? |x| ? |y|2).
4 Experimental results
The data that was employed in the experiments to
train the HMM mixture model corresponds to the
concatenation of the Spanish-English partitions of
the Europarl and the News Commentary corpora.
The idea behind this decision was to let the mixture
model distinguish which bilingual pairs should con-
tribute to learn a given HMM component in the mix-
ture. Both corpora were preprocessed as suggested
for the baseline system by tokenizing, filtering sen-
tences longer than 40 words and lowercasing.
Regarding the components of the translation sys-
tem, 5-gram language models were trained on the
monolingual version of the corpora for English(En)
179
and Spanish(Es), while phrase-based models with
lexicalized reordering model were trained using the
Moses toolkit (P. Koehn and others, 2007), but re-
placing the Viterbi alignments, usually provided by
GIZA++ (Och and Ney, 2003), by those of the HMM
mixture model with training scheme mix 15H5.
This configuration was used to translate both test de-
velopment sets, Europarl and News Commentary.
Concerning the weights of the different models,
we tuned those weights by minimum error rate train-
ing and we employed the same weighting scheme
for all the experiments in the same language pair.
Therefore, the same weighting scheme was used
over different number of components.
BLEU scores are reported in Tables 1 and 2 as a
function of the number of components in the HMM
mixture model on the preprocessed development test
sets of the Europarl and News Commentary corpora.
Table 1: BLEU scores on the Europarl development
test data
T 1 2 3 4
En-Es 31.27 31.08 31.12 31.11
Es-En 31.74 31.70 31.80 31.71
Table 2: BLEU scores on the News-Commentary
development test data
T 1 2 3 4
En-Es 29.62 30.01 30.17 29.95
Es-En 29.15 29.22 29.11 29.02
As observed in Table 1, if we compare the BLEU
scores of the conventional single-component HMM
model to those of the HMM mixture model, it seems
that there is little or no gain from incorporating
more topics into the mixture for the Europarl cor-
pus. However, in Table 2, the BLEU scores on
the English-Spanish pair significantly increase as the
number of components is incremented. We believe
that this is due to the fact that the News Commen-
tary corpus seems to have greater influence on the
mixture model than on the single-component model,
specializing Viterbi alignments to favour this corpus.
5 Conclusions and future work
In this work, a novel mixture version of the HMM
alignment model was introduced. This model was
employed to generate topic-dependent Viterbi align-
ments that were input into a state-of-the-art phrase-
based system. The preliminary results reported on
the English-Spanish partitions of the Europarl and
News-Commentary corpora may raise some doubts
about the applicability of mixture modelling to SMT,
nonetheless in the advent of larger open-domain cor-
pora, the idea behind topic-specific translation mod-
els seem to be more than appropriate, necessary. On
the other hand, we are fully aware that indirectly
assessing the quality of a model through a phrase-
based system is a difficult task because of the differ-
ent factors involved (Ayan and Dorr, 2006).
Finally, the main problem in mixture modelling is
the linear growth of the set of parameters as the num-
ber of components increases. In the HMM, and also
in IBM models, this problem is aggravated because
of the use of statistical dictionary entailing a large
number of parameters. A possible solution is the im-
plementation of interpolation techniques to smooth
sharp distributions estimated on few events (Och and
Ney, 2003; Zhao and Xing, 2006).
References
N. F. Ayan and B. J. Dorr. 2006. Going beyond AER: an
extensive analysis of word alignments and their impact
on MT. In Proc. of ACL?06, pages 9?16.
J. Civera and A. Juan. 2006. Mixtures of IBM Model 2.
In Proc. of EAMT?06, pages 159?167.
Y. Deng and W. Byrne. 2005. HMM word and phrase
alignment for statistical machine translation. In Proc.
of HLT-EMNLP?05, pages 169?176.
G. J. McLachlan and D. Peel. 2000. Finite Mixture Mod-
els. Wiley.
F. J. Och and H. Ney. 2003. A systematic comparison of
various statistical alignment models. Computational
Linguistics, 29(1):19?51.
P. Koehn and others. 2007. Moses: Open Source
Toolkit for Statistical Machine Translation. In Proc.
of ACL?07 Demo Session, page To be published.
K. Toutanova, H. T. Ilhan, and C. D. Manning. 2002.
Extensions to HMM-based statistical word alignment
models. In Proc. of EMNLP ?02, pages 87?94.
S. Vogel et al 1996. HMM-based word alignment in
statistical translation. In Proc. of CL, pages 836?841.
B. Zhao and E. P. Xing. 2006. BiTAM: Bilingual Topic
AdMixture Models for Word Alignment. In Proc. of
COLING/ACL?06.
180
