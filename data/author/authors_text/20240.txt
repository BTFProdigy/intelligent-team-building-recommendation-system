Second Joint Conference on Lexical and Computational Semantics (*SEM), Volume 2: Seventh International Workshop on Semantic
Evaluation (SemEval 2013), pages 535?538, Atlanta, Georgia, June 14-15, 2013. c?2013 Association for Computational Linguistics
UoM: Using Explicit Semantic Analysis for Classifying Sentiments
Sapna Negi
University of Malta
Msida, MSD2080, MALTA
sapna.negi13@gmail.com
Mike Rosner
University of Malta
Msida, MSD2080, MALTA
mike.rosner@um.edu.mt
Abstract
In this paper, we describe our system sub-
mitted for the Sentiment Analysis task at Se-
mEval 2013 (Task 2). We implemented a com-
bination of Explicit Semantic Analysis (ESA)
with Naive Bayes classifier. ESA represents
text as a high dimensional vector of explicitly
defined topics, following the distributional se-
mantic model. This approach is novel in the
sense that ESA has not been used for Senti-
ment Analysis in the literature, to the best of
our knowledge.
1 Introduction
Semantic relatedness measure gives the comparison
of different terms or texts on the basis of their
meaning or the content. For instance, it can be
said that the word ?computer? is semantically
more related to ?laptop? than ?flute?. Sentiment
analysis refers to the task of determining the overall
contextual polarity of the written text. In this paper,
we propose the use of semantic relatedness models,
specifically Explicit Semantic Analysis (ESA),
to identify textual polarity. There are different
approaches to model semantic relatedness like
WordNet based models (Banerjee and Banerjee,
2002), distributional semantic models (DSMs) etc.
DSMs follow the distributional hypothesis, which
says that words occurring in the same contexts tend
to have similar meanings (Harris, 1954). There-
fore, considering sentiment classification problem,
distributional hypothesis suggests that the words or
phrases referring to positive polarity would tend to
co-occur, and similar assumptions can be made for
the negative terms.
DSMs generally utilize large textual corpora to
extract the distributional information relying on
the co-occurrence information and distribution of
the terms. These models represent the text in the
form of high-dimensional vectors highlighting the
co-occurrence information. Semantic relatedness
between two given texts is calculated by using
these vectors, thus, following that the the semantic
meaning of a text can be inferred from its usage
in different contexts. There are several different
computational models following distributional
semantics hypothesis. Latent Semantic Analysis
(LSA), Latent Dirichlet Allocation (LDA) (Blei et.
al., 2003), Explicit Semantic Analysis (ESA) are
some examples of such models. However, in this
work, we investigated the use of ESA for the given
task of sentiment analysis (SA).
There are two sub-tasks defined in Task 2 at
SemEval 2013 (SemEval, 2013). We participated in
Message Polarity Classification sub-task, where we
are required to automatically classify the sentiment
of a given message into positive, negative, or
neutral. The task deals with the short texts coming
from Twitter and SMS (Short Message Service). We
are provided with 8,000 - 12,000 twitter messages
annotated with their sentiment label for the purpose
of training the models. In this work, we present our
approach for sentiment classification which uses a
combination of ESA and Naive Bayes classifier. The
rest of the paper is structured as follows : Section 2
discusses some related work in this context. Section
535
3 briefly explains ESA. Section 4 describes our
approaches while Section 5 explains the submitted
runs for our system to the task. Section 6 reports the
results, and we conclude in section 7.
2 Related Work
The research in SA initiated with the classical ma-
chine learning algorithms like Naive Bayes, Maxi-
mum Entropy etc. using intuitive features like un-
igrams, bigrams, parts of speech information, posi-
tion of words, adjectives etc. (Pang et. al., 2002).
However, such approaches are heavily dependent
upon the given training data, and therefore can be
very limited for SA due to out of vocabulary words
and phrases, and different meanings of words in
different contexts (Pang and Lee, 2008). Due to
these problems, several methods have been investi-
gated to use some seed words for extracting more
positive and negative terms with the help of lexi-
cal resources like WordNet etc., for instance, Senti-
WordNet, which defines the polarity of the word
along with the intensity. In this paper, we model the
sentiment classification using DSMs based on ex-
plicit topic models (Cimiano et. al., 2009), which
incorporate correlation information from a corpus
like Wikipedia, to generalize from a few known pos-
itive or negative terms. There have been some other
attempts to utilize topic models in this regards, but
they mainly focussed on latent topic models (Lin and
He, 2009) (Maas et. al., 2011). Joint sentiment topic
model introduced LDA based unsupervised topic
models in sentiment analysis by pointing out that
sentiments are often topic dependent because same
word/phrase could represent different sentiments for
different topics (Lin and He, 2009). The recent work
by Maas et. al. (Maas et. al., 2011) on using latent
concept models presented a mixture model of un-
supervised and supervised techniques to learn word
vectors capturing semantic term-document informa-
tion along with the sentiment content.
3 Explicit Semantic Analysis
Explicit Semantic Analysis (ESA) is a technique
for computing semantic relatedness between texts
using distributional information (Gabrilovich and
Markovitch, 2007). ESA represents text as vec-
tors of concepts explicitly defined by humans, like
Wikipedia articles. This provides an intuitive and
easily understandable topic space for humans, in
contrast to the latent topic space in latent mod-
els.Input texts are represented as multidimensional
vectors of weighted concepts. The procedure of
computing semantic relatedness involves comparing
the vectors corresponding to the given texts e.g. us-
ing cosine product. The magnitude of each dimen-
sion in the vector is the associativity weight of the
text to that explicit concept/dimension. To quantify
this associativity, the textual content related to the
explicit concept/dimension is utilized. This weight
can be calculated by considering different methods,
for instance, tf-idf score. ESA has been proved to
be a generalized vector space model (Gottron et. al.,
2011).
4 Methodology
We implemented a combination of traditional ma-
chine learning based approach for SA using Naive
Bayes algorithm, and ESA based sentiment identifi-
cation. To perform sentiment classification solely
using ESA, we asses the similarity of a new text
against the text whose sentiment is already known,
using ESA. More similar is a text to a particular sen-
timent annotated text, better are its chances to be-
long to the same sentiment class. On the other hand,
we followed a standard classification approach by
learning Naive Bayes over the given training data.
Finally, we consult both ESA and Naive Bayes for
classifying the text. The overall probability of a text
belonging to a particular sentiment class was deter-
mined by weighted sum of ESA similarity score,
and the scores given by Naive Bayes classifier. The
sentiment class with the highest total score was ac-
cepted as the sentiment of the input text. The indi-
vidual weights of ESA and Naive Bayes were deter-
mined by linear regression for our experiments.
5 System Description
We created three bags of words (BOW) correspond-
ing to the different sentiment classes (positive,
negative, and neutral) annotated in the training
data. These BOWs were used as the definition of
the particular sentiment class for making the ESA
comparisons, and for learning Naive Bayes. We
used unigrams and bigrams as features for the Naive
536
Task Approach F score Highest F score Rank
Twitter, with constrained data ESA with Naive Bayes .5182 .6902 24/35
SMS, with constrained data ESA with Naive Bayes .422 .6846 24/28
Twitter, with unconstrained data ESA with Naive Bayes .4507 .6486 16/16
SMS, with unconstrained data ESA with Naive Bayes .3522 .4947 15/15
Twitter, with constrained data ESA .35 .6902 NA
Table 1: Results
Bayes algorithm. The ESA implementation was
replicated from the version available on Github1,
replacing the Wikipedia dump by the version
released in February 2013.
We submitted two runs each for Twitter and
SMS test data. The first run (constrained) used
only the provided training data for learning while
the second run (unconstrained) used a combination
of external training data coming from the popular
movie review dataset (Pang et. al., 2002), and the
data provided with the task.
6 Results and discussion
The first four entries provided in the table 1 corre-
spond to the four runs submitted in SemEval-2013
Task 2. The fifth entry corresponds to the results
of a separate experiment performed by us, to esti-
mate the influence of ESA on SA. According to the
F-scores, ESA is unable to identify the sentiment in
the texts following the mentioned approach. The re-
sults suggest that combining Naive Bayes to the sys-
tem improved the overall scores. However, even the
combined system could not perform well. Also, the
mixing of external data lowered the scores indicat-
ing incompatibility of the external training data with
the provided data.
7 Conclusion
We presented an approach of using ESA for senti-
ment classification. The submitted system follow
a combination of standard Naive Bayes model and
ESA based classification. The results of the task
suggests that the approach we used for ESA based
classification is unable to identify the sentiment ac-
curately. As a future step, we plan to investigate
1https://github.com/kasooja/clesa
more on the usability of ESA for sentiment classifi-
cation, for instance, by using suitable features in the
concept definitions, and weighing them according to
the different sentiment classes.
References
Maas, A.L., Daly, R.E., Pham, P.T., Huang, D., Ng, A.Y.,
Potts, C.: Learning word vectors for sentiment anal-
ysis. In: Proceedings of the 49th Annual Meeting of
the Association for Computational Linguistics: Hu-
man Language Technologies - Volume 1. pp. 142?150.
HLT ?11, Association for Computational Linguistics,
Stroudsburg, PA, USA (2011), http://dl.acm.
org/citation.cfm?id=2002472.2002491
Lin, C., He, Y.: Joint sentiment/topic model for sen-
timent analysis. In: Proceedings of the 18th ACM
conference on Information and knowledge manage-
ment. pp. 375?384. CIKM ?09, ACM, New York, NY,
USA (2009), http://doi.acm.org/10.1145/
1645953.1646003
Cimiano, P., Schultz, A., Sizov, S., Sorg, P., Staab,
S.: Explicit versus latent concept models for cross-
language information retrieval. In: Proceedings of
the 21st international jont conference on Artifi-
cal intelligence. pp. 1513?1518. IJCAI?09, Mor-
gan Kaufmann Publishers Inc., San Francisco, CA,
USA (2009), http://dl.acm.org/citation.
cfm?id=1661445.1661688
Pang, B., Lee, L.: Opinion mining and sentiment analy-
sis. Found. Trends Inf. Retr. 2(1-2), 1?135 (Jan 2008),
http://dx.doi.org/10.1561/1500000011
Pang, B., Lee, L., Vaithyanathan, S.: Thumbs up?:
sentiment classification using machine learning tech-
niques. In: Proceedings of the ACL-02 conference
on Empirical methods in natural language process-
ing - Volume 10. pp. 79?86. EMNLP ?02, Associa-
tion for Computational Linguistics, Stroudsburg, PA,
USA (2002), http://dx.doi.org/10.3115/
1118693.1118704
Wilson, T., Kozareva, Z., Nakov, P., Rosenthal, S., Stoy-
anov, V., Ritter, A.: SemEval-2013 task 2: Sentiment
537
analysis in twitter. In: Proceedings of the International
Workshop on Semantic Evaluation. SemEval ?13 (June
2013)
Banerjee, S., Banerjee, S.: An adapted lesk algorithm for
word sense disambiguation using wordnet. In: In Pro-
ceedings of the Third International Conference on In-
telligent Text Processing and Computational Linguis-
tics. pp. 136?145 (2002)
David M. Blei, Andrew Y. Ng, and Michael I. Jordan. La-
tent dirichlet alocation. J. Mach. Learn. Res., 3:993?
1022, March 2003.
P. W. Foltz, W. Kintsch, and T. K. Landauer. The mea-
surement of textual coherence with latent semantic
analysis. Discourse Processes, 25:285?307, 1998.
Evgeniy Gabrilovich and Shaul Markovitch. Computing
semantic relatedness using wikipedia-based explicit
semantic analysis. In In Proceedings of the 20th In-
ternational Joint Conference on Artificial Intelligence,
pages 1606?1611, 2007.
Thomas Gottron, Maik Anderka, and Benno Stein. In-
sights into explicit semantic analysis. In Proceedings
of the 20th ACM international conference on Informa-
tion and knowledge management, CIKM ?11, pages
1961?1964, New York, NY, USA, 2011. ACM.
Zellig Harris. Distributional structure. Word,
10(23):146?162, 1954.
538
Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval 2014), pages 346?350,
Dublin, Ireland, August 23-24, 2014.
INSIGHT Galway: Syntactic and Lexical Features for Aspect Based
Sentiment Analysis
Sapna Negi
Insight Centre for Data Analytics
National University of Ireland
Galway
{sapna.negi, paul.buitelaar}@insight-centre.org
Paul Buitelaar
Insight Centre for Data Analytics
National University of Ireland
Galway
Abstract
This work analyses various syntactic and
lexical features for sentence level aspect
based sentiment analysis. The task fo-
cuses on detection of a writer?s sentiment
towards an aspect which is explicitly men-
tioned in a sentence. The target sentiment
polarities are positive, negative, conflict
and neutral. We use a supervised learning
approach, evaluate various features and
report accuracies which are much higher
than the provided baselines. Best features
include unigrams, clauses, dependency re-
lations and SentiWordNet polarity scores.
1 Introduction
The term aspect refers to the features or aspects
of a product, service or topic being discussed in a
text. The task of detection of sentiment towards
these aspects involves two major processing steps,
identifying the aspects in the text and identifying
the sentiments towards these aspects. Our work
describes a submitted system in the Aspect Based
Sentiment Analysis task of SemEval 2014 (Pontiki
et al., 2014). The task was further divided into 4
subtasks; our work corresponds to the subtask 2,
called Aspect Term Polarity Detection. We pre-
dict the polarity of sentiments expressed towards
the aspect terms which are already annotated in a
sentence. The target polarity types are positive,
negative, neutral and conflict.
We employ a statistical classifier and experiment
with various syntactic and lexical features. Se-
lected features for the submitted system include
words which hold certain dependency relations
with the aspect terms, clause in which the aspect
This work is licensed under a Creative Commons Attribu-
tion 4.0 International Licence. Page numbers and proceed-
ings footer are added by the organisers. Licence details:
http://creativecommons.org/licenses/by/4.0/
term appears, unigrams, and sum of lexicon based
sentiment polarities of the words in the clause.
2 Related Work
Pang et al. (2002) proved that unigrams and
bigrams, adjectives and part of speech tags are
important features for a machine learning based
sentiment classifier. Later, verbs and adjectives
were also identified as important features (Ches-
ley, 2006). Meena and Prabhakar (2007) per-
formed sentence level sentiment analysis using
rules based on clauses of a sentence. However,
in our case we cannot simply consider the adjec-
tives and verbs as features, since they might re-
late to different aspects. For example, in the sen-
tence ?The pizza is the best if you like thin crusted
pizza.?, sentiment towards ?pizza? is positive be-
cause of the adjective ?best?; however for the term
?thin crusted pizza?, ?like? would be the sentiment
verb. Therefore, only those adjectives and verbs
which relate to the target aspect, can be consid-
ered as the indicator of their polarity. Wilson et
al. (2009) showed that the words which share cer-
tain dependency relations with aspect terms, tend
to indicate the sentiments expressed towards those
terms.
Saif et al. (2012) showed the co-relation between
topic and sentiment polarity in tweets, and as-
serted that majority of people tend to express sim-
ilar sentiments towards same topics, especially in
the case of positive sentiments. The baseline ap-
proach for this task (Pontiki et al., 2014) also as-
sociates polarity with aspect terms. Therefore, we
also consider aspect term as a potential feature.
Our approach for this task is based on our obser-
vation of the data, with a provenance of the above
mentioned findings.
3 Approach
We employ a statistical classifier which trains on
the provided training datasets.
346
Datasets: Training datasets comprise of 3000 sen-
tences from laptop and restaurant reviews. Train-
ing sentences were tagged with the target aspect
term and the corresponding polarity, where more
than one aspect term can be tagged in a sentence.
3.1 Feature Sets
We divide the candidate features into four feature
sets.
1. Non-contextual: These features comprise of
training vocabulary. They do not target as-
pect based sentiments, but the overall senti-
ment of the sentence. There might be cases
where the aspect based sentiment is same as
the overall sentiment of the sentence. The
feature set comprises of three feature types,
unigrams, bigrams, adjectives and verbs of
the sentence.
2. Lexicon Non-Contextual: These features
are the Sentiwordnet v3.0 polarity scores
(Andrea Baccianella and Sebastiani, 2010)
of the words obtained from the best non-
contextual feature type. This feature set
would include two numerical features, posi-
tive polarity score and negative polarity score
of the best non-contextual feature types. Best
non-contextual feature type is decided by
comparing the classification accuracies of in-
dividual feature types, with cross validation
on the training data (Table 1). We evaluated
two algorithms to obtain the positive and neg-
ative polarities of words using SentiWordNet.
Later, we would provide details of these algo-
rithms.
3. Contextual: These features target aspect
based sentiments. Feature types comprise of
the clause in which an aspect term appears,
the adjective and verbs of this clause, aspect
term itself, and the words which hold certain
dependency relations with aspect term. We
only considered the Stanford parser depen-
dencies ?nn?, ?amod?, and ?nsubj?. The de-
pendency relations were chosen on the basis
of best classification accuracy in a cross vali-
dation trial, where the only features were the
words holding different dependency relations
with the aspect term. However, we only list
the accuracy from the best performing depen-
dency relations in the Tables 1, 3. By the fea-
ture type clause, we mean the unigrams con-
tained in a clause.
4. Lexicon Contextual: Similar to Lexicon
Non-Contextual features, these are the nu-
meric values obtained from SentiWordNet
polarity scores of the best performing contex-
tual feature type.
Polarity Calculation using SentiWordNet:
WordNet (Fellbaum, 1998) is a lexical database
for the English language. It assigns each listed
word the senses to which it may belong, where
each unique sense is represented by a synset id.
SentiWordNet is built on the top of WordNet,
where a pair of positive and negative polarity
score is assigned to each sense of a word. Senti-
Wordnet entry for each word comprises of all the
possible parts of speech in which the word could
appear, all the senses corresponding to each part
of speech, and a pair of polarity scores associated
with each sense
1
. The magnitude of positive and
negative polarity scores for each sense ranges
from 0 to 1.
In order to automatically obtain the polarity
scores corresponding to the desired sense of a
word, word sense disambiguation is required
to be performed. We did not perform sense
disambiguation, and picked the polarity scores
simply on the basis of word and part of speech
matching. This gives more than one candidate
senses, and thus more than one pair of polarity
scores for each word. We evaluated the following
2 methods to assign single values of sentiment
polarity scores to each word.
1. Default: The SentiWordnet website
2
pro-
vides a basic algorithm to assign sentiword-
net based polarities to a word. SentiWordnet
assigns a rank to each sense of a word, where
most commonly appearing sense is ranked
as 1. The default algorithm first calculates
an overall polarity (Positive score - Negative
score), for each sense of a word. It then cal-
culates a weighted sum of the overall polarity
scores of all the senses of a word, where the
weights are the ranks of senses. This sum is
considered as a single value polarity score of
a word, which can be a positive or negative
number.
1
http://sentiwordnet.isti.cnr.it/search.php?q=good
2
http://sentiwordnet.isti.cnr.it
347
2. Our algorithm: We do not obtain an overall
polarity score for each word, but we obtain a
pair of aggregated negative and positive score
for each word. Aggregate positive score is
obtained by taking the average of the positive
scores of each sense of the word, and same
goes for the aggregate negative score.
One reason for keeping the positive and negative
scores separate in our algorithm is that the task
also involves sentiment classes conflict and neu-
tral. Using only the overall polarity score results
in a loss of information in the case of very low neg-
ativity and positivity (neutral sentiments), or high
but comparable negativity and positivity (conflict-
ing sentiments). Also, our algorithm produced
better results when used with an SVM classifier,
with features as unigrams and their polarity scores.
3.2 Classifier Model
Our system is built on the state of the art LibSVM
classifier (EL-Manzalawy and Honavar, 2005).
We used Weka 3.7.10 toolkit (Hall et al., 2009) for
our experiments. The parameters
3
of the SVM
classifier are tuned to the values which give best
results with unigrams. Table 2 provides the tuned
parameters, rest of the parameters are set at default
values.
Pre-processing: We perform stemming using
Weka?s implementation of Snowball stemmer,
convert strings to lower case and filter out stop-
words. We use a customised list of stopwords,
based on our observations of the data. The cus-
tomised list is created using the stopword list of
Weka, with certain words removed. For example,
negators like ?not?, ?didn?t? etc. are important for
negative sentiments, for example ?I can barely use
any usb devices because they will not stay prop-
erly connected?. Words like ?but?, ?however? are
prominent in conflicting sentiments, for example
?No backlit keyboard, but not an issue for me?. Ta-
bles 1, 3 show the difference in results on using fil-
tered stopword list, compared against no stopword
removal, and original stopword list.
G R C E Z
0.10 1.0 2 1.0 normalise
Table 2: Parameter Settings for SVM Classifier.
3
http://weka.sourceforge.net/doc.stable/weka/classifiers/
functions/LibSVM.html
3.3 Feature Evaluation
We evaluated our features using 8-fold cross val-
idation on the training data. We evaluated each
feature by using it as the only feature for the clas-
sifier (Tables 1, 3). We performed experiments
on different combinations of features, but we only
present the best performing combination of fea-
tures in the last row of the tables. The baseline
approach (Pontiki et al., 2014) provided by the or-
ganisers, produced an accuracy of 47% for laptop
and 57% for restaurant, by splitting the training
data.
Metrics include, F score for each class, and overall
classification accuracy. F score ranges from 0-1,
and overall accuracy range from 0-100.
4 Submission and Results
Submission involved the prediction of sentiment
polarity towards the already tagged aspect terms
in two test datasets. There were 800 sentences
in each test dataset. The laptop test dataset was
obtained by dividing the original laptop data into
training and test. However, restaurant test dataset
and training dataset come from different sources.
We trained our classifier using the provided train-
ing dataset and the highlighted features (last row)
in the Tables 1, 3. In order to evaluate the submis-
sion, gold standard datasets corresponding to each
test dataset were later released, and submission?s
accuracy was compared against it.
Results: The system performance was evaluated
and ranked on the basis of overall accuracy of sen-
timent prediction. We were ranked as 20/32 for
the laptop domain, and 16/34 for the restaurant
domain. The task organisers reported that 8 polar-
ity predictions for laptop data, and 34 for restau-
rant data were missing from our submission. We
later debugged our system, and obtained the actual
accuracy which our system is capable of produc-
ing with the given test data. The results are sum-
marised in Table 4.
5 Observations and Analysis
We hypothesize that aspect terms should serve as
features when training data and test data come
from same source, which means that they relate
to the same brand, product, service etc. This is
because aspect terms change with data, for exam-
ple names of dishes would change with different
restaurants even if the domain is same. In our
case, the laptop test data was obtained from the
348
Feature Set Features Positive Negative Conflict Neutral Accuracy
non-contextual
unigrams,bigrams 0.827 0.590 0.210 0.422 70.699
unigrams 0.830 0.584 0.154 0.413 70.962
adjectives,verbs 0.704 0.412 0.000 0.257 63.465
adjectives 0.623 0.430 0.000 0.000 56.410
non-contextual + lexicon unigrams, unigram polarity scores 0.833 0.596 0.154 0.414 71.300
contextual
clause 0.823 0.571 0.117 0.0.456 71.170
adjective, verbs within clause 0.784 0.472 0.000 0.257 66. 465
aspects 0.734 0.154 0.000 0.264 59.442
dependencies 0.751 0.235 0.000 0.061 61.257
contextual + lexicon clause, clause polarity score 0.735 0.000 0.000 0.000 58.101
combined
unigrams, clause, dependencies,
clause polarity score, filtered
stopword list
0.837 0.610 0.162 0.418 71.960
used original stopword 0.825 0.587 0.078 0.371 70.830
no stopwords used 0.830 0.610 0.151 0.435 72.000
Table 1: Feature Analysis for Restaurant Reviews.
Feature Set Features Positive Negative Conflict Neutral Accuracy
Non-Contextual
unigrams,bigrams 0.827 0.590 0.210 0.422 70.699
unigrams 0.781 0.747 0.110 0.484 71.202
adjectives,verbs 0.569 0.620 0.000 0.164 54.516
adjectives 0.521 0.613 0.000 0.090 51.230
non-contextual + lexicon unigrams, unigram polarity scores 0.783 0.754 0.179 0.529 71.850
Contextual
Clause 0.823 0.571 0.117 0.0.456 71.170
adjective, verbs within clause 0.569 0.620 0.000 0.164 54.510
aspects 0.602 0.259 0.000 0.050 45.240
dependencies 0.590 0.078 0.000 0.000 42.480
contextual + lexicon clause, clause polarity score 0.750 0.705 0.000 0.407 67.230
combined
unigrams, clause, dependencies,
clause polarity score, filtered
stopword list
0.786 0.752 0.100 0.498 71.600
weka stopword list 0.780 0.744 0.113 0.442 70.590
no stopwords 0.782 0.758 0.154 0.530 72.170
Table 3: Feature Analysis for Laptop Reviews.
same dataset which was used to prepare training
data, while restaurant was from a different source.
We observed that, although aspect terms produced
better results with cross validation, it did not hap-
pen in the case of test data. The restaurant test data
produced better accuracy without aspect term fea-
tures, while laptop test data produced better accu-
racy with aspect term features. We submitted our
systems without using aspect terms as features. If
aspect terms were used as features, the laptop test
data would have been classified with an accuracy
of 60.8 %. Another interesting observation is, uni-
grams produce better results on their own, as com-
pared to adjectives and verbs. Dependency and
clauses also seem to be very important features,
since they produce an accuracy of above 60% on
their own. We also observed that some stopwords
are important features for this task, and complete
removal of stopwords lowers the classification ac-
curacy.
Domain Baseline Best
System
Submitted
System
Debugged
System
laptop 51.07 70.48 57.03 59.15
restaurant 64.28 80.95 70.70 71.44
Table 4: Results on Gold Standard Data.
6 Conclusion
We presented an analysis and evaluation of syn-
tactic and lexical features for performing sentence
level aspect based sentiment analysis. Our fea-
tures depend on part of speech tagging and depen-
dency parsing, and therefore the accuracy might
vary with different parsers. Although our system
did not produce the highest accuracy for the task, it
is capable of achieving accuracies much above the
baselines. Therefore, the proposed features can be
worth testing on different datasets and can be used
in combination with other features.
Acknowledgement
This work has been funded by the Euro-
pean project EUROSENTIMENT under grant no.
296277, and the Science Foundation Ireland under
Grant Number SFI/12/RC/2289 (Insight Center).
References
Stefano Esuli Andrea Baccianella and Fabrizio Sebas-
tiani. 2010. Sentiwordnet 3.0: An enhanced lexi-
cal resource for sentiment analysis and opinion min-
ing. In Proceedings of the Seventh conference on
International Language Resources and Evaluation
349
(LREC?10). European Language Resources Associ-
ation (ELRA).
Paula Chesley. 2006. Using verbs and adjectives to
automatically classify blog sentiment. In In Pro-
ceedings of AAAI-CAAW-06, the Spring Symposia
on Computational Approaches, pages 27?29.
Yasser EL-Manzalawy and Vasant Honavar, 2005.
WLSVM: Integrating LibSVM into Weka Environ-
ment.
Christiane Fellbaum, editor. 1998. WordNet An Elec-
tronic Lexical Database. The MIT Press.
Mark Hall, Eibe Frank, Geoffrey Holmes, Bernhard
Pfahringer, Peter Reutemann, and Ian H. Witten.
2009. The weka data mining software, an update.
SIGKDD Explorations, 11:10?18.
Arun Meena and Prabhakar T.V. 2007. Sentence level
sentiment analysis in the presence of conjuncts us-
ing linguistic analysis. In ECIR, volume 4425 of
Lecture Notes in Computer Science. Springer.
Bo Pang, Lillian Lee, and Shivakumar Vaithyanathan.
2002. Thumbs up?: sentiment classification using
machine learning techniques. In Proceedings of the
ACL-02 conference on Empirical methods in natu-
ral language processing - Volume 10, EMNLP ?02,
pages 79?86, Stroudsburg, PA, USA. Association
for Computational Linguistics.
Maria Pontiki, Dimitrios Galanis, John Pavlopou-
los, Harris Papageorgiou, Ion Androutsopoulos, and
Suresh Manandhar. 2014. Semeval-2014 task 4:
Aspect based sentiment analysis. In Proceedings of
the International Workshop on Semantic Evaluation,
SemEval 2014, Dublin, Ireland.
Hassan Saif, Yulan He, and Harith Alani. 2012. Se-
mantic sentiment analysis of twitter. In Interna-
tional Semantic Web Conference (1), volume 7649
of Lecture Notes in Computer Science, pages 508?
524. Springer.
Wilson Theresa, Janyce Wiebe, and Paul Hoffmann.
2009. Recognizing contextual polarity: An explo-
ration of features for phrase-level sentiment analy-
sis. Computational Linguistics, pages 399?433.
350
