Human Language Technologies: The 2009 Annual Conference of the North American Chapter of the ACL, pages 308?316,
Boulder, Colorado, June 2009. c?2009 Association for Computational Linguistics
On the Syllabification of Phonemes
Susan Bartlett? and Grzegorz Kondrak? and Colin Cherry?
?Department of Computing Science ?Microsoft Research
University of Alberta One Microsoft Way
Edmonton, AB, T6G 2E8, Canada Redmond, WA, 98052
{susan,kondrak}@cs.ualberta.ca colinc@microsoft.com
Abstract
Syllables play an important role in speech
synthesis and recognition. We present sev-
eral different approaches to the syllabifica-
tion of phonemes. We investigate approaches
based on linguistic theories of syllabification,
as well as a discriminative learning technique
that combines Support Vector Machine and
Hidden Markov Model technologies. Our
experiments on English, Dutch and German
demonstrate that our transparent implemen-
tation of the sonority sequencing principle
is more accurate than previous implemen-
tations, and that our language-independent
SVM-based approach advances the current
state-of-the-art, achieving word accuracy of
over 98% in English and 99% in German and
Dutch.
1 Introduction
Syllabification is the process of dividing a word
into its constituent syllables. Although some work
has been done on syllabifying orthographic forms
(Mu?ller et al, 2000; Bouma, 2002; Marchand and
Damper, 2007; Bartlett et al, 2008), syllables are,
technically speaking, phonological entities that can
only be composed of strings of phonemes. Most
linguists view syllables as an important unit of
prosody because many phonological rules and con-
straints apply within syllables or at syllable bound-
aries (Blevins, 1995).
Apart from their purely linguistic significance,
syllables play an important role in speech synthesis
and recognition (Kiraz and Mo?bius, 1998; Pearson
et al, 2000). The pronunciation of a given phoneme
tends to vary depending on its location within a syl-
lable. While actual implementations vary, text-to-
speech (TTS) systems must have, at minimum, three
components (Damper, 2001): a letter-to-phoneme
(L2P) module, a prosody module, and a synthesis
module. Syllabification can play a role in all three
modules.
Because of the productive nature of language, a
dictionary look-up process for syllabification is in-
adequate. No dictionary can ever contain all possi-
ble words in a language. For this reason, it is neces-
sary to develop systems that can automatically syl-
labify out-of-dictionary words.
In this paper, we advance the state-of-the-art
in both categorical (non-statistical) and supervised
syllabification. We outline three categorical ap-
proaches based on common linguistic theories of
syllabification. We demonstrate that when imple-
mented carefully, such approaches can be very ef-
fective, approaching supervised performance. We
also present a data-driven, discriminative solution:
a Support Vector Machine Hidden Markov Model
(SVM-HMM), which tags each phoneme with its
syllabic role. Given enough data, the SVM-HMM
achieves impressive accuracy thanks to its ability
to capture context-dependent generalizations, while
also memorizing inevitable exceptions. Our ex-
periments on English, Dutch and German demon-
strate that our SVM-HMM approach substantially
outperforms the existing state-of-the-art learning ap-
proaches. Although direct comparisons are difficult,
our system achieves over 99% word accuracy on
German and Dutch, and the highest reported accu-
racy on English.
The paper is organized as follows. We outline
common linguistic theories of syllabification in Sec-
tion 2, and we survey previous computational sys-
308
tems in Section 3. Our linguistically-motivated ap-
proaches are described in Section 4. In Section 5,
we describe our system based on the SVM-HMM.
The experimental results are presented in Section 6.
2 Theories of Syllabification
There is some debate as to the exact structure of
a syllable. However, phonologists are in gen-
eral agreement that a syllable consists of a nucleus
(vowel sound), preceded by an optional onset and
followed by an optional coda. In many languages,
both the onset and the coda can be complex, i.e.,
composed of more than one consonant. For exam-
ple, the word breakfast [brEk-fst] contains two syl-
lables, of which the first has a complex onset [br],
and the second a complex coda [st]. Languages dif-
fer with respect to various typological parameters,
such as optionality of onsets, admissibility of co-
das, and the allowed complexity of the syllable con-
stituents. For example, onsets are required in Ger-
man, while Spanish prohibits complex codas.
There are a number of theories of syllabification;
we present three of the most prevalent. The Legal-
ity Principle constrains the segments that can be-
gin and end syllables to those that appear at the be-
ginning and end of words. In other words, a sylla-
ble is not allowed to begin with a consonant clus-
ter that is not found at the beginning of some word,
or end with a cluster that is not found at the end of
some word (Goslin and Frauenfelder, 2001). Thus,
a word like admit [dmIt] must be syllabified [d-
mIt] because [dm] never appears word-initially or
word-finally in English. A shortcoming of the le-
gality principle is that it does not always imply a
unique syllabification. For example, in a word like
askew [skju], the principle does not rule out any of
[-skju], [s-kju], or [sk-ju], as all three employ le-
gal onsets and codas.
The Sonority Sequencing Principle (SSP) pro-
vides a stricter definition of legality. The sonor-
ity of a sound is its inherent loudness, holding fac-
tors like pitch and duration constant (Crystal, 2003).
Low vowels like [a], the most sonorous sounds, are
high on the sonority scale, while plosive consonants
like [t] are at the bottom. When syllabifying a
word, SSP states that sonority should increase from
the first phoneme of the onset to the syllable?s nu-
cleus, and then fall off to the coda (Selkirk, 1984).
Consequently, in a word like vintage [vIntI], we
can rule out a syllabification like [vI-ntI] because
[n] is more sonorant than [t]. However, SSP does
not tell us whether to prefer [vIn-tI] or [vInt-I].
Moreover, when syllabifying a word like vintner
[vIntnr], the theory allows both [vIn-tnr] and [vInt-
nr], even though [tn] is an illegal onset in English.
Both the Legality Principle and SSP tell us which
onsets and codas are permitted in legal syllables, and
which are not. However, neither theory gives us any
guidance when deciding between legal onsets. The
Maximal Onset Principle addresses this by stating
we should extend a syllable?s onset at the expense
of the preceding syllable?s coda whenever it is legal
to do so (Kahn, 1976). For example, the principle
gives preference to [-skju] and [vIn-tI] over their
alternatives.
3 Previous Computational Approaches
Unlike tasks such as part of speech tagging or syn-
tactic parsing, syllabification does not involve struc-
tural ambiguity. It is generally believed that syllable
structure is usually predictable in a language pro-
vided that the rules have access to all conditioning
factors: stress, morphological boundaries, part of
speech, etymology, etc. (Blevins, 1995). However,
in speech applications, the phonemic transcription of
a word is often the only linguistic information avail-
able to the system. This is the common assumption
underlying a number of computational approaches
that have been proposed for the syllabification of
phonemes.
Daelemans and van den Bosch (1992) present one
of the earliest systems on automatic syllabification:
a neural network-based implementation for Dutch.
Daelemans et al (1997) also explore the application
of exemplar-based generalization (EBG), sometimes
called instance-based learning. EBG generally per-
forms a simple database look-up to syllabify a test
pattern, choosing the most common syllabification.
In cases where the test pattern is not found in the
database, the most similar pattern is used to syllab-
ify the test pattern.
Hidden Markov Models (HMMs) are another
popular approach to syllabification. Krenn (1997)
introduces the idea of treating syllabification as a
309
tagging task. Working from a list of syllabified
phoneme strings, she automatically generates tags
for each phone. She uses a second-order HMM to
predict sequences of tags; syllable boundaries can be
trivially recovered from the tags. Demberg (2006)
applies a fourth-order HMM to the syllabification
task, as a component of a larger German text-to-
speech system. Schmid et al (2007) improve on
Demberg?s results by applying a fifth-order HMM
that conditions on both the previous tags and their
corresponding phonemes.
Kiraz and Mo?bius (1998) present a weighted
finite-state-based approach to syllabification. Their
language-independent method builds an automaton
for each of onsets, nuclei, and codas, by count-
ing occurrences in training data. These automatons
are then composed into a transducer accepting se-
quences of one or more syllables. They do not report
quantitative results for their method.
Pearson et al (2000) compare two rule-based sys-
tems (they do not elaborate on the rules employed)
with a CART decision tree-based approach and a
?global statistics? algorithm. The global statistics
method is based on counts of consonant clusters
in contexts such as word boundaries, short vow-
els, or long vowels. Each test word has syllable
boundaries placed according to the most likely lo-
cation given a cluster and its context. In experi-
ments performed with their in-house dataset, their
statistics-based method outperforms the decision-
tree approach and the two rule-based methods.
Mu?ller (2001) presents a hybrid of a categori-
cal and data-driven approach. First, she manually
constructs a context-free grammar of possible sylla-
bles. This grammar is then made probabilistic using
counts obtained from training data. Mu?ller (2006)
attempts to make her method language-independent.
Rather than hand-crafting her context-free grammar,
she automatically generates all possible onsets, nu-
clei, and codas, based on the phonemes existing in
the language. The results are somewhat lower than
in (Mu?ller, 2001), but the approach can be more eas-
ily ported across languages.
Goldwater and Johnson (2005) also explore us-
ing EM to learn the structure of English and Ger-
man phonemes in an unsupervised setting, following
Mu?ller in modeling syllable structure with PCFGs.
They initialize their parameters using a deterministic
parser implementing the sonority principle and esti-
mate the parameters for their maximum likelihood
approach using EM.
Marchand et al (2007) apply their Syllabification
by Analogy (SbA) technique, originally developed
for orthographic forms, to the pronunciation do-
main. For each input word, SbA finds the most sim-
ilar substrings in a lexicon of syllabified phoneme
strings and then applies the dictionary syllabifica-
tions to the input word. Their survey paper also in-
cludes comparisons with a method broadly based on
the legality principle. The authors find their legality-
based implementation fares significantly worse than
SbA.
4 Categorical Approaches
Categorical approaches to syllabification are appeal-
ing because they are efficient and linguistically intu-
itive. In addition, they require little or no syllable-
annotated data. We present three categorical al-
gorithms that implement the linguistic insights out-
lined in Section 2. All three can be viewed as vari-
ations on the basic pseudo-code shown in Figure 1.
Every vowel is labeled as a nucleus, and every con-
sonant is labeled as either an onset or a coda. The
algorithm labels all consonants as onsets unless it is
illegal to do so. Given the labels, it is straightfor-
ward to syllabify a word. The three methods differ
in how they determine a ?legal? onset.
As a rough baseline, the MAXONSET implemen-
tation considers all combinations of consonants to be
legal onsets. Only word-final consonants are labeled
as codas.
LEGALITY combines the Legality Principle with
onset maximization. In our implementation, we col-
lect all word-initial consonant clusters from the cor-
pus and deem them to be legal onsets. With this
method, no syllable can have an onset that does not
appear word-initially in the training data. We do not
test for the legality of codas. The performance of
LEGALITY depends on the number of phonetic tran-
scriptions that are available, but the transcriptions
need not be annotated with syllable breaks.
SONORITY combines the Sonority Sequencing
Principle with onset maximization. In this approach,
an onset is considered legal if every member of the
onset ranks lower on the sonority scale than ensuing
310
until current phoneme is a vowel
label current phoneme as an onset
end loop
until all phonemes have been labeled
label current phoneme as a nucleus
if there are no more vowels in the word
label all remaining consonants as codas
else
onset := all consonants before next vowel
coda := empty
until onset is legal
coda := coda plus first phoneme of onset
onset := onset less first phoneme
end loop
end if
end loop
Insert syllable boundaries before onsets
Figure 1: Pseudo-code for syllabifying a string of
phonemes.
consonants. SONORITY requires no training data be-
cause it implements a sound linguistic theory. How-
ever, an existing development set for a given lan-
guage can help with defining and validating addi-
tional language-specific constraints.
Several sonority scales of varying complexity
have been proposed. For example, Selkirk (1984)
specifies a hierarchy of eleven distinct levels. We
adopt a minimalistic scale shown in Figure 2. which
avoids most of the disputed sonority contrasts (Jany
et al, 2007). We set the sonority distance parame-
ter to 2, which ensures that adjacent consonants in
the onset differ by at least two levels of the scale.
For example, [pr] is an acceptable onset because it
is composed of an obstruent and a liquid, but [pn] is
not, because nasals directly follow obstruents on our
sonority scale.
In addition, we incorporate several English-
specific constraints listed by Kenstowicz (1994,
pages 257?258). The constraints, or filters, prohibit
complex onsets containing:
(i) two labials (e.g., [pw], [bw], [fw], [vw]),
(ii) a non-strident coronal followed by a lateral
(e.g., [tl], [dl], [Tl])
(iii) a voiced fricative (e.g., [vr], [zw], except [vj]),
(iv) a palatal consonant (e.g., [Sl], [?r], except [Sr]).
Sound Examples Level
Vowels u, , . . . 4
Glides w, j, . . . 3
Liquids l, r, . . . 2
Nasals m, N, . . . 1
Obstruents g, T, . . . 0
Figure 2: The sonority scale employed by SONORITY.
A special provision allows for prepending the
phoneme [s] to onsets beginning with a voiceless
plosive. This reflects the special status of [s] in En-
glish, where onsets like [sk] and [sp] are legal even
though the sonority is not strictly increasing.
5 Supervised Approach: SVM-HMM
If annotated data is available, a classifier can be
trained to predict the syllable breaks. A Support
Vector Machine (SVM) is a discriminative super-
vised learning technique that allows for a rich fea-
ture representation of the input space. In principle,
we could use a multi-class SVM to classify each
phoneme according to its position in a syllable on
the basis of a set of features. However, a traditional
SVM would treat each phoneme in a word as an in-
dependent instance, preventing us from considering
interactions between labels. In order to overcome
this shortcoming, we employ an SVM-HMM1 (Al-
tun et al, 2003), an instance of the Structured SVM
formalism (Tsochantaridis et al, 2004) that has been
specialized for sequence tagging.
When training a structured SVM, each training
instance xi is paired with its label yi, drawn from
the set of possible labels, Yi. In our case, the train-
ing instances xi are words, represented as sequences
of phonemes, and their labels yi are syllabifications,
represented as sequences of onset/nucleus/coda tags.
For each training example, a feature vector ?(x, y)
represents the relationship between the example and
a candidate tag sequence. The SVM finds a weight
vector w, such that w ??(x, y) separates correct tag-
gings from incorrect taggings by as large a margin
as possible. Hamming distance DH is used to cap-
ture how close a wrong sequence y is to yi, which
1http://svmlight.joachims.org/svm struct.html
311
in turn impacts the required margin. Tag sequences
that share fewer tags in common with the correct se-
quence are separated by a larger margin.
Mathematically, a (simplified) statement of the
SVM learning objective is:
?i?y?Yi,y 6=yi :[?(xi, yi) ? w > ?(xi, y) ? w +DH(y, yi)] (1)
This objective is only satisfied when w tags all train-
ing examples correctly. In practice, slack variables
are introduced, which allow us to trade off training
accuracy and the complexity of w via a cost parame-
ter. We tune this parameter on our development set.
The SVM-HMM training procedure repeatedly
uses the Viterbi algorithm to find, for the current
w and each (xi, yi) training pair, the sequence y
that most drastically violates the inequality shown in
Equation 1. These incorrect tag sequences are added
to a growing set, which constrains the quadratic op-
timization procedure used to find the next w. The
process iterates until no new violating sequences are
found, producing an approximation to the inequality
over all y ? Yi. A complete explanation is given by
Tsochantaridis et al (2004).
Given a weight vector w, a structured SVM tags
new instances x according to:
argmaxy?Y [?(x, y) ? w] (2)
The SVM-HMM gets the HMM portion of its name
from its use of the HMM Viterbi algorithm to solve
this argmax.
5.1 Features
We investigated several tagging schemes, described
in detail by Bartlett (2007). During development,
we found that tagging each phoneme with its syl-
labic role (Krenn, 1997) works better than the simple
binary distinction between syllable-final and other
phonemes (van den Bosch, 1997). We also dis-
covered that accuracy can be improved by number-
ing the tags. Therefore, in our tagging scheme, the
single-syllable word strengths [strENTs] would be la-
beled with the sequence {O1 O2 O3 N1 C1 C2 C3}.
Through the use of the Viterbi algorithm, our fea-
ture vector ?(x, y) is naturally divided into emis-
sion and transition features. Emission features link
an aspect of the input word x with a single tag in the
Method English
MAXONSET 61.38
LEGALITY 93.16
SONORITY 95.00
SVM-HMM 98.86
tsylb 93.72
Table 1: Word accuracy on the CELEX dataset.
sequence y. Unlike a generative HMM, these emis-
sion features do not require any conditional indepen-
dence assumptions. Transition features link tags to
tags. Our only transition features are counts of adja-
cent tag pairs occurring in y.
For the emission features, we use the current
phoneme and a fixed-size context window of sur-
rounding phonemes. Thus, the features for the
phoneme [k] in hockey [hAki] might include the [A]
preceding it, and the [i] following it. In experiments
on our development set, we found that the optimal
window size is nine: four phonemes on either side
of the focus phoneme. Because the SVM-HMM is a
linear classifier, we need to explicitly state any im-
portant conjunctions of features. This allows us to
capture more complex patterns in the language that
unigrams alone cannot describe. For example, the
bigram [ps] is illegal as an onset in English, but per-
fectly reasonable as a coda. Experiments on the de-
velopment set showed that performance peaked us-
ing all unigrams, bigrams, trigrams, and four-grams
found within our context window.
6 Syllabification Experiments
We developed our approach using the English por-
tion of the CELEX lexical database (Baayen et al,
1995). CELEX provides the phonemes of a word
and its correct syllabification. It does not designate
the phonemes as onsets, nuclei, or codas, which is
the labeling we want to predict. Fortunately, extract-
ing the labels from a syllabified word is straightfor-
ward. All vowel phones are assigned to be nuclei;
consonants preceding the nucleus in a syllable are
assigned to be onsets, while consonants following
the nucleus in a syllable are assigned to be codas.
The results in Table 1 were obtained on a test set
of 5K randomly selected words. For training the
SVM-HMM, we randomly selected 30K words not
312
appearing in the test set, while 6K training examples
were held out for development testing. We report
the performance in terms of word accuracy (entire
words syllabified correctly). Among the categori-
cal approaches, SONORITY clearly outperforms not
only LEGALITY, but also tsylb (Fisher, 1996), an
implementation of the complex algorithm of Kahn
(1976), which makes use of lists of legal English
onsets. Overall, our SVM-based approach is a clear
winner.
The results of our discriminative method com-
pares favorably with the results of competing ap-
proaches on English CELEX. Since there are no
standard train-test splits for syllabification, the
comparison is necessarily indirect, but note that
our training set is substantially smaller. For
her language-independent PCFG-based approach,
Mu?ller (2006) reports 92.64% word accuracy on the
set of 64K examples from CELEX using 10-fold
cross-validation. The Learned EBG approach of
van den Bosch (1997) achieves 97.78% word accu-
racy when training on approximately 60K examples.
Therefore, our results represent a nearly 50% reduc-
tion of the error rate.
Figure 3: Word accuracy on English CELEX as a func-
tion of the number of thousands of training examples.
Though the SVM-HMM?s training data require-
ments are lower than previous supervised syllabi-
fication approaches, they are still substantial. Fig-
ure 3 shows a learning curve over varying amounts
of training data. Performance does not reach accept-
able levels until 5K training examples are provided.
6.1 Error Analysis
There is a fair amount of overlap in the errors made
by the SVM-HMM and the SONORITY. Table 4
shows a few characteristic examples. The CELEX
syllabifications of tooth-ache and pass-ports fol-
low the morphological boundaries of the compound
words. Morphological factors are a source of er-
rors for both approaches, but significantly more so
for SONORITY. The performance difference comes
mainly from the SVM?s ability to handle many of
these morphological exceptions. The SVM gener-
ates the correct syllabification of northeast [norT-
ist], even though an onset of [T] is perfectly legal.
On the other hand, the SVM sometimes overgener-
alizes, as in the last example in Table 4.
SVM-HMM SONORITY
tu-Tek tu-Tek toothache
pae-sports pae-sports passports
norT-ist nor-Tist northeast
dIs-plizd dI-splizd displeased
dIs-koz dI-skoz discos
Figure 4: Examples of syllabification errors. (Correct
syllabifications are shown in bold.)
6.2 The NETtalk Dataset
Marchand et al (2007) report a disappointing word
accuracy of 54.14% for their legality-based imple-
mentation, which does not accord with the results
of our categorical approaches on English CELEX.
Consequently, we also apply our methods to the
dataset they used for their experiments: the NETtalk
dictionary. NETtalk contains 20K English words; in
the experiments reported here, we use 13K training
examples and 7K test words.
As is apparent from Table 2, our performance
degrades significantly when switching to NETtalk.
The steep decline found in the categorical meth-
ods is particularly notable, and indicates significant
divergence between the syllabifications employed
in the two datasets. Phonologists do not always
agree on the correct syllable breaks for a word,
but the NETtalk syllabifications are often at odds
with linguistic intuitions. We randomly selected 50
words and compared their syllabifications against
those found in Merriam-Webster Online. We found
that CELEX syllabifications agree with Merriam-
Webster in 84% of cases, while NETtalk only agrees
52% of the time.
Figure 5 shows several words from the NETtalk
313
Method English
MAXONSET 33.64
SONORITY 52.80
LEGALITY 53.08
SVM-HMM 92.99
Table 2: Word accuracy on the NETtalk dataset.
and CELEX datasets. We see that CELEX fol-
lows the maximal onset principle consistently, while
NETtalk does in some instances but not others. We
also note that there are a number of NETtalk syllab-
ifications that are clearly wrong, such as the last two
examples in Figure 5. The variability of NETtalk
is much more difficult to capture with any kind of
principled approach. Thus, we argue that low per-
formance on NETtalk indicate inconsistent syllabi-
fications within that dataset, rather than any actual
deficiency of the methods.
NETtalk CELEX
?aes-taIz ?ae-staIz chastise
rEz-Id-ns rE-zI-dns residence
dI-strOI dI-strOI destroy
fo-tAn fo-tAn photon
Ar-pE-io Ar-pE-i-o arpeggio
Der--baU-t DE-r-baUt thereabout
Figure 5: Examples of CELEX and NETtalk syllabifica-
tions.
NETtalk?s variable syllabification practices
notwithstanding, the SVM-HMM approach still
outperforms the previous benchmark on the dataset.
Marchand et al (2007) report 88.53% word accu-
racy for their SbA technique using leave-one-out
testing on the entire NETtalk set (20K words). With
fewer training examples, we reduce the error rate by
almost 40%.
6.3 Other Languages
We performed experiments on German and Dutch,
the two other languages available in the CELEX lex-
ical database. The German and Dutch lexicons of
CELEX are larger than the English lexicon. For both
languages, we selected a 25K test set, and two dif-
ferent training sets, one containing 50K words and
the other containing 250K words. The results are
Method German Dutch
MAXONSET 19.51 23.44
SONORITY 76.32 77.51
LEGALITY 79.55 64.31
SVM-HMM (50K words) 99.26 97.79
SVM-HMM (250K words) 99.87 99.16
Table 3: Word accuracy on the CELEX dataset.
presented in Table 3.
While our SVM-HMM approach is entirely lan-
guage independent, the same cannot be said about
other methods. The maximal onset principle appears
to hold much more strongly for English than for Ger-
man and Dutch (e.g., patron: [pe-trn] vs. [pat-ron]).
LEGALITY and SONORITY also appear to be less
effective, possibly because of greater tendency for
syllabifications to match morphological boundaries
(e.g., English exclusive: [Ik-sklu-sIv] vs. Dutch ex-
clusief [Eks-kly-zif]). SONORITY is further affected
by our decision to employ the constraints of Ken-
stowicz (1994), although they clearly pertain to En-
glish. We expect that adapting them to specific lan-
guages would bring the results closer to the level of
the English experiments.
Although our SVM system is tuned using an
English development set, the results on both Ger-
man and Dutch are excellent. We could not find
any quantitative data for comparisons on Dutch,
but the comparison with the previously reported re-
sults on German CELEX demonstrates the qual-
ity of our approach. The numbers that follow re-
fer to 10-fold cross-validation on the entire lex-
icon (over 320K entries) unless noted otherwise.
Krenn (1997) obtains tag accuracy of 98.34%, com-
pared to our system?s tag accuracy of 99.97% when
trained on 250K words. With a hand-crafted gram-
mar, Mu?ller (2002) achieves 96.88% word accuracy
on CELEX-derived syllabifications, with a training
corpus of two million tokens. Without a hand-
crafted grammar, she reports 90.45% word accu-
racy (Mu?ller, 2006). Applying a standard smoothing
algorithm and fourth-order HMM, Demberg (2006)
scores 98.47% word accuracy. A fifth-order joint
N -gram model of Schmid et al (2007) achieves
99.85% word accuracy with about 278K training
points. However, unlike generative approaches, our
314
Method English German
SONORITY 97.0 94.2
SVM-HMM 99.9 99.4
Categorical Parser 94.9 92.7
Maximum Likelihood 98.1 97.4
Table 4: Word accuracy on the datasets of Goldwater and
Johnson (2005).
SVM-HMM can condition each emission on large
portions of the input using only a first-order Markov
model, which implies much faster syllabification
performance.
6.4 Direct Comparison with an MLE approach
The results of the competitive approaches that have
been quoted so far (with the exception of tsylb)
are not directly comparable, because neither the re-
spective implementations, nor the actual train-test
splits are publicly available. However, we managed
to obtain the English and German data sets used
by Goldwater and Johnson (2005) in their study,
which focused primarily on unsupervised syllabi-
fication. Their experimental framework is similar
to (Mu?ller, 2001). They collect words from running
text and create a training set of 20K tokens and a
test set of 10K tokens. The running text was taken
from the Penn WSJ and ECI corpora, and the syl-
labified phonemic transcriptions were obtained from
CELEX. Table 4 compares our experimental results
with their reported results obtained with: (a) su-
pervised Maximum Likelihood training procedures,
and (b) a Categorical Syllable Parser implementing
the principles of sonority sequencing and onset max-
imization without Kenstowicz?s (1994) onset con-
straints.
The accuracy figures in Table 4 are noticeably
higher than in Table 1. This stems from fundamen-
tal differences in the experimental set-up; Goldwater
and Johnson (2005) test on tokens as found in text,
therefore many frequent short words are duplicated.
Furthermore, some words occur during both training
and testing, to the benefit of the supervised systems
(SVM-HMM and Maximum Likelihood). Neverthe-
less, the results confirm the level of improvement
obtained by both our categorical and supervised ap-
proaches.
7 Conclusion
We have presented several different approaches to
the syllabification of phonemes. The results of our
linguistically-motivated algorithms, show that it is
possible to achieve adequate syllabification word
accuracy in English with no little or no syllable-
annotated training data. We have demonstrated that
the poor performance of categorical methods on En-
glish NETtalk actually points to problems with the
NETtalk annotations, rather than with the methods
themselves.
We have also shown that SVM-HMMs can be
used to great effect when syllabifying phonemes.
In addition to being both efficient and language-
independent, they establish a new state-of-the-art for
English and Dutch syllabification. However, they
do require thousands of labeled training examples to
achieve this level of accuracy. In the future, we plan
to explore a hybrid approach, which would benefit
from both the generality of linguistic principles and
the smooth exception-handling of supervised tech-
niques, in order to make best use of whatever data is
available.
Acknowledgements
We are grateful to Sharon Goldwater for providing
the experimental data sets for comparison. This re-
search was supported by the Natural Sciences and
Engineering Research Council of Canada and the
Alberta Informatics Circle of Research Excellence.
References
Yasemin Altun, Ioannis Tsochantaridis, and Thomas
Hofmann. 2003. Hidden markov support vector ma-
chines. Proceedings of the 20Th International Confer-
ence on Machine Learning (ICML).
R. Baayen, R. Piepenbrock, and L. Gulikers. 1995. The
CELEX lexical database (CD-ROM).
Susan Bartlett, Grzegorz Kondrak, and Colin Cherry.
2008. Automatic syllabification with structured SVMs
for letter-to-phoneme conversion. In Proceedings of
ACL-08: HLT, pages 568?576, Columbus, Ohio.
Susan Bartlett. 2007. Discriminative approach to auto-
matic syllabification. Master?s thesis, Department of
Computing Science, University of Alberta.
Juliette Blevins. 1995. The syllable in phonological
theory. In John Goldsmith, editor, The handbook of
phonological theory, pages 206?244. Blackwell.
315
Gosse Bouma. 2002. Finite state methods for hyphen-
ation. Natural Language Engineering, 1:1?16.
David Crystal. 2003. A dictionary of linguistics and pho-
netics. Blackwell.
Walter Daelemans and Antal van den Bosch. 1992. Gen-
eralization performance of backpropagaion learning
on a syllabification task. In Proceedings of the 3rd
Twente Workshop on Language Technology, pages 27?
38.
Walter Daelemans, Antal van den Bosch, and Ton Wei-
jters. 1997. IGTree: Using trees for compression and
classification in lazy learning algorithms. Artificial In-
telligence Review, pages 407?423.
Robert Damper. 2001. Learning about speech from
data: Beyond NETtalk. In Data-Driven Techniques in
Speech Synthesis, pages 1?25. Kluwer Academic Pub-
lishers.
Vera Demberg. 2006. Letter-to-phoneme conversion for
a German text-to-speech system. Master?s thesis, Uni-
versity of Stuttgart.
William Fisher. 1996. Tsylb syllabification package.
ftp://jaguar.ncsl.nist.gov/pub/tsylb2-1.1.tar.Z. Last ac-
cessed 31 March 2008.
Sharon Goldwater and Mark Johnson. 2005. Represen-
tational bias in usupervised learning of syllable struc-
ture. In Prcoeedings of the 9th Conference on Compu-
tational Natural Language Learning (CoNLL), pages
112?119.
Jeremy Goslin and Ulrich Frauenfelder. 2001. A com-
parison of theoretical and human syllabification. Lan-
guage and Speech, 44:409?436.
Carmen Jany, Matthew Gordon, Carlos M Nash, and
Nobutaka Takara. 2007. How universal is the sonor-
ity hierarchy? A cross-linguistic study. In 16th Inter-
national Congress of Phonetic Sciences, pages 1401?
1404.
Daniel Kahn. 1976. Syllable-based generalizations in
English Phonology. Ph.D. thesis, Indiana University.
Michael Kenstowicz. 1994. Phonology in Generative
Grammar. Blackwell.
George Kiraz and Bernd Mo?bius. 1998. Multilingual
syllabification using weighted finite-state transducers.
In Proceedings of the 3rd Workshop on Speech Synthe-
sis.
Brigitte Krenn. 1997. Tagging syllables. In Proceedings
of Eurospeech, pages 991?994.
Yannick Marchand and Robert Damper. 2007. Can syl-
labification improve pronunciation by analogy of En-
glish? Natural Language Engineering, 13(1):1?24.
Yannick Marchand, Connie Adsett, and Robert Damper.
2007. Automatic syllabification in English: A com-
parison of different algorithms. Language and Speech.
To appear.
Karin Mu?ller, Bernd Mo?bius, and Detlef Prescher. 2000.
Inducing probabilistic syllable classes using multivari-
ate clustering. In Prcoeedings of the 38th meeting of
the ACL.
Karin Mu?ller. 2001. Automatic detection of syllable
boundaries combining the advantages of treebank and
bracketed corpora training. Proceedings on the 39Th
Meeting of the ACL.
Karin Mu?ller. 2002. Probabilistic context-free grammars
for phonology. Proceedings of the 6th Workshop of the
ACL Special Interest Group in Computational Phonol-
ogy (SIGPHON), pages 80?90.
Karin Mu?ller. 2006. Improving syllabification mod-
els with phonotactic knowledge. Proceedings of the
Eighth Meeting of the ACL Special Interest Group on
Computational Phonology At HLT-NAACL.
Steve Pearson, Roland Kuhn, Steven Fincke, and Nick
Kibre. 2000. Automatic methods for lexical stress as-
signment and syllabification. In Proceedings of the 6th
International Conference on Spoken Language Pro-
cessing (ICSLP).
Helmut Schmid, Bernd Mo?bius, and Julia Weidenkaff.
2007. Tagging syllable boundaries with joint N-gram
models. In Proceedings of Interspeech.
Elisabeth Selkirk. 1984. On the major class features and
syllable theory. In Language Sound Structure. MIT
Press.
Ioannis Tsochantaridis, Thomas Hofmann, Thorsten
Joachims, and Yasemin Altun. 2004. Support vec-
tor machine learning for interdependent and structured
output spaces. Proceedings of the 21st International
Conference on Machine Learning (ICML).
Antal van den Bosch. 1997. Learning to pronounce
written words: a study in inductive language learning.
Ph.D. thesis, Universiteit Maastricht.
316
Proceedings of ACL-08: HLT, pages 568?576,
Columbus, Ohio, USA, June 2008. c?2008 Association for Computational Linguistics
Automatic Syllabification with Structured SVMs
for Letter-To-Phoneme Conversion
Susan Bartlett? Grzegorz Kondrak? Colin Cherry?
?Department of Computing Science ?Microsoft Research
University of Alberta One Microsoft Way
Edmonton, AB, T6G 2E8, Canada Redmond, WA, 98052
{susan,kondrak}@cs.ualberta.ca colinc@microsoft.com
Abstract
We present the first English syllabification
system to improve the accuracy of letter-to-
phoneme conversion. We propose a novel dis-
criminative approach to automatic syllabifica-
tion based on structured SVMs. In comparison
with a state-of-the-art syllabification system,
we reduce the syllabification word error rate
for English by 33%. Our approach also per-
forms well on other languages, comparing fa-
vorably with published results on German and
Dutch.
1 Introduction
Pronouncing an unfamiliar word is a task that is of-
ten accomplished by breaking the word down into
smaller components. Even small children learn-
ing to read are taught to pronounce a word by
?sounding out? its parts. Thus, it is not surprising
that Letter-to-Phoneme (L2P) systems, which con-
vert orthographic forms of words into sequences of
phonemes, can benefit from subdividing the input
word into smaller parts, such as syllables or mor-
phemes. Marchand and Damper (2007) report that
incorporating oracle syllable boundary information
improves the accuracy of their L2P system, but they
fail to emulate that result with any of their automatic
syllabification methods. Demberg et al (2007), on
the other hand, find that morphological segmenta-
tion boosts L2P performance in German, but not in
English. To our knowledge, no previous English
orthographic syllabification system has been able
to actually improve performance on the larger L2P
problem.
In this paper, we focus on the task of automatic
orthographic syllabification, with the explicit goal
of improving L2P accuracy. A syllable is a subdi-
vision of a word, typically consisting of a vowel,
called the nucleus, and the consonants preceding and
following the vowel, called the onset and the coda,
respectively. Although in the strict linguistic sense
syllables are phonological rather than orthographic
entities, our L2P objective constrains the input to or-
thographic forms. Syllabification of phonemic rep-
resentation is in fact an easier task, which we plan to
address in a separate publication.
Orthographic syllabification is sometimes re-
ferred to as hyphenation. Many dictionaries pro-
vide hyphenation information for orthographic word
forms. These hyphenation schemes are related to,
and influenced by, phonemic syllabification. They
serve two purposes: to indicate where words may
be broken for end-of-line divisions, and to assist the
dictionary reader with correct pronunciation (Gove,
1993). Although these purposes are not always con-
sistent with our objective, we show that we can im-
prove L2P conversion by taking advantage of the
available hyphenation data. In addition, automatic
hyphenation is a legitimate task by itself, which
could be utilized in word editors or in synthesizing
new trade names from several concepts.
We present a discriminative approach to ortho-
graphic syllabification. We formulate syllabifica-
tion as a tagging problem, and learn a discriminative
tagger from labeled data using a structured support
vector machine (SVM) (Tsochantaridis et al, 2004).
With this approach, we reduce the error rate for En-
glish by 33%, relative to the best existing system.
Moreover, we are also able to improve a state-of-the-
art L2P system by incorporating our syllabification
models. Our method is not language specific; when
applied to German and Dutch, our performance is
568
comparable with the best existing systems in those
languages, even though our system has been devel-
oped and tuned on English only.
The paper is structured as follows. After dis-
cussing previous computational approaches to the
problem (Section 2), we introduce structured SVMs
(Section 3), and outline how we apply them to ortho-
graphic syllabification (Section 4). We present our
experiments and results for the syllabification task
in Section 5. In Section 6, we apply our syllabifica-
tion models to the L2P task. Section 7 concludes.
2 Related Work
Automatic preprocessing of words is desirable be-
cause the productive nature of language ensures that
no finite lexicon will contain all words. Marchand
et al (2007) show that rule-based methods are rela-
tively ineffective for orthographic syllabification in
English. On the other hand, few data-driven syllabi-
fication systems currently exist.
Demberg (2006) uses a fourth-order Hidden
Markov Model to tackle orthographic syllabification
in German. When added to her L2P system, Dem-
berg?s orthographic syllabification model effects a
one percent absolute improvement in L2P word ac-
curacy.
Bouma (2002) explores syllabification in Dutch.
He begins with finite state transducers, which es-
sentially implement a general preference for onsets.
Subsequently, he uses transformation-based learning
to automatically extract rules that improve his sys-
tem. Bouma?s best system, trained on some 250K
examples, achieves 98.17% word accuracy. Daele-
mans and van den Bosch (1992) implement a back-
propagation network for Dutch orthography, but find
it is outperformed by less complex look-up table ap-
proaches.
Marchand and Damper (2007) investigate the im-
pact of syllabification on the L2P problem in En-
glish. Their Syllabification by Analogy (SbA) algo-
rithm is a data-driven, lazy learning approach. For
each input word, SbA finds the most similar sub-
strings in a lexicon of syllabified words and then
applies these dictionary syllabifications to the input
word. Marchand and Damper report 78.1% word ac-
curacy on the NETtalk dataset, which is not good
enough to improve their L2P system.
Chen (2003) uses an n-gram model and Viterbi
decoder as a syllabifier, and then applies it as a pre-
processing step in his maximum-entropy-based En-
glish L2P system. He finds that the syllabification
pre-processing produces no gains over his baseline
system.
Marchand et al (2007) conduct a more systematic
study of existing syllabification approaches. They
examine syllabification in both the pronunciation
and orthographic domains, comparing their own
SbA algorithm with several instance-based learning
approaches (Daelemans et al, 1997; van den Bosch,
1997) and rule-based implementations. They find
that SbA universally outperforms these other ap-
proaches by quite a wide margin.
Syllabification of phonemes, rather than letters,
has also been investigated (Mu?ller, 2001; Pearson
et al, 2000; Schmid et al, 2007). In this paper, our
focus is on orthographic forms. However, as with
our approach, some previous work in the phonetic
domain has formulated syllabification as a tagging
problem.
3 Structured SVMs
A structured support vector machine (SVM) is a
large-margin training method that can learn to pre-
dict structured outputs, such as tag sequences or
parse trees, instead of performing binary classifi-
cation (Tsochantaridis et al, 2004). We employ a
structured SVM that predicts tag sequences, called
an SVM Hidden Markov Model, or SVM-HMM.
This approach can be considered an HMM because
the Viterbi algorithm is used to find the highest scor-
ing tag sequence for a given observation sequence.
The scoring model employs a Markov assumption:
each tag?s score is modified only by the tag that came
before it. This approach can be considered an SVM
because the model parameters are trained discrimi-
natively to separate correct tag sequences from in-
correct ones by as large a margin as possible. In
contrast to generative HMMs, the learning process
requires labeled training data.
There are a number of good reasons to apply the
structured SVM formalism to this problem. We get
the benefit of discriminative training, not available
in a generative HMM. Furthermore, we can use an
arbitrary feature representation that does not require
569
any conditional independence assumptions. Unlike
a traditional SVM, the structured SVM considers
complete tag sequences during training, instead of
breaking each sequence into a number of training
instances.
Training a structured SVM can be viewed as a
multi-class classification problem. Each training in-
stance xi is labeled with a correct tag sequence yidrawn from a set of possible tag sequences Yi. Asis typical of discriminative approaches, we create a
feature vector ?(x, y) to represent a candidate y and
its relationship to the input x. The learner?s task is
to weight the features using a vector w so that the
correct tag sequence receives more weight than the
competing, incorrect sequences:
?i?y?Yi,y 6=yi [?(xi, yi) ? w > ?(xi, y) ? w] (1)
Given a trained weight vector w, the SVM tags new
instances xi according to:
argmaxy?Yi [?(xi, y) ? w] (2)
A structured SVM finds a w that satisfies Equation 1,
and separates the correct taggings by as large a mar-
gin as possible. The argmax in Equation 2 is con-
ducted using the Viterbi algorithm.
Equation 1 is a simplification. In practice, a struc-
tured distance term is added to the inequality in
Equation 1 so that the required margin is larger for
tag sequences that diverge further from the correct
sequence. Also, slack variables are employed to al-
low a trade-off between training accuracy and the
complexity of w, via a tunable cost parameter.
For most structured problems, the set of negative
sequences in Yi is exponential in the length of xi,and the constraints in Equation 1 cannot be explicitly
enumerated. The structured SVM solves this prob-
lem with an iterative online approach:
1. Collect the most damaging incorrect sequence
y according to the current w.
2. Add y to a growing set Y?i of incorrect se-quences.
3. Find a w that satisfies Equation 1, using the par-
tial Y?i sets in place of Yi.
4. Go to next training example, loop to step 1.
This iterative process is explained in far more detail
in (Tsochantaridis et al, 2004).
4 Syllabification with Structured SVMs
In this paper we apply structured SVMs to the syl-
labification problem. Specifically, we formulate
syllabification as a tagging problem and apply the
SVM-HMM software package1 (Altun et al, 2003).
We use a linear kernel, and tune the SVM?s cost pa-
rameter on a development set. The feature represen-
tation ? consists of emission features, which pair
an aspect of x with a single tag from y, and transi-
tion features, which count tag pairs occurring in y.
With SVM-HMM, the crux of the task is to create
a tag scheme and feature set that produce good re-
sults. In this section, we discuss several different
approaches to tagging for the syllabification task.
Subsequently, we outline our emission feature rep-
resentation. While developing our tagging schemes
and feature representation, we used a development
set of 5K words held out from our CELEX training
data. All results reported in this section are on that
set.
4.1 Annotation Methods
We have employed two different approaches to tag-
ging in this research. Positional tags capture where
a letter occurs within a syllable; Structural tags ex-
press the role each letter is playing within the sylla-
ble.
Positional Tags
The NB tag scheme simply labels every letter
as either being at a syllable boundary (B), or not
(N). Thus, the word im-mor-al-ly is tagged ?N B N
N B N B N N?, indicating a syllable boundary af-
ter each B tag. This binary classification approach
to tagging is implicit in several previous imple-
mentations (Daelemans and van den Bosch, 1992;
Bouma, 2002), and has been done explicitly in both
the orthographic (Demberg, 2006) and phoneme do-
mains (van den Bosch, 1997).
A weakness of NB tags is that they encode no
knowledge about the length of a syllable. Intuitively,
we expect the length of a syllable to be valuable in-
formation ? most syllables in English contain fewer
than four characters. We introduce a tagging scheme
that sequentially numbers the N tags to impart infor-
mation about syllable length. Under the Numbered
1http://svmlight.joachims.org/svm struct.html
570
NB tag scheme, im-mor-al-ly is annotated as ?N1 B
N1 N2 B N1 B N1 N2?. With this tag set, we have
effectively introduced a bias in favor of shorter syl-
lables: tags like N6, N7. . . are comparatively rare, so
the learner will postulate them only when the evi-
dence is particularly compelling.
Structural Tags
Numbered NB tags are more informative than
standard NB tags. However, neither annotation sys-
tem can represent the internal structure of the sylla-
ble. This has advantages: tags can be automatically
generated from a list of syllabified words without
even a passing familiarity with the language. How-
ever, a more informative annotation, tied to phono-
tactics, ought to improve accuracy. Krenn (1997)
proposes the ONC tag scheme, in which phonemes
of a syllable are tagged as an onset, nucleus, or coda.
Given these ONC tags, syllable boundaries can eas-
ily be generated by applying simple regular expres-
sions.
Unfortunately, it is not as straightforward to gen-
erate ONC-tagged training data in the orthographic
domain, even with syllabified training data. Silent
letters are problematic, and some letters can behave
differently depending on their context (in English,
consonants such as m, y, and l can act as vowels in
certain situations). Thus, it is difficult to generate
ONC tags for orthographic forms without at least a
cursory knowledge of the language and its princi-
ples.
For English, tagging the syllabified training set
with ONC tags is performed by the following sim-
ple algorithm. In the first stage, all letters from the
set {a, e, i, o, u} are marked as vowels, while the re-
maining letters are marked as consonants. Next, we
examine all the instances of the letter y. If a y is both
preceded and followed by a consonant, we mark that
instance as a vowel rather than a consonant. In the
second stage, the first group of consecutive vowels
in each syllable is tagged as nucleus. All letters pre-
ceding the nucleus are then tagged as onset, while
all letters following the nucleus are tagged as coda.
Our development set experiments suggested that
numbering ONC tags increases their performance.
Under the Numbered ONC tag scheme, the single-
syllable word stealth is labeled ?O1 O2 N1 N2 C1
C2 C3?.
A disadvantage of Numbered ONC tags is that,
unlike positional tags, they do not represent sylla-
ble breaks explicitly. Within the ONC framework,
we need the conjunction of two tags (such as an N1
tag followed by an O1 tag) to represent the division
between syllables. This drawback can be overcome
by combining ONC tags and NB tags in a hybrid
Break ONC tag scheme. Using Break ONC tags,
the word lev-i-ty is annotated as ?O N CB NB O N?.
The ?NB? tag indicates a letter is both part of the
nucleus and before a syllable break, while the ?N?
tag represents a letter that is part of a nucleus but
in the middle of a syllable. In this way, we get the
best of both worlds: tags that encapsulate informa-
tion about syllable structure, while also representing
syllable breaks explicitly with a single tag.
4.2 Emission Features
SVM-HMM predicts a tag for each letter in a word,
so emission features use aspects of the input to help
predict the correct tag for a specific letter. Consider
the tag for the letter o in the word immorally. With
a traditional HMM, we consider only that it is an
o being emitted, and assess potential tags based on
that single letter. The SVM framework is less re-
strictive: we can include o as an emission feature,
but we can also include features indicating that the
preceding and following letters are m and r respec-
tively. In fact, there is no reason to confine ourselves
to only one character on either side of the focus let-
ter.
After experimenting with the development set, we
decided to include in our feature set a window of
eleven characters around the focus character, five
on either side. Figure 1 shows that performance
gains level off at this point. Special beginning- and
end-of-word characters are appended to words so
that every letter has five characters before and af-
ter. We also experimented with asymmetric context
windows, representing more characters after the fo-
cus letter than before, but we found that symmetric
context windows perform better.
Because our learner is effectively a linear classi-
fier, we need to explicitly represent any important
conjunctions of features. For example, the bigram
bl frequently occurs within a single English sylla-
ble, while the bigram lb generally straddles two syl-
lables. Similarly, a fourgram like tion very often
571
Figure 1: Word accuracy as a function of the window size
around the focus character, using unigram features on the
development set.
forms a syllable in and of itself. Thus, in addition
to the single-letter features outlined above, we also
include in our representation any bigrams, trigrams,
four-grams, and five-grams that fit inside our con-
text window. As is apparent from Figure 2, we see
a substantial improvement by adding bigrams to our
feature set. Higher-order n-grams produce increas-
ingly smaller gains.
Figure 2: Word accuracy as a function of maximum n-
gram size on the development set.
In addition to these primary n-gram features,
we experimented with linguistically-derived fea-
tures. Intuitively, basic linguistic knowledge, such
as whether a letter is a consonant or a vowel, should
be helpful in determining syllabification. However,
our experiments suggested that including features
like these has no significant effect on performance.
We believe that this is caused by the ability of the
SVM to learn such generalizations from the n-gram
features alone.
5 Syllabification Experiments
In this section, we will discuss the results of our best
emission feature set (five-gram features with a con-
text window of eleven letters) on held-out unseen
test sets. We explore several different languages and
datasets, and perform a brief error analysis.
5.1 Datasets
Datasets are especially important in syllabification
tasks. Dictionaries sometimes disagree on the syl-
labification of certain words, which makes a gold
standard difficult to obtain. Thus, any reported ac-
curacy is only with respect to a given set of data.
In this paper, we report the results of experi-
ments on two datasets: CELEX and NETtalk. We
focus mainly on CELEX, which has been devel-
oped over a period of years by linguists in the
Netherlands. CELEX contains English, German,
and Dutch words, and their orthographic syllabifi-
cations. We removed all duplicates and multiple-
word entries for our experiments. The NETtalk dic-
tionary was originally developed with the L2P task
in mind. The syllabification data in NETtalk was
created manually in the phoneme domain, and then
mapped directly to the letter domain.
NETtalk and CELEX do not provide the same
syllabification for every word. There are numer-
ous instances where the two datasets differ in a per-
fectly reasonable manner (e.g. for-ging in NETtalk
vs. forg-ing in CELEX). However, we argue that
NETtalk is a vastly inferior dataset. On a sample of
50 words, NETtalk agrees with Merriam-Webster?s
syllabifications in only 54% of instances, while
CELEX agrees in 94% of cases. Moreover, NETtalk
is riddled with truly bizarre syllabifications, such as
be-aver, dis-hcloth and som-ething. These syllabifi-
cations make generalization very hard, and are likely
to complicate the L2P task we ultimately want to
accomplish. Because previous work in English pri-
marily used NETtalk, we report our results on both
datasets. Nevertheless, we believe NETtalk is un-
suitable for building a syllabification model, and that
results on CELEX are much more indicative of the
efficacy of our (or any other) approach.
At 20K words, NETtalk is much smaller than
CELEX. For NETtalk, we randomly divide the data
into 13K training examples and 7K test words. We
572
randomly select a comparably-sized training set for
our CELEX experiments (14K), but test on a much
larger, 25K set. Recall that 5K training examples
were held out as a development set.
5.2 Results
We report the results using two metrics. Word ac-
curacy (WA) measures how many words match the
gold standard. Syllable break error rate (SBER) cap-
tures the incorrect tags that cause an error in syl-
labification. Word accuracy is the more demand-
ing metric. We compare our system to Syllabifica-
tion by Analogy (SbA), the best existing system for
English (Marchand and Damper, 2007). For both
CELEX and NETtalk, SbA was trained and tested
with the same data as our structured SVM approach.
Data Set Method WA SBER
CELEX
NB tags 86.66 2.69
Numbered NB 89.45 2.51
Numbered ONC 89.86 2.50
Break ONC 89.99 2.42
SbA 84.97 3.96
NETtalk Numbered NB 81.75 5.01SbA 75.56 7.73
Table 1: Syllabification performance in terms of word ac-
curacy and syllable break error percentage.
Table 1 presents the word accuracy and syllable
break error rate achieved by each of our tag sets on
both the CELEX and NETtalk datasets. Of our four
tag sets, NB tags perform noticeably worse. This is
an important result because it demonstrates that it is
not sufficient to simply model a syllable?s bound-
aries; we must also model a syllable?s length or
structure to achieve the best results. Given the simi-
larity in word accuracy scores, it is difficult to draw
definitive conclusions about the remaining three tags
sets, but it does appear that there is an advantage to
modeling syllable structure, as both ONC tag sets
score better than the best NB set.
All variations of our system outperform SbA on
both datasets. Overall, our best tag set lowers the er-
ror rate by one-third, relative to SbA?s performance.
Note that we employ only numbered NB tags for
the NETtalk test; we could not apply structural tag
schemes to the NETtalk training data because of its
bizarre syllabification choices.
Our higher level of accuracy is also achieved more
efficiently. Once a model is learned, our system
can syllabify 25K words in about a minute, while
SbA requires several hours (Marchand, 2007). SVM
training times vary depending on the tag set and
dataset used, and the number of training examples.
On 14K CELEX examples with the ONC tag set,
our model trained in about an hour, on a single-
processor P4 3.4GHz processor. Training time is,
of course, a one-time cost. This makes our approach
much more attractive for inclusion in an actual L2P
system.
Figure 3 shows our method?s learning curve. Even
small amounts of data produce adequate perfor-
mance ? with only 2K training examples, word ac-
curacy is already over 75%. Using a 60K training
set and testing on a held-out 5K set, we see word
accuracies climb to 95.65%.
Figure 3: Word accuracy as function of the size of the
training data.
5.3 Error Analysis
We believe that the reason for the relatively low per-
formance of unnumbered NB tags is the weakness of
the signal coming from NB emission features. With
the exception of q and x, every letter can take on
either an N tag or a B tag with almost equal proba-
bility. This is not the case with Numbered NB tags.
Vowels are much more likely to have N2 or N3 tags
(because they so often appear in the middle of a
syllable), while consonants take on N1 labels with
greater probability.
The numbered NB and ONC systems make many
of the same errors, on words that we might expect to
573
cause difficulty. In particular, both suffer from be-
ing unaware of compound nouns and morphological
phenomena. All three systems, for example, incor-
rectly syllabify hold-o-ver as hol-dov-er. This kind
of error is caused by a lack of knowledge of the com-
ponent words. The three systems also display trou-
ble handling consecutive vowels, as when co-ad-ju-
tors is syllabified incorrectly as coad-ju-tors. Vowel
pairs such as oa are not handled consistently in En-
glish, and the SVM has trouble predicting the excep-
tions.
5.4 Other Languages
We take advantage of the language-independence of
Numbered NB tags to apply our method to other lan-
guages. Without even a cursory knowledge of Ger-
man or Dutch, we have applied our approach to these
two languages.
# Data Points Dutch German
? 50K 98.20 98.81
? 250K 99.45 99.78
Table 2: Syllabification performance in terms of word ac-
curacy percentage.
We have randomly selected two training sets from
the German and Dutch portions of CELEX. Our
smaller model is trained on ? 50K words, while our
larger model is trained on ? 250K. Table 2 shows
our performance on a 30K test set held out from both
training sets. Results from both the small and large
models are very good indeed.
Our performance on these language sets is clearly
better than our best score for English (compare at
95% with a comparable amount of training data).
Syllabification is a more regular process in German
and Dutch than it is in English, which allows our
system to score higher on those languages.
Our method?s word accuracy compares favor-
ably with other methods. Bouma?s finite state ap-
proach for Dutch achieves 96.49% word accuracy
using 50K training points, while we achieve 98.20%.
With a larger model, trained on about 250K words,
Bouma achieves 98.17% word accuracy, against our
99.45%. Demberg (2006) reports that her HMM
approach for German scores 97.87% word accu-
racy, using a 90/10 training/test split on the CELEX
dataset. On the same set, Demberg et al (2007) ob-
tain 99.28% word accuracy by applying the system
of Schmid et al (2007). Our score using a similar
split is 99.78%.
Note that none of these scores are directly com-
parable, because we did not use the same train-test
splits as our competitors, just similar amounts of
training and test data. Furthermore, when assem-
bling random train-test splits, it is quite possible
that words sharing the same lemma will appear in
both the training and test sets. This makes the prob-
lem much easier with large training sets, where the
chance of this sort of overlap becomes high. There-
fore, any large data results may be slightly inflated
as a prediction of actual out-of-dictionary perfor-
mance.
6 L2P Performance
As we stated from the outset, one of our primary mo-
tivations for exploring orthographic syllabification is
the improvements it can produce in L2P systems.
To explore this, we tested our model in conjunc-
tion with a recent L2P system that has been shown
to predict phonemes with state-of-the-art word ac-
curacy (Jiampojamarn et al, 2007). Using a model
derived from training data, this L2P system first di-
vides a word into letter chunks, each containing one
or two letters. A local classifier then predicts a num-
ber of likely phonemes for each chunk, with confi-
dence values. A phoneme-sequence Markov model
is then used to select the most likely sequence from
the phonemes proposed by the local classifier.
Syllabification English Dutch German
None 84.67 91.56 90.18
Numbered NB 85.55 92.60 90.59
Break ONC 85.59 N/A N/A
Dictionary 86.29 93.03 90.57
Table 3: Word accuracy percentage on the letter-to-
phoneme task with and without the syllabification infor-
mation.
To measure the improvement syllabification can
effect on the L2P task, the L2P system was trained
with syllabified, rather than unsyllabified words.
Otherwise, the execution of the L2P system remains
unchanged. Data for this experiment is again drawn
574
from the CELEX dictionary. In Table 3, we re-
port the average word accuracy achieved by the L2P
system using 10-fold cross-validation. We report
L2P performance without any syllabification infor-
mation, with perfect dictionary syllabification, and
with our small learned models of syllabification.
L2P performance with dictionary syllabification rep-
resents an approximate upper bound on the contribu-
tions of our system.
Our syllabification model improves L2P perfor-
mance. In English, perfect syllabification produces
a relative error reduction of 10.6%, and our model
captures over half of the possible improvement, re-
ducing the error rate by 6.0%. To our knowledge,
this is the first time a syllabification model has im-
proved L2P performance in English. Previous work
includes Marchand and Damper (2007)?s experi-
ments with SbA and the L2P problem on NETtalk.
Although perfect syllabification reduces their L2P
relative error rate by 18%, they find that their learned
model actually increases the error rate. Chen (2003)
achieved word accuracy of 91.7% for his L2P sys-
tem, testing on a different dictionary (Pronlex) with
a much larger training set. He does not report word
accuracy for his syllabification model. However, his
baseline L2P system is not improved by adding a
syllabification model.
For Dutch, perfect syllabification reduces the rela-
tive L2P error rate by 17.5%; we realize over 70% of
the available improvement with our syllabification
model, reducing the relative error rate by 12.4%.
In German, perfect syllabification produces only
a small reduction of 3.9% in the relative error rate.
Experiments show that our learned model actually
produces a slightly higher reduction in the relative
error rate. This anomaly may be due to errors or
inconsistencies in the dictionary syllabifications that
are not replicated in the model output. Previously,
Demberg (2006) generated statistically significant
L2P improvements in German by adding syllabifi-
cation pre-processing. However, our improvements
are coming at a much higher baseline level of word
accuracy ? 90% versus only 75%.
Our results also provide some evidence that syl-
labification preprocessing may be more beneficial
to L2P than morphological preprocessing. Dem-
berg et al (2007) report that oracle morphological
annotation produces a relative error rate reduction
of 3.6%. We achieve a larger decrease at a higher
level of accuracy, using an automatic pre-processing
technique. This may be because orthographic syl-
labifications already capture important facts about a
word?s morphology.
7 Conclusion
We have applied structured SVMs to the syllabifi-
cation problem, clearly outperforming existing sys-
tems. In English, we have demonstrated a 33% rela-
tive reduction in error rate with respect to the state of
the art. We used this improved syllabification to in-
crease the letter-to-phoneme accuracy of an existing
L2P system, producing a system with 85.5% word
accuracy, and recovering more than half of the po-
tential improvement available from perfect syllab-
ification. This is the first time automatic syllabi-
fication has been shown to improve English L2P.
Furthermore, we have demonstrated the language-
independence of our system by producing compet-
itive orthographic syllabification solutions for both
Dutch and German, achieving word syllabification
accuracies of 98% and 99% respectively. These
learned syllabification models also improve accu-
racy for German and Dutch letter-to-phoneme con-
version.
In future work on this task, we plan to explore
adding morphological features to the SVM, in an ef-
fort to overcome errors in compound words and in-
flectional forms. We would like to experiment with
performing L2P and syllabification jointly, rather
than using syllabification as a pre-processing step
for L2P. We are also working on applying our
method to phonetic syllabification.
Acknowledgements
Many thanks to Sittichai Jiampojamarn for his help
with the L2P experiments, and to Yannick Marchand
for providing the SbA results.
This research was supported by the Natural Sci-
ences and Engineering Research Council of Canada
and the Alberta Informatics Circle of Research Ex-
cellence.
References
Yasemin Altun, Ioannis Tsochantaridis, and Thomas
Hofmann. 2003. Hidden Markov support vector ma-
575
chines. Proceedings of the 20th International Confer-
ence on Machine Learning (ICML), pages 3?10.
Susan Bartlett. 2007. Discriminative approach to auto-
matic syllabification. Master?s thesis, Department of
Computing Science, University of Alberta.
Gosse Bouma. 2002. Finite state methods for hyphen-
ation. Natural Language Engineering, 1:1?16.
Stanley Chen. 2003. Conditional and joint models for
grapheme-to-phoneme conversion. Proceedings of the
8th European Conference on Speech Communication
and Technology (Eurospeech).
Walter Daelemans and Antal van den Bosch. 1992.
Generalization performance of backpropagation learn-
ing on a syllabification task. Proceedings of the 3rd
Twente Workshop on Language Technology, pages 27?
38.
Walter Daelemans, Antal van den Bosch, and Ton Wei-
jters. 1997. IGTree: Using trees for compression and
classification in lazy learning algorithms. Artificial In-
telligence Review, pages 407?423.
Vera Demberg, Helmust Schmid, and Gregor Mo?hler.
2007. Phonological constraints and morphological
preprocessing for grapheme-to-phoneme conversion.
Proceedings of the 45th Annual Meeting of the Associ-
ation of Computational Linguistics (ACL).
Vera Demberg. 2006. Letter-to-phoneme conversion for
a German text-to-speech system. Master?s thesis, Uni-
versity of Stuttgart.
Philip Babcock Gove, editor. 1993. Webster?s Third New
International Dictionary of the English Language,
Unabridged. Merriam-Webster Inc.
Sittichai Jiampojamarn, Grzegorz Kondrak, and Tarek
Sherif. 2007. Applying many-to-many alignments
and hidden Markov models to letter-to-phoneme con-
version. Proceedings of the Human Language Tech-
nology Conference of the North American Chapter
of the Association of Computational Linguistics HLT-
NAACL, pages 372?379.
Brigitte Krenn. 1997. Tagging syllables. Proceedings of
Eurospeech, pages 991?994.
Yannick Marchand and Robert Damper. 2007. Can syl-
labification improve pronunciation by analogy of En-
glish? Natural Language Engineering, 13(1):1?24.
Yannick Marchand, Connie Adsett, and Robert Damper.
2007. Evaluation of automatic syllabification algo-
rithms for English. In Proceedings of the 6th Inter-
national Speech Communication Association (ISCA)
Workshop on Speech Synthesis.
Yannick Marchand. 2007. Personal correspondence.
Karin Mu?ller. 2001. Automatic detection of syllable
boundaries combining the advantages of treebank and
bracketed corpora training. Proceedings on the 39th
Meeting of the Association for Computational Linguis-
tics (ACL), pages 410?417.
Steve Pearson, Roland Kuhn, Steven Fincke, and Nick
Kibre. 2000. Automatic methods for lexical stress as-
signment and syllabification. In Proceedings of the 6th
International Conference on Spoken Language Pro-
cessing (ICSLP), pages 423?426.
Helmut Schmid, Bernd Mo?bius, and Julia Weidenkaff.
2007. Tagging syllable boundaries with joint N-gram
models. Proceedings of Interspeech.
Ioannis Tsochantaridis, Thomas Hofmann, Thorsten
Joachims, and Yasemin Altun. 2004. Support vec-
tor machine learning for interdependent and structured
output spaces. Proceedings of the 21st International
Conference on Machine Learning (ICML), pages 823?
830.
Antal van den Bosch. 1997. Learning to pronounce
written words: a study in inductive language learning.
Ph.D. thesis, Universiteit Maastricht.
576
