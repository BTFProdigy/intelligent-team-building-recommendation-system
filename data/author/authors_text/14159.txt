Coling 2010: Poster Volume, pages 144?152,
Beijing, August 2010
The True Score of Statistical Paraphrase Generation
Jonathan Chevelu1,2 Ghislain Putois2 Yves Lepage3
(1) GREYC, universite? de Caen Basse-Normandie
(2) Orange Labs
(3) Waseda University
{jonathan.chevelu,ghislain.putois}@orange-ftgroup.com,
yves.lepage@aoni.waseda.jp
Abstract
This article delves into the scoring func-
tion of the statistical paraphrase genera-
tion model. It presents an algorithm for
exact computation and two applicative ex-
periments. The first experiment analyses
the behaviour of a statistical paraphrase
generation decoder, and raises some is-
sues with the ordering of n-best outputs.
The second experiment shows that a major
boost of performance can be obtained by
embedding a true score computation in-
side a Monte-Carlo sampling based para-
phrase generator.
1 Introduction
A paraphrase generator is a program which, given
a source sentence, produces a new sentence with
almost the same meaning. The modification place
is not imposed but the paraphrase has to differ
from the original sentence.
Paraphrase generation is useful in applications
where it is needed to choose between different
forms to keep the most fit. For instance, automatic
summary can be seen as a particular paraphras-
ing task (Barzilay and Lee, 2003) by selecting the
shortest paraphrase. They can help human writers
by proposing alternatives and having them choose
the most appropriate (Max and Zock, 2008).
Paraphrases can also be used to improve nat-
ural language processing (NLP) systems. In
this direction, (Callison-Burch et al, 2006) tried
to improve machine translations by enlarging
the coverage of patterns that can be translated.
In the same way, most NLP systems like in-
formation retrieval (Sekine, 2005) or question-
answering (Duclaye et al, 2003), based on pat-
tern recognition, can be improved by a paraphrase
generator.
Most of these applications need a n-best set of
solutions in order to rerank them according to a
task-specific criterion.
In order to produce the paraphrases, a promis-
ing approach is to see the paraphrase genera-
tion problem as a statistical translation problem.
In that approach, the target language becomes
the same as the source language (Quirk et al,
2004; Bannard and Callison-Burch, 2005; Max
and Zock, 2008).
The first difficulty of this approach is the need
of a paraphrase table. A paraphrase table is a
monolingual version of a translation table in the
statistical machine translation (SMT) field. In this
field, the difficulty is basically overcome by us-
ing huge aligned bilingual corpora like the Eu-
roparl (Koehn, 2005) corpus. In the paraphrase
generation field, one needs a huge aligned mono-
lingual corpus to build a paraphrase table.
The low availability of such monolingual cor-
pora nurtures researches in order to find heuris-
tics to produce them (Barzilay and Lee, 2003;
Quirk et al, 2004). On the other hand, an interest-
ing method proposed by (Bannard and Callison-
Burch, 2005) tries to make a paraphrase table us-
ing a translation table learned on bilingual cor-
pora. The method uses a well-known heuris-
tic (Lepage and Denoual, 2005) which says that
if two sentences have the same translation, then
they should be paraphrases of each others.
Another aspect, less studied, is the generation
process of paraphrases, i.e. the decoding process
in SMT. This process is subject to combinatorial
144
explosions. Heuristics are then frequently used to
drive the exploration process in the a priori in-
tractable high dimensional spaces. On the one
hand, these heuristics are used to build a para-
phrase step by step according to the paraphrase
table. On the other hand, they try to evaluate the
relevance of a step according to the global para-
phrase generation model. The SMT model score
is related to the path followed to generate a para-
phrase. Because of the step-by-step computation,
different ways can produce the same paraphrase,
but with different scores. Amongst these scores,
the best one is the true score of a paraphrase ac-
cording to the SMT model.
Most paraphrase generators use some standard
SMT decoding algorithms (Quirk et al, 2004) or
some off-the-shelf decoding tools like MOSES.
The goal of these decoders is to find the best path
in the lattice produced by the paraphrase table.
This is basically achieved by using dynamic pro-
gramming ? especially the Viterbi algorithm ? and
beam searching (Koehn et al, 2007). The best
paraphrase proposed by these programs is known
not to be the optimal paraphrase. One can even
question if the score returned is the true score.
We first show in Section 2 that in the particular
domain of statistical paraphrase generation, one
can compute true a posteriori scores of generated
paraphrases. We then explore some applications
of the true score algorithm in the paraphrase gen-
eration field. In Section 3, we show that scores re-
turned by SMT decoders are not always true scores
and they plague the ranking of output n-best solu-
tions. In Section 4, we show that the true score can
give a major boost for holistic paraphrases gener-
ators which do not rely on decoding approaches.
2 True Score Computing
2.1 Context
The phrase based SMT model (Koehn et al, 2003)
can be transposed to paraphrase generation as fol-
lows:
t? = arg max
t
P (t)? P (s|t, B)
where s is the source sentence, t the target sen-
tence i.e. the paraphrase, t? the best paraphrase
and B a model of the noisy channel between the
source and target languages i.e. the paraphrase ta-
ble. This can be decomposed into:
t? ? arg max
t,I
P (t)
?
i?I
P (sIi |tIi , B)
where I is a partition of the source sentence and
xIi the ith segment in the sentence x. For a given
couple of s, t sentences, it exists several segmen-
tations I with different probabilities.
This is illustrated in Example 1. Depending on
the quality of the paraphrase table, one can find up
to thousands of paraphrase segments for a source
sentence. Note that the generated paraphrases are
not always semantically or even syntactically cor-
rect, as in P2. P3 illustrates the score evaluation
problem: it can be generated by applying to the
source sentence the sequences of transformations
{T1, T2} , {T1, T4, T5} or even {T5, T1, T4}
. . .
Example 1 Decoding
Source sentence:
The dog runs after the young cat.
Paraphrase table excerpt:
T1: P(the beast | the dog) = 0.8
T2: P(the kitten | the young cat) = 0.7
T3: P(after it | after the) = 0.4
T4: P(the | the young) = 0.05
T5: P(cat | kitten) = 0.1
Some possible generated paraphrases:
P1: the beast runs after the young cat.
P2: *the dog runs after it young cat.
P3: the beast runs after the kitten.
We define the score of a potential paraphrase t
following a segmentation I as:
ZIt = P (t)
?
i?I
P (sIi |tIi , B)
The true score of a potential paraphrase t is de-
fined as:
Z?t = maxI Z
I
t
145
Because of high-dimension problems, decoders
apply sub-optimal algorithms to search for t?.
They produce estimated solutions over all possible
paraphrases t and over all possible segmentations
I . Actually, for a given paraphrase t, they con-
sider only some ZIt where they should estimate
Z?I . SMT decoders are overlooking the partition-
ing step in their computations.
There is no reason for the decoder solution to
reach the true score. Troubles arise when one
needs the scores of generated paraphrases, for in-
stance when the system must produce an ordered
n-best solution. What is the relevance of the es-
timated scores ? and orders ? with respect to the
true scores ? and orders ? of the model? Is the true
score able to help the generation process?
2.2 Algorithm
Let us first adopt the point of view proposed
in (Chevelu et al, 2009). The paraphrase gener-
ation problem can be seen as an exploration prob-
lem. We seek the best paraphrase according to a
scoring function in a space to search by applying
successive transformations. This space is com-
posed of states connected by actions. An action
is a transformation rule with a place where it ap-
plies in the sentence. States are a sentence with
a set of possible actions. Applying an action in
a given state consists in transforming the sentence
of the state and removing all rules that are no more
applicable. In this framework, each state, except
the root, can be a final state.
The SMT approach fits within this point of view.
However, generation and evaluation need not to be
coupled any longer. Computing the true score of
a generated paraphrase is in reality a task com-
putationally easier than generating the best para-
phrases. Once the target result is fixed, the num-
ber of sequences transforming the source sentence
into the target paraphrase becomes computation-
ally tractable under a reasonable set of assump-
tions:
A1: the transformation rules have disjoint sup-
ports (meaning that no rule in the sequence
should transform a segment of the sentence
already transformed by one of of the previ-
ous applied rules) ;
A2: no reordering model is applied during the
paraphrasing transformation.
Under this set of assumptions, the sequence (or-
dered) of transformation rules becomes a set (un-
ordered) of transformation rules. One can there-
fore easily determine all the sets of transforma-
tion rules from the source sentence to the tar-
get paraphrase: they are a subset of the cross-
product set of every transformation rule with a
source included in the source sentence and with
a result included in the target paraphrase. And
this cross-product set remains computationally
tractable. Note that to guarantee a solution, the
corpus of all rules should be augmented with an
identity rule for each word of the source sentence
(with an associated probability of applicability set
to 1) missing in the paraphrase table.
The algorithm for computing ex post the true
score is given on algorithm 1.
Algorithm 1 Algorithm for true score
Let S be the source sentence.
Let T be the target sentence.
Let R : sR ? tR be a transformation rule
Let map : (S, T )? C be a function
Let C = {?}
?shead|S = shead.stail,
?R ? {?|sR = shead, T = tR.ttail}
C = C ? ({R}?map(Stail, Ttail))
return C
Let score be the scoring function for a transfor-
mation rule set
truescoreS,?(T ) = arg maxc?map(S,T )(score(c))
For our toy example, we would get the steps
shown in Example 2.
3 True Score of SMT Decoders
We have shown that it is possible to compute
the true score according to the paraphrase model.
We now evaluate scores from a state-of-the-art
146
Example 2 True Score Computation
Generated sets:
{R1}, {R1, R3}, {R1, R2},
{R1, R4}, {R1, R4, R5},
{R3},
{R2},
{R4}, {R4, R5},
{R5}
For a better readability, all identity rules are omitted.
The true scores are computed as in the following examples:
score( ?the dog runs after the small cat.? ?
?the beast runs after it small cat?)
= score({R1})
score( ?the dog runs after the small cat.? ?
?the beast runs after the kitten?)
= max(score({R1, R2}), score({R1, R4, R5}))
decoder against this baseline. In particular, we
are interested in the order of n-best outputs. We
use the MOSES decoder (Koehn et al, 2007) as a
representative SMT decoder inside the system de-
scribed below.
3.1 System description
Paraphrase generation tools based on SMT meth-
ods need a language model and a paraphrase table.
Both are computed on a training corpus.
The language models we use are n-gram lan-
guage models with back-off. We use SRILM (Stol-
cke, 2002) with its default parameters for this pur-
pose. The length of the n-grams is five.
To build a paraphrase table, we use a variant
of the construction method via a pivot language
proposed in (Bannard and Callison-Burch, 2005).
The first step consists in building a bilingual trans-
lation table from the aligned corpus. Given a
source phrase si and another phrase ti in a differ-
ent language, a bilingual translation table provides
the two probabilities p(si|ti) and p(ti|si). We use
GIZA++ (Och and Ney, 2003) with its default pa-
rameters to produce phrase alignments. The para-
phrase table is then built from the phrase transla-
tion table. The probability for a phrase si to be
paraphrased by a phrase s?i in the same language
is estimated by the sum of each round-trip from si
to s?i through any phrase ti of a pivot language.
The construction of this table is very simple.
Given a bilingual translation table sorted by pivot
phrases, the algorithm retrieves all the phrases
linked with the same pivot (named a pivot clus-
ter). For each ordered pair of phrases, the program
assigns a probability that is the product of there
probabilities. This process realizes a self-join of
the bilingual translation table. It produces a para-
phrase table composed of tokens, instead of items.
The program just needs to sum up all probabilities
for all entries with identical paraphrase tokens to
produce the final paraphrase table.
Three heuristics are used to prune the para-
phrase table. The first heuristic prunes any entry
in the paraphrase table composed of tokens with a
probability lower than a threshold . The second,
called pruning pivot heuristic, consists in deleting
all pivot clusters larger than a threshold ? . The
last heuristic keeps only the ?most probable para-
phrases for each source phrase in the final para-
phrase table. For this study, we empirically fix
 = 10?5, ? = 200 and ? = 20.
The MOSES scoring function is set by four
weighting factors ??, ?LM , ?D, ?W . Conven-
tionally, these four weights are adjusted during a
tuning step on a training corpus. The tuning step is
inappropriate for paraphrasing because there is no
such tuning corpus available. We empirically set
?? = 1, ?LM = 1, ?D = 10 and ?W = 0. This
means that the paraphrase table and the language
model are given the same weight, no reordering is
allowed and no specific sentence length is favored.
3.2 Experimental Protocol
For experiments reported in this paper, we use
one of the largest, multi-lingual, freely available
aligned corpus, Europarl (Koehn, 2005). It con-
sists of European parliament debates. We choose
French as the language for paraphrases and En-
glish as the pivot language. For this pair of
languages, the corpus consists of 1,723,705 sen-
tences. Note that the sentences in this corpus
are long, with an average length of 30 words per
French sentence and 27.8 for English. We ran-
domly extract 100 French sentences as a test cor-
147
pus.
For each source sentence from the test corpus,
the SMT decoder tries to produce a 100-best dis-
tinct paraphrase sequence. Using the algorithm 1,
we compute the true score of each paraphrase and
rerank them. We then compare orders output by
the decoder with the true score order by using the
Kendall rank correlation coefficient (?A) (Kendall,
1938). In this context, the Kendall rank corre-
lation coefficient considers each couple of para-
phrases and checks if their relative order is pre-
served by the reranking. The ?A formula is:
?A =
np ? ni
1
2n(n? 1)
where np the number of preserved orders, nd the
number of inverted orders and n the number of el-
ements in the sequence. The coefficient provides a
score ? between -1 and 1 ? that can be interpreted
as a correlation coefficient between the two or-
ders. In order to compare same length sequences,
we filter out source sentences when MOSES can
not produce enough distinct paraphrases. The test
corpus is therefore reduced to 94 sentences.
3.3 Results
The evolution of ?A means relative to the length
of the n-best sequence is given Figure 1. The ?A
means drops to 0.73 with a standard deviation of
0.41 for a 5-best sequence which means that the
orders are clearly different but not decorrelated.
A finer study of the results reveals that amongst
the generated paraphrases, 32% have seen their
score modified. 18% of the MOSES 1-best para-
phrases were not optimal anymore after the true
score reranking. After reranking, the old top best
solutions have dropped to a mean rank of 2.0 ?
17.7 (40th rank at worse). When considering
only the paraphrases no longer optimal, they have
dropped to a mean rank of 6.8? 12.9.
From the opposite point of view, new top para-
phrases after reranking have come from a mean
rank of 4.4 ? 12.1. When considering only the
paraphrases that were not optimal, they have come
from a mean rank of 21.2?23.5. Some have come
from the 67th rank. Even an a posteriori rerank-
ing would not have retrieved this top solution if
the size of MOSES n-best list were too short. This
n-best paraphrase sequence size
m
ea
n
s
Ke
n
da
ll
ra
n
k
co
rr
el
at
io
n
co
ef
fic
ie
n
t
10 20 30 40 50 60 70 80 90 1000.7
0.75
0.8
0.85
0.9
0.95
Figure 1: Evolution of ?A means relative to the
length of the n-best sequence
advocates for a direct embedding of the true score
function inside the generation process.
In this section we have shown that MOSES
scores are not consistent with the true score as
expected from the paraphrase model. In partic-
ular, the n-best paraphrase sequence computed by
MOSES is not trustworthy while it is an input for
the task system.
4 True Score to boost Monte-Carlo
based Paraphrase Generation
There exist other less common approaches more
lenient than the Viterbi algorithm, which are holis-
tic, i.e. they work on the whole sentence rather
than step-by-step. The Monte-Carlo based Para-
phrase Generation algorithm (MCPG) proposed
in (Chevelu et al, 2009) turns out to be an inter-
esting algorithm for the study of paraphrase gen-
eration. It does not constraint the scoring function
to be incremental. In this section, we embed the
non incremental true score function in MCPG to
drive the generation step and produce n-best or-
ders compliant with the paraphrase model, and
show that the true score function can be used to
provide a major boost to the performance of such
148
an algorithm.
4.1 Description
The MCPG algorithm is a derivative of the Up-
per Confidence bound applied to Tree algorithm
(UCT). UCT (Kocsis and Szepesva?ri, 2006), a
Monte-Carlo planning algorithm, has recently be-
come popular in two-player game problems.
UCT has some interesting properties:
? it expands the search tree non-uniformly and
favours the most promising sequences, with-
out pruning branch;
? it can deal with high branching factors;
? it is an any-time algorithm and returns best
solutions found so far when interrupted;
? it does not require expert domain knowledge
to evaluate states.
These properties make it ideally suited for prob-
lems with high branching factors and for which
there is no strong evaluation function.
For the same reasons, this algorithm is inter-
esting for paraphrase generation. In particular, it
does not put constraint on the scoring function. A
diagram of the MCPG algorithm is presented Fig-
ure 2.
The main part of the algorithm is the sampling
step. An episode of this step is a sequence of
states and actions, s1, a1, s2, a2, . . . , sT , from the
root state to a final state. Basically, a state is a
partially generated paraphrase associated with a
set of available actions. A final state is a poten-
tial paraphrase. An action is a transformation rule
from the paraphrase table. During an episode con-
struction, there are two ways to select the action ai
to perform from a state si.
If the current state was already explored in a
previous episode, the action is selected accord-
ing to a compromise between exploration and ex-
ploitation. This compromise is computed using
the UCB-Tunned formula (Auer et al, 2001) as-
sociated with the RAVE heuristic (Gelly and Sil-
ver, 2007). If the current state is explored for
the first time, its score is estimated using Monte-
Carlo sampling. In other words, to complete the
Source sentence
Exploration/exploitation
compromise
State
already
explored?
Monte-Carlo sampling
Enough
iterations?
New root selection step
Final
state?
Output paraphrase
Sampling step
Yes
No
Yes
No
No
Yes
Figure 2: The MCPG algorithm.
149
episode, the actions ai, ai+1, . . . , aT?1, aT are se-
lected randomly until reaching a final state.
At the end of each episode, a reward is com-
puted for the final state sT using a scoring func-
tion, and the value of each (state, action) pair of
the episode is updated. Then, the algorithm com-
putes another episode with the new values.
Periodically, the sampling step is stopped and
the best action at the root state is selected. This
action is then definitively applied and a sampling
is restarted from the new root state. The action
sequence is incrementally built and selected after
being sufficiently sampled. For our experiment,
we have chosen to stop sampling regularly after a
fixed amount ? of episodes.
The adaptation of the original algorithm takes
place in the (state, action) value updating proce-
dure. Since the goal of the algorithm is to max-
imise a scoring function, it uses the maximum
reachable score from a state as value instead of
the score expectation. This algorithm suits the
paradigm recalled in Section 2 for paraphrase gen-
eration.
To provide scores comparable with the para-
phrase model scores, the standard version of
MCPG has to apply rules until the whole source
sentence is covered. With this behaviour, MCPG
acts in a monolingual ?translator? mode.
The embedding of the true score algorithm in
MCPG has given meaningful scores to all states.
The algorithm needs not to ?translate? the whole
sentence to get a potential paraphrase and its
score. This MCPG algorithm in ?true-score? mode
can choose to stop its processing with segments
still unchanged, which solves, amongst others,
out-of-vocabulary questions found in decoder-
based approaches.
4.2 Experimental Protocol
For this experiment, we reuse the paraphrase ta-
ble and the corpora generated for the experiment
presented in Section 3.2;
We compare the 1-best outputs from MOSES
reranked by the true score function and from
MCPG in both ?translator? and ?true-score?
modes. For MCPG systems, we set the following
parameters: ? = 100,000 iterations.
1-best paraphrase index
(ordered by MOSES reranked scores)
Pa
ra
ph
ra
se
sc
or
e
(in
lo
g)
20 40 60 80 100-500
-400
-300
-200
-100
0
Figure 3: Comparison of paraphrase generators.
Top: the MOSES baseline; middle and bold: the
?true-score? MCPG; down: the ?translator? MCPG.
The use of ?true-score? improves the MCPG per-
formances. MCPG reaches MOSES performance
level.
4.3 Results
Figure 3 presents a comparison between the
scores from each systems, ordered by MOSES
reranked scores.
The boost of performance gained by using true
scores inside the MCPG algorithm reaches a means
of 28.79 with a standard deviation of 34.19. The
mean difference between ?true-score? MCPG and
MOSES is ?14.13 (standard deviation 19.99). Al-
though the performance remains inferior to the
MOSES true score baseline, it still leads to an
improvement over the ?translator? MCPG system.
The later system has a mean difference of perfor-
mance with MOSES of?42.92 (standard deviation
of 40.14).
The true score reduces the number of transfor-
mations needed to generate a paraphrase, which
simplifies the exploration task. Moreover, it re-
duces the number of states in the exploration
space: two sets of transformations producing the
same paraphrase now leads to the same state.
These points explain why MCPG has become more
efficient.
Although MCPG is improved by embedding the
150
true score algorithm, there is still room for im-
provement. In its current version, MCPG does not
adapt the number of exploration episodes to the
input sentence.
5 Conclusion and perspectives
In this paper, we have developed a true scoring al-
gorithm adapted to the statistical paraphrase gen-
eration model. We have studied its impacts on a
common SMT decoder and a Monte-Carlo sam-
pling based paraphrase generator. It has revealed
that the n-best outputs by SMT decoders were not
viable. It has also proved useful in simplifying the
exploration task and in improving holistic para-
phrase generators.
Thanks to the boost introduced by the true score
algorithm in holistic paraphrase generators, their
performances are now on a par with scores pro-
duced by statistical translation decoders. More-
over, they produce guaranteed ordering, and en-
able the integration of a global task scoring func-
tion, which seems still out of reach for decoder-
based systems.
A more general problem remains open: what
do the scores and the orders output by the model
mean when compared to a human subjective eval-
uation?
In preliminary results on our test corpus, less
than 37% of the MOSES generated paraphrases can
be considered both syntactically correct and se-
mantically a paraphrase of their original sentence.
One could study the relations between scores from
the model and subjective evaluations to create pre-
dictive regression models. The true score algo-
rithm can autonomously score existing paraphrase
corpora which could be used to adapt the SMT tun-
ing step for paraphrase generation.
We note that the hundredth best paraphrases
from MOSES have a score close to the best para-
phrase: the mean difference is 5.9 (standard de-
viation 4.5) on our test corpus. This is smaller
than the mean difference score between MOSES
and MCPG. In (Chevelu et al, 2009), both systems
were rated similar by a subjective evaluation. One
could question the relevance of small score differ-
ences and why the best paraphrase should be se-
lected instead of the hundred next ones. Given the
current state of the art, the next step to improve
paraphrase generation does not lie in score opti-
misation but in refining the model and its com-
ponents: the language model and the paraphrase
table.
Human based evaluations reveal that the current
most important issue of paraphrase generation lies
in the syntax (Chevelu et al, 2009). It seems dif-
ficult to assess the syntax of a potential paraphrase
while not considering it as a whole, which is im-
possible with a local scoring function inherent to
the SMT decoding paradigm. Holistic paraphrase
generators have now reached a level of perfor-
mance comparable to SMT decoders, without suf-
fering from their limitations. They are paving the
way for experiments with more complex semantic
and linguistic models to improve paraphrase gen-
eration.
151
References
Auer, P., N. Cesa-Bianchi, and C. Gentile. 2001.
Adaptive and self-confident on-line learning algo-
rithms. Machine Learning.
Bannard, Colin and Chris Callison-Burch. 2005. Para-
phrasing with bilingual parallel corpora. In ACL
?05: Proceedings of the 43rd Annual Meeting on
Association for Computational Linguistics, pages
597?604, Morristown, NJ, USA. Association for
Computational Linguistics.
Barzilay, Regina and Lillian Lee. 2003. Learn-
ing to paraphrase: An unsupervised approach us-
ing multiple-sequence alignment. In HLT-NAACL
2003: Main Proceedings, pages 16?23.
Callison-Burch, Chris, Philipp Koehn, and Miles Os-
borne. 2006. Improved statistical machine transla-
tion using paraphrases. In Proceedings of the main
conference on Human Language Technology Con-
ference of the North American Chapter of the As-
sociation of Computational Linguistics, pages 17?
24, Morristown, NJ, USA. Association for Compu-
tational Linguistics.
Chevelu, Jonathan, Thomas Lavergne, Yves Lepage,
and Thierry Moudenc. 2009. Introduction of a new
paraphrase generation tool based on Monte-Carlo
sampling. In Su, Keh-Yih, Jian Su, Janyce Wiebe,
and Haizhou Li, editors, Proceedings of the ACL-
IJCNLP 2009 Conference Short Papers, pages 249?
252, Singapoure, August. Association for Computa-
tional Linguistics.
Duclaye, Florence, Franc?ois Yvon, and Olivier Collin.
2003. Learning paraphrases to improve a question-
answering system. In In Proceedings of the 10th
Conference of EACL Workshop Natural Language
Processing for Question-Answering, page 3541.
Gelly, Sylvain and David Silver. 2007. Combining on-
line and offline knowledge in UCT. In 24th Interna-
tional Conference on Machine Learning (ICML?07),
pages 273?280, June.
Kendall, Maurice G. 1938. A New Measure of Rank
Correlation. Biometrika, 1?2(30):81?89, June.
Kocsis, Levente and Csaba Szepesva?ri. 2006. Ban-
dit based monte-carlo planning. In 17th Euro-
pean Conference on Machine Learning, (ECML?06),
pages 282?293, September.
Koehn, Philipp, Franz Josef Och, and Daniel Marcu.
2003. Statistical phrase-based translation. In
Proceedings of the Human Language Technology
Conference of the North American Chapter of the
Association for Computational Linguistics (HLT-
NAACL), pages 48?54, Edmonton, May. Associa-
tion for Computational Linguistics.
Koehn, Philipp, Hieu Hoang, Alexandra Birch Mayne,
Christopher Callison-Burch, Marcello Federico,
Nicola Bertoldi, Brooke Cowan, Wade Shen, Chris-
tine Moran, Richard Zens, Chris Dyer, Ondrej Bo-
jar, Alexandra Constantin, and Evan Herbst. 2007.
Moses: Open source toolkit for statistical machine
translation. In Annual Meeting of the Association
for Computation Linguistics (ACL), Demonstration
Session, pages 177?180, June.
Koehn, Philipp. 2005. Europarl: A parallel corpus
for statistical machine translation. In Proceedings
of MT Summit.
Lepage, Yves and Etienne Denoual. 2005. Automatic
generation of paraphrases to be used as translation
references in objective evaluation measures of ma-
chine translation. In IWP2005.
Max, Aure?lien and Michael Zock. 2008. Looking
up phrase rephrasings via a pivot language. In
Proceedings of the 22nd International Conference
on Computational Linguistics (Coling 2008), pages
97?104, Manchester, UK, August. Coling 2008 Or-
ganizing Committee.
Och, Franz Josef and Hermann Ney. 2003. A sys-
tematic comparison of various statistical alignment
models. Computational Linguistics, 29(1):19?51.
Quirk, Chris, Chris Brockett, and Bill Dolan. 2004.
Monolingual machine translation for paraphrase
generation. In Lin, Dekang and Dekai Wu, edi-
tors, the 2004 Conference on Empirical Methods
in Natural Language Processing, pages 142?149.,
Barcelona, Spain, 25-26 July. Association for Com-
putational Linguistics.
Sekine, Satoshi. 2005. Automatic paraphrase dis-
covery based on context and keywords between ne
pairs. In Proceedings of International Workshop on
Paraphrase (IWP2005).
Stolcke, Andreas. 2002. Srilm ? an extensible lan-
guage modeling toolkit. In Proceedings of Interna-
tional Conference on Spoken Language Processing.
152
Proceedings of SIGDIAL 2010: the 11th Annual Meeting of the Special Interest Group on Discourse and Dialogue, pages 185?192,
The University of Tokyo, September 24-25, 2010. c?2010 Association for Computational Linguistics
Enhanced Monitoring Tools and Online Dialogue Optimisation Merged
into a New Spoken Dialogue System Design Experience
Ghislain Putois
Orange Labs
Lannion, France
Romain Laroche
Orange Labs
Issy-les-Moulineaux, France
firstname.surname@orange-ftgroup.com
Philippe Bretier
Orange Labs
Lannion, France
Abstract
Building an industrial spoken dialogue
system (SDS) requires several iterations
of design, deployment, test, and evalua-
tion phases. Most industrial SDS develop-
ers use a graphical tool to design dialogue
strategies. They are critical to get good
system performances, but their evaluation
is not part of the design phase.
We propose integrating dialogue logs into
the design tool so that developers can
jointly monitor call flows and their asso-
ciated Key Performance Indicators (KPI).
It drastically shortens the complete devel-
opment cycle, and offers a new design ex-
perience.
Orange Dialogue Design Studio (ODDS),
our design tool, allows developers to de-
sign several alternatives and compare their
relative performances. It helps the SDS
developers to understand and analyse the
user behaviour, with the assistance of a re-
inforcement learning algorithm. The SDS
developers can thus confront the different
KPI and control the further SDS choices
by updating the call flow alternatives.
Index Terms : Dialogue Design, Online Learning,
Spoken Dialogue Systems, Monitoring Tools
1 Introduction
Recent research in spoken dialogue systems
(SDS) has called for a ?synergistic convergence?
between research and industry (Pieraccini and
Huerta, 2005). This call for convergence concerns
architectures, abstractions and methods from both
communities. Under this motivation, several re-
search orientations have been proposed. This pa-
per discusses three of them : dialogue design, di-
alogue management, and dialogue evaluation. Di-
alogue design and dialogue management reflect in
this paper the respective paths that industry and
research have followed for building their SDS. Di-
alogue evaluation is a concern for both communi-
ties, but remains hard to put into operational per-
spectives.
The second Section presents the context and
related research. The third Section is devoted to
the presentation of the tools : the historical design
tool, its adaptation to provide monitoring function-
alities and the insertion of design alternatives. It is
eventually concluded with an attempt to reassess-
ing the dialogue evaluation. The fourth Section de-
scribes the learning integration to the tool, the con-
straints we impose to the learning technique and
the synergy between the tools and the embedded
learning capabilities. Finally, the last Section con-
cludes the paper.
2 Context
The spoken dialogue industry is structured
around the architecture of the well known in-
dustrial standard VoiceXML 1. The underlying di-
alogue model of VoiceXML is a mapping of
the simplistic turn-based linguistic model on the
browser-server based Web architecture (McTear,
2004). The browser controls the speech engines
(recognition and text-to-speech) integrated into
the voice platform according to the VoiceXML
document served by an application server. A
VoiceXML document contains a set of prompts to
play and the list of the possible interactions the
user is supposed to have at each point of the di-
alogue. The SDS developers 2, reusing Web stan-
dards and technologies (e.g. J2EE, JSP, XML. . .),
are used to designing directed dialogues modelled
by finite state automata. Such controlled and de-
terministic development process allows the spoken
1. http ://www.w3c.org/TR/voicexml20/
2. In this paper, the term ?SDS developers? denotes with-
out any distinction VUI designers, application developers,
and any industry engineers acting in SDS building.
185
dialogue industry to reach a balance between us-
ability and cost (Paek, 2007). This paper argues
that tools are facilitators that improve both the us-
ability vs. cost trade-off and the reliability of new
technologies.
Spoken dialogue research has developed vari-
ous models and abstractions for dialogue manage-
ment : rational agency (Sadek et al, 1997), Infor-
mation State Update (Bos et al, 2003), functional
models (Pieraccini et al, 2001), planning problem
solving (Ferguson and Allen, 1998). Only a very
small number of these concepts have been trans-
ferred to industry. Since the late 90?s, the research
has tackled the ambitious problem of automating
the dialogue design (Lemon and Pietquin, 2007),
aiming at both reducing the development cost
and optimising the dialogue efficiency and robust-
ness. Recently, criticisms (Paek and Pieraccini,
2008) have been formulated and novel approaches
(Williams, 2008) have been proposed, both aiming
at bridging the gap between research ?focused on
Markov-Decision-Process (Bellman, 1957) based
dialogue management? and industry ?focused on
dialogue design process, model, and tools. This
paper contributes to extend this effort. It addresses
all these convergence questions together as a way
for research and industry to reach a technological
breakthrough.
Regarding the dialogue evaluation topic, Paek
(Paek, 2007) has pointed out that while research
has exerted attention about ?how best to evaluate
a dialogue system ??, the industry has focused on
?how best to design dialogue systems ??. This pa-
per unifies those two approaches by merging sys-
tem and design evaluation in a single graphical
tool. To our knowledge, ODDS is the only indus-
trial tool which handles the complete system life-
cycle, from design to evaluation.
The tools and methods presented below have
been tested and validated during the design and
implementation of a large real-world commercial
system : the 1013+ service is the Spoken Dialogue
System for landline troubleshooting for France.
It receives millions of calls a year and schedules
around 8, 000 appointments a week. When the
user calls the system, she is presented with an open
question asking her for the reason of her call. If
her landline is out of service, the Spoken Dialogue
System then performs some automated tests on
the line, and if the problem is confirmed, try and
schedule an appointment with the user for a man-
ual intervention. If the system and the user cannot
agree on an appointment slot, the call is transferred
to a human operator.
3 The tools
Industry follows the VUI-completeness princi-
ple (Pieraccini and Huerta, 2005) : ?the behaviour
of an application needs to be completely speci-
fied with respect to every possible situation that
may arise during the interaction. No unpredictable
user input should ever lead to unforeseeable be-
haviour?. The SDS developers consider reliable
the technologies, tools, and methodologies that
help them to reach the VUI-completeness and to
control it.
3.1 The Dialogue Design Tool
The graphical abstraction proposed by our dia-
logue design tool conforms to the general graph
representation of finite state automata, with the
difference that global and local variables enable to
factorise several dialogue states in a single node.
Transitions relate to user inputs or to internal ap-
plication events such as conditions based on in-
ternal information from the current dialogue state,
from the back-end, or from the dialogue history. In
that sense, dialogue design in the industry gener-
ally covers more than strict dialogue management,
since its specification may indicate the type of spo-
ken utterance expected from the user at each stage
of the dialogue, up to the precise speech recogni-
tion model and parameter values to use, and the
generation of the system utterance, from natural
language generation to speech synthesis or audio
recordings.
Our dialogue design tool offers to the SDS de-
velopers a graphical abstraction of the dialogue
logic, sometimes also named the call flow. Thanks
to a dynamic VoiceXML generation functional-
ity, our dialogue design tool brings the SDS de-
velopers the guarantee that VUI-completeness at
the design level automatically implies a similar
completeness at the implementation level. During
maintenance, If the SDS developers modify a spe-
cific part of the dialogue design, the tool guar-
antees that solely the corresponding code is im-
pacted. This guarantee impacts positively VUI-
completeness, reliability, and development cost.
Figure 1 presents the design of a typical
VoiceXML page. This page is used when the sys-
tem asks the user to accept an appointment time
186
FIGURE 1 ? 1013+ design excerpt : the system asks the user to confirm an appointment slot
slot. It first begins with a prompt box mixing
static and dynamic prompts (the dynamic parts are
underlined and realised by service-specific java
code). A log box is then used some contextual ses-
sion variables. Then, an interaction box is used to
model the system reaction to the user behaviour :
on the lower part of the Figure, we program the
reaction to user inactivity or recognizer misunder-
standing. In the upper part, we use a recognition
box followed by a Natural Language Understand-
ing (NLU), and we program the different output
classes : repeat, yes, no and not understood. Each
output is linked to a transition box, which indi-
cates which VoiceXML page the service should
call next.
3.2 Monitoring Functionalities inside the
Design Tool
While researchers are focused on measuring the
progress they incrementally reach, industry engi-
neers have to deal with SDS tuning and upgrade.
Their first dialogue evaluation KPI is task com-
pletion also called the automation rate because a
SDS is deployed to automate specifically selected
tasks. Most of the time, task completion is esti-
mated thanks to the KPI. The KPI are difficult to
exhaustively list and classify. Some are related to
system measures, others are obtained thanks to di-
alogue annotations and the last ones are collected
from users through questionnaires.
Some studies (Abella et al, 2004) investigated
graphical monitoring tools. The corpus to visualise
is a set of dialogue logs. The tool aims at reveal-
ing how the system transits between its possible
states. As a dialogue system is too complex to enu-
merate all its possible states, the dialogue logs are
regarded as a set of variables that evolve during
time and the tool proposes to make a projection on
a subset of these variables. This way, the generated
graphs can either display the call flow, how the dif-
ferent steps are reached and where they lead, or
display how different variables, as the number of
errors evolve. This is mainly a tool for understand-
ing how the users behave, because it has no direct
connection with the way how the system was built.
As consequence to this, it does not help to diag-
nose how to make it better. In other words, it does
evaluate the system but does not meet one of our
goal : the convergence between design and evalu-
ation.
On the opposite, our graphical design tool pro-
vides an innovative functionality : local KPI pro-
jection into the original dialogue design thanks to
an extensive logging. A large part of the KPI are
automatically computed and displayed. As a con-
sequence, it is possible to display percentage of
which responses the system recognised, the users
actually gave, and see how these numbers match
the various KPI. It is one example among the nu-
merous analysis views this graphical tool can pro-
vide.
3.3 Insertion of Alternatives
The 1013+ service has been used to test three
kinds of design alternatives. The first kind is a
strategy alternative : the service can choose be-
tween offering an appointment time slot to the
client, or asking her for a time slot. This deci-
sion defines whether the next dialogue step will
be system-initiative or user-initiative. The second
kind is a speaking style alternative : the service
can either be personified by using the ?I? pronoun,
adopt a corporate style by using the ?We? pro-
noun, or speak in an impersonal style by using the
passive mode. The third kind is a Text-To-Speech
alternative : the service can use a different wording
or prosody for a given sentence.
Figure 2 displays a monitoring view of an in-
teraction implementation with alternatives. The
recognition rate is the projected KPI on the graph
at each branch. Other performance indicators are
displayed at the bottom of the window : here, it
187
FIGURE 2 ? Some user experience feedbacks related to a selected prompt alternative.
is the actual rate of correct semantic decoding, the
semantic substitution rate, and the semantic rejec-
tion rate. The selection of the highlighted box con-
ditions the displayed logs.
Our design tool also provides a multivariate
testing functionality. This method consists in test-
ing multiple alternatives and selecting the best one
on a fixed set of predetermined criteria. Regarding
the VUI-completeness, presenting the complete
automaton to the SDS developers is acceptable, as
long as they can inspect and control every branch
of the design. In general, they even come up with
several competing designs or points of choice,
which can only be properly selected from in a sta-
tistical manner. The ability to compare all the di-
alogue design alternatives in the same test-field is
a major factor to boost up SDS enhancement by
drastically reducing the time needed. When we
were developing the current 1013+ version, we
have been able to develop the 5 main alternatives
in less than a month, where it had taken a month
and a half for a unique alternative in previous ver-
sions. It brings a statistical relevance in the causal
link between the tested alternatives and the differ-
ences in performance measures, because it ensures
a good random input space coverage.
The KPI graphical projection into the dialogue
design covers the dialogue alternatives : KPI com-
putation just needs to be conditioned by the alter-
natives. Figure 2 illustrates the merge of several
system prompt alternatives inside a single design.
It represents the prompt alternatives the system
can choose when proposing an appointment time
slot. An action block informs the Learning Man-
ager about the current dialogue state and avail-
able dialogue alternatives. An ?If? block then ac-
tivates the prompt alternative corresponding to a
local variable ?choixPDC? filled by the Learning
Manager. The rest of the design is identical to the
design presented in Figure 1.
The displayed KPI are conditioned by the se-
lected alternative (here, the second wording cir-
cled in bold grey). ODDS then indicates how the
dialogue call flow is breakdown into the different
alternatives. As we have here conditioned the dis-
played information by the second alternative, this
alternative receives 100% of the calls displayed,
when the other alternatives are not used. We can
then see the different outcomes for the selected
alternative : the customer answer have lead to a
timeout of the recognition in 11.78% of the cases,
and amongst the recognised sentences, 80% were
an agreement, 13.33% were a reject, and 6.67%
were not understood.
On the bottom-left part, one can display more
specific KPI, such as good interpretation rate, sub-
stitution rate, and reject rate. These KPI are com-
puted after the collected logs have been manually
annotated, which remains an indispensable pro-
cess to monitor and improve the recognition and
NLU quality, and thus the overall service quality.
Conditioning on another alternative would have
immediately led to different results, and someway,
embedding the user experience feedback inside the
dialogue design forms a new material to touch and
feel : the SDS developers can now sculpt a unique
reactive material which contains the design and the
KPI measures distribution. By looking at the influ-
ence of each alternative on the KPI when graphi-
cally selecting the alternatives, the SDS develop-
ers are given a reliable means to understand how
to improve the system.
188
3.4 Reassessing Dialogue Evaluation
The traditional approaches to dialogue evalu-
ation attempt to measure how best the SDS is
adapted to the users. We remind that each inter-
action between the user and the SDS appears to
be a unique performance. First, each new dialogue
is co-built in a unique way according to both the
person-specific abilities of the user and the possi-
bilities of the SDS. Second, the user adapts very
quickly to new situations and accordingly changes
her practices. The traditional approaches to dia-
logue evaluation are eventually based on the frag-
ile reference frame of the user, not reliable enough
for a scientific and an industrial approach of the
spoken dialogue field, mostly because of the in-
ability to get statistical call volumes for all the di-
alogue alternatives.
This suggests for a shift in the reference frame
used for dialogue evaluation : instead of trying to
measure the adequacy between the SDS and the
user in the user?s reference frame, one can measure
the adequacy between the user and the SDS in the
design reference frame composed by the dialogue
logic, the KPI and their expected values. Taking
the design as the reference allows reassessing the
dialogue evaluation. The proposed basis for dia-
logue evaluation is reliable for the SDS developers
because it is both stable and entirely under con-
trol. Deviations from the predicted situations are
directly translated into anomalous values of mea-
surable KPI that raise alerts. These automatically
computable alerts warn the SDS developers about
the presence of issues in their dialogue design.
4 Dialogue design learning
As presented in previous Section, the alterna-
tive insertion is an enabler for the dialogue system
analysis tools. It provides the SDS developers with
a novel call flow visualisation experience. The fur-
ther step to this approach is to automate at least
a part of those analyses and improvements with
learning capabilities.
4.1 Constraints
The objective is to automatically choose online
the best alternative among those proposed in the
design tool, and to report this choice to the SDS
developers via the monitoring functionalities that
are integrated to the design tool. This approach
differs from the classical reinforcement learning
methods used in the dialogue literature, which
make their decisions at the dialogue turn level.
We use a technique from a previous work
(Laroche et al, 2009). It does not need to de-
clare the reachable states : they are automatically
created when reached. This is also a parameter-
free algorithm, which is very important when we
consider that most dialogue application developers
are not familiar with reinforcement learning the-
ory. We keep the developer focussed on its main
task. The two additional tasks required for the re-
inforcement learning are to define the variable set
on which the alternative choice should depend,
and to implement a reward function based on the
expected evaluation of the task completion, in or-
der to get a fully automated optimisation with an
online evaluation. The dialogue system automatic
evaluation is a large problem that goes beyond
the scope of this paper. However, sometimes, the
dialogue application enables to have an explicit
validation from the user. For instance, in an ap-
pointment scheduling application, the user is re-
quired to explicitly confirm the schedule he was
proposed. This user performative act completes
the task and provides a reliable automatic evalu-
ation.
4.2 Learning and Monitoring Synergy in the
Design Optimisation
The learning algorithm and the SDS developers
are two actors on the same object : the dialogue
system. But, they work at a different time space.
The learning algorithm updates its policy after
each dialogue while the SDS developers moni-
tor the system behaviour more occasionally. The
same kind of opposition can be made on the action
space of those actors. The learning algorithm can
only change its policy among a limited amount of
alternatives, while the SDS developers can make
deeper changes, such as implementing a new dia-
logue branch, adding new alternatives, new alter-
native points, removing alternatives, etc. . .
Last but not least, their sight ranges vary a lot
too. The learning algorithm is concentrated on the
alternative sets and automatic evaluation and ig-
nores the rest, while the SDS developers can ap-
prehend the dialogue application as a whole, as a
system or as a service. They can also have access
to additional evaluations through annotations, or
user subjective evaluations.
These functionality differences make their re-
spective roles complementary. The SDS develop-
189
0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30
19
20
21
22
23
24
day
S
co
re
3-day means
daily score
FIGURE 3 ? Evolution of the system score
ers have the responsibility for the whole appli-
cation and the macro-strategic changes while the
learning manager holds the real-time optimisation.
4.3 Control vs. Automation : the Trusting
Threshold
As argued by Pieraccini and Huerta (Pieraccini
and Huerta, 2005), finite state machine applied to
dialogue management does not restrict the dia-
logue model to strictly directed dialogues. Finite
state machines are easily extensible to powerful
and flexible dialogue models. Our dialogue design
tool offers various extensions : dialogue modules,
hierarchical design, arbitrary function invocation
at any point of the design, conditional statements
to split the flow in different paths. All those ex-
tensions allow designing any topology of the fi-
nite state machine required to handle complex dia-
logue models like mixed-initiative interaction. Di-
alogue model is not the point where research and
industry fail to converge.
The divergence point concerns the control as-
pect of VUI-completeness versus the automation
of the dialogue design. As pointed out by recent
works (Paek and Pieraccini, 2008), MDP-based
dialogue management aiming at automating the
whole dialogue design is rejected by the SDS de-
velopers. Even more adaptive, it is seen as an un-
controllable black box sensitive to the tuning pro-
cess. The SDS developers do not rely on systems
that dynamically build their dialogue logic without
a sufficient degree of monitoring and control.
Williams (Williams, 2008) has made a substan-
tial effort to meet this industrial requirement. His
system is a hybridisation of a conventional dia-
logue system following an industrial process, with
a POMDP decision module, which is a MDP-
based approach to dialogue management enhanced
with dialogue state abstractions to model uncer-
tainties. The responsibilities of each part of the
system are shared as follows : the conventional
system elects several candidate dialogue moves
and the POMDP decision module selects the most
competitive one. This is a great step towards in-
dustry because the dialogue move chosen by the
POMDP module has been first controlled by the
conventional system design. Nevertheless, the so-
built hybrid system is still not fully compliant with
the industrial constraints for the following reasons.
First, contrary to our approach, the SDS devel-
oper is called upon specific skills that cannot be
demanded to a developer (modeling and tuning a
(PO)MDP). This is a no-go for further integration
in an industrial process.
Second, such a predictive module is not self-
explanatory. Although the SDS developers have
the control on the possible behaviour presented to
the POMDP decision module, they are given no
clue to understand how the choices are made. In
fact, a learnt feature can never be exported to an-
other context. At the opposite, our approach al-
lows us to learn at the design level and conse-
quently to report in the automaton the optimisa-
tion. The learning results are therefore understand-
190
able, analysable and replicable on a larger scale, in
a way similar to classical ergonomics guidelines
(but statistically proved).
4.4 Learning results on the 1013+ service
In the 1013+ service, our experiments have fo-
cused on the appointment scheduling domain. We
have chosen to integrate the following rewards in
the service : each time a user successfully man-
ages to get an appointment, the system is given a
+30 reward. If the system is unable to provide an
appointment, but manages to transfer the user to a
human operator, the system is given a +10 (a ?re-
sit?). Last, if the user hangs up, the system is not
given any positive reward. Every time the system
does not hear nor understand the user, it is given a
penalty of 1.
In the beginning of the experiment, when the
system is still using a random policy, the comple-
tion rate is as low as 51%, and the transfer rate is
around 36%. When the system has learned its op-
timal policy, the completion rate raises up to 70%,
with a transfer rate around 20%. In our experi-
ment, the system has learned to favour an imper-
sonal speaking style (passive mode) and it prefers
proposing appointment time slots rather than ask-
ing the user to make a proposition (the later case
leading to lot of ?in private? user talks and hesita-
tions, and worse recognition performance).
Figure 3 shows the evolution of the mean di-
alogue score during the first month. Each server
have its own Learning Manager database, and op-
timises separately. This is a welcome feature, as
each server can address a different part of the
user population, which is a frequent operational
requirement.
The dialogue score drawn on Figure 3 is com-
puted by averaging the mean dialogue score per
server. The crossed line represents the daily mean
dialogue score. The normal line represents the 3-
day smoothed dialogue mean score. The grayed
area represents the 95% confidence interval. Dur-
ing this first month of commercial exploitation,
one can notice two major trends : at first, the di-
alogue score is gradually increasing until day 20,
then the performances noticeably drops, before
rising up again. It turns out that new servers were
introduced on day 20, which had to learn the op-
timal dialogue policy. Ultimately (on the second
month), they converge to the same solution as the
first servers.
5 Conclusion
5.1 A New Basis for Trusting Automatic
Learning
This paper presents an original dialogue design
tool that mixes dialogue design and dialogue eval-
uation in the same graphical interface. The de-
sign paradigm supported by the tool leads the SDS
developers to predict value ranges of local KPI
while designing the dialogue logic. It results a new
evaluation paradigm using the system design as
the reference and trying to measure deviations be-
tween the predicted and the measured values of
the designed local KPI. The SDS developers rely
on the tool to fulfil the VUI-completeness princi-
ple. Classically applied to dialogue design, the tool
enables its application to the dialogue evaluation,
leading to the comparison of dialogue design al-
ternatives.
This places the SDS developers in a dialogue
design improvement cycle close to the reinforce-
ment learning decision process. Moreover, the in-
spector offered by the user experience feedback
functionality allows the SDS developers to un-
derstand, analyse and generalize all the decisions
among the dialogue design alternatives. Combin-
ing the learning framework and the design tool
guarantees the SDS developers keep control of the
system. It preserves VUI-completeness and opens
the way to a reliable learning based dialogue man-
agement.
5.2 Implementation
This approach to learning led us to deploy in
October 2009 the first commercial spoken dia-
logue system with online learning. The system?s
task is to schedule an appointment between the
customer and a technician. This service receives
approximately 8, 000 calls every month. At the
time those lines are written, we are already in a vir-
tuous circle of removing low-rated alternatives and
replacing them with new ones, based on what the
system learnt and what the designer understands
from the data.
5.3 Future Work
On a social studies side, we are interested in
collaborations to test advanced dialogue strategies
and/or information presentation via generation. In-
deed, we consider our system as a good opportu-
nity for large scope experiments.
191
6 Acknowledgements
This research has received funding from the
European Community?s Seventh Framework Pro-
gramme (FP7/2007-2013) under grant agreement
number 216594 (CLASSIC project : www.classic-
project.org).
References
A. Abella, J.H. Wright, and A.L. Gorin. 2004. Dia-
log trajectory analysis. In IEEE International Con-
ference on Acoustics, Speech and Signal Processing
(ICASSP), volume 1, pages 441?444, May.
R.E. Bellman. 1957. A markovian decision process.
Journal of Mathematics and Mechanics, 6 :679?684.
J. Bos, E. Klein, O. Lemon, and T. Oka. 2003. Dipper :
Description and formalisation of an information-
state update dialogue system architecture.
George Ferguson and James F. Allen. 1998. Trips : An
integrated intelligent problem-solving assistant. In
In Proc. 15th Nat. Conf. AI, pages 567?572. AAAI
Press.
R. Laroche, G. Putois, P. Bretier, and B. Bouchon-
Meunier. 2009. Hybridisation of expertise and
reinforcement learning in dialogue systems. In
Proceedings of Interspeech. Special Session : Ma-
chine Learning for Adaptivity in Spoken Dialogue,
Brighton (United Knigdom), September.
O. Lemon and O. Pietquin. 2007. Machine learn-
ing for spoken dialogue systems. In Proceedings
of the European Conference on Speech Commu-
nication and Technologies (Interspeech?07), pages
2685?2688, August.
M. F. McTear. 2004. Spoken Dialogue Technol-
ogy : Toward the Conversational User Interface.
Springer, August.
T. Paek and R. Pieraccini. 2008. Automating spoken
dialogue management design using machine learn-
ing : An industry perspective. Speech Communica-
tion, 50 :716?729.
T. Paek. 2007. Toward evaluation that leads to
best practices : Reconciling dialog evaluation in re-
search and industry. In Proceedings of the Work-
shop on Bridging the Gap : Academic and Indus-
trial Research in Dialog Technologies, pages 40?
47, Rochester, NY, April. Association for Compu-
tational Linguistics.
R. Pieraccini and J. Huerta. 2005. Where do we go
from here ? research and commercial spoken dialog
systems. In Laila Dybkjaer and Wolfgang Minker,
editors, Proceedings of the 6th SIGdial Workshop on
Discourse and Dialogue, pages 1?10.
R. Pieraccini, S. Caskey, K. Dayanidhi, B. Carpenter,
and M. Phillips. 2001. Etude, a recursive dialog
manager with embedded user interface patterns. In
Automatic Speech Recognition and Understanding,
2001 IEEE Workshop on, pages 244?247.
M. D. Sadek, P. Bretier, and F. Panaget. 1997. Ar-
timis : Natural dialogue meets rational agency. In
in Proceedings of IJCAI-97, pages 1030?1035. Mor-
gan Kaufmann.
J. D. Williams. 2008. The best of both worlds : Uni-
fying conventional dialog systems and POMDPs. In
International Conference on Speech and Language
Processing.
192
