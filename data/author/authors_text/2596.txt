The University of Ja?n Word Sense Disambiguation System
*
 
Manuel Garc?a-Vega 
Universidad de Ja?n 
Av. Madrid 35 
Ja?n, Spain, 23071 
mgarcia@ujaen.es 
Miguel A. Garc?a-Cumbreras 
Universidad de Ja?n 
Ja?n, Spain, 23071 
Av. Madrid 35, 23071 
magc@ujaen.es 
M. Teresa Mart?n-Valdivia 
Universidad de Ja?n 
Av. Madrid 35 
Ja?n, Spain, 23071 
maite@ujaen.es 
L. Alfonso Ure?a-L?pez 
Universidad de Ja?n 
Av. Madrid 35 
Ja?n, Spain, 23071 
laurena@ujaen.es 
                                                             
*
 This paper has been partially supported by the Spanish Government (MCYT) Project number TIC2003-07158-
C04-04 
 
 
Abstract 
This paper describes the architecture and re-
sults of the University of Ja?n system pre-
sented at the SENSEVAL-3 for the English-
lexical-sample and English-All-Words tasks. 
The system is based on a neural network ap-
proach. We have used the Learning Vector 
Quantization, which is a supervised learning 
algorithm based on the Kohonen neural model. 
1 Introduction 
Our system for SENSEVAL-3 uses a supervised 
learning algorithm for word sense disambiguation. 
The method suggested trains a neural network us-
ing the Learning Vector Quantization (LVQ) algo-
rithm, integrating several semantic relations of 
WordNet (Fellbaum, 1998) and SemCor corpus 
(Miller et al, 1993). The University of Ja?n system 
has been used in English-lexical-sample and Eng-
lish-All-Words tasks. 
2 Experimental Environment 
The presented disambiguator uses the Vector 
Space Model (VSM) as an information representa-
tion model. Each sense of a word is represented as 
a vector in an n-dimensional space where n is the 
number of words in all its contexts. 
The accuracy of the disambiguator depends es-
sentially on the word weights. We use the LVQ 
algorithm to adjust them. The input vector weights 
are calculated as shown by (Salton and McGill, 
1983) with the standard tf?idf, where the documents 
are the paragraphs. They are presented to the LVQ 
network and, after training, the output vectors 
(called prototype or codebook vectors) are ob-
tained, containing the adjusted weights for all 
senses of each word. 
Any word to disambiguate is represented with a 
vector in the same way. This representation must 
be compared with all the trained word sense vec-
tors by applying the cosine similarity rule: 
 
 
ik
ik
ik
sim
xw
xw
xw
?
?
),( =  [1] 
 
The sense corresponding to the vector of highest 
similarity is selected as the disambiguated sense. 
To train the neural network we have integrated 
semantic information from two linguistic re-
sources: SemCor corpus and WordNet lexical da-
tabase.  
2.1 SemCor  
Firstly, the SemCor (the Brown Corpus labeled 
with the WordNet senses) was fully used (the 
Brown-1, Brown-2 and Brown-v partitions). We 
used the paragraph as a contextual semantic unit 
                                             Association for Computational Linguistics
                        for the Semantic Analysis of Text, Barcelona, Spain, July 2004
                 SENSEVAL-3: Third International Workshop on the Evaluation of Systems
and each context was included in the training vec-
tor set. 
The SENSEVAL-3 English tasks have used the 
WordNet 1.7.1 sense inventory, but the SemCor is 
tagged with an earlier version of WordNet (spe-
cifically WordNet version 1.6).  
 
Figure 1. SemCor context for ?climb?. 
 
Therefore it was necessary to update the SemCor 
word senses. We have used the automatically 
mapped version of Semcor with the WordNet 1.7.1 
senses found in WordNet site
1
.  
Figure 2. WordNet artificial paragraph 
 
                                                             
1
 http://www.cogsci.princeton.edu/~wn/ 
Figure 1 shows the common format for the all 
the resource input paragraphs. For each word, the 
pos and sense are described, e.g. ?climb\2#1? is the 
verb ?climb? with sense 1. In addition, it has 158 
different words in its context and all of them are 
shown like the pair word-frequency. 
2.2 WordNet  
'Semantic relations from WordNet 1.7.1 were 
considered, in particular synonymy, antonymy, 
hyponymy, homonymy, hyperonymy, meronymy, 
and coordinate terms to generate artificial para-
graphs with words along each relation. 
For example, for a word with 7 senses, 7 artifi-
cial paragraphs with the synonyms of the 7 senses 
were added, 7 more with all its hyponyms, and so 
on. 
Figure 2 shows these artificial paragraphs for the 
?climb? verb. 
3 Learning Vector Quantization 
The LVQ algorithm (Kohonen, 1995) performs 
supervised learning, which uses a set of inputs with 
their correctly annotated outputs adjusting the 
model when an error is committed between the 
model outputs and the known outputs. 
The LVQ algorithm is a classification method 
based on neural competitive learning, which allows 
the definition of a group of categories on the input 
data space by reinforced learning, either positive 
(reward) or negative (punishment). In competitive 
learning, the output neurons compete to become 
active. Only a single output neuron is active at any 
one time. 
The general application of LVQ is to adjust the 
weights of labels to high dimensional input vec-
tors, which is technically done by representing the 
labels as regions of the data space, associated with 
adjustable prototype or codebook vectors. Thus, a 
codebook vector, w
k
, is associated for each class, 
k. This is particularly useful for pattern classifica-
tion problems. 
The learning algorithm is very simple. First, the 
learning rate and the codebook vectors are initial-
ised. Then, the following procedure is repeated for 
all the training input vectors until a stopping crite-
rion is satisfied:  
- Select a training input pattern, x, with class 
d, and present it to the network 
climb\2#1 158 a_hundred\5 1 ab-
sorb\2 1 advance\2 1 ... walk\2 1 
want\1 1 warn\2 1 warped\5 1 way\1 
2 west\3 1 whip\1 2 whir\1 1 
wraithlike\5 1 
climb\2#1 45 abruptly\4 1 absence\1 
1 ... stop\2 1 switch_off\2 1 
there\4 1 tube\1 1 two\5 1 unex-
pectedly\4 1 water\1 1 
... 
climb\2#2 33 adjust\2 1 almost\4 1 
arrange\2 1 ... procedure\1 1 re-
vetment\1 1 run\2 1 sky\1 1 
snatch\2 1 spread\2 1 stand\2 1 
truck\1 1 various\5 1 wait\2 1 
wing\1 1 
... 
climb\2#3 3 average\2 1 feel\2 1 
report\2 1 
climb\2#1 10 arise\2 1 come_up\2 1 
go\2 1 go_up\2 1 lift\2 1 locomote\2 
1 move\2 1 move_up\2 1 rise\2 1 
travel\2 1 
climb\2#1 3 climb_up\2 1 go_up\2 1 
mount\2 1 
climb\2#1 5 mountaineer\2 1 ramp\2 1 
ride\2 1 scale\2 1 twine\2 1 
climb\2#2 7 clamber\2 1 scramble\2 1 
shin\2 1 shinny\2 1 skin\2 1 sput-
ter\2 1 struggle\2 1 
... 
climb\2#5 2 go up\2 1 rise\2 1 
- Calculate the Euclidean distance between 
the input vector and each codebook vector 
||x-w
k
|| 
- Select the codebook vector, w
c
, that is 
closest to the input vector, x.  
 
 
{ }
kc
wxwx ?=?
k
min
 [2] 
 
This codebook vector is the winner neu-
ron and only this neuron updates its 
weights according the learning equation 
(equation 3). If the class of the input pat-
tern, x, matches the class of the winner 
codebook vector, w
c
 (the classification has 
been correct), then the codebook vector is 
moved closer to the pattern (reward), oth-
erwise it is moved further away. 
Let x(t) be a input vector at time t, and w
k
(t) the 
codebook vector for the class k at time t. The fol-
lowing equation defines the basic learning process 
for the LVQ algorithm. 
 
 [ ]  )()()()()1( tttstt
ccc
wxww ???+=+ ?  [3] 
 
Figure 3. Codebook vectors for ?climb? domain 
 
where s = 0, if k ? c; s = 1, if x(t) and w
c
(t) be-
long to the same class (c = d); and s = -1, if they do 
not (c ? d). ?(t) is the learning rate, and 0<?(t)<1 
is a monotically decreasing function of time. It is 
recommended that ?(t) should initially be rather 
small, say, smaller than 0.1 (Kohonen, 1995) and 
?(t) continues decreasing to a given threshold, u, 
very close to 0. 
The codebook vectors for the LVQ were initial-
ized to zero and every training vector was intro-
duced into the neural network, modifying the 
prototype vector weights depending on the correct-
ness in the winner election. 
All training vectors were introduced several 
times, updating the weights according to learning 
equation. ?(t) is a monotonically decreasing func-
tion and it represents the learning rate factor, be-
ginning with 0.1 and decreasing lineally: 
 
 ( ) ( ) ( )
P
tt
0
1
?
?? ?=+  [4] 
 
where P is the number of iterations performed in 
the training. The number of iterations has been 
fixed at 25 because at this point the network is 
stabilized. 
The LVQ must find the winner sense by calcu-
lating the Euclidean distances between the code-
book vectors and input vector. The shortest 
distance points to the winner and its weights must 
be updated. 
4 English Tasks 
The training corpus generated from SemCor and 
WordNet has been used to train the neural net-
works. All contexts of every word to disambiguate 
constitute a domain. Each domain represents a 
word and its senses. Figure 3 shows the codebook 
vectors generated after training process for ?climb? 
domain. 
We have generated one network per domain and 
after the training process, we have as many do-
mains as there are words to disambiguate adjusted. 
The network architecture per domain is shown in 
Figure 4. The number of input units is the number 
of different terms in all contexts of the given do-
main and the number of output units is the number 
of different senses. 
The disambiguator system has been used in Eng-
lish lexical sample and English all words tasks. 
For the English lexical sample task, we have 
used the available SENSEVAL-3 corpus to train 
the neural networks. We have also used the con-
texts generated using SemCor and WordNet for 
each word in SENSEVAL-3 corpus. For the Eng-
climb\2#1 1921 a\1#0 0.01883 
aarseth\1#0 0.03259 abelard\1#0 ... 
yorkshire\1#0 0.03950 young\3#0 
0.00380 zero\1#0 0.01449 
climb\2#2 235 act\1#0 -0.11558 
alone\4#0 -0.07754 ... windy\3#0 -
0.00922 worker\1#0 -0.02738 year\1#0 
-0.03715 zacchaeus\1#0 -0.02344 
climb\2#3 1148 abchasicus\1#0 
0.04127 able\3#0 -0.00945 ... 
young\3#0 -0.00275 zero\1#0 -0.00010
climb\2#4 258 age\1#0 -0.04180 air-
space\1#0 -0.02862 alone\4#0 -
0.01920 apple\1#0 -0.04242 ... 
world\1#0 -0.14184 year\1#0 -0.04113
young\3#0 -0.04831 zero\1#0 -0.06230
... 
lish all word task, we have only used the complete 
contexts of both SemCor and WordNet resources. 
The corpus has been tagged and lemmatized using 
the Tree-tagger (Schmid, 1994). 
Figure 4. The network architecture 
 
Once the training has finished, the testing be-
gins. The test is very simple. We establish the 
similarity between a given vector of the corpus 
evaluation with all the codebook vectors of its do-
main, and the highest similarity value corresponds 
to the disambiguated sense (winner sense). If it is 
not possible to  find a sense (it is impossible to ob-
tain  the cosine similarity value), we assign by de-
fault the most frequent sense (e.g. the first sense in 
WordNet). 
The official results achieved by the University of 
Ja?n system are presented in Table 1 for English 
lexical sample task, and in Table 2 for English all 
words. 
 
ELS Precision Recall Coverage 
Fine-grained 0.613 0.613 99.95% 
Coarse-grained 0.695 0.695 99.95% 
Table 1. Official results for ELS. 
 
EAW Precision Recall Coverage 
With U 0.590 0.590 100% 
Without U 0.601 0.588 97.795% 
Table 2. Official results for EAW. 
5 Conclusion 
This paper presents a new approach based on 
neural networks to disambiguate the word senses. 
We have used the LVQ algorithm to train a neural 
network to carry out the English lexical sample and 
English all words tasks. We have integrated two 
linguistic resources in the corpus provided by the 
organization: WordNet and SemCor.  
 
References 
Fellbaum, C. 1998. WordNet: An Electronic Lexi-
cal Database. The MIT Press 
Kohonen, T. 1995. Self-Organization and Associa-
tive Memory. 2nd Ed, Springer.Verlag, Berl?n. 
Kohonen, T., J. Hynninen, J. Kangas, J. Laak-
sonen, K. Torkkola. 1996. Technical Report, 
LVQ_PAK: The Learning Vector Quantization 
Program Package. Helsinki University of Tech-
nology, Laboratory of Computer and Information 
Science, FIN-02150 Espoo, Finland. 
Miller G., C. Leacock, T. Randee, R. Bunker. 
1993. A Semantic Concordance. Proc. of the 3rd 
DARPA Workshop on Human Language Tech-
nology. 
Salton, G. & McGill, M.J. 1983. Introduction to 
Modern Information Retrieval. McGraw-Hill, 
New York. 
Schmid, H., 1994. Probabilistic Part-of-Speech 
Tagging Using Decision Trees. In Proceedings 
of International Conference on New Methods in 
Language Processing. 
 
 
 
 
T
1 
T
2 
T
3 
T
M 
... 
Sense
1
 
Sense
1
 
Sense
N
 
... 
BRUJA: Question Classification for Spanish.
Using Machine Translation and an English Classifier.
Miguel ?A. Garc??a Cumbreras
SINAI Group
Computer Sciences
University of Jae?n. Spain
magc@ujaen.es
L. Alfonso Uren?a Lo?pez
SINAI Group
Computer Sciences
University of Jae?n. Spain
laurena@ujaen.es
Fernando Mart??nez Santiago
SINAI Group
Computer Sciences
University of Jae?n .Spain
dofer@ujaen.es
Abstract
Question Classification is an important
task in Question Answering Systems. This
paper presents a Spanish Question Classi-
fier based on machine learning, automatic
online translators and different language
features. Our system works with Eng-
lish collections and bilingual questions
(English/Spanish). We have tested two
Spanish-English online translators to iden-
tify the lost of precision. We have made
experiments using lexical, syntactic and
semantic features to test which ones made
a better performance. The obtained results
show that our system makes good classifi-
cations, over a 80% in terms of accuracy
using the original English questions and
over a 65% using Spanish questions and
machine translation systems. Our conclu-
sion about the features is that a lexical,
syntactic and semantic features combina-
tion obtains the best result.
1 Introduction
A Question Answering (QA) system seeks and
shows the user an accurate and concise answer,
given a free-form question, and using a large text
data collection.
The use of Cross Language Information Re-
trieval Systems (CLIR) is growing, and also the
application of these ones into other general sys-
tems, such as Question Answering or Question
Classification.
A CLIR system is an Information Retrieval Sys-
tem that works with collections in several lan-
guages, and extract relevant documents or pas-
sages (Grefenstette, 1998).
We have proposed a Multilingual Question An-
swering System (BRUJA - in Spanish ?Busqueda
de Respuestas University of Jaen?) that works with
collections in several languages. Since there are
several languages, tasks such as obtaining rele-
vant documents and extracting the answer could
be accomplished in two ways: using NPL tools
and resources for each language or for a pivot lan-
guage only (English) and translating to the pivot
language the rest of the relevant information when
it is required. Because of the translation step, the
second approach is less accurate but more practi-
cal since we need only NPL resources for English.
The central question is the noise, because of the
translation process, is too high in order to use this
approach in spite of their practical advantages.
The first step of this system is a Question Clas-
sifier (QC). Given a query, a question classifica-
tion module obtains the class of such question.
This information is useful for the extraction of the
answer. For example, given the query ?Where
is Madrid?, the QA system expects a location
entity as answer type. The proposed QA mod-
ule works with questions in several languages,
translates them into English using different online
translators, and obtains the type of questions and
some features, such as the focus, the keywords
or the context. In this work we aim to find out
whether a multilingual QC module is possible by
using translation tools and English as pivot lan-
guage or not.
2 Question Classification
Question Classification is the task that, given a
question, classifies it in one of k semantic classes.
Some QC systems are based on regular expres-
sions and manual grammatical rules (Van Durme
et al, 2003).
EACL 2006 Workshop on Multilingual Question Answering - MLQA06
39
Recent works in QC have studied different ma-
chine learning methods. (Zhang and Lee, 2003)
propose a QC system that uses Support Vec-
tor Machine (SVM) as the best machine learn-
ing algorithm. They compare the obtained results
with other algorithms, such as Nearest Neighbors,
Naive Bayes, Decision Tree or Sparse Network of
Winnows (SNoW).
(Li and Roth, 2002) propose a system based on
SNoW. They used five main classes and fifty fined
classes. Other systems have used SVM and modi-
fied kernels.
QC systems have some restrictions (Hacioglu
and Ward, 2003), such as:
? Traditional question classification uses a set
of rules, for instance ?questions that start
with Who ask about a person?. These are
manual rules that have to be revised to im-
prove the results.
? These rules are very weak, because when new
questions arise, the system has to be updated
to classify them.
Most of the QC systems use English as the main
language, and some of the best and standard re-
sources are developed for English.
It would be possible to build a question classi-
fier for every language based on machine learning,
using a good training corpus for each language,
but is something expensive to produce. For this
reason we have used Machine Translation Sys-
tems.
Machine Translation (MT) systems are very ap-
preciated in CLIR (McNamee et al, 2000). Last
years these systems have improved the results, but
there are not translators for each language pair and
the quality of the result depends on this pair.
The reason of using MT and not a Spanish clas-
sifier is simple: we have developed a multilingual
QA system that works in this moment with three
languages: English, Spanish and French. Because
it is too complex for us to work with resources into
these three languages and also to manage the in-
formation into three languages, our kernel system
works into English, and we use MT to translate
information when it is necessary.
We have developed a QC system that covers
three tasks:
? It uses machine learning algorithms. We have
tested methods based on Support Vector Ma-
chine, for instance SVMLight or LibSVM,
and TiMBL. TiMBL 1 is a program that
implements several Memory-Based Learning
techniques. It stores a representation of the
training set explicitly in memory, and classi-
fies new cases by extrapolation from the most
similar stored cases.
? To classify Spanish questions we have
checked two online machine translators. Our
proposal is to study how the translation can
affect in the final results, compared to the
original English results.
? Finally, we would obtain different results ap-
plying different levels of features (lexical,
syntactic and semantic). In the next section
well explain them and in results chapter we
will see these differences.
Our QC system has three independent modules,
so it will be easy to replace each one with other to
improve the final results. In Figure 1 we can see
them.
Figure 1: QC system Modules.
The first module translates the question into
other languages, Spanish in this case. We have
used two machine translation systema that work
well for the language pair Spanish-English: Epals
and Prompt. This module could work with other
machine translation systems and other languages
if there would be a good translator for the language
pair used.
The second module extracts some relevant fea-
tures (see next section) using the original or the
translated English questions. Some of these fea-
tures will be used by the machine learning module
(lexical, syntactic and semantic features) and the
1ILK Research Group, Tilburg University and CNTS Re-
search Group, University of Antwerp
EACL 2006 Workshop on Multilingual Question Answering - MLQA06
40
others will be used later in the answers extraction
phase. Take into account that the second module
also extracts important features such as the context
of the question, the focus or the keywords that we
would use in next steps of the Question Answering
system.
The final module applies the machine learn-
ing algorithm and returns the question category
or class. In our first experiments we used Li-
brary for Support Vector Machines (LibSVM) and
Bayesian Logistic Regression (BBR), but for this
one we have used Tilburg Memory Based Learner
(TiMBL).
TiMBL (Daelemans et al, 2004) implements
several Memory-Based Learning techniques, clas-
sic k-NN classification kernel and several metrics.
It implements Stanfill modified value difference
metric (MVDM), Jeffrey Divergence and Class
voting in the k-NN kernel according to the dis-
tance of the nearest neighbors. It makes classifi-
cation using heuristic approximations, such as the
IGTREE decision tree algorithm and the TRIBL
and TRIBL2 hybrids. It also has optimizations for
fast classification.
2.1 Features in Question Classification
We have analyzed each question in order to extract
the following features:
? Lexical Features
? The two first words of the question
? All the words of the question in lower-
case
? The stemming words
? Bigrams of the question
? Each word with its position in the ques-
tion
? The interrogative pronoun of the ques-
tion
? The headwords of the nouns and verbs
? Syntactic Features
? The interrogative pronoun and the Part
of Speech (POS) of the rest of the words
? The headword (a word to which an in-
dependent meaning can be assigned) of
the first noun phrase
? All POS
? Chunks
? The first verb chunk
? The length of the question
? Semantic Features
? The question focus (a noun phrase that
is likely to be present in the answer)
? POS with the named entities recognized
? The type of the entity if the focus is one
of them
? Wordnet hypernyms for the nouns and
Wordnet synonyms for the verbs
We have used some English resources such as
the POS tagger TreeTagger (Schmid, 1994), Ling-
pipe 2 to make Named Entity Recognition, and the
Porter stemmer (Porter, 1980). We have also used
Wordnet to expand the queries.
3 Experiments and Results
3.1 Experimental Method
The experiments are made using some public
datasets available by USC (Hovy et al, 1999),
UIUC and TREC 3 as training and test collections.
These datasets have been labeled manually by
UIUC group by means of the following general
and detailed categories:
ABBR: abbreviation, expansion.
DESC: definition, description, manner, reason.
ENTY: animal, body, color, creation, cur-
rency, disease/medical, event, food, instrument,
language, letter, other, plant, product, religion,
sport, substance, symbol, technique, term, vehicle,
word.
HUM: description, group, individual, title.
LOC: city, country, mountain, other, state.
NUM: code, count, date, distance, money, or-
der, other, percent, period, speed, temperature,
size, weight.
For instance the question ?What does NATO
mean?? is an ABBR (abbreviation) category,
?What is a receptionist?? is a DESC (definition)
category or ?When did George Bush born?? is a
NUM (numeric) category.
The training data are a set of 5500 questions and
the test data are a set of 500 questions. All ques-
tions were labelled for the 10th conference Cross-
Language Evaluation Forum of Question Answer-
ing (CLEF-QA).
2LingPipe is a suite of Java tools designed to perform
linguistic analysis on natural language data, available in
http://www.alias-i.com/lingpipe
3http://trec.nist.gov
EACL 2006 Workshop on Multilingual Question Answering - MLQA06
41
The same dataset has been used in other inves-
tigations, such as in (Li and Roth, 2002).
The distribution of these 5500 training ques-
tions, with respect to its interrogative pronoun or
the initial word is showed in Table 1.
Likewise, the distribution of categories of these
5500 training questions is showed in Table 2.
Table 1: Training questions distribution according
with its interrogative pronoun
Type Number
What 3242
Who 577
How 764
Where 273
When 131
Which 105
Why 103
Name 91
In 67
Define 4
Whom 4
Others 91
Table 2: Training questions distribution according
with its general category.
Category Number
ABBR 86
DESC 1162
ENTY 1251
HUM 1223
LOC 835
NUM 896
The distribution of the 500 test questions, with
respect to its interrogative pronoun or the initial
word, is showed in Table 3, and the distribution of
categories of these 500 test questions is showed in
Table 4.
Table 3: Test questions distribution according with
its interrogative pronoun.
Type Number
What 343
Who 47
How 35
Where 26
When 26
Which 6
Why 4
Name 2
In 5
Others 6
In our experiments we try to identify the general
category. Our proposal is to try a detailed classifi-
cation later.
Table 4: Test questions distribution according with
its general category.
Category Number
ABBR 9
DESC 138
ENTY 94
HUM 65
LOC 81
NUM 113
We have used the Accuracy as a general mea-
sure and the Precision of each category as a de-
tailed measure.
Accuracy = ]ofcorrectpredictions
]ofpredictions
(1)
precision(c) = ]ofcorrectpredictionsofthecategoryc
]ofpredictionsofthecategoryc
(2)
Other measure used is the F-score, defined
as the harmonic mean of precision and recall
(Van Rijsbergen, 1979). It is a commonly used
metric to summarize precision and recall in one
measure.
F ? score = 2 ? precision ? recall
precision + recall
(3)
3.2 Results
We have made some experiments changing the
machine translation systems:
? 5500 training questions and 500 test ques-
tions, all into English. This is the basic case.
? 5500 training questions into English and 500
test questions translated from Spanish using
the MT Epals.
? 5500 training questions into English and 500
test questions translated from Spanish using
the MT Prompt.
The MT resources are available in the following
URLs:
? Epals
http://www.epals.com
? Prompt
http://translation2.paralink.com
According to the lexical, syntactic and semantic
features we have made seven features sets. Our
proposal here is to check which ones increase the
final results. These features sets are the following:
EACL 2006 Workshop on Multilingual Question Answering - MLQA06
42
1. Lexical Features: interrogative pronoun
(lex1)
2. Lexical and Syntactic Features: Two first
words of the question + All the words of the
question in lowercase + Stemming words +
Headwords (lexsyn2)
3. Lexical and Syntactic Features: previous four
+ Each word with its position in the ques-
tion + interrogative pronoun + The first verb
chunk (lexsyn3)
4. Semantic Features: The question focus +
POS with the named entities recognized +
The type of the entity if the focus is one of
them (sem4)
5. Syntactic Features: The interrogative pro-
noun and the Part of Speech (POS) of the
rest of the words + All POS + Chunks + The
length of the question (sin5)
6. All Lexical + all Syntactic + all Semantic
(lexsemsin6)
7. Lexical Features: Two first words of the
question + interrogative pronoun ; Syntactic
Features: + The headwords of the nouns and
verbs + The first verb chunk + the interrog-
ative pronoun + the Part of Speech (POS) of
the rest of the words + The length of the ques-
tion; Semantic Features: POS with the named
entities recognized (lexsemsin7)
We can see in the Table 5 the obtained results in
terms of global accuracy.
Table 5: Results in terms of Accuracy.
Features English original Epals Prompt
lex1 0,458 0,334 0,414
lexsyn2 0,706 0,656 0,632
lexsyn3 0,718 0,638 0,612
sem4 0,675456 0,59798 0,629555
sin5 0,608 0,438 0,518
lexsemsin6 0,839757 0,662626 0,722672
lexsemsin7 0,8 0,678 0,674
Note that the average loss of precision is around
17% if we use Epals, and around 12% if we use
Prompt.
(Li and Roth, 2002) obtain a better performance
for English, around a 92.5% in terms of accuracy.
The best results are obtained when we use a
combination of all lexical, syntactic and seman-
tic features. The main reason is that the classifier
works better when the number of features, which
can be different to each category, is increased.
For future work, it will be also necessary to
study the time consumption for each features set,
to decide which ones can be used.
Table 6 shows the results in terms of F-score.
Table 6: Results in terms of F-score.
Features English original Epals Prompt
lex1 0,476077 0,319793 0,441075
lexsyn2 0,708444 0,669692 0,6455
lexsyn3 0,721258 0,644813 0,614353
sem4 0,649405 0,593019 0,620068
sin5 0,576356 0,404038 0,48739
lexsemsin6 0,827789 0,664122 0,726667
lexsemsin7 0,795897 0,680039 0,68014
As an example in Table 7 we show detailed re-
sults for the best case, where the result for each
general category is showed.
Table 7: Detailed results for each category, using
the combination lexsemsin6 and the original Eng-
lish questions and the translated questions by us-
ing Prompt
Class English original Prompt
Precision F-score Precision F-score
ABBR 0.857 0.750 1 0.611
DESC 0.8442 0.906 0.695 0.806
ENTY 0.731 0.727 0.595 0.737
HUM 0.839 0.825 0.898 0.914
LOC 0.847 0.867 0.680 0.859
NUM 0.935 0.843 0.798 0.856
As we have seen there are no important differ-
ences between categories. In addition, this table
shows that the translation results are reliable since
for every category the lost of precision is similar
(about 15%).
There are some reasons for the lost of precision.
Some of them are the following:
1. Bad translation of synonym words. For in-
stance we can compare an English original
sentence: ?What are the animals that don?t
have backbones called??, and its Prompt
translation: ?How are they called the animals
that have no spines??. The word backbone
has been replaced with spine, so the IR sys-
tem cannot find the same lists of relevant doc-
uments.
2. Translation of Named Entities. For instance
we can compare an English original sentence:
?Who was Galileo??, and its Prompt transla-
tion: ?Who was Galilean??.
EACL 2006 Workshop on Multilingual Question Answering - MLQA06
43
3. General bad translations. For instance we can
compare an English original sentence: ?Who
discovered x-rays??, and its Prompt transla-
tion: ?Who discovered the beams the Xth??.
4 Conclusions
Multilingual Question Answering systems have
opened a new investigation task, where the ques-
tion classification is an important first phase to
know the type of answer and some relevant infor-
mation about this question.
Our option is to use some standards resources
for English and translate Spanish questions.
Of course we could develop a multilingual QC
system using good training corpus for every lan-
guage, but it is expensive to produce.
The use of machine translation systems is, then,
very important, so the study of different online
translators is a main task. In our case we have
applied them to translate questions from Spanish
into English.
We have made a complete investigation using
the two datasets of training and test questions that
have been used by other groups, all labelled man-
ually. Different parameters have been the test
file used (originally in English or translated from
Spanish with the MT Epals or Prompt), the ma-
chine learning algorithm, some TiMBL parame-
ters and the lexical, syntactic or semantic features.
The best results have been obtained using the
original English questions and a combination of
lexical, syntactic and semantic features. The best
MT has been Prompt.
We have some conclusions:
? Applying machine learning with a complete
set of training questions we obtain good re-
sults, over 0,8 in terms of accuracy.
? The use of machine translation systems de-
creases the results around 15%, but it will
be possible to increase the performance us-
ing other models based on machine learning
or a voting system for instance.
? A combination of all lexical, syntactic and se-
mantic features obtains the best results.
As future work we want to check the system
with other training and test datasets. We also want
to design a voting system using different QC mod-
els; models based on patterns (to detect the class
for some types of questions); models based on
rules (filtering non-redundancy types of questions.
For instance all questions with ?who? are related
to a person).
It could be also interested to test the combina-
tion between a better QC system, the current one
by Li and Roths for instance (Li and Roth, 2002),
and our machine translation method.
Finally, we want to study types of questions
with poor results in order to improve them apply-
ing other techniques, such as question expansion.
Acknowledgement This work has been sup-
ported by Spanish Government (MCYT) with
grant TIC2003-07158-C04-04.
References
W. Daelemans, J. Zavrel, K. van der Sloot, and
A. van den Bosch. 2004. Timbl: Tilburgmemory
based learner, version 5.1, reference guide. ilk tech-
nical report 04-02.
G. Grefenstette, editor. 1998. Cross-Language Infor-
mation Retrieval, volume 1. Kluwer academic pub-
lishers, Boston, USA.
K. Hacioglu and W. Ward. 2003. Question classifi-
cation with support vector machines and error cor-
recting codes. In Proceedings of Human Language
Technology conference (HLT-NAACL).
E. Hovy, L. Gerber, U. Hermjakob, C. Lin, and
D. Ravichandran. 1999. Towards sematics-based
answer pinpointing. In Proceedings of the DARPA
Human Language Technology conference (HLT).
X. Li and D. Roth. 2002. Learning question classifiers.
In In COLING?02.
P. McNamee, J. Mayfield, and C. Piatko. 2000. The
jhu/apl haircut system at trec- 8. In Proceedings of
the Eighth Text Retrieval Conference (TREC8).
M. F. Porter. 1980. An algorithm for suffix stripping.
In Program 14.
H. Schmid. 1994. Probabilistic part-of-speech tagging
using decision trees. In Proceedings of International
Conference on New Methods in Language Process-
ing.
B. Van Durme, Y. Huang, A. Kupsc, and E. Nyberg.
2003. Towards light semantic processing for ques-
tion answering. In Proceedings of Human Language
Technology conference (HLT-NAACL).
C.J. Van Rijsbergen. 1979. Information retrieval.
D. Zhang and W. Sun Lee. 2003. Question classifica-
tion using support vector machines. In Proceedings
of the 26th Annual International ACM SIGIR Con-
ference on Research and Development in Informa-
tion Retrieval.
EACL 2006 Workshop on Multilingual Question Answering - MLQA06
44
Proceedings of the Workshop on Textual Entailment and Paraphrasing, pages 78?82,
Prague, June 2007. c?2007 Association for Computational Linguistics
Combining Lexical-Syntactic Information with Machine Learning for
Recognizing Textual Entailment
Arturo Montejo-Ra?ez, Jose Manuel Perea, Fernando Mart??nez-Santiago,
Miguel A?ngel Garc??a-Cumbreras, Maite Mart??n-Valdivia, Alfonso Uren?a-Lo?pez
Dpto. de Informa?tica, Universidad de Jae?n
Campus de las Lagunillas s/n, 23071 - Jae?n
{amontejo, jmperea, dofer, magc, maite, laurena}@ujaen.es
Abstract
This document contains the description of
the experiments carried out by SINAI group.
We have developed an approach based on
several lexical and syntactic measures inte-
grated by means of different machine learn-
ing models. More precisely, we have eval-
uated three features based on lexical sim-
ilarity and 11 features based on syntactic
tree comparison. In spite of the relatively
straightforward approach we have obtained
more than 60% for accuracy. Since this
is our first participation we think we have
reached a good result.
1 Approach description
We fill face the textual entailment recognition us-
ing Machine Learning methods, i.e. identifying fea-
tures that characterize the relation between hypothe-
sis and associated text and generating a model using
existing entailment judgements that will allow us to
provide a new entailment judgement agains unseen
pairs text-hypothesis. This approach can be split into
the two processes shown in Figures 1 and 2.
In a more formal way, given a text t and an hy-
pothesis h we want to define a function e which takes
these two elements as arguments and returns and an-
swer to the entailment question:
e(t, h) =
{ Y ES if h is entailed by t
NO otherwise (1)
Now the question is to find that ideal function
Figure 1: Training processes
Figure 2: Classification processes
e(t, h). We will approximate this function using a
binary classifier:
e?(t, h) = bc(f,m) (2)
where
bc is a binary classifier
f is a set of features
m is the learned model for the classifier
Therefore, it only remains to select a binary clas-
sifier and a feature extraction method. We have per-
formed two experiments with different choices for
both decisions. These two experiments are detailed
below.
78
1.1 Lexical similarity
This experiment approaches the textual entailment
task being based on the extraction of a set of lexical
measures that show the existing similarity between
the hypothesis-text pairs. Our approach is similar
to (Ferrandez et al, 2007) but we make matching
between similar words too while (Ferrandez et al,
2007) apply exact matching (see below).
The first step previous to the calculation of the
different measures is to preprocess the pairs using
the English stopwords list. Next we have used the
GATE1 architecture to obtain the stems of tokens.
Once obtained stems, we have applied four different
measures or techniques:
? Simple Matching: this technique consists of
calculating the semantic distance between each
stem of the hypothesis and text. If this dis-
tance exceeds a threshold, both stems are con-
sidered similar and the similarity weight value
increases in one. The accumulated weight is
normalized dividing it by the number of ele-
ments of the hypothesis. In this experiment we
have considered the threshold 0.5. The values
of semantic distance measure range from 0 to
1. In order to calculate the semantic distance
between two tokens (stems), we have tried sev-
eral measures based on WordNet (Alexander
Budanitsky and Graeme Hirst, 2001). Lin?s
similarity measure (Lin, 1998) was shown to
be best overall measures. It uses the notion of
information content and the same elements as
Jiang and Conrath?s approach (Jiang and Con-
rath, 1997) but in a different fashion:
simL(c1, c2) = 2? log p(lso(c1, c2))log p(c1) + log p(c2)
where c1 and c2 are synsets, lso(c1,c2) is
the information content of their lowest super-
ordinate (most specific common subsumer) and
p(c) is the probability of encountering an in-
stance of a synset c in some specific corpus
(Resnik, 1995). The Simple Matching tech-
nique is defined in the following equation:
SIMmatching =
?
i?H similarity(i)
|H|
1http://gate.ac.uk/
where H is the set that contains the elements of
the hypothesis and similarity(i) is defined like:
similarity(i) =
{ 1 if ?j ? TsimL(i, j) > 0.5
0 otherwise
? Binary Matching: this measure is the same
that the previous one but modifying the simi-
larity function:
similarity(i) =
{ 1 if ?j ? T i = j
0 otherwise
? Consecutive Subsequence Matching: this
technique relies on forming subsequences of
consecutive stems in the hypothesis and match-
ing them in the text. The minimal size of the
consecutive subsequences is two and the max-
imum is the maximum size of the hypothesis.
Every correct matching increases in one the fi-
nal weight. The sum of the obtained weights of
the matching between subsequences of a cer-
tain size or length is normalized by the number
of sets of consecutive subsequences of the hy-
pothesis created for this length. These weights
are accumulated and normalized by the size of
the hypothesis less one. The Consecutive Sub-
sequence Matching technique is defined in the
following equations:
CSSmatching =
?|H|
i=2 f(SHi)
|H| ? 1
where SHi is the set that contains the subse-
quences of the hypothesis with i size or length
and f(SHi) is defined like:
f(SHi) =
?
j?SHi matching(j)
|H| ? i+ 1
where
matching(i) =
{ 1 if ?k ? STi k = j
0 otherwise
where STi represents the set that contains the
subsequences with i size from text.
? Trigrams: this technique relies on forming tri-
grams of words in the hypothesis and match-
ing them in the text. A trigram is a group of
79
three words. If a hypothesis trigram matches in
text, then the similarity weight value increases
in one. The accumulated weight is normalized
dividing it by the number of trigrams of the hy-
pothesis.
1.2 Syntactic tree comparison
Some features have been extracted from pairs
hypothesis-text related to the syntactic information
that some parser can produce. The rationale be-
hind it consists in measuring the similarity between
the syntactic trees of both hypothesis and associated
text. To do that, terms appearing in both trees are
identified (we call this alignment) and then, graph
distances (number of nodes) between those terms in
both trees are compared, producing certain values as
result.
In our experiments, we have applied the
COLLINS (Collins, 1999) parser to generate the
syntactic tree of both pieces of text. In Figure 3 the
output of the syntactic parsing for a sample pair is
shown. This data is the result of the syntactical anal-
ysis performed by the mentioned parser. A graph
based view of the tree corresponding to the hypoth-
esis is drawn in Figure 4. This graph will help us to
understand how certain similarity measures are ob-
tained.
Figure 3: Syntactic trees of sample hypothesis and
its associated text
<t>
(TOP (S (LST (LS 0302) (. .)) (NP (JJ Next) (NN year))
(VP (VBZ is) (NP (NP (DT the) (JJ 50th) (NN anniversary))
(PP (IN of) (NP (NP (DT the) (NNP Normandy) (NN invasion)
(, ,)) (NP (NP (DT an)(NN event)) (SBAR (IN that) (S (VP
(MD would) (RB n?t) (VP (VB have) (VP (VBN been) (ADJP
(JJ possible)) (PP (IN without) (NP (NP (DT the) (NNP
Liberty) (NN ships.)) (SBAR (S (NP (DT The) (NNS
volunteers)) (VP (VBP hope) (S (VP (TO to) (VP (VB raise)
(NP (JJ enough) (NN money)) (S (VP (TO to) (VP (VB sail)
(NP (DT the) (NNP O?Brien)) (PP (TO to) (NP (NNP France)))
(PP (IN for)(NP (DT the) (JJ big) (NNP D-Day) (NN celebration)
(. .))))))))))))))))))))))))))
</t>
<h>
(TOP (S (NP (NP (CD 50th) (NNP Anniversary)) (PP (IN of)
(NP (NNP Normandy) (NNP Landings)))) (VP (VBZ lasts) (NP
(DT a) (NN year) (. .)))))
</h>
From the sample above, the terms normandy, year
and anniversary appear in both pieces of text. We
say that these terms are ?aligned?. Therefore, for
the three possible pairs of aligned terms we can com-
pute the distance, in nodes, to go from one term to
the other at each tree. Then, the difference of these
Figure 4: Syntact tree of sample hypothesis
distances is computed and some statistics are gener-
ated. We can summarize the process of computing
this differences in the algorithm detailed in Figure 6.
Figure 5: Tree comparison process
For instance, in the tree represented in Figure 4
we can see that we have to perform 5 steps to go
from node Anniversary to node Normandy. Since
there are no more possible occurrences of these two
terms, then the minimal distance between them is
5. This value is also measured on the tree corre-
80
sponding to the text, and the absolute difference be-
tween these two minimal distances is stored in order
to compute final feature weights consisting in basic
statistical values. The algorithm to obtain the distri-
bution of distance differences is detailed in Figure 6.
Figure 6: Extraction of features based on syntactic
distance
Input:
a syntactic tree of the hypothesis Sh
a syntactic tree of the text St
Output :
the set of distance differences
Dd = {ddij : ti, tj ? T}
Pseudo code:
T ? aligned terms between Sh and St
Dd ? ?
for i = 1..n do
for j = i+ 1..n do
disth ? minimal distance between
nodes ti and tj in Sh
distt ? minimal distance between
nodes ti and tj in St
ddij ? |disth ? distt|
Dd ? {ddij} ?Dd
end-for
end-for
The statistics generated from the resulting list of
distances differences Dd are the following:
1. The number of aligned terms (3 in the given
example).
2. The number of matched POS values of aligned
terms, that is, if the term appears with the same
POS label in both texts (in the example An-
niversary differs in the POS label assigned).
3. The number of unmatched POS labels of
aligned terms.
4. The average distance in nodes through the syn-
tactic tree to go from one aligned term to an-
other.
5. The minimal distance difference found.
Table 1: Results with TiMBL and BBR classifiers
(Exp5 is the only official result reported in this pa-
per).
Experiment Classifier Accuracy
Exp1 BBR 0.6475
Exp2 BBR 0.64625
Exp3 BBR 0.63875
Exp4 TiMBL 0.6062
Exp5 TiMBL 0.6037
Exp6 TiMBL 0.57
6. The maximal distance difference found.
7. The standard deviation of distance differences.
In a similar way, differences in the depth level of
nodes for aligned terms are also calculated. From
the example exposed the following values were
computed:
* Aligned 3
* MatchedPOS 2
* UnmatchedPOS 1
* AvgDistDiff 0.0392156863
* MinDistDiff 0.0000000000
* MaxDistDiff 0.0588235294
* StdevDistDiff 0.0277296777
* AvgDepthDiff 2.0000000000
* MinDepthDiff 1.0000000000
* MaxDepthDiff 3.0000000000
* StdevDepthDiff 0.8164965809
2 Experiments and results
The algorithms used as binary classifiers are two:
Bayesian Logistic Regression (BBR)2 and TiMBL
(Daelemans et al, 1998). Both algorithms have been
trained with the devel data provided by the organiza-
tion of the Pascal challange. As has been explained
in previous sections, a model is generated via the
supervised learning process. This model m is then
feed into the classification variant of the algorithm,
which will decide whether a new hypothesis sample
is entailed by the given text or not.
The experiments and results are shown in Table 1:
where:
? Exp1 uses four features: three lexical similari-
ties (SIMmatching + CSSmatching + Trigrams)
and Syntactic tree comparison.
2http://www.stat.rutgers.edu/?madigan/BBR/ [available at
March 27, 2007]
81
? Exp2 uses five features: four lexical similari-
ties (SIMmatching + CSSmatching + Trigrams
+ BINmatching) and Syntactic tree compari-
son.
? Exp3 uses only three lexical similarities
(SIMmatching + CSSmatching + Trigrams).
? Exp4 uses the four lexical similarities
(SIMmatching + CSSmatching + Trigrams +
BINmatching)
? Exp5 uses only three lexical similarities
(SIMmatching + CSSmatching + Trigrams).
? Exp6 uses four features: three lexical similari-
ties (SIMmatching + CSSmatching + Trigrams)
and Syntactic tree comparison.
As we expected, the best result we have obtained
is by means of the integration of the whole of the
features available. More surprising is the good result
obtained by using lexical features only, even better
than experiments based on syntactical features only.
On the other hand, we expected that the integration
of both sort of features improve significatively the
performance of the system, but the improvement re-
spect of lexical features is poor (less than 2%). .
Similar topics share similar vocabulary, but not sim-
ilar syntax at all. Thus, we think we should to inves-
tigate semantic features better than the syntactical
ones.
3 Conclusions and future work
In spite of the simplicity of the approach, we have
obtained remarkable results: each set of features has
reported to provide relevant information concerning
to the entailment judgement determination. On the
other hand, these two approaches can be merged into
one single system by using different features all to-
gether and feeding with them several binary classi-
fiers that could compose a voting system. We will
do that combining TiMBL, SVM and BBR.We ex-
pect to improve the performance of the entailment
recognizer by this integration.
Finally, we want to implement a hierarchical ar-
chitecture based on constraint satisfaction networks.
The constraints will be given by the set of avail-
able features and the maintenance of the integration
across the semantic interpretation process.
4 Acknowledgements
This work has been partially financed by the
TIMOM project (TIN2006-15265-C06-03) granted
by the Spanish Government Ministry of Science and
Technology and the RFC/PP2006/Id 514 granted by
the University of Jae?n.
References
Alexander Budanitsky and Graeme Hirst. 2001. Seman-
tic distance in wordnet: An experimental, application-
oriented evaluation of five measures.
Michael Collins. 1999. Head-Driven Statistical Models
for Natural Language Parsing. Ph.D. thesis, Univer-
sity of Pennsylvania.
Walter Daelemans, Jakub Zavrel, Ko van der Sloot, and
Antal van den Bosch. 1998. Timbl: Tilburg memory
based learner, version 1.0, reference guide.
Oscar Ferrandez, Daniel Micolo, Rafael Mu noz, and
Manuel Palomar. 2007. Te?cnicas le?xico-sinta?cticas
para reconocimiento de inmplicacio?n textual. . Tec-
nolog??as de la Informaco?n Multilingu?e y Multimodal.
In press.
Jay J. Jiang and David W. Conrath. 1997. Semantic
similarity based on corpus statistics and lexical taxon-
omy. In Proceedings of International Conference on
Research in Computational Linguistics, Taiwan.
Dekang Lin. 1998. An information-theoretic definition
of similarity. In Proceedings of the 15th International
Conference on Machine Learning.
Philip Resnik. 1995. Using information content to evalu-
ate semantic similarity. In Proceedings of the 14th In-
ternational Joint Conference on Artificial Intelligence,
Montreal.
82
