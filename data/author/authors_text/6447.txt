Architecture and Design Considerations in NESPOLE!:
a Speech Translation System for E-commerce Applications
Alon Lavie,
Chad Langley,
Alex Waibel
Carnegie Mellon University
Pittsburgh, PA, USA
alavie@cs.cmu.edu
Fabio Pianesi,
Gianni Lazzari,
Paolo Coletti
ITC-irst
Trento, Italy
Loredana Taddei,
Franco Balducci
AETHRA
Ancona, Italy
1. INTRODUCTION
NESPOLE! 1 is a speech-to-speech machine translation research
project funded jointly by the European Commission and the US
NSF. The main goal of the NESPOLE! project is to advance the
state-of-the-art of speech-to-speech translation in a real-world set-
ting of common users involved in e-commerce applications. The
project is a collaboration between three European research labs
(IRST in Trento Italy, ISL at University of Karlsruhe in Germany,
CLIPS at UJF in Grenoble France), a US research group (ISL at
Carnegie Mellon in Pittsburgh) and two industrial partners (APT
- the Trentino provincial tourism bureau, and Aethra - an Italian
tele-communications commercial company). The speech-to-speech
translation approach taken by the project builds upon previous work
that the research partners conducted within the context of the C-
STAR consortium (see http://www.c-star.org). The pro-
totype system developed in NESPOLE! is intended to provide ef-
fective multi-lingual speech-to-speech communication between all
pairs of four languages (Italian, German, French and English) within
broad, but yet restricted domains. The first showcase currently un-
der development is in the domain of tourism and travel information.
The NESPOLE! speech translation system is designed to be an
integral part of advanced e-commerce technology of the next gener-
ation. We envision a technological scenario in which multi-modal
(speech, video and gesture) interaction plays a significant role, in
addition to the passive browsing of pre-designed web pages as is
common in e-commerce today. The interaction between client and
provider will need to support online communication with agents
(both real and artificial) on the provider side. The language barrier
then becomes a significant obstacle for such online communica-
tion between the two parties, when they do not speak a common
language. Within the tourism and travel domain, one can imagine
a scenario in which users (the clients) are planning a recreational
trip and are searching for specific detailed information about the
1NESPOLE! - NEgotiating through SPOken Lan-
guage in E-commerce. See the project website at
http://nespole.itc.it/
.
regions they wish to visit. Initial general information is obtained
from a web site of a tourism information provider. When more
detailed or special information is required, the customer has the
option of opening an online video-conferencing connection with a
human agent of the tourism information provider. Speech transla-
tion is integrated within the video-conference connection; the two
parties each speak in their native language and hear the synthesized
translation of the speech of the other participant. Text translation
(in the form of subtitles) can also be provided. Some multi-modal
communication between the parties is also available. The provider
agent can send web pages to the display of the customer, and both
sides can annotate and refer to pictures and diagrams presented on
a shared whiteboard application.
In this paper we describe the design considerations behind the ar-
chitecture that we have developed for the NESPOLE! speech trans-
lation system in the scenario described above. In order to make the
developed prototype as realistic as possible for use by a common
user, we assume only minimal hardware and software is available
on the customer side. This does include a PC-type video camera,
commercially available internet video-conferencing software (such
as Microsoft Netmeeting), standard audio and video hardware and
a standard web browser. However, no speech recognition and/or
translation software is assumed to reside locally on the PC of the
customer. This implies a server-type architecture in which speech
recognition and translation are accomplished via interaction with
a dedicated server. The extent to which this server is centralized
or distributed is one of the major design considerations taken into
account in our system.
2. NESPOLE! INTERLINGUA-BASED
TRANSLATION APPROACH
Our translation approach builds upon previous work that we have
conducted within the context of the C-STAR consortium. We use
an interlingua-based approach with a relatively shallow task-oriented
interlingua representation [2] [1], that was initially designed for the
C-STAR consortium and has been significantly extended for the
NESPOLE! project. Interlingual machine translation is convenient
when more than two languages are involved because it does not re-
quire each language to be connected by a set of transfer rules to
each other language in each direction [3]. Adding a new language
that has all-ways translation with existing languages requires only
writing one analyzer that maps utterances into the interlingua and
one generator that maps interlingua representations into sentences.
The interlingua approach also allows each partner group to imple-
ment an analyzer and generator for its home language only. A fur-
Figure 1: General Architecture of NESPOLE! System
ther advantage is that it supports a paraphrase generation back into
the language of the speaker. This provides the user with some con-
trol in case the analysis of an utterance failed to produce a correct
interlingua. The following are three examples of utterances tagged
with their corresponding interlingua representation:
Thank you very much
c:thank
And we?ll see you on February twelfth.
a:closing (time=(february, md12))
On the twelfth we have a single and a double
available.
a:give-information+availability+room
(room-type=(single & double),time=(md12))
3. NESPOLE! SYSTEM ARCHITECTURE
DESIGN
Several main considerations were taken into account in the de-
sign of the NESPOLE! Human Language Technology (HLT) server
architecture: (1) The desire to cleanly separate the actual HLT
system from the communication channel between the two parties,
which makes use of the speech translation capabilities provided by
the HLT system; (2) The desire to allow each research site to in-
dependently develop its language specific analysis and generation
modules, and to allow each site to easily integrate new and im-
proved components into the global NESPOLE! HLT system; and
(3) The desire of the research partners to build to whatever ex-
tent possible upon software components previously developed in
the context of the C-STAR consortium. We will discuss the ex-
tent to which the designed architecture achieves these goals after
presenting an overview of the architecture itself.
Figure 1 shows the general architecture of the current NESPOLE!
system. Communication between the client and agent is facilitated
by a dedicated module - the Mediator. This module is designed to
control the video-conferencing connection between the client and
the agent, and to integrate the speech translation services into the
communication. The mediator handles audio and video data as-
sociated with the video-conferencing application and binary data
associated with a shared whiteboard application. Standard H.323
data formats are used for these three types of data transfer. Speech-
to-speech translation of the utterances captured by the mediator is
accomplished through communication with the NESPOLE! global
HLT server. This is accomplished via socket connections with
language-specific HLT servers. The communication between the
mediator and each HLT server consists mainly of linear PCM au-
dio packets (some text and control messages are also supported and
are described later in this section).
Communication with Mediator
Speech
Recognizer
Module
Parser/Analysis
IF
text
Analysis Chain
Speech
Synthsizer
Generation
Module
IF
text
.
Generation
Chain
Communication with CommSwitch
audio audio
Language X HLT Server
Figure 2: Architecture of NESPOLE! Language-specific HLT Servers
The global NESPOLE! HLT server comprises four separate lang-
uage-specific servers. Additional language-specific HLT servers
can easily be integrated in the future. The internal architecture
of each language-specific HLT server is shown in figure 2. Each
language-specific HLT server consists of an analysis chain and a
generation chain. The analysis chain receives an audio stream cor-
responding to a single utterance and performs speech recognition
followed by parsing and analysis of the input utterance into the in-
terlingua representation (IF). The interlingua is then transmitted to
a central HLT communication switch (the CS), that forwards it to
the HLT servers for the other languagesas appropriate. IF messages
received from the central communication switch are processed by
the generation chain. A generation module first generates text in
the target language from the IF. The text utterance is then sent to
a speech synthesis module that produces an audio stream for the
utterance. The audio is then communicated externally to the me-
diator, in order to be integrated back into the video-conferencing
stream between the two parties.
The mediator can, in principle, support multiple one-to-one com-
munication sessions between client and agent. However, the de-
sign supports multiple mediators, which, for example, could each
be dedicated to a different provider application. Communication
with the mediator is initiated by the client by an explicit action
via the web browser. This opens a communication channel to the
mediator, which contacts the agent station, establishes the video-
conferencing connection between client and agent, and starts the
whiteboard application. The specific pair of languages for a dia-
logue is determined in advance from the web page from which the
client initiates the communication. The mediator then establishes a
socket communication channel with the two appropriate language
specific HLT servers. Communication between the two language
specific HLT servers, in the form of IF messages, is facilitated by
the NESPOLE! global communication switch (the CS). The lan-
guage specific HLT servers may in fact be physically distributed
over the internet. Each language specific HLT server is set to ser-
vice analysis requests coming from the mediator side, and genera-
tion requests arriving from the CS.
Some further functionality beyond that described above is also
supported. As described earlier, the ability to produce a textual
paraphrase of an input utterance and to display it back to the orig-
inal speaker provides useful user control in the case of translation
failures. This is supported in our system in the following way. In
addition to the translated audio, each HLT server also forwards the
generated text in the output language to the mediator, which then
displays the text on a dedicated application window on the PC of
the target user. Additionally, at the end of the processing of an in-
put utterance by the analysis chain of an HLT server, the resulting
IF is passed internally to the generation chain, which produces a
text generation from the IF. The result is a textual paraphrase of the
input utterance in the source language. This text is then sent back
to the mediator, which forwards it to the party from which the ut-
terance originated. The paraphrase is then displayed to the original
speaker in the dedicated application window. If the paraphrase is
wrong, it is likely that the produced IF was incorrect, and thus the
translation would also be wrong. The user may then use a button
on the application interface to signal that the last displayed para-
phrase was wrong. This action triggers a message that is forwarded
by the mediator to the other party, indicating that the last displayed
translation should be ignored. Further functionality is planned to
support synchronization between multi-modal events on the white-
board and their corresponding speech actions. As these are in very
preliminary stages of planning we do not describe them here.
4. DISCUSSION AND CONCLUSIONS
We believe that the architectural design described above has sev-
eral strengths and advantages. The clean separation of the HLT
server dedicated to the speech translation services from the exter-
nal communication modules between the two parties allows the re-
search partners to develop the HLT modules with a large degree
of independence. Furthermore, this separation will allow us in the
future to explore other types of mediators for different types of ap-
plications. One such application being proposed for development
within the C-STAR consortium is a speech-to-speech translation
service over mobile phones. The HLT server architecture described
here would be able to generally support such alternative external
communication modalities as well.
The physical distribution of the individual language specific HLT
servers allows each site to independently develop, integrate and
test its own analysis and generation modules. The organization of
each language specific HLT server as an independent module al-
lows each of the research sites to develop its unique approaches to
analysis and generation, while adhering to a simple communication
protocol between the HLT servers and externally with the mediator.
This allowed the research partners to ?jump-start? the project with
analysis and generation modules previously developed for the C-
STAR consortium, and incrementally develop these modules over
time. Furthermore, the global NESPOLE! communication switch
(the CS) supports testing of analysis and generation among the four
languages in isolation from the external parts of the system. Cur-
rently, requests for analysis of a textual utterance can be transmitted
to the HLT servers via the CS, with the resulting IF sent (via the CS)
to all HLT servers for generation. This gives us great flexibility in
developing and testing our translation system. The functionality of
the CS was originally developed for our previous C-STAR project,
and was reused with little modification.
Support for additional languages is also very easy to incorpo-
rate into the system by adding new language-specific HLT servers.
Any new language specific HLT server needs only to adhere to the
communication protocols with both the global NESPOLE! commu-
nication switch (the CS) and the external mediator. The C-STAR
consortium plans to use the general architecture described here for
its next phase of collaboration, with support for at least three asian
languages (Japanese, Korean and Chinese) in addition to the lan-
guages currently covered by the NESPOLE! project.
The first prototype of the NESPOLE! speech translation system
is currently in advanced stages of full integration. A showcase
demonstration of the prototype system to the European Commis-
sion is currently scheduled for late April 2001.
5. ACKNOWLEDGMENTS
The research work reported here was supported in part by the
National Science Foundation under Grant number 9982227. Any
opinions, findings and conclusions or recomendations expressed in
this material are those of the author(s) and do not necessarily reflect
the views of the National Science Foundation (NSF).
6. REFERENCES
[1] L. Levin, D. Gates, A. Lavie, F. Pianesi, D. Wallace,
T. Watanabe, and M. Woszczyna. Evaluation of a Practical
Interlingua for Task-Oriented Dialogue. In Workshop on
Applied Interlinguas: Practical Applications of Interlingual
Approaches to NLP, Seattle, 2000.
[2] L. Levin, D. Gates, A. Lavie, and A. Waibel. An Interlingua
Based on Domain Actions for Machine Translation of
Task-Oriented Dialogues. In Proceedings of the International
Conference on Spoken Language Processing (ICSLP?98),
pages Vol. 4, 1155?1158, Sydney, Australia, 1998.
[3] S. Nirenburg, J. Carbonell, M. Tomita, and K. Goodman.
Machine Translation: A Knowledge-Based Approach. Morgan
Kaufmann, San Mateo, California, 1992.
Evaluation of a Practical Interlingua 
for Task-Oriented Dialogue 
Lori Levin, Donna Gates, Alon Lavie, Fabio Pianesi, 
Dorcas Wallace, Taro Watanabe, Monika Woszczyna 
Language Technologies Inst i tute,  Carnegie Mellon Univers i ty  and 
IRST  ITC,  Trento, I taly 
Internet:  l s l?cs ,  cmu. edu 
Abstract 
IF (Interchange Format), the interlingua used by 
the C-STAR consortium, is a speech-act based in- 
terlingua for task-oriented ialogue. IF was de- 
signed as a practical interlingua that could strike 
a balance between expressivity and simplicity. If 
it is too simple, components of meaning will be 
lost and coverage of unseen data will be low. On 
the other hand, if it is too complex, it cannot be 
used with a high degree of consistency by collab- 
orators on different continents. In this paper, we 
suggest methods for evaluating the coverage of IF 
and the consistency with which it was used in the 
C-STAR consortium. 
Introduction 
IF (Interchange Format) is an interlingua used by 
the C-STAR consortium 1 for task-oriented ia- 
logues. Because it is used in five different coun- 
tries for six different languages, it had to achieve 
a careful balance between being expressive hough 
and being simple enough to be used consistently. 
If it was not expressive nough, components of 
meaning would be lost and coverage of unseen data 
would be low. On the other hand, if was not sim- 
ple enough, different system developers would use 
it inconsistently and the wrong meanings would be 
translated. IF is described in our previous papers 
(\[PT98, LGLW98, LLW+\]). 
For this paper, we have proposed methods for 
evaluating the coverage of IF and the degree to 
which it can be used consistently across C-STAR 
sites. Coverage was measured by having human IF 
specialists annotate unseen data. Consistency was 
measured by two means. The first was inter-coder 
agreement among IF specialists at Carnegie Mel- 
lonUniversity and ITC-irst (Centre per la ricerca 
lhttp://www.c-star.org 
18 
scientifica e tecnologica). The second, less direct 
method, was a cross-site nd-to-end evaluation of 
English-to-Italian translation where the English- 
to-IF analysis grammars were written at CMU and 
IF-to-Italian generation was developed at IRST. If 
the English and Italian grammar writers did not 
agree on the meaning of the IF, wrong transla- 
tions will be produced. In this way, the cross-site 
evaluation can be an indirect indicator of whether 
the CMU and IRST IF specialists agreed on the 
meaning of IF representations. For comparison, 
we also present within-site nd-to-end evaluations 
of English-to-German, English-to-Japanese, and 
English-to-IF-to-English, where all of the analysis 
and generation grammars were written at CMU. 
The  In terchange Format  
Because we are working with task-oriented dia- 
logues, adequate rendering of the speech act in the 
target language often overshadows the need for lit- 
eral translation of the words. IF is therefore based 
on domain actions (DAs), which consist of on 
speech acts plus domain-specific concepts. An ex- 
ample of a DA is give-information+price+room 
(giving information about the price of a room). 
DAs are composed from 45 general speech acts 
(e.g., acknowledge, give- information, accept) 
and about 96 domain-specific oncepts (e.g, 
pr ice,  temporal, room, f l ight ,  ava i lab i l i ty ) .  
In addition to the DA, IF representations can con- 
tain arguments such as room-type, dest inat ion,  
and price. There are about 119 argument types. 
In the following example, the DA consists 
of a speaker tag (a: for agent), the speech- 
act give- information,  and two main concepts, 
+price and +room. The DA is followed by a list 
of arguments: room-type= and price=. The ar- 
guments have values that represent-information 
for the type of room double and the cost repre- 
Percent 
Cumulatlve Percent Count 
Coverage 
15.7 15,7 652 
19.8 4.1 172 
28.3 3.4 143 
26.0 2.7 113 
28.0 2.0 85 
30.1 2.0 85 
31,9 1.9 78 
33.7 1.8 75 
35.5 1.8 73 
37.2 1.7 70 
38.8 1.6 66 
40.3 l .S 64 
41.7 1,4 60 
43.2 1.4 60 
44.5 1.3 56 
45.8 1.3 52 
46.9 1.2 48 
48.0 1.1 46 
49.1 1.1 44 
50.1 1.0 42 
NA* ;:; 244 
DA 
acknowledge 
aff i rm 
thank 
introduce-self 
give-lnformation+prtce 
greeting 
give-lnfor marion+tern poral 
give-lnformatlon+numeral 
give-in formation+ pr ice+room 
request-in for matio n+ payment 
give-information + payment 
g ive- inform+features+room 
give-in form -t- availabil ity + room 
accept 
give-information+personal-data 
req-act +reserv+ feat ures+room 
req- verif-give-inforra +numera l  
offer+help 
apologize 
request-inform+personal-data 
no-tag 
Figure 1: Coverage of Top20 DAs and No-tag in 
development data 
sented with the complex argument price= which 
has its own arguments quantity=, currency= and 
per-unit=. This IF representation is neutral be- 
tween sentences that have different verbs, sub- 
jects, and objects uch as A double room costs 150 
dollars a night, The price of  a double room is 150 
dollars a night, and A double room is 150 dollars 
a night. ~ 
AGENT: ''a double room costs $150 a night.'' 
a:give-information+price+room 
( room-type=doub le ,  
price=(quantity=lSO, 
currency=dollar, 
per-unit=night) 
Coverage and D is t r ibut ion  of  
Dia logue  Acts  
In this section, we address the coverage of IF for 
task-oriented dialogues about ravel planning. We 
want to know whether a very simple interlingua 
like IF can have good coverage. We are using a 
rather subjective measure of coverage: IF experts 
hand-tagged unseen data with IF representations 
and counted the percentage ofutterances towhich 
no IF could be assigned. (When they tagged the 
unseen data, they were not told that the IF was 
being tested for coverage. The tagging was done 
for system development purposes.) Our end-to- 
end evaluation described in the following sections 
can be taken as a less subjective measure of cov- 
2When we add anaphora resolution, we will need 
to know whether a verb (cost) or a noun (price) was 
used. This will be an issue our new project, NESPOLEI 
(http://nespole. itc. it/). 
Percent 
Cumulative Percent Count Speech Act 
Coverage 
30.1 80.1 1250 glve-lnformation 
45,8 15.7 655 acknowledge 
57,7 11.9 498 request- lnformation 
62,7 5,0 209 request-verif ication-give-inform 
87.6 4.9 203 request-actlon 
71.7 4.1 172 affirm 
75,1 3.4 143 thank 
77,9 2.7 113 introduce-self 
80.2 2.4 98 offer 
82,4 2.1 89 accept 
84.4 2.0 85 greeting 
85.7 1.3 55 suggest 
66.8 I . I  44 apologize 
87.8 1.0 41 closing 
88.5 0.8 32 negate.give-information 
89.2 0.6 27 delay-action 
89,8 0.6 25 introduce-topic 
90,2 0.5 19 please-wait 
90.6 0.4 15 reject 
91.0 0.4 15 request-suggestlon 
Figure 2: 
data 
Coverage of speech-acts in development 
erage. However, the score of an end-to-end evalu- 
ation encompasses grammar coverage problems as 
well as IF coverage problems. 
The development portion of the coverage x- 
periment proceeded as follows. Over a period of 
two years, a database of travel planning dialogues 
was collected by C-STAR partners in the U.S., 
Italy, and Korea. The dialogues were role-playing 
dialogues between a person pretending to be a 
traveller and a person pretending to be a travel 
agent. For the English and Italian dialogues, the 
traveller and agent were talking face-to-face in the 
same language - -  both speaking English or both 
speaking Italian. The Korean dialogues were also 
role playing dialogues, but one participant was 
speaking Korean and the other was speaking En- 
glish. From these dialogues, only the Korean ut- 
terances are included in the database. Each utter- 
ance in the database is annotated with an English 
translation and an IF representation. Table 1 sum- 
marizes the amount of data in each language. The 
English, Italian, and Korean data was used for IF 
development. 
The development database contains over 4000 
dialogue act units, which are covered by a total of 
about 542 distinct DAs (346 agent DAs and 278 
client DAs). Figures 1 and 2 show the cumulative 
coverage of the top twenty DA's and speech acts 
in the development data. Figure 1 also shows the 
percentage ofno-tag utterances (the ones we de- 
cided not to cover) in the development data. The 
first column shows the percent of the development 
data that is covered cumulatively by the DA's or 
speech acts from the top of the table to the cur- 
rent line. For example, acknowledg e and aff irm 
together account for 19.8 percent of the data. The 
19 
Language(s) Type  of Dialogue Number  of DA Units  
D'evelopment Data: 
English 
Italian 
Korean-English 
Test Data: 
Japanese-English 
monolingual 
monolingual 
biiingual (only 'Korean 
utterances are included) 
bilingual (Japanese and 
English utterances are 
included) 
Table 1: The IF Database 
2698 
1142 
6069 
Percent 
' Cumulat ive Percent Count DA 
Cover~,--= - " 4.6 263 no-tag 
15.6 15.6 ? - 885 acknowledge 
20.2 4,6 260 thank 
23.7 3.5 200 introduce-self 
27.0 3.4 191 affirm 
29.7 2.7 153 apologize 
32.3 2.6 147 greeting 
34.6 2.3 128 closing 
36.3 1.7 98 give- information+personal-data 
38.0 1.7 95 glve-inform ation +t  em poraI 
39.5 1.6 89 give-in formation +price 
41.1 1.5 88 please-wait 
42.5 1.4 82 give-inform+telephone-number 
43.8 1.3 75 g ive- informat ion+features+room 
45.0 I . I  65 request- inform+personal-data 
46.0 1.0 59 give-in for m ?temp oral-.{- arrival 
47.0 1.0 55 accept 
48.0 l.O 55 give-infor m +avai labi l i ty + room 
48.9 1.0 55 give-information+price-broom 
49.8 0.9 50 verify 
50.7 0.9 49 request-in form +tempora l+arr iva l  
Figure 3: Coverage of Top 20 DAs and No-tag in 
test data 
Percent 
Cumulat ive 
Coverage 
25.6 
Percent Count DA 
25.6 1454 give-information 
41.7 16.1 916 acknowledge 
53.6 11.9 677 request- information 
58.2 4.6 260 thank 
62,0 3.7 213 request-verification-give-inform 
65.5 3.5 200 introduce-self 
68.8 3.4 191 a f f i rm 
72.0 3.2 181 request -act ion  
74.8 2.8 159 accept 
77.5 2.7 153 apologize 
80.1 2.6 147 greet ing 
82.4 2.3 130 closing 
84.4 2.1 117 suggest 
86.3 1.8 104 verlfy-give-information 
87.9 1.7 94 offer 
89.5 1.5 88 please-wait 
90.6 I . I  65 negate-glve-lnformation 
91.5 0.9 50 verify 
92.0 0.5 30 negate 
92.5 0.5 . 26 request-aff irmatlon 
Figure 4: Coverage of Top 20 SAs in test data 
second column shows the percent of the develop- 
ment data covered by each DA or speech act. The 
third column shows the number of times each DA 
or speech act occurs in the development data. 
The evaluation portion of the coverage x- 
periment was carried out on 124 dialogues (6069 
dialogue act units) that were collected at ATR, 
Japan. One participant in each dialogue was 
speaking Japanese and the other was speaking En- 
glish. Both Japanese and English utterances are 
included in the data. The 124 Japanese-English 
dialogues were not examined closely by system de- 
velopers during IF development. After the IF de- 
sign was finalized and frozen in Summer 1999, the 
Japanese-English data was tagged with IFs. No 
further IF development took place at this point 
except hat values for arguments were added. For 
example, Miyako could be added as a hotel name, 
but no new speech acts, concepts, or argument 
types could be added. Sentences were tagged as 
no-tag if the IF did not cover them. 
Figures 3 and 4 show the cumulative cover- 
age of the top twenty DAs and speech acts in the 
Japanese-English data, including the percent of 
no-tag sentences. 
Notice that the percentage of no-tag was 
lower in our test data than in our development 
data. This is because the role playing instructions 
for the test data were more restrictive than the 
role playing instructions for the development data. 
Figures 1 and 3 show that slightly more of the test 
data is covered by slightly fewer DAs. 
Cross-Site Reliability of IF 
Representations 
In this section we attempt o measure how reliably 
IF is used by researchers at different sites. Recall 
that one of the design criteria of IF was consis- 
tency of use by researchers who are separated by 
oceans. This criterion limits the complexity of IF. 
Two measures of consistency are used - inter-coder 
agreement and a cross-site nd-to-end evaluation. 
Inter -Coder  Agreement:  Inter-coder agree- 
ment is a direct measure of consistency among 
20 
Percent Agreement 
Speech-act 82.14 
Dialog-act 65.48 
Concept lists 88.00 
Argument lists I 85.79 
Table 2: Inter-coder Agreement between CMU 
and IRST 
C-STAR partners. We used 84 DA units from 
the Japanese-English data described above. The 
84 DA units consisted of some coherent dialogue 
fragments and and some isolated sentences. The 
data was coded at CMU and at IRST. We counted 
agreement on ~he components ofthe IF separately. 
Table 2 shows agreement on speech acts, dialogue 
acts (speech act plus concepts), concepts, and ar- 
guments. The results are reported in Table 2 in 
terms of percent agreement. Further work might 
include some other calculation of agreement such 
as Kappa or precision and recall of the coders 
against each other. Figure 5 shows a fragment of 
a dialogue coded by CMU and IRST. The coders 
disagreed on the IF middle sentence, I'd like a twin 
room please. One coded it as an acceptance of a 
twin room, the other coded it as a preference for 
a twin room. 
Cross-Site Evaluation: As an approximate and 
indirect measure of consistency, we have compared 
intra-site end-to-end evaluation with cross-site 
end-to-end evaluation. An end-to-end evaluation 
includes an analyzer, which maps the source lan- 
guage input into IF and a generator, which maps 
IF into target language sentences. The intra-site 
evaluation was carried out on English-German, 
English-Japanese, and English-IF-English trans- 
lation. The English analyzer and the German, 
Japanese, and English generators were all writ- 
ten at CMU by IF experts who worked closely 
with each other. The cross-site valuation was car- 
ried out on English-Italian translation, involving 
an English analyzer written at CMU and an Ital- 
ian generator written at IRST. The IF experts at 
CMU and IRST were in occasional contact with 
each other by email, and met in person two or 
three times between 1997 and 1999. 
A number of factors contribute to the success 
of an inter-site valuation, just one of which is that 
the sites used IF consistently with each other. An- 
other factor is that the two sites used similar de- 
velopment data and have approximately the same 
coverage. If the inter-site valuation results are 
about as good as the intra-site results, we can con- 
clude that all factors are handled acceptably, in- 
cluding consistency of IF usage. If the inter-site 
results are worse than the intra-site results, con- 
sistency of IF use or some other factor may be 
to blame. Before conducting this evaluation, we 
already knew that there was some degree of cross- 
site consistency in IF usage because we conducted 
successful inter-continental demos with speech 
translation and video conferencing in Summer 
1999. (The demos and some of the press coverage 
are reported on the C-STAR web site.) The de- 
mos included ialogues in English-Italian, English- 
German, English-Japanese, English-Korean, and 
English-French. At a later date, an Italian-Korean 
demo was produced with no additional work, thus 
illustrating the well-cited advantage of an inter- 
lingual approach in a multi-lingual situation. The 
end-to-end evaluation reported here goes beyond 
the demo situation to include data that was un- 
seen by system developers. 
Evaluation Data: The Summer 1999 intra-site 
evaluation was conducted on about 130 utterances 
from a CMU user study. The traveller was played 
by a second time user - -  someone who had partici- 
pated in one previous user study, but had no other 
experience with our MT system. The travel agent 
was played by a system developer. Both people 
were speaking English, but they were in different 
rooms, and their utterances were paraphrased us- 
ing IF. The end-to-end procedure was that (1) an 
English utterance was spoken and decoded by the 
JANUS speech recognizer, (2) the output of the rec- 
ognizer was parsed into an IF representation, and 
(3) a different English utterance (supposedly with 
the same meaning) was generated from the IF rep- 
resentation. The speakers had no other means of 
communication with each other. 
In order to evaluate English-German and 
English-Japanese translation, the IFs of the 130 
test sentences were fed into German and Japanese 
generation components atCMU. The data used in 
the evaluation was unseen by system developers 
at the time of the evaluation. For English-Italian 
translation, the IF representations produced by 
the English analysis component were sent to IRST 
to be generated in Italian. 
Evaluation Scoring: In order to score the eval- 
uation, input and output sentences were compared 
by bilingual people, or monolingual people in the 
case of English-IF-English evaluation. A score of 
ok is assigned if the target language utterance is
comprehensible and no components ofmeaning are 
deleted, added, or" changed by the translation. A
21 
We have singles, and t,ins and also Japanese rooms available on the eleventh. 
CMU a:give-information+availability+room 
(room-type=(single ~ twin ~ japanese_style), time=mdll) 
IRST a:give-in2ormation+availability+room 
(room-type=(single ~ twin & japanese_style), time=mdll) 
I'd like a twin room, please. 
CMU c:accept+features+room (room-typeffitwin) 
IBST c:give-information+preference+features+room (room-type=twin) 
A twin room is fourteen thousand yen. 
CMU a:give-information+price+room 
(room-type=twin, price=(currency=yen, quantity=f4000)) 
IRST a:give-in.formation+price+room 
(room-type=twin, price=(currency=yen, quantity=f4000)) 
Figure 5: Examples of IF coding from CMU and IRST 
.o  
Method 
1 Recosnition only 
2 Transcription 
3 Recosnition 
4 Transcription 
5 Recognition 
6 Transcription 
7 Recognition 
8 Transcription 
9 Recognition 
10 Transcription 
11 Recognition 
I OutPut Language II OK+Perfect Perfect Grader I No. of Graders 
En$1ish 
English. 
En$1ish 
Japanese 
Japanese 
German 
German 
German 
German 
Italian 
Italian 
78 % 62 % CMU 3 
74 % 54 % CMU 3 
59 ~ 42 % CMU 3 
777 % 59 % CMU 2 
62 % 4,5 % CMU 2 
70 %- ..... s9 % CMU " 
58 % 34 % CMU 2 
67 ~ 43 % IRST 2 
59 % 36 % IRST 2 
73 % 51% IRST .... . .  6 
61% 42 % IRST 6 
Figure 6: Translation Grades for English to English, Japanese, German, and Italian 
score of perfect is assigned if, in addition to the 
previous criteria, the translation is fluent in the 
target language. A score of bad is assigned if the 
target language sentence is incomprehensible or 
some element of meaning has been added, deleted, 
or changed. The evaluation procedure isdescribed 
in detail in \[GLL+96\]. In Figure 6, acceptable is
the sum of per fec t  and ok scores, s 
Figure 6 shows the results of the intra-site 
and inter-site evaluations. The first row grades 
the speech recognition output against a human- 
produced transcript of what was said. This gives 
us a ceiling for how well we could do if trans- 
lation were perfect, given speech recognition er- 
rors. Rows 2 through 7 show the results of the 
intra-site evaluation. All analyzers and genera- 
tors were written at CMU, and the results were 
graded by CMU researchers. (The German re- 
sults are a lower than the English and Japanese 
results because a shorter time was spent on gram- 
mar development.) Rows 8 and 9 report on CMU's 
intra~site valuation of English-German transla~ 
Sin another paper (\[LBL+00\]), we describe a task- 
based evaluation which focuses on success of commu- 
nicative goals and how long it takes to achieve them. 
tion (the same system as in Rows 6 and 7), but 
the results were graded by researchers at IRST. 
Comparing Rows 6 and 7 with Rows 8 and 9, we 
can check that CMU and IRST graders were us- 
ing roughly the same grading criteria: a difference 
of up to ten percent among graders is normal in 
our experience. Rows 10 and 11 show the results 
of the inter-site English-Italian evaluation. The 
CMU English analyzer produced IF representa- 
tions which were sent to IRST and were fed into 
IRST's Italian generator. The results were graded 
by IRST researchers. 
Conclusions drawn from the inter-site valuation: 
Since the inter-site evaluation results are compa- 
rable to the intra-site results, we conclude that re- 
searchers at IRST and CMU are using IF at least 
as consistently as researchers within CMU. 
Future Plans 
In the next phase of C-STAR, we will cover de- 
scriptive sentences (e.g., The castle was built in 
the thirteenth century and someone was impris- 
oned in the tower) as well as task-oriented sen- 
tences. Descriptive sentences will be represented 
22 
in a more traditional frame-based interlingua fo- 
cusing on lexical meaning and grammatical fea- 
tures of the sentences. We are working on disam- 
biguating literal from task-oriented meanings in 
context. For example That's great could be an ac- 
ceptance (like I'll take it) (task oriented) or could 
just express appreciation. Sentences may also con- 
tain a combination of task oriented (e.g., Can you 
tell me) and descriptive (how long the castle has 
been standing) components. 
\[GLL+96\] 
\[LBL+O0\] 
\[LGLW98\] 
Re ferences  
Donna Gates, A. Lavie, L. Levin, 
A. Waibel, M. Gavald~, L. Mayfield, 
M:-Woszczyna, and P. Zhan. End-to- 
End Evaluation in JANUS: A Speech- 
to-Speech Translation System. In Pro- 
ceedings of ECAI-96, Budapest, Hun- 
gary, 1996. 
Lori Levin, Boris Bartlog, Ari- 
adna Font Llitjos, Donna Gates, Alon 
Lavie, Dorcas Wallace, Taro Watan- 
abe, and Monika Woszczyna. Lessons 
Learned from a Task-Based Evaluation 
of Speech-to-Speech MT. In Proceed- 
ings of LREC 2000, Athens, Greece, 
June to appear, 2000. 
Lori Levin, D. Gates, A. Lavie, and 
A. Waibel. An Interlingua Based on 
Domain Actions for Machine Transla- 
tion of Task-Oriented Dialogues. In 
Proceedings of the International Con- 
ference on Spoken Language Process- 
ing (ICSLP'98), Sydney, Australia, 
1998. 
\[LLW +\] 
\[PT98\] 
Lori Levin, A. Lavie, M. Woszczyna, 
D. Gates, M. Gavald~, D. Koll, and 
A. Waibel. The Janus-III Translation 
System. Machine Translation. To ap- 
pear. 
Fabio Pianesi and Lucia Tovena. Us- 
ing the Interchange Format for Encod- 
ing Spoken Dialogue. In Proceedings of
SIG-IL Workshop, 1998. 
23 
SiSSA - An Infrastructure for NLP Application Development
A. Lavelli and F. Pianesi
ITC-irst
via Sommarive 18
38050 Povo (TN) ITALY
lavelli@itc.it
pianesi@itc.it
E. Maci and I. Prodanof
Ist. di Ling. Comput.
Area di Ricerca CNR
via Alfieri 1, San Cataldo
56010 Pisa ITALY
maci@ilc.pi.cnr.it
irina@ilc.pi.cnr.it
L. Dini and G. Mazzini
CELI
corso Moncalieri 21
10131 Torino ITALY
dini@celi.it
mazzini@celi.it
Abstract
Recently there has been a growing in-
terest in infrastructures for sharing NLP
tools and resources. This paper presents
SiSSA, a project that aims at devel-
oping an infrastructure for prototyping,
editing and validation of NLP applica-
tion architectures. The system will pro-
vide the user with a graphical environ-
ment for (1) selecting the NLP activities
relevant for the particular NLP task and
the associated linguistic processors that
execute them; (2) connecting new lin-
guistic processors to SiSSA; (3) check-
ing that the chosen architectural hy-
pothesis corresponds to the functional
specifications of the given application.
1 Introduction
In recent years there has been a growing inter-
est in the commercial deployment of NLP tech-
nologies and in infrastructures for sharing NLP
tools and resources. Such interest makes more
and more urgent the availability of toolsets that
allow an easy and quick integration of linguistic
resources and modules and the rapid prototyping
of NLP applications. An example of the efforts in
such a direction is GATE (a General Architecture
for Text Engineering, (Cunningham et al, 1997)),
which provides a software infrastructure on top
of which heterogeneous NLP processing modules
may be evaluated and refined individually, or may
be combined into larger application systems.
This paper presents SiSSA (Sistema integrato
di Supporto allo Sviluppo di Applicazioni - Inte-
grated System of Support to Application Devel-
opment), a project with a twofold aim:
  the definition of a common metaformalism
(called FIST) for the unification of different
formalisms for grammar description, and the
implementation of a Grammar Repository
for storing grammars written using FIST;
  the implementation of an infrastructure for
the rapid prototyping and testing of architec-
tures for NLP systems, starting from linguis-
tic processors made available by SiSSA it-
self.
In this paper we concentrate on the latter as-
pect, i.e. the infrastructure for designing NLP ar-
chitectures. To this end, SiSSA provides the user
with a graphical environment for (1) selecting the
linguistic activities which are relevant to the par-
ticular application at hand, along with the linguis-
tic processors that execute them; (2) checking that
the chosen architectural hypothesis corresponds
to the functional specifications of the application;
(3) connecting to SiSSA new linguistic proces-
sors, this way making them available for the pro-
totyping/design activities.
Thus, the design of the architecture of an NLP
system amounts to a) identifying a sequence of
linguistic activities to be performed; b) connect-
ing them in a specific processing chain; and c)
associating each linguistic activity to a suitable
processor, selected among those made available
by SiSSA. The term project is used to refer to the
product of the user?s activity, namely, the archi-
tecture of the NLP application the user is building.
A project encodes processing flows among basic
units, each consisting of a linguistic task that is
executed by a linguistic processor.
Projects have two uses. First, they store the sta-
tus of a user session. Second, they are the main
units of runtime modules: the SiSSA Manager
(see below) interprets projects by executing the
procedures chosen by the user and applying them
to the document selected for execution.
SiSSA makes crucial use of state-of-the-art
software technologies (CORBA, XML) in order
to integrate the various modules in an effective
way. The core of SiSSA has been developed in
Java; hence it can run both on Windows and on
Unix platforms.
SiSSA consists of two parts: an autonomous
application (called SiSSA Manager) and a set
of executable modules, henceforth called proces-
sors. The SiSSA Manager provides an infrastruc-
ture for architecture composition and processor
integration. That is, it provides all the necessary
support to allow the user to select linguistic activ-
ities, connect them in an overall processing chain,
and associate each activity to a linguistic proces-
sor. Moreover, it takes care of executing the pro-
cessing flow encoded in the project, reporting re-
sults to the user, etc.
A major goal while designing SiSSA was to
allow the system to reuse existing processors as
much as possible. This was meant to extend to
processors located in other sites than the user?s.
Already existing processors are written in differ-
ent programming languages and run on different
hardware and software platforms; so this objec-
tive required the adoption of a distributed archi-
tecture, providing:
  flexibility (processors can be developed and
updated independently);
  expandibility (new processors can be added);
  independence from the programming lan-
guages employed to implement the proces-
sors;
  distribution of execution on different hard-
ware platforms.
As a result, the user can exploit for his/her
needs processors that are located anywhere, pro-
vided that they have been notified to SiSSA, and
enclosed in a wrapper so as to comply with the
SiSSA interface (see Section 2.2 and 2.3).
In the following sections, we first present a de-
tailed description of SiSSA. Then some consider-
ations on the pratical use of the system are intro-
duced. Finally some details about the current sta-
tus of the SiSSA implementation and the future
work follow.
2 SiSSA
The SiSSA system consists of:
  the SiSSA Manager;
  the processors;
  the grammars contained in the Grammar
Repository;1
  formal specifications of the interfaces each
processor has to provide in order to be ?in-
tegrable? in SiSSA (this part uses CORBA,
Common Object Request Broker Architec-
ture - http://www.corba.org,);
  protocols for communication and formats for
representation and exchange of information
(achieved using XML (Bray et al, 2000)).
The difference between the third and the fourth
element above is that the CORBA part specifies
the details of the communication process with-
out any reference to the linguistic characteris-
tics of the integrable processors (this part could
be largely reused in other non linguistic projects
involving a distributed architecture); the specifi-
cally linguistic details are embedded in the XML
documents passed between the processors.
2.1 SiSSA Architecture
The central element in the SiSSA architecture is
an autonomous application, called SiSSA Man-
ager. It is autonomous since it takes the initiative
in the management of the processing flow of the
SiSSA system, where it mainly plays the role of
client. Its main tasks are the following:
1This part is not dealt with in the paper.
  to interact with the Processor Repository
(the place where information about proces-
sors known to SiSSA is stored) to take a cen-
sus, activate and connect the processors no-
tified to the system;
  to present the system functionalities to the
user by means of a web-based graphical in-
terface. To this end, the SiSSA Manager
acts as a server with respect to the processors
towards which it mediates the ?centralized?
GUI. Through the latter, the SiSSA Manager
not only interprets the user?s actions but also
gives her/him a report on the ongoing pro-
cessing, storing and presenting logs and sta-
tus messages coming from the active proces-
sors;
  to manage and interpret the projects built by
the user.
The Processor Repository classifies the proces-
sors, by associating each of them to the appro-
priate class of linguistic processors (e.g., mor-
phological analyzers, PoS taggers, etc.).2 The
Processor Repository also provides functionali-
ties for permanently storing the properties asso-
ciated with the processors registered in the repos-
itory. Among them, the properties that specify the
methods for activating a processor are crucial. As
a matter of fact, the single processors must be ac-
tive in order to be available for use by SiSSA. The
activation of a processor takes place by means of
an Activation Server3 reachable via CORBA at
the URL stored in the Processor Repository and
specifying the corresponding activation string.
The information is stored in the repository us-
ing RDF4 and RDFS5 (Resource Description
2Currently the following classes of processors are de-
fined in SiSSA: documentProc, preprocessorProc, textZon-
erProc, nERecognizerProc, morphologyProc, poSTagger-
Proc, syntaxProc, semanticsProc, DiscourseProc, XSLProc.
3In case the processor resides on a computer directly ac-
cessible to the SiSSA Manager, it can be activated by means
of a shell command. In the following we always consider the
case in which the activation server is needed.
4RDF is a W3C Recommendation of 22 February 1999
(Lassila and Swick, 1999) that specifies a declarative lan-
guage (based on XML) formally equivalent to propositional
logics. RDF is usually employed to describe resources on
the web.
5RDF Schema Specification 1.0, published as a W3C
Candidate Recommendation in March 2000 (Brickley and
Guha, 2000).
Framework and RDF Schema). RDF Schema
makes available tools to check that the descrip-
tions of the processors? characteristics comply
with SiSSA Manager?s constraints. The RDF
specification of the processors made available in
SiSSA is usually built using a graphical inter-
face. The adoption of RDF and RDF Schema en-
hances the generality of SiSSA, by avoiding ad
hoc languages for resource description, and ad
hoc schemas for the validation of documents de-
scribing the processors.
Turning to the processors stored in the repos-
itory, they mainly play the role of servers which
are activated upon request by the SiSSA Manager.
The goal of making available distributed ar-
chitectures for projects is pursued through the
adoption of CORBA (Common Object Request
Broker Architecture - http://www.corba.
org, developed by the OMG industry consor-
tium), which acts as the glue keeping together
the executable parts of SiSSA.6 To be available
to SiSSA, processors must be registered in the
Processor Repository. To this end, they must ex-
hibit interfaces that comply with a set of specifi-
cations defined using the CORBA Interface Defi-
nition Language (IDL). Thus, providing the com-
pliant interfaces is a necessary step towards inte-
grating new processors within SiSSA.
As to communication formats, the overall goals
of SiSSA made the adoption of XML (Bray et al,
2000) a natural choice. Thus messages are ex-
changed in the form of XML documents of type
process-data (see Section 2.3). These doc-
uments incorporate in a single structure: the ob-
ject to be processed, and information relevant for
the processing itself (metadata). The generality of
such a format permits its use both for the commu-
nication between the SiSSA Manager and the pro-
cessors, and for those directly taking place among
the processors.
2.2 Communication Protocols
As said, SiSSA provides a set of formal IDL spec-
ifications which the interfaces of processors aim-
ing at being integrated in the environment must
adhere to. Such specifications model the interac-
tion between the SiSSA Manager and the proces-
6The SiSSA Manager uses ORBacus 3.3.2, http://
www.ooc.com/ob/.
Figure 1: The UML diagram of the SiSSA IDLs.
sors, as mediated by CORBA. They can be seen as
a contract that the SiSSA Manager and the proces-
sors have to comply for their mutual integration to
be successful. A UML diagram of the SiSSA IDL
specifications is shown in Figure 1.
The scenario of the cooperation between the
SiSSA Manager and a generic processor can be
described as follows:
  the processor?s activation server starts
and connects on the CORBA bus as a
named server at a specified URL (i.e, the
corbaloc: URL stored in the Processor
Repository);
  the SiSSA Manager, in its turn connected to
the CORBA bus, can contact the activation
server using the corbaloc: URL speci-
fied in the Processor Repository; using the
processor?s activation string it can ask the
server to activate the corresponding proces-
sor;
  from now on, the interaction takes place di-
rectly between the SiSSA Manager and the
processors whose interface it obtained;
  the SiSSA Manager can in this way act as a
true manager, establishing and removing the
connections between the processors accord-
ing to the design of the processing flow de-
cided by the user.
In SiSSA, the communication is asynchronous,
and is implemented by means of a flow of XML
documents. The processors and the SiSSA Man-
ager can be both the source and the target of com-
munication. Moreover, each communication can
have more than one target.
Being a possible target of communications,
each registrable processor provides the function-
alities of the interface IObserver. The SiSSA
Manager?s way to establish/remove the relation-
ships between processors according to the user
requirements amounts to inserting/deleting ob-
servers into a processor?s list of observers.
Besides the communication related to the lin-
guistic processing, other relevant communica-
tion flows concern error messages, and infor-
mation tracing. Logs and messages directed
to the user are managed through the inter-
face IMsgMonitor. Finally, the interface
IStateMonitor (provided by the SiSSA Man-
ager) allows each processor to signal its callers
the status of its own processing (an example of
its use is shown in the bottom bar of the window
shown in Figure 3).
An important service provided by the SiSSA
Manager is the XSL7 processing of XML docu-
ments. To this end, the SiSSA Manager provides
the interface XSLProcServer, through which
XSLProcessor (a processor specialized in XSL
transformations) is made available.8 This feature
allows the insertion of XSL transformations be-
tween any pair of processors, this way providing
the possibility of adapting one processor?s output
to the requirement of the following one(s). This
feature is of the utmost importance for augment-
ing SiSSA?s capabilities of integrating and suc-
cessfully making available a wide range of pro-
cessors.
2.3 Communication and Representation
Formats
Communications take place using a ?data contain-
er? modeled by the interface IDataStream. An
object that implements such interface is sent by a
processor to each of its observers on completion
of its processing.
IDataStream is designed as a container
rather than as a structured model of the data
exchanged. The definition of structured mod-
els for data is completely independent from
IDataStream, and is obtained through differ-
ent means. Indeed, given that the contents of data
streams are XML documents, their structure is
made explicit by means of Document Type Defi-
nitions (DTDs).
SiSSA is a development environment, meant
to be open to the integration of new components,
whereby the latter can differ among them along a
number of dimension, including the input/output
formats. At the same time, SiSSA should allow
the user an adequate level of control over the in-
termediate results produced during the computa-
tion (i.e., the output of each processor). XML al-
lows a representation of data which is transparent
7The Extensible Style Language (XSL (Adler et al,
2000)) is a language that allows to transform data from one
XML representation to another.
8The SiSSA Manager uses the Xalan XSLT processor,
http://xml.apache.org.
and accessible to the developer, without the need
for her/him to know the details of the implementa-
tion of the single components. At the same time,
it does not increase the complexity of the CORBA
interfaces that encapsulate such data.
The data defined in XML are associated to a
document of type process-data. Each doc-
ument of type process-data necessarily in-
cludes two parts:
  linguistic data, usually corresponding to the
result of the computation done by the source
processor;
  metadata. Their role is to specify: the level
of analysis accomplished by the source pro-
cessor (e.g., tokenisation, parsing, etc.); the
unique identifier of the processor originat-
ing the data; further useful information about
processing (time of execution, rules applied,
etc.). Moreover, metadata make available
a unique identifier for the process-data
document. This is useful so to associate the
input with the different output structures pro-
duced by the different processing steps.
The linguistic data have to comply with the
definitions specified for the different classes of
processors. Such classes are identified by the
attribute level-of-analysis present in the
metadata (e.g., morphological analyzer, PoS tag-
ger, chunk parser, etc.) and should take into ac-
count (at least to a certain extent) idiosyncrasies
of specific processors. For instance, a morpho-
logical analyzer can adopt a set of category labels
not entirely coincident with that of another mor-
phological analyzer.
Obviously, a structure that aims to carry lin-
guistic data of different nature, and so differently
represented, can become quite complex when the
levels of analysis taken into consideration in-
crease. Moreover, during the development phase,
the problem arises of the integration of data struc-
tures relative to levels of analysis previously not
taken into consideration, as well as of data struc-
tures idiosyncratic to processors belonging to
some classes. The modular nature of the DTDs
for XML allows a neat distinction among meta-
data, and data relative to classes of processors (id-
iosyncratic data). The former are described in a
single DTD, defined as part of the resources inter-
nal to SiSSA, while the latter can be conveyed by
various DTDs, possibly made available in SiSSA
along with each processor.
As said, each processor at the end of its
processing makes available a document of type
process-data, which contains exclusively the
output data of the specific processor ? and obvi-
ously the corresponding metadata. Such a doc-
ument is a representation of the output of the
processor that generated it, and does not contain
any representation relative to previous levels of
analysis, the input text or the history of the pro-
cessing done so far. Thus, for efficiency reasons
process-data are not incremental collection
of all the data produced by the various processors.
At the same time, the need to keep a link be-
tween the input test and the output produced by
the system cannot be ignored. It is also reason-
able that in certain situations (e.g., during testing
and debugging) the structures produced by the in-
termediate processors, as well as the metadata of
the various processors, are needed to show or save
tracing information. In the proposed architecture,
this task is accomplished by the SiSSA Manager,
that can register itself as an observer of any pro-
cessor; in this way it can access the processor out-
put and show it to the user or build a tracing struc-
ture.9
3 SiSSA at Work
There are two main activities regarding the char-
acteristics of SiSSA described in this paper: the
development of projects and the integration of
processors.
3.1 Projects
The creation and editing of projects takes place
exclusively via the SiSSA graphical interface.
First the user decides which linguistic activities
are relevant to her/his project. Then s/he can
browse the Processor Repository, searching for
those which are suitable to realize each linguis-
tic activity.10 Finally, s/he composes them into a
project.
9The SiSSA Manager uses the Xerces XML parser,
http://xml.apache.org.
10The processors currently available within SiSSA are
some processors developed by the partners of the project: the
morphological analyzer and the parser of NLGRADE (ILC,
When it is necessary to test a given project
on a text the SiSSA Manager prepares a suitable
stream (IDataStream) and sends it to the pro-
cessor selected as the first in the analysis chain.
The processor interprets the metadata, executes
the specified operation on the linguistic data and
finally sends its output to all its observers; some
of them can be required to perform further pro-
cessing on the linguistic data. The output pro-
duced by a processor is sent to the SiSSA Man-
ager as well, so that it can be shown to the user in
a suitable form.
In Figure 2 the starting page of the SiSSA sys-
tem is shown. In the upper part of the window
there are a few buttons that are present in all the
pages of SiSSA. From left to right:
  Home: a link to the starting page of SiSSA;
  SiSSA Manager: a link to the page of the
SiSSA Manager;
  Progetti (projects): a link to the page that
allows to create, edit, and activate the user?s
projects;
  Repository: a link to the page for inter-
acting with the Processor Repository;
  Help: an online help.
Figure 3 shows the applet that interactively
monitors the status of the project currently active
and displays it to the user. In the upper part of
the window the details of the active project are
shown: the processors (left), the connections be-
tween processors (middle), and the XSL filters
(right). In the lower part of the window the mes-
sages coming from the processors are shown. The
bottom bar shows which of the processors/filters
is currently active (using the IStateMonitor
interface described in Section 2.2).
3.2 Integration of processors
Differently from the activity of creation and edit-
ing of projects, only the final part of the work in-
volved in the integration of processors is accom-
plished via the SISSA graphical interface (more
written in C and running under Windows: (Prodanof et al,
1998; Prodanof et al, 2000)) and the preprocessor and the
parser of GEPPETTO (ITC-irst, written in Common Lisp and
running under Solaris: (Ciravegna et al, 1997; Ciravegna et
al., 1998)).
Figure 2: The starting page of SiSSA.
precisely, the registration in the Processor Repos-
itory of the availability of the processors).
In order to make a processor SiSSA-compliant,
the following steps are necessary:
  to provide it with a wrapper so that it com-
municates via the CORBA IDLs of SISSA;
  to make a translation between the proces-
sor?s native input/output and the correspond-
ing linguistic representation specified by
process-data;
  to register the processor in the Processor
Repository using the SiSSA graphical inter-
face; during this step the class of the pro-
cessor, its corbaloc: URL and activation
string have to be specified.
4 Conclusions
The release 1.2 of the SiSSA Manager has been
completed and is currently under use at the sites
involved in the SiSSA project.
Given the emphasis on rapid prototyping,
SiSSA has been developed with flexibility during
the development phase as a primary goal. Obvi-
ously this flexibility is no longer needed when an
application is delivered (on the contrary flexibility
can considerably reduce the performances of the
system). We are currently studying approaches to
allow the delivery of efficient runtime processors.
Currently the SiSSA Manager is a single-user
application. An extension is the possibility of
having more than one user that uses it at the same
time.
The SiSSA system has been developed as part
of the TAL project. TAL is a project partially
funded by the Italian Ministry for University and
Scientific Research.
References
Sharon Adler, Anders Berglund, Jeff Caruso, Stephen
Deach, Paul Grosso, Eduardo Gutentag, Alex
Milowski, Scott Parnell, Jeremy Richman, and
Steve Zilles. 2000. Extensible Stylesheet Lan-
guage (XSL) Version 1.0. W3C Candidate Recom-
mendation 21 November 2000. http://www.
w3.org/TR/xsl/.
Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, and
Eve Maler. 2000. Extensible Markup Language
(XML) 1.0 (Second Edition). W3C Recommenda-
tion 6 October 2000. http://www.w3.org/
TR/REC-xml/.
Dan Brickley and R.V. Guha. 2000. Resource
Description Framework (RDF) Schema Speci-
fication 1.0. W3C Candidate Recommendation
Figure 3: The applet that shows the connections between processors.
27 March 2000. http://www.w3.org/TR/
2000/CR-rdf-schema-20000327/.
Fabio Ciravegna, Alberto Lavelli, Daniela Petrelli, and
Fabio Pianesi. 1997. Participatory Design for Lin-
guistic Engineering: the case of the GEPPETTO
Development Environment. In Proceedings of the
ACL/EACL?97 Workshop on Computational Envi-
ronments for Grammar Development and Linguistic
Engineering, Madrid, Spain, July.
Fabio Ciravegna, Alberto Lavelli, Daniela Petrelli,
and Fabio Pianesi. 1998. Developing language
resources and applications with GEPPETTO. In
Proceedings of the First International Conference
on Language Resources & Evaluation, Granada,
Spain.
Hamish Cunningham, K. Humphreys, Robert
Gaizauskas, and Yorick Wilks. 1997. Software
infrastructure for natural language processing. In
Proceedings of the Fifth Conference on Applied
Natural Language Processing (ANLP-97).
Ora Lassila and Ralph R. Swick. 1999. Re-
source Description Framework (RDF) Model and
Syntax Specification. W3C Recommendation 22
February 1999. http://www.w3.org/TR/
REC-rdf-syntax/.
I. Prodanof, A. Cappelli, L. Moretti, M. Carenini,
P. Moreschini, and M. Vanocchi. 1998. A gram-
mar development environment for reusable and eas-
ily customizable NL applications. In Proceedings
of the First International Conference on Language
Resources & Evaluation, Granada, Spain.
I. Prodanof, A. Cappelli, and L. Moretti. 2000.
Reusability as easy adaptability: A substantial ad-
vance in NL technology. In Proceedings of the
Second International Conference on Language Re-
sources & Evaluation, Athens, Greece.
Balancing Expressiveness and Simplicity
in an Interlingua for Task Based Dialogue
Lori Levin, Donna Gates, Dorcas Wallace,
Kay Peterson, Alon Lavie
Language Technologies Institute
Carnegie Mellon University
Pittsburgh, PA 15213
email: lsl@cs.cmu.edu
Fabio Pianesi, Emanuele Pianta,
Roldano Cattoni, Nadia Mana
IRST-itc, Italy
Abstract
In this paper we compare two interlin-
gua representations for speech transla-
tion. The basis of this paper is a distri-
butional analysis of the C-star II and
Nespole databases tagged with inter-
lingua representations. The C-star II
database has been partially re-tagged
with the Nespole interlingua, which
enables us to make comparisons on the
same data with two types of interlin-
guas and on two types of data (C-
star II and Nespole) with the same
interlingua. The distributional infor-
mation presented in this paper show
that the Nespole interlingua main-
tains the language-independence and
simplicity of the C-star II speech-act-
based approach, while increasing se-
mantic expressiveness and scalability.
1 Introduction
Several speech translation projects have chosen
interlingua-based approaches because of its con-
venience (especially in adding new languages)
in multi-lingual projects. However, interlingua
design is notoriously dicult and inexact. The
main challenge is deciding on the grain size of
meaning to represent and what facets of mean-
ing to include. This may depend on the do-
main and the contexts in which the translation
system is used. For projects that take place at
multiple research sites, another factor becomes
important in interlingua design: if the interlin-
gua is too complex, it cannot be used reliably by
researchers at remote sites. Furthermore, the in-
terlingua should not be biased toward one fam-
ily of languages. Finally, an interlingua should
clearly distinguish general and domain specic
components for easy scalability and portability
between domains.
Sections 2 and 3 describe how we balanced
the factors of grain-size, language independence,
and simplicity in two interlinguas for speech
translation projects | the C-star II Inter-
change Format (Levin et al, 1998) and the Ne-
spole Interchange Format. Both interlinguas
are based in the framework of domain actions
as described in (Levin et al, 1998). We will
show that the Nespole interlingua has a ner
grain-size of meaning, but is still simple enough
for collaboration across multiple research sites,
and still maintains language-independence.
Section 4 will address the issue of scalabil-
ity of interlinguas based on domain actions to
larger domains. The basis of Section 4 is a dis-
tributional analysis of the C-star II and Ne-
spole databases tagged with interlingua repre-
sentations. The C-star II database has been
partially re-tagged with the Nespole interlin-
gua, which enables us to make comparisons on
the same data with two types of interlinguas and
on two types of data (C-star II and Nespole)
with the same type of interlingua.
2 The C-star II Domain, Database,
and Interlingua
The C-star II interlingua (Levin et al, 1998)
was developed between 1997 and 1999 for use
in the C-star II 1999 demo (www.c-star.org).
                                            Association for Computational Linguistics.
                           Algorithms and Systems, Philadelphia, July 2002, pp. 53-60.
                          Proceedings of the Workshop on Speech-to-Speech Translation:
c: can I have some flight times
that would leave some time around June sixth
a: the there are several flights leaving D C
there?d be one at one twenty four
there?s a three fifty nine flight
that arrives at four fifty eight
...
what time would you like to go
c: I would take the last one that you mentioned
...
a: what credit card number would you like
to reserve this with
c: I have a visa card
and the number is double oh five three
three one one six
ninety nine eighty seven
a okay
c: the expiration date is eleven ninety seven
...
a okay they should be ready tomorrow
c: okay thank you very much
Figure 1: Excerpt from a C-star II dialogue
with six participating research sites. The seman-
tic domain was travel, including reservations
and payments for hotels, tours, and transporta-
tion. Figure 1 shows a sample dialogue from
the C-star II database. (C is the client and a
is the travel agent.) The C-star II database
contains 2278 English sentences and 7148 non-
English (Japanese, Italian, Korean) sentences
tagged with interlingua representations. Most
of the database consists of transcripts of role-
playing conversations.
The driving concept behind the C-star II
interlingua is that there are a limited num-
ber of actions in the domain | requesting the
price of a room, telling the price of a room,
requesting the time of a flight, giving a credit
card number, etc. | and that each utter-
ance can be classied as an instance of one
of these domain actions . Figure 2 illustrates
the components of the C-star II interlingua:
(1) the speaker tag, in this case c for client,
(2) a speech act (request-action), (3) a list
of concepts (reservation, temporal, hotel),
(4) arguments (e.g., time), and (5) values of ar-
guments. The C-star II interlingua specica-
tion document contains denitions for 44 speech
acts, 93 concepts, and 117 argument names.
The domain action is the part of the interlin-
gua consisting of the speech act and concepts, in
this case request-action+reservation+tem-
poral+hotel. The domain action does not in-
clude the list of argument-value pairs.
First it is important to point out that do-
main actions are created compositionally. A do-
main action consists of a speech act followed by
zero or more concepts. (Recall that argument-
value pairs are not part of the domain action.)
The Nespole interlingua includes 65 speech
acts and 110 concepts. An interlingua speci-
cation document denes the legal combinations
of speech acts and arguments.
The linguistic justication for an interlingua
based on domain-actions is that many travel do-
main utterances contain xed, formulaic phrases
(e.g., can you tell me; I was wondering; how
about; would you mind, etc.) that signal domain
actions, but either do not translate literally into
other languages or have a meaning that is su-
ciently indirect that the literal meaning is irrele-
vant for translation. To take two examples, how
about as a signal of a suggestion does not trans-
late into other languages with the words corre-
sponding to how and about . Also, would you
mind might translate literally into some Euro-
pean languages as a way of signaling a request,
but the literal meaning of minding is not rel-
evant to the translation, only the fact that it
signals politeness.
The measure of success for the domain-action
based interlingua (as described in (Levin et al,
2000a)) is that (1) it covers the data in the C-
star II database with less than 8% no-tag rate,
(2) inter-coder agreement across research sites
is reasonably high: 82% for speech acts, 88%
for concepts, and 65% for domain actions, and
(3) end-to-end translation results using an an-
alyzer and generator written at dierent sites
were about the same as end-to-end translation
results using an analyzer and generator written
at the same site.
3 The Nespole Domain, Database,
and Interlingua
The Nespole interlingua has been under devel-
opment for the last two years as part of the Ne-
spole project (http://nespole.itc.it). Fig-
I would like to make a hotel reservation for the fourth through
the seventh of july
c:request-action+reservation+temporal+hotel
(time=(start-time=md4, end-time=(md7, july)))
Figure 2: Example of a C-star II interlingua representation
ure 3 shows a Nespole dialogue. The Ne-
spole domain does not include reservations and
payments, but includes more detailed inquiries
about hotels and facilities for ski vacations and
summer vacations in Val di Fiemme, Italy. (The
tourism board of the Trentino area is a partner
of the Nespole project.) Most of the database
consists of transcripts of dialogues between an
Italian-speaking travel agent and an English or
German speaker playing the role of a traveller.
There are fewer xed, formulaic phrases in the
Nespole domain, prompting us to move toward
domain actions that are more general, and also
requiring more detailed interlingua representa-
tions. Changes from the C-star II interlingua
fall into several categories:
1. Extending semantic expressivity and
syntactic coverage: Increased coverage of
modality, tense, aspect, articles, fragments,
coordinate structures, number, and rhetor-
ical relations. In addition, we have added
more explicit representation of grammati-
cal relations and improved capabilities for
representing modication and embedding.
2. Additional Domain-Specic Con-
cepts: New concepts include giving
directions, describing sizes and dimensions
of objects, traveling routes, equipment and
gear, airports, tourist services, facilities,
vehicles, information objects (brochures,
web pages, rules and regulations), hours
of operation of businesses and attractions,
etc.
3. Utterances that accompany multi-
modal gestures: The Nespole system
includes capabilities to share web pages
and draw marks such as circles and arrows
on web pages. The interlingua was ex-
tended to cover colord, descriptions of two-
dimensional objects, and actions of show-
ing.
4. General concept names from Word-
Net: The Nespole interlingua includes
conventions for making new concept names
based on WordNet synsets.
5. More general domain actions replac-
ing specic ones: For example, replacing
hotel with accommodation.
Interlinguas based on domain actions con-
trast with interlinguas based on lexical seman-
tics (Dorr, 1993; Lee et al, 2001; Goodman and
Nirenburg, 1991). A lexical-semantic interlingua
includes a representation of predicates and their
arguments. For example, the sentence I want to
take a vacation has a predicate want with two
arguments I and to take a vacation, which in
turn has a predicate take and two arguments, I
and a vacation. Of course, predicates like take
may be represented as word senses that are less
language-dependent like participate-in. The
strength and weakness of the lexical-semantic
approach is that it is less domain dependent
than the domain-action approach.
In order to cover the less formulaic utterances
of the Nespole domain, we have taken a step
closer to the lexical-semantic approach. How-
ever, we have maintained the overall framework
of the domain-action approach because there are
still many formulaic utterances that are better
represented in a non-literal way. Also, in or-
der to abstract away from English syntax, con-
cepts such as disposition, eventuality, and obli-
gation are not represented in the interlingua as
argument-taking main verbs in order to accom-
modate languages in which these meanings are
c: and I have some questions about coming about a trip I?m gonna be taking to Trento
a: okay what are your questions
c: I currently have a hotel booking at the
Panorama-Hotel in Panchia but at the moment I have no idea how to get to my hotel from Trento
and I wanted to ask what would be the best way for me to get there
a: okay I?m gonna show you a map that and then describe the directions to you
okay so right so you will arrive in the train station in Trento
the that is shown in the middle of the map stazione FFSS
and just below that here is a bus stop labeled number forty
so okay on the map that I?m showing you here
the hotel is the orange building off on the right hand side
...
c: I also wanted to ask about skiing in the area once I?m in Panchia
a: all right just a moment and I?ll show you another map
c: okay
a: okay so on the map you see now Panchia is right in the center of the map
c: I see it
Figure 3: Excerpt from a Nespole dialogue
represented as adverbs or suxes on verbs. Fig-
ure 4 shows the Nespole interlingua represen-
tation corresponding to the C-star II interlin-
gua in Figure 2. The specication document for
the Nespole interlingua denes 65 speech acts,
110 concepts, 292 arguments, and 7827 values
grouped into 222 value classes. As in the C-
star II interlingua, domain actions are dened
compositionally from speech acts and arguments
in combinations that are allowed by the interlin-
gua specication.
3.1 Comparison of Nespole and
C-star II Interlinguas
It is useful to compare the Nespole and C-
star II Interlinguas in expressivity, language in-
dependence, and simplicity.
Expressivity of the Nespole interlingua,
Argument 1: The metric we use for expres-
sivity is the no-tag rate in the databases. The
no-tag rate is the percentage of sentences that
cannot be assigned an interlingua representation
by a human expert. The C-star II database
tagged with C-star II interlingua had a no-
tag rate of 7.3% (Levin et al, 2000a). The
C-star II database tagged with Nespole in-
terlingua has a no-tag rate of 2.4%. More than
300 English sentences in the C-star II database
that were not covered by the C-star II interlin-
gua are now covered by the Nespole interlin-
gua. (See Table 2.) We conclude from this that
the Nespole interlingua is more expressive in
that it covers more data.
Language-independence of the Nespole
interlingua: We do not have a numerical
measure of language-independence, but we note
that interlinguas based on domain actions are
particularly suitable for avoiding translation
mismatches (Dorr, 1994), particularly head-
switching mismatches (e.g., I just arrived and
Je vient d?arriver where the meaning of recent
past is expressed by an adverb just or a syn-
tactic verb vient (venir).) Interlinguas based
on domain actions resolve head-switching mis-
matches by identifying the types of meanings
that are often involved in mismatches | modal-
ity, evidentiality, disposition, and so on | and
assigning them a representation that abstracts
away from predicate argument structure. In-
terlinguas based on domain actions also neu-
tralize the dierent ways of expressing indirect
speech acts within and across languages (for ex-
ample, Would you mind..., I was wondering if
you could...., and Please.... as ways of request-
ing an action). Although Nespole domain ac-
tions are more general than C-star II domain
actions, they maintain language independence
by abstracting away from predicate-argument
structure.
Simplicity and cross-site reliability of the
Nespole interlingua: Simplicity of an inter-
lingua is measured by cross-site reliability in
I would like to make a hotel reservation for the fourth through
the seventh of july
C-star II Interlingua:
c:request-action+reservation+temporal+hotel
(time=(start-time=md4, end-time=(md7, july)))
Nespole Interlingua:
c:give-information+disposition+reservation+accommodation
(disposition=(who=i, desire),
reservation-spec=(reservation, identifiability=no),
accommodation-spec=hotel,
object-time=(start-time=(md=4), end-time=(md=7, month=7, incl-excl=inclusive)))}
Figure 4: Example of Nespole interlingua representation
inter-coder agreement and end-to-end transla-
tion performance. At the time of writing this pa-
per we have not conducted cross-site inter-coder
agreement experiments using the Nespole in-
terlingua. We have, however, conducted cross-
site evaluations (Lavie et al, 2002), in which the
analyzer and generator were written at dier-
ent sites. Experiments at the end of C-star II
showed that cross-site evaluations were compa-
rable to intra-site evaluations (analyzer and gen-
erator written at the same site) (Levin et al,
2000b). Nespole evaluations so far show a loss
of cross-site reliability: intra-site evaluations are
noticeably better than cross-site evaluations, as
reported in (Lavie et al, 2002). This seems to
indicate that developers at dierent sites have
a lower level of agreement on the Nespole in-
terlingua. However there are other possible ex-
planations for the discrepancy | for example
developers at dierent sites may have focused
their development on dierent sub-domains |
that are currently under investigation.
4 Scalability of the Nespole
Interlingua
The rest of this paper addresses the scalability
of the Nespole interlingua. A possible criti-
cism of domain actions is that they are domain
dependent and that the number of domain ac-
tions might increase too quickly with the size
of the domain. In this section, we will examine
the rate of increase in the number of domain ac-
tions as a function of the amount of data and
the diversity of the data.
Dierences in the C-star and Nespole Do-
mains: We will rst show that the C-star
and Nespole domains are signicantly dierent
even though they both pertain to travel. The
combination of the two domains is therefore sig-
nicantly larger than either domain alone.
In order to demonstrate the dierences be-
tween the C-star travel domain and the Ne-
spole travel domain, we measured the overlap
in vocabulary. The numbers in Table 4 are based
on the rst 7900 word tokens in the C-star En-
glish database and the rst 7900 word tokens
in the Nespole English database. The table
shows the number of unique word types in each
database, the number of word types that occur
in both databases, and the number of word types
that occur in one of the databases, but not in the
other. In each database, about half of the word
types overlap with the other database. The non-
overlapping vocabulary (402 C-star word types
and 344 Nespole word types) indicates that the
two databases cover quite dierent aspects of the
travel domain.
Scalability: Argument 1: We will now be-
gin to address the issue of scalability of the
domain action approach to interlingua design.
Our rst argument concerns the number of
Number of unique word types
CSTAR English 745
Nespole English 687
Word types in both CSTAR and Nespole 343
Words types in CSTAR not in Nespole 402
Words types n Nespole not in CSTAR 344
Table 1: Number of overlapping word types in the C-star English and Nespole English
databases
SA Con. Snts. Domain Ac-
tions
Old C-star English 44 93 2278 358
New C-star English 65 110 2564 452
Nespole English 65 110 1446 337
Nespole German 65 110 3298 427
Nespole Italian 65 110 1063 206
Table 2: Number of unique domain actions in interlingua databases
speech acts and concepts in the combined C-
star/Nespole domain. The C-star II in-
terlingua, designed for coverage of the C-star
travel domain, included 44 speech acts and 93
concepts. The Nespole interlingua, designed
for coverage of the combined C-star and Ne-
spole domains, has 65 speech acts and 110 con-
cepts. Thus a relatively small increase in the
number of speech acts and concepts is required
to cover a signicantly larger domain.
The increased size of the C-star/Nepsole
domain is reflected in the number of arguments
and values. The C-star II interlingua contained
denitions for 117 arguments, whereas the Ne-
spole interlingua contains denitions for 292 ar-
guments. The number of values for arguments
also has increased signicantly in the Nespole
domain. There are 7827 values grouped into 222
classes (airport names, days of the week, etc.).
Distributional Data: number of domain
actions in each database: Next we will
present distributional data concerning the num-
ber of domain actions as a function of database
size. We will compare several databases: Old
C-star English (around 2278 sentences tagged
with C-star II interlingua), New C-star En-
glish (2564 sentences tagged with Nespole in-
terlingua, including the 2278 sentences from Old
C-star English), Nespole English, Nespole
German, and Nespole Italian. Table 2 shows
the number of sentences and the number of do-
main actions in each database. The number of
domain actions refers to the number of types,
not tokens, of domain actions.
Distributional data: Coverage of the top
50 domain actions: Table 3 shows the per-
centage of each database that is covered by the
5, 10, 20, and 50 most frequent domain actions
in that database. For each database, the do-
main actions were ordered by frequency. The
percentage of sentences covered by the top-n
domain actions was then calculated. For this
experiment, we separated sentences spoken by
the traveller (client) and sentences spoken by
the travel agent (agent). C-star data in Ta-
ble 3 refers to 2564 English sentences from the
C-star database that were tagged with Ne-
spole interlingua. Nespole data refers to the
English portion of the Nespole database (1446
sentences). Combined data refers to the combi-
nation of the two (4014 sentences).
Two points are worth noting about Table 3.
First, the Nespole agent data has a higher cov-
erage rate than the Nespole client data. That
is, more data is covered by the top-n domain
actions. This may be because there was was
Domain Actions Top 5 Top 10 Top 20 Top 50
Client
C-star data 33.6 42.7 53.1 66.7
Nespole data 31.7 43.5 53.9 66.5
Combined data 31.6 40.0 50.3 62.9
Agent
C-star data 33.8 42.8 54.1 67.3
Nespole data 39.0 47.8 56.1 71.4
Combined data 33.6 41.5 51.7 64.0
Table 3: DA Coverage using Nespole interlingua on English data for both C-star and
Nespole
only a small amount of English agent data and
it was spoken by non-native speakers. Second,
the combined data has a slightly lower cover-
age rate than either the C-star or Nespole
databases alone. This is expected because, as
shown above, the combined domain is signi-
cantly more diverse than either domain by itself.
Scalability: Argument 2: Table 3 provides
additional evidence for the scalability of the Ne-
spole interlingua to larger domains. In the
combined C-star and Nespole domain, the
top 50 domain actions cover only slightly less
data than the top 50 domain actions in either
domain separately. There is not, in fact, an ex-
plosion of domain actions when the two C-star
and Nespole domains are combined.
Distributional Data: domain actions as a
function of database size: Table 3 shows
that in each of our databases, the 50 most fre-
quent domain actions cover approximately 65%
of the sentences. The next issue we address is
the nature of the \tail" of less frequent domain
actions covering the remainder of the data.
Figure 5 shows the number of domain actions
as a function of data set size. Sampling was done
for intervals of 25 sentences starting at 100 sen-
tences. For each sample size s there was ten-fold
cross-validation. Ten random samples of size s
were chosen, and the number of dierent domain
actions in each sample was counted. The aver-
age of the number of domain actions in each of
the ten samples of size s are plotted in Figure 5.
The four databases represented in Figure 5 are
IF Coverage of Four Datasets
0
100
200
300
400
500
600
700
10
0
70
0
13
00
19
00
25
00
31
00
number of SDUs in sample
av
er
ag
e 
nu
m
be
r o
f u
ni
qu
e 
DA
s 
o
ve
r 
10
 ra
nd
om
 s
am
pl
es
Old CSTAR
New CSTAR
NESPOLE
Combined
Figure 5: Number of domain actions as a function of
database size
the C-star English database tagged with C-
star II interlingua, the C-star II database
tagged with Nespole interlingua, the Nespole
English database, and the combined C-star
and Nespole English databases.
Expressivity, Argument 2: Figure 5 pro-
vides evidence for the increased expressivity of
the Nespole interlingua. In contrast to Ta-
ble 3, which deals with samples containing the
most frequent domain actions, the samples plot-
ted in Figure 5 contain random mixtures of fre-
quent and non-frequent domain actions. The
curve representing the C-star data with C-
star II interlingua is the slowest growing of the
four curves. This is because the grain-size of
meaning represented in the C-star II interlin-
gua was larger than in the Nespole interlin-
gua. Also many infrequent domain actions were
not covered by the C-star II interlingua. The
faster growth of the curve representing the C-
star data with Nespole interlingua indicates
improved expressivity of the Nespole interlin-
gua | it covers more of the infrequent domain
actions. The highest curve in Figure 5 repre-
sents the combined C-star and Nespole do-
mains. This curve is higher than the others be-
cause, as shown above, the two travel domains
are signicantly dierent from each other.
Expressivity and Simplicity, the right bal-
ance: Comparing Table 3 and Figure 5, we ar-
gue that the Nespole interlingua strikes a good
balance between expressivity and simplicity. Ta-
ble 3 shows evidence for the simplicity of the Ne-
spole interlingua: Only 50 domain actions are
needed to cover 60-70% of the sentences in the
database. Figure 5 shows evidence for expressiv-
ity: because domain actions are compositionally
formed from speech acts and concepts, it is pos-
sible to form a large number of low-frequency
domain actions in order to cover the domain.
Over 600 domain actions are used in the com-
bined C-star and Nespole domains.
5 Conclusions
We have presented a comparison of a purely
domain-action-based interlingua (the C-star II
interlingua) and a more expressive, but still
domain-action-based interlingua (the Nespole
interlingua). The data that we have presented
show that the more expressive interlingua has
better coverage of the domain (a decrease from
7.3% to 2.4% uncovered data in the C-star II
domain) and can also scale up to larger domains
without an explosion of domain actions. Thus
we have a reasonable compromise between sim-
plicity and expressiveness of the interlingua.
Acknowledgments
We would like to acknowledge Hans-Ulrich Block
for rst proposing the domain-action-based in-
terlingua to the C-star consortium. We would
also like to thank all of the C-star and Ne-
spole partners who have participated in the de-
sign of the interlingua. This work was supported
by NSF Grant 9982227 and EU Grant IST 1999-
11562 as part of the joint EU/NSF MLIAM re-
search initiative.
References
Bonnie J. Dorr. 1993. Machine Translation: A View
from the Lexicon. The MIT Press, Cambridge,
Massachusetts.
Bonnie J. Dorr. 1994. Machine Translation Diver-
gences: A Formal Description and Proposed Solu-
tion. Computational Linguistics, 20(4):597{633.
Kenneth Goodman and Sergei Nirenburg. 1991.
The KBMT Project: A Case Study in Knowledge-
Based Machine Translation. Morgan Kaufmann,
San Mateo, CA.
Alon Lavie, Florian Metze, Roldano Cattoni, and Er-
ica Constantini. 2002. A Multi-Perspective Eval-
uation of the NESPOLE! Speech-to-Speech Trans-
lation System. In Proceedings of Speech-to-Speech
Translation: Algorithms and Systems.
Young-Suk Lee, W. Yi, Cliord Weinstein, and
Stephanie Sene. 2001. Interlingua-based broad-
coverage korean-to-english translation. In Pro-
ceedings of HLT, San Diego.
Lori Levin, Donna Gates, Alon Lavie, and Alex
Waibel. 1998. An Interlingua Based on Domain
Actions for Machine Translation of Task-Oriented
Dialogues. In Proceedings of the International
Conference on Spoken Language Processing (IC-
SLP?98), pages Vol. 4, 1155{1158, Sydney, Aus-
tralia.
Lori Levin, Donna Gates, Alon Lavie, Fabio Pianesi,
Dorcas Wallace, Taro Watanabe, and Monika
Woszczyna. 2000a. Evaluation of a Practical In-
terlingua for Task-Oriented Dialogue. In Work-
shop on Applied Interlinguas: Practical Applica-
tions of Interlingual Approaches to NLP, Seattle.
Lori Levin, Alon Lavie, Monika Woszczyna, Donna
Gates, Marsal Gavalda, Detlef Koll, and Alex
Waibel. 2000b. The Janus-III Translation Sys-
tem. Machine Translation.
Some Facts About Times, Events and Subjects - Invited Talk 
 
Pianesi, Fabio 
