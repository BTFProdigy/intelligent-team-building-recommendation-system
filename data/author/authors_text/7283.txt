Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 640?647,
Prague, Czech Republic, June 2007. c?2007 Association for Computational Linguistics
Corpus Effects on the Evaluation of Automated Transliteration Systems
Sarvnaz Karimi Andrew Turpin Falk Scholer
School of Computer Science and Information Technology
RMIT University, GPO Box 2476V, Melbourne 3001, Australia
{sarvnaz,aht,fscholer}@cs.rmit.edu.au
Abstract
Most current machine transliteration sys-
tems employ a corpus of known source-
target word pairs to train their system, and
typically evaluate their systems on a similar
corpus. In this paper we explore the perfor-
mance of transliteration systems on corpora
that are varied in a controlled way. In partic-
ular, we control the number, and prior lan-
guage knowledge of human transliterators
used to construct the corpora, and the origin
of the source words that make up the cor-
pora. We find that the word accuracy of au-
tomated transliteration systems can vary by
up to 30% (in absolute terms) depending on
the corpus on which they are run. We con-
clude that at least four human transliterators
should be used to construct corpora for eval-
uating automated transliteration systems;
and that although absolute word accuracy
metrics may not translate across corpora, the
relative rankings of system performance re-
mains stable across differing corpora.
1 Introduction
Machine transliteration is the process of transform-
ing a word written in a source language into a word
in a target language without the aid of a bilingual
dictionary. Word pronunciation is preserved, as far
as possible, but the script used to render the target
word is different from that of the source language.
Transliteration is applied to proper nouns and out-
of-vocabulary terms as part of machine translation
and cross-lingual information retrieval (CLIR) (Ab-
dulJaleel and Larkey, 2003; Pirkola et al, 2006).
Several transliteration methods are reported in the
literature for a variety of languages, with their per-
formance being evaluated on multilingual corpora.
Source-target pairs are either extracted from bilin-
gual documents or dictionaries (AbdulJaleel and
Larkey, 2003; Bilac and Tanaka, 2005; Oh and Choi,
2006; Zelenko and Aone, 2006), or gathered ex-
plicitly from human transliterators (Al-Onaizan and
Knight, 2002; Zelenko and Aone, 2006). Some eval-
uations of transliteration methods depend on a single
unique transliteration for each source word, while
others take multiple target words for a single source
word into account. In their work on transliterating
English to Persian, Karimi et al (2006) observed
that the content of the corpus used for evaluating
systems could have dramatic affects on the reported
accuracy of methods.
The effects of corpus composition on the evalua-
tion of transliteration systems has not been specif-
ically studied, with only implicit experiments or
claims made in the literature such as introduc-
ing the effects of different transliteration mod-
els (AbdulJaleel and Larkey, 2003), language fam-
ilies (Linde?n, 2005) or application based (CLIR)
evaluation (Pirkola et al, 2006). In this paper, we re-
port our experiments designed to explicitly examine
the effect that varying the underlying corpus used in
both training and testing systems has on translitera-
tion accuracy. Specifically, we vary the number of
human transliterators that are used to construct the
corpus; and the origin of the English words used in
the corpus.
Our experiments show that the word accuracy of
automated transliteration systems can vary by up to
30% (in absolute terms), depending on the corpus
used. Despite the wide range of absolute values
640
in performance, the ranking of our two translitera-
tion systems was preserved on all corpora. We also
find that a human?s confidence in the language from
which they are transliterating can affect the corpus
in such a way that word accuracy rates are altered.
2 Background
Machine transliteration methods are divided into
grapheme-based (AbdulJaleel and Larkey, 2003;
Linde?n, 2005), phoneme-based (Jung et al, 2000;
Virga and Khudanpur, 2003) and combined tech-
niques (Bilac and Tanaka, 2005; Oh and Choi,
2006). Grapheme-based methods derive transforma-
tion rules for character combinations in the source
text from a training data set, while phoneme-based
methods use an intermediate phonetic transforma-
tion. In this paper, we use two grapheme-based
methods for English to Persian transliteration. Dur-
ing a training phase, both methods derive rules for
transforming character combinations (segments) in
the source language into character combinations in
the target language with some probability.
During transliteration, the source word si is seg-
mented and rules are chosen and applied to each seg-
ment according to heuristics. The probability of a
resulting word is the product of the probabilities of
the applied rules. The result is a list of target words
sorted by their associated probabilities, Li.
The first system we use (SYS-1) is an n-gram
approach that uses the last character of the previ-
ous source segment to condition the choice of the
rule for the current source segment. This system has
been shown to outperform other n-gram based meth-
ods for English to Persian transliteration (Karimi et
al., 2006).
The second system we employ (SYS-2) makes
use of some explicit knowledge of our chosen lan-
guage pair, English and Persian, and is also on
the collapsed-vowel scheme presented by Karimi et
al. (2006). In particular, it exploits the tendency for
runs of English vowels to be collapsed into a single
Persian character, or perhaps omitted from the Per-
sian altogether. As such, segments are chosen based
on surrounding consonants and vowels. The full de-
tails of this system are not important for this paper;
here we focus on the performance evaluation of sys-
tems, not the systems themselves.
2.1 System Evaluation
In order to evaluate the list Li of target words pro-
duced by a transliteration system for source word si,
a test corpus is constructed. The test corpus con-
sists of a source word, si, and a list of possible target
words {ti j}, where 1 ? j ? di, the number of dis-
tinct target words for source word si. Associated
with each ti j is a count ni j which is the number of
human transliterators who transliterated si into ti j.
Often the test corpus is a proportion of a larger
corpus, the remainder of which has been used for
training the system?s rule base. In this work we
adopt the standard ten-fold cross validation tech-
nique for all of our results, where 90% of a corpus
is used for training and 10% for testing. The pro-
cess is repeated ten times, and the mean result taken.
Forthwith, we use the term corpus to refer to the sin-
gle corpus from which both training and test sets are
drawn in this fashion.
Once the corpus is decided upon, a metric to mea-
sure the system?s accuracy is required. The appro-
priate metric depends on the scenario in which the
transliteration system is to be used. For example,
in a machine translation application where only one
target word can be inserted in the text to represent a
source word, it is important that the word at the top
of the system generated list of target words (by def-
inition the most probable) is one of the words gen-
erated by a human in the corpus. More formally,
the first word generated for source word si, Li1, must
be one of ti j,1 ? j ? di. It may even be desirable
that this is the target word most commonly used for
this source word; that is, Li1 = ti j such that ni j ? nik,
for all 1 ? k ? di. Alternately, in a CLIR appli-
cation, all variants of a source word might be re-
quired. For example, if a user searches for an En-
glish term ?Tom? in Persian documents, the search
engine should try and locate documents that contain
both ?AK? (3 letters: H- -) and ???'?(2 letters: H-),
two possible transliterations of ?Tom? that would be
generated by human transliterators. In this case, a
metric that counts the number of ti j that appear in
the top di elements of the system generated list, Li,
might be appropriate.
In this paper we focus on the ?Top-1? case, where
it is important for the most probable target word gen-
erated by the system, Li1 to be either the most pop-
641
ular ti j (labeled the Majority, with ties broken ar-
bitrarily), or just one of the ti j?s (labeled Uniform
because all possible transliterations are equally re-
warded). A third scheme (labeled Weighted) is also
possible where the reward for ti j appearing as Li1
is ni j/?dij=1 ni j; here, each target word is given a
weight proportional to how often a human translit-
erator chose that target word. Due to space consid-
erations, we focus on the first two variants only.
In general, there are two commonly used met-
rics for transliteration evaluation: word accuracy
(WA) and character accuracy (CA) (Hall and Dowl-
ing, 1980). In all of our experiments, CA based
metrics closely mirrored WA based metrics, and
so conclusions drawn from the data would be the
same whether WA metrics or CA metrics were used.
Hence we only discuss and report WA based metrics
in this paper.
For each source word in the test corpus of K
words, word accuracy calculates the percentage of
correctly transliterated terms. Hence for the major-
ity case, where every source word in the corpus only
has one target word, the word accuracy is defined as
MWA = |{si|Li1 = ti1,1 ? i ? K}|/K,
and for the Uniform case, where every target variant
is included with equal weight in the corpus, the word
accuracy is defined as
UWA = |{si|Li1 ? {ti j},1 ? i ? K,1 ? j ? di}|/K.
2.2 Human Evaluation
To evaluate the level of agreement between translit-
erators, we use an agreement measure based on Mun
and Eye (2004).
For any source word si, there are di different
transliterations made by the ni human translitera-
tors (ni = ?dij=1 ni j, where ni j is the number of times
source word si was transliterated into target word
ti j). When any two transliterators agree on the
same target word, there are two agreements being
made: transliterator one agrees with transliterator
two, and vice versa. In general, therefore, the to-
tal number of agreements made on source word si is
?dij=1 ni j(ni j ? 1). Hence the total number of actual
agreements made on the entire corpus of K words is
Aact =
K
?
i=1
di?
j=1
ni j(ni j ?1).
The total number of possible agreements (that is,
when all human transliterators agree on a single tar-
get word for each source word), is
Aposs =
K
?
i=1
ni(ni ?1).
The proportion of overall agreement is therefore
PA =
Aact
Aposs
.
2.3 Corpora
Seven transliterators (T1, T2, . . ., T7: all native Per-
sian speakers from Iran) were recruited to transliter-
ate 1500 proper names that we provided. The names
were taken from lists of names written in English on
English Web sites. Five hundred of these names also
appeared in lists of names on Arabic Web sites, and
five hundred on Dutch name lists. The transliterators
were not told of the origin of each word. The en-
tire corpus, therefore, was easily separated into three
sub-corpora of 500 words each based on the origin
of each word. To distinguish these collections, we
use E7, A7 and D7 to denote the English, Arabic and
Dutch sub-corpora, respectively. The whole 1500
word corpus is referred to as EDA7.
Dutch and Arabic were chosen with an assump-
tion that most Iranian Persian speakers have little
knowledge of Dutch, while their familiarity with
Arabic should be in the second rank after English.
All of the participants held at least a Bachelors de-
gree. Table 1 summarizes the information about
the transliterators and their perception of the given
task. Participants were asked to scale the difficulty
of the transliteration of each sub-corpus, indicated
as a scale from 1 (hard) to 3 (easy). Similarly, the
participants? confidence in performing the task was
rated from 1 (no confidence) to 3 (quite confident).
The level of familiarity with second languages was
also reported based on a scale of zero (not familiar)
to 3 (excellent knowledge).
The information provided by participants con-
firms our assumption of transliterators knowledge
of second languages: high familiarity with English,
some knowledge of Arabic, and little or no prior
knowledge of Dutch. Also, the majority of them
found the transliteration of English terms of medium
difficulty, Dutch was considered mostly hard, and
Arabic as easy to medium.
642
Second Language Knowledge Difficulty,Confidence
Transliterator English Dutch Arabic Other English Dutch Arabic
1 2 0 1 - 1,1 1,2 2,3
2 2 0 2 - 2,2 2,3 3,3
3 2 0 1 - 2,2 1,2 2,2
4 2 0 1 - 2,2 2,1 3,3
5 2 0 2 Turkish 2,2 1,1 3,2
6 2 0 1 - 2,2 1,1 3,3
7 2 0 1 - 2,2 1,1 2,2
Table 1: Transliterator?s language knowledge (0=not familiar to 3=excellent knowledge), perception of
difficulty (1=hard to 3=easy) and confidence (1=no confidence to 3=quite confident) in creating the corpus.
E7 D7 A7 EDA7
Corpus
0
20
40
60
80
100
W
or
d 
A
cc
ur
ac
y 
(%
) 
UWA (SYS-2)
UWA (SYS-1)
MWA (SYS-2)
MWA (SYS-1)
Figure 1: Comparison of the two evaluation metrics
using the two systems on four corpora. (Lines were
added for clarity, and do not represent data points.)
0 20 40 60 80 100
Corpus
0
20
40
60
80
100
W
or
d 
A
cc
ur
ac
y 
(%
) 
UWA (SYS-2)
UWA (SYS-1)
MWA (SYS-2)
MWA (SYS-1)
Figure 2: Comparison of the two evaluation metrics
using the two systems on 100 randomly generated
sub-corpora.
3 Results
Figure 1 shows the values of UWA and MWA for
E7, A7, D7 and EDA7 using the two transliteration
systems. Immediately obvious is that varying the
corpora (x-axis) results in different values for word
accuracy, whether by the UWA or MWA method. For
example, if you chose to evaluate SYS-2 with the
UWA metric on the D7 corpus, you would obtain a
result of 82%, but if you chose to evaluate it with the
A7 corpus you would receive a result of only 73%.
This makes comparing systems that report results
obtained on different corpora very difficult. Encour-
agingly, however, SYS-2 consistently outperforms
the SYS-1 on all corpora for both metrics except
MWA on E7. This implies that ranking system per-
formance on the same corpus most likely yields a
system ranking that is transferable to other corpora.
To further investigate this, we randomly extracted
100 corpora of 500 word pairs from EDA7 and ran
the two systems on them and evaluated the results
using both MWA and UWA. Both of the measures
ranked the systems consistently using all these cor-
pora (Figure 2).
As expected, the UWA metric is consistently
higher than the MWA metric; it allows for the top
transliteration to appear in any of the possible vari-
ants for that word in the corpus, unlike the MWA
metric which insists upon a single target word. For
example, for the E7 corpus using the SYS-2 ap-
proach, UWA is 76.4% and MWA is 47.0%.
Each of the three sub-corpora can be further di-
vided based on the seven individual transliterators,
in different combinations. That is, construct a sub-
corpus from T1?s transliterations, T2?s, and so on;
then take all combinations of two transliterators,
then three, and so on. In general we can construct
7Cr such corpora from r transliterators in this fash-
ion, all of which have 500 source words, but may
have between one to seven different transliterations
for each of those words.
Figure 3 shows the MWA for these sub-corpora.
The x-axis shows the number of transliterators used
to form the sub-corpora. For example, when x = 3,
the performance figures plotted are achieved on cor-
pora when taking all triples of the seven translitera-
tor?s transliterations.
From the boxplots it can be seen that performance
varies considerably when the number of transliter-
ators used to determine a majority vote is varied.
643
1 2 3 4 5 6 7
20
30
40
50
60
D7
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  




























                               
                               
                               
                               




1 2 3 4 5 6 7
20
30
40
50
60
Number of Transliterators
EDA7
1 2 3 4 5 6 7
20
30
40
50
60
W
or
d A
cc
ur
ac
y (
%)
E7
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  




























                             
                             
                             
                             




1 2 3 4 5 6 7
20
30
40
50
60
Number of Transliterators
W
or
d A
cc
ur
ac
y (
%)
A7
Figure 3: Performance on sub-corpora derived by combining the number of transliterators shown on the x-
axis. Boxes show the 25th and 75th percentile of the MWA for all 7Cx combinations of transliterators using
SYS-2, with whiskers showing extreme values.
However, the changes do not follow a fixed trend
across the languages. For E7, the range of accuracies
achieved is high when only two or three translitera-
tors are involved, ranging from 37.0% to 50.6% in
SYS-2 method and from 33.8% to 48.0% in SYS-1
(not shown) when only two transliterators? data are
available. When more than three transliterators are
used, the range of performance is noticeably smaller.
Hence if at least four transliterators are used, then it
is more likely that a system?s MWA will be stable.
This finding is supported by Papineni et al (2002)
who recommend that four people should be used for
collecting judgments for machine translation exper-
iments.
The corpora derived from A7 show consistent me-
dian increases as the number of transliterators in-
creases, but the median accuracy is lower than for
other languages. The D7 collection does not show
any stable results until at least six transliterator?s are
used.
The results indicate that creating a collection used
for the evaluation of transliteration systems, based
on a ?gold standard? created by only one human
transliterator may lead to word accuracy results that
could show a 10% absolute difference compared to
results on a corpus derived using a different translit-
E7 D7 A7 EDA7
Corpus
0
20
40
60
W
or
d 
A
cc
ur
ac
y 
(%
) 
T1
T2
T3
T4
T5
T6
T7
SYS-2
Figure 4: Word accuracy on the sub-corpora using
only a single transliterator?s transliterations.
erator. This is evidenced by the leftmost box in each
panel of the figure which has a wide range of results.
Figure 4 shows this box in more detail for each
collection, plotting the word accuracy for each
user for all sub-corpora for SYS-2. The accuracy
achieved varies significantly between translitera-
tors; for example, for E7 collections, word accuracy
varies from 37.2% for T1 to 50.0% for T5. This
variance is more obvious for the D7 dataset where
the difference ranges from 23.2% for T 1 to 56.2%
for T 3. Origin language also has an effect: accuracy
for the Arabic collection (A7) is generally less than
that of English (E7). The Dutch collection (D7),
shows an unstable trend across transliterators. In
other words, accuracy differs in a narrower range for
Arabic and English, but in wider range for Dutch.
644
This is likely due to the fact that most transliterators
found Dutch a difficult language to work with, as
reported in Table 1.
3.1 Transliterator Consistency
To investigate the effect of invididual transliterator
consistency on system accuracy, we consider the
number of Persian characters used by each transliter-
ator on each sub-corpus, and the average number of
rules generated by SYS-2 on the ten training sets de-
rived in the ten-fold cross validation process, which
are shown in Table 2. For example, when translit-
erating words from E7 into Persian, T3 only ever
used 21 out of 32 characters available in the Persian
alphabet; T7, on the other hand, used 24 different
Persian characters. It is expected that an increase in
number of characters or rules provides more ?noise?
for the automated system, hence may lead to lower
accuracy. Superficially the opposite seems true for
rules: the mean number of rules generated by SYS-
2 is much higher for the EDA7 corpus than for the A7
corpus, and yet Figure 1 shows that word accuracy
is higher on the EDA7 corpus. A correlation test,
however, reveals that there is no significant relation-
ship between either the number of characters used,
nor the number of rules generated, and the result-
ing word accuracy of SYS-2 (Spearman correlation,
p = 0.09 (characters) and p = 0.98 (rules)).
A better indication of ?noise? in the corpus may
be given by the consistency with which a translit-
erator applies a certain rule. For example, a large
number of rules generated from a particular translit-
erator?s corpus may not be problematic if many of
the rules get applied with a low probability. If, on
the other hand, there were many rules with approx-
imately equal probabilities, the system may have
difficulty distinguishing when to apply some rules,
and not others. One way to quantify this effect
is to compute the self entropy of the rule distribu-
tion for each segment in the corpus for an indi-
vidual. If pi j is the probability of applying rule
1 ? j ? m when confronted with source segment
i, then Hi = ??mj=1 pi j log2 pi j is the entropy of the
probability distribution for that rule. H is maximized
when the probabilities pi j are all equal, and mini-
mized when the probabilities are very skewed (Shan-
non, 1948). As an example, consider the rules:
t ?< H,0.5 >, t ?<?,0.3 > and t ?<X,0.2 >; for
which Ht = 0.79.
The expected entropy can be used to obtain a sin-
gle entropy value over the whole corpus,
E = ?
R
?
i=1
fi
S Hi,
where Hi is the entropy of the rule probabilities for
segment i, R is the total number of segments, fi is
the frequency with which segment i occurs at any
position in all source words in the corpus, and S is
the sum of all fi.
The expected entropy for each transliterator is
shown in Figure 5, separated by corpus. Compar-
ison of this graph with Figure 4 shows that gen-
erally transliterators that have used rules inconsis-
tently generate a corpus that leads to low accuracy
for the systems. For example, T1 who has the low-
est accuracy for all the collections in both methods,
also has the highest expected entropy of rules for
all the collections. For the E7 collection, the max-
imum accuracy of 50.0%, belongs to T 5 who has
the minimum expected entropy. The same applies
to the D7 collection, where the maximum accuracy
of 56.2% and the minimum expected entropy both
belong to T 3. These observations are confirmed
by a statistically significant Spearman correlation
between expected rule entropy and word accuracy
(r = ?0.54, p = 0.003). Therefore, the consistency
with which transliterators employ their own internal
rules in developing a corpus has a direct effect on
system performance measures.
3.2 Inter-Transliterator Agreement and
Perceived Difficulty
Here we present various agreement proportions (PA
from Section 2.2), which give a measure of consis-
tency in the corpora across all users, as opposed to
the entropy measure which gives a consistency mea-
sure for a single user. For E7, PA was 33.6%, for
A7 it was 33.3% and for D7, agreement was 15.5%.
In general, humans agree less than 33% of the time
when transliterating English to Persian.
In addition, we examined agreement among
transliterators based on their perception of the task
difficulty shown in Table 1. For A7, agreement
among those who found the task easy was higher
(22.3%) than those who found it in medium level
645
E7 D7 A7 EDA7
Char Rules Char Rules Char Rules Char Rules
T1 23 523 23 623 28 330 31 1075
T2 22 487 25 550 29 304 32 956
T3 21 466 20 500 28 280 31 870
T4 23 497 22 524 28 307 30 956
T5 21 492 22 508 28 296 29 896
T6 24 493 21 563 25 313 29 968
T7 24 495 21 529 28 299 30 952
Mean 23 493 22 542 28 304 30 953
Table 2: Number of characters used and rules generated using SYS-2, per transliterator.
(18.8%). PA is 12.0% for those who found the
D7 collection hard to transliterate; while the six
transliterators who found the E7 collection difficulty
medium had PA = 30.2%. Hence, the harder par-
ticipants rated the transliteration task, the lower the
agreement scores tend to be for the derived corpus.
Finally, in Table 3 we show word accuracy results
for the two systems on corpora derived from translit-
erators grouped by perceived level of difficulty on
A7. It is readily apparent that SYS-2 outperforms
SYS-1 on the corpus comprised of human translit-
erations from people who saw the task as easy with
both word accuracy metrics; the relative improve-
ment of over 50% is statistically significant (paired
t-test on ten-fold cross validation runs). However,
on the corpus composed of transliterations that were
perceived as more difficult, ?Medium?, the advan-
tage of SYS-2 is significantly eroded, but is still
statistically significant for UWA. Here again, using
only one transliteration, MWA, did not distinguish
the performance of each system.
4 Discussion
We have evaluated two English to Persian translit-
eration systems on a variety of controlled corpora
using evaluation metrics that appear in previous
transliteration studies. Varying the evaluation cor-
pus in a controlled fashion has revealed several in-
teresting facts.
We report that human agreement on the English
to Persian transliteration task is about 33%. The ef-
fect that this level of disagreement on the evalua-
tion of systems has, can be seen in Figure 4, where
word accuracy is computed on corpora derived from
single transliterators. Accuracy can vary by up to
30% in absolute terms depending on the translitera-
tor chosen. To our knowledge, this is the first paper
E7 D7 A7 EDA7
Corpus
0.0
0.2
0.4
0.6
En
tr
op
y 
T1
T2
T3
T4
T5
T6
T7
Figure 5: Entropy of the generated segments based
on the collections created by different transliterators.
to report human agreement, and examine its effects
on transliteration accuracy.
In order to alleviate some of these effects on the
stability of word accuracy measures across corpora,
we recommend that at least four transliterators are
used to construct a corpus. Figure 3 shows that con-
structing a corpus with four or more transliterators,
the range of possible word accuracies achieved is
less than that of using fewer transliterators.
Some past studies do not use more than a sin-
gle target word for every source word in the cor-
pus (Bilac and Tanaka, 2005; Oh and Choi, 2006).
Our results indicate that it is unlikely that these re-
sults would translate onto a corpus other than the
one used in these studies, except in rare cases where
human transliterators are in 100% agreement for a
given language pair.
Given the nature of the English language, an En-
glish corpus can contain English words from a vari-
ety of different origins. In this study we have used
English words from an Arabic and Dutch origin to
show that word accuracy of the systems can vary by
up to 25% (in absolute terms) depending on the ori-
gin of English words in the corpus, as demonstrated
in Figure 1.
In addition to computing agreement, we also in-
646
Relative
Perception SYS-1 SYS-2 Improvement (%)
UWA Easy 33.4 55.4 54.4 (p < 0.001)
Medium 44.6 48.4 8.52 (p < 0.001)
MWA Easy 23.2 36.2 56.0 (p < 0.001)
Medium 30.6 37.4 22.2 (p = 0.038)
Table 3: System performance when A7 is split into sub-corpora based on transliterators perception of the
task (Easy or Medium).
vestigated the transliterator?s perception of difficulty
of the transliteration task with the ensuing word ac-
curacy of the systems. Interestingly, when using cor-
pora built from transliterators that perceive the task
to be easy, there is a large difference in the word
accuracy between the two systems, but on corpora
built from transliterators who perceive the task to be
more difficult, the gap between the systems narrows.
Hence, a corpus applied for evaluation of transliter-
ation should either be made carefully with translit-
erators with a variety of backgrounds, or should be
large enough and be gathered from various sources
so as to simulate different expectations of its ex-
pected non-homogeneous users.
The self entropy of rule probability distributions
derived by the automated transliteration system can
be used to measure the consistency with which in-
dividual transliterators apply their own rules in con-
structing a corpus. It was demonstrated that when
systems are evaluated on corpora built by transliter-
ators who are less consistent in their application of
transliteration rules, word accuracy is reduced.
Given the large variations in system accuracy that
are demonstrated by the varying corpora used in this
study, we recommend that extreme care be taken
when constructing corpora for evaluating translitera-
tion systems. Studies should also give details of their
corpora that would allow any of the effects observed
in this paper to be taken into account.
Acknowledgments
This work was supported in part by the Australian
government IPRS program (SK).
References
Nasreen AbdulJaleel and Leah S. Larkey. 2003. Statistical
transliteration for English-Arabic cross-language informa-
tion retrieval. In Conference on Information and Knowledge
Management, pages 139?146.
Yaser Al-Onaizan and Kevin Knight. 2002. Machine translit-
eration of names in Arabic text. In Proceedings of the ACL-
02 workshop on Computational approaches to semitic lan-
guages, pages 1?13.
Slaven Bilac and Hozumi Tanaka. 2005. Direct combination
of spelling and pronunciation information for robust back-
transliteration. In Conference on Computational Linguistics
and Intelligent Text Processing, pages 413?424.
Patrick A. V. Hall and Geoff R. Dowling. 1980. Approximate
string matching. ACM Computing Survey, 12(4):381?402.
Sung Young Jung, Sung Lim Hong, and Eunok Paek. 2000. An
English to Korean transliteration model of extended Markov
window. In Conference on Computational Linguistics, pages
383?389.
Sarvnaz Karimi, Andrew Turpin, and Falk Scholer. 2006. En-
glish to Persian transliteration. In String Processing and In-
formation Retrieval, pages 255?266.
Krister Linde?n. 2005. Multilingual modeling of cross-lingual
spelling variants. Information Retrieval, 9(3):295?310.
Eun Young Mun and Alexander Von Eye, 2004. Analyzing
Rater Agreement: Manifest Variable Methods. Lawrence
Erlbaum Associates.
Jong-Hoon Oh and Key-Sun Choi. 2006. An ensemble of
transliteration models for information retrieval. Information
Processing Management, 42(4):980?1002.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-Jing
Zhu. 2002. Bleu: a method for automatic evaluation of
machine translation. In The 40th Annual Meeting of Associ-
ation for Computational Linguistics, pages 311?318.
Ari Pirkola, Jarmo Toivonen, Heikki Keskustalo, and Kalervo
Ja?rvelin. 2006. FITE-TRT: a high quality translation tech-
nique for OOV words. In Proceedings of the 2006 ACM
Symposium on Applied Computing, pages 1043?1049.
Claude Elwood Shannon. 1948. A mathematical theory of
communication. Bell System Technical Journal, 27:379?
423.
Paola Virga and Sanjeev Khudanpur. 2003. Transliteration of
proper names in cross-language applications. In ACM SIGIR
Conference on Research and Development on Information
Retrieval, pages 365?366.
Dmitry Zelenko and Chinatsu Aone. 2006. Discriminative
methods for transliteration. In Proceedings of the 2006 Con-
ference on Empirical Methods in Natural Language Process-
ing, pages 612?617.
647
Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 648?655,
Prague, Czech Republic, June 2007. c?2007 Association for Computational Linguistics
Collapsed Consonant and Vowel Models: New Approaches for
English-Persian Transliteration and Back-Transliteration
Sarvnaz Karimi Falk Scholer Andrew Turpin
School of Computer Science and Information Technology
RMIT University, GPO Box 2476V, Melbourne 3001, Australia
{sarvnaz,fscholer,aht}@cs.rmit.edu.au
Abstract
We propose a novel algorithm for English
to Persian transliteration. Previous meth-
ods proposed for this language pair apply
a word alignment tool for training. By
contrast, we introduce an alignment algo-
rithm particularly designed for translitera-
tion. Our new model improves the English
to Persian transliteration accuracy by 14%
over an n-gram baseline. We also propose
a novel back-transliteration method for this
language pair, a previously unstudied prob-
lem. Experimental results demonstrate that
our algorithm leads to an absolute improve-
ment of 25% over standard transliteration
approaches.
1 Introduction
Translation of a text from a source language to
a target language requires dealing with technical
terms and proper names. These occur in almost
any text, but rarely appear in bilingual dictionar-
ies. The solution is the transliteration of such out-of-
dictionary terms: a word from the source language
is transformed to a word in the target language, pre-
serving its pronunciation. Recovering the original
word from the transliterated target is called back-
transliteration. Automatic transliteration is impor-
tant for many different applications, including ma-
chine translation, cross-lingual information retrieval
and cross-lingual question answering.
Transliteration methods can be categorized into
grapheme-based (AbdulJaleel and Larkey, 2003; Li
et al, 2004), phoneme-based (Knight and Graehl,
1998; Jung et al, 2000), and combined (Bilac and
Tanaka, 2005) approaches. Grapheme-based meth-
ods perform a direct orthographical mapping be-
tween source and target words, while phoneme-
based approaches use an intermediate phonetic rep-
resentation. Both grapheme- or phoneme-based
methods usually begin by breaking the source word
into segments, and then use a source segment to tar-
get segment mapping to generate the target word.
The rules of this mapping are obtained by aligning
already available transliterated word pairs (training
data); alternatively, such rules can be handcrafted.
From this perspective, past work is roughly divided
into those methods which apply a word alignment
tool such as GIZA++ (Och and Ney, 2003), and ap-
proaches that combine the alignment step into their
main transliteration process.
Transliteration is language dependent, and meth-
ods that are effective for one language pair may
not work as well for another. In this paper, we
investigate the English-Persian transliteration prob-
lem. Persian (Farsi) is an Indo-European language,
written in Arabic script from right to left, but with
an extended alphabet and different pronunciation
from Arabic. Our previous approach to English-
Persian transliteration introduced the grapheme-
based collapsed-vowel method, employing GIZA++
for source to target algnment (Karimi et al, 2006).
We propose a new transliteration approach that ex-
tends the collapsed-vowel method. To meet Per-
sian language transliteration requirements, we also
propose a novel alignment algorithm in our training
stage, which makes use of statistical information of
648
the corpus, transliteration specifications, and simple
language properties. This approach handles possi-
ble consequences of elision (omission of sounds to
make the word easier to read) and epenthesis (adding
extra sounds to a word to make it fluent) in written
target words that happen due to the change of lan-
guage. Our method shows an absolute accuracy im-
provement of 14.2% over an n-gram baseline.
In addition, we investigate the problem of back-
transliteration from Persian to English. To our
knowledge, this is the first report of such a study.
There are two challenges in Persian to English
transliteration that makes it particularly difficult.
First, written Persian omits short vowels, while only
long vowels appear in texts. Second, monophthon-
gization (changing diphthongs to monophthongs) is
popular among Persian speakers when adapting for-
eign words into their language. To take these into
account, we propose a novel method to form trans-
formation rules by changing the normal segmenta-
tion algorithm. We find that this method signifi-
cantly improves the Persian to English translitera-
tion effectiveness, demonstrating an absolute perfor-
mance gain of 25.1% over standard transliteration
approaches.
2 Background
In general, transliteration consists of a training stage
(running on a bilingual training corpus), and a gen-
eration ? also called testing ? stage.
The training step of a transliteration develops
transformation rules mapping characters in the
source to characters in the target language using
knowledge of corresponding characters in translit-
erated pairs provided by an alignment. For example,
for the source-target word pair (pat,H



H), an align-
ment may map ?p? to ?H

? and ?a? to ? ?, and the
training stage may develop the rule pa ? , with ? ?
as the transliteration of ?a? in the context of ?pa?.
The generation stage applies these rules on a seg-
mented source word, transforming it to a word in
the target language.
Previous work on transliteration either employs a
word alignment tool (usually GIZA++), or develops
specific alignment strategies. Transliteration meth-
ods that use GIZA++ as their word pair aligner (Ab-
dulJaleel and Larkey, 2003; Virga and Khudanpur,
2003; Karimi et al, 2006) have based their work on
the assumption that the provided alignments are re-
liable. Gao et al (2004) argue that precise align-
ment can improve transliteration effectiveness, ex-
perimenting on English-Chinese data and compar-
ing IBM models (Brown et al, 1993) with phoneme-
based alignments using direct probabilities.
Other transliteration systems focus on alignment
for transliteration, for example the joint source-
channel model suggested by Li et al (2004). Their
method outperforms the noisy channel model in
direct orthographical mapping for English-Chinese
transliteration. Li et al also find that grapheme-
based methods that use the joint source-channel
model are more effective than phoneme-based meth-
ods due to removing the intermediate phonetic
transformation step. Alignment has also been in-
vestigated for transliteration by adopting Coving-
ton?s algorithm on cognate identification (Coving-
ton, 1996); this is a character alignment algorithm
based on matching or skipping of characters, with
a manually assigned cost of association. Coving-
ton considers consonant to consonant and vowel to
vowel correspondence more valid than consonant to
vowel. Kang and Choi (2000) revise this method for
transliteration where a skip is defined as inserting a
null in the target string when two characters do not
match based on their phonetic similarities or their
consonant and vowel nature. Oh and Choi (2002)
revise this method by introducing binding, in which
many to many correspondences are allowed. How-
ever, all of these approaches rely on the manually
assigned penalties that need to be defined for each
possible matching.
In addition, some recent studies investigate dis-
criminative transliteration methods (Klementiev and
Roth, 2006; Zelenko and Aone, 2006) in which each
segment of the source can be aligned to each seg-
ment of the target, where some restrictive conditions
based on the distance of the segments and phonetic
similarities are applied.
3 The Proposed Alignment Approach
We propose an alignment method based on segment
occurrence frequencies, thereby avoiding predefined
matching patterns and penalty assignments. We also
apply the observed tendency of aligning consonants
649
to consonants, and vowels to vowels, as a substi-
tute for phonetic similarities. Many to many, one to
many, one to null and many to one alignments can
be generated.
3.1 Formulation
Our alignment approach consists of two steps: the
first is based on the consonant and vowel nature
of the word?s letters, while the second uses a
frequency-based sequential search.
Definition 1 A bilingual corpus B is the set
{(S, T )}, where S = s1..s?, T = t1..tm, si is a
letter in the source language alphabet, and tj is a
letter in the target language alphabet.
Definition 2 Given some word, w, the consonant-
vowel sequence p = (C|V )+ for w is obtained
by replacing each consonant with C and each vowel
with V .
Definition 3 Given some consonant-vowel se-
quence, p, a reduced consonant-vowel sequence q
replaces all runs of C?s with C, and all runs of V ?s
with V; hence q = q?|q??, q? = V(CV)?(C|?)
and q?? = C(VC)?(V|?).
For each natural language word, we can determine
the consonant-vowel sequence (p) from which the
reduced consonant-vowel sequence (q) can be de-
rived, giving a common notation between two dif-
ferent languages, no matter which script either of
them use. To simplify, semi-vowels and approxi-
mants (sounds intermediate between consonants and
vowels, such as ?w? and ?y? in English) are treated
according to their target language counterparts.
In general, for all the word pairs (S, T ) in a corpus
B, an alignment can be achieved using the function
f : B ? A; (S, T ) 7? (S?, T? , r).
The function f maps the word pair (S, T ) ? B to
the triple (S?, T? , r) ? A where S? and T? are sub-
strings of S and T respectively. The frequency of
this correspondence is denoted by r. A represents a
set of substring alignments, and we use a per word
alignment notation of ae2p when aligning English to
Persian and ap2e for Persian to English.
3.2 Algorithm Details
Our algorithm consists of two steps.
Step 1 (Consonant-Vowel based)
For any word pair (S, T ) ? B, the corresponding
reduced consonant-vowel sequences, qS and qT , are
generated. If the sequences match, then the aligned
consonant clusters and vowel sequences are added
to the alignment set A. If qS does not match with
qT , the word pair remains unaligned in Step 1.
The assumption in this step is that transliteration
of each vowel sequence of the source is a vowel se-
quence in the target language, and similarly for con-
sonants. However, consonants do not always map to
consonants, or vowels to vowels (for example, the
English letter ?s? may be written as ??? in Persian
which consists of one vowel and one consonant). Al-
ternatively, they might be omitted altogether, which
can be specified as the null string, ?. We therefore
require a second step.
Step 2 (Frequency based)
For most natural languages, the maximum length
of corresponding phonemes of each grapheme is a
digraph (two letters) or at most a trigraph. Hence,
alignment can be defined as a search problem that
seeks for units with a maximum length of two or
three in both strings that need to be aligned. In our
approach, we search based on statistical occurrence
data available from Step 1.
In Step 2, only those words that remain unaligned
at the end of Step 1 need to be considered. For each
pair of words (S, T ), matching proceeds from left to
right, examining one of the three possible options of
transliteration: single letter to single letter, digraph
to single letter and single letter to digraph. Trigraphs
are unnecessary in alignment as they can be effec-
tively captured during transliteration generation, as
we explain below.
We define four different valid alignments for the
source (S = s1s2 . . . si . . . sl) and target (T =
t1t2 . . . tj . . . tm) strings: (si , tj , r), (sisi+1, tj , r),
(si , tj tj+1, r) and (si , ?, r). These four options are
considered as the only possible valid alignments,
and the most frequently occurring alignment (high-
est r) is chosen. These frequencies are dynamically
updated after successfully aligning a pair. For ex-
ceptional situations, where there is no character in
the target string to match with the source character
si , it is aligned with the empty string.
It is possible that none of the four valid alignment
650
options have occurred previously (that is, r = 0
for each). This situation can arise in two ways:
first, such a tuple may simply not have occurred in
the training data; and, second, the previous align-
ment in the current string pair may have been incor-
rect. To account for this second possibility, a par-
tial backtracking is considered. Most misalignments
are derived from the simultaneous comparison of
alignment possibilities, giving the highest priority to
the most frequent. For example if S=bbc, T=H
.
?
and A = {(b,H
.
,100),(bb,H
.
,40),(c,?,60)}, starting
from the initial position s1 and t1 , the first alignment
choice is (b,H
.
,101). However immediately after, we
face the problem of aligning the second ?b?. There
are two solutions: inserting ? and adding the triple
(b,?,1), or backtracking the previous alignment and
substituting that with the less frequent but possible
alignment of (bb,H
.
,41). The second solution is a
better choice as it adds less ambiguous alignments
containing ?. At the end, the alignment set is up-
dated as A = {(b,H
.
,100),(bb,H
.
,41),(c,?,61)}.
In case of equal frequencies, we check possible
subsequent alignments to decide on which align-
ment should be chosen. For example, if (b,H
.
,100)
and (bb,H
.
,100) both exist as possible options, we
consider if choosing the former leads to a subse-
quent ? insertion. If so, we opt for the latter.
At the end of a string, if just one character in the
target string remains unaligned while the last align-
ment is a ? insertion, that final alignment will be sub-
stituted for ?. This usually happens when the align-
ment of final characters is not yet registered in the
alignment set, mainly because Persian speakers tend
to transliterate the final vowels to consonants to pre-
serve their existence in the word. For example, in
the word ?Jose? the final ?e? might be transliterated
to ? ?? which is a consonant (?h?) and therefore is not
captured in Step 1.
Backparsing
The process of aligning words explained above
can handle words with already known components
in the alignment set A (the frequency of occurrence
is greater than zero). However, when this is not the
case, the system may repeatedly insert ? while part
or all of the target characters are left intact (unsuc-
cessful alignment). In such cases, processing the
source and target backwards helps to find the prob-
lematic substrings: backparsing.
The poorly aligned substrings of the source and
target are taken as new pairs of strings, which are
then reintroduced into the system as new entries.
Note that they themselves are not subject to back-
parsing. Most strings of repeating nulls can be bro-
ken up this way, and in the worst case will remain as
one tuple in the alignment set.
To clarify, consider the example given in Figure 1.
For the word pair (patricia,H


HP?

??), where an
association between ?c? and ? ?? is not yet regis-
tered. Forward parsing, as shown in the figure, does
not resolve all target characters; after the incorrect
alignment of ?c? with ???, subsequent characters are
also aligned with null, and the substring ? ??? re-
mains intact. Backward parsing, shown in the next
line of the figure, is also not successful. It is able to
correctly align the last two characters of the string,
before generating repeated null alignments. There-
fore, the central region ? substrings of the source
and target which remained unaligned plus one extra
aligned segment to the left and right ? is entered
as a new pair to the system (ici,? ??), as shown
in the line labelled Input 2 in the figure. This new
input meets Step 1 requirements, and is aligned suc-
cessfully. The resulting tuples are then merged with
the alignment set A.
An advantage of our backparsing strategy is that
it takes care of casual transliterations happening due
to elision and epenthesis (adding or removing ex-
tra sounds). It is not only in translation that people
may add extra words to make fluent target text; for
transliteration also, it is possible that spurious char-
acters are introduced for fluency. However, this of-
ten follows patterns, such as adding vowels to the
target form. These irregularities are consistently
covered in the backparsing strategy, where they re-
main connected to their previous character.
4 Transliteration Method
Transliteration algorithms use aligned data (the out-
put from the alignment process, ae2p or ap2e align-
ment tuples) for training to derive transformation
rules. These rules are then used to generate a tar-
get word T given a new input source word S.
651
Initial alignment set:
A = {(p,H

,42),(a, ,320),(a,?,99),(a, ?,10),(a,?,35),(r,P,200),(i,?,60),(i,?,5),(c,?,80),(c,h

,25),(t, H,51)}
Input: (patricia,H


HP?

??) qS = CVCVCV qT = CVCV
Step 1: qS 6= qT
Forward alignment: (p,H

,43), (a,?,100), (t, H,52), (r,P,201), (i,?,61), (c,?,1), (i,?,6), (a,?,100)
Backward alignment: (a, ,321), (i,?,61), (c,?,1), (i,?,6), (r,?,1), (t,?,1), (a,?,100), (p,?,1)
Input 2: (ici,? ??) qS = VCV qT = VCV
Step 1: (i,?,61),(c, ?,1), (i,?,61)
Final Alignment: ae2p = ((p,H ),(a,?),(t, H),((r,P),(i,?),(c, ?),(i,?),(a, ))
Updated alignment set:
A = {(p,H

,43),(a, ,321),(a,?,100),(a, ?,10),(a,?,35),(r,P,201),(i,?,62),(i,?,5),(c,?,80),(c,h

,25),(c, ?,1),(t, H,52)}
Figure 1: A backparsing example. Note middle tuples in forward and backward parsings are not merged in
A till the alignment is successfully completed.
Method Intermediate Sequence Segment(Pattern) Backoff
Bigram N/A #s, sh, he, el, ll, le, ey s,h,e,l,e,y
CV-MODEL1 CCVCCV sh(CC), hel(CVC), ll(CC), lley(CV) s(C), h(C), e(V), l(C), e(V), y(V)
CV-MODEL2 CCVCCV sh(CC), e(CVC), ll(CC), ey(CV) As Above.
CV-MODEL3 CVCV #sh(C), e(CVC), ll(C), ey(CV) sh(C), s(C), h(C), e(V), l(C), e(V), y(V)
Figure 2: An example of transliteration for the word pair (shelley, ???). Underlined characters are actually
transliterated for each segment.
4.1 Baseline
Most transliteration methods reported in the litera-
ture ? either grapheme- or phoneme-based ? use
n-grams (AbdulJaleel and Larkey, 2003; Jung et al,
2000). The n-gram-based methods differ mainly in
the way that words are segmented, both for train-
ing and transliteration generation. A simple n-
gram based method works only on single charac-
ters (unigram) and transformation rules are defined
as si ? tj , while an advanced method may take
the surrounding context into account (Jung et al,
2000). We found that using one past symbol (bigram
model) works better than other n-gram based meth-
ods for English to Persian transliteration (Karimi et
al., 2006).
Our collapsed-vowel methods consider language
knowledge to improve the string segmentation of
n-gram techniques (Karimi et al, 2006). The pro-
cess begins by generating the consonant-vowel se-
quence (Definition 2) of a source word. For ex-
ample, the word ?shelley? is represented by the se-
quence p = CCV CCV V . Then, following the col-
lapsed vowel concept (Definition 3), this sequence
becomes ?CCVCCV?. These approaches, which
we refer to as CV-MODEL1 and CV-MODEL2 re-
spectively, partition these sequences using basic pat-
terns (C and V) and main patterns (CC , CVC , VC
and CV). In the training phase, transliteration rules
are formed according to the boundaries of the de-
fined patterns and their aligned counterparts (based
on ae2p or ap2e) in the target language word T . Simi-
lar segmentation is applied during the transliteration
generation stage.
4.2 The Proposed Transliteration Approach
The restriction on the context length of consonants
imposed by CV-MODEL1 and CV-MODEL2 makes
the transliteration of consecutive consonants map-
ping to a particular character in the target language
difficult. For example, ?ght? in English maps to
only one character in Persian: ? H?. Dealing with
languages which have different alphabets, and for
which the number of characters in their alphabets
also differs (such as 26 and 32 for English and Per-
sian), increases the possibility of facing these cases,
especially when moving from the language with
smaller alphabet size to the one with a larger size.
To more effectively address this, we propose a col-
lapsed consonant and vowel method (CV-MODEL3)
which uses the full reduced sequence (Definition 3),
rather than simply reduced vowel sequences. Al-
though recognition of consonant segments is based
on the vowel positions, consonants are considered as
independent blocks in each string. Conversely, vow-
els are transliterated in the context of surrounding
652
consonants, as demonstrated in the example below.
A special symbol is used to indicate the start
and/or end of each word if the beginning and end
of the word is a consonant respectively. Therefore,
for the words starting or ending with consonants, the
symbol ?#? is added, which is treated as a consonant
and therefore grouped in the consonant segment.
An example of applying this technique is shown in
Figure 2 for the string ?shelley?. In this example,
?sh? and ?ll? are treated as two consonant segments,
where the transliteration of individual characters in-
side a segment is dependent on the other members
but not the surrounding segments. However, this is
not the case for vowel sequences which incorporate
a level of knowledge about any segment neighbours.
Therefore, for the example ?shelley?, the first seg-
ment is ?sh? which belongs to C pattern. During
transliteration, if ?#sh? does not appear in any ex-
isting rules, a backoff splits the segment to smaller
segments: ?#? and ?sh?, or ?s?and ?h?. The second
segment contains the vowel ?e?. Since this vowel
is surrounded by consonants, the segment pattern is
CVC. In this case, backoff only applies for vowels as
consonants are supposed to be part of their own in-
dependent segments. That is, if search in the rules of
pattern CVC was unsuccessful, it looks for ?e? in V
pattern. Similarly, segmentation for this word con-
tinues with ?ll? in C pattern and ?ey? in CV pattern
(?y? is an approximant, and therefore considered as
a vowel when transliterating English to Persian).
4.3 Rules for Back-Transliteration
Written Persian ignores short vowels, and only long
vowels appear in text. This causes most English
vowels to disappear when transliterating from En-
glish to Persian; hence, these vowels must be re-
stored during back-transliteration.
When the initial transliteration happens from En-
glish to Persian, the transliterator (whether hu-
man or machine) uses the rules of transliterat-
ing from English as the source language. There-
fore, transliterating back to the original language
should consider the original process, to avoid los-
ing essential information. In terms of segmenta-
tion in collapsed-vowel models, different patterns
define segment boundaries in which vowels are
necessary clues. Although we do not have most
of these vowels in the transliteration generation
phase, it is possible to benefit from their existence
in the training phase. For example, using CV-
MODEL3, the pair (P??,merkel) with qS =C and
ap2e=((,me),(P,r),(?,ke),(?,l)), produces just one
transformation rule ?P?? ? merkel? based on a
C pattern. That is, the Persian string contains no
vowel characters. If, during the transliteration gen-
eration phase, a source word ???Q?? (S=P??) is
entered, there would be one and only one output
of ?merkel?, while an alternative such as ?mercle?
might be required instead. To avoid overfitting the
system by long consonant clusters, we perform seg-
mentation based on the English q sequence, but cate-
gorise the rules based on their Persian segment coun-
terparts. That is, for the pair (P??,merkel) with
ae2p=((m,),(e,?),(r,P),(k,?),(e,?),(l,?)), these rules
are generated (with category patterns given in paren-
thesis):  ? m (C), P? ? rk (C), ? ? l (C), P?
? merk (C), P?? ? rkel (C). We call the suggested
training approach reverse segmentation.
Reverse segmentation avoids clustering all the
consonants in one rule, since many English words
might be transliterated to all-consonant Persian
words.
4.4 Transliteration Generation and Ranking
In the transliteration generation stage, the source
word is segmented following the same process of
segmenting words in training stage, and a probabil-
ity is computed for each generated target word:
P (T |S) =
|K|
Y
k=1
P (T?k|S?k),
where |K| is the number of distinct source seg-
ments. P (T?k|S?k) is the probability of the S?k?T?k
transformation rule, as obtained from the training
stage:
P (T?k|S?k) =
frequency of S?k ? T?k
frequency of S?k
,
where frequency of S?k is the number of its oc-
currence in the transformation rules. We apply a
tree structure, following Dijkstra?s ?-shortest path,
to generate the ? highest scoring (most probable)
transliterations, ranked based on their probabilities.
653
Corpus Baseline CV-MODEL3Bigram CV-MODEL1 CV-MODEL2 GIZA++ New Alignment
Small Corpus
TOP-1 58.0 (2.2) 61.7 (3.0) 60.0 (3.9) 67.4 (5.5) 72.2 (2.2)
TOP-5 85.6 (3.4) 80.9 (2.2) 86.0 (2.8) 90.9 (2.1) 92.9 (1.6)
TOP-10 89.4 (2.9) 82.0 (2.1) 91.2 (2.5) 93.8 (2.1) 93.5 (1.7)
Large Corpus
TOP-1 47.2 (1.0) 50.6 (2.5) 47.4 (1.0) 55.3 (0.8) 59.8 (1.1)
TOP-5 77.6 (1.4) 79.8 (3.4) 79.2 (1.0) 84.5 (0.7) 85.4 (0.8)
TOP-10 83.3 (1.5) 84.9 (3.1) 87.0 (0.9) 89.5 (0.4) 92.6 (0.7)
Table 1: Mean (standard deviation) word accuracy (%) for English to Persian transliteration.
5 Experiments
To investigate the effectiveness of CV-MODEL3 and
the new alignment approach on transliteration, we
first compare CV-MODEL3 with baseline systems,
employing GIZA++ for alignment generation during
system training. We then evaluate the same sys-
tems, using our new alignment approach. Back-
transliteration is also investigated, applying both
alignment systems and reverse segmentation. In all
our experiments, we used ten-fold cross-validation.
The statistical significance of different performance
levels are evaluated using a paired t-test. The no-
tation TOP-X indicates the first X transliterations
prodcued by the automatic methods.
We used two corpora of word pairs in English
and Persian: the first, called Large, contains 16,670
word pairs; the second, Small, contains 1,857 word
pairs, and are described fully in our previous paper
(Karimi et al, 2006).
The results of transliteration experiments are eval-
uated using word accuracy (Kang and Choi, 2000)
which measures the proportion of transliterations
that are correct out of the test corpus.
5.1 Accuracy of Transliteration Approaches
The results of our experiments for transliterating En-
glish to Persian, using GIZA++ for alignment gen-
eration, are shown in Table 1. CV-MODEL3 out-
performs all three baseline systems significantly in
TOP-1 and TOP-5 results, for both Persian corpora.
TOP-1 results were improved by 9.2% to 16.2%
(p<0.0001, paired t-test) relative to the baseline sys-
tems for the Small corpus. For the Large corpus,
CV-MODEL3 was 9.3% to 17.2% (p<0.0001) more
accurate relative to the baseline systems.
The results of applying our new alignment al-
gorithm are presented in the last column of Ta-
ble 1, comparing word accuracy of CV-MODEL3 us-
ing GIZA++ and the new alignment for English to
Persian transliteration. Transliteration accuracy in-
creases in TOP-1 for both corpora (a relative increase
of 7.1% (p=0.002) for the Small corpus and 8.1%
(p<0.0001) for the Large corpus). The TOP-10 re-
sults of the Large corpus again show a relative in-
crease of 3.5% (p=0.004). Although the new align-
ment also increases the performance for TOP-5 and
TOP-10 of the Small corpus, these increases are not
statistically significant.
5.2 Accuracy of Back-Transliteration
The results of back-transliteration are shown in Ta-
ble 2. We first consider performance improvements
gained from using CV-MODEL3: CV-MODEL3 using
GIZA++ outperforms Bigram, CV-MODEL1 and CV-
MODEL2 by 12.8% to 40.7% (p<0.0001) in TOP-
1 for the Small corpus. The corresponding im-
provement for the Large corpus is 12.8% to 74.2%
(p<0.0001).
The fifth column of the table shows the perfor-
mance increase when using CV-MODEL3 with the
new alignment algorithm: for the Large corpus, the
new alignment approach gives a relative increase in
accuracy of 15.5% for TOP-5 (p<0.0001) and 10%
for TOP-10 (p=0.005). The new alignment method
does not show a significant difference using CV-
MODEL3 for the Small corpus.
The final column of Table 2 shows the perfor-
mance of the CV-MODEL3 with the new reverse seg-
mentation approach. Reverse segmentation leads to
a significant improvement over the new alignment
approach in TOP-1 results for the Small corpus by
40.1% (p<0.0001), and 49.4% (p<0.0001) for the
Large corpus.
654
Corpus Bigram CV-MODEL1 CV-MODEL2 CV-MODEL3
GIZA++ New Alignment Reverse
Small Corpus
TOP-1 23.1 (2.0) 28.8 (4.6) 24.9 (2.8) 32.5 (3.6) 34.4 (3.8) 48.2 (2.9)
TOP-5 40.8 (3.1) 51.0 (4.8) 52.9 (3.4) 56.0 (3.5) 54.8 (3.7) 68.1 (4.9)
TOP-10 50.1 (4.1) 58.2 (5.3) 63.2 (3.1) 64.2 (3.2) 63.8 (3.6) 75.7 (4.2)
Large Corpus
TOP-1 10.1 (0.6) 15.6 (1.0) 12.0 (1.0) 17.6 (0.8) 18.0 (1.2) 26.9 (0.7)
TOP-5 20.6 (1.2) 31.7 (0.9) 28.0 (0.7) 36.2 (0.5) 41.8 (1.2) 41.3 (1.7)
TOP-10 27.2 (1.0) 40.1 (1.1) 37.4 (0.8) 46.0 (0.8) 50.6 (1.1) 49.3 (1.6)
Table 2: Comparison of mean (standard deviation) word accuracy (%) for Persian to English transliteration.
6 Conclusions
We have presented a new algorithm for English to
Persian transliteration, and a novel alignment al-
gorithm applicable for transliteration. Our new
transliteration method (CV-MODEL3) outperforms
the previous approaches for English to Persian, in-
creasing word accuracy by a relative 9.2% to 17.2%
(TOP-1), when using GIZA++ for alignment in train-
ing. This method shows further 7.1% to 8.1% in-
crease in word accuracy (TOP-1) with our new align-
ment algorithm.
Persian to English back-transliteration is also in-
vestigated, with CV-MODEL3 significantly outper-
forming other methods. Enriching this model with
a new reverse segmentation algorithm gives rise to
further accuracy gains in comparison to directly ap-
plying English to Persian methods.
In future work we will investigate whether pho-
netic information can help refine our CV-MODEL3,
and experiment with manually constructed rules as
a baseline system.
Acknowledgments
This work was supported in part by the Australian
government IPRS program (SK) and an ARC Dis-
covery Project Grant (AT).
References
Nasreen AbdulJaleel and Leah S. Larkey. 2003. Statistical
transliteration for English-Arabic cross language informa-
tion retrieval. In Conference on Information and Knowledge
Management, pages 139?146.
Slaven Bilac and Hozumi Tanaka. 2005. Direct combination
of spelling and pronunciation information for robust back-
transliteration. In Conferences on Computational Linguis-
tics and Intelligent Text Processing, pages 413?424.
Peter F. Brown, Vincent J. Della Pietra, Stephen A. Della Pietra,
and Robert L. Mercer. 1993. The mathematics of statisti-
cal machine translation: Parameter estimation. Computional
Linguistics, 19(2):263?311.
Michael A. Covington. 1996. An algorithm to align
words for historical comparison. Computational Linguistics,
22(4):481?496.
Wei Gao, Kam-Fai Wong, and Wai Lam. 2004. Improving
transliteration with precise alignment of phoneme chunks
and using contextual features. In Asia Information Retrieval
Symposium, pages 106?117.
Sung Young Jung, Sung Lim Hong, and Eunok Paek. 2000. An
English to Korean transliteration model of extended Markov
window. In Conference on Computational Linguistics, pages
383?389.
Byung-Ju Kang and Key-Sun Choi. 2000. Automatic translit-
eration and back-transliteration by decision tree learning. In
Conference on Language Resources and Evaluation, pages
1135?1411.
Sarvnaz Karimi, Andrew Turpin, and Falk Scholer. 2006. En-
glish to Persian transliteration. In String Processing and In-
formation Retrieval, pages 255?266.
Alexandre Klementiev and Dan Roth. 2006. Weakly super-
vised named entity transliteration and discovery from mul-
tilingual comparable corpora. In Association for Computa-
tional Linguistics, pages 817?824.
Kevin Knight and Jonathan Graehl. 1998. Machine translitera-
tion. Computational Linguistics, 24(4):599?612.
Haizhou Li, Min Zhang, and Jian Su. 2004. A joint source-
channel model for machine transliteration. In Association
for Computational Linguistics, pages 159?166.
Franz Josef Och and Hermann Ney. 2003. A systematic com-
parison of various statistical alignment models. Computa-
tional Linguistics, 29(1):19?51.
Jong-Hoon Oh and Key-Sun Choi. 2002. An English-Korean
transliteration model using pronunciation and contextual
rules. In Conference on Computational Linguistics.
Paola Virga and Sanjeev Khudanpur. 2003. Transliteration of
proper names in cross-language applications. In ACM SIGIR
Conference on Research and Development on Information
Retrieval, pages 365?366.
Dmitry Zelenko and Chinatsu Aone. 2006. Discriminative
methods for transliteration. In Proceedings of the 2006 Con-
ference on Empirical Methods in Natural Language Process-
ing., pages 612?617.
655
Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing (EMNLP 2006), pages 258?266,
Sydney, July 2006. c?2006 Association for Computational Linguistics
Capturing Out-of-Vocabulary Words in Arabic Text
Abdusalam F.A. Nwesri S.M.M. Tahaghoghi Falk Scholer
School of Computer Science and Information Technology
RMIT University, GPO Box 2476V, Melbourne 3001, Australia
{nwesri,saied,fscholer}@cs.rmit.edu.au
Abstract
The increasing flow of information be-
tween languages has led to a rise in the fre-
quency of non-native or loan words, where
terms of one language appear transliter-
ated in another. Dealing with such out
of vocabulary words is essential for suc-
cessful cross-lingual information retrieval.
For example, techniques such as stemming
should not be applied indiscriminately to
all words in a collection, and so before any
stemming, foreign words need to be iden-
tified. In this paper, we investigate three
approaches for the identification of foreign
words in Arabic text: lexicons, language
patterns, and n-grams and present that re-
sults show that lexicon-based approaches
outperform the other techniques.
1 Introduction
Arabic words are derived from roots having three,
four, or, in rare instances, five characters. The
derivation process consistently follows patterns
that are based on the three letter verb

?

?

	
? (/fa?ala/
to do)1. Each root word matches a base pattern.
Characters are added at the beginning, the mid-
dle, or end of the root, but the base characters that
match the pattern remain unchanged.
The pronunciation of Arabic characters is as-
sociated with short vowels; these are represented
by diacritics, and attached to other characters to
show how the characters should be pronounced.
An Arabic character can be pronounced in several
different ways. For example, the letter H
.
with the
1We represent phonetics using the International Pho-
netic Alphabet (http://www.arts.gla.ac.uk/IPA/
ipachart.html)
diacritic Fatha H
.
is pronounced /ba/, with the dia-
critic Kasra H
.

is pronounced /bI/, and with having
the diacritic Damma H
.
is pronounced /bU/. Di-
acritics are not shown in general written Arabic,
and the reader must rely on the context to deter-
mine the implicit diacritics and therefore the pro-
nunciation of each word. For example, the word
I
.
?
	
X can represent I
.

?

	
X (/Dahaba/ = went), I
.

?

	
X
(/Dahab/ = gold).
Pure Arabic words follow restricted rules in
their construction to keep them short and easy
to pronounce. Their sounds usually follow the
CVCV pattern, where C stands for a consonant
and V stands for a Vowel. An Arabic word never
has two consecutive consonants nor four consecu-
tive vowels (Al-Shanti, 1996).
Foreign words are words that are borrowed from
other languages. Some are remodelled to con-
form with Arabic word paradigms, and become
part of the Arabic lexicon; others are transliterated
into Arabic as they are pronounced by different
Arabic speakers, with some segmental and vowel
changes. The latter are called Out-Of-Vocabulary
(OOV) words as they are not found in a standard
Arabic lexicon. Such OOV words are increas-
ingly common due to the inflow of information
from foreign sources, and include terms that are
either new and have yet to be translated into native
equivalents, or proper nouns that have had their
phonemes replaced by Arabic ones. Examples in-
clude words such as HQ 	?PA? /margrIt/ (Margaret)
or ??	JJ


? /linIks/ (Linux). This process often re-
sults in different Arabic spellings for the same
word.
Current Arabic Information Retrieval (AIR)
systems do not handle the problem of retriev-
ing the different versions of the same foreign
258
word (Abdelali et al, 2004), and instead typically
retrieve only the documents containing the same
spelling of the word as used in the query.
One solution to this problem has been used in
cross-lingual information retrieval, where OOV
words in the query are transliterated into their pos-
sible equivalents. Transliterating terms in English
queries into multiple Arabic equivalents using an
English-Arabic dictionary has been shown to have
a positive impact on retrieval results (Abduljaleel
and Larkey, 2003). However, we are aware of no
work on handling OOV terms in Arabic queries.
For this, proper identification of foreign words
is essential. Otherwise, query expansion for such
words is not likely to be effective: many Ara-
bic words could be wrongly expanded, resulting
in long queries with many false transliterations of
Arabic words. Furthermore, proper identification
of foreign words would be helpful because such
words could then be treated differently using tech-
niques such as approximate string matching (Zo-
bel and Dart, 1995).
In this paper, we examine possible techniques
to identify foreign words in Arabic text. In the
following sections we categorise and define for-
eign words in Arabic, and follow in section 2 with
a discussion of possible different approaches that
can identify them in Arabic text. In section 3 we
present an initial evaluation of these approaches,
and describe improvements in section 4 that we
then explore in a second experiment in section 5.
We discuss results in section 6 and finally con-
clude our work in section 7.
1.1 Foreign words in Arabic
Arabic has many foreign words, with varying lev-
els of assimilation into the language. Words bor-
rowed from other languages usually have different
style in writing and construction, and Arabic lin-
guists have drawn up rules to identify them. For
example, any root Arabic word that has four or
more characters should have one or more of the
?Dalaga? letters ( 	?, P, , 	?, ?, H
.
). Those that
have no such letters are considered foreign (Al-
Shanti, 1996). However, while such rules could
be useful for linguistic purposes, they have limited
application in Information Retrieval (IR); based on
rules, many foreign words that have long been ab-
sorbed into the language and are spelled consis-
tently would be considered to be OOV. From the
IR perspective, foreign words can be split into two

?

J


	
???


?J


?

?



JJ


	
?J


???J


?

?

J


	
?

???J


?

?

J


	
?J


??J


??

?

J


	
?J


?


?J


?

?

J


	
?J



???J


?

?

J


	
??


??J


?

?

J


	
?J


??J


?

?

J


	
?J



?


??

?

J


	
????J


?

?

J


	
??J


???J


?

?

J


	
?

?


?J


?

?

J


	
?J


??J


?J


? ?

J


	
?J


???J


?

?


	
?J



?


?J


?

?

J


	
????J


?? ?

J


	
?????J


?

?

J


	
?K


	
P??J


?

?

J


	
???J


?? ?

J


	
?J



???J


?

?

J


	
?
	
P??J


?

?

J


	
?????J


?

?



J
	
?J


???J


?

?

J


	
?J


???J


?

?



JJ


	
????J


?

?

J


	
????J


?

?


	
?J


???J


?

?



J
	
????J


?
Table 1: Different spelling versions for the name
Milosevic
general categories: translated and transliterated.
Translated: These are foreign words that are
modified or remodelled to conform with Ara-
bic word paradigms; they are well assimi-
lated into Arabic, and are sometimes referred
to as Arabicised words (Aljlayl and Frieder,
2002). This process includes changes in the
structure of the borrowed word, including
segmental and vowel changes, and the addi-
tion, deletion, and modification of stress pat-
terns (Al-Qinal, 2002). This category of for-
eign words usually has a single spelling ver-
sion that is used consistently. Examples in-
clude words such as 	?AJ?
.
(/bUst?n/ = gar-
den), h
.
QK
.
(/bUrZ/ = tower), ?K


XP (/r?duU/ =
radio), and ??J
.
	
J

? (/qUnbula = bomb).
Transliterated: Words in this category are
transliterated into Arabic by replacing
phonemes with their nearest Arabic equiv-
alents. Although Arabic has a broad sound
system that contains most phonemes used in
other languages, not all phonemes have Ara-
bic equivalents. In practice, such phonemes
may be represented in different ways by dif-
ferent persons, resulting in several spelling
versions for the same foreign word. For
example, we observed 28 transliterated
versions for the name of the former Serbian
leader (Milosevic) in the TREC 2002 Arabic
collection; these are shown in Table 1.
Transliteration has become more common than
translation due to the need for instant access to
new foreign terms. It can take considerable time
for a new foreign term to be included in reference
259
dictionaries. However, users often need to imme-
diately use a particular term, and cannot wait un-
til a standard form of the word is created; news
agencies form an important category of such users.
This transliteration process often results in multi-
ple spellings in common usage.
1.2 Related work
In the context of information retrieval, most work
on foreign words in Arabic has been based on
transliteration, and carried out under machine
translation and cross-lingual information retrieval
(CLIR) tasks, where English queries are used to
search for Arabic documents, or vice versa. This
often involves the use of a bilingual dictionary to
translate queries and transliterate OOV words into
their equivalents in Arabic.
Expanding a foreign word to its possible vari-
ants in a query has been shown to increase the pre-
cision of search results (Abduljaleel and Larkey,
2003). However, OOV words in the query are
easily recognised based on English rules and an
English-Arabic dictionary: capitalised words are
marked as nouns, and the remaining words are
translated using the dictionary. Words not found in
the dictionary are marked as OOV and are translit-
erated into probable Arabic forms. In contrast, we
aim to identify foreign words as a within Arabic
text which is made difficult by the absence of such
easily perceptible difference.
Stalls and Knight (1998) describe research to
determine the original foreign word from its Ara-
bic version; this is known as back transliteration.
However, rather than using automatic methods to
identify foreign words, they used a list of 2 800
names to test the accuracy of the back translit-
eration algorithm. Of these, only 900 names
were successfully transliterated to their source
names. While this approach can be used to iden-
tify transliterated foreign words, its effectiveness
is not known on normal Arabic words as only
names were used to test the algorithm.
Jeong et al (1999) used statistical differ-
ences in syllable unigram and bigram patterns
between pure Korean words and foreign words
to identify foreign words in Korean documents.
This approach was later enhanced by Kang and
Choi (2002) to incorporate word segmentation.
A related area is language identification, where
statistics derived from a language model are used
to automatically identify languages (Dunning,
1994). Using N-gram counting produces good ac-
curacy for long strings with 50 or more charac-
ters, and moderately well with 10-character-long
strings. It is unclear how well this approach would
work on individual words with five characters on
average.
2 Identifying foreign words
We categorise three general approaches for recog-
nising foreign words in Arabic text:
Arabic lexicon
OOV words can be easily captured by checking
whether they exist in an Arabic lexicon. However,
the lexicon is unlikely to include all Arabic words,
while at the same time it could contain some for-
eign words. Moreover, this approach will identify
misspelled Arabic words as foreign.
Arabic patterns system
Arabic uses a pattern system to derive words
from their roots. Roots are three, four or some-
times five letters long. The reference pattern

?

?

	
?
(/fa?ala/ = to do) is often used to represent three-
letter root words. For example, the word


I

j

K
.
(/b? Ta/ = searched) can be represented by this pat-
tern through mapping K
.
to 

	
?, 

j to  ?, and


I
to

?.
Many stems can be generated from this root us-
ing standard patterns. For instance,

??

A

	
? (/f??Il/ =
doer) , and

?

?

	
?

K


(/yf?lU/ = is doing) are two dif-
ferent patterns that respectively represent the ac-
tive participle, and present tense verb from the pat-
tern

?

?

	
?. By placing the appropriate core letters
and adding additional letters in each pattern, we
can generate words such as


Ik

A

K
.
(/b??IT/ = re-
searcher), I j
.

K


(/yb?TU/ = does search) respec-
tively. New words can further accept prefixes and
suffixes.
We can recognise whether a word is an Ara-
bic or foreign word by reversing the process and
testing the different patterns. If, after all pos-
sible affixes have been removed, the remaining
stem matches an Arabic pattern, the word is likely
to be an Arabic word. For example, to check
whether the word


Ik

A

J
.

? 

? (/walb??IT/ = and the
researcher) is a foreign word, we first remove the
prefixes ? and ?  to get the stem


Ik

A

K
.
; we find
that this word matches the pattern

??

A

	
? ? it has
the same length, and the letter A is in the same po-
260
sition ? and conclude that it is therefore an Arabic
word. Note that we must perform this determina-
tion without relying on diacritics.
This approach is not perfect, as general Arabic
text does not include explicit diacritics; if parts of
a foreign word match a pattern, it will be marked
as being Arabic. Similarly, misspelled words may
be classified as foreign words if no matching pat-
tern is found.
N-gram approach
Transliterated foreign words exhibit construc-
tion patterns that are often different from Arabic
patterns. By counting the N-grams of a sample of
foreign words, a profile can be constructed to iden-
tify similar words. This approach has been used
in language identification, although it is reported
to have only moderate effectiveness in identifying
short strings (Cavnar and Trenkle, 1994; Dunning,
1994).
2.1 Resources
For the lexicon approach, we used three lexicons:
the Khoja root lexicon (Khoja and Garside, 1999),
the Buckwalter Lexicon (Buckwalter, 2002), and
the Microsoft office 2003 lexicon (Microsoft Cor-
poration, 2002).
The Khoja stemmer has an associated com-
pressed language dictionary that contains well-
known roots. The stemmer strips prefixes and suf-
fixes and matches the remaining stem with a list of
Arabic patterns. If a match is found, the root is ex-
tracted and checked against the dictionary of root
words. If no entry is found, the word is considered
to be a non-Arabic word. We call this the Khoja
Lexicon Approach (KLA).
The Buckwalter morphological analyser is a
lexicon that uses three tables and an algorithm to
check possible affixes. The algorithm checks a
word and analyses its possible prefixes and suf-
fixes to determine possible segmentation for an
Arabic word. If the algorithm fails to find any
possible segmentation, the word is considered not
found in the lexicon. We name this approach the
Buckwalter Lexicon Approach (BLA).
The Microsoft office lexicon is the one used in
the Microsoft Office 2003 spell-checker. We test
whether an Arabic word is found in this lexicon,
and classify those that are not in the lexicon to be
foreign words. We call this approach the Office
Lexicon Approach (OLA).
???
	
?  ZC?
	
?  ?C?
	
? 

???
	
?  ????
	
? 
????
	
?  ?J


?
	
?  ??
	
?

J?

 ?J


?A
	
?

K ?A?
	
?

K

???
	
?

K ???
	
?

K

???A
	
? ???A
	
? BA?
	
?
??A?
	
? ??A?
	
? ?J


? A?
	
?

???
	
?

?<??
	
?
CJ


?
	
?

??J


?
	
? ?J


??
	
? ??AJ


	
? ?J


?AJ


	
?

???A
	
??

?? A?
	
?? C?
	
??

???
	
?? ???
	
??
??
	
?

K ???
	
?

?? A?
	
?

????
	
? ???
	
?

J?
?J


?
	
?? CJ


?
	
??
Table 2: Patterns added to the Khoja modified
stemmer to implement the KPA approach
To use Arabic patterns, we modified the Khoja
stemmer to check whether there is a match be-
tween a word and a list of patterns after stemming
without further checking against the root dictio-
nary. If there is no match, the word is considered
a foreign word. This approach is similar to the ap-
proach used by Taghva et al (2005). We adopted
the patterns of the Khoja stemmer and added 37
patterns compiled from Arabic grammar books,
these are shown in Table 2. We call these ap-
proaches the Khoja Pattern Approach (KPA), and
Modified Khoja Pattern Approach (MKP) respec-
tively. A word is also considered to be an Arabic
word if the remaining stem has three or fewer let-
ters.
We evaluate the effectiveness of the n-gram
method in two ways. First, we extend the n-gram
text categorisation method presented by Cavnar
and Trenkle (1994). The method uses language
profiles where, for each language, all n-grams that
occur in a training corpus are sorted in order of
decreasing frequency of occurrence, for n ranging
from 1 to 5. To classify a text t, we build its n-
gram frequency profile, and compute the distance
between each n-gram in the text and in each lan-
guage profile lj . The total distance is computed by
summing up all differences between the position
of the n-gram in the text profile and the position of
the same n-gram in the language profile:
Dj =
Ni
?
i=1
| rank(ti, text)Ni
? rank(ti, lj)Nj
|
where Dj is the total distance between a text t with
Ni n-grams, and a language profile lj with Nj n-
grams; and rank is the position of the n-gram in
the frequency-sorted list of all n-grams for either
the text or language profile.
In our work, we build two language profiles, one
261
for native Arabic words and another for foreign
words. We compare the n-grams in each word in
our list against these two profiles. If the total dis-
tance between the word and the foreign words pro-
file is smaller than the total distance between the
word and the Arabic words profile, then it is clas-
sified as a foreign word. As the two language pro-
files are not in same size, we compute the relative
position of each n-gram by dividing its position in
the list by the number of the n-grams in the lan-
guage profile. We call this approach the n-gram
approach (NGR).
We also tried a simpler approach based on the
construction of two trigram models: one from
Arabic words, and another from foreign words.
The probability that a string is a foreign word is
determined by comparing the frequency of its tri-
grams with each language model. A word is con-
sidered foreign if the sum of the relative frequency
of its trigrams in the foreign words profile is higher
than the sum of the relative frequency of its tri-
grams in the Arabic words profile. We call this
approach trigram (TRG).
3 Training Experiments
In this section, we describe how we formed a
development data set using Arabic text from the
Web, and how we evaluated and improved tech-
niques for identification of foreign words.
3.1 Data
To form our development data set, we crawled the
Arabic web sites of the Al-Jazeera news channel1,
the Al-Anwar2 and El-Akhbar3 newspapers. A list
of 285 482 Arabic words was extracted. After re-
moving Arabic stop words such as pronouns and
prepositions, the list had 246 281 Arabic words
with 25 492 unique words.
In the absence of diacritics, we decided to re-
move words with three or fewer characters, as
these words could be interpreted as being either
Arabic or foreign in different situations. For ex-
ample, the word ?


G
.
(/bi/) could be interpreted as
the Arabic word meaning ?in me?, or the English
letter B. After this step, 24 218 unique words re-
mained.
We examined these words and categorised each
of them either as Arabic word (AW), or a translit-
1http://www.aljazeera.net
2http://www.alanwar.com
3http://www.elkhabar.com
erated foreign word (FW). We also had to clas-
sify some terms as misspelled Arabic word (MW).
We used the Microsoft Office spell-checker as a
first-pass filter to identify misspelled words, and
then manually inspected each word to identify any
that were actually correct; the spell-checker fails
to recognise some Arabic words, especially those
with some complex affixes. The list also had some
local Arabic dialect spellings that we chose to
classify as misspelled.
The final list had three categories: 22 295 cor-
rect Arabic words, 1 218 foreign words and 705
misspelled words.
To build language models for the trigram
approaches (NRG and TRG), we used the
TREC 2001 Arabic collection (Gey and Oard,
2001). We manually selected 3 046 foreign words
out of the OOV words extracted from the col-
lection using the Microsoft office spell-checker.
These foreign words are transliterated foreign
words. We built the Arabic language model us-
ing 100 000 words extracted from the TREC col-
lection using the same spell-checker. However, we
excluded any word that could be a proper noun, to
avoid involving foreign words. We used an algo-
rithm to exclude any word that does not accept the
suffix haa ( ?), as transliterated proper nouns can
not accept Arabic affixes.
3.2 Evaluation
We measure the accuracy of each approach by ex-
amining the number of foreign words correctly
identified, and the number of incorrect classifica-
tions. The precision of each approach is calculated
as the ratio of correctly identified foreign words
to the total number of words identified as foreign
The latter could be correct or misspelled Arabic
words identified as foreign plus the actual foreign
words identified. The recall is calculated as the
ratio of correctly identified foreign words to the
number of words marked manually as foreign. Al-
though there is generally a compromise between
precision and recall, we consider precision to be
more important, since incorrectly classifying Ara-
bic words as foreign would be more likely to harm
general retrieval performance. The left-hand side
of Table 3 shows the results of our experiments.
We have included the MW results to illustrate the
effects of misspelled words on each approach
The results show that the n-gram approach
(NGR) has the highest precision, while the
262
AW MW FW
Appr. # # # R P
OLA 614 698 1 017 0.834 0.437
BLA 384 404 628 0.515 0.443
KLA 1 732 215 745 0.612 0.277
KPA 1 034 135 590 0.480 0.340
MKP 940 126 573 0.470 0.350
NGR 718 95 726 0.596 0.471
TRG 1 591 118 737 0.605 0.301
AW MW FW
Appr. # # # R P
OLA 145 248 866 0.711 0.687
BLA 88 149 534 0.438 0.693
KLA 420 83 642 0.527 0.508
KPA 302 52 520 0.430 0.590
MKP 269 51 507 0.416 0.613
NGR 411 69 669 0.549 0.582
TRG 928 85 642 0.527 0.387
Table 3: Identification of foreign words: initial results (left) and results after improvements (right)
lexicon-based OLA approach gives the highest re-
call. The pattern approaches (KPA) and (MKP)
perform well compared to the combination of pat-
terns and the root lexicon (KLA), although the
latter produces higher recall. There is a slight
improvement in precision when adding more pat-
terns, but recall is sightly reduced. The KLA ap-
proach produces the poorest precision, but has bet-
ter recall rate than the NGR approach.
The results show that many Arabic native words
are mistakenly caught in the foreign words net.
Our intention is to handle foreign words differ-
ently from Arabic native words. Our approach
is based on normalising the different forms of the
same foreign word to one form at the index level
rather than expanding the foreign word to its possi-
ble variants at the query level. Retrieval precision
will be negatively affected by incorrect classifica-
tion of native and foreign words. Consequently,
we consider that keeping the proportion of false
positives ? correct Arabic words identified as for-
eign (precision) ? low to be more important than
correctly identifying a higher number of foreign
words (recall).
Some of the Arabic words categorised as for-
eign are in fact misspelled; we believe that these
have limited effect on retrieval precision, and there
is limited value in identifying such words in a
query unless the retrieval system incorporates a
correction process.
4 Enhanced rules
To reduce the false identification rate of foreign
words, we analysed the lists of foreign words, cor-
rect Arabic words identified as foreign, and Arabic
misspelled words identified as foreign. We noticed
that some Arabic characters rarely exist in translit-
erated foreign words, and used these to separate
Arabic words ? correctly or incorrectly spelled
Letter count letter count letter count
?


3 839  632 h 2
 3 599 X 559 ? 2
? 2 453 ? 514 ? 1
	
? 1 660 h
.
458 Z 0
? 1 587 	P 334 ? 0

H 1 544 ? 171

 0
P 1 244 p 84 

0
? 1 070 H 23
?
 0
H
.
900 ? 20 	? 0
? 863 ? 12 	? 0
	
? 769 ? 7 ? 0
	
? 728 	X 3 ? 0
Table 4: Frequency of Arabic letters in a sample
of 3 046 foreign words
? from true foreign words. Table 4 shows the
count of each character in the sample of 3 046 for-
eign words; foreign words tend to have vowels in-
serted between consonants to maintain the CVCV
paradigm. We also noticed that most of translit-
erated foreign words do not start with the definite
article ? , or end with the Taa Marbuta ?. Foreign
words also rarely end with two Arabic suffixes.
We also noticed that lexicon based approaches
fail to recognise some correct Arabic words for the
following reasons:
? Words with the letter  (Alef) with or with-
out the diacritics Hamza (

, 

), or the diacritic
Madda (
?
) are not recognised as correct in
many cases. Many words are also categorised
incorrectly if the Hamza is wrongly placed
above or below the initial Alef or the Madda
is absent. In modern Arabic text, the Alef of-
ten appears without the Hamza diacritic and
263
the Madda is sometimes dropped.
? Correct Arabic words are not recognised with
particular suffixes. For example, words that
have the object suffix, such as the suffix A?
in A??	K????K


(/yU?alImunakaha/ = they teach
it to you).
? Some Arabic words are compound words,
written attached to each other most of the
time. For example, compound nouns such as
PXA

?? YJ
.
? (/?bdulqadIr/), although composed
of two words that are individually identi-
fied as being correct, are flagged as incorrect
when combined.
? Some common typographical shortcuts result
in words being written without white space
between them. Where a character that always
terminates a word (for example ? ) is found
in the apparent middle of a word, it is clear
that this problem has occurred.
From these observations, we constructed the
following rules. Whenever one of the following
conditions is met, a word is not classified as for-
eign:
1. the word contains any of the Arabic charac-
ters:

?, Z,
	
X, h, ?,

?,

, 

,
?
,
	
?,
	
?, ?,

?;
2. the word starts with the definite article ( ? );
3. the word has more than one Arabic suffix
(pronouns attached at the end of the word);
4. the word has no vowels between the second
and penultimate character (inclusive); or
5. the word contains one of the strings: ?, ?,
Z,  , ?AK


, ?P, ?
	
P, ?X, ?
	
X, ??, ?, and when
split into two parts at the first character of any
sequence, the first part is three characters or
longer, and the second part is four characters
or longer.
The right-hand side of Table 3 shows the im-
provements achieved using these rules. It can
be seen that they have a large positive impact.
Overall, OLA performs the best, with precision
at 69% and recall at 71%. Figure 1 shows
the precision obtained before and after applying
these rules. Improvement is consistent across
all approaches, with an increase in precision be-
tween 10% and 25%.
OLA BLA KLA KPA MKP NRG TRG
Approach
0.0
0.2
0.4
0.6
0.8
1.0
Pr
ec
isi
on
Before
After
Figure 1: Precision of different approaches before
and after Improvements
5 Verification Experiments
To verify our results, we used another data set
of similar size to the first to verify our approach.
We collected a list of 23 466 unique words from
the Dar-al-Hayat newspaper4. Words, and classi-
fied and marked words in the same way as for the
first data set (described in Section 3.1). We de-
termined this new set to comprise 22 800 Arabic
words (AW), 536 Foreign words (FW), and 130
Misspelled words (MW). Table 5 shows the initial
results and improvements using the enhanced rules
obtained by each approach using this data set.
The results on this unseen data are relatively
consistent with the previous experiment, but pre-
cision in this sample is expectedly lower.
6 Discussion
We have seen that foreign words are not easily
recognised in Arabic text, and a large number of
Arabic words are affected when we try to exclude
foreign words.
We found the lexicon approach to be the best
in identifying foreign words. However, current
lexicons are relatively small, and the variety of
Arabic inflection makes it very difficult to include
all correct word forms. Furthermore, current lex-
icons include many foreign words; for example
when using OLA approach, 1 017 foreign words
out of 1 218 are OOV, indicating that about 200
foreign words are present in that lexicon. The
pattern approach is more efficient but the lack
of diacritics in general written Arabic makes it
very difficult to precisely match a pattern with a
4http://www.daralhayat.com
264
AW MW FW
Appr. # # # R P
OLA 1 189 112 417 0.777 0.242
BLA 780 96 267 0.498 0.234
KLA 1 684 55 312 0.582 0.152
KPA 992 29 238 0.440 0.189
MKP 901 26 231 0.431 0.199
NGR 740 22 286 0.533 0.272
TRG 1 655 19 308 0.575 0.155
AW MW FW
Appr. # # # R P
OLA 302 38 307 0.572 0.474
BLA 149 33 184 0.343 0.502
KLA 350 16 216 0.403 0.371
KPA 238 9 166 0.310 0.402
MKP 202 8 162 0.302 0.435
NGR 401 8 245 0.457 0.374
TRG 972 11 235 0.438 0.193
Table 5: Identification of foreign words on the test set: initial results (left) and results after improvements
(right)
word, resulting in many foreign words being in-
correctly identified as Arabic. Passing the list of
all 3 046 manually judged foreign words to the
pattern approach, some 2 017 words of this list
were correctly judged as foreign, and about one
third (1 029) were incorrectly judged to be Ara-
bic. The n-gram method produced reasonable pre-
cision compared to the lexicon-based methods. In
contrast, TRG had the worst results. This could
be due to the limited size of the training corpus.
However, we expect that improvements to this ap-
proach will remain limited due to the fact that
many Arabic and foreign words share the same
trigrams. It is clear that all the approaches are im-
proved dramatically when applying the enhance-
ment rules. The improvements of the NGR wasn?t
as equal as other approaches. This is because some
of the rules are implicitly applied within the n-
gram approach. The lack of diacritics also makes
it very difficult to distinguish between certain for-
eign and Arabic words. For example, without dia-
critics, the word 	?



J
	
J


?? could be 	?



J



	
J

J


?



? (/klIn-
tUn/ = Clinton), or 	?J






	
J

J


?


? (/kalinatin/ = as two
date trees). The pronunciation is different in the
two cases, but only context or diacritics can make
it clear which word is being used.
7 Conclusion
Identifying foreign words in Arabic text is an im-
portant problem for cross-lingual information re-
trieval, since commonly-used techniques such as
stemming should not be applied indiscriminately
to all words in a collection.
We have presented three approaches for identi-
fying foreign words in Arabic text: lexicons, pat-
terns, and n-grams. We have presented results
that show that the lexicon approach outperforms
the other approaches, and have described improve-
ments to minimise the false identification of for-
eign words. These rules result in improved preci-
sion, but have a small negative impact on recall.
Overall, the results are relatively low for practical
applications, and more work is needed to deal with
this problem. As foreign words are characterised
by having different versions, an algorithm that col-
lapse those versions to one form could be useful
in identifying foreign words. We are presently ex-
ploring algorithms to normalise foreign words in
Arabic text. This will allow us to identify nor-
malised forms for foreign words and use a single
consistent version for indexing and retrieval.
8 Acknowledgements
We thank Microsoft Corporation for providing
us with a copy of Microsoft Office Proofing
Tools 2003.
References
Ahmed Abdelali, Jim Cowie, and Hamdy S. Soliman. 2004.
Arabic information retrieval perspectives. In Proceedings
of the 11th Conference on Natural Language Processing,
Journes d?Etude sur la Parole - Traitement Automatique
des Langues Naturelles (JEP-TALN), Fez, Morocco.
Nasreen Abduljaleel and Leah S. Larkey. 2003. Statistical
transliteration for English-Arabic cross-language informa-
tion retrieval. In Proceedings of the International Confer-
ence on Information and Knowledge Management, pages
139?146. ACM Press.
Jamal B. S. Al-Qinal. 2002. Morphophonemics of loan-
words in translation. Journal of King Saud University,
13:1?132.
Mohamed Saleh Al-Shanti. 1996. Al Maharat Allughawia.
Al Andalus for publishing and distribution. 4th edition.
Mohammed Aljlayl and Ophir Frieder. 2002. On Arabic
search: improving the retrieval effectiveness via a light
stemming approach. In Proceedings of the International
Conference on Information and Knowledge Management,
pages 340?347. ACM Press.
265
Tim Buckwalter. 2002. Buckwalter Arabic morphological
analyzer version 1.0. LDC Catalog No. LDC2002L49.
William B. Cavnar and John M. Trenkle. 1994. N-gram-
based text categorization. In Proceedings of 3rd Annual
Symposium on Document Analysis and Information Re-
trieval, SDAIR-94,, pages 161?175, Las Vegas, US.
Ted Dunning. 1994. Statistical identification of language.
Technical Report MCCS-94-273, Computing Research
Lab (CRL), New Mexico State University.
Fredric C. Gey and Douglas W. Oard. 2001. The TREC-
2001 cross-language information retrieval track: Search-
ing Arabic using English, French or Arabic queries. In
TREC-2001, volume NIST Special Publication:SP 500-
250. National Institute of Standards and Technology.
Kil S. Jeong, Sung Hyon Myaeng, Jae S. Lee, and Key-
Sun Choi. 1999. Automatic identification and back-
transliteration of foreign words for information retrieval.
Information Processing and Management, 35(4):523?540.
Byung-Ju Kang and Key-Sun Choi. 2002. Effective foreign
word extraction for Korean information retrieval. Infor-
mation Processing and Management, 38(1):91?109.
Shereen Khoja and Roger Garside. 1999. Stemming Arabic
text. Technical report, Computing Department, Lancaster
University, Lancaster.
Microsoft Corporation. 2002. Arabic proofing tools in
Office 2003.
URL: http://www.microsoft.com/
middleeast/arabicdev/office/
office2003/Proofing.asp.
Bonnie Glover Stalls and Kevin Knight. 1998. Trans-
lating names and technical terms in Arabic text. In
COLING/ACL Workshop on Computational Approaches
to Semitic Languages, pages 34?41.
Kazem Taghva, Rania Elkhoury, and Jeffrey Coombs. 2005.
Arabic stemming without a root dictionary. In Proceed-
ings of ITCC 2005 Intlernational Conference on Informa-
tion Technology: Coding and Computing.
Justin Zobel and Philip Dart. 1995. Finding approximate
matches in large lexicons. Software - Practice and Expe-
rience, 25(3):331?345.
266
Proceedings of the 5th Workshop on Important Unresolved Matters, pages 49?56,
Prague, Czech Republic, June 2007. c?2007 Association for Computational Linguistics
Finding Variants of Out-of-Vocabulary Words in Arabic
Abdusalam F.A. Nwesri S.M.M. Tahaghoghi Falk Scholer
School of Computer Science and Information Technology
RMIT University, GPO Box 2476V, Melbourne 3001, Australia
{nwesri,saied,fscholer}@cs.rmit.edu.au
Abstract
Transliteration of a word into another lan-
guage often leads to multiple spellings. Un-
less an information retrieval system recog-
nises different forms of transliterated words,
a significant number of documents will be
missed when users specify only one spelling
variant. Using two different datasets, we
evaluate several approaches to finding vari-
ants of foreign words in Arabic, and show
that the longest common subsequence (LCS)
technique is the best overall.
1 Introduction
The pronunciation of a word in one language is
converted into the phonemes of another language
through transliteration. This is particularly com-
mon with proper nouns. However, phonetics dif-
fer across languages, and transliteration usually re-
sults in many spellings for the same word. This
is an issue even across languages that use substan-
tially the same character set; simple examples would
be ?colour? and ?color? across British and Ameri-
can usage, and ?ambience? and ?ambiance? across
French and English.
A change in character sets compounds the prob-
lem: for instance, there are at least 32 English
forms for the Arabic name of the Libyan leader
?Kaddafi?,1 and Nwesri et al (2006) have identi-
fied 28 different spellings for the name of the for-
mer Serbian president Milosevic in the eleventh Text
REtrieval Conference (TREC) Arabic newswire col-
lection. Users typically submit only one spelling
variant in their query, and current Arabic text re-
trieval systems return only documents that contain
that variant (Abdelali et al, 2004). We apply tech-
1http://www.geocities.com/Athens/8744/
spelling.htm
niques used to identify similar strings in other lan-
guages such as English, and present a novel ap-
proach to identify and retrieve different variants of
foreign words in Arabic.
2 The Arabic Language
Arabic is a Semitic language written from right to
left, with most words derived from three-character
root words. The Arabic alphabet has 28 characters,
each with a distinct sound. Short vowels do not have
any associated characters, but are instead indicated
by diacritics attached to other characters. For ex-
ample, the letter 	? /f/ with the diacritic Fatha 	?
is pronounced /fa/,2 with the diacritic Kasra 	? is
pronounced /fI/, and with the diacritic Damma 	? is
pronounced /fU/.
In general written Arabic, diacritics are not in-
dicated; readers must rely on context to determine
implicit diacritics, and so how the word should be
pronounced. For example, some of the variants of
the word I. J? are I.
J

? /kataba/ ?he wrote?, I.
J

? /kU-
tUb/ ?books?, or I. J

? /kUtIba/ ?is written?.
There are also three long vowels ? represented
by the letters { @ ?
 ?} ? that are more pronounced
than short vowels. For instance, the letter 	? can
be followed by the long vowel @ /a:/ to form A 	? /fa:/,
by? /u:/ to form ? 	? /fu:/, and by ?
 /i:/ to form ?

	? /fi:/.
2.1 Foreign Words
From an information retrieval (IR) perspective, for-
eign words in Arabic can be classified into two gen-
eral categories: translated and transliterated (Nwesri
et al, 2006). Translated words, sometimes referred
to as Arabised words, are foreign words that are
modified or remodelled to conform to Arabic word
2We use the International Phonetic Alphabet.
49
paradigms, and are well assimilated into the lan-
guage. The assimilation process includes changes
in the structure of the borrowed word, including
segmental and vowel changes, addition or dele-
tion of syllables, and modification of stress pat-
terns (Al-Qinal, 2002). Foreign words of this cate-
gory usually have a single consistent spelling vari-
ant, for example ??Q
 	? ?virus?, 	?J
 ?P@ ?archive?,
and ?K
X@P ?radio?.
Where equivalent native terms are not available
early enough for widespread adoption, foreign terms
are used directly with their original pronunciation
represented using Arabic letters. As these do not
appear in standard Arabic lexicons ? that may in-
clude adopted words ? they are considered to be
Out-Of-Vocabulary (OOV) words.
With transliterated words, the phonemes of a for-
eign word are replaced with their nearest Arabic
equivalents. Since Arabic phonemes cannot repre-
sent all phonemes found in other languages, the orig-
inal phonemes are usually not represented uniformly
by different transliterators, resulting in multiple
spelling variants for the same foreign word (Stalls
and Knight, 1998).
Faced with the need to use new foreign terms, na-
tive speakers often cannot wait for formal equiva-
lents to be defined. This is particularly true for news
agencies, which encounter new foreign nouns and
technical terms daily. This urgency leads to more
transliteration than translation, with the associated
problem of multiple spellings.
2.2 Spelling Variants
In Arabic, short vowels must be indicated using dia-
critics, but these are rarely used in general text, and
there are no standard rules on when and where di-
acritics must be indicated. Context does not help
in predicting diacritics for foreign words such as
proper nouns or technical terms, and so long vowels
are often used to make the pronunciation explicit in
the spelling of the word without relying on diacrit-
ics. This, too, is subject to variation; some translit-
erators add a long vowel after each consonant in the
word, while others add just enough long vowels to
clarify word segments with ambiguous pronuncia-
tion.
The absence of certain sounds in Arabic, and
varying pronunciations across dialects, also con-
tributes to the multiplicity of spellings. For instance,
the sound /g/ has no standard equivalent in Ara-
bic, since transliterators represent it according to
how they pronounce it. For instance, the English
letter G /g/ is at times mapped to the Arabic let-
ters  	? /G/, ? /q/, or k. /Z/ (Abduljaleel and Larkey,
2003); we have also observed it mapped to the let-
ter ? /k/: 	?? ?AK. P? 	?, 	?? ?AK. P??, 	?? ?AK. P?k. ,
and 	?? ?AK. P?? are transliterations of ?Gorbachev?
we have found on the Web.
Similarly, the interpretation of character combi-
nations varies between transliterators. Moreover,
Typographical and phonetic errors during translit-
eration may add even more variants (Borgman and
Siegfried, 1992).
2.3 Retrieval of Variants
When different variants of a word exist, only a sub-
set of related documents can be found when the
search uses only one variant. Typical search en-
gine users are unlikely to recognise the problem and
hence do not add other variants to their query. Cur-
rently, major search engines such as Google, Yahoo,
and MSN search use exact match for Arabic search,
and no publicly available Arabic Information Re-
trieval (AIR) system has been reported to retrieve
different spelling variants (Abdelali et al, 2004).
In this paper we explore how the different vari-
ants of a foreign word may be captured. We test
existing similarity techniques, and introduce three
techniques to search for variants of foreign words
in Arabic. In the first technique, we convert differ-
ent variants to a single normalised form by remov-
ing vowels and conflating homophones. In the sec-
ond technique, we extend the well-known Soundex
technique ? commonly used to identify variants of
names in English ? to the OOV problem in Arabic,
and in the third technique, we modify the English
Editex algorithm to identify similar foreign words
in Arabic.
3 Related Work
Approaches to identify similar-sounding but differ-
ently spelt words have been heavily investigated in
English; among these are techniques that make use
of string or phonetic similarity.
50
String similarity approaches include the Edit Dis-
tance (Hall and Dowling, 1980), used to measure
the similarity of two strings by counting the minimal
number of character insertions, deletions, or replace-
ments needed to transform one string into another.
To transpose a string s of length n into a string t
of length m, edit(m,n) computes the minimal steps
required as follows:
edit(0, 0) = 0
edit(i, 0) = i
edit(0, j) = j
edit(i, j) = min[edit(i ? 1, j) + 1,
edit(i, j ? 1) + 1,
edit(i ? 1, j ? 1) + d(si, ti)]
where d(si, ti) = 1 if si = ti, 0 otherwise.
This measure can be used to rank words in the
collection with respect to a query word. Zobel and
Dart (1995) showed that Edit Distance performed
the best among the techniques they evaluated for
matching English names. It is not known how this
technique will perform with Arabic words.
Another candidate approach that can be used
to identify similar foreign words in Arabic is
n-grams (Hall and Dowling, 1980). This approach
is language independent; the strings are divided into
grams (substrings) of length n, and the similarity of
the strings is computed on the basis of the similarity
of their n-grams. Pfeifer et al (1996) compute the
similarity as the number of shared grams divided by
the total number of distinct grams in the two strings.
gramCount = | Gs ? Gt || Gs ? Gt |
where Gs is the set of grams in string s. For ex-
ample, with n=2, the similarity of ?ahmed? and
?ahmmed? using this measure is 0.8 because both
strings contain the four 2-grams ah, hm, me, and
ed, while there are five distinct 2-grams across the
two strings.
Gram distance (Ukkonen, 1992) is another string
similarity technique. When grams are not repeated
? which is the case in names ? the similarity is
computed as (Zobel and Dart, 1996):
gramDist(s, t) =| Gs | + | Gt | ?2 | Gs ? Gt |
According to this measure, the similarity between
?ahmed? and ?ahmmed? is 1.
With the Dice (1945) measure, the similarity of
strings s and t is computed as twice the number of
common n-grams between s and t, divided by the
total number of n-grams in the two strings:
Dice(s, t) = 2? | Gs ? Gt || Gs | + | Gt |
where Gs denotes the set of n-grams in s, and Gt
denotes the set of n-grams in t.
The longest common subsequence (LCS) algo-
rithm measures the similarity between two strings
based on the common characters in the two
strings (Wagner and Fischer, 1974; Stephen, 1992).
Similarity is normalised by dividing the length of
the common subsequence by the length of the longer
string (Melamed, 1995). The similarity between be-
tween ?ahmed? and ?ahmmed? is (5/6=0.833).
Phonetic approaches to determine similarity be-
tween two words include the well-known Soundex
algorithm developed by Odell and Russell, patented
in 1918 and 1922 (Hall and Dowling, 1980). This
has predefined codes for the sounds in a language,
with similar-sounding letters grouped under one
code. During comparisons, all letters in a word bar
the first one are encoded, and the resulting represen-
tation is truncated to be at most four characters long.
A variant of Soundex is the Phonix algorithm (Gadd,
1990), which transforms letter groups to letters and
then to codes; the actual mappings are different from
Soundex. Both Soundex and Phonix have been re-
ported to have poorer precision in identifying vari-
ants of English names than both Edit Distance and
n-grams (Zobel and Dart, 1995).
Aqeel et al (2006) propose an Arabic version of
English Soundex (Asoundex-final). They include di-
acritics in a list of Arabic names, and created queries
by altering some of these names by adding, deleting,
or inserting characters.
Most Arabic names are meaningful words ? for
example, Y?m? ?the praised one? ? and rarely do
have spelling variants. This leads to morphological
ambiguity as names may match verbs, pronouns and
other categories of the language. We have found that
using Asoundex-final with the misspelt query 	?
??E
on an Arabic collection with 35 949 unique
words returns ??
j. m