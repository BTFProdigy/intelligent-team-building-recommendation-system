Exploring Speech-Enabled Dialogue with the Galaxy
Communicator Infrastructure
Samuel Bayer
The MITRE Corporation
 202 Burlington Rd.
Bedford, MA 01730
sam@mitre.org
Christine Doran
The MITRE Corporation
 202 Burlington Rd.
Bedford, MA 01730
cdoran@mitre.org
Bryan George
The MITRE Corporation
11493 Sunset Hills Rd.
Reston, VA 20190
bgeorge@mitre.org
ABSTRACT
This demonstration will motivate some of the significant
properties of the Galaxy Communicator Software Infrastructure
and show  how  they support the goals of the DARPA
Communicator program.
Keywords
Spoken dialogue, speech interfaces
1. INTRODUCTION
The DARPA Communicator program [1], now in its second
fiscal year, is intended to push the boundaries of speech-
enabled dialogue systems by enabling a freer interchange
between human and machine. A crucial enabling technology
for the DARPA Communicator program is the Galaxy
Communicator software infrastructure (GCSI), which provides
a common software platform for dialogue system development.
This infrastructure was initially designed and constructed by
MIT [2], and is now maintained and enhanced by the MITRE
Corporation. This demonstration will motivate some of the
significant properties of this infrastructure and show how they
support the goals of the DARPA Communicator program.
2. HIGHLIGHTED PROPERTIES
The GCSI is a distributed hub-and-spoke infrastructure which
allows the programmer to develop Communicator-compliant
servers in C, C++, Java, Python, or Allegro Common Lisp. This
system is based on message passing rather than CORBA- or
RPC-style APIs. The hub in this infrastructure supports
routing of messages consisting of key-value pairs, but also
supports logging and rule-based scripting. Such an
infrastructure has the following desirable properties:
? The scripting capabilities of the hub allow the
programmer to weave together servers which may not
otherwise have been intended to work together, by
rerouting messages and their responses and transforming
their keys.
? The scripting capabilities of the hub allow the
programmer to insert simple tools and filters to convert
data among formats.
? The scripting capabilities of the hub make it easy to
modify the message flow of control in real time.
? The scripting capabilities of the hub and the simplicity of
message passing make it simple to build up systems bit
by bit.
? The standard infrastructure allows the Communicator
program to develop platform- and programming-
language-independent service standards for recognition,
synthesis, and other better-understood resources.
? The standard infrastructure allows members of the
Communicator program to contribute generally useful
tools to other program participants.
This demonstration will illustrate a number of these
properties.
3. DEMO CONFIGURATION AND
CONTENT
By way of illustration, this demo will simulate a process of
assembling a Communicator-compliant system, while at the
same time exemplifying some of the more powerful aspects of
the infrastructure. The demonstration has three phases,
representing three successively more complex configuration
steps. We use a graphical display of the Communicator hub to
make it easy to see the behavior of this system.
As you can see in Figure 1, the hub is connected to eight
servers:
? MITRE's Java Desktop Audio Server (JDAS)
? MIT SUMMIT recognizer, using MIT's Mercury travel
domain language model
? CMU Sphinx recognizer, with a Communicator-compliant
wrapper written by the University of Colorado Center for
Spoken Language Research (CSLR), using CSLR's travel
domain language model
? A string conversion server, for managing
incompatibilities between recognizer output and
synthesizer input
? CSLR's concatenative Phrase TTS synthesizer, using their
travel domain voice
? CMU/Edinburgh Festival synthesizer, with a
Communicator-compliant wrapper written by CSLR, using
CMU's travel domain language model for Festival's
concatenative voice
? MIT TINA parser, using MIT's Mercury travel domain
language model
? MIT Genesis paraphraser, using MIT's Mercury travel
domain language model
Figure 1: Initial demo configuration
We will use the flexibility of the GCSI, and the hub scripting
language in particular, to change the path that messages follow
among these servers.
3.1 Phase 1
In phase 1, we establish audio connectivity. JDAS is MITRE's
contribution to the problem of reliable access to audio
resources. It is based on JavaSound 1.0 (distributed with JDK
1.3), and supports barge-in. We show the capabilities of JDAS
by having the system echo the speaker's input; we also
demonstrate the barge-in capabilities of JDAS bye showing
that the speaker can interrupt the playback with a new
utterance/input. The goal in building JDAS is that anyone who
has a desktop microphone and the Communicator
infrastructure will be able to use this audio server to establish
connectivity with any Communicator-compliant recognizer or
synthesizer.
3.2 Changing the message path
The hub maintains a number of information states. The
Communicator hub script which the developer writes can both
access and update these information states, and we can invoke
"programs" in the Communicator hub script by sending
messages to the hub. This demonstration exploits this
capability by using messages sent from the graphical display
to change the path that messages follow, as illustrated in
Figure 2. In phase 1, the hub script routed messages from JDAS
back to JDAS (enabled by the message named "Echo"). In the
next phase, we will change the path of messages from JDAS
and send them to a speech recognizer.
Figure 2: Modifying the hub information state
3.3 Phase 2
Now that we've established audio connectivity, we can add
recognition and synthesis. In this configuration, we will route
the output of the preferred recognizer to the preferred
synthesizer. When we change the path through the hub script
using the graphical display, the preferred servers are
highlighted. Figure 3 shows that the initial configuration of
phase 2 prefers SUMMIT and Festival.
Figure 3:  Initial recognition/synthesis configuration
The SUMMIT recognizer and the Festival synthesizer were not
intended to work together; in fact, while there is a good deal of
activity in the area of establishing data standards for various
aspects of dialogue systems (cf. [3]), there are no
programming-language-independent service definitions for
speech. The hub scripting capability, however, allows these
tools to be incorporated into the same configuration and to
interact with each other. The remaining incompatibilities (for
instance, the differences in markup between the recognizer
output and the input the synthesizer expects) are addressed by
the string server, which can intervene between the recognizer
and synthesizer. So the GCSI makes it easy both to connect a
variety of tools to the hub and make them interoperate, as well
as to insert simple filters and processors to facilitate the
interoperation.
In addition to being able to send general messages to the hub,
the user can use the graphical display to send messages
associated with particular servers. So we can change the
preferred recognizer or synthesizer. (as shown in Figure 4), or
change the Festival voice (as shown in Figure 5). All these
messages are configurable from the hub script.
Figure 4: Preferring a recognizer
Figure 5: Changing the Festival voice
3.4 Phase 3
Now that we've established connectivity with recognition and
synthesis, we can add parsing and generation (or, in this case,
input paraphrase). Figure 6 illustrates the final configuration,
after changing recognizer and synthesizer preferences. In this
phase, the output of the recognizer is routed to the parser,
which produces a structure which is then paraphrased and then
sent to the synthesizer. So for instance, the user might say "I'd
like to fly to Tacoma", and after parsing and paraphrase, the
output from the synthesizer might be "A trip to Tacoma".
Figure 6: Adding parsing and paraphrase
4. CONCLUSION
The configuration at the end of phase 3 is obviously not a
complete dialogue system; this configuration is missing
context management and dialogue control, as well as an
application backend, as illustrated by the remaining
components in white in Figure 7. However, the purpose of the
demonstration is to illustrate the ease of plug-and-play
experiments within the GCSI, and the role of these capabilities
to assemble and debug a complex Communicator interface. The
GCSI is available under an open source license at
http://fofoca.mitre.org/download    .
Figure 7: A sample full dialogue system configuration
5. ACKNOWLEDGMENTS
This work was funded by the DARPA Communicator program
under contract number DAAB07-99-C201.  ? 2001 The MITRE
Corporation. All rights reserved.
6. REFERENCES
[1] http://www.darpa.mil/ito/research/com/index.html.
[2] S. Seneff, E. Hurley, R. Lau, C. Pao, P. Schmid, and
V. Zue. Galaxy-II: A Reference Architecture for
Conversational System Development. Proc. ICSLP
98, Sydney, Australia, November 1998.
[3] "'Voice Browser' Activity." http://www.w3.org/Voice.
Dialogue Interaction with the DARPA Communicator
Infrastructure: The
Development of Useful Software
Samuel Bayer
The MITRE Corporation
 202 Burlington Rd.
Bedford, MA 01730
sam@mitre.org
Christine Doran
The MITRE Corporation
 202 Burlington Rd.
Bedford, MA 01730
cdoran@mitre.org
Bryan George
The MITRE Corporation
11493 Sunset Hills Rd.
Reston, VA 20190
bgeorge@mitre.org
ABSTRACT
To support engaging human users in robust, mixed-initiative
speech dialogue interactions which reach beyond current
capabilities in dialogue systems, the DARPA Communicator
program [1] is  funding the development of a distributed
message-passing infrastructure for dialogue systems which all
Communicator participants are using. In this presentation, we
describe the features of and requirements for a genuinely
useful software infrastructure for this purpose.
Keywords
Spoken dialogue, speech interfaces
1. INTRODUCTION
Over the last five years, three technological advances have
cooperated to push speech-enabled dialogue systems back
into the limelight: the availability of robust real-time speech
recognition tools, the explosion of Internet-accessible
information sources, and the proliferation of mobile
information access devices such as cell phones. However, the
systems being fielded, and the standards arising from these
efforts, represent only a limited set of capabilities for robust
voice-enabled interaction with knowledge sources. The most
prominent indication of these limitations is the fact that these
systems are overwhelmingly system-directed; the system asks
a question, and the user responds. While this type of
interactions sidesteps a number of problems in speech
recognition and dialogue tracking, it is overwhelmingly likely
that these restrictions are not manageable in the long term.
The DARPA Communicator program [1] is exploring how to
engage human users in robust, mixed-initiative speech
dialogue interactions which reach beyond current capabilities
in dialogue systems. To support this exploration, the
Communicator program has funded the development of a
distributed message-passing infrastructure for dialogue
systems which all Communicator participants are using. In
this presentation, we describe the features of and requirements
for a genuinely useful software infrastructure for this purpose.
2. BUILDING USEFUL SOFTWARE
The Galaxy Communicator software infrastructure (GCSI) is an
elaboration and extension of MIT's Galaxy-II distributed
infrastructure for dialogue interaction [3]. The fact that all
program participants are required to use the GCSI imposes a
somewhat more severe set of requirements on the infrastructure
than usual, and these requirements range far beyond the
straightforward considerations of functionality.
? Flexibility: the infrastructure should be flexible enough
to encompass the range of interaction strategies that the
various Communicator sites might experiment with
? Obtainability: the infrastructure should be easy to get
and to install
? Learnability: the infrastructure should be easy to learn to
use
? Embeddability: the infrastructure should be easy to
embed into other software programs
? Maintenance: the infrastructure should be supported and
maintained for the Communicator program
? Leverage: the infrastructure should support longer-term
program and research goals for distributed dialogue
systems
3. FLEXIBILITY
The GCSI is a distributed hub-and-spoke architecture based on
message-passing. The hub of the GCSI incorporates a scripting
mechanism that allows the programmer to take control of the
message traffic by implementing "hub programs" in a simple
scripting language. The benefits of this sort of infrastructure
are considerable in the context of exploring different
interaction and control strategies for dialogue. For example:
? Because the infrastructure is based on message-passing
instead of APIs, there's no need for the hub to have any
compile-time knowledge of the functional properties of
the servers it communicates with (in contrast to, for
instance, a CORBA infrastructure).
? Because the hub scripting allows the programmer to alter
the flow of control of messages, it's possible to integrate
servers with a variety of implicit interaction paradigms
(e.g., synchronous vs. asynchronous) without modifying
the servers themselves
? Because the hub scripting allows the programmer to alter
the flow of control of messages, it's possible to insert
simple tools and filters to convert data among formats
without modifying the servers themselves.
? Because the hub scripting language fires rules based on
aspects of the hub state, it's easy to write programs which
modify the message flow of control in real time.
4. OBTAINABILITY
We believe that the simplest licensing and distribution model
for software like the GCSI is an open source model. With the
appropriate open source licensing properties, there are no
barriers to freely distributing and redistributing the GCSI, or
to distributing dialogue systems created using the GCSI, or to
building commercial products based on it. The GCSI i s
distributed under a modified version of the MIT X Consortium
license, and we are reasonably certain that the license
simplifies all these tasks. In particular, two Communicator
sites are planning to distribute their entire dialogue systems
as open source, which would not be possible without
appropriate licensing of the GCSI.
It's also important to address the level of complexity of
installing the software once it's obtained. Research software i s
notoriously hard to install, and it's far more useful to ensure
that the software can be used straightforwardly on a small
number of common platforms and operating systems than to
try to make it run on as many platforms as possible. We've
targeted the three platforms which the program participants
were developing on: Windows NT, Intel Linux, and Sparc
Solaris. The GCSI is known to work or to have worked on other
configurations (HP-UX and SGI IRIX, for instance), but these
configurations are not supported in any meaningful way. The
open source model can help here, too: if someone wants to port
the infrastructure to a BSD OS, for instance, they have all the
source (and will hopefully contribute their modifications to
the open source code base).
5. LEARNABILITY
Once the software is installed, it's important to know where to
start and how to proceed. We have offered a series of two-day
intensive training courses on the Communicator infrastructure
which have been attended by the majority of Communicator
participants. In addition, the GCSI comes with extensive
documentation and examples, including a toy end-to-end
dialogue system example which illustrates one possible
configuration of Communicator-compliant servers. Our goal i s
to ensure that it's possible to learn to use the Communicator
infrastructure from the documentation alone, and at least two
sites have succeeded in creating dialogue systems using the
GCSI in a short period of time without attending our training
course.
6. EMBEDDABILITY
The GCSI includes libraries and templates to create
Communicator-compliant servers in C, Java, Python, and
Allegro Common Lisp. However, it's not enough to provide a
software library; this library has to be well-behaved in a
number of ways. In particular, if the GCSI is to be used in
conjunction with CORBA or various windowing systems, i t
must be possible to embed the GCSI server libraries into other
main loops, and to control all the features of the GCSI without
controlling the toplevel flow of control. To enable this goal,
the GCSI is based on a straightforward event-based
programming model, which is used to implement the default
Communicator server main loop, as well as the implementation
of the Python and Allegro server libraries. The GCSI i s
distributed with a number of examples illustrating this
embedding.
7. MAINTENANCE
Finally, GCSI consumers must be able to rely on getting help
when something goes wrong, and expect that design and
implementation problems will be rectified and that desired
complex behaviors will be supported. The importance of
responsiveness and flexibility in maintenance is one of the
reasons we prefer the GCSI for Communicator instead of a
third-party tool such as SRI's Open Agent Architecture [2],
which the Communicator program does not control the
development of.
In addition to maintaining a bug queue for the GCSI, we have
addressed successively more complicated infrastructure
requirements in successive releases of the GCSI. For instance,
in the most recent release (3.0), we addressed infrastructure
support for asynchronous delegation strategies being
explored by the Communicator effort at MIT and issues
relating to consumption of audio input by multiple
recognizers.
8. LEVERAGE
Ultimately, we hope that the GCSI, together with open-source
servers such as recognizers, parsers, synthesizers and dialogue
modules provided by application developers, will foster a
vigorous explosion of work in speech-enabled dialogue
systems. For example:
? The programming-language-independent nature of the
GCSI message-passing paradigm allows the
Communicator program to develop implementation-
independent service standards for recognition, synthesis,
and other better-understood resources.
? The freely available nature of the GCSI allows application
developers to contribute dialogue system modules which
are already configured to work with other components.
? The availability of an "environment" for dialogue system
development will support the development of an open
source "toolkit" of state-of-the art, freely available
modules. A number of Communicator sites are already
releasing such modules.
? A common infrastructure will contribute to the
elaboration of "best practice" in dialogue system
development.
There are certainly a number of emerging and existing
alternatives to the GCSI for dialogue system development
(SRI's Open Agent Architecture, for instance). However, we
believe that the combination of a software package like the
GCSI and the critical mass generated by its use in the DARPA
Communicator program presents a unique opportunity for
progress in this area.
The GCSI is available under an open source license at
http://fofoca.mitre.org/download.
9. ACKNOWLEDGMENTS
This work was funded by the DARPA Communicator program
under contract number DAAB07-99-C201.  ? 2001 The MITRE
Corporation. All rights reserved.
10. REFERENCES
[1] http://www.darpa.mil/ito/research/com/index.html.
[2] D. L. Martin, A. J. Cheyer, and D. B. Moran. The
open agent architecture: A framework for building
distributed software systems. Applied Artificial
Intelligence, vol. 13, pp. 91--128, January-March
1999.
[3] S. Seneff, E. Hurley, R. Lau, C. Pao, P. Schmid, and
V. Zue. Galaxy-II: A Reference Architecture for
Conversational System Development. Proc. ICSLP
98, Sydney, Australia, November 1998.
