Proceedings of the First Workshop on Argumentation Mining, pages 39?48,
Baltimore, Maryland USA, June 26, 2014.
c?2014 Association for Computational Linguistics
Analyzing Argumentative Discourse Units in Online Interactions
Debanjan Ghosh* Smaranda Muresan? Nina Wacholder* Mark Aakhus* Matthew Mitsui**
*School of Communication and Information, Rutgers University
?Center of Computational Learning Systems, Columbia University
**Department of Computer Science, Rutgers University
debanjan.ghosh|ninwac|aakhus|mmitsui@rutgers.edu, smara@ccls.columbia.edu
Abstract
Argument mining of online interactions is
in its infancy. One reason is the lack of
annotated corpora in this genre. To make
progress, we need to develop a principled
and scalable way of determining which
portions of texts are argumentative and
what is the nature of argumentation. We
propose a two-tiered approach to achieve
this goal and report on several initial stud-
ies to assess its potential.
1 Introduction
An increasing portion of information and opin-
ion exchange occurs in online interactions such
as discussion forums, blogs, and webpage com-
ments. This type of user-generated conversation-
al data provides a wealth of naturally occurring
arguments. Argument mining of online interac-
tions, however, is still in its infancy (Abbott et al.,
2011; Biran and Rambow, 2011; Yin et al., 2012;
Andreas et al., 2012; Misra and Walker, 2013).
One reason is the lack of annotated corpora in this
genre. To make progress, we need to develop a
principled and scalable way of determining which
portions of texts are argumentative and what is the
nature of argumentation.
We propose a multi-step coding approach
grounded in findings from argumentation re-
search on managing the difficulties of coding ar-
guments (Meyers and Brashers, 2010). In the first
step, trained expert annotators identify basic ar-
gumentative features (coarse-grained analysis) in
full-length threads. In the second step, we explore
the feasibility of using crowdsourcing and novice
annotators to identify finer details and nuances of
the basic argumentative units focusing on limited
thread context. Our coarse-grained scheme for ar-
gumentation is based on Pragmatic Argumentation
Theory (PAT) (Van Eemeren et al., 1993; Hutchby,
Figure 1: Argumentative annotation of an Online
Thread
2013; Maynard, 1985). PAT states that an argu-
ment can arise at any point when two or more
actors engage in calling out and making prob-
lematic some aspect of another actor?s prior con-
tribution for what it (could have) said or meant
(Van Eemeren et al., 1993). The argumentative
relationships among contributions to a discussion
are indicated through links between what is tar-
geted and how it is called-out. Figure 1 shows
an example of two Callouts that refer back to the
same Target.
The annotation task performed by the trained
annotators includes three subtasks that Peldszus
and Stede (2013a) identify as part of the argu-
ment mining problem: 1) Segmentation, 2) Seg-
ment classification, and 3) Relationship identifi-
cation. In the language of Peldszus and Stede
(2013a), Callouts and Targets are the basic Argu-
ment Discourse Units (ADUs) that are segmented,
classified, and linked. There are two key advan-
tages of our coarse-grained annotation scheme:
1) It does not initially prescribe what constitutes
an argumentative text; 2) It makes it possible for
Expert Annotators (EAs) to find ADUs in long
39
threads. Assigning finer grained (more complex)
labels would have unduly increased the already
heavy cognitive load for the EAs. In Section
2 we present the corpus, describe the annotation
scheme and task, calculate Inter Annotator Agree-
ment (IAA), and propose a hierarchical clustering
approach to identify text segments that the EAs
found easier or harder to annotate.
In Section 3, we report on two Amazon
Mechanical Turk (MTurk) experiments, which
demonstrate that crowdsourcing is a feasible way
to obtain finer grained annotations of basic ADUs,
especially on the text segments that were easier
for the EAs to code. In the first crowd sourc-
ing study, the Turkers (the workers at MTurk,
who we consider novice annotators) assigned la-
bels (Agree/Disagree/Other) to the relations be-
tween Callout and Target identified by the EAs.
In the second study, Turkers labeled segments of
Callouts as Stance or Rationale. Turkers saw only
a limited context of the threaded discussion, i.e.
a particular Callout-Target pair identified by the
EA(s) who had analyzed the entire thread. In addi-
tion we report on initial classification experiments
to detect agreement/disagreement, with the best
F1 of 66.9% for the Agree class and 62.6% for the
Disagree class.
2 Expert Annotation for Coarse-Grained
Argumentation
Within Pragmatic Argumentation Theory, argu-
mentation refers to the ways in which people (seek
to) make some prior action or antecedent event
disputable by performing challenges, contradic-
tions, negations, accusations, resistance, and other
behaviors that call out a ?Target?, a prior action
or event. In this section, we present the corpus,
the annotation scheme based on PAT and the an-
notation task, the inter-annotator agreement, and a
method to identify which pieces of text are easier
or harder to annotate using a hierarchical cluster-
ing approach.
2.1 Corpus
Our corpus consists of blog comments posted as
responses to four blog postings selected from a
dataset crawled from Technorati between 2008-
2010
1
. We selected blog postings in the general
topic of technology and considered only postings
1
http://technorati.com/blogs/directory/
that had more than 200 comments. For the an-
notation we selected the first one hundred com-
ments on each blog together with the original post-
ing. Each blog together with its comments con-
stitutes a thread. The topics of each thread are:
Android (comparison of features of iPhone and
Android phones), iPad (the usefulness of iPads),
Twitter (the usefulness of Twitter as a microblog-
ging platform), and Layoffs (downsizing and out-
sourcing efforts of technology companies). We re-
fer to these threads as the argumentative corpus.
We plan to make the corpus available to the re-
search community.
2.2 Annotation Scheme and Expert
Annotation Task
The coarse-grained annotation scheme for argu-
mentation is based on the concept of Callout and
Target of Pragmatic Argumentation Theory. The
experts? annotation task was to identify expres-
sions of Callout and their Targets while also indi-
cating the links between them. We prepared a set
of guidelines with careful definitions of all techni-
cal terms. The following is an abbreviated excerpt
from the guidelines:
? Callout: A Callout is a subsequent action
that selects (i.e., refers back to) all or some
part of a prior action (i.e., Target) and com-
ments on it in some way. In addition to re-
ferring back to the Target, a Callout explic-
itly includes either one or both of the fol-
lowing: Stance (indication of attitude or posi-
tion relative to the Target) and Rationale (ar-
gument/justification/explanation of the Stance
taken).
? Target: A Target is a part of a prior action that
has been called out by a subsequent action.
Fig. 1 shows two examples of Callouts from
two comments referring back to the same Target.
Annotators were instructed to mark any text seg-
ment (from words to entire comments) that sat-
isfied the definitions above. A single text seg-
ment could be a Target and a Callout. To per-form
the expert annotation, we hired five graduate stu-
dents who had a strong background in humanities
and who received extensive training for the task.
The EAs performed three annotation subtasks
mentioned by Peldszus and Stede (2013a): Seg-
mentation (identify the Argumentative Dis-course
40
Thread A1 A2 A3 A4 A5
Android 73 99 97 118 110
iPad 68 86 85 109 118
Layoffs 71 83 74 109 117
Twitter 76 102 70 113 119
Avg. 72 92.5 81.5 112.3 116
Table 1: Number of Callouts by threads and EA
Thread F1 EM F1 OM ?
Android 54.4 87.8 0.64
iPad 51.2 86.0 0.73
Layoffs 51.9 87.5 0.87
Twitter 53.8 88.5 0.82
Table 2: IAA for 5 EA: F1 and alpha values per
thread
Units (ADUs) including their boundaries), Seg-
ment classification (label the roles of the ADUs,
in this case Callout and Target) and relation iden-
tification (indicate the link between a Callout and
the most recent Target to which is a response).
The segmentation task, which Artstein and Poe-
sio (2008) refer to as the unitization problem, is
particularly challenging. Table 1 shows extensive
variation in the number of ADUs (Callout in this
case) identified by the EAs for each of the four
threads. Annotator A1 identified the fewest Call-
outs (72) while A4 and A5 identified the most
(112.3 and 116, respectively). Although these dif-
ferences could be due to the issues with training,
we interpret the consistent variation among coders
as an indication that judges can be characterized
as ?lumpers? or ?splitters?. What lumpers con-
sidered a single long unit was treated as two (or
more) shorter units by splitters. This is an example
of the problem of annotator variability discussed
in (Peldszus and Stede, 2013b). Similar behavior
was noticed for Targets.
2
2.3 Inter Annotator Agreement
Since the annotation task includes the segmen-
tation step, to measure the IAA we have to ac-
count for fuzzy boundaries. Thus, we con-sider
two IAA metrics usually used in literature for
such cases: the information retrieval (IR) in-spired
precision-recall (P/R/F1) measure (Wiebe et al.,
2005) and Krippendorff?s ? (Krippendorff, 2004).
We present here the main results; a detailed dis-
cussion of the IAA is left for a different paper. Fol-
lowing Wiebe et al. (2005), to calculate P/R/F1 for
two annotators, one annotator?s ADUs are selected
2
Due to space limitations, here and in the rest of this paper
we report only on Callouts.
as the gold standard. If more than two annotators
are employed, the IAA is the average of the pair-
wise P/R/F1. To determine if two annotators have
selected the same text span to represent an ADU,
we use the two methods of Somasundaran et al.
(2008): exact match (EM) - text spans that vary
at the start or end point by five characters or less,
and overlap match (OM) - text spans that have at
least 10% of same overlapping characters. Table 2
shows the F1 measure for EM and OM for the five
EAs on each of the four threads. As expected, the
F1 measures are much lower for EM than for OM.
For the second IAA metric, we implement
Krippendorff?s ? (Krippendorff, 2004), where the
character overlap between any two annotations
and the gap between them are utilized to mea-
sure the expected disagreement and the observed
disagreement. Table 2 shows ? values for each
thread, which means significant agreement.
While the above metrics show reasonable agree-
ment across annotators, they do not tell us what
pieces of text are easier or harder to annotate. In
the next section we report on a hierarchical cluster-
ing technique that makes it possible to assess how
difficult it is to identify individual text segments as
Callouts.
2.4 Clustering of Callout ADUs
We use a hierarchical clustering technique (Hastie
et al., 2009) to cluster ADUs that are variants of
the same Callout. Each ADU starts in its own clus-
ter. The start and end points of each ADU are uti-
lized to identify overlapping characters in pairs of
ADUs. Then, using a ?bottom up? clustering ap-
proach, two ADUs (in this case, pairs of Callouts)
that share overlapping characters are merged into
a cluster. This process continues until no more
text segments can be merged. Clusters with five
overlapping ADUs include a text segment that all
five annotators have labeled as a Callout, while
clusters with one ADU indicates that only one an-
notator classified the text segment as a Callout
(see Table 3). These numbers provide information
about what segments of text are easier or harder to
code. For instance, when a cluster contains only
two ADUs, it means that three of the five anno-
tators did not label the text segment as a Callout.
Our MTurk study of Stance/Rationale (Sec. 3.2)
could highlight one reason for the variation ? some
coders consider a segment of text as Callout when
an implicit Stance is present, while others do not.
41
# Of EAs Callout Target
5 I disagree too. some things they get right, some
things they do not.
the iPhone is a truly great design.
I disagree too . . . they do not. That happened because the iPhone is a truly
great design.
I disagree too. But when we first tried the iPhone it felt natural
immediately . . . iPhone is a truly great design.
Hi there, I disagree too . . . they do not. Same as
OSX.
?Same as above-
I disagree too. . . Same as OSX . . . no problem. ?Same as above-
2 Like the reviewer said . . . (Apple) the industry
leader.. . . Good luck with that (iPhone clones).
Many of these iPhone . . . griping about issues
that will only affect them once in a blue moon
Like the reviewer said. . . (Apple) the industry
leader.
Many of these iPhone. . .
1 Do you know why the Pre . . . various hand-
set/builds/resolution issues?
Except for games?? iPhone is clearly dominant
there.
Table 3: Examples of Callouts lusters and their corresponding Targets
Thread # of Clusters # of EA ADUs per cluster
5 4 3 2 1
Android 91 52 16 11 7 5
Ipad 88 41 17 7 13 10
Layoffs 86 41 18 11 6 10
Twitter 84 44 17 14 4 5
Table 4: Number of clusters for each cluster type
Table 4 shows the number of Callout clusters in
each thread. The number of clusters with five and
four annotators shows that in each thread there are
Callouts that are plausibly easier to identify. On
the other hand, the clusters selected by only one
or two annotators are harder to identify.
3 Crowdsourcing for Fine-grained
Argumentation
To understand better the nature of the ADUs, we
conducted two studies asking Turkers to perform
finer grained analysis of Callouts and Targets. Our
first study asked five Turkers to label the relation
between a Callout and its corresponding Target
as Agree, Disagree, or Other. The Other relation
may be selected in a situation where the Callout
has no relationship with the Target (e.g., a pos-
sible digression) or is in a type of argumentative
relationship that is difficult to classify as either
Agreement or Disagreement. The second study
asked five Turkers to identify Stance and Ratio-
nale in Callouts identified by EAs. As discussed
in Section 2, by definition, a Callout contains an
explicit instance of Stance, Rationale or both. In
both of these crowdsourcing studies the Turkers
were shown only a limited portion of the threaded
discussion, i.e. the Callout-Target pairs that the
EAs had linked.
Crowdsourcing is becoming a popular mecha-
nism to collect annotations and other type of data
for natural language processing research (Wang
and Callison-Burch, 2010; Snow et al., 2008;
Chen and Dolan, 2011; Post et al., 2012). Crowd-
sourcing platforms such as Amazon Mechanical
Turk (MTurk) provide a flexible framework to sub-
mit various types of NLP tasks where novice anno-
tators (Turkers) can generate content (e.g., transla-
tions, paraphrases) or annotations (labeling) in an
inexpensive way and with limited training. MTurk
also provides researchers with the ability to con-
trol the quality of the Turkers, based on their past
performances. Section 3.1 and 3.2 describe our
two crowdsourcing studies for fine grain argumen-
tation annotation.
3.1 Crowdsourcing Study 1: Labeling the
Relation between Callout and Target
In this study, the Turkers? task was to assign a rela-
tion type between a Callout and its associated Tar-
get. The choices were Agree, Disagree, or Other.
Turkers were provided with detailed instructions,
including multiple examples of Callout and Target
pairs and their relation type. Each HIT (Human
Intelligence Task, in the language of MTurk) con-
tained one Callout-Target pair and Turkers were
paid 2 cents per HIT. To assure a level of qual-
ity control, only qualified Turkers were allowed
to perform the task (i.e., Master level with more
than 95% approval rate and at least 500 approved
HITs).
For this experiment, we randomly selected a
Callout from each cluster, along with its corre-
sponding Target. Our assumption is that all Call-
out ADUs in a given cluster have the same relation
type to their Targets (see Table 3). While this as-
sumption is logical, we plan to fully investigate it
42
in future work by running an MTurk experiment
on all the Callout ADUs and their corresponding
Targets.
We utilized Fleiss? kappa (Fleiss, 1971) to
compute IAA between the Turkers (every HIT
was completed by five Turkers). Kappa is be-
tween 0.45-0.55 for each thread showing moder-
ate agreement between the Turkers (Landis et al.,
1977). These agreement results are in line with the
agreement noticed in previous studies on agree-
ment/disagreement annotations in online interac-
tions (Bender et al., 2011; Abbott et al., 2011).
To select a gold standard for the relation type, we
used majority voting. That is, if three or more
Turkers agreed on a label, we selected that label
as the gold standard. In cases where there was
no majority, we assigned the label Other. The to-
tal number of Callouts that are in agreement and
in disagreement with Targets are 143 and 153, re-
spectively.
Table 5 shows the percentage of each
type of relation identified by Turkers
(Agree/Disagree/Other) for clusters annotated by
different number of EAs. The results suggest
that there is a correlation between text segments
that are easier or harder to annotate by EAs with
the ability of novice annotators to identify an
Agree/Disagree relation type between Callout and
Target. For example, Turkers generally discovered
Agree/Disagree relations between Callouts and
their Targets when the Callouts are part of those
clusters that are annotated by a higher number
of EAs. Turkers identified 57% as showing
a disagreement relation between Callout and
Target, and 39% as showing an agreement relation
(clusters with 5 EAs). For those clusters, only
4% of the Callouts are labeled as having an Other
relation with the Target. For clusters selected
by fewer EAs, however, the number of Callouts
having a relation with the Target labeled as Other
is much higher (39% for clusters with two EAs
and 32% for clusters with one EA). These results
show that those Callouts that are easier to discover
(i.e., identified by all five EAs) mostly have a
relation with the Target (Agree or Disagree) that
is clearly expressed and thus recognizable to the
Turkers. Table 5 also shows that in some cases
even if some EAs agreed on a piece of text to be
considered as a Callout, the novice annotators
assigned the Other relation to the Callout and Tar-
get ADUs. There are two possible explanations:
Relation label # of EA ADUs per cluster
5 4 3 2 1
Agree 39.36 43.33 42.50 35.48 48.39
Disagree 56.91 31.67 32.50 25.81 19.35
Other 3.72 25.00 25.00 38.71 32.26
Table 5: Percentage of Relation labels per EA
cluster type
either the novice annotators could not detect an
implicit agreement or disagreement and thus they
selected Other, or there are other types of relations
besides Agreement and Disagreement between
Callouts and their corresponding Targets. We
plan to extend this study to other fine grained
relation types in future work. In the next section
we discuss the results of building a supervised
classifier to predict the Agree or Disagree relation
type between Callout/Target pairs.
3.1.1 Predicting the Agree/Disagree Relation
Label
We propose a supervised learning setup to clas-
sify the relation types of Callout-Target pairs. The
classification categories are the labels collected
from the MTurk experiment. We only consider
the Agree and Disagree categories since the Other
category has a very small number of instances
(53). Based on the annotations from the Turkers,
we have 143 Agree and 153 Disagree training in-
stances.
We first conducted a simple baseline exper-
iment to check whether participants use words
or phrases to express explicit agreement or dis-
agreement such as ?I agree?, ?I disagree?. We
collected two small lists (twenty words each)
of words from Merriam-Webster dictionary that
explicitly represent agreement and disagreement
Stances. The agreement list contains the word
?agree? and its synonyms such as ?accept?, ?con-
cur?, and ?accede?. The disagreement list con-
tains the word ?disagree? and synonyms such as
?differ? and ?dissent?. We then checked whether
the text of the Callouts contains these explicit
agreement/disagreement markers. Note, that these
markers are utilized as rules and no statistical
learning is involved in this stage of experiment.
The first row of the Table 6 represents the base-
line results. Though the precision is high for
agreement category, the recall is quite low and that
results in a poor overall F1 measure. This shows
that even though markers like ?agree? or ?disagree?
43
Features Category P R F1
Baseline Agree 83.3 6.9 12.9
Disagree 50.0 5.2 9.5
Unigrams Agree 57.9 61.5 59.7
Disagree 61.8 58.2 59.9
MI-based unigram Agree 60.1 66.4 63.1
Disagree 65.2 58.8 61.9
LexF Agree 61.4 73.4 66.9
Disagree 69.6 56.9 62.63
Table 6: Classification of Agree/Disagree
are very precise, they occur in less than 15% of
all the Callouts expressing agreement or disagree-
ment.
For the next set of experiments we used a super-
vised machine learning approach for the two-way
classification (Agree/Disagree). We use Support
Vector Machines (SVM) as our machine-learning
algorithm for classification as implemented in
Weka (Hall et al., 2009) and ran 10-fold cross val-
idation. As a SVM baseline, we first use all un-
igrams in Callout and Target as features (Table
6, Row 2). We notice that the recall improves
significantly when compared with the rule-based
method. To further improve the classification ac-
curacy, we use Mutual Information (MI) to se-
lect the words in the Callouts and Targets that are
likely to be associated with the categories Agree
and Disagree, respectively. Specifically, we sort
each word based on its MI value and then se-
lect the first 180 words in each of the two cate-
gories to represent our new vocabulary set of 360
words. The feature vector includes only words
present in the MI list. Compared to the all uni-
grams baseline, the MI-based unigrams improve
the F1 by 4% (Agree) and 2% (Disagree) (Table
6). The MI approach discovers the words that
are highly associated with Agree/Disagree cate-
gories and these words turn to be useful features
for classification. In addition, we consider several
types of lexical features (LexF) inspired by previ-
ous work on agreement and disagreement (Galley
et al., 2004; Misra and Walker, 2013).
? Sentiment Lexicon (SL): Two features are de-
signed using a sentiment lexicon (Hu and Liu,
2004) where the first feature represents the num-
ber of times the Callout and the Target contain a
positive emotional word and the second feature
represents the number of the negative emotional
words.
? Initial unigrams in Callout (IU): Instead of
using all unigrams in the Callout and Target,
Features Category P R F1
LexF Agree 61.4 73.4 66.9
Disagree 69.6 56.9 62.6
LexF-SL Agree 60.6 74.1 66.7
Disagree 69.4 54.9 61.3
LexF-IU Agree 58.1 69.9 63.5
Disagree 65.3 52.9 58.5
LexF-LO Agree 57.2 74.8 64.8
Disagree 67.0 47.7 55.7
Table 7: Importance of Lexical Features
we only select the first words from the Call-
out (maximum ten). The assumption is that the
stance is generally expressed at the beginning
of a Callout. We used the same MI-based tech-
nique to filter any sparse words.
? Lexical Overlap and Length (LO): This set of
features represents the lexical overlap between
the Callout and the Target and the length of each
ADU.
Table 6 shows that using all these types of
lexical features improves the F1 score for both
categories as compared to the MI-based unigram
features. Table 7 shows the impact of remov-
ing each type of lexical features. From these re-
sults it seems that initial unigrams of Callout (IU)
and lexical overlap (LO) are useful features: re-
moving each of them lowers the results for both
Agree/Disagree categories. In future work, we
plan to explore context-based features such as the
thread structure, and semantic features such as
WordNet-based semantic similarity. We also hy-
pothesize that with additional training instances
the ML approaches will achieve better results.
3.2 Crowdsourcing Study 2: Analysis of
Stance and Rationale
In the second study aimed at identifying the ar-
gumentative nature of the Callouts identified by
the expert annotators, we focus on identifying the
Stance and Rationale segments of a Callout. Since
the presence of at least an explicit Stance or Ra-
tionale was part of the definition of a Callout, we
selected these two argumentation categories as our
finer-grained scheme for this experiment.
Given a pair of Callout and Target ADUs, five
Turkers were asked to identify the Stance and Ra-
tionale segments in the Callout, including the ex-
act boundaries of the text segments. Identifying
Stance and Rationale is a difficult task and thus,
we also asked Turkers to mark the level of diffi-
culty in the identification task. We provided the
44
Diff Number of EAs per cluster
5 4 3 2 1
VE 22.11 22.38 20.25 16.67 10.71
E 28.55 24.00 24.02 28.23 20.00
M 19.69 17.87 20.72 19.39 23.57
D 11.50 10.34 11.46 9.52 12.86
VD 7.02 5.61 4.55 4.42 6.43
TD 11.13 19.79 19.00 21.77 26.33
Table 8: Difficulty judgments by Turkers com-
pared to number of EAs who selected a cluster
Turkers with a scale of difficulty (similar to a Lik-
ert scale), where the Turkers have to choose one
of the following: very easy (VE), easy (E), moder-
ate (M), difficult (D), very difficult (VD), too diffi-
cult to code (TD). Turkers were instructed to select
the too difficult to code choice only in cases where
they felt it was impossible to detect a Stance or
Rationale in the Callout.
The Turkers were provided with detailed in-
structions including examples of Stance and Ra-
tionale annotations for multiple Callouts and only
highly qualified Turkers were allowed to perform
the task. Unlike the previous study, we also ran a
pre-screening testing phase and only Turkers that
passed the screening were allowed to complete the
tasks. Because of the difficult nature of the anno-
tation task, we paid ten cents per HIT.
For the Stance/Rationale study, we considered
all the Callouts in each cluster along with the asso-
ciated Targets. We selected all the Callouts from
each cluster because of variability in the bound-
aries of ADUs, i.e., in the segmentation process.
One benefit of this crowdsourcing experiment is
that it helps us understand better what the variabil-
ity means in terms of argumentative structure. For
example, one EA might mark a text segment as a
Callout only when it expresses a Stance, while an-
other EA might mark as Callout a larger piece of
text expressing both the Stance and Rationale (See
examples of Clusters in Table 3). We leave this
deeper analysis as future work.
Table 8 shows there is a correlation between
the number of EAs who selected a cluster and the
difficulty level Turkers assigned to identifying the
Stance and Rationale elements of a Callout. This
table shows that for more than 50% of the Callouts
that are identified by 5 EAs, the Stance and Ra-
tionale can be easily identified (refer to the ?VE?
and ?E? rows), where as in the case of Callouts
that are identified by only 1 EA, the number is
just 31%. Similarly, more than 26% of the Call-
Diff Number of EAs per cluster
5 4 3 2 1
E 81.04 70.76 60.98 63.64 25.00
M 7.65 7.02 17.07 6.06 25.00
D 5.91 5.85 7.32 9.09 12.50
TD 5.39 16.37 14.63 21.21 37.50
Table 9: Difficulty judgment (majority voting)
outs in that same category (1 EA) were labeled as
?Too difficult to code?, indicating that the Turk-
ers could not identify either a Stance or Rationale
in the Callout. These numbers are comparable to
what our first crowdsourcing study showed for the
Agree/Disagree/Other relation identification (Ta-
ble 5). Table 9 shows results where we selected
overall difficulty level by majority voting. We
combined the easy and very easy categories to the
category easy (E) and the difficult and very diffi-
cult categories to the category difficult (D) for a
simpler presentation.
Table 9 also shows that more than 80% of the
time, Turkers could easily identify Stance and/or
Rationale in Callouts identified by 5 EAs, while
they could perform the finer grained analysis eas-
ily only 25% of time for Callouts identified by a
single EA. Only 5% of Callouts identified by all
5 EAs were considered too difficult to code by the
Turkers (i.e., the novice annotators could not iden-
tify a Stance or a Rationale). In contrast, more
than 37% of Callouts annotated only by 1 EA were
considered too difficult to code by the novice an-
notators. Table 10 presents some of the examples
of Stance and Rationale pairs as selected by the
Turkers along with the difficulty labels.
4 Related Work
Primary tasks for argument analysis are to seg-
ment the text to identify ADUs, detect the roles
of each ADUs, and to establish the relationship
between the ADUs (Peldszus and Stede, 2013a).
Similarly, Cohen (1987) presented a computa-
tional model of argument analysis where the struc-
ture of each argument is restricted to the claim and
evidence relation. Teufel et al. (2009) introduce
the argumentative zoning (AZ) idea that identifies
important sections of scientific articles and later
Hachey and Grover (2005) applied similar idea of
AZ to summarize legal documents. Wyner et al.
(2012) propose a rule-based tool that can high-
light potential argumentative sections of text ac-
cording to discourse cues like ?suppose? or ?there-
fore?. They tested their system on product reviews
45
Target Callout Stance Rationale Difficulty
the iPhone is a truly
great design.
I disagree too. some
things they get right,
some things they do
not.
I. . . too Some things . . . do not Easy
the dedicated ?Back?
button
that back button is key.
navigation is actually
much easier on the an-
droid.
That back button is key Navigation
is. . . android
Moderate
It?s more about the fea-
tures and apps and An-
droid seriously lacks on
latter.
Just because the iPhone
has a huge amount of
apps, doesn?t mean
they?re all worth
having.
? Just because the iPhone
has a huge amount of
apps, doesn?t mean
they?re all worth
having.
Difficult
I feel like your com-
ments about Nexus One
is too positive . . .
I feel like your poor
grammar are to obvious
to be self thought...
? ? Too difficult to
code
Table 10: Examples of Callout/Target pairs with difficulty level (majority voting)
(Canon Camera) from Amazon e-commerce site.
Relatively little attention has so far been de-
voted to the issue of building argumentative cor-
pora from naturally occurring texts (Peldszus and
Stede, 2013a; Feng and Hirst, 2011). However,
(Reed et al., 2008; Reed and Rowe, 2004) have
developed the Araucaria project that maintains
an online repository of arguments (AraucariaDB),
which recently has been used as research cor-
pus for several automatic argumentation analyses
(Palau and Moens, 2009; Wyner et al., 2010; Feng
and Hirst, 2011). Our work contributes a new prin-
cipled method for building annotated corpora for
online interactions. The corpus and guidelines will
also be shared with the research community.
Another line of research that is correlated with
ours is recognition of agreement/disagreement
(Misra and Walker, 2013; Yin et al., 2012; Ab-
bott et al., 2011; Andreas et al., 2012; Galley et
al., 2004; Hillard et al., 2003) and classification of
stances (Walker et al., 2012; Somasundaran and
Wiebe, 2010) in online forums. For future work,
we can utilize textual features (contextual, depen-
dency, discourse markers), relevant multiword ex-
pressions and topic modeling (Mukherjee and Liu,
2013), and thread structure (Murakami and Ray-
mond, 2010; Agrawal et al., 2003) to improve the
Agree/Disagree classification accuracy.
Recently, Cabrio and Villata (2013) proposed
a new direction of argumentative analysis where
the authors show how arguments are associated
with Recognizing Textual Entailment (RTE) re-
search. They utilized RTE approach to detect the
relation of support/attack among arguments (en-
tailment expresses a ?support? and contradiction
expresses an ?attack?) on a dataset of arguments
collected from online debates (e.g., Debatepedia).
5 Conclusion and Future Work
To make progress in argument mining for online
interactions, we need to develop a principled and
scalable way to determine which portions of texts
are argumentative and what is the nature of argu-
mentation. We have proposed a two-tiered ap-
proach to achieve this goal. As a first step we
adopted a coarse-grained annotation scheme based
on Pragmatic Argumentation Theory and asked
expert annotators to label entire threads using this
scheme. Using a clustering technique we iden-
tified which pieces of text were easier or harder
for the Expert Annotators to annotate. Then we
showed that crowdsourcing is a feasible approach
to obtain annotations based on a finer grained ar-
gumentation scheme, especially on text segments
that were easier for the Expert Annotators to la-
bel as being argumentative. While more qualita-
tive analysis of these results is still needed, these
results are an example of the potential benefits of
our multi-step coding approach.
Avenues for future research include but are not
limited to: 1) analyzing the differences between
the stance and rationale annotations among the
novice annotators; 2) improving the classification
accuracies of the Agree/Disagree classifier using
more training data; 3) using syntax and seman-
tics inspired textual features and thread structure;
and 4) developing computational models to detect
Stance and Rationale.
46
Acknowledgements
Part of this paper is based on work supported by
the DARPA-DEFT program for the first two au-
thors. The views expressed are those of the au-
thors and do not reflect the official policy or po-
sition of the Department of Defense or the U.S.
Government.
References
Rob Abbott, Marilyn Walker, Pranav Anand, Jean E
Fox Tree, Robeson Bowmani, and Joseph King.
2011. How can you say such things?!?: Recogniz-
ing disagreement in informal political argument. In
Proceedings of the Workshop on Languages in So-
cial Media, pages 2?11. Association for Computa-
tional Linguistics.
Rakesh Agrawal, Sridhar Rajagopalan, Ramakrishnan
Srikant, and Yirong Xu. 2003. Mining newsgroups
using networks arising from social behavior. In
Proceedings of the 12th international conference on
World Wide Web, pages 529?535. ACM.
Jacob Andreas, Sara Rosenthal, and Kathleen McKe-
own. 2012. Annotating agreement and disagree-
ment in threaded discussion. In LREC, pages 818?
822.
Ron Artstein and Massimo Poesio. 2008. Inter-coder
agreement for computational linguistics. Computa-
tional Linguistics, 34(4):555?596.
Emily M Bender, Jonathan T Morgan, Meghan Oxley,
Mark Zachry, Brian Hutchinson, Alex Marin, Bin
Zhang, and Mari Ostendorf. 2011. Annotating so-
cial acts: Authority claims and alignment moves in
wikipedia talk pages. In Proceedings of the Work-
shop on Languages in Social Media, pages 48?57.
Association for Computational Linguistics.
Or Biran and Owen Rambow. 2011. Identifying jus-
tifications in written dialogs by classifying text as
argumentative. International Journal of Semantic
Computing, 5(04):363?381.
Elena Cabrio and Serena Villata. 2013. A natural
language bipolar argumentation approach to support
users in online debate interactions. Argument &
Computation, 4(3):209?230.
David L Chen and William B Dolan. 2011. Collect-
ing highly parallel data for paraphrase evaluation.
In Proceedings of the 49th Annual Meeting of the
Association for Computational Linguistics: Human
Language Technologies-Volume 1, pages 190?200.
Association for Computational Linguistics.
Robin Cohen. 1987. Analyzing the structure of ar-
gumentative discourse. Computational linguistics,
13(1-2):11?24.
Vanessa Wei Feng and Graeme Hirst. 2011. Clas-
sifying arguments by scheme. In Proceedings
of the 49th Annual Meeting of the Association
for Computational Linguistics: Human Language
Technologies-Volume 1, pages 987?996. Association
for Computational Linguistics.
Joseph L Fleiss. 1971. Measuring nominal scale
agreement among many raters. Psychological bul-
letin, 76(5):378.
Michel Galley, Kathleen McKeown, Julia Hirschberg,
and Elizabeth Shriberg. 2004. Identifying agree-
ment and disagreement in conversational speech:
Use of bayesian networks to model pragmatic de-
pendencies. In Proceedings of the 42nd Annual
Meeting on Association for Computational Linguis-
tics, page 669. Association for Computational Lin-
guistics.
Ben Hachey and Claire Grover. 2005. Automatic le-
gal text summarisation: experiments with summary
structuring. In Proceedings of the 10th international
conference on Artificial intelligence and law, pages
75?84. ACM.
Mark Hall, Eibe Frank, Geoffrey Holmes, Bernhard
Pfahringer, Peter Reutemann, and Ian H Witten.
2009. The weka data mining software: an update.
ACM SIGKDD explorations newsletter, 11(1):10?
18.
Trevor Hastie, Robert Tibshirani, Jerome Friedman,
T Hastie, J Friedman, and R Tibshirani. 2009. The
elements of statistical learning, volume 2. Springer.
Dustin Hillard, Mari Ostendorf, and Elizabeth
Shriberg. 2003. Detection of agreement vs. dis-
agreement in meetings: Training with unlabeled
data. In Proceedings of the 2003 Conference of
the North American Chapter of the Association
for Computational Linguistics on Human Language
Technology: companion volume of the Proceedings
of HLT-NAACL 2003?short papers-Volume 2, pages
34?36. Association for Computational Linguistics.
Minqing Hu and Bing Liu. 2004. Mining and summa-
rizing customer reviews. In Proceedings of the tenth
ACM SIGKDD international conference on Knowl-
edge discovery and data mining, pages 168?177.
ACM.
Ian Hutchby. 2013. Confrontation talk: Arguments,
asymmetries, and power on talk radio. Routledge.
Klaus Krippendorff. 2004. Measuring the reliability
of qualitative text analysis data. Quality & quantity,
38:787?800.
J Richard Landis, Gary G Koch, et al. 1977. The mea-
surement of observer agreement for categorical data.
biometrics, 33(1):159?174.
Douglas W Maynard. 1985. How children start argu-
ments. Language in society, 14(01):1?29.
47
Renee A Meyers and Dale Brashers. 2010. Extend-
ing the conversational argument coding scheme: Ar-
gument categories, units, and coding procedures.
Communication Methods and Measures, 4(1-2):27?
45.
Amita Misra and Marilyn A Walker. 2013. Topic in-
dependent identification of agreement and disagree-
ment in social media dialogue. In Proceedings of
the SIGDIAL 2013 Conference, pages 41?50. Asso-
ciation for Computational Linguistics.
Arjun Mukherjee and Bing Liu. 2013. Discovering
user interactions in ideological discussions. In Pro-
ceedings of the 51st Annual Meeting on Association
for Computational Linguistics, pages 671?681. Cite-
seer.
Akiko Murakami and Rudy Raymond. 2010. Support
or oppose?: classifying positions in online debates
from reply activities and opinion expressions. In
Proceedings of the 23rd International Conference on
Computational Linguistics: Posters, pages 869?875.
Association for Computational Linguistics.
Raquel Mochales Palau and Marie-Francine Moens.
2009. Argumentation mining: the detection, clas-
sification and structure of arguments in text. In Pro-
ceedings of the 12th international conference on ar-
tificial intelligence and law, pages 98?107. ACM.
Andreas Peldszus and Manfred Stede. 2013a. From ar-
gument diagrams to argumentation mining in texts:
A survey. International Journal of Cognitive Infor-
matics and Natural Intelligence (IJCINI), 7(1):1?31.
Andreas Peldszus and Manfred Stede. 2013b. Ranking
the annotators: An agreement study on argumenta-
tion structure. In Proceedings of the 7th linguistic
annotation workshop and interoperability with dis-
course, pages 196?204.
Matt Post, Chris Callison-Burch, and Miles Osborne.
2012. Constructing parallel corpora for six indian
languages via crowdsourcing. In Proceedings of the
Seventh Workshop on Statistical Machine Transla-
tion, pages 401?409. Association for Computational
Linguistics.
Chris Reed and Glenn Rowe. 2004. Araucaria: Soft-
ware for argument analysis, diagramming and repre-
sentation. International Journal on Artificial Intelli-
gence Tools, 13(04):961?979.
Chris Reed, Raquel Mochales Palau, Glenn Rowe, and
Marie-Francine Moens. 2008. Language resources
for studying argument. In Proceedings of the 6th
conference on language resources and evaluation-
LREC 2008, pages 91?100.
Rion Snow, Brendan O?Connor, Daniel Jurafsky, and
Andrew Y Ng. 2008. Cheap and fast?but is it
good?: evaluating non-expert annotations for natu-
ral language tasks. In Proceedings of the conference
on empirical methods in natural language process-
ing, pages 254?263. Association for Computational
Linguistics.
Swapna Somasundaran and Janyce Wiebe. 2010. Rec-
ognizing stances in ideological on-line debates. In
Proceedings of the NAACL HLT 2010 Workshop on
Computational Approaches to Analysis and Genera-
tion of Emotion in Text, pages 116?124. Association
for Computational Linguistics.
Swapna Somasundaran, Josef Ruppenhofer, and Janyce
Wiebe. 2008. Discourse level opinion relations: An
annotation study. In Proceedings of the 9th SIGdial
Workshop on Discourse and Dialogue, pages 129?
137. Association for Computational Linguistics.
Simone Teufel, Advaith Siddharthan, and Colin Batch-
elor. 2009. Towards discipline-independent ar-
gumentative zoning: evidence from chemistry and
computational linguistics. In Proceedings of the
2009 Conference on Empirical Methods in Natural
Language Processing: Volume 3-Volume 3, pages
1493?1502. Association for Computational Linguis-
tics.
Frans H Van Eemeren, Rob Grootendorst, Sally Jack-
son, and Scott Jacobs. 1993. Reconstructing argu-
mentative discourse. University of Alabama Press.
Marilyn A Walker, Pranav Anand, Rob Abbott, Jean
E Fox Tree, Craig Martell, and Joseph King. 2012.
That is your evidence?: Classifying stance in on-
line political debate. Decision Support Systems,
53(4):719?729.
Rui Wang and Chris Callison-Burch. 2010. Cheap
facts and counter-facts. In Proceedings of the
NAACL HLT 2010 Workshop on Creating Speech
and Language Data with Amazon?s Mechanical
Turk, pages 163?167. Association for Computa-
tional Linguistics.
Janyce Wiebe, Theresa Wilson, and Claire Cardie.
2005. Annotating expressions of opinions and emo-
tions in language. Language resources and evalua-
tion, 39(2-3):165?210.
Adam Wyner, Raquel Mochales-Palau, Marie-Francine
Moens, and David Milward. 2010. Approaches to
text mining arguments from legal cases. In Semantic
processing of legal texts, pages 60?79. Springer.
Adam Wyner, Jodi Schneider, Katie Atkinson, and
Trevor JM Bench-Capon. 2012. Semi-automated
argumentative analysis of online product reviews. In
COMMA, pages 43?50.
Jie Yin, Paul Thomas, Nalin Narang, and Cecile Paris.
2012. Unifying local and global agreement and
disagreement classification in online debates. In
Proceedings of the 3rd Workshop in Computational
Approaches to Subjectivity and Sentiment Analysis,
pages 61?69. Association for Computational Lin-
guistics.
48
LAW VIII - The 8th Linguistic Annotation Workshop, pages 120?128,
Dublin, Ireland, August 23-24 2014.
Annotating Multiparty Discourse: Challenges for Agreement Metrics
Nina Wacholder* Smaranda Muresan? Debanjan Ghosh* Mark Aakhus*
*School of Communication and Information, Rutgers University
?Center for Computational Learning Systems, Columbia University
ninwac|debanjan.ghosh|aakhus@rutgers.edu, smara@ccls.columbia.edu
Abstract
To computationally model discourse phenomena such as argumentation we need corpora with
reliable annotation of the phenomena under study. Annotating complex discourse phenomena
poses two challenges: fuzziness of unit boundaries and the need for multiple annotators. We show
that current metrics for inter-annotator agreement (IAA) such as P/R/F1 and Krippendorff?s ?
provide inconsistent results for the same text. In addition, IAA metrics do not tell us what parts of
a text are easier or harder for human judges to annotate and so do not provide sufficiently specific
information for evaluating systems that automatically identify discourse units. We propose a
hierarchical clustering approach that aggregates overlapping text segments of text identified by
multiple annotators; the more annotators who identify a text segment, the easier we assume that
the text segment is to annotate. The clusters make it possible to quantify the extent of agreement
judges show about text segments; this information can be used to assess the output of systems
that automatically identify discourse units.
1 Introduction
Annotation of discourse typically involves three subtasks: segmentation (identification of discourse units,
including their boundaries), segment classification (labeling the role of discourse units) and relation iden-
tification (indicating the link between the discourse units) (Peldszus and Stede, 2013a). The difficulty
of achieving an Inter-Annotator Agreement (IAA) of .80, which is generally accepted as good agree-
ment, is compounded in studies of discourse annotations since annotators must unitize, i.e. identify the
boundaries of discourse units (Artstein and Poesio, 2008). The inconsistent assignment of boundaries in
annotation of discourse has been noted at least since Grosz and Sidner (1986) who observed that although
annotators tended to identify essentially the same units, the boundaries differed slightly. The need for
annotators to identify the boundaries of text segments makes measurement of IAA more difficult because
standard coefficients such as ? assume that the units to be coded have been identified before the coding
begins (Artstein and Poesio, 2008). A second challenge for measuring IAA for discourse annotation is
associated with larger numbers of annotators. Because of the many ways that ideas are expressed in hu-
man language, using multiple annotators to study discourse phenomena is important. Such an approach
capitalizes on the aggregated intuitions of multiple coders to overcome the potential biases of any one
coder and helps identify limitations in the coding scheme, thus adding to the reliability and validity of
the annotation study. The more annotators, however, the harder it is to achieve an IAA of .80 (Bayerl and
Paul, 2011). What to annotate also depends, among other characteristics, on the phenomenon of interest,
the text being annotated, the quality of the annotation scheme and the effectiveness of training. But even
if these are excellent, there is natural variability in human judgment for a task that involves subtle dis-
tinctions about which competent coders disagree. An accurate computational model should reflect this
variability (Aakhus et al., 2013).
This work is licensed under a Creative Commons Attribution 4.0 International Licence. Page numbers and proceedings footer
are added by the organisers. Licence details: http://creativecommons.org/licenses/by/4.0/
120
# Type Statement
Target I?m going to quit the iphone and switch to an android phone because I
can no long (sic) put up with the AT&T service contract
Callout I am going to switch too
Callout There is no point quitting the iphone because of the service package,
just jail break it and use the provider you want
Table 1: Examples of Callouts and Targets
Figure 1: Cluster where 3 judges identify a core
We propose an approach for overcoming these challenges based on evidence from an annotation study
of arguments in online interactions. Our scheme for argumentation is based on Pragmatic Argumentation
Theory (PAT) (Van Eemeren et al., 1993; Hutchby, 2013; Maynard, 1985). PAT states that argument can
arise at any point when two or more actors engage in calling out and making problematic some aspect
of another actor?s prior contribution for what it (could have) said or meant (Van Eemeren et al., 1993).
The argumentative relationships among contributions to a discussion are indicated through links between
what is targeted and how it is called out. Table 1 shows two Callouts that refer back to the same Target.
Callouts and Targets are Argumentative Discourse Units (ADUs) in the sense of Peldszus and Stede
(2013a), ?minimal units of analysis . . . inspired . . . by a . . . relation-based discourse theory? (p.20). In our
case the theory is PAT. Callouts are related to Targets by a relationship that we may refer to as Response,
though we do not discuss the Response relationship in this paper.
The hierarchical clustering technique that we propose systematically identifies clusters of ADUs; each
cluster contains a core of overlapping text that two or more judges have identified. Figure 1 shows
a schematic example of a cluster with a core identified by three judges. The variation in boundaries
represents the individual judges? differing intuitions; these differences reflect natural variation of human
judgments about discourse units. We interpret differences in the number (or percentage) of judges that
identify a core as evidence of how hard or easy a discourse unit is to recognize.
The contributions of this paper are two-fold. First, we show that methods for assessing IAA, such as
the information retrieval inspired (P/R/F1) approach (Wiebe et al., 2005) and Krippendorff?s ? (Krip-
pendorff, 1995; Krippendorff, 2004b), which was developed for content analysis in the social sciences,
provide inconsistent results when applied to segmentations involving fuzzy boundaries and multiple
coders.
In addition, these metrics do not tell us which parts of a text are easier or harder to annotate, or help
choose a reliable gold standard. Our second contribution is a new method for assessing IAA using hier-
archical clustering to find parts of text that are easier or harder to annotate. These clusters could serve as
the basis for assessing the performance of systems that automatically identify ADUs - the system would
be rewarded for identifying ADUs that are easier for people to recognize and penalized for identifying
ADUs that are relatively hard for people to recognize.
2 Annotation Study of Argumentative Discourse Units: Callouts and Targets
In this section, we describe the annotation study we conducted to determine whether trained human
judges can reliably identify Callouts and Targets. The main annotation task was to find Callouts and the
Targets to which they are linked and unitize them, i.e., assign boundaries to each ADU. As mentioned
above, these are the steps for argument mining delineated in Peldszus and Stede (2013a). The design of
121
the study was consistent with the conditions for generating reliable annotations set forth in Krippendorff
(2004a, p. 217).
We selected five blog postings from a corpus crawled from Technorati (technorati.com) between 2008-
2010; the comments contain many disputes. We used the first 100 comments on each blog as our corpus,
along with the original posting. We refer to each blog and the associated comments as a thread.
The complexity of the phenomenon required the perspective of multiple independent annotators, de-
spite the known difficulty in achieving reliable IAA with more than two annotators. For our initial
study, in which our goal was to obtain naturally occurring examples of Callouts and Targets and assess
the challenges of reliably identifying them, we engaged five graduate students with a strong humanities
background. The coding was performed with the open-source Knowtator software (Ogren, 2006). All
five judges annotated all 100 comments in all five threads. While the annotation process was under way,
annotators were instructed not to communicate with each other about the study.
The annotators? task was to find each instance of a Callout, determine the boundaries, link the Callout
to the most recent Target and determine the boundaries of the Target. We prepared and tested a set of
guidelines with definitions and examples of key concepts. The following is an adapted excerpt from the
guidelines:
? Callout: A Callout is (a part of) a subsequent action that selects (a part of) a prior action and marks
and comments on it in some way. In Table 1, Statements 2 and 3 are both Callouts, i.e., they perform
the action of calling out on Statement 1. Statement 2 calls out the first part of Statement 1 dealing
with switching phones. Statement 3 calls out all of Statement 1 ? both what?s proposed and the
rationale for the disagreement.
? Target: A Target is a part of a prior action that has been called out by a subsequent action. Statement
1 is a Target of Statements 2 and 3. But Statements 2 and 3 link to different parts of Statement 1, as
described above.
? Response: A link between Callout and Target that occurs when a subsequent action refers back to
(is a response to) a prior action.
Annotators were instructed to mark any text segment (from words to entire comments) that satisfied
the definitions above. A single text segment could be a Target and a Callout. To save effort on a difficult
task, judges were asked only to annotate the most recent plausible Target. We plan to study chains of
responses in future work.
Prior to the formal study, each annotator spent approximately eight hours in training, spread over about
two weeks, under the supervision of a PhD student who had helped to develop the guidelines. Training
materials included the guidelines and postings and comments from Technorati that were not used in the
formal study. Judges were reminded that our research goal was to find naturally occurring examples of
Callouts and Targets and that the research team did not know in advance what were the right answers
? the subjects? job was to identify Callouts and Targets that satisfied the definitions in the guidelines.
In response to the judges? questions, the guidelines were iteratively updated: definitions were reviewed,
additional examples were added, and a list of FAQs was developed
1
.
Table 2 shows the wide range of results among the annotators for Callouts that illustrates a problem to
be addressed when assessing reliability for multiple annotators.
Averaged over all five threads, A1 identified the fewest Callouts (66.8) while A4 and A5 identified
the most (107 and 109, respectively). Furthermore, the number of annotations assigned by A4 and A5
to each corpus is consistently higher than those of the other annotators, while the number of annotations
A1 assigned to each thread is consistently lower than that of all of the other annotators. Although these
differences could be due to issues with training, we interpret the consistent variation among coders as
potential evidence of two distinct types of behavior: some judges are ?lumpers? who consider a text
string as a single unit; others are ?splitters? who treat the same text string as two (or more) distinct units.
The high degree of variability among coders is consistent with the observations of Peldszus and Stede
1
The corpus, annotations and guidelines are available at <http://wp.comminfo.rutgers.edu/salts/projects/opposition/>.
122
Thread A1 A2 A3 A4 A5
Android 73 99 97 118 110
Ban 46 73 66 86 83
iPad 68 86 85 109 118
Layoffs 71 83 74 109 117
Twitter 76 102 70 113 119
Avg. 66.8 88.6 78.4 107 109.4
Table 2: Callouts per annotator per thread
(2013b). These differences could be due to issues with training and individual differences among coders,
but even so, the variability highlights an important challenge for calculating IAA with multiple coders
and fuzzy unit boundaries.
3 Some Problems of Unitization Reliability with Existing IAA Metrics
In this section we discuss two state-of-the-art metrics frequently used for measuring IAA for discourse
annotation and we show that these methods offer limited informativeness when text boundaries are fuzzy
and there are multiple judges. These methods are the information retrieval inspired precision-recall
(P/R/F1) metrics used in Wiebe and her collaborators? important work on sentiment analysis (Wiebe
et al., 2005; Somasundaran et al., 2008) and Krippendorff?s ?, a variant of the ? family of IAA coef-
ficients specifically designed to handle fuzzy boundaries and multiple annotators (Krippendorff, 1995;
Krippendorff, 2004b). Krippendorff?s ? determines IAA based on observed disagreement relative to
expected agreement and calculates differences in annotators? judgments. Although it is possible to use
number of words or even clauses to measure IAA, we use length in characters both for consistency with
Wiebe?s approach and because Krippendorff (2004b, pp.790-791) recommends using ?. . . the smallest
distinguishable length, for example the characters in text. . .? to measure IAA. We next show the results
of using P/R/F and Krippendorff?s ? to measure IAA for our annotation study and provide examples of
some challenges that need to be addressed.
3.1 Precision, Recall and F measures
Implementing P/R/F1 requires a gold standard annotation against which the other annotations can be
compared. P/R/F1 is calculated here, following (Wiebe et al., 2005), as follows: the units selected by
one annotator are taken as the gold standard and the remaining annotators are calculated against the
selected gold standard. To determine whether annotators selected the same text span, two different types
of matches were considered, as in Somasundaran et al. (2008): exact matches and overlap matches
(variation of their lenient match):
? Exact Matches (EM): Text spans that vary at the start or end point by five characters or less are
considered an exact match. This minor relaxation of exact matching (Somasundaran et al., 2008)
compensates for minor inconsistencies such as whether a judge included a sentence ending punctu-
ation mark in the unit.
? Overlap Matches (OM): Any overlap between text spans of more than 10% of the total number of
characters is considered a match. OM is weaker than EM but still an indicator of shared judgments
by annotators.
Tables 3 and 5 and Tables 4 and 6 show the P/R/F1-based IAA using EM and OM respectively. The
results are averaged across all five threads. Besides average P/R/F1 we also show Max F1 and Min F1,
which represent the maximum and minimum F1 relative to a particular annotator used as gold standard.
These tables show that the results vary greatly. Among the reasons for the variation are the following:
? Results are sensitive to which annotator is selected as the gold standard. In Table 4, pairing A4 with
the judge who agrees maximally produces an F measure of 90.2 while pairing A4 with the annotator
who agrees minimally produces an F measure of 73.3. In Tables 3 and 4, if we select A4 as the gold
standard we get the most variation; selecting A3 produces the least.
123
Ann Avg P Avg R Avg F1 MaxF1 Min F1
A1 40.7 57.7 47.8 60 36.7
A2 51.7 51.2 51.4 58.3 43
A3 54.2 57.8 55.9 61.4 47.9
A4 59.7 49.1 53.9 61.4 47.3
A5 55 45.6 49.9 58.3 36.7
Table 3: Callouts: EM P/R/F1 over 5 threads
Ann Avg P Avg R Avg F1 MaxF1 Min F1
A1 67.4 95.7 79.1 86.8 73.3
A2 85 83.7 84.3 88.7 76.1
A3 82.7 88 85.2 88.7 80.9
A4 92.7 76.8 84 90.2 73.3
A5 91.4 75.1 82.4 89.6 74
Table 4: Callouts: OM P/R/F1 over 5 threads
Ann Avg P Avg R Avg F1 MaxF1 Min F1
A1 24.1 34.6 28.4 34.5 18.7
A2 26.9 24.7 25.7 37.6 18.7
A3 35.2 35.1 35.1 48.4 19.4
A4 37.3 34.5 35.8 50.4 22.1
A5 36.9 31.4 33.9 50.4 19.9
Table 5: Targets: EM P/R/F1 over 5 threads
Ann Avg P Avg R Avg F1 MaxF1 Min F1
A1 60.1 86.5 70.9 76.1 64.2
A2 74.5 69.4 71.9 79.6 62.9
A3 75.9 74.5 75.1 80.1 67.7
A4 78.1 71.5 74.6 84.2 64
A5 83.8 70.3 76.4 83.8 67.2
Table 6: Targets: OM P/R/F1 over 5 threads
? The type of matching matters. As expected, OM, which is less strict than EM, produces substantially
higher F1 scores both for Callouts (Tables 3 and 4 ) and Targets (Tables 5 and 6).
? Different phenomena are associated with different levels of difficulty of annotation. The F1 scores
for Targets are considerably lower than the F1 scores for Callouts. We suspect that Callouts are
easier to recognize since they are often introduced with standard expressions that signal agreement
or disagreement such as ?yes?, ?no?, ?I agree?, or ?I disagree?. Targets, on the other hand, generally
lack such distinguishing lexical features.
We also observe differences across threads. For example, the Ban thread seems harder to annotate
than the other threads. Figure 2 and 3 show IAA results for OM for Callout and Target annotations for
annotators A1 and A5 respectively, across the five threads. We chose A1 and A5 because in general
A1 annotated the fewest Callouts and A5 annotated the most Callouts in the corpus. These figures show
different annotator behavior. For instance, for both Callout and Target annotations, A1 has higher average
R than P, while A5 has higher P but lower R. Figures 2 and 3 hint that the Ban thread is harder to annotate
than the others.
The examples in this section show two downsides to the P/R/F1 metric. First, the scores do not reflect
the extent to which two annotations match. This is crucial information for fuzzy boundary matching, be-
cause the agreement between two annotations can be over only a few characters or over the full length of
the selected text. Second, the variation across multiple judges demonstrates the disadvantage of arbitrary
selection of a gold standard set of annotations against which to measure IAA.
3.2 Krippendorff?s ?
Krippendorff?s ? calculates IAA based on the observed and expected disagreement between annotators.
We use the version of Kripendorff?s ? discussed in Krippendorff (2004b) which takes into account mul-
tiple annotators and fuzzy boundaries. Detailed proof and an explanation of the calculation can be found
in (Krippendorff, 2004b; Krippendorff, 1995).
Thread F1 Krippendorff?s ?
Android 87.8 0.64
Ban 85.3 0.75
iPad 86.0 0.73
Layoffs 87.5 0.87
Twitter 88.5 0.82
Table 7: F1 and ? for all 5 threads
Thread Rank by IAA (Descending)
F1 K?s ?
Twitter Layoffs
Android Twitter
Layoffs Ban
iPad iPad
Ban Android
Table 8: Threads ranked by IAA in descending order
Comparison of ? and P/R/F1 metrics shows that they generate inconsistent results that are difficult to
interpret. For example, in Table 7, the F1 measure for Callouts indicates lower agreement on the Ban
thread in comparison to Android while ? suggests higher agreement on the Ban subcorpus relative to the
124
Figure 2: IAA metrics per thread when A1 is gold standard (Left: Callout. Right: Target.)
Figure 3: IAA metrics per thread when A5 is gold standard ( Left: Callout. Right: Target.)
Android subcorpus. The inconsistencies are also apparent in Table 8, which ranks threads in descending
order of IAA. For example, the Android corpus receives the highest IAA using F1 but the lowest using
?.
We do not show the results for Krippendorff?s ? for Targets for the following reason. Relevant units
from a continuous text string are assigned to categories by individual annotators. But identification of
Targets is dependent on (temporally secondary to) identification of Callouts. In multiple instances we
observe that an annotator links multiple Callouts to two or more overlapping Targets. Depending on
the Callout, the same unit (i.e., text segment) can represent an annotation (a Target) or a gap between
two Targets. Computation of ? is based on the overlapping characters of the annotations and the gaps
between the annotations. Naturally, if a single text string is assigned different labels (i.e. annotation
or a gap between annotations) in different annotations, ? does not produce meaningful results. The
inapplicability of Krippendorff?s ? to Targets is a significant limitation for its use in discourse annotation
(To save space we only show results for Callouts in subsequent tables.)
The examples in Section 3 show a fundamental limitation of both P/R/F1 and Krippendorff?s ?: They
do not pinpoint the location in a document where the extent of variation can be observed. This limits the
usefulness of these measures for studying the discourse phenomenon of interest and for analyzing the
impact of factors such as text difficulty, corpus and judges on IAA. The impact of these factors on IAA
also makes it hard to pick gold standard examples on a principled basis.
4 Hierarchical Clustering of Discourse Units
In this section we introduce a clustering approach that aggregates overlapping annotations, thereby mak-
ing it possible to quantify agreement among annotators within a cluster. Then we show examples of
clusters from our annotation study in which the extent of annotator support for a core reflects how hard
or easy an ADU is for human judges to identify. The hierarchical clustering technique (Hastie et al.,
2009) assumes that overlapping annotations by two or more judges constitutes evidence of the approxi-
mate location of an instance of the phenomenon of interest. In our case, this is the annotation of ADUs
that contain overlapping text. Each ADU starts in its own cluster. The start and end points of each ADU
are utilized to identify overlapping characters in pairs of ADUs. Then, using a bottom-up clustering
125
# Annots Text selected
A1, A2, A3,
A4, A5
I remember Apple telling people give the UI and the keyboard a month
and you?ll get used to it. Plus all the commercials showing the interface.
So, no, you didn?t just pick up the iPhone and know how to use it. It
was pounded into to you.
Table 9: A cluster in which all five judges agreement on the boundaries of the ADU
# Annots Text selected
A1 I?m going to agree that my experience required a bit of getting used to
. . .
A2, A3, A4 I?m going to agree that my experience required a bit of getting used to
. . . I had arrived to the newly minted 2G Gmail and browsing
A5 I?m going to agree that my experience required a bit of getting used to
. . . I had arrived to the newly minted 2G Gmail and browsing. Great
browser on the iPhone but . . . Opera Mini can work wonders
Table 10: A cluster in which all 5 annotators agree on the core but disagree on the closing boundary of
the ADU
technique, pairs of clusters (e.g. pairs of Callout ADUs) with overlapping text strings are merged as they
move up in the hierarchy. An ADU that does not overlap with ADUs identified by any other judge will
remain in its own cluster.
Aggregating overlapping annotations makes it possible to quantify agreement among the annotators
within a cluster. Table 9 shows an example of a cluster that contains five annotations; all five annotators
assign identical unit boundaries, which means that there is a single core, with no variation in the extent of
the ADU. Table 9 thus shows an optimal case ? there is complete agreement among the five annotators.
We take this as strong evidence that the text string in Table 9 is an instance of a Callout that is relatively
easy to identify.
But of course, natural language does not make optimal annotation easy (even if coders were perfect).
Table 10 shows a cluster in which all five annotators agree on the core (shown in italics) but do not
agree about the boundaries of the ADU. A1 picked the shortest text segment. A2, A3 and A4 picked the
same text segment as A1 but they also included the rest of the sentence, up to the word ?browsing?. In
A5?s judgment, the ADU is still longer - it also includes the sentence ?Great browser . . . work wonders.?
Although not as clear-cut as the examples in Table 9, the fact that in Table 10 all annotators chose
overlapping text is evidence that the core has special status in the context of in an annotation task where it
is known that even expert annotators disagree about borders. Examples like those in Table 10 can be used
to study the reasons for variation in the judges? assignment of boundaries. Besides ease of recognition
of an ADU and differing human intuitions, the instructions in the guidelines or characteristics of the
Callouts may be also having an effect.
Table 11 shows a more complex annotation pattern in a cluster. Annotators A1 and A2 agree on the
boundaries of the ADU, but their annotation does not overlap with A4 at all. A3?s boundaries subsume
all other annotations. But because A4?s boundaries do not overlap with those of A1 and A2, technically
this cluster has no core (a text segment included in all ADUs in a cluster). 5% or less of the clusters
have this problem. To handle the absence of a core in this type of cluster, we split the clusters that fit this
pattern into multiple ?overlapping? clusters, that is, we put A1, A2, and A3 into one cluster and we put
A3 and A4 into another cluster. Using this splitting technique, we get two cores, each selected by two
judges: i) ?actually the only . . . app?s developer? from the cluster containing A1, A2, and A3 (shown in
italics) and ii) ?I think it hilarious . . . another device? from the cluster containing A3 and A4 (shown in
bold). The disagreement of the judges in identifying the Callout suggests that judges have quite different
judgments about boundaries of the Callouts.
Table 12 and 13 respectively show the number of clusters with overlapping annotations for Callouts
for each thread before and after splitting. The splitting process has only a small impact on results. The
number of clusters with five and four annotators shows that in each corpus there are Callouts that are
evidently easier to identify. On the other hand, clusters selected by only two or three judges are harder to
126
# Annots Text selected
A1, A2 Actually the only one responsible for the YouTube and Twitter multitask-
ing is the app?s developer
A3 Actually the . . . app?s developer. The Facebook app allows you to watch
videos posted by . . . I think it hilarious that people complain about
features that arent even available on another device
A4 I think it hilarious that people complain about features that arent
even available on another device
Table 11: A cluster with 2 cores, each selected by 2 judges
identify. The clusters containing a text string picked by only one annotator are hardest to identify. This
may be an indication that this text string is not a good example of a Callout, though it also could be an
indication that the judge is particularly good at recognizing subtly expressed Callouts. The clustering
technique thus scaffolds deeper examination of annotation behavior and annotation/concept refinement.
Table 13 also shows that overall, the number of clusters with five or four annotators is well over 50% for
each thread except Ban, even when we exclude the clusters with an ADU identified by only one judge.
This is another hint that the IAA in this thread should be much lower than in the other threads. (See also
Figures 2 and 3).
Thread # of Clusters Annots in each cluster
5 4 3 2 1
Android 91 52 16 11 7 5
Ban 89 25 18 12 20 14
Ipad 88 41 17 7 13 10
Layoffs 86 41 18 11 6 10
Twitter 84 44 17 14 4 5
Table 12: Callouts: Clusters before splitting process
Thread # of Clusters Annots in each cluster
5 4 3 2 1
Android 93 51 15 14 8 5
Ban 91 25 19 12 21 14
iPad 89 41 16 9 13 10
Layoffs 89 40 17 14 8 10
Twitter 87 43 15 20 4 5
Table 13: Callouts: Clusters after splitting process
The clusters with cores supported by four or five annotators show strong annotator agreement and are
very strong candidates for a gold standard, regardless of the IAA for the entire thread. Clusters with
an ADU selected by only one annotator are presumably harder to annotate and are more likely than
other clusters not to be actual instances of the ADU. This information can be used to assess the output
of systems that automatically identify discourse units. For example a system could be penalized more
for missing to identifying ADUs on which all five annotators agree on the boundaries, as in Table 9;
the penalty would be decreased for not identifying ADUs on which fewer annotators agree. Qualitative
analysis may help discover the reason for the variation in strength of clusters, thereby supporting our
ability to interpret IAA and to create accurate computational models of human judgments about dis-
course units. As a related research, PAT and the clustering technique discussed in this paper allow the
development of a finer-grained annotation scheme to analyze the type of links between Target-Callout
(e.g., Agree/Disagree/Other), and the nature of Callouts (e.g., Stance/Rationale) (Ghosh et al., 2014).
5 Conclusion and Future Work
Reliability of annotation studies is important both as part of the demonstration of the validity of the
phenomena being studied and also to support accurate computational modeling of discourse phenomena.
The nature of ADUs, with their fuzzy boundaries, makes it hard to achieve IAA of .80 or higher. Fur-
thermore, the use of a single figure for IAA is a little like relying on an average to convey the range of
variation of a set of numbers. The contributions of this paper are i) to provide concrete examples of the
difficulties of using state of the art metrics like P/R/F1 and Krippendorff?s ? to assess IAA for ADUs
and ii) to open up a new approach to studying IAA that can help us understand how factors like coder
variability and text difficulty affect IAA. Our approach supports reliable identification of discourse units
independent of the overall IAA of the document.
127
References
Mark Aakhus, Smaranda Muresan, and Nina Wacholder. 2013. Integrating natural language processing and
pragmatic argumentation theories for argumentation support. pages 1?12.
Ron Artstein and Massimo Poesio. 2008. Inter-coder agreement for computational linguistics. Computational
Linguistics, 34(4):555?596.
Petra Saskia Bayerl and Karsten Ingmar Paul. 2011. What determines inter-coder agreement in manual annota-
tions? a meta-analytic investigation. Computational Linguistics, 37(4):699?725.
Debanjan Ghosh, Smaranda Muresan, Nina Wacholder, Mark Aakhus, and Matthew Mitsui. 2014. Analyzing
argumentative discourse units in online interactions. In Proceedings of the First Workshop on Argumentation
Mining, pages 39?48, Baltimore, Maryland, June. Association for Computational Linguistics.
Barbara J Grosz and Candace L Sidner. 1986. Attention, intentions, and the structure of discourse. Computational
linguistics, 12(3):175?204.
Trevor Hastie, Robert Tibshirani, Jerome Friedman, T Hastie, J Friedman, and R Tibshirani. 2009. The elements
of statistical learning, volume 2. Springer.
Ian Hutchby. 2013. Confrontation talk: Arguments, asymmetries, and power on talk radio. Routledge.
Klaus Krippendorff. 1995. On the reliability of unitizing continuous data. Sociological Methodology, pages
47?76.
Klaus Krippendorff. 2004a. Content analysis: An introduction to its methodology. Sage.
Klaus Krippendorff. 2004b. Measuring the reliability of qualitative text analysis data. Quality & quantity, 38:787?
800.
Douglas W Maynard. 1985. How children start arguments. Language in society, 14(01):1?29.
Philip V Ogren. 2006. Knowtator: a prot?eg?e plug-in for annotated corpus construction. In Proceedings of the
2006 Conference of the North American Chapter of the Association for Computational Linguistics on Human
Language Technology: companion volume: demonstrations, pages 273?275. Association for Computational
Linguistics.
Andreas Peldszus and Manfred Stede. 2013a. From argument diagrams to argumentation mining in texts: A
survey. International Journal of Cognitive Informatics and Natural Intelligence (IJCINI), 7(1):1?31.
Andreas Peldszus and Manfred Stede. 2013b. Ranking the annotators: An agreement study on argumentation
structure. In Proceedings of the 7th linguistic annotation workshop and interoperability with discourse, pages
196?204.
Swapna Somasundaran, Josef Ruppenhofer, and Janyce Wiebe. 2008. Discourse level opinion relations: An
annotation study. In Proceedings of the 9th SIGdial Workshop on Discourse and Dialogue, pages 129?137.
Association for Computational Linguistics.
Frans H Van Eemeren, Rob Grootendorst, Sally Jackson, and Scott Jacobs. 1993. Reconstructing argumentative
discourse. University of Alabama Press.
Janyce Wiebe, Theresa Wilson, and Claire Cardie. 2005. Annotating expressions of opinions and emotions in
language. Language resources and evaluation, 39(2-3):165?210.
128
