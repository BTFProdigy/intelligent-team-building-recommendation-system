Proceedings of COLING 2014, the 25th International Conference on Computational Linguistics: Technical Papers,
pages 1302?1310, Dublin, Ireland, August 23-29 2014.
Unsupervised Word Sense Induction using Distributional Statistics
Kartik Goyal
Carnegie Mellon Uniersity
kartikgo@cs.cmu.edu
Eduard Hovy
Carnegie Mellon University
hovy@cmu.edu
Abstract
Word sense induction is an unsupervised task to find and characterize different senses of polyse-
mous words. This work investigates two unsupervised approaches that focus on using distribu-
tional word statistics to cluster the contextual information of the target words using two different
algorithms involving latent dirichlet allocation and spectral clustering. Using a large corpus for
achieving this task, we quantitatively analyze our clusters on the Semeval-2010 dataset and also
perform a qualitative analysis of our induced senses. Our results indicate that our methods suc-
cessfully characterized the senses of the target words and were also able to find unconventional
senses for those words.
1 Introduction
Word Sense Induction (WSI) involves automatically determining the number of senses of a given word
or a phrase and identifying the features which differentiate those senses. This task, although similar
to the Word Sense Disambiguation (WSD) task, is fundamentally different because it does not involve
any supervision or explicit human knowledge about senses of words. WSI has potential to be extremely
useful in downstream applications because, apart from the savings on annotation costs, it also mitigates
several theoretical conflicts associated with supervised WSD tasks, which generally involve deciding on
the granularity of senses. Ideally, a WSI algorithm would be able to adapt to different tasks requiring
different sense granularities. WSI algorithms can also be used to model the evolution of the senses of
a word with time and hence can be much easier to maintain than existing fixed sense inventories like
WordNet(Miller, 1995), Ontonotes(Hovy et al., 2006) etc. Automatic sense identification systems also
have the potential to generalize well to large amounts of diverse data and hence be useful in various
difficult domain independent tasks such as machine translation and information retrieval.
Several factors make the problem of word sense induction very challenging. Most importantly, it is not
clear what should be the ?true? senses of a word. The semantic continuum makes it always possible to
break a sense into finer grained subsenses. Thus, the problem is one of finding the optimal granularity
for any given task. Even in a semi-supervised setting, it is unknown which sense inventories are most
suited as starting points in a sense bootstrapping procedure.
Our unsupervised approach relies heavily on the distributional statistics of words which occur in the
proximity of the target words. Hence, we first obtain the distributional statistics from a very large cor-
pus to facilitate generalization and reliable estimation of different possible senses. Then we use these
statistics in a novel manner to obtain a representation for the senses of the target word. In this paper, we
discus the performance of induced senses on the Semeval 2010 WSD/WSI(Manandhar et al., 2010) task.
2 Related Work
Much of the work on word sense induction has been quite recent following the Semeval tasks on WSI
in 2007(Agirre and Soroa, 2007) and 2010, but the task was recognized much earlier and various semi-
supervised and unsupervised efforts were directed towards the problem.Yarowsky (1995) proposed a
This work is licenced under a Creative Commons Attribution 4.0 International License. Page numbers and proceedings footer
are added by the organizers. License details: http://creativecommons.org/licenses/by/4.0/
1302
semi-supervised approach, which required humans to specify seed words for every ambiguous word and
assumed one sense per discourse for an ambiguous word. The unsupervised approaches mainly focus
on clustering the instances of the target words in a corpus, using first-order vectors, second-order vec-
tors (Purandare and Pedersen, 2004)(Sch?utze, 1998) etc. Pantel and Lin (2002) used various syntactic
and surface features for clustering the various occurences of a target word. Co-occurence graph-based
approaches(V?eronis, 2004) have also been used, which represent the words co-occuring with the tar-
get words as nodes and then identify the highly dense subgraphs or ?hubs? within this co-occurence
graph. Brody and Lapata (2009) and Lau et al. (2012) proposed bayesian WSI systems which cluster
the instances by applying Latent Dirichlet Allocation (LDA)(Blei et al., 2003), Hierarchical Dirichlet
Processes (HDP)(Teh et al., 2006) etc. wherein each occurence of a target word is represented as a ?doc-
ument? and its surrounding context as the ?observable content?. Choe and Charniak (2013) propose a
?naive bayes? model for WSI which assumes one sense per discourse and uses Expectation Maximiza-
tion(EM) to estimate model parameters like the probability of generating an instance feature like a word
in the context, given the sense of the target word in a particular instance. Reisinger and Mooney (2010)
and Huang et al. (2012) have proposed sense dependent multiple prototypes for a word instead of the
conventional one vector representation per word and have shown that this sense differentiation improves
semantic similarity measurements between words.
3 Basic Motivation: Co-occurence graphs
Conventionally, each word is represented as a co-occurence vector which may contain frequency, point
wise mutual information or some lower dimensional representation of context and this representation
conflates all the senses of a word. These vectors can be viewed as a graph where words are nodes
which have an edge between them if a word occurs in the distributional vector of another. Given a target
ambiguous word w, we refer to those words as the ?first order? words(referred to by ?neighbors?) which
are directly connected to w. The ?second order? words are the words directly connected to the first order
words and so on. This graph is cyclic and each node might have multiple senses conflated into it. In this
work, we only consider the first and second order words, eg. a target word like ?bank? will have words
like ?river? ,?money? etc in it?s first order and the second order vectors will be the words from the context
of the first order words like ?river?:?flood?,?plains? etc, ?money?: ?currency?, ?economy? etc. Essentially,
these second order words characterize the first order words and hence are very informative for clustering
the first order words into different senses. Essentially, we use the second order words as features of
the first order words and use them to cluster the first order words into different senses.It must be noted
that the first order words themselves might have multiple senses and ideally, those words should also be
disambiguated but in the current work we only focus on disambiguating the ?target? words.
4 Methodology
For clustering the neighbors of the target words, we implement and compare two methods which differ
significantly in their technical details and employ distribtutional statistics of the neighbors differently,
which we describe in the sections below. For obtaining the distributional statistics on a large scale, we
used the 5-gram data of Google N-gram corpus(Michel et al., 2011) which effectively lets us use as 10
word window. No lemmatization or case normalization was performed because the large corpus size
ameliorated the problem of sparseness. Only nouns, verbs, adjectives and adverbs were employed for the
statistical estimation because our pilot studies suggested that these words were most informative.
4.1 Latent Dirichlet Allocation
LDA(Blei et al., 2003) is a well known bayesian generative topic model which models every ?document?
as a mixture of latent ?topics? and all its ?words? as multinomial draws from those latent topics. In topic
model parlance, a ?corpus? consists of various ?documents?. Each ?document? has a collection of tokens
which is treated like a bag of words, where each word is drawn from a latent ?topic?. The topics are
shared across documents thus giving each document a topic proportion based upon the topic assignment
of the tokens in a document. The priors on topic proportions and the topic multimonial paramers are
1303
dirichlet parameters. An important characteristic of LDA is its clustering property which makes the
model inclined to enforce sparseness with small dirichlet priors.
It is important to note that we employ LDA in a significantly different manner than the previous ap-
proaches which have used LDA or other related topic models for word sense induction. Other topic
modelling based approaches for WSI represent each instance of the target word as a ?document? and the
immediate context as the ?bag of words? for that ?document?. Unlike these approaches, we represented a
target ambiguous word as the ?corpus? in the topic modelling parlance. Then we found out all the ?first
order? words co-occuring with the target word within a 10 word window. Each ?first order? word/type
is considered a ?document? in our LDA based approach. The latent ?topics? for each ?document? are
the latent ?senses? and each first order type comprises of a ?sense distribution? which is indicative of
its tendency to induce a particular sense in the target word. The ?second order? types are all the words
occuring in a 10 word window of every ?first order? word. These types along with their frequency, form
the ?bag of words? for the ?first order? type(LDA document). Hence, in our model, the latent senses are
shared across all the first order neighbors of the target word and the second order tokens play the role
of ?words? in our LDA based model. After getting the sense distributions for each first order type, we
perform k-means over all the sense distribution vectors such that every first order neighbor gets assigned
a cluster.
We posit that the distributional statistics of a large corpus helps in improving the coverage of second or-
Figure 1: Figure1: s is the latent sense variable. ? is the sense distribution of a first order neighbor. w is
a second order neighbor of a first order word. ? is the sense multinomial with a dirichlet prior ?. ? is a
dirichlet prior on the sense proportion of a first order type.
der words which are essential for reliable clustering of the first order words. However, the large number
of occurences and a large vocabulary make it intractable to run LDA using the original frequency of the
second order words. To overcome this computational hurdle, we posit that with a diverse representation
of the second order words, LDA based parameter estimation relies more upon the relative distribution of
the these words across all the first order words rather than their actual distributions. Hence, we decided to
scale down the actual counts for each word so that we could run LDA with the finite resources available.
An important parameter in this model is the number of latent topics/senses to use, which is specified to
be the actual number of senses specified in the Ontonotes sense inventory. This is an idealized case in
which the number of senses are known. The ? hyperparameter is chosen to be small with respect to the
average ?document lengths? we encounter. This has the effect of pushing most of the probabilistic weight
to one topics instead of diluting it among many topics. We also decided to analyze the effect of part of
speech tags of the second order words in clustering the first order words. The various configurations we
experimented with were:
? All: Considered nouns,verbs,adjectives and adverbs in second order bag of words.
? Nouns: Only considered second order words which were nouns to study the effect of Nouns on
clustering.
? Verbs: Only considered second order words which were verbs.
1304
? Nadj: Considered both nouns and adjectives to study the effect of Noun phrases over clustering.
? Vadv: Considered both verbs and adjectives for second order bag of words.
4.2 Spectral Clustering
Spectral Clustering(Ng et al., 2002) is a clustering technique which uses a pairwise similarity matrix,
L, to find out clusters such that the seperation between the entities in two seperate clusters is maximum
while implicitly taking into account the distances between groups of points instead of considering them
individually. The aim is to find the eigenvectors of D
?1
L corresponding to smallest eigenvalues to
minimize the similarity across two clusters. Here D is a diagonal matrix with degree of node i on entry
D
ii
. For k clusters, k eigenvectors ordered by their eigenvalues are found out. These k eigenvectors are
used to form a n? k matrix where n is the number of datapoints. Each row of this matrix is considered
a datapoint with a vector of length k, thus effectively reducing the dimension of the datapoints to k most
prominent dimensions according to the similarity matrix decomposition. Finally, k-means is performed
on the n vectors to assign a cluster to each datapoint.
We cluster the first order neighbors for each target word using spectral clustering. The crux of this
algorithm lies in using appropriate pairwise distance matrices. For constructing the pairwise distance
matrices of first order types, we used two vectorial representations of the first order words:
? Senna embeddings: The word embeddings trained by a neural network by (Weston et al., 2012)
? Distributional vectors comprised of the frequencies of the second order words.
Then we used these vectors to calculate mutual pairwise distance matrices(we experimented with Eu-
clidean and Cosine distances), which were converted into similarity matrices by using Gaussian kernels.
These matrices were used as input to the spectral clustering algorithm.
We chose to ignore very low frequency words for making word vectors. This cutoff was decided by
analyzing the distributional frequency vs. rank curves of the words, which were heavy tailed. Again, we
use the same number of clusters as the number of senses in Ontonotes sense inventory, so that we can
study the correspondence between our clusters and the Ontonotes senses.
5 Quantitative Analysis
In this paper, we discus our systems? performances on the Semeval-2010 word sense induc-
tion/disambiguation dataset, which contains 100 target words: 50 nouns and 50 verbs. The test data
is a part of OntoNotes (Hovy et al., 2006) and contains around 9000 instances of usage of the target
words. For annotating a particular test instance, we first filtered the surrounding context to retain only
salient Nouns, Verbs, Adverbs, and Adjectives. We report a mixture of senses for each instance, where
the weight for each sense was proportional to the number of filtered surrounding words belonging to that
sense/cluster. As mentioned earlier, we experimented with a variety of settings for spectral clustering
and LDA based methods. The performance with different settings was generally similar and hence, we
report our best results here. For a better insight into how our models in different settings performed, we
also report the full tables for paired F-score. The performance trend of various systems is similar for
other measures. We compare our results to three baselines:
? Most Frequent Sense (MFS) baseline: assigns all the test instances to the most frequent sense of the
target word.
? Brown University?s system results (Choe and Charniak, 2013).
? Lau (LDA) (Lau et al., 2012), who provide only the results for one of the three measures. In
particular, we compare our system to their results obtained by a model that was based on LDA and
used the gold standard number of senses as the number of topics to be used.
1305
System V-measure Paired F-score Supervised F-score #cl
all nouns verbs all nouns verbs all nouns verbs
LDA 4.4 5.2 3.2 60.7 53.2 71.7 60.9 55.2 69.2 2.45
Spectral 4.5 4.6 4.2 61.5 54.5 71.6 60.7 55.1 68.8 1.87
MFS 0.0 0.0 0.0 63.5 57.0 72.7 58.7 53.2 66.6 1.00
Brown 18.0 23.7 9.9 52.9 52.5 53.5 65.4 62.6 69.5 3.42
Lau - - - - - - 64.0 60.0 69.0 -
Table 1: Performance on Paired F-score and supervised F-score. LDA and Spectral are the two methods
proposed in this paper. Lau is the baseline in which LDA system of (Lau et al., 2012) is considered. It
should be noted that in their paper, (Lau et al., 2012) did not report their performance on Paired F-score.
The Semeval-2010 task provides us with 3 evaluation metrics: V-measure, Paired F-score and Super-
vised F-score. It was noticed (Manandhar and Klapaftis, 2009) that V-measure tends to favour systems
that produce a higher number of clusters than the gold standard and hence is not a reliable estimate of
the performance of WSI systems. But, we report our results on V-measure too as it gives useful insight
about the nature of data and the WSI algorithms.
It is important to note that all the measures treat Ontonotes sense annotations as the gold standard, which
makes this task unfit for our evaluation purposes. As mentioned earlier, our argument is that several
decisions related to the granularity of senses and definition of senses are a topic of dispute, and hence
we believe that instead of relying upon a pre-annotated sense inventory, it should be more effective to
induce senses automatically in an unsupervised manner using a large and unbiased corpus, and tune the
granularity governing parameters for different downstream tasks which require sense disambiguation.
But our performance on these annotations still provides us with valuable information about the agree-
ment between Ontonotes senses and our systems? senses. In our experiments, we have not tried to tune
the hyperparameters or perform agglomerative clustering to better fit our clusters to the gold standard
clusters by using training/development set at all, because we wanted to analyze the performance of our
algorithms in the most general setting.
5.1 V-Measure
The V-measure defines the quality of a cluster to be the harmonic mean of homogeneity and coverage.
These can be viewed as precision and recall of the element-wise assignment to clusters, where homo-
geneity measures the ?pureness? of the clusters and coverage measures the ?cohesiveness?. It was noticed
(Manandhar and Klapaftis, 2009) that V-measure tends to favour systems producing a higher number of
clusters than the gold standard and hence is not a reliable estimate of the performance of WSI systems.
In addition, the number of induced clusters in our systems is bounded at the top by the Gold Standard
number of senses because of our choice of hyperparameters in both spectral clustering and LDA based
approaches.
From the results, we realized that the number of senses induced in the test set by our system is quite
low compared to the baselines and other systems that participated in Semeval-2010. This hurts our V-
measure. Our systems perform better on nouns than verbs generally according to this measure. Also,
LDA-based approaches with the number of topics equal to the number of gold-standard senses perform
the best. For spectral clustering, euclidean distances seem to perform better.
5.2 Paired F-score
The paired F-score is the harmonic mean of precision and recall on the task of classifying whether the
instances in a pair belong to the same cluster or not. This measure also penalizes the systems if the
number of induced senses is not equal to the number of senses in the gold standard. It must be noted that
in our approach, the induced number of senses on the test dataset is not equal to the original number of
senses although we clustered with the number of clusters specified by Ontonotes, because our clusters
are different from Ontonotes senses. MFS has a recall of 100% which makes it a very hard baseline to
1306
P F-score(%) all nouns verbs #cl
CD20 60.5 53.1 71.3 2.12
CD15 57.9 50.8 68.2 2.26
CD10 58.5 50.7 69.7 2.27
ED20 61.5 54.5 71.6 1.87
ED15 60.6 53.1 71.5 2.12
ED10 60.0 52.3 71.3 2.45
CS15 59.6 52.9 69.4 2.25
CS10 60.1 51.9 72.0 2.07
ES15 59.8 52.9 71.3 2.15
ES10 60.8 53.5 71.4 2.21
MFS 63.5 57.0 72.7 1.00
Brown 52.9 52.5 53.5 3.42
Table 2: General trend for the various settings: Paired F-Score Evaluation: Spectral Clustering:
?C?:cosine distance, ?E?: Euclidean Distance, ?D?: Second order Distributinal counts, ?S?:Senna em-
beddings and the adjacent numbers are the number of nearest neighbors(in 1000s) considered for the
distance matrix.
P F-score(%) all nouns verbs #cl
all 60.7 53.2 71.7 2.47
noun 59.6 52.1 70.7 2.32
verb 60.0 52.4 71.0 2.25
nadj 59.7 52.6 70.1 2.3
vadv 59.3 52.27 69.6 2.25
MFS 63.5 57.0 72.7 1.00
Brown 52.9 52.5 53.5 3.42
Table 3: General trend for the various settings: Paired F-Score Evaluation: LDA: ?all?: All POS tags con-
sidered in the first order neighborhood, ?noun?: Only nouns considere, ?verbs?: Only verbs considered,
?nadj?: nouns and adjectives considered, ?vadv?:verbs and adverbs considered
beat. Semeval-2010 results show that none of the systems outperform the MFS baseline. Both of our
systems perform better than other systems on this measure and are comparable to the performance of the
MFS baseline.
5.3 Supervised F-score
For the supervised task, the test data is split into two parts: one for mapping the system senses to the gold
standard senses, and the other for evaluation based upon the mapped senses. We report our performance
on the 80% mapping and 20% evaluation split. The mapping is done automatically by the program
provided by the organizers which is based upon representing the gold standard clusters as a mixture of
the system senses.
Our different systems perform similarly on the supervised evaluation. We outperform the tough MFS
baseline and perform competitively against other systems. We observe that other systems outperform us
on the target nouns whereas our performance on verbs is similar to that of other systems. This can be
attributed to the fact that our methods induce a small number of senses in general over the test set but
according to the test data based upon Ontonotes, the senses of nouns have a much higher resolution than
verbs.
5.4 Discussion on Quantitative Results
In general, we found our performance to be competetive with the other systems. Also, we perform
significantly better than other Semeval-2010 systems on the paired F-score metric. In our experiments,
1307
Sense Cluster Words
1 Engineers,Presbyterian,Service,Jewish,Police,Ethnicity,Independent,Movements
2 membrane,complicated,surgical,hypothalamic,potassium,lymphatic,electron,tumor
3 Cynthia,Armstrong,Tracy,Marilyn,Stella,Abbot,Gustavus,Clark,Stewart,Monica
4 heels,noses,haze,hand,drooping,galloped,nakedness,pallid,anguish,palms
5 night,burdens,gut,assassins,witness,results,celestial,visual,deep,Hell
6 lifted,hastily,hovering,guiding,sinner,tendency,developing,sacrificed,condemned
Table 4: Example words in the clusters of ?body.n?
we found that for spectral clustering, Euclidean distances tend to perform better than Cosine distances.
Also, the distributional counts of the second order words tend to perform better than Senna vectors which
is not surprising because the Senna vectors are trained with the philosophy of a language model, which
results in words often being clustered according to their POS tags rather than their semantic closeness.
Spectral methods, yield slightly better results on two metrics than LDA based clustering which suggests
that similarity matrices give us a better idea about interactions between groups of words than simple
occurence frequencies of the words. But a bigger advantage of spectral clustering techniques is the
speed of computing SVD which is much better than that of slow inference algorithms of LDA based
models.
For LDA based models, we also note that different settings focusing on different POS tags, performed
very similarly and did not indicate any strong preference for any POS tag for the task of WSI using LDA.
Finally, both our methods tend to induce a small number of senses in the test data, which suggests that
the induced senses are relatively coarse-grained. Further splitting of coarse clusters using hierarchical
clustering methods might be helpful if a task requires finer-grained senses.
6 Qualitative Analysis
In this section, we present some deductions drawn from the qualitative analysis of clusters generated by
our methods which support our hypothesis. In particular, we discus the nature of clusters generated by
the spectral clustering algorithm using the second order distributional vectors for obtaining the similarity
matrix based on Euclidean distance.
A preliminary analysis of cluster sizes revealed that in almost all the cases, one of the clusters was very
large(about 3 times larger than the second largest cluster) and this largest cluster seemed to conflate a
lot of senses. Other clusters were generally similar sized and most of them represented a sense of the
target word on their own. The results in general look very promising and many clusters can be easily
interpreted as different senses of the target word.
In Table 4, we show the top few words for the word ?body.n?. Some senses very clearly represent
themselves : 1. Body as in organization, 2. Biological terms related to body, 4. Body in a more informal
sense. Sense 5 seems like a mixture of two senses of body, one related to celestial bodies and other related
to dead bodies/murder. Interestingly, sense 3 comprises proper nouns i.e. people whose bodies have been
mentioned in the corpus. This is not a conventional sense listed in any of the sense inventories but based
upon the requirements of a task, one might be interested in differentiating between general mentions of
?bodies? and mentions of ?bodies? which appear when mentioning famous people or celebrities. This sort
of clustering can be incredibly useful in tasks like Machine Translation and Information Retreival which
require us to model semantics of rare words such as important proper nouns.
7 Discussion and Future Work
We used a large corpus and its distributional statistics to perform word sense induction for a set of 100
target words. We proposed two algorithms which cluster the salient words surrounding the target word
by using the distributions of surrounding words. Both LDA based algorithm and the spectral clustering
algorithm yielded similar clusters. We believe that these clusters can be employed in downstream tasks
and can be further broken into smaller fine grained clusters automatically if needed by the application.
1308
We also evaluated our clusters arising from the distributional statistics, in the Semeval-2010 tasks with-
out any tuning and showed that they perform competetively with other approaches.
We argue that treating existing sense inventories as gold standards for WSI tasks is not an appropriate
measure for WSI systems because these inventories would not be able to measure two very important
characteristics of WSI systems which make them more advantageous than supervised WSD systems:a)
coverage and b) discovery of new senses.
Hence, the Semeval-2010 experiments are not an accurate reflection of the capabilities of WSI systems
because they rely on the Ontonotes sense inventory for the Gold Standard judgements, which are admitted
even by the OntoNotes builders to be only 85% reliable on average (Hovy et al., 2006). Our competetive
performance on these tasks show that our methods can be compliant with standard word sense disam-
biguation tasks but more importantly, our qualitative analysis showed that our techniques can discover
new unconventional senses too, which might not be present in the sense inventories but could be very
useful in tasks requiring differentiations. Unfortunately, no metrics exist that can help us quantify the
coverage of senses and their novelty. An ideal metric to evaluate the WSI systems in a better manner,
would be their performance on extrinsic tasks like Machine Translation, Information Retreival, Machine
Reading etc., which require differentiation of senses at different granular levels. WSI techniques have
a potential of eliminating sense annotation costs hence enabling wider use of sense differentiation in a
more generalized setting.
Our techniques resulted in coarse-grained senses. A major challenge in this task is to determine the
appropriate number of senses to induce. To overcome this problem, non-parametric methods could be
conceived to identify the ideal number of clusters automatically. In future, the WSI systems like ours can
also be used to analyze the evolution of senses over a period of time or geographical variation of senses.
As mentioned earlier, the co-occurence graph consists of many canonical representation of words which
must be split according to their different senses. In our experiments, we considered a small number of
target words and did not take into account the multiplicity of senses in the representation of ?first? and
?second? order neighbors. A more sophisticated iterative approach involving making several passes over
a co-occurence graph and refining senses of different words in each pass can ameliorate the problem as-
sociated with a single canonical representation of neighboring words. Finally, designing extrinsic tasks
to measure the efficacy of WSI systems will be extremely helpful in development of more robust and
useful WSI systems.
Acknowledgments
This research was supported in part by DARPA grant FA8750-12-2-0342 funded under the DEFT pro-
gram.
References
Eneko Agirre and Aitor Soroa. 2007. Semeval-2007 task 02: Evaluating word sense induction and discrimination
systems. In Proceedings of the 4th International Workshop on Semantic Evaluations, pages 7?12. Association
for Computational Linguistics.
David M Blei, Andrew Y Ng, and Michael I Jordan. 2003. Latent dirichlet allocation. the Journal of machine
Learning research, 3:993?1022.
Samuel Brody and Mirella Lapata. 2009. Bayesian word sense induction. In Proceedings of the 12th Conference
of the European Chapter of the Association for Computational Linguistics, pages 103?111. Association for
Computational Linguistics.
Do Kook Choe and Eugene Charniak. 2013. Naive bayes word sense induction. In EMNLP, pages 1433?1437.
Eduard Hovy, Mitchell Marcus, Martha Palmer, Lance Ramshaw, and Ralph Weischedel. 2006. Ontonotes: the
90% solution. In Proceedings of the human language technology conference of the NAACL, Companion Volume:
Short Papers, pages 57?60. Association for Computational Linguistics.
1309
Eric H Huang, Richard Socher, Christopher D Manning, and Andrew Y Ng. 2012. Improving word representations
via global context and multiple word prototypes. In Proceedings of the 50th Annual Meeting of the Associa-
tion for Computational Linguistics: Long Papers-Volume 1, pages 873?882. Association for Computational
Linguistics.
Jey Han Lau, Paul Cook, Diana McCarthy, David Newman, and Timothy Baldwin. 2012. Word sense induction
for novel sense detection. In Proceedings of the 13th Conference of the European Chapter of the Association
for Computational Linguistics, pages 591?601. Association for Computational Linguistics.
Suresh Manandhar and Ioannis P Klapaftis. 2009. Semeval-2010 task 14: evaluation setting for word sense induc-
tion & disambiguation systems. In Proceedings of the Workshop on Semantic Evaluations: Recent Achievements
and Future Directions, pages 117?122. Association for Computational Linguistics.
Suresh Manandhar, Ioannis P Klapaftis, Dmitriy Dligach, and Sameer S Pradhan. 2010. Semeval-2010 task
14: Word sense induction & disambiguation. In Proceedings of the 5th International Workshop on Semantic
Evaluation, pages 63?68. Association for Computational Linguistics.
Jean-Baptiste Michel, Yuan Kui Shen, Aviva Presser Aiden, Adrian Veres, Matthew K Gray, Joseph P Pickett, Dale
Hoiberg, Dan Clancy, Peter Norvig, Jon Orwant, et al. 2011. Quantitative analysis of culture using millions of
digitized books. science, 331(6014):176?182.
George A Miller. 1995. Wordnet: a lexical database for english. Communications of the ACM, 38(11):39?41.
Andrew Y Ng, Michael I Jordan, Yair Weiss, et al. 2002. On spectral clustering: Analysis and an algorithm.
Advances in neural information processing systems, 2:849?856.
Patrick Pantel and Dekang Lin. 2002. Discovering word senses from text. In Proceedings of the eighth ACM
SIGKDD international conference on Knowledge discovery and data mining, pages 613?619. ACM.
Amruta Purandare and Ted Pedersen. 2004. Word sense discrimination by clustering contexts in vector and
similarity spaces. In Proceedings of the Conference on Computational Natural Language Learning, pages 41?
48. Boston.
Joseph Reisinger and Raymond J Mooney. 2010. Multi-prototype vector-space models of word meaning. In
Human Language Technologies: The 2010 Annual Conference of the North American Chapter of the Association
for Computational Linguistics, pages 109?117. Association for Computational Linguistics.
Hinrich Sch?utze. 1998. Automatic word sense discrimination. Computational linguistics, 24(1):97?123.
Yee Whye Teh, Michael I Jordan, Matthew J Beal, and David M Blei. 2006. Hierarchical dirichlet processes.
Journal of the american statistical association, 101(476).
Jean V?eronis. 2004. Hyperlex: lexical cartography for information retrieval. Computer Speech & Language,
18(3):223?252.
Jason Weston, Fr?ed?eric Ratle, Hossein Mobahi, and Ronan Collobert. 2012. Deep learning via semi-supervised
embedding. In Neural Networks: Tricks of the Trade, pages 639?655. Springer.
David Yarowsky. 1995. Unsupervised word sense disambiguation rivaling supervised methods. In Proceedings
of the 33rd annual meeting on Association for Computational Linguistics, pages 189?196. Association for
Computational Linguistics.
1310
Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 467?473,
Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics
A Structured Distributional Semantic Model for Event Co-reference
Kartik Goyal? Sujay Kumar Jauhar? Huiying Li?
Mrinmaya Sachan? Shashank Srivastava? Eduard Hovy
Language Technologies Institute
School of Computer Science
Carnegie Mellon University
{kartikgo,sjauhar,huiyingl,mrinmays,shashans,hovy}@cs.cmu.edu
Abstract
In this paper we present a novel ap-
proach to modelling distributional seman-
tics that represents meaning as distribu-
tions over relations in syntactic neighbor-
hoods. We argue that our model approxi-
mates meaning in compositional configu-
rations more effectively than standard dis-
tributional vectors or bag-of-words mod-
els. We test our hypothesis on the problem
of judging event coreferentiality, which in-
volves compositional interactions in the
predicate-argument structure of sentences,
and demonstrate that our model outper-
forms both state-of-the-art window-based
word embeddings as well as simple ap-
proaches to compositional semantics pre-
viously employed in the literature.
1 Introduction
Distributional Semantic Models (DSM) are popu-
lar in computational semantics. DSMs are based
on the hypothesis that the meaning of a word or
phrase can be effectively captured by the distribu-
tion of words in its neighborhood. They have been
successfully used in a variety of NLP tasks includ-
ing information retrieval (Manning et al, 2008),
question answering (Tellex et al, 2003), word-
sense discrimination (Sch?tze, 1998) and disam-
biguation (McCarthy et al, 2004), semantic sim-
ilarity computation (Wong and Raghavan, 1984;
McCarthy and Carroll, 2003) and selectional pref-
erence modeling (Erk, 2007).
A shortcoming of DSMs is that they ignore the
syntax within the context, thereby reducing the
distribution to a bag of words. Composing the
?*Equally contributing authors
distributions for ?Lincoln?, ?Booth?, and ?killed?
gives the same result regardless of whether the in-
put is ?Booth killed Lincoln? or ?Lincoln killed
Booth?. But as suggested by Pantel and Lin (2000)
and others, modeling the distribution over prefer-
ential attachments for each syntactic relation sep-
arately yields greater expressive power. Thus, to
remedy the bag-of-words failing, we extend the
generic DSM model to several relation-specific
distributions over syntactic neighborhoods. In
other words, one can think of the Structured DSM
(SDSM) representation of a word/phrase as sev-
eral vectors defined over the same vocabulary,
each vector representing the word?s selectional
preferences for its various syntactic arguments.
We argue that this representation not only cap-
tures individual word semantics more effectively
than the standard DSM, but is also better able to
express the semantics of compositional units. We
prove this on the task of judging event coreference.
Experimental results indicate that our model
achieves greater predictive accuracy on the task
than models that employ weaker forms of compo-
sition, as well as a baseline that relies on state-
of-the-art window based word embeddings. This
suggests that our formalism holds the potential of
greater expressive power in problems that involve
underlying semantic compositionality.
2 Related Work
Next, we relate and contrast our work to prior re-
search in the fields of Distributional Vector Space
Models, Semantic Compositionality and Event
Co-reference Resolution.
2.1 DSMs and Compositionality
The underlying idea that ?a word is characterized
by the company it keeps? was expressed by Firth
467
(1957). Several works have defined approaches to
modelling context-word distributions anchored on
a target word, topic, or sentence position. Collec-
tively these approaches are called Distributional
Semantic Models (DSMs).
While DSMs have been very successful on a va-
riety of tasks, they are not an effective model of
semantics as they lack properties such as compo-
sitionality or the ability to handle operators such
as negation. In order to model a stronger form of
semantics, there has been a recent surge in stud-
ies that phrase the problem of DSM composition-
ality as one of vector composition. These tech-
niques derive the meaning of the combination of
two words a and b by a single vector c = f(a, b).
Mitchell and Lapata (2008) propose a framework
to define the composition c = f(a, b, r,K) where
r is the relation between a and b, and K is the
additional knowledge used to define composition.
While this framework is quite general, the actual
models considered in the literature tend to disre-
gard K and r and mostly perform component-wise
addition and multiplication, with slight variations,
of the two vectors. To the best of our knowledge
the formulation of composition we propose is the
first to account for both K and r within this com-
positional framework.
Dinu and Lapata (2010) and S?aghdha and Ko-
rhonen (2011) introduced a probabilistic model
to represent word meanings by a latent variable
model. Subsequently, other high-dimensional ex-
tensions by Rudolph and Giesbrecht (2010), Ba-
roni and Zamparelli (2010) and Grefenstette et
al. (2011), regression models by Guevara (2010),
and recursive neural network based solutions by
Socher et al (2012) and Collobert et al (2011)
have been proposed. However, these models do
not efficiently account for structure.
Pantel and Lin (2000) and Erk and Pad? (2008)
attempt to include syntactic context in distribu-
tional models. A quasi-compositional approach
was attempted in Thater et al (2010) by a com-
bination of first and second order context vectors.
But they do not explicitly construct phrase-level
meaning from words which limits their applicabil-
ity to real world problems. Furthermore, we also
include structure into our method of composition.
Prior work in structure aware methods to the best
of our knowledge are (Weisman et al, 2012) and
(Baroni and Lenci, 2010). However, these meth-
ods do not explicitly model composition.
2.2 Event Co-reference Resolution
While automated resolution of entity coreference
has been an actively researched area (Haghighi
and Klein, 2009; Stoyanov et al, 2009; Raghu-
nathan et al, 2010), there has been relatively lit-
tle work on event coreference resolution. Lee
et al (2012) perform joint cross-document entity
and event coreference resolution using the two-
way feedback between events and their arguments.
We, on the other hand, attempt a slightly different
problem of making co-referentiality judgements
on event-coreference candidate pairs.
3 Structured Distributional Semantics
In this paper, we propose an approach to incorpo-
rate structure into distributional semantics (more
details in Goyal et al (2013)). The word distribu-
tions drawn from the context defined by a set of
relations anchored on the target word (or phrase)
form a set of vectors, namely a matrix for the tar-
get word. One axis of the matrix runs over all
the relations and the other axis is over the distri-
butional word vocabulary. The cells store word
counts (or PMI scores, or other measures of word
association). Note that collapsing the rows of the
matrix provides the standard dependency based
distributional representation.
3.1 Building Representation: The PropStore
To build a lexicon of SDSM matrices for a given
vocabulary we first construct a proposition knowl-
edge base (the PropStore) created by parsing the
Simple English Wikipedia. Dependency arcs are
stored as 3-tuples of the form ?w1, r, w2?, denot-
ing an occurrence of words w1, word w2 related
by r. We also store sentence indices for triples
as this allows us to achieve an intuitive technique
to achieve compositionality. In addition to the
words? surface-forms, the PropStore also stores
their POS tags, lemmas, and Wordnet supersenses.
This helps to generalize our representation when
surface-form distributions are sparse.
The PropStore can be used to query for the ex-
pectations of words, supersenses, relations, etc.,
around a given word. In the example in Figure 1,
the query (SST(W1) = verb.consumption, ?, dobj)
i.e. ?what is consumed? might return expectations
[pasta:1, spaghetti:1, mice:1 . . . ]. Relations and
POS tags are obtained using a dependency parser
Tratz and Hovy (2011), supersense tags using sst-
light Ciaramita and Altun (2006), and lemmas us-
468
Figure 1: Sample sentences & triples
ing Wordnet Fellbaum (1998).
3.2 Mimicking Compositionality
For representing intermediate multi-word phrases,
we extend the above word-relation matrix symbol-
ism in a bottom-up fashion using the PropStore.
The combination hinges on the intuition that when
lexical units combine to form a larger syntactically
connected phrase, the representation of the phrase
is given by its own distributional neighborhood
within the embedded parse tree. The distributional
neighborhood of the net phrase can be computed
using the PropStore given syntactic relations an-
chored on its parts. For the example in Figure
1, we can compose SST(w1) = Noun.person and
Lemma(W1) = eat appearing together with a nsubj
relation to obtain expectations around ?people eat?
yielding [pasta:1, spaghetti:1 . . . ] for the object
relation, [room:2, restaurant:1 . . .] for the location
relation, etc. Larger phrasal queries can be built to
answer queries like ?What do people in China eat
with??, ?What do cows do??, etc. All of this helps
us to account for both relation r and knowledge K
obtained from the PropStore within the composi-
tional framework c = f(a, b, r,K).
The general outline to obtain a composition
of two words is given in Algorithm 1, which
returns the distributional expectation around the
composed unit. Note that the entire algorithm can
conveniently be written in the form of database
queries to our PropStore.
Algorithm 1 ComposePair(w1, r, w2)
M1 ? queryMatrix(w1) (1)
M2 ? queryMatrix(w2) (2)
SentIDs?M1(r) ?M2(r) (3)
return ((M1? SentIDs) ? (M2? SentIDs)) (4)
For the example ?noun.person nsubj eat?, steps
(1) and (2) involve querying the PropStore for the
individual tokens, noun.person and eat. Let the re-
sulting matrices be M1 and M2, respectively. In
step (3), SentIDs (sentences where the two words
appear with the specified relation) are obtained by
taking the intersection between the nsubj compo-
nent vectors of the two matrices M1 and M2. In
step (4), the entries of the original matrices M1
and M2 are intersected with this list of common
SentIDs. Finally, the resulting matrix for the com-
position of the two words is simply the union of
all the relationwise intersected sentence IDs. Intu-
itively, through this procedure, we have computed
the expectation around the words w1 and w2 when
they are connected by the relation ?r?.
Similar to the two-word composition process,
given a parse subtree T of a phrase, we obtain
its matrix representation of empirical counts over
word-relation contexts (described in Algorithm 2).
Let the E = {e1 . . . en} be the set of edges in T ,
ei = (wi1, ri, wi2)?i = 1 . . . n.
Algorithm 2 ComposePhrase(T )
SentIDs? All Sentences in corpus
for i = 1? n do
Mi1 ? queryMatrix(wi1)
Mi2 ? queryMatrix(wi2)
SentIDs? SentIDs ?(M1(ri) ?M2(ri))
end for
return ((M11? SentIDs) ? (M12? SentIDs)
? ? ? ? (Mn1? SentIDs) ? (Mn2? SentIDs))
The phrase representations becomes sparser as
phrase length increases. For this study, we restrict
phrasal query length to a maximum of three words.
3.3 Event Coreferentiality
Given the SDSM formulation and assuming no
sparsity constraints, it is possible to calculate
469
SDSM matrices for composed concepts. However,
are these correct? Intuitively, if they truly capture
semantics, the two SDSM matrix representations
for ?Booth assassinated Lincoln? and ?Booth shot
Lincoln with a gun" should be (almost) the same.
To test this hypothesis we turn to the task of pre-
dicting whether two event mentions are coreferent
or not, even if their surface forms differ. It may be
noted that this task is different from the task of full
event coreference and hence is not directly compa-
rable to previous experimental results in the liter-
ature. Two mentions generally refer to the same
event when their respective actions, agents, pa-
tients, locations, and times are (almost) the same.
Given the non-compositional nature of determin-
ing equality of locations and times, we represent
each event mention by a triple E = (e, a, p) for
the event, agent, and patient.
In our corpus, most event mentions are verbs.
However, when nominalized events are encoun-
tered, we replace them by their verbal forms. We
use SRL Collobert et al (2011) to determine the
agent and patient arguments of an event mention.
When SRL fails to determine either role, its empir-
ical substitutes are obtained by querying the Prop-
Store for the most likely word expectations for
the role. It may be noted that the SDSM repre-
sentation relies on syntactic dependancy relations.
Hence, to bridge the gap between these relations
and the composition of semantic role participants
of event mentions we empirically determine those
syntactic relations which most strongly co-occur
with the semantic relations connecting events,
agents and patients. The triple (e, a, p) is thus the
composition of the triples (a, relationsetagent, e)
and (p, relationsetpatient, e), and hence a com-
plex object. To determine equality of this complex
composed representation we generate three levels
of progressively simplified event constituents for
comparison:
Level 1: Full Composition:
Mfull = ComposePhrase(e, a, p).
Level 2: Partial Composition:
Mpart:EA = ComposePair(e, r, a)
Mpart:EP = ComposePair(e, r, p).
Level 3: No Composition:
ME = queryMatrix(e)
MA = queryMatrix(a)
MP = queryMatrix(p)
To judge coreference between
events E1 and E2, we compute pair-
wise similarities Sim(M1full,M2full),
Sim(M1part:EA,M2part:EA), etc., for each
level of the composed triple representation. Fur-
thermore, we vary the computation of similarity
by considering different levels of granularity
(lemma, SST), various choices of distance
metric (Euclidean, Cityblock, Cosine), and
score normalization techniques (Row-wise, Full,
Column-collapsed). This results in 159 similarity-
based features for every pair of events, which are
used to train a classifier to decide conference.
4 Experiments
We evaluate our method on two datasets and com-
pare it against four baselines, two of which use
window based distributional vectors and two that
employ weaker forms of composition.
4.1 Datasets
IC Event Coreference Corpus: The dataset
(Hovy et al, 2013), drawn from 100 news articles
about violent events, contains manually created
annotations for 2214 pairs of co-referent and non-
coreferent events each. Where available, events?
semantic role-fillers for agent and patient are an-
notated as well. When missing, empirical substi-
tutes were obtained by querying the PropStore for
the preferred word attachments.
EventCorefBank (ECB) corpus: This corpus
(Bejan and Harabagiu, 2010) of 482 documents
from Google News is clustered into 45 topics,
with event coreference chains annotated over each
topic. The event mentions are enriched with se-
mantic roles to obtain the canonical event struc-
ture described above. Positive instances are ob-
tained by taking pairwise event mentions within
each chain, and negative instances are generated
from pairwise event mentions across chains, but
within the same topic. This results in 11039 posi-
tive instances and 33459 negative instances.
4.2 Baselines
To establish the efficacy of our model, we compare
SDSM against a purely window-based baseline
(DSM) trained on the same corpus. In our exper-
iments we set a window size of seven words. We
also compare SDSM against the window-based
embeddings trained using a recursive neural net-
work (SENNA) (Collobert et al, 2011) on both
datsets. SENNA embeddings are state-of-the-art
for many NLP tasks. The second baseline uses
470
IC Corpus ECB Corpus
Prec Rec F-1 Acc Prec Rec F-1 Acc
SDSM 0.916 0.929 0.922 0.906 0.901 0.401 0.564 0.843
Senna 0.850 0.881 0.865 0.835 0.616 0.408 0.505 0.791
DSM 0.743 0.843 0.790 0.740 0.854 0.378 0.524 0.830
MVC 0.756 0.961 0.846 0.787 0.914 0.353 0.510 0.831
AVC 0.753 0.941 0.837 0.777 0.901 0.373 0.528 0.834
Table 1: Cross-validation Performance on IC and ECB dataset
SENNA to generate level 3 similarity features for
events? individual words (agent, patient and ac-
tion). As our final set of baselines, we extend two
simple techniques proposed by (Mitchell and Lap-
ata, 2008) that use element-wise addition and mul-
tiplication operators to perform composition. We
extend it to our matrix representation and build
two baselines AVC (element-wise addition) and
MVC (element-wise multiplication).
4.3 Discussion
Among common classifiers, decision-trees (J48)
yielded best results in our experiments. Table 1
summarizes our results on both datasets.
The results reveal that the SDSM model con-
sistently outperforms DSM, SENNA embeddings,
and the MVC and AVC models, both in terms
of F-1 score and accuracy. The IC corpus com-
prises of domain specific texts, resulting in high
lexical overlap between event mentions. Hence,
the scores on the IC corpus are consistently higher
than those on the ECB corpus.
The improvements over DSM and SENNA em-
beddings, support our hypothesis that syntax lends
greater expressive power to distributional seman-
tics in compositional configurations. Furthermore,
the increase in predictive accuracy over MVC and
AVC shows that our formulation of composition
of two words based on the relation binding them
yields a stronger form of compositionality than
simple additive and multiplicative models.
Next, we perform an ablation study to deter-
mine the most predictive features for the task of
event coreferentiality. The forward selection pro-
cedure reveals that the most informative attributes
are the level 2 compositional features involving
the agent and the action, as well as their individ-
ual level 3 features. This corresponds to the in-
tuition that the agent and the action are the prin-
cipal determiners for identifying events. Features
involving the patient and level 1 features are least
useful. This is probably because features involv-
ing full composition are sparse, and not as likely
to provide statistically significant evidence. This
may change as our PropStore grows in size.
5 Conclusion and Future Work
We outlined an approach that introduces structure
into distributed semantic representations gives us
an ability to compare the identity of two repre-
sentations derived from supposedly semantically
identical phrases with different surface realiza-
tions. We employed the task of event coreference
to validate our representation and achieved sig-
nificantly higher predictive accuracy than several
baselines.
In the future, we would like to extend our model
to other semantic tasks such as paraphrase detec-
tion, lexical substitution and recognizing textual
entailment. We would also like to replace our syn-
tactic relations to semantic relations and explore
various ways of dimensionality reduction to solve
this problem.
Acknowledgments
The authors would like to thank the anonymous re-
viewers for their valuable comments and sugges-
tions to improve the quality of the paper. This
work was supported in part by the following
grants: NSF grant IIS-1143703, NSF award IIS-
1147810, DARPA grant FA87501220342.
References
Marco Baroni and Alessandro Lenci. 2010. Distri-
butional memory: A general framework for corpus-
based semantics. Comput. Linguist., 36(4):673?721,
December.
Marco Baroni and Roberto Zamparelli. 2010. Nouns
are vectors, adjectives are matrices: representing
adjective-noun constructions in semantic space. In
Proceedings of the 2010 Conference on Empirical
471
Methods in Natural Language Processing, EMNLP
?10, pages 1183?1193, Stroudsburg, PA, USA. As-
sociation for Computational Linguistics.
Cosmin Adrian Bejan and Sanda Harabagiu. 2010.
Unsupervised event coreference resolution with rich
linguistic features. In Proceedings of the 48th An-
nual Meeting of the Association for Computational
Linguistics, ACL ?10, pages 1412?1422, Strouds-
burg, PA, USA. Association for Computational Lin-
guistics.
Massimiliano Ciaramita and Yasemin Altun. 2006.
Broad-coverage sense disambiguation and informa-
tion extraction with a supersense sequence tagger.
In Proceedings of the 2006 Conference on Empirical
Methods in Natural Language Processing, EMNLP
?06, pages 594?602, Stroudsburg, PA, USA. Associ-
ation for Computational Linguistics.
Ronan Collobert, Jason Weston, L?on Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. J. Mach. Learn. Res., 999888:2493?2537,
November.
Georgiana Dinu and Mirella Lapata. 2010. Measuring
distributional similarity in context. In Proceedings
of the 2010 Conference on Empirical Methods in
Natural Language Processing, EMNLP ?10, pages
1162?1172, Stroudsburg, PA, USA. Association for
Computational Linguistics.
Katrin Erk and Sebastian Pad?. 2008. A structured
vector space model for word meaning in context. In
Proceedings of the Conference on Empirical Meth-
ods in Natural Language Processing, EMNLP ?08,
pages 897?906, Stroudsburg, PA, USA. Association
for Computational Linguistics.
Katrin Erk. 2007. A simple, similarity-based model
for selectional preferences.
Christiane Fellbaum. 1998. WordNet: An Electronic
Lexical Database. Bradford Books.
John R. Firth. 1957. A Synopsis of Linguistic Theory,
1930-1955. Studies in Linguistic Analysis, pages 1?
32.
Kartik. Goyal, Sujay Kumar Jauhar, Mrinmaya Sachan,
Shashank Srivastava, Huiying Li, and Eduard Hovy.
2013. A structured distributional semantic model
: Integrating structure with semantics. In Proceed-
ings of the 1st Continuous Vector Space Models and
their Compositionality Workshop at the conference
of ACL 2013.
Edward Grefenstette, Mehrnoosh Sadrzadeh, Stephen
Clark, Bob Coecke, and Stephen Pulman. 2011.
Concrete sentence spaces for compositional distri-
butional models of meaning. In Proceedings of the
Ninth International Conference on Computational
Semantics, IWCS ?11, pages 125?134, Stroudsburg,
PA, USA. Association for Computational Linguis-
tics.
Emiliano Guevara. 2010. A regression model of
adjective-noun compositionality in distributional se-
mantics. In Proceedings of the 2010 Workshop on
GEometrical Models of Natural Language Seman-
tics, GEMS ?10, pages 33?37, Stroudsburg, PA,
USA. Association for Computational Linguistics.
Aria Haghighi and Dan Klein. 2009. Simple coref-
erence resolution with rich syntactic and semantic
features. In Proceedings of the 2009 Conference on
Empirical Methods in Natural Language Process-
ing: Volume 3 - Volume 3, EMNLP ?09, pages 1152?
1161, Stroudsburg, PA, USA. Association for Com-
putational Linguistics.
E.H. Hovy, T. Mitamura, M.F. Verdejo, J. Araki, and
A. Philpot. 2013. Events are not simple: Iden-
tity, non-identity, and quasi-identity. In Proceedings
of the 1st Events Workshop at the conference of the
HLT-NAACL 2013.
Heeyoung Lee, Marta Recasens, Angel Chang, Mihai
Surdeanu, and Dan Jurafsky. 2012. Joint entity
and event coreference resolution across documents.
In Proceedings of the 2012 Joint Conference on
Empirical Methods in Natural Language Process-
ing and Computational Natural Language Learning,
EMNLP-CoNLL ?12, pages 489?500, Stroudsburg,
PA, USA. Association for Computational Linguis-
tics.
Christopher D. Manning, Prabhakar Raghavan, and
Hinrich Sch?tze. 2008. Introduction to Information
Retrieval. Cambridge University Press, New York,
NY, USA.
Diana McCarthy and John Carroll. 2003. Disam-
biguating nouns, verbs, and adjectives using auto-
matically acquired selectional preferences. Comput.
Linguist., 29(4):639?654, December.
Diana McCarthy, Rob Koeling, Julie Weeds, and John
Carroll. 2004. Finding predominant word senses in
untagged text. In Proceedings of the 42nd Annual
Meeting on Association for Computational Linguis-
tics, ACL ?04, Stroudsburg, PA, USA. Association
for Computational Linguistics.
Jeff Mitchell and Mirella Lapata. 2008. Vector-based
models of semantic composition. In Proceedings of
ACL-08: HLT, pages 236?244.
Patrick Pantel and Dekang Lin. 2000. Word-for-word
glossing with contextually similar words. In Pro-
ceedings of the 1st North American chapter of the
Association for Computational Linguistics confer-
ence, NAACL 2000, pages 78?85, Stroudsburg, PA,
USA. Association for Computational Linguistics.
Karthik Raghunathan, Heeyoung Lee, Sudarshan Ran-
garajan, Nathanael Chambers, Mihai Surdeanu, Dan
Jurafsky, and Christopher Manning. 2010. A multi-
pass sieve for coreference resolution. In Proceed-
ings of the 2010 Conference on Empirical Meth-
ods in Natural Language Processing, EMNLP ?10,
472
pages 492?501, Stroudsburg, PA, USA. Association
for Computational Linguistics.
Sebastian Rudolph and Eugenie Giesbrecht. 2010.
Compositional matrix-space models of language. In
Proceedings of the 48th Annual Meeting of the As-
sociation for Computational Linguistics, ACL ?10,
pages 907?916, Stroudsburg, PA, USA. Association
for Computational Linguistics.
Hinrich Sch?tze. 1998. Automatic word sense dis-
crimination. Comput. Linguist., 24(1):97?123.
Diarmuid ? S?aghdha and Anna Korhonen. 2011.
Probabilistic models of similarity in syntactic con-
text. In Proceedings of the Conference on Empirical
Methods in Natural Language Processing, EMNLP
?11, pages 1047?1057, Stroudsburg, PA, USA. As-
sociation for Computational Linguistics.
Richard Socher, Brody Huval, Christopher D. Man-
ning, and Andrew Y. Ng. 2012. Semantic com-
positionality through recursive matrix-vector spaces.
In Proceedings of the 2012 Joint Conference on
Empirical Methods in Natural Language Process-
ing and Computational Natural Language Learning,
EMNLP-CoNLL ?12, pages 1201?1211, Strouds-
burg, PA, USA. Association for Computational Lin-
guistics.
Veselin Stoyanov, Nathan Gilbert, Claire Cardie, and
Ellen Riloff. 2009. Conundrums in noun phrase
coreference resolution: making sense of the state-
of-the-art. In Proceedings of the Joint Conference of
the 47th Annual Meeting of the ACL and the 4th In-
ternational Joint Conference on Natural Language
Processing of the AFNLP: Volume 2 - Volume 2,
ACL ?09, pages 656?664, Stroudsburg, PA, USA.
Association for Computational Linguistics.
Stefanie Tellex, Boris Katz, Jimmy J. Lin, Aaron Fer-
nandes, and Gregory Marton. 2003. Quantitative
evaluation of passage retrieval algorithms for ques-
tion answering. In SIGIR, pages 41?47.
Stefan Thater, Hagen F?rstenau, and Manfred Pinkal.
2010. Contextualizing semantic representations us-
ing syntactically enriched vector models. In Pro-
ceedings of the 48th Annual Meeting of the Associa-
tion for Computational Linguistics, ACL ?10, pages
948?957, Stroudsburg, PA, USA. Association for
Computational Linguistics.
Stephen Tratz and Eduard Hovy. 2011. A fast, ac-
curate, non-projective, semantically-enriched parser.
In Proceedings of the Conference on Empirical
Methods in Natural Language Processing, EMNLP
?11, pages 1257?1268, Stroudsburg, PA, USA. As-
sociation for Computational Linguistics.
Hila Weisman, Jonathan Berant, Idan Szpektor, and Ido
Dagan. 2012. Learning verb inference rules from
linguistically-motivated evidence. In Proceedings
of the 2012 Joint Conference on Empirical Methods
in Natural Language Processing and Computational
Natural Language Learning, EMNLP-CoNLL ?12,
pages 194?204, Stroudsburg, PA, USA. Association
for Computational Linguistics.
S. K. M. Wong and Vijay V. Raghavan. 1984. Vector
space model of information retrieval: a reevaluation.
In Proceedings of the 7th annual international ACM
SIGIR conference on Research and development in
information retrieval, SIGIR ?84, pages 167?185,
Swinton, UK. British Computer Society.
473
Proceedings of the First Workshop on Metaphor in NLP, pages 52?57,
Atlanta, Georgia, 13 June 2013. c?2013 Association for Computational Linguistics
Identifying Metaphorical Word Use with Tree Kernels
Dirk Hovy1 Shashank Srivastava2 Sujay Kumar Jauhar2 Mrinmaya Sachan2
Kartik Goyal2 Huiying Li2 Whitney Sanders2 Eduard Hovy2
(1) ISI, University of Southern California, Marina del Rey
(2) LTI, Carnegie Mellon University, Pittsburgh
dirkh@isi.edu, {shashans,sjauhar,mrinmays,kartikgo,huiyingl,wsanders,hovy}@cs.cmu.edu
Abstract
A metaphor is a figure of speech that refers
to one concept in terms of another, as in ?He
is such a sweet person?. Metaphors are ubiq-
uitous and they present NLP with a range
of challenges for WSD, IE, etc. Identifying
metaphors is thus an important step in lan-
guage understanding. However, since almost
any word can serve as a metaphor, they are
impossible to list. To identify metaphorical
use, we assume that it results in unusual se-
mantic patterns between the metaphor and its
dependencies. To identify these cases, we use
SVMs with tree-kernels on a balanced corpus
of 3872 instances, created by bootstrapping
from available metaphor lists.1 We outper-
form two baselines, a sequential and a vector-
based approach, and achieve an F1-score of
0.75.
1 Introduction
A metaphor is a figure of speech used to transfer
qualities of one concept to another, as in ?He is
such a sweet person?. Here, the qualities of ?sweet?
(the source) are transferred to a person (the target).
Traditionally, linguistics has modeled metaphors as
a mapping from one domain to another (Lakoff and
Johnson, 1980).
Metaphors are ubiquitous in normal language and
present NLP with a range of challenges. First, due to
their very nature, they cannot be interpreted at face
value, with consequences for WSD, IE, etc. Second,
metaphors are very productive constructions, and
almost any word can be used metaphorically (e.g.,
1Available at http://www.edvisees.cs.cmu.edu/
metaphordata.tar.gz
?This is the Donald Trump of sandwiches.?). This
property makes them impossible to pre-define or
list. Third, repeated use of a metaphor eventu-
ally solidifies it into a fixed expression with the
metaphorical meaning now accepted as just another
sense, no longer recognized as metaphorical at all.
This gradient makes it hard to determine a boundary
between literal and metaphorical use of some ex-
pressions. Identifying metaphors is thus a difficult
but important step in language understanding.2
Since many words can be productively used as
new metaphors, approaches that try to identify
them based on lexical features alone are bound to
be unsuccessful. Some approaches have therefore
suggested considering distributional properties
and ?abstractness? of the phrase (Turney et al,
2011). This nicely captures the contextual nature
of metaphors, but their ubiquity makes it impossible
to find truly ?clean? data to learn the separate
distributions of metaphorical and literal use for
each word. Other approaches have used pre-defined
mappings from a source to a target domain, as in
?X is like Y?, e.g., ?emotions are like temperature?
(Mason, 2004). These approaches tend to do well
on the defined mappings, but they do not generalize
to new, creative metaphors. It is doubtful that it
is feasible to list all possible mappings, so these
approaches remain brittle.
In contrast, we do not assume any predefined
mappings. We hypothesize instead that if we inter-
preted every word literally, metaphors will manifest
themselves as unusual semantic compositions.
Since these compositions most frequently occur
2Shutova (2010) distinguishes between metaphor identifica-
tion (which she calls recognition) and interpretation. We are
solely concerned with the former.
52
in certain syntactic relations, they are usually con-
sidered semantic preference violations; e.g., in the
metaphorical ?You will have to eat your words?, the
food-related verb heads a noun of communication.
In contrast, with the literal sense of ?eat? in ?You
will have to eat your peas?, it heads a food noun.
This intuition is the basis of the approaches in
(Iverson and Helmreich, 1991; Krishnakumaran
and Zhu, 2007; Baumer et al, 2010; Turney et
al., 2011).3 We generalize this intuition beyond
preference selections of verbs and relational nouns.
Given enough labeled examples of a word, we
expect to find distinctive differences in the compo-
sitional behavior of its literal and metaphorical uses
in certain preferred syntactic relationships. If we
can learn to detect such differences/anomalies, we
can reliably identify metaphors. Since we expect
these patterns in levels other than the lexical level,
the approach expands well to creative metaphors.
The observation that the anomaly tends to occur
between syntactically related words makes depen-
dency tree kernels a natural fit for the problem. Tree
kernels have been successfully applied to a wide
range of NLP tasks that involve (syntactic) relations
(Culotta and Sorensen, 2004; Moschitti, 2006; Qian
et al, 2008; Giuliano et al, 2009; Mirroshandel et
al., 2011).
Our contributions in this paper are:
? we annotate and release a corpus of 3872 in-
stances for supervised metaphor classification
? we are the first to use tree kernels for metaphor
identification
? our approach achieves an F1-score of 0.75, the
best score of of all systems tested.
2 Data
2.1 Annotation
We downloaded a list of 329 metaphor examples
from the web4. For each expression, we extracted
sentences from the Brown corpus that contained
the seed (see Figure 1 for an example). To decide
3A similar assumption can be used to detect the literal/non-
literal uses of idioms (Fazly et al, 2009).
4http://www.metaphorlist.com and http://
www.macmillandictionaryblog.com
whether a particular instance is used metaphorically,
we set up an annotation task on Amazon Mechanical
Turk (AMT).
Annotators were asked to decide whether a
highlighted expression in a sentence was used
metaphorically or not (see Figure 2 for a screen-
shot). They were prompted to think about whether
the expression was used in its original meaning.5
In some cases, it is not clear whether an expression
is used metaphorically or not (usually in short
sentences such as ?That?s sweet?), so annotators
could state that it was not possible to decide. We
paid $0.09 for each set of 10 instances.
Each instance was annotated by 7 annotators.
Instances where the annotators agreed that it was
impossible to tell whether it is a metaphor or not
were discarded. Inter-annotator agreement was
0.57, indicating a difficult task. In order to get the
label for each instance, we weighted the annotator?s
answers using MACE (Hovy et al, 2013), an
implementation of an unsupervised item-response
model. This weighted voting produces more reliable
estimates than simple majority voting, since it is
capable of sorting out unreliable annotators. The
final corpus consisted of 3872 instances, 1749 of
them labeled as metaphors.
Figure 2: Screenshot of the annotation interface on Ama-
zon?s Mechanical Turk
We divided the data into training, dev, and test
sets, using a 80-10-10 split. All results reported
here were obtained on the test set. Tuning and
development was only carried out on the dev set.
2.2 Vector Representation of Words
The same word may occur in a literal and a
metaphorical usage. Lexical information alone is
5While this is somewhat imprecise and not always easy to
decide, it proved to be a viable strategy for untrained annotators.
53
A bright idea.
? Peter is the bright , sympathetic guy when you ?re doing a deal , ? says one agent . yes
Below he could see the bright torches lighting the riverbank . no
Her bright eyes were twinkling . yes
Washed , they came out surprisingly clear and bright . no
Figure 1: Examples of a metaphor seed, the matching Brown sentences, and their annotations
thus probably not very helpful. However, we would
like to capture semantic aspects of the word and
represent it in an expressive way. We use the exist-
ing vector representation SENNA (Collobert et al,
2011) which is derived from contextual similarity.
In it, semantically similar words are represented
by similar vectors, without us having to define
similarity or looking at the word itself. In initial
tests, these vectors performed better than binary
vectors straightforwardly derived from features of
the word in context.
2.3 Constructing Trees
a) b) c)
like
I people
the sweet in
Boston
NNS
DT JJ IN
n.group
O adj.all O
NNP n.location
VB
PRP
v.emotion
O
Figure 3: Graphic demonstration of our approach. a) de-
pendency tree over words, with node of interest labeled.
b) as POS representation. c) as supersense representation
The intuition behind our approach is that
metaphorical use differs from literal use in certain
syntactic relations. For example, the only difference
between the two sentences ?I like the sweet people
in Boston? and ?I like the sweet pies in Boston? is
the head of ?sweet?. Our assumption is that?given
enough examples?certain patterns emerge (e.g.,
that ?sweet? in combination with food nouns is
literal, but is metaphorical if governed by a noun
denoting people).
We assume that these patterns occur on different
levels, and mainly between syntactically related
words. We thus need a data representation to
capture these patterns. We borrow its structure from
dependency trees, and the different levels from
various annotations. We parse the input sentence
with the FANSE parser (Tratz and Hovy, 2011)6. It
provides the dependency structure, POS tags, and
other information.
To construct the different tree representations,
we replace each node in the tree with its word,
lemma, POS tag, dependency label, or supersense
(the WordNet lexicographer name of the word?s
first sense (Fellbaum, 1998)), and mark the word
in question with a special node. See Figure 3 for
a graphical representation. These trees are used in
addition to the vectors.
This approach is similar to the ones described in
(Moschitti et al, 2006; Qian et al, 2008; Hovy et
al., 2012).
2.4 Classification Models
A tree kernel is simply a similarity matrix over tree
instances. It computes the similarity between two
trees T1, T2 based on the number of shared subtrees.
We want to make use of the information en-
coded in the different tree representations during
classification, i.e., a forest of tree kernels. We thus
combine the contributions of the individual tree
representation kernels via addition. We use kernels
over the lemma, POS tag, and supersense tree
representations, the combination which performed
best on the dev set in terms of accuracy.
We use the SVMlight TK implementation by
Moschitti (2006).7 We left most parameters set
to default values, but tuned the weight of the
contribution of the trees and the cost factor on the
dev set. We set the multiplicative constant for the
trees to 2.0, and the cost factor for errors on positive
examples to 1.7.
6http://www.isi.edu/publications/
licensed-sw/fanseparser/index.html
7http://disi.unitn.it/moschitti/
Tree-Kernel.htm
54
If we assume any word can be used metaphori-
cally, we ultimately want to label every word in a
sentence, so we also evaluate a sequential model, in
this case a CRF. We use CRFsuite (Okazaki, 2007)8
to implement the CRF, and run it with averaged
perceptron. While the CRF produces labels for
every word, we only evaluate on the words that
were annotated in our corpus (to make it maximally
comparable), and use the same representations
(lemma, POS and SST) of the word and its parent
as features as we did for the SVM. Training method
and feature selection were again tuned on the dev
set to maximize accuracy.
3 Experiments
system acc P R F1
BLall 0.49 0.49 1.0 0.66
BLmost freq. class 0.70 0.66 0.65 0.65
CRF 0.69? 0.74? 0.50 0.59
SVMvector?only 0.70? 0.63? 0.80 0.71
SVM+tree 0.75? 0.70? 0.80 0.75?
Table 1: Accuracy, precision, recall, and F1 for various
systems on the held-out test set. Values significantly bet-
ter than baseline at p < .02 are marked ? (two-tailed t-
test).
We compare the performance of two baselines,
the CRF model, vanilla SVM, and SVM with tree
kernels and report accuracy, precision, recall, and
F1 (Table 1).
The first baseline (BLall) labels every instance
as metaphor. Its accuracy and precision reflect the
metaphor ratio in the data, and it naturally achieves
perfect recall. This is a rather indiscriminate
approach and not very viable in practice, so we
also apply a more realistic baseline, labeling each
word with the class it received most often in the
training data (BLmost freq. class ). This is essentially
like assuming that every word has a default class.
Accuracy and precision for this baseline are much
better, although recall naturally suffers.
The CRF improves in terms of accuracy and
precision, but lacks the high recall the baseline
has, resulting in a lower F1-score. It does yield
8http://www.chokkan.org/software/
crfsuite/
the highest precision of all models, though. So
while not capturing every metaphor in the data, it is
usually correct if it does label a word as metaphor.
SVMlight allows us to evaluate the performance
of a classification using only the vector representa-
tion (SVMvector?only). This model achieves better
accuracy and recall than the CRF, but is less precise.
Accuracy is the same as for the most-frequent-
class baseline, indicating that the vector-based
SVM learns to associate a class with each lexical
item. Once we add the tree kernels to the vector
(SVM+tree), we see considerable gains in accuracy
and precision. This confirms our hypothesis that
metaphors are not only a lexical phenomenon, but
also a product of the context a word is used in. The
contextual interplay with their dependencies creates
patterns that can be exploited with tree kernels.
We note that the SVM with tree kernels is the only
system whose F1 significantly improves over the
baseline (at p < .02).
Testing with one tree representation at a time,
we found the various representations differ in terms
of informativeness. Lemma, POS, and supersense
performed better than lexemes or dependency labels
(when evaluated on the dev set) and were thus used
in the reported system. Combining more than one
representation in the same tree to form compound
leaves (e.g. lemma+POS, such as ?man-NN?)
performed worse in all combinations tested. We
omit further details here, since the combinatorics of
these tests are large and yield only little insight.
Overall, our results are similar to comparable
methods on balanced corpora, and we encourage
the evaluation of other methods on our data set.
4 Related Work
There is plenty of research into metaphors. While
many are mainly interested in their general proper-
ties (Shutova, 2010; Nayak, 2011), we focus on the
ones that evaluate their results empirically.
Gedigian et al (2006) use a similar approach
to identify metaphors, but focus on frames. Their
corpus is with about 900 instances relatively small.
They improve over the majority baseline, but only
report accuracy. Both their result and the baseline
are in the 90s, which might be due to the high
number of metaphors (about 90%). We use a larger,
55
more balanced data set. Since accuracy can be
uninformative in cases of unbalanced data sets, we
also report precision, recall, and F1.
Krishnakumaran and Zhu (2007) also use se-
mantic relations between syntactic dependencies
as basis for their classification. They do not aim to
distinguish literal and metaphorical use, but try to
differentiate various types of metaphors. They use a
corpus of about 1700 sentences containing different
metaphors, and report a precision of 0.70, recall of
0.61 (F1 = 0.65), and accuracy of 0.58.
Birke and Sarkar (2006) and Birke and Sarkar
(2007) present unsupervised and active learning
approaches to classifying metaphorical and literal
expressions, reporting F1 scores of 0.54 and 0.65,
outperforming baseline approaches. Unfortunately,
as they note themselves, their data set is ?not large
enough to [...] support learning using a supervised
learning method? (Birke and Sarkar, 2007, 22),
which prevents a direct comparison.
Similarly to our corpus construction, (Shutova et
al., 2010) use bootstrapping from a small seed set.
They use an unsupervised clustering approach to
identify metaphors and report a precision of 0.79,
beating the baseline system by a wide margin. Due
to the focus on corpus construction, they cannot
provide recall or F1. Their approach considers only
pairs of a single verbs and nouns, while we allow
for any syntactic combination.
Tree kernels have been applied to a wide va-
riety of NLP tasks (Culotta and Sorensen, 2004;
Moschitti et al, 2006; Qian et al, 2008; Hovy et
al., 2012). They are specifically adept in capturing
long-range syntactic relationships. In our case, we
use them to detect anomalies in syntactic relations.
5 Conclusion
Under the hypothesis that the metaphorical use of a
word creates unusual patterns with its dependencies,
we presented the first tree-kernel based approach
to metaphor identification. Syntactic dependencies
allow us to capture those patterns at different
levels of representations and identify metaphorical
use more reliably than non-kernel methods. We
outperform two baselines, a sequential model, and
purely vector-based SVM approaches, and reach an
F1 of 0.75. Our corpus is available for download
at http://www.edvisees.cs.cmu.edu/
metaphordata.tar.gz and we encourage the
research community to evaluate other methods on it.
Acknowledgements
The authors would like to thank the reviewers for
helping us clarify several points and giving con-
structive input that helped to improve the quality of
this paper. This work was (in part) supported by
the Intelligence Advanced Research Projects Activ-
ity (IARPA) via Department of Defense US Army
Research Laboratory contract number W911NF-12-
C-0025. The U.S. Government is authorized to re-
produce and distribute reprints for Governmental
purposes notwithstanding any copyright annotation
thereon. Disclaimer: The views and conclusions
contained herein are those of the authors and should
not be interpreted as necessarily representing the of-
ficial policies or endorsements, either expressed or
implied, of IARPA, DoD/ARL, or the U.S. Govern-
ment.
References
Eric P.S. Baumer, James P. White, and Bill Tomlinson.
2010. Comparing semantic role labeling with typed
dependency parsing in computational metaphor identi-
fication. In Proceedings of the NAACL HLT 2010 Sec-
ond Workshop on Computational Approaches to Lin-
guistic Creativity, pages 14?22. Association for Com-
putational Linguistics.
Julia Birke and Anoop Sarkar. 2006. A clustering ap-
proach for the nearly unsupervised recognition of non-
literal language. In Proceedings of EACL, volume 6,
pages 329?336.
Julia Birke and Anoop Sarkar. 2007. Active learning for
the identification of nonliteral language. In Proceed-
ings of the Workshop on Computational Approaches
to Figurative Language, pages 21?28. Association for
Computational Linguistics.
Ronan Collobert, Jason Weston, Le?on Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa. 2011.
Natural language processing (almost) from scratch.
Journal of Machine Learning Research, 12:2493?
2537.
Aron Culotta and Jeffrey Sorensen. 2004. Dependency
tree kernels for relation extraction. In Proceedings of
the 42nd Annual Meeting on Association for Compu-
tational Linguistics, page 423. Association for Com-
putational Linguistics.
56
Afsaneh Fazly, Paul Cook, and Suzanne Stevenson.
2009. Unsupervised type and token identification
of idiomatic expressions. Computational Linguistics,
35(1):61?103.
Christiane Fellbaum. 1998. WordNet: an electronic lexi-
cal database. MIT Press USA.
Matt Gedigian, John Bryant, Srini Narayanan, and Bran-
imir Ciric. 2006. Catching metaphors. In Proceedings
of the 3rd Workshop on Scalable Natural Language
Understanding, pages 41?48.
Claudio Giuliano, Alfio Massimiliano Gliozzo, and Carlo
Strapparava. 2009. Kernel methods for minimally su-
pervised wsd. Computational Linguistics, 35(4).
Dirk Hovy, James Fan, Alfio Gliozzo, Siddharth Patward-
han, and Christopher Welty. 2012. When Did that
Happen? ? Linking Events and Relations to Times-
tamps. In Proceedings of EACL.
Dirk Hovy, Taylor Berg-Kirkpatrick, Ashish Vaswani,
and Eduard Hovy. 2013. Learning Whom to trust with
MACE. In Proceedings of NAACL HLT.
Eric Iverson and Stephen Helmreich. 1991. Non-literal
word sense identification through semantic network
path schemata. In Proceedings of the 29th annual
meeting on Association for Computational Linguistics,
pages 343?344. Association for Computational Lin-
guistics.
Saishuresh Krishnakumaran and Xiaojian Zhu. 2007.
Hunting elusive metaphors using lexical resources. In
Proceedings of the Workshop on Computational ap-
proaches to Figurative Language, pages 13?20. Asso-
ciation for Computational Linguistics.
George Lakoff and Mark Johnson. 1980. Metaphors we
live by, volume 111. University of Chicago Press.
Zachary J. Mason. 2004. CorMet: a computational,
corpus-based conventional metaphor extraction sys-
tem. Computational Linguistics, 30(1):23?44.
Seyed A. Mirroshandel, Mahdy Khayyamian, and Gho-
lamreza Ghassem-Sani. 2011. Syntactic tree ker-
nels for event-time temporal relation learning. Human
Language Technology. Challenges for Computer Sci-
ence and Linguistics, pages 213?223.
Alessandro Moschitti, Daniele Pighin, and Roberto
Basili. 2006. Tree kernel engineering for proposition
re-ranking. MLG 2006, page 165.
Alessandro Moschitti. 2006. Making Tree Kernels Prac-
tical for Natural Language Learning. In In Proceed-
ings of the 11th Conference of the European Chapter
of the Association for Computational Linguistics.
Sushobhan Nayak. 2011. Towards a grounded model
for ontological metaphors. In Student Research Work-
shop, pages 115?120.
Naoaki Okazaki. 2007. CRFsuite: a fast implementation
of Conditional Random Fields (CRFs).
Longhua Qian, Guodong Zhou, Fang Kong, Qiaoming
Zhu, and Peide Qian. 2008. Exploiting constituent
dependencies for tree kernel-based semantic relation
extraction. In Proceedings of the 22nd International
Conference on Computational Linguistics-Volume 1,
pages 697?704. Association for Computational Lin-
guistics.
Ekaterina Shutova, Lin Sun, and Anna Korhonen. 2010.
Metaphor identification using verb and noun cluster-
ing. In Proceedings of the 23rd International Confer-
ence on Computational Linguistics, pages 1002?1010.
Association for Computational Linguistics.
Ekaterina Shutova. 2010. Models of metaphor in nlp. In
Proceedings of the 48th Annual Meeting of the Associ-
ation for Computational Linguistics, pages 688?697.
Association for Computational Linguistics.
Stephen Tratz and Eduard Hovy. 2011. A fast, accurate,
non-projective, semantically-enriched parser. In Pro-
ceedings of the Conference on Empirical Methods in
Natural Language Processing, pages 1257?1268. As-
sociation for Computational Linguistics.
Peter D. Turney, Yair Neuman, Dan Assaf, and Yohai
Cohen. 2011. Literal and metaphorical sense iden-
tification through concrete and abstract context. In
Proceedings of the 2011 Conference on the Empirical
Methods in Natural Language Processing, pages 680?
690.
57
Proceedings of the Workshop on Continuous Vector Space Models and their Compositionality, pages 20?29,
Sofia, Bulgaria, August 9 2013. c?2013 Association for Computational Linguistics
A Structured Distributional Semantic Model : Integrating Structure with
Semantics
Kartik Goyal? Sujay Kumar Jauhar? Huiying Li?
Mrinmaya Sachan? Shashank Srivastava? Eduard Hovy
Language Technologies Institute
School of Computer Science
Carnegie Mellon University
{kartikgo,sjauhar,huiyingl,mrinmays,shashans,hovy}@cs.cmu.edu
Abstract
In this paper we present a novel approach
(SDSM) that incorporates structure in dis-
tributional semantics. SDSM represents
meaning as relation specific distributions
over syntactic neighborhoods. We em-
pirically show that the model can effec-
tively represent the semantics of single
words and provides significant advantages
when dealing with phrasal units that in-
volve word composition. In particular, we
demonstrate that our model outperforms
both state-of-the-art window-based word
embeddings as well as simple approaches
for composing distributional semantic rep-
resentations on an artificial task of verb
sense disambiguation and a real-world ap-
plication of judging event coreference.
1 Introduction
With the advent of statistical methods for NLP,
Distributional Semantic Models (DSMs) have
emerged as powerful method for representing
word semantics. In particular, the distributional
vector formalism, which represents meaning by a
distribution over neighboring words, has gained
the most popularity.
DSMs are widely used in information re-
trieval (Manning et al, 2008), question answer-
ing (Tellex et al, 2003), semantic similarity com-
putation (Wong and Raghavan, 1984; McCarthy
and Carroll, 2003), automated dictionary building
(Curran, 2003), automated essay grading (Lan-
dauer and Dutnais, 1997), word-sense discrimina-
tion and disambiguation (McCarthy et al, 2004;
?*Equally contributing authors
Sch?tze, 1998), selectional preference model-
ing (Erk, 2007) and identification of translation
equivalents (Hjelm, 2007).
Systems that use DSMs implicitly make a bag
of words assumption: that the meaning of a phrase
can be reasonably estimated from the meaning of
its constituents. However, semantics in natural
language is a compositional phenomenon, encom-
passing interactions between syntactic structures,
and the meaning of lexical constituents. It fol-
lows that the DSM formalism lends itself poorly
to composition since it implicitly disregards syn-
tactic structure. For instance, the distributions for
?Lincoln?, ?Booth?, and ?killed? when merged
produce the same result regardless of whether the
input is ?Booth killed Lincoln? or ?Lincoln killed
Booth?. As suggested by Pantel and Lin (2000)
and others, modeling the distribution over prefer-
ential attachments for each syntactic relation sep-
arately can yield greater expressive power.
Attempts have been made to model linguistic
composition of individual word vectors (Mitchell
and Lapata, 2009), as well as remedy the inher-
ent failings of the standard distributional approach
(Erk and Pad?, 2008). The results show vary-
ing degrees of efficacy, but have largely failed to
model deeper lexical semantics or compositional
expectations of words and word combinations.
In this paper we propose an extension to the
traditional DSM model that explicitly preserves
structural information and permits the approxima-
tion of distributional expectation over dependency
relations. We extend the generic DSM model by
representing a word as distributions over relation-
specific syntactic neighborhoods. One can think
of the Structured DSM (SDSM) representation
of a word/phrase as several vectors defined over
the same vocabulary, each vector representing the
20
word?s selectional preferences for a different syn-
tactic argument. We argue that this represen-
tation captures individual word semantics effec-
tively, and is better able to express the semantics
of composed units.
The overarching theme of our framework of
evaluation is to explore the semantic space of the
SDSM. We do this by measuring its ability to dis-
criminate between varying surface forms of the
same underlying concept. We perform the follow-
ing set of experiments to evaluate its expressive
power, and conclude the following:
1. Experiments with single words on similar-
ity scoring and substitute selection: SDSM
performs at par with window-based distribu-
tional vectors.
2. Experiments with phrasal units on two-word
composition: state-of-the-art results are pro-
duced on the dataset from Mitchell and Lap-
ata (2008) in terms of correlation with human
judgment.
3. Experiments with larger structures on the
task of judging event coreferentiality: SDSM
shows superior performance over state-of-
the-art window-based word embeddings, and
simple models for composing distributional
semantic representations.
2 Related Work
Distributional Semantic Models are based on the
intuition that ?a word is characterized by the com-
pany it keeps? (Firth, 1957). While DSMs have
been very successful on a variety of NLP tasks,
they are generally considered inappropriate for
deeper semantics because they lack the ability to
model composition, modifiers or negation.
Recently, there has been a surge in studies to
model a stronger form of semantics by phrasing
the problem of DSM compositionality as one of
vector composition. These techniques derive the
meaning of the combination of two words a and
b by a single vector c = f(a, b). Mitchell and
Lapata (2008) propose a framework to define the
composition c = f(a, b, r,K) where r is the re-
lation between a and b, and K is the additional
knowledge used to define composition.
While the framework is quite general, most
models in the literature tend to disregard K and
r and are generally restricted to component-wise
addition and multiplication on the vectors to be
composed, with slight variations. Dinu and Lap-
ata (2010) and S?aghdha and Korhonen (2011) in-
troduced a probabilistic model to represent word
meanings by a latent variable model. Subse-
quently, other high-dimensional extensions by
Rudolph and Giesbrecht (2010), Baroni and Zam-
parelli (2010) and Grefenstette et al (2011), re-
gression models by Guevara (2010), and recursive
neural network based solutions by Socher et al
(2012) and Collobert et al (2011) have been pro-
posed.
Pantel and Lin (2000) and Erk and Pad? (2008)
attempted to include syntactic context in distri-
butional models. However, their approaches do
not explicitly construct phrase-level meaning from
words which limits their applicability to real world
problems. A quasi-compositional approach was
also attempted in Thater et al (2010) by a system-
atic combination of first and second order context
vectors. To the best of our knowledge the formu-
lation of composition we propose is the first to ac-
count for K and r within the general framework
of composition c = f(a, b, r,K).
3 Structured Distributional Semantics
In this section, we describe our Structured Distri-
butional Semantic framework in detail. We first
build a large knowledge base from sample english
texts and use it to represent basic lexical units.
Next, we describe a technique to obtain the repre-
sentation for larger units by composing their con-
stituents.
3.1 The PropStore
To build a lexicon of SDSM representations for
a given vocabulary we construct a proposition
knowledge base (the PropStore) by processing the
text of Simple English Wikipedia through a de-
pendency parser. Dependency arcs are stored as
3-tuples of the form ?w1, r, w2?, denoting occur-
rences of words w1 and word w2 related by the
syntactic dependency r. We also store sentence
identifiers for each triple for reasons described
later. In addition to the words? surface-forms, the
PropStore also stores their POS tags, lemmas, and
Wordnet supersenses.
The PropStore can be used to query for pre-
ferred expectations of words, supersenses, re-
lations, etc., around a given word. In the
example in Figure 1, the query (SST(W1)
21
Figure 1: Sample sentences & triples
= verb.consumption, ?, dobj) i.e., ?what is
consumed?, might return expectations [pasta:1,
spaghetti:1, mice:1 . . . ]. In our implementation,
the relations and POS tags are obtained using the
Fanseparser (Tratz and Hovy, 2011), supersense
tags using sst-light (Ciaramita and Altun, 2006),
and lemmas are obtained from Wordnet (Miller,
1995).
3.2 Building the Representation
Next, we describe a method to represent lexical
entries as structured distributional matrices using
the PropStore.
The canonical form of a concept C (word,
phrase etc.) in the SDSM framework is a matrix
MC , whose entry MCij is a list of sentence identi-
fiers obtained by querying the PropStore for con-
texts in which C appears in the syntactic neigh-
borhood of the word j linked by the dependency
relation i. As with other distributional models in
the literature, the content of a cell is the frequency
of co-occurrence of its concept and word under the
given relational constraint.
This canonical matrix form can be interpreted
in several different ways. Each interpretation is
based on a different normalization scheme.
1. Row Norm: Each row of the matrix is inter-
preted as a distribution over words that attach
to the target concept with the given depen-
dency relation.
MCij =
Mij
?jMij
?i
2. Full Norm: The entire matrix is interpreted
as a distribution over the word-relation pairs
which can attach to the target concept.
MCij =
Mij
?i,jMij
?i, j
Figure 2: Mimicking composition of two words
3. Collapsed Vector Norm: The columns of
the matrix are collapsed to form a standard
normalized distributional vector trained on
dependency relations rather than sliding win-
dows.
MCj =
?iMij
?i,jMij
?j
3.3 Mimicking Compositionality
For representing intermediate multi-word phrases,
we extend the above word-relation matrix sym-
bolism in a bottom-up fashion. The combina-
tion hinges on the intuition that when lexical units
combine to form a larger syntactically connected
phrase, the representation of the phrase is given
by its own distributional neighborhood within the
embedded parse tree. The distributional neighbor-
hood of the net phrase can be computed using the
PropStore given syntactic relations anchored on its
parts. For the example in Figure 1, we can com-
pose SST(w1) = Noun.person and Lemma(W1)
= eat with relation ?nsubj? to obtain expectations
around ?people eat? yielding [pasta:1, spaghetti:1
. . . ] for the object relation ([dining room:2, restau-
rant:1 . . .] for the location relation, etc.) (See Fig-
ure 2). Larger phrasal queries can be built to an-
swer questions like ?What do people in China eat
with??, ?What do cows do??, etc. All of this helps
22
us to account for both relation r and knowledgeK
obtained from the PropStore within the composi-
tional framework c = f(a, b, r,K).
The general outline to obtain a composition of
two words is given in Algorithm 1. Here, we
first determine the sentence indices where the two
words w1 and w2 occur with relation r. Then,
we return the expectations around the two words
within these sentences. Note that the entire algo-
rithm can conveniently be written in the form of
database queries to our PropStore.
Algorithm 1 ComposePair(w1, r, w2)
M1 ? queryMatrix(w1)
M2 ? queryMatrix(w2)
SentIDs?M1(r) ?M2(r)
return ((M1? SentIDs) ? (M2? SentIDs))
Similar to the two-word composition process,
given a parse subtree T of a phrase, we obtain
its matrix representation of empirical counts over
word-relation contexts. This procedure is de-
scribed in Algorithm 2. Let the E = {e1 . . . en}
be the set of edges in T , ei = (wi1, ri, wi2)?i =
1 . . . n.
Algorithm 2 ComposePhrase(T )
SentIDs? All Sentences in corpus
for i = 1? n do
Mi1 ? queryMatrix(wi1)
Mi2 ? queryMatrix(wi2)
SentIDs? SentIDs ?(M1(ri) ?M2(ri))
end for
return ((M11? SentIDs) ? (M12? SentIDs)
? ? ? ? (Mn1? SentIDs) ? (Mn2? SentIDs))
3.4 Tackling Sparsity
The SDSM model reflects syntactic properties of
language through preferential filler constraints.
But by distributing counts over a set of relations
the resultant SDSM representation is compara-
tively much sparser than the DSM representation
for the same word. In this section we present some
ways to address this problem.
3.4.1 Sparse Back-off
The first technique to tackle sparsity is to back
off to progressively more general levels of lin-
guistic granularity when sparse matrix represen-
tations for words or compositional units are en-
countered or when the word or unit is not in the
lexicon. For example, the composition ?Balthazar
eats? cannot be directly computed if the named en-
tity ?Balthazar? does not occur in the PropStore?s
knowledge base. In this case, a query for a su-
persense substitute ? ?Noun.person eat? ? can be
issued instead. When supersenses themselves fail
to provide numerically significant distributions for
words or word combinations, a second back-off
step involves querying for POS tags. With coarser
levels of linguistic representation, the expressive
power of the distributions becomes diluted. But
this is often necessary to handle rare words. Note
that this is an issue with DSMs too.
3.4.2 Densification
In addition to the back-off method, we also pro-
pose a secondary method for ?densifying? distri-
butions. A concept?s distribution is modified by
using words encountered in its syntactic neighbor-
hood to infer counts for other semantically similar
words. In other terms, given the matrix represen-
tation of a concept, densification seeks to popu-
late its null columns (which each represent a word-
dimension in the structured distributional context)
with values weighted by their scaled similarities to
words (or effectively word-dimensions) that actu-
ally occur in the syntactic neighborhood.
For example, suppose the word ?play? had an
?nsubj? preferential vector that contained the fol-
lowing counts: [cat:4 ; Jane:2]. One might then
populate the column for ?dog? in this vector with
a count proportional to its similarity to the word
cat (say 0.8), thus resulting in the vector [cat:4 ;
Jane:2 ; dog:3.2]. These counts could just as well
be probability values or PMI associations (suitably
normalized). In this manner, the k most similar
word-dimensions can be densified for each word
that actually occurs in a syntactic context. As with
sparse back-off, there is an inherent trade-off be-
tween the degree of densification k and the expres-
sive power of the resulting representation.
3.4.3 Dimensionality Reduction
The final method tackles the problem of sparsity
by reducing the representation to a dense low-
dimensional word embedding using singular value
decomposition (SVD). In a typical term-document
matrix, SVD finds a low-dimensional approxima-
tion of the original matrix where columns become
latent concepts while similarity structure between
rows are preserved. The PropStore, as described in
Section 3.1, is an order-3 tensor with w1, w2 and
23
rel as its three axes. We explore the following two
possibilities to perform dimensionality reduction
using SVD.
Word-word matrix SVD. In this experiment,
we preserve the axes w1 and w2 and ignore the re-
lational information. Following the SVD regime (
W = U?V T ) where ? is a square diagonal ma-
trix of k largest singular values, and U and V are
m? k and n? k matrices respectively. We adopt
matrixU as the compacted concept representation.
Tensor SVD. To remedy the relation-agnostic
nature of the word-word SVD matrix represen-
tation, we use tensor SVD (Vasilescu and Ter-
zopoulos, 2002) to preserve the structural infor-
mation. The mode-n vectors of an order-N tensor
A?RI1?I2?...?IN are the In-dimensional vectors
obtained from A by varying index in while keep-
ing other indices fixed. The matrix formed by all
the mode-n vectors is a mode-n flattening of the
tensor. To obtain the compact representations of
concepts we thus first apply mode w1 flattening
and then perform SVD on the resulting tensor.
4 Single Word Evaluation
In this section we describe experiments and re-
sults for judging the expressive power of the struc-
tured distributional representation for individual
words. We use a similarity scoring task and a lexi-
cal substitute selection task for the purpose of this
evaluation. We compare the SDSM representa-
tion to standard window-based distributional vec-
tors trained on the same corpus (Simple English
Wikipedia). We also experiment with different
normalization techniques outlined in Section 3.2,
which effectively lead to structured distributional
representations with distinct interpretations.
We experimented with various similarity met-
rics and found that the normalized cityblock dis-
tance metric provides the most stable results.
CityBlock(X,Y ) =
ArcTan(d(X,Y ))
d(X,Y )
d(X,Y ) =
1
|R|
?
r?R
d(Xr, Yr)
Results in the rest of this section are thus reported
using the normalized cityblock metric. We also
report experimental results for the two methods
of alleviating sparsity discussed in Section 3.4,
namely, densification and SVD.
4.1 Similarity Scoring
On this task, the different semantic representations
were used to compute similarity scores between
two (out of context) words. We used a dataset
from Finkelstein et al (2002) for our experiments.
It consists of 353 pairs of words along with an av-
eraged similarity score on a scale of 1.0 to 10.0
obtained from 13?16 human judges.
4.2 Lexical Substitute Selection
In the second task, the same set of semantic repre-
sentations was used to produce a similarity rank-
ing on the Turney (2002) ESL dataset. This dataset
comprises 50 words that appear in a context (we
discarded the context in this experiment), along
with 4 candidate lexical substitutions. We eval-
uate the semantic representations on the basis of
their ability to discriminate the top-ranked candi-
date.1
4.3 Results and Discussion
Table 1 summarizes the results for the window-
based baseline and each of the structured distri-
butional representations on both tasks. It shows
that our representations for single words are com-
petitive with window based distributional vectors.
Densification in certain conditions improves our
results, but no consistent pattern is discernible.
This can be attributed to the trade-off between the
gain from generalization and the noise introduced
by semantic drift.
Hence we resort to dimensionality reduction as
an additional method of reducing sparsity. Table
2 gives correlation scores on the Finkelstein et al
(2002) dataset when SVD is performed on the rep-
resentations, as described in Section 3.4.3. We
give results when 100 and 500 principal compo-
nents are preserved for both SVD techniques.
These experiments suggest that though afflicted
by sparsity, the proposed structured distributional
paradigm is competitive with window-based dis-
tributional vectors. In the following sections we
show that that the framework provides consid-
erably greater power for modeling composition
when dealing with units consisting of more than
one word.
1While we are aware of the standard lexical substitution
corpus from McCarthy and Navigli (2007) we chose the one
mentioned above for its basic vocabulary, lower dependence
on context, and simpler evaluation framework.
24
Model Finklestein (Corr.) ESL (% Acc.)
DSM 0.283 0.247
Collapsed 0.260 0.178
FullNorm 0.282 0.192
RowNorm 0.236 0.264
Densified RowNorm 0.259 0.267
Table 1: Single Word Evaluation
Model Correlation
matSVD100 0.207
matSVD500 0.221
tenSVD100 0.267
tenSVD500 0.315
Table 2: Finklestein: Correlation using SVD
5 Verb Sense Disambiguation using
Composition
In this section, we examine how well our model
performs composition on a pair of words. We
derive the compositional semantic representations
for word pairs from the M&L dataset (Mitchell
and Lapata, 2008) and compare our performance
with M&L?s additive and multiplicative models of
composition.
5.1 Dataset
The M&L dataset consists of polysemous intransi-
tive verb and subject pairs that co-occur at least 50
times in the BNC corpus. Additionally two land-
mark words are given for every polysemous verb,
each corresponding to one of its senses. The sub-
ject nouns provide contextual disambiguation for
the senses of the verb. For each [subject, verb,
landmark] tuple, a human assigned score on a 7-
point scale is provided, indicating the compatibil-
ity of the landmark with the reference verb-subj
pair. For example, for the pair ?gun bomb?, land-
mark ?thunder? is more similar to the verb than
landmark ?prosper?. The corpus contains 120 tu-
ples and altogether 3600 human judgments. Re-
liability of the human ratings is examined by cal-
culating inter-annotator Spearman?s ? correlation
coefficient.
5.2 Experiment procedure
For each tuple in the dataset, we derive the com-
posed word-pair matrix for the reference verb-subj
pair based on the algorithm described in Section
3.3 and query the single-word matrix for the land-
mark word. A few modifications are made to ad-
just the algorithm for the current task:
1. In our formulation, the dependency relation
needs to be specified in order to compose
a pair of words. Hence, we determine the
five most frequent relations between w1 and
w2 by querying the PropStore. We then use
the algorithm in Section 3.3 to compose the
verb-subj word pair using these relations, re-
sulting in five composed representations.
2. The word pairs in M&L corpus are ex-
tracted from a parsed version of the BNC cor-
pus, while our PropStore is built on Simple
Wikipedia texts, whose vocabulary is signif-
icantly different from that of the BNC cor-
pus. This causes null returns in our PropStore
queries, in which case we back-off to retriev-
ing results for super-sense tags of both the
words. Finally, the composed matrix and the
landmark matrix are compared against each
other by different matrix distance measures,
which results in a similarity score. For a [sub-
ject, verb, landmark] tuple, we average the
similarity scores yielded by the relations ob-
tained in 1.
The Spearman Correlation ? between our sim-
ilarity ratings and the ones assigned by human
judges is computed over all the tuples. Follow-
ing M&L?s experiments, the inter-annotator agree-
ment correlation coefficient serves an upper bound
on the task.
5.3 Results and Discussion
As in Section 4, we choose the cityblock mea-
sure as the similarity metric of choice. Table 3
shows the evaluation results for two word compo-
sition. Except for row normalization, both forms
of normalization in the structured distributional
paradigm show significant improvement over the
results reported by M&L. The results are statisti-
cally significant at p-value = 0.004 and 0.001 for
Full Norm and Collapsed Vector Norm, respec-
tively.
Model ?
M&L combined 0.19
Row Norm 0.134
Full Norm 0.289
Collapsed Vector Norm 0.259
UpperBound 0.40
Table 3: Two Word Composition Evaluation
These results validate our hypothesis that the in-
tegration of structure into distributional semantics
25
as well as our framing of word composition to-
gether outperform window-based representations
under simplistic models of composition such as
addition and multiplication. This finding is further
re-enforced in the following experiments on event
coreferentiality judgment.
6 Event Coreference Judgment
Given the SDSM formulation and assuming no
sparsity constraints, it is possible to calculate
SDSM matrices for composed concepts. However,
are these correct? Intuitively, if they truly capture
semantics, the two SDSM matrix representations
for ?Booth assassinated Lincoln? and ?Booth shot
Lincoln with a gun" should be (almost) the same.
To test this hypothesis we turn to the task of pre-
dicting whether two event mentions are coreferent
or not, even if their surface forms differ.
While automated resolution of entity coref-
erence has been an actively researched area
(Haghighi and Klein, 2009; Stoyanov et al, 2009;
Raghunathan et al, 2010), there has been rela-
tively little work on event coreference resolution.
Lee et al (2012) perform joint cross-document
entity and event coreference resolution using the
two-way feedback between events and their argu-
ments.
In this paper, however, we only consider coref-
erentiality between pairs of events. Formally,
two event mentions generally refer to the same
event when their respective actions, agents, pa-
tients, locations, and times are (almost) the same.
Given the non-compositional nature of determin-
ing equality of locations and times, we represent
each event mention by a triple E = (e, a, p) for
the event, agent, and patient.
While linguistic theory of argument realiza-
tion is a debated research area (Levin and Rap-
paport Hovav, 2005; Goldberg, 2005), it is com-
monly believed that event structure (Moens and
Steedman, 1988) centralizes on the predicate,
which governs and selects its role arguments
(Jackendoff, 1987). In the corpora we use for
our experiments, most event mentions are verbs.
However, when nominalized events are encoun-
tered, we replace them by their verbal forms. We
use SRL Collobert et al (2011) to determine the
agent and patient arguments of an event mention.
When SRL fails to determine either role, its empir-
ical substitutes are obtained by querying the Prop-
Store for the most likely word expectations for the
role. The triple (e, a, p) is thus the composition
of the triples (a, relagent, e) and (p, relpatient, e),
and hence a complex object. To determine equal-
ity of this complex composed representation we
generate three levels of progressively simplified
event constituents for comparison:
Level 1: Full Composition:
Mfull = ComposePhrase(e, a, p).
Level 2: Partial Composition:
Mpart:EA = ComposePair(e, r, a)
Mpart:EP = ComposePair(e, r, p).
Level 3: No Composition:
ME = queryMatrix(e)
MA = queryMatrix(a)
MP = queryMatrix(p).
To judge coreference between
events E1 and E2, we compute pair-
wise similarities Sim(M1full,M2full),
Sim(M1part:EA,M2part:EA), etc., for each
level of the composed triple representation. Fur-
thermore, we vary the computation of similarity
by considering different levels of granularity
(lemma, SST), various choices of distance metric
(Euclidean, Cityblock, Cosine), and score nor-
malization techniques (Row-wise, Full, Column
collapsed). This results in 159 similarity-based
features for every pair of events, which are used
to train a classifier to make a binary decision for
coreferentiality.
6.1 Datasets
We evaluate our method on two datasets and com-
pare it against four baselines, two of which use
window based distributional vectors and two that
employ weaker forms of composition.
IC Event Coreference Corpus: The dataset
(citation suppressed), drawn from 100 news arti-
cles about violent events, contains manually cre-
ated annotations for 2214 pairs of co-referent
and non-coreferent events each. Where available,
events? semantic role-fillers for agent and patient
are annotated as well. When missing, empirical
substitutes were obtained by querying the Prop-
Store for the preferred word attachments.
EventCorefBank (ECB) corpus: This corpus
(Bejan and Harabagiu, 2010) of 482 documents
from Google News is clustered into 45 topics,
with event coreference chains annotated over each
topic. The event mentions are enriched with se-
mantic roles to obtain the canonical event struc-
ture described above. Positive instances are ob-
26
IC Corpus ECB Corpus
Prec Rec F-1 Acc Prec Rec F-1 Acc
SDSM 0.916 0.929 0.922 0.906 0.901 0.401 0.564 0.843
Senna 0.850 0.881 0.865 0.835 0.616 0.408 0.505 0.791
DSM 0.743 0.843 0.790 0.740 0.854 0.378 0.524 0.830
MVC 0.756 0.961 0.846 0.787 0.914 0.353 0.510 0.831
AVC 0.753 0.941 0.837 0.777 0.901 0.373 0.528 0.834
Table 4: Cross-validation Performance on IC and ECB dataset
tained by taking pairwise event mentions within
each chain, and negative instances are generated
from pairwise event mentions across chains, but
within the same topic. This results in 11039 posi-
tive instances and 33459 negative instances.
6.2 Baselines:
To establish the efficacy of our model, we com-
pare SDSM against a purely window-based base-
line (DSM) trained on the same corpus. In our ex-
periments we set a window size of three words to
either side of the target. We also compare SDSM
against the window-based embeddings trained us-
ing a recursive neural network (SENNA) (Col-
lobert et al, 2011) on both datsets. SENNA em-
beddings are state-of-the-art for many NLP tasks.
The second baseline uses SENNA to generate
level 3 similarity features for events? individual
words (agent, patient and action). As our final
set of baselines, we extend two simple techniques
proposed by Mitchell and Lapata (2008) that use
element-wise addition and multiplication opera-
tors to perform composition. The two baselines
thus obtained are AVC (element-wise addition)
and MVC (element-wise multiplication).
6.3 Results and Discussion:
We experimented with a number of common clas-
sifiers, and selected decision-trees (J48) as they
give the best classification accuracy. Table 4 sum-
marizes our results on both datasets.
The results reveal that the SDSM model con-
sistently outperforms DSM, SENNA embeddings,
and the MVC and AVC models, both in terms
of F-1 score and accuracy. The IC corpus com-
prises of domain specific texts, resulting in high
lexical overlap between event mentions. Hence,
the scores on the IC corpus are consistently higher
than those on the ECB corpus.
The improvements over DSM and SENNA em-
beddings, support our hypothesis that syntax lends
greater expressive power to distributional seman-
tics in compositional configurations. Furthermore,
the increase in predictive accuracy over MVC and
AVC shows that our formulation of composition
of two words based on the relation binding them
yields a stronger form of composition than simple
additive and multiplicative models.
Next, we perform an ablation study to deter-
mine the most predictive features for the task of
determining event coreferentiality. The forward
selection procedure reveals that the most informa-
tive attributes are the level 2 compositional fea-
tures involving the agent and the action, as well as
their individual level 3 features. This corresponds
to the intuition that the agent and the action are the
principal determiners for identifying events. Fea-
tures involving the patient and level 1 features are
least useful. The latter involves full composition,
resulting in sparse representations and hence have
low predictive power.
7 Conclusion and Future Work
In this paper we outlined an approach that intro-
duces structure into distributional semantics. We
presented a method to compose distributional rep-
resentations of individual units into larger com-
posed structures. We tested the efficacy of our
model on several evaluation tasks. Our model?s
performance is competitive for tasks dealing with
semantic similarity of individual words, even
though it suffers from the problem of sparsity.
Additionally, it outperforms window-based ap-
proaches on tasks involving semantic composi-
tion. In future work we hope to extend this for-
malism to other semantic tasks like paraphrase de-
tection and recognizing textual entailment.
Acknowledgments
The authors would like to thank the anonymous re-
viewers for their valuable comments and sugges-
tions to improve the quality of the paper. This
work was supported in part by the following
grants: NSF grant IIS-1143703, NSF award IIS-
1147810, DARPA grant FA87501220342.
27
References
Marco Baroni and Roberto Zamparelli. 2010. Nouns
are vectors, adjectives are matrices: representing
adjective-noun constructions in semantic space. In
Proceedings of the 2010 Conference on Empirical
Methods in Natural Language Processing, EMNLP
?10, pages 1183?1193, Stroudsburg, PA, USA. As-
sociation for Computational Linguistics.
Cosmin Adrian Bejan and Sanda Harabagiu. 2010.
Unsupervised event coreference resolution with rich
linguistic features. In Proceedings of the 48th An-
nual Meeting of the Association for Computational
Linguistics, ACL ?10, pages 1412?1422, Strouds-
burg, PA, USA. Association for Computational Lin-
guistics.
Massimiliano Ciaramita and Yasemin Altun. 2006.
Broad-coverage sense disambiguation and informa-
tion extraction with a supersense sequence tagger.
In Proceedings of the 2006 Conference on Empirical
Methods in Natural Language Processing, EMNLP
?06, pages 594?602, Stroudsburg, PA, USA. Associ-
ation for Computational Linguistics.
Ronan Collobert, Jason Weston, L?on Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. J. Mach. Learn. Res., 999888:2493?2537,
November.
James Richard Curran. 2003. From distributional to
semantic similarity. Technical report.
Georgiana Dinu and Mirella Lapata. 2010. Measuring
distributional similarity in context. In Proceedings
of the 2010 Conference on Empirical Methods in
Natural Language Processing, EMNLP ?10, pages
1162?1172, Stroudsburg, PA, USA. Association for
Computational Linguistics.
Katrin Erk and Sebastian Pad?. 2008. A structured
vector space model for word meaning in context. In
Proceedings of the Conference on Empirical Meth-
ods in Natural Language Processing, EMNLP ?08,
pages 897?906, Stroudsburg, PA, USA. Association
for Computational Linguistics.
Katrin Erk. 2007. A simple, similarity-based model
for selectional preferences.
Lev Finkelstein, Evgeniy Gabrilovich, Yossi Matias,
Ehud Rivlin, Zach Solan, Gadi Wolfman, and Eytan
Ruppin. 2002. Placing search in context: The con-
cept revisited. In ACM Transactions on Information
Systems, volume 20, pages 116?131, January.
John R. Firth. 1957. A Synopsis of Linguistic Theory,
1930-1955. Studies in Linguistic Analysis, pages 1?
32.
Adele E. Goldberg. 2005. Argument Realization: Cog-
nitive Grouping and Theoretical Extensions.
Edward Grefenstette, Mehrnoosh Sadrzadeh, Stephen
Clark, Bob Coecke, and Stephen Pulman. 2011.
Concrete sentence spaces for compositional distri-
butional models of meaning. In Proceedings of the
Ninth International Conference on Computational
Semantics, IWCS ?11, pages 125?134, Stroudsburg,
PA, USA. Association for Computational Linguis-
tics.
Emiliano Guevara. 2010. A regression model of
adjective-noun compositionality in distributional se-
mantics. In Proceedings of the 2010 Workshop on
GEometrical Models of Natural Language Seman-
tics, GEMS ?10, pages 33?37, Stroudsburg, PA,
USA. Association for Computational Linguistics.
Aria Haghighi and Dan Klein. 2009. Simple coref-
erence resolution with rich syntactic and semantic
features. In Proceedings of the 2009 Conference on
Empirical Methods in Natural Language Process-
ing: Volume 3 - Volume 3, EMNLP ?09, pages 1152?
1161, Stroudsburg, PA, USA. Association for Com-
putational Linguistics.
Hans Hjelm. 2007. Identifying cross language term
equivalents using statistical machine translation and
distributional association measures. In Proceedings
of NODALIDA, pages 97?104. Citeseer.
Ray Jackendoff. 1987. The status of thematic roles in
linguistic theory. Linguistic Inquiry, 18(3):369?411.
Thomas K Landauer and Susan T. Dutnais. 1997.
A solution to plato?s problem: The latent semantic
analysis theory of acquisition, induction, and rep-
resentation of knowledge. Psychological review,
pages 211?240.
Heeyoung Lee, Marta Recasens, Angel Chang, Mihai
Surdeanu, and Dan Jurafsky. 2012. Joint entity
and event coreference resolution across documents.
In Proceedings of the 2012 Joint Conference on
Empirical Methods in Natural Language Process-
ing and Computational Natural Language Learning,
EMNLP-CoNLL ?12, pages 489?500, Stroudsburg,
PA, USA. Association for Computational Linguis-
tics.
Beth Levin and Malka Rappaport Hovav. 2005. Argu-
ment Realization. Cambridge University Press.
Christopher D. Manning, Prabhakar Raghavan, and
Hinrich Sch?tze. 2008. Introduction to Information
Retrieval. Cambridge University Press, New York,
NY, USA.
Diana McCarthy and John Carroll. 2003. Disam-
biguating nouns, verbs, and adjectives using auto-
matically acquired selectional preferences. Comput.
Linguist., 29(4):639?654, December.
Diana McCarthy and Roberto Navigli. 2007. Semeval-
2007 task 10: English lexical substitution task.
In Proceedings of the 4th International Workshop
on Semantic Evaluations (SemEval-2007), Prague,
Czech Republic, pages 48?53.
28
Diana McCarthy, Rob Koeling, Julie Weeds, and John
Carroll. 2004. Finding predominant word senses in
untagged text. In Proceedings of the 42nd Annual
Meeting on Association for Computational Linguis-
tics, ACL ?04, Stroudsburg, PA, USA. Association
for Computational Linguistics.
George A. Miller. 1995. Wordnet: a lexical database
for english. Commun. ACM, 38(11):39?41, Novem-
ber.
Jeff Mitchell and Mirella Lapata. 2008. Vector-based
models of semantic composition. In In Proceedings
of ACL-08: HLT, pages 236?244.
Jeff Mitchell and Mirella Lapata. 2009. Language
models based on semantic composition. In Proceed-
ings of the 2009 Conference on Empirical Methods
in Natural Language Processing: Volume 1 - Volume
1, EMNLP ?09, pages 430?439, Stroudsburg, PA,
USA. Association for Computational Linguistics.
Marc Moens and Mark Steedman. 1988. Temporal on-
tology and temporal reference. Computational lin-
guistics, 14(2):15?28.
Patrick Pantel and Dekang Lin. 2000. Word-for-word
glossing with contextually similar words. In Pro-
ceedings of the 1st North American chapter of the
Association for Computational Linguistics confer-
ence, NAACL 2000, pages 78?85, Stroudsburg, PA,
USA. Association for Computational Linguistics.
Karthik Raghunathan, Heeyoung Lee, Sudarshan Ran-
garajan, Nathanael Chambers, Mihai Surdeanu, Dan
Jurafsky, and Christopher Manning. 2010. A multi-
pass sieve for coreference resolution. In Proceed-
ings of the 2010 Conference on Empirical Meth-
ods in Natural Language Processing, EMNLP ?10,
pages 492?501, Stroudsburg, PA, USA. Association
for Computational Linguistics.
Sebastian Rudolph and Eugenie Giesbrecht. 2010.
Compositional matrix-space models of language. In
Proceedings of the 48th Annual Meeting of the As-
sociation for Computational Linguistics, ACL ?10,
pages 907?916, Stroudsburg, PA, USA. Association
for Computational Linguistics.
Hinrich Sch?tze. 1998. Automatic word sense dis-
crimination. Comput. Linguist., 24(1):97?123.
Diarmuid ? S?aghdha and Anna Korhonen. 2011.
Probabilistic models of similarity in syntactic con-
text. In Proceedings of the Conference on Empirical
Methods in Natural Language Processing, EMNLP
?11, pages 1047?1057, Stroudsburg, PA, USA. As-
sociation for Computational Linguistics.
Richard Socher, Brody Huval, Christopher D. Man-
ning, and Andrew Y. Ng. 2012. Semantic com-
positionality through recursive matrix-vector spaces.
In Proceedings of the 2012 Joint Conference on
Empirical Methods in Natural Language Process-
ing and Computational Natural Language Learning,
EMNLP-CoNLL ?12, pages 1201?1211, Strouds-
burg, PA, USA. Association for Computational Lin-
guistics.
Veselin Stoyanov, Nathan Gilbert, Claire Cardie, and
Ellen Riloff. 2009. Conundrums in noun phrase
coreference resolution: making sense of the state-
of-the-art. In Proceedings of the Joint Conference of
the 47th Annual Meeting of the ACL and the 4th In-
ternational Joint Conference on Natural Language
Processing of the AFNLP: Volume 2 - Volume 2,
ACL ?09, pages 656?664, Stroudsburg, PA, USA.
Association for Computational Linguistics.
Stefanie Tellex, Boris Katz, Jimmy J. Lin, Aaron Fer-
nandes, and Gregory Marton. 2003. Quantitative
evaluation of passage retrieval algorithms for ques-
tion answering. In SIGIR, pages 41?47.
Stefan Thater, Hagen F?rstenau, and Manfred Pinkal.
2010. Contextualizing semantic representations us-
ing syntactically enriched vector models. In Pro-
ceedings of the 48th Annual Meeting of the Associa-
tion for Computational Linguistics, ACL ?10, pages
948?957, Stroudsburg, PA, USA. Association for
Computational Linguistics.
Stephen Tratz and Eduard Hovy. 2011. A fast, ac-
curate, non-projective, semantically-enriched parser.
In Proceedings of the Conference on Empirical
Methods in Natural Language Processing, EMNLP
?11, pages 1257?1268, Stroudsburg, PA, USA. As-
sociation for Computational Linguistics.
Peter D. Turney. 2002. Mining the web for synonyms:
Pmi-ir versus lsa on toefl. CoRR.
M. Alex O. Vasilescu and Demetri Terzopoulos. 2002.
Multilinear analysis of image ensembles: Tensor-
faces. In In Proceedings of the European Confer-
ence on Computer Vision, pages 447?460.
S. K. M. Wong and Vijay V. Raghavan. 1984. Vector
space model of information retrieval: a reevaluation.
In Proceedings of the 7th annual international ACM
SIGIR conference on Research and development in
information retrieval, SIGIR ?84, pages 167?185,
Swinton, UK. British Computer Society.
29
