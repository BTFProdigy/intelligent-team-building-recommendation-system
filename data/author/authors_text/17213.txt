Second Joint Conference on Lexical and Computational Semantics (*SEM), Volume 1: Proceedings of the Main Conference
and the Shared Task, pages 66?73, Atlanta, Georgia, June 13-14, 2013. c?2013 Association for Computational Linguistics
NTNU-CORE: Combining strong features for semantic similarity
Erwin Marsi, Hans Moen, Lars Bungum, Gleb Sizov, Bjo?rn Gamba?ck, Andre? Lynum
Norwegian University of Science and Technology
Department of Computer and Information and Science
Sem S?lands vei 7-9
NO-7491 Trondheim, Norway
{emarsi,hansmoe,bungum,sizov,gamback,andrely}@idi.ntnu.no
Abstract
The paper outlines the work carried out at
NTNU as part of the *SEM?13 shared task
on Semantic Textual Similarity, using an ap-
proach which combines shallow textual, dis-
tributional and knowledge-based features by
a support vector regression model. Feature
sets include (1) aggregated similarity based
on named entity recognition with WordNet
and Levenshtein distance through the calcula-
tion of maximum weighted bipartite graphs;
(2) higher order word co-occurrence simi-
larity using a novel method called ?Multi-
sense Random Indexing?; (3) deeper seman-
tic relations based on the RelEx semantic
dependency relationship extraction system;
(4) graph edit-distance on dependency trees;
(5) reused features of the TakeLab and DKPro
systems from the STS?12 shared task. The
NTNU systems obtained 9th place overall (5th
best team) and 1st place on the SMT data set.
1 Introduction
Intuitively, two texts are semantically similar if they
roughly mean the same thing. The task of formally
establishing semantic textual similarity clearly is
more complex. For a start, it implies that we have
a way to formally represent the intended meaning of
all texts in all possible contexts, and furthermore a
way to measure the degree of equivalence between
two such representations. This goes far beyond the
state-of-the-art for arbitrary sentence pairs, and sev-
eral restrictions must be imposed. The Semantic
Textual Similarity (STS) task (Agirre et al, 2012,
2013) limits the comparison to isolated sentences
only (rather than complete texts), and defines sim-
ilarity of a pair of sentences as the one assigned by
human judges on a 0?5 scale (with 0 implying no
relation and 5 complete semantic equivalence). It is
unclear, however, to what extent two judges would
agree on the level of similarity between sentences;
Agirre et al (2012) report figures on the agreement
between the authors themselves of about 87?89%.
As in most language processing tasks, there are
two overall ways to measure sentence similarity, ei-
ther by data-driven (distributional) methods or by
knowledge-driven methods; in the STS?12 task the
two approaches were used nearly equally much.
Distributional models normally measure similarity
in terms of word or word co-occurrence statistics, or
through concept relations extracted from a corpus.
The basic strategy taken by NTNU in the STS?13
task was to use something of a ?feature carpet bomb-
ing approach? in the way of first automatically ex-
tracting as many potentially useful features as possi-
ble, using both knowledge and data-driven methods,
and then evaluating feature combinations on the data
sets provided by the organisers of the shared task.
To this end, four different types of features were
extracted. The first (Section 2) aggregates similar-
ity based on named entity recognition with WordNet
and Levenshtein distance by calculating maximum
weighted bipartite graphs. The second set of features
(Section 3) models higher order co-occurrence sim-
ilarity relations using Random Indexing (Kanerva
et al, 2000), both in the form of a (standard) sliding
window approach and through a novel method called
?Multi-sense Random Indexing? which aims to sep-
arate the representation of different senses of a term
66
from each other. The third feature set (Section 4)
aims to capture deeper semantic relations using ei-
ther the output of the RelEx semantic dependency
relationship extraction system (Fundel et al, 2007)
or an in-house graph edit-distance matching system.
The final set (Section 5) is a straight-forward gath-
ering of features from the systems that fared best in
STS?12: TakeLab from University of Zagreb (S?aric?
et al, 2012) and DKPro from Darmstadt?s Ubiqui-
tous Knowledge Processing Lab (Ba?r et al, 2012).
As described in Section 6, Support Vector Regres-
sion (Vapnik et al, 1997) was used for solving the
multi-dimensional regression problem of combining
all the extracted feature values. Three different sys-
tems were created based on feature performance on
the supplied development data. Section 7 discusses
scores on the STS?12 and STS?13 test data.
2 Compositional Word Matching
Compositional word matching similarity is based
on a one-to-one alignment of words from the two
sentences. The alignment is obtained by maximal
weighted bipartite matching using several word sim-
ilarity measures. In addition, we utilise named entity
recognition and matching tools. In general, the ap-
proach is similar to the one described by Karnick
et al (2012), with a different set of tools used. Our
implementation relies on the ANNIE components in
GATE (Cunningham et al, 2002) and will thus be
referred to as GateWordMatch.
The processing pipeline for GateWordMatch
is: (1) tokenization by ANNIE English Tokeniser,
(2) part-of-speech tagging by ANNIE POS Tagger,
(3) lemmatization by GATE Morphological Anal-
yser, (4) stopword removal, (5) named entity recog-
nition based on lists by ANNIE Gazetteer, (6) named
entity recognition based on the JAPE grammar by
the ANNIE NE Transducer, (7) matching of named
entities by ANNIE Ortho Matcher, (8) computing
WordNet and Levenstein similarity between words,
(9) calculation of a maximum weighted bipartite
graph matching based on similarities from 7 and 8.
Steps 1?4 are standard preprocessing routines.
In step 5, named entities are recognised based on
lists that contain locations, organisations, compa-
nies, newspapers, and person names, as well as date,
time and currency units. In step 6, JAPE grammar
rules are applied to recognise entities such as ad-
dresses, emails, dates, job titles, and person names
based on basic syntactic and morphological features.
Matching of named entities in step 7 is based on
matching rules that check the type of named entity,
and lists with aliases to identify entities as ?US?,
?United State?, and ?USA? as the same entity.
In step 8, similarity is computed for each pair
of words from the two sentences. Words that are
matched as entities in step 7 get a similarity value
of 1.0. For the rest of the entities and non-entity
words we use LCH (Leacock and Chodorow, 1998)
similarity, which is based on a shortest path between
the corresponding senses in WordNet. Since word
sense disambiguation is not used, we take the simi-
larity between the nearest senses of two words. For
cases when the WordNet-based similarity cannot be
obtained, a similarity based on the Levenshtein dis-
tance (Levenshtein, 1966) is used instead. It is nor-
malised by the length of the longest word in the pair.
For the STS?13 test data set, named entity matching
contributed to 4% of all matched word pairs; LCH
similarity to 61%, and Levenshtein distance to 35%.
In step 9, maximum weighted bipartite matching
is computed using the Hungarian Algorithm (Kuhn,
1955). Nodes in the bipartite graph represent words
from the sentences, and edges have weights that cor-
respond to similarities between tokens obtained in
step 8. Weighted bipartite matching finds the one-to-
one alignment that maximizes the sum of similarities
between aligned tokens. Total similarity normalised
by the number of words in both sentences is used as
the final sentence similarity measure.
3 Distributional Similarity
Our distributional similarity features use Random
Indexing (RI; Kanerva et al, 2000; Sahlgren, 2005),
also employed in STS?12 by Tovar et al (2012);
Sokolov (2012); Semeraro et al (2012). It is an
efficient method for modelling higher order co-
occurrence similarities among terms, comparable to
Latent Semantic Analysis (LSA; Deerwester et al,
1990). It incrementally builds a term co-occurrence
matrix of reduced dimensionality through the use of
a sliding window and fixed size index vectors used
for training context vectors, one per unique term.
A novel variant, which we have called ?Multi-
67
sense Random Indexing? (MSRI), inspired by
Reisinger and Mooney (2010), attempts to capture
one or more ?senses? per unique term in an unsu-
pervised manner, each sense represented as an indi-
vidual vector in the model. The method is similar to
classical sliding window RI, but each term can have
multiple context vectors (referred to as ?sense vec-
tors? here) which are updated individually. When
updating a term vector, instead of directly adding the
index vectors of the neighbouring terms in the win-
dow to its context vector, the system first computes a
separate window vector consisting of the sum of the
index vectors. Then cosine similarity is calculated
between the window vector and each of the term?s
sense vectors. Each similarity score is in turn com-
pared to a set similarity threshold: if no score ex-
ceeds the threshold, the sentence vector is added as
a new separate sense vector for the term; if exactly
one score is above the threshold, the window vector
is added to that sense vector; and if multiple scores
are above the threshold, all the involved senses are
merged into one sense vector, together with the win-
dow vector. This accomplishes an incremental clus-
tering of senses in an unsupervised manner while re-
taining the efficiency of classical RI.
As data for training the models we used the
CLEF 2004?2008 English corpus (approx. 130M
words). Our implementation of RI and MSRI is
based on JavaSDM (Hassel, 2004). For classical
RI, we used stopword removal (using a customised
versions of the English stoplist from the Lucene
project), window size of 4+4, dimensionality set to
1800, 4 non-zeros, and unweighted index vector in
the sliding window. For MSRI, we used a simi-
larity threshold of 0.2, a vector dimensionality of
800, a non-zero count of 4, and window size of
5+5. The index vectors in the sliding window were
shifted to create direction vectors (Sahlgren et al,
2008), and weighted by distance to the target term.
Rare senses with a frequency below 10 were ex-
cluded. Other sliding-window schemes, including
unweighted non-shifted vectors and Random Permu-
tation (Sahlgren et al, 2008), were tested, but none
outperformed the sliding-window schemes used.
Similarity between sentence pairs was calcu-
lated as the normalised maximal bipartite similar-
ity between term pairs in each sentence, resulting
in the following features: (1) MSRI-Centroid:
each term is represented as the sum of its sense
vectors; (2) MSRI-MaxSense: for each term
pair, the sense-pair with max similarity is used;
(3) MSRI-Context: for each term, its neigh-
bouring terms within a window of 2+2 is used as
context for picking a single, max similar, sense
from the target term to be used as its represen-
tation; (4) MSRI-HASenses: similarity between
two terms is computed by applying the Hungarian
Algorithm to all their possible sense pair mappings;
(5) RI-Avg: classical RI, each term is represented
as a single context vector; (6) RI-Hungarian:
similarity between two sentences is calculated us-
ing the Hungarian Algorithm. Alternatively, sen-
tence level similarity was computed as the cosine
similarity between sentence vectors composed of
their terms? vectors. The corresponding features
are (1) RI-SentVectors-Norm: sentence vec-
tors are created by summing their constituent terms
(i.e., context vectors), which have first been normal-
ized; (2) RI-SentVectors-TFIDF: same as be-
fore, but TF*IDF weights are added.
4 Deeper Semantic Relations
Two deep strategies were employed to accompany
the shallow-processed feature sets. Two existing
systems were used to provide the basis for these fea-
tures, namely the RelEx system (Fundel et al, 2007)
from the OpenCog initiative (Hart and Goertzel,
2008), and an in-house graph-edit distance system
developed for plagiarism detection (R?kenes, 2013).
RelEx outputs syntactic trees, dependency graphs,
and semantic frames as this one for the sentence
?Indian air force to buy 126 Rafale fighter jets?:
Commerce buy:Goods(buy,jet)
Entity:Entity(jet,jet)
Entity:Name(jet,Rafale)
Entity:Name(jet,fighter)
Possibilities:Event(hyp,buy)
Request:Addressee(air,you)
Request:Message(air,air)
Transitive action:Beneficiary(buy,jet)
Three features were extracted from this: first, if
there was an exact match of the frame found in s1
with s2; second, if there was a partial match until the
first argument (Commerce buy:Goods(buy);
and third if there was a match of the frame category
68
(Commerce buy:Goods).
In STS?12, Singh et al (2012) matched Universal
Networking Language (UNL) graphs against each
other by counting matches of relations and univer-
sal words, while Bhagwani et al (2012) calculated
WordNet-based word-level similarities and created
a weighted bipartite graph (see Section 2). The
method employed here instead looked at the graph
edit distance between dependency graphs obtained
with the Maltparser dependency parser (Nivre et al,
2006). Edit distance is the defined as the minimum
of the sum of the costs of the edit operations (in-
sertion, deletion and substitution of nodes) required
to transform one graph into the other. It is approx-
imated with a fast but suboptimal algorithm based
on bipartite graph matching through the Hungarian
algorithm (Riesen and Bunke, 2009).
5 Reused Features
The TakeLab ?simple? system (S?aric? et al, 2012) ob-
tained 3rd place in overall Pearson correlation and
1st for normalized Pearson in STS?12. The source
code1 was used to generate all its features, that is,
n-gram overlap, WordNet-augmented word overlap,
vector space sentence similarity, normalized differ-
ence, shallow NE similarity, numbers overlap, and
stock index features.2 This required the full LSA
vector space models, which were kindly provided
by the TakeLab team. The word counts required for
computing Information Content were obtained from
Google Books Ngrams.3
The DKPro system (Ba?r et al, 2012) obtained first
place in STS?12 with the second run. We used the
source code4 to generate features for the STS?12
and STS?13 data. Of the string-similarity features,
we reused the Longest Common Substring, Longest
Common Subsequence (with and without normaliza-
tion), and Greedy String Tiling measures. From the
character/word n-grams features, we used Charac-
ter n-grams (n = 2, 3, 4), Word n-grams by Con-
tainment w/o Stopwords (n = 1, 2), Word n-grams
1http://takelab.fer.hr/sts/
2We did not use content n-gram overlap or skip n-grams.
3http://storage.googleapis.com/books/
ngrams/books/datasetsv2.html, version 20120701,
with 468,491,999,592 words
4http://code.google.com/p/
dkpro-similarity-asl/
by Jaccard (n = 1, 3, 4), and Word n-grams by Jac-
card w/o Stopwords (n = 2, 4). Semantic similarity
measures include WordNet Similarity based on the
Resnik measure (two variants) and Explicit Seman-
tic Similarity based on WordNet, Wikipedia or Wik-
tionary. This means that we reused all features from
DKPro run 1 except for Distributional Thesaurus.
6 Systems
Our systems follow previous submissions to the STS
task (e.g., S?aric? et al, 2012; Banea et al, 2012) in
that feature values are extracted for each sentence
pair and combined with a gold standard score in or-
der to train a Support Vector Regressor on the result-
ing regression task. A postprocessing step guaran-
tees that all scores are in the [0, 5] range and equal 5
if the two sentences are identical. SVR has been
shown to be a powerful technique for predictive data
analysis when the primary goal is to approximate a
function, since the learning algorithm is applicable
to continuous classes. Hence support vector regres-
sion differs from support vector machine classifica-
tion where the goal rather is to take a binary deci-
sion. The key idea in SVR is to use a cost function
for building the model which tries to ignore noise in
training data (i.e., data which is too close to the pre-
diction), so that the produced model in essence only
depends on a more robust subset of the extracted fea-
tures.
Three systems were created using the supplied
annotated data based on Microsoft Research Para-
phrase and Video description corpora (MSRpar and
MSvid), statistical machine translation system out-
put (SMTeuroparl and SMTnews), and sense map-
pings between OntoNotes and WordNet (OnWN).
The first system (NTNU1) includes all TakeLab and
DKPro features plus the GateWordMatch feature
with the SVR in its default setting.5 The training
material consisted of all annotated data available,
except for the SMT test set, where it was limited to
SMTeuroparl and SMTnews. The NTNU2 system is
similar to NTNU1, except that the training material
for OnWN and FNWN excluded MSRvid and that
the SVR parameter C was set to 200. NTNU3 is
similar to NTNU1 except that all features available
are included.
5RBF kernel,  = 0.1, C = #samples, ? = 1#features
69
Data NTNU1 NTNU2 NTNU3
MSRpar 0.7262 0.7507 0.7221
MSRvid 0.8660 0.8882 0.8662
SMTeuroparl 0.5843 0.3386 0.5503
SMTnews 0.5840 0.5592 0.5306
OnWN 0.7503 0.6365 0.7200
mean 0.7022 0.6346 0.6779
Table 1: Correlation score on 2012 test data
7 Results
System performance is evaluated using the Pearson
product-moment correlation coefficient (r) between
the system scores and the human scores. Results on
the 2012 test data (i.e., 2013 development data) are
listed in Table 1. This basically shows that except
for the GateWordMatch, adding our other fea-
tures tends to give slightly lower scores (cf. NTNU1
vs NTNU3). In addition, the table illustrates that op-
timizing the SVR according to cross-validated grid
search on 2012 training data (here C = 200), rarely
pays off when testing on unseen data (cf. NTNU1
vs NTNU2).
Table 2 shows the official results on the test data.
These are generally in agreement with the scores on
the development data, although substantially lower.
Our systems did particularly well on SMT, holding
first and second position, reasonably good on head-
lines, but not so well on the ontology alignment data,
resulting in overall 9th (NTNU1) and 12th (NTNU3)
system positions (5th best team). Table 3 lists the
correlation score and rank of the ten best individual
features per STS?13 test data set, and those among
the top-20 overall, resulting from linear regression
on a single feature. Features in boldface are gen-
uinely new (i.e., described in Sections 2?4).
Overall the character n-gram features are the most
informative, particularly for HeadLine and SMT.
The reason may be that these not only capture word
overlap (Ahn, 2011), but also inflectional forms and
spelling variants.
The (weighted) distributional similarity features
based on NYT are important for HeadLine and SMT,
which obviously contain sentence pairs from the
news genre, whereas the Wikipedia based feature is
more important for OnWN and FNWN. WordNet-
based measures are highly relevant too, with variants
NTNU1 NTNU2 NTNU3
Data r n r n r n
Head 0.7279 11 0.5909 59 0.7274 12
OnWN 0.5952 31 0.1634 86 0.5882 32
FNWN 0.3215 45 0.3650 27 0.3115 49
SMT 0.4015 2 0.3786 9 0.4035 1
mean 0.5519 9 0.3946 68 0.5498 12
Table 2: Correlation score and rank on 2013 test data
relying on path length outperforming those based on
Resnik similarity, except for SMT.
As is to be expected, basic word and lemma uni-
gram overlap prove to be informative, with overall
unweighted variants resulting in higher correlation.
Somewhat surprisingly, higher order n-gram over-
laps (n > 1) seem to be less relevant. Longest com-
mon subsequence and substring appear to work par-
ticularly well for OnWN and FNWN, respectively.
GateWordMatch is highly relevant too, in
agreement with earlier results on the development
data. Although treated as a single feature, it is ac-
tually a combination of similarity features where an
appropriate feature is selected for each word pair.
This ?vertical? way of combining features can po-
tentially provide a more fine-grained feature selec-
tion, resulting in less noise. Indeed, if two words are
matching as named entities or as close synonyms,
less precise types of features such as character-based
and data-driven similarity should not dominate the
overall similarity score.
It is interesting to find that MSRI outper-
forms both classical RI and ESA (Gabrilovich and
Markovitch, 2007) on this task. Still, the more ad-
vanced features, such as MSRI-Context, gave in-
ferior results compared to MSRI-Centroid. This
suggests that more research on MSRI is needed
to understand how both training and retrieval can
be optimised. Also, LSA-based features (see
tl.weight-dist-sim-wiki) achieve better
results than both MSRI, RI and ESA. Then again,
larger corpora were used for training the LSA mod-
els. RI has been shown to be comparable to LSA
(Karlgren and Sahlgren, 2001), and since a relatively
small corpus was used for training the RI/MSRI
models, there are reasons to believe that better
scores can be achieved by both RI- and MSRI-based
features by using more training data.
70
HeadLine OnWN FNWN SMT Mean
Features r n r n r n r n r n
CharacterNGramMeasure-3 0.72 2 0.39 2 0.44 3 0.70 1 0.56 1
CharacterNGramMeasure-4 0.69 3 0.38 5 0.45 2 0.67 6 0.55 2
CharacterNGramMeasure-2 0.73 1 0.37 9 0.34 10 0.69 2 0.53 3
tl.weight-dist-sim-wiki 0.58 14 0.39 3 0.45 1 0.67 5 0.52 4
tl.wn-sim-lem 0.69 4 0.40 1 0.41 5 0.59 10 0.52 5
GateWordMatch 0.67 8 0.37 11 0.34 11 0.60 9 0.50 6
tl.dist-sim-nyt 0.69 5 0.34 28 0.26 23 0.65 8 0.49 7
tl.n-gram-match-lem-1 0.68 6 0.36 16 0.37 8 0.51 14 0.48 8
tl.weight-dist-sim-nyt 0.57 17 0.37 14 0.29 18 0.66 7 0.47 9
tl.n-gram-match-lc-1 0.68 7 0.37 10 0.32 13 0.50 17 0.47 10
MCS06-Resnik-WordNet 0.49 26 0.36 22 0.28 19 0.68 3 0.45 11
TWSI-Resnik-WordNet 0.49 27 0.36 23 0.28 20 0.68 4 0.45 12
tl.weight-word-match-lem 0.56 18 0.37 16 0.37 7 0.50 16 0.45 13
MSRI-Centroid 0.60 13 0.36 17 0.37 9 0.45 19 0.45 14
tl.weight-word-match-olc 0.56 19 0.38 8 0.32 12 0.51 15 0.44 15
MSRI-MaxSense 0.58 15 0.36 15 0.31 14 0.45 20 0.42 16
GreedyStringTiling-3 0.67 9 0.38 6 0.31 15 0.34 29 0.43 17
ESA-Wikipedia 0.50 25 0.30 38 0.32 14 0.54 12 0.42 18
WordNGramJaccard-1 0.64 10 0.37 12 0.25 25 0.33 30 0.40 19
WordNGramContainment-1-stopword 0.64 25 0.38 7 0.25 24 0.32 31 0.40 20
RI-Hungarian 0.58 16 0.33 31 0.10 34 0.42 22 0.36 24
RI-AvgTermTerm 0.56 20 0.33 32 0.11 33 0.37 28 0.34 25
LongestCommonSubstring 0.40 29 0.30 39 0.42 4 0.37 27 0.37 26
ESA-WordNet 0.11 43 0.30 40 0.41 6 0.49 18 0.33 29
LongestCommonSubsequenceNorm 0.53 21 0.39 4 0.19 27 0.18 37 0.32 30
MultisenseRI-ContextTermTerm 0.39 31 0.33 33 0.28 21 0.15 38 0.29 33
MultisenseRI-HASensesTermTerm 0.39 32 0.33 34 0.28 22 0.15 39 0.29 34
RI-SentVectors-Norm 0.34 35 0.35 26 -0.01 51 0.24 35 0.23 39
RelationSimilarity 0.31 39 0.35 27 0.24 26 0.02 41 0.23 40
RI-SentVectors-TFIDF 0.27 40 0.15 50 0.08 40 0.23 36 0.18 41
GraphEditDistance 0.33 38 0.25 46 0.13 31 -0.11 49 0.15 42
Table 3: Correlation score and rank of the best features
8 Conclusion and Future Work
The NTNU system can be regarded as continuation
of the most successful systems from the STS?12
shared task, combining shallow textual, distribu-
tional and knowledge-based features into a support
vector regression model. It reuses features from the
TakeLab and DKPro systems, resulting in a very
strong baseline.
Adding new features to further improve
performance turned out to be hard: only
GateWordMatch yielded improved perfor-
mance. Similarity features based on both classical
and innovative variants of Random Indexing were
shown to correlate with semantic textual similarity,
but did not complement the existing distributional
features. Likewise, features designed to reveal
deeper syntactic (graph edit distance) and semantic
relations (RelEx) did not add to the score.
As future work, we would aim to explore a
vertical feature composition approach similar to
GateWordMatch and contrast it with the ?flat?
composition currently used in our systems.
Acknowledgements
Thanks to TakeLab for source code of their ?simple?
system and the full-scale LSA models. Thanks to the
team from Ubiquitous Knowledge Processing Lab
for source code of their DKPro Similarity system.
71
References
Agirre, E., Cer, D., Diab, M., and Gonzalez-Agirre,
A. (2012). SemEval-2012 Task 6: A pilot on se-
mantic textual similarity. In *SEM (2012), pages
385?393.
Agirre, E., Cer, D., Diab, M., Gonzalez-Agirre, A.,
and Guo, W. (2013). *SEM 2013 Shared Task:
Semantic textual similarity, including a pilot on
typed-similarity. In *SEM 2013: The Second
Joint Conference on Lexical and Computational
Semantics. Association for Computational Lin-
guistics.
Ahn, C. S. (2011). Automatically detecting authors?
native language. PhD thesis, Monterey, Califor-
nia. Naval Postgraduate School.
Banea, C., Hassan, S., Mohler, M., and Mihalcea, R.
(2012). UNT: a supervised synergistic approach
to semantic text similarity. In *SEM (2012),
pages 635?642.
Ba?r, D., Biemann, C., Gurevych, I., and Zesch, T.
(2012). UKP: Computing semantic textual sim-
ilarity by combining multiple content similarity
measures. In *SEM (2012), pages 435?440.
Bhagwani, S., Satapathy, S., and Karnick, H. (2012).
sranjans : Semantic textual similarity using maxi-
mal weighted bipartite graph matching. In *SEM
2012: The First Joint Conference on Lexical and
Computational Semantics ? Volume 1: Proceed-
ings of the main conference and the shared task,
and Volume 2: Proceedings of the Sixth Interna-
tional Workshop on Semantic Evaluation (Sem-
Eval 2012), pages 579?585, Montre?al, Canada.
Association for Computational Linguistics.
Cunningham, H., Maynard, D., Bontcheva, K., and
Tablan, V. (2002). GATE: A framework and
graphical development environment for robust
NLP tools and applications. In Proceedings of the
40th Annual Meeting of the Association for Com-
putational Linguistics, pages 168?175, Philadel-
phia, Pennsylvania. ACL.
Deerwester, S., Dumais, S., Furnas, G., Landauer,
T., and Harshman, R. (1990). Indexing by latent
semantic analysis. Journal of the American Soci-
ety for Information Science, 41(6):391?407.
Fundel, K., Ku?ffner, R., and Zimmer, R. (2007).
RelEx - Relation extraction using dependency
parse trees. Bioinformatics, 23(3):365?371.
Gabrilovich, E. and Markovitch, S. (2007). Comput-
ing semantic relatedness using wikipedia-based
explicit semantic analysis. In Proceedings of The
Twentieth International Joint Conference for Ar-
tificial Intelligence., pages 1606?1611.
Hart, D. and Goertzel, B. (2008). Opencog: A soft-
ware framework for integrative artificial general
intelligence. In Proceedings of the 2008 confer-
ence on Artificial General Intelligence 2008: Pro-
ceedings of the First AGI Conference, pages 468?
472, Amsterdam, The Netherlands, The Nether-
lands. IOS Press.
Hassel, M. (2004). JavaSDM package.
Kanerva, P., Kristoferson, J., and Holst, A. (2000).
Random indexing of text samples for latent se-
mantic analysis. In Gleitman, L. and Josh, A.,
editors, Proceedings of the 22nd Annual Confer-
ence of the Cognitive Science Society, page 1036.
Erlbaum.
Karlgren, J. and Sahlgren, M. (2001). From Words
to Understanding. In Uesaka, Y., Kanerva, P., and
Asoh, H., editors, Foundations of real-world in-
telligence, chapter 26, pages 294?311. Stanford:
CSLI Publications.
Karnick, H., Satapathy, S., and Bhagwani, S. (2012).
sranjans: Semantic textual similarity using max-
imal bipartite graph matching. In *SEM (2012),
pages 579?585.
Kuhn, H. (1955). The Hungarian method for the as-
signment problem. Naval research logistics quar-
terly, 2:83?97.
Leacock, C. and Chodorow, M. (1998). Combin-
ing local context and WordNet similarity for word
sense identification. WordNet: An electronic lexi-
cal . . . .
Levenshtein, V. I. (1966). Binary codes capable of
correcting deletions, insertions and reversals. So-
viet Physics Doklady, 10(8):707?710.
Nivre, J., Hall, J., and Nilsson, J. (2006). Malt-
parser: A data-driven parser-generator for depen-
dency parsing. In In Proc. of LREC-2006, pages
2216?2219.
72
Reisinger, J. and Mooney, R. (2010). Multi-
prototype vector-space models of word meaning.
In Human Language Technologies: The 2010 An-
nual Conference of the North American Chapter
of the Association for Computational Linguistics,
number June, pages 109?117.
Riesen, K. and Bunke, H. (2009). Approximate
graph edit distance computation by means of bi-
partite graph matching. Image and Vision Com-
puting, 27(7):950?959.
R?kenes, H. (2013). Graph-Edit Distance Applied to
the Task of Detecting Plagiarism. Master?s the-
sis, Norwegian University of Science and Tech-
nology.
Sahlgren, M. (2005). An introduction to random in-
dexing. In Methods and Applications of Seman-
tic Indexing Workshop at the 7th International
Conference on Terminology and Knowledge En-
gineering, TKE, volume 5.
Sahlgren, M., Holst, A., and Kanerva, P. (2008). Per-
mutations as a Means to Encode Order in Word
Space. Proceedings of the 30th Conference of the
Cognitive Science Society.
S?aric?, F., Glavas?, G., Karan, M., S?najder, J., and
Bas?ic?, B. D. (2012). TakeLab: systems for mea-
suring semantic text similarity. In *SEM (2012),
pages 441?448.
*SEM (2012). Proceedings of the First Joint Con-
ference on Lexical and Computational Seman-
tics (*SEM), volume 2: Proceedings of the Sixth
International Workshop on Semantic Evaluation,
Montreal, Canada. Association for Computational
Linguistics.
Semeraro, G., Aldo, B., and Orabona, V. E. (2012).
UNIBA: Distributional semantics for textual sim-
ilarity. In *SEM (2012), pages 591?596.
Singh, J., Bhattacharya, A., and Bhattacharyya, P.
(2012). janardhan: Semantic textual similarity us-
ing universal networking language graph match-
ing. In *SEM 2012: The First Joint Conference
on Lexical and Computational Semantics ? Vol-
ume 1: Proceedings of the main conference and
the shared task, and Volume 2: Proceedings of the
Sixth International Workshop on Semantic Evalu-
ation (SemEval 2012), pages 662?666, Montre?al,
Canada. Association for Computational Linguis-
tics.
Sokolov, A. (2012). LIMSI: learning semantic simi-
larity by selecting random word subsets. In *SEM
(2012), pages 543?546.
Tovar, M., Reyes, J., and Montes, A. (2012). BUAP:
a first approximation to relational similarity mea-
suring. In *SEM (2012), pages 502?505.
Vapnik, V., Golowich, S. E., and Smola, A. (1997).
Support vector method for function approxima-
tion, regression estimation, and signal process-
ing. In Mozer, M. C., Jordan, M. I., and Petsche,
T., editors, Advances in Neural Information Pro-
cessing Systems, volume 9, pages 281?287. MIT
Press, Cambridge, Massachusetts.
73
Proceedings of the 9th Workshop on Multiword Expressions (MWE 2013), pages 21?30,
Atlanta, Georgia, 13-14 June 2013. c?2013 Association for Computational Linguistics
Improving Word Translation Disambiguation by
Capturing Multiword Expressions with Dictionaries
Lars Bungum, Bjo?rn Gamba?ck, Andre? Lynum, Erwin Marsi
Norwegian University of Science and Technology
Sem S?lands vei 7?9; NO?7491 Trondheim, Norway
{bungum,gamback,andrely,emarsi}@idi.ntnu.no
Abstract
The paper describes a method for identifying
and translating multiword expressions using a
bi-directional dictionary. While a dictionary-
based approach suffers from limited recall,
precision is high; hence it is best employed
alongside an approach with complementing
properties, such as an n-gram language model.
We evaluate the method on data from the
English-German translation part of the cross-
lingual word sense disambiguation task in the
2010 semantic evaluation exercise (SemEval).
The output of a baseline disambiguation sys-
tem based on n-grams was substantially im-
proved by matching the target words and their
immediate contexts against compound and
collocational words in a dictionary.
1 Introduction
Multiword expressions (MWEs) cause particular
lexical choice problems in machine translation
(MT), but can also be seen as an opportunity to both
generalize outside the bilingual corpora often used
as training data in statistical machine translation ap-
proaches and as a method to adapt to specific do-
mains. The identification of MWEs is in general
important for many language processing tasks (Sag
et al, 2002), but can be crucial in MT: since the se-
mantics of many MWEs are non-compositional, a
suitable translation cannot be constructed by trans-
lating the words in isolation. Identifying MWEs
can help to identify idiomatic or otherwise fixed lan-
guage usage, leading to more fluent translations, and
potentially reduce the amount of lexical choice an
MT system faces during target language generation.
In any translation effort, automatic or otherwise,
the selection of target language lexical items to in-
clude in the translation is a crucial part of the fi-
nal translation quality. In rule-based systems lex-
ical choice is derived from the semantics of the
source words, a process which often involves com-
plex semantic composition. Data-driven systems
on the other hand commonly base their translations
nearly exclusively on cooccurrences of bare words
or phrases in bilingual corpora, leaving the respon-
sibility of selecting lexical items in the translation
entirely to the local context found in phrase trans-
lation tables and language models with no explicit
notion of the source or target language semantics.
Still, systems of this type have been shown to pro-
duce reasonable translation quality without explic-
itly considering word translation disambiguation.
Bilingual corpora are scarce, however, and un-
available for most language pairs and target do-
mains. An alternative approach is to build systems
based on large monolingual knowledge sources and
bilingual lexica, as in the hybrid MT system PRE-
SEMT (Sofianopoulos et al, 2012). Since such
a system explicitly uses a translation dictionary, it
must at some point in the translation process decide
which lexical entries to use; thus a separate word
translation disambiguation module needs to be in-
corporated. To research available methods in such a
module we have identified a task where we can use
public datasets for measuring how well a method is
able to select the optimal of many translation choices
from a source language sentence.
21
In phrase-based statistical MT systems, the trans-
lation of multiword expressions can be a notable
source of errors, despite the fact that those systems
explicitly recognize and use alignments of sequen-
tial chunks of words. Several researchers have ap-
proached this problem by adding MWE translation
tables to the systems, either through expanding the
phrase tables (Ren et al, 2009) or by injecting the
MWE translations into the decoder (Bai et al, 2009).
Furthermore, there has been some interest in auto-
matic mining of MWE pairs from bilingual corpora
as a task in itself: Caseli et al (2010) used a dic-
tionary for evaluation of an automatic MWE extrac-
tion procedure using bilingual corpora. They also
argued for the filtering of stopwords, similarly to the
procedure described in the present paper. Sharoff
et al (2006) showed how MWE pairs can be ex-
tracted from comparable monolingual corpora in-
stead of from a parallel bilingual corpus.
The methodology introduced in this paper em-
ploys bilingual dictionaries as a source of multi-
word expressions. Relationships are induced be-
tween the source sentence and candidate transla-
tion lexical items based on their correspondence in
the dictionary. Specifically, we use a determinis-
tic multiword expression disambiguation procedure
based on translation dictionaries in both directions
(from source to target language and vice versa),
and a baseline system that ranks target lexical items
based on their immediate context and an n-gram
language model. The n-gram model represents a
high-coverage, low-precision companion to the dic-
tionary approach (i.e., it has complementary proper-
ties). Results show that the MWE dictionary infor-
mation substantially improves the baseline system.
The 2010 Semantic Evaluation exercise (Sem-
Eval?10) featured a shared task on Cross-Lingual
Word Sense Disambiguation (CL-WSD), where the
focus was on disambiguating the translation of a sin-
gle noun in a sentence. The participating systems
were given an English word in its context and asked
to produce appropriate substitutes in another lan-
guage (Lefever and Hoste, 2010b). The CL-WSD
data covers Dutch, French, Spanish, Italian and Ger-
man; however, since the purpose of the experiments
in this paper just was to assess our method?s abil-
ity to choose the right translation of a word given its
context, we used the English-to-German part only.
The next section details the employed disam-
biguation methodology and describes the data sets
used in the experiments. Section 3 then reports on
the results of experiments applying the methodology
to the SemEval datasets, particularly addressing the
impact of the dictionary MWE correspondences. Fi-
nally, Section 4 sums up the discussion and points to
issues that can be investigated further.
2 Methodology
The core of the disambiguation model introduced
in this paper is dictionary-based multiword extrac-
tion. Multiword extraction is done in both a direct
and indirect manner: Direct extraction uses adjacent
words in the source language in combination with
the word to be translated, if the combination has an
entry in the source-to-target language (SL?TL) dic-
tionary. Indirect extraction works in the reverse di-
rection, by searching the target-to-source (TL?SL)
dictionary and looking up translation candidates for
the combined words. Using a dictionary to identify
multiword expressions after translation has a low re-
call of target language MWEs, since often there ei-
ther are no multiword expressions to be discovered,
or the dictionary method is unable to find a trans-
lation for an MWE. Nevertheless, when an MWE
really is identified by means of the dictionary-based
method, the precision is high.
Due to the low recall, relying on multiword ex-
pressions from dictionaries would, however, not be
sufficient. Hence this method is combined with an
n-gram language model (LM) based on a large tar-
get language corpus. The LM is used to rank trans-
lation candidates according to the probability of the
n-gram best matching the context around the transla-
tion candidate. This is a more robust but less precise
approach, which servers as the foundation for the
high-precision but low-recall dictionary approach.
In the actual implementation, the n-gram method
thus first provides a list of its best suggestions
(currently top-5), and the dictionary method then
prepends its candidates to the top of this list. Con-
sequently, n-gram matching is described before
dictionary-based multiword extraction in the follow-
ing section. First, however, we introduce the data
sets used in the experiments.
22
(a) AGREEMENT in the form of an exchange of letters between
the European Economic Community and the Bank for Interna-
tional Settlements concerning the mobilization of claims held by
the Member States under the medium-term financial assistance
arrangements
{bank 4; bankengesellschaft 1; kreditinstitut 1; zentralbank 1; fi-
nanzinstitut 1}
(b) The Office shall maintain an electronic data bank with the par-
ticulars of applications for registration of trade marks and entries
in the Register. The Office may also make available the contents
of this data bank on CD-ROM or in any other machine-readable
form.
{datenbank 4; bank 3; datenbanksystem 1; daten 1}
(c) established as a band of 1 km in width from the banks of a
river or the shores of a lake or coast for a length of at least 3 km.
{ufer 4; flussufer 3}
Table 1: Examples of contexts for the English word bank
with possible German translations
2.1 The CL-WSD Datasets
The data sets used for the SemEval?10 Cross-
Lingual Word Sense Disambiguation task were con-
structed by making a ?sense inventory? of all pos-
sible target language translations of a given source
language word based on word-alignments in Eu-
roparl (Koehn, 2005), with alignments involving the
relevant source words being manually checked. The
retrieved target words were manually lemmatised
and clustered into translations with a similar sense;
see Lefever and Hoste (2010a) for details.
Trial and test instances were extracted from two
other corpora, JRC-Acquis (Steinberger et al, 2006)
and BNC (Burnard, 2007). The trial data for each
language consists of five nouns (with 20 sentence
contexts per noun), and the test data of twenty nouns
(50 contexts each, so 1000 in total per language,
with the CL-WSD data covering Dutch, French,
Spanish, Italian and German). Table 1 provides ex-
amples from the trial data of contexts for the English
word bank and its possible translations in German.
Gold standard translations were created by hav-
ing four human translators picking the contextually
appropriate sense for each source word, choosing 0?
3 preferred target language translations for it. The
translations are thus restricted to those appearing in
Europarl, probably introducing a slight domain bias.
Each translation has an associated count indicating
how many annotators considered it to be among their
top-3 preferred translations in the given context.
bank, bankanleihe, bankanstalt, bankdarlehen, bankenge-
sellschaft, bankensektor, bankfeiertag, bankgesellschaft, bankin-
stitut, bankkonto, bankkredit, banknote, blutbank, daten, daten-
bank, datenbanksystem, euro-banknote, feiertag, finanzinstitut,
flussufer, geheimkonto, geldschein, gescha?ftsbank, handelsbank,
konto, kredit, kreditinstitut, nationalbank, notenbank, sparkasse,
sparkassenverband, ufer, weltbank, weltbankgeber, west-bank,
westbank, westjordanien, westjordanland, westjordanufer, west-
ufer, zentralbank
Table 2: All German translation candidates for bank as
extracted from the gold standard
In this way, for the English lemma bank, for ex-
ample, the CL-WSD trial gold standard for German
contains the word Bank itself, together with 40 other
translation candidates, as shown in Table 2. Eight
of those are related to river banks (Ufer, but also,
e.g., Westbank and Westjordanland), three concern
databases (Datenbank), and one is for blood banks.
The rest are connected to different types of finan-
cial institutions (such as Handelsbank and Finanz-
institut, but also by association Konto, Weldbank-
geber, Banknote, Geldschein, Kredit, etc.).
2.2 N-Gram Context Matching
N-gram matching is used to produce a ranked list
of translation candidates and their contexts, both in
order to provide robustness and to give a baseline
performance. The n-gram models were built using
the IRSTLM toolkit (Federico et al, 2008; Bungum
and Gamba?ck, 2012) on the DeWaC corpus (Baroni
and Kilgarriff, 2006), using the stopword list from
NLTK (Loper and Bird, 2002). The n-gram match-
ing procedure consists of two steps:
1. An nth order source context is extracted and the
translations for each SL word in this context
are retrieved from the dictionary. This includes
stopword filtering of the context.
2. All relevant n-grams are inspected in order
from left to right and from more specific (5-
grams) to least specific (single words).
For each part of the context with matching n-grams
in the target language model, the appropriate target
translation candidates are extracted and ranked ac-
cording to their language model probability. This
results in an n-best list of translation candidates.
23
Since dictionary entries are lemma-based, lemma-
tization was necessary to use this approach in com-
bination with the dictionary enhancements. The
source context is formed by the lemmata in the sen-
tence surrounding the focus word (the word to be
disambiguated) by a window of up to four words
in each direction, limited by a 5-gram maximum
length. In order to extract the semantically most rel-
evant content, stopwords are removed before con-
structing this source word window. For each of the
1?5 lemmata in the window, the relevant translation
candidates are retrieved from the bilingual dictio-
nary. The candidates form the ordered translation
context for the source word window.
The following example illustrates how the trans-
lation context is created for the focus word ?bank?.
First the relevant part of the source language sen-
tence with the focus word in bold face:
(1) The BIS could conclude stand-by credit
agreements with the creditor countries? cen-
tral bank if they should so request.
For example, using a context of two words in front
and two words after the focus word, the following
source language context is obtained after a prepro-
cessing involving lemmatization, stopword removal,
and insertion of sentence start (<s>) and end mark-
ers (</s>):
(2) country central bank request </s>
From this the possible n-grams in the target side con-
text are generated by assembling all ordered com-
binations of the translations of the source language
words for each context length: the widest contexts
(5-grams) are looked up first before moving on to
narrower contexts, and ending up with looking up
only the translation candidate in isolation.
Each of the n-grams is looked up in the language
model and for each context part the n-grams are or-
dered according to their language model probability.
Table 3 shows a few examples of such generated n-
grams with their corresponding scores from the n-
gram language model.1 The target candidates (ital-
ics) are then extracted from the ordered list of target
language n-grams. This gives an n-best list of trans-
1There are no scores for 4- and 5-grams; as expected when
using direct translation to generate target language n-grams.
n n-gram LM score
5 land mittig bank nachsuchen </s> Not found
4 mittig bank nachsuchen </s> Not found
3 mittig bank nachsuchen Not found
3 kredit anfragen </s> -0.266291
2 mittig bank -3.382560
2 zentral blutbank -5.144870
1 bank -3.673000
Table 3: Target language n-gram examples from look-
ups of stopword-filtered lemmata country central bank
request reported in log scores. The first 3 n-grams were
not found in the language model.
lation candidates from which the top-1 or top-5 can
be taken. Since multiple senses in the dictionary can
render the same literal output, duplicate translation
candidates are filtered out from the n-best list.
2.3 Dictionary-Based Context Matching
After creating the n-gram based list of translation
candidates, additional candidates are produced by
looking at multiword entries in a bilingual dictio-
nary. The existence of multiword entries in the dic-
tionary corresponding to adjacent lemmata in the
source context or translation candidates in the target
context is taken as a clear indicator for the suitability
of a particular translation candidate. Such entries are
added to the top of the n-best list, which represents
a strong preference in the disambiguation system.
Dictionaries are used in all experiments to look up
translation candidates and target language transla-
tions of the words in the context, but this approach is
mining the dictionaries by using lookups of greater
length. Thus is, for example, the dictionary entry
Community Bank translated to the translation candi-
date Commerzbank; this translation candidate would
be put on top of the list of prioritized answers.
Two separate procedures are used to find such in-
dicators, a direct procedure based on the source con-
text and an indirect procedure based on the weaker
target language context. These are detailed in pseu-
docode in Algorithms 1 and 2, and work as follows:
Source Language (SL) Method (Algorithm 1)
If there is a dictionary entry for the source word
and one of its adjacent words, search the set
of translations for any of the translation candi-
dates for the word alone. Specifically, transla-
24
Algorithm 1 SL algorithm to rank translation candidates (tcands) for SL lemma b given list of tcands
1: procedure FINDCAND(list rlist,SL-lemma b, const tcands) . rlist is original ranking
2: comblemmas? list(previouslemma(b) + b, b + nextlemma(b)) . Find adjacent lemmata
3: for lem ? comblemmas do
4: c? sl-dictionary-lookup(lem) . Look up lemma in SL?TL dict.
5: if c ? tcands then rlist? list(c + rlist) . Push lookup result c onto rlist if in tcands
6: end if
7: end for
8: return rlist . Return new list with lemmata whose translations were in tcands on top
9: end procedure
Algorithm 2 TL algorithm to rank translation candidates (tcands) for SL lemma b given list of tcands
[The ready-made TL tcands from the dataset are looked up in TL-SL direction. It is necessary to keep a list of the
reverse-translation of the individual tcand as well as the original tcand itself, in order to monitor which tcand it was.
If the SL context is found in either of these reverse lookups the matching tcand is ranked high.]
1: procedure FINDCAND(list rlist,SL-lemma b, const tcands) . rlist is original ranking
2: for cand ? tcands do . Assemble list of TL translations
3: translist? list(cand, tl-dictionary-lookup(cand)) + translist
4: . Append TL?SL lookup results of tcands with cand as id
5: end for
6: for cand, trans ? translist do
7: if previouslemma(b)?nextlemma(b) ? trans then . If trans contains either SL lemma
8: rlist? list(cand) + rlist . append this cand onto rlist
9: end if
10: end for
11: return rlist
12: . Return tcands list; top-ranking tcands whose SL-neighbours were found in TL?SL lookup
13: end procedure
tions of the combination of the source word and
an adjacent word in the context are matched
against translation candidates for the word.
Target Language (TL) Method (Algorithm 2)
If a translation candidate looked up in the re-
verse direction matches the source word along
with one or more adjacent words, it is a good
translation candidate. TL candidates are looked
up in a TL?SL dictionary and multiword results
are matched against SL combinations of disam-
biguation words and their immediate contexts.
For both methods the dictionary entry for the tar-
get word or translation candidate is matched against
the immediate context. Thus both methods result
in two different lookups for each focus word, com-
bining it with the previous and next terms, respec-
tively. This is done exhaustively for all combina-
tions of translations of the words in the context win-
dow. Only one adjacent word was used, since very
few of the candidates were able to match the context
even with one word. Hence, virtually none would
be found with more context, making it very unlikely
that larger contexts would contribute to the disam-
biguation procedure, as wider matches would also
match the one-word contexts.
Also for both methods, translation candidates are
only added once, in case the same translation candi-
date generates hits with either (or both) of the meth-
ods. Looking at the running example, stopword fil-
tered and with lemmatized context:
(3) country central bank request
This example generates two source language multi-
word expressions, central bank and bank request. In
the source language method, these word combina-
25
tions are looked up in the dictionary where the zen-
tralbank entry is found for central bank, which is
also found as a translation candidate for bank.
The target language method works in the reverse
order, looking up the translation candidates in the
TL?SL direction and checking if the combined lem-
mata are among the candidates? translations into the
source language. In the example, the entry zentral-
bank:central bank is found in the dictionary, match-
ing the source language context, so zentralbank is
assumed to be a correct translation.
2.4 Dictionaries
Two English-German dictionaries were used in the
experiments, both with close to 1 million entries
(translations). One is a free on-line resource, while
the other was obtained by reversing an existing pro-
prietary German-English dictionary made available
to the authors by its owners:
? The GFAI dictionary (called ?D1? in Section 3
below) is a proprietary and substantially ex-
tended version of the Chemnitz dictionary, with
549k EN entries including 433k MWEs, and
552k DE entries (79k MWEs). The Chem-
nitz electronic German-English dictionary2 it-
self contains over 470,000 word translations
and is available under a GPL license.
? The freely available CC dictionary3 (?D2? be-
low) is an internet-based German-English and
English-German dictionary built through user
generated word definitions. It has 565k/440k
(total/MWE) EN and 548k/210k DE entries.
Note that the actual dictionaries are irrelevant to the
discussion at hand, and that we do not aim to point
out strengths or weaknesses of either dictionary, nor
to indicate a bias towards a specific resource.
3 Results
Experiments were carried out both on the trial and
test data described in Section 2.1 (5 trial and 20 test
words; with 20 resp. 50 instances for each word; in
total 1100 instances in need of disambiguation). The
results show that the dictionaries yield answers with
2http://dict.tu-chemnitz.de/
3http://www.dict.cc/
high precision, although they are robust enough to
solve the SemEval WSD challenge on their own.
For measuring the success rate of the developed
models, we adopt the ?Out-Of-Five? (OOF) score
(Lefever and Hoste, 2010b) from the SemEval?10
Cross-Lingual Word Sense Disambiguation task.
The Out-Of-Five criterion measures how well the
top five candidates from the system match the top
five translations in the gold standard:
OOF (i) =
?
a?Ai
freq i(a)
|Hi|
where Hi denotes the multiset of translations pro-
posed by humans for the focus word in each source
sentence si (1 ? i ? N , N being the number
of test items). Ai is the set of translations produced
by the system for source term i. Since each transla-
tion has an associated count of how many annotators
chose it, there is for each si a function freq i return-
ing this count for each term in Hi (0 for all other
terms), and max freq i gives the maximal count for
any term in Hi. For the first example in Table 1:
?
??????????
??????????
H1 = {bank, bank, bank, bank, zentralbank,
bankengesellschaft, kreditinstitut, finanzinstitut}
freq1(bank) = 4
. . .
freq1(finanzinstitut) = 1
maxfreq1 = 4
and the cardinality of the multiset is: |H1| = 8. This
equates to the sum of all top-3 preferences given to
the translation candidates by all annotators.
For the Out-Of-Five evaluation, the CL-WSD sys-
tems were allowed to submit up to five candidates
of equal rank. OOF is a recall-oriented measure
with no additional penalty for precision errors, so
there is no benefit in outputting less than five can-
didates. With respect to the previous example from
Table 1, the maximum score is obtained by system
output A1 = {bank, bankengesellschaft, kreditinstitut,
zentralbank, finanzinstitut}, which gives OOF (1) =
(4 + 1 + 1 + 1 + 1)/8 = 1, whereas A2 = {bank,
bankengesellschaft, nationalbank, notenbank, sparkasse}
would give OOF (1) = (4 + 1)/8 = 0.625.4
4Note that the maximum OOF score is not always 1 (i.e., it
is not normalized), since the gold standard sometimes contains
more than five translation alternatives.
26
Source language Target language All
Dictionary D1 D2 comb D1 D2 comb comb
Top 8.89 6.99 8.89 22.71 24.43 25.34 24.67
Low 0.00 0.00 0.00 0.00 0.00 0.00 0.00
Mean 2.71 0.99 3.04 8.35 7.10 9.24 10.13
Table 4: F1-score results for individual dictionaries
Source language Target language All
Dictionary D1 D2 comb D1 D2 comb comb
coach 1.00 0.00 1.00 0.21 0.00 0.21 0.21
education 0.83 0.67 0.83 0.47 0.62 0.54 0.53
execution 0.00 0.00 0.00 0.17 0.22 0.17 0.17
figure 1.00 0.00 1.00 0.51 0.57 0.55 0.55
job 0.88 0.80 0.94 0.45 0.78 0.46 0.44
letter 1.00 0.00 1.00 0.66 0.75 0.62 0.66
match 1.00 1.00 1.00 0.80 0.50 0.80 0.80
mission 0.71 0.33 0.71 0.46 0.37 0.36 0.36
mood 0.00 0.00 0.00 0.00 0.00 0.00 0.00
paper 0.68 0.17 0.68 0.53 0.35 0.55 0.55
post 1.00 1.00 1.00 0.39 0.48 0.45 0.48
pot 0.00 0.00 0.00 1.00 1.00 1.00 1.00
range 1.00 1.00 1.00 0.28 0.37 0.30 0.30
rest 1.00 0.67 1.00 0.60 0.56 0.56 0.58
ring 0.09 0.00 0.09 0.37 0.93 0.38 0.38
scene 1.00 0.00 1.00 0.50 0.42 0.44 0.50
side 1.00 0.00 1.00 0.21 0.16 0.23 0.27
soil 1.00 0.00 1.00 0.72 0.58 0.66 0.69
strain 0.00 0.00 0.00 0.51 0.88 0.55 0.55
test 1.00 1.00 1.00 0.62 0.52 0.57 0.61
Mean 0.84 0.74 0.84 0.50 0.56 0.49 0.51
Table 5: Precision scores for all terms filtering out those
instances for which no candidates were suggested
For assessing overall system performance in
the experiments, we take the best (?Top?), worst
(?Low?), and average (?Mean?) of the OOF scores
for all the SL focus words, with F1-score reported
as the harmonic mean of the precision and recall of
the OOF scores. Table 4 shows results for each dic-
tionary approach on the test set, with ?D1? being
the GFAI dictionary, ?D2? the CC dictionary, and
?comb? the combination of both. Target language
look-up contributes more to providing good transla-
tion candidates than the source language methodol-
ogy, and also outperforms a strategy combining all
dictionaries in both directions (?All comb?).
Filtering out the instances for which no candi-
date translation was produced, and taking the aver-
age precision scores only over these, gives the re-
sults shown in Table 5. Markedly different preci-
sion scores can be noticed, but the source language
Source language Target language
Dictionary D1 D2 D1 D2
Mean 3.25 1.5 12.65 11.45
Total 223 256 1,164 880
Table 6: Number of instances with a translation candidate
(?Mean?) and the total number of suggested candidates
Most Most Freq 5-gram 5-gram All Dict VSM
Freq Aligned + Dict Comb Model
Top 51.77 68.71 52.02 52.74 24.67 55.92
Low 1.76 9.93 14.09 15.40 0.00 10.73
Mean 21.18 34.61 30.36 36.38 10.13 30.30
Table 7: Overview of results (F1-scores) on SemEval data
method again has higher precision on the sugges-
tions it makes than the target language counterpart.
As shown in Table 6, this higher precision is offset
by lower coverage, with far fewer instances actually
producing a translation candidate with the dictionary
lookup methods. There is a notable difference in the
precision of the SL and TL approaches, coinciding
with more candidates produced by the latter. Several
words in Table 5 give 100% precision scores for at
least one dictionary, while a few give 0% precision
for some dictionaries. The word ?mood? even has
0% precision for both dictionaries in both directions.
Table 7 gives an overview of different approaches
to word translation disambiguation on the dataset.
For each method, the three lines again give both
the best and worst scoring terms, and the mean
value for all test words. The maximum attainable
score for each of those would be 99.28, 90.48 and
95.47, respectively, but those are perfect scores not
reachable for all items, as described above (OOF-
scoring). Instead the columns Most Freq and Most
Freq aligned give the baseline scores for the Sem-
Eval dataset: the translation most frequently seen
in the corpus and the translation most frequently
aligned in a word-aligned parallel corpus (Europarl),
respectively. Then follows the results when using
only a stopword-filtered 5-gram model built with the
IRSTLM language modeling kit (Federico and Cet-
tolo, 2007), and when combining the 5-gram model
with the dictionary approach (5-gram + Dict).
The next column (All Dict Comb) shows how the
dictionary methods fared on their own. The com-
27
bined dictionary approach has low recall (see Ta-
ble 6) and does not alone provide a good solution to
the overall problem. Due to high precision, however,
the approach is able to enhance the n-gram method
that already produces acceptable results. Finally, the
column VSM Model as comparison gives the results
obtained when using a Vector Space Model for word
translation disambiguation (Marsi et al, 2011).
Comparing the dictionary approach to state-of-
the-art monolingual solutions to the WTD problem
on this dataset shows that the approach performs bet-
ter for the Lowest and Mean scores of the terms, but
not for the Top scores (Lynum et al, 2012). As can
be seen in Table 7, the vector space model produced
the overall best score for a single term. However, the
method combining a 5-gram language model with
the dictionary approach was best both at avoiding
really low scores for any single term and when com-
paring the mean scores for all the terms.
4 Discussion and Conclusion
The paper has presented a method for using dictio-
nary lookups based on the adjacent words in both
the source language text and target language candi-
date translation texts to disambiguate word transla-
tion candidates. By composing lookup words by us-
ing both neighbouring words, improved disambigua-
tion performance was obtained on the data from the
SemEval?10 English-German Cross-Lingual Word
Sense Disambiguation task. The extended use of
dictionaries proves a valuable source of informa-
tion for disambiguation, and can introduce low-cost
phrase-level translation to quantitative Word Sense
Disambiguation approaches such as N-gram or Vec-
tor Space Model methods, often lacking the phrases-
based dimension.
The results show clear differences between the
source and target language methods of using dictio-
nary lookups, where the former has very high preci-
sion (0.84) but low coverage, while the TL method
compensates lower precision (0.51) with markedly
better coverage. The SL dictionary method pro-
vided answers to only between 1.5 and 3.25 of 50
instances per word on average, depending on the dic-
tionary. This owes largely to the differences in algo-
rithms, where the TL method matches any adjacent
lemma to the focus word with the translation of the
pre-defined translation candidates, whereas the SL
method matches dictionaries of the combined lem-
mata of the focus word and its adjacent words to the
same list of translation candidates. False positives
are expected with lower constraints such as these.
On the SemEval data, the contribution of the dictio-
nary methods to the n-grams is mostly in improving
the average score.
The idea of acquiring lexical information from
corpora is of course not new in itself. So did, e.g.,
Rapp (1999) use vector-space models for the pur-
pose of extracting ranked lists of translation can-
didates for extending a dictionary for word trans-
lation disambiguation. Chiao and Zweigenbaum
(2002) tried to identify translational equivalences
by investigating the relations between target and
source language word distributions in a restricted
domain, and also applied reverse-translation filtering
for improved performance, while Sadat et al (2003)
utilised non-aligned, comparable corpora to induce
a bilingual lexicon, using a bidirectional method
(SL?TL, TL?SL, and a combination of both).
Extending the method to use an arbitrary size win-
dow around all words in the context of each focus
word (not just the word itself) could identify more
multiword expressions and generate a more accurate
bag-of-words for a data-driven approach. Differ-
ences between dictionaries could also be explored,
giving more weight to translations found in two or
more dictionaries. Furthermore, the differences be-
tween the SL and TL methods could explored fur-
ther, investigating in detail the consequences of us-
ing a symmetrical dictionary, in order to study the
effect that increased coverage has on results. Test-
ing the idea on more languages will help verify the
validity of these findings.
Acknowledgements
This research has received funding from NTNU and from
the European Community?s 7th Framework Programme
under contract nr 248307 (PRESEMT). Thanks to the
other project participants and the anonymous reviewers
for several very useful comments.
28
References
Bai, M.-H., You, J.-M., Chen, K.-J., and Chang,
J. S. (2009). Acquiring translation equivalences of
multiword expressions by normalized correlation
frequencies. In Proceedings of the 2009 Confer-
ence on Empirical Methods in Natural Language
Processing, pages 478?486, Singapore. ACL.
Baroni, M. and Kilgarriff, A. (2006). Large
linguistically-processed web corpora for multiple
languages. In Proceedings of the 11th Conference
of the European Chapter of the Association for
Computational Linguistics, pages 87?90, Trento,
Italy. ACL.
Bungum, L. and Gamba?ck, B. (2012). Efficient n-
gram language modeling for billion word web-
corpora. In Proceedings of the 8th International
Conference on Language Resources and Evalua-
tion, pages 6?12, Istanbul, Turkey. ELRA. Work-
shop on Challenges in the Management of Large
Corpora.
Burnard, L., editor (2007). Reference Guide for the
British National Corpus (XML Edition). BNC
Consortium, Oxford, England. http://www.
natcorp.ox.ac.uk/XMLedition/URG.
Caseli, H. d. M., Ramisch, C., das Grac?as
Volpe Nunes, M., and Villavicencio, A. (2010).
Alignment-based extraction of multiword expres-
sions. Language Resources and Evaluation, 44(1-
2):59?77. Special Issue on Multiword expression:
hard going or plain sailing.
Chiao, Y.-C. and Zweigenbaum, P. (2002). Look-
ing for candidate translational equivalents in spe-
cialized comparable corpora. In Proceedings of
the 40th Annual Meeting of the Association for
Computational Linguistics, volume 2, pages 1?5,
Philadelphia, Pennsylvania. ACL. Also published
in AMIA Annual Symposium 2002, pp. 150?154.
Federico, M., Bertoldi, N., and Cettolo, M. (2008).
Irstlm: an open source toolkit for handling large
scale language models. In INTERSPEECH, pages
1618?1621. ISCA.
Federico, M. and Cettolo, M. (2007). Efficient han-
dling of n-gram language models for statistical
machine translation. In Proceedings of the 45th
Annual Meeting of the Association for Compu-
tational Linguistics, pages 88?95, Prague, Czech
Republic. ACL. 2nd Workshop on Statistical Ma-
chine Translation.
Koehn, P. (2005). Europarl: A parallel corpus for
statistical machine translation. In Proceedings of
the 10th Machine Translation Summit, pages 79?
86, Phuket, Thailand.
Lefever, E. and Hoste, V. (2010a). Construction
of a benchmark data set for cross-lingual word
sense disambiguation. In Proceedings of the 7th
International Conference on Language Resources
and Evaluation, pages 1584?1590, Valetta, Malta.
ELRA.
Lefever, E. and Hoste, V. (2010b). SemEval-2010
Task 3: Cross-lingual word sense disambiguation.
In Proceedings of the 48th Annual Meeting of the
Association for Computational Linguistics, pages
15?20, Uppsala, Sweden. ACL. 5th International
Workshop on Semantic Evaluation.
Loper, E. and Bird, S. (2002). NLTK: the natu-
ral language toolkit. In Proceedings of the ACL-
02 Workshop on Effective tools and methodolo-
gies for teaching natural language processing and
computational linguistics - Volume 1, ETMTNLP
?02, pages 63?70, Stroudsburg, PA, USA. Associ-
ation for Computational Linguistics.
LREC06 (2006). Proceedings of the 5th Interna-
tional Conference on Language Resources and
Evaluation, Genova, Italy. ELRA.
Lynum, A., Marsi, E., Bungum, L., and Gamba?ck,
B. (2012). Disambiguating word translations with
target language models. In Proceedings of the
15th International Conference on Text, Speech
and Dialogue, pages 378?385, Brno, Czech Re-
public. Springer.
Marsi, E., Lynum, A., Bungum, L., and Gamba?ck,
B. (2011). Word translation disambiguation with-
out parallel texts. In Proceedings of the Inter-
national Workshop on Using Linguistic Informa-
tion for Hybrid Machine Translation, pages 66?
74, Barcelona, Spain.
Rapp, R. (1999). Automatic identification of word
translations from unrelated English and German
corpora. In Proceedings of the 37th Annual Meet-
ing of the Association for Computational Linguis-
tics, pages 519?526, Madrid, Spain. ACL.
29
Ren, Z., Lu?, Y., Cao, J., Liu, Q., and Huang, Y.
(2009). Improving statistical machine translation
using domain bilingual multiword expressions. In
Proceedings of the 47th Annual Meeting of the
Association for Computational Linguistics, pages
47?54, Singapore. ACL. Workshop on Multiword
Expressions: Identification, Interpretation, Dis-
ambiguation and Applications.
Sadat, F., Yoshikawa, M., and Uemura, S. (2003).
Learning bilingual translations from comparable
corpora to cross-language information retrieval:
Hybrid statistics-based and linguistics-based ap-
proach. In Proceedings of the 41th Annual Meet-
ing of the Association for Computational Linguis-
tics, pages 57?64, Sapporo, Japan. ACL. 6th
International Workshop on Information Retrieval
with Asian languages; a shorter version published
in ACL Annual Meeting 2003, pp. 141?144.
Sag, I., Baldwin, T., Bond, F., Copestake, A., and
Flickinger, D. (2002). Multiword expressions:
A pain in the neck for NLP. In Gelbukh, A.,
editor, Computational Linguistics and Intelligent
Text Processing: Proceedings of the 3rd Interna-
tional Conference, number 2276 in Lecture Notes
in Computer Science, pages 189?206, Mexico
City, Mexico. Springer-Verlag.
Sharoff, S., Babych, B., and Hartley, A. (2006). Us-
ing collocations from comparable corpora to find
translation equivalents. In LREC06 (2006), pages
465?470.
Sofianopoulos, S., Vassiliou, M., and Tambouratzis,
G. (2012). Implementing a language-independent
MT methodology. In Proceedings of the 50th
Annual Meeting of the Association for Computa-
tional Linguistics, pages 1?10, Jeju, Korea. ACL.
First Workshop on Multilingual Modeling.
Steinberger, R., Pouliquen, B., Widiger, A., Ignat,
C., Erjavec, T., Tufis?, D., and Varga, D. (2006).
The JRC-Acquis: A multilingual aligned parallel
corpus with 20+ languages. In LREC06 (2006),
pages 2142?2147.
30
Proceedings of the Eighth Workshop on Innovative Use of NLP for Building Educational Applications, pages 266?269,
Atlanta, Georgia, June 13 2013. c?2013 Association for Computational Linguistics
Native Language Identification using large scale lexical features
Andre? Lynum
Norwegian University of Science and Technology
Department of Computer and Information and Science
Sem S?lands vei 7-9
NO-7491 Trondheim, Norway
andrely@idi.ntnu.no
Abstract
This paper describes an effort to perform Na-
tive Language Identification (NLI) using ma-
chine learning on a large amount of lexical
features. The features were collected from se-
quences and collocations of bare word forms,
suffixes and character n-grams amounting to
a feature set of several hundred thousand fea-
tures. These features were used to train a lin-
ear Support Vector Machine (SVM) classifier
for predicting the native language category.
1 Introduction
Much effort in Native Language Identification (NLI)
has focused on identifying specific characteristics
of the errors in texts produced by English Second
Language (ESL) learners, like the work presented
in (Bestgen et al, 2012) and (Koppel et al, 2005).
This might be specific spelling errors, syntactic or
morphological mistakes. One motivation for this ap-
proach has been the notion that aspects of the L1 lan-
guage influences which errors and mistakes are pro-
duced by L2 learners, which has guided the model
building towards a smaller number of features and
models which lend themselves to interpretation in
terms of linguistic knowledge.
Research so far has shown mixed support that this
notion of language transfer is the best indicator of
L1 language. While many such features are highly
predictive, features that are usually indicative of the
text topic has shown strong performance when ap-
plied to the NLI task as demonstrated in (Ahn, 2011)
and (Koppel et al, 2005). This is largely lexical fea-
tures such as frequency measures of token, lemma
or character n-grams. There has been some effort
in identifying if this is an artifact of biases in the
available corpora or if it is indeed an indication of
a substantial phenomenon in ESL language use by
different L1 learners (Ahn, 2011).
The approach in this paper extends the use of lexi-
calized features and shows that such lexicalized fea-
tures can by themselves form the basis of a compet-
itive and robust NLI system. This approach entails
possibly abondoning interpretability and other lin-
guistic considerations in order to build an as efficient
as possible system on the NLI classification tasks it-
self. It is also motivated by the possibility that sim-
ple lexicalized features can be applied efficiently in
a task that on the face of it requires the system to
on some level learn differences syntactic relations in
addition to the differences in morphology found in
text produced by the ESL learners.
The experiments presented in this paper are a re-
sult of exploring a range of features and machine
learning approaches. The best systems found used
a combination of bareword features, character n-
grams, suffix and bareword collocations with TF-
IDF weighting. The resulting feature space contains
several hundred thousand features which were used
to train a linear Support Vector Machine (SVM)
classifier. I will first present the features an how
they were extracted in section 2, details of the SVM
model is presented in section 3, the different systems
submitted to the shared task are described in section
4, along with the results in section 5. I have also in-
cluded som discussion of issues encountered during
the development of features and models in section 6.
266
2 Model features
This section describes the features used in the sub-
mitted systems. All the different text features are de-
rived from the surface form of the training and devel-
opment corpora without any additional processing or
annotation. The provided tokenization was used and
no steming, lemmatization or syntactic parsing was
performed on the data.
2.1 Bareword features
The frequency of each token by itself was used as
a feature, without any processing or normalization.
I.e. no stemming was used, and any capitalization
was kept.
2.2 Character n-gram features
These features consists of n-grams of length n.
Character n-grams includes single spaces between
tokens and newlines between lines. The systems
presented in this paper uses n-gram orders 3-6 or 1-
7.
2.3 Bareword directed collocation features
These are frequencies of the collocations of the bare
tokens. The features includes the direction of the
collocation, such that a different feature is generated
if a token is collocated to the left or right of another
token. The collocations are restricted to a window
around the target token, and all the systems in this
paper uses a window of one token making this fea-
ture identical to token bigrams.
2.4 Suffix directed collocation features
These features are constructed in the same man-
ner as the directed bareword collocation features de-
scribed in 2.3 except that they are based on the 4-
character long suffix of each token.
2.5 Feature filtering and TF-IDF weighting
Features that are presumed to be uninformative are
filtered out before classifier training and prediction.
Features with a document count less than a cer-
tain limit varying between the systems were ignored,
along with features which appears in more than 50%
of the documents, i.e. with a Document Frequency
(DF) over 0.5.
All the features based on character n-gram or
word counts from the corpus was scaled using sub-
linear Term Frequency (TF) scaling as described in
for exeample (Manning et al, 2008). In addition the
IDF was adjusted using add-one smoothing, i.e. one
was added to all DF counts1.
2.6 Proficiency and prompt features
Both proficiency value and prompt value for the doc-
ument are used as features in the form of 0? 1 indi-
cators for the possible values.2
3 SVM classification
The system uses an SVM multiclass classifier. The
SVM classifier was trained without a kernel, i.e. lin-
ear, and with the cost parameter optimized through
cross validation. SVM was used since it can train
models with a large number of features efficiently,
and has been successsfully used to construct high-
dimensional models in many NLP tasks (Joachims,
1998), including NLI (Tsur and Rappoport, 2007;
Koppel et al, 2005).
The cost hyperparameter of the SVM models was
optimized over 5-fold cross validation on the train-
ing set.
4 Systems submitted
Four systems were submitted to the shared task. Of
these three share the same feature types and differ in
the DF cutoff used to prune individual features. The
fourth system adds additional character n-grams to
the features found in the other three systems.
The first three systems are based on the following
features:
? Weighted token counts.
? Weighted character n-grams of orders 3
through 6.
? Prompt and proficiency values.
1The documentation of the software used for feature ex-
traction notes that this smoothing is mainly for numerical con-
siderations, i.e. avoiding division by zero errors (http://scikit-
learn.org/stable/modules/generated/
sklearn.feature extraction.text.TfidfTransformer.html)
2While the prompt value is included in the submitted sys-
tems it was not found to be an effective feature and did not have
any effect on the performance of the systems. Its inclusion in
the feature set is an oversight.
267
? Weighted directed token collocation counts
with a window size of one, i.e. token bigrams.
? Weighted directed 4 character suffix colloca-
tion counts with a window size of 1, i.e. 4 char-
acter suffix bigrams.
The three systems vary in the DF cutoff with no
cutoff in systmem 1, a cutoff of 5 in system 2 and a
cutoff of 10 in system 3.
System 4 uses different cutoffs for different fea-
tures; 10 for token and character n-gram frequencies
and 5 for the token and suffix collocation features.
It also uses character n-grams of order 1 through 7
instead of 3 through 6.
Table 1 show the performance of the four systems
on the development data set in addition to the feature
count for each of the systems. The table shows both
classification accuracy on the development data set
in addition to average and standard deviation for 10-
fold cross validation scores over the combined train-
ing and development data sets.
The software used to generate the systems
is available at https://github.com/andrely/NLI2013-
submission.
5 Results
The final results shows competitive performance
from all the submitted systems with little variation
in performance between them. Both test set accura-
cies and average 10-fold cross validation scores with
standard deviation for the shared tasks fixed folds
are given in table 2.
6 Some impressions
Performance stability: When developing the vari-
ous systems the performance was always robust for
the features described in this paper and variations on
them. There were little variation in 5-fold cross vali-
dation scores, or difference between cross validation
and held out scores. This was taken as an indication
that the system was not being overfitted despite the
amount of and specificity of the features.
Feature comparison: All the lexical features
used were highly predictive also in isolation, and
could be used for a competetive system by them-
selves.
POS tags and lemmatization: Similar features
based on POS tags or lemmatized tokens turned out
to be much less predictive than the lexical features.
This could be caused by low quality of such annota-
tion on data with many spelling or other errors.
Acknowledgments
The Python software package Scikit-learn3 (Pe-
dregosa et al, 2011) and libSVM4 (Chang and Lin,
2011) was used to implement the systems described
in this paper.
References
Charles S. Ahn. 2011. Automatically Detecting Authors?
Native Language. Master?s thesis, Naval Postgraduate
School, Monterey, CA.
Yves Bestgen, Sylviane Granger, and Jennifer Thewis-
sen. 2012. Error Patterns and Automatic L1 Identifi-
cation. In Scott Jarvis and Scott A. Crosley, editors,
Approaching Language Transfer through Text Classi-
fication, pages 127?153. Multilingual Matters.
Chih-Chung Chang and Chih-Jen Lin. 2011. LIB-
SVM: A library for support vector machines.
ACM Transactions on Intelligent Systems and Tech-
nology, 2:27:1?27:27. Software available at
http://www.csie.ntu.edu.tw/ cjlin/libsvm.
Thorsten Joachims. 1998. Text categorization with su-
port vector machines: Learning with many relevant
features. In Proceedings of the 10th European Con-
ference on Machine Learning, ECML ?98, pages 137?
142, London, UK, UK. Springer-Verlag.
Moshe Koppel, Jonathan Schler, and Kfir Zigdon. 2005.
Automatically determining an anonymous author?s na-
tive language. Intelligence and Security Informatics,
pages 41?76.
Christopher D. Manning, Prabhakar Raghavan, and Hin-
rich Schu?tze. 2008. Introduction to Information Re-
trieval. Cambridge University Press, New York, NY,
USA.
F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel,
B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer,
R. Weiss, V. Dubourg, J. Vanderplas, A. Passos,
D. Cournapeau, M. Brucher, M. Perrot, and E. Duches-
nay. 2011. Scikit-learn: Machine learning in Python.
Journal of Machine Learning Research, 12:2825?
2830.
Oren Tsur and Ari Rappoport. 2007. Using Classifier
Features for Studying the Effect of Native Language
3http://scikit-learn.org/
4http://www.csie.ntu.edu.tw/ cjlin/libsvm/
268
System # of features Dev. 10-fold accuracy Dev. accuracy
1 867479 0.841? 0.010 0.827
2 439063 0.839? 0.012 0.824
3 282797 0.838? 0.012 0.823
4 510191 0.836? 0.011 0.824
Table 1: Performance and number of features for the submitted systems. Performance is shown as accuracy on the
development data set and 10-fold cross validation on the training and test set. The feature counts shown are for the
final systems trained on the training and development data sets. The systems are described in section 4.
System Accuracy 10-fold accuracy
1 0.833 0.839? 0.013
2 0.834 0.837? 0.011
3 0.833 0.835? 0.012
4 0.830 0.835? 0.012
Table 2: Final accuracy scores on the test set and 10-fold cross validation for the submitted systems. The systems are
described in section 4.
on the Choice of Written Second Language Words.
In Proceedings of the Workshop on Cognitive Aspects
of Computational Language Acquisition, pages 9?16,
Prague, Czech Republic, June. Association for Com-
putational Linguistics.
269
