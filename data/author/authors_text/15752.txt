Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural
Language Learning, pages 512?522, Jeju Island, Korea, 12?14 July 2012. c?2012 Association for Computational Linguistics
Translation Model Based Cross-Lingual Language Model Adaptation: from
Word Models to Phrase Models
Shixiang Lu, Wei Wei, Xiaoyin Fu, and Bo Xu
Interactive Digital Media Technology Research Center
Institute of Automation, Chinese Academy of Sciences
95 Zhongguancun East Road, Haidian District, Beijing 100190, China
{shixiang.lu,wei.wei.media,xiaoyin.fu,xubo}@ia.ac.cn
Abstract
In this paper, we propose a novel translation
model (TM) based cross-lingual data selec-
tion model for language model (LM) adapta-
tion in statistical machine translation (SMT),
from word models to phrase models. Given
a source sentence in the translation task, this
model directly estimates the probability that
a sentence in the target LM training corpus
is similar. Compared with the traditional ap-
proaches which utilize the first pass translation
hypotheses, cross-lingual data selection mod-
el avoids the problem of noisy proliferation.
Furthermore, phrase TM based cross-lingual
data selection model is more effective than
the traditional approaches based on bag-of-
words models and word-based TM, because
it captures contextual information in model-
ing the selection of phrase as a whole. Ex-
periments conducted on large-scale data set-
s demonstrate that our approach significantly
outperforms the state-of-the-art approaches on
both LM perplexity and SMT performance.
1 Introduction
Language model (LM) plays a critical role in sta-
tistical machine translation (SMT). It seems to be
a universal truth that LM performance can always
be improved by using more training data (Brants et
al., 2007), but only if the training data is reason-
ably well-matched with the desired output (Moore
and Lewis, 2010). It is also obvious that among the
large training data the topics or domains of discus-
sion will change (Eck et al2004), which causes the
mismatch problems with the translation task. For
this reason, most researchers preferred to select sim-
ilar training data from the large training corpus in the
past few years (Eck et al2004; Zhao et al2004;
Kim, 2005; Masskey and Sethy, 2010; Axelrod et
al., 2011). This would empirically provide more ac-
curate lexical probabilities, and thus better match the
translation task at hand (Axelrod et al2011).
Many previous data selection approaches for LM
adaptation in SMT depend on the first pass transla-
tion hypotheses (Eck et al2004; Zhao et al2004;
Kim, 2005; Masskey and Sethy, 2010), they selec-
t the sentences which are similar to the translation
hypotheses. These schemes are overall limited by
the quality of the translation hypotheses (Tam et al
2007 and 2008), and better initial translation hy-
potheses lead to better selected sentences (Zhao et
al., 2004). However, while SMT has achieved a
great deal of development in recent years, the trans-
lation hypotheses are still far from perfect (Wei and
Pal, 2010), which have many noisy data. The noisy
translation hypotheses mislead data selection pro-
cess (Xu et al2001; Tam et al2006 and 2007;
Wei and Pal, 2010), and thus take noisy data into the
selected training data, which causes noisy prolifera-
tion and degrades the performance of adapted LM.
Furthermore, traditional approaches for LM adap-
tation are based on bag-of-words models and con-
sidered to be context independent, despite of their
state-of-the-art performance, such as TF-IDF (Eck et
al., 2004; Zhao et al2004; Hildebrand et al2005;
Kim, 2005; Foster and Kuhn, 2007), centroid simi-
larity (Masskey and Sethy, 2010), and cross-lingual
similarity (CLS) (Ananthakrishnan et al2011a).
They all perform at the word level, exact only ter-
512
m matching schemes, and do not take into account
any contextual information when modeling the se-
lection by single words in isolation, which degrade
the quality of selected sentences.
In this paper, we argue that it is beneficial to mod-
el the data selection based on the source transla-
tion task directly and capture the contextual infor-
mation for LM adaptation. To this end, we propose
a more principled translation model (TM) based
cross-lingual data selection model for LM adapta-
tion, from word models to phrase models. We as-
sume that the data selection should be performed
by the cross-lingual model and at the phrase lev-
el. Given a source sentence in the translation task,
this model directly estimates the probability before
translation that a sentence in the target LM train-
ing corpus is similar. Therefore, it does not require
the translation task to be pre-translation as in mono-
lingual adaptation, and can address the problem of
noisy proliferation.
To the best of our knowledge, this is the first
extensive and empirical study of using phrase T-
M based cross-lingual data selection for LM adap-
tation. This model learns the transform probabili-
ty of a multi-term phrase in a source sentence giv-
en a phrase in the target sentence of LM training
corpus. Compared with bag-of-words models and
word-based TM that account for selecting single
words in isolation, this model performs at the phrase
level and captures some contextual information in
modeling the selection of phrase as a whole, thus it
is potentially more effective. More precise data se-
lection can be determined for phrases than for word-
s. In this model, we propose a linear ranking model
framework to further improve the performance, re-
ferred to the linear discriminant function (Duda et
al., 2001; Collins, 2002; Gao et al2005) in pattern
classification and information retrieval (IR), where
different models are incorporated as features, as we
will show in our experiments.
Unlike the general TM in SMT, we explore the
use of TextRank algorithm (Mihalcea et al2004)
to identify and eliminate unimportant words (e.g.,
non-topical words, common words) for corpus pre-
processing, and construct TM by important words.
This reduces the average number of words in cross-
lingual data selection model, thus improving the ef-
ficiency. Moreover, TextRank utilizes the contex-
t information of words to assign term weights (Lee
et al2008), which makes phrase TM based cross-
lingual data selection model play its advantage of
capturing the contextual information, thus further
improving the performance.
The remainder of this paper is organized as fol-
lows. Section 2 introduces the related work of
LM adaptation. Section 3 presents the framework
of cross-lingual data selection for LM adaptation.
Section 4 describes our proposed TM based cross-
lingual data selection model: from word models to
phrase models. In section 5 we present large-scale
experiments and analyses, and followed by conclu-
sions and future work in section 6.
2 Related Work
TF-IDF and cosine similarity have been widely used
for LM adaptation (Eck et al2004; Zhao et al
2004; Hildebrand et al2005; Kim, 2005; Foster
and Kuhn, 2007). Masskey and Sethy (2010) se-
lected the auxiliary data by computing centroid sim-
ilarity score to the centroid of the in-domain data.
The main idea of these methods is to select the sen-
tences which are similar to the first pass translation
hypotheses or in-domain corpus from the large LM
training corpus, and estimate the bias LM for SMT
system to improve the translation quality.
Tam et al2007 and 2008) proposed a bilingual-
LSA model for LM adaptation. They integrated
the LSA marginal into the target generic LM using
marginal adaptation which minimizes the Kullback-
Leibler divergence between the adapted LM and the
generic LM. Ananthakrishnan et al2011a) pro-
posed CLS to bias the count and probability of cor-
responding n-gram through weighting the LM train-
ing corpus. However, these two cross-lingual ap-
proaches focus on modify LM itself, which are d-
ifferent from data selection method for LM adap-
tation. In our comparable experiments, we apply
CLS for the first time to the task of cross-lingual
data selection for LM adaptation. Due to lack of
smoothing measure for sparse vector representation
in CLS, the similarity computation is not accurate
which degrades the performance of adapted LM. To
avoid this, we add smoothing measure like TF-IDF,
called CLSs, as we will discuss in the experiments.
Snover et al2008) used a word TM based CLIR
513
system (Xu et al2001) to select a subset of tar-
get documents comparable to the source document
for adapting LM. Because of the data sparseness in
the document state and it operated at the document
level, this model selected large quantities of irrele-
vant text, which may degrade the adapted LM (Eck
et al2004; Ananthakrishnan et al2011b). In our
word TM based cross-lingual data selection model,
we operate at the sentence level and add the smooth-
ing mechanism by integrating with the background
word frequency model, and these can significantly
improve the performance. Axelrod et al2011)
proposed a bilingual cross-entropy difference to se-
lect data from parallel corpus for domain adaptation
which captures the contextual information slightly,
and outperformed monolingual cross-entropy differ-
ence (Moore and Lewis, 2010), which first shows the
advantage of bilingual data selection. However, its
performance depends on the parallel in-domain cor-
pus which is usually hard to find, and its application
is assumed to be limited.
3 Cross-Lingual Data Selection for
Language Model Adaptation
Our LM adaptation is an unsupervised similar train-
ing data selection guided by TM based cross-lingual
data selection model. For the source sentences in
the translation task, we estimate a new LM, the bias
LM, from the corresponding target LM training sen-
tences which are selected as the similar sentences.
Since the size of the selected sentences is small, the
corresponding bias LM is specific and more effec-
tive, giving high probabilities to those phrases that
occur in the desired output translations.
Following the work of (Zhao et al2004; Snover
et al2008), the generic LM Pg(wi|h) and the bias
LM Pb(wi|h) are combined using linear interpola-
tion as the adapted LM Pa(wi|h), which is shown to
improve the performance over individual model,
Pa(wi|h) = ?Pg(wi|h) + (1? ?)Pb(wi|h) (1)
where the interpolation factor ? can be simply esti-
mated using the Powell Search algorithm (Press et
al., 1992) via cross-validation.
Our work focuses on TM based cross-lingual data
selection model, from word model to phrase models,
and the quality of this model is crucial to the perfor-
mance of adapted LM.
4 Translation Model for Cross-Lingual
Data Selection (CLTM)
Let Q = q1, . . . ,qj be a source sentence in the
translation task and S = w1, . . . ,wi be a sentence
in the general target LM training corpus, thus cross-
lingual data selection model can be framed proba-
bilistically as maximizing the P (S|Q) . By Bayes?
rule,
P (S|Q) =
P (S)P (Q|S)
P (Q)
(2)
where the prior probability P (S) can be viewed as
uniform, and the P (Q) is constant across all sen-
tences. Therefore, selecting a sentence to maximize
P (S|Q) is equivalent to selecting a sentence that
maximizes P (Q|S).
4.1 Word-Based Translation Model for
Cross-Lingual Data Selection (CLWTM)
4.1.1 Cross-Lingual Sentence Selection Model
Following the work of (Xu et al2001; Snover et al
2008), CLWTM can be described as
P (Q|S) =
?
q?Q
P (q|S) (3)
P (q|S) = ?P (q|Cq)+ (1??)
?
w?S
P (q|w)P (w|S)
(4)
where ? is the interpolation weight empirically set
as a constant1, P (q|w) is the word-based TM which
is estimated by IBM Model 1 (Brown et al1993)
from the parallel corpus, P (q|Cq) and P (w|S) are
the un-smoothed background and sentence model,
respectively, estimated using maximum likelihood
estimation (MLE) as
P (q|Cq) =
freq(q, Cq)
|Cq|
(5)
P (w|S) =
freq(w, S)
|S|
(6)
where Cq refers to the translation task, freq(q, Cq)
refers to the number of times q occurs in Cq,
freq(w, S) refers to the number of times w occurs
in S, and |Cq| and |S| are the sizes of the translation
task and the current target sentence, respectively.
1As in Xu et al2001), a value of 0.3 was used for ?.
514
4.1.2 Ranking Candidate Sentences
Because of the data sparseness in the sentence state
which degrades the model, Equation (6) does not
perform well in our data selection experiments. In-
spired by the work of (Berger et al1999) in IR, we
make the following smoothing mechanism:
P (q|S) = ?P (q|Cq)+(1??)
?
w?S
P (q|w)Ps(w|S)
(7)
Ps(w|S) = ?P (w|Cs) + (1? ?)P (w|S) (8)
P (w|Cs) =
freq(w,Cs)
|Cs|
(9)
where P (w|Cs) is the un-smoothed background
model, estimated using MLE as Equation (5), Cs
refers to the LM training corpus and |Cs| refers to
its size. Here, ? is interpolation weight; notice that
letting ? = 0 in Equation (8) reduces the model to
the un-smoothed model in Equation (4).
4.2 Phrase-Based Translation Model for
Cross-Lingual Data Selection (CLPTM)
4.2.1 Cross-Lingual Sentence Selection Model
The phrase-based TM (Koehn et al2003; Och and
Ney, 2004) has shown superior performance com-
pared to the word-based TM. In this paper, the
goal of phrase-based TM is to transfer S into Q.
Rather than transferring single words in isolation,
the phrase model transfers one sequence of word-
s into another sequence of words, thus incorporat-
ing contextual information. Inspired by the work
of web search (Gao et al2010) and question re-
trieval in community question answer (Q&A) (Zhou
et al2011), we assume the following generative
process: first the sentence S is broken into K non-
empty word sequences w1, . . . ,wk, then each is
transferred into a new non-empty word sequences
q1, . . . ,qk, and finally these phrases are permutat-
ed and concatenated to form the sentence Q, where
q and w denote the phrases or consecutive sequence
of words.
To formulate this generative process, let U denote
the segmentation of S into K phrases w1, . . . ,wk,
and let V denote the K phrases q1, . . . ,qk, we refer
to these (wi,qi) pairs as bi-phrases. Finally, let M
denote a permutation ofK elements representing the
final ranking step.
Next we place a probability distribution over
rewrite pairs. Let B(S,Q) denote the set of U ,
V , M triples that transfer S into Q. Here we as-
sume a uniform probability over segmentations, so
the phrase-based selection probability can be formu-
lated as
P (Q|S) ?
?
(U,V,M)?
B(S,Q)
P (V |S,U) ? P (M |S,U, V )
(10)
Then, we use the maximum approximation to the
sum:
P (Q|S) ? max
(U,V,M)?
B(S,Q)
P (V |S,U) ? P (M |S,U, V )
(11)
Although we have defined a generative model for
transferring S into Q, our goal is to calculate the
ranking score function over existing Q and S. How-
ever, this model can not be used directly for sen-
tence ranking becauseQ and S are often of different
lengths, the length of S is almost 1.5 times to that of
Q in our corpus, leaving many words in S unaligned
to any word in Q. This is another key difference be-
tween our task and SMT. As pointed out by the pre-
vious work (Berger and Lafferty, 1999; Gao et al
2010; Zhou et al2011), sentence-query selection
requires a distillation of the sentence, while selec-
tion of natural language tolerates little being thrown
away. Thus we restrict our attention to those key sen-
tence words that form the distillation of S, do not
consider the unaligned words in S, and assume that
Q is transfered only from the key sentence words.
In this paper, the key sentence words are identi-
fied via word alignment. Let A = a1 . . . aJ be the
?hidden? word alignment, which describes a map-
ping from a term position j in Q to a word position
aj in S. We assume that the positions of the key
sentence words are determined by the Viterbi align-
ment A?, which can be obtained using IBM Model 1
(Brown et al1993) as follows:
A? = argmax
A
P (Q,A|S)
= argmax
A
{
P (J |I)
J?
j=1
P (qj |waj )
}
=
[
argmax
aj
P (qj |waj )
]J
j=1
(12)
515
Given A?, when scoring a given Q/S pair, we re-
strict our attention to those U , V , M triples that are
consistent with A?, which we denote as B(S,Q, A?).
Here, consistency requires that if two words are
aligned in A?, then they must appear in the same bi-
phrase (wi,qi). Once the word alignment is fixed,
the final permutation is uniquely determined, so we
can safely discard that factor. Then Equation (11)
can be written as
P (Q|S) ? max
(U,V,M)?
B(S,Q,A?)
P (V |S,U) (13)
For the sole remaining factor P (V |S,U), we
assume that a segmented queried question V =
q1, . . . ,qk is generated from left to right by transfer-
ring each phrase w1, . . . ,wk independently, as fol-
lows:
P (V |S,U) =
K?
k=1
P (qk|wk) (14)
where P (qk|wk) is a phrase translation probability
computed from the parallel corpus, which can be es-
timated in two ways (Koehn et al2003; Och and
Ney, 2004): relative frequency and lexical weight-
ing, and has two format: phrase translation proba-
bility and lexical weight probability.
In order to find the maximum probability assign-
ment P (Q|S) efficiently, we use a dynamic pro-
gramming approach, somewhat similar to the mono-
tone decoding algorithm described in the work (Och,
2002). We consider quantity aj as the maximal
probability of the most likely sequence of phrases
in S covering the first j words in Q, therefore the
probability can be calculated using the following re-
cursion:
step (1). Initialization:
?0 = 1 (15)
step (2). Induction:
?j =
?
j?<j,q=qj?+1...qj
{
?j?P (q|wq)
}
(16)
step (3). Total:
P (Q|S) = ?J (17)
4.2.2 Ranking Candidate Sentences
However, directly using the phrase-based TM, com-
puted in Equations (15) to (17), to rank the candi-
date sentences does not perform well. Inspired by
the linear discriminant function (Duda et al2001;
Collins, 2002; Gao et al2005) in pattern classifi-
cation and IR, we therefore propose a linear rank-
ing model framework for cross-lingual data selec-
tion model in which different models are incorporat-
ed as features.
We consider the linear ranking model as follows:
Score(Q,S) = ?T ?H(Q,S)
=
N?
n=1
?nhn(Q,S) (18)
where the model has a set of N features, and each
feature is an arbitrary function that maps (Q|S) to a
real value, i.e., H(Q,S) ? R. ?n for n = 1 . . . N
is the corresponding parameters of each feature,
and we optimize these parameters using the Pow-
ell Search algorithm (Press et al1992) via cross-
validation.
The used features in the linear ranking model are
as follows:
? Phrase translation feature (PT):
hPT (Q,S,A) = logP (Q|S), where P (Q|S)
is computed using Equations (15) to (17), and
P (qk|wk) is phrase translation probability.
? Inverted phrase translation feature (IPT):
hIPT (S,Q,A) = logP (S|Q), where P (S|Q)
is computed using Equations (15) to (17), and
P (wk|qk) is inverted phrase translation proba-
bility.
? Lexical weight feature (LW): hLW (Q,S,A) =
logP (Q|S), where P (Q|S) is computed using
Equations (15) to (17), and P (qk|wk) is lexical
weight probability.
? Inverted lexical weight feature (ILW):
hILW (S,Q,A) = logP (S|Q), where
P (S|Q) is computed using Equations (15) to
(17), and P (wk|qk) is inverted lexical weight
probability.
? Unaligned word penalty feature (UWP):
hUWP (Q,S,A), which is defined as the ratio
between the number of unaligned terms and
the total number of terms in Q.
516
? Word-based translation feature (WT):
hWT (Q,S,A) = logP (Q|S), where P (Q|S)
is the word-based TM defined by Equations (3)
and (7).
4.3 Eliminating Unimportant Words (EUW)
To improve the efficiency of cross-lingual data se-
lection process, we consider the translation task, the
LM training corpus and the parallel corpus in our
task are constructed by the key words or importan-
t words, and thus construct TM by the key words
or important words, which is another key difference
between our task and SMT. We identify and elimi-
nate unimportant words, somewhat similar to Q&A
retrieval (Lee et al2008; Zhou et al2011). Thus,
the average number of words (the total word number
inQ and S) in cross-lingual sentence selection mod-
el would be minimized naturally, and the efficiency
of cross-lingual data selection would be improved.
In this paper, we adopt a variant of TextRank
algorithm (Mihalcea and Tarau, 2004), a graph-
based ranking model for key word extraction which
achieves state-of-the-art accuracy. It identifies and
eliminates unimportant words from the corpus, and
assumes that a word is unimportant if it holds a rela-
tively low significance in the corpus. Compared with
the traditional approaches, such as TF-IDF, Tex-
tRank utilizes the context information of words to
assign term weights (Lee et al2008), so it further
improves the performance of CLPTM, as we will
show in the experiments.
Following the work of (Lee et al2008), the rank-
ing algorithm proceeds as follows. First, all the
words in a given document are added as vertices in
a graph. Then edges are added between words (ver-
tices) if the words co-occur in a fixed-sized window.
The number of co-occurrences becomes the weight
of an edge. When the graph is constructed, the score
of each vertex is initialized as 1, and the PageRank
based ranking algorithm is run on the graph itera-
tively until convergence. The TextRank score Rkwi,D
of a word wi in document D at kth iteration is de-
fined as follows:
Rkwi,D = (1?d)+d?
?
?j:(i,j)?G
ei,j
?
?l:(j,l)?G ej,l
Rk?1wj ,D
(19)
where d is a damping factor usually set as a constan-
t2, and ei,j is an edge weight between wi and wj .
In our experiments, we manually set the propor-
tion to be removed as 25%, that is to say, 75% of
total words in the documents would be remained as
the important words.
5 Experiments
We measure the utility of our proposed LM adap-
tation approach in two ways: (a) comparing refer-
ence translations based perplexity of adapted LMs
with the generic LM, and (b) comparing SMT per-
formance of adapted LMs with the generic LM.
5.1 Corpus and Tasks
We conduct experiments on two Chinese-to-English
translation tasks: IWSLT-07 (dialogue domain) and
NIST-06 (news domain).
IWSLT-07. The bilingual training corpus comes
from BTEC3 and CJK4 corpus, which contain-
s 3.82K sentence pairs with 3.0M/3.1M Chi-
nese/English words. The LM training corpus is from
the English side of the parallel data (BTEC, CJK,
and CWMT20085), which consists of 1.34M sen-
tences and 15.2M English words. The test set is
IWSLT-07 test set which consists of 489 sentences,
and the development set is IWSLT-05 test set which
consists of 506 sentences.
NIST-06. The bilingual training corpus comes
from Linguistic Data Consortium (LDC)6, which
consists of 3.4M sentence pairs with 64M/70M Chi-
nese/English words. The LM training corpus is from
the English side of the parallel data as well as the
English Gigaword corpus7, which consists of 11.3M
sentences. The test set is 2006 NIST MT Evaluation
test set which consists of 1664 sentences, and the de-
velopment set is 2005 NIST MT Evaluation test set
which consists of 1084 sentences.
2As in Lee et al2008), a value of 0.85 was used for d.
3Basic Traveling Expression Corpus
4China-Japan-Korea
5The 4th China Workshop on Machine Translation
6LDC2002E18, LDC2002T01, LDC2003E07, LD-
C2003E14, LDC2003T17, LDC2004T07, LDC2004T08,
LDC2005T06, LDC2005T10, LDC2005T34, LDC2006T04,
LDC2007T09
7LDC2007T07
517
(a)IWSLT-07 (b)NIST-06
Figure 1: English reference translations based perplexity of adapted LMs vs. the size of selected training data with
different approaches on two development sets.
5.2 Perplexity Analysis
We randomly divide the development set into five
subsets and conduct 5-fold cross-validation experi-
ments. In each trial, we tune the parameter ? in E-
quation (1) and parameter ? in Equation (18) with
four of five subsets and then apply it to one re-
maining subset. The experiments reported below are
those averaged over the five trials.
We estimate the generic 4-gram LM with the en-
tire LM training corpus as the baseline. Then, we se-
lect the top-N sentences which are similar to the de-
velopment set, estimate the bias 4-gram LMs (with
n-gram cutoffs tuned as above) with these selected
sentences, and interpolate with the generic 4-gram
LM as the adapted LMs. All the LMs are estimated
by the SRILM toolkit (Stolcke, 2002). Perplexity is
a metric of LM performance, and the lower perplexi-
ty value indicates the better performance. Therefore,
we estimate the perplexity of adapted LMs accord-
ing to English reference translations.
Figure 1 shows the perplexity of adapted LMs vs.
the size of selected data. In this paper, we choose
TF-IDF as the foundation of our solution since TF-
IDF has gained the state-of-the-art performance for
LM adaptation (Eck et al2004; Hildebrand et al
2005; Kim, 2005; Foster and Kuhn, 2007). CLS
refers to the cross-lingual similarity of (Ananthakr-
ishnan et al2011a), and CLSs is our proposed im-
proved algorithm on CLS with optimization mea-
sure like TF-IDF. CLWTM(? = 0) refers to S-
nover et al2008), which is the un-smooth ver-
Task Method Perplexity Reduction
IWSLT-07
Baseline 524.1 ?
TF-IDF 471.4 10.06%
CLS 475.7 9.23%
CLSs 468.9 10.53%
CLWTM(? = 0) 463.5 11.56%
CLWTM 451.5 13.85%
CLPTM(l = 4) 435.3 16.94%
NIST-06
Baseline 398.3 ?
TF-IDF 346.2 13.08%
CLS 351.6 11.72%
CLSs 340.9 14.41%
CLWTM(? = 0) 341.1 14.36%
CLWTM 332.7 16.47%
CLPTM(l = 4) 319.2 19.86%
Table 1: English reference translations based perplexi-
ty of adapted LMs with different approaches on two test
sets, with the top 8K sentences on IWSLT-07 and top 16K
sentences on NIST-06, respectively.
sion of our proposed CLWTM in the document s-
tate. CLPTM(l = 4) is our proposed CLPTM with
a maximum phrase length of four, and we score the
target sentences by the highest scoring Q/S pair.
The results in Figure 1 indicate that English ref-
erence translations based perplexity of adapted LMs
decreases consistently with increase of the size of
selected top-N sentences, and increases consistent-
ly after a certain size in all approaches. Therefore,
proper size of similar sentences with the transla-
tion task makes the adapted LM perform well, but
if too many noisy data are taken into the selected
sentences, the performance becomes worse. Similar
observations have been done by (Eck et al2004;
518
Task # Method BLEU
IWSLT-07
1 Baseline 33.60
2 TF-IDF 34.14
3 CLS 34.08
4 CLSs 34.18
5 CLWTM(? = 0) 34.22
6 CLWTM 34.30
7 CLPTM(l = 4) 34.49
NIST-06
8 Baseline 29.15
9 TF-IDF 29.78
10 CLS 29.73
11 CLSs 29.84
12 CLWTM(? = 0) 29.87
13 CLWTM 29.93
14 CLPTM(l = 4) 30.17
Table 2: Comparison of SMT performance (p < 0.05)
with different approaches for LM adaptation on two test
sets.
Axelrod et al2011). Furthermore, it is comforting
that our approaches (CLWTM and CLPTM(l = 4))
performs better and are more stable than other ap-
proaches.
According to the perplexity results in Figure 1,
we select the top 8K sentences on IWSLT-07 and
top 16K sentences on NIST-06 which are similar to
the test set for adapting LM, respectively. Table 1
shows English reference translations based perplex-
ity of adapted LMs on two test sets. Our approach-
es have significantly reduction in perplexity com-
pared with other approaches, and the results indicate
that adapted LMs are significantly better predictors
of the corresponding translation task at hand than
the generic LM. We use these adapted LMs for next
translation experiments to show the detailed perfor-
mance of selected training data for LM adaptation.
5.3 Translation Experiments
We carry out translation experiments on the test set
by hierarchical phrase-based (HPB) SMT (Chiang,
2005 and 2007) system to demonstrate the utility of
LM adaptation on improving SMT performance by
BLEU score (Papineni et al2002). The generic LM
and adapted LMs are estimated as above in perplexi-
ty analysis experiments. We use minimum error rate
training (Och, 2003) to tune the feature weights of
HPB for maximum BLEU score on the development
set with serval groups of different start weights.
Table 2 shows the main translation results on two
Task Translation Hypotheses BLEU
IWSLT-07
First Pass 34.14
Second Pass 34.31
NIST-06
First Pass 29.78
Second Pass 29.91
Table 3: The impact of noisy data in the translation hy-
potheses on the performance of LM adaptation.
test sets, and the improvements are statistically sig-
nificant at the 95% confidence interval with respect
to the baseline. From the comparison results, we get
some clear trends:
(1) Cross-lingual data selection model outper-
forms the traditional approaches which utilize the
first pass translation hypotheses (row 4 vs. row2;
row 11 vs. row 9), but the detailed impact of noisy
data in the translation hypotheses on data selection
will be shown in the next section (section 5.4).
(2) CLWTM significantly outperforms CLSs (row
6 vs. row 4; row 13 vs. row 11), we suspect that
word-based TM makes more accurate cross-lingual
data selection model than single cross-lingual pro-
jection (Ananthakrishnan et al2011a).
(3) Compared with (Snover et al2008), adding
the smoothing mechanism in the sentence state for
CLWTM significantly improves the performance
(row 6 vs. row 5; row 13 vs. row 12).
(4) Phrase-based TM (CLPTM) significantly out-
performs the state-of-the-art approaches based on
bag-of-words models and word-based TM (row 7 vs.
row 2, row 4, row 5 and row 6; row 14 vs. row 9,
row 11, row 12 and row 13).
5.4 Impact of Noisy Data in the Translation
Hypotheses
The experiment results in Table 2 indicate the sec-
ond pass translation hypotheses (row 2 and row 9)
made by TF-IDF are better than the first pass trans-
lation hypotheses (row 1 and row 8), so we consid-
er that these translations have less noisy data. Thus,
they were considered as the new translation hypothe-
ses (the second pass) to select the similar sentences
for LM adaptation by TF-IDF.
Table 3 shows the impact of noisy data in the
translation hypotheses on the performance of adapt-
ed LMs. The observed improvement suggests that
better initial translations which have less noisy data
519
Task Phrase Length BLEU
IWSLT-07
l = 1 34.33
l = 2 34.44
l = 3 34.49
l = 4 34.49
NIST-06
l = 1 29.97
l = 2 30.07
l = 3 30.14
l = 4 30.17
Table 4: The impact of phrase length in CLPTM on the
performance of LM adaptation, and the maximum phrase
length is four.
lead to better adapted LMs, and thereby better sec-
ond iteration translations. Therefore, it is advisable
to use cross-lingual data selection for LM adaptation
in SMT, which can address the problem of noisy pro-
liferation.
5.5 Impact of Phrase Length
The results in Table 4 show that longer phrases do
yield some visible improvement up to the maximum
length of four. This may suggest that some proper-
ties captured by longer phrases are also captured by
other features. The performances when the phrase
length is 1 are better than that of single word-based
TM (row 6 and row 13 in Table 2), this suspec-
t that the features in our linear ranking model are
useful. However, it will be instructive to explore the
methods of preserving the improvement generated
by longer phrase when more features are incorporat-
ed in the future work.
5.6 Impact of Eliminating Unimportant Words
Table 5 shows the results of EUW by TextRank al-
gorithm on the performance of CLTM for LM adap-
tation. Initial represents that we do not eliminate
unimportant words. Average number represents the
average number of words (the total word number in
Q and S) in cross-lingual data selection model. The
average number is reduced when unimportant words
are eliminated, from 19 to 12 on IWSLT-07 and from
37 to 24 on NIST-06, respectively. This makes the
cross-lingual data selection process become more
efficient. In CLWTM, the performance with EUW
is basically the same with that of the initial state; but
in CLPTM, EUW outperforms the initial state be-
cause TextRank algorithm utilizes the context infor-
Task Method
Average
BLEU
Number CLWTM
CLPTM
(l = 4)
IWSLT-07
Initial 19 34.31 34.47
EUW 12 34.30 34.49
NIST-06
Initial 37 29.91 30.12
EUW 24 29.93 30.17
Table 5: The impact of eliminating unimportant words
by TextRank algorithm on the performance of CLTM for
LM adaptation.
mation of words when assigning term weights, thus
makeing CLPTM play its advantage of capturing the
contextual information.
6 Conclusions and Future Work
In this paper, we propose a novel TM based cross-
lingual data selection model for LM adaptation in
SMT, from word models to phrase models, and aims
to find the LM training corpus which are similar to
the translation task at hand. Unlike the general TM
in SMT, we explore the use of TextRank algorithm
to identify and eliminate unimportant words for cor-
pus preprocessing, and construct TM by importan-
t words. Compared with the traditional approach-
es which utilize the first pass translation hypothe-
ses, cross-lingual data selection avoids the prob-
lem of noisy proliferation. Furthermore, phrase T-
M based cross-lingual data selection is more effec-
tive than the traditional approaches based on bag-
of-words models and word-based TM, because it
captures contextual information in modeling the s-
election of phrase as a whole. Large-scale exper-
iments are conducted on LM perplexity and SMT
performance, and the results demonstrate that our
approach solves the two aforementioned disadvan-
tages and significantly outperforms the state-of-the-
art methods for LM adaptation.
There are some ways in which this research could
be continued in the future. First, we will utilize our
approach to mine large-scale corpora by distributed
infrastructure system, and investigate the use of our
approach for other domains, such as speech transla-
tion system. Second, the significant improvement of
LM adaptation based on cross-lingual data selection
is exciting, so it will be instructive to explore oth-
er knowledge based cross-lingual data selection for
LM adaptation, such as latent semantic model.
520
Acknowledgments
This work was supported by 863 program in China
(No. 2011AA01A207). We thank Guangyou Zhou
for his helpful discussions and suggestions. We also
thank the anonymous reviewers for their insightful
comments.
References
Sankaranarayanan Ananthakrishnan, Rohit Prasad, and
Prem Natarajan. 2011a. On-line language model bias-
ing for statistical machine translation. In Proceedings
of ACL, pages 445-449.
Sankaranarayanan Ananthakrishnan, Stavros Tsakalidis,
Rohit Prasad, and Prem Natarajan. 2011b. On-
line language model biasing for multi-pass automat-
ic speech recognition. In Proceedings of INTER-
SPEECH, pages 621-624.
Amittai Axelrod, Xiaodong He, and Jianfeng Gao. 2011.
Domain adaptation via pseudo in-domain data selec-
tion. In Proceedings of EMNLP, pages 355-362.
Adam Berger and John Lafferty. 1999. Information re-
trieval as statistical translation. In Proceedings of SI-
GIR, pages 222-229.
Thorsten Brants, Ashok C. Popat, Peng Xu, Franz J. Och,
and Jeffrey Dean. 2007. Large language models in
machine translation. In Proceedings of EMNLP, pages
858-867.
Peter F. Brown, Vincent J. Della Pietra, Stephen A. Della
Pietra, and Robert L. Mercer. 1993. The mathematic-
s of statistical machine translation: parameter estima-
tion. Computational Linguistics, 19(2):263-311.
David Chiang. 2005. A hierarchical phrase-based model
for statistical machine translation. In Proceedings of
ACL, pages 263-270.
David Chiang. 2007. Hierarchical phrase-based transla-
tion. Computational Linguistics, 33(2):201-228.
Michael Collins. 2002. Discriminative training meth-
ods for hidden markov models: theory and experi-
ments with the perceptron algorithm. In Proceedings
of EMNLP, pages 1-8.
Richard O. Duda, Peter E. Hart, and David G. Stork.
2001. Pattern classification. John Wiley & Sons, Inc.
Matthias Eck, Stephan Vogel, and Alex Waibel. 2004.
Language model adaptation for statistical machine
translation based on information retrieval. In Proceed-
ings of LREC, pages 327-330.
George Foster and Roland Kuhn. 2007. Mixture-model
adaptation for SMT. In Proceedings of ACL, pages
128-135.
Jianfeng Gao, Haoliang Qi, Xinsong Xia, and Jian-Yun
Nie. 2005. Linear discriminative model for informa-
tion retrieval. In Proceedings of SIGIR, pages 290-
297.
Jianfeng Gao, Xiaodong He, and Jian-Yun Nie. 2010.
Clickthrough-based translation models for web search:
from word models to phrase models. In Proceedings
of CIKM, pages 1139-1148.
Almut Silja Hildebrand, Matthias Eck, Stephan Vogel,
and Alex Waibel. 2005. Adaptation of the transla-
tion model for statistical machine translation based in-
formation retrieval. In Proceedings of EAMT, pages
133-142.
Woosung Kim. 2005. Language model adaptation for
automatic speech recognition and statistical machine
translation. Ph.D. thesis, The Johns Hopkins Univer-
sity.
Philipp Koehn, Franz Josef Och, and Daniel Marcu.
2003. Statistical phrase-based translation. In Proceed-
ings of NAACL, pages 48-54.
Jung-Tae Lee, Sang-Bum Kim, Young-In Song, and Hae-
Chang Rim. 2008. Bridging lexical gaps between
queries and questions on large online Q&A collection-
s with compact translation models. In Proceedings of
EMNLP, pages 410-418.
Sameer Masskey and Abhinav Sethy. 2010. Resampling
auxiliary data for language model adaptation in ma-
chine translation for speech. In Proceedings of ICAS-
SP, pages 4817-4820.
Rada Mihalcea and Paul Tarau. 2004. TextRank: Bring-
ing order into text. In Proceedings of EMNLP, pages
404-411.
Robert C. Moore and William Lewis. 2010. Intelligent
selection of language model training data. In Proceed-
ings of ACL, pages 220-224.
Franz Josef Och. 2002. Statistical mahcine transla-
tion: from single word models to alignment templates.
Ph.D thesis, RWTH Aachen.
Franz Josef Och. 2003. Minimum error rate training in
statistical machine translation. In Proceedings of ACL,
pages 160-167.
Franz Josef Och and Hermann Ney. 2004. The alignmen-
t template approach to statistical machine translation.
Computational Linguistics, 30(4):417-449.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
jing Zhu. 2002. BLEU: A method for automatic eval-
uation of machine translation. In Proceedings of ACL,
pages 311-318.
William H. Press, Saul A. Teukolsky, William T. Vetter-
ling, and Brian P. Flannery. 1992. Numerical Recipes
in C. Cambridge University Press.
521
Matthew Snover, Bonnie Dorr, and Richard Marcu.
2008. Language and translation model adaptation us-
ing comparable corpora. In Proceedings of EMNLP,
pages 857-866.
Andreas Stolcke. 2002. SRILM - An extensible lan-
guage modeling toolkit. In Proceedings of ICSLP,
pages 901-904.
Yik-Cheung Tam and Tanja Schultz. 2006. Unsuper-
vised language model adaptation using latent seman-
tic marginals. In Proceedings of ICSLP, pages 2206-
2209.
Yik-Cheung Tam, Ian Lane, and Tanja Schultz. 2007.
Bilingual-LSA based LM adaptation for spoken lan-
guage translation. In Proceedings of ACL, pages 520-
527.
Yik-Cheung Tam, Ian Lane, and Tanja Schultz. 2008.
Bilingual-LSA based adaptation for statistical machine
translation. Machine Translation, 21:187-207.
Bin Wei and Christopher Pal. 2010. Cross lingual adap-
tation: an experiment on sentiment classifications. In
Proceedings of ACL, pages 258-262.
Jinxi Xu, Ralpha Weischedel, and Chanh Nguyen. 2001.
Evaluating a probabilistic model for cross-lingual in-
formation retrieval. In Proceedings of SIGIR, pages
105-110.
Xiaobing Xue, Jiwoon Jeon, and W. Bruce Croft. 2008.
Retrieval models for question and answer archives. In
Proceedings of SIGIR, pages 475-482.
Bing Zhao, Matthias Eck, and Stephan Vogel. 2004.
Language model adaptation for statistical machine
translation with structured query models. In Proceed-
ings of COLING, pages 411-417.
Guangyou Zhou, Li Cai, Jun Zhao, and Kang Liu. 2011.
Phrase-based translation model for question retrieval
in community question answer archives. In Proceed-
ings of ACL, pages 653-662.
522
Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 122?132,
Baltimore, Maryland, USA, June 23-25 2014.
c
?2014 Association for Computational Linguistics
Learning New Semi-Supervised Deep Auto-encoder Features
for Statistical Machine Translation
Shixiang Lu, Zhenbiao Chen, Bo Xu
Interactive Digital Media Technology Research Center (IDMTech)
Institute of Automation, Chinese Academy of Sciences, Beijing, China
{shixiang.lu,zhenbiao.chen,xubo}@ia.ac.cn
Abstract
In this paper, instead of designing new fea-
tures based on intuition, linguistic knowl-
edge and domain, we learn some new
and effective features using the deep auto-
encoder (DAE) paradigm for phrase-based
translation model. Using the unsupervised
pre-trained deep belief net (DBN) to ini-
tialize DAE?s parameters and using the in-
put original phrase features as a teacher for
semi-supervised fine-tuning, we learn new
semi-supervised DAE features, which are
more effective and stable than the unsuper-
vised DBN features. Moreover, to learn
high dimensional feature representation,
we introduce a natural horizontal compo-
sition of more DAEs for large hidden lay-
ers feature learning. On two Chinese-
English tasks, our semi-supervised DAE
features obtain statistically significant im-
provements of 1.34/2.45 (IWSLT) and
0.82/1.52 (NIST) BLEU points over the
unsupervised DBN features and the base-
line features, respectively.
1 Introduction
Recently, many new features have been explored
for SMT and significant performance have been
obtained in terms of translation quality, such as
syntactic features, sparse features, and reordering
features. However, most of these features are man-
ually designed on linguistic phenomena that are
related to bilingual language pairs, thus they are
very difficult to devise and estimate.
Instead of designing new features based on in-
tuition, linguistic knowledge and domain, for the
first time, Maskey and Zhou (2012) explored the
possibility of inducing new features in an unsuper-
vised fashion using deep belief net (DBN) (Hinton
et al, 2006) for hierarchical phrase-based trans-
lation model. Using the 4 original phrase fea-
tures in the phrase table as the input features, they
pre-trained the DBN by contrastive divergence
(Hinton, 2002), and generated new unsupervised
DBN features using forward computation. These
new features are appended as extra features to the
phrase table for the translation decoder.
However, the above approach has two major
shortcomings. First, the input original features
for the DBN feature learning are too simple, the
limited 4 phrase features of each phrase pair,
such as bidirectional phrase translation probabil-
ity and bidirectional lexical weighting (Koehn et
al., 2003), which are a bottleneck for learning ef-
fective feature representation. Second, it only uses
the unsupervised layer-wise pre-training of DBN
built with stacked sets of Restricted Boltzmann
Machines (RBM) (Hinton, 2002), does not have a
training objective, so its performance relies on the
empirical parameters. Thus, this approach is un-
stable and the improvement is limited. In this pa-
per, we strive to effectively address the above two
shortcomings, and systematically explore the pos-
sibility of learning new features using deep (multi-
layer) neural networks (DNN, which is usually re-
ferred under the name Deep Learning) for SMT.
To address the first shortcoming, we adapt and
extend some simple but effective phrase features
as the input features for new DNN feature learn-
ing, and these features have been shown sig-
nificant improvement for SMT, such as, phrase
pair similarity (Zhao et al, 2004), phrase fre-
quency, phrase length (Hopkins and May, 2011),
and phrase generative probability (Foster et al,
2010), which also show further improvement for
new phrase feature learning in our experiments.
To address the second shortcoming, inspired
by the successful use of DAEs for handwrit-
ten digits recognition (Hinton and Salakhutdinov,
2006; Hinton et al, 2006), information retrieval
(Salakhutdinov and Hinton, 2009; Mirowski et
122
al., 2010), and speech spectrograms (Deng et al,
2010), we propose new feature learning using
semi-supervised DAE for phrase-based translation
model. By using the input data as the teacher, the
?semi-supervised? fine-tuning process of DAE ad-
dresses the problem of ?back-propagation without
a teacher? (Rumelhart et al, 1986), which makes
the DAE learn more powerful and abstract features
(Hinton and Salakhutdinov, 2006). For our semi-
supervised DAE feature learning task, we use the
unsupervised pre-trained DBN to initialize DAE?s
parameters and use the input original phrase fea-
tures as the ?teacher? for semi-supervised back-
propagation. Compared with the unsupervised
DBN features, our semi-supervised DAE features
are more effective and stable.
Moreover, to learn high dimensional feature
representation, we introduce a natural horizontal
composition for DAEs (HCDAE) that can be used
to create large hidden layer representations simply
by horizontally combining two (or more) DAEs
(Baldi, 2012), which shows further improvement
compared with single DAE in our experiments.
It is encouraging that, non-parametric feature
expansion using gaussian mixture model (GMM)
(Nguyen et al, 2007), which guarantees invari-
ance to the specific embodiment of the original
features, has been proved as a feasible feature gen-
eration approach for SMT. Deep models such as
DNN have the potential to be much more represen-
tationally efficient for feature learning than shal-
low models like GMM. Thus, instead of GMM,
we use DNN (DBN, DAE and HCDAE) to learn
new non-parametric features, which has the sim-
ilar evolution in speech recognition (Dahl et al,
2012; Hinton et al, 2012). DNN features are
learned from the non-linear combination of the
input original features, they strong capture high-
order correlations between the activities of the
original features, and we believe this deep learn-
ing paradigm induces the original features to fur-
ther reach their potential for SMT.
Finally, we conduct large-scale experiments
on IWSLT and NIST Chinese-English translation
tasks, respectively, and the results demonstrate
that our solutions solve the two aforementioned
shortcomings successfully. Our semi-supervised
DAE features significantly outperform the unsu-
pervised DBN features and the baseline features,
and our introduced input phrase features signifi-
cantly improve the performance of DAE feature
learning.
The remainder of this paper is organized as fol-
lows. Section 2 briefly summarizes the recent re-
lated work about the applications of DNN for SMT
tasks. Section 3 presents our introduced input fea-
tures for DNN feature learning. Section 4 de-
scribes how to learn our semi-supervised DAE fea-
tures for SMT. Section 5 describes and discusses
the large-scale experimental results. Finally, we
end with conclusions in section 6.
2 Related Work
Recently, there has been growing interest in use of
DNN for SMT tasks. Le et al (2012) improved
translation quality of n-gram translation model
by using a bilingual neural LM, where transla-
tion probabilities are estimated using a continu-
ous representation of translation units in lieu of
standard discrete representations. Kalchbrenner
and Blunsom (2013) introduced recurrent contin-
uous translation models that comprise a class for
purely continuous sentence-level translation mod-
els. Auli et al (2013) presented a joint lan-
guage and translation model based on a recur-
rent neural network which predicts target words
based on an unbounded history of both source
and target words. Liu et al (2013) went be-
yond the log-linear model for SMT and proposed
a novel additive neural networks based translation
model, which overcome some of the shortcom-
ings suffered by the log-linear model: linearity
and the lack of deep interpretation and represen-
tation in features. Li et al (2013) presented an
ITG reordering classifier based on recursive auto-
encoders, and generated vector space representa-
tions for variable-sized phrases, which enable pre-
dicting orders to exploit syntactic and semantic
information. Lu et al (2014) adapted and ex-
tended the max-margin based RNN (Socher et al,
2011) into HPB translation with force decoding
and converting tree, and proposed a RNN based
word topology model for HPB translation, which
successfully capture the topological structure of
the words on the source side in a syntactically and
semantically meaningful order.
However, none of these above works have fo-
cused on learning new features automatically with
input data, and while learning suitable features
(representations) is the superiority of DNN since
it has been proposed. In this paper, we systemat-
ically explore the possibility of learning new fea-
123
tures using DNN for SMT.
3 Input Features for DNN Feature
Learning
The phrase-based translation model (Koehn et al,
2003; Och and Ney, 2004) has demonstrated supe-
rior performance and been widely used in current
SMT systems, and we employ our implementation
on this translation model. Next, we adapt and ex-
tend some original phrase features as the input fea-
tures for DAE feature learning.
3.1 Baseline phrase features
We assume that source phrase f = f
1
, ? ? ? , f
l
f
and target phrase e = e
1
, ? ? ? , e
l
e
include l
f
and
l
e
words, respectively. Following (Maskey and
Zhou, 2012), we use the following 4 phrase fea-
tures of each phrase pair (Koehn et al, 2003)
in the phrase table as the first type of input fea-
tures, bidirectional phrase translation probability
(P (e|f) and P (f |e)), bidirectional lexical weight-
ing (Lex(e|f) and Lex(f |e)),
X
1
? P (f |e), Lex(f |e), P (e|f), Lex(e|f)
3.2 Phrase pair similarity
Zhao et al (2004) proposed a way of using term
weight based models in a vector space as addi-
tional evidences for phrase pair translation quality.
This model employ phrase pair similarity to en-
code the weights of content and non-content words
in phrase translation pairs. Following (Zhao et al,
2004), we calculate bidirectional phrase pair simi-
larity using cosine distance and BM25 distance as,
S
cos
i
(e, f) =
?
l
e
j=1
?
l
f
i=1
w
e
j
p(e
j
|f
i
)w
f
i
sqrt(
?
l
e
j=1
w
2
e
j
)sqrt(
?
l
e
j=1
w
e
j
a
2
)
S
cos
d
(f, e) =
?
l
f
i=1
?
l
e
j=1
w
f
i
p(f
i
|e
j
)w
e
j
sqrt(
?
l
f
i=1
w
2
f
i
)sqrt(
?
l
f
i=1
w
f
i
a
2
)
where, p(e
j
|f
i
) and p(f
i
|e
j
) represents bidirec-
tional word translation probability. w
f
i
and w
e
j
are term weights for source and target words, w
e
j
a
and w
f
i
a
are the transformed weights mapped from
all source/target words to the target/source dimen-
sion at word e
j
and f
i
, respectively.
S
bm25
i
(e, f) =
l
f
?
i=1
idf
f
i
(k
1
+ 1)w
f
i
(k
3
+ 1)w
f
i
a
(K + w
f
i
)(k
3
+ w
f
i
a
)
S
bm25
d
(f, e) =
l
e
?
j=1
idf
e
j
(k
1
+ 1)w
e
j
(k
3
+ 1)w
e
j
a
(K + w
e
j
)(k
3
+ w
e
j
a
)
where, k
1
, b, k
3
are set to be 1, 1 and 1000, re-
spectively. K = k
1
((1? b) + J/avg(l)), and J is
the phrase length (l
e
or l
f
), avg(l) is the average
phrase length. Thus, we have the second type of
input features
X
2
? S
cos
i
(f, e), S
bm25
i
(f, e), S
cos
d
(e, f), S
bm25
d
(e, f)
3.3 Phrase generative probability
We adapt and extend bidirectional phrase genera-
tive probabilities as the input features, which have
been used for domain adaptation (Foster et al,
2010). According to the background LMs, we esti-
mate the bidirectional (source/target side) forward
and backward phrase generative probabilities as
P
f
(f) = P (f
1
)P (f
2
|f
1
) ? ? ?P (f
l
f
|f
l
f
?n+1
, ? ? ? , f
l
f
?1
)
P
f
(e) = P (e
1
)P (e
2
|e
1
) ? ? ?P (e
l
e
|e
l
e
?n+1
, ? ? ? , e
l
e
?1
)
P
b
(f) = P (f
l
f
)P (f
l
f
?1
|f
l
f
) ? ? ?P (f
1
|f
n
, ? ? ? , f
2
)
P
b
(e) = P (e
l
e
)P (e
l
e
?1
|e
l
e
) ? ? ?P (e
1
|e
n
, ? ? ? , e
2
)
where, the bidirectional forward and backward
1
background 4-gram LMs are trained by the corre-
sponding side of bilingual corpus
2
. Then, we have
the third type of input features
X
3
? P
f
(e), P
b
(e), P
f
(f), P
b
(f)
3.4 Phrase frequency
We consider bidirectional phrase frequency as the
input features, and estimate them as
P (f) =
count(f)
?
|f
i
|=|f |
count(f
i
)
P (e) =
count(e)
?
|e
j
|=|e|
count(e
j
)
where, the count(f)/count(e) are the total num-
ber of phrase f/e appearing in the source/target side
of the bilingual corpus, and the denominator are
the total number of the phrases whose length are
equal to |f |/|e|, respectively. Then, we have the
forth type of input features
X
4
? P (f), P (e)
1
Backward LM has been introduced by Xiong et al
(2011), which successfully capture both the preceding and
succeeding contexts of the current word, and we estimate the
backward LM by inverting the order in each sentence in the
training data from the original order to the reverse order.
2
This corpus is used to train the translation model in our
experiments, and we will describe it in detail in section 5.1.
124
3.5 Phrase length
Phrase length plays an important role in the trans-
lation process (Koehn, 2010; Hopkins and May,
2011). We normalize bidirectional phrase length
by the maximum phrase length, and introduce
them as the last type of input features
X
5
? l
n
e
, l
n
f
In summary, except for the first type of phrase
feature X
1
which is used by (Maskey and Zhou,
2012), we introduce another four types of effec-
tive phrase features X
2
, X
3
, X
4
and X
5
. Now, the
input original phrase features X includes 16 fea-
tures in our experiments, as follows,
X ? X
1
, X
2
, X
3
, X
4
, X
5
We build the DAE network where the first layer
with visible nodes equaling to 16, and each visible
node v
i
corresponds to the above original features
X in each phrase pair.
4 Semi-Supervised Deep Auto-encoder
Features Learning for SMT
Each translation rule in the phrase-based transla-
tion model has a set number of features that are
combined in the log-linear model (Och and Ney,
2002), and our semi-supervised DAE features can
also be combined in this model. In this section,
we design our DAE network with various network
structures for new feature learning.
4.1 Learning a Deep Belief Net
Inspired by (Maskey and Zhou, 2012), we first
learn a deep generative model for feature learning
using DBN. DBN is composed of multiple layers
of latent variables with the first layer represent-
ing the visible feature vectors, which is built with
stacked sets of RBMs (Hinton, 2002).
For a RBM, there is full connectivity between
layers, but no connections within either layer. The
connection weight W , hidden layer biases c and
visible layer biases b can be learned efficiently
using the contrastive divergence (Hinton, 2002;
Carreira-Perpinan and Hinton, 2005). When given
a hidden layer h, factorial conditional distribution
of visible layer v can be estimated by
P (v = 1|h) = ?(b+ h
T
W
T
)
where ? denotes the logistic sigmoid. Given v, the
element-wise conditional distribution of h is
P (h = 1|v) = ?(c+ v
T
W )
Figure 1: Pre-training consists of learning a stack
of RBMs, and these RBMs create an unsupervised
DBN.
The two conditional distributions can be shown
to correspond to the generative model,
P (v, h) =
1
Z
exp(?E(v, h))
where,
Z =
?
v,h
e
?E(v,h)
E(v, h) = ?b
T
v ? c
T
h? v
T
Wh
After learning the first RBM, we treat the acti-
vation probabilities of its hidden units, when they
are being driven by data, as the data for training
a second RBM. Similarly, a n
th
RBM is built on
the output of the n ? 1
th
one and so on until a
sufficiently deep architecture is created. These n
RBMs can then be composed to form a DBN in
which it is easy to infer the states of the n
th
layer
of hidden units from the input in a single forward
pass (Hinton et al, 2006), as shown in Figure 1.
This greedy, layer-by-layer pre-training can be re-
peated several times to learn a deep, hierarchical
model (DBN) in which each layer of features cap-
tures strong high-order correlations between the
activities of features in the layer below.
To deal with real-valued input features X in our
task, we use an RBM with Gaussian visible units
(GRBM) (Dahl et al, 2012) with a variance of 1
on each dimension. Hence, P (v|h) and E(v, h) in
the first RBM of DBN need to be modified as
P (v|h) = N (v; b+ h
T
W
T
, I)
E(v, h) =
1
2
(v ? b)
T
(v ? b)? c
T
h? v
T
Wh
where I is the appropriate identity matrix.
125
Figure 2: After the unsupervised pre-training,
the DBNs are ?unrolled? to create a semi-
supervised DAE, which is then fine-tuned using
back-propagation of error derivatives.
To speed-up the pre-training, we subdivide the
entire phrase pairs (with features X) in the phrase
table into small mini-batches, each containing 100
cases, and update the weights after each mini-
batch. Each layer is greedily pre-trained for
50 epochs through the entire phrase pairs. The
weights are updated using a learning rate of 0.1,
momentum of 0.9, and a weight decay of 0.0002
? weight ? learning rate. The weight matrix W
are initialized with small random values sampled
from a zero-mean normal distribution with vari-
ance 0.01.
After the pre-training, for each phrase pair in
the phrase table, we generate the DBN features
(Maskey and Zhou, 2012) by passing the original
phrase featuresX through the DBN using forward
computation.
4.2 From DBN to Deep Auto-encoder
To learn a semi-supervised DAE, we first ?unroll?
the above n layer DBN by using its weight ma-
trices to create a deep, 2n-1 layer network whose
lower layers use the matrices to ?encode? the in-
put and whose upper layers use the matrices in
reverse order to ?decode? the input (Hinton and
Salakhutdinov, 2006; Salakhutdinov and Hinton,
2009; Deng et al, 2010), as shown in Figure 2.
The layer-wise learning of DBN as above must be
treated as a pre-training stage that finds a good
region of the parameter space, which is used to
initialize our DAE?s parameters. Starting in this
region, the DAE is then fine-tuned using average
squared error (between the output and input) back-
propagation to minimize reconstruction error, as to
make its output as equal as possible to its input.
For the fine-tuning of DAE, we use the method
of conjugate gradients on larger mini-batches of
1000 cases, with three line searches performed
for each mini-batch in each epoch. To determine
an adequate number of epochs and to avoid over-
fitting, we fine-tune on a fraction phrase table
and test performance on the remaining validation
phrase table, and then repeat fine-tuning on the en-
tire phrase table for 100 epochs.
We experiment with various values for the noise
variance and the threshold, as well as the learn-
ing rate, momentum, and weight-decay parame-
ters used in the pre-training, the batch size and
epochs in the fine-tuning. Our results are fairly ro-
bust to variations in these parameters. The precise
weights found by the pre-training do not matter
as long as it finds a good region of the parameter
space from which to start the fine-tuning.
The fine-tuning makes the feature representa-
tion in the central layer of the DAE work much
better (Salakhutdinov and Hinton, 2009). After
the fine-tuning, for each phrase pair in the phrase
table, we estimate our DAE features by passing the
original phrase features X through the ?encoder?
part of the DAE using forward computation.
To combine these learned features (DBN and
DAE feature) into the log-linear model, we need
to eliminate the impact of the non-linear learning
mechanism. Following (Maskey and Zhou, 2012),
these learned features are normalized by the av-
erage of each dimensional respective feature set.
Then, we append these features for each phrase
pair to the phrase table as extra features.
4.3 Horizontal Composition of Deep
Auto-encoders (HCDAE)
Although DAE can learn more powerful and ab-
stract feature representation, the learned features
usually have smaller dimensionality compared
with the dimensionality of the input features, such
as the successful use for handwritten digits recog-
nition (Hinton and Salakhutdinov, 2006; Hinton
et al, 2006), information retrieval (Salakhutdinov
and Hinton, 2009; Mirowski et al, 2010), and
126
Figure 3: Horizontal composition of DAEs to ex-
pand high-dimensional features learning.
speech spectrograms (Deng et al, 2010). More-
over, although we have introduced another four
types of phrase features (X
2
, X
3
, X
4
and X
5
), the
only 16 features in X are a bottleneck for learning
large hidden layers feature representation, because
it has limited information, the performance of the
high-dimensional DAE features which are directly
learned from single DAE is not very satisfactory.
To learn high-dimensional feature representa-
tion and to further improve the performance, we
introduce a natural horizontal composition for
DAEs that can be used to create large hidden layer
representations simply by horizontally combining
two (or more) DAEs (Baldi, 2012), as shown in
Figure 3. Two single DAEs with architectures
16/m
1
/16 and 16/m
2
/16 can be trained and the
hidden layers can be combined to yield an ex-
panded hidden feature representation of sizem
1
+
m
2
, which can then be fed to the subsequent lay-
ers of the overall architecture. Thus, these new
m
1
+m
2
-dimensional DAE features are added as
extra features to the phrase table.
Differences in m
1
- and m
2
-dimensional hidden
representations could be introduced by many dif-
ferent mechanisms (e.g., learning algorithms, ini-
tializations, training samples, learning rates, or
distortion measures) (Baldi, 2012). In our task,
we introduce differences by using different initial-
izations and different fractions of the phrase table.
4-16-8-2 4-16-8-4 4-16-16-8
4-16-8-4-2 4-16-16-8-4 4-16-16-8-8
4-16-16-8-4-2 4-16-16-8-8-4 4-16-16-16-8-8
4-16-16-8-8-4-2 4-16-16-16-8-8-4 4-16-16-16-16-8-8
6-16-8-2 6-16-8-4 6-16-16-8
6-16-8-4-2 6-16-16-8-4 6-16-16-8-8
6-16-16-8-4-2 6-16-16-8-8-4 6-16-16-16-8-8
6-16-16-16-8-4-2 6-16-16-16-8-8-4 6-16-16-16-16-8-8
8-16-8-2 8-16-8-4 8-16-16-8
8-16-8-4-2 8-16-16-8-4 8-16-16-8-8
8-16-16-8-4-2 8-16-16-8-8-4 8-16-16-16-8-8
8-16-16-16-8-4-2 8-16-16-16-8-8-4 8-16-16-16-16-8-8
16-32-16-2 16-32-16-4 16-32-16-8
16-32-16-8-2 16-32-16-8-4 16-32-32-16-8
16-32-16-8-4-2 16-32-32-16-8-4 16-32-32-16-16-8
16-32-32-16-8-4-2 16-32-32-16-16-8-4 16-32-32-32-16-16-8
Table 1: Details of the used network structure.
For example, the architecture 16-32-16-2 (4 lay-
ers? network depth) corresponds to the DAE with
16-dimensional input features (X) (input layer),
32/16 hidden units (first/second hidden layer), and
2-dimensional output features (new DAE features)
(output layer). During the fine-tuning, the DAE?s
network structure becomes 16-32-16-2-16-32-16.
Correspondingly, 4-16-8-2 and 6(8)-16-8-2 repre-
sent the input features are X
1
and X
1
+X
i
.
5 Experiments and Results
5.1 Experimental Setup
We now test our DAE features on the following
two Chinese-English translation tasks.
IWSLT. The bilingual corpus is the Chinese-
English part of Basic Traveling Expression cor-
pus (BTEC) and China-Japan-Korea (CJK) cor-
pus (0.38M sentence pairs with 3.5/3.8M Chi-
nese/English words). The LM corpus is the En-
glish side of the parallel data (BTEC, CJK and
CWMT08
3
) (1.34M sentences). Our development
set is IWSLT 2005 test set (506 sentences), and our
test set is IWSLT 2007 test set (489 sentences).
NIST. The bilingual corpus is LDC
4
(3.4M sen-
tence pairs with 64/70M Chinese/English words).
The LM corpus is the English side of the paral-
lel data as well as the English Gigaword corpus
(LDC2007T07) (11.3M sentences). Our develop-
ment set is NIST 2005 MT evaluation set (1084
sentences), and our test set is NIST 2006 MT eval-
uation set (1664 sentences).
We choose the Moses (Koehn et al, 2007)
framework to implement our phrase-based ma-
chine system. The 4-gram LMs are estimated
by the SRILM toolkit with modified Kneser-Ney
3
the 4th China Workshop on Machine Translation
4
LDC2002E18, LDC2002T01, LDC2003E07,
LDC2003E14, LDC2003T17, LDC2004T07, LDC2004T08,
LDC2005T06, LDC2005T10, LDC2005T34, LDC2006T04,
LDC2007T09
127
# Features
IWSLT NIST
Dev Test Dev Test
1 Baseline 50.81 41.13 36.12 32.59
2
X
1
+DBN X
1
2f 51.92 42.07
?
36.33 33.11
?
3 +DAE X
1
2f 52.49 43.22
??
36.92 33.44
??
4 +DBN X
1
4f 51.45 41.78
?
36.45 33.12
?
5 +DAE X
1
4f 52.45 43.06
??
36.88 33.47
??
6 +HCDAE X
1
2+2f 53.69 43.23
???
37.06 33.68
???
7 +DBN X
1
8f 51.74 41.85
?
36.61 33.24
?
8 +DAE X
1
8f 52.33 42.98
??
36.81 33.36
??
9 +HCDAE X
1
4+4f 52.52 43.26
???
37.01 33.63
???
10
X
+DBN X 2f 52.21 42.24
?
36.72 33.21
?
11 +DAE X 2f 52.86 43.45
??
37.39 33.83
??
12 +DBN X 4f 51.83 42.08
?
34.45 33.07
?
13 +DAE X 4f 52.81 43.47
??
37.48 33.92
??
14 +HCDAE X 2+2f 53.05 43.58
???
37.59 34.11
???
15 +DBN X 8f 51.93 42.01
?
36.74 33.29
?
16 +DAE X 8f 52.69 43.26
??
37.36 33.75
??
17 +HCDAE X 4+4f 52.93 43.49
???
37.53 34.02
???
18 +(X
2
+X
3
+X
4
+X
5
) 52.23 42.91
?
36.96 33.65
?
19 +(X
2
+X
3
+X
4
+X
5
)+DAE X 2f 53.55 44.17
+???
38.23 34.50
+???
20 +(X
2
+X
3
+X
4
+X
5
)+DAE X 4f 53.61 44.22
+???
38.28 34.47
+???
21 +(X
2
+X
3
+X
4
+X
5
)+HCDAE X 2+2f 53.75 44.28
+????
38.35 34.65
+????
22 +(X
2
+X
3
+X
4
+X
5
)+DAE X 8f 53.47 44.19
+???
38.26 34.46
+???
23 +(X
2
+X
3
+X
4
+X
5
)+HCDAE X 4+4f 53.62 44.29
+????
38.39 34.57
+????
Table 2: The translation results by adding new DNN features (DBN feature (Maskey and Zhou, 2012),
our proposed DAE and HCDAE feature) as extra features to the phrase table on two tasks. ?DBN X
1
xf?,
?DBN X xf?, ?DAE X
1
xf? and ?DAE X xf? represent that we use DBN and DAE, input features
X
1
and X , to learn x-dimensional features, respectively. ?HCDAE X x+xf? represents horizontally
combining two DAEs and each DAE has the same x-dimensional learned features. All improvements on
two test sets are statistically significant by the bootstrap resampling (Koehn, 2004). *: significantly better
than the baseline (p < 0.05), **: significantly better than ?DBN X
1
xf? or ?DBN X xf? (p < 0.01),
***: significantly better than ?DAE X
1
xf? or ?DAE X xf? (p < 0.01), ****: significantly better than
?HCDAE X x+xf? (p < 0.01), +: significantly better than ?X
2
+X
3
+X
4
+X
5
? (p < 0.01).
discounting. We perform pairwise ranking opti-
mization (Hopkins and May, 2011) to tune feature
weights. The translation quality is evaluated by
case-insensitive IBM BLEU-4 metric.
The baseline translation models are generated
by Moses with default parameter settings. In the
contrast experiments, our DAE and HCDAE fea-
tures are appended as extra features to the phrase
table. The details of the used network structure in
our experiments are shown in Table 1.
5.2 Results
Table 2 presents the main translation results. We
use DBN, DAE and HCDAE (with 6 layers? net-
work depth), input features X
1
and X , to learn 2-,
4- and 8-dimensional features, respectively. From
the results, we can get some clear trends:
1. Adding new DNN features as extra features
significantly improves translation accuracy (row
2-17 vs. 1), with the highest increase of 2.45
(IWSLT) and 1.52 (NIST) (row 14 vs. 1) BLEU
points over the baseline features.
2. Compared with the unsupervised DBN fea-
tures, our semi-supervised DAE features are more
effective for translation decoder (row 3 vs. 2; row
5 vs. 4; row 8 vs. 7; row 11 vs. 10; row 13 vs.
12; row 16 vs. 15). Specially, Table 3 shows the
variance distributions of the learned each dimen-
sional DBN and DAE feature, our DAE features
have bigger variance distributions which means
128
Features
IWSLT NIST
?
1
?
2
?
3
?
4
?
1
?
2
?
3
?
4
DBN X
1
4f 0.1678 0.2873 0.2037 0.1622 0.0691 0.1813 0.0828 0.1637
DBN X 4f 0.2010 0.1590 0.2793 0.1692 0.1267 0.1146 0.2147 0.1051
DAE X
1
4f 0.5072 0.4486 0.1309 0.6012 0.2136 0.2168 0.2047 0.2526
DAE X 4f 0.5215 0.4594 0.2371 0.6903 0.2421 0.2694 0.3034 0.2642
Table 3: The variance distributions of each dimensional learned DBN feature and DAE feature on the
two tasks.
Figure 4: The compared results of feature learning with different network structures on two development
sets.
Features
IWSLT NIST
Dev Test Dev Test
+DAE X
1
4f 52.45 43.06 36.88 33.47
+DAE X
1
+X
2
4f 52.76 43.38
?
37.28 33.80
?
+DAE X
1
+X
3
4f 52.61 43.27
?
37.13 33.66
?
+DAE X
1
+X
4
4f 52.52 43.24
?
36.96 33.58
?
+DAE X
1
+X
5
4f 52.49 43.13
?
36.96 33.56
?
+DAE X 4f 52.81 43.47
?
37.48 33.92
?
Table 4: The effectiveness of our introduced in-
put features. ?DAE X
1
+X
i
4f? represents that
we use DAE, input features X
1
+ X
i
, to learn 4-
dimensional features. *: significantly better than
?DAE X
1
4f? (p < 0.05).
our DAE features have more discriminative power,
and also their variance distributions are more sta-
ble.
3. HCDAE outperforms single DAE for high
dimensional feature learning (row 6 vs. 5; row 9
vs. 8; row 14 vs. 13; row 17 vs. 16), and further
improve the performance of DAE feature learning,
which can also somewhat address the bring short-
coming of the limited input features.
4. Except for the phrase feature X
1
(Maskey
and Zhou, 2012), our introduced input features
X significantly improve the DAE feature learn-
ing (row 11 vs. 3; row 13 vs. 5; row 16 vs. 8).
Specially, Table 4 shows the detailed effectiveness
of our introduced input features for DAE feature
learning, and the results show that each type of
features are very effective for DAE feature learn-
ing.
5. Adding the original features (X
2
,X
3
,X
4
and
X
5
) and DAE/HCDAE features together can fur-
ther improve translation performance (row 19-23
vs. 18), with the highest increase of 3.16 (IWSLT)
and 2.06 (NIST) (row 21 vs. 1) BLEU points over
the baseline features. DAE and HCDAE features
are learned from the non-linear combination of the
original features, they strong capture high-order
correlations between the activities of the original
features, as to be further interpreted to reach their
potential for SMT. We suspect these learned fea-
129
tures are complementary to the original features.
5.3 Analysis
Figure 5: The compared results of using single
DAE and the HCDAE for feature learning on two
development sets.
Figure 4 shows our DAE features are not only
more effective but also more stable than DBN
features with various network structures. Also,
adding more input features (X vs. X
1
) not only
significantly improves the performance of DAE
feature learning, but also slightly improves the
performance of DBN feature learning.
Figure 5 shows there is little change in the per-
formance of using single DAE to learn different
dimensional DAE features, but the 4-dimensional
features work more better and more stable. HC-
DAE outperforms the single DAE and learns high-
dimensional representation more effectively, espe-
cially for the peak point in each condition.
Figures 5 also shows the best network depth for
DAE feature learning is 6 layers. When the net-
work depth of DBN is 7 layers, the network depth
of corresponding DAE during the fine-tuning is 13
layers. Although we have pre-trained the corre-
sponding DBN, this DAE network is so deep, the
fine-tuning does not work very well and typically
finds poor local minima. We suspect this leads to
the decreased performance.
6 Conclusions
In this paper, instead of designing new features
based on intuition, linguistic knowledge and do-
main, we have learned new features using the DAE
for the phrase-based translation model. Using the
unsupervised pre-trained DBN to initialize DAE?s
parameters and using the input original phrase fea-
tures as the ?teacher? for semi-supervised back-
propagation, our semi-supervised DAE features
are more effective and stable than the unsuper-
vised DBN features (Maskey and Zhou, 2012).
Moreover, to further improve the performance, we
introduce some simple but effective features as
the input features for feature learning. Lastly, to
learn high dimensional feature representation, we
introduce a natural horizontal composition of two
DAEs for large hidden layers feature learning.
On two Chinese-English translation tasks, the
results demonstrate that our solutions solve the
two aforementioned shortcomings successfully.
Firstly, our DAE features obtain statistically sig-
nificant improvements of 1.34/2.45 (IWSLT) and
0.82/1.52 (NIST) BLEU points over the DBN fea-
tures and the baseline features, respectively. Sec-
ondly, compared with the baseline phrase features
X
1
, our introduced input original phrase features
X significantly improve the performance of not
only our DAE features but also the DBN features.
The results also demonstrate that DNN (DAE
and HCDAE) features are complementary to the
original features for SMT, and adding them to-
gether obtain statistically significant improve-
ments of 3.16 (IWSLT) and 2.06 (NIST) BLEU
points over the baseline features. Compared with
the original features, DNN (DAE and HCDAE)
features are learned from the non-linear combi-
nation of the original features, they strong cap-
ture high-order correlations between the activities
of the original features, and we believe this deep
learning paradigm induces the original features to
further reach their potential for SMT.
Acknowledgments
This work was supported by 863 program in
China (No. 2011AA01A207). We would like to
thank Xingyuan Peng, Lichun Fan and Hongyan
Li for their helpful discussions. We also thank
the anonymous reviewers for their insightful com-
ments.
130
References
Michael Auli, Michel Galley, Chris Quirk and Geoffrey
Zweig. 2013. Joint language and translation model-
ing with recurrent neural networks. In Proceedings
of EMNLP, pages 1044-1054.
Pierre Baldi. 2012. Autoencoders, unsupervised learn-
ing, and deep architectures. JMLR: workshop on un-
supervised and transfer learning, 27:37-50.
Miguel A. Carreira-Perpinan and Geoffrey E. Hinton.
2005. On contrastive divergence learning. In Pro-
ceedings of AI and Statistics.
George Dahl, Dong Yu, Li Deng, and Alex Acero.
2012. Context-dependent pre-trained deep neural
networks for large vocabulary speech recognition.
IEEE Transactions on Audio, Speech, and Language
Processing, 20(1):30-42.
Li Deng, Mike Seltzer, Dong Yu, Alex Acero, Abdel-
rahman Mohamed, and Geoffrey E. Hinton. 2010.
Binary coding of speech spectrograms using a deep
auto-encoder. In Proceedings of INTERSPEECH,
pages 1692-1695.
George Foster, Cyril Goutte, and Roland Kuhn. 2010.
Discriminative instance weighting for domain adap-
tation in statistical machine translation. In Proceed-
ings of EMNLP, pages 451-459.
Geoffrey E. Hinton. 2002. Training products of ex-
perts by minimizing contrastive divergence. Neural
Computation, 14(8):1771-1800.
Geoffrey E. Hinton, Li Deng, Dong Yu, George Dahl,
Abdel-rahman Mohamed, Navdeep Jaitly, Andrew
Senior, Vincent Vanhoucke, Patrick Nguyen, Tara
Sainath, and Brian Kingsbury. 2012. Deep neural
networks for acoustic modeling in speech tecogni-
tion. IEEE Signal Processing Magazine, 29(6):82-
97.
Geoffrey E. Hinton, Alex Krizhevsky, and Sida D.
Wang. 2001. Transforming auto-encoders. In Pro-
ceedings of ANN.
Geoffrey E. Hinton and Ruslan R. Salakhutdinov.
2006. Reducing the dimensionality of data with
neural networks. Science, 313:504-507.
Geoffrey E. Hinton, Simon Osindero, and Yee-Whye
Teh. 2006. A fast learning algorithm for deep belief
nets. Neural Computation, 18:1527-1544.
Mark Hopkins and Jonathan May 2011. Tuning as
ranking. In Proceedings of EMNLP, pages 1352-
1362.
Nal Kalchbrenner and Phil Blunsom. 2013. Recur-
rent continuous translation models. In Proceedings
of EMNLP, pages 1700-1709.
Philipp Koehn. 2004. Statistical significance tests
from achine translation evaluation. In Proceedings
of ACL, pages 388-395.
Philipp Koehn. 2010. Statistical machine translation.
Cambridge University Press.
Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran,
Richard Zens, Chris Dyer, Ondrej Bojar, Alexandra
Constantin, and Evan Herbst. 2007. Moses: Open
source toolkit for statistical machine translation. In
Proceedings of ACL, Demonstration Session, pages
177-180.
Philipp Koehn, Franz J. Och, and Daniel Marcu. 2003.
Statistical phrase-based translation. In Proceedings
of NAACL, pages 48-54.
Hai-Son Le, Alexandre Allauzen, and Franc?ois Yvon.
2012. Continuous space translation models with
neural networks. In Proceedings of NAACL, pages
39-48.
Peng Li, Yang Liu, Maosong Sun. 2013. Recursive
autoencoders for ITG-based translation. In Proceed-
ings of EMNLP, pages 567-577.
Lemao Liu, Taro Watanabe, Eiichiro Sumita, and
Tiejun Zhao. 2013. Additive neural networks for
statistical machine translation. In Proceedings of
ACL, pages 791-801.
Shixiang Lu, Wei Wei, Xiaoyin Fu and Bo Xu. 2014.
Recursive neural network based word topology
model for hierarchical phrase-based speech transla-
tion. In Proceedings of ICASSP.
Yuval Marton and Philip Resnik. 2008. Soft syntactic
constraints for hierarchical phrase-based translation.
In Proceedings of ACL, pages 1003-1011.
Sameer Maskey and Bowen Zhou. 2012. Unsuper-
vised deep belief features for speech translation. In
Proceedings of INTERSPEECH.
Piotr Mirowski, MarcAurelio Ranzato, and Yann Le-
Cun. 2010. Dynamic auto-encoders for semantic
indexing. In Proceedings of NIPS-2010 Workshop
on Deep Learning.
Patrick Nguyen, Milind Mahajan, and Xiaodong He.
2007. Training non-parametric features for statis-
tical machine translation. In Proceedings of WMT,
pages 72-79.
Franz J. Och and Hermann Ney. 2000. Improved sta-
tistical alignment models. In Proceedings of ACL,
pages 440-447.
Franz J. Och and Hermann Ney. 2002. Discriminative
training and maximum entropy models for statistical
machine translation. In Proceedings of ACL, pages
295-302.
Franz J. Och and Hermann Ney. 2004. The alignment
template approach to statistical machine translation.
Computational Linguistics, 30(4):417-449.
131
David Rumelhart, Geoffrey E. Hinton, and Ronale
Williams. 1986. Learning internal representations
by back-propagation errors. Parallel Distributed
Processing, Vol 1: Foundations, MIT Press.
Ruslan R. Salakhutdinov and Geoffrey E. Hinton.
2009. Semantic hashing. International Journal of
Approximate Reasoning, 50(7):969-978.
Richard Socher, Cliff C. Lin, Andrew Y. Ng, and
Christopher D. Manning. 2011. Parsing natural
scenes and natural language with recursive neural
networks. In Proceedings of ICML.
Deyi Xiong, Min Zhang, and Haizhou Li. 2011.
Enhancing language models in statistical machine
translation with backward n-grams and mutual in-
formation triggers. In Proceedings of ACL, pages
1288-1297.
Bing Zhao, Stephan Vogel, and Alex Waibel. 2004.
Phrase pair rescoring with term weightings for sta-
tistical machine translation. In Proceedings of
EMNLP.
132
