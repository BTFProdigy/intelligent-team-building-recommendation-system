Multi-Speaker Language Modeling
Gang Ji and Jeff Bilmes ?
SSLI Lab, Department of Electrical Engineering
University of Washington
Seattle, WA 98195-2500
{gang,bilmes}@ee.washington.edu
Abstract
In conventional language modeling, the words
from only one speaker at a time are repre-
sented, even for conversational tasks such as
meetings and telephone calls. In a conversa-
tional or meeting setting, however, speakers
can have significant influence on each other.
To recover such un-modeled inter-speaker in-
formation, we introduce an approach for con-
versational language modeling that considers
words from other speakers when predicting
words from the current one. By augmenting a
normal trigram context, our new multi-speaker
language model (MSLM) improves on both
Switchboard and ICSI Meeting Recorder cor-
pora. Using an MSLM and a conditional mu-
tual information based word clustering algo-
rithm, we achieve a 8.9% perplexity reduction
on Switchboard and a 12.2% reduction on the
ICSI Meeting Recorder data.
1 Introduction
Statistical language models (LMs) are used in many ap-
plications such as speech recognition, handwriting recog-
nition, spelling correction, machine translation, and in-
formation retrieval. The goal is to produce a probability
model over a word sequence P (W ) = P (w1, ? ? ? , wT ).
Conventional language models are often based on a fac-
torized form P (W ) ? ?t P (wt|?(ht)), where ht is thehistory for wt and ? is a history mapping.
The case of n-gram language modeling, where
?(ht) = wt?n+1 ? ? ?wt?1, is widely used. Typically,
n = 3, which yields a trigram model. A refinement of
this model is the class-based n-gram where the words are
partitioned into equivalence classes (Brown et al, 1992).
?This work was funded by NSF under grant IIS-0121396.
In general, smoothing techniques are applied to lessen
the curse of dimensionality. Among all methods, mod-
ified Kneser-Ney smoothing (Chen and Goodman, 1998)
is widely used because of its good performance.
Modeling conversational language is a particularly dif-
ficult task. Even though conventional techniques work
well on read or prepared speech, situations such as tele-
phone conversations or multi-person meetings pose great
research challenges due to disfluencies, and odd syn-
tactic/discourse patterns. Other difficulties include false
starts, interruptions, and poor or unrepresented grammar.
Most state-of-the-art language models consider word
streams individually and treat different phrases indepen-
dently. In this work, we introduce multi-speaker lan-
guage modeling (MSLM), which models the effects on
a speaker of words spoken by other speakers partici-
pating in the same conversation or meeting. Our new
model achieves initial perplexity reductions of 6.2% on
Switchboard-I, 5.8% on Switchboard Eval-2003, and
10.3% on ICSI Meeting data. In addition, we devel-
oped a word clustering procedure (based on a standard
approach (Brown et al, 1992)) that optimizes conditional
word clusters. Our class-based MSLMs using our new
algorithm yield improvements of 7.1% on Switchboard-I,
8.9% on Switchboard Eval-2003, and 12.2% on meetings.
A brief outline follows: Section 2 introduces multi-
speaker language modeling. Section 3 provides ini-
tial evaluations on Switchboard and the ICSI Meeting
data. Section 4 presents evaluations using our class-based
multi-speaker language models, and Section 5 concludes.
2 Multi-speaker Language Modeling
In a conversational setting, such as during a meeting or
telephone call, the words spoken by one speaker are af-
fected not only by his or her own previous words but
also by other speakers. Such inter-speaker dependency,
however, is typically ignored in standard n-gram lan-
guage models. In this work, information (i.e., word to-
kens) from other speakers (A) is used to better predict
word tokens of the current speaker (W ). When predict-
ing wt, instead of using P (wt|w0, ? ? ? , wt?1), the form
P (wt|w0, ? ? ? , wt?1; a0, ? ? ? , at) is used. Here at repre-
sents a word spoken by some other speaker with appro-
priate starting time (Section 3). A straight-forward im-
plementation is to extend the normal trigram model as:
P (wt|?(ht)) = P (wt|wt?1, wt?2, at). (1)
Hi
Hi
Diana ? Take care
? Bye
A:
W:
(a)
Saturday
A:
W: Saturday
on Sundayon 0.2s or Saturday0.4s
C5:
C4:
C3:
C1:
C0:
Saturday
Saturday
Saturday 1.1s SaturdayC2:
on Sundayon or Saturday
(b)
Figure 1: Examples of phone conversation (a) and meet-
ing (b). (Frame sizes are not proportional to time scale.)
Figure 1 shows an example from Switchboard (a) and
one from a meeting (b). In (a), only two speakers are in-
volved and the words from the current speaker, W , are
affected by the other speaker, A. At the beginning of a
conversation, the response to ?Hi? is likely to be ?Hi? or
?Hello.? At the end of the phone call, the response to
?Take care? might be ?Bye?, or ?You too?, etc. In (b),
we show a typical meeting conversation. Speaker C2 is
interrupting C3 when C3 says ?Sunday?. Because ?Sun-
day? is a day of the week, there is a high probability that
C2?s response is also a day of the week. In our model, we
only consider two streams at a time, W and A. There-
fore, when considering the probability of C2?s words, it
is reasonable to collapse words from all other speakers
(C0,C1,C3,C4, and C5) into one stream A as shown in
the figure. This makes available to C2 the rest of the
meeting to potentially condition on, although it does not
distinguish between different speakers.
Our model, Equation 1, is different from most lan-
guage modeling systems since our models condition on
both previous words and another potential factor A. Such
a model is easily represented using a factored language
model (FLM), an idea introduced in (Bilmes and Kirch-
hoff, 2003; Kirchhoff et al, 2003), and incorporated into
the SRILM toolkit (Stolcke, 2002). Note that a form of
cross-side modeling was used by BBN (Schwartz, 2004),
where in a multi-pass speech recognition system the out-
put of a first-pass from one speaker is used to prime words
in the language model for the other speaker.
3 Initial Evaluation
We evaluate MSLMs on three corpora: Switchboard-
I, Switchboard Eval-2003, and ICSI Meeting data. In
Switchboard-I, 6.83% of the words are overlapped in
time, where we define w1 and w2 as being overlapped
if s(w1) ? s(w2) < e(w1) or s(w2) ? s(w1) < e(w2),
where s(?) and e(?) are the starting and ending time of a
word.
The ICSI Meeting Recorder corpus (Janin et al, 2003)
consists of a number of meeting conversations with three
or more participants. The data we employed has 32 con-
versations, 35,000 sentences and 307,000 total words,
where 8.5% of the words were overlapped. As mentioned
previously, we collapse the words from all other speakers
into one stream A as a conditioning set for W . The data
consists of all speakers taking their turn being W .
To be used in an FLM, the words in each stream need to
be aligned at discrete time points. Clearly, at should not
come from wt?s future. Therefore, for each wt, we use
the closest previous A word in the past for at such that
s(wt?1) ? s(at) < s(wt). Therefore, each at is used
only once and no constraints are placed on at?s end time.
This is reasonable since one can often predict a speaker?s
word after it starts but before it completes.
We score using the model P (wt|wt?1, wt?2, at).1 Dif-
ferent back-off strategies, including different back-off
paths as well as combination methods (Bilmes and Kirch-
hoff, 2003), were tried and here we present the best re-
sults. The backoff order (for Switchboard-I and Meeting)
first dropped at, then wt?2, wt?1, ending with the uni-
form distribution. For Switchboard eval-2003, we used
a generalized parallel backoff mechanism. In all cases,
modified Kneser-Ney smoothing (Chen and Goodman,
1998) was used at all back-off points.
Results on Switchboard-I and the meeting data em-
ployed 5-fold cross-validation. Training data for Switch-
board eval-2003 consisted of all of Switchboard-I. In
Switchboard eval-2003, hand-transcribed time marks are
unavailable, so A was available only at the beginning of
utterances of W .2 Results (mean perplexities and stan-
dard deviations) are listed in Table 1 (Switchboard-I and
meeting) and the |V | column in Table 3.
Table 1: Perplexities from MSLM on Switchboard-I
(swbd-I) and ICSI Meeting data (mr)
data trigram four-gram mslm reduction
swbd-I 73.2?0.4 73.7?0.4 68.5?0.3 6.2%
mr 87.4?4.6 89.5?4.9 78.4?2.7 10.3%
1In all cases, end of sentence tokens, </s>, were not scored
to avoid artificially small perplexities arising when wt = at =
</s>, since P (</s>|</s>) yields a high probability value.
2Having time-marks, say, via a forced alignment would
likely improve our results.
In Table 1, the first column shows data set names. The
second and third columns show our best baseline trigram
and four-gram perplexities, both of which used interpo-
lation and modified Kneser-Ney at every back-off point.
The trigram outperforms the four-gram. The fourth col-
umn shows the perplexity results with MSLMs and the
last column shows the MSLM?s relative perplexity reduc-
tion over the (better) trigram baseline. This positive re-
duction indicates that for both data sets, the utilization of
additional information from other speakers can better pre-
dict the words of the current speaker. The improvement is
larger in the highly conversational meeting setting since
additional speakers, and thus more interruptions, occur.
3.1 Analysis
It is elucidating at this point to identify when and how
A-words can help predict W -words. We thus computed
the log-probability ratio of P (wt|wt?1, wt?2, at) and the
trigram P (wt|wt?1, wt?2) evaluated on all test set tuples
of form (wt?2, wt?1wt, at). When this ratio is large and
positive, conditioning on at significantly increases the
probability of wt in the context of wt?1 and wt?2. The
opposite is true when the ratio is large and negative. To
ensure the significance of our results, we define ?large?
to mean at least 101.5 ? 32, so that using at makes wt at
least 32 times more (or less) probable. We chose 32 in a
data-driven fashion, to be well above any spurious prob-
ability differences due to smoothing of different models.
At the first word of a phrase spoken by W , there are
a number of cases of A words that significantly increase
the probability of a W word relative to the trigram alone.
This includes (in roughly decreasing order of probabil-
ity) echos (e.g., when A says ?Friday?, W repeats it),
greetings/partings (e.g., a W greeting is likely to follow
an A greeting), paraphrases (e.g., ?crappy? followed by
?ugly?, or ?Indiana? followed by ?Purdue?), is-a relation-
ships (e.g., A saying ?corporation? followed by W saying
?dell?, A-?actor? followed by W -?Swayze?, A-?name?
followed by W -?Patricia?, etc.), and word completions.
On the other hand, some A contexts (e.g., laughter) sig-
nificantly decrease the probability of many W words.
Within a W phrase, other patterns emerge. In
particular, some A words significantly decrease the
probability that W will finish a commonly-used phrase.
For example, in a trigram alone, p(bigger|and, bigger),
p(forth|and, back), and p(easy|and, quick), all have
high probability. When also conditioning on A, some
A words significantly decrease the probability of
finishing such phrases. For example, we find that
p(easy|and, quick, ?uh-hmm?)  p(easy|and, quick).
A similar phenomena occurs for other com-
monly used phrases, but only when A has uttered
words such as ?yeah?, ?good?, ?ok?, ?[laugh-
ter]?, ?huh?, etc. While one possible explanation
of this is just due to decreased counts, we found
that for such phrases p(wt|wt?1, wt?2, at) 
minwt?3?S p4(wt|wt?1, wt?2, wt?3) where p4 is a
four-gram, S = {w : C(wt, wt?1, wt?2, w) > 0}, and
C is the 4-gram word count function for the switchboard
training and test sets. Therefore, our hypothesis is
that when W is in the process of uttering a predictable
phrase and A indicates she knows what W will say, it is
improbable that W will complete that phrase.
The examples above came from Switchboard-I, but we
found similar phenomena in the other corpora.
4 Conditional Probability Clustering
100 500 1000 1500 2000 |V|
68
70
72
74
76
78
80
82
84
86
88
number of classes
pe
rp
lex
ity
mr baselinemrswbd baseline
swbd
Figure 2: Class-based MSLM from MCMI clustering on
Switchboard-I (swbd) and ICSI Meeting (mr) data.
Table 2: Three types of class-based MSLMs on
Switchboard-I (swbd) and ICSI Meeting (mr) corpora
# of swbd mr
classes BROWN MMI MCMI BROWN MMI MCMI
100 68.9?0.3 68.4?0.3 68.2?0.3 78.9?3.0 77.3?2.8 76.8?2.8
500 68.9?0.3 68.3?0.3 67.9?0.3 78.7?3.1 77.1?2.8 76.7?2.8
1000 68.9?0.3 68.2?0.3 67.9?0.3 79.0?3.1 77.2?2.7 76.9?2.8
1500 69.0?0.3 68.2?0.3 68.0?0.3 79.6?3.1 77.4?2.7 77.4?2.7
2000 69.0?0.3 68.3?0.3 68.0?0.3 80.1?3.1 77.6?2.7 77.9?2.7
|V | 68.5?0.3 78.3?2.7
Table 3: Class-based MSLM on Switchboard Eval-2003
size 100 500 1000 1500 2000 |V | 3-gram 4-gram
ppl 65.8 65.5 65.6 65.7 66.1 67.9 72.1 76.3
% reduction 8.6 8.9 8.8 8.7 8.3 5.8 0 -5.8
Class-based language models (Brown et al, 1992;
Whittaker and Woodland, 2003) yield great benefits when
data sparseness abounds. SRILM (Stolcke, 2002) can
produce classes to maximize the mutual information
between the classes I(C(wt);C(wt?1)), as described
in (Brown et al, 1992). More recently, a method for clus-
tering words at different positions was developed (Ya-
mamoto et al, 2001; Gao et al, 2002). Our goal is
to produce classes that improve the scores P (wt|ht) =
P (wt|wt?1, wt?2, C1(at)), what we call class-based
MSLMs. In our case, the vocabulary for A is partitioned
into classes by either maximizing conditional mutual
information (MCMI) I(wt;C(at)|wt?1, wt?2) or just
maximizing mutual information (MMI) I(wt;C(at)).
While such clusterings can perform poorly under low
counts, our results show further consistent improvements.
Our new clustering procedures were implemented into
the SRILM toolkit. When partitioned into smaller
classes, the A-tokens are replaced by their correspond-
ing class IDs. The result is then trained using the same
factored language model as before. The resulting per-
plexities for the MCMI case are presented in Figure 2,
where the horizontal axis shows the number of A-stream
classes (the right-most shows the case before clustering),
and the vertical axis shows average perplexity. In both
data corpora, the average perplexities decrease after ap-
plying class-based MSLMs. For both Switchboard-I and
the meeting data, the best result is achieved using 500
classes (7.1% and 12.2% improvements respectively).
To compare different clustering algorithms, results
with the standard method of (Brown et al, 1992)
(SRILM?s ngram-class) are also reported. All the per-
plexities for these three types of class-based MSLMs are
given in Table 2. For Switchboard-I, ngram-class does
slightly better than without clustering. On the meeting
data, it even does slightly worse than no clustering. Our
MMI method does show a small improvement, and the
perplexities are further (but not significantly) reduced us-
ing our MCMI method (but at the cost of much more
computation during development).
We also show results on Switchboard eval-2003 in Ta-
ble 3. We compare an optimized four-gram, a three-
gram baseline, and various numbers of cluster sizes us-
ing our MCMI method and generalized backoff (Bilmes
and Kirchhoff, 2003), which, (again) with 500 clusters,
achieves an 8.9% relative improvement over the trigram.
5 Discussions and Conclusion
In this paper, novel multi-speaker language modeling
(MSLM) is introduced and evaluated. After simply
adding words from other speakers into a normal trigram
context, the new model shows a reasonable improvement
in perplexity. This model can be further improved when
class-based cross-speaker information is employed. We
also presented two different criteria for this clustering.
The more complex criteria gives similar results to the
simple one, presumably due to data sparseness. Even
though Switchboard and meeting data are different in
terms of topic, speaking style, and speaker number, one
might more robustly learn cross-speaker information by
training on the union of these two data sets.
There are a number of ways to extend this work. First,
our current approach is purely data driven. One can imag-
ine that higher level information (e.g., a dialog or other
speech act) about the other speakers might be particularly
important. Latent semantic analysis of stream A might
also be usefully employed here. Furthermore, more than
one word from stream A can be included in the context
to provide additional predictive ability. With the meet-
ing data, there may be a benefit to controlling for spe-
cific speakers based on their degree of influence. Alterna-
tively, an MSLM might help identify the most influential
speaker in a meeting by determining who most changes
the probability of other speakers? words.
Moreover, the approach clearly suggests that a multi-
speaker decoder in an automatic speech recognition
(ASR) system might be beneficial. Once time marks for
each word are provided in an N -best list, our MSLM
technique can be used for rescoring. Additionally, such
a decoder can easily be specified using graphical mod-
els (Bilmes and Zweig, 2002) in first-pass decodings.
We wish to thank Katrin Kirchhoff and the anonymous
reviewers for useful comments on this work.
References
J. Bilmes and K. Kirchhoff. 2003. Factored language
models and generalized parallel backoff. In Human
Language Technology Conference.
J. Bilmes and G. Zweig. 2002. The graphical models
toolkit: An open source software system for speech
and time-series processing. In Proc. ICASSP, June.
P. Brown, V. Della Pietra, P. deSouza, J. Lai, and R. Mer-
cer. 1992. Class-based n-gram models of natural lan-
guage. Computational Linguistics, 18(4):467?479.
S. Chen and J. Goodman. 1998. An empirical study of
smoothing techniques for language modeling. Techni-
cal Report TR-10-98, Computer Science Group, Har-
vard University, August.
J. Gao, J. Goodman, G. Cao, and H. Li. 2002. Exploring
asymmetric clustering for statistical langauge model-
ing. In Proc. of ACL, pages 183?190, July.
A. Janin, D. Baron, J. Edwards, D. Ellis, D. Gelbart,
N. Morgan, B. Peskin, T. Pfau, E. Shriberg, A. Stolcke,
and C. Wooters. 2003. The ICSI Meeting Corpus. In
Proc. ICASSP, April.
K. Kirchhoff, J. Bilmes, S. Das, N. Duta, M. Egan, G. Ji,
F. He, J. Henderson, D. Liu, M. Noamany, P. Schone,
R. Schwartz, and D. Vergyri. 2003. Novel approaches
to arabic speech recognition: Report from the 2002
Johns-Hopkins workshop. In Proc. ICASSP, April.
R. Schwartz. 2004. Personal communication.
A. Stolcke. 2002. SRILM ? an extensible language mod-
eling toolkit. In Proc. Int. Conf. on Spoken Language
Processing, September.
E. Whittaker and P. Woodland. 2003. Language mod-
elling for Russian and English using words and classes.
Computer Speech and Language, pages 87?104.
H. Yamamoto, S. Isogai, and Y. Sagisaka. 2001. Multi-
class composite n-gram language model for spoken
language processing using multiple word clusters. In
Proc. of ACL, pages 531?538.
Proceedings of the Human Language Technology Conference of the North American Chapter of the ACL, pages 280?287,
New York, June 2006. c?2006 Association for Computational Linguistics
Backoff Model Training using Partially Observed Data:
Application to Dialog Act Tagging
Gang Ji and Jeff Bilmes
Department of Electrical Engineering
University of Washington
Seattle, WA 98105-2500
{gang,bilmes}@ee.washington.edu
Abstract
Dialog act (DA) tags are useful for many
applications in natural language process-
ing and automatic speech recognition. In
this work, we introduce hidden backoff
models (HBMs) where a large generalized
backoff model is trained, using an embed-
ded expectation-maximization (EM) pro-
cedure, on data that is partially observed.
We use HBMs as word models condi-
tioned on both DAs and (hidden) DA-
segments. Experimental results on the
ICSI meeting recorder dialog act corpus
show that our procedure can strictly in-
crease likelihood on training data and can
effectively reduce errors on test data. In
the best case, test error can be reduced by
6.1% relative to our baseline, an improve-
ment on previously reported models that
also use prosody. We also compare with
our own prosody-based model, and show
that our HBM is competitive even without
the use of prosody. We have not yet suc-
ceeded, however, in combining the bene-
fits of both prosody and the HBM.
1 Introduction
Discourse patterns in natural conversations and
meetings are well known to provide interesting and
useful information about human conversational be-
havior. They thus attract research from many differ-
ent and beneficial perspectives. Dialog acts (DAs)
(Searle, 1969), which reflect the functions that ut-
terances serve in a discourse, are one type of such
patterns. Detecting and understanding dialog act
patterns can provide benefit to systems such as au-
tomatic speech recognition (ASR) (Stolcke et al,
1998), machine dialog translation (Lee et al, 1998),
and general natural language processing (NLP) (Ju-
rafsky et al, 1997b; He and Young, 2003). DA pat-
tern recognition is an instance of ?tagging.? Many
different techniques have been quite successful in
this endeavor, including hidden Markov models (Ju-
rafsky et al, 1997a; Stolcke et al, 1998), seman-
tic classification trees and polygrams (Mast et al,
1996), maximum entropy models (Ang et al, 2005),
and other language models (Reithinger et al, 1996;
Reithinger and Klesen, 1997). Like other tagging
tasks, DA recognition can also be achieved using
conditional random fields (Lafferty et al, 2001; Sut-
ton et al, 2004) and general discriminative model-
ing on structured outputs (Bartlett et al, 2004). In
many sequential data analysis tasks (speech, lan-
guage, or DNA sequence analysis), standard dy-
namic Bayesian networks (DBNs) (Murphy, 2002)
have shown great flexibility and are widely used. In
(Ji and Bilmes, 2005), for example, an analysis of
DA tagging using DBNs is performed, where the
models avoid label bias by structural changes and
avoid data sparseness by using a generalized back-
off procedures (Bilmes and Kirchhoff, 2003).
Most DA classification procedures assume that
within a sentence of a particular fixed DA type,
there is a fixed word distribution over the entire sen-
tence. Similar to (Ma et al, 2000) (and see cita-
tions therein), we have found, however, that intra-
280
sentence discourse patterns are inherently dynamic.
Moreover, the patterns are specific to each type of
DA, meaning a sentence will go through a DA-
specific sequence of sub-DA phases or ?states.? A
generative description of this phenomena is that a
DA is first chosen, and then words are generated
according to both the DA and to the relative posi-
tion of the word in that sentence. For example, a
?statement? (one type of DA) can consist of a sub-
ject (noun phrase), verb phrase, and object (noun
phrase). This particular sequence might be different
for a different DA (e.g., a ?back-channel?). Our be-
lief is that explicitly modeling these internal states
can help a DA-classification system in conversa-
tional meetings or dialogs.
In this work, we describe an approach that is
motivated by several aspects of the typical DA-
classification procedure. First, it is rare to have sub-
DAs labeled in training data, and indeed this is true
of the corpus (Shriberg et al, 2004) that we use.
Therefore, some form of unsupervised clustering or
pre-shallow-parsing of sub-DAs must be performed.
In such a model, these sub-DAs are essentially un-
known hidden variables that ideally could be trained
with an expectation-maximization (EM) procedure.
Second, when training models of language, it is nec-
essary to employ some form of smoothing method-
ology since otherwise data-sparseness would render
standard maximum-likelihood trained models use-
less. Third, discrete conditional probability distri-
butions formed using backoff models that have been
smoothed (particularly using modified Kneser-Ney
(Chen and Goodman, 1998)) have been extremely
successful in many language modeling tasks. Train-
ing backoff models, however, requires that all data
is observed so that data counts can be formed. In-
deed, our DA-specific word models (implemented
via backoff) will also need to condition on the cur-
rent sub-DA, which at training time is unknown.
We therefore have developed a procedure that al-
lows us to train generalized backoff models (Bilmes
and Kirchhoff, 2003), even when some or all of the
variables involved in the model are hidden. We thus
call our models hidden backoff models (HBMs). Our
method is indeed a form of embedded EM training
(Morgan and Bourlard, 1990), and more generally
is a specific form of EM (Neal and Hinton, 1998).
Our approach is similar to (Ma et al, 2000), except
our underlying language models are backoff-based
and thus retain the benefits of advanced smoothing
methods, and we utilize both a normal and a backoff
EM step as will be seen. We moreover wrap up the
above ideas in the framework of dynamic Bayesian
networks, which are used to represent and train all
of our models.
We evaluate our methods on the ICSI meeting
recorder dialog act (MRDA) (Shriberg et al, 2004)
corpus, and find that our novel hidden backoff model
can significantly improve dialog tagging accuracy.
With a different number of hidden states for each
DA, a relative reduction in tagging error rate as
much as 6.1% can be achieved. Our best HBM result
shows an accuracy that improves on the best known
(to our knowledge) result on this corpora which is
one that uses acoustic prosody as a feature. We have
moreover developed our own prosody model and
while we have not been able to usefully employ both
prosody and the HBM technique together, our HBM
is competitive in this case as well. Furthermore, our
results show the effectiveness of our embedded EM
procedure, as we demonstrate that it increases train-
ing log likelihoods, while simultaneously reducing
error rate.
Section 2 briefly summarizes our baseline DBN-
based models for DA tagging tasks. In Section 3,
we introduce our HBMs. Section 4 contains experi-
mental evaluations on the MRDA corpus and finally
Section 5 concludes.
2 DBN-based Models for Tagging
Dynamic Bayesian networks (DBNs) (Murphy,
2002) are widely used in sequential data analysis
such as automatic speech recognition (ASR) and
DNA sequencing analysis (Durbin et al, 1999). A
hidden Markov model (HMM) for DA tagging as in
(Stolcke et al, 1998) is one such instance.
Figure 1 shows a generative DBN model that will
be taken as our baseline. This DBN shows a pro-
logue (the first time slice of the model), an epilogue
(the last slice), and a chunk that is repeated suffi-
ciently to fit the entire data stream. In this case,
the data stream consists of the words of a meet-
ing conversation, where individuals within the meet-
ing (hopefully) take turns speaking. In our model,
the entire meeting conversation, and all turns of all
281
sentence change
DA <s>
dialog act
word <s>
word
prologue chunk epilogue
Figure 1: Baseline generative DBN for DA tagging.
speakers, are strung together into a single stream
rather than treating each turn in the meeting indi-
vidually. This approach has the benefit that we are
able to integrate a temporal DA-to-DA model (such
as a DA bigram).
In all our models, to simplify we assume that the
sentence change information is known (as is com-
mon with this corpus (Shriberg et al, 2004)). We
next describe Figure 1 in detail. Normally, the sen-
tence change variable is not set, so that we are within
a sentence (or a particular DA). When a sentence
change does not occur, the DA stays the same from
slice to slice. During this time, we use a DA-specific
language model (implemented via a backoff strat-
egy) to score the words within the current DA.
When a sentence change event does occur, a new
DA is predicted based on the DA from the previous
sentence (using a DA bigram). At the beginning of
a sentence, rather than conditioning on the last word
of the previous sentence, we condition on the special
start of sentence <s> token, as shown in the figure
by having a special parent that is used only when
sentence change is true. Lastly, at the very beginning
of a meeting, a special start of DA token is used.
The joint probability under this baseline model is
written as follows:
P (W, D) =
?
k
P (dk|dk?1)
?
?
i
P (wk,i|wk,i?1, dk),
(1)
where W = {wk,i} is the word sequence, D = {dk}
is the DA sequence, dk is the DA of the k-th sen-
tence, and wk,i is the i-th word of the k-th sentence
in the meeting.
Because all variables are observed when training
our baseline, we use the SRILM toolkit (Stolcke,
2002), modified Kneser-Ney smoothing (Chen and
Goodman, 1998), and factored extensions (Bilmes
and Kirchhoff, 2003). In evaluations, the Viterbi al-
gorithm (Viterbi, 1967) can be used to find the best
DA sequence path from the words of the meeting
according to the joint distribution in Equation (1).
3 Hidden Backoff Models
When analyzing discourse patterns, it can be seen
that sentences with different DAs usually have dif-
ferent internal structures. Accordingly, in this work
we do not assume sentences for each dialog act have
the same hidden state patterns. For instance (and as
mentioned above), a statement can consist of a noun
followed by a verb phase.
A problem, however, is that sub-DAs are not an-
notated in our training corpus. While clustering and
annotation of these phrases is already a widely de-
veloped research topic (Pieraccini and Levin, 1991;
Lee et al, 1997; Gildea and Jurafsky, 2002), in our
approach we use an EM algorithm to learn these hid-
den sub-DAs in a data-driven fashion. Pictorially,
we add a layer of hidden states to our baseline DBN
as illustrated in Figure 2.
sentence change
DA <s>
dialog act
word <s>
word
prologue chunk epilogue
hidden state
Figure 2: Hidden backoff model for DA tagging.
Under this model, the joint probability is:
P (W, S, D) =
?
k
P (dk|dk?1)
?
?
i
[P (sk,i|sk,i?1, dk)
? P (wk,i|wk,i?1, sk,i, dk)] ,
(2)
282
where S = {sk,i} is the hidden state sequence, sk,i
is the hidden state at the i-th position of the k-th sen-
tence, and other variables are the same as before.
Similar to our baseline model, the DA bigram
P (dk|dk?1) can be modeled using a backoff bi-
gram. Moreover, if the states {sk,i} are known
during training, the word prediction probability
P (wk,i|wk,i?1, sk,i, dk) can also use backoff and be
trained accordingly. The hidden state sequence is
unknown, however, and thus cannot be used to pro-
duce a standard backoff model. What we desire is
an ability to utilize a backoff model (to mitigate data
sparseness effects) while simultaneously retaining
the state as a hidden (rather than an observed) vari-
able, and also have a procedure that trains the entire
model to improve overall model likelihood.
Expectation-maximization (EM) algorithms are
well-known to be able to train models with hidden
states. Furthermore, standard advanced smoothing
methods such as modified Kneser-Ney smoothing
(Chen and Goodman, 1998) utilize integer counts
(rather than fractional ones), and they moreover
need ?meta? counts (or counts of counts). There-
fore, in order to train this model, we propose an
embedded training algorithm that cycles between a
standard EM training procedure (to train the hidden
state distribution), and a stage where the most likely
hidden states (and their counts and meta counts) are
used externally to train a backoff model. This pro-
cedure can be described in detail as follows:
Input : W ? meeting word sequence
Input : D ? DA sequence
Output : P (sk,i|sk,i?1) - state transition CPT
Output : P (wk,i|wk,i?1, sk,i, dk) - word model
randomly generate a sequence S;1
backoff train P (wk,i|wk,i?1, sk,i, dk);2
while not ?converged? do3
EM train P (sk,i|sk,i?1);4
calculate best S? sequence by Viterbi;5
backoff train P (wk,i|wk,i?1, s?k,i, dk);6
end7
Algorithm 1: Embedded training for HBMs
In the algorithm, the input contains words and
a DA for each sentence in the meeting. The out-
put is the corresponding conditional probability ta-
ble (CPT) for hidden state transitions, and a back-
off model for word prediction. Because we train the
backoff model when some of the variables are hid-
den, we call the result a hidden backoff model. While
we have seen embedded Viterbi training used in the
past for simultaneously training heterogeneous mod-
els (e.g., Markov chains and Neural Networks (Mor-
gan and Bourlard, 1990)), this is the first instance
of training backoff-models that involve hidden vari-
ables that we are aware of.
While embedded Viterbi estimation is not guar-
anteed to have the same convergence (or fixed-point
under convergence) as normal EM (Lember and
Koloydenko, 2004), we find empirically this to be
the case (see examples below). Moreover, our algo-
rithm can easily be modified so that instead of tak-
ing a Viterbi alignment in step 5, we instead use a
set of random samples generated under the current
model. In this case, it can be shown using a law-of-
large numbers argument that having sufficient sam-
ples guarantees the algorithm will converge (we will
investigate this modification in future work).
Of course, when decoding with such a model, a
conventional Viterbi algorithm can still be used to
calculate the best DA sequence.
4 Experimental Results
We evaluated our hidden backoff model on the
ICSI meeting recorder dialog act (MRDA) corpus
(Shriberg et al, 2004). MRDA is a rich data set that
contains 75 natural meetings on different topics with
each meeting involving about 6 participants. DA an-
notations from ICSI were based on a previous ap-
proach in (Jurafsky et al, 1997b) with some adapta-
tion for meetings in a number of ways described in
(Bhagat et al, 2003). Each DA contains a main tag,
several optional special tags and an optional ?disrup-
tion? form. The total number of distinct DAs in the
corpus is as large as 1260. In order to make the prob-
lem comparable to other work (Ang et al, 2005), a
DA tag sub-set is used in our experiments that con-
tains back channels (b), place holders (h), questions
(q), statements (s), and disruptions (x). In our eval-
uations, among the entire 75 conversations, 51 are
used as the training set, 11 are used as the develop-
ment set, 11 are used as test set, and the remaining
3 are not used. For each experiment, we used a ge-
netic algorithm to search for the best factored lan-
guage model structure on the development set and
283
we report the best results.
Our baseline system is the generative model
shown in Figure 1 and uses a backoff implementa-
tion of the word model, and is optimized on the de-
velopment set. We use the SRILM toolkit with ex-
tensions (Bilmes and Kirchhoff, 2003) to train, and
use GMTK (Bilmes and Zweig, 2002) for decoding.
Our baseline system has an error rate of 19.7% on
the test set, which is comparable to other approaches
on the same task (Ang et al, 2005).
4.1 Same number of states for all DAs
To compare against our baseline, we use HBMs in
the model shown in Figure 2. To train, we followed
Algorithm 1 as described before and as is here de-
tailed in Figure 3.
  Initialization:
- randomize states
- train word FLM
             Convergence:
- llh change < 0.2%
- or 10 iterations
- find best state path
- train word FLM
Text Text
3-epoch
EM training
No
- find best state path
- train word FLM
Text Text
5-epoch
EM training
Yes
Figure 3: Embedded training: llh = log likelihood
In this implementation, an upper triangular ma-
trix (with self-transitions along the diagonal) is used
for the hidden state transition probability table so
that sub-DA states only propagate in one direction.
When initializing the hidden state sequence of a DA,
we expanded the states uniformly along the sen-
tence. This initial alignment is then used for HBM
training. In the word models used in our experi-
ments, the backoff path first drops previous words,
then does a parallel backoff to hidden state and DA
using a mean combination strategy.
The HBM thus obtained was then fed into the
main loop of our embedded EM algorithm. The
training was considered to have ?converged? if ei-
ther it exceeded 10 iterations (which never hap-
pened) or the relative log likelihood change was less
than 0.2%. Within each embedded iteration, three
EM epochs were used. After each EM iteration,
a Viterbi alignment was performed thus obtaining
what we expect to be a better hidden state alignment.
This updated alignment, was then used to train a
new HBM. The newly generated model was then fed
back into the embedded training loop until it con-
verged. After the procedure met our convergence
criteria, an additional five EM epochs were carried
out in order to provide a good hidden state transi-
tion probability table. Finally, after Viterbi align-
ment and text generation was performed, the word
HBM was trained from the best state sequence.
To evaluate our hidden backoff model, the Viterbi
algorithm was used to find the best DA sequence ac-
cording to test data, and the tagging error rates were
calculated. In our first experiment, an equal num-
ber of hidden states for all DAs were used in each
model. The effect of this number on the accuracy of
DA tagging is shown in Table 1.
Table 1: HBMs, different numbers of hidden states.
# states error improvement
baseline 19.7% ?
2-state 18.7% 5.1%
3-state 19.5% 1.0%
For the baseline system, the backoff path first
drops dialog act, and for the HBMs, all backoff
paths drop hidden state first and drop DA sec-
ond. From Table 1 we see that with two hidden states
for every DA the system can reduce the tagging error
rate by more than 5% relative. As a comparison, in
(Ang et al, 2005), where conditional maximum en-
tropy models (which are conditionally trained) are
used, the error rate is 18.8% when using both word
and acoustic prosody features, and and 20.5% with-
out prosody. When the number of hidden states in-
creases to 3, the improvement decreases even though
it is still (very slightly) better than the baseline. We
believe the reasons are as follows: First, assuming
different DAs have the same number of hidden states
may not be appropriate. For example, back chan-
nels usually have shorter sentences and are constant
in discourse pattern over a DA. On the other hand,
284
questions and statements typically have longer, and
more complex, discourse structures. Second, even
under the same DA, the structure and inherent length
of sentence can vary. For example, ?yes? can also be
a statement even though it has only one word. There-
fore, one-word statements need completely differ-
ent hidden state patterns than those in subject-verb-
object like statements ? having one monolithic 3-
state model for statements might be inappropriate.
This issue is discussed further in Section 4.4.
4.2 Different states for different DAs
In order to mitigate the first problem described
above, we allow different numbers of hidden states
for each DA. This, however, leads to a combinato-
rial explosion of possibilities if done in a na??ve fash-
ion. Therefore, we attempted only a small number
of combinations based on the statistics of numbers
of words in each DA given in Table 2.
Table 2: Length statistics of different DAs.
DA mean median std p
(b) 1.0423 1 0.2361 0.4954
(h) 1.3145 1 0.7759 0.4660
(q) 6.5032 5 6.3323 0.3377
(s) 8.6011 7 7.8380 0.3013
(x) 1.7201 1 1.1308 0.4257
Table 2 shows the mean and median number of
words per sentence for each DA as well as the stan-
dard deviation. Also, the last column provides the p
value according to fitting the length histogram to a
geometric distribution (1 ? p)np. As we expected,
back channels (b) and place holders (h) tend to have
shorter sentences while questions (q) and statements
(s) have longer ones. From this analysis, we use
fewer states for (b) and (h) and more states for (q)
and (s). For disruptions (x), the standard deviation of
number of words histogram is relatively high com-
pared with (b) and (h), so we also used more hidden
states in this case. In our experimental results below,
we used one state for (b) and (h), and various num-
bers of hidden states for other DAs. Tagging error
rates are shown in Table 3.
From Table 3, we see that using different num-
bers of hidden states for different DAs can produce
better models. Among all the experiments we per-
Table 3: Number of hidden states for different DAs.
b h q s x error improvement
1 1 4 4 1 18.9% 4.1%
1 1 3 3 2 18.9% 4.1%
1 1 2 2 2 18.7% 5.1%
1 1 3 2 2 18.6% 5.6%
1 1 3 2 2 18.5% 6.1%
formed, the best case is given by three states for (q),
two states for (s) and (x), and one state for (b) and
(h). This combination gives 6.1% relative reduction
of error rate from the baseline.
4.3 Effect of embedded EM training
Incorporating backoff smoothing procedures into
Bayesian networks (and hidden variable training in
particular) can show benefits for any data domain
where smoothing is necessary. To understand the
properties of our algorithm a bit better, after each
training iteration using a partially trained model, we
calculated both the log likelihood of the training set
and the tagging error rate of the test data. Figure 4
shows these results using the best configuration from
the previous section (three states for (q), two for
(s)/(x) and one for (b)/(h)). This example is typical
of the convergence we see of Algorithm 1, which
empirically suggests that our procedure may be sim-
ilar to a generalized EM (Neal and Hinton, 1998).
1 2 3 4 5 6 7
18
19
20
21
22
23
24
iterations
er
ro
r r
at
e 
(%)
?1.2
?1.15
?1.1
?1.05
x 106
lo
g 
lik
el
ih
oo
d
llh
baseline
error rate
Figure 4: Embedded EM training performance.
We find that the log likelihood after each EM
training is strictly increasing, suggesting that our
embedded EM algorithm for hidden backoff models
285
is improving the overall joint likelihood of the train-
ing data according to the model. This strict increase
of likelihood combined with the fact that Viterbi
training does not have the same theoretical conver-
gence guarantees as does normal EM indicates that
more detailed theoretical analysis of this algorithm
used with these particular models is desirable.
From the figure we also see that both the log
likelihood and tagging error rate ?converge? af-
ter around four iterations of embedded training.
This quick convergence indicates that our embedded
training procedure is effective. The leveling of the
error rates after several iterations shows that model
over-fitting appears not to be an issue presumably
due to the smoothed embedded backoff models.
4.4 Discussion and Error Analysis
A large portion of our tagging errors are due to con-
fusing the DA of short sentences such as ?yeah?, and
?right?. The sentence, ?yeah? can either be a back
channel or an affirmative statement. There are also
cases where ?yeah?? is a question. These types of
confusions are difficult to remove in the prosody-
less framework but there are several possibilities.
First, we can allow the use of a ?fork and join? tran-
sition matrix, where we fork to each DA-specific
condition (e.g., short or long) and join thereafter.
Alternatively, hidden Markov chain structuring al-
gorithms or context (i.e., conditioning the number
of sub-DAs on the previous DA) might be helpful.
Finding a proper number of hidden states for each
DA is also challenging. In our preliminary work, we
simply explored different combinations using sim-
ple statistics of the data. A systematic procedure
would be more beneficial. In this work, we also
did not perform any hidden state tying within dif-
ferent DAs. In practice, some states in statements
should be able to be beneficially tied with other
states within questions. Our results show that having
three states for all DAs is not as good as two states
for all. But with tying, more states might be more
successfully used.
4.5 Influence of Prosody Cues
It has been shown that prosody cues provide use-
ful information in DA tagging tasks (Shriberg et
al., 1998; Ang et al, 2005). We also incorporated
prosody features in our models. We used ESPS
get f0 based on RAPT algorithm (Talkin, 1995) to
get F0 values. For each speaker, mean and variance
normalization is performed. For each word, a linear
regression is carried on the normalized F0 values.
We quantize the slope values into 20 bins and treat
those as prosody features associated with each word.
After adding the prosody features, the simple gener-
ative model as shown in Figure 5 gives 18.4% error
rate, which is 6.6% improvement over our baseline.
There is no statistical difference between the best
performance of this prosody model and the earlier
best HBM. This implies that the HBM can obtain
as good performance as a prosody-based model but
without using prosody.
sentence change
DA <s>
dialog act
word <s>
word
prologue chunk epilogue
prosody
Figure 5: Generative prosody model for DA tagging.
The next obvious step is to combine an HBM with
the prosody information. Strangely, even after ex-
perimenting with many different models (including
ones where prosody depends on DA; prosody de-
pends on DA and the hidden state; prosody depends
on DA, hidden state, and word; and many varia-
tions thereof), we were unsuccessful in obtaining
a complementary benefit when using both prosody
and an HBM. One hypothesis is that our prosody
features are at the word-level (rather than at the DA
level). Another problem might be the small size of
the MRDA corpus relative to the model complexity.
Yet a third hypothesis is that the errors corrected by
both methods are the same ? indeed, we have ver-
ified that the corrected errors overlap by more than
50%. We plan further investigations in future work.
286
5 Conclusions
In this work, we introduced a training method for
hidden backoff models (HBMs) to solve a problem
in DA tagging where smoothed backoff models in-
volving training-time hidden variables are useful.
We tested this procedure in the context of dynamic
Bayesian networks. Different hidden states were
used to model different positions in a DA. According
to empirical evaluations, our embedded EM algo-
rithm effectively increases log likelihood on training
data and reduces DA tagging error rate on test data.
If different numbers of hidden states are used for dif-
ferent DAs, we find that our prosody-independent
HBM reduces the tagging error rate by 6.1% rela-
tive to the baseline, a result that improves upon pre-
viously reported work that uses prosody, and that is
comparable to our own new result that also incorpo-
rates prosody. We have not yet been able to combine
the benefits of both an HBM and prosody informa-
tion. This material is based upon work supported
by the National Science Foundation under Grant No.
IIS-0121396.
References
J. Ang et al 2005. Automatic dialog act segmentation and
classification in multiparty meetings. In ICASSP.
P. Bartlett et al 2004. Exponentiated gradient algorithms for
large-margin structured classification. In NIPS.
S. Bhagat et al 2003. Labeling guide for dialog act tags in the
meeting recordering meetings. Technical Report 2, Interna-
tional Computer Science Insititute.
J. Bilmes and K. Kirchhoff. 2003. Factored language mod-
els and generalized parallel backoff. In Human Lang. Tech.,
North American Chapter of Asssoc. Comp. Ling., Edmonton,
Alberta, May/June.
J. Bilmes and G. Zweig. 2002. The Graphical Models Toolkit:
An open source software system for speech and time-series
processing. Proc. IEEE Intl. Conf. on Acoustics, Speech, and
Signal Processing.
S. Chen and J. Goodman. 1998. An empirical study of smooth-
ing techniques for language modeling. Technical report,
Computer Science Group, Harvard University.
R. Durbin et al 1999. Biological Sequence Analysis: Prob-
abilistic Models of Proteins and Nucleic Acids. Cambridge
University Press.
D. Gildea and D. Jurafsky. 2002. Automatic labeling of seman-
tic roles. Computational Linguistics, 28(3):245?288.
Y. He and S. Young. 2003. A data-driven spoken language un-
derstanding system. In Proc. IEEE Workshop on Automatic
Speech Recognition and Understanding, pages 583?588.
G. Ji and J. Bilmes. 2005. Dialog act tagging using graphical
models. In Proc. IEEE Intl. Conf. on Acoustics, Speech, and
Signal Processing, Philadelphia, PA, March.
D. Jurafsky et al 1997a. Automatic detection of discourse
structure for speech recognition and understanding. In Proc.
IEEE Workshop on Speech Recognition and Understanding.
D. Jurafsky et al 1997b. Switchboard SWBD-
DAMSL shallow-discourse-function annotation coders man-
ual. Technical Report 97-02, Institute of Cognitive Science,
University of Colorado.
J. Lafferty et al 2001. Conditional random fields: Probabilistic
models for segmenting and labeling sequence data. In ICML.
K. Lee et al 1997. Restricted representation of phrase struc-
ture grammar for building a tree annotated corpus of Korean.
Natural Language Engineering, 3(2-3):215?230.
H. Lee et al 1998. Speech act analysis model of Korean utter-
ances for automatic dialog translation. J. KISS(B) (Software
and Applications), 25(10):1443?1452.
J. Lember and A. Koloydenko. 2004. Adjusted viterbi training.
a proof of concept. In Submission.
K. Ma et al 2000. Bi-modal sentence structure for language
modeling. Speech Communication, 31(1):51?67.
M. Mast et al 1996. Automatic classification of dialog acts
with semantic classification trees and polygrams. Connec-
tionist, Statistical and Symbolic Approaches to Learning for
Natural Language Processing, pages 217?229.
N. Morgan and H. Bourlard. 1990. Continuous speech recogni-
tion using multilayer perceptrons with hidden Markov mod-
els. In ICASSP, pages 413?416.
K. Murphy. 2002. Dynamic Bayesian Networks, Represen-
tation, Inference, and Learning. Ph.D. thesis, MIT, Dept.
Computer Science.
R. Neal and G. Hinton. 1998. A view of the EM algorithm that
justifies incremental, sparse, and other variants. In Learning
in Graphical Models, pages 355?368. Dordrecht: Kluwer
Academic Publishers.
R. Pieraccini and E. Levin. 1991. Stochastic representation of
semantic structure for speech understanding. In Eurospeech,
volume 2, pages 383?386.
N. Reithinger and M. Klesen. 1997. Dialogue act classification
using language models. In Eurospeech.
N. Reithinger et al 1996. Predicting dialogue acts for a speech-
to-speech translation system. In ICLSP, pages 654?657.
J. Searle. 1969. Speech Acts: An Essay in the Philosophy of
Language. Cambridge University Press.
E. Shriberg et al 1998. Can prosody aid the automatic classi-
fication of dialog acts in conversational speech? Language
and Speech, 41(3?4):439?487.
E. Shriberg et al 2004. The ICSI meeting recorder dialog act
(MRDA) corpus. In Proc. of the 5th SIGdial Workshop on
Discourse and Dialogue, pages 97?100.
A. Stolcke et al 1998. Dialog act modeling for conversa-
tional speech. In Proc. AAAI Spring Symp. on Appl. Machine
Learning to Discourse Processing, pages 98?105.
A. Stolcke. 2002. SRILM ? an extensible language modeling
toolkit. In ICLSP, volume 2, pages 901?904.
C. Sutton et al 2004. Dynamic conditional random fields: fac-
torized probabilistic models for labeling and segmenting se-
quence data. In ICML.
D. Talkin. 1995. A robust algorithm for pitch tracking (rapt).
In W. B. Kleijn and K.K. Paliwal, editors, Speech Coding
and Synthesis, pages 495?518. Elsevier Science.
A. Viterbi. 1967. Error bounds for convolutional codes and an
asymptotically optimum decoding algorithm. IEEE Trans.
on Information Theory, 13(2):260?269.
287
