Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1092?1103,
October 25-29, 2014, Doha, Qatar.
c
?2014 Association for Computational Linguistics
Question Answering over Linked Data Using First-order Logic
?
Shizhu He, Kang Liu, Yuanzhe Zhang, Liheng Xu and Jun Zhao
National Laboratory of Pattern Recognition
Institute of Automation, Chinese Academy of Sciences, Beijing, 100190, China
{shizhu.he, kliu, yzzhang, lhxu, jzhao}@nlpr.ia.ac.cn
Abstract
Question Answering over Linked Data
(QALD) aims to evaluate a question an-
swering system over structured data, the
key objective of which is to translate
questions posed using natural language
into structured queries. This technique
can help common users to directly ac-
cess open-structured knowledge on the
Web and, accordingly, has attracted much
attention. To this end, we propose a
novel method using first-order logic. We
formulate the knowledge for resolving
the ambiguities in the main three steps
of QALD (phrase detection, phrase-to-
semantic-item mapping and semantic item
grouping) as first-order logic clauses in a
Markov Logic Network. All clauses can
then produce interacted effects in a unified
framework and can jointly resolve all am-
biguities. Moreover, our method adopts a
pattern-learning strategy for semantic item
grouping. In this way, our method can
cover more text expressions and answer
more questions than previous methods us-
ing manually designed patterns. The ex-
perimental results using open benchmarks
demonstrate the effectiveness of the pro-
posed method.
1 Introduction
With the rapid development of the Web of Data,
many RDF datasets have been published as Linked
Data (Bizer et al., 2009), such as DBpedia (Auer
et al., 2007), Freebase (Bollacker et al., 2008)
and YAGO (Suchanek et al., 2007). The grow-
ing amount of Linked Data contains a wealth of
knowledge, including entities, classes and rela-
tions. Moreover, these linked data usually have
?
Shizhu He and Kang Liu have equal contribution to this
work.
complex structures and are highly heterogeneous.
As a result, there are gaps for users regarding ac-
cess. Although a few experts can write queries us-
ing structured languages (such as SPARQL) based
on their needs, this skill cannot be easily utilized
by common users (Christina and Freitas, 2014).
Thus, providing user-friendly, simple interfaces
to access these linked data becomes increasingly
more urgent.
Because of this, question answering over linked
data (QALD) (Walter et al., 2012) has recently
received much interest, and most studies on this
topic have focused on translating natural lan-
guage questions into structured queries (Freitas
and Curry, 2014; Yahya et al., 2012; Unger et al.,
2012; Shekarpour et al., 2013; Yahya et al., 2013;
Bao et al., 2014; Zou et al., 2014). For example,
with respect to the question
?Which software has been developed by organi-
zations founded in California, USA??,
the aim is to automatically convert this utterance
into an SPARQL query that contains the follow-
ing subject-property-object (SPO) triple format:
??url rdf:type dbo:Software, ?url dbo:developer ?x1,
?x1 rdf:type dbo:Company, ?x1 dbo:foundationPlace
dbr:California?
1
.
To fulfill this objective, existing systems (Lopez
et al., 2006; Unger et al., 2012; Yahya et al., 2012;
Zou et al., 2014) usually adopt a pipeline frame-
work that contains four major steps: 1) decompos-
ing the question and detecting phrases, 2) map-
ping the detected phrases into semantic items of
Linked Data, 3) grouping the mapped semantic
items into semantic triples, and 4) generating the
correct SPARQL query.
However, completing these four steps and con-
structing such a structured query is not easy. The
first three steps mentioned above are subject to the
1
The prefixes in semantic items indicate the source of
their vocabularies.
1092
problem of ambiguity, which is the major chal-
lenge in QALD. Using the question mentioned
above as an example, we can choose Califor-
nia or California, USA when detecting phrases,
the phrase California can be mapped to the en-
tity California State or California Film, and the class
Software (mapped from the phrase software) can
be matched with the first argument of the rela-
tion producer or developer (these two relations can
be mapped from the phrase developed). Previ-
ous methods (Lopez et al., 2006; Lehmann et
al., 2012; Freitas and Curry, 2014) have usu-
ally performed disambiguation at each step only,
and the subsequent step was performed based on
the disambiguation results in the previous step(s).
However, we argue that the three steps men-
tioned above have mutual effects. In the previ-
ous example, the phrase founded in (verb) can
be mapped to the entities (Founding of Rome and
Founder (company)), classes (Company and Depart-
ment) or relations (foundedBy and foundationPlace).
If we know that the phrase California can refer
to the entity California State, and which can be the
second argument of the relation foundationPlace,
together with a verb phrase being more likely
to be mapped to Relation, we should map the
phrase founded in to foundationPlace in this ques-
tion. Thus, we aim to determine if joint disam-
biguation is better than individual disambigua-
tion. (Question One)
In addition, previous systems usually employed
manually designed patterns to extract predicate-
argument structures that are used to guide the dis-
ambiguation process in the three steps mentioned
above (Yahya et al., 2012; Unger et al., 2012; Zou
et al., 2014). For example, (Yahya et al., 2012)
used only three dependency patterns to group the
mapped semantic items into semantic triples. Nev-
ertheless, these three manually designed patterns
miss many cases because of the diversity of the
question expressions. We gathered statistics on
144 questions and found that the macro-average
F1 and micro-average F1 of the three patterns
2
used in (Yahya et al., 2012) are only 62.8 and
66.2%, respectively. Furthermore, these specially
designed patterns may not be valid with variations
in domains or languages. Therefore, another im-
portant question arises: can we automatically
learn rules or patterns to achieve the same ob-
2
They are 1) verbs and their arguments, 2) adjectives and
their arguments and 3) propositionally modified tokens and
objects of prepositions.
jective? (Question Two)
Focusing on the two problems mentioned
above, this paper proposes a novel algorithm based
on a learning framework, Markov Logic Networks
(MLNs) (Richardson and Domingos, 2006), to
learn a joint model for constructing structured
queries from natural language utterances. MLN
is a statistical relational learning framework that
combines first-order logic and Markov networks.
The appealing property of MLN is that it is read-
ily interpretable by humans and that it is a natural
framework for performing joint learning. We for-
mulate the knowledge for resolving the ambigui-
ties in the main three steps of QALD (phrase de-
tection, phrase-to-semantic-item mapping and se-
mantic item grouping) as first-order logic clauses
in an MLN. In the framework of MLN, all clauses
will produce interacted effects that jointly resolve
all problems into a unified process. In this way,
the result in each step can be globally optimized.
Moreover, in contrast to previous methods, we
adopt a learning strategy to automatically learn
the patterns for semantic item grouping. We de-
sign several meta patterns as opposed to the spe-
cific patterns. In addition, these meta patterns are
formulated as the first-order logic formulas in the
MLN. The specific patterns can be generated by
these meta patterns based on the training data. The
model will learn the weights of each clause to de-
termine the most effective patterns for semantic
triple construction. In this way, with little effort,
our approach can cover more semantic expressions
and answer more questions than previous meth-
ods, which depend on manually designed patterns.
We evaluate the proposed method using several
benchmarks (QALD-1, QALD-3, QALD-4). The
experimental results demonstrate the advantage of
the joint disambiguation process mentioned above.
They also prove that our approach, employing
MLN to automatically learn the patterns of seman-
tic triple grouping, is effective. Our system can
answer more questions and obtain better perfor-
mance than the traditional methods based on man-
ually designed heuristic rules.
2 Background
2.1 Linked Data Sources
Linked Data consist of many relational data,
which are usually inter-linked as subject-property-
object (SPO) triple statements (such as using the
owl:sameAs relation). In this paper, we mainly use
1093
Subject(Arg1) Relation(Property) Object(Arg2) 
ProgrammingLanguage subClassOf Software 
Java_(programming_language) type Software 
Java_(programming_language) developer Oracle_Corporation 
Oracle_Corporation foundationPlace California_(State) 
foundationPlace domain Organisation 
California_(State) label ?California? 
California_(1977_film) label ?California? 
Oracle_Corporation numEmployees 118119(xsd:integer) 
 
Figure 1: Sample knowledge base facts.
DBpedia
3
and some classes from Yago
4
. These
knowledge bases (KBs) are composed of many on-
tological and instance statements, and all state-
ments are expressed by SPO triple facts. Figure
1 shows some triple fact samples from DBpedia.
Each fact is composed of three semantic items. A
semantic item can be an entity (California (State),
Oracle Corporation, etc.), a class (Software, Organ-
isation, etc.) or a relation (called a property
or predicate in some occasions). Some entities
are literals including strings, numbers and dates
(118119(xsd:integer), etc.). Relations contain stan-
dard Semantic Web relations (subClassOf, type, do-
main and label) and ontological relations (developer,
foundationPlace and numEmployees).
2.2 Task Statement
Given a knowledge base (KB), our objective is to
translate a natural language question q
NL
into a
formal language query q
FL
that targets the seman-
tic vocabularies given by the KB, and the query
q
FL
should capture the user information needs ex-
pressed by q
NL
.
Following (Yahya et al., 2012), we focus on the
factoid questions, and the answers to such ques-
tions are an entity or a set of entities. We ignore
the questions that need the aggregation
5
(max/min,
etc.) and negation operations. That is, we generate
queries that consist of a plentiful number of triple
patterns, which are multiple conjunctions of SPO
search conditions.
3 Framework
Figure 2 shows the entire framework of our system
for translating a question into a formal SPARQL
query. The first three steps address the input ques-
tion through 1) Phrase Detection (detecting pos-
sible phrases), 2) Phrase Mapping (mapping all
3
http://dbpedia.org/
4
http://www.mpi-inf.mpg.de/yago-naga/yago/
5
We can address the count query questions, which will
be explained in Section 3.
phrase candidates to the corresponding seman-
tic items), and 3) Feature Extraction (extracting
the linguistic features and semantic item features
from the question and the Linked Data, respec-
tively). As a result, a space of candidates is con-
structed, including possible phrases, mapped se-
mantic items and the possible argument match re-
lations among them. Next, the fourth step (In-
ference) formulates the joint disambiguation as a
generalized inference task. We employ rich fea-
tures and constraints (including hard and soft con-
straints) to infer a joint decision through an MLN.
Finally, with the inference results, we can con-
struct a semantic item query graph and generate
an executable SPARQL query. In the following
subsection, we demonstrate each step in detail.
1) Phrase detection. In this step, we detect
phrases (sequences of tokens) that probably indi-
cate semantic items in the KB. We do not use a
named entity recognizer (NER) because of its low
coverage. We perform testing on two commonly
used question corpora, QALD-3 and free917
6
, us-
ing the Stanford NER tool
7
. The results demon-
strate that only 51.5 and 23.8% of the NEs are
correctly recognized, respectively. To avoid miss-
ing useful phrases, we retain all n-grams as phrase
candidates, and then use some rules to filter them.
The rules include the following: the span length
must be less than 4 (accepting that all contiguous
tokens are capitalizations), the POS tag of the start
token must be jj, nn, rb and vb, all contiguous
capitalization tokens must not be split, etc. For
instance, software, developed by, organizations,
founded in and California are detected in the ex-
ample of the first section.
2) Phrase mapping. After the phrases are de-
tected, each phrase can be mapped to the corre-
sponding semantic item in KB (entity, class and
relation). For example, software is mapped to
dbo:Software, dbo:developer, etc., and California is
mapped to dbr:California, dbr:California (wine), etc.
For different types of semantic items, we use dif-
ferent techniques. For mapping phrases to en-
tities, considering that the entities in DBpedia
and Wikipedia are consistent, we employ anchor,
redirection and disambiguation information from
Wikipedia. For mapping phrases to classes, con-
sidering that classes have lexical variation, espe-
cially synonyms, e.g., dbo:Film can be mapped
6
http://www.cis.temple.edu/?yates/open-sem-
parsing/index.html
7
http://nlp.stanford.edu/software/CRF-NER.shtml
1094
Which software has been developed by
organizations founded in California, USA? software, developed, developed by, organizations,
founded, founded in, California, USA
software
developed by
...
...
...
California
phraseIndex
phrasePosTag
resourceType
priorMatchScore
hasMeanWord
phraseDepTag
hasRelatedness
...
isTypeCompatible
hasPhrase hasResource
hasRelation
Figure 2: Framework of our system.
from film, movie and show, we compute the simi-
larity between the phrase and the class in the KB
with the word2vec tool
8
. The word2vec tool com-
putes fixed-length vector representations of words
with a recurrent-neural-network based language
model (Mikolov et al., 2010). The similarity scor-
ing methods are introduced in Section 4.2. Then,
the top-N most similar classes for each phrase are
returned. For mapping phrases to relations, we
employ the resources from PATTY (Nakashole et
al., 2012) and ReVerb (Fader et al., 2011). Specif-
ically, we first compute the associations between
the ontological relations in DBpedia and the re-
lation patterns in PATTY and ReVerb through in-
stance alignments as in (Berant et al., 2013). Next,
if a detected phrase is matched to some relation
pattern, the corresponding ontological relations in
DBpedia will be returned as a candidate. This step
only generates candidates for every possible map-
ping, and the decision of the best selection will be
performed in the next step.
3) Feature extraction and joint inference.
There exist ambiguities in phrase detection and in
mapping phrases to semantic items. This step fo-
cuses on addressing these ambiguities and deter-
8
https://code.google.com/p/word2vec/
mining the argument match relations among the
mapped semantic items. This is the core compo-
nent of our system, and it performs disambigua-
tion in a unified manner. First, feature extraction
is performed to prepare a rich number of features
from the input question and from the KB. Next,
the disambiguation is performed in a joint fashion
with a Markov Logic Network. Detailed informa-
tion will be presented in Section 4.
4) Semantic item query graph construction.
Based on the inference results, we construct a
query graph. The vertices contain the following:
the detected phrase, the token span indexes of
the phrases, the mapped semantic items and their
types. The edge indicates the argument match re-
lation between two semantic items. For example,
we use 1 2 to indicate that the first argument of
an item matches the second argument of another
item
9
. The right bottom in Figure 2 shows an ex-
ample of this.
5) Query generation. The SPARQL queries
require the grouped triples of semantic items.
Thus, in this step, we convert a query graph
into multiple joined semantic triples. Three in-
terconnected semantic items, whereby it must
9
The other marks will be introduced in Section 4.2.
1095
be ensured that the middle item is a rela-
tion, are converted into a semantic triple (mul-
tiple joined facts containing variables). For
example, the query graph Vdbo:Book[Class] 1 2
??
dbo:author[Relation] 1 1
??
dbr:Danielle Steel[Entity]W is
converted into ??x rdf:type dbo:Book, dbr:Danielle
dbo:author ?x?, and Vdbo:populationTotal[Relation]
1 2
??
dbo:capital[Relation] 1 1
??
dbr:Australia[Entity]W
10
is
converted into ??x1 dbo:populationTotal ?answer, ?x1
dbo:capital dbr:Australia?. If the query graph only
contains one vertex that indicates a class ClassURI,
we generate ??x rdf:type ClassURI?. If the query
graph only contains two connected vertexes, we
append a variable to bind the missing match argu-
ment of the semantic item.
The final SPARQL query is constructed by join-
ing the semantic item triples based on the cor-
responding SPARQL template. We divide the
questions into three types: Yes/No, Normal and
Number. Yes/No questions use the ASK WHERE
template. Normal questions use the SELECT ?url
WHERE template. Number questions first use the
normal question template, and if they cannot ob-
tain a correct answer (a valid numeric value), we
use the SELECT COUNT(?url) WHERE template to
generate a query again. For instance, we construct
the SPARQL query SELECT(?url) WHERE{ ?url
rdf:type dbo:Software. ?url dbo:developer ?x1. ?x1 rdf:type
dbo:Company. ?x1 dbo:foundationPlace dbr:California.}
for this example.
4 Joint Disambiguation with MLN
In this section, we present our method for ques-
tion answering over linked data using a Markov
Logic Network (MLN). In the following subsec-
tions, we first briefly describe the MLN. Then, we
present the predicates and the first-order logic for-
mulas used in the model.
4.1 Markov Logic Networks
Markov logic networks combine Markov networks
with first-order logic in a probabilistic framework
(Richardson and Domingos, 2006). An MLNM
consists of several weighted formulas {(?
i
, w
i
)}
i
,
where ?
i
is a first order formula and w
i
is the
penalty (the formula?s weight). In contrast to
the first-order logic, whereby a formula repre-
sents a hard constraint, these logic formulas are
relaxed and can be violated with penalties in the
10
This corresponds to the question ?How many people live
in the capital of Australia??
MLN. Each formula ?
i
consists of a set of first-
order predicates, logical connectors and variables.
These weighted formulas define a probability dis-
tribution over a possible world. Let y denote a pos-
sible world. Then p(y) is defined as follows:
p(y) =
1
Z
exp
?
?
?
(?
i
,w
i
)?M
w
i
?
c?C
n
?
i
f
?
i
c
(y)
?
?
,
where each c is a binding of the free variables in
?
i
to constants; f
?
i
c
is a binary feature function
that returns 1 if the ground formula that we ob-
tain through replacing the free variables in ?
i
with
the constants in c under the given possible world
y is true and is 0 otherwise; and C
n
?
i
is the set of
all possible bindings for the free variables in ?
i
.
Z is a normalized constant. The Markov network
corresponds to this distribution, where nodes rep-
resent ground atoms and factors represent ground
formulas.
4.2 Predicates
In the MLN, we design several predicates to re-
solve the ambiguities in phrase detection, map-
ping phrases to semantic items and semantic item
grouping. Specifically, we design a hidden pred-
icate hasPhrase(i) to indicate that the i-th candi-
date phrase has been chosen. The predicate hasRe-
source(i,j) indicates that the i-th phrase is mapped
to the j-th semantic item. The predicate hasRe-
lation(j,k,rr) indicates that the j-th semantic item
and the k-th semantic item should be grouped to-
gether with the argument-match-type rr. Note that
we define four argument match types between two
semantic items: 1 1, 1 2, 2 1 and 2 2. Here, the
argument match type t s denotes that the t-th argu-
ment of the first semantic item corresponds to the
s-th argument of the second semantic item
11
. The
detailed illustration is shown in Table 1.
Type Example Question
1 1 dbo:height 1 1 dbr:Michael Jordan How tall is Michael Jor-
dan?
1 2 dbo:River 1 2 dbo:crosses Which river does the
Brooklyn Bridge cross?
2 1 dbo:creator 2 1 dbr:Walt Disney Which television shows
were created by Walt
Disney?
2 2 dbo:birthPlace 2 2 dbo:capital Which actors were born in
the capital of American?
Table 1: Examples of the argument match types.
11
The 2-nd argument is corresponding to the object argu-
ment of the relation, and the 1-st argument is corresponding
with the subject argument of the relation and the entity (in-
cluding the class) itself.
1096
Describing the attributes of phrases and relation between two phrases
phraseIndex(p, i, j) The start and end position of phrase p in question.
phrasePosTag(p, pt) The POS tag of the head word in phrase p.
phraseDepTag(p, q, dt) The dependency path tags between phrase p and q.
phraseDepOne (p, q) If there is only one tag in the dependency path, the predicate is true.
hasMeanWord (p, q) If there is any one meaning word in the dependency path of two phrases, the predicate is true.
Describing the attributes of semantic item and the mappings between phrases and semantic items
resourceType(r, rt) The type of semantic item r. Types of semantic items include Entity, Class and Relation
priorMatchScore(p, r, s) The prior score of phrase p mapping to semantic item r.
Describing the attributes of relation between two semantic items in a knowledge base
hasRelatedness(p, q, s) The semantic coherence of semantic items.
isTypeCompatible(p, q, rr) If the semantic items p are type-compatible with the semantic items q, the predicate is true.
hasQueryResult(s, p, o, rr1, rr2) If the triple pattern consisting of semantic items s, p, o and argument-match-types rr1 and rr2 have query
results, the predicate is true.
Table 2: Descriptions of observed predicates.
Moreover, we define a set of observed predi-
cates to describe the properties of phrases, seman-
tic items, relations between phrases and relations
between semantic items. The observed predicates
and descriptions are shown in Table 2.
Previous methods usually designed some
heuristic patterns to group semantic items, which
usually employed a human-designed syntactic
path between two phrases to determine their re-
lations. In contrast, we collect all the tokens in
the dependency path between two phrases as pos-
sible patterns. The predicates phraseDepTag and
hasMeanWord are designed to indicate the possi-
ble patterns. Note that if these tokens only contain
POS tags dt|in|wdt|to|cc|ex|pos|wp or stop words,
the value of the predicate hasMeanWord is false;
otherwise, it is true. In this way, our system is ex-
pected to cover more question expressions. More-
over, the SPARQL endpoint is used to verify the
type compatibility of two semantic items and if
one triple pattern can obtain query results.
The predicate hasRelatedness needs to compute
the coherence score between two semantic items.
Following (Yahya et al., 2012), we use the Jaccard
coefficient (Jaccard, 1908) based on the inlinks be-
tween two semantic items.
The predicate priorMatchScore assigns a prior
score when mapping a phrase to a semantic item.
We use different methods to compute this score
according to different semantic item types. For
entities, we use a normalized score based on the
frequencies of a phrase referring to an entity.
For classes and relations, we use different meth-
ods. We first define the following three similar-
ity metrics: a) s
1
: The Levenshtein distance score
(Navarro, 2001) between the labels of the seman-
tic item and the phrase; b) s
2
: The word embed-
ding (Mikolov et al., 2010) score, which measures
the similarity between two phrases and is the max-
imum cosine value of the words? word embed-
dings between two phrases; and c) s
3
: the instance
overlap score, which is computed using the Jac-
card coefficient of the instance overlap. All scores
are normalized to produce a comparable scores
in the interval of (0, 1). The final prior scores
for mapping phrases to classes and relations are
?s
1
+ (1? ?)s
2
and ?s
1
+ ?s
2
+ (1? ?? ?)s
3
,
respectively. The parameters are set to empirical
values
12
.
4.3 Formulas
According to these predicates, we design several
first-order logic formulas for joint disambiguation.
As mentioned in the first section, these formulas
represent the meta patterns. The concrete pat-
terns can be generated through these meta pat-
terns with training data. Specifically, we use two
types of formulas for the joint decisions: Boolean
and Weighted formulas. Boolean formulas are
hard constraints, which must be satisfied by all
of the ground atoms in the final inference results.
Weighted formulas are soft constraints, which can
be violated with some penalties.
4.3.1 Boolean Formulas (Hard Constraints)
Table 3 lists the Boolean formulas used in this
work. The ? ? notation in the formulas indicates
an arbitrary constant. The ?|f |? notation expresses
the number of true grounded atoms in the formula
f . These formulas express the following con-
straints:
hf1: If a phrase is chosen, then it must have a
mapped semantic item;
hf2: If a semantic item is chosen, then its mapped
phrase must be chosen;
hf3: A phrase can be mapped to at most one se-
mantic item;
hf4: If the phrase is not chosen, then its mapped
12
Set ? to 0.6 for Class and set ? and ? to 0.3 and 0.3 for
Relation, respectively.
1097
hf1 hasPhrase(p)? hasResource(p, )
hf2 hasResource(p, )? hasPhrase(p)
hf3 |hasResource(p, )| ? 1
hf4 !hasPhrase(p)?!hasResource(p, r)
hf5 hasResource( , r)? hasRelation(r, , ) ? hasRelation( , r, )
hf6 |hasRelation(r1, r2, )| ? 1
hf7 hasRelation(r1, r2, )? hasResource( , r1) ? hasResource( , r2)
hf8 phraseIndex(p1, s1, e1) ? phraseIndex(p2, s2, e2) ? overlap(s1, e1, s2, e2) ? hasPhrase(p1)?!hasPhrase(p2)
hf9 resourceType(r, ?Entity?)?!hasRelation(r, , ?2 1?) ? !hasRelation(r, , ?2 2?)
hf10 resourceType(r, ?Entity?)?!hasRelation( , r, ?2 1?) ? !hasRelation(r, , ?2 2?)
hf11 resourceType(r, ?Class?)?!hasRelation(r, , ?2 1?) ? !hasRelation(r, , ?2 2?)
hf12 resourceType(r, ?Class?)?!hasRelation( , r, ?2 1?) ? !hasRelation(r, , ?2 2?)
hf13 !isTypeCompatible(r1, r2, rr)?!hasRelation(r1, r2, rr)
Table 3: Descriptions of Boolean formulas.
sf1 priorMatchScore(p, r, s)? hasPhrase(p)
sf2 priorMatchScore(p, r, s)? hasResource(p)
sf3 phrasePosTag(p, pt+) ? resourceType(r, rt+)? hasResource(p, r)
sf4 phraseDepTag(p1, p2, dp+) ? hasResource(p1, r1) ? hasResource(p2, r2)? hasRelation(r1, r2, rr+)
sf5 phraseDepTag(p1, p2, dp+) ? hasResource(p1, r1) ? hasResource(p2, r2)?!hasMeanWord(p1, p2) ?
hasRelation(r1, r2, rr+)
sf6 phraseDepTag(p1, p2, dp+) ? hasResource(p1, r1) ? hasResource(p2, r2) ? phraseDepOne(p1, p2) ?
hasRelation(r1, r2, rr+)
sf7 hasRelatedness(r1, r2, s) ? hasResource( , r1) ? hasResource( , r2)? hasRelation(r1, r2, )
sf8 hasQueryResult(r1, r2, r3, rr1, rr2)? hasRelation(r1, r2, rr1) ? hasRelation(r2, r3, rr2)
Table 4: Descriptions of weighted formulas.
semantic item should not be chosen;
hf5: If a semantic item is chosen, then it should
have at least one argument match relation with
other semantic items;
hf6: Two semantic items have at most one argu-
ment match relation;
hf7: If an argument match relation for two seman-
tic items is chosen, then they must be chosen;
hf8: Each of two chosen phrases must not overlap;
hf9, hf10, hf11, hf12: The semantic item with
type Entity and Class should not have a second ar-
gument that matches with others;
hf13: The chosen argument match relation for two
sematic items must be type compatible.
4.3.2 Weighted Formulas (Soft Constraints)
Table 4 lists the weighted formulas used in this
work. The ?+? notation in the formulas indicates
that each constant of the logic variable should be
weighted separately. Those formulas express the
following properties in joint decisions:
sf1, sf2: The larger the score of the phrase map-
ping to a semantic item, the more likely the cor-
responding phrase and semantic item should been
chosen;
sf3: There are some associations between the POS
tags of phase and the types of mapped semantic
items;
sf4, sf5, sf6: There are some associations be-
tween the dependency tags in the dependency pat-
tern path of two phases and the types of argument
match relations of two mapped semantic items;
sh7: The larger the relatedness of two seman-
tic items, the more likely they have an argument
match relation;
sf8: If the triple pattern has query results, these se-
mantic items should have corresponding argument
match relations.
5 Experiments
5.1 Dataset & Evaluation Metrics
We use the following three collections of questions
from the QALD
13
task for question answering
over linked data: QALD-1, QALD-3 and QALD-
4. The generated SPARQL queries are evaluated
on Linked Data from DBpedia and YAGO using
a Virtuoso engine
14
. A typical example question
from the QALD benchmark is ?Which books writ-
ten by Kerouac were published by Viking Press??.
As mentioned in Section 2.2, our system is not de-
signed to answer questions that contain numbers,
date comparisons and aggregation operations such
as group by or order by. Therefore, we remove
these types of questions and retain 110 questions
from the QALD-4 training set for generating the
specific formulas and for training their weights in
MLN. We test our system using 37, 75 and 26
questions from the training set of QALD-1
15
, and
the testing set of QALD-3 and QALD-4 respec-
tively. We use #T, #Q and #A to indicate the total
13
www.sc.cit-ec.uni-bielefeld.de/qald/
14
https://github.com/openlink/virtuoso-opensource
15
We use the training set because we try to make a fair
comparison with (Yahya et al., 2012).
1098
number of questions in the testing set, the num-
ber of questions we could address and the number
of questions answered correct, respectively. We
select Precision (P =
#A
#Q
), Recall (R =
#A
#T
),
and F1-score (F1 =
2?P ?R
P+R
) as the evaluation met-
rics. To assess the effectiveness of the disambigua-
tion process in the MLN, we computed the overall
quality measures by precision and recall with the
manually obtained results.
5.2 Experimental Configurations
The Stanford dependency parser (De Marneffe et
al., 2006) is used for extracting features from the
dependency parse trees. We use the toolkit the-
beast
16
to learn the weights of the formulas and
to perform the MAP inference. The inference al-
gorithm uses a cutting plane approach. In addi-
tion, for the parameter learning, we set all ini-
tial weights to zero and use an online learning
algorithm with MIRA update rules to update the
weights of the formulas. The number of iterations
for the training and testing are set to 10 and 200,
respectively.
5.3 Results and Discussion
5.3.1 The Effect of Joint Learning
To demonstrate the advantages of our joint learn-
ing, we design a pipeline system for compari-
son, which independently performs phrase detec-
tion, phrase mapping, and semantic item grouping
by removing the unrelated formulas in MLN. For
example, the formulas
17
related to the predicates
hasResource and hasRelation are removed when
detecting phrases in questions.
Table 5 shows the results, where Joint de-
notes the proposed method with joint inference
and Pipeline denotes the compared method per-
forming each step independently. We perform a
comparison with the question answering results of
QALD (QA), and comparisons at each of the fol-
lowing steps: PD (phrase detection), PM (phrase
mapping) and MG (mapped semantic items group-
ing). From the results, we observe that our method
answers over half of the questions. Moreover, our
joint model based on MLN can obtain better per-
formance in question answering compared to the
pipeline system. We also observe that Joint ex-
hibits better performance than Pipeline in most
steps, except for MG in QALD-3. We believe this
16
http://code.google.com/p/thebeast
17
including entire formulas, excluding hf8 and sf1
is because the three tasks (phrase detection, phrase
mapping, and semantic item grouping) are con-
nected with each other. Each step can provide use-
ful information for the other two tasks. Therefore,
performing joint inference can effectively improve
the performance. Finally, we observe that the for-
mer task usually produces better results than the
subsequent tasks (phrase detection exhibits a bet-
ter performance than phrase mapping, and phrase
mapping exhibits a better performance than se-
mantic item grouping). The main reason is that
the latter subtask is more complex than the former
task. The decisions of the latter subtask strongly
rely on the former results even though they have
interacted effects.
5.3.2 The Effect of Pattern Learning
Table 6 shows a comparison of our system with
DEANNA (Yahya et al., 2012), which is based
on a joint disambiguation model but which em-
ploys hand-written patterns in its system. Because
DEANNA only reports its results of the QALD-1
dataset, we do not show the results for QALD-3
and QALD-4 for equity. From the results, we can
see that our system solved more questions and ex-
hibited a better performance than did DEANNA.
One of the greatest strengths of our system is that
the learning system can address more questions
than hand-written pattern rules.
System #T #Q #A P R F1
DEANNA (Yahya et al., 2012) 50 27 13 0.48 0.26 0.33
Ours 50 37 20 0.54 0.4 0.46
Table 6: Comparisons with DEANNA using the
QALD-1 test questions.
Compared to the ILP (Integer Linear Program-
ming) used in (Yahya et al., 2012) for joint disam-
biguation, we argue that there are two major dif-
ferences to our method. 1) Our method is a data-
driven approach that can learn effective patterns
or rules for the task. Therefore, it exhibits more
robustness and adaptability for various KBs. 2)
We design several meta rules in MLN as opposed
to specific ones. The specific rules can be gen-
erated by these meta rules based on the training
data. By contrast, the traditional approach using
ILP needs to set specific rules in advance, which
requires more intensive labor than our approach.
To further illustrate the effectiveness of our
pattern-learning strategy, we show the weights of
the learned patterns corresponding to formula sf3
in the MLN, as shown in Table 7. From the table,
1099
Benchmark
PD PM MG QA
P R F1 P R F1 P R F1 #T #Q #A P R F1
QALD-1(Joint) 0.93 0.981 0.955 0.895 0.944 0.919 0.703 0.813 0.754 50 37 20 0.54 0.4 0.46
QALD-1(Pipeine) 0.921 0.972 0.946 0.868 0.917 0.892 0.585 0.859 0.696 50 34 17 0.5 0.34 0.41
QALD-3(Joint) 0.941 0.941 0.941 0.878 0.918 0.898 0.636 0.798 0.708 99 75 45 0.6 0.46 0.52
QALD-3(Pipeline) 0.912 0.912 0.912 0.829 0.867 0.848 0.677 0.789 0.729 99 75 42 0.56 0.42 0.48
QALD-4(Joint) 0.947 0.978 0.963 0.937 0.967 0.952 0.776 0.865 0.817 50 26 15 0.58 0.3 0.4
QALD-4(Pipeline) 0.937 0.967 0.952 0.905 0.935 0.920 0.683 0.827 0.748 50 24 13 0.54 0.26 0.35
Table 5: The performance of joint learning on three benchmark datasets.
we can see that nn
18
is more likely mapped to En-
tity
19
than to Class and Relation, and vb is most
likely mapped to Relation. This proves that our
model can learn effective and reasonable patterns
for QALD.
POS tag of Phrase type of mapped Item Weight
nn Entity 2.11
nn Class 0.243
nn Relation 0.335
vb Relation 0.517
wp Class 0.143
wr Class 0.025
Table 7: Sample weights of formulas, correspond-
ing with formula sf3.
5.3.3 Comparison to the state of the art
To illustrate the effectiveness of the proposed
method, we perform comparisons to the state-of-
the-art methods. Table 8 shows the results using
QALD-3 and QALD-4. These systems are the
participants in the QALD evaluation campaigns.
From the results, we can see that our system out-
performs most systems at a competitive perfor-
mance. They further prove the effectiveness of the
proposed method.
Test set System #T #Q #A P R F1
QALD-3
CASIA (He et al.,
2013)
99 52 29 0.56 0.3 0.38
Scalewelis (Joris
and Ferr?e, 2013)
99 70 32 0.46 0.32 0.38
RTV (Cristina et
al., 2013)
99 55 30 0.55 0.3 0.39
Intui2 (Corina,
2013)
99 99 28 0.28 28 0.28
SWIP (Pradel et al.,
2013)
99 21 15 0.71 0.15 0.25
Ours 99 75 45 0.6 0.46 0.52
QALD-4
20
gAnswer 50 25 16 0.64 0.32 0.43
Intui3 50 33 10 0.30 0.2 0.24
ISOFT 50 50 10 0.2 0.2 0.2
RO FII 50 50 6 0.12 0.12 0.12
Ours 50 26 15 0.58 0.3 0.4
Table 8: Comparisons with state-of-the-art sys-
tems using the QALD benchmark.
18
The POS tag of the head word in the phrase
19
The type of semantic item
20
Because the QALD-4 conference does not start un-
til after submission, we have no citation for the state-of-
5.3.4 The Effect of Different Formulas
To determine which formulas are more useful for
QALD, we evaluate the performance of the pro-
posed method with different predicate sets. We
subtract one weighted formula from the original
sets at a time, except retaining the first two for-
mulas sf1 and sf2 for basic inference. Because of
space limitations, only the results using QALD-3
testing set are shown in Table 9.
From the results, we can observe that remov-
ing some formulas can boost the performance on
some single tasks, but employing all formulas can
produce the best performance. This illustrates that
solely resolving the steps in QALD (phrase detec-
tion, phrase mapping, semantic items grouping)
can obtain local results, and that making joint in-
ference is necessary and useful.
6 Related Work
Our proposed method is related to two lines of
work: Question Answering over Knowledge bases
and Markov Logic Networks.
Question answering over knowledge bases
has attracted a substantial amount of interest over
a long period of time. The initial attempts in-
cluded BaseBall (Green Jr et al., 1961) and Lu-
nar (Woods, 1977). However, these systems were
mostly limited to closed domains due to a lack of
knowledge resources. With the rapid development
of structured data, such as DBpedia, Freebase and
Yago, the need for providing user-friendly inter-
face to these data has become increasingly urgent.
Keyword (Elbassuoni and Blanco, 2011) and se-
mantic (Pound et al., 2010) searches are limited
to their ability to specify the relations among the
different keywords.
The open topic progress has also been pushed
by the QALD evaluation campaigns (Walter et al.,
2012). Lopez et al. (2011) gave a comprehensive
survey in this research area. The authors devel-
oped the PowerAqua system (Lopez et al., 2006) to
the-art systems in QALD-4. The results can be found at
http://greententacle.techfak.uni-bielefeld.de/ cunger/qald.
1100
Formulas
PD PM MG Avg
P R F1 P R F1 P R F1 P R F1
All Formulas 0.941 0.941 0.941 0.878 0.918 0.898 0.636 0.798 0.708 0.839 0.901 0.869
-sf3 0.931 0.927 0.929 0.877 0.913 0.895 0.637 0.816 0.715 0.834 0.897 0.864
-sf4 0.926 0.917 0.922 0.852 0.883 0.867 0.63 0.763 0.69 0.824 0.87 0.846
-sf5 0.931 0.927 0.929 0.873 0.908 0.89 0.633 0.816 0.713 0.831 0.895 0.862
-sf6 0.922 0.922 0.922 0.844 0.883 0.863 0.702 0.746 0.723 0.842 0.868 0.855
-sf7 0.931 0.917 0.924 0.881 0.908 0.894 0.621 0.763 0.685 0.833 0.88 0.856
-sf8 0.927 0.927 0.927 0.868 0.908 0.888 0.639 0.807 0.713 0.83 0.893 0.861
Table 9: Performance comparisons of different weighted formulas evaluated using the QALD-3 question
set.
answer questions on large, heterogeneous datasets.
For questions containing quantifiers, comparatives
or superlatives, Unger et al. (2012) translated
NL to FL using several SPARQL templates and
using a set of heuristic rules mapping phrases
to semantic items. The system most similar to
ours is DEANNA (Yahya et al., 2012). However,
DEANNA extracts predicate-argument structures
from the questions using three hand-written pat-
terns. Our system jointly learns these mappings
and extractions completely from scratch.
Recently, the Semantic Parsing (SP) community
targeted this problem from limited domains (Tang
and Mooney, 2001; Liang et al., 2013) to open do-
mains (Cai and Yates, 2013; Berant et al., 2013).
The methods in semantic parsing answer questions
by first converting natural language utterances into
meaningful representations (e.g., the lambda cal-
culus) and subsequently executing the formal log-
ical forms over KBs. Compared to deriving the
complete logical representation, our method aims
to parse a question into a limited logic form with
the semantic item query, which we believe is more
appropriate for answering factoid questions.
Markov Logic Networks have been widely
used in NLP tasks. Huang (2012) applied MLN
to compress sentences by formulating the task as a
word/phrase deletion problem. Fahrni and Strube
(2012) jointly disambiguated and clustered con-
cepts using MLN. MLN has also been used in
coreference resolution (Song et al., 2012). For
the task of identifying subjective text segments
and of extracting their corresponding explanations
from product reviews, Zhang et al. (2013) mod-
eled these segments with MLN. To discover log-
ical knowledge for deep question answering, Liu
(2012) used MLN to resolve the inconsistencies
of multiple knowledge bases.
Meza-Ruiz and Riedel (2009) employed MLN
for Semantic Role Labeling (SRL). They jointly
performed the following tasks for a sentence:
predicate identification, frame disambiguation, ar-
gument identification and argument classification.
The semantic analysis of SRL solely rested on
the lexical level, but our analysis focuses on the
knowledge-base level and aims to obtain an exe-
cutable query and to support natural language in-
ference.
7 Conclusions and Future Work
For the task of QALD, we present a joint learn-
ing framework for phrase detection, phrase map-
ping and semantic item grouping. The novelty of
our method lies in the fact that we perform joint
inference and pattern learning for all subtasks in
QALD using first-order logic. Our experimental
results demonstrate the effectiveness of the pro-
posed method.
In the future, we plan to address the follow-
ing limitations that still exist in the current sys-
tem: a) numerous hand-labeled data are required
for training the MLN, and we could use a la-
tent form of semantic item query graphs (Liang et
al., 2013); b) more robust solutions can be devel-
oped to find the implicit relations in questions; c)
our system can be scaled up to large-scale open-
domain knowledge bases (Fader et al., 2013; Yao
and Van Durme, 2014); and d) the learning system
has the advantage of being easily adapted to new
settings, and we plan to extend it to other domains
and languages (Liang and Potts, 2014).
Acknowledgments
The authors are grateful to the anonymous re-
viewers for their constructive comments. This
work was sponsored by the National Basic Re-
search Program of China (No. 2014CB340503)
and the National Natural Science Foundation of
China (No. 61202329, 61272332), CCF-Tencent
Open Fund. This work was also supported in part
by Noahs Ark Lab of Huawei Tech. Ltm.
1101
References
S?oren Auer, Christian Bizer, Georgi Kobilarov, Jens
Lehmann, Richard Cyganiak, and Zachary Ives.
2007. Dbpedia: A nucleus for a web of open data.
In The semantic web, pages 722?735. Springer.
Junwei Bao, Nan Duan, Ming Zhou, and Tiejun Zhao.
2014. Knowledge-based question answering as ma-
chine translation. In ACL.
Jonathan Berant, Andrew Chou, Roy Frostig, and Percy
Liang. 2013. Semantic parsing on freebase from
question-answer pairs. In EMNLP.
Christian Bizer, Tom Heath, and Tim Berners-Lee.
2009. Linked data-the story so far. International
journal on semantic web and information systems,
5(3):1?22.
Kurt Bollacker, Colin Evans, Praveen Paritosh, Tim
Sturge, and Jamie Taylor. 2008. Freebase: a col-
laboratively created graph database for structuring
human knowledge. In SIGMOD.
Qingqing Cai and Alexander Yates. 2013. Large-scale
semantic parsing via schema matching and lexicon
extension. In ACL.
Unger Christina and Andr Freitas. 2014. Question an-
swering over linked data: Challenges, approaches,
trends. In ESWC.
Dima Corina. 2013. Intui2: A prototype system
for question answering over linked data. In Work.
Multilingual Question Answering over Linked Data
(QALD-3).
Giannone Cristina, Bellomaria Valentina, and Basili
Roberto. 2013. A hmm-based approach to question
answering against linked data. In Work. Multilin-
gual Question Answering over Linked Data (QALD-
3).
Marie-Catherine De Marneffe, Bill MacCartney,
Christopher D Manning, et al. 2006. Generat-
ing typed dependency parses from phrase structure
parses. In LREC.
Shady Elbassuoni and Roi Blanco. 2011. Keyword
search over rdf graphs. In CIKM.
Anthony Fader, Stephen Soderland, and Oren Etzioni.
2011. Identifying relations for open information ex-
traction. In EMNLP.
Anthony Fader, Luke Zettlemoyer, and Oren Etzioni.
2013. Paraphrase-driven learning for open question
answering. In ACL.
Angela Fahrni and Michael Strube. 2012. Jointly
disambiguating and clustering concepts and entities
with markov logic. In COLING.
Andre Freitas and Edward Curry. 2014. Natural
language queries over heterogeneous linked data
graphs: A distributional-compositional semantics
approach. In IUI.
Bert F Green Jr, Alice K Wolf, Carol Chomsky, and
Kenneth Laughery. 1961. Baseball: an automatic
question-answerer. In Papers presented at the May
9-11, 1961, western joint IRE-AIEE-ACM computer
conference, pages 219?224. ACM.
Shizhu He, Shulin Liu, Yubo Chen, Guangyou Zhou,
Kang Liu, and Jun Zhao. 2013. Casia@qald-3:
A question answering system over linked data. In
Work. Multilingual Question Answering over Linked
Data (QALD-3).
Minlie Huang, Xing Shi, Feng Jin, and Xiaoyan Zhu.
2012. Using first-order logic to compress sentences.
In AAAI.
Paul. Jaccard. 1908. Nouvelles recherches sur la dis-
tribution florale. Bulletin de la Soci`ete Vaudense des
Sciences Naturelles, 44:223?270.
Guyonvarc?H Joris and S?ebastien Ferr?e. 2013.
Scalewelis: a scalable query-based faceted search
system on top of sparql endpoints. In Work.
Multilingual Question Answering over Linked Data
(QALD-3).
Jens Lehmann, Tim Furche, Giovanni Grasso, Axel-
Cyrille Ngonga Ngomo, Christian Schallhart, An-
drew Sellers, Christina Unger, Lorenz B?uhmann,
Daniel Gerber, Konrad H?offner, et al. 2012. Deqa:
deep web extraction for question answering. In
ISWC.
Percy Liang and Christopher Potts. 2014. Bringing
machine learning and compositional semantics to-
gether. Annual Reviews of Linguistics (to appear).
Percy Liang, Michael I Jordan, and Dan Klein. 2013.
Learning dependency-based compositional seman-
tics. Computational Linguistics, 39(2):389?446.
Zhao Liu, Xipeng Qiu, Ling Cao, and Xuanjing Huang.
2012. Discovering logical knowledge for deep ques-
tion answering. In CIKM.
Vanessa Lopez, Enrico Motta, and Victoria Uren.
2006. Poweraqua: Fishing the semantic web. In
The Semantic Web: research and applications, pages
393?410. Springer.
Vanessa Lopez, Victoria Uren, Marta Sabou, and En-
rico Motta. 2011. Is question answering fit for the
semantic web?: a survey. Semantic Web, 2(2):125?
155.
Ivan Meza-Ruiz and Sebastian Riedel. 2009. Jointly
identifying predicates, arguments and senses using
markov logic. In NAACL.
Tomas Mikolov, Martin Karafi?at, Lukas Burget, Jan
Cernock`y, and Sanjeev Khudanpur. 2010. Recur-
rent neural network based language model. In IN-
TERSPEECH, pages 1045?1048.
Ndapandula Nakashole, Gerhard Weikum, and Fabian
Suchanek. 2012. Patty: a taxonomy of relational
patterns with semantic types. In EMNLP.
1102
Gonzalo Navarro. 2001. A guided tour to approximate
string matching. ACM Comput. Surv., 33(1):31?88.
Jeffrey Pound, Ihab F Ilyas, and Grant Weddell. 2010.
Expressive and flexible access to web-extracted
data: a keyword-based structured query language.
In SIGMOD.
C Pradel, G Peyet, O Haemmerl?e, and N Hernandez.
2013. Swip at qald-3: results, criticisms and les-
son learned (working notes). In Work. Multilingual
Question Answering over Linked Data (QALD-3).
Matthew Richardson and Pedro Domingos. 2006.
Markov logic networks. Machine learning, 62(1-
2):107?136.
Saeedeh Shekarpour, Axel-Cyrille Ngonga Ngomo,
and S?oren Auer. 2013. Question answering on in-
terlinked data. In WWW.
Yang Song, Jing Jiang, Wayne Xin Zhao, Sujian Li,
and Houfeng Wang. 2012. Joint learning for coref-
erence resolution with markov logic. In EMNLP.
Fabian M Suchanek, Gjergji Kasneci, and Gerhard
Weikum. 2007. Yago: a core of semantic knowl-
edge. In WWW.
Lappoon R. Tang and Raymond J. Mooney. 2001. Us-
ing multiple clause constructors in inductive logic
programming for semantic parsing. In Proceedings
of the 12th European Conference on Machine Learn-
ing, pages 466?477.
Christina Unger, Lorenz B?uhmann, Jens Lehmann,
Axel-Cyrille Ngonga Ngomo, Daniel Gerber, and
Philipp Cimiano. 2012. Template-based question
answering over rdf data. In WWW.
Sebastian Walter, Christina Unger, Philipp Cimiano,
and Daniel B?ar. 2012. Evaluation of a layered
approach to question answering over linked data.
In The Semantic Web?ISWC 2012, pages 362?374.
Springer.
William A Woods. 1977. Lunar rocks in natural en-
glish: Explorations in natural language question an-
swering. In Linguistic structures processing, pages
521?569.
Mohamed Yahya, Klaus Berberich, Shady Elbas-
suoni, Maya Ramanath, Volker Tresp, and Gerhard
Weikum. 2012. Natural language questions for the
web of data. In EMNLP.
Mohamed Yahya, Klaus Berberich, Shady Elbassuoni,
and Gerhard Weikum. 2013. Robust question an-
swering over the web of linked data. In CIKM.
Xuchen Yao and Benjamin Van Durme. 2014. Infor-
mation extraction over structured data: Question an-
swering with freebase. In ACL.
Qi Zhang, Jin Qian, Huan Chen, Jihua Kang, and Xu-
anjing Huang. 2013. Discourse level explanatory
relation extraction from product reviews using first-
order logic. In ACL.
Lei Zou, Ruizhe Huang, Haixun WangZou, Jeffrey Xu
Yu, Wenqiang He, and Dongyan Zhao. 2014. Natu-
ral language question answering over rdf ? a graph
data driven approach. In SIGMOD.
1103
Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 852?861,
Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics
Statistical Machine Translation Improves Question Retrieval in
Community Question Answering via Matrix Factorization
Guangyou Zhou, Fang Liu, Yang Liu, Shizhu He, and Jun Zhao
National Laboratory of Pattern Recognition
Institute of Automation, Chinese Academy of Sciences
95 Zhongguancun East Road, Beijing 100190, China
{gyzhou,fliu,liuyang09,shizhu.he,jzhao}@nlpr.ia.ac.cn
Abstract
Community question answering (CQA)
has become an increasingly popular re-
search topic. In this paper, we focus on the
problem of question retrieval. Question
retrieval in CQA can automatically find
the most relevant and recent questions that
have been solved by other users. However,
the word ambiguity and word mismatch
problems bring about new challenges for
question retrieval in CQA. State-of-the-art
approaches address these issues by implic-
itly expanding the queried questions with
additional words or phrases using mono-
lingual translation models. While use-
ful, the effectiveness of these models is
highly dependent on the availability of
quality parallel monolingual corpora (e.g.,
question-answer pairs) in the absence of
which they are troubled by noise issue.
In this work, we propose an alternative
way to address the word ambiguity and
word mismatch problems by taking advan-
tage of potentially rich semantic informa-
tion drawn from other languages. Our pro-
posed method employs statistical machine
translation to improve question retrieval
and enriches the question representation
with the translated words from other lan-
guages via matrix factorization. Experi-
ments conducted on a real CQA data show
that our proposed approach is promising.
1 Introduction
With the development of Web 2.0, community
question answering (CQA) services like Yahoo!
Answers,1 Baidu Zhidao2 and WkiAnswers3 have
attracted great attention from both academia and
industry (Jeon et al, 2005; Xue et al, 2008;
Adamic et al, 2008; Wang et al, 2009; Cao et al,
2010). In CQA, anyone can ask and answer ques-
tions on any topic, and people seeking information
are connected to those who know the answers. As
answers are usually explicitly provided by human,
they can be helpful in answering real world ques-
tions.
In this paper, we focus on the task of question
retrieval. Question retrieval in CQA can automati-
cally find the most relevant and recent questions
(historical questions) that have been solved by
other users, and then the best answers of these his-
torical questions will be used to answer the users?
queried questions. However, question retrieval is
challenging partly due to the word ambiguity and
word mismatch between the queried questions
and the historical questions in the archives. Word
ambiguity often causes the retrieval models to re-
trieve many historical questions that do not match
the users? intent. This problem is also amplified
by the high diversity of questions and users. For
example, depending on different users, the word
?interest? may refer to ?curiosity?, or ?a charge
for borrowing money?.
Another challenge is word mismatch between
the queried questions and the historical questions.
The queried questions may contain words that are
different from, but related to, the words in the rele-
vant historical questions. For example, if a queried
question contains the word ?company? but a rele-
vant historical question instead contains the word
?firm?, then there is a mismatch and the historical
1http://answers.yahoo.com/
2http://zhidao.baidu.com/
3http://wiki.answers.com/
852
English Chinese
word ambiguity
How do I get a loan ?(w?)??(r?h?)?(c?ng)
from a bank? ??(y?nh?ng)??(d?iku?n)?
How to reach the ??(r?h?)??(qi?nw?ng)
bank of the river? ??(h??n)?
word mismatch
company ??(g?ngs?)
firm ??(g?ngs?)
rheum ??(g?nm?o)
catarrh ??(g?nm?o)
Table 1: Google translate: some illustrative examples.
question may not be easily distinguished from an
irrelevant one.
Researchers have proposed the use of word-
based translation models (Berger et al, 2000;
Jeon et al, 2005; Xue et al, 2008; Lee et al,
2008; Bernhard and Gurevych, 2009) to solve
the word mismatch problem. As a principle ap-
proach to capture semantic word relations, word-
based translation models are built by using the
IBM model 1 (Brown et al, 1993) and have
been shown to outperform traditional models (e.g.,
VSM, BM25, LM) for question retrieval. Be-
sides, Riezler et al (2007) and Zhou et al (2011)
proposed the phrase-based translation models for
question and answer retrieval. The basic idea is
to capture the contextual information in model-
ing the translation of phrases as a whole, thus
the word ambiguity problem is somewhat allevi-
ated. However, all these existing studies in the
literature are basically monolingual approaches
which are restricted to the use of original language
of questions. While useful, the effectiveness of
these models is highly dependent on the availabil-
ity of quality parallel monolingual corpora (e.g.,
question-answer pairs) in the absence of which
they are troubled by noise issue. In this work,
we propose an alternative way to address the word
ambiguity and word mismatch problems by taking
advantage of potentially rich semantic information
drawn from other languages. Through other lan-
guages, various ways of adding semantic informa-
tion to a question could be available, thereby lead-
ing to potentially more improvements than using
the original language only.
Taking a step toward using other languages, we
propose the use of translated representation by al-
ternatively enriching the original questions with
the words from other languages. The idea of im-
proving question retrieval with statistical machine
translation is based on the following two observa-
tions: (1) Contextual information is exploited dur-
ing the translation from one language to another.
For example in Table 1, English words ?interest?
and ?bank? that have multiple meanings under
different contexts are correctly addressed by us-
ing the state-of-the-art translation tool ??Google
Translate.4 Thus, word ambiguity based on con-
textual information is naturally involved when
questions are translated. (2) Multiple words that
have similar meanings in one language may be
translated into an unique word or a few words in a
foreign language. For example in Table 1, English
words such as ?company? and ?firm? are trans-
lated into ??? (g?ngs?)?, ?rheum? and ?catarrh?
are translated into ???(g?nm?o)? in Chinese.
Thus, word mismatch problem can be somewhat
alleviated by using other languages.
Although Zhou et al (2012) exploited bilin-
gual translation for question retrieval and obtained
the better performance than traditional monolin-
gual translation models. However, there are two
problems with this enrichment: (1) enriching
the original questions with the translated words
from other languages increases the dimensionality
and makes the question representation even more
sparse; (2) statistical machine translation may in-
troduce noise, which can harm the performance of
question retrieval. To solve these two problems,
we propose to leverage statistical machine transla-
tion to improve question retrieval via matrix fac-
torization.
The remainder of this paper is organized as fol-
lows. Section 2 describes the proposed method
by leveraging statistical machine translation to im-
prove question retrieval via matrix factorization.
Section 3 presents the experimental results. In sec-
tion 4, we conclude with ideas for future research.
4http://translate.google.com/translate t
853
2 Our Approach
2.1 Problem Statement
This paper aims to leverage statistical machine
translation to enrich the question representation.
In order to address the word ambiguity and word
mismatch problems, we expand a question by
adding its translation counterparts. Statistical ma-
chine translation (e.g., Google Translate) can uti-
lize contextual information during the question
translation, so it can solve the word ambiguity and
word mismatch problems to some extent.
Let L = {l1, l2, . . . , lP } denote the language
set, where P is the number of languages con-
sidered in the paper, l1 denotes the original lan-
guage (e.g., English) while l2 to lP are the for-
eign languages. Let D1 = {d(1)1 , d(1)2 , . . . , d(1)N }
be the set of historical question collection in origi-
nal language, where N is the number of historical
questions in D1 with vocabulary size M1. Now
we first translate each original historical question
from language l1 into other languages lp (p ?
[2, P ]) by Google Translate. Thus, we can ob-
tain D2, . . . , DP in different languages, and Mp is
the vocabulary size of Dp. A question d(p)i in Dp
is simply represented as a Mp dimensional vector
d(p)i , in which each entry is calculated by tf-idf.
The N historical questions in Dp are then repre-
sented in a Mp ? N term-question matrix Dp =
{d(p)1 ,d
(p)
2 , . . . ,d
(p)
N }, in which each row corre-
sponds to a term and each column corresponds to
a question.
Intuitively, we can enrich the original ques-
tion representation by adding the translated words
from language l2 to lP , the original vocabu-
lary size is increased from M1 to ?Pp=1 Mp.
Thus, the term-question matrix becomes D =
{D1,D2, . . . ,DP } and D ? R(
?P
p=1 Mp)?N .
However, there are two problems with this enrich-
ment: (1) enriching the original questions with the
translated words from other languages makes the
question representation even more sparse; (2) sta-
tistical machine translation may introduce noise.5
To solve these two problems, we propose to
leverage statistical machine translation to improve
question retrieval via matrix factorization. Figure
1 presents the framework of our proposed method,
where qi represents a queried question, and qi is a
vector representation of qi.
5Statistical machine translation quality is far from satis-
factory in real applications.
??
??
??
??
 
HistoricalQuestionCollectionRepresentation
 
QueryRepresentation
Figure 1: Framework of our proposed approach
for question retrieval.
2.2 Model Formulation
To tackle the data sparseness of question represen-
tation with the translated words, we hope to find
two or more lower dimensional matrices whose
product provides a good approximate to the orig-
inal one via matrix factorization. Previous stud-
ies have shown that there is psychological and
physiological evidence for parts-based representa-
tion in the human brain (Wachsmuth et al, 1994).
The non-negative matrix factorization (NMF) is
proposed to learn the parts of objects like text
documents (Lee and Seung, 2001). NMF aims
to find two non-negative matrices whose product
provides a good approximation to the original ma-
trix and has been shown to be superior to SVD in
document clustering (Xu et al, 2003; Tang et al,
2012).
In this paper, NMF is used to induce the reduced
representation Vp of Dp, Dp is independent on
{D1,D2, . . . ,Dp?1,Dp+1, . . . ,DP }. When ig-
noring the coupling between Vp, it can be solved
by minimizing the objective function as follows:
O1(Up,Vp) = minUp?0,Vp?0 ?Dp ?UpVp?
2
F (1)
where ? ? ?F denotes Frobenius norm of a matrix.
Matrices Up ? RMp?K and Vp ? RK?N are the
reduced representation for terms and questions in
the K dimensional space, respectively.
To reduce the noise introduced by statistical ma-
chine translation, we assume that Vp from lan-
guage Dp (p ? [2, P ]) should be close to V1
854
from the original language D1. Based on this as-
sumption, we minimize the distance between Vp
(p ? [2, P ]) and V1 as follows:
O2(Vp) = minVp?0
P?
p=2
?Vp ?V1?2F (2)
Combining equations (1) and (2), we get the fol-
lowing objective function:
O(U1, . . . ,UP ;V1, . . . ,VP ) (3)
=
P?
p=1
?Dp ?UpVp?2F +
P?
p=2
?p?Vp ?V1?2F
where parameter ?p (p ? [2, P ]) is used to adjust
the relative importance of these two components.
If we set a small value for ?p, the objective func-
tion behaves like the traditional NMF and the im-
portance of data sparseness is emphasized; while a
big value of ?p indicatesVp should be very closed
to V1, and equation (3) aims to remove the noise
introduced by statistical machine translation.
By solving the optimization problem in equa-
tion (4), we can get the reduced representation of
terms and questions.
minO(U1, . . . ,UP ;V1, . . . ,VP ) (4)
subject to : Up ? 0,Vp ? 0, p ? [1, P ]
2.3 Optimization
The objective function O defined in equation (4)
performs data sparseness and noise removing si-
multaneously. There are 2P coupling components
in O, and O is not convex in both U and V to-
gether. Therefore it is unrealistic to expect an al-
gorithm to find the global minima. In the follow-
ing, we introduce an iterative algorithm which can
achieve local minima. In our optimization frame-
work, we optimize the objective function in equa-
tion (4) by alternatively minimizing each compo-
nent when the remaining 2P ? 1 components are
fixed. This procedure is summarized in Algorithm
1.
2.3.1 Update of MatrixUp
Holding V1, . . . ,VP and U1, . . . ,Up?1,Up+1,
. . . ,UP fixed, the update of Up amounts to the
following optimization problem:
min
Up?0
?Dp ?UpVp?2F (5)
Algorithm 1 Optimization framework
Input: Dp ? Rmp?N , p ? [1, P ]
1: for p = 1 : P do
2: V(0)p ? RK?N ? random matrix
3: for t = 1 : T do  T is iteration times
4: U(t)p ? UpdateU(Dp,V(t?1)p )
5: V(t)p ? UpdateV(Dp,U(t)p )
6: end for
7: returnU(T )p , V(T )p
8: end for
Algorithm 2 Update Up
Input: Dp ? RMp?N , Vp ? RK?N
1: for i = 1 : Mp do
2: u?(p)?i = (VpVTp )?1Vpd?(p)i
3: end for
4: returnUp
Let d?(p)i = (d(p)i1 , . . . , d(p)iK )T and u?(p)i =
(u(p)i1 , . . . , u
(p)
iK )T be the column vectors whose en-
tries are those of the ith row of Dp and Up re-
spectively. Thus, the optimization of equation (5)
can be decomposed into Mp optimization prob-
lems that can be solved independently, with each
corresponding to one row of Up:
min
u?(p)i ?0
?d?(p)i ?VTp u?
(p)
i ?22 (6)
for i = 1, . . . ,Mp.
Equation (6) is a standard least squares prob-
lems in statistics and the solution is:
u?(p)?i = (VpVTp )?1Vpd?
(p)
i (7)
Algorithm 2 shows the procedure.
2.3.2 Update of MatrixVp
Holding U1, . . . ,UP and V1, . . . ,Vp?1,Vp+1,
. . . ,VP fixed, the update of Vp amounts to the
optimization problem divided into two categories.
if p ? [2, P ], the objective function can be writ-
ten as:
min
Vp?0
?Dp ?UpVp?2F + ?p?Vp ?V1?2F (8)
if p = 1, the objective function can be written
as:
min
Vp?0
?Dp ?UpVp?2F + ?p?Vp?2F (9)
855
Let d(p)j be the jth column vector of Dp, and
v(p)j be the jth column vector of Vp, respectively.
Thus, equation (8) can be rewritten as:
min
{v(p)j ?0}
N?
j=1
?d(p)j ?Upv
(p)
j ?22+
N?
j=1
?p?v(p)j ?v
(1)
j ?22
(10)
which can be decomposed into N optimization
problems that can be solved independently, with
each corresponding to one column of Vp:
min
v(p)j ?0
?d(p)j ?Upv
(p)
j ?22+?p?v
(p)
j ?v
(1)
j ?22 (11)
for j = 1, . . . , N .
Equation (12) is a least square problem with L2
norm regularization. Now we rewrite the objective
function in equation (12) as
L(v(p)j ) = ?d
(p)
j ?Upv
(p)
j ?22 + ?p?v
p
j ? v
(1)
j ?22
(12)
where L(v(1)j ) is convex, and hence has a unique
solution. Taking derivatives, we obtain:
?L(v(p)j )
?v(p)j
= ?2UTp (d(p)j ?Upv
(p)
j )+2?p(v
(p)
j ?v
(1)
j )
(13)
Forcing the partial derivative to be zero leads to
v(p)?j = (UTpUp + ?pI)?1(UTp d
(p)
j + ?pv
(1)
j )
(14)
where p ? [2, P ] denotes the foreign language rep-
resentation.
Similarly, the solution of equation (9) is:
v(p)?j = (UTpUp + ?pI)?1UTp d
(p)
j (15)
where p = 1 denotes the original language repre-
sentation.
Algorithm 3 shows the procedure.
2.4 Time Complexity Analysis
In this subsection, we discuss the time complex-
ity of our proposed method. The optimization
u?(p)i using Algorithm 2 should calculate VpVTp
and Vpd?(p)i , which takes O(NK2 + NK) op-
erations. Therefore, the optimization Up takes
O(NK2 + MpNK) operations. Similarly, the
time complexity of optimization Vi using Algo-
rithm 3 is O(MpK2 + MpNK).
Another time complexity is the iteration times
T used in Algorithm 1 and the total number of
Algorithm 3 Update Vp
Input: Dp ? RMp?N , Up ? RMp?K
1: ?? (UTpUp + ?pI)?1
2: ?? UTpDp
3: if p = 1 then
4: for j = 1 : N do
5: v(p)j ? ??j , ?j is the jth column of ?
6: end for
7: end if
8: returnV1
9: if p ? [2, P ] then
10: for j = 1 : N do
11: v(p)j ? ?(?j + ?pv(1)j )
12: end for
13: end if
14: returnVp
languages P , the overall time complexity of our
proposed method is:
P?
p=1
T ?O(NK2 + MpK2 + 2MpNK) (16)
For each language Dp, the size of vocabulary
Mp is almost constant as the number of questions
increases. Besides, K ? min(Mp, N), theoreti-
cally, the computational time is almost linear with
the number of questions N and the number of lan-
guages P considered in the paper. Thus, the pro-
posed method can be easily adapted to the large-
scale information retrieval task.
2.5 Relevance Ranking
The advantage of incorporating statistical machine
translation in relevance ranking is to reduce ?word
ambiguity? and ?word mismatch? problems. To
do so, given a queried question q and a historical
question d from Yahoo! Answers, we first trans-
late q and d into other foreign languages (e.g., Chi-
nese, French etc.) and get the corresponding trans-
lated representation qi and di (i ? [2, P ]), where
P is the number of languages considered in the pa-
per. For queried question q = q1, we represent it
in the reduced space:
vq1 = argminv?0 ?q1 ?U1v?
2
2 + ?1?v?22 (17)
where vector q1 is the tf-idf representation of
queried question q1 in the term space. Similarly,
for historical question d = d1 (and its tf-idf repre-
sentation d1 in the term space) we represent it in
the reduced space as vd1 .
856
The relevance score between the queried ques-
tion q1 and the historical question d1 in the re-
duced space is, then, calculated as the cosine sim-
ilarity between vq1 and vd1 :
s(q1, d1) =
< vq1 ,vd1 >
?vq1?2 ? ?vd1?2
(18)
For translated representation qi (i ? [2, P ]), we
also represent it in the reduced space:
vqi = argminv?0 ?qi?Uiv?
2
2+?i?v?vq1?22 (19)
where vector qi is the tf-idf representation of qi
in the term space. Similarly, for translated rep-
resentation di (and its tf-idf representation di in
the term space) we also represent it in the reduced
space as vdi . The relevance score s(qi, di) be-
tween qi and di in the reduced space can be cal-
culated as the cosine similarity between vqi and
vdi .
Finally, we consider learning a relevance func-
tion of the following general, linear form:
Score(q, d) = ?T ??(q, d) (20)
where feature vector ?(q, d) =
(sV SM (q, d), s(q1, d1), s(q2, d2), . . . , s(qP , dP )),
and ? is the corresponding weight vector, we
optimize this parameter for our evaluation metrics
directly using the Powell Search algorithm (Paul
et al, 1992) via cross-validation. sV SM (q, d) is
the relevance score in the term space and can be
calculated using Vector Space Model (VSM).
3 Experiments
3.1 Data Set and Evaluation Metrics
We collect the data set from Yahoo! Answers and
use the getByCategory function provided in Ya-
hoo! Answers API6 to obtain CQA threads from
the Yahoo! site. More specifically, we utilize
the resolved questions and the resulting question
repository that we use for question retrieval con-
tains 2,288,607 questions. Each resolved ques-
tion consists of four parts: ?question title?, ?ques-
tion description?, ?question answers? and ?ques-
tion category?. For question retrieval, we only use
the ?question title? part. It is assumed that ques-
tion title already provides enough semantic infor-
mation for understanding the users? information
needs (Duan et al, 2008). There are 26 categories
6http://developer.yahoo.com/answers
Category #Size Category # Size
Arts & Humanities 86,744 Home & Garden 35,029
Business & Finance 105,453 Beauty & Style 37,350
Cars & Transportation 145,515 Pet 54,158
Education & Reference 80,782 Travel 305,283
Entertainment & Music 152,769 Health 132,716
Family & Relationships 34,743 Sports 214,317
Politics & Government 59,787 Social Science 46,415
Pregnancy & Parenting 43,103 Ding out 46,933
Science & Mathematics 89,856 Food & Drink 45,055
Computers & Internet 90,546 News & Events 20,300
Games & Recreation 53,458 Environment 21,276
Consumer Electronics 90,553 Local Businesses 51,551
Society & Culture 94,470 Yahoo! Products 150,445
Table 2: Number of questions in each first-level
category.
at the first level and 1,262 categories at the leaf
level. Each question belongs to a unique leaf cat-
egory. Table 2 shows the distribution across first-
level categories of the questions in the archives.
We use the same test set in previous work (Cao
et al, 2009; Cao et al, 2010). This set contains
252 queried questions and can be freely down-
loaded for research communities.7
The original language of the above data set is
English (l1) and then they are translated into four
other languages (Chinese (l2), French (l3), Ger-
man (l4), Italian (l5)), thus the number of language
considered is P = 5) by using the state-of-the-art
translation tool ??Google Translate.
Evaluation Metrics: We evaluate the perfor-
mance of question retrieval using the following
metrics: Mean Average Precision (MAP) and
Precision@N (P@N). MAP rewards methods that
return relevant questions early and also rewards
correct ranking of the results. P@N reports the
fraction of the top-N questions retrieved that are
relevant. We perform a significant test, i.e., a t-
test with a default significant level of 0.05.
We tune the parameters on a small development
set of 50 questions. This development set is also
extracted from Yahoo! Answers, and it is not in-
cluded in the test set. For parameter K, we do an
experiment on the development set to determine
the optimal values among 50, 100, 150, ? ? ? , 300 in
terms of MAP. Finally, we set K = 100 in the ex-
periments empirically as this setting yields the best
performance. For parameter ?1, we set ?1 = 1
empirically, while for parameter ?i (i ? [2, P ]),
we set ?i = 0.25 empirically and ensure that?
i ?i = 1.
7http://homepages.inf.ed.ac.uk/gcong/qa/
857
# Methods MAP P@10
1 VSM 0.242 0.226
2 LM 0.385 0.242
3 Jeon et al (2005) 0.405 0.247
4 Xue et al (2008) 0.436 0.261
5 Zhou et al (2011) 0.452 0.268
6 Singh (2012) 0.450 0.267
7 Zhou et al (2012) 0.483 0.275
8 SMT + MF (P = 2, l1, l2) 0.527 0.284
9 SMT + MF (P = 5) 0.564 0.291
Table 3: Comparison with different methods for
question retrieval.
3.2 Question Retrieval Results
Table 3 presents the main retrieval performance.
Row 1 and row 2 are two baseline systems, which
model the relevance score using VSM (Cao et al,
2010) and language model (LM) (Zhai and Laf-
ferty, 2001; Cao et al, 2010) in the term space.
Row 3 and row 6 are monolingual translation mod-
els to address the word mismatch problem and
obtain the state-of-the-art performance in previ-
ous work. Row 3 is the word-based translation
model (Jeon et al, 2005), and row 4 is the word-
based translation language model, which linearly
combines the word-based translation model and
language model into a unified framework (Xue et
al., 2008). Row 5 is the phrase-based translation
model, which translates a sequence of words as
whole (Zhou et al, 2011). Row 6 is the entity-
based translation model, which extends the word-
based translation model and explores strategies to
learn the translation probabilities between words
and the concepts using the CQA archives and a
popular entity catalog (Singh, 2012). Row 7 is
the bilingual translation model, which translates
the English questions from Yahoo! Answers into
Chinese questions using Google Translate and ex-
pands the English words with the translated Chi-
nese words (Zhou et al, 2012). For these previ-
ous work, we use the same parameter settings in
the original papers. Row 8 and row 9 are our pro-
posed method, which leverages statistical machine
translation to improve question retrieval via ma-
trix factorization. In row 8, we only consider two
languages (English and Chinese) and translate En-
glish questions into Chinese using Google Trans-
late in order to compare with Zhou et al (2012).
In row 9, we translate English questions into other
four languages. There are some clear trends in the
result of Table 3:
(1) Monolingual translation models signifi-
cantly outperform the VSM and LM (row 1 and
row 2 vs. row 3, row 4, row 5 and row 6).
(2) Taking advantage of potentially rich seman-
tic information drawn from other languages via
statistical machine translation, question retrieval
performance can be significantly improved (row 3,
row 4, row 5 and row 6 vs. row 7, row 8 and row 9,
all these comparisons are statistically significant at
p < 0.05).
(3) Our proposed method (leveraging statisti-
cal machine translation via matrix factorization,
SMT + MF) significantly outperforms the bilin-
gual translation model of Zhou et al (2012) (row
7 vs. row 8, the comparison is statistically signifi-
cant at p < 0.05). The reason is that matrix factor-
ization used in the paper can effectively solve the
data sparseness and noise introduced by the ma-
chine translator simultaneously.
(4) When considering more languages, ques-
tion retrieval performance can be further improved
(row 8 vs. row 9).
Note that Wang et al (2009) also addressed the
word mismatch problem for question retrieval by
using syntactic tree matching. We do not compare
with Wang et al (2009) in Table 3 because pre-
vious work (Ming et al, 2010) demonstrated that
word-based translation language model (Xue et
al., 2008) obtained the superior performance than
the syntactic tree matching (Wang et al, 2009).
Besides, some other studies attempt to improve
question retrieval with category information (Cao
et al, 2009; Cao et al, 2010), label ranking (Li et
al., 2011) or world knowledge (Zhou et al, 2012).
However, their methods are orthogonal to ours,
and we suspect that combining the category infor-
mation or label ranking into our proposed method
might get even better performance. We leave it for
future research.
3.3 Impact of the Matrix Factorization
Our proposed method (SMT +MF) can effectively
solve the data sparseness and noise via matrix fac-
torization. To further investigate the impact of
the matrix factorization, one intuitive way is to
expand the original questions with the translated
words from other four languages, without consid-
ering the data sparseness and noise introduced by
machine translator. We compare our SMT + MF
with this intuitive enriching method (SMT + IEM).
Besides, we also employ our proposed matrix fac-
torization to the original question representation
(VSM + MF). Table 4 shows the comparison.
858
# Methods MAP P@10
1 VSM 0.242 0.226
2 VSM + MF 0.411 0.253
3 SMT + IEM (P = 5) 0.495 0.280
4 SMT + MF (P = 5) 0.564 0.291
Table 4: The impact of matrix factorization.
(1) Our proposed matrix factorization can sig-
nificantly improve the performance of question re-
trieval (row 1 vs. row2; row3 vs. row4, the
improvements are statistically significant at p <
0.05). The results indicate that our proposed ma-
trix factorization can effectively address the issues
of data spareness and noise introduced by statisti-
cal machine translation.
(2) Compared to the relative improvements of
row 3 and row 4, the relative improvements of row
1 and row 2 is much larger. The reason may be
that although matrix factorization can be used to
reduce dimension, it may impair the meaningful
terms.
(3) Compared to VSM, the performance of
SMT + IEM is significantly improved (row 1
vs. row 3), which supports the motivation that
the word ambiguity and word mismatch problems
could be partially addressed by Google Translate.
3.4 Impact of the Translation Language
One of the success of this paper is to take ad-
vantage of potentially rich semantic information
drawn from other languages to solve the word am-
biguity and word mismatch problems. So we con-
struct a dummy translator (DT) that translates an
English word to itself. Thus, through this trans-
lation, we do not add any semantic information
into the original questions. The comparison is pre-
sented in Table 5. Row 1 (DT + MF) represents
integrating two copies of English questions with
our proposed matrix factorization. From Table 5,
we have several different findings:
(1) Taking advantage of potentially rich seman-
tic information drawn from other languages can
significantly improve the performance of question
retrieval (row 1 vs. row 2, row 3, row 4 and row 5,
the improvements relative to DT + MF are statisti-
cally significant at p < 0.05).
(2) Different languages contribute unevenly for
question retrieval (e.g., row 2 vs. row 3). The
reason may be that the improvements of leverag-
ing different other languages depend on the qual-
ity of machine translation. For example, row 3
# Methods MAP
1 DT + MF (l1, l1) 0.352
2 SMT + MF (P = 2, l1, l2) 0.527
3 SMT + MF (P = 2, l1, l3) 0.553
4 SMT + MF (P = 2, l1, l4) 0.536
5 SMT + MF (P = 2, l1, l5) 0.545
6 SMT + MF (P = 3, l1, l2, l3) 0.559
7 SMT + MF (P = 4, l1, l2, l3, l4) 0.563
8 SMT + MF (P = 5, l1, l2, l3, l4, l5) 0.564
Table 5: The impact of translation language.
Method Translation MAP
SMT + MF (P = 2, l1, l2) Dict 0.468GTrans 0.527
Table 6: Impact of the contextual information.
is better than row 2 because the translation qual-
ity of English-French is much better than English-
Chinese.
(3) Using much more languages does not seem
to produce significantly better performance (row 6
and row 7 vs. row 8). The reason may be that in-
consistency between different languages may exist
due to statistical machine translation.
3.5 Impact of the Contextual Information
In this paper, we translate the English questions
into other four languages using Google Translate
(GTrans), which takes into account contextual in-
formation during translation. If we translate a
question word by word, it discards the contextual
information. We would expect that such a transla-
tion would not be able to solve the word ambiguity
problem.
To investigate the impact of contextual infor-
mation for question retrieval, we only consider
two languages and translate English questions
into Chinese using an English to Chinese lexicon
(Dict) in StarDict8. Table 6 shows the experi-
mental results, we can see that the performance is
degraded when the contextual information is not
considered for the translation of questions. The
reason is that GTrans is context-dependent and
thus produces different translated Chinese words
depending on the context of an English word.
Therefore, the word ambiguity problem can be
solved during the English-Chinese translation.
4 Conclusions and Future Work
In this paper, we propose to employ statistical ma-
chine translation to improve question retrieval and
8StarDict is an open source dictionary software, available
at http://stardict.sourceforge.net/.
859
enrich the question representation with the trans-
lated words from other languages via matrix fac-
torization. Experiments conducted on a real CQA
data show some promising findings: (1) the pro-
posed method significantly outperforms the pre-
vious work for question retrieval; (2) the pro-
posed matrix factorization can significantly im-
prove the performance of question retrieval, no
matter whether considering the translation lan-
guages or not; (3) considering more languages can
further improve the performance but it does not
seem to produce significantly better performance;
(4) different languages contribute unevenly for
question retrieval; (5) our proposed method can
be easily adapted to the large-scale information re-
trieval task.
As future work, we plan to incorporate the ques-
tion structure (e.g., question topic and question fo-
cus (Duan et al, 2008)) into the question represen-
tation for question retrieval. We also want to fur-
ther investigate the use of the proposed method for
other kinds of data set, such as categorized ques-
tions from forum sites and FAQ sites.
Acknowledgments
This work was supported by the National Natural
Science Foundation of China (No. 61070106, No.
61272332 and No. 61202329), the National High
Technology Development 863 Program of China
(No. 2012AA011102), the National Basic Re-
search Program of China (No. 2012CB316300),
We thank the anonymous reviewers for their in-
sightful comments. We also thank Dr. Gao Cong
for providing the data set and Dr. Li Cai for some
discussion.
References
L. Adamic, J. Zhang, E. Bakshy, and M. Ackerman.
2008. Knowledge sharing and yahoo answers: ev-
eryone knows and something. In Proceedings of
WWW.
A. Berger, R. Caruana, D. Cohn, D. Freitag, and V.Mit-
tal. 2000. Bridging the lexical chasm: statistical ap-
proach to answer-finding. In Proceedings of SIGIR,
pages 192-199.
D. Bernhard and I. Gurevych. 2009. Combining
lexical semantic resources with question & answer
archives for translation-based answer finding. In
Proceedings of ACL, pages 728-736.
P. F. Brown, V. J. D. Pietra, S. A. D. Pietra, and R. L.
Mercer. 1993. The mathematics of statistical ma-
chine translation: parameter estimation. Computa-
tional Linguistics, 19(2):263-311.
X. Cao, G. Cong, B. Cui, C. Jensen, and C. Zhang.
2009. The use of categorization information in lan-
guage models for question retrieval. In Proceedings
of CIKM, pages 265-274.
X. Cao, G. Cong, B. Cui, and C. Jensen. 2010. A
generalized framework of exploring category infor-
mation for question retrieval in community question
answer archives. In Proceedings of WWW, pages
201-210.
H. Duan, Y. Cao, C. Y. Lin, and Y. Yu. 2008. Searching
questions by identifying questions topics and ques-
tion focus. In Proceedings of ACL, pages 156-164.
C. L. Lawson and R. J. Hanson. 1974. Solving least
squares problems. Prentice-Hall.
J. -T. Lee, S. -B. Kim, Y. -I. Song, and H. -C. Rim.
2008. Bridging lexical gaps between queries and
questions on large online Q&A collections with
compact translation models. In Proceedings of
EMNLP, pages 410-418.
W. Wang, B. Li, and I. King. 2011. Improving ques-
tion retrieval in community question answering with
label ranking. In Proceedings of IJCNN, pages 349-
356.
D. D. Lee and H. S. Seung. 2001. Algorithms for
non-negative matrix factorization. In Proceedings
of NIPS.
Z. Ming, K. Wang, and T. -S. Chua. 2010. Prototype
hierarchy based clustering for the categorization and
navigation of web collections. In Proceedings of SI-
GIR, pages 2-9.
J. Jeon, W. Croft, and J. Lee. 2005. Finding similar
questions in large question and answer archives. In
Proceedings of CIKM, pages 84-90.
C. Paige and M. Saunders. 1982. LSQR: an algo-
rithm for sparse linear equations and sparse least
squares. ACM Transaction on Mathematical Soft-
ware, 8(1):43-71.
W. H. Press, S. A. Teukolsky, W. T. Vetterling, and B.
P. Flannery. 1992. Numerical Recipes In C. Cam-
bridge Univ. Press.
S. Riezler, A. Vasserman, I. Tsochantaridis, V. Mittal,
and Y. Liu. 2007. Statistical machine translation for
query expansion in answer retrieval. In Proceedings
of ACL, pages 464-471.
A. Singh. 2012. Entity based q&a retrieval. In Pro-
ceedings of EMNLP-CoNLL, pages 1266-1277.
J. Tang, X. Wang, H. Gao, X. Hu, and H. Liu. 2012.
Enriching short text representation in microblog for
clustering. Front. Comput., 6(1):88-101.
860
E. Wachsmuth, M. W. Oram, and D. I. Perrett. 1994.
Recognition of objects and their component parts:
responses of single units in the temporal cortex of
teh macaque. Cerebral Cortex, 4:509-522.
K. Wang, Z. Ming, and T-S. Chua. 2009. A syntac-
tic tree matching approach to find similar questions
in community-based qa services. In Proceedings of
SIGIR, pages 187-194.
B. Wang, X. Wang, C. Sun, B. Liu, and L. Sun. 2010.
Modeling semantic relevance for question-answer
pairs in web social communities. In Proceedings of
ACL, pages 1230-1238.
W. Xu, X. Liu, and Y. Gong. 2003. Document cluster-
ing based on non-negative matrix factorization. In
Proceedings of SIGIR, pages 267-273.
X. Xue, J. Jeon, and W. B. Croft. 2008. Retrieval mod-
els for question and answer archives. In Proceedings
of SIGIR, pages 475-482.
C. Zhai and J. Lafferty. 2001. A study of smooth meth-
ods for language models applied to ad hoc informa-
tion retrieval. In Proceedings of SIGIR, pages 334-
342.
G. Zhou, L. Cai, J. Zhao, and K. Liu. 2011. Phrase-
based translation model for question retrieval in
community question answer archives. In Proceed-
ings of ACL, pages 653-662.
G. Zhou, K. Liu, and J. Zhao. 2012. Exploiting bilin-
gual translation for question retrieval in community-
based question answering. In Proceedings of COL-
ING, pages 3153-3170.
G. Zhou, Y. Liu, F. Liu, D. Zeng, and J. Zhao. 2013.
Improving Question Retrieval in Community Ques-
tion Answering Using World Knowledge. In Pro-
ceedings of IJCAI.
861
