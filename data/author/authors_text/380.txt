Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing (EMNLP 2006), pages 492?500,
Sydney, July 2006. c?2006 Association for Computational Linguistics
Entity Annotation based on Inverse Index Operations
Ganesh Ramakrishnan, Sreeram Balakrishnan, Sachindra Joshi
IBM India Research Labs
IIT Delhi, Hauz Khas,
New Delhi, India
{ganramkr, sreevb, jsachind}@in.ibm.com
Abstract
Entity annotation involves attaching a la-
bel such as ?name? or ?organization? to a
sequence of tokens in a document. All the
current rule-based and machine learning-
based approaches for this task operate at
the document level. We present a new
and generic approach to entity annotation
which uses the inverse index typically cre-
ated for rapid key-word based searching
of a document collection. We define a set
of operations on the inverse index that al-
lows us to create annotations defined by
cascading regular expressions. The entity
annotations for an entire document cor-
pus can be created purely of the index
with no need to access the original docu-
ments. Experiments on two publicly avail-
able data sets show very significant perfor-
mance improvements over the document-
based annotators.
1 Introduction
Entity Annotation associates a well-defined label
such as ?person name?, ?organization?, ?place?,
etc., with a sequence of tokens in unstructured
text. The dominant paradigm for annotating a
document collection is to annotate each document
separately. The computational complexity of an-
notating the collection in this paradigm, depends
linearly on the number of documents and the cost
of annotating each document. More precisely, it
depends on the total number of tokens in the doc-
ument collection. It is not uncommon to have mil-
lions of documents in a collection. Using this par-
adigm, it can take hours or days to annotate such
big collections even with highly parallel server
farms. Another drawback of this paradigm is that
the entire document collection needs to be re-
processed whenever new annotations are required.
In this paper, we propose an alternative para-
digm for entity annotation. We build an index for
the tokens in the document collection first. Us-
ing a set of operators on the index, we can gener-
ate new index entries for sequences of tokens that
match any given regular expression. Since a large
class of annotators (e.g., GATE (Cunningham et
al., 2002)) can be built using cascading regular ex-
pressions, this approach allows us to support anno-
tation of the document collection purely from the
index.
We show both theoretically and experimentally
that this approach can lead to substantial reduc-
tions in computational complexity, since the order
of computation is dependent on the size of the in-
dexes and not the number of tokens in the doc-
ument collection. In most cases, the index sizes
used for computing the annotations will be a small
fraction of the total number of tokens.
In (Cho and Rajagopalan, 2002) the authors de-
velop a method for speeding up the evaluation of
a regular expression ?R? on a large text corpus by
use of an optimally constructed multi-gram index
to filter documents that will match ?R?. Unfortu-
nately, their method requires access to the docu-
ment collection for the final match of ?R? to the
filtered document set, which can be very time con-
suming. The other bodies of related prior work
concern indexing annotated data (Cooper et al,
2001; Li and Moon, 2001) and methods for doc-
ument level annotation (Agichtein and Gravano,
2000; McCallum et al, 2000). The work on index-
ing annotated data is not directly relevant, since
our method creates the index to the annotations di-
rectly as part of the algorithm for computing the
annotation. (Eikvil, 1999) has a good survey of
existing document level IE methods. The rele-
vance to our work is that only a certain class of
annotators can be implemented using our method:
namely anything that can be implemented using
cascading weighted regular expressions. Fortu-
492
nately, this is still powerful enough to enable a
large class of highly effective entity annotators.
The rest of the paper is organized as follows. In
Section 2, we present an overview of the proposed
approach for entity annotation. In Section 3, we
construct an algorithm for implementing a deter-
ministic finite automaton (DFA) using an inverse
index of a document collection. We also compare
the complexity of this approach against the direct
approach of running the DFA over the document
collection, and show that under typical conditions,
the index-based approach will be an order of mag-
nitude faster. In Section 4, we develop an alter-
native algorithm which is based on translating the
original regular expression directly into an ordered
AND/OR graph with an associated set of index
level operators. This has the advantage of oper-
ating directly on the much more compact regular
expressions instead of the equivalent DFA (which
can become very large as a result of the NFA to
DFA conversion and epsilon removal steps). We
provide details of our experiments on two publicly
available data sets in Section 5. Finally we present
our conclusions in Section 6.
2 Overview
Figure 1 shows the process for entity annotation
presented in the paper. A given document collec-
tion D is tokenized and segmented into sentences.
The tokens are stored in an inverse index I . The
inverse index I has an ordered list U of the unique
tokens u1, u2, ..uW that occur in the collection,
where W is the number of tokens in I . Addition-
ally, for each unique token ui, I has a postings
list L(ui) =< l1, l2, . . . lcnt(ui) > of locations in
D at which ui occurs. cnt(ui) is the length of
L(ui). Each entry lk, in the postings list L(ui),
has three fields: (1) a sentence identifier, lk.sid,
(2) the begin position of the particular occurrence
of ui, lk.first and (3) the end position of the same
occurrence of ui, lk.last.
We require the input grammar to be the same
as that used for named entity annotations in GATE
(Cunningham et al, 2002). The GATE architec-
ture for text engineering uses the Java Annota-
tions Pattern Engine (JAPE) (Cunningham, 1999)
for its information extraction task. JAPE is a pat-
tern matching language. We support two classes
of properties for tokens that are required by gram-
mars such as JAPE: (1) orthographic properties
such as an uppercase character followed by lower
case characters, and (2) gazetteer (dictionary) con-
tainment properties of tokens and token sequences
such as ?location? and ?person name?. The set of
tokens along with entity types specified by either
of these two properties are referred to as Basic
Entities. The instances of basic entities specified
by orthographic properties must be single tokens.
However, instances of basic entities specified us-
ing gazetteer containment properties can be token
sequences.
The module (1) of our system shown in Fig-
ure 1, identifies postings lists for each basic en-
tity type. These postings lists are entered as index
entries in I for the corresponding types. For ex-
ample, if the input rules require tokens/token se-
quences that satisfy Capsword or Location Dic-
tionary properties, a postings list is created for
each of these basic types. Constructing the post-
ings list for a basic entity type with some ortho-
graphic property is a fairly straightforward task;
the postings lists of tokens satisfying the ortho-
graphic properties are merged (while retaining the
sorted order of each postings list). The mecha-
nism for generating the postings list of basic en-
tities with gazetteer properties will be developed
in the following sections. A rule for NE an-
notation may require a token to satisfy multiple
properties such as Location Dictionary as well as
Capsword. The posting list for tokens that satisfy
multiple properties are determined by perform-
ing an operation parallelint(L,L?) over the post-
ing lists of the corresponding basic entities. The
parallelint(L,L?) operation returns a posting list
such that each entry in the returned list occurs in
both L as well as L?. The module (2) of our sys-
tem shown in Figure 1 identifies instances of each
annotation type, by performing index-based oper-
ations on the postings lists of basic entity types and
other tokens.
3 Annotation using Cascading Regular
Expressions
Regular expressions over basic entities have been
extensively used for NE annotations. The Com-
mon Pattern Specification Language (CSPL)1
specifies a standard for describing Annotators that
can be implemented by a series of cascading regu-
lar expression matches.
Consider a regular expression R over an al-
phabet ? of basic entities, and a token sequence
1http://www.ai.sri.com/?appelt/TextPro
493
Figure 1: Overview of the entity annotation process described in this paper
T = {t1, . . . , tW }. The annotation problem aims
at determining all matches of regular expression
R in the token sequence T . Additionally, NE an-
notations do not span multiple sentences. We will
therefore assume that the length of any annotated
token sequence is bounded by ?, where ? can
be the maximum sentence length in the document
collection of interest. In practice, ? can be even
smaller.
3.1 Computing Annotations using a DFA
Given a regular expression R, we can convert it
into a deterministic finite automate (DFA) DR. A
DFA is a finite state machine, where for each pair
of state and input symbol, there is one and only
one transition to a next state. DR starts process-
ing of an input sequence from a start state sR, and
for each input symbol, it makes a transition to a
state given by a transition function ?R. Whenever
DR lands in an accept state, the symbol sequence
till that point is accepted by DR. For simplicity of
the document and index algorithms, we will ignore
document and sentence boundaries in the follow-
ing analysis.
Let @ti,i+?, 1 ? i ? W ?? be a subsequence
of T of length ?. On a given input @ti,i+?, DR
will determine all token sequences originating at ti
that are accepted by the regular expression gram-
mar specified through DR. Figure 2 outlines the
algorithm findAnnotations that locates all token
sequences in T that are accepted by DR.
Let DR have {S1, . . . , SN} states. We assume
that the states have been topologically ordered so
that S1 is the start state. Let ? be the time taken
to consume a single token and advance the DFA
to the next state (this is typically implemented as
a table or hash look-up). The time taken by the al-
findAnnotations(T,DR)
Let T = {t1, . . . , tW }
for i = 1 to W ?? do
let @ti,i+? be a subsequence of length ? starting
from ti in T
use DR to annotate @ti,i+?
end for
Figure 2: The algorithm for finding all the occur-
rences of R in a token sequence T .
gorithm findAnnotations can be obtained by sum-
ming up the number of times each state is vis-
ited as the input tokens are consumed. Clearly,
the state S1 is visited W times, W being the total
number of symbols in the token sequence T . Let
cnt(Si) give the total number of times the state Si
has been visited. The complexity of this method
is:
CD = ?
i=N?
i=1
cnt(Si) = ?
[
W +
i=N?
i=2
cnt(Si)
]
(1)
3.2 Computing Regular Expression Matches
using Index
In this section, we present a new approach for find-
ing all matches of a regular expression R in a to-
ken sequence T , based on the inverse index I of T .
The structure of the inverse index was presented in
Section 2. We define two operations on postings
lists which find use in our annotation algorithm.
1. merge(L,L?): Returns a postings list such
that each entry in the returned list occurs either in
L or L? or both. This operation takes O(|L|+ |L?|)
time.
2. consint(L,L?): Returns a postings list such
that each entry in the returned list points to a to-
ken sequence which consists of two consecutive
494
subsequences @sa and @sb within the same sen-
tence, such that, L has an entry for @sa and L?
has an entry for @sb. There are several meth-
ods for computing this depending on the relative
size of L and L?. If they are roughly equal in
size, a simple linear pass through L and L?, anal-
ogous to a merge, can be performed. If there is
a significant difference in sizes, a more efficient
modified binary search algorithm can be imple-
mented. The details are shown in Figure 3. The
consint(L,L?)
Let M elements of L be l1 ? ? ? lM
Let N elements of L? be l?1 ? ? ? lN
if M < N then
set j = 1
for i = 1 to M do
set k = 1, keep doubling k until
l?j .first ? li.last < l
?
j+k.first
binary search the L? in the interval j ? ? ? k
to determine the value of p such that
l?p.first ? li.last < l
?
p+1.first
if l?p.first = li.last a match exists, copy to output
set j = p+ 1
end for
else
Same as above except l and l? are reversed
end if
Figure 3: The modified binary search algorithm
for consint
complexity of this algorithm is determined by the
size qi of the interval required to satisfy l?j .first ?
li.last < l?j+qi .first (assuming |L| < |L?|). It
will take an average of log2(qi) operations to de-
termine the size of interval and log2(qi) opera-
tions to perform the binary search, giving a to-
tal of 2 log2(qi). Let q1 ? ? ? qM be the sequence
of intervals. Since the intervals will be at most
two times larger than the actual interval between
the nearest matches in L? to L, we can see that
|L?| ?
?M
i=1 qi ? 2 ? |L
?|. Hence the worst case
will be reached when qi = 2|L?|/|L| with a time
complexity given by 2|L| (log2(|L?|/|L|) + 1), as-
suming |L| < |L?|.
To support annotation of a token sequence that
matches a regular expression only in the con-
text of some regular expression match on its left
and/or right, we implement simple extensions to
the consint(L1, L2) operator. Details of the ex-
tensions are left out from this paper owing to space
constraints.
3.3 Implementing a DFA using the Inverse
Index
In this section, we present a method that takes a
DFA DR and an inverse index I of a token se-
quence T , to compute a postings list of subse-
quences of length at most ?, that match the regu-
lar expression R.
Let the set S = {S1, . . . , SN} denote the set
of states in DR, and let the states be topologi-
cally ordered with S1 as the start state. We as-
sociate an object lists,k with each state s ? S and
?1 ? k ? ?. The object lists,k is a posting list
of all token sequences of length exactly k that end
in state s. The lists,k is initialized to be empty
for all states and lengths. We iteratively compute
lists,k for all the states using the algorithm given
in Figure 4. The function dest(Si) returns a set
of states, such that for each s ? dest(Si), there
is an arc from state Si to state s. The function
label(Si, Sj) returns the token associated with the
edge (Si, Sj).
for k = 1 to ? do
for i = 1 to N do
for s ? dest(Si) do
if i == 1 then
t = L(label(Si, s))
else
t = consint(listSi,k?1, L(label(Si, s)))
end if
lists,k = merge(lists,k, t)
end for
end for
end for
Figure 4: The algorithm for building the index to
all token sequences in T that match R.
At the end of the algorithm, all token sequences
corresponding to postings lists lists,i, s ? S, 1 ?
i ? ? are sequences that are matched by the reg-
ular expression R.
3.4 Complexity Analysis for the Index-based
Approach
The complexity analysis of the algorithm given
in Figure 4 is based on the observation that,
?k=?
k=1 |listSi,k| = cnt(Si). This holds, since
listSi,k contains an entry for all sequences that
visit the state Si and are of length exactly k. Sum-
ming the length of these lists for a particular state
Si across all the values of k will yield the total
number of sequences of length at most ? that visit
the state Si.
For the algorithm in Figure 3, the time taken by
495
one consint operation is given by 2?(|listSi,k| ?
(log(?ijk) + 1)) where ? is a constant that varies
with the lower level implementation. ?ijk =
|L(label(Si,Sj))|
|listSi,k|
is the ratio of the postings list size
of the label associated with the arc from Si to
Sj to the list size of Si at step k. Note that
?ijk ? 1. Let prev(Si) be the list of pre-
decessor states to Si. The time taken by all
the merge operations for a state Si at step k
is given by ?(log(|prev(Si)|)|listSi,k|) Assum-
ing all the merges are performed simultaneously,
?(log(|prev(Si)|) is the time taken to create each
entry in the final merged list, where ? is a con-
stant that varies with the lower level implementa-
tion. Note this scales as the log of the number of
lists that are being merged.
The total time taken by the algorithm given in
Figure 4 can be computed using the time spent on
merge and consint operations for all states and
all lengths. Setting ??is = maxk ?isk, the total time
CI can be given as:
CI =
i=N?
i=2
?
?? log(|prev(Si)|) + 2?
?
s?dest(Si)
log(??is)
?
? cnt(Si)
(2)
Note that in deriving Equation 2, we have ig-
nored the cost of merging list(Sa, k) for k =
1 ? ? ?? for the accept states.
3.5 Comparison of Complexities
To simplify further analysis, we can replace
cnt(Si) with fcnt(Si) where fcnt(Si) =
cnt(Si)/W . If we assume that the token distribu-
tion statistics of the document collection remain
constant as the number of documents increases,
we can also assume that fcnt(Si) is invariant to
W . Since ?ijk is given by a ratio of list sizes, we
can also consider it to be invariant to W . We now
assume ? ? ? ? ? since these are implementa-
tion specific times for similar low level compute
operations. With this assumptions from Equations
1 and 2, the ratio CD/CI can be approximated by:
1 +
?N
i=2 fcnt(Si)
?N
i=2
[?
s?dest(Si)
2 log(??is) + log(|prev(Si)|)
]
fcnt(Si)
(3)
The overall ratio of CD to CI is invariant to W
and depends on two key factors fcnt(Si) and?
s?dest(Si) log(??is). If fcnt(Si)  1, the ratio
will be large and the index-based approach will be
much faster. However, if either fcnt(Si) starts ap-
proaching 1 or
?
s?dest(Si) log(??is) starts getting
very large (caused by a large fan out from Si), the
direct match using the DFA may be more efficient.
Intuitively, this makes sense since the main ben-
efit of the index is to eliminate unnecessary hash
lookups for tokens do not match the arcs of the
DFA. As fcnt(Si) approaches 1, this assumption
breaks down and hence the inherent efficiency of
the direct DFA approach, where only a single hash
lookup is required per state regardless of the num-
ber of destination states, becomes the dominant
factor.
3.6 Comparison of Complexities for Simple
Dictionary DFA
To illustrate the potential gains from the index-
based annotation, consider a simple DFA DR with
two states S1 and S2. Let the set of unique to-
kens A be {a, b, c ? ? ? z}. Let E be the dictionary
{a, e, i, o, u}. Let DR have five arcs from S1 to S2
one for each element in E. The DFA DR is a sim-
ple acceptor for the dictionary E, and if run over
a token sequence T drawn from A, it will match
any single token that is in E. For this simple case
fcnt(S2) is just the fraction of tokens that occur
in E and hence by definition fcnt(S2) ? 1. Sub-
stituting into 3 we get
CD
CI
=
1 + fcnt(S2)
2 log(5)fcnt(S2)
(4)
As long as fcnt(S2) < 0.27, this ratio will always
be greater than 1.
4 Inverse Index-based Annotation using
Regular Expressions
A DFA corresponding to a given regular expres-
sion can be used for annotation, using the inverse
index approach as described in Section 3.3. How-
ever, the NFA to DFA conversion step may result
in a DFA with a very large number of states. We
develop an alternative algorithm that translates the
original regular expression directly into an ordered
AND/OR graph. Associated with each node in the
graph is a regular expression and a postings list
that points to all the matches for the node?s regu-
lar expression in the document collection. There
are two node types: AND nodes where the output
list is computed from the consint of the postings
lists of two children nodes and OR nodes where
the output list is formed by merging the posting
496
lists of all the children nodes. Additionally, each
node has two binary properties: isOpt and self-
Loop. The first property is set if the regular ex-
pression being matched is of the form ?R??, where
??? denotes that the regular expression R is op-
tional. The second property is set if the regular
expression is of the form ?R+?, where ?+? is the
Kleen operator denoting one or more occurrences.
For the case of ?R*?, both properties are set.
The AND/OR graph is recursively built by scan-
ning the regular expression from left to right and
identifying every sub-regular expression for which
a sub-graph can be built. We use capital letters
R,X to denote regular expressions and small let-
ters a, b, c, etc., to denote terminal symbols in
the symbol set ?. Figure 5 details the algorithm
used to build the AND/OR graph. Effectively, the
AND/OR graph decomposes the computation of
the postings list for R into a ordered set of merge
and consint operations, such that the output L(v)
for node v become the input to its parents. The
graph specifies the ordering, and by evaluating all
the nodes in dependency order, the root node will
end up with a postings list that corresponds to the
desired regular expression.
if R is empty then
Return NULL
else if R is a symbol a ? ? then
Return createNode(name = a)
else
Decompose R such that R ? R? <regexp>
if <regexp> is empty then
if R? == (X) or X+ or X? or X? then
node = createGraph(X)
if R? == X+ or X? then
node.selfLoop = 1
end if
if R? == X? or X? then
node.isOpt = 1
end if
else if R? == (X1|X2|..|Xk) then
node = createNode(name = R)
node.nodetype = OR
for i = 1 to k do
node.children[i] = createGraph(Xi)
end for
end if
else
node = createNode(name = R)
node.nodetype = AND
node.children[1] = createGraph(R?)
node.children[2] = createGraph(<regexp>)
end if
Return node
end if
Figure 5: createGraph(R)
Figure 6: An example regular expression and cor-
responding AND/OR graph
4.1 Handling ??? and Kleen Operators
The isOpt and selfLoop properties of a node are
set if the corresponding regular expression is of
the form R?, R+ or R?. To handle the R? case
we associate a new property isOpt with the output
list L(v) from node v, such that L(v).isOpt = 1
if the v.isOpt = 1. We also define two operations
consint in Figure 7 and merge which account
for the isOpt property of their argument lists. For
consint, the generated list has its isOpt set to
1 if and only if both the argument lists have their
isOpt property set to 1. The merge operation re-
mains the same as merge, except that the resultant
list has isOpt set to 1 if any of its argument lists
has isOpt set to 1. The worst case time taken by
consint is bounded by 1 consint and 2 merge
operations.
To handle the R+ case, we define a new oper-
ator consint(L,+) which returns a postings list
L?, such that each entry in the returned list points
to a token sequence consisting of all k ? [1,?]
consecutive subsequences @s1,@s2 . . .@sk, each
@si, 1 ? i ? k being an entry in L. A sim-
ple linear pass through L is sufficient to obtain
consint(L,+). The time complexity of this op-
eration is linear in the size of L?. The isOpt prop-
erty of the result list L? is set to the same value as
its argument list L.
Figure 6 shows an example regular expres-
sion and its corresponding AND/OR graph; AND
nodes are shown as circles whereas OR nodes are
shown as square boxes. Nodes having isOpt and
selfLoop properties are labeled with +, ? or ?.
Any AND/OR graph thus constructed is acyclic.
The edges in the graph represent dependency be-
tween computing nodes. The main regular expres-
sion is at the root node of the graph. The leaf
nodes correspond to symbols in ?. Figure 8 out-
lines the algorithm for computing the postings list
of a regular expression by operating bottom-up on
the AND/OR graph.
497
consint(L,L?)
if ((L.isOpt == 0) and (L?.isOpt == 0)) then
Return consint(L,L?)
end if
if ((L.isOpt == 0) and (L?.isOpt == 1)) then
Return merge(L, consint(L,L?))
end if
if ((L.isOpt == 1) and (L?.isOpt == 0)) then
Return merge(consint(L,L?), L?)
end if
if ((L.isOpt == 1) and (L?.isOpt == 1)) then
t = merge(consint(L,L?), L?)
Return merge(t, L)
end if
Figure 7: consint
for Each node v in the reverse topological sorting of GR
do
if v.nodetype == AND then
Let v1 and v2 be the children of v
L(v) = consint(L(v1), L(v2))
else if v.type == OR then
L(v) = merge(L(v.child1), ? ? ? , L(v.childn))
end if
if v.selfLoop == 1 then
L(v) = consint(L(v),+)
end if
if v.isOpt == 1 then
L(v).isOpt = 1
end if
end for
Figure 8: The algorithm for computing postings
list of a regular expression R using the inverse in-
dex I and the corresponding AND/OR graph GR
5 Experiments and Results
In this section, we present empirical compari-
son of performance of the index-based annotation
technique (Section 4) against annotation based on
the ?document paradigm? using GATE. The exper-
iments were performed on two data sets, viz., (i)
the enron email data set2 and (ii) a combination of
Reuters-21578 data set3 and the 20 Newsgroups
data set4. After cleaning, the former data set was
2.3 GB while the latter was 93 MB in size. Our
code is entirely in Java. The experiments were
performed on a dual 3.2GHz Xeon server with 4
GB RAM. The code for creation of the index was
custom-built in Java. Prior to indexing, the sen-
tence segmentation and tokenization of each data
set was performed using in-house Java versions of
2http://www.cs.cmu.edu/?enron/
3http://www.daviddlewis.com/resources/
testcollections/reuters21578/
4http://people.csail.mit.edu/jrennie/
20Newsgroups/
standard tools5.
5.1 Rule Specification using JAPE
JAPE is a version of CPSL6 (Common Pattern
Specification Language). JAPE provides finite
state transduction over annotations based on reg-
ular expressions. The JAPE grammar requires in-
formation from two main resources: (i) a tokenizer
and (ii) a gazetteer.
(1) Tokenizer: The tokenizer splits the text into
very simple tokens such as numbers, punctuation
and words of different types. For example, one
might distinguish between words in uppercase and
lowercase, and between certain types of punctua-
tion. Although the tokenizer is ca pable of much
deeper analysis than this, the aim is to limit its
work to maximise efficiency, and enable greater
flexibility by placing the burden on the grammar
rules, which are more adaptable. A rule has a
left hand side (LHS) and a right hand side (RHS).
The LHS is a regular expression which has to be
matched on the input; the RHS describes the an-
notations to be added to the Annotation Set. The
LHS is separated from the RHS by ?>?. The fol-
lowing four operators can be used on the LHS: ?|?,
???, ??? and ?+?. The RHS uses ?;? as a separa-
tor between statements that set the values of the
different attributes. The following tokenizer rule
identifies each character sequence that begins with
a letter in upper case and is followed by 0 or more
letters in lower case:
"UPPERCASELETTER" "LOWERCASELETTER"*
>>> Token; orth=upperInitial; kind=word;
Each such character sequence will be annotated as
type ?Token?. The attribute ?orth? (orthography)
has the value ?upperInitial?; the attribute ?kind?
has the value ?word?.
(2) Gazetteer: The gazetteer lists used are plain
text files, with one entry per line. Each list rep-
resents a set of names, such as names of cities,
organizations, days of the week, etc. An index file
is used to access these lists; for each list, a ma-
jor type is specified and, optionally, a minor type.
These lists are compiled into finite state machines.
Any text tokens that are matched by these ma-
chines will be annotated with features specifying
the major and minor types. JAPE grammar rules
5http://l2r.cs.uiuc.edu/?cogcomp/
tools.php
6A good description of the original version of this lan-
guage is in Doug Appelt?s TextPro manual: http://www.
ai.sri.com/?appelt/TextPro.
498
then specify the types to be identified in particular
circumstances.
The JAPE Rule: Each JAPE rule has two parts,
separated by ??>?. The LHS consists of an an-
notation pattern to be matched; the RHS describes
the annotation to be assigned. A basic rule is given
as:
Rule::=
<rule> <ident> ( <priority> <integer> )?
LeftHandSide ">>>" RightHandSide
(1) Left hand side: On the LHS, the pattern is
described in terms of the annotations already as-
signed by the tokenizer and gazetteer. The annota-
tion pattern may contain regular expression opera-
tors (e.g. ?, ?, +). There are 3 main ways in which
the pattern can be specified:
1. value: specify a string of text, e.g.
{Token.string == ?of?}
2. attribute: specify the attributes (and values)
of a token (or any other annotation), e.g.
{Token.kind == number}
3. annotation: specify an annotation type from
the gazetteer, e.g. {Lookup.minorType ==
month}
(2) Right hand side: The RHS consists of de-
tails of the annotations and optional features to be
created. Annotations matched on the LHS of a rule
may be referred to on the RHS by means of labels
that are attached to pattern elements. Finally, at-
tributes and their corresponding values are added
to the annotation. An example of a complete rule
is:
Rule: NumbersAndUnit
(({Token.kind=="number"})+:numbers
{Token.kind=="unit"})
>>>
:numbers.Name={rule="NumbersAndUnit"}
This says ?match sequences of numbers followed
by a unit; create a Name annotation across the span
of the numbers, and attribute rule with value Num-
bersAndUnit?.
Use of context: Context can be dealt with in the
grammar rules in the following way. The pattern to
be annotated is always enclosed by a set of round
brackets. If preceding context is to be included in
the rule, this is placed before this set of brackets.
This context is described in exactly the same way
as the pattern to be matched. If context follow-
ing the pattern needs to be included, it is placed
Figure 9: An example JAPE rule used in the ex-
periments
after the label given to the annotation. Context is
used where a pattern should only be recognised if
it occurs in a certain situation, but the context itself
does not form part of the pattern to be annotated.
For example, the following rule for ?email-id?s
(assuming an appropriate regular expression for
?EMAIL-ADD?) would mean that an email ad-
dress would only be recognized if it occurred in-
side angled brackets (which would not themselves
form part of the entity):
Rule: Emailaddress1
({Token.string=="<"})
(
{Token.kind==EMAIL-ADD}
)
:email
({Token.string==">"})
>>>
:email.Address={kind="email",
rule="Emailaddress1"}
5.2 Results
In our first experiment, we performed annotation
of the two corpora for 4 annotation types using 2
JAPE rules for each type. The 4 annotation types
were ?Person name?, ?Organization?, ?Location?
and ?Date?. A sample JAPE rule for identifying
person names is shown in Figure 9. This rule iden-
tifies a sequence of words as a person name when
each word in the sequence starts with an alpha-
bet in upper-case and when the sequence is imme-
diately preceded by a word from a dictionary of
?INITIAL?s. Example words in the ?INITIAL? dic-
tionary are: ?Mr.?, ?Dr.?, ?Lt.?, etc.
499
Table 1 compares the time taken by the index-
based annotator against that taken by GATE for the
8 JAPE rules. The index-based annotator performs
8-13 times faster than GATE. Table 2 splits the
time mentioned for the index-based annotator in
Table 1 into the time taken for the task of comput-
ing postings lists for basic entities and derived en-
tities (c.f. Section 2) for each of the data sets. We
can also observe that a greater speedup is achieved
for the larger corpus.
Data set GATE Index-based
Enron 4974343 374926
Reuters 752287 92238
Table 1: Time (in milliseconds) for computing an-
notations using the two techniques
Data set Orthographic Gazetteer Derived
entity types entity types entity types
Enron 38285 105870 230771
Reuters 28493 21531 42214
Table 2: Time (in milliseconds) for computing
postings lists of entity types
An important advantage of performing annota-
tions over the inverse index is that index entries
for basic entity types can be preserved and reused
for annotation types as additional rules for anno-
tation are specified by users. For instance, the in-
dex entry for ?Capsword? might find reuse in sev-
eral annotation rules. As against this, a document-
based annotator has to process each document
from scratch for every newly introduced annota-
tion rule. To verify this, we introduced 1 addi-
tional rule for each of the 4 named entity types.
In Table 3, we compare the time required by
the index-based annotator against that required by
GATE for annotating the two corpora using the 4
additional rules. We achieve a greater speedup fac-
tor of 23-37 for incremental annotation.
Data set GATE Index-based
Enron 1479954 62227
Reuters 661157 17929
Table 3: Time (in milliseconds) for computing an-
notations using the two techniques for the addi-
tional 4 rules
6 Conclusions
In this paper we demonstrated that a suitably con-
structed inverse index contains all the necessary
information to implement entity annotators that
use cascading regular expressions. The approach
has the key advantage of not requiring access to
the original unstructured data to compute the an-
notations. The method uses a basic set of opera-
tors on the inverse index to construct indexes to all
matches for a regular expression in the tokenized
data set. We showed theoretically, that for a DFA
implementation, the index approach can be much
faster if the index sizes corresponding to the labels
on the DFA are a small fraction of the total num-
ber of tokens in the data set. We also provided
a more efficient index-based implementation that
is directly computed from the regular expressions
without the need of a DFA conversion and experi-
mentally demonstrated the gains.
References
Eugene Agichtein and Luis Gravano. 2000. Snow-
ball: Extracting relations from large plain-text col-
lections. In Proceedings of the Fifth ACM Interna-
tional Conference on Digital Libraries.
Junghoo Cho and Sridhar Rajagopalan. 2002. A fast
regular expression indexing engine. In Proceedings
of the 18th International Conference on Data Engi-
neering.
Brian Cooper, Neal Sample, Michael J. Franklin,
G??sli R. Hjaltason, and Moshe Shadmon. 2001. A
fast index for semistructured data. In The VLDB
Conference, pages 341?350.
H. Cunningham, D. Maynard, K. Bontcheva, and
V. Tablan. 2002. GATE: A framework and graph-
ical development environment for robust NLP tools
and applications.
H. Cunningham. 1999. Jape ? a java annotation pat-
terns engine.
Line Eikvil. 1999. Information extraction from world
wide web - a survey. Technical Report 945, Nor-
weigan Computing Center.
Quanzhong Li and Bongki Moon. 2001. Indexing and
querying XML data for regular path expressions. In
The VLDB Journal, pages 361?370.
Andrew McCallum, Dayne Freitag, and Fernando
Pereira. 2000. Maximum entropy Markov mod-
els for information extraction and segmentation. In
Proc. 17th International Conf. on Machine Learn-
ing, pages 591?598. Morgan Kaufmann, San Fran-
cisco, CA.
500
Learning Decision Lists with Known Rules for Text Mining
Venkatesan Chakravarthy
IBM India Research Lab
vechakra@in.ibm.com
Sachindra Joshi
IBM India Research Lab
jsachind@in.ibm.com
Ganesh Ramakrishnan
IBM India Research Lab
ganramkr@in.ibm.com
Shantanu Godbole
IBM India Research Lab
shgodbol@in.ibm.com
Sreeram Balakrishnan
IBM Silicon Valley Lab
sreevb@us.ibm.com
Abstract
Many real-world systems for handling unstructured
text data are rule-based. Examples of such systems
are named entity annotators, information extraction
systems, and text classifiers. In each of these appli-
cations, ordering rules into a decision list is an im-
portant issue. In this paper, we assume that a set of
rules is given and study the problem (MaxDL) of or-
dering them into an optimal decision list with respect
to a given training set. We formalize this problem
and show that it is NP-Hard and cannot be approxi-
mated within any reasonable factors. We then propose
some heuristic algorithms and conduct exhaustive ex-
periments to evaluate their performance. In our ex-
periments we also observe performance improvement
over an existing decision list learning algorithm, by
merely re-ordering the rules output by it.
1 Introduction
Rule-based systems have been extensively used for
several problems in text mining. Some problems
in text mining where rule-based systems have been
successfully used are part of speech tagging (Brill,
1992), named entity annotation (Grishman, 1997;
Appelt et al, 1995), information extraction (May-
nard et al, 2001), question answering (Riloff and
Thelen, 2000) and classification (Han et al, 2003; Li
and Yamanishi, 1999; Sasaki and Kita, 1998). Sev-
eral studies have been conducted that compare the
performance of rule-based systems and other ma-
chine learning techniques with mixed results. While
there is no clear winner between the two approaches
in terms of performance, the rule-based approach
is clearly preferred in operational settings (Borth-
wick, 1999; Varadarajan et al, 2002). Rule-based
systems are human comprehensible and can be im-
proved over time. Therefore, it is imperative to de-
velop methods that assist in building rule-based sys-
tems.
A rule-based system consists of a set of rules.
These rules can either be manually designed or
could be learnt from a training set using rule-
induction techniques (J. and G, 1994; Cohen, 1995).
Each rule consists of an antecedent or pattern and
a consequent or predicted annotation. In this paper,
we will restrict our attention to a broad class of rules
in which the antecedent describes a series of condi-
tions on the input item and the consequent specifies
the label that applies to instances covered by the an-
tecedent. The conditions could also be expressed as
patterns in regular or more powerful grammars.
In general, rules could be ambiguous, i.e., multi-
ple rules could cover an instance. A common ap-
proach for resolving this ambiguity is to define an
ordering on the rules (Maynard et al, 2001; Borth-
wick, 1999). A decision list is one such mecha-
nism (Rivest, 1987). A set of rules that are intended
to be interpreted in a sequence is called a decision
list. In other words, a decision list is an ordering of
the given set of rules. Given an instance t, the rules
are applied in the specified order until a pattern of a
rule R covers t. The instance t is assigned the pre-
dicted annotation associated with R.
In this paper, we study the problem of arranging a
given set of rules into the ?best? decision list. Learn-
ing decision lists using training data has been stud-
ied in the past (Rivest, 1987; J. and G, 1994; Cohen,
1995; Li and Yamanishi, 1999). These methods at-
tempt to simultaneously learn rules and their order-
ing. Typically they use separate and conquer (Wit-
ten and Frank, 2005) strategy and order generated
rules as they are discovered. The generation and or-
dering of rules are not considered as two separate
835
tasks. In contrast, we assume that the rules are given
to us and study the problem of arranging them into
an optimal decision list, where optimality is deter-
mined over a training data set. Our approach is mo-
tivated by the observation that in many operational
settings, it is easier and preferred to get a set of rules
designed by domain experts (Lewis et al, 2003). Al-
ternatively, the set of rules can be determined using
existing techniques for rule learning (J. and G, 1994;
Cohen, 1995; Califf and Mooney, 1998). The sepa-
ration of rule ordering from rule generation allows
us to analyze the problem of ordering in detail and
to develop effective methods for rule ordering. We
demonstrate the usefulness of the proposed methods
for ordering manually designed rules in the task of
named entity annotation and machine learnt rules in
the task of classification.
We determine the ordering of the given set of rules
based on a training set. A training set consists of a
set of pairs (ti, ai) where ti is an instance and ai
is its actual annotation. Given a set of rules and a
training data set, we define the problem as follows:
Arrange the rules into a decision list such that max-
imum number of instances are assigned the correct
annotation. We refer to this problem as the MAXDL
problem. We show that this problem is NP hard
and cannot approximated within a factor of n1?,
for any  > 0. We then propose some heuristics
and present an experimental study of these heuris-
tics. Our experimental results show performance im-
provement over an existing decision list learning al-
gorithm, by merely reordering the rules output by
that algorithm. We also illustrate the performance
improvements obtained by applying our algorithms
for ordering named entity annotation rules and clas-
sification rules.
In the rest of the paper we formalize the MAXDL
problem (?2), show it is NP-hard and can?t be
approximated within reasonable factors (?3), and
propose heuristics in a greedy framework (?4).
We present experiments (?5) and conclude with
Section?6.
2 MAXDL Problem Definition and
Notations
The input consists of a set of instances T =
{t1, t2, . . . , tm}, a set of annotations A and a set of
rulesR = {R1, R2, . . . , Rn}. Each ruleRi = (p, a)
is a pair, where p is called the pattern and a ? A is
called the predicted annotation. The patten p will be
given as a set p ? I; we say that the instances in
p are covered by R. The input also includes a map-
ping A : T 7? A, that provides for each instance t
an annotation A(t), called the actual annotation of
t. The pair (T , A) is the training data.
Given the above input, a decision list L is an or-
dering (i.e. permutation) of the input rules. The list
L assigns an annotation to each instance t as defined
below. We consider each rule according to the order-
ing given by L until we find a rule Ri = (p, a) that
covers t and assign the annotation a to t. We denote
by L(t) the annotation assigned by L to t. Thus, L
defines a function L : I 7? A. We say that the list
L correctly annotates an instance t, if the annota-
tion assigned by L matches the actual annotation of
t, i.e., L(t) = A(t).
Given the above input, the MAXDL problem is to
to construct a decision list L such that the number
of instances correctly annotated by L, is maximized
i.e., we want to maximize |{t|A(t) = L(t)}| .
Notations:
LetR = (p, a) be a rule and t be an instance covered
by R. We say that a rule R correctly covers t, if
a = A(t). Similarly, R said to incorrectly cover t, if
a 6= A(t).
Let L be a decision list. We say that an instance
t is happy under L, if L correctly annotates t, i.e.,
L(t) = A(t). Let Happy(L) denote the set of in-
stances that are happy under L. Notice that the
MAXDL problem asks for a decision list L such that
|Happy(L)| is maximized.
3 NP-Hardness and Inapproximability
In this section, we prove that the MAXDL problem
is NP-Hard and also show that the problem cannot
even be approximated with any constant factor.
Theorem 1 The MAXDL problem is NP-Hard.
Proof: We give a reduction from the maximum inde-
pendent set problem (MAXIS ), a well-known NP-
Hard problem (Garey and Johnson, 1979). Recall
that an independent set in a graph refers to any sub-
set of vertices such that no two vertices from the set
share an edge. The MAXIS problem is to find the
largest independent set in a given undirected graph.
836
Let G = (V,E) be the input graph having vertex
set V = {v1, v2, . . . , vn}. We create an instance of
the MAXDL problem as follows. For each vertex
vi, we add an annotation ai toA, an instance ti to T
and a rule Ri to R. We declare ai to be the actual
annotation of ti. The predicted annotation of Ri is
set to ai. We define Ri to cover only the instance
ti and the instances corresponding to the neighbors
of vi. Meaning, Ri covers the instances in the set
{ti} ? {tj |(vi, vj) ? E}. This completes the reduc-
tion. We claim that given a decision list L having
k happy instances, we can construct an independent
set of size k and vice versa. The NP-Hardness of
MAXDL follows from the claim. We now proceed
to prove the claim.
Consider a decision list L. Notice that for any
instance ti, Ri is the only rule that correctly covers
ti. Take any two different instances ti and tj that are
happy under L. Without loss of generality, assume
that Ri appears before Rj in L. Now, if Ri covers
tj , tj would be unhappy under L. So, Ri does not
cover tj , which implies that vj is not a neighbor of
vi (i.e., (vi, vj) 6? E). Hence, the set I = {vi|ti ?
Happy(L)} is an independent set ofG. We note that
|I| = |Happy(L)|.
Conversely, consider an independent set I of G.
Let R(I) = {Ri|vi ? I}. Form a decision list L by
first arranging the rules from R(I) in any arbitrary
order followed by arranging the rest of rules in any
arbitray order. Notice that for any vertex vi ? I ,
Ri correctly covers ti and no other rule appearing
before Ri covers ti. Thus, ti is happy under L. It
follows that |Happy(L)| ? |I|. We have proved
that the MAXDL problem is NP-Hard. 2
In our NP-Hardness reduction, we had shown that
given a decision list L, we can construct an inde-
pendent set I such that |Happy(L)| = |I|, and
vice versa. This means that any approximation algo-
rithm for the MAXDL problem can be translated (by
combining it with our NP-Hardness reduction) into
an equally good approximation algorithm for the
MAXIS problem. Corollary 1 follows from (Zuck-
erman, 2006).
Corollary 1 If NP 6= P then for any  > 0,
the MAXDL problem cannot approximated within
a factor of n1?. In particular, the problem is not
approximable within any constant factor.
4 Heuristic Algorithms for the MAXDL
Problem
As the MAXDL problem is hard to approximate, we
turn to heuristic approaches. All our heuristics fall
into a natural greedy framework, described below.
4.1 A Greedy Framework
Our greedy framework for finding a decision list is
as follows. In each iteration we greedily choose a
rule and output it. For this purpose, we use some
scoring function for assigning scores to the rules and
choose the rule having the maximum score. Then
the chosen rule is deleted. The process is contin-
ued until all the rules are output. The above proce-
dure gives us a decision list. We present this general
framework in the Figure 1. The only unspecified part
in the above framework is the scoring function. In-
tuitively, the scoring function tries to measure the
goodness of a rule.
Given rule set R = {R1, R2, . . . , Rn}, instance set T and the actual annotations
A(?)
while R 6= null do
(re)compute scores for each rule in R, based on the scoring function
select the rule R that has the maximum score
remove R from the set R
remove from T all the instances covered by R
end while
Figure 1: A Greedy Framework for MAXDL prob-
lem
For a rule R and an instance t, we define follow-
ing notations for further use:
InstR = {t|R covers t}
Inst+R = {t|R correctly covers t}
Inst?R = {t|R incorrectly covers t}
Rulest = {R|t is covered by R}
Rules+t = {R|t is correctly covered by R}
Rules?t = {R|t is incorrectly covered by R}
4.2 Simple Precision Scoring
We now present our first candidate scoring function,
which we call simple precision scoring. A natural
score for a rule R is its precision: the fraction of in-
stances covered correctly by R among the instances
covered by it.
ScoreSP(R) =
|Inst+R|
|InstR|
=
|Inst+R|
|Inst+R| + |Inst
?
R |
4.3 Weighted Precision Scoring
Under ScoreSP, the score of a rule R is determined
only by the number of instances covered correctly
(|Inst+R|) and incorrectly (|Inst
?
R|). The nature of
instances are not taken into account. The variants of
ScoreSP proposed here assigns weights to instances,
based on which the scores are computed. We assign
weights to the instances based on how easy it is to
837
make them happy. For an instance t, define the hap-
piness quotient h(t) to be the fraction of rules that
correctly cover t among all the rules that cover t:
h(t) =
|Rules+t |
|Rulest|
.
The value h(t) is a measure of how easy it is to
make t happy; the larger the value of h(t), it is
easier to make t happy. For instance, if h(t) ? 1,
then |Rules+t | ? |Rulest|, meaning that almost any
rule that covers t will annotate it correctly. Thus,
it is easy to make t happy. On the other extreme,
if h(t) ? 0, then only a small fraction of the rules
that cover t annotate it correctly. Thus it is harder to
make t happy.
When we schedule a rule R, the instances in
Inst+R become happy and those in Inst
?
R become
unhappy. Our new scoring functions give credit to
R for each instance in Inst+R and award a penalty
R for each instance in Inst?R. The credit and the
penalty depend on the happiness quotient of the in-
stance. Informally, we want to give more credit R
for making hard instances happy; similarly, we want
to penalize R for making easy instances unhappy. A
natural way of accomplishing the above is to award
a credit of (1 ? h(t)) for each instance t ? Inst+R
and a penalty of h(t) for each instance t ? Inst?R.
Below, we formally define the above quantities as
gain and loss associated with R. For each rule R,
define
Gain(R) =
X
t?Inst+R
(1 ? h(t))
Loss(R) =
X
t?Inst?R
h(t)
Based on the above quantities, we define a natural
scoring function, called Weighted Precision:
ScoreWP(R) =
Gain(R)
Gain(R) + Loss(R)
4.4 Refined Weighted Precision Scoring
Our third scoring function is a refinement of the
weighted precision scoring. In ScoreWP, we com-
pute the happiness quotient of a token by taking in
account the number of rules that cover the token and
among those the ones that cover it correctly. The re-
finement is obtained by also considering the nature
of these rules. We define
hRP(t) =
P
R?Rules+t
precision(R)
P
R?Rulest
precision(R)
.
Gain, loss and the scoring function are defined sim-
ilar to that of ScoreWP:
GainRP(R) =
X
t?Inst+R
(1 ? hRP(t))
LossRP(R) =
X
t?Inst?R
hRP(t)
ScoreRP(R) =
GainRP(R)
GainRP(R) + LossRP(R)
5 Experiments
In this section, we describe rule-ordering experi-
ments on two real-world tasks. 1) named-entity
(NE) annotation that relied on hand-crafted rules for
MUC-7 dataset. 2) The second application we con-
sider is rule-based multi-class text classification. We
order rules learnt on benchmark text classification
datasets and observe consistent improvements by
merely re-ordering rules learnt by other rule learn-
ers.
5.1 Named Entity Annotation
Rule-based named entity annotation is a natural in-
stance of a decision list problem. Typically, rule-
based NE annotation systems (Cunningham et al,
2002) require rules to be manually written as well
as ordered manually. In this section, we show that
our proposed rule-ordering algorithms perform bet-
ter than the natural heuristic. Note that we do not
intend to build a rule-based decision list which per-
forms better than existing methods.
Setup: In our problem formulation of MAXDL ,
the set of instances T and mapping A from in-
stances to actual annotations, together form a train-
ing set. We have access to a set of documents
D = {d1, d2, . . . , dm}, that have all its named en-
tities annotated. To generate pairs (T , A) using the
set of documentsD, let Tdi represent the set of token
sequences that are annotated in a document di ? D.
Let A(t) be the actual annotation for an instance
t ? Tdi . Given a set of rules R and a document
collection D, each rule R ? R is applied to each
document di ? D. The set of token sequences (in-
stances here) which R covers (InstR), is included
in the set of instances T . For all instances t ? Tdi ,
we add a mapping t ? A(t) in A. For all other
instances t ? {InstR ? Tdi}, we have a mapping
t ? null included in A. We perform these addi-
tions for each document and rule pair. Finally, we
add a rule R? = (?, null) to the rule setR. The pat-
tern ? matches every instance t ?
?
R?R,R 6=R?
InstR
838
and associates a null annotation with the instance.
We only consider ?person name?, ?organization?
and ?place name? annotations. We use two different
rule sets containing about 30 rules each.
Table 1 presents accuracy achieved by our pro-
posed algorithms for the two chosen rule sets. In all
the cases our proposed methods perform better than
ScoreSP. The result also shows that our proposed
methods generalize better than simple ScoreSP.
Rule-sets Accuracy ScoreSP ScoreWP ScorePRWP
Rule-set 1
Trng 76.4 76.7 78.9
Test 50.0 52.7 54.5
Rule-set 2
Training 70.1 71.6 73.3
Test 49.1 51.4 52.0
Table 1: Accuracies (in %) for different algorithms
Dataset Acc-
(avg. # rules) -uracy JRip ScoreSP ScoreWP ScorePRWP
la2s (37)
Trng 86.16?0.39 86.02?0.16 86.68?0.16 87.04?0.17
Test 76.93?0.43 77.88?0.16 78.05?0.17 78.1?0.15
oh5 (28)
Trng 86.95?0.41 88.26?0.21 88.8?0.16 89.06?0.17
Test 76.43?0.58 79.08?0.37 79.37?0.38 79.24?0.35
tr45 (17)
Trng 91.88?0.38 92.61?0.18 92.84?0.23 93.3?0.21
Test 78.9?0.47 80.99?0.29 81.19?0.28 81.3?0.3
Table 2: Accuracies (in %) for RipRules
Data set Accu- Multi-class
-racy J48 NaiveBayes ScoreSP ScoreWP ScorePRWP
la2s (18)
Trng 94.75?0.39 85.78?0.29 94.64?0.14 95.9?0.03 95.99?0.01
Test 73.43?0.64 73.68?0.37 78.0?0.21 78.46?0.23 78.64?0.29
oh5 (30)
Trng 95.08?0.21 99.56?0.09 96.27?0.14 98.43?0.09 98.45?0.09
Test 78.08?0.76 74.16?0.77 82.72?0.25 83.16?0.24 83.98?0.26
tr45 (30)
Trng 97.91?0.11 87.16?1.18 97.71?0.14 98.93?0.06 98.98?0.05
Test 85.25?1.02 69.91?1.33 84.06?0.44 86.1?0.39 86.42?0.41
Table 3: Accuracies (in %) for BinRules
5.2 Ordering classification rules
In this section, we show another application of our
algorithms in ordering classification rules. The
antecedent of a classification rule is a series of tests
on the input and the consequent gives the class label.
Since different rules can assign conflicting classes,
rule-ordering becomes important in choosing a
correct class. These rules come from a variety of
sources and could be hand-crafted or machine-
learnt. Machine learnt rules could be generated
using association mining (Agrawal and Srikant,
1994), inductive logic programming (Lavrac and
Dzeroski, 1994), or Ripper (Cohen, 1995). Even
classifiers can be seen as rules, e.g., linear discrim-
inants are rules that assign one of two classes to
exclusive partitions of input space. Due to domain
specificity and unavailability of hand-tuned rules
we illustrate rule-ordering on: (1) rules induced
by Ripper (Cohen, 1995) (RipRules), and (2) a
heterogeneous set of rules obtained from naive
Bayes and decision trees (BinRules).
Setup: We used benchmark text classification
datasets (Forman, 2003) available from the Weka
site1. These multi-class datasets represent 229
binary text classification problems, with positive
class size avg. 149, and class skews avg. 1 : 31.
These are subsets of various benchmark tasks like
Reuters, TREC, and Ohsumed (oh). We present
only a subset of the results (with only ScoreWP
and ScorePRWP) here for lack of space. We report
experiments over 10 random 50 : 50 train-test splits.
The training split is used to learn rules and their
ordering. The orderings are evaluated on the test
split and average train and test accuracies reported.
Results:
The RipRules setting: We induce rules (from
the train split) using the JRip implementation in
Weka2 (Witten and Frank, 2005). We apply our vari-
ous algorithms to merely re-order the rules output by
JRip. In Table 2 we present results comparing JRip
output with their re-ordered versions obtained from
ScoreSP, ScoreWP and ScorePRWP. Along with the
name of each data set, the average number of rules
induced from the training splits are also mentioned
in parentheses. The best accuracies are marked in
bold. We observe that the re-ordered rule-sets us-
ing ScoreWP and ScorePRWP perform better than both
baselines ScoreSP and JRip with lower deviations.
The BinRules setting: For an n-class problem we
obtain classification rules by training a heteroge-
neous collection of one-vs-rest binary classifiers.
Each classifier is either a naive Bayes or a decision
tree classifier trained to discriminate one class from
the rest (2n classifiers). We treat each binary clas-
sifier as a classification rule that covers an instance
if the binary classifier assigns its associated class to
that instance. In addition, corresponding to every
class, we introduce a default classification rule that
assigns the associated class to any instance it en-
1http://www.cs.waikato.ac.nz/ml/weka/
index_datasets.html
2http://www.cs.waikato.ac.nz/ml/weka/
839
counters. This gives us 3n rules. We used the naive
Bayes and J48 implementations in Weka to obtain
binary rules, ordered using ScoreWP and ScorePRWP,
and compared with ScoreSP baseline in Table 3.
We also show individual classifier accuracy, and the
best are marked bold. It is encouraging to note that
all our rule-ordering techniques always outperform
their multi-class counterparts on the test data set. We
outperform the baseline ScoreSP method on all data
sets with lower deviations.
6 Conclusions
In this paper, we formulated and studied the
MAXDL problem. We proved the hardness of the
problem. We then proposed some heuristic ap-
proaches and established the usefulness of our meth-
ods experimentally. We observed improved perfor-
mance in classification task by merely reordering the
rules obtained by an existing decision list learning
algorithm. In future work, we would like to ex-
plore how rule-ordering formulation can be applied
to ordering heterogeneous classifiers in the ensem-
ble learning setting.
References
Rakesh Agrawal and Ramakrishnan Srikant. 1994. Fast
algorithms for mining association rules. In VLDB,
pages 487?499.
D. Appelt, J. Hobbs, J. Bear, D. Israel, M. Kameyama,
D. Martin, K. Myers, and M. Tyson. 1995. Sri inter-
national fastus system: Muc-6 test results and analysis.
In MUC6 ?95: Proc. of the 6th conf. on Message un-
derstanding.
A. Borthwick. 1999. A Maximum Entropy Approach to
Named Entity Recognition. Ph.D. thesis, New York
University.
Eric Brill. 1992. A simple rule-based part-of-speech tag-
ger. In Proceedings of ANLP.
M. E. Califf and R. J. Mooney. 1998. Relational learning
of pattern-match rules for information extraction. In
Working Notes of AAAI Spring Symposium on Apply-
ing Machine Learning to Discourse Processing.
William W. Cohen. 1995. Fast effective rule induction.
In ICML, pages 115?123.
H. Cunningham, D. Maynard, K. Bontcheva, and
V. Tablan. 2002. GATE: A framework and graphi-
cal development environment for robust NLP tools and
applications. In Proceedings of ACL.
George Forman. 2003. An extensive empirical study
of feature selection metrics for text classification.
JMLR Special Issue on Variable and Feature Selection,
3:1289?1305.
M. R. Garey and D. S. Johnson. 1979. Computers and
Intractability. Freeman.
R. Grishman. 1997. Information extraction: Techniques
and challenges. In SCIE ?97: Intnl. summer School on
Information Extraction.
Hui Han, Eren Manavoglu, C. Lee Giles, and Hongyuan
Zha. 2003. Rule-based word clustering for text classi-
fication. In SIGIR, pages 445?446. ACM Press.
Furnkranz J. and Widmer G. 1994. Incremental re-
duced error pruning. In Machine Learning: Proc. of
the Eleventh International Conference.
Nada Lavrac and Saso Dzeroski. 1994. Inductive
Logic Programming:Techniques and Applications. El-
lis Horwood, New York.
David D. Lewis, Rayid Ghani, Dunja Mladenic, Isabelle
Moulinier, and Mark Wasson. 2003. Workshop on
operational text classification. In conjunction with
SIGKDD.
Hang Li and Kenji Yamanishi. 1999. Text classification
using ESC-based stochastic decision lists. In CIKM.
D. Maynard, V. Tablan, C. Ursu, H. Cunningham, and
Y. Wilks. 2001. Named entity recognition from di-
verse text types. In RANLP.
Ellen Riloff and Michael Thelen. 2000. A rule-based
question answering system for reading comprehension
tests. In ANLP/NAACL 2000 Workshop on Reading
comprehension tests as evaluation for computer-based
language understanding sytems.
Ronald L. Rivest. 1987. Learning decision lists. Ma-
chine Learning, 2(3):229?246.
Minoru Sasaki and Kenji Kita. 1998. Rule-based text
categorization using hierarchical categories. In Pro-
ceedings of SMC-98, IEEE International Conference
on Systems, Man, and Cybernetics, pages 2827?2830.
Sundar Varadarajan, Kas Kasravi, and Ronen Feldman.
2002. Text-mining: Application development chal-
lenges. In Proceedings of the Twenty-second SGAI In-
ternational Conference on Knowledge Based Systems
and Applied Artificial Intelligence.
Ian H.Witten and Eibe Frank. 2005. Data Mining: Prac-
tical Machine Learning Tools and Techniques. Mor-
gan Kaufmann.
D. Zuckerman. 2006. Linear degree extractors and the
inapproximability of max-clique and chromatic num-
ber. In STOC.
840
