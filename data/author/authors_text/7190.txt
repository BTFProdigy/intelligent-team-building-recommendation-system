Extracting Word Sequence Correspondences
with Support Vector Machines
Kengo SATO and Hiroaki SAITO
Department of Information and Computer Science
Keio University
3?14?1, Hiyoshi, Kohoku, Yokohama 223?8522, Japan
{satoken,hxs}@nak.ics.keio.ac.jp
Abstract
This paper proposes a learning and extracting
method of word sequence correspondences from
non-aligned parallel corpora with Support Vector
Machines, which have high ability of the generaliza-
tion, rarely cause over-fit for training samples and
can learn dependencies of features by using a kernel
function. Our method uses features for the trans-
lation model which use the translation dictionary,
the number of words, part-of-speech, constituent
words and neighbor words. Experiment results in
which Japanese and English parallel corpora are
used archived 81.1 % precision rate and 69.0 % re-
call rate of the extracted word sequence correspon-
dences. This demonstrates that our method could
reduce the cost for making translation dictionaries.
1 Introduction
Translation dictionaries used in multilingual natu-
ral language processing such as machine transla-
tion have been made manually, but a great deal of
labor is required for this work and it is difficult
to keep the description of the dictionaries consis-
tent. Therefore, researches of extracting transla-
tion pairs from parallel corpora automatically be-
come active recently (Gale and Church, 1991; Kaji
and Aizono, 1996; Tanaka and Iwasaki, 1996; Kita-
mura and Matsumoto, 1996; Fung, 1997; Melamed,
1997; Sato and Nakanishi, 1998).
This paper proposes a learning and extract-
ing method of bilingual word sequence correspon-
dences from non-aligned parallel corpora with Sup-
port Vector Machines (SVMs) (Vapnik, 1999).
SVMs are ones of large margin classifiers (Smola
et al, 2000) which are based on the strategy where
margins between separating boundary and vectors
of which elements express the features of train-
ing samples is maximized. Therefore, SVMs have
higer ability of the generalization than other learn-
ing models such as the decision trees and rarely
cause over-fit for training samples. In addition, by
using kernel functions, they can learn non-linear
separating boundary and dependencies between the
features. Therefore, SVMs have been recently used
for the natural language processing such as text
categorization (Joachims, 1998; Taira and Haruno,
1999), chunk identification (Kudo and Matsumoto,
2000b), dependency structure analysis (Kudo and
Matsumoto, 2000a).
The method proposed in this paper does not re-
quire aligned parallel corpora which do not exist too
many at present. Therefore, without limiting appli-
cable domains, word sequence correspondences can
been extracted.
2 Support Vector Machines
SVMs are binary classifiers which linearly separate
d dimension vectors to two classes. Each vector rep-
resents the sample which has d features. It is distin-
guished whether given sample ~x = (x1, x2, . . . , xd)
belongs to X1 or X2 by equation (1) :
f (~x) = sign(g(~x)) =
{
1
(~x ? X1
)
?1 (~x ? X2
) (1)
where g(~x) is the hyperplain which separates two
classes in which ~w and b are decided by optimiza-
tion.
g(~x) = ~w ? ~x + b (2)
Let supervise signals for the training samples be
expressed as
yi =
{
1
(~xi ? X1
)
?1 (~xi ? X2
)
where X1 is a set of positive samples and X2 is a set
of negative samples.
If the training samples can be separated linearly,
there could exist two or more pairs of ~w and b that
PSfrag replacements X1
X22/||~w||
~w ? ~x + b = 0
~w ? ~x + b = 1
~w ? ~x + b = ?1
Figure 1: A separating hyperplain
satisfy equation (1). Therefore, give the following
constraints :
?i, yi(~w ? ~xi + b) ? 1 ? 0 (3)
Figure 1 shows that the hyperplain which sepa-
rates the samples. In this figure, solid line shows
separating hyperplain ~w ? ~x + b = 0 and two dotted
lines show hyperplains expressed by ~w ? ~x+ b = ?1.
The constraints (3) mean that any vectors must not
exist inside two dotted lines. The vectors on dotted
lines are called support vectors and the distance be-
tween dotted lines is called a margin, which equals
to 2/||~w||.
The learning algorithm for SVMs could optimize
~w and b which maximize the margin 2/||~w|| or min-
imize ||~w||2/2 subject to constraints (3). According
to Lagrange?s theory, the optimization problem is
transformed to minimizing the Lagrangian L :
L = 1
2
||~w||2 +
n
?
i=1
?i
(
yi(~w ? ~xi + b ? 1)) (4)
where ?i ? 0 (i = 1, . . . , n) are the Lagrange mul-
tipliers. By differentiating with respect to ~w and b,
the following relations are obtained,
?L
?~w = ~w ?
n
?
i=1
?iyi~x = 0 (5)
?L
?b =
n
?
i=1
?iyi = 0 (6)
and substituting equations (5) (6) into equation (4)
to obtain
D = ?1
2
n
?
i=1
n
?
j=1
?i? jyiy j~xi ? ~x j +
n
?
i=1
?i (7)
Consequently, the optimization problem is trans-
formed to maximizing the object function D subject
to
?n
i=1 ?iyi = 0 and ?i ? 0. For the optimal pa-
rameters ?? = arg max? D, each training sample ~xi
where ??i > 0 is corresponding to support vector.
~w can be obtained from equation (5) and b can be
obtained from
b = yi ? ~w ? ~xi
where ~xi is an arbitrary support vector. From equa-
tion (2) (5), the optimal hyperplain can be expressed
as the following equation with optimal parameters
?? :
g(~x) =
n
?
i=1
??i yi~xi ? ~x + b (8)
The training samples could be allowed in some
degree to enter the inside of the margin by changing
equation (3) to :
?i, yi(~w ? ~xi + b) ? 1 + ?i ? 0 (9)
where ?i ? 0 are called slack variables. At this time,
the maximal margin problem is enhanced as mini-
mizing ||~w||2/2 + C?ni=1 ?i, where C expresses the
weight of errors. As a result, the problem is to max-
imize the object function D subject to ?ni=1 ?iyi = 0
and 0 ? ?i ? C.
For the training samples which cannot be sepa-
rated linearly, they might be separated linearly in
higher dimension by mapping them using a non-
linear function:
? : Rd 7? Rd?
A linear separating in Rd? for ?(~x) is same as a non-
linear separating in Rd for ~x. Let ? satisfy
K(~x, ~x?) = ?(~x) ? ?(~x?) (10)
where K(~x, ~x?) is called kernel function. As a result,
the object function is rewritten to
D = ?1
2
n
?
i=1
n
?
j=1
?i? jyiy jK(~xi, ~x j) +
n
?
i=1
?i (11)
and the optimal hyperplain is rewritten to
g(~x) =
n
?
i=1
??i yiK(~xi, ~x) + b (12)
Note that ? does not appear in equation (11) (12).
Therefore, we need not calculate ? in higher dimen-
sion.
The well-known kernel functions are the polyno-
mial kernel function (13) and the Gaussian kernel
function (14).
K(~x, ~x?) = (~x ? ~x? + 1)p (13)
K(~x, ~x?) = exp
?
?
?
?
?
?
?||~x ?
~x?||2
2?2
?
?
?
?
?
?
(14)
A non-linear separating using one of these kernel
functions is corresponding to separating with con-
sideration of the dependencies between the features
in Rd.
3 Extracting Word Sequence
Correspondences with SVMs
3.1 Outline
The method proposed in this paper can obtain word
sequence correspondences (translation pairs) in the
parallel corpora which include Japanese and En-
glish sentences. It consists of the following three
steps:
1. Make training samples which include positive
samples as translation pairs and negative sam-
ples as non-translation pairs from the train-
ing corpora manually, and learn a translation
model from these with SVMs.
2. Make a set of candidates of translation pairs
which are pairs of phrases obtained by pars-
ing both Japanese sentences and English sen-
tences.
3. Extract translation pairs from the candidates by
inputting them to the translation model made in
step 1.
3.2 Features for the Translation Model
To apply SVMs for extracting translation pairs, the
candidates of the translation pairs must be converted
into feature vectors. In our method, they are com-
posed of the following features:
1. Features which use an existing translation dic-
tionary.
(a) Bilingual word pairs in the translation
dictionary which are included in the can-
didates of the translation pairs.
(b) Bilingual word pairs in the translation
dictionary which are co-occurred in the
context in which the candidates appear.
2. Features which use the number of words.
(a) The number of words in Japanese phrases.
(b) The number of words in English phrases.
3. Features which use the part-of-speech.
(a) The ratios of appearance of noun, verb,
adjective and adverb in Japanese phrases.
(b) The ratios of appearance of noun, verb,
adjective and adverb in English phrases.
4. Features which use constituent words.
(a) Constituent words in Japanese phrases.
(b) Constituent words in English phrases.
5. Features which use neighbor words.
(a) Neighbor words which appear in Japanese
phrases just before or after.
(b) Neighbor words which appear in English
phrases just before or after.
Two types of the features which use an existing
translation dictionary are used because the improve-
ment of accuracy can be expected by effectively us-
ing existing knowledge in the features. For features
(1a), words included in a candidate of the trans-
lation pair are looked up with the translation dic-
tionary and the bilingual word pairs in the candi-
date become features. They are based on the idea
that a translation pair would include many bilingual
word pairs. Each bilingual word pair included in
the dictionary is allocated to the dimension of the
feature vectors. If a bilingual word pair appears in
the candidate of translation pair, the value of the
corresponding dimension of the vector is set to 1,
and otherwise it is set to 0. For features (1b), all
pairs of words which co-occurred with a candidate
of the translation pair are looked up with the trans-
lation dictionary and the bilingual word pairs in the
dictionary become features. They are based on the
idea that the context of the words which appear in
neighborhood looks like each other for the trans-
lation pairs although expressed in the two different
languages (Kaji and Aizono, 1996). The candidates
are converted into the feature vectors just like (1a).
Features (2a) (2b) are based on the idea that there
is a correlation in the number of constituent words
of the phrases of both languages in the translation
pair. The number of constituent words of each lan-
guage is used for the feature vector.
Features (3a) (3b) are based on the idea that there
is a correlation in the ratio of content words (noun,
verb, adjective and adverb) which appear in the
phrases of both languages in a translation pair. The
ratios of the numbers of noun, verb, adjective and
adverb to the number of words of the phrases of
each language are used for the feature vector.
For features (4a) (4b), each content word (noun,
verb, adjective and adverb) is allocated to the di-
mension of the feature vectors for each language. If
a word appears in the candidate of translation pair,
the value of the corresponding dimension of the vec-
tor is set to 1, and otherwise it is set to 0.
For features (5a) (5b), each content words (noun,
verb, adjective and adverb) is allocated to the di-
mension of the feature vectors for each language. If
a word appears in the candidate of translation pair
just before or after, the value of the corresponding
dimension of the vector is set to 1, and otherwise it
is set to 0.
3.3 Learning the Translation Model
Training samples which include positive samples as
the translation pairs and negative samples as the
non-translation pairs are made from the training
corpora manually, and are converted into the fea-
ture vectors by the method described in section 3.2.
For supervise signals yi, each positive sample is as-
signed to +1 and each negative sample is assigned
to ?1. The translation model is learned from them
by SVMs described in section 2. As a result, the
optimal parameters ?? for SVMs are obtained.
3.4 Making the Candidate of the Translation
Pairs
A set of candidates of translation pairs is made from
the combinations of phrases which are obtained by
parsing both Japanese and English sentences. How
to make the combinations does not require sen-
tence alignments between both languages. Because
the set grows too big for all the combinations, the
phrases used for the combinations are limited in up-
per bound of the number of constituent words and
only noun phrases and verb phrases.
3.5 Extracting the Translation Pairs
The candidates of the translation pairs are converted
into the feature vectors with the method described
in section 3.2. By inputting them to equation (8)
with the optimal parameters ?? obtained in section
3.3, +1 or ?1 could be obtained as the output for
each vector. If the output is +1, the candidate corre-
sponding to the input vector is the translation pair,
otherwise it is not the translation pair.
4 Experiments
To confirm the effectiveness of the method de-
scribed in section 3, we did the experiments where
the English Business Letter Example Collection
published from Nihon Keizai Shimbun Inc. are used
as parallel corpora, which include Japanese and En-
glish sentences which are examples of business let-
ters, and are marked up at translation pairs.
As both training and test corpora, 1,000 sentences
were used. The translation pairs which are already
marked up in the corpora were corrected to the form
described in section 3.4 to be used as the positive
samples. Japanese sentences were parsed by KNP 1
and English sentences were parsed by Apple Pie
Parser 2. The negative samples of the same number
as the positive samples were randomly chosen from
combinations of phrases which were made by pars-
ing and of which the numbers of constituent words
were below 8 words. As a result, 2,000 samples
(1,000 positives and 1,000 negatives) for both train-
ing and test were prepared.
The obtained samples must be converted into the
feature vectors by the method described in section
3.2. For features (1a) (1b), 94,511 bilingual word
pairs included in EDICT 3 were prepared. For fea-
tures (4a) (4b) (5a) (5b), 1,009 Japanese words and
890 English words which appeared in the training
corpora above 3 times were used. Therefore, the
number of dimensions for the feature vectors was
94, 511?2+1?2+4?2+1, 009+890+1, 009+890 =
192, 830.
S V Mlight 4 was used for the learner and the clas-
sifier of SVMs. For the kernel function, the squared
polynomial kernel (p = 2 in equation (13)) was
used, and the error weight C was set to 0.01.
The translation model was learned by the train-
ing samples and the translation pairs were extracted
from the test samples by the method described in
section 3.
1http://www-lab25.kuee.kyoto-u.ac.jp/
nl-resource/knp.html
2http://www.cs.nyu.edu/cs/projects/proteus/
app/
3http://www.csse.monash.edu.au/?jwb/edict.
html
4http://svmlight.joachims.org/
 0
 20
 40
 60
 80
 100
 0  2  4  6  8  10  12  14  16  18  20
ra
te
 (%
)
the number of the training samples (x1.0e02)
Precision
Recall
Figure 2: Transition in the precision rate and the
recall rate when the number of the training samples
are increased
Table 1 shows the precision rate and the recall
rate of the extracted translation pairs, and table 2
shows examples of the extracted translation pairs.
Table 1: Precision and recall rate
Outputs Corrects Precision Recall
851 690 81.1 % 69.0 %
5 Discussion
Figure 2 shows the transition in the precision rate
and the recall rate when the number of the training
samples are increased from 100 to 2,000 by every
100 samples. The recall rate rose according to the
number of the training samples, and reaching the
level-off in the precision rate since 1,300. There-
fore, it suggests that the recall rate can be improved
without lowering the precision rate too much by in-
creasing the number of the training samples.
Figure 3 shows that the transition in the precision
rate and the recall rate when the number of the bilin-
gual word pairs in the translation dictionary are in-
creased from 0 to 90,000 by every 5,000 pairs. The
precision rate rose almost linearly according to the
number of the pairs, and reaching the level-off in the
recall rate since 30,000. Therefore, it suggests that
the precision rate can be improved without lowering
the recall rate too much by increasing the number of
the bilingual word pairs in the translation dictionary.
Table 3 shows the precision rate and the recall
rate when each kind of features described in section
3.2 was removed. The values in parentheses in the
columns of the precision rate and the recall rate are
 0
 20
 40
 60
 80
 100
 0  10  20  30  40  50  60  70  80  90  100
ra
te
 (%
)
the size of dictionary (x1.0e03)
Precision
Recall
Figure 3: Transition in the precision rate and the
recall rate when the number of the bilingual word
pairs in the translation dictionary are increased
differences with the values when all the features are
used. The fall of the precision rate when the features
which use the translation dictionary (1a) (1b) were
removed and the fall of the recall rate when the fea-
tures which use the number of words (2a) (2b) were
removed were especially large.
It is clear that feature (1a) (1b) could restrict
the translation model most strongly in all features.
Therefore, if feature (1a) (1b) were removed, it
causes a good translation model not to be able to
be learned only by the features of the remainder
because of the weak constraints, wrong outputs in-
creased, and the precision rate has fallen.
Only features (2a) (2b) surely appear in all sam-
ples although some other features appeared in the
training samples may not appear in the test samples.
So, in the test samples, the importance of features
(2a) (2b) are increased on the coverage of the sam-
ples relatively. Therefore, if features (2a) (2b) were
removed, it causes the recall rate to fall because of
the low coverage of the samples.
6 Related Works
With difference from our method, there have been
researches which are based on the assumption of
the sentence alignments for parallel corpora (Gale
and Church, 1991; Kitamura and Matsumoto, 1996;
Melamed, 1997). (Gale and Church, 1991) has used
the ?2 statistics as the correspondence level of the
word pairs and has showed that it was more effective
than the mutual information. (Kitamura and Mat-
sumoto, 1996) has used the Dice coefficient (Kay
and Ro?schesen, 1993) which was weighted by the
logarithm of the frequency of the word pair as the
Table 2: Examples of translation pairs extracted by our method
Japanese English
 	

chairman of a special program committee


officially retired as
 

	Preferential Presentation of Japanese Near-Synonyms
Using Definition Statements
Hiroyuki OKAMOTO Kengo SATO Hiroaki SAITO
Department of Information and Computer Science
Keio University
3?14?1 Hiyoshi, Kouhoku-ku, Yokohama 223?8522, Japan
Tel: (+81?45)563?1151 (ex 43250), Fax: (+81?45)566?1747
{motch, satoken, hxs}@nak.ics.keio.ac.jp
Abstract
This paper proposes a new method of
ranking near-synonyms ordered by their
suitability of nuances in a particular con-
text. Our method distincts near-synonyms
by semantic features extracted from their
definition statements in an ordinary dictio-
nary, and ranks them by the types of fea-
tures and a particular context. Our method
is an initial step to achieve a semantic
paraphrase system for authoring support.
1 Introduction
Most researches on automatic paraphrasing aim ei-
ther at document modification for a wide range
of NLP applications (Shirai et al, 1998; Tomuro
and Lytinen, 2001), at reading comprehension sup-
port (Inui and Yamamoto, 2001), or at transforma-
tion based on external constraints (Dras, 1998). On
the other hand, authoring / revision support is known
as another type of paraphrasing which targets at texts
in preparation. However, there are not so many re-
searches of such paraphrasing.
Paraphrase systems which aim at revising docu-
ments can be classified into three types:
? Syntactic suitability
This type of systems points out spelling or
grammatical mistakes and corrects them, such
as a grammar checker (Heidorn, 2000).
? Readability
Similar to reading comprehension support,
this type of paraphrase systems aims to
simplify difficult / complicated sentences or
phrases (Suganuma et al, 1990; Inui and
Okada, 2000).
? Semantic suitability
To reflect authors? intentions precisely, these
paraphrase systems replace words, which are
semantically ambiguous or inadequate, to ones
which are suitable for their contexts.
Almost all known authoring / revision support sys-
tems aim at syntactic suitability or readability, while
researches of the third type of paraphrasing, which
handle semantics, are very rare.
Let us consider a kind of authoring support sys-
tem, which first presents near-synonyms (words
counted among the same semantic category) of a
target word in an input sentence. Then, based on
user?s choise, the system paraphrases the target word
to the selected one with keeping syntactic and se-
mantic consistency through paraphrasing. Espe-
cially for semantic consistency, it is important to
express semantic differences between paraphrased
word pairs clearly. If fine-grained meanings of all
near-synonyms (not only a paraphrased pair) can be
extracted at a time, the system would be able to
present semantically suitable near-synonyms. Based
on this idea, this paper proposes a new method of
ranking Japanese near-synonyms ordered by their
suitability of nuances in a particular context. First,
this paper describes an overview of the method in
Section 2. Next, Section 3 shows the classification
of fine-grained meanings of a word and a method
of extracting those fine-grained meanings from a
definition statement of the word, to identify se-
mantic differences between near-synonyms. Then,
Section 4 presents our method of ranking near-
synonyms using fine-grained meanings described in
Section 3. Finally, this paper shows conclusion and
further works in Section 5.
2 Overview of our method of preferential
presentation
Though some word processing applications (e.g.
Microsoft Word) have a function of showing near-
synonyms of a word, it is not easy to choose the
most adequate word from the near-synonyms be-
cause they are not ordered by their semantic similar-
ity or suitability. Also, a simple replacement from
a word to one of its near-synonyms is very danger-
ous, because there are some differences between the
words in their modification rules and in their fine-
grained meanings.
Against these semantic problems, we propose a
new method of presenting near-synonyms ordered
by their semantic suitability in a particular context.
When a target word is given from an input sentence,
first our method obtains all near-synonyms of the
target word from an existing thesaurus, and differen-
tiates them semantically by features extracted from
their definition statements. Next, our method ranks
those near-synonyms by relations between the type
of features and the context of the input sentence. Fi-
nally, the ranking of near-synonyms are presented
with information of variation in the original sen-
tence for each near-synonym. This process enables
the user to choose a word suitable for the input con-
text, and helps prevention of semantic variation (or
redundancy / loss) in paraphrasing.
3 Semantic differentiation between
near-synonyms
As the first step to realize the preferential suggestion
of near-synonyms, we identify fine-grained word
senses of near-synonyms in order to differentiate
them semantically, by using sentences written in an
ordinal dictionary (definition statements) and word
co-occurrence information extracted from large cor-
pora.
3.1 Fine-grained word senses
There are some researches which deal with fine-
grained word senses for a lexical choice in language
generation (DiMarco et al, 1993; Edmonds, 1999).
Edmonds roughly classified semantic differences
between near-synonyms into four categories: deno-
tational (difference in nuances of near-synonyms),
expressive (in attitudes or emotions), stylistic (in
formalities or dialects), and collocational (as idioms
or in co-occurrence restrictions). In addition, he
classified them into 35 types and proposed an on-
tology for describing their differences formally.
Edmonds implemented I-Saurus, a prototype im-
plementation of this ontology, to achieve a lexical
choice in machine translation and denoted the effec-
tiveness of differences between near-synonyms for
a lexical choice. Though, there is a crucial prob-
lem that he did not mention how to obtain those dif-
ferences automatically. Against this problem, our
method extracts such differences by using definition
statements for each near-synonym. Although (Fu-
jita and Inui, 2001) has already focused on using
definition statements in order to determine a pair of
near-synonyms whether one can be paraphrased to
the other or not, it was only a kind of matching be-
tween two statements and did not identify individ-
ual features in each statement. Therefore, this paper
defines three types of semantic features as follows,
which can be extracted from definition statements:
? Core meaning indicates the basic sense of a
word. All near-synonyms in a category must
always have the same core meaning, such as
the name of the category which they belong to.
? Denotation, which can be paraphrased to ?nu-
ance?, is defined as ?the thing that is actually
described by a word rather than the feelings or
ideas it suggests? in Longman web dictionary1.
In this paper, this feature is defined as a mean-
ing included in a word, which partially qualify
the core meaning. It is similar to a denotational
constraint in (Edmonds, 1999).
? Lexical restriction of a word is a constraint on
the range of co-occurrence of the word. This
feature is almost the same as a collocational
constraint in (Edmonds, 1999).
An example of these features is shown in Figure 1.
We divide our method into two steps to extract
each feature from a definition statement. First, we
extract a word defined as a core meaning and all
other content words (in Section 3.2). Then, the ex-
tracted words except the core meaning are classified
into denotations or lexical restrictions by using each
co-occurrence information obtained from large cor-
pora (in Section 3.3).
1http://www.longmanwebdict.com/
Word:
????
?? saikon
(rebuilding of shrines / temples)
Definition statement:
???????????????
jinja (shrine) bukkaku (temple) wo
(OBJ) tate (to build) naosu (to repair)
koto (matter)
(To build a shrine or a temple to repair.
Core meaning: ?? tate (build)
Denotation: ?? naosu (repair)
Lexical restriction: ?? jinja (shrine)
?? bukkaku (temple)
Figure 1: Features in a definition statement
3.2 Extraction of fine-grained word senses
In this paper, we assume that a definition statement
of a word (hereafter an entry) in a dictionary con-
sists of four types of materials as follows:
? Core meaning is a word which exactly de-
scribes a particular semantic category which
the entry belongs to.
? Fine-grained meaning semantically differen-
ciates the entry from its near-synonyms. It
is defined as a core meaning of some content
words in the definition statement. Fine-grained
meaning can be divided into ?denotation? or
?lexical restriction?.
? Stop word indicates a content word which
commonly and frequently appears in any def-
inition statement.
? Others include function words and symbols.
According to this assumption, the ?core mean-
ing? and ?fine-grained meanings? of an entry are
extracted from a definition statement, using of
Kadokawa thesaurus (Ohno and Hamanishi, 1981)2.
A procedure of this method is given as follows:
Step 1. For each morpheme in the morpheme dic-
tionary of ChaSen (Matsumoto et al, 2002),
a Japanese morphological analyzer, add a
label of a semantic category in Kadokawa
Thesaurus, which the morpheme belongs to.
Step 2. Assign semantic labels to each morpheme in
a definition statement of an entry e, by ap-
plying ChaSen to the statement.
2Kadokawa thesaurus semantically categorizes 57,130 en-
tries into 2,924 categories and each entry has a definition state-
ment.
Step 3. Give a word c as a ?provisional? core mean-
ing if c is classified into the same semantic
category as e.
Step 4. Extract all semantic labels, which are as-
signed to all content words except c, as fine-
grained meanings.
Step 5. Recursively apply Step 2?4 to the definition
statement of c until no core meaning is ex-
tracted from the definition statement.
Step 6. Define c extracted at last as the ?true? core
meaning of e.
According to this procedure, some fine-grained
meanings could be extracted from stop words. Thus,
we give a semantic weight to each fine-grained
meaning, by the reciprocal of its occurrence prob-
ability in all definition statements. These weights
can distinct true fine-grained meanings from ones
extracted from stop words.
A result of this method is shown in Figure 2,
where the bold numbers show their categories and
the italics show their weights.
Word: [394]
????
?? saikon
(rebuilding of shrines / temples)
Core meaning:
[394]??? tateru (to build)
Fine-grained meaning:
[727a]?? jinja (shrine: 5687)
[940c]?? bukkaku (temple: 6184)
[277b]?? naosu (to alter: 1441)
[277c]?? naosu (to recover: 2359)
[392]?? naosu (to repair: 7494)
[417a]?? naosu (to get right: 3703)
[811]?? koto (matter: 30)
Figure 2: Example of extraction of core-meaning
and fine-grained meanings
3.3 Classification of fine-grained word senses
After obtaining features in Section 3.2, our method
classifies fine-grained meanings into denotations
and lexical restrictions, according to the following
heuristics:
? If a word w includes a denotation d, w seldom
co-occurs with any word whose core meaning
is d. For example, one possible paraphrase of a
sentence
He is extremely angry.
is
He is enraged.
where the word extremely is deleted, because
enraged has a denotation ?extremely? if angry
is defined as the core meaning of enraged.
? If w involves a lexical restriction l, w often co-
occurs with words whose core meaning is l. For
example, ?a rancid butter? is more appropriate
than ?a rotten butter?, because rancid has a lex-
ical restriction ?oily or fatty food?, while rotten
does not.
Based on these heuristics, our method classifies fine-
grained meanings of an entry as follows:
Step 1. Assign semantic labels to all words in cor-
pora (consisting of 1.93 million sentences,
including newspapers 3 and novels 4).
Step 2. Obtain co-occurrence frequencies of all
pairs between a word and a semantic label
of a neighbor word from the corpora.
Step 3. Delete the entry e from the thesaurus if e
does not appear in the corpora at all.
Step 4. For each fine-grained meaning f of e which
belongs to a semantic category C, compute
co-occurrence probabilities
P (f, C) =
?
i nsif?
i Nsi
(1)
P (f, e) = nefNe (2)
where si is a near-synonym of e, nab is the
co-occurrence frequency between a word a
and a label b, and Na is the frequency of a.
Step 5. Remove f if P (f, C) = 0.
Step 6. Define f as a denotation if P (f, e) = 0. The
weight of the denotation is the product of
P (f, C) and the weight of f .
Step 7. Define f as a lexical restriction if P (f, e) 6=
0. The weight of the lexical restriction is the
product of P (f,e)P (f,C) and the weight of f .
Figure 3 shows an example of classification about
the word ?saikon (??)?. In Figure 3, under-lined
features are the results of word sense disambiguation
and elimination of stop words.
3Mainichi Shimbun CD-ROM
http://cl.aist-nara.ac.jp/lab/resource/
cdrom/Mainichi/MS.html
4Aozora Bunko http://www.aozora.gr.jp/
Word: [394]
????
?? saikon
(rebuilding of shrines / temples)
Denotation:
[277b]?? naosu (to alter: 1.45)
[392]?? naosu (to repair: 4.19)
Lexical restriction:
[727a]?? jinja (shrine: 8518)
[940c]?? bukkaku (temple: 5859)
[277c]?? naosu (to recover: 3504)
[417a]?? naosu (to get right: 2135)
[811]?? koto (matter: 15)
Figure 3: Classification example of fine-grained
meanings
3.4 Evaluation and discussions
We applied these procedures to all 57,130 entries in
Kadokawa thesaurus (2,924 categories). As a result,
36,434 entries, which consist of one core meaning
and 0 or more fine-grained meanings, and 1,857 en-
tries, which has no core meaning but is refered as a
core meaning to other entries, were obtained. One
entry has 4.7 denotations and 5.1 lexical restrictions
on average.
To evaluate our methods, we compared the results
of automatic extraction against manually extracted
ones for randomly selected 50 entries. Table 1 shows
the result of extracting core meanings, and the result
of the classification is shown in Table 2.
number of entries
corrects 40
errors 10
(direct) (4)
(indirect) (6)
precision 80 %
Table 1: Result of extracting core meanings
Failure results of extractions of core meanings ap-
peared in the following cases; a core meaning in
a definition statement does not belong to the same
semantic category as the entry; the correct core
meaning involves negative expressions in a defini-
tion statement; or two or more near-synonyms are
appeared in one definition statement. Therefore, the
extraction of core meanings needs to be estimated
without relying on their semantic categories, that
is, with other information such as modification re-
result
recall [%]denotation lexical restriction
answer
denotation 56 13 81.2
lexical restriction 22 20 47.6
precision [%] 71.8 60.6
Table 2: Result of classification
lations of a definition statement.
Table 2 shows that both the precision and the
recall of the classification into lexical restrictions
are worse than the ones of denotations. A sparse
data problems could cause it. In our classification
method, if a feature of an entry does not co-occur
with the entry, the feature is classified into a denota-
tion or deleted, even though it is expected to be de-
fined as a lexical restriction. It would be improved
by increasing domains and the size of corpora, or by
using information of modification relations just as
the extraction of core meanings.
4 Preferential presentation of
near-synonyms
We secondly propose a method of ranking near-
synonyms by using information derived in Sec-
tion 3. Though (Edmonds, 1999) proposed a ranking
method for lexical choice by using information of
fine-grained meanings in I-Saurus, it requires more
detailed information than the one which can be ex-
tracted from a definition statement. Thus, this pa-
per proposes a ranking method as follows: when
a target word in a sentence is given, our method
obtains all near-synonyms5 of the target word and
their semantic features. Then, our method ranks the
near-synonyms with respect to their suitability be-
tween the input context and features of each near-
synonym. Additionally, if a paraphrase to a near-
synonym causes neighbor words in the input sen-
tence to arrange in order to keep semantic consis-
tency, our method adds such information to the near-
synonym when the ranking is presented.
4.1 Comparison between denotations and
contexts
?Denotations? can appear in any word, including
a target word in an input sentence. Therefore, all
5There are sometimes two or more core meanings in one
semantic category. We treat whole core meanings as the exactly
same meaning here.
denotations of each near-synonym have to be com-
pared not only with the input context but with deno-
tations of a target word. Our method determines the
propriety of paraphrasing between a target word w
and its near-synonym si for each denotation dij of
si, with the following cases:
Case 1. No denotation appears in neither w nor si:
? w can be directly paraphrased to si.
Case 2. w has a denotation dw equivalent to dij :
? w can be paraphrased to si on the sense
of dij .
Case 3. dw does not match with any dij :
? w can be paraphrased to si with adding
dw to the input sentence.
Case 4. dij does not match with any dw:
(a) if dij can be covered with a neighbor
word w? of w in the input sentence:
? w can paraphrase to si with deleting
w? from the input sentence.
(b) if dij can not be covered with any words
in the input sentence:
? w can not be paraphrased to si.
In Case 3 and Case 4a, some arrangements (addi-
tion / deletion of words) to the input sentence are
needed. Our method presents these information with
the presentation of near-synonyms rankings (in Sec-
tion 4.3).
According to these cases, the total denotational
score Sd of si is defined by
Sd =
?
j
pWj (3)
where Wj is the weight of dij (one of the denota-
tions of si) and
p =
?
??
??
1 (in Case 1, 2, 4a)
0 (in Case 3)
?1 (in Case 4b)
Note that Case 3 gives no weight, because the case
does not consider any denotation of si but compares
only between dw and its context.
4.2 Comparison between lexical restrictions
and contexts
?Lexical restriction?, the other fine-grained mean-
ing, is the feature which notably often co-occur with
its target word, as described in Section 3.3. In fact,
however, a word which often co-occurs with a target
word does not have to belong exactly to one of the
lexical restrictions of the target word. They could
be the ?similar? words. Therefore, it is necessary to
compute the similarity between a lexical restriction
and a context in order to compare them.
The thesaurus used in our method has a tree struc-
ture and each entry belongs to the node at 4 or 5 in
depth. The similarity can be defined by a heuristic
approach that any two words are semantically inde-
pendent if the depth of their root node is less than
3, such as the categories between [588] ?rebels? and
[506] ?private and public?. Hence, our method de-
fines the similarity between a lexical restriction vi
and a semantic label qi of a word in an input context
as follows:
sim(vi, qi) = log2
(dep (root(vi, qi))? 4
dep(vi) + dep(qi)
)
(4)
where root(a, b) is the root node of the minimum
subtree which includes both a and b, and dep(a) is
the depth of a in the thesaurus.
To determine the score of a lexical restriction,
there is another problem. An input sentence has sev-
eral content words outside of the target word, and
some of them belong to several semantic categories
because of their ambiguities. Also, the target word
often has two or more lexical restrictions. Thus,
each lexical restriction must select a semantic label
which has the highest similarity with the lexical re-
striction from the input sentence. Against the prob-
lem, first, our method computes the similarities of all
possible pairs which consist of a lexical restriction
and a semantic label extracted from the sentence.
Then, our method extracts pairs in descending or-
der of the similarity with no overlap in any category
or any lexical restriction.
Based on this process, we can compute the total
score Sv of each near-synonym si of a target word
w in an input sentence, with all extracted pairs of a
lexical restriction vj and a semantic label qj in the
input sentence by
Sv =
?
j
(Wj ? sim(vj , qj)) (5)
where Wj is the weight of vj .
4.3 Ranking method
This section describes our method of ranking near-
synonyms with respect to the scores defined in Sec-
tion 4.2 and Section 4.1, which is the aim of this
paper. The criterion of ranking is simply the sum of
normalized Sd and Sv6. Our method presents near-
synonyms according to their ranking, and if neces-
sary, information of arrangements to an input sen-
tence (extracted in Section 4.1) are shown with each
near-synonym.
4.4 An example
When an input sentence is
?????????
tera (joss house) wo (OBJ) tate (to build)
naosu (to repair)
(Someone rebuilds a joss house.)
and the word ??? (?) (tate(ru), to build)? is given
as a target, the semantic labels assigned to each con-
tent word in the sentence are
? tera [727b] temple
?? tate [394] to build
?? naosu [277b] to alter [277c] to recover
[392] to repair [417a] to get right
and 24 near-synonyms of tateru are extracted. Then,
our method computes Sd and Sv for each near-
synonym. For example, the scores of a word ?
????
??
(saikon, rebuilding of shrines / temples)?, which in-
cludes features shown in Figure 3, are given as fol-
lows:
? Sd (the denotational score)
For the denotations of saikon, [277b] (to al-
ter: 1.45) and [392] (to repair: 4.19) could be
obtained, where the italic numbers show their
weight. They match to the labels in the word
naosu, thus Sd of saikon is 5.64 and the word
naosu is given as a deletion information.
? Sv (the score in lexical restriction)
For the lexical restrictions of saikon, [277c] (to
recover: 3504), [417a] (to get right: 2135),
[727a] (shrine: 8518), [811] (matter: 15) and
[940c] (temple: 5859) could be obtained, then
the extracted pairs and their similarity are cal-
culated as follows:
6Each score has to be normalized because the place of Sd
far differs from that of Sv .
lexical
context similarityrestriction
[277c] ? [277c] 1.00
[417a] ? [417a] 1.00
[727a] ? [727b] 0.68
[811] ? [392] ?1.00
[940c] ? [277b] ?1.32
Therefore, Sv of saikon is calculated as 3682.
Finally, by computing Sd and Sv of all the
other near-synonyms, our method ranks the near-
synonyms and presents them as shown in Figure 4.
In Figure 4, the first 9 near-synonyms can be para-
phrased from the target word appropriately. How-
ever, saikon is ranked next to fushin contrary to our
expectation that it would be ranked as the first, be-
cause saikon and the fifth word saiken has the same
orthography, and thus the co-occurrence information
of saikon is imprecise by mixture with the informa-
tion of saiken.
4.5 Evaluation and discussions
To evaluate our ranking method, we randomly ex-
tracted 40 sentences from corpora and applied our
method to a certain word in each sentence. Also, for
each case, we manually selected all near-synonyms
which can be paraphrased7. We evaluated the rank-
ing results of our method by the measure of non-
interpolated average precision (NAP):
NAP = 1R
n?
i=1
zi
i
(
1 +
i?1?
k=1
zk
)
(6)
where R is the number of near-synonyms which can
be paraphrased, n is the number of presented near-
synonyms, and
zi =
?
?
?
1 if a near synonym in rank i can be
paraphrased
0 otherwize
Table 3 shows the result.
Table 3 shows that our method is remarkably ef-
fective for the judgement of semantic suitability of
near-synonyms if a target word is not ambiguous.
However, the average precision is worse for ambigu-
ous words, thus it is important to disambiguate those
target words before applying to our method.
7For the criterion if a word can paraphrase to another or not,
we dissemble any addition / deletion informations. That is, we
assume that a word can paraphrase if the paraphrased sentence
has the same meaning as the original with some changes to their
context.
ambiguity of NAP [%]
target word our method non-
(sentences) Sd Sv Sd + Sv ordered
distinct (21) 74.2 63.8 71.2 60.0
vague (19) 48.8 48.3 51.0 42.1
both (40) 62.8 56.9 62.2 52.0
Table 3: Average precision of ranking
Most of failure results are caused by the follow-
ing cases; incorrect core meanings or fine-grained
meanings were extracted in Section 3; adequate re-
lations between a near-synonym and an input con-
text could not be identified because of the ambiguity
of neighbor words in the input sentence; or the se-
mantic range of the label of a denotation or a lexi-
cal restriction is too wide to express the fine-grained
meaning of the near-synonym clearly.
In addition, Table 3 shows that the average preci-
sion by only Sv is worse than the one by only Sd. It
could be caused by the low precision of classifica-
tion into lexical restrictions and by the inadequacy
in the measure of similarity described in Section 4.2.
To improve those problems, another measure such as
semantical similarities without using a structure of a
thesaurus is needed. Also, we would learn from a
method of lexical choice with knowledge about col-
locational behavior (Inkpen and Hirst, 2002).
Though we have not discussed the evaluation of
the propriety of arrangements to an input sentence,
it seems that the information of addition often occurs
imprecisely, against that the information of deletion
appears infrequently but almost correctly, because,
in our method, all denotations of a target word are
given as the information of addition when they do
not match with any denotation of a near-synonym.
Therefore, we must define the importance of each
addition information and to present selected ones.
5 Conclusion and future work
This paper proposed a new method of preferential
presentation of Japanese near-synonyms in order to
treat with semantic suitability against contexts, as a
first step of semantic paraphrase system for elabo-
ration. We achieved the effectiveness of using def-
inition statements for extracting fine-grained mean-
ings, especially for denotations. Also, the experi-
mental results showed that our method could rank
near-synonyms of an unambiguous word for 71%
1. ?? fushin (??: ??) (delete naosu) 6. ?? chikuzo
(Construct or repair a house / a temple / a road) (Build or construct)
2.
????
?? saikon (??: ??) (delete naosu) 7. ??? tateru
(Rebuild a shrine / a temple) (Build)
3. ?? shuchiku (??: ??) (delete naosu) 8. ?? kizuku
(Repair a house etc.) (Build)
4. ?? konryu 9. ?? kenzo
(Build a chapel / a tower of a temple) (Construct a buildiing / a ship)
5.
????
?? saiken 10. ???? tatemashi
(Rebuild or Reconstruction) (Add to a building)
Figure 4: Result of preferential presentation of ?tera wo tate naosu.?
in accuracy by non-interpolated average precision,
about 10 points higher than non-ordered.
We have discussed only the initial step of the elab-
oration system, thus one of our future work is to
handle syntactic and semantic constraints on actual
paraphrasings after applying this method.
Acknowledgements
We would like to thank Mainichi Shinbun-sha and
Aozora Bunko for allowing us to use their corpora,
and Kadokawa Sho-ten for providing us with their
thesaurus. We are also grateful to our colleagues for
helping our experiment.
References
Akira Suganuma, Masanori Kurata and Kazuo Ushijima.
1990. A textual Analysis Method to Extract Negative
Expressions in writing Tools for Japanese Documents.
Journal of Information Processing Society of Japan,
31(6):792?800. (In Japanese)
Atsushi Fujita and Kentaro Inui. 2001. Paraphrase of
Common Nouns to Its Synonyms by Using Definition
Statements. The Seventh Annual Meeting of The As-
sociation for Natural Language Processing, 331?334.
(In Japanese)
Chrysanne DiMarco, Graeme Hirst and Manfred Stede.
1993. The semantic and stylistic differentiation of
synonyms and near-synonyms. AAAI Spring Sympo-
sium on Building Lexicons for Machine Translation,
114?121.
Diana Zaiu Inkpen and Graeme Hirst. 2002. Acquir-
ing Collocations for Lexical Choice between Near-
Synonyms. ACL 2002 Workshop on Unsupervised
Lexical Acquisition, Philadelphia.
George E. Heidorn. 2000. Intelligent Writing Assis-
tance. In Robert Dale, Hermann Moisl and Harold
Somers (eds.), A Handbook of Natural Language Pro-
cessing, Marcel Dekker, New York. Chapter 8.
Hiroko Inui and Naoyuki Okada. 2000. Is a Long Sen-
tence Always Incomprehensible?: A Structural Anal-
ysis of Readability Factors. Information Process-
ing Society of Japan SIGNotes Natural Language,
135(9):63?70. (In Japanese)
Kentaro Inui and Satomi Yamamoto. 2001. Corpus-
Based Acquisition of Sentence Readability Ranking
Models for Deaf People. Proceedings of the sixth
Natural Language Processing Pacific Rim Symposium
(NLPRS), 159?166, Tokyo.
Mark Dras. 1998. Search in Constraint-Based Paraphras-
ing. Proceedings of the second International Confer-
ence on Natural Language Processing and Industrial
Applications, 213?219, Moncton.
Noriko Tomuro and Steven L. Lytinen. 2001. Selecting
Features for Paraphrasing Question Sentences. Pro-
ceedings of the Workshop on Automatic Paraphrasing
at Natural Language Processing Pacific Rim Sympo-
sium (NLPRS), 55?62, Tokyo.
Philip Edmonds. 1999. Semantic Representations of
Near-Synonyms for Automatic Lexical Choice. Ph.D.
thesis, Department of Computer Science, University of
Toronto.
Satoshi Shirai, Satoru Ikehara, Akio Yokoo and Yoshi-
fumi Ooyama. 1998. Automatic Rewriting Method
for Internal Expressions in Japanese to English MT
and Its Effects. Proceedings of the second Interna-
tional Workshop on Controlled Language Applications
(CLAW-98), 62?75.
Shin Ohno and Masato Hamanishi. 1981. New Synonym
Dictionary. Kadokawa Shoten, Tokyo.
Yuji Matsumoto, Akira Kitauchi, Tatsuo Yamashita,
Yoshitaka Hirano, Hiroshi Matsuda, Kazuma Takaoka
and Masayuki Asahara. 2002. Morphological Anal-
ysis System ChaSen 2.2.9 Users Manual. Nara Ad-
vanced Institute of Science and Technology, Nara.
A New E-learning Paradigm through Annotating Operations
Hiroaki Saito, Kyoko Ohara, Kengo Sato, Kazunari Ito, Shinsuke Hizuka
Masaya Soga, Tomoya Nishino, Yuji Nomura, Hideaki Shirakawa, Hiroyuki Okamoto
Dept. of Computer Science, Keio University
3-14-1, Hiyoshi, Kohoku-ku, Yokohama, 223-8522, Japan
hxs@ics.keio.ac.jp
Abstract
This paper proposes a new e-learning paradigm
which enables the user to type in arbitrary sentences.
The current NLP technologies, however, are not ma-
tured enough to perform full-automatic semantic or
discourse analysis. Thus, we take a different ap-
proach; an instructor corrects the contents and its
correction is embedded into the contents in an XML
format called KeML. The key/mouse operations of
the user are also embedded as annotations. Thus,
the contents can be incomplete at the initial stage
and become solid gradually as being utilized. We
have implemented an e-learning system of group dis-
cussion for a foreign language class, which is demon-
strated at the workshop.
1 Introduction
Many old e-learning systems asked the user to click
the button or to type a unique answer. The domains
of the e-learning systems were limited by their ap-
proaches and their contents were fixed. This paper
introduces a new approach to expand the domain.
Namely, the user himself annotates the contents in
addition to the instructor.
Annotated contents can be used for further learn-
ing such as example-based learning and group learn-
ing. The burden of building e-learning contents are
so heavy that this ?annotated contents become other
contents? scheme is important for practical applica-
tions. Annotations are attached in an XML format.
This project can be considered as another applica-
tion of XML technologies, like MATE [1] [2] or Anvil
[3] to name a few. The principal difference is that
some annotations are implicitly attached and used
for NLP.
2 System Overview
Here we consider the debate discussion for a for-
eign language class as an example. This course was
originally taught in a regular classroom and through
an electronic chatting board supervised by a human
instructor. One student posts his/her thought in
English and others express positive or negative re-
sponses to it. Since this is a foreign language appre-
hension class, the instructor corrects the students?
English if necessary. Since students express various
opinions, we cannot prepare for them in advance.
The instructor was occupied with correcting syntac-
tic errors, therefore, the instructor could not thor-
oughly pay attention to the flow of the debate or to
whether students had appropriately expressed their
opinions.
In Figure 1 example debate submissions are shown
on the topic ?English should be taught at an elemen-
tary school.? #n indicates the submitted order and
P1, P2, ... stand for the identifier of the debaters.
(We will further explain Figure 1 later.)
Our system is designed for multi-user discussion,
not for self-learning. Thus, we divide the system
into the server and the client machines as shown in
Figure 2 (only one client machine is drawn in the
figure). The server machine manages the contents
and handles computationally heavy NLP, while each
client machine is responsible for user interface.
We have developed an e-learning system which of-
fers the process above. Here we describe five impor-
tant modules:
? Sentence analysis module: In this module the
input sentences are parsed and tagged syntac-
tically and semantically in the GDA (Global
Document Annotation) [4] format. We have
adopted the Charniak parser [5], which is cus-
tomized so that the head word is identified be-
cause the GDA tagging requires the attachment
direction between phrases. The GDA tagger
consults the WordNet [6] to find the root form
of a word. GDA tags can be utilized for such
further NLP as high quality summarization or
information retrieval [7].
? KWIC module: Novice English learners of-
ten make such mistakes in collocations and in
phrasal verbs. These word-usage mistakes can
be effectively resolved by looking at example
sentences rather than by consulting a regular
dictionary. This module presents the corpus
sentences in the KWIC (KeyWord in Context)
format in which the specified words are in-
cluded. Although any corpus will do for KWIC,
we have chosen the EDR English corpus [8]
which consists of 125,820 tagged sentences. Be-
cause the root form of each word is described as
a tag, conjugated forms are also searched.
? Annotation module: The instructor corrects the
wrong usages of the students? English. This op-
PROPOSITION
English should be taught as early as at an elementary school.
2. It is often said that language is most efficiently taught during his/her early age.
against early English education?
What kind of negative effect would the score-ism cause
#6   P3 (pro)
approval
refutation
refutation
supplement
correction
1. English is a global standard language and is indispensable for grownups.
might lower their total achievement.
I disagree with teaching English at an elementary school.
more effectively   tought   in a junior high school also.
Current curriculum of teaching English is not effective enough.
I agree that the method of teaching English should be improved.
However, if the similar improvement is performed against other subjects, early
English education has no bad effect to them.
taught
#1   P1 (pro)
#2   P2 (con)
#3   P3 (pro)
#4   P4 (con)
#5   P1 (pro)
I am for teaching English at an elementary school in the following points.
Teaching English relatively decreases the class hours of other subjects and
current education system of ?  score-ism   ?, not the starting age.
he/she is young, but what we have to do first is   to improve the
It is true that learning a foreign language is best effective when
question
approval
We can expect that children who become familiar with English earlier can be
Figure 1: Submission Statements and their Relations
NL resources
EDRcorpus
dictionary
Parser
Charniak
GDA tagger
KWIC
NLP modules
results
user interface
user
profile
DB
Retriever
Summarizer
with data
commands
DB
contents
document in KeML
client server
user
user operations
info
display
operations
Figure 2: System Architecture
Figure 3: A Snapshot of Interface Window
eration is recorded as annotation, not overwrit-
ing the originals. Preserving the originals is ef-
fective for education; it can prevent other stu-
dents from making the similar mistakes. When
the debater expresses his opinion against/for
someone else?s, that operation is also observed
and attached to the contents, which will be ex-
ploited by NLP.
? Interface module: This module enables the user
to type in sentences, specify what part he is
arguing about, express his/her attitude, etc, ef-
ficiently. This module displays the contents ef-
fectively according to the needs of the user with
the help of annotations. Our current interface
snapshot is shown in Figure 3.
? Debate Flow module
It is important to know the debate flow when
one expresses his/her opinion. Since the rela-
tions among statements are annotated, precise
analysis of the debate flow is possible.
In the following sections, the annotation module
is explained deeply.
3 Annotation by the Instructor and
Students
When a student expresses his/her opinion in re-
sponse to someone else?s, he can specify and denote
what part he is arguing about. This linkage is an-
notated by the user and recorded in the contents.
The corrections/comments by the instructor are also
stored in the learning contents as annotations. Ar-
rows in Figure 1 show the relation of statements,
where a dotted line expresses the linkage denoted by
the instructor, and solid lines mean that the debater
specified those relations.
4 The Tag Set for Debate
We have defined a tag set for annotating debates
in an XML format called KeML (Keio e-learning
Markup Language). Here we describe our tag set
along with how each tag is attached through opera-
tions by the instructor or students.
<debate> encloses the whole debate and is at-
tached when a new debate starts. No at-
tribute is allowed. Possible child-nodes are one
<proposition> and zero or more <statement>s.
<proposition> is attached when a new proposition
is submitted. Its mandatory attribute is ?id?
and whose value is always ?0?. Its child-node
is <su> of GDA. The instructor or students
should remark the proposition as pros or cons.
<statement> This tag is attached when a state-
ment to a proposition or other statements is
submitted by the instructor or students. Its
mandatory attributes are ?attitude? whose value
would be pro or con, ?person? whose value in-
dicates who submitted that statement, ?time?
which indicates when that statement was given,
and ?id? number (an integer). The values of the
first two attributes are given by the user explic-
itly, while those of the last two are filled by the
system. Its optional attributes are ?approval?,
?refutation?, ?supplement?, ?summary?, ?ques-
tion?, and ?answer? (some of those attributes ap-
pear in Figure 1). They are expressed as ?ap-
proval=target id? for example. Its child-node is
<su> of GDA.
Such tags below the <su> level as <np> or <v>
are attached by the parser according to the
GDA specifications. Every tag must have ?id?
attribute and its value is filled automatically by
the server.
Appendix shows the annotated contents of the de-
bate example in Figure 1.
5 Preserving Corrected Contents
In order that a novice student could observe mis-
takes by other students, our system preserves the
original contents and shows them effectively when
needed. While some mistakes are obvious, others
are not. Only the instructor can correct or comment
those errors and KeML offers two levels of correction
preservation. Obvious mistakes are stored as the
value of ?original? attribute; ?<np original=?tought?
..>taught</np>? for instance. Unobvious mistakes
are commented in the value of ?comment? attribute;
?<su comment=?This is a comment for this sen-
tence.? ....</su>? for example. When further cor-
rection is made against already corrected contents,
only the very first version is preserved. Our current
implementation allows the correction/comments un-
der <su> nodes.
6 Conclusions
We have implemented an e-learning system which fa-
cilitates group-discussion for second language learn-
ing. Plain texts become solid as being used because
of the embedded explicit and implicit annotations by
the instructor and students. Accumulated contents
will be a good resource for statistical analysis and
example-based learning.
References
[1] MATE Workbench Homepage:
http://www.cogsci.ed.ac.uk/? dmck/MateCode/
[2] MATE Homepape:
http://mate.nis.sdu.dk
[3] Anvil Homepage:
http://www.dfki.de/? kipp/anvil/
[4] The GDA Tag Set Homepage:
http://www.i-content.org/gda/
[5] Charniak, E. ?A Maximum-Entropy-Inspired
Parser?, NAACL 2000. (For software, see
http://www.cs.brown.edu/people/ec/)
[6] WordNet
http://www.cogsci.princeton.edu/? wn/
[7] Miyata, T. and Hasida, K. ?Information Retrieval
Based on Linguistic Structure? in Proceedings of
the Japanese-German Workshop on Natural Language
Processing, July 2003.
[8] EDR Electric Dictionary, EDR English Corpus
http://www2.crl.go.jp/kk/e416/EDR/
Appendix. Annotated contents (a head por-
tion)
<?xml version=?1.0? encoding=?UTF-8?
standalone=?yes??> <debate> <proposition
id=?0? time=?Sun Jun 13 22:08:30 JST
2004?> <su id=?0.1?> <segp id=?0.1.1?
mph=?ptb;NNP;;English;?>English</segp>
<v id=?0.1.2?> <v id=?0.1.2.1?
mph=?ptb;MD;;should;?>should</v> <vp id=?0.1.2.2?>
<v id=?0.1.2.2.1? mph=?ptb;VBN;;teach;?>taught</v>
<adp id=?0.1.2.2.2?> <ad id=?0.1.2.2.2.1?> <adp
id=?0.1.2.2.2.1.1? mph=?ptb;RB;;as;?>as</adp> <ad
id=?0.1.2.2.2.1.2? mph=?ptb;RB;;early;?>early</ad>
</ad> <adp id=?0.1.2.2.2.2?> <ad id=?0.1.2.2.2.2.1?
mph=?ptb;IN;;as;?>as</ad> <adp id=?0.1.2.2.2.2.2?>
<ad id=?0.1.2.2.2.2.2.1? mph=?ptb;IN;;at;?>at</ad>
<np id=?0.1.2.2.2.2.2.2?> <adp id=?0.1.2.2.2.2.2.2.1?
mph=?ptb;DT;;an;?>an</adp> <ajp id=?0.1.2.2.2.2.2.2.2?
mph=?ptb;JJ;;elementary;?>elementary</ajp> <n
id=?0.1.2.2.2.2.2.2.3? mph=?ptb;NN;;school;?>school</n>
</np> </adp> </adp> </adp> </vp> </v>.</su>
</proposition> <statement id=?1? attitude=?pro?
person=?P1? time=?Sun Jun 13 22:10:41 JST 2004?>
<su id=?1.1?> <np id=?1.1.1? mph=?ptb;PRP;;I;?
eq=?p1?>I</np> <v id=?1.1.2?> <v id=?1.1.2.1?
mph=?ptb;VBP;;be;?>am</v> <adp id=?1.1.2.2?>
<ad id=?1.1.2.2.1? mph=?ptb;IN;;for;?>for</ad>
<vp id=?1.1.2.2.2?> <v id=?1.1.2.2.2.1?> <v
id=?1.1.2.2.2.1.1? mph=?ptb;VBG;;teach;?>teaching</v>
<segp id=?1.1.2.2.2.1.2?
mph=?ptb;NNP;;English;?>English</segp> <adp
id=?1.1.2.2.2.1.3?> <ad id=?1.1.2.2.2.1.3.1?
mph=?ptb;IN;;at;?>at</ad> <np
id=?1.1.2.2.2.1.3.2?> <n id=?1.1.2.2.2.1.3.2.1?> <adp
id=?1.1.2.2.2.1.3.2.1.1? mph=?ptb;DT;;an;?>an</adp>
<ajp id=?1.1.2.2.2.1.3.2.1.2?
mph=?ptb;JJ;;elementary;?>elementary</ajp>
<n id=?1.1.2.2.2.1.3.2.1.3?
mph=?ptb;NN;;school;?>school</n>
</n> <adp id=?1.1.2.2.2.1.3.2.2?> <ad
id=?1.1.2.2.2.1.3.2.2.1? mph=?ptb;IN;;in;?>in</ad> <np
id=?1.1.2.2.2.1.3.2.2.2?> <adp id=?1.1.2.2.2.1.3.2.2.2.1?
mph=?ptb;DT;;the;?>the</adp> <vp
id=?1.1.2.2.2.1.3.2.2.2.2? mph=?ptb;VBG;;follow;?>follo
wing</vp> <n id=?1.1.2.2.2.1.3.2.2.2.3?
mph=?ptb;NNS;;point;?>points</n> </np>
</adp> </np> </adp> </v> </vp> </adp>
</v>.</su> <su id=?1.2?> <np id=?1.2.1?> <num
id=?1.2.1.1? mph=?ptb;CD;;1.;?>1.</num> <segp
id=?1.2.1.2? mph=?ptb;NNP;;English;?>English</segp>
</np> <v id=?1.2.2?> <v id=?1.2.2.1?> <v
id=?1.2.2.1.1? mph=?ptb;VBZ;;be;?>is</v>
<np id=?1.2.2.1.2?> <adp id=?1.2.2.1.2.1?
mph=?ptb;DT;;a;?>a</adp> <ajp id=?1.2.2.1.2.2?
mph=?ptb;JJ;;global;?>global</ajp> <ajp id=?1.2.2.1.2.3?
mph=?ptb;JJ;;standard;?>standard</ajp> <n
id=?1.2.2.1.2.4? mph=?ptb;NN;;language;?>language</n>
</np> </v> <segp id=?1.2.2.2?
mph=?ptb;CC;;and;?>and</segp> <vp id=?1.2.2.3?>
<v id=?1.2.2.3.1? mph=?ptb;VBZ;;be;?>is</v>
<ajp id=?1.2.2.3.2?> <aj id=?1.2.2.3.2.1?
mph=?ptb;JJ;;indispensable;?>indispensable</aj>
<adp id=?1.2.2.3.2.2?> <ad id=?1.2.2.3.2.2.1?
mph=?ptb;IN;;for;?>for</ad> <np id=?1.2.2.3.2.2.2?
mph=?ptb;NNS;;grownup;?>grownups</np> </adp>
</ajp> </vp> </v>.</su>
