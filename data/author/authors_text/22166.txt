Proceedings of the Second Workshop on Natural Language Processing for Social Media (SocialNLP), pages 12?21,
Dublin, Ireland, August 24 2014.
?My Curiosity was Satisfied, but not in a Good Way?:
Predicting User Ratings for Online Recipes
Can Liu, Chun Guo, Daniel Dakota , Sridhar Rajagopalan, Wen Li, Sandra K
?
ubler
Indiana University
{liucan, chunguo, ddakota, srrajago, wl9, skuebler}@indiana.edu
Ning Yu
University of Kentucky
ning.yu@uky.edu
Abstract
In this paper, we develop an approach to automatically predict user ratings for recipes at Epicuri-
ous.com, based on the recipes? reviews. We investigate two distributional methods for feature se-
lection, Information Gain and Bi-Normal Separation; we also compare distributionally selected
features to linguistically motivated features and two types of frameworks: a one-layer system
where we aggregate all reviews and predict the rating vs. a two-layer system where ratings of
individual reviews are predicted and then aggregated. We obtain our best results by using the
two-layer architecture, in combination with 5 000 features selected by Information Gain. This
setup reaches an overall accuracy of 65.60%, given an upper bound of 82.57%.
1 Introduction
Exchanging recipes over the internet has become popular over the last decade. There are numerous sites
that allow us to upload our own recipes, to search for and to download others, as well as to rate and
review recipes. Such sites aggregate invaluable information. This raises the question how such sites can
select good recipes to present to users. Thus, we need to automatically predict their ratings.
Previous work (Yu et al., 2013) has shown that the reviews are the best rating predictors, in comparison
to ingredients, preparation steps, and metadata. In this paper, we follow their approach and investigate
how to use the information contained in the reviews to its fullest potential. Given that the rating classes
are discrete and that the distances between adjacent classes are not necessarily equivalent, we frame this
task as a classification problem, in which the class distribution is highly skewed, posing the question of
how to improve precision and recall especially for the minority classes to achieve higher overall accuracy.
One approach is to identify n-gram features of the highest discriminating power among ratings, from a
large number of features, many of which are equally distributed over ratings. An alternative strategy is
to select less surface-oriented, but rather linguistically motivated features. Our second question concerns
the rating predictor architecture. One possibility is to aggregate all reviews for a recipe, utilizing rich
textual information at one step (one-layer architecture). The other possibility is to rate individual reviews
first, using shorter but more precise language clues, and then aggregate them (two-layer). The latter
approach avoids the problem of contradictory reviews for a given review, but it raises the question on
how to aggregate over individual ratings. We will investigate all these approaches.
The remainder of the paper is structured as follows: First, we review related work in section 2. Then, in
section 3, we motivate our research questions in more detail. Section 4 describes the experimental setup,
including the data preparation, feature extraction, classifier, and evaluation. In section 5, we present
the results for the one-layer experiments, and in section 6 for the two-layer experiments. Section 7
investigates a more realistic gold standard. We then conclude in section 8.
2 Related Work
This section provides a brief survey for sentiment analysis on online reviews.
This work is licenced under a Creative Commons Attribution 4.0 International License. Page numbers and proceedings footer
are added by the organizers. License details: http://creativecommons.org/licenses/by/4.0/
12
During the last decade or more, there has been significant body of sentiment analysis studies on online
reviews. Two major approaches exist: lexicon-based and machine learning. A lexicon-based approach
requires prior knowledge of important sentiment features to build a list of sentiment-bearing words (or
phrases), which are often domain independent. Examples of such lexicons include the Multi-Perspective
Question Answering (MPQA) subjectivity lexicon (Wilson et al., 2005) and the Linguistic Inquiry and
Word Count (LIWC) dictionary (Pennebaker et al., 2014). The sentiment of a review is determined
by various ways of aggregating information about the sentiment-bearing words (phrases), such as their
frequency and sentiment scores. The machine learning approach dominantly adopts supervised learning
algorithms, which treat sentiment analysis as a text classification task. In this case, sentiment features
are generated from a pre-labeled corpus. Given the lack of annotated data, semi-supervised learning is
adopted (Yu, 2014; Yu and Ku?bler, 2011). For this study, we focus on a specific language domain of
online recipe reviews, which has user ratings, thus we choose supervised learning. We also adopt one
existing linguistic lexicon to provide extra features for our classification models.
The earliest sentiment analysis on online reviews was done by Pang et al. (2002); they applied several
supervised learning algorithms to classify online movie reviews into a positive and a negative class.
This study found that machine learning methods outperformed human annotators. It also found that
bigrams did not improve the classification performance, whether used alone or with unigrams, which has
been confirmed by many following studies. However, Cui et al. (2006) later conjectured that when the
training corpus is large enough, adding bigrams to unigrams improved the accuracy of binary product
review classification. A great number of diverse features were proven to be beneficial to capture subtle
sentiments across studies and a ?kitchen sink? approach is often adopted for sentiment analysis (Yang
et al., 2008). However, when features are noisy and redundant, researcher have found it beneficial to
identify the most telling ones (Gamon, 2004; Ng et al., 2006).
While it is useful to differentiate positive and negative reviews, a finer level of distinction can help
users better compare online reviews. As a matter of fact, even extra half star ratings can have dramatic
economic impact (Anderson and Magruder, 2012). To predict multi-level ratings, either multiclass clas-
sification or regression methods can be applied (Koppel and Schler, 2006; Yu et al., 2013). Pang and Lee
(2005) have also proposed an alternative meta-algorithm based on metric labeling for predicting three or
four sentiment classes for movie reviews. In their experiments, the meta-algorithm outperformed SVMs
in either one-versus-all or regression mode. In order to adopt this meta-algorithm, however, one needs to
determine an effective review similarity measure, which is not always straightforward.
If an item receives multiple reviews and/or comes from multiple sources, an overall rating needs to be
generated for this item. Yu et al. (2013) generated this overall rating by treating all the reviews from one
recipe as one long review. In this study, we are going to investigate how to integrate review-level rating
predictions to generate a recipe-level prediction. Rating aggregation has been studied intensively for
collaborative filtering, where the user/rater?s bias is adjusted (e.g., the trustworthy user?s rating has more
influence than others (McGlohon et al., 2010)). Since our current study does not take raters? information
into consideration, we are going to stay with the sample aggregation method. A study by Garcin et al.
(2009) suggests that among mean, median, and mode, the median is often a better choice as it is not as
sensitive to outliers as the mean.
3 Research Questions
As described in the previous section, many studies use only word unigrams or bigrams. We use word
and part-of-speech (POS) n-grams, with n ranging from 1 to 3. This approach generates a large number
of features, creating a very noisy and high dimensional data set, which also makes classifier training
and testing slow. For this reason, we first investigate the effect of feature selection. The next question
concerns the usefulness of linguistically and socio-linguistically motivated features. This results in a
small, but ideally meaningful set of features. The last research question that we approach in this paper
concerns whether classifying recipes on the recipe level is too coarse. In general, we have a wide range
of reviews, each of which is accompanied by a user rating. Thus, it is possible to conduct review-level
classification and then aggregate the ratings.
13
3.1 Feature Selection
Our primary feature set is based on word and POS n-grams. This results in an extremely large feature
set of 449 144 features, many of which do not serve any discriminatory function. A common first step to
trimming the feature set is to delete stop words. However, in the cooking domain, it is unclear whether
stop words would help. Feature selection is used to identify n-grams tightly associated with individual
ratings. Additionally, a extremely high dimensional feature representation makes model training and
testing more time consuming, and is likely to suffer from overfitting - given a large number of parameters
needed to describe the model. Due to the exponential computation time required by wrapper approaches
for feature selection, we use filtering approaches which are based on statistics about the distribution of
features. Previous research (Liu et al., 2014) indicates that Bi-Normal Separation (BNS) (Forman, 2003)
and Information Gain (IG) yield best results for this task. Information Gain is defined as follows:
IG = H(S) ? H(S|f) =
?
f?{0,1}
?
S?{0,1}
P (f, S)log
P (f, S)
P (f)P (S)
where S is the positive class, f a feature, and P (f, S) the joint probability of the feature f occurring
with class S. Bi-Normal Separation finds the separation of the probability of a feature occurring in the
positive class vs. the negative class, normalized by F
?1
, which is the inverse function of the standard
normal cumulative probability distribution. Bi-Normal Separation is defined as follows:
BNS = |F
?1
(
D
Sf
D
S
) ? F
?1
(
D
Sf
D
S
)|
where D
S
is the number of documents in class S, D
S
the number of documents in class S, D
Sf
the
number of documents in class S where feature f occurs, and D
S,f
the number of documents in class
S where feature f occurs. The F
?1
function exaggerates an input more dramatically when the input is
close to 0 or 1, which means that BNS prefers rare words.
Since both metrics are defined for binary classification, the features are chosen in terms of a separation
of the recipes into ?bad? ratings (1-fork and 2-fork) versus ?good? ratings (3-fork and 4-fork), on the
assumption that the selected features will be predictive for the more specific classes as well. For
review-based experiments, the features are chosen with regard to ?good? and ?bad? individual reviews.
3.2 Linguistically Motivated Features
Linguistic features In order to examine whether linguistic information can improve prediction accu-
racy, linguistically motivated features were extracted from the data. We selected seven features based
on the assumption that they reveal a sense of involvedness or distance of the reviewer, i.e., that authors
distance themselves from a recipe to indicate negative sentiment and show more involvedness to indicate
positive sentiment. These seven features are:
1. The percentage of personal pronouns per sentence.
2. The number of words per sentence.
3. The total number of words in the review.
4. The percentage of passive sentences per review.
5. The number of punctuation marks per sentence.
6. The number of capitalized characters per sentence.
7. The type/token ratio per review.
Features such as words per sentence, total words, and the type/token ratio are seen as indicating the
complexity of the review.
14
Our hypothesis is that the longer the review, the more likely it indicates a negative sentiment as the
review may go at lengths to indicate why something was negative.
Similarly, using the passive voice can be viewed as distancing oneself from the review indicating a
sense of impartial judgement, most likely associated with negativity, as one tends to actively like some-
thing (i.e. ?We liked it? versus ?It wasn?t well seasoned.?). Since some reviews with strong emotions are
written in all capital letters as well as contain many punctuation marks (particularly ?!?), these features
are also collected as possible indicators of sentiment.
Lexicon-based features In addition, we used an existing lexicon, the Linguistic Inquiry and Word
Count (LIWC) dictionary (Pennebaker et al., 2014), to analyze several emotional and cognitive dimen-
sions in the recipe reviews. This lexicon is chosen over other sentiment lexicons because it covers a broad
range of categories beyond simply positive and negative emotions. Briefly, it contains general descriptor
categories (e.g., percentage of words captured by the dictionary), standard linguistic dimensions (e.g.,
percentage of words in the text that are pronouns), word categories tapping psychological constructs
(e.g., biological processes), personal concern categories (e.g., work), spoken language dimensions (e.g.,
accent), and punctuation categories. Details of these dimensions can be found in the LIWC 2007 manual.
For our study, we first extracted all the features from a review set independent from our training/test
set. We then selected the LIWC features with highest power to differentiate four rating classes based
on Information Gain. Below are the 15 selected features. Note that the linguistic features here are
document-level features, not sentence-level features, as proposed above.
? Linguistic Processes
? Negations (e.g., never, no): 57 words
? 1st person plural (e.g., we, us): 12 words
? Exclamation mark
? Psychological Processes
? Affective process: this high level category contains 915 positive/negative emotions, anxiety,
anger and sadness related terms.
? Positive emotion (e.g., love, nice, sweet): 406 words
? Negative emotion (e.g., hurt, ugly, nasty): 499 words
? Sadness (e.g., crying, grief): 101 words
? Exclusive (e.g., but, exclude): 17 words
? Tentative (e.g., maybe, perhaps, guess): 155 words
? Causation (e.g., because, hence): 108 words
? Discrepancy (e.g., should, would, could) : 76 words
? Certainty (e.g., always, never): 83 words
? Sexual (e.g., love): 96 words
? Feel (e.g., feel, touch): 75 words
? Personal Concerns
? Leisure (e.g, cook, chat, movie): 229 words
It is not surprising that emotion related features are selected, but it is interesting to see that cognitive
processes features (i.e., causation, tentative, discrepancy, certainty and exclusive) are also highly related
to ratings. Taking a close look at the means of feature values across four ratings, we observe that people
tend to use words in the tentative, discrepancy, exclusive categories when they write negative recipe
reviews. For terms in causation, however, it is the opposite: People write about reasons when writing
positive reviews. Some further investigation is needed to explain why this is the case. We also see that the
higher the rating, the more likely it is that people use first person plural pronouns. This may be due to the
fact that only when people like a recipe, they will tend to share the food with others. Other observations
15
1 fork 108
2 fork 787
3 fork 5 648
4 fork 3 546
Table 1: The distribution of ratings in the Epicurious data.
include: The sexual features are positively correlated with high ratings, which is mainly due to the word
?love? in its non-sexual meaning. People tend to use more words from the perception processes category
feel when they complain about a recipe.
3.3 One-Layer Prediction Versus Two-Layer Prediction
The one-layer or recipe-based approach consider all reviews per recipe as a single document. This
approach has rich textual information, especially when a large number of reviews exist for a recipe.
However, the concern with this approach is that the reviews in themselves may be varied. There are
recipes whose reviews range from the lowest to the highest rating. Given such a range of individual
ratings, we can assume that the recipe-based approach will be faced with a contradictory feature set for
certain recipes. For this reason, we also investigate a two-layer or review-based approach. Here, every
individual review is rated automatically. In a second step, we aggregate over all reviews per recipe.
Aggregation can either take the form of majority voting, average, or of a second classifier which takes
the aggregated ratings as features to make a final decision. However, this approach will suffer from often
very short reviews, which do not allow the extraction of sufficient features as well as from the inequality
in the number of reviews per recipe.
4 Experimental Setup
4.1 Data Set
We scraped user reviews for 10 089 recipes, published on the Epicurious website
1
before and on April 02,
2013. Typically, a recipe contains three parts: ingredients, cooking instructions, and user reviews. In our
experiments, we focus exclusively on the reviews. Each user review has a rating for this recipe, ranging
from 1 fork to 4 forks. There is also an overall rating per recipe, which is the average of all reviews
ratings as well as ratings submitted without reviews. Half forks are possible for recipe rating but not for
review ratings. These recipes were pre-processed to remove reviews with zero ratings. Recipes that had
no reviews were then subsequently removed. In order to counter the effect of the wide variance in the
number of reviews per recipe, we randomly sampled 10 reviews from recipes with more than 10 reviews.
We had performed initial experiments with all reviews, which resulted in only minor differences. At the
review level, rare words (unigrams occurring less than four times) were removed for two reasons: 1)
Extremely rare words are likely to be noise rather than sentiment-bearing clues; 2) the feature selection
method BNS is biased towards rare words; 3) such words do not generalize well. The recipes were then
tagged using the Stanford POS Tagger (Toutanova et al., 2003).
The data set is severely skewed with regard to the number of recipes per fork: Users seem to be more
willing to review good recipes. To lessen the effect of imbalance in the rating classifier, all half fork
reviews were added to their corresponding full star reviews (i.e., 1.5 fork was added to the 1 fork data).
This resulted in the data split of 10 089 recipes shown in table 1. Even after collapsing the half stars,
there is still a very large skewing of the data towards the higher ratings. This means, feature selection is
important to mitigate the imbalance to a certain degree.
4.2 Features
In addition to the linguistic features described in section 3.2, we also extracted n-gram features: word
unigrams, bigrams, and trigrams as well as POS tag unigrams, bigrams, and trigrams. Since the data
1
http://www.epicurious.com
16
Method 750 900 1 000 1 500 3 000 6 000
BNS ? ? 31.33 ? 42.00 50.67
IG 62.00 62.00 62.33 62.33 61.00 58.67
Table 2: Results for feature selection based on Bi-Normal Separation (BNS) and Information Gain (IG).
includes tokens particular to the web, modifications were made to the data to help with the processing of
these types of tokens. URLs were replaced with a single URL token and tagged with a unique ?URL? tag.
Emoticons were defined as either positive or negative and subsequently replaced by EMOP or EMON
respectively. Since it is unclear for this task whether more frequent feature should receive a larger weight,
we normalized features values to a range of [0,1].
4.3 Classifiers
Preliminary experiments were run to determine the best classifier for the task. We decided on Support
Vector Machines in the implementation of SVM multi-class V1.01 (Crammer and Singer, 2002) for both
review-level and recipe-level rating prediction. Initial experiments showed that SVM multi-class V1.01
reaches higher results on our skewed data set than the current V2.20. For this reason, all experiments
reported in this paper are based on V1.01 with its default settings, i.e., using a linear kernel.
To aggregate review-level ratings into a recipe-level prediction, we experimented with both the max-
imum entropy classifier in the implementation of the Stanford Classifier (Manning and Klein, 2003)
and the SVM multi-class classifier. We included Maxent Classifier because given the small number of
features it is no longer clear whether SVM is advantageous.
4.4 Baseline
The baseline was established following Yu et al. (2013) as selecting the label of majority class (3-fork)
to tag all recipes, producing an accuracy of 56.00% for both one-layer and two-layer systems.
4.5 Evaluation
Evaluation was performed using 3-fold cross validation. Since the data is skewed, we report Precision
(P), Recall (R), and F-Scores (F) for all classes across each experiment, along with standard accuracy.
5 Results for One-Layer Prediction
5.1 Feature Selection
We first investigated the effect of feature selection, varying the number of included features from 750 to
6 000. Results for the two methods and different feature thresholds are shown in table 2. Since previous
work (Liu et al., 2014) showed that BNS has a tendency to select infrequent n-grams and would need
a larger number of features than IG to achieve good performance, we tested the higher ranges of 1 000,
3 000, 6 000 features. None of these experiments yields an accuracy higher than the baseline of 56.00%.
On the other hand, the performance of Information Gain peaks at 1 000 and 1 500 features, and we reach
an absolute increase in accuracy of 6.33%. Given these experiments, for all following experiments, we
use the combination of Information Gain and 1 000 n-gram features.
5.2 Linguistically Motivated Features
Here, we test the contribution of the linguistically motivated features introduced in section 3.2. To allow
a comparison to previous experiments, we report the baseline and the results for using Information Gain.
For the two sets of linguistically motivated features, we used the following combination of features:
1. Lexicon-based features (Lex) combined with linguistic features (Ling) (22 features).
2. Lexicon-based features (Lex) combined with the 1 000 features selected by Information Gain (IG)
(1015 features).
17
1 fork 2 fork 3 fork 4 fork
P R F P R F P R F P R F Acc.
Base 0.00 0.00 0.00 0.00 0.00 0.00 56.00 100.00 72.00 0.00 0.00 0.00 56.00
IG 33.33 1.00 2.00 31.33 12.00 17.33 66.00 73.67 69.67 58.33 58.00 58.00 62.33
Lex+Ling 0.00 0.00 0.00 0.00 0.00 0.00 56.00 100.00 72.00 0.00 0.00 0.00 56.00
IG+Lex 39.00 2.00 3.67 31.67 10.00 15.00 65.33 75.33 69.67 59.67 55.67 57.33 62.67
IG+Ling 0.00 0.00 0.00 32.00 3.33 6.00 63.67 81.00 71.33 62.67 49.67 55.33 63.33
IG+Lex+Ling 0.00 0.00 0.00 32.00 3.33 6.00 63.67 81.00 71.33 62.67 49.67 55.33 63.33
Table 3: Results for manually selected features.
1 fork 2 fork 3 fork 4 fork
no. feat. P R F P R F P R F P R F Acc.
1000 61.57 58.11 59.79 53.70 37.42 44.11 63.04 42.14 50.51 71.30 89.08 79.20 67.80
2000 61.65 58.27 59.91 52.96 39.40 45.18 63.37 43.19 51.37 71.86 88.70 79.40 68.11
3000 62.50 58.51 60.44 52.98 40.88 46.15 62.90 44.49 52.12 72.45 88.10 79.51 68.34
4000 62.45 58.45 60.38 52.38 41.05 46.03 62.99 45.54 52.86 72.83 87.70 79.58 68.46
5000 62.32 57.00 59.54 51.66 41.17 45.82 62.21 46.15 52.99 73.05 87.24 79.52 68.31
Table 4: Results on individual reviews for the two-layer experiments.
3. Linguistic features (Ling) combined with the 1 000 features selected by Information Gain (IG)
(1007 features).
4. A combination of all three sets of features (IG+Lex+Ling) (1022 features).
The results for these experiments are reported in table 3. These results show that a combination of
the two sets of linguistically motivated features does not increase accuracy over the baseline. In fact, the
classification is identical to the baseline, i.e., all recipes are grouped into the majority class of 3-fork. We
assume that the linguistically motivated features are too rare to be useful. If we add the lexicon-based
features to the ones selected by Information Gain, we reach a minimal improvement over only the IG
features: accuracy increases from 62.33% to 62.67%. This increase is mostly due to a better performance
on the minority class of 1 fork. If we add the 7 linguistic features to the IG features, we reach the highest
accuracy of 63.33%. However, this is due to a more pronounced preference for selecting the majority
class. Adding the lexicon-based features to this feature set does not give any further improvements.
6 Results for Two-Layer Prediction
In this section, we investigate the two-layer or review-based prediction. For these experiments, we per-
formed feature selection on the individual reviews using IG. Adding the linguistically motivated features
considerably decreased performance. We assume that these features do not generalize well on the shorter
reviews.
Note that the task approached here is a difficult task since the recipe rating on Epicurious is not the
average over all the ratings associated to the individual reviews but also includes ratings by user who did
not write a review. If we average over all the sampled gold standard review ratings per recipe, we reach
an accuracy of 82.57%. This is the upper bound that we can reach in these experiments.
6.1 Classifying Individual Reviews
First, we look at the phase in which individual reviews are classified. The results of this set of experiments
is shown in table 4. Note that there are three important trends here: 1) The accuracy of the SVM classifier
is higher than for classifying recipes. The comparison needs to be taken with a grain of salt because
these are two different tasks. However, this is an indication that it is possible to reach higher results
based on aggregating over individual reviews. 2) For this task, we reach the highest results by using
4 000 features, i.e., a considerably higher number of features than the optimal set for the recipe-based
experiments, where 1 000 features sufficed. We suspect that we need more features in this setting because
the individual reviews are shorter so that individual features do not generalize as well as for complete
recipes. 3) The classification of individual reviews is less skewed than for complete recipes. The F-scores
18
1 fork 2 fork 3 fork 4 fork
no. f. sys. P R F P R F P R F P R F Acc.
1000 avg 44.64 36.98 40.45 60.00 23.03 33.28 75.72 51.91 61.59 52.38 86.01 65.11 61.48
maxent 43.87 33.33 37.88 58.30 19.73 29.48 73.90 58.77 65.47 55.03 81.40 65.67 63.41
svm 62.21 62.21 62.21 56.18 16.03 24.94 72.24 58.14 64.43 53.92 80.82 68.68 62.21
2000 avg 44.61 38.83 41.52 61.45 24.29 34.82 76.12 53.96 63.15 53.45 85.53 65.79 62.58
maxent 43.17 34.27 38.21 61.47 21.23 31.56 74.43 60.93 67.01 56.27 80.93 66.38 64.58
svm 63.29 63.29 63.29 56.53 16.79 25.89 72.65 60.32 65.91 55.14 80.26 65.37 63.29
3000 avg 42.71 38.86 40.69 61.08 26.57 37.03 75.62 54.33 63.23 53.71 84.60 65.71 62.64
maxent 42.40 35.20 38.47 61.90 23.40 33.96 74.00 61.90 67.41 56.83 79.73 66.36 64.84
svm 63.53 63.53 63.53 54.09 17.41 26.34 72.14 61.45 66.37 55.80 79.02 65.41 63.53
4000 avg 38.64 34.22 36.30 61.09 24.89 35.37 75.23 55.91 64.15 54.34 83.81 65.93 63.07
maxent 38.37 31.47 34.58 60.67 22.47 32.79 73.80 63.03 67.99 57.47 79.00 66.54 65.16
svm 64.03 64.03 64.03 52.92 17.53 26.33 72.24 62.85 67.22 56.51 78.17 65.60 64.03
5000 avg 39.23 37.05 38.11 59.20 24.89 35.05 75.38 56.25 64.42 54.54 83.64 66.03 63.23
maxent 38.03 33.40 35.56 58.37 22.00 31.96 73.97 64.17 68.72 58.13 78.57 66.82 65.60
svm 64.68 64.68 64.68 50.19 17.40 25.84 72.52 64.18 68.10 57.45 77.95 66.15 64.68
Table 5: Results on aggregating reviews for the two-layer experiments.
for the non-majority classes are considerably higher than in the recipe-based setting. Thus, we expect to
obtain more balanced results across classes in the aggregation as well.
6.2 Predicting Recipe Ratings by Aggregating Reviews
When aggregating review predictions to recipe rating, we use three methods: 1) Taking the average of
the review ratings from the previous step; 2) using SVM; and 3) using a maximum entropy classifier
(Maxent), the Stanford Classifier. When calculating the average over review rating predictions, the final
average is rounded up. The results are reported in table 5. When using SVM and the maximum entropy
classifier, we use four features, corresponding to the four ratings. The feature values are calculated as
the percentage of reviews from the target recipe that were assigned to this fork rating by our review-level
classifier.
Overall, the maximum entropy classifier yields the best performance, independent of the number of
features used for the review-level classifier. The highest performance we reach by using 5 000 features
and the maximum entropy classifier. Calculating the average results in the worst performance. Although
Epicurious calculates the average user ratings based on review ratings and singular ratings, keep in mind
that we use at most 10 reviews per recipe, hence only capture part of the image. This may explain why
simply calculating the average does not work well. When looking at the F-scores for each fork in table 5,
however, the maximum entropy classifier produces lower performance than average and SVM classifier
for the 1 fork and 2 fork classes. For 1 fork, SVM has the highest F-scores for different numbers of
features, followed by the averaging approach while for 2 fork, the average approach produced the highest
F-scores. One possible explanation is that recipes with lower ratings have relatively small numbers of
reviews and thus may be less impacted by our sampling.
7 Towards a More Realistic Gold Standard
When we aggregate over the individual review rating using the average, the results are only slightly better
than the one-layer results. For example, the best performance using the average reaches an accuracy of
63.23%, as opposed to the one-layer accuracy of 62.33% in table 2 (note that these settings use only IG
features). One reason for this low performance is that Epicurious averages all review ratings to generate
a recipe rating, independent of whether there is review attached to the rating or not. Since our text-based
classifiers make their decisions only based on the reviews, the question is how well we actually predict
the average rating if only ratings attached to reviews were used in the calculation. In this way, we can
evaluate how well our approach works if we assume that all the information is available to the classifier.
Consequently, we calculated a new gold standard, averaging gold ratings of individual reviews in the
recipe sample. We investigate this effect based on the two-layer setting where reviews are aggregated
via averaging. The results of this set of experiments are shown in table 6 for the two-layer approach and
in table 7 for the one-liner approach. We report results using the gold label based on the ratings from
19
1 fork 2 fork 3 fork 4 fork
sys. P R F P R F P R F P R F Acc.
EPI 39.23 37.05 38.11 59.20 24.89 35.05 75.38 56.25 64.42 54.54 83.64 66.03 63.23
EPI-AVG 56.41 51.16 53.66 62.73 62.73 62.73 76.89 65.66 70.83 67.10 85.39 75.15 71.10
Table 6: Evaluation on a more realistic gold standard for two-layer experiments.
1 fork 2 fork 3 fork 4 fork
P R F P R F P R F P R F Acc.
Base 0.00 0.00 0.00 0.00 0.00 0.00 52.00 100.00 68.00 0.00 0.00 0.00 52.00
IG 8.33 1.00 1.67 29.67 11.00 16.00 64.33 70.00 67.00 64.00 66.00 64.67 63.33
Lex+Ling 0.00 0.00 0.00 0.00 0.00 0.00 51.33 99.33 67.67 41.33 1.00 2.00 51.00
IG+Lex 11.00 1.00 2.00 29.00 9.67 14.67 64.00 70.33 67.00 64.00 65.33 64.67 63.33
IG+Ling 16.67 1.00 2.00 31.00 6.33 10.67 63.00 72.67 67.67 65.00 63.33 64.00 63.33
IG+Lex+Ling 16.67 1.00 2.00 31.33 6.67 11.00 63.00 72.67 67.33 65.00 63.33 64.00 63.33
Table 7: Evaluation on a more realistic gold standard for one-layer experiments.
Epicurious (EPI) and based on the new gold standard (EPI-AVG). These results show that based on this
more realistic gold standard, averaging over the individual reviews results in an accuracy of 71.10%,
however with an upper bound of 100% instead of 82.57%. The results for the on-layer experiments are
not as sensitive to this new gold standard. The baseline, which loses 4%, shows that now, the task is
more difficult. All combinations involving IG selected features reach an accuracy of 63.33%, the same
as for the Epicurious gold standard (see table 3).
8 Conclusion and Future Work
In this study, we have explored various strategies for predicting recipe ratings based on user reviews.
This is a difficult task due to systemic reasons, user bias, as well as exogenous factors: 1) There are
user ratings that do not come with reviews, which means that they constitute hidden information for our
classifiers (so that we have an upper bound of 82.57% in overall accuracy). 2) Ratings are not entirely
supported by text, i.e., some ratings seem to be independent from the review text, due to user behavior
(e.g., people tend to give higher ratings in good weather than in bad weather (Bakhshi et al., 2014)).
Our experiments suggest that a two-layer approach, which predicts review-level ratings and aggregates
them for the recipe-level rating, reaches a higher accuracy than the one-layer approach that aggregates
all reviews and predicts on the recipe level directly, with a 3.6% absolute improvement in accuracy. If
we evaluate the two-layer results on a more realistic gold standard, we achieve an even higher increase
of 12.3%.
Our experiments also suggest that with feature selection, automatically generated n-gram features can
produce reasonable results without manually generated linguistic cues and lexicons, although the latter
does show a slight improvement, especially for minority classes.
A few directions can be taken for our future study: 1) Handling short reviews with better methods for
dealing with sparse features. 2) The feature selection is conducted within a binary classification scenario
(1- and 2-forks vs. 3- and 4-forks). It is worth exploring the effect of feature selection within four 1 vs.
all scenarios (i.e., 1-fork against the rest, etc.). 3) We will explore aspect-level sentiment classification
to provide a finer-grained summary of the recipes.
References
Michael Anderson and Jeremy Magruder. 2012. Learning from the crowd: Regression discontinuity estimates of
the effects of an online review database. The Economic Journal, 122:957?989.
Saeideh Bakhshi, Partha Kanuparthy, and Eric Gilbert. 2014. Demographics, weather and online reviews: A study
of restaurant recommendations. In Proceedings of the WWW conference, Seoul, Korea.
Koby Crammer and Yoram Singer. 2002. On the algorithmic implementation of multiclass kernel-based vector
machines. Journal of Machine Learning Research, 2:265?292.
20
Hang Cui, Vibhu Mittal, and Mayur Datar. 2006. Comparative experiments on sentiment classification for online
product reviews. In Proceedings of the 21st National Conference on Artificial Intelligence, AAAI?06, pages
1265?1270, Boston, Massachusetts.
George Forman. 2003. An extensive empirical study of feature selection metrics for text classification. Journal of
Machine Learning Research, 3:1289?1305.
Michael Gamon. 2004. Sentiment classification on customer feedback data: Noisy data, large feature vectors,
and the role of linguistic analysis. In Proceedings of the 20th International Conference on Computational
Linguistics (COLING), pages 841?847, Geneva, Switzerland.
Florent Garcin, Boi Faltings, Radu Jurca, and Nadine Joswig. 2009. Rating aggregation in collaborative filtering
systems. In Proceedings of the Third ACM Conference on Recommender Systems, pages 349?352, New York,
NY.
Moshe Koppel and Jonathan Schler. 2006. The importance of neutral examples in learning sentiment. Computa-
tional Intelligence Journal, 22:100?109. Special Issue on Sentiment Analysis.
Can Liu, Sandra Ku?bler, and Ning Yu. 2014. Feature selection for highly skewed sentiment analysis tasks. In
Proceedings of the Second Workshop on Natural Language Processing for Social Media (SocialNLP), Dublin,
Ireland.
Christopher Manning and Dan Klein. 2003. Optimization, maxent models, and conditional estimation without
magic. Tutorial at HLT-NAACL 2003 and ACL 2003.
Mary McGlohon, Natalie Glance, and Zach Reiter. 2010. Star quality: Aggregating reviews to rank products and
merchants. In Proceedings of Fourth International Conference on Weblogs and Social Media (ICWSM), pages
114?121, Washington, DC.
Vincent Ng, Sajib Dasgupta, and S. M. Niaz Arifin. 2006. Examining the role of linguistic knowledge sources
in the automatic identification and classification of reviews. In Proceedings of COLING/ACL, pages 611?618,
Sydney, Australia.
Bo Pang and Lillian Lee. 2005. Seeing stars: Exploiting class relationships for sentiment categorization with re-
spect to rating scales. In Proceedings of the 43rd AnnualMeeting on Association for Computational Linguistics,
ACL, pages 115?124, Ann Arbor, MI.
Bo Pang, Lillian Lee, and Shivakumar Vaithyanathan. 2002. Thumbs up?: Sentiment classification using machine
learning techniques. In Proceedings of the Conference on Empirical Methods in Natural Language Processing,
EMNLP, pages 79?86, Philadelphia, PA.
James Pennebaker, Roger Booth, and Martha Francis, 2014. Linguistic inqury and word count: LIWC 2007
operator?s manual. http://homepage.psy.utexas.edu/HomePage/Faculty/Pennebaker/
Reprints/LIWC2007_OperatorManual.pdf.
Kristina Toutanova, Dan Klein, Christopher Manning, and Yoram Singer. 2003. Feature-rich part-of-speech
tagging with a cyclic dependency network. In Proceedings of HLT-NAACL 2003, pages 252?259, Edmonton,
Canada.
Theresa Wilson, Janyce Wiebe, and Paul Hoffmann. 2005. Recognizing contextual polarity in phrase-level senti-
ment analysis. In Proceedings of the Conference on Empirical Methods in Natural Language Processing, pages
347?354, Vancouver, Canada.
Kiduk Yang, Ning Yu, and Hui Zhang. 2008. WIDIT in TREC2007 blog track: Combining lexicon-basedmethods
to detect opinionated blogs. In Proceedings of the 16th Text Retrieval Conference, Gaithersburg, MD.
Ning Yu and Sandra Ku?bler. 2011. Filling the gap: Semi-supervised learning for opinion detection across domains.
In Proceedings of the Fifteenth Conference on Computational Natural Language Learning, CoNLL, pages 200?
209, Portland, OR.
Ning Yu, Desislava Zhekova, Can Liu, and Sandra Ku?bler. 2013. Do good recipes need butter? Predicting user
ratings of online recipes. In Proceedings of the IJCAI Workshop on Cooking with Computers, Beijing, China.
Ning Yu. 2014. Exploring co-training strategies for opinion detection. Journal of the Association for Information
Science and Technology.
21
First Joint Workshop on Statistical Parsing of Morphologically Rich Languages
and Syntactic Analysis of Non-Canonical Languages, pages 1?14 Dublin, Ireland, August 23-29 2014.
Parsing German: How Much Morphology Do We Need?
Wolfgang Maier
Heinrich-Heine-Universita?t Du?sseldorf
Du?sseldorf, Germany
maierw@hhu.de
Sandra Ku?bler
Indiana University
Bloomington, IN, USA
skuebler@indiana.edu
Daniel Dakota
Indiana University
Bloomington, IN, USA
ddakota@indiana.edu
Daniel Whyatt
Indiana University
Bloomington, IN, USA
dwhyatt@indiana.edu
Abstract
We investigate how the granularity of POS tags influences POS tagging, and furthermore, how
POS tagging performance relates to parsing results. For this, we use the standard ?pipeline?
approach, in which a parser builds its output on previously tagged input. The experiments are
performed on two German treebanks, using three POS tagsets of different granularity, and six
different POS taggers, together with the Berkeley parser. Our findings show that less granularity
of the POS tagset leads to better tagging results. However, both too coarse-grained and too
fine-grained distinctions on POS level decrease parsing performance.
1 Introduction
German is a non-configurational language with a moderately free word order in combination with a case
system. The case of a noun phrase complement generally is a direct indicator of the phrase?s grammatical
function. For this reason, a morphological analysis seems to be a prerequisite for a syntactic analysis.
However, in computational linguistics, parsing was developed for English without the use of morpho-
logical information, and this same architecture is used for other languages, including German (Ku?bler et
al., 2006; Petrov and Klein, 2008). An easy way of introducing morphological information into parsing,
without modifying the architecture, is to attach morphology to the part-of-speech (POS) tagset. However,
this makes POS tagging more complex and thus more difficult.
In this paper, we investigate the following questions: 1) How well do the different POS taggers work
with tagsets of a varying level of morphological granularity? 2) Do the differences in POS tagger per-
formance translate into similar differences in parsing quality? Complementary POS tagging results and
preliminary parsing results have been published in German in Ku?bler and Maier (2013).
Our experiments are based on two different treebanks for German, TiGer (Brants et al., 2002) and
Tu?Ba-D/Z (Telljohann et al., 2012). Both treebanks are based on the same POS tagset, the Stuttgart-
Tu?bingen Tagset (STTS) (Schiller et al., 1995). We perform experiments with three variants of the tagset:
The standard STTS, the Universal Tagset (UTS) (Petrov et al., 2012) (a language-independent tagset),
and an extended version of the STTS that also includes morphological information from the treebanks
(STTSmorph). STTS consists of 54 tags, UTS uses 12 basic tags, and the morphological variants of the
STTS comprise 783 and 524 POS tags respectively. We use a wide range of POS taggers, which are
based on different strategies: Morfette (Chrupala et al., 2008) and RF-Tagger (Schmid and Laws, 2008)
are designed for large morphological tagsets, the Stanford tagger (Toutanova et al., 2003) is based on a
maximum entropy model, SVMTool (Gime?nez and Ma`rquez, 2004) is based on support vector machines,
TnT (Brants, 2000) is a Markov model trigram tagger, and Wapiti (Lavergne et al., 2010) a conditional
random field tagger. For our parsing experiments, we use the Berkeley parser (Petrov and Klein, 2007b;
Petrov and Klein, 2007a).
This work is licenced under a Creative Commons Attribution 4.0 International License. Page numbers and proceedings footer
are added by the organizers. License details: http://creativecommons.org/licenses/by/4.0/
1
Our findings for POS tagging show that Morfette reaches the highest accuracy on UTS and overall on
unknown words while TnT reaches the best performance for STTS and the RF-Tagger for STTSmorph.
These trends are stable across both treebanks. As for the parsing results, using STTS results in the best
accuracies. For TiGer, POS tags assigned by the parser perform better in combination with UTS and
STTSmorph. For TiGer in combination with STTS and all variants in Tu?Ba-D/Z, there are only minor
differences between the parser assigned POS tags and those by TnT.
The remainder of the article is structured as follows. In section 2, we review previous work. Section
3 presents the different POS tagsets. Section 4 describes our experimental setup. The POS tagging and
parsing results are discussed in the sections 5 and 6, respectively. Section 7 concludes the article.
2 Previous Work
In this section, we present a review of the literature that has previously examined the correlation of
POS tagging and parsing under different aspects. While this overview is not exhaustive, it presents the
major findings related to our work. The issues examined can be regarded under two orthogonal aspects,
namely, the parsing model used (data-driven or grammar-based), and the question of how to disambiguate
between various tags for a single word.
Some work has been done on investigating different tagsets for individual languages. Collins et al.
(1999) adapt the parser of Collins (1999) for the Czech Prague Dependency Treebank. Using an external
lexicon to reduce data sparseness for word forms did not result in any improvement, but adding case to the
POS tagset had a positive effect. Seddah et al. (2009) investigate the use of different parsers on French.
They also investigate two tagsets with different granularity and come to the conclusion that the finer
grained tagset leads to higher parser performance. The work that is closest to ours is work by Marton et
al. (2013), who investigate the optimal POS tagset for parsing Arabic. They come to the conclusion that
adding definiteness, person, number, gender, and lemma information to the POS tagset improve parsing
accuracy. Both Dehdari et al. (2011) and Sza?nto? and Farkas (2014) investigate automatic methods for
selecting the best subset of morphological features, the former for Arabic, the latter for Basque, French,
German, Hebrew, and Hungarian. However, note that Sza?nto? and Farkas (2014) used the data from the
SPMRL shared task 2013, which does not contain grammatical functions in the syntactic annotations.
Both approaches found improvements for subsets of morphological features.
Other works examine, also within a ?pipeline? method, possibilities for ambiguity reduction through
modification of tagsets, or of the lexicon by tagset reduction, or through word-clustering. Lakeland
(2005) uses lexicalized parsing a` la Collins (1999). Similarly to the more recent work by Koo et al.
(2008) or Candito and Seddah (2010), he addresses the question of how to optimally disambiguate for
parsing on the lexical level by clustering. A word cluster is thereby seen as an equivalence class of
words and assumes to a certain extent the function of a POS tag, but can be adapted to the training
data. Le Roux et al. (2012) address the issue of data sparseness on the lexical level with PCFG parsing
with the morphologically rich language Spanish. The authors use a reimplementation of the Berkeley
parser. They show that parsing results can be improved by simplifying the POS tagset, as well as by
lemmatization, since both approaches reduce data sparseness.
As already mentioned, a POS tag can be seen as an equivalence class of words. Since in the ?pipeline?
approach, the parse tree is built on POS tags, it is possible that a POS tagset is optimal from a linguistic
point of view, but that its behavior is not optimal with respect to parsing results, because relevant lexical
information is hidden from the parse tree by the POS tagset. While Koo et al. (2008) overcome this
deficit by automatically searching for ?better? clusters, other works copy certain lexical information into
the actual tree, e.g., by using grammatical function annotation (Versley, 2005; Versley and Rehbein,
2009). Seeker and Kuhn (2013) complement the ?pipeline? model (using a dependency parser (Bohnet,
2010)) by an additional component that uses case information as a filter for the parser. They achieve
improvements for Hungarian, German and Czech.
A number of works develop models for simultaneous POS tagging or morphological segmentation
and parsing. Based on work by Ratnaparkhi (1996) and Toutanova and Manning (2000), Chen and Kit
(2011) investigate disambiguation on the lexical level. They assume that local, i.e., sequential but not
2
tag description tag description tag description
NOUN noun PRON pronoun CONJ conjunction
VERB verb DET determiner, article PRT particle
ADJ adjective ADP preposition, postposition . punctuation
ADV adverb NUM numeral X everything else
Table 1: The 12 tags of the Universal Tagset.
hierarchical, features are decisive for the quality of POS tagging and note that a ?pipeline? model does not
take this into account since the parser effectively performs the POS disambiguation. On these grounds,
they present a factorized model for PCFG parsing which separates parsing into a discriminative lexical
model (with local features) and the actual parsing model, to be combined with a product-of-experts
(Hinton, 1999).
Particularly in the dependency parsing literature, combined models for simultaneous POS tagging and
parsing can be found. Research has concentrated on languages that require additional segmentation on
the word level, such as Chinese (Hatori et al., 2011) or Hebrew (Goldberg and Tsarfaty, 2008). A new
approach by Bohnet and Nivre (2012) was also evaluated on German. Results for POS tagging and
parsing of German by means of a constraint grammar can be found in Daum et al. (2003) as well as
in Foth et al. (2005). However, since these approaches are only marginally related to our approach, we
forego a further overview.
3 The Three Tagset Variants
In our experiments, we use three POS tagset variants: The standard Stuttgart-Tu?bingen Tagset (STTS),
the Universal Tagset (UTS) (Petrov et al., 2012), and an extended version of the STTS that also includes
morphological information from the treebanks (STTSmorph). Since the two treebanks differ in their
morphological annotation, in this variant, the tags differ between the two treebanks: For TiGer, we have
783 possible complex POS tags, and for Tu?Ba-D/Z, there are 524. By complex tags, we mean a combi-
nation of an STTS tag with the morphological tag. Also, note that not all of the possible combinations
are attested in the treebanks.
The UTS consists of 12 basic POS tags, shown in table 11. It was developed for multilingual appli-
cations, in which a common tagset is of importance, such as for a multilingual POS tagger. The UTS
only represents the major word classes. Thus, this tagset should result in a high POS tagging accuracy
since only major distinctions are made. However, it is unclear whether these coarse distinctions provide
enough information for a syntactic analysis.
The STTS is based on distributional regularities of German. It contains 54 tags and thus models more
fine grained distinctions than the UTS. For a list of tags, see Schiller et al. (1995). The finer distinctions
in STTS mostly concern word classes, but there is also a distinction between finite and infinite verbs.
This distinction is important for the syntactic analysis, especially in Tu?Ba-D/Z, but it can be difficult to
make by a POS tagger with a limited context.
The STTS can be extended by a morphological component. Both treebanks provide a morphological
analysis, but the analyses model different decisions. In TiGer, a set of 585 different feature combinations
is used, which can be combined from the features listed in table 2. The sentence in (1) gives an example
of the combination of the STTS and morphology, which are separated by the % sign. The feature ?
means that there are no morphological features for the given POS tag.
(1) Konzernchefs
NN%Nom.Pl.Masc
lehnen
VVFIN%3.Pl.Pres.Ind
den
ART%Acc.Sg.Masc
Milliarda?r
NN%Acc.Sg.Masc
als
APPR%?
US-Pra?sidenten
NN%Acc.Sg.Masc
ab
PTKVZ%?
/
$(%?
?Corporate CEOs disapprove of the billionaire as US president /?
1For a mapping from STTS to UTS, cf. https://code.google.com/p/universal-pos-tags/.
3
feature description
ambiguous: *
gender masculine (Masc), feminine (Fem), neuter (Neut)
gradation positive (Pos), comparative (Comp), superlative (Sup)
case nominative (Nom), genitive (Gen), dative (Dat), accusative (Akk)
mode indicative (Ind), conjunctive (Subj), imperative (Imp)
number singular (Sg), plural (Pl)
person 1., 2., 3.
tense present (Pres), past (Past)
Table 2: The morphological categories in TiGer.
feature description
ambiguous *
gender masculine (m), feminine (f), neuter (n)
case nominative (n), genitive (g), dative (d), accusative (a)
number singular (s), plural (p)
person 1., 2., 3.
tense present (s), past (t)
mode indicative (i), conjunctive (k)
Table 3: The morphological categories in Tu?Ba-D/Z.
Out of the 585 possible combinations of morphological features, 271 are attested in TiGer. In combi-
nation with the STTS, this results in 783 combinations of STTS and morphological tags. Out of those,
761 occur in the training set. However, we expect data sparseness during testing because of the high
number of possible tags. For this reason, we calculated which percentage of the tags in the development
and test set are known combinations. We found that 25% and 30%, respectively, do not occur in the train-
ing set. However, note that the number of tags in the development and test sets is considerably smaller
than the number of tags in the training set.
In Tu?Ba-D/Z, there are 132 possible morphological feature combinations which can be combined from
the features listed in table 3. The sentence in (2) gives an example of the combination of the STTS and
morphology.
(2) Aber
KON%?
Bremerhavens
NE%gsn
AfB
NE%nsf
fordert
VVFIN%3sis
jetzt
ADV%?
Untersuchungsausschu?
NN%asm
?But the Bremerhaven AfB now demands a board of inquiry?
Out of the 132 possible feature combinations, 105 are attested in Tu?Ba-D/Z. In combination with the
STTS, this results in 524 combinations of STTS and morphological tags. Out of those, 513 occur in the
training set. For the development and test set, we found that 16% and 18% respectively do not occur in
the training set. These percentages are considerably lower than the ones for TiGer.
Since the tagsets that include morphology comprise several hundred different POS tags, we expect
tagging to be more difficult, resulting in lower accuracies. We also expect that the Tu?Ba-D/Z tagset
is better suited for POS tagging than the TiGer set because of its smaller tagset size and its higher
coverage on the development and test set. It is, however, unknown whether this information can be used
successfully in parsing.
4
dieses
PDAT
Acc.Sg.Neut
Buch
NN
Acc.Sg.Neut
finden
VVFIN
3.Pl.Pres.Ind
vor
APPR
allem
PIS
Dat.Sg.Neut
diejenigen
PDS
Nom.Pl.*
schwierig
ADJD
Pos
,
$,
die
PRELS
Nom.Pl.*
am
PTKA
meisten
PIS
*.*.*
Bildung
NN
Acc.Sg.Fem
haben
VAFIN
3.Pl.Pres.Ind
,
$,
vor
APPR
allem
PIS
Dat.Sg.Neut
psychoanalytische
ADJA
Pos.Acc.Sg.Fem
Bildung
NN
Acc.Sg.Fem
(
$(
...
$(
)
$(
NK NK
NP
AC NK
PP
PM HD
AA
AC NK
PP
MO NK NK
NP
NK NK APP
NP
SB OAHD
S
MO NK RC
NP
OA HD SBMO
S
VROOT
Figure 1: A sentence from TiGer.
4 Experimental Setup
4.1 Treebanks
We use the treebanks TiGer (Brants et al., 2002), version 2.2, and Tu?Ba-D/Z (Telljohann et al., 2012),
release 8. Both are built on newspaper text, Frankfurter Rundschau for TiGer and taz for Tu?Ba-D/Z.
Both treebanks use the same POS tagset with only one minor difference in the naming of one POS label.
However, the treebanks differ considerably in the syntactic annotation scheme. While TiGer uses a very
flat annotation involving crossing branches, the annotations in Tu?Ba-D/Z are more hierarchical, and long
distance relations are modeled via grammatical function labels rather than via attachment. Figures 1 and
2 show examples.
For preprocessing, we follow the standard practices from the parsing community. In both treebanks,
punctuation and other material, such as parentheses, are not included in the annotation, but attached to a
virtual root node. We attach the respective nodes to the tree using the algorithm described by Maier et
al. (2012) so that every sentence corresponds to exactly one tree. In a nutshell, this algorithm uses the
left and right terminal neighbors as attachment targets. In TiGer, we then remove the crossing branches
using a two-stage process. In a first step, we apply the transformation described by Boyd (2007). This
transformation introduces a new non-terminal for every continuous block of a discontinuous constituent.
We keep a flag on each of the newly introduced nodes that indicates if it dominates the head daughter of
the original discontinuous node. Subsequently, we delete all those nodes for which this flag is false.2
For both POS tagging and parsing, we use the same split for training, development, and test. We use
the first half of the last 10 000 sentences in TiGer for development and the second half for testing. The
remaining 40 472 sentences are used for training. Accordingly, in order to ensure equal conditions, we
use the first 40 472 sentences in Tu?Ba-D/Z for training, and the first and second half of the following
10 000 sentences for development and testing. The remaining sentences in Tu?Ba-D/Z are not used.
4.2 POS Taggers
We employ six different POS tagger, each of them using a different tagging technique. Morfette (Chru-
pala et al., 2008), in its current implementation based on averaged Perceptron, is a tool designed for the
annotation of large morphological tagsets. Since none of the other POS taggers have access to lemmas,
we only provide full word forms to Morfette as well, which may inhibit its generalization capability.
The RF-Tagger (Schmid and Laws, 2008) assumes a tagset in a factorized version. I.e., the POS tag
VVFIN%3sis in sentence (2) would be represented as VVFIN.3.s.i.s, where the dots indicate different
subcategories, which are then treated separately by the POS tagger. It is based on a Markov model, but
the context size is determined by a decision tree. The Stanford tagger (Toutanova et al., 2003) is based
on a maximum entropy model, and SVMTool (Gime?nez and Ma`rquez, 2004) is based on support vector
machines. TnT (Brants, 2000; Brants, 1998), short for trigrams and tags, is a Markov model POS tagger.
2An implementation of all transformations is available at http://github.com/wmaier/treetools.
5
Beides
PIS
nsn
sind
VAFIN
3pis
Liedformen
NN
npf
,
$,
die
PRELS
np*
am
APPRART
dsn
Ende
NN
dsn
des
ART
gsn
achtzehnten
ADJA
gsn
Jahrhunderts
NN
gsn
die
ART
apn
ersten
ADJA
apn
Anzeichen
NN
apn
eines
ART
gsm
Verschmelzungsprozesses
NN
gsm
zeigen
VVFIN
3pis
.
$.
HD
NX
HD
VXFIN
HD
NX
HD
NX
HD
NX
HD
ADJX
HD
ADJX
- HD
NX
HD
VXFIN
PRED
VF
HD
LK
ON
MF
ON
C
- - HD
NX
- - HD
NX
HD
VC
HD -
NX
HD -
NX
- HD
PX
V-MOD OA
MF
- - -
R-SIMPX
ON-MO|
NF
- - - -
SIMPX
VROOT
Figure 2: A sentence from Tu?Ba-D/Z.
It uses an interpolation between uni-, bi- and trigrams as probability model. TnT has a sophisticated
mechanism for tagging unknown words. We also use Wapiti (Lavergne et al., 2010) a conditional ran-
dom field tagger. Since conditional random fields were developed for sequence tagging, this POS tagger
is expected to perform well.
All POS taggers are used with default settings. For the Stanford tagger, we use the bi-directional model
based on a context of 5 words. For SVMTool, we use the processing from left to right in combination
with features based on word and POS trigrams and word length, prefix and suffix information. Wapiti is
trained on uni-, bi-, and trigrams. Features used in training consist of tests concerning the alphanumeric,
upper or lower case characteristics, prefixes and suffixes of length three, and all possible POS tags for a
word.
For POS tagging evaluation, we use the script provided by TnT since it also allows us to calculate
accuracy on known and unknown words.
4.3 Parser
We use the Berkeley parser (Petrov and Klein, 2007b; Petrov and Klein, 2007a). We chose the Berke-
ley parser because we are aware of the fact that there are considerable differences in the tagset sizes,
which a plain PCFG parser cannot process successfully. The Berkeley parser split/merge capabilities
provide a way of smoothing over these differences. For parser evaluation, we use our own implementa-
tion of the PARSEVAL metrics.3 We report labeled precision (LP), labeled recall (LR), and the labeled
F-score(LF1). Note that the labeled evaluation does not only look at constituent labels but also at gram-
matical functions attached to the constituents, e.g. NP-SBJ for a subject NP. This is a considerably more
difficult task for German because of the relatively free word order. We also provide POS tagging ac-
curacy in the parse trees since the Berkeley parser adapts POS tags from the input if they do not fit its
syntax model.
5 POS Tagging Results
5.1 The Three Tagset Variants
The results for the POS tagging evaluation are shown in table 4. We are aware of the fact that the results
are not directly comparable across the different POS tagsets and across different treebanks since the
3The implementation is available at http://github.com/wmaier/evalb-lcfrs. Note that we evaluate the trees
as they are, i.e., we do not collapse or ignore tags.
6
TiGer Tu?Ba-D/Z
Tagset Tagger dev test dev test
UTS Morfette 98.51 98.09 98.25 98.49
RF-Tagger 97.89 97.41 97.69 97.96
Stanford 97.88 96.83 97.11 97.26
SVMTool 98.54 98.01 98.09 98.28
TnT 97.94 97.48 97.72 97.92
Wapiti 97.54 96.67 97.47 97.80
STTS Morfette 94.12 93.23 92.95 93.41
RF-Tagger 97.04 96.24 96.68 96.84
RF-Tagger (fact.) 97.05 96.26 96.69 96.85
Stanford 96.26 95.15 95.63 95.79
SVMTool 97.06 96.22 96.46 96.69
TnT 97.15 96.29 96.92 97.00
Wapiti 92.93 91.62 90.99 91.81
STTSmorph Morfette 82.71 80.10 81.19 82.26
RF-Tagger 86.56 83.90 85.68 86.31
Stanford ? ? ? ?
SVMTool 82.47 79.53 80.33 81.31
TnT 85.77 82.77 84.67 85.45
Wapiti 79.83 75.92 77.27 78.29
STTSmorph? STTS TnT 97.08 96.15 96.78 96.82
Table 4: POS tagging results using three versions of the German POS tagset and two treebanks.
corresponding tagging tasks differ in the level of difficulty. Any interpretation must therefore be taken
with a grain of salt, but we think that it is important to evaluate POS tagging on its own, especially
since it is not always the case that a larger label set automatically results in a more difficult task. The
results show that UTS, i.e., the variant with the least information, results in the highest POS tagging
results, between 96.67% and 98.54%. In tagging with the STTS, we reach a lower accuracy between
90.99% and 97.15%. When we include the morphological information, we reach considerably lower
results, between 75.92% and 86.56%. In other words, this shows that the more information there is in
the POS tagset, the harder the POS tagging task is. POS tagging with morphological information is the
most difficult task. We also see that there are no results for the Stanford POS tagger in the morphological
setting. We were unable to run these experiments, even when we used a high-memory cluster with access
to 120g of memory. It seems that the Stanford tagger is incapable of handling the large tagset sizes in the
setting using morphological information. Additionally, our assumption that the morphological tagset of
Tu?Ba-D/Z is less difficult to annotate because of its smaller tagset size is not borne out. The variation of
results on Tu?Ba-D/Z is often less than between the treebanks, across POS taggers.
If we compare the result of the different POS taggers, we see that for the different tagset variants,
different POS taggers perform best: For UTS, surprisingly, Morfette reaches the highest results, with
the exception of the TiGer development set, for which SVMTool performs slightly better. In general,
SVMTool is very close in accuracy to Morfette for this tagset variant. For STTS, TnT outperforms
all other POS taggers, and SVMTool is a close second. For STTSmorph, the RF-Tagger reaches the
highest results. For the RF-Tagger in combination with the STTS, we performed 2 experiments, one
using the standard STTS and one in which the STTS tags are factored, such that VVFIN is factored
into V.V.FIN. The latter variant reaches minimally higher results. In all settings, Wapiti is the weakest
approach; the difference between Wapiti and the best performing POS tagger reaches 6-7 percent points
for STTSmorph. This is rather surprising given that POS tagging is a typical sequence tagging task, for
which CRFs were developed.
Another fact worth mentioning is that there are considerable differences in POS tagging accuracy
7
TiGer Tu?Ba-D/Z
dev test dev test
Tagset Tagger Known Unkn. Known Unkn. Known Unkn. Known Unkn.
UTS Morfette 98.66 96.74 98.32 96.04 98.54 95.46 98.69 96.39
RF-Tagger 98.15 94.64 97.82 93.65 98.28 92.02 98.35 93.85
Stanford 99.05 91.85 98.78 87.70 98.94 79.30 98.92 79.69
SVMTool 98.81 95.26 98.41 94.45 98.63 92.89 98.66 94.27
TnT 98.06 96.50 97.67 95.74 98.07 94.28 98.25 95.25
Wapiti 98.94 80.71 98.51 80.04 98.68 85.79 98.83 86.91
STTS Morfette 94.42 90.60 93.56 90.24 93.17 90.83 93.59 91.57
RF-Tagger 97.80 87.92 97.30 86.71 97.62 87.59 97.73 87.52
RF-T. (fact.) 97.78 88.21 97.28 87.09 97.63 87.65 97.73 87.51
Stanford 98.16 73.56 97.75 71.60 97.96 73.04 97.97 72.64
SVMTool 97.86 87.41 97.26 86.82 97.50 86.47 97.60 87.05
TnT 97.80 89.25 97.21 87.95 97.65 89.78 97.72 89.33
Wapiti 94.51 73.78 93.48 74.83 93.21 69.45 93.71 71.74
STTSmorph Morfette 84.30 63.50 82.43 58.98 82.91 64.53 83.95 64.42
RF-Tagger 88.34 65.09 86.38 61.47 87.70 66.20 88.25 65.80
SVMTool 84.67 55.89 82.40 53.58 82.87 55.81 83.61 57.01
TnT 87.62 63.41 85.55 57.65 86.91 62.95 87.61 62.55
Wapiti 83.91 30.51 81.43 26.08 82.05 31.05 82.83 30.29
Table 5: Results for the different POS taggers for known and unknown words.
between the development and test set in both treebanks. For both STTS variants, these differences are
often larger than the differences between individual POS taggers on the same data set. Thus, in the
STTSmorph setting, the difference for TnT between the development and test set in TiGer is 3 percent
points while the differences between TnT and SVMTool and Morfette respectively are less.
One last question that we investigated concerns the effect of the morphological information on POS
tagging accuracy. We know that when we use morphological information, the POS tagging task is more
difficult. However, it is possible that the mistakes that occur concern only the morphological information
while the POS tags minus morphology may be predicted with equal or even higher accuracy. In order to
investigate this problem, we used the STTSmorph output of TnT and deleted all the morphological infor-
mation, thus leaving only the STTS POS tags. We then evaluated these POS tags against the gold STTS
tags. The results are shown in the last row in table 4, marked as STTSmorph? STTS. A comparison of
these results with the TnT results for STTS shows that the POS tagger reaches a higher accuracy when
trained directly on STTS rather than on STTSmorph, with a subsequent deletion of the morphological
information. This means that the morphological information is not useful but rather harmful in POS
tagging.
5.2 Evaluating on Known and Unknown Words
In a next set of experiments, we investigate how the different POS taggers perform on known and un-
known words. We define all words from the development and test set as known if the appear in the
training set. If they do not, they are considered unknown words. Note, however, that even if a word is
known, we still may not have the full set of POS tags in its ambiguity set. This is especially relevant for
the larger tagsets where the ambiguity rate per word is higher.
In TiGer, 7.64% of the words in the development set are unknown, 9.96% in the test set. In Tu?Ba-D/Z,
9.36% of the words in the development set are unknown, 8.64% in the test set. Note that this corresponds
to the levels of accuracy in table 4.
The results of the evaluation on known and unknown words are shown in table 5. These results show
that the Stanford POS tagger produces the highest accuracies for known words for UTS and STTS (note
8
TiGer Tu?Ba-D/Z
Morphology dev test dev test
STTS 97.15 96.29 96.92 97.00
STTSmorph 85.77 82.77 84.67 85.45
agreement 86.04 83.08 84.96 85.77
case 88.10 86.47 87.48 87.91
number 95.60 94.19 95.24 95.41
number + person 95.55 94.11 95.18 95.24
verbal features 97.03 96.02 96.55 96.44
Table 6: The results for TnT with different morphological variants.
that it could not be used for STTSmorph). For unknown words, Morfette reaches the highest results for
UTS and STTS, with TnT reaching the second highest results. For STTSmorph, the RF-Tagger reaches
the highest accuracy on both known and unknown words. The results for the RF-Tagger for STTS show
that the factored version performs better on unknown words than the standard one. It is also noticeable
that Wapiti, the CRF POS tagger, has the lowest performance on unknown words: For UTS, the results
are 10-16 percent points lower that the ones by Morfette; for STTS, the difference reaches 16-23 percent
points, and for STTSmorph, about 35 percent points. This shows that in order to reach a reasonable
accuracy rate, Wapiti?s unknown word handling model via regular expressions must be extended further.
However, note that Wapiti?s results on known words are also lower than the best performing system?s,
thus showing that CRFs are less well suited for POS tagging than originally expected.
5.3 Evaluating Morphological Variants
In this set of experiments, we investigate whether there are subsets of STTSmorph that are relevant for
parsing and that would allow us to reach higher POS tagging and parsing accuracies than on the full set
of morphological features. The subsets were chosen manually to model our intuition on which features
may be relevant for parsing. We investigate the following subsets: all agreement features, case only,
number only, number + person, and only verbal features. In this set of experiments, we concentrate on
TnT because it has been shown to be the most robust across the different settings. The results of these
experiments are shown in table 6. For comparison, we also list the results for the original STTS and
STTSmorph settings from table 4.
The results show that there are morphological subsets that allow reliable POS accuracies: If we use
verbal features, we reach results that are only slightly below the STTS results. For the subset using
number + person features, the difference is around 2 percent points. However, all subsets perform worse
than the STTS. The subsets that include case or all agreement features, which are the subsets most
relevant for parsing, reach accuracies that are slightly above STTSmorph, but still more than 10 percent
points below the original STTS.
6 Parsing Results
In this section, we report parsing results for TiGer in table 7 and for Tu?Ba-D/Z in table 8. We again
use the three POS tag variants as input, and we report results for 1) gold POS tags, 2) for tags assigned
by TnT, which proved to be the most reliable POS tagger across different settings, and 3) for POS tags
assigned by the Berkeley parser. Since the parser is known to alter POS tags given as input if they do not
fit the syntax model, we also report POS tagging accuracy. Note that this behavior of the parser explains
why we do not necessarily have a 100% POS tagging accuracy in the gold POS tag setting.
A first glance at the POS tagging results in the gold POS setting in tables 7 and 8 shows that for UTS
and STTS, the decrease in accuracy is minimal. In other words, the parser only changes a few POS tags.
When we compared the differences in POS tags between the output of the parser and the gold standard,
we found that most changes constitute a retagging of common nouns (NN) as proper nouns (NE). In
the STTSmorph setting, POS tagging accuracy is considerably lower, showing that the parser changed
9
dev test
Tag source Tagset POS LP LR LF1 POS LP LR LF1
gold UTS 100.00 77.97 77.23 77.60 99.97 71.80 70.26 71.02
STTS 99.98 78.09 77.55 77.82 99.97 71.90 71.11 71.50
STTSmorph 91.67 74.72 75.21 74.97 88.70 67.68 67.99 67.83
parser UTS 98.55 77.75 76.84 77.29 97.83 71.13 69.50 70.30
STTS 97.25 78.03 77.19 77.60 96.18 71.16 69.84 70.49
STTSmorph 83.06 75.53 75.24 75.39 79.05 67.67 67.02 67.34
TnT UTS 96.56 74.16 73.28 73.72 96.01 68.37 66.78 67.57
STTS 97.26 78.03 77.19 77.60 96.19 71.16 69.84 70.49
STTSmorph 77.94 73.06 72.69 72.88 75.05 65.43 64.78 65.10
Table 7: Parsing results for TiGer.
dev test
Tag source Tagset POS LP LR LF1 POS LP LR LF1
gold UTS 99.98 81.39 81.12 81.26 99.98 82.24 81.94 82.09
STTS 100.00 83.60 83.58 83.59 99.99 84.54 84.46 84.50
STTSmorph 89.75 82.27 78.85 80.53 90.55 83.57 79.91 81.70
parser UTS 98.35 79.97 79.61 79.79 98.58 81.07 80.66 80.87
STTS 97.20 81.84 81.65 81.74 97.39 82.93 82.78 82.85
STTSmorph 81.03 80.85 77.22 78.99 81.68 81.89 78.20 80.00
TnT UTS 98.35 79.97 79.61 79.79 98.58 81.07 80.66 80.87
STTS 97.21 81.84 81.65 81.74 97.39 82.93 82.78 82.85
STTSmorph 81.03 80.85 77.22 78.99 81.68 81.89 78.20 80.00
Table 8: Parsing results for Tu?Ba-D/Z.
between 8% (UTS) and 25% (STTSmorph) of the POS tags. This is a clear indication that the parser
suffers from data sparseness and has to adapt the POS tags in order to be able to parse the sentences.
We need to compare the POS tagging results based on automatically assigned POS tags; they show
the following trends: For TiGer in the STTS setting, the results based on TnT and on the parser are
very similar. For UTS and STTSmorph, the POS tags assigned by the parser reach a higher accuracy.
For Tu?Ba-D/Z, all the results are extremely similar.4 If we compare the POS tagging accuracies of the
parsed sentences and the accuracies of the original POS tags assigned by the tagger, we see that for
TiGer, the accuracy decreases by approximately 1.5 percent points for UTS, 0.1 percent points for STTS
and 9 percent points for STTSmorph. For Tu?Ba-D/Z, the loss in the STTSmorph setting is smaller, at
around 4 percent points. For UTS and STTS, there is a small improvement in POS tagging accuracy.
When we look at the parsing results, we see that gold POS tags always lead to the highest parsing
results, across treebanks and POS tagsets. We also see that across all conditions, the parsing results
for STTS are the highest. For TiGer, the results for UTS are only marginally lower, which seems to
indicate that some of the distinctions made in STTS are important, but not all of them. For Tu?Ba-D/Z,
the loss for UTS is more pronounced, at around 2 percent points. This suggests that for the Tu?Ba-D/Z
annotation scheme, the more fined grained distinctions in STTS are more important than for UTS. One
example would be the distinction between finite and infinite verbs, which is directly projected to the verb
group in Tu?Ba-D/Z (see the verb groups VXFIN and VXINF in figure 2). Note also that for Tu?ba-D/Z,
the parsing based on automatic POS tagging outperforms parsing based on gold UTS tags, thus again
confirming how important the granularity of STTS is for this treebank.
When we look at the parsing results for STTSmorph, it is obvious that this POS tagset variant leads
to the lowest parsing results, even in the gold POS setting. This means that even though agreement
4Because of the (almost) identical results, we checked our results with extreme care but could not find any errors.
10
information should be helpful for assigning grammatical functions, the information seems to be presented
to the parser in a form that it cannot exploit properly. We also performed preliminary experiments using
the morphological variants discussed in section 5.3 in parsing, but the results did not improve over the
STTS baseline.
When we compare the two sets of automatically assigned POS tags for TiGer, we see that the difference
in POS accuracy for UTS is 1.8 percent points while the difference in F-scores is 2.5 percent points. This
means that TnT tagging errors have a more negative impact on parsing quality than those in the POS
tags assigned by the parser itself. For STTSmorph, the difference is more pronounced in POS accuracy
(4 points as opposed to 2.2 in F-scores), which means that for STTSmorph, TnT errors are less harmful
than for UTS. We assume that this is the case because in many instances, the POS tags themselves will
be correct, and the error occurs in the morphological features. For Tu?Ba-D/Z, the difference between
UTS and STTSmorph is marginal; this is due to the fact that UTS results are much lower than for TiGer.
Thus, the difference between STTS and STTSmorph is stable across both treebanks.
A more in-depth investigation of the results shows that the aggregate EVALB score tends to hide indi-
vidual large differences between single sentences in the results. For example, in the results for the TiGer
dev set with gold POS tags, there are 119 sentences in STTSmorph which have an STTS counterpart with
an F-score that is at least 50 points higher. However, there are also 28 sentences for which the opposite
holds, i.e., for which STTSmorph wins over STTS. In Tu?Ba-D/Z, there are fewer sentences with such
extreme differences. There are 28 / 11 sentences with a score difference of 50 points or more between
STTS and STTSmorph in the Tu?Ba-D/Z development set, and vice versa. A manual inspection of the
results indicates that in some cases, the morphology is passed up into the tree and thereby contributes
to a correct grammatical function of a phrase label (such as for case information) while in other cases,
it causes an over-differentiation of grammatical functions and thereby has a detrimental effect (such as
for PPs, which are attached incorrectly). In the case of Tu?Ba-D/Z, this leads to trees with substructures
that are too flat, while in the case of TiGer, it leads to more hierarchical substructures. This finding is
corroborated by a further comparison of the number of edges produced by the parser, which reveals that
for the case of TiGer, the number of edges grows with the size of the POS tagset, while for the case of
Tu?Ba-D/Z, the number of edges produced with STTS is higher than with UTS, but drops considerably
for STTSmorph. The large differences in results for single sentences look more pronounced in TiGer due
to the average number of edges per sentence (7.60/8.72 for dev/test gold), which is much lower than for
Tu?Ba-D/Z (20.93/21.16 for dev/test gold); in other words, because of its flat annotation. We suspect that
there is data sparsity involved, but this needs to be investigated further.
7 Conclusion and Future Work
We have investigated how the granularity of POS tags influences POS tagging, and furthermore, how POS
tagging performance relates to parsing results, on the basis of experiments on two German treebanks,
using three POS tagsets of different granularity (UTS, STTS, and STTSmorph), and six different POS
taggers, together with the Berkeley parser.
We have shown that the tagging task is easier the less granular the tagset is. Furthermore, we have
shown that both too coarse-grained and too fine-grained distinctions on POS level hurt parsing perfor-
mance. The results for the morphological tagset are thus in direct contrast to previous studies, such as
(Dehdari et al., 2011; Marton et al., 2013; Seddah et al., 2009; Sza?nto? and Farkas, 2014), which show
for different languages that adding morphological information increases parsing accuracy. Surprisingly,
given the STTS tagset, the Berkeley parser itself was able to deliver a POS tagging performance which
was almost identical to the performance of the best tagger, TnT. Additionally, we can conclude that the
choice of the tagset and of the best POS tagger for a given treebank does not only depend on the language
but also on the annotation scheme.
In future work, we will undertake a systematic investigation of tag clustering methods in order to find a
truly optimally granular POS tagset. We will also investigate the exact relation between annotation depth
and the granularity of the POS tagset with regard to parsing accuracy and data sparsity. The latter may
elucidate reasons behind the differences between our results and those of the studies mentioned above.
11
References
Bernd Bohnet and Joakim Nivre. 2012. A transition-based system for joint part-of-speech tagging and labeled
non-projective dependency parsing. In Proceedings of the Joint Conference on Empirical Methods in Natural
Language Processing and Computational Natural Language Learning (EMNLP-CoNLL), pages 1455?1465,
Jeju Island, Korea.
Bernd Bohnet. 2010. Very high accuracy and fast dependency parsing is not a contradiction. In Proceedings of
the 23rd International Conference on Computational Linguistics (IJCNLP), pages 89?97, Beijing, China.
Adriane Boyd. 2007. Discontinuity revisited: An improved conversion to context-free representations. In Pro-
ceedings of The Linguistic Annotation Workshop (LAW) at ACL 2007, pages 41?44, Prague, Czech Republic.
Sabine Brants, Stefanie Dipper, Silvia Hansen, Wolfgang Lezius, and George Smith. 2002. The TIGER treebank.
In Proceedings of the First Workshop on Treebanks and Linguistic Theories (TLT), pages 24?41, Sozopol,
Bulgaria.
Thorsten Brants, 1998. TnT?A Statistical Part-of-Speech Tagger. Universita?t des Saarlandes, Computational
Linguistics, Saarbru?cken, Germany.
Thorsten Brants. 2000. TnT?a statistical part-of-speech tagger. In Proceedings of the 1st Conference of the North
American Chapter of the Association for Computational Linguistics and the 6th Conference on Applied Natural
Language Processing (ANLP/NAACL), pages 224?231, Seattle, WA.
Marie Candito and Djame? Seddah. 2010. Parsing word clusters. In Proceedings of the NAACL HLT 2010 First
Workshop on Statistical Parsing of Morphologically-Rich Languages, pages 76?84, Los Angeles, CA.
Xiao Chen and Chunyu Kit. 2011. Improving part-of-speech tagging for context-free parsing. In Proceedings of
5th International Joint Conference on Natural Language Processing (IJCNLP), pages 1260?1268, Chiang Mai,
Thailand.
Grzegorz Chrupala, Georgiana Dinu, and Josef van Genabith. 2008. Learning morphology with Morfette. In
Proceedings the Fifth International Conference on Language Resources and Evaluation (LREC), Marrakech,
Morocco.
Michael Collins, Jan Hajic?, Lance Ramshaw, and Christoph Tillmann. 1999. A statistical parser for Czech. In
Proceedings of the 37th Annual Meeting of the Association for Computational Linguistics, pages 505?512,
College Park, MD.
Michael Collins. 1999. Head-Driven Statistical Models for Natural Language Parsing. Ph.D. thesis, University
of Pennsylvania, Philadelphia, PA.
Michael Daum, Kilian Foth, and Wolfgang Menzel. 2003. Constraint based integration of deep and shallow
parsing techniques. In Proceedings of the 10th Conference of the European Chapter of the Association for
Computational Linguistics (EACL), Budapest, Hungary.
Jon Dehdari, Lamia Tounsi, and Josef van Genabith. 2011. Morphological features for parsing morphologically-
rich languages: A case of Arabic. In Proceedings of the Second Workshop on Statistical Parsing of Morpholog-
ically Rich Languages, pages 12?21, Dublin, Ireland.
Kilian Foth, Michael Daum, and Wolfgang Menzel. 2005. Parsing unrestricted German text with defeasible
constraints. In H. Christiansen, P. R. Skadhauge, and J. Villadsen, editors, Constraint Solving and Language
Processing, pages 140?157. Springer.
Jesu?s Gime?nez and Llu??s Ma`rquez. 2004. SVMTool: A general POS tagger generator based on Support Vector
Machines. In Proceedings of the 4th International Conference on Language Resources and Evaluation (LREC),
pages 43?46, Lisbon, Portugal.
Yoav Goldberg and Reut Tsarfaty. 2008. A single generative model for joint morphological segmentation and
syntactic parsing. In Proceedings of The 46th Annual Meeting of the Association for Computational Linguistics:
Human Language Technologies (ACL:HLT), pages 371?379, Columbus, OH.
Jun Hatori, Takuya Matsuzaki, Yusuke Miyao, and Jun?ichi Tsujii. 2011. Incremental joint POS tagging and
dependency parsing in Chinese. In Proceedings of 5th International Joint Conference on Natural Language
Processing (IJCNLP), pages 1216?1224, Chiang Mai, Thailand.
Geoffrey Hinton. 1999. Products of experts. In Proceedings of the Ninth International Conference on Artificial
Neural Networks, pages 1?6, Stockholm, Sweden.
12
Terry Koo, Xavier Carreras, and Michael Collins. 2008. Simple semi-supervised dependency parsing. In Pro-
ceedings of The 46th Annual Meeting of the Association for Computational Linguistics: Human Language
Technologies (ACL:HLT), pages 595?603, Columbus, OH.
Sandra Ku?bler and Wolfgang Maier. 2013. U?ber den Einfluss von Part-of-Speech-Tags auf Parsing-Ergebnisse.
Journal for Language Technology and Computational Linguistics. Special Issue on ?Das Stuttgart-Tu?bingen
Wortarten-Tagset ? Stand und Perspektiven?, 28(1):17?44.
Sandra Ku?bler, Erhard W. Hinrichs, and Wolfgang Maier. 2006. Is it really that difficult to parse German? In
Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages
111?119, Sydney, Australia.
Corrin Lakeland. 2005. Lexical Approaches to Backoff in Statistical Parsing. Ph.D. thesis, University of Otago,
New Zealand.
Thomas Lavergne, Olivier Cappe?, and Franc?ois Yvon. 2010. Practical very large scale CRFs. In Proceedings
the 48th Annual Meeting of the Association for Computational Linguistics (ACL), pages 504?513, Uppsala,
Sweden.
Joseph Le Roux, Benoit Sagot, and Djame? Seddah. 2012. Statistical parsing of Spanish and data driven lemma-
tization. In Proceedings of the ACL 2012 Joint Workshop on Statistical Parsing and Semantic Processing of
Morphologically Rich Languages, pages 55?61, Jeju, Republic of Korea.
Wolfgang Maier, Miriam Kaeshammer, and Laura Kallmeyer. 2012. Data-driven PLCFRS parsing revisited:
Restricting the fan-out to two. In Proceedings of the Eleventh International Conference on Tree Adjoining
Grammars and Related Formalisms (TAG+11), Paris, France.
Yuval Marton, Nizar Habash, and Owen Rambow. 2013. Dependency parsing of Modern Standard Arabic with
lexical and inflectional features. Computational Linguistics, 39(1):161?194.
Slav Petrov and Dan Klein. 2007a. Improved inference for unlexicalized parsing. In Proceedings of Human Lan-
guage Technologies 2007: The Conference of the North American Chapter of the Association for Computational
Linguistics, pages 404?411, Rochester, NY.
Slav Petrov and Dan Klein. 2007b. Learning and inference for hierarchically split PCFGs. In Proceedings of
AAAI (Nectar Track), Vancouver, Canada.
Slav Petrov and Dan Klein. 2008. Parsing German with language agnostic latent variable grammars. In Proceed-
ings of the ACL Workshop on Parsing German, pages 33?39, Columbus, OH.
Slav Petrov, Dipanjan Das, and Ryan McDonald. 2012. A universal part-of-speech tagset. In Proceedings of the
Eight International Conference on Language Resources and Evaluation (LREC), Istanbul, Turkey.
Adwait Ratnaparkhi. 1996. A maximum entropy model for part-of-speech tagging. In Proceedings of the Empiri-
cal Methods in Natural Language Processing Conference (EMNLP), pages 133?142, Philadelphia, PA.
Anne Schiller, Simone Teufel, and Christine Thielen. 1995. Guidelines fu?r das Tagging deutscher Textkorpora mit
STTS. Technical report, Universita?t Stuttgart and Universita?t Tu?bingen.
Helmut Schmid and Florian Laws. 2008. Estimation of conditional probabilities with decision trees and an
application to fine-grained POS tagging. In Proceedings of the 22nd International Conference on Computational
Linguistics (COLING), pages 777?784, Manchester, UK.
Djame? Seddah, Marie Candito, and Beno??t Crabbe?. 2009. Cross parser evaluation: A French Treebanks study.
In Proceedings of the 11th International Conference on Parsing Technologies (IWPT), pages 150?161, Paris,
France.
Wolfgang Seeker and Jonas Kuhn. 2013. Morphological and syntactic case in statistical dependency parsing.
Computational Linguistics, 39(1):23?55.
Zsolt Sza?nto? and Richa?rd Farkas. 2014. Special techniques for constituent parsing of morphologically rich lan-
guages. In Proceedings of the 14th Conference of the European Chapter of the Association for Computational
Linguistics (EACL), pages 135?144, Gothenburg, Sweden.
Heike Telljohann, Erhard W. Hinrichs, Sandra Ku?bler, Heike Zinsmeister, and Kathrin Beck, 2012. Stylebook for
the Tu?bingen Treebank of Written German (Tu?Ba-D/Z). Seminar fu?r Sprachwissenschaft, Universita?t Tu?bingen,
Germany.
13
Kristina Toutanova and Christopher D. Manning. 2000. Enriching the knowledge sources used in a maximum
entropy part-of-speech tagger. In Proceedings of the Joint SIGDAT Conference on Empirical Methods in Natural
Language Processing and Very Large Corpora (EMNLP/VLC), Hong Kong.
Kristina Toutanova, Dan Klein, Christopher Manning, and Yoram Singer. 2003. Feature-rich part-of-speech
tagging with a cyclic dependency network. In Proceedings of the Human Language Technology Conference of
the North American Chapter of the Association for Computational Linguistics (HLT-NAACL), pages 252?259,
Edmonton, Canada.
Yannick Versley and Ines Rehbein. 2009. Scalable discriminative parsing for German. In Proceedings of the 11th
International Conference on Parsing Technologies (IWPT), pages 134?137, Paris, France.
Yannick Versley. 2005. Parser evaluation across text types. In Fourth Workshop on Treebanks and Linguistic
Theories (TLT 2005), Barcelona, Spain.
14
