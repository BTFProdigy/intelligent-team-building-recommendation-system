Proceedings of SIGDIAL 2010: the 11th Annual Meeting of the Special Interest Group on Discourse and Dialogue, pages 51?54,
The University of Tokyo, September 24-25, 2010. c?2010 Association for Computational Linguistics
Middleware for Incremental Processing in Conversational Agents
David Schlangen?, Timo Baumann?, Hendrik Buschmeier?, Okko Bu??
Stefan Kopp?, Gabriel Skantze?, Ramin Yaghoubzadeh?
?University of Potsdam ?Bielefeld University ?KTH, Stockholm
Germany Germany Sweden
david.schlangen@uni-potsdam.de
Abstract
We describe work done at three sites on
designing conversational agents capable of
incremental processing. We focus on the
?middleware? layer in these systems, which
takes care of passing around and maintain-
ing incremental information between the
modules of such agents. All implementa-
tions are based on the abstract model of
incremental dialogue processing proposed
by Schlangen and Skantze (2009), and the
paper shows what different instantiations
of the model can look like given specific
requirements and application areas.
1 Introduction
Schlangen and Skantze (2009) recently proposed
an abstract model of incremental dialogue process-
ing. While this model introduces useful concepts
(briefly reviewed in the next section), it does not
talk about how to actually implement such sys-
tems. We report here work done at three different
sites on setting up conversational agents capable
of incremental processing, inspired by the abstract
model. More specifically, we discuss what may
be called the ?middleware? layer in such systems,
which takes care of passing around and maintaining
incremental information between the modules of
such agents. The three approaches illustrate a range
of choices available in the implementation of such
a middle layer. We will make our software avail-
able as development kits in the hope of fostering
further research on incremental systems.1
In the next section, we briefly review the abstract
model. We then describe the implementations cre-
ated at Uni Bielefeld (BF), KTH Stockholm (KTH)
and Uni Potsdam (UP). We close with a brief dis-
cussion of similarities and differences, and an out-
look on further work.
1Links to the three packages described here can be found
at http://purl.org/net/Middlewares-SIGdial2010.
2 The IU-Model of Incremental Processing
Schlangen and Skantze (2009) model incremental
systems as consisting of a network of processing
modules. Each module has a left buffer, a proces-
sor, and a right buffer, where the normal mode of
processing is to take input from the left buffer, pro-
cess it, and provide output in the right buffer, from
where it goes to the next module?s left buffer. (Top-
down, expectation-based processing would work
in the opposite direction.) Modules exchange incre-
mental units (IUs), which are the smallest ?chunks?
of information that can trigger connected modules
into action. IUs typically are part of larger units;
e.g., individual words as parts of an utterance, or
frame elements as part of the representation of an
utterance meaning. This relation of being part of
the same larger unit is recorded through same level
links; the information that was used in creating a
given IU is linked to it via grounded in links. Mod-
ules have to be able to react to three basic situa-
tions: that IUs are added to a buffer, which triggers
processing; that IUs that were erroneously hypothe-
sised by an earlier module are revoked, which may
trigger a revision of a module?s own output; and
that modules signal that they commit to an IU, that
is, won?t revoke it anymore (or, respectively, expect
it to not be revoked anymore).
Implementations of this model then have to re-
alise the actual details of this information flow, and
must make available the basic module operations.
3 Sociable Agents Architecture
BF?s implementation is based on the ?D-Bus? mes-
sage bus system (Pennington et al, 2007), which
is used for remote procedure calls and the bi-
directional synchronisation of IUs, either locally
between processes or over the network. The bus sys-
tem provides proxies, which make the interface of
a local object accessible remotely without copying
data, thus ensuring that any access is guaranteed to
yield up-to-date information. D-Bus bindings exist
for most major programming languages, allowing
51
for interoperability across various systems.
IUs exist as objects implementing a D-Bus in-
terface, and are made available to other modules
by publishing them on the bus. Modules are ob-
jects comprising a main thread and right and left
buffers for holding own IUs and foreign IU proxies,
respectively. Modules can co-exist in one process
as threads or occupy one process each?even dis-
tributed across a network.
A dedicated Relay D-Bus object on the network
is responsible for module administration and up-
date notifications. At connection time, modules
register with the relay, providing a list of IU cat-
egories and/or module names they are interested
in. Category interests create loose functional links
while module interests produce more static ones.
Whenever a module chooses to publish informa-
tion, it places a new IU in its right buffer, while
removal of an IU from the right buffer corresponds
to retraction. The relay is notified of such changes
and in turn invokes a notification callback in all
interested modules synchronising their left buffers
by immediately and transparently creating or re-
moving proxies of those IUs.
IUs consist of the fields described in the abstract
model, and an additional category field which the
relay can use to identify the set of interested mod-
ules to notify. They furthermore feature an optional
custom lifetime, on the expiration of which they
are automatically retracted.
Incremental changes to IUs are simply realised
by changing their attributes: regardless of their lo-
cation in either a right or left buffer, the same setter
functions apply (e.g., set payload). These generate
relay-transported update messages which commu-
nicate the ID of the changed IU. Received update
messages concerning self-owned and remotely-
owned objects are discerned automatically to allow
for special treatment of own IUs. The complete
process is illustrated in Figure 1.
Current state and discussion. Our support for
bi-directional IU editing is an extension to the con-
cepts of the general model. It allows higher-level
modules with a better knowledge of context to re-
vise uncertain information offered by lower levels.
Information can flow both ways, bottom-up and
top-down, thus allowing for diagnostic and causal
networks linked through category interests.
Coming from the field of embodied conversa-
tional agents, and being especially interested in
modelling human-like communication, for exam-
A B
C
IU
IU proxy
Write access
Relay
Data access
Update notification
RBuf LBuf
Interest sets
Figure 1: Data access on the IU proxies is transparently dele-
gated over the D-Bus; module A has published an IU. B and C
are registered in the corresponding interest set, thus receiving
a proxy of this IU in their left buffer. When B changes the IU,
A and C receive update notifications.
ple for on-line production of listener backchannel
feedback, we constantly have to take incremen-
tally changing uncertain input into account. Using
the presented framework consistently as a network
communication layer, we are currently modelling
an entire cognitive architecture for virtual agents,
based on the principle of incremental processing.
The decision for D-Bus as the transportation
layer has enabled us to quickly develop ver-
sions for Python, C++ and Java, and produced
straightforward-to-use libraries for the creation of
IU-exchanging modules: the simplest fully-fledged
module might only consist of a periodically in-
voked main loop callback function and any subset
of the four handlers for IU events (added, removed,
updated, committed).
4 Inpro Toolkit
The InproTK developed at UP offers flexibility on
how tightly or loosely modules are coupled in a
system. It provides mechanisms for sending IU up-
dates between processes via a messaging protocol
(we have used OAA [Cheyer and Martin, 2001], but
other communication layers could also be used) as
well as for using shared memory within one (Java)
process. InproTK follows an event-based model,
where modules create events, for which other mod-
ules can register as Listeners. Module networks are
configured via a system configuration file which
specifies which modules listen to which.
Modules push information to their right, hence
the interface for inter-module communication is
called PushBuffer. (At the moment, InproTK only
implements left-to-right IU flow.) The PushBuffer
interface defines a hypothesis-change method
which a module will call for all its listening mod-
ules. A hypothesis change is (redundantly) charac-
terised by passing both the complete current buffer
state (a list of IUs) as well as the delta between
52
the previous and the current state, leaving listen-
ing modules a choice of how to implement their
internal update.
Modules can be fully event-driven, only trig-
gered into action by being notified of a hypothesis
change, or they can run persistently, in order to cre-
ate endogenous events like time-outs. Event-driven
modules can run concurrently in separate threads or
can be called sequentially by a push buffer (which
may seem to run counter the spirit of incremental
processing, but can be advantageous for very quick
computations for which the overhead of creating
threads should be avoided).
IUs are typed objects, where the base class IU
specifies the links (same-level, grounded-in) that
allow to create the IU network and handles the
assignment of unique IDs. The payload and addi-
tional properties of an IU are specified for the IU?s
type. A design principle here is to make all relevant
information available, while avoiding replication.
For instance, an IU holding a bit of semantic rep-
resentation can query which interval of input data
it is based on, where this information is retrieved
from the appropriate IUs by automatically follow-
ing the grounded-in links. IU networks ground out
in BaseData, which contains user-side input such
as speech from the microphone, derived ASR fea-
ture vectors, camera feeds from a webcam, derived
gaze information, etc., in several streams that can
be accessed based on their timing information.
Besides IU communication as described in the
abstract model, the toolkit also provides a separate
communication track along which signals, which
are any kind of information that is not seen as incre-
mental hypotheses about a larger whole but as infor-
mation about a single current event, can be passed
between modules. This communication track also
follows the observer/listener model, where proces-
sors define interfaces that listeners can implement.
Finally, InproTK also comes with an extensive
set of monitoring and profiling modules which can
be linked into the module network at any point and
allow to stream data to disk or to visualise it online
through a viewing tool (ANON 2009), as well as
different ways to simulate input (e.g., typed or read
from a file) for bulk testing.
Current state and discussion. InproTK is cur-
rently used in our development of an incremental
multimodal conversational system. It is usable in its
current state, but still evolves. We have built and in-
tegrated modules for various tasks (post-processing
of ASR output, symbolic and statistical natural lan-
guage understanding [ANON 2009a,b,c]). The con-
figuration system and the availability of monitoring
and visualisation tools enables us to quickly test
different setups and compare different implementa-
tions of the same tasks.
5 Jindigo
Jindigo is a Java-based framework for implement-
ing and experimenting with incremental dialogue
systems currently being developed at KTH. In
Jindigo, all modules run as separate threads within
a single Java process (although the modules them-
selves may of course communicate with external
processes). Similarly to InproTK, IUs are mod-
elled as typed objects. The modules in the system
are also typed objects, but buffers are not. Instead,
a buffer can be regarded as a set of IUs that are
connected by (typed) same-level links. Since all
modules have access to the same memory space,
they can follow the same-level links to examine
(and possibly alter) the buffer. Update messages
between modules are relayed based on a system
specification that defines which types of update
messages from a specific module go where. Since
the modules run asynchronously, update messages
do not directly invoke methods in other modules,
but are put on the input queues of the receiving
modules. The update messages are then processed
by each module in their own thread.
Jindigo implements a model for updating buffers
that is slightly different than the two previous ap-
proaches. In this approach, IUs are connected by
predecessor links, which gives each IU (words,
widest spanning phrases from the parser, commu-
nicative acts, etc), a position in a (chronologically)
ordered stream. Positional information is reified by
super-imposing a network of position nodes over
the IU network, with the IUs being associated with
edges in that network. These positional nodes then
give us names for certain update stages, and so
revisions can be efficiently encoded by reference
to these nodes. An example can make this clearer.
Figure 2 shows five update steps in the right buffer
of an incremental ASR module. By reference to po-
sitional nodes, we can communicate easily (a) what
the newest committed IU is (indicated in the figure
as a shaded node) and (b) what the newest non-
revoked or active IU is (i.e., the ?right edge? (RE);
indicated in the figure as a node with a dashed line).
So, the change between the state at time t1 and t2
is signalled by RE taking on a different value. This
53
Figure 2: The right buffer of an ASR module, and update
messages at different time-steps.
value (w3) has not been seen before, and so the
consuming module can infer that the network has
been extended; it can find out which IUs have been
added by going back from the new RE to the last
previously seen position (in this case, w2). At t3, a
retraction of a hypothesis is signalled by a return to
a previous state, w2. All consuming modules have
to do now is to return to an internal state linked
to this previous input state. Commitment is repre-
sented similarly through a pointer to the rightmost
committed node; in the figure, that is for example
w5 at t5.
Since information about whether an IU has been
revoked or committed is not stored in the IU it-
self, all IUs can (if desirable) be defined as im-
mutable objects. This way, the pitfalls of having
asynchronous processes altering and accessing the
state of the IUs may be avoided (while, however,
more new IUs have to be created, as compared to
altering old ones). Note also that this model sup-
ports parallel hypotheses as well, in which case the
positional network would turn into a lattice.
The framework supports different types of up-
date messages and buffers. For example, a parser
may incrementally send NPs to a reference reso-
lution (RR) module that has access to a domain
model, in order to prune the chart. Thus, informa-
tion may go both left-to-right and right-to-left. In
the buffer between these modules, the order be-
tween the NPs that are to be annotated is not im-
portant and there is no point in revoking such IUs
(since they do not affect the RR module?s state).
Current state and discussion. Jindigo uses con-
cepts from (Skantze, 2007), but has been rebuilt
from ground up to support incrementality. A range
of modules for ASR, semantic interpretation, TTS,
monitoring, etc., have been implemented within
the framework, allowing us to do experiments
with complete systems interacting with users. We
are currently using the framework to implement a
model of incremental speech production.
6 Discussion
The three implementations of the abstract IU model
presented above show that concrete requirements
and application areas result in different design de-
cisions and focal points.
While BF?s approach is loosely coupled and han-
dles exchange of IUs via shared objects and a me-
diating module, KTH?s implementation is rather
closely coupled and publishes IUs through a single
buffer that lies in shared memory. UP?s approach
is somewhat in between: it abstracts away from the
transportation layer and enables message passing-
based communication as well as shared memory
transparently through one interface.
The differences in the underlying module com-
munication infrastructure affect the way incremen-
tal IU updates are handled in the systems. In BF?s
framework modules holding an IU in one of their
buffers just get notified when one of the IU?s fields
changed. Conversely, KTH?s IUs are immutable
and new information always results in new IUs
being published and a change to the graph repre-
sentation of the buffer?but this allows an efficient
coupling of module states and cheap revoke op-
erations. Again, UP?s implementation lies in the
middle. Here both the whole new state and the delta
between the old and new buffer is communicated,
which leads to flexibility in how consumers can be
implemented, but also potentially to some commu-
nication overhead.
In future work, we will explore if further gener-
alisations can be extracted from the different im-
plementations presented here. For now, we hope
that the reference architectures presented here can
already be an inspiration for further work on incre-
mental conversational systems.
References
Adam Cheyer and David Martin. 2001. The open
agent architecture. Journal of Autonomous Agents
and Multi-Agent Systems, 4(1):143?148, March.
H. Pennington, A. Carlsson, and A. Larsson. 2007.
D-Bus Specification Version 0.12. http://dbus.free-
desktop.org/doc/dbus-specification.html.
David Schlangen and Gabriel Skantze. 2009. A Gen-
eral, Abstract Model of Incremental Dialogue Pro-
cessing. In Proceedings of EACL 2009, Athens,
Greece.
Gabriel Skantze. 2007. Error Handling in Spoken Dia-
logue Systems. Ph.D. thesis, KTH, Stockholm, Swe-
den, November.
54
Proceedings of the 1st Workshop on Speech and Multimodal Interaction in Assistive Environments, pages 13?17,
Jeju, Republic of Korea, 8-14 July 2012. c?2012 Association for Computational Linguistics
Toward a Virtual Assistant for Vulnerable Users:
Designing Careful Interaction
Ramin Yaghoubzadeh
Sociable Agents Group, CITEC
Bielefeld University; PO Box 100131
33501 Bielefeld, Germany
ryaghoub@techfak.uni-bielefeld.de
Stefan Kopp
Sociable Agents Group, CITEC
Bielefeld University; PO Box 100131
33501 Bielefeld, Germany
skopp@techfak.uni-bielefeld.de
Abstract
The VASA project develops a multimodal as-
sistive system mediated by a virtual agent that
is intended to foster autonomy of communica-
tion and activity management in older people
and people with disabilities. Assistive systems
intended for these user groups have to take
their individual vulnerabilities into account. A
variety of psychic, emotional as well as behav-
ioral conditions can manifest at the same time.
Systems that fail to take them into account
might not only fail at joint tasks, but also risk
damage to their interlocutors. We identify im-
portant conditions and disorders and analyze
their immediate consequences for the design
of careful assistive systems.
1 Introduction
In 2001, the World Health Organization consoli-
dated previous taxonomies of somatic and mental
functions and the everyday needs of human beings
into the comprehensive International Classification
of Functioning, Disability and Health ICF (WHO,
2001). Older people, as well as people with im-
pairments, often need support from others to satisfy
those basic needs, among which are activities related
to self-care, to mobility, but also to communication
and management of the daily activities and the so-
cial environment. For many older people, a catas-
trophic event, most often either a fall or the passing
of their spouse, leads to their sudden loss of auton-
omy and subsequent submission into stationary care.
In the latter case, the loss of their day structure is
frequently the intermediate cause. The same effect
can be observed for many disabled people of all ages
who must make a transition from assisted living to
stationary care. Here, specialized systems that assist
in preserving autonomy in a spectrum of daily need
fulfillment can potentially be of great benefit.
The present paper introduces the VASA project
(?Virtual Assistants and their Social Acceptability?),
which in cooperation with a health-care foundation
examines how both older patients and people with
various impediments, congenital or acquired, both
in stationary and assisted living, can be provided
with technical assistance to maintain autonomy for
as long as possible. Importantly, we are not focus-
ing on physical assistance, but on supporting a per-
son?s capability for organizing a social environment
(WHO ICF d9205: ?Socializing?) and managing the
day structure generally (d230: ?Carrying out daily
routine?). These two tasks turned out to be crucial in
our analysis with the health care personnel. We thus
aim to develop an assistive system for (1) managing
daily routine and weekly appointments with the user,
and (2) accessing a video call interface for contact-
ing acquaintances or care personnel (d360: ?Using
communication devices and techniques?).
But how should such a system meet its user, and
what criteria should guide the system interface de-
sign? Research has shown that older users are
far more likely to employ a ?social? conversation
style with a system (Wolters et al, 2009). The
VASA project explores the use of a ?virtual assis-
tant?, an humanoid conversational agent that fea-
tures natural-language and touchscreen input and
human-like communicative behavior (speech, ges-
ture; see Fig. 1 for the current running prototype).
13
Figure 1: The VASA system. Left side: natural-language
calendar management; right side: video call interface.
In this paper we review work on related systems for
older people and people with disabilities. We then
argue that beside the general goal of maximizing us-
ability for this specific user group, there is an en-
hanced vulnerability of these users that calls for spe-
cial care in interaction design; we substantiate this
view by an analysis of potential mental conditions
of the prospective users along with discussions of
what requirements arise from them.
2 Related work
Generally, assistive systems are driven by task rea-
soning systems as well as components for human-
computer interaction, which can be specialized for
older or disabled persons. Modern systems that
attempt to provide a ?natural? interaction are be-
ing developed and evaluated, including touch-screen
and haptic interfaces and interfaces capable of un-
derstanding and generating natural language, all of
them providing an immediacy between communica-
tive intentions and their execution that makes them
suitable especially for users without technical exper-
tise, with reduced sensorimotor skills or reduced ca-
pability for learning new interaction paradigms, as is
frequently the case with older or impaired persons.
The performance of such systems in terms of suit-
able operation in interaction, successful task com-
pletion, and user-reported satisfaction, has been
subject to systematic evaluation under controlled
conditions: The performance of speech recogni-
tion systems has been compared between base-line
users and people with varying degrees of dysarthria
(breathiness, dysfluencies, involuntary noises). Off-
the-shelf speech recognition systems have higher
failure rates with dysarthric speakers (Raghaven-
dra et al, 2001). Mildly and moderately dysarthric
speakers can attain a recognition accuracy of 80%
in dictation systems, breath exercises and phonation
training improve performance (Young and Mihai-
lidis, 2010). Vipperla et al (2009) compared speech
recognition for younger and older users, reporting
an 11% baseline increase in word error rates for the
latter group, attributed to both acoustic and linguis-
tic causes. The Stardust project succeeded in very
high single-word recognition rates on small dictio-
naries in patients with severe dysarthria, enabling
them to control their environment by voice (Hawley
et al, 2007). Fager et al (2010) implemented a mul-
timodal prototype system that combined ASR with
a word prediction model and a capability to enter an
initial letter, leading to an accuracy of > 80%; not-
ing that other conditions, such as a reduced visual
field or ataxia, had to be addressed with technical
solutions for each individual. Jian et al (2011) de-
signed a system for direction giving for seniors, sug-
gesting specific design guidelines addressing typi-
cal perceptive, motor, attentive and cognitive impair-
ments of older users. The evaluation of their multi-
modal system (speech and touch/image) led to posi-
tive results with respect to effectivity, efficiency and
user-reported satisfaction.
3 Careful Interaction with Vulnerable
People: Analysis
The more autonomously assistive systems act, the
higher the potential negative effects they can conse-
quentially cause. This is especially true for robotic
systems, since their extension into the physical
world entails possible harmful effects if proper rea-
soning or safety precautions should be breached by
unanticipated events. But even without physical ma-
nipulation, real damage can still be done. This might
be due to misunderstandings, leading to wrong as-
sumptions in the system, and hence to actions be-
ing performed on behalf, but actually to the detri-
ment, of the user. It might, however, also be due to
the wrong things being communicated, or communi-
cated in an inappropriate manner, leading to unnec-
essary negative appraisal, discomfort, or triggering
of a negative psychic condition in the user. While
unlikely to cause damage in an interaction with the
average healthy interactant, this issue is of the ut-
most importance for many potential user groups.
14
Frail or potentially unstable users are arguably
among those who can derive the greatest benefits
from easily accessible assistive systems, enabling
them to perform tasks which they might else not,
or no longer, perform, thus preserving their auton-
omy. However, they are at the same time affected by
a multitude of possible cognitive, psychic and emo-
tional conditions and behavioral anomalies that can
occur simultaneously. Each of these conditions en-
tails special constraints for interactive systems, ei-
ther for the interaction channels, for the contents,
or for both. Several factors have been accounted
for in existing systems: Reduced perceptive faculty
(vision, hearing), reduced motor abilities (ataxia),
and attention and memory impairments, mitigated
by best-practice rules (Jian et al, 2011). Attempts
to account for users with mild dementia have been
made, such as in the ISISEMD project. Avoiding
a deep hierarchy of dialogue structures and provid-
ing extra information (repetition, paraphrase) rather
than maximum parsimony are paramount in cases of
impaired memory and abstraction faculty, whereas
people with learning difficulties need a system that
operates without extensive training (of the user).
For systems that strive to provide long-term sup-
port to a specific person, adaptation to that per-
son is of vital importance ? by employing user
models that are adapted either manually or using
learning algorithms. System behavior should be
adapted both in the content provided as well as the
form it is provided in, to enable a working rela-
tionship that is both effective and pleasant for the
user (Yaghoubzadeh and Kopp, 2011). This alone
however is insufficient; since the vulnerability of
the actual clientele in VASA is considerable, each
of the encountered mental conditions has to be an-
alyzed and additional dialogue constraints be en-
forced before autonomous interactions can be per-
mitted. There is a variety of such factors that
have not yet been comprehensively addressed, but
might cause critical damage to some interactants
if not considered. The following section captures
the most frequently encountered phenomena, which
were identified in dialogue with care personnel:
? Depression and Bipolar Disorder: Roughly
ten percent of the population suffer from de-
pression at some point in their lives. Depres-
sion increases the risk for suicide ten- to twen-
tyfold (Sadock et al, 2007). Bipolar disor-
der manifests in episodic effects, where sen-
sations of racing thoughts and heightened ac-
tivity (mania) and listlessness and social pas-
sivity (severe depression) alternate or occur si-
multaneously; depressive relapses in particular
are points of vulnerability (Hill and Shepherd,
2009). There are successes in detecting depres-
sive states from facial and voice cues at > 80%
rate (Cohn et al, 2009). A good practice is
to employ mitigation strategies when breaking
bad news to the user (Brown and Levinson,
1987; Fraser, 1980), e.g. by presenting obliga-
tions as options (Williams, 2011), or present-
ing the ?bad news? simultaneously with ?good
news?. We provide for discussion another re-
quirement for interactive systems in this case:
The system must not produce ambiguously in-
terpretable answers ? consider a catastrophic
answer of ?okay? as an affirmative response to
a wrongly parsed utterance that was actually an
expression of intent for suicide, a frequent phe-
nomenon with risk patients (Kelly, 2009).
? Borderline Personality Disorder: This type
of disorders, characterized by emotional insta-
bility, can lead to anxiety, social insecurity and
depression, but also inappropriate outbursts of
anger. Anger management techniques are em-
ployed to inhibit the expression of such anger
(Swaffer and Hollin, 2009). An assistive sys-
tem should be able to cope with impulses of
anger, and as a bare minimum interrupt the in-
teraction and offer to resume it at a later point.
The EmoVoice system, for instance, can clas-
sify emotional features in natural language with
good rates (Vogt et al, 2008), and could be
used to identify anger.
? Epilepsy: Patients with acquired brain injuries
frequently suffer from epilepsy. Even short (pe-
tit mal) epileptic seizures can lead to tempo-
rary absence and periods of confusion and dis-
orientation (APA, 2000). In such a situation,
the patient may utter irrational sentences or be
silent altogether. An assistive system should be
able to detect these irrational deviations from
15
the course of conversation, and fill the user in
again, abort the conversation, or call for help.
? Panic: Proneness to panic attacks can result
from a multitude of afflictions and is hard to
predict. In the event of a panicking interactant,
the system should not take steps that could fur-
ther exacerbate the situation. According to lit-
erature (Gournay and Denford, 2009), panic at-
tacks are generally unable to do any real harm
and subside quickly. Therefore, passivity from
the system?s side, in a neutral mode, is the mini-
mal appropriate behavior. Panicking people are
most likely not able to perform in interaction as
successfully as usual ? systems that should still
be operable by a user in this situation must pro-
vide minimalistic shortcuts to essential features
(i.e. a ?panic button? for emergencies).
? Anxiety: Special care must be taken in the de-
sign of systems aimed at people with social
anxiety. Interactants might be hesitant to open
a conversation even with an artificial system.
The system could take the initiative by simply
opening with a short utterance about the task
domain (Williams, 2011).
? Phobias and Impulse Control Disorders:
Phobic disorders and obsessive-compulsive
disorders can be triggered by environmental
cues (Gournay and Denford, 2009). User inter-
faces have to take this into account, and avoid
presenting stimuli that could act as potential
triggers (e.g. people with an insect phobia
should neither be presented with pictures of in-
sects, nor their verbal mention). The same pre-
cautions are valid in the case of addictions.
Any interactive system, and in particular systems
that do not only provide information but can also be
made to perform tasks autonomously on behalf of
the user, must be designed with all possible afflic-
tions of all possible users in mind, not only as a wise
legal precaution, but also as an ethical obligation to
the designer. We argue that, quite unlike the ?best
practices? of user interface design, there is no degree
of optionality to the implementation of the above
constraints and countermeasures, but that it must be
performed with all musterable diligence. Some con-
straints are especially hard to meet in open-world
systems (e.g. with free Internet access), since the
contents presented are harder to predict.
Note that the set of conditions presented above
is by no means comprehensive. For instance, we
have, for now, altogether omitted an incorporation
of autism-spectrum disorders or of functional psy-
choses such as schizophrenia, paraphrenia and para-
noia ? which are not uncommon in the older popu-
lation (Ashton and Keady, 2009).
4 Summary
The VASA project is developing a multimodal
natural-language agent-mediated assistance system
for older people and patients with disabilities for
enhancing their autonomy in the everyday tasks
of communication and activity management. The
clientele is afflicted with a variety of cognitive, psy-
chic, and emotional conditions that have to be dealt
with with extreme care and entail a necessity for spe-
cific safety mechanisms which will be implemented
for VASA in coordination with the care person-
nel. We attempted to identify common conditions
of older and impaired patients that should be con-
sidered and resolved in any assistive system (or in-
deed any autonomous interactive system) that might
communicate with them. Factors that could lead
to a detrimental outcome of such an interaction in-
clude depression, emotional instability, disorienta-
tion, panic, anxiety and phobia. Some constraints
on the design rationale for such systems can pro-
vide a mitigation of those risks: avoiding ambigu-
ity in the system?s utterances, coping with anger, ir-
rationality and panic by employing appropriate sys-
tem responses, capability for system-side initiative,
and preventing inadvertent stimulation of disorders.
Since the field of potential interactants for generic
assistive systems is vast, as any inspection of a larger
health-care institution will show, more discussion in
the research community should aim at establishing a
stable ontology of their special needs and the rami-
fications for the design of careful assistive systems.
Acknowledgments
This research is supported by the Deutsche
Forschungsgemeinschaft (DFG) in the Center of
Excellence in Cognitive Interaction Technology
(CITEC).
16
References
American Psychiatric Association. 2000. Diagnostic
and Statistical Manual of Mental Disorders DSM-IV-
TR, Fourth Edition. American Psychiatric Publishing,
Inc., Arlington, VA.
Peter Ashton and John Keady. 2009. Mental disorders
of older people. Newell & Gournay (eds.), Mental
Health Nursing: an Evidence-Based Approach, 341?
370. Churchill Livingstone, Philadelphia, PA.
Paul Brown and Stephen Levinson. 1987. Politeness.
Some Universals in Language Usage. Cambridge Uni-
versity Press, Cambridge.
Jeffrey F. Cohn, Tomas Simon Kruez, Iain Matthews,
Ying Yang, Minh Hoai Nguyen, Margara
Tejera Padilla, Feng Zhou, and Fernando de la Torre.
2009. Detecting Depression from Facial Actions and
Vocal Prosody. Proceedings of the 3rd International
Conference on Affective Computing and Intelligent
Interaction and Workshops (ACII 2009), 1?7. IEEE,
Amsterdam.
Susan K. Fager, David R. Beukelman, Tom Jakobs, and
John-Paul Hosom. 2010. Evaluation of a Speech
Recognition Prototype for Speakers with Moderate
and Severe Dysarthria: A Preliminary Report Aug-
mentative and Alternative Communication, 26(4):267-
277.
Bruce Fraser. 1980. Conversational mitigation. Journal
of Pragmatics, 4:341?350.
Kevin Gournay and Lindsay Denford. 2009. Pho-
bias and Rituals. Newell & Gournay (eds.), Mental
Health Nursing: an Evidence-Based Approach, 207?
224. Churchill Livingstone, Philadelphia, PA.
Mark S. Hawley, Pam Enderby, Phil Green, Stuart Cun-
ningham, Simon Brownsell, James Carmichael, Mark
Parker, Athanassios Hatzis, Peter ONeill, and Rebecca
Palmer. 2007. A speech-controlled environmental
control system for people with severe dysarthria. Med-
ical Engineering & Physics, 29(5):586?593.
Robert Gareth Hill and Geoff Shepherd. 2009. Disorders
of Mood: Depression and Mania. Newell & Gournay
(eds.), Mental Health Nursing: an Evidence-Based
Approach, 165?185. Churchill Livingstone, Philadel-
phia, PA.
Cui Jian, Nadine Sasse, Nicole von Steinbu?chel-
Rheinwall, Frank Schafmeister, Hui Shi, Carsten
Rachuy, and Holger Schmidt. 2011. Towards effec-
tive, efficient and elderly-friendly multimodal interac-
tion. Proceedings of the 4th International Conference
on Pervasive Technologies Related to Assistive Envi-
ronments (PETRA 2011), article 45, 1?8. ACM, New
York, NY.
Sarah Kelly. 2009. Suicide and Self-Harm. Newell &
Gournay (eds.), Mental Health Nursing: an Evidence-
Based Approach, 187?206. Churchill Livingstone,
Philadelphia, PA.
Parimala Raghavendra, Elisabet Rosengren, and Sheri
Hunnicutt. 2001. An investigation of different de-
grees of dysarthric speech as input to speaker-adaptive
and speaker-dependent recognition systems. Augmen-
tative and Alternative Communication, 17(4):265-275.
Benjamin J. Sadock, Harold I. Kaplan, and Virginia A.
Sadock. 2007. Kaplan & Sadock?s Synopsis of Psychi-
atry: Behavioral Sciences/Clinical Psychiatry. Lip-
pincott Williams & Wilkins, Philadelphia.
Tracey Swaffer and Clive R. Hollin. 2009. Anger and
Impulse Control. Newell & Gournay (eds.), Mental
Health Nursing: an Evidence-Based Approach, 267?
289. Churchill Livingstone, Philadelphia, PA.
Ravichander Vipperla, Maria Wolters, Kallirroi Georgila,
and Steve Renals. 2009. Speech input from older
users in smart environments: Challenges and perspec-
tives. HCI (6): Universal Access in Human-Computer
Interaction, Intelligent and Ubiquitous Interaction En-
vironments , LNCS 5615:117?126. Springer, Heidel-
berg.
Thurid Vogt, Elisabeth Andre?, and Nikolaus Bee. 2008.
EmoVoice - A framework for online recognition of
emotions from voice. Proceedings of the 4th IEEE
tutorial and research workshop on Perception and In-
teractive Technologies for Speech-Based Systems (PIT
2008), 188?199. Springer, Heidelberg.
Val Williams. 2011. Disability and discourse : analysing
inclusive conversation with people with intellectual
disabilities. Wiley-Blackwell, Chichester, West Sus-
sex / Malden, MA.
World Health Organization. 2001. International Clas-
sification of Functioning, Disability and Health: ICF,
WHO, Geneva, Switzerland.
Maria Wolters, Kallirroi Georgila, Johanna D. Moore,
and Sarah E. MacPherson. 2009. Being Old Doesn?t
Mean Acting Old: How Older Users Interact with Spo-
ken Dialog Systems. ACM Transactions on Accessible
Computing (TACCESS), 2(1):1?39.
Ramin Yaghoubzadeh and Stefan Kopp. 2011. Creat-
ing familiarity through adaptive behavior generation
in human-agent interaction. Proceedings of the 11th
International Conference on Intelligent Virtual Agents
(IVA 2011), LNCS(LNAI) 6895:195?201. Springer,
Heidelberg.
Victoria Young and Alex Mihailidis. 2010. Difficulties in
Automatic Speech Recognition of Dysarthric Speakers
and Implications for Speech-Based Applications Used
by the Elderly: A Literature Review. Assistive Tech-
nology, 22(2):99?112.
17
