Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 980?989,
October 25-29, 2014, Doha, Qatar.
c?2014 Association for Computational Linguistics
Data Driven Grammatical Error Detection
in Transcripts of Children?s Speech
Eric Morley
CSLU
OHSU
Portland, OR 97239
morleye@gmail.com
Anna Eva Hallin
Department of Communicative
Sciences and Disorders
New York University
New York, NY
ae.hallin@nyu.edu
Brian Roark
Google Research
New York, NY 10011
roarkbr@gmail.com
Abstract
We investigate grammatical error detec-
tion in spoken language, and present a
data-driven method to train a dependency
parser to automatically identify and label
grammatical errors. This method is ag-
nostic to the label set used, and the only
manual annotations needed for training are
grammatical error labels. We find that the
proposed system is robust to disfluencies,
so that a separate stage to elide disfluen-
cies is not required. The proposed system
outperforms two baseline systems on two
different corpora that use different sets of
error tags. It is able to identify utterances
with grammatical errors with an F1-score
as high as 0.623, as compared to a baseline
F1 of 0.350 on the same data.
1 Introduction
Research into automatic grammatical error detec-
tion has primarily been motivated by the task of
providing feedback to writers, whether they be na-
tive speakers of a language or second language
learners. Grammatical error detection, however, is
also useful in the clinical domain, for example, to
assess a child?s ability to produce grammatical lan-
guage. At present, clinicians and researchers into
child language must manually identify and clas-
sify particular kinds of grammatical errors in tran-
scripts of children?s speech if they wish to assess
particular aspects of the child?s linguistic ability
from a sample of spoken language. Such manual
annotation, which is called language sample anal-
ysis in the clinical field, is expensive, hindering
its widespread adoption. Manual annotations may
also be inconsistent, particularly between different
research groups, which may be investigating dif-
ferent phenomena. Automated grammatical error
detection has the potential to address both of these
issues, being both cheap and consistent.
Aside from performance, there are at least two
key requirements for a grammatical error detector
to be useful in a clinical setting: 1) it must be able
to handle spoken language, and 2) it must be train-
able. Clinical data typically consists of transcripts
of spoken language, rather than formal written lan-
guage. As a result, a system must be prepared
to handle disfluencies, utterance fragments, and
other phenomena that are entirely grammatical in
speech, but not in writing. On the other hand, a
system designed for transcripts of speech does not
need to identify errors specific to written language
such as punctuation or spelling mistakes. Further-
more, a system designed for clinical data must be
able to handle language produced by children who
may have atypical language due to a developmen-
tal disorder, and therefore may produce grammati-
cal errors that would be unexpected in written lan-
guage. A grammatical error detector appropriate
for a clinical setting must also be trainable be-
cause different groups of clinicians may wish to
investigate different phenomena, and will there-
fore prefer different annotation standards. This
is quite different from grammatical error detectors
for written language, which may have models for
different domains, but which are not typically de-
signed to enable the detection of novel error sets.
We examine two baseline techniques for gram-
matical error detection, then present a simple data-
driven technique to turn a dependency parser into a
grammatical error detector. Interestingly, we find
that the dependency parser-based approach mas-
sively outperforms the baseline systems in terms
of identifying ungrammatical utterances. Further-
more, the proposed system is able to identify spe-
cific error codes, which the baseline systems can-
not do. We find that disfluencies do not degrade
performance of the proposed detector, obviating
the need (for this task) for explicit disfluency de-
tection. We also analyze the output of our system
to see which errors it finds, and which it misses.
980
Code Description Example
[EO] Overgeneralization errors He falled [EO] .
[EW] Other word level errors He were [EW] looking .
[EU] Utterance level errors And they came to stopped .
[OM] Omitted bound morpheme He go [OM] .
[OW] Omitted word She [OW] running .
Table 1: Error codes proposed in the SALT manual. Note that in SALT annotated transcripts, [OM] and
[OW] are actually indicated by ?*? followed by the morpheme or word hypothesized to be omitted.
When treating codes (other than [EU]) as tags, they are attached to the previous word in the string.
Finally, we evaluate our detector on a second set
of data with a different label set and annotation
standards. Although our proposed system does not
perform as well on the second data set, it still out-
performs both baseline systems. One interesting
difference between the two data sets, which does
appear to impact performance, is that the latter set
more strictly follows SALT guidelines (see Sec-
tion 2.1) to collapse multiple errors into a single
label. This yields transcripts with a granularity of
labeling somewhat less amenable to automation,
to the extent that labels are fewer and can be re-
liant on non-local context for aggregation.
2 Background
2.1 Systematic Analysis of Language
Transcripts (SALT)
The Systematic Analysis of Language Transcripts
(SALT) is the de facto standard for clinicians look-
ing to analyze samples of natural language. The
SALT manual includes guidelines for transcrip-
tion, as well as three types of annotations, of
which two are relevant here: maze annotations,
and error codes.
1
Mazes are similar to what is referred to as ?dis-
fluencies? in the speech literature. The SALT
manual defines mazes as ?filled pauses, false
starts, repetitions, reformulations, and interjec-
tions? (Miller et al., 2011, p. 6), without defining
any of these terms. Partial words, which are in-
cluded and marked in SALT-annotated transcripts,
are also included in mazes. Mazes are delimited
by parentheses, and have no internal structure, un-
like disfluencies annotated following the Switch-
board guidelines (Meteer et al., 1995), which are
commonly followed by the speech and language
1
SALT also prescribes annotation of bound morphemes
and clitics, for example -ed in past tense verbs. We preprocess
all of the transcripts to remove bound morpheme and clitic
annotations.
processing communities. An example maze anno-
tation would be: ?He (can not) can not get up.?
The SALT manual proposes the set of error
codes shown (with examples) in Table 1, but re-
search groups may use a subset of these codes, or
augment them with additional codes. For example,
the SALT-annotated Edmonton Narrative Norms
Instrument (ENNI) corpus (Schneider et al., 2006)
rarely annotates omitted morphemes ([OM]), in-
stead using the [EW] code. Other SALT-annotated
corpora include errors that are not described in the
SALT manual. For example the CSLU ADOS cor-
pus (Van Santen et al., 2010) includes the [EX]
tag for extraneous words, and the Narrative Story
Retell corpus (SALT Software, 2014b) uses the
code [EP] to indicate pronominal errors (albeit
inconsistently, as many such errors are coded as
[EW] in this corpus). We note that the definitions
of certain SALT errors, notably [EW] and [EU],
are open to interpretation, and that these codes
capture a wide variety of errors. For example,
some of the errors captured by the [EW] code are:
pronominal case and gender errors; verb tense er-
rors; confusing ?a? and ?an?; and using the wrong
preposition.
The SALT guidelines specify as a general rule
that annotators should not mark utterances with
more than two omissions ([OM] or [OW]) and/or
word-level errors (ex [EW], [EP]) (SALT Soft-
ware, 2014a). Instead, annotators are instructed
to code such utterances with an utterance-level er-
ror ([EU]). How strictly annotators adhere to this
rule affects the distribution of errors, reducing the
number of word-level errors and increasing the
number of utterance-level errors. Following this
rule also increases the variety of errors captured
by the [EU] code. The annotations in different
corpora, including ENNI and NSR, vary in how
strictly they follow this rule, even though this is
not mentioned in the the published descriptions of
981
these corpora.
2.2 Grammatical Error Detection
The most visible fruits of research into grammati-
cal error detection are the spellchecking and gram-
mar checking tools commonly included with word
processors, for example Microsoft Word?s gram-
mar checker. Although developed for handling
written language, many of the techniques used
to address these tasks could still be applicable to
transcripts of speech because many of the same
errors can still occur. The earliest grammatical-
ity tools simply performed pattern matching (Mac-
donald et al., 1982), but this approach is not robust
enough to identify many types of errors, and pat-
tern matching systems are not trainable, and there-
fore cannot be adapted quickly to new label sets.
Subsequent efforts to create grammaticality classi-
fiers and detectors leveraged information extracted
from parsers (Heidorn et al., 1982) and language
models (Atwell, 1987). These systems, however,
were developed for formal written English pro-
duced by well-educated adults, as opposed to spo-
ken English produced by young children, partic-
ularly children with suspected developmental de-
lays.
There have been a few investigations into tech-
niques to automatically identify particular con-
structions in transcripts of spoken English. Bow-
den and Fox (2002) proposed a rule-based sys-
tem to classify many types of errors made by
learners of English. Although their system could
be used on either transcripts of speech, or on
written English, they did not evaluate their sys-
tem in any way. Caines and Buttery (2010) use
a logistic regression model to identify the zero-
auxiliary construction (e.g., ?you going home??)
with over 96% accuracy. Even though the zero-
auxilliary construction is not necessarily ungram-
matical, identifying such constructions may be
useful as a preprocessing step to a grammatical-
ity classifier. Caines and Buttery also demonstrate
that their detector can be integrated into a sta-
tistical parser yielding improved performance, al-
though they are vague about the nature of the parse
improvement (see Caines and Buttery, 2010, p. 6).
Hassanali and Liu (2011) conducted the first in-
vestigation into grammaticality detection and clas-
sification in both speech of children, and speech of
children with language impairments. They identi-
fied 11 types of errors, and compared three types
of systems designed to identify the presence of
each type of error: 1) rule based systems; 2) deci-
sion trees that use rules as features; and 3) naive
Bayes classifiers that use a variety of features.
They were able to identify all error types well
(F1 > 0.9 in all cases), and found that in general
the statistical systems outperformed the rule based
systems. Hassanali and Liu?s system was designed
for transcripts of spoken language collected from
children with impaired language, and is able to
detect the set of errors they defined very well.
However, it cannot be straightforwardly adapted
to novel error sets.
Morley et al. (2013) evaluated how well the
detectors proposed by Hassanali and Liu could
identify utterances with SALT error codes. They
found that a simplified version of one of Has-
sanali and Liu?s detectors was the most effective at
identifying utterances with any SALT error codes,
although performance was very low (F1=0.18).
Their system uses features extracted solely from
part of speech tags with the Bernoulli Naive Bayes
classifier in Scikit (Pedregosa et al., 2012). Their
detector may be adaptable to other annotation
standards, but it does not identify which errors are
in each utterance; it only identifies which utter-
ances have errors, and which do not.
2.3 Redshift Parser
We perform our experiments with the redshift
parser
2
, which is an arc-eager transition-based de-
pendency parser. We selected redshift because of
its ability to perform disfluency detection and de-
pendency parsing jointly. Honnibal and Johnson
(2014) demonstrate that this system achieves state-
of-the-art performance on disfluency detection,
even compared to single purpose systems such as
the one proposed by Qian and Liu (2013). Ra-
sooli and Tetreault (2014) have developed a sys-
tem that performs disfluency detection and depen-
dency parsing jointly, and with comparable perfor-
mance to redshift, but it is not publicly available as
of yet.
Redshift uses an averaged perceptron learner,
and implements several feature sets. The first fea-
ture set, which we will refer to as ZHANG is the
one proposed by Zhang and Nivre (2011). It in-
cludes 73 templates that capture various aspects
of: the word at the top of the stack, along with its
2
Redshift is available at https://github.com/
syllog1sm/redshift. We use the version in the
experiment branch from May 15, 2014.
982
leftmost and rightmost children, parent and grand-
parent; and the word on the buffer, along with
its leftmost children; and the second and third
words on the buffer. Redshift also includes fea-
tures extracted from the Brown clustering algo-
rithm (Brown et al., 1992). Finally, redshift in-
cludes features that are designed to help iden-
tify disfluencies; these capture rough copies, ex-
act copies, and whether neighboring words were
marked as disfluent. We will refer to the feature
set containing all of the features implemented in
redshift as FULL. We refer the reader to Honnibal
and Johnson (2014) for more details.
3 Data, Preprocessing, and Evaluation
Our investigation into using a dependency parser
to identify and label grammatical errors requires
training data with two types of annotations: de-
pendency labels, and grammatical error labels. We
are not aware of any corpora of speech with both
of these annotations. Therefore, we use two dif-
ferent sets of training data: the Switchboard cor-
pus, which contains syntactic parses; and SALT
annotated corpora, which have grammatical error
annotations.
3.1 Switchboard
The Switchboard treebank (Godfrey et al., 1992)
is a corpus of transcribed conversations that have
been manually parsed. These parses include
EDITED nodes, which span disfluencies. We pre-
process the Switchboard treebank by removing all
partial words as well as all words dominated by
EDITED nodes, and converting all words to lower-
case. We then convert the phrase-structure trees to
dependencies using the Stanford dependency con-
verter (De Marneffe et al., 2006) with the basic de-
pendency scheme, which produces dependencies
that are strictly projective.
3.2 SALT Annotated Corpora
We perform two sets of experiments on the two
SALT-annotated corpora described in Table 2. We
carry out the first set of experiments on on the Ed-
monton Narrative Norms Instrument (ENNI) cor-
pus, which contains 377 transcripts collected from
children between the ages of 3 years 11 months
and 10 years old. The children all lived in Edmon-
ton, Alberta, Canada, were typically developing,
and were native speakers of English.
After exploring various system configurations,
ENNI NSR
Words Utts Words Utts
Train 360,912 44,915 103,810 11,869
Dev. 45,504 5,614 12,860 1,483
Test 44,996 5,615 12,982 1,485
% with error 13.2 14.3
(a) Word and utterance counts
ENNI NSR
[EP] 0 20
[EO] 0 495
[EW] 4,916 1,506
[EU] 3,332 568
[OM] 10 297
[OW] 766 569
Total 9,024 3,455
(b) Error code counts
Table 2: Summary of ENNI and NSR Corpora.
There can be multiple errors per utterance. Word
counts include mazes.
we evaluate how well our method works when it
is applied to another corpus with different anno-
tation standards. Specifically, we train and test
our technique on the Narrative Story Retell (NSR)
corpus (SALT Software, 2014b), which contains
496 transcripts collected from typically develop-
ing children living in Wisconsin and California
who were between the ages of 4 years 4 months
and 12 years 8 months old. The ENNI and NSR
corpora were annotated by two different research
groups, and as Table 2 illustrates, they contain
a different distribution of errors. First, ENNI
uses the [EW] (other word-level error) tag to code
both overgeneralization errors instead of [EO], and
omitted morphemes instead of [OM]. The [EU]
code is also far more frequent in ENNI than NSR.
Finally, the NSR corpus includes an error code that
does not appear in the ENNI corpus: [EP], which
indicates a pronominal error, for example using
the wrong person or case. [EP], however, is rarely
used.
We preprocess the ENNI and NSR corpora to
reconstruct surface forms from bound morpheme
annotations (ex. ?go/3S? becomes ?goes?), partial
words, and non-speech sounds. We also either ex-
cise manually identified mazes or remove maze
annotations, depending upon the experiment.
3.3 Evaluation
Evaluating system performance in tagging tasks
on manually annotated data is typically straight-
983
Evaluation Level: ERROR UTTERANCE
Individual error codes Has error?
Gold error codes: [EW] [EW] Yes
Predicted error codes: [EW] [OW] Yes
Evaluation: TP FN FP TP
Figure 1: Illustration of UTTERANCE and ERROR level evaluation
TP = true positive; FP = false positive; FN = false negative
forward: we simply compare system output to the
gold standard. Such evaluation assumes that the
best system is the one that most faithfully repro-
duces the gold standard. This is not necessarily
the case with applying SALT error codes for three
reasons, and each of these reasons suggests a dif-
ferent form of evaluation.
First, automatically detecting SALT error codes
is an important task because it can aid clini-
cal investigations. As Morley et al. (2013) il-
lustrated, even extremely coarse features derived
from SALT annotations, for example a binary fea-
ture for each utterance indicating the presence of
any error codes, can be of immense utility for iden-
tifying language impairments. Therefore, we will
evaluate our system as a binary tagger: each ut-
terance, both in the manually annotated data and
system output either contains an error code, or it
does not. We will label this form of evaluation as
UTTERANCE level.
Second, clinicians are not only interested in
how many utterances have an error, but also which
particular errors appear in which utterances. To
address this issue, we will compute precision, re-
call, and F1 score from the counts of each er-
ror code in each utterance. We will label this
form of evaluation as ERROR level. Figure 1 illus-
trates both UTTERANCE and ERROR level evalua-
tion. Note that the utterance level error code [EU]
is only allowed to appear once per utterance. As
a result, we will ignore any predicted [EU] codes
beyond the first.
Third, the quality of the SALT annotations
themselves is unknown, and therefore evaluation
in which we treat the manually annotated data as a
gold standard may not yield informative metrics.
Morley et al. (2014) found that there are likely
inconsistencies in maze annotations both within
and across corpora. In light of that finding, it is
possible that error code annotations are somewhat
inconsistent as well. Furthermore, our approach
has a critical difference from manual annotation:
we perform classification one utterance at a time,
while manual annotators have access to the context
of an utterance. Therefore certain types of errors,
for example using a pronoun of the wrong gender,
or responding ungrammatically to a question (ex.
?What are you doing?? ?Eat.?) will appear gram-
matical to our system, but not to a human anno-
tator. We address both of these issues with an in-
depth analysis of the output of one of our systems,
which includes manually re-coding utterances out
of context.
4 Detecting Errors in ENNI
4.1 Baselines
We evaluate two existing systems to see how ef-
fectively they can identify utterances with SALT
error codes: 1) Microsoft Word 2010?s gram-
mar check, and 2) the simplified version of Has-
sanali and Liu?s grammaticality detector (2011)
proposed by Morley et al. (2013) (mentioned in
Section 2.2). We configured Microsoft Word
2010?s grammar check to look for the following
classes of errors: negation, noun phrases, subject-
verb agreement, and verb phrases (see http://
bit.ly/1kphUHa). Most error classes in gram-
mar check are not relevant for transcribed speech,
for example capitalization errors or confusing it?s
and its; we selected classes of errors that would
typically be indicated by SALT error codes.
Note that these baseline systems can only give
us an indication of whether there is an error in
the utterance or not; they do not provide the spe-
cific error tags that mimic the SALT guidelines.
Hence we evaluate just the UTTERANCE level per-
formance of the baseline systems on the ENNI de-
velopment and test sets. These results are given
in the top two rows of each section of Table 3.
We apply these systems to utterances in two condi-
tions: with mazes (i.e., disfluencies) excised; and
with unannotated mazes left in the utterances. As
can be seen in Table 3, the performance Microsoft
Word?s grammar checker degrades severely when
984
(a)
Him [EW] (can not) can not get up .
(b)
ROOT him can not can not get up .
nsubj+[EW]
aux
neg
aux
neg
ROOT
prt
P
Figure 2: (a) SALT annotated utterance; mazes indicated by parentheses; (b) Dependency parse of same
utterance parsed with a grammar trained on the Switchboard corpus and augmented dependency labels.
We use a corpus of parses with augmented labels to train our grammaticality detector.
mazes are not excised, but this is not the case for
the Morley et al. (2013) detector.
4.2 Proposed System
Using the ENNI corpus, we now explore various
configurations of a system for grammatical error
code detection. All of our systems use redshift
to learn grammars and to parse. First, we train
an initial grammar G
0
on the Switchboard tree-
bank (Godfrey et al., 1992) (preprocessed as de-
scribed in Section 3.1). Redshift learns a model for
part of speech tagging concurrently with G
0
. We
use G
0
to parse the training portion of the ENNI
corpus. Then, using the SALT annotations, we
append error codes to the dependency arc labels
in the parsed ENNI corpus, assigning each error
code to the word it follows in the SALT annotated
data. Figure 2 shows a SALT annotated utterance,
as well as its dependency parse augmented with
error codes. Finally, we train a grammar G
Err
on
the parse of the ENNI training fold that includes
the augmented arc labels. We can now use G
Err
to automatically apply SALT error codes: they are
simply encoded in the dependency labels. We also
apply the [EW] label to any word that is in a list of
overgeneralization errors
3
.
We modify three variables in our initial trials on
the ENNI development set. First, we change the
proportion of utterances in the training data that
contain an error by removing utterances.
4
Doing
so allows us to alter the operating point of our sys-
3
The list of overgeneralization errors was generously pro-
vided by Kyle Gorman
4
Of course, we never modify the development or test data.
tem in terms of precision and recall. Second, we
again train and test on two versions of the ENNI
corpus: one which has had mazes excised, and the
other which has them present (but not annotated).
Third, we evaluate two feature sets: ZHANG and
FULL.
The plots in Figure 3 show how the per-
formances of our systems at different operating
points vary, while Table 3 shows the performance
of our best system configurations on the ENNI de-
velopment and test sets. Surprisingly, we see that
neither the choice of feature set, nor the presence
of mazes has much of an effect on system per-
formance. This is in strong contrast to Microsoft
Word?s grammar check, which is minimally effec-
tive when mazes are included in the data. The
Morley et al. (2013) system is robust to mazes,
but still performs substantially worse than our pro-
posed system.
4.3 Error Analysis
We now examine the errors produced by our best
performing system for data in which mazes are
present. As shown in Table 3, when we apply our
system to ENNI-development, the UTTERANCE
P/R/F1 is 0.831 / 0.502 / 0.626 and the ERROR
P/R/F1is 0.759 / 0.434 / 0.552. This system?s per-
formance detecting specific error codes is shown
in Table 4. We see that the recall of [EU] errors is
quite low compared with the recall for [EW] and
[OW] errors. This is not surprising, as human an-
notators may need to leverage the context of an ut-
terance to identify [EU] errors, while our system
makes predictions for each utterance in isolation.
985
(a) UTTERANCE level evaluation (b) ERROR level evaluation
Figure 3: SALT error code detection performance at various operating points on ENNI development set
Eval Mazes Excised Mazes Present
System type P R F1 P R F1
Development
MS Word UTT 0.843 0.245 0.380 0.127 0.063 0.084
Morley et al. (2013) UTT 0.407 0.349 0.376 0.343 0.321 0.332
Current paper
UTT 0.943 0.470 0.627 0.831 0.502 0.626
ERR 0.895 0.412 0.564 0.759 0.434 0.552
Test
MS Word UTT 0.824 0.209 0.334 0.513 0.219 0.307
Morley et al. (2013) UTT 0.375 0.328 0.350 0.349 0.252 0.293
Current Paper
UTT 0.909 0.474 0.623 0.809 0.501 0.618
ERR 0.682 0.338 0.452 0.608 0.360 0.452
Table 3: Baseline and current paper systems? performance on ENNI. Evaluation is at the UTTERANCE
(UTT) level except for the current paper?s system, which also presents evaluation at the ERROR (ERR)
level.
Error Code P R F1
EU 0.639 0.193 0.297
EW 0.832 0.582 0.685
OW 0.680 0.548 0.607
Table 4: ERROR level detection performance for
each code (system trained on ENNI; 30% error
utterances; ZHANG feature set; with mazes)
We randomly sampled 200 utterances from the
development set that have a manually annotated
error, are predicted by our system to have an er-
ror, or both. A speech-language pathologist who
has extensive experience with using SALT for re-
search purposes in both clinical and typically de-
veloping populations annotated the errors in each
utterance. She annotated each utterance in isola-
tion so as to ignore contextual errors. We compare
our annotations to the original annotations, and
system performance using our annotations and the
original annotations as different gold standards.
The results of this comparison are shown in Table
5.
Comparing our manual annotations to the orig-
inal annotations, we notice some disagreements.
We suspect there are two reasons for this. First,
unlike the original annotators, we annotate these
utterances out of context. This may explain why
we identify far fewer utterance level error [EU]
codes than the original annotators (20 compared
with 67). Second, we may be using different cri-
teria for each error code than the original anno-
tators. This is an inevitable issue, as the SALT
guidelines do not provide detailed definitions of
the error codes, nor do individual groups of anno-
tators. To illustrate, the ?coding notes? section of
986
Tag Gold Gold Count Disagreement P R F1
[EU] Original 67 52 0.500 0.149 0.230
Revised 20 0.450 0.333 0.383
[EW] Original 137 27 0.859 0.533 0.658
Revised 126 0.800 0.540 0.645
[OW] Original 16 13 0.667 0.275 0.480
Revised 15 0.444 0.267 0.333
Table 5: System performance using ERROR level evaluation on 200 utterances selected from ENNI-dev
using original and revised annotations as gold standard
UTTERANCE level ERROR level
System P R F1 P R F1
ENNI-trained 0.310 0.124 0.178 0.157 0.057 0.084
NSR-trained 0.243 0.249 0.277 0.150 0.195 0.170
MS Word 0.561 0.171 0.261 ? ? ?
Morley et al. (2013) 0.250 0.281 0.264 ? ? ?
NSR ? MS Word 0.291 0.447 0.353 ? ? ?
NSR ? Morley et al. (2013) 0.297 0.387 0.336 ? ? ?
All 3 0.330 0.498 0.397 ? ? ?
Table 6: Error detection performance on NSR-development, mazes included
the description of the ENNI corpus
5
only lists the
error codes that were used consistently, but does
not describe how to apply them. These findings
illustrate the importance of having a rapidly train-
able error code detector: research groups will be
interested in different phenomena, and therefore
will likely have different annotation standards.
5 Detecting Errors in NSR
We apply our system directly to the NSR corpus
with mazes included. We use the same parameters
set on the ENNI corpus in Section 4.2. We apply
the model trained on ENNI to NSR, but find that it
does not perform very well as illustrated in Table
6. These results further underscore the need for
a trainable error code detector in this domain, as
opposed to the static error detectors that are more
common in the grammatical error detection litera-
ture.
We see in Table 6 that retraining our model
on NSR data improves performance substantially
(UTTERANCE F1 improves from 0.178 to 0.277),
but not to the level we observed on the ENNI cor-
pus. The Morley et al. (2013) system also per-
forms worse when trained and tested on NSR, as
compared with ENNI. When mazes are included,
5
http://www.saltsoftware.com/salt/
databases/ENNIRDBDoc.pdf
the performance of Microsoft Word?s grammar
check is higher on NSR than on ENNI (F1=0.261
vs 0.084), but it it still yields the lowest perfor-
mance of the three systems. We find that combin-
ing our proposed system with either or both of the
baseline systems further improves performance.
The NSR corpus differs from ENNI in several
ways: it is smaller, contains fewer errors, and uses
a different set of tags with a different distribution
from the ENNI corpus, as shown in Table 2. We
found that the smaller amount of training data is
not the only reason for the degradation in perfor-
mance; we trained a model for ENNI with a set of
training data that is the same size as the one for
NSR, but did not observe a major drop in perfor-
mance. We found that UTTERANCE F1 drops from
0.626 to 0.581, and ERROR F1 goes from 0.552 to
0.380, not nearly the magnitude drop in accuracy
observed for NSR.
We believe that a major reason for why our sys-
tem performs worse on NSR than ENNI may be
that the ENNI annotations adhere less strictly to
certain SALT recommendations than do the ones
in NSR. The SALT guidelines suggest that utter-
ances with two or more word-level [EW] and/or
omitted word [OW] errors should only be tagged
with an utterance-level [EU] error (SALT Soft-
ware, 2014a). ENNI, however, has many utter-
987
ances with multiple [EW] and [OW] error codes,
along with utterances containing all three error
codes. NSR has very few utterances with [EU] and
other codes, or multiple [EW] and [OW] codes.
The finer grained annotations in ENNI may sim-
ply be easier to learn.
6 Conclusion and Future Directions
We have proposed a very simple method to rapidly
train a grammatical error detector and classifier.
Our proposed system only requires training data
with error code annotations, and is agnostic as to
the nature of the specific error codes. Furthermore,
our system?s performance does not appear to be
affected by disfluencies, which reduces the burden
required to produce training data.
There are several key areas we plan to inves-
tigate in the future. First, we would like to ex-
plore different update functions for the parser; the
predicted error codes are a byproduct of parsing,
but we do not care what the parse itself looks like.
At present, the parser is updated whenever it pro-
duces a parse that diverges from the gold stan-
dard. It may be better to update only when the
error codes predicted for an utterance differ from
the gold standard. Second, we hope to explore fea-
tures that could be useful for identifying grammat-
ical errors in multiple data sets. Finally, we plan
to investigate why our system performed so much
better on ENNI than on NSR.
Acknowledgments
We would like to thank the following people for
valuable input into this study: Joel Tetreault,
Jan van Santen, Emily Prud?hommeaux, Kyle
Gorman, Steven Bedrick, Alison Presmanes Hill
and others in the CSLU Autism research group
at OHSU. This material is based upon work
supported by the National Institute on Deafness
and Other Communication Disorders of the Na-
tional Institutes of Health under award number
R21DC010033. The content is solely the respon-
sibility of the authors and does not necessarily rep-
resent the official views of the National Institutes
of Health.
References
Eric Atwell. 1987. How to detect grammatical er-
rors in a text without parsing it. In Bente Maegaard,
editor, EACL, pages 38?45, Copenhagen, Denmark,
April. The Association for Computational Linguis-
tics.
Mari I Bowden and Richard K Fox. 2002. A diagnos-
tic approach to the detection of syntactic errors in
english for non-native speakers. The University of
Texas?Pan American Department of Computer Sci-
ence Technical Report.
Peter F. Brown, Vincent J. Della Pietra, Peter V.
de Souza, Jennifer C. Lai, and Robert L. Mercer.
1992. Class-based n-gram models of natural lan-
guage. Computational Linguistics, 18(4):467?479.
Andrew Caines and Paula Buttery. 2010. You talking
to me?: A predictive model for zero auxiliary con-
structions. In Proceedings of the 2010 Workshop on
NLP and Linguistics: Finding the Common Ground,
pages 43?51.
Marie-Catherine De Marneffe, Bill MacCartney,
Christopher D Manning, et al. 2006. Generat-
ing typed dependency parses from phrase structure
parses. In Proceedings of LREC, volume 6, pages
449?454.
John J Godfrey, Edward C Holliman, and Jane Mc-
Daniel. 1992. Switchboard: Telephone speech cor-
pus for research and development. In IEEE Interna-
tional Conference on Acoustics, Speech, and Signal
Processing, volume 1, pages 517?520.
Khairun-nisa Hassanali and Yang Liu. 2011. Measur-
ing language development in early childhood educa-
tion: a case study of grammar checking in child lan-
guage transcripts. In Proceedings of the 6th Work-
shop on Innovative Use of NLP for Building Educa-
tional Applications, pages 87?95.
George E. Heidorn, Karen Jensen, Lance A. Miller,
Roy J. Byrd, and Martin S Chodorow. 1982.
The EPISTLE text-critiquing system. IBM Systems
Journal, 21(3):305?326.
Matthew Honnibal and Mark Johnson. 2014. Joint
incremental disfluency detection and dependency
parsing. TACL, 2:131?142.
Nina H Macdonald, Lawrence T Frase, Patricia S Gin-
grich, and Stacey A Keenan. 1982. The writer?s
workbench: Computer aids for text analysis. Edu-
cational psychologist, 17(3):172?179.
Marie W Meteer, Ann A Taylor, Robert MacIntyre,
and Rukmini Iyer. 1995. Dysfluency annotation
stylebook for the switchboard corpus. University of
Pennsylvania.
Jon F Miller, Karen Andriacchi, and Ann Nockerts.
2011. Assessing language production using SALT
software: A clinician?s guide to language sample
analysis. SALT Software, LLC.
988
Eric Morley, Brian Roark, and Jan van Santen. 2013.
The utility of manual and automatic linguistic error
codes for identifying neurodevelopmental disorders.
In Proceedings of the Eighth Workshop on Innova-
tive Use of NLP for Building Educational Applica-
tions, pages 1?10, Atlanta, Georgia, June. Associa-
tion for Computational Linguistics.
Eric Morley, Anna Eva Hallin, and Brian Roark. 2014.
Challenges in automating maze detection. In Pro-
ceedings of the First Workshop on Computational
Linguistics and Clinical Psychology, pages 69?77,
Baltimore, Maryland, June.
Fabian Pedregosa, Ga?el Varoquaux, Alexandre Gram-
fort, Vincent Michel, Bertrand Thirion, Olivier
Grisel, Mathieu Blondel, Peter Prettenhofer, Ron
Weiss, Vincent Dubourg, Jake VanderPlas, Alexan-
dre Passos, David Cournapeau, Matthieu Brucher,
Matthieu Perrot, and Edouard Duchesnay. 2012.
Scikit-learn: Machine learning in python. CoRR,
abs/1201.0490.
Xian Qian and Yang Liu. 2013. Disfluency detection
using multi-step stacked learning. In Lucy Vander-
wende, Hal Daum?e III, and Katrin Kirchhoff, edi-
tors, HLT-NAACL, pages 820?825, Atlanta, Georgia,
USA, June. The Association for Computational Lin-
guistics.
Mohammad Sadegh Rasooli and Joel R. Tetreault.
2014. Non-monotonic parsing of fluent umm i mean
disfluent sentences. In Gosse Bouma and Yannick
Parmentier, editors, EACL, pages 48?53, Gothen-
burg, Sweden, April. The Association for Compu-
tational Linguistics.
LLC SALT Software. 2014a. Course
1306: Transcription - Conventions Part 3.
http://www.saltsoftware.com/
onlinetraining/section-page?
OnlineTrainingCourseSectionPageId=
76. [Online; accessed 29-May-2104].
LLC SALT Software. 2014b. Narrative
Story Retell Database. http://www.
saltsoftware.com/salt/databases/
NarStoryRetellRDBDoc.pdf. [Online;
accessed 29-May-2104].
Phyllis Schneider, Denyse Hayward, and Rita Vis
Dub?e. 2006. Storytelling from pictures using
the edmonton narrative norms instrument. Jour-
nal of Speech Language Pathology and Audiology,
30(4):224.
Jan PH Van Santen, Emily T Prud?hommeaux, Lois M
Black, and Margaret Mitchell. 2010. Com-
putational prosodic markers for autism. Autism,
14(3):215?236.
Yue Zhang and Joakim Nivre. 2011. Transition-based
dependency parsing with rich non-local features. In
ACL (Short Papers), pages 188?193, Portland, Ore-
gon, USA, June. The Association for Computational
Linguistics.
989
Workshop on Computational Linguistics and Clinical Psychology: From Linguistic Signal to Clinical Reality, pages 69?77,
Baltimore, Maryland USA, June 27, 2014.
c?2014 Association for Computational Linguistics
Challenges in Automating Maze Detection
Eric Morley
CSLU
OHSU
Portland, OR 97239
morleye@gmail.com
Anna Eva Hallin
Department of Communicative
Sciences and Disorders
New York University
New York, NY
ae.hallin@nyu.edu
Brian Roark
Google Research
New York, NY 10011
roarkbr@gmail.com
Abstract
SALT is a widely used annotation ap-
proach for analyzing natural language
transcripts of children. Nine annotated
corpora are distributed along with scoring
software to provide norming data. We ex-
plore automatic identification of mazes ?
SALT?s version of disfluency annotations
? and find that cross-corpus generalization
is very poor. This surprising lack of cross-
corpus generalization suggests substantial
differences between the corpora. This is
the first paper to investigate the SALT cor-
pora from the lens of natural language pro-
cessing, and to compare the utility of dif-
ferent corpora collected in a clinical set-
ting to train an automatic annotation sys-
tem.
1 Introduction
Assessing a child?s linguistic abilities is a critical
component of diagnosing developmental disorders
such as Specific Language Impairment or Autism
Spectrum Disorder, and for evaluating progress
made with remediation. Structured instruments
(?tests?) that elicit brief, easy to score, responses
to a sequence of items are a popular way of per-
forming such assessment. An example of a struc-
tured instrument is the CELF-4, which includes
nineteen multi-item subtests with tasks such as
object naming, word definition, reciting the days
of the week, or repeating sentences (Semel et al.,
2003). Over the past two decades, researchers
have discussed the limitations of standardized tests
and how well they tap into different language im-
pairments. Many have advocated the potential
benefits of language sample analysis (LSA) (John-
ston, 2006; Dunn et al., 1996). The analysis of
natural language samples may be particularly ben-
eficial for language assessment in ASD, where
pragmatic and social communication issues are
paramount yet may be hard to assess in a conven-
tional test format (Tager-Flusberg et al., 2009).
At present, the expense of LSA prevents it from
being more widely used. Heilmann (2010), while
arguing that LSA is not too time-consuming, esti-
mates that each minute of spoken language takes
five to manually transcribe and annotate. At this
rate, it is clearly impractical for clinicians to per-
form LSA on hours of speech. Techniques from
natural language processing could be used to build
tools to automatically annotate transcripts, thus fa-
cilitating LSA.
Here, we evaluate the utility of a set of anno-
tated corpora for automating a key annotation in
the de facto standard annotation schema for LSA:
the Systematic Analysis of Language Transcripts
(SALT) (Miller et al., 2011). SALT comprises a
scheme for coding transcripts of recorded speech,
together with software that tallies these codes,
computes scores describing utterance length and
error counts, among a range of other standard mea-
sures, and compares these scores with normative
samples. SALT codes indicate bound morphemes,
several types of grammatical errors (for example
using a pronoun of the wrong gender or case), and
mazes, which are defined as ?filled pauses, false
starts, and repetitions and revisions of words, mor-
phemes and phrases? (Miller et al., 2011, p. 48).
Mazes have sparked interest in the child lan-
guage disorders literature for several reasons.
They are most often analyzed from a language
processing perspective where the disruptions are
viewed as a consequence of monitoring, detect-
ing and repairing language, potentially including
speech errors (Levelt, 1993; Postma and Kolk,
1993; Rispoli et al., 2008). Several studies have
found that as grammatical complexity and utter-
ance length increase, the number of mazes in-
creases in typically developing children and chil-
dren with language impairments (MacLachlan and
69
Chapman, 1988; Nippold et al., 2008; Reuter-
ski?old Wagner et al., 2000; Wetherell et al., 2007).
Mazes in narrative contexts have been shown
to differ between typical children and children
with specific language impairment (MacLachlan
and Chapman, 1988; Thordardottir and Weismer,
2001), though others have not found reliable group
differences (Guo et al., 2008; Scott and Windsor,
2000). Furthermore, outside the potential useful-
ness of looking at mazes in themselves, mazes al-
ways have to be detected and excluded in order
to calculate other standard LSA measures such
as mean length of utterance and type or token
counts. Mazes also must be excluded when ana-
lyzing speech errors, since some mazes are in fact
self-corrections of language or speech errors.
Thus, automatically delimiting mazes could be
clinically useful in several ways. First, if mazes
can be automatically detected, standard measures
such as token and type counts can be calculated
with ease, as noted above. Automatic maze detec-
tion could also be a first processing step for au-
tomatically identifying errors: error codes cannot
appear in mazes, and certain grammatical errors
may be easier to identify once mazes have been
excised. Finally, after mazes have been identified,
further analysis of the mazes themselves (e.g. the
number of word in mazes, and the placement of
mazes in the sentence) can provide supplementary
information about language formulation abilities
and word retrieval abilities (Miller et al., 2011, p.
87-89).
We use the corpora included with the SALT
software to train maze detectors. These are the
corpora that the software uses to compute refer-
ence counts. These corpora share several charac-
teristics we expect to be typical of clinical data:
they were collected under a diverse set of circum-
stances; they were annotated by different groups;
the annotations ostensibly follow the same guide-
lines; and the annotations were not designed with
automation in mind. We will investigate whether
we can extract usable generalizations from the
available data, and explore how well the auto-
mated system performs, which will be of interest
to clinicians looking to expedite LSA.
2 Background
Here we provide an overview of SALT and maze
annotations. We are not aware of any attempts
to automate maze detection, although maze de-
tection closely resembles the well-established task
of edited word detection. We also provide an
overview of the corpora included with the SALT
software, which are the ones we will use to train
maze detectors.
2.1 SALT and Maze Annotations
The approach used in SALT has been in wide use
for nearly 30 years (Miller and Chapman, 1985),
and now also exists as a software package
1
pro-
viding transcription and coding support along with
tools for aggregating statistics for manual codes
over the annotated corpora and comparing with
age norms. The SALT software is not the focus of
this investigation, so we do not discuss it further.
Following the SALT guidelines, speech should
be transcribed orthographically and verbatim. The
transcript must include and indicate: the speaker
of each utterance, partial words or stuttering, over-
lapping speech, unintelligible words, and any non-
speech sounds from the speaker. Even atypical
language, for example neologisms (novel words)
or grammatical errors (for example ?her went?)
should be written as such.
There are three broad categories of SALT anno-
tations: indicators of 1) certain bound morphemes,
2) errors, and 3) mazes. In general, verbal suffixes
that are visible in the surface form (for example
-ing in ?going?) and clitics that appear with an un-
modified root (so for example -n?t in ?don?t?, but
not the -n?t in ?won?t?) must be indicated. SALT
includes various codes to indicate grammatical er-
rors including, but not limited to: overgeneral-
ization errors (?goed?), extraneous words, omit-
ted words or morphemes, and inappropriate ut-
terances (e.g. answering a yes/no question with
?fight?). For more information on these standard
annotations, we refer the reader to the SALT man-
ual (Miller et al., 2011).
Here, we are interested in automatically delim-
iting mazes. In SALT, filled pauses, repetitions
and revisions are included in the umberella term
?mazes? but the manual does not include defini-
tions for any of these categories. In SALT, mazes
are simply delimited by parentheses; they have no
internal structure, and cannot be nested. Contigu-
ous spans of maze words are delimited by a single
set of parentheses, as in the following utterance:
(1) (You have you have um there/?s only)
there/?s ten people
1
http://www.saltsoftware.com/
70
To be clear, we define the task of automatically ap-
plying maze detections as taking unannotated tran-
scripts of speech as input, and then outputting a
binary tag for each word that indicates whether or
not it is in a maze.
2.2 Edited Word Detection
Although we are not aware of any previous work
on automating maze detection, there is a well-
established task in natural language processing
that is quite similar: edited word detection. The
goal of edited word detection is to identify words
that have been revised or deleted by the speaker,
for example ?to Dallas? in the utterance ?I want to
go to Dallas, um I mean to Denver.?. Many in-
vestigations have approached edited word detec-
tion from what Nakatani et al. (1993) have termed
?speech-first? perspective, meaning that edited de-
tection is performed with features from the speech
signal in addition to a transcript. These ap-
proaches, however, are not applicable to the SALT
corpora, because they only contain transcripts. As
a result, we must adopt a text-first approach to
maze detection, using only features extracted from
a transcript.
The text-first approach to edited word detec-
tion is well established. One of the first investi-
gations taking a text-first approach was conducted
by Charniak and Johnson (2001). There, they
used boosted linear classifiers to identify edited
words. Later, Johnson and Charniak (2004) im-
proved upon the linear classifiers? performance
with a tree adjoining grammar based noisy chan-
nel model. Zwarts and Johnson (2011) improve
the noisy channel model by adding in a reranker
that leverages features extracted with the help of a
large language model.
Qian and Liu (2013) have developed what is
currently the best-performing edited word detec-
tor, and it takes a text-first approach. Unlike the
detector proposed by Zwarts and Johnson, Qian
and Liu?s does not rely on any external data. Their
detector operates in three passes. In the first pass,
filler words (?um?, ?uh?, ?I mean?, ?well?, etc.) are
detected. In the second and third passes, edited
words are detected. The reason for the three passes
is that in addition to extracting features (mostly
words and part of speech tags) from the raw tran-
script, the second and third steps use features ex-
tracted from the output of previous steps. An ex-
ample of such features is adjacent words from the
utterance with filler words and some likely edited
words removed.
3 Overview of SALT Corpora
We explore nine corpora included with the SALT
software. Table 1 has a high level overview of
these corpora, showing where each was collected,
the age ranges of the speakers, and the size of each
corpus both in terms of transcripts and utterances.
Note that only utterances spoken by the child are
counted, as we throw out all others.
Table 1 shows several divisions among the cor-
pora. We see that one group of corpora comes
from New Zealand, while the majority come from
North America. All of the corpora, except for Ex-
pository, include children at very different stages
of language development.
Four research groups were responsible for the
transcriptions and annotations of the corpora in
Table 1. One group produced the CONVERSA-
TION, EXPOSITORY, NARRATIVESSS, and NAR-
RATIVESTORYRETELL corpora. Another was
responsible for all of the corpora from New
Zealand. Finally, the ENNI and GILLAMNT cor-
pora were transcribed and annotated by two dif-
ferent groups. For more details on these cor-
pora, how they were collected, and the anno-
tators, we refer the reader to the SALT web-
site at http://www.saltsoftware.com/
resources/databases.html.
Some basic inspection reveals that the corpora
can be put into three groups based on the me-
dian utterance lengths, and the distribution of ut-
Table 1: Description of SALT corpora
Corpus Transcripts Utterances Age Range Speaker Location
CONVERSATION 584 82,643 2;9 ? 13;3 WI & CA
ENNI 377 56,108 3;11 ? 10;0 Canada
EXPOSITORY 242 4,918 10;7 ? 15;9 WI
GILLAMNT 500 40,102 5;0 ? 11;11 USA
NARRATIVESSS 330 16,091 5;2 ? 13;3 WI & CA
NARRATIVESTORYRETELL 500 14,834 4;4 ? 12;8 WI & CA
NZCONVERSATION 248 25,503 4;5 ? 7;7 NZ
NZPERSONALNARRATIVE 248 20,253 4;5 ? 7;7 NZ
NZSTORYRETELL 264 2,574 4;0 ? 7;7 NZ
71
terance
2
lengths, following the groups Figure 1,
with the EXPOSITORY and CONVERSATION cor-
pora in their own groups. Note that the counts
in Figure 1 are of all of the words in each ut-
terance, including those in mazes. We see that
the corpora in Group A have a modal utterance
length ranging from seven to ten words. There are
many utterances in these corpora that are shorter
or longer than the median length. Compared to
the corpora in Group A, those in Group B have
a shorter modal utterance length, and fewer long
utterances. In Figure 1, we see that the CONVER-
SATION corpus consists mostly of very short utter-
ances. At the other extreme is the EXPOSITORY
corpus, which resembles the corpora in Group A
in terms of modal utterance length, but which gen-
erally contains longer utterances than any of the
other corpora.
4 Maze Detection Experiments
4.1 Maze Detector
We carry out our experiments in automatic maze
detection using a statistical maze detector that
learns to identify mazes from manually labeled
data using features extracted from words and auto-
matically predicted part of speech tags. The maze
detector uses the feature set shown in Table 2.
This set of features is identical to the ones used by
the ?filler word? detector in Qian and Liu?s disflu-
ency detector (2013). We also use the same clas-
2
All of these corpora are reported to have been segmented
into c-units, which is defined as ?an independent clause with
its modifiers? (Miller et al., 2011).
Table 2: Feature templates for maze word detection, follow-
ing Qian and Liu (2013). We extract all of the above features
from both words and POS tags, albeit separately. t
0
indicates
the current word or POS tag, while t
?1
is the previous one
and t
1
is the following. The function I(a, b) is 1 if a and b
are identical, and otherwise 0. y
?1
is the tag predicted for the
previous word.
Category Features
Unigrams t
?2
, t
?1
, t
0
, t
1
, t
2
Bigrams t
?1
t
0
, t
0
t
1
Trigrams t
?2
t
?1
t
0
, t
?1
t
0
t
1
, t
0
t
1
t
2
Logic Unigrams I(t
i
, t
0
), I(p
i
, p
0
);
?4 ? i ? 4; i 6= 0
Logic Bigrams I(t
i?2
t
i?1
, t
?1
t
0
)
I(t
i
t
i+1
, t
0
t
i+1
);
?4 ? i ? 4; i 6= 0
Predicted tag y
?1
(a) Group A
(b) Group B
(c) Others
Figure 1: Histograms of utterance length (including words
in mazes) in SALT corpora
sifier as the second and third steps of their system:
the Max Margin Markov Network ?M3N? classi-
fier in the pocketcrf toolkit (available at http://
code.google.com/p/pocketcrf/). The
M3N classifier is a kernel-based classifier that is
able to leverage the sequential nature the data in
this problem (Taskar et al., 2003). We use the fol-
lowing label set: S-O (not in maze); S-M (sin-
gle word maze); B-M (beginning of multi-word
72
maze); I-M (in multi-word maze); and E-M (end
of multi-word maze). The M3N classifier allows
us to set a unique penalty for each pair of con-
fused labels, for example penalizing an erroneous
prediction of S-O (failing to identify maze words)
more heavily than spurious predictions of maze
words (all -M labels). This ability is particularly
useful for maze detection because maze words are
so infrequent compared to words that are not in
mazes.
4.2 Evaluation
We split each SALT corpus into training, develop-
ment, and test partitions. Each training partition
contains 80% of the utterances the corpus, while
the development and test partitions each contain
10% of the utterances. We use the development
portion of each corpus to set the penalty matrix
system to roughly balance precision and recall.
We evaluate maze detection in terms of both
tagging performance and bracketing performance,
both of which are standard forms of evaluation
for various tasks in the Natural Language Pro-
cessing literature. Tagging performance captures
how effectively maze detection is done on a word-
by-word basis, while bracketing performance de-
scribes how well each maze is identified in its en-
tirety. For both tagging and bracketing perfor-
mance, we count the number of true and false
positives and negatives, as illustrated in Figure 2.
In tagging performance, each word gets counted
once, while in bracketing performance we com-
pare the predicted and observed maze spans. We
use these counts to compute the following metrics:
(P)recision =
tp
tp + fp
(R)ecall =
tp
tp + fn
F1 =
2PR
P + R
Note that partial words and punctuation are both
ignored in evaluation. We exclude punctuation be-
cause punctuation does not need to be included
in mazes: it is not counted in summary statistics
(e.g. MLU, word count, etc.), and punctuation er-
rors are not captured by the SALT error codes.
We exclude partial words because they are always
in mazes, and therefore can be detected trivially
with a simple rule. Furthermore, because par-
tial words are excluded from evaluation, the per-
formance metrics are comparable across corpora,
even if they vary widely in the frequency of partial
words.
For both space and clarity, we do not present
the complete results of every experiment in this
paper, although they are available online
3
. In-
stead, we present the complete baseline results,
and then report F1 scores that are significantly
better than the baseline. We establish statistical
significance by using a randomized paired-sample
test (see Yeh (2000) or Noreen (1989)) to com-
pare the baseline system (system A) and the pro-
posed system (system B). First, we compute the
difference d in F1 score between systems A and B.
Then, we repeatedly construct a random set of pre-
dictions for each input item by choosing between
the outputs of system A and B with equal proba-
bility. We compute the F1 score of these random
predictions, and if it exceeds the F1 score of the
baseline system by at least d, we count the itera-
tion as a success. The significance level is at most
the number of successes divided by one more than
the number of trials (Noreen, 1989).
4.3 Baseline Results
For each corpus, we train the maze detector on
the training partition and test it on the devel-
opment partition. The results of these runs are
in Table 3, which also includes the rank of the
size of each corpus (1 = biggest, 9 = smallest).
We see immediately that our maze detector per-
forms far better on some corpora than on oth-
ers, both in terms of tagging and bracketing per-
formance. We note that maze detection perfor-
mance is not solely determined by corpus size:
tagging performance is substantially worse on the
largest corpus (CONVERSATION) than the small-
3
http://bit.ly/1dtFTPl
Figure 2: Tagging and bracketing evaluation for maze detection. TP = True Positive, FP = False Positive, TN = True Negative,
FN = False Negative
Pred. ( and then it ) oh and then it ( um ) put his wings out .
Gold ( and then it oh ) and then it ( um ) put his wings out .
Tag TP ?3 FN TN ?3 TP TN ?4
Brack. FP, FN TP
73
Tagging Bracketing
Corpus Size Rank P R F1 P R F1
CONVERSATION 1 0.821 0.779 0.800 0.716 0.729 0.723
ENNI 2 0.923 0.882 0.902 0.845 0.837 0.841
EXPOSITORY 8 0.703 0.680 0.691 0.620 0.615 0.618
GILLAMNT 3 0.902 0.907 0.904 0.827 0.843 0.835
NARRATIVESSS 6 0.781 0.768 0.774 0.598 0.679 0.636
NARRATIVESTORYRETELL 7 0.799 0.774 0.786 0.627 0.671 0.649
NZCONVERSATION 4 0.832 0.835 0.838 0.707 0.757 0.731
NZPERSONALNARRATIVE 5 0.842 0.835 0.838 0.707 0.757 0.731
NZSTORYRETELL 9 0.905 0.862 0.883 0.773 0.780 0.776
Table 3: Baseline maze detection performance on development sections of SALT corpora: corpus-specific models
est (NZSTORYRETELL).
4.4 Generic Model
We train a generic model for maze detection on
all of the training portions of the nine SALT cor-
pora. We use the combined development sections
of all of the corpora to tune the loss matrix for bal-
anced precision and recall. We then test the re-
sulting model on the development section of each
SALT corpus, and evaluate in terms of tagging and
bracketing accuracy.
We find that the generic model performs worse
than the baseline in terms of both tagging and
bracketing performance on six of the nine corpora
corpora. The generic model significantly improves
tagging (F1=0.925, p ? 0.0022) on the NZSTO-
RYRETELL corpus, but the improvement in brack-
eting performance is not significant (p ? 0.1635).
There is improvement of both tagging (F1=0.805,
p ? 0.0001) and bracketing (F1=0.677, p ?
0.0025) performance on the NARRATIVESSS cor-
pus. The generic model does not perform better
than the baseline corpus-specific models on any
other corpora.
The poor performance of the generic model is
somewhat surprising, as it is trained with far more
data than any of the corpus-specific models. In
many tasks in natural language processing, in-
creasing the amount of training data improves the
resulting model, although this is not necessarily
the case if the additional data is noisy or out-of-
domain. This suggests two possibilities: 1) the
language in the corpora varies substantially, per-
haps due to the speakers? ages or the activity that
was transcribed; and 2) the maze annotations are
inconsistent between corpora.
4.5 Multi-Corpus Models
It is possible that poor performance of the generic
model relative to the baseline corpus-specific
models can be attributed to systematic differences
between the SALT corpora. We may be able to
train a model for a set of corpora that share particu-
lar characteristics that can outperform the baseline
models because such a model could leverage more
training data. We first evaluate a model for corpora
that contain transcripts collected from children of
similar ages. We also evaluate task-specific mod-
els, specifically a maze-detection model for story
retellings, and another for conversations. These
two types of models could perform well if chil-
dren of similar ages or performing similar tasks
produce mazes in a similar manner. Finally, we
train models for each group of annotators to see
whether systematic variation in annotation stan-
dards between research groups could be respon-
sible for the generic model?s poor performance.
We train all of these models similarly to the
generic model: we pool the training sections of
the selected corpora, train the model, then test on
the development section of each selected corpus.
We use the combined development sections of the
selected corpora to tune the penalty matrix to bal-
ance precision and recall.
Again, we only report F1 scores that are higher
than the baseline model?s, and we test whether
the improvement is statistically significant. We
do not report results where just the precision or
just the recall exceeds the baseline model perfor-
mance, but not F1, because these are typically the
result of model imbalance, favoring precision at
the expense of recall or vice versa. Bear in mind
that we roughly balance precision and recall on the
combined development sets, not each corpus?s de-
velopment set individually.
4.5.1 Age-Specific Model
We train a single model on the following cor-
pora: ENNI, GILLAMNT, NARRATIVESSS, and
NARRATIVESTORYRETELL. As shown in Ta-
ble 1, these corpora contain transcripts collected
from children roughly aged 4-12. In three of the
four corpora, the age-based model performs worse
than the baseline. The only exception is NAR-
74
RATIVESTORYRETELL, for which the age-based
model outperforms the baseline in terms of both
tagging (F1=0.794, p ? 0.0673) and bracketing
(F1=0.679, p ? 0.0062).
4.5.2 Task-Specific Models
We construct two task-specific models for maze
detection: one for conversations, and the other
for narrative tasks. A conversational model
trained on the CONVERSATION and NZCON-
VERSATION corpora does not improve perfor-
mance on either corpus relative to the base-
line. A model for narrative tasks trained on the
ENNI, GILLAMNT, NARRATIVESSS, NARRA-
TIVESTORYRETELL, NZPERSONALNARRATIVE
and NZSTORYRETELL corpora only improves
performance on one of these, relative to the base-
line. Specifically, the narrative task model im-
proves performance on the NARRATIVESSS cor-
pus both in terms of tagging (F1=0.797, p ?
0.0005) and bracketing (F1=0.693, p ? 0.0002).
4.5.3 Research Group-Specific Models
There are two groups of researchers that have
annotated multiple corpora: a group in New
Zealand, which annotated the NZCONVERSA-
TION, NZPERSONALNARRATIVE, and NZSTO-
RYRETELL corpora; and another group in Wis-
consin, which annotated the CONVERSATION,
EXPOSITORY, NARRATIVESSS, and NARRA-
TIVESTORYRETELL corpora. We trained re-
search group-specific models, one for each of
these groups.
Overall, these models do not improve perfor-
mance. The New Zealand research group model
does not significantly improve performance on any
of the corpora they annotated, relative to the base-
line. The Wisconsin research group model yields
significant improvement on the NARRATIVESSS
corpus, both in terms of tagging (F1=0.803, p ?
0.0001) and bracketing (F1=0.699, p ? 0.0001)
performance. Performance on the CONVERSA-
TION and EXPOSITORY corpora is lower with
the Wisconsin research group model than with
the corpus-specific baseline models, while perfor-
mance on NARRATIVESTORYRETELL is essen-
tially the same with the two models.
5 Discussion
We compared corpus-specific models for maze de-
tection to more generic models applicable to mul-
tiple corpora, and found that the generic models
performed worse than the corpus-specific ones.
This was surprising because the more generic
models were able to leverage more training data
than the corpus specific ones, and more training
data typically improves the performance of data-
driven models such as our maze detector. These
results strongly suggest that there are substantial
differences between the nine SALT corpora.
We suspect there are many areas in which the
SALT corpora diverge from one another. One
such area may be the nature of the language: per-
haps the language differs so much between each
of the corpora that it is difficult to learn a model
appropriate for one corpus from any of the oth-
ers. Another potential source of divegence is in
transcription, which does not always follow the
SALT guidelines (Miller et al., 2011). Two of the
idiosyncracies we have observed are: more than
three X?s (or a consonant followed by multiple
X?s) to indicate unintelligble language, instead of
the conventional X, XX, and XXX for unintelligi-
ble words, phrases, and utterances, respectively;
and non-canonical transcriptions of what appear
to be filled pauses, including ?uhm? and ?umhm?.
These idiosyncracies could be straightforward to
normalize using automated methods, but doing so
requires that they be identified to begin with. Fur-
thermore, although these idiosyncracies may ap-
pear to be minor, taken together they may actually
be substantial.
Another potential source of variation between
corpora is likely in the maze annotations them-
selves. SALT?s definition of mazes, ?filled pauses,
false starts, and repetitions and revisions of words,
morphemes and phrases? (Miller et al., 2011, p.
48), is very short, and none of the components
is defined in the SALT manual. In contrast, the
Disfluency Annotation Stylebook for Switchboard
Corpus (Meteer et al., 1995) describes a system
of disfluency annotations over approximately 25
pages, devoting two pages to filled pauses and five
to restarts. The Switchboard disfluency annota-
tions are much richer than SALT maze annota-
tions, and we are not suggesting that they are ap-
propriate for a clinical setting. However, between
the stark contrast in detail of the two annotation
systems? guidelines, and our finding that cross-
corpus models for maze detection perform poorly,
we recommend that SALT?s definition of mazes
and their components be elaborated and clarified.
This would be of benefit not just to those trying to
75
automate the application of SALT annotations, but
also to clinicians who use SALT and depend upon
consistently annotated transcripts.
There are two clear tasks for future research that
build upon these results. First, maze detection per-
formance can surely be improved. We note, how-
ever, that evaluating maze detectors in terms of F1
score may not always be appropriate if such a de-
tector is used in a pipeline. For example, there
may be a minimum acceptable level of precision
for a maze detector used in a preprocessing step
to applying SALT error codes so that maze exci-
sion does not create additional errors. In such a
scenario, the goal would be to maximize recall at
a given level of precision.
The second task suggested by this paper is to ex-
plore the hypothesized differences within and be-
tween corpora. Such exploration could ultimately
result in more rigorous, communicable guidelines
for maze annotations, as well as other annotations
and conventions in SALT. If there are systematic
differences in maze annotations across the SALT
corpora, such exploration could suggest ways of
making the annotations consistent without com-
pletely redoing them.
Acknowledgments
We would like to thank members of the ASD re-
search group at the Center for Spoken Language
Understanding at OHSU, for useful input into this
study: Jan van Santen, Alison Presmanes Hill,
Steven Bedrick, Emily Prud?hommeaux, Kyle
Gorman and Masoud Rouhizadeh. This research
was supported in part by NIH NIDCD award
R01DC012033 and NSF award #0826654. Any
opinions, findings, conclusions or recommenda-
tions expressed in this publication are those of the
authors and do not reflect the views of the NIH or
NSF.
References
Eugene Charniak and Mark Johnson. 2001. Edit detec-
tion and parsing for transcribed speech. In Proceed-
ings of the second meeting of the North American
Chapter of the Association for Computational Lin-
guistics on Language technologies, pages 1?9. As-
sociation for Computational Linguistics.
Michelle Dunn, Judith Flax, Martin Sliwinski, and
Dorothy Aram. 1996. The use of spontaneous lan-
guage measures as criteria for identifying children
with specific language impairment: An attempt to
reconcile clinical and research incongruence. Jour-
nal of Speech and Hearing research, 39(3):643.
Ling-yu Guo, J Bruce Tomblin, and Vicki Samel-
son. 2008. Speech disruptions in the narratives
of english-speaking children with specific language
impairment. Journal of Speech, Language, and
Hearing Research, 51(3):722?738.
John J Heilmann. 2010. Myths and realities of lan-
guage sample analysis. SIG 1 Perspectives on Lan-
guage Learning and Education, 17(1):4?8.
Mark Johnson and Eugene Charniak. 2004. A tag-
based noisy-channel model of speech repairs. In
Proceedings of the 42nd Meeting of the Association
for Computational Linguistics (ACL?04), Main Vol-
ume, pages 33?39, Barcelona, Spain, July.
Judith R Johnston. 2006. Thinking about child lan-
guage: Research to practice. Thinking Publications.
Willem JM Levelt. 1993. Speaking: From intention to
articulation, volume 1. MIT press, Cambridge, MA.
Barbara G MacLachlan and Robin S Chapman. 1988.
Communication breakdowns in normal and lan-
guage learning-disabled children?s conversation and
narration. Journal of Speech and Hearing Disor-
ders, 53(1):2.
Marie W Meteer, Ann A Taylor, Robert MacIntyre,
and Rukmini Iyer. 1995. Dysfluency annotation
stylebook for the switchboard corpus. University of
Pennsylvania.
Jon Miller and Robin Chapman. 1985. Systematic
analysis of language transcripts. Madison, WI: Lan-
guage Analysis Laboratory.
Jon F Miller, Karen Andriacchi, and Ann Nockerts.
2011. Assessing language production using SALT
software: A clinician?s guide to language sample
analysis. SALT Software, LLC.
Christine Nakatani and Julia Hirschberg. 1993. A
speech-first model for repair detection and correc-
tion. In Proceedings of the 31st Annual Meeting
of the Association for Computational Linguistics,
pages 46?53, Columbus, Ohio, USA, June. Associ-
ation for Computational Linguistics.
Marilyn A Nippold, Tracy C Mansfield, Jesse L Billow,
and J Bruce Tomblin. 2008. Expository discourse
in adolescents with language impairments: Exam-
ining syntactic development. American Journal of
Speech-Language Pathology, 17(4):356?366.
Eric W Noreen. 1989. Computer intensive methods
for testing hypotheses. an introduction. 1989. John
Wiley & Sons, 2(5):33.
Albert Postma and Herman Kolk. 1993. The covert
repair hypothesis: Prearticulatory repair processes in
normal and stuttered disfluencies. Journal of Speech
and Hearing Research, 36(3):472.
76
Xian Qian and Yang Liu. 2013. Disfluency detection
using multi-step stacked learning. In Proceedings of
the 2013 Conference of the North American Chap-
ter of the Association for Computational Linguistics:
Human Language Technologies, pages 820?825, At-
lanta, Georgia, June. Association for Computational
Linguistics.
Christina Reuterski?old Wagner, Ulrika Nettelbladt, Bir-
gitta Sahl?en, and Claes Nilholm. 2000. Conver-
sation versus narration in pre-school children with
language impairment. International Journal of Lan-
guage & Communication Disorders, 35(1):83?93.
Matthew Rispoli, Pamela Hadley, and Janet Holt.
2008. Stalls and revisions: A developmental per-
spective on sentence production. Journal of Speech,
Language, and Hearing Research, 51(4):953?966.
Cheryl M Scott and Jennifer Windsor. 2000. General
language performance measures in spoken and writ-
ten narrative and expository discourse of school-age
children with language learning disabilities. Journal
of Speech, Language & Hearing Research, 43(2).
Eleanor Messing Semel, Elisabeth Hemmersam Wiig,
and Wayne Secord. 2003. Clinical evaluation of
language fundamentals. The Psychological Corpo-
ration, A Harcourt Assessment Company, Toronto,
Canada, fourth edition.
Helen Tager-Flusberg, Sally Rogers, Judith Cooper,
Rebecca Landa, Catherine Lord, Rhea Paul, Ma-
bel Rice, Carol Stoel-Gammon, Amy Wetherby, and
Paul Yoder. 2009. Defining spoken language bench-
marks and selecting measures of expressive lan-
guage development for young children with autism
spectrum disorders. Journal of Speech, Language
and Hearing Research, 52(3):643.
Ben Taskar, Carlos Guestrin, and Daphne Koller. 2003.
Maximum-margin markov networks. In Neural In-
formation Processing Systems (NIPS).
Elin T Thordardottir and Susan Ellis Weismer. 2001.
Content mazes and filled pauses in narrative lan-
guage samples of children with specific language
impairment. Brain and cognition, 48(2-3):587?592.
Danielle Wetherell, Nicola Botting, and Gina Conti-
Ramsden. 2007. Narrative in adolescent specific
language impairment (sli): A comparison with peers
across two different narrative genres. International
Journal of Language & Communication Disorders,
42(5):583?605.
Alexander Yeh. 2000. More accurate tests for the sta-
tistical significance of result differences. In Pro-
ceedings of the 18th conference on Computational
linguistics-Volume 2, pages 947?953. Association
for Computational Linguistics.
Simon Zwarts and Mark Johnson. 2011. The impact
of language models and loss functions on repair dis-
fluency detection. In Proceedings of the 49th An-
nual Meeting of the Association for Computational
Linguistics: Human Language Technologies, pages
703?711, Portland, Oregon, USA, June. Association
for Computational Linguistics.
77
