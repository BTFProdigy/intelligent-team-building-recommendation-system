Proceedings of NAACL-HLT 2013, pages 248?258,
Atlanta, Georgia, 9?14 June 2013. c?2013 Association for Computational Linguistics
Large-Scale Discriminative Training for Statistical Machine Translation
Using Held-Out Line Search
Jeffrey Flanigan Chris Dyer Jaime Carbonell
Language Technologies Institute
Carnegie Mellon University
Pittsburgh, PA 15213, USA
{jflanigan,cdyer,jgc}@cs.cmu.edu
Abstract
We introduce a new large-scale discrimina-
tive learning algorithm for machine translation
that is capable of learning parameters in mod-
els with extremely sparse features. To ensure
their reliable estimation and to prevent over-
fitting, we use a two-phase learning algorithm.
First, the contribution of individual sparse fea-
tures is estimated using large amounts of par-
allel data. Second, a small development cor-
pus is used to determine the relative contri-
butions of the sparse features and standard
dense features. Not only does this two-phase
learning approach prevent overfitting, the sec-
ond pass optimizes corpus-level BLEU of the
Viterbi translation of the decoder. We demon-
strate significant improvements using sparse
rule indicator features in three different trans-
lation tasks. To our knowledge, this is the
first large-scale discriminative training algo-
rithm capable of showing improvements over
the MERT baseline with only rule indicator
features in addition to the standard MERT fea-
tures.
1 Introduction
This paper is about large scale discriminative
training of machine translation systems. Like
MERT (Och, 2003), our procedure directly optimizes
the cost of the Viterbi output on corpus-level met-
rics, but does so while scaling to millions of features.
The training procedure, which we call the Held-Out
Line Search algorithm (HOLS), is a two-phase iter-
ative batch optimization procedure consisting of (1)
a gradient calculation on a differentiable approxima-
tion to the loss on a large amount of parallel training
data and (2) a line search (using the standard MERT
algorithm) to search in a subspace defined by the
gradient for the weights that minimize the true cost.
While sparse features are successfully used in
many NLP systems, such parameterizations pose a
number of learning challenges. First, since any one
feature is likely to occur infrequently, a large amount
of training data is necessary to reliably estimate their
weights. Therefore, we use the full parallel train-
ing data (rather than a small development set) to
estimate the contribution of the sparse features in
phase 1. Second, sparse features can lead to overfit-
ting. To prevent this from hurting our model?s ability
to generalize to new data, we do two things. First,
we use ?grammar and language model folds? (trans-
lation grammars and language models built from
other portions of the training data than are being
used for discriminative training), and second, we
run the phase 2 line search on a held-out develop-
ment set. Finally, since our algorithm requires de-
coding the entire training corpus, it is desirable (on
computational grounds) to only require one or two
passes through the training data. To get the most out
of these passes, we rescale features by their inverse
frequency which improves the scaling of the opti-
mization problem. In addition to learning with few
passes through the training data, the HOLS algorithm
has the advantage that it is easily parallelizable.
After reviewing related work in the next section,
we analyze two obstacles to effective discriminative
learning for machine translation: overfitting (since
both rules and their weights must be learned, if they
are learned together degenerate solutions that fail to
generalize are possible) and poor scaling (since MT
248
decoding is so expensive, it is not feasible to make
many passes through large amounts of training data,
so optimization must be efficient). We then present
the details of our algorithm that addresses these is-
sues, give results on three language pairs, and con-
clude.
2 Related Work
Discriminative training of machine translation sys-
tems has been a widely studied problem for the
last ten years. The pattern of using small, high-
quality development sets to tune a relatively small
number of weights was established early (Och and
Ney, 2002; Och, 2003). More recently, standard
structured prediction algorithms that target linearly
decomposable approximations of translation qual-
ity metrics have been thoroughly explored (Liang et
al., 2006; Smith and Eisner, 2006; Watanabe et al,
2007; Rosti et al, 2010; Hopkins and May, 2011;
Chiang, 2012; Gimpel and Smith, 2012; Cherry and
Foster, 2012; Saluja et al, 2012). These have with-
out exception used sentence-level approximations of
BLEU to determine oracles and update weights using
a variety of criteria and with a variety of different
theoretical justifications.
Despite advancements in discriminative training
for machine translation, large-scale discriminative
training with rule indicator features has remained
notoriously difficult. Rule indicator features are an
extremely sparse and expressive parameterization of
the translation model: every rule has a feature, each
of which has its own separately tuned weight, which
count how often a specific rule is used in a trans-
lation. Early experiments (Liang et al, 2006) used
the structured perceptron to tune a phrase-based sys-
tem on a large subset of the training data, show-
ing improvements when using rule indicator fea-
tures, word alignment features, and POS tag fea-
tures. Another early attempt (Tillmann and Zhang,
2006) used phrase pair and word features in a block
SMT system trained using stochastic gradient de-
scent for a convex loss function, but did not compare
to MERT. Problems of overfitting and degenerate
derivations were tackled with a probabilistic latent
variable model (Blunsom et al, 2008) which used
rule indicator features yet failed to improve upon
the MERT baseline for the standard Hiero features.
Techniques for distributed learning and feature se-
lection for the perceptron loss using rule indicator,
rule shape, and source side-bigram features have re-
cently been proposed (Simianer et al, 2012), but no
comparison to MERT was made.
3 Difficulties in Large-Scale Training
Discriminative training for machine translation is
complicated by several factors. First, both transla-
tion rules and feature weights are learned from par-
allel data. If the same data is used for both tasks,
overfitting of the weights is very possible.1 Second,
the standard MT cost function, BLEU (Papineni et
al., 2002), does not decompose additively over train-
ing instances (because of the ?brevity penalty?) and
so approximations are used?these often have prob-
lems with the length (Nakov et al, 2012). Finally,
state-of-the-art MT systems make extensive good
use of ?dense? features, such as the log probabil-
ity of translation decisions under a simpler gener-
ative translation model. Our goal is to begin to
use much sparser features without abandoning the
proven dense features; however, extremely sparse
features leads to problems of scaling in the optimiza-
tion problem as we will show.
3.1 Training Data and Overfitting
One of the big questions in discriminative train-
ing of machine translation systems is why standard
machine learning techniques can perform so poorly
when applied to large-scale learning on the train-
ing data. Figure 1 shows a good example of this.
The structured SVM (Tsochantaridis et al, 2004;
Cherry and Foster, 2012) was used to learn the
weights for a Chinese-English Hiero system (Chi-
ang, 2005) with just eight features, using stochastic
gradient descent (SGD) for online learning (Bottou,
1998; Bottou, 2010). The weights were initialized
from MERT values tuned on a 2k-sentence dev set
(MT06), and the figure shows the progress of the on-
line method during a single pass through the 300k-
sentence Chinese-English FBIS training set.
As the training progresses in Figure 1, BLEU
scores on the training data go up, but scores on the
1Previous work has attempted to mitigate the risk of overfit-
ting through careful regularization (Blunsom et al, 2008; Simi-
aner et al, 2012).
249
0 50000 150000 2500002
6
30
34
BLE
U
Figure 1: Progress of the online SVM training
method after each training instance on FBIS dataset.
The solid line is BLEU on the test set, training set is
the dashed line, and the dev set is dotted.
dev and test sets go down. If we hope to apply dis-
criminative training techniques for not eight but mil-
lions of features on the training data, we must find a
way to prevent this overfitting.
We suggest that an important reason why overfit-
ting occurs is that the training data is used not only to
tune the system but also to extract the grammar, and
the target side is included in the data used to build
the language model. To test this hypothesis, we
compare tuning using three different dev sets: 1000
sentences from the standard 4-reference MT06 dev
set (Dev1000), a random selection of 1000 sentences
that overlap with the corpus used to extract transla-
tion rules (In1000), and 1000 sentences that came
from the training data but were then excluded from
rule extraction (Out1000). We run MERT on each of
these and evaluate. For evaluation we compare three
different sets: a random 1000 sentences from the
training corpus that was used to create the grammars
but which do not overlap with In1000 (Train1000),
the 1000 sentence dev set (Dev1000), and the stan-
dard 4-reference MT02-03 test set (Test). The en-
tire experiment (including selection of the 1000 sen-
tences) was replicated 5 times.
Table 1 shows the results, averaging over repli-
cations. Out1000 gives much higher scores on the
testing data, validating our hypothesis that tuning on
data used to build the LM and grammar can lead to
overfitting. However, the results also show that tun-
ing on the training data, even when it is held-out, can
still lead to a small reduction in translation quality.
One possible reason is that, unlike the training data
which may come from various domains, the dev data
is in the same domain as the test data and is typically
of higher quality (e.g., it has multiple references).
Table 1: MERT on Zh-En FBIS
Tuning Set Train1000 Dev1000 Test
Dev1000 32.2?1.1 30.2?.1 34.1?.3
In1000 37.0?1.2 25.7?.7 30.1?.6
Out1000 34.9?.8 29.0?.4 33.6?.5
3.2 Poor Scaling
When features occur with different frequencies,
changing the weights of more frequent features has
a larger effect than changing the weights of less fre-
quent features.2 An example of frequent features
that have a large impact on the translation quality are
the language model and translation model features.
These features are non-zero for every sentence, and
changing their weights slightly has a large impact on
translation output. In contrast, changing the weight
drastically for a feature that is non-zero for only one
out of a million sentences has very little effect on
translation metrics. The sensitivity of the translation
output to some feature weights over others was also
pointed out in a recent paper (Chiang, 2012).
When the objective function is more sensitive
in some dimensions than others, the optimization
problem is said to be poorly scaled (Nocedal and
Wright, 2000), and can slow down the convergence
rate for some optimizers. A typical fix is to rescale
the dimensions, as we will do in Section 5.2.
To verify that BLEU is poorly scaled with respect
to weights of rule indicator features, we look at the
effect of changing the weights for individual rules.
We vary the feature weights for four randomly cho-
sen frequent rules and four randomly chosen infre-
quent rules on our FBIS dev set (Figure 2). One
can think of this plot as a ?cross-section? of the
BLEU score in the direction of the feature weight.
The dense features are set to MERT-tuned values
which are normalized to one. All other rule indi-
cator features are set to zero, except the rule fea-
ture weight that is varied. The frequent features
2By the ?frequency of a feature? we mean this: given a set of
input instances, how many input instances the feature is nonzero
in the space of possible outputs for that input.
250
were selected randomly from the 20 most common
rule indictor features in the n-best lists on the dev
set, and the infrequent features were selected from
the features that only occurred once in these n-best
lists. The plots indicate that the BLEU score is
?2 ?1 0 1 22
7.0
28.0
29.0
30.0
Weight
BLE
U
(a) Four representative frequent sparse features.
?10 ?5 0 5 1030
.100
30.1
05
30.1
10
30.1
15
30.1
20
Weight
BLE
U
(b) Four representative infrequent sparse features
Figure 2: The effect of varying weights for rule indicator
features on the BLEU score. Note the difference of scale
on the y axis.
poorly scaled for rule feature weights. Changing the
weights for one of the common features changes the
BLEU score by almost 2.5 BLEU points, while for
the infrequent features the BLEU score changes by
at most .02 BLEU points. We take this as a sign that
gradient descent based optimizers for machine trans-
lation with rule features could be slow to converge
due to poor scaling, and that rescaling will improve
convergence.
3.3 Sentence Level Approximations to BLEU
Finally, we note that discriminative training methods
often use a sentence level approximation to BLEU. It
has been shown that optimizing corpus level BLEU
versus sentence level BLEU can lead to improve-
ments of up to nearly .4 BLEU points on the test
set (Nakov et al, 2012). Possible fixes to this prob-
lem include using a proper sentence level metric
such a METEOR (Denkowski and Lavie, 2011) or a
pseudo-corpus from the last few updates (Chiang et
al., 2008). However, in light of the result from sec-
tion 3.1 that tuning on the dev set is still better than
tuning on a held-out portion of the training data, we
observe that tuning a corpus level metric on a high-
quality dev set from the same domain as the test set
probably leads to the best translation quality. At-
tempts to improve upon this strong baseline lead us
to the development of the HOLS algorithm which we
describe next.
4 Held-Out Line Search Algorithm
In this section we give the details of the learning al-
gorithm that we developed for use in large-scale dis-
criminative training for machine translation, which
we call the Held-Out Line Search algorithm (abbre-
viated HOLS). It optimizes millions of features using
evidence from the full set of parallel training data
to obtain optimal predictive performance on a sec-
ondary development set.
The learning algorithm is a batch optimizer where
each iteration has two phases: a gradient calcula-
tion phase and a line search phase. In the gradient
calculation phase, a surrogate loss function is used
to compute a gradient for the feature weights. The
gradient is computed over a subset of the training
data. In the line search phase, a separate optimizer
(MERT) is used to search along this gradient to opti-
251
mize the evaluation score of the one-best prediction
of a translation system on a secondary development
set.3 The secondary dev set is a crucial aspect of
the algorithm that helps reduce overfitting (we will
demonstrate this in the experiments section).
During the line search phase we allow some of
the feature weights to be adjusted independently of
the line search. We will call the features we opti-
mize independently the dense features, and the fea-
tures we include in the line search the sparse fea-
tures.4 The feature vector space V is the direct sum
V = Vd ? Vs, where Vd is the vector space of
the dense features and Vs is the vector space of the
sparse features. The feature and weight vectors de-
compose as ~f = ~fd + ~fs and ~w = ~wd + ~ws. ~fd and
~wd are in the dense vector space, and the ~fs and ~ws
are in the sparse vector space.
In the gradient phase, we calculate a gradient of
the surrogate loss function and project it onto the
subspace of the sparse features. Let Ps be the pro-
jection operator onto Vs. Then the gradient projected
onto the sparse feature space is
~g = Ps?~wL?(~w,Dg)
where Dg is the subset of the training data used to
calculate this gradient, and L? is the surrogate loss
function. This just sets the dense components of the
gradient of L? to zero.
In the line search phase, we use a separate opti-
mizer to optimize the weights for the dense features
and the stepsize ?. Let L be the loss function we
wish to minimize, then
(~w?d, ?
?) = arg min
~wd,?
L(~wd + ~ws + ?~g,Dl)
Note ~ws is held fixed from the previous iteration. Dl
is the portion of the training data which is used in
the line search phase, and must not overlap with Dg
used in the gradient calculation phase.5
After the line search, the dense weights are up-
dated to ~w?d, and the sparse weights are updated with
~ws ? ~ws + ??~g. The process repeats for another
iteration as desired (or until convergence).
3While we use BLEU any loss function whose sufficient
statistics decompose over training instances could be used.
4The split over the features does not have to be done this
way in practice.
5L(~w?d, ?
?,Dl) can be thought of as unbiased or more accu-
rately less biased estimator of expected loss when Dl?Dg = ?.
5 Procedure for Large-Scale Training
Now that we have described the HOLS algorithm in
general, we next describe how to apply it to large-
scale training of machine translation systems with
millions of features. We find that it is necessary to
use disjoint sets of training instances for grammar
extraction and gradient estimation (?5.1) and to deal
with the poor scaling of the optimization problem
(?5.2).
5.1 Grammar and Language Model Folds
To address the problem of overfitting on the train-
ing data, we split the training data into n-folds, and
extract grammars for each fold using the data from
the other n? 1 folds. Similarly, we build a language
model for each fold using a target language mono-
lingual corpus and the target side of the training data
from the other n ? 1 folds. Whenever we decode a
sentence from the training data, we use the gram-
mar and language model for the appropriate fold.
This ensures that a sentence is never decoded using a
grammar or language model it helped build, thereby
reducing the overfitting effect demonstrated in ?3.1.
To perform the training, the HOLS algorithm is
used on the training data. In our experiments, only
1-2 passes over the training data are necessary for
significant gains. Data from one of the grammar
folds is used for the line search, and the rest of the
training data is used to calculate the gradient.
The procedure is iterative, first decoding training
data to obtain a gradient, and then performing a line
search with data from a held-out grammar fold. In-
stead of decoding the whole set of sentences used for
the gradient updates at once, one can also decode a
portion of the data, do a gradient update, and then
continue the next iteration of HOLS on the remain-
ing data before repeating.
The last line search of the HOLS algorithm is done
using dev data, rather than training data. This is be-
cause the dev data is higher quality, and from Table
1 we can see that tuning on dev data produces bet-
ter results than tuning on training data (even if the
training data has been held out from the grammar
process). The initial weights are obtained by run-
ning MERT on a subset of the one of the grammar
folds.
If one has an existing implementation of an op-
252
timizer for the loss function used during the line
search (in our case MERT), it can be used to perform
the line search. This is done simply by calling MERT
with two extra features in addition to the dense fea-
tures and omitting the sparse features.
To see how, notice that the feature weights
during the line search are decomposed as ~w =
~wdense + ~wsparse + ?~g where ~g is in the sparse
feature subspace, so the model score decomposes
as score(x, y) = ~wd ? ~fd(x, y) + ~ws ? ~fs(x, y) +
?~g ? ~fs(x, y) where x is the input translation, y is
the output translation and derivation. If we cre-
ate two new features f1(x, y) = ~ws ? ~fs(x, y) and
f2(x, y) = ~g ? ~fs(x, y) then the score can be written
score(x, y) = ~wd ? ~fd(x, y)
+f1(x, y) + ?f2(x, y)
= (~wd, 1, ?) ? (~fd, f1, f2)
Thus we can do the line search simply by calling
MERT with the features (~fd, f1, f2). 6
In summary our training algorithm is as follows:
1) split the training data into n-folds (we use n = 5),
2) initialize the dense weights to MERT values, 3)
decode some or all the data in 4 of the 5 folds to get
a gradient, 4) condition as in ?5.2 (see below), 5) run
MERT on a 10k subset of the remaining fold to do the
line search, 6) repeat steps 3-4 until convergence or
stop as desired, and 7) run MERT on the normal dev
set as a final step. We only run MERT on a 10k subset
of one of the folds so it does not require running
MERT on an entire fold.
In the special case where just one iteration of
HOLS is performed, the procedure is very simple:
decode the training data to get a gradient, include
the components of the gradient as an extra feature
f2 in addition to the dense features, and tune on a
dev set using MERT.
5.2 Conditioning
To address the problem of poor scaling, we use a
simple strategy of rescaling each component of the
gradient based on how frequent the feature is. We
call this process ?conditioning.? For each feature,
we simply divide the corresponding dimension of
6We could constrain the weight for f1 to be 1, but this is not
necessary since since MERT is invariant to the overall scale of
the weights.
the gradient by the number of n-best lists in which
the feature was non-zero in.
The necessity for conditioning is evident when we
run the HOLS algorithm as detailed so far on the
training data without conditioning. On subsequent
iterations, we observe that the features with the high-
est component of the gradient oscillate between iter-
ations, but the rest of the feature gradients stay the
same.
Based on our knowledge that the optimization
problem was poorly scaled, we divided by the fre-
quency of the feature. We can give the following
heuristic justification for our method of condition-
ing. For the ith feature weight, we will take a step
?wi. Assume that we want to take the step ?wi pro-
portional to the average gradient g?i calculated from
n-best lists in which the feature is non-zero. In other
words, we want ?wi = ?g?i. Let gi be the total
gradient calculated by adding the gradients over all
n-best lists (i.e. summing over training examples
in the corpus). For a feature that is nonzero in ex-
actly ni n-best lists, the gradient from each example
will have been added up ni times, so the total gra-
dient gi = nig?i. Therefore we should take the step
?wi = ?gi/ni. In other words, we rescale each
component gi of the gradient by 1/ni before taking
the gradient step.
We can relate this argument back to the oscillation
we observed of the rule feature weights. For rules
that are used a thousand times more often than the
average rule, the corresponding component of the
gradient is roughly a thousand times larger. But that
does not indicate that the adjustment ?wi to the rule
weight should be a thousand times larger in each it-
eration.
6 Experiments
We evaluate and analyze the performance of our
training method with three sets of experiments. The
first set of experiments compares HOLS to other
tuning algorithms used in machine translation in a
medium-scale discriminative setting. The second set
looks in detail at HOLS for large scale discriminative
training for a Chinese-English task. The third set
looks at two other languages.
All the experiments use a Hiero MT system with
rule indicator features for the sparse features and the
253
Table 2: Corpora
Language Corpus Sentences Tokens
Source Target
En Gigaword 24M 594M
Ar-En Train 1M 7M 31M
Dev (MT06) 1797 13K 236K
MT05 1,056 7K 144K
MT08nw 813 5K 116K
MT05wb 547 5K 89K
Mg-En Train 89K 2.1M 1.7M
Dev 1,359 34K 28K
Test 1,133 29K 24K
Zh-En Train (FBIS) 302K 1M 9.3M
Dev (MT06) 1,664 4K 192K
Test (MT02-03) 1,797 5K 223K
MT08 1,357 4K 167K
following 8 dense features: LM, phrasal and lexi-
cal p(e|f) and p(f |e), phrase and word penalties,
and glue rule. The total number of features is 2.2M
(Mg-En), 28.8M (Ar-En), and 10.8M (Zh-En). The
same features are used for all tuning methods, ex-
cept MERT baseline which uses only dense features.
Although we extract different grammars from vari-
ous subsets of the training corpus, word alignments
were done using the entire training corpus. We use
GIZA++ for word alignments (Och and Ney, 2003),
Thrax (Weese et al, 2011) to extract the grammars,
our decoder is cdec (Dyer et al, 2010) which uses
KenLM (Heafield, 2011), and we used a 4-gram LM
built using SRILM (Stolcke, 2002). Our optimizer
uses code implemented in the pycdec python inter-
face to cdec (Chahuneau et al, 2012). To speed up
decoding, for each source RHS we filtered the gram-
mars to the top 15 rules ranked by p(e | f). Statistics
about the datasets we used are listed in Table 2.
We use the ?soft ramp 3? loss function (Gimpel,
2012; Gimpel and Smith, 2012) as the surrogate loss
function for calculating the gradient in HOLS. It is
defined as
L? =
n?
i=1
[
? log
?
y?Gen(xi)
e~w?
~f(xi,y)?cost(yi,y)
+ log
?
y?Gen(xi)
e~w?
~f(xi,y)+cost(yi,y)
]
where the sum over i ranges over training exam-
ples, Gen(x) is the space of possible outputs and
derivations for the input x, and cost(yi, y) is add one
smoothing sentence level BLEU.7
Except where noted, all experiments are repeated
5 times and results are averaged, initial weights for
the dense features are drawn from a standard nor-
mal, and initial weights for the sparse features are
set to zero. We evaluate using MultEval (Clark et
al., 2011) and report standard deviations across opti-
mizer runs and significance at p = .05 using MultE-
val?s built-in permutation test. In the large-scale ex-
periments for HOLS, we only run the full optimizer
once, and report standard deviations using multiple
runs of the last MERT run (i.e. the last line search on
the dev data).
6.1 Comparison Experiments for ZH-EN
Our first set of experiments compares the perfor-
mance of the proposed HOLS algorithm to learn-
ing algorithms popularly used in machine transla-
tion on a Chinese-English task. We also compare to
a close relative of the HOLS algorithm: optimizing
the soft ramp 3 loss directly with online stochastic
gradient descent and with conditioning. As we will
see, SGD SOFTRAMP3 performs significantly worse
than HOLS, despite both algorithms optimizing sim-
ilar loss functions.
In the experiments in this section, we do not use
the full version of the training setup described in
?5 since we wish to compare to algorithms that do
not necessarily scale to large amounts of training
data. We therefore use only one fifth of the train-
ing data for learning the weights for both the dense
and sparse features.
In this section we refer to the subset of the train-
ing data used to learn the weights as the tuning set
(Tune). The grammar and LM are built using the
training data that is not in the tuning set (the LM also
includes the English monolingual corpus), and the
weights for the features are tuned using the tuning
set. This is similar to the typical train-dev-test split
commonly used to tune machine translation systems,
except that the tuning set is much larger (60k sen-
tence pairs versus the usual 1k-2k) and comes from
a random subset of the training data rather than a
7We found this loss function to work well, but other ?soft?
loss functions (Gimpel, 2012; Gimpel and Smith, 2012) also
work. Gen(x) is restricted to a k-best size of 1000. Following
(Gimpel, 2012) cost(yi, y) is multiplied by a factor of 20.
254
Table 3: Comparison Experiments for Zh-En
Algorithm Tune MT08 Runtime
MERT 22.1?.1 23.1?.1 6 hours
PRO 23.8?.05 23.6?.1 2 weeks
MIRA 21.7?.1 22.5?.1 19 hours
SOFTRAMP3 21.5?.3 22.3?.3 29 hours
HOLS 22.3?.1 23.4?.1 10 hours
HILS 24.3?.2 22.4?.1 10 hours
specialized development set.
We compare MERT, PRO (Hopkins and May,
2011), MIRA (Chiang, 2012), SOFTRAMP3, HOLS,
and a variant of HOLS which we call HILS (discussed
below). For HOLS, we used 10k of the 60k tun-
ing set for the line search, and the rest of the tun-
ing set was used for calculating the gradient. For
HILS (?Held-In? Line Search), the full 60k tuning
set was used to calculate the gradient, but the line
search was on a 10k subset of that set. For MERT,
we used a 10k subset of the tuning data because it
takes a long time to run on large datasets, and it only
has the eight dense features and so does not need the
entire 60k tuning set. All the subsets are drawn ran-
domly. Conditioning was performed only for HOLS,
HILS, and SOFTRAMP3 because conditioning would
affect the regularizer for PRO and require modifica-
tions to the MIRA algorithm. To do the condition-
ing for SOFTRAMP3 we used rule count during ex-
traction of the grammar and not the frequency in
the n-best lists because the online nature of SOFT-
RAMP3 prevents us from knowing how frequent a
rule will be (and the dense features are conditioned
using the corpus size). We chose MIRA?s best learn-
ing rate (? = .001) from {.1, .01, .001}, used de-
fault settings for PRO in cdec, and for SOFTRAMP3
we used the same loss function as HOLS but included
an L2 regularizer of strength .001 and used a step-
size of 1 (which was scaled because of condition-
ing). To remedy problems of length bias for sentence
level BLEU, we used brevity penalty smoothed and
grounded BLEU+1 for sentence level scores (Nakov
et al, 2012). Tuning was repeated four times with
different initial weights, except for PRO which we
only ran three times (due to training costs). The ini-
tial weights for MERT were drawn from a standard
normal distribution, and final MERT weights were
used as the initial weights for the dense features for
the other algorithms. Initial weights for the sparse
features were set to zero. For HOLS, and HILS, tun-
ing set BLEU scores were evaluated on the set that
the line search was run on. We also report run times
for 8 threads on an Opteron 6220 processor.8
The results are shown in Table 3. PRO and HOLS
are a statistically significant improvement upon the
MERT baseline on the MT08 test data, but MIRA,
SOFTRAMP3, and HILS are not.
HILS dramatically overfits the tuning set, while
HOLS does not, justifying the use of a held-out
dataset for the line search. SOFTRAMP3 performs
significantly worse than HOLS on the test set. PRO is
a promising training algorithm, but does not scale to
the full FBIS corpus because it requires many itera-
tions.
6.2 Full ZH-EN and Ablation Experiments
This set of experiments evaluates the performance
of the full HOLS algorithm described in ?5 for
large-scale discriminative training on the full FBIS
Chinese-English dataset. Since this is a relatively
small and widely studied dataset, we also investigate
what happens if different aspects of the procedure
are omitted.
Table 4 gives the results. The number of updates
is the number of times the HOLS line search opti-
mizer is run (gradient updates). For 2 passes, 4 up-
dates, a line search is performed after a half pass
through the training data, which is repeated four
times for a total of two passes.
Using just one pass through the training data and
8Standard MIRA and SGD SOFTRAMP3 are not paralleliz-
able and only use a single thread. All of these algorithms were
run for one iteration, except for MERT which ran for at least
seven iterations, and PRO which we stopped after 20 iterations.
Table 4: Full-scale Chinese-English and Ablation
Experiments
Configuration Dev Test
MERT Baseline 29.9?.3 34.0?.8
2 Pass, 4 updates 31.1?.2 35.1?.4
1 Pass, 1 update 30.7?.1 34.6?.5
?Folds 30.0?.2 34.0?.4
?Conditioning 30.1?.1 34.2?.2
255
Table 5: Arabic-English
System Dev (MT06) MT05 MT08(nw) MT08(wb)
MERT Baseline 39.2?.4 50.3?.4 45.2?.2 29.4?.14
HOLS 1 Pass, 2 updates 39.9?.9 51.2?.4 45.8?.4 30.0?.4
?BLEU +.7 +.9 +.6 +.6
Table 6: Malagasy-English
System Dev Test
MERT Baseline 19.8?.3 17.7?.2
HOLS 1 Pass, 1 update 20.5?.1 18.4?.2
?BLEU +.7 +.7
one gradient update, HOLS improves upon the MERT
baseline by .6 BLEU points, which is a statistically
significant improvement. With 2 passes through the
training data and 4 gradient updates, HOLS performs
even better, obtaining a 1.1 BLEU point improve-
ment over the baseline and is also statistically signif-
icant. With 16 threads, 1 pass, 1 update completed
in 9 hours, and 2 pass, 4 updates, completed in 40
hours. The medium-scale PRO setup in ?6.1 obtains
a result of 34.4? .1 on this test set, which is a statis-
tically significant improvement of .4 BLEU points
over the MERT baseline but does not beat the large-
scale HOLS results.
Is folding and conditioning necessary? We ex-
periment with what happens if grammar and LM
folds are not used and if conditioning is not done.
?Folds denotes 1 pass 1 update without folds, and
?Conditioning denotes 1 pass 1 update without con-
ditioning. We can see that both these steps are im-
portant for the training procedure to work well.
The decrease in performance of the training pro-
cedure without folds or conditioning is dramatic but
not too surprising. With just one gradient update,
one would expect conditioning to be very important.
And from the lessons learned in section 3.1, one
would also expect the procedure to perform poorly
or even worse than the MERT baseline without gram-
mar or LM folds. But because HOLS runs MERT on
the dev data for the last line search, it is almost im-
possible for HOLS to be worse than the MERT base-
line. (This, in fact, was part of our motivation when
we originally attempted the HOLS algorithm.)
6.3 Other Language Pairs
The last set of experiments looks at the performance
of the learning algorithm for two other languages
and data scenarios for one pass through the training
data. Using the same setup for large-scale discrimi-
native training as before, we apply the training pro-
cedure to a large data scenario Arabic-English task
and a small data scenario Malagasy-English task
(Tables 5 and 6). The training procedure gives statis-
tically significant improvements over the baseline by
.6 to .9 BLEU for Arabic, and a statistically signif-
icant improvement of .7 BLEU for Malagasy. With
16 threads, the runtime was 44 hours for Arabic and
5 hours for Malagasy.
7 Conclusion
We have explored the difficulties encountered
in large-scale discriminative training for machine
translation, and introduced a learning procedure de-
signed to overcome them and scale to large corpora.
We leave to future work to experiment with feature
sets designed for the large-scale discriminative set-
ting. In particular, we hope this framework will fa-
cilitate incorporation of richer linguistic knowledge
into machine translation.
Acknowledgments
This work was sponsored by the U. S. Army Research
Laboratory and the U. S. Army Research Office un-
der contract/grant number W911NF-10-1-0533. Jeffrey
Flanigan would like to thank his co-advisor Lori Levin
for support and encouragement during this work.
References
Phil Blunsom, Trevor Cohn, and Miles Osborne. 2008.
A discriminative latent variable model for statistical
machine translation. In Proc. ACL-HLT.
Le?on Bottou. 1998. Online algorithms and stochastic ap-
proximations. In David Saad, editor, Online Learning
256
and Neural Networks. Cambridge University Press,
Cambridge, UK. revised, oct 2012.
Le?on Bottou. 2010. Large-scale machine learning with
stochastic gradient descent. In Yves Lechevallier and
Gilbert Saporta, editors, Proceedings of the 19th In-
ternational Conference on Computational Statistics
(COMPSTAT?2010), pages 177?187, Paris, France,
August. Springer.
V. Chahuneau, N. A. Smith, and C. Dyer. 2012. pycdec:
A python interface to cdec. The Prague Bulletin of
Mathematical Linguistics, 98:51?61.
Colin Cherry and George Foster. 2012. Batch tuning
strategies for statistical machine translation. In Proc.
of NAACL.
David Chiang, Yuval Marton, and Philip Resnik. 2008.
Online large-margin training of syntactic and struc-
tural translation features. In Proceedings of the Con-
ference on Empirical Methods in Natural Language
Processing, EMNLP ?08, pages 224?233, Strouds-
burg, PA, USA. Association for Computational Lin-
guistics.
David Chiang. 2005. A hierarchical phrase-based model
for statistical machine translation. In In ACL, pages
263?270.
David Chiang. 2012. Hope and fear for discriminative
training of statistical translation models. Journal of
Machine Learning Research, pages 1159?1187.
Jonathan H. Clark, Chris Dyer, Alon Lavie, and Noah A.
Smith. 2011. Better hypothesis testing for statisti-
cal machine translation: controlling for optimizer in-
stability. In Proceedings of the 49th Annual Meeting
of the Association for Computational Linguistics: Hu-
man Language Technologies: short papers - Volume
2, HLT ?11, pages 176?181, Stroudsburg, PA, USA.
Association for Computational Linguistics.
Michael Denkowski and Alon Lavie. 2011. Meteor 1.3:
Automatic Metric for Reliable Optimization and Eval-
uation of Machine Translation Systems. In Proceed-
ings of the EMNLP 2011 Workshop on Statistical Ma-
chine Translation.
Chris Dyer, Adam Lopez, Juri Ganitkevitch, Johnathan
Weese, Ferhan Ture, Phil Blunsom, Hendra Setiawan,
Vladimir Eidelman, and Philip Resnik. 2010. cdec: A
decoder, alignment, and learning framework for finite-
state and context-free translation models. In Proceed-
ings of ACL.
Kevin Gimpel and Noah A. Smith. 2012. Structured
ramp loss minimization for machine translation. In
Proc. of NAACL.
K. Gimpel. 2012. Discriminative Feature-Rich Modeling
for Syntax-Based Machine Translation. Ph.D. thesis,
Carnegie Mellon University.
Kenneth Heafield. 2011. KenLM: Faster and smaller
language model queries. In Proceedings of the Sixth
Workshop on Statistical Machine Translation, Edin-
burgh, UK, July. Association for Computational Lin-
guistics.
Mark Hopkins and Jonathan May. 2011. Tuning as rank-
ing. In Proc. of EMNLP.
Percy Liang, Alexandre Bouchard-co?te?, Dan Klein, and
Ben Taskar. 2006. An end-to-end discriminative ap-
proach to machine translation. In In Proceedings of
the Joint International Conference on Computational
Linguistics and Association of Computational Linguis-
tics (COLING/ACL, pages 761?768.
Preslav Nakov, Francisco Guzma?n, and Stephan Vogel.
2012. Optimizing for sentence-level bleu+1 yields
short translations. In Martin Kay and Christian Boitet,
editors, COLING, pages 1979?1994. Indian Institute
of Technology Bombay.
Jorge Nocedal and Stephen J. Wright. 2000. Numerical
Optimization. Springer.
Franz Josef Och and Hermann Ney. 2002. Discrimina-
tive training and maximum entropy models for statis-
tical machine translation. In Proc. of ACL.
Franz Josef Och and Hermann Ney. 2003. A system-
atic comparison of various statistical alignment mod-
els. Comput. Linguist., 29(1):19?51, March.
Franz Josef Och. 2003. Minimum error rate training in
statistical machine translation. In Proc. of ACL.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic eval-
uation of machine translation. In Proceedings of the
40th Annual Meeting on Association for Computa-
tional Linguistics, ACL ?02, pages 311?318, Strouds-
burg, PA, USA. Association for Computational Lin-
guistics.
Antti-Veiko Rosti, Bing Zhang, Spyros Matsoukas, and
Richard Schwartz. 2010. BBN system description for
WMT10 system combination task. In Proc. WMT.
Avneesh Saluja, Ian Lane, and Joy Zhang. 2012. Ma-
chine Translation with Binary Feedback: a large-
margin approach. In Proceedings of The Tenth Bien-
nial Conference of the Association for Machine Trans-
lation in the Americas, San Diego, CA, July.
Patrick Simianer, Chris Dyer, and Stefan Riezler. 2012.
Joint feature selection in distributed stochastic learn-
ing for large-scale discriminative training in SMT. In
Proc. ACL.
David A. Smith and Jason Eisner. 2006. Minimum risk
annealing for training log-linear models. In Proc. of
ACL.
Andreas Stolcke. 2002. Srilm - an extensible language
modeling toolkit. pages 901?904.
Christoph Tillmann and Tong Zhang. 2006. A discrim-
inative global training algorithm for statistical mt. In
Proceedings of the 21st International Conference on
257
Computational Linguistics and the 44th annual meet-
ing of the Association for Computational Linguistics,
ACL-44, pages 721?728, Stroudsburg, PA, USA. As-
sociation for Computational Linguistics.
Ioannis Tsochantaridis, Thomas Hofmann, Thorsten
Joachims, and Yasemin Altun. 2004. Support vec-
tor machine learning for interdependent and structured
output spaces. In Proceedings of the twenty-first inter-
national conference on Machine learning, ICML ?04,
pages 104?, New York, NY, USA. ACM.
Taro Watanabe, Jun Suzuki, Hajime Tsukada, and Hideki
Isozaki. 2007. Online large-margin training for statis-
tical machine translation. In Proc. EMNLP-CoNLL.
Jonathan Weese, Juri Ganitkevitch, Chris Callison-
Burch, Matt Post, and Adam Lopez. 2011. Joshua
3.0: syntax-based machine translation with the thrax
grammar extractor. In Proceedings of the Sixth Work-
shop on Statistical Machine Translation, WMT ?11,
pages 478?484, Stroudsburg, PA, USA. Association
for Computational Linguistics.
258
Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics:shortpapers, pages 42?47,
Portland, Oregon, June 19-24, 2011. c?2011 Association for Computational Linguistics
Part-of-Speech Tagging for Twitter: Annotation, Features, and Experiments
Kevin Gimpel, Nathan Schneider, Brendan O?Connor, Dipanjan Das, Daniel Mills,
Jacob Eisenstein, Michael Heilman, Dani Yogatama, Jeffrey Flanigan, and Noah A. Smith
School of Computer Science, Carnegie Mellon Univeristy, Pittsburgh, PA 15213, USA
{kgimpel,nschneid,brenocon,dipanjan,dpmills,
jacobeis,mheilman,dyogatama,jflanigan,nasmith}@cs.cmu.edu
Abstract
We address the problem of part-of-speech tag-
ging for English data from the popular micro-
blogging service Twitter. We develop a tagset,
annotate data, develop features, and report
tagging results nearing 90% accuracy. The
data and tools have been made available to the
research community with the goal of enabling
richer text analysis of Twitter and related so-
cial media data sets.
1 Introduction
The growing popularity of social media and user-
created web content is producing enormous quanti-
ties of text in electronic form. The popular micro-
blogging service Twitter (twitter.com) is one
particularly fruitful source of user-created content,
and a flurry of recent research has aimed to under-
stand and exploit these data (Ritter et al, 2010; Shar-
ifi et al, 2010; Barbosa and Feng, 2010; Asur and
Huberman, 2010; O?Connor et al, 2010a; Thelwall
et al, 2011). However, the bulk of this work eschews
the standard pipeline of tools which might enable
a richer linguistic analysis; such tools are typically
trained on newstext and have been shown to perform
poorly on Twitter (Finin et al, 2010).
One of the most fundamental parts of the linguis-
tic pipeline is part-of-speech (POS) tagging, a basic
form of syntactic analysis which has countless appli-
cations in NLP. Most POS taggers are trained from
treebanks in the newswire domain, such as the Wall
Street Journal corpus of the Penn Treebank (PTB;
Marcus et al, 1993). Tagging performance degrades
on out-of-domain data, and Twitter poses additional
challenges due to the conversational nature of the
text, the lack of conventional orthography, and 140-
character limit of each message (?tweet?). Figure 1
shows three tweets which illustrate these challenges.
(a) @Gunservatively@ obozo? willV goV nutsA
whenR PA? electsV aD RepublicanA GovernorN
nextP Tue? ., CanV youO sayV redistrictingV ?,
(b) SpendingV theD dayN withhhP mommmaN !,
(c) lmao! ..., s/oV toP theD coolA assN asianA
officerN 4P #1$ notR runninV myD licenseN and&
#2$ notR takinV druN booN toP jailN ., ThankV
uO God? ., #amen#
Figure 1: Example tweets with gold annotations. Under-
lined tokens show tagger improvements due to features
detailed in Section 3 (respectively: TAGDICT, METAPH,
and DISTSIM).
In this paper, we produce an English POS tagger
that is designed especially for Twitter data. Our con-
tributions are as follows:
? we developed a POS tagset for Twitter,
? we manually tagged 1,827 tweets,
? we developed features for Twitter POS tagging
and conducted experiments to evaluate them, and
? we provide our annotated corpus and trained POS
tagger to the research community.
Beyond these specific contributions, we see this
work as a case study in how to rapidly engi-
neer a core NLP system for a new and idiosyn-
cratic dataset. This project was accomplished in
200 person-hours spread across 17 people and two
months. This was made possible by two things:
(1) an annotation scheme that fits the unique char-
acteristics of our data and provides an appropriate
level of linguistic detail, and (2) a feature set that
captures Twitter-specific properties and exploits ex-
isting resources such as tag dictionaries and phonetic
normalization. The success of this approach demon-
strates that with careful design, supervised machine
learning can be applied to rapidly produce effective
language technology in new domains.
42
Tag Description Examples %
Nominal, Nominal + Verbal
N common noun (NN, NNS) books someone 13.7
O pronoun (personal/WH; not
possessive; PRP, WP)
it you u meeee 6.8
S nominal + possessive books? someone?s 0.1
? proper noun (NNP, NNPS) lebron usa iPad 6.4
Z proper noun + possessive America?s 0.2
L nominal + verbal he?s book?ll iono
(= I don?t know)
1.6
M proper noun + verbal Mark?ll 0.0
Other open-class words
V verb incl. copula,
auxiliaries (V*, MD)
might gonna
ought couldn?t is
eats
15.1
A adjective (J*) good fav lil 5.1
R adverb (R*, WRB) 2 (i.e., too) 4.6
! interjection (UH) lol haha FTW yea
right
2.6
Other closed-class words
D determiner (WDT, DT,
WP$, PRP$)
the teh its it?s 6.5
P pre- or postposition, or
subordinating conjunction
(IN, TO)
while to for 2 (i.e.,
to) 4 (i.e., for)
8.7
& coordinating conjunction
(CC)
and n & + BUT 1.7
T verb particle (RP) out off Up UP 0.6
X existential there,
predeterminers (EX, PDT)
both 0.1
Y X + verbal there?s all?s 0.0
Twitter/online-specific
# hashtag (indicates
topic/category for tweet)
#acl 1.0
@ at-mention (indicates
another user as a recipient
of a tweet)
@BarackObama 4.9
~ discourse marker,
indications of continuation
of a message across
multiple tweets
RT and : in retweet
construction RT
@user : hello
3.4
U URL or email address http://bit.ly/xyz 1.6
E emoticon :-) :b (: <3 o O 1.0
Miscellaneous
$ numeral (CD) 2010 four 9:30 1.5
, punctuation (#, $, '', (,
), ,, ., :, ``)
!!! .... ?!? 11.6
G other abbreviations, foreign
words, possessive endings,
symbols, garbage (FW,
POS, SYM, LS)
ily (I love you) wby
(what about you) ?s
 -->
awesome...I?m
1.1
Table 1: The set of tags used to annotate tweets. The
last column indicates each tag?s relative frequency in the
full annotated data (26,435 tokens). (The rates for M and
Y are both < 0.0005.)
2 Annotation
Annotation proceeded in three stages. For Stage 0,
we developed a set of 20 coarse-grained tags based
on several treebanks but with some additional cate-
gories specific to Twitter, including URLs and hash-
tags. Next, we obtained a random sample of mostly
American English1 tweets from October 27, 2010,
automatically tokenized them using a Twitter tok-
enizer (O?Connor et al, 2010b),2 and pre-tagged
them using the WSJ-trained Stanford POS Tagger
(Toutanova et al, 2003) in order to speed up man-
ual annotation. Heuristics were used to mark tokens
belonging to special Twitter categories, which took
precedence over the Stanford tags.
Stage 1 was a round of manual annotation: 17 re-
searchers corrected the automatic predictions from
Stage 0 via a custom Web interface. A total of
2,217 tweets were distributed to the annotators in
this stage; 390 were identified as non-English and
removed, leaving 1,827 annotated tweets (26,436 to-
kens).
The annotation process uncovered several situa-
tions for which our tagset, annotation guidelines,
and tokenization rules were deficient or ambiguous.
Based on these considerations we revised the tok-
enization and tagging guidelines, and for Stage 2,
two annotators reviewed and corrected all of the
English tweets tagged in Stage 1. A third anno-
tator read the annotation guidelines and annotated
72 tweets from scratch, for purposes of estimating
inter-annotator agreement. The 72 tweets comprised
1,021 tagged tokens, of which 80 differed from the
Stage 2 annotations, resulting in an agreement rate
of 92.2% and Cohen?s ? value of 0.914. A final
sweep was made by a single annotator to correct er-
rors and improve consistency of tagging decisions
across the corpus. The released data and tools use
the output of this final stage.
2.1 Tagset
We set out to develop a POS inventory for Twitter
that would be intuitive and informative?while at
the same time simple to learn and apply?so as to
maximize tagging consistency within and across an-
1We filtered to tweets sent via an English-localized user in-
terface set to a United States timezone.
2http://github.com/brendano/tweetmotif
43
notators. Thus, we sought to design a coarse tagset
that would capture standard parts of speech3 (noun,
verb, etc.) as well as categories for token varieties
seen mainly in social media: URLs and email ad-
dresses; emoticons; Twitter hashtags, of the form
#tagname, which the author may supply to catego-
rize a tweet; and Twitter at-mentions, of the form
@user, which link to other Twitter users from within
a tweet.
Hashtags and at-mentions can also serve as words
or phrases within a tweet; e.g. Is #qadaffi going down?.
When used in this way, we tag hashtags with their
appropriate part of speech, i.e., as if they did not start
with #. Of the 418 hashtags in our data, 148 (35%)
were given a tag other than #: 14% are proper nouns,
9% are common nouns, 5% are multi-word express-
sions (tagged as G), 3% are verbs, and 4% are some-
thing else. We do not apply this procedure to at-
mentions, as they are nearly always proper nouns.
Another tag, ~, is used for tokens marking spe-
cific Twitter discourse functions. The most popular
of these is the RT (?retweet?) construction to publish
a message with attribution. For example,
RT @USER1 : LMBO ! This man filed an
EMERGENCY Motion for Continuance on
account of the Rangers game tonight ! 
Wow lmao
indicates that the user @USER1 was originally the
source of the message following the colon. We ap-
ply ~ to the RT and : (which are standard), and
also, which separates the author?s comment from
the retweeted material.4 Another common discourse
marker is ellipsis dots (. . . ) at the end of a tweet,
indicating a message has been truncated to fit the
140-character limit, and will be continued in a sub-
sequent tweet or at a specified URL.
Our first round of annotation revealed that, due to
nonstandard spelling conventions, tokenizing under
a traditional scheme would be much more difficult
3Our starting point was the cross-lingual tagset presented by
Petrov et al (2011). Most of our tags are refinements of those
categories, which in turn are groupings of PTB WSJ tags (see
column 2 of Table 1). When faced with difficult tagging deci-
sions, we consulted the PTB and tried to emulate its conventions
as much as possible.
4These ?iconic deictics? have been studied in other online
communities as well (Collister, 2010).
than for Standard English text. For example, apos-
trophes are often omitted, and there are frequently
words like ima (short for I?m gonna) that cut across
traditional POS categories. Therefore, we opted not
to split contractions or possessives, as is common
in English corpus preprocessing; rather, we intro-
duced four new tags for combined forms: {nominal,
proper noun} ? {verb, possessive}.5
The final tagging scheme (Table 1) encompasses
25 tags. For simplicity, each tag is denoted with a
single ASCII character. The miscellaneous category
G includes multiword abbreviations that do not fit
in any of the other categories, like ily (I love you), as
well as partial words, artifacts of tokenization errors,
miscellaneous symbols, possessive endings,6 and ar-
rows that are not used as discourse markers.
Figure 2 shows where tags in our data tend to oc-
cur relative to the middle word of the tweet. We
see that Twitter-specific tags have strong positional
preferences: at-mentions (@) and Twitter discourse
markers (~) tend to occur towards the beginning of
messages, whereas URLs (U), emoticons (E), and
categorizing hashtags (#) tend to occur near the end.
3 System
Our tagger is a conditional random field (CRF; Laf-
ferty et al, 2001), enabling the incorporation of ar-
bitrary local features in a log-linear model. Our
base features include: a feature for each word type,
a set of features that check whether the word con-
tains digits or hyphens, suffix features up to length 3,
and features looking at capitalization patterns in the
word. We then added features that leverage domain-
specific properties of our data, unlabeled in-domain
data, and external linguistic resources.
TWORTH: Twitter orthography. We have features
for several regular expression-style rules that detect
at-mentions, hashtags, and URLs.
NAMES: Frequently-capitalized tokens. Micro-
bloggers are inconsistent in their use of capitaliza-
tion, so we compiled gazetteers of tokens which are
frequently capitalized. The likelihood of capital-
ization for a token is computed as Ncap+?CN+C , where
5The modified tokenizer is packaged with our tagger.
6Possessive endings only appear when a user or the tok-
enizer has separated the possessive ending from a possessor; the
tokenizer only does this when the possessor is an at-mention.
44
Figure 2: Average position, relative to the middle word in the tweet, of tokens labeled with each tag. Most tags fall
between ?1 and 1 on this scale; these are not shown.
N is the token count, Ncap is the capitalized to-
ken count, and ? and C are the prior probability
and its prior weight.7 We compute features for
membership in the top N items by this metric, for
N ? {1000, 2000, 3000, 5000, 10000, 20000}.
TAGDICT: Traditional tag dictionary. We add
features for all coarse-grained tags that each word
occurs with in the PTB8 (conjoined with their fre-
quency rank). Unlike previous work that uses tag
dictionaries as hard constraints, we use them as soft
constraints since we expect lexical coverage to be
poor and the Twitter dialect of English to vary sig-
nificantly from the PTB domains. This feature may
be seen as a form of type-level domain adaptation.
DISTSIM: Distributional similarity. When train-
ing data is limited, distributional features from un-
labeled text can improve performance (Schu?tze and
Pedersen, 1993). We used 1.9 million tokens from
134,000 unlabeled tweets to construct distributional
features from the successor and predecessor proba-
bilities for the 10,000 most common terms. The suc-
cessor and predecessor transition matrices are hori-
zontally concatenated into a sparse matrixM, which
we approximate using a truncated singular value de-
composition: M ? USVT, where U is limited to
50 columns. Each term?s feature vector is its row
in U; following Turian et al (2010), we standardize
and scale the standard deviation to 0.1.
METAPH: Phonetic normalization. Since Twitter
includes many alternate spellings of words, we used
the Metaphone algorithm (Philips, 1990)9 to create
a coarse phonetic normalization of words to simpler
keys. Metaphone consists of 19 rules that rewrite
consonants and delete vowels. For example, in our
7? = 1100 , C = 10; this score is equivalent to the posterior
probability of capitalization with a Beta(0.1, 9.9) prior.
8Both WSJ and Brown corpora, no case normalization. We
also tried adding the WordNet (Fellbaum, 1998) and Moby
(Ward, 1996) lexicons, which increased lexical coverage but did
not seem to help performance.
9Via the Apache Commons implementation: http://
commons.apache.org/codec/
data, {thangs thanks thanksss thanx thinks thnx}
are mapped to 0NKS, and {lmao lmaoo lmaooooo}
map to LM. But it is often too coarse; e.g. {war we?re
wear were where worry} map to WR.
We include two types of features. First, we use
the Metaphone key for the current token, comple-
menting the base model?s word features. Second,
we use a feature indicating whether a tag is the most
frequent tag for PTB words having the same Meta-
phone key as the current token. (The second feature
was disabled in both ?TAGDICT and ?METAPH ab-
lation experiments.)
4 Experiments
Our evaluation was designed to test the efficacy of
this feature set for part-of-speech tagging given lim-
ited training data. We randomly divided the set of
1,827 annotated tweets into a training set of 1,000
(14,542 tokens), a development set of 327 (4,770 to-
kens), and a test set of 500 (7,124 tokens). We com-
pare our system against the Stanford tagger. Due
to the different tagsets, we could not apply the pre-
trained Stanford tagger to our data. Instead, we re-
trained it on our labeled data, using a standard set
of features: words within a 5-word window, word
shapes in a 3-word window, and up to length-3
prefixes, length-3 suffixes, and prefix/suffix pairs.10
The Stanford system was regularized using a Gaus-
sian prior of ?2 = 0.5 and our system with a Gaus-
sian prior of ?2 = 5.0, tuned on development data.
The results are shown in Table 2. Our tagger with
the full feature set achieves a relative error reduction
of 25% compared to the Stanford tagger. We also
show feature ablation experiments, each of which
corresponds to removing one category of features
from the full set. In Figure 1, we show examples
that certain features help solve. Underlined tokens
10We used the following feature modules in the Stanford tag-
ger: bidirectional5words, naacl2003unknowns,
wordshapes(-3,3), prefix(3), suffix(3),
prefixsuffix(3).
45
Dev. Test
Our tagger, all features 88.67 89.37
independent ablations:
?DISTSIM 87.88 88.31 (?1.06)
?TAGDICT 88.28 88.31 (?1.06)
?TWORTH 87.51 88.37 (?1.00)
?METAPH 88.18 88.95 (?0.42)
?NAMES 88.66 89.39 (+0.02)
Our tagger, base features 82.72 83.38
Stanford tagger 85.56 85.85
Annotator agreement 92.2
Table 2: Tagging accuracies on development and test
data, including ablation experiments. Features are or-
dered by importance: test accuracy decrease due to ab-
lation (final column).
Tag Acc. Confused Tag Acc. Confused
V 91 N ! 82 N
N 85 ? L 93 V
, 98 ~ & 98 ?
P 95 R U 97 ,
? 71 N $ 89 P
D 95 ? # 89 ?
O 97 ? G 26 ,
A 79 N E 88 ,
R 83 A T 72 P
@ 99 V Z 45 ?
~ 91 ,
Table 3: Accuracy (recall) rates per class, in the test set
with the full model. (Omitting tags that occur less than
10 times in the test set.) For each gold category, the most
common confusion is shown.
are incorrect in a specific ablation, but are corrected
in the full system (i.e. when the feature is added).
The ?TAGDICT ablation gets elects, Governor,
and next wrong in tweet (a). These words appear
in the PTB tag dictionary with the correct tags, and
thus are fixed by that feature. In (b), withhh is ini-
tially misclassified an interjection (likely caused by
interjections with the same suffix, like ohhh), but is
corrected by METAPH, because it is normalized to the
same equivalence class as with. Finally, s/o in tweet
(c) means ?shoutout?, which appears only once in
the training data; adding DISTSIM causes it to be cor-
rectly identified as a verb.
Substantial challenges remain; for example, de-
spite the NAMES feature, the system struggles to
identify proper nouns with nonstandard capitaliza-
tion. This can be observed from Table 3, which
shows the recall of each tag type: the recall of proper
nouns (?) is only 71%. The system also struggles
with the miscellaneous category (G), which covers
many rare tokens, including obscure symbols and ar-
tifacts of tokenization errors. Nonetheless, we are
encouraged by the success of our system on the
whole, leveraging out-of-domain lexical resources
(TAGDICT), in-domain lexical resources (DISTSIM),
and sublexical analysis (METAPH).
Finally, we note that, even though 1,000 train-
ing examples may seem small, the test set accuracy
when training on only 500 tweets drops to 87.66%,
a decrease of only 1.7% absolute.
5 Conclusion
We have developed a part-of-speech tagger for Twit-
ter and have made our data and tools available to the
research community at http://www.ark.cs.
cmu.edu/TweetNLP. More generally, we be-
lieve that our approach can be applied to address
other linguistic analysis needs as they continue to
arise in the era of social media and its rapidly chang-
ing linguistic conventions. We also believe that the
annotated data can be useful for research into do-
main adaptation and semi-supervised learning.
Acknowledgments
We thank Desai Chen, Chris Dyer, Lori Levin, Behrang
Mohit, Bryan Routledge, Naomi Saphra, and Tae Yano
for assistance in annotating data. This research was sup-
ported in part by: the NSF through CAREER grant IIS-
1054319, the U. S. Army Research Laboratory and the
U. S. Army Research Office under contract/grant num-
ber W911NF-10-1-0533, Sandia National Laboratories
(fellowship to K. Gimpel), and the U. S. Department of
Education under IES grant R305B040063 (fellowship to
M. Heilman).
References
Sitaram Asur and Bernardo A. Huberman. 2010. Pre-
dicting the future with social media. In Proc. of WI-
IAT.
Luciano Barbosa and Junlan Feng. 2010. Robust senti-
ment detection on Twitter from biased and noisy data.
In Proc. of COLING.
Lauren Collister. 2010. Meaning variation of the iconic
deictics ? and <? in an online community. In New
Ways of Analyzing Variation.
Christiane Fellbaum. 1998. WordNet: An Electronic
Lexical Database. Bradford Books.
46
Tim Finin, Will Murnane, Anand Karandikar, Nicholas
Keller, Justin Martineau, and Mark Dredze. 2010. An-
notating named entities in Twitter data with crowd-
sourcing. In Proceedings of the NAACL HLT 2010
Workshop on Creating Speech and Language Data
with Amazon?s Mechanical Turk.
John Lafferty, Andrew McCallum, and Fernando Pereira.
2001. Conditional random fields: Probabilistic models
for segmenting and labeling sequence data. In Proc. of
ICML.
Mitchell P. Marcus, Beatrice Santorini, and Mary Ann
Marcinkiewicz. 1993. Building a large annotated cor-
pus of English: The Penn Treebank. Computational
Linguistics, 19:313?330.
Brendan O?Connor, Ramnath Balasubramanyan,
Bryan R. Routledge, and Noah A. Smith. 2010a.
From tweets to polls: Linking text sentiment to public
opinion time series. In Proc. of ICWSM.
Brendan O?Connor, Michel Krieger, and David Ahn.
2010b. TweetMotif: Exploratory search and topic
summarization for Twitter. In Proc. of ICWSM (demo
track).
Slav Petrov, Dipanjan Das, and Ryan McDonald. 2011.
A universal part-of-speech tagset. ArXiv:1104.2086.
Lawrence Philips. 1990. Hanging on the Metaphone.
Computer Language, 7(12).
Alan Ritter, Colin Cherry, and Bill Dolan. 2010. Unsu-
pervised modeling of Twitter conversations. In Proc.
of NAACL.
Hinrich Schu?tze and Jan Pedersen. 1993. A vector model
for syntagmatic and paradigmatic relatedness. In Pro-
ceedings of the 9th Annual Conference of the UW Cen-
tre for the New OED and Text Research.
Beaux Sharifi, Mark-Anthony Hutton, and Jugal Kalita.
2010. Summarizing microblogs automatically. In
Proc. of NAACL.
Mike Thelwall, Kevan Buckley, and Georgios Paltoglou.
2011. Sentiment in Twitter events. Journal of the
American Society for Information Science and Tech-
nology, 62(2):406?418.
Kristina Toutanova, Dan Klein, Christopher D. Manning,
and Yoram Singer. 2003. Feature-rich part-of-speech
tagging with a cyclic dependency network. In Proc. of
HLT-NAACL.
Joseph Turian, Lev Ratinov, and Yoshua Bengio. 2010.
Word representations: a simple and general method for
semi-supervised learning. In Proc. of ACL.
Grady Ward. 1996. Moby lexicon. http://icon.
shef.ac.uk/Moby.
47
Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, pages 1426?1436,
Baltimore, Maryland, USA, June 23-25 2014.
c
?2014 Association for Computational Linguistics
A Discriminative Graph-Based Parser
for the Abstract Meaning Representation
Jeffrey Flanigan Sam Thomson Jaime Carbonell Chris Dyer Noah A. Smith
Language Technologies Institute
Carnegie Mellon University
Pittsburgh, PA 15213, USA
{jflanigan,sthomson,jgc,cdyer,nasmith}@cs.cmu.edu
Abstract
Abstract Meaning Representation (AMR)
is a semantic formalism for which a grow-
ing set of annotated examples is avail-
able. We introduce the first approach
to parse sentences into this representa-
tion, providing a strong baseline for fu-
ture improvement. The method is based
on a novel algorithm for finding a maxi-
mum spanning, connected subgraph, em-
bedded within a Lagrangian relaxation of
an optimization problem that imposes lin-
guistically inspired constraints. Our ap-
proach is described in the general frame-
work of structured prediction, allowing fu-
ture incorporation of additional features
and constraints, and may extend to other
formalisms as well. Our open-source sys-
tem, JAMR, is available at:
http://github.com/jflanigan/jamr
1 Introduction
Semantic parsing is the problem of mapping nat-
ural language strings into meaning representa-
tions. Abstract Meaning Representation (AMR)
(Banarescu et al, 2013; Dorr et al, 1998) is a
semantic formalism in which the meaning of a
sentence is encoded as a rooted, directed, acyclic
graph. Nodes represent concepts, and labeled di-
rected edges represent the relationships between
them?see Figure 1 for an example AMR graph.
The formalism is based on propositional logic and
neo-Davidsonian event representations (Parsons,
1990; Davidson, 1967). Although it does not
encode quantifiers, tense, or modality, the set of
semantic phenomena included in AMR were se-
lected with natural language applications?in par-
ticular, machine translation?in mind.
In this paper we introduce JAMR, the first pub-
lished system for automatic AMR parsing. The
system is based on a statistical model whose pa-
rameters are trained discriminatively using anno-
tated sentences in the AMR Bank corpus (Ba-
narescu et al, 2013). We evaluate using the
Smatch score (Cai and Knight, 2013), establishing
a baseline for future work.
The core of JAMR is a two-part algorithm
that first identifies concepts using a semi-Markov
model and then identifies the relations that ob-
tain between these by searching for the maximum
spanning connected subgraph (MSCG) from an
edge-labeled, directed graph representing all pos-
sible relations between the identified concepts. To
solve the latter problem, we introduce an appar-
ently novel O(|V |
2
log |V |) algorithm that is sim-
ilar to the maximum spanning tree (MST) algo-
rithms that are widely used for dependency pars-
ing (McDonald et al, 2005). Our MSCG algo-
rithm returns the connected subgraph with maxi-
mal sum of its edge weights from among all con-
nected subgraphs of the input graph. Since AMR
imposes additional constraints to ensure seman-
tic well-formedness, we use Lagrangian relaxation
(Geoffrion, 1974; Fisher, 2004) to augment the
MSCG algorithm, yielding a tractable iterative al-
gorithm that finds the optimal solution subject to
these constraints. In our experiments, we have
found this algorithm to converge 100% of the time
for the constraint set we use.
The approach can be understood as an alterna-
tive to parsing approaches using graph transduc-
ers such as (synchronous) hyperedge replacement
grammars (Chiang et al, 2013; Jones et al, 2012;
Drewes et al, 1997), in much the same way that
spanning tree algorithms are an alternative to us-
ing shift-reduce and dynamic programming algo-
rithms for dependency parsing.
1
While a detailed
1
To date, a graph transducer-based semantic
parser has not been published, although the Bolinas
toolkit (http://www.isi.edu/publications/
licensed-sw/bolinas/) contains much of the neces-
sary infrastructure.
1426
want-01
boy
visit-01
city
name
?New? ?York?
?City?
ARG0
ARG1
ARG0
ARG1
name
op1
op2 op3
(a) Graph.
(w / want-01
:ARG0 (b / boy)
:ARG1 (g / visit-01
:ARG0 b
:ARG1 (c / city
:name (n / name
:op1 "New"
:op2 "York"
:op3 "City"))))
(b) AMR annotation.
Figure 1: Two equivalent ways of representing the AMR
parse for the sentence, ?The boy wants to visit New York
City.?
comparison of these two approaches is beyond the
scope of this paper, we emphasize that?as has
been observed with dependency parsing?a diver-
sity of approaches can shed light on complex prob-
lems such as semantic parsing.
2 Notation and Overview
Our approach to AMR parsing represents an AMR
parse as a graph G = ?V,E?; vertices and edges
are given labels from sets L
V
and L
E
, respec-
tively. G is constructed in two stages. The first
stage identifies the concepts evoked by words and
phrases in an input sentence w = ?w
1
, . . . , w
n
?,
each w
i
a member of vocabulary W . The second
stage connects the concepts by adding L
E
-labeled
edges capturing the relations between concepts,
and selects a root in G corresponding to the focus
of the sentence w.
Concept identification (?3) involves segmenting
w into contiguous spans and assigning to each
span a graph fragment corresponding to a concept
from a concept set denoted F (or to ? for words
that evoke no concept). In ?5 we describe how
F is constructed. In our formulation, spans are
contiguous subsequences of w. For example, the
words ?New York City? can evoke the fragment
represented by
(c / city
:name (n / name
:op1 "New"
:op2 "York"
:op3 "City"))))
We use a sequence labeling algorithm to identify
concepts.
The relation identification stage (?4) is similar
to a graph-based dependency parser. Instead of
finding the maximum-scoring tree over words, it
finds the maximum-scoring connected subgraph
that preserves concept fragments from the first
stage, links each pair of vertices by at most one
edge, and is deterministic
2
with respect to a spe-
cial set of edge labels L
?
E
? L
E
. The set L
?
E
consists of the labels ARG0?ARG5, and does not
include labels such as MOD or MANNER, for ex-
ample. Linguistically, the determinism constraint
enforces that predicates have at most one semantic
argument of each type; this is discussed in more
detail in ?4.
To train the parser, spans of words must be la-
beled with the concept fragments they evoke. Al-
though AMR Bank does not label concepts with
the words that evoke them, it is possible to build
an automatic aligner (?5). The alignments are
used to construct the concept lexicon and to train
the concept identification and relation identifica-
tion stages of the parser (?6). Each stage is a
discriminatively-trained linear structured predic-
tor with rich features that make use of part-of-
speech tagging, named entity tagging, and depen-
dency parsing.
In ?7, we evaluate the parser against gold-
standard annotated sentences from the AMR Bank
corpus (Banarescu et al, 2013) under the Smatch
score (Cai and Knight, 2013), presenting the first
published results on automatic AMR parsing.
3 Concept Identification
The concept identification stage maps spans of
words in the input sentence w to concept graph
fragments from F , or to the empty graph fragment
?. These graph fragments often consist of just
one labeled concept node, but in some cases they
are larger graphs with multiple nodes and edges.
3
2
By this we mean that, at each node, there is at most one
outgoing edge with that label type.
3
About 20% of invoked concept fragments are multi-
concept fragments.
1427
Concept identification is illustrated in Figure 2 us-
ing our running example, ?The boy wants to visit
New York City.?
Let the concept lexicon be a mapping clex :
W
?
? 2
F
that provides candidate graph frag-
ments for sequences of words. (The construc-
tion of F and clex is discussed below.) Formally,
a concept labeling is (i) a segmentation of w
into contiguous spans represented by boundaries
b, giving spans ?w
b
0
:b
1
,w
b
1
:b
2
, . . .w
b
k?1
:b
k
?, with
b
0
= 0 and b
k
= n, and (ii) an assignment of
each phrase w
b
i?1
:b
i
to a concept graph fragment
c
i
? clex (w
b
i?1
:b
i
) ? ?.
Our approach scores a sequence of spans b and
a sequence of concept graph fragments c, both of
arbitrary length k, using the following locally de-
composed, linearly parameterized function:
score(b, c;?) =
?
k
i=1
?
>
f(w
b
i?1
:b
i
, b
i?1
, b
i
, c
i
)
(1)
where f is a feature vector representation of a span
and one of its concept graph fragments in context.
The features are:
? Fragment given words: Relative frequency es-
timates of the probability of a concept graph
fragment given the sequence of words in the
span. This is calculated from the concept-word
alignments in the training corpus (?5).
? Length of the matching span (number of to-
kens).
? NER: 1 if the named entity tagger marked the
span as an entity, 0 otherwise.
? Bias: 1 for any concept graph fragment from F
and 0 for ?.
Our approach finds the highest-scoring b and
c using a dynamic programming algorithm: the
zeroth-order case of inference under a semi-
Markov model (Janssen and Limnios, 1999). Let
S(i) denote the score of the best labeling of the
first i words of the sentence, w
0:i
; it can be calcu-
lated using the recurrence:
S(0) = 0
S(i) = max
j:0?j<i,
c?clex(w
j:i
)??
{
S(j) + ?
>
f(w
j:i
, j, i, c)
}
The best score will be S(n), and the best scor-
ing concept labeling can be recovered using back-
pointers, as in typical implementations of the
Viterbi algorithm. Runtime is O(n
2
).
clex is implemented as follows. When clex is
called with a sequence of words, it looks up the
sequence in a table that contains, for every word
sequence that was labeled with a concept fragment
in the training data, the set of concept fragments it
was labeled with. clex also has a set of rules for
generating concept fragments for named entities
and time expressions. It generates a concept frag-
ment for any entity recognized by the named entity
tagger, as well as for any word sequence matching
a regular expression for a time expression. clex
returns the union of all these concept fragments.
4 Relation Identification
The relation identification stage adds edges among
the concept subgraph fragments identified in the
first stage (?3), creating a graph. We frame the
task as a constrained combinatorial optimization
problem.
Consider the fully dense labeled multigraph
D = ?V
D
, E
D
? that includes the union of all la-
beled vertices and labeled edges in the concept
graph fragments, as well as every possible labeled
edge u
`
?? v, for all u, v ? V
D
and every ` ? L
E
.
4
We require a subgraph G = ?V
G
, E
G
? that re-
spects the following constraints:
1. Preserving: all graph fragments (including la-
bels) from the concept identification phase are
subgraphs of G.
2. Simple: for any two vertices u and v ? V
G
,E
G
includes at most one edge between u and v. This
constraint forbids a small number of perfectly
valid graphs, for example for sentences such as
?John hurt himself?; however, we see that< 1%
of training instances violate the constraint. We
found in preliminary experiments that including
the constraint increases overall performance.
5
3. Connected: G must be weakly connected (ev-
ery vertex reachable from every other vertex, ig-
noring the direction of edges). This constraint
follows from the formal definition of AMR and
is never violated in the training data.
4. Deterministic: For each node u ? V
G
, and for
each label ` ? L
?
E
, there is at most one outgoing
edge in E
G
from u with label `. As discussed in
?2, this constraint is linguistically motivated.
4
To handle numbered OP labels, we pre-process the train-
ing data to convert OPN to OP, and post-process the output by
numbering the OP labels sequentially.
5
In future work it might be treated as a soft constraint, or
the constraint might be refined to specific cases.
1428
The
boy
wants to
visit New York
City
? ?
boy
want-01
visit-01
city
name
?New?
?York?
?City?
name
op1
op2
op3
Figure 2: A concept labeling for the sentence ?The boy wants to visit New York City.?
One constraint we do not include is acyclicity,
which follows from the definition of AMR. In
practice, graphs with cycles are rarely produced
by JAMR. In fact, none of the graphs produced on
the test set violate acyclicity.
Given the constraints, we seek the maximum-
scoring subgraph. We define the score to decom-
pose by edges, and with a linear parameterization:
score(E
G
;?) =
?
e?E
G
?
>
g(e) (2)
The features are shown in Table 1.
Our solution to maximizing the score in Eq. 2,
subject to the constraints, makes use of (i) an al-
gorithm that ignores constraint 4 but respects the
others (?4.1); and (ii) a Lagrangian relaxation that
iteratively adjusts the edge scores supplied to (i)
so as to enforce constraint 4 (?4.2).
4.1 Maximum Preserving, Simple, Spanning,
Connected Subgraph Algorithm
The steps for constructing a maximum preserving,
simple, spanning, connected (but not necessar-
ily deterministic) subgraph are as follows. These
steps ensure the resulting graph G satisfies the
constraints: the initialization step ensures the pre-
serving constraint is satisfied, the pre-processing
step ensures the graph is simple, and the core al-
gorithm ensures the graph is connected.
1. (Initialization) Let E
(0)
be the union of the
concept graph fragments? weighted, labeled, di-
rected edges. Let V denote its set of vertices.
Note that ?V,E
(0)
? is preserving (constraint 4),
as is any graph that contains it. It is also sim-
ple (constraint 4), assuming each concept graph
fragment is simple.
2. (Pre-processing) We form the edge set E by in-
cluding just one edge from E
D
between each
pair of nodes:
? For any edge e = u
`
?? v in E
(0)
, include e in
E, omitting all other edges between u and v.
? For any two nodes u and v, include only the
highest scoring edge between u and v.
Note that without the deterministic constraint,
we have no constraints that depend on the label
of an edge, nor its direction. So it is clear that
the edges omitted in this step could not be part
of the maximum-scoring solution, as they could
be replaced by a higher scoring edge without vi-
olating any constraints.
Note also that because we have kept exactly one
edge between every pair of nodes, ?V,E? is sim-
ple and connected.
3. (Core algorithm) Run Algorithm 1, MSCG, on
?V,E? and E
(0)
. This algorithm is a (to our
knowledge novel) modification of the minimum
spanning tree algorithm of Kruskal (1956).
Note that the directions of edges do not matter
for MSCG.
Steps 1?2 can be accomplished in one pass
through the edges, with runtime O(|V |
2
). MSCG
can be implemented efficiently in O(|V |
2
log |V |)
time, similarly to Kruskal?s algorithm, using a
disjoint-set data structure to keep track of con-
nected components.
6
The total asymptotic runtime
complexity is O(|V |
2
log |V |).
The details of MSCG are given in Algorithm 1.
In a nutshell, MSCG first adds all positive edges to
the graph, and then connects the graph by greedily
adding the least negative edge that connects two
previously unconnected components.
Theorem 1. MSCG finds a maximum spanning,
connected subgraph of ?V,E?
Proof. We closely follow the original proof of cor-
rectness of Kruskal?s algorithm. We first show by
induction that, at every iteration of MSCG, there
exists some maximum spanning, connected sub-
graph that contains G
(i)
= ?V,E
(i)
?:
6
For dense graphs, Prim?s algorithm (Prim, 1957) is
asymptotically faster (O(|V |
2
)). We conjecture that using
Prim?s algorithm instead of Kruskall?s to connect the graph
could improve the runtime of MSCG.
1429
Name Description
Label For each ` ? L
E
, 1 if the edge has that label
Self edge 1 if the edge is between two nodes in the same fragment
Tail fragment root 1 if the edge?s tail is the root of its graph fragment
Head fragment root 1 if the edge?s head is the root of its graph fragment
Path Dependency edge labels and parts of speech on the shortest syntactic path between any two
words in the two spans
Distance Number of tokens (plus one) between the two concepts? spans (zero if the same)
Distance indicators A feature for each distance value, that is 1 if the spans are of that distance
Log distance Logarithm of the distance feature plus one.
Bias 1 for any edge.
Table 1: Features used in relation identification. In addition to the features above, the following conjunctions are used (Tail and
Head concepts are elements of L
V
): Tail concept ? Label, Head concept ? Label, Path ? Label, Path ? Head concept, Path ?
Tail concept, Path ? Head concept ? Label, Path ? Tail concept ? Label, Path ? Head word, Path ? Tail word, Path ? Head
word ? Label, Path ? Tail word ? Label, Distance ? Label, Distance ? Path, and Distance ? Path ? Label. To conjoin the
distance feature with anything else, we multiply by the distance.
input : weighted, connected graph ?V,E?
and set of edges E
(0)
? E to be
preserved
output: maximum spanning, connected
subgraph of ?V,E? that preserves
E
(0)
let E
(1)
= E
(0)
? {e ? E | ?
>
g(e) > 0};
create a priority queue Q containing
{e ? E | ?
>
g(e) ? 0} prioritized by scores;
i = 1;
while Q nonempty and ?V,E
(i)
? is not yet
spanning and connected do
i = i+ 1;
E
(i)
= E
(i?1)
;
e = argmax
e
?
?Q
?
>
g(e
?
);
remove e from Q;
if e connects two previously unconnected
components of ?V,E
(i)
? then
add e to E
(i)
end
end
return G = ?V,E
(i)
?;
Algorithm 1: MSCG algorithm.
Base case: ConsiderG
(1)
, the subgraph contain-
ing E
(0)
and every positive edge. Take any maxi-
mum preserving spanning connected subgraph M
of ?V,E?. We know that such an M exists be-
cause ?V,E? itself is a preserving spanning con-
nected subgraph. Adding a positive edge to M
would strictly increase M ?s score without discon-
necting M , which would contradict the fact that
M is maximal. Thus M must contain G
(1)
.
Induction step: By the inductive hypothesis,
there exists some maximum spanning connected
subgraph M = ?V,E
M
? that contains G
(i)
.
Let e be the next edge added to E
(i)
by MSCG.
If e is in E
M
, then E
(i+1)
= E
(i)
? {e} ? E
M
,
and the hypothesis still holds.
Otherwise, since M is connected and does not
contain e, E
M
? {e} must have a cycle containing
e. In addition, that cycle must have some edge e
?
that is not in E
(i)
. Otherwise, E
(i)
? {e} would
contain a cycle, and e would not connect two un-
connected components of G
(i)
, contradicting the
fact that e was chosen by MSCG.
Since e
?
is in a cycle in E
M
? {e}, removing it
will not disconnect the subgraph, i.e. (E
M
?{e})\
{e
?
} is still connected and spanning. The score of
e is greater than or equal to the score of e
?
, oth-
erwise MSCG would have chosen e
?
instead of e.
Thus, ?V, (E
M
?{e}) \ {e
?
}? is a maximum span-
ning connected subgraph that containsE
(i+1)
, and
the hypothesis still holds.
When the algorithm completes, G = ?V,E
(i)
?
is a spanning connected subgraph. The maximum
spanning connected subgraph M that contains it
cannot have a higher score, because G contains
every positive edge. Hence G is maximal.
4.2 Lagrangian Relaxation
If the subgraph resulting from MSCG satisfies con-
straint 4 (deterministic) then we are done. Oth-
erwise we resort to Lagrangian relaxation (LR).
Here we describe the technique as it applies to our
task, referring the interested reader to Rush and
Collins (2012) for a more general introduction to
Lagrangian relaxation in the context of structured
prediction problems.
In our case, we begin by encoding a graph G =
?V
G
, E
G
? as a binary vector. For each edge e in
the fully dense multigraph D, we associate a bi-
1430
nary variable z
e
= 1{e ? E
G
}, where 1{P} is
the indicator function, taking value 1 if the propo-
sition P is true, 0 otherwise. The collection of z
e
form a vector z ? {0, 1}
|E
D
|
.
Determinism constraints can be encoded as a
set of linear inequalities. For example, the con-
straint that vertex u has no more than one outgoing
ARG0 can be encoded with the inequality:
?
v?V
1{u
ARG0
???? v ? E
G
} =
?
v?V
z
u
ARG0
????v
? 1.
All of the determinism constraints can collectively
be encoded as one system of inequalities:
Az ? b,
with each row A
i
inA and its corresponding entry
b
i
in b together encoding one constraint. For the
previous example we have a row A
i
that has 1s
in the columns corresponding to edges outgoing
from u with label ARG0 and 0?s elsewhere, and a
corresponding element b
i
= 1 in b.
The score of graph G (encoded as z) can be
written as the objective function ?
>
z, where ?
e
=
?
>
g(e). To handle the constraint Az ? b, we in-
troduce multipliers ? ? 0 to get the Lagrangian
relaxation of the objective function:
L?(z) = maxz (?
>
z+ ?
>
(b?Az)),
z
?
? = argmaxz L?(z).
And the dual objective:
L(z) = min
??0
L?(z),
z
?
= argmax
z
L(z).
Conveniently, L?(z) decomposes over edges:
L?(z) = maxz (?
>
z+ ?
>
(b?Az))
= max
z
(?
>
z? ?
>
Az)
= max
z
((??A
>
?)
>
z).
So for any ?, we can find z
?
?
by assigning edges
the new Lagrangian adjusted weights ? ? A
>
?
and reapplying the algorithm described in ?4.1.
We can find z
?
by projected subgradient descent,
by starting with ? = 0, and taking steps in the
direction:
?
?L?
??
(z
?
?) = Az
?
?.
If any components of ? are negative after taking a
step, they are set to zero.
L(z) is an upper bound on the unrelaxed ob-
jective function ?
>
z, and is equal to it if and
only if the constraints Az ? b are satisfied. If
L(z
?
) = ?
>
z
?
, then z
?
is also the optimal solu-
tion to the constrained solution. Otherwise, there
exists a duality gap, and Lagrangian relaxation
has failed. In that case we still return the sub-
graph encoded by z
?
, even though it might vio-
late one or more constraints. Techniques from in-
teger programming such as branch-and-bound or
cutting-planes methods could be used to find an
optimal solution when LR fails (Das et al, 2012),
but we do not use these techniques here. In our
experiments, with a stepsize of 1 and max number
of steps as 500, Lagrangian relaxation succeeds
100% of the time in our data.
4.3 Focus Identification
In AMR, one node must be marked as the focus of
the sentence. We notice this can be accomplished
within the relation identification step: we add a
special concept node root to the dense graph D,
and add an edge from root to every other node,
giving each of these edges the label FOCUS. We
require that root have at most one outgoing FO-
CUS edge. Our system has two feature types for
this edge: the concept it points to, and the shortest
dependency path from a word in the span to the
root of the dependency tree.
5 Automatic Alignments
In order to train the parser, we need alignments be-
tween sentences in the training data and their an-
notated AMR graphs. More specifically, we need
to know which spans of words invoke which con-
cept fragments in the graph. To do this, we built
an automatic aligner and tested its performance on
a small set of alignments we annotated by hand.
The automatic aligner uses a set of rules to
greedily align concepts to spans. The list of rules
is given in Table 2. The aligner proceeds down
the list, first aligning named-entities exactly, then
fuzzy matching named-entities, then date-entities,
etc. For each rule, an entire pass through the AMR
graph is done. The pass considers every concept in
the graph and attempts to align a concept fragment
rooted at that concept if the rule can apply. Some
rules only apply to a particular type of concept
fragment, while others can apply to any concept.
For example, rule 1 can apply to any NAME con-
cept and its OP children. It searches the sentence
1431
for a sequence of words that exactly matches its
OP children and aligns them to the NAME and OP
children fragment.
Concepts are considered for alignment in the or-
der they are listed in the AMR annotation (left to
right, top to bottom). Concepts that are not aligned
in a particular pass may be aligned in subsequent
passes. Concepts are aligned to the first match-
ing span, and alignments are mutually exclusive.
Once aligned, a concept in a fragment is never re-
aligned.
7
However, more concepts can be attached
to the fragment by rules 8?14.
We use WordNet to generate candidate lemmas,
and we also use a fuzzy match of a concept, de-
fined to be a word in the sentence that has the
longest string prefix match with that concept?s la-
bel, if the match length is ? 4. If the match length
is < 4, then the concept has no fuzzy match. For
example the fuzzy match for ACCUSE-01 could be
?accusations? if it is the best match in the sen-
tence. WordNet lemmas and fuzzy matches are
only used if the rule explicitly uses them. All to-
kens and concepts are lowercased before matches
or fuzzy matches are done.
On the 200 sentences of training data we
aligned by hand, the aligner achieves 92% preci-
sion, 89% recall, and 90% F
1
for the alignments.
6 Training
We now describe how to train the two stages of the
parser. The training data for the concept identifi-
cation stage consists of (X,Y ) pairs:
? Input: X , a sentence annotated with named
entities (person, organization, location, mis-
ciscellaneous) from the Illinois Named Entity
Tagger (Ratinov and Roth, 2009), and part-of-
speech tags and basic dependencies from the
Stanford Parser (Klein and Manning, 2003; de
Marneffe et al, 2006).
? Output: Y , the sentence labeled with concept
subgraph fragments.
The training data for the relation identification
stage consists of (X,Y ) pairs:
7
As an example, if ?North Korea? shows up twice in
the AMR graph and twice in the input sentence, then the
first ?North Korea? concept fragment listed in the AMR gets
aligned to the first ?North Korea? mention in the sentence,
and the second fragment to the second mention (because the
first span is already aligned when the second ?North Korea?
concept fragment is considered, so it is aligned to the second
matching span).
1. (Named Entity) Applies to name concepts and their
opn children. Matches a span that exactly matches its
opn children in numerical order.
2. (Fuzzy Named Entity) Applies to name concepts and
their opn children. Matches a span that matches the
fuzzy match of each child in numerical order.
3. (Date Entity) Applies to date-entity concepts
and their day, month, year children (if exist).
Matches any permutation of day, month, year, (two digit
or four digit years), with or without spaces.
4. (Minus Polarity Tokens) Applies to - concepts, and
matches ?no?, ?not?, ?non.?
5. (Single Concept) Applies to any concept. Strips
off trailing ?-[0-9]+? from the concept (for example
run-01 ? run), and matches any exact matching
word or WordNet lemma.
6. (Fuzzy Single Concept) Applies to any concept.
Strips off trailing ?-[0-9]+?, and matches the fuzzy match
of the concept.
7. (U.S.) Applies to name if its op1 child is united
and its op2 child is states. Matches a word that
matches ?us?, ?u.s.? (no space), or ?u. s.? (with space).
8. (Entity Type) Applies to concepts with an outgoing
name edge whose head is an aligned fragment. Up-
dates the fragment to include the unaligned concept.
Ex: continent in (continent :name (name
:op1 "Asia")) aligned to ?asia.?
9. (Quantity) Applies to .
*
-quantity concepts with
an outgoing unit edge whose head is aligned. Up-
dates the fragment to include the unaligned concept. Ex:
distance-quantity in (distance-quantity
:unit kilometer) aligned to ?kilometres.?
10. (Person-Of, Thing-Of) Applies to person and
thing concepts with an outgoing .
*
-of edge whose
head is aligned. Updates the fragment to include
the unaligned concept. Ex: person in (person
:ARG0-of strike-02) aligned to ?strikers.?
11. (Person) Applies to person concepts with a sin-
gle outgoing edge whose head is aligned. Updates
the fragment to include the unaligned concept. Ex:
person in (person :poss (country :name
(name :op1 "Korea")))
12. (Goverment Organization) Applies to concepts
with an incoming ARG.
*
-of edge whose tail is an
aligned government-organization concept. Up-
dates the fragment to include the unaligned concept. Ex:
govern-01 in (government-organization
:ARG0-of govern-01) aligned to ?government.?
13. (Minus Polarity Prefixes) Applies to - concepts
with an incoming polarity edge whose tail is aligned
to a word beginning with ?un?, ?in?, or ?il.? Up-
dates the fragment to include the unaligned concept.
Ex: - in (employ-01 :polarity -) aligned to
?unemployment.?
14. (Degree) Applies to concepts with an incoming
degree edge whose tail is aligned to a word ending
is ?est.? Updates the fragment to include the unaligned
concept. Ex: most in (large :degree most)
aligned to ?largest.?
Table 2: Rules used in the automatic aligner.
1432
? Input: X , the sentence labeled with graph frag-
ments, as well as named enties, POS tags, and
basic dependencies as in concept identification.
? Output: Y , the sentence with a full AMR
parse.
8
Alignments are used to induce the concept label-
ing for the sentences, so no annotation beyond the
automatic alignments is necessary.
We train the parameters of the stages separately
using AdaGrad (Duchi et al, 2011) with the per-
ceptron loss function (Rosenblatt, 1957; Collins,
2002). We give equations for concept identifica-
tion parameters ? and features f(X,Y ). For a
sentence of length k, and spans b labeled with a
sequence of concept fragments c, the features are:
f(X,Y ) =
?
k
i=1
f(w
b
i?1
:b
i
, b
i?1
, b
i
, c
i
)
To train with AdaGrad, we process examples in
the training data ((X
1
, Y
1
), . . . , (X
N
, Y
N
)) one
at a time. At time t, we decode (?3) to get
?
Y
t
and
compute the subgradient:
s
t
= f(X
t
,
?
Y
t
)? f(X
t
, Y
t
)
We then update the parameters and go to the next
example. Each component i of the parameter vec-
tor gets updated like so:
?
t+1
i
= ?
t
i
?
?
?
?
t
t
?
=1
s
t
?
i
s
t
i
? is the learning rate which we set to 1. For
relation identification training, we replace ? and
f(X,Y ) in the above equations with ? and
g(X,Y ) =
?
e?E
G
g(e).
We ran AdaGrad for ten iterations for concept
identification, and five iterations for relation iden-
tification. The number of iterations was chosen by
early stopping on the development set.
7 Experiments
We evaluate our parser on the newswire section
of LDC2013E117 (deft-amr-release-r3-proxy.txt).
Statistics about this corpus and our train/dev./test
splits are given in Table 3.
8
Because the alignments are automatic, some concepts
may not be aligned, so we cannot compute their features. We
remove the unaligned concepts and their edges from the full
AMR graph for training. Thus some graphs used for training
may in fact be disconnected.
Split Document Years Sentences Tokens
Train 1995-2006 4.0k 79k
Dev. 2007 2.1k 40k
Test 2008 2.1k 42k
Table 3: Train/dev./test split.
Train Test
P R F
1
P R F
1
.92 .90 .91 .90 .79 .84
Table 4: Concept identification performance.
For the performance of concept identification,
we report precision, recall, and F
1
of labeled spans
using the induced labels on the training and test
data as a gold standard (Table 4). Our concept
identifier achieves 84% F
1
on the test data. Pre-
cision is roughly the same between train and test,
but recall is worse on test, implicating unseen con-
cepts as a significant source of errors on test data.
We evaluate the performance of the full parser
using Smatch v1.0 (Cai and Knight, 2013), which
counts the precision, recall and F
1
of the concepts
and relations together. Using the full pipeline
(concept identification and relation identification
stages), our parser achieves 58% F
1
on the test
data (Table 5). Using gold concepts with the re-
lation identification stage yields a much higher
Smatch score of 80% F
1
. As a comparison, AMR
Bank annotators have a consensus inter-annotator
agreement Smatch score of 83% F
1
. The runtime
of our system is given in Figure 3.
The large drop in performance of 22% F
1
when
moving from gold concepts to system concepts
suggests that joint inference and training for the
two stages might be helpful.
8 Related Work
Our approach to relation identification is inspired
by graph-based techniques for non-projective syn-
tactic dependency parsing. Minimum span-
ning tree algorithms?specifically, the optimum
branching algorithm of Chu and Liu (1965) and
Edmonds (1967)?were first used for dependency
parsing by McDonald et al (2005). Later ex-
Train Test
concepts P R F
1
P R F
1
gold .85 .95 .90 .76 .84 .80
automatic .69 .78 .73 .52 .66 .58
Table 5: Parser performance.
1433
0 10 20 30 400.0
0.1
0.2
0.3
0.4
0.5
sentence length (words)
aver
age r
untim
e (seco
nds)
Figure 3: Runtime of JAMR (all stages).
tensions allow for higher-order (non?edge-local)
features, often making use of relaxations to solve
the NP-hard optimization problem. Mcdonald and
Pereira (2006) incorporated second-order features,
but resorted to an approximate algorithm. Oth-
ers have formulated the problem as an integer lin-
ear program (Riedel and Clarke, 2006; Martins et
al., 2009). TurboParser (Martins et al, 2013) uses
AD
3
(Martins et al, 2011), a type of augmented
Lagrangian relaxation, to integrate third-order fea-
tures into a CLE backbone. Future work might ex-
tend JAMR to incorporate additional linguistically
motivated constraints and higher-order features.
The task of concept identification is similar in
form to the problem of Chinese word segmenta-
tion, for which semi-Markov models have success-
fully been used to incorporate features based on
entire spans (Andrew, 2006).
While all semantic parsers aim to transform nat-
ural language text to a formal representation of
its meaning, there is wide variation in the mean-
ing representations and parsing techniques used.
Space does not permit a complete survey, but we
note some connections on both fronts.
Interlinguas (Carbonell et al, 1992) are an im-
portant precursor to AMR. Both formalisms are
intended for use in machine translation, but AMR
has an admitted bias toward the English language.
First-order logic representations (and exten-
sions using, e.g., the ?-calculus) allow variable
quantification, and are therefore more power-
ful. In recent research, they are often associ-
ated with combinatory categorial grammar (Steed-
man, 1996). There has been much work on sta-
tistical models for CCG parsing (Zettlemoyer and
Collins, 2005; Zettlemoyer and Collins, 2007;
Kwiatkowski et al, 2010, inter alia), usually using
chart-based dynamic programming for inference.
Natural language interfaces for querying
databases have served as another driving applica-
tion (Zelle and Mooney, 1996; Kate et al, 2005;
Liang et al, 2011, inter alia). The formalisms
used here are richer in logical expressiveness than
AMR, but typically use a smaller set of concept
types?only those found in the database.
In contrast, semantic dependency parsing?in
which the vertices in the graph correspond to the
words in the sentence?is meant to make semantic
parsing feasible for broader textual domains. Al-
shawi et al (2011), for example, use shift-reduce
parsing to map sentences to natural logical form.
AMR parsing also shares much in common
with tasks like semantic role labeling and frame-
semantic parsing (Gildea and Jurafsky, 2002; Pun-
yakanok et al, 2008; Das et al, 2014, inter alia).
In these tasks, predicates are often disambiguated
to a canonical word sense, and roles are filled
by spans (usually syntactic constituents). They
consider each predicate separately, and produce
a disconnected set of shallow predicate-argument
structures. AMR, on the other hand, canonical-
izes both predicates and arguments to a common
concept label space. JAMR reasons about all con-
cepts jointly to produce a unified representation of
the meaning of an entire sentence.
9 Conclusion
We have presented the first published system for
automatic AMR parsing, and shown that it pro-
vides a strong baseline based on the Smatch eval-
uation metric. We also present an algorithm for
finding the maximum, spanning, connected sub-
graph and show how to incorporate extra con-
straints with Lagrangian relaxation. Our feature-
based learning setup allows the system to be easily
extended by incorporating new feature sources.
Acknowledgments
The authors gratefully acknowledge helpful cor-
respondence from Kevin Knight, Ulf Hermjakob,
and Andr?e Martins, and helpful feedback from
Nathan Schneider, Brendan O?Connor, Waleed
Ammar, and the anonymous reviewers. This
work was sponsored by the U. S. Army Research
Laboratory and the U. S. Army Research Office
under contract/grant number W911NF-10-1-0533
and DARPA grant FA8750-12-2-0342 funded un-
der the DEFT program.
1434
References
Hiyan Alshawi, Pi-Chuan Chang, and Michael Ring-
gaard. 2011. Deterministic statistical mapping of
sentences to underspecified semantics. In Proc. of
ICWS.
Galen Andrew. 2006. A hybrid markov/semi-markov
conditional random field for sequence segmentation.
In Proc. of EMNLP.
Laura Banarescu, Claire Bonial, Shu Cai, Madalina
Georgescu, Kira Griffitt, Ulf Hermjakob, Kevin
Knight, Philipp Koehn, Martha Palmer, and Nathan
Schneider. 2013. Abstract meaning representation
for sembanking. In Proc. of the Linguistic Annota-
tion Workshop and Interoperability with Discourse.
Shu Cai and Kevin Knight. 2013. Smatch: an eval-
uation metric for semantic feature structures. In
Proc. of ACL.
Jaime G. Carbonell, Teruko Mitamura, and Eric H. Ny-
berg. 1992. The KANT perspective: A critique
of pure transfer (and pure interlingua, pure trans-
fer, . . . ). In Proc. of the Fourth International Con-
ference on Theoretical and Methodological Issues
in Machine Translation: Empiricist vs. Rationalist
Methods in MT.
David Chiang, Jacob Andreas, Daniel Bauer,
Karl Moritz Hermann, Bevan Jones, and Kevin
Knight. 2013. Parsing graphs with hyperedge
replacement grammars. In Proc. of ACL.
Y. J. Chu and T. H. Liu. 1965. On the shortest arbores-
cence of a directed graph. Science Sinica, 14:1396?
1400.
Michael Collins. 2002. Discriminative training meth-
ods for hidden Markov models: Theory and ex-
periments with perceptron algorithms. In Proc. of
EMNLP.
Dipanjan Das, Andr?e F. T. Martins, and Noah A. Smith.
2012. An exact dual decomposition algorithm for
shallow semantic parsing with constraints. In Proc.
of the Joint Conference on Lexical and Computa-
tional Semantics.
Dipanjan Das, Desai Chen, Andr?e F. T. Martins,
Nathan Schneider, and Noah A. Smith. 2014.
Frame-semantic parsing. Computational Linguis-
tics, 40(1):9?56.
Donald Davidson. 1967. The logical form of action
sentences. In Nicholas Rescher, editor, The Logic of
Decision and Action, pages 81?120. Univ. of Pitts-
burgh Press.
Marie-Catherine de Marneffe, Bill MacCartney, and
Christopher D. Manning. 2006. Generating typed
dependency parses from phrase structure parses. In
Proc. of LREC.
Bonnie Dorr, Nizar Habash, and David Traum. 1998.
A thematic hierarchy for efficient generation from
lexical-conceptual structure. In David Farwell, Lau-
rie Gerber, and Eduard Hovy, editors, Machine
Translation and the Information Soup: Proc. of
AMTA.
Frank Drewes, Hans-J?org Kreowski, and Annegret Ha-
bel. 1997. Hyperedge replacement graph gram-
mars. In Handbook of Graph Grammars, pages 95?
162. World Scientific.
John Duchi, Elad Hazan, and Yoram Singer. 2011.
Adaptive subgradient methods for online learning
and stochastic optimization. Journal of Machine
Learning Research, 12:2121?2159, July.
Jack Edmonds. 1967. Optimum branchings. National
Bureau of Standards.
Marshall L. Fisher. 2004. The Lagrangian relaxation
method for solving integer programming problems.
Management Science, 50(12):1861?1871.
Arthur M Geoffrion. 1974. Lagrangean relaxation for
integer programming. Springer.
Daniel Gildea and Daniel Jurafsky. 2002. Automatic
labeling of semantic roles. Computational Linguis-
tics, 28(3):245?288.
Jacques Janssen and Nikolaos Limnios. 1999. Semi-
Markov Models and Applications. Springer, Octo-
ber.
Bevan Jones, Jacob Andreas, Daniel Bauer,
Karl Moritz Hermann, and Kevin Knight. 2012.
Semantics-based machine translation with hyper-
edge replacement grammars. In Proc. of COLING.
Rohit J. Kate, Yuk Wah Wong, and Raymond J.
Mooney. 2005. Learning to transform natural to
formal languages. In Proc. of AAAI.
Dan Klein and Christopher D. Manning. 2003. Accu-
rate unlexicalized parsing. In Proc. of ACL.
Joseph B. Kruskal. 1956. On the shortest spanning
subtree of a graph and the traveling salesman prob-
lem. Proc. of the American Mathematical Society,
7(1):48.
Tom Kwiatkowski, Luke Zettlemoyer, Sharon Goldwa-
ter, and Mark Steedman. 2010. Inducing probabilis-
tic CCG grammars from logical form with higher-
order unification. In Proc. of EMNLP.
Percy Liang, Michael I. Jordan, and Dan Klein. 2011.
Learning dependency-based compositional seman-
tics. In Proc. of ACL.
Andr?e F. T. Martins, Noah A. Smith, and Eric P. Xing.
2009. Concise integer linear programming formula-
tions for dependency parsing. In Proc. of ACL.
1435
Andr?e F. T. Martins, Noah A. Smith, Pedro M. Q.
Aguiar, and M?ario A. T. Figueiredo. 2011. Dual
decomposition with many overlapping components.
In Proc. of EMNLP.
Andr?e F. T. Martins, Miguel Almeida, and Noah A.
Smith. 2013. Turning on the turbo: Fast third-order
non-projective Turbo parsers. In Proc. of ACL.
Ryan Mcdonald and Fernando Pereira. 2006. Online
learning of approximate dependency parsing algo-
rithms. In Proc. of EACL, page 81?88.
Ryan McDonald, Fernando Pereira, Kiril Ribarov, and
Jan Haji?c. 2005. Non-projective dependency pars-
ing using spanning tree algorithms. In Proc. of
EMNLP.
Terence Parsons. 1990. Events in the Semantics of En-
glish: A study in subatomic semantics. MIT Press.
Robert C. Prim. 1957. Shortest connection networks
and some generalizations. Bell System Technology
Journal, 36:1389?1401.
Vasin Punyakanok, Dan Roth, and Wen-tau Yih. 2008.
The importance of syntactic parsing and inference in
semantic role labeling. Computational Linguistics,
34(2):257?287.
Lev Ratinov and Dan Roth. 2009. Design challenges
and misconceptions in named entity recognition. In
Proc. of CoNLL.
Sebastian Riedel and James Clarke. 2006. Incremental
integer linear programming for non-projective de-
pendency parsing. In Proc. of EMNLP.
Frank Rosenblatt. 1957. The perceptron?a perceiving
and recognizing automaton. Technical Report 85-
460-1, Cornell Aeronautical Laboratory.
Alexander M. Rush and Michael Collins. 2012. A
tutorial on dual decomposition and Lagrangian re-
laxation for inference in natural language process-
ing. Journal of Artificial Intelligence Research,
45(1):305?-362.
Mark Steedman. 1996. Surface structure and interpre-
tation. Linguistic inquiry monographs. MIT Press.
John M. Zelle and Raymond J. Mooney. 1996. Learn-
ing to parse database queries using inductive logic
programming. In Proc. of AAAI.
Luke S. Zettlemoyer and Michael Collins. 2005.
Learning to map sentences to logical form: Struc-
tured classification with probabilistic categorial
grammars. In Proc. of UAI.
Luke S. Zettlemoyer and Michael Collins. 2007. On-
line learning of relaxed CCG grammars for parsing
to logical form. In In Proc. of EMNLP-CoNLL.
1436
Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval 2014), pages 176?180,
Dublin, Ireland, August 23-24, 2014.
CMU: Arc-Factored, Discriminative Semantic Dependency Parsing
Sam Thomson Brendan O?Connor Jeffrey Flanigan David Bamman
Jesse Dodge Swabha Swayamdipta Nathan Schneider Chris Dyer Noah A. Smith
Language Technologies Institute
Carnegie Mellon University
Pittsburgh, PA 15213, USA
{sthomson,brenocon,jflanigan,dbamman,jessed,
swabha,nschneid,cdyer,nasmith}@cs.cmu.edu
Abstract
We present an arc-factored statistical model
for semantic dependency parsing, as de-
fined by the SemEval 2014 Shared Task 8
on Broad-Coverage Semantic Dependency
Parsing. Our entry in the open track placed
second in the competition.
1 Introduction
The task of broad coverage semantic dependency
parsing aims to provide a shallow semantic analysis
of text not limited to a specific domain. As distinct
from deeper semantic analysis (e.g., parsing to a
full lambda-calculus logical form), shallow seman-
tic parsing captures relationships between pairs
of words or concepts in a sentence, and has wide
application for information extraction, knowledge
base population, and question answering (among
others).
We present here two systems that produce seman-
tic dependency parses in the three formalisms of the
SemEval 2014 Shared Task 8 on Broad-Coverage
Semantic Dependency Parsing (Oepen et al., 2014).
These systems generate parses by extracting fea-
tures for each potential dependency arc and learn-
ing a statistical model to discriminate between good
arcs and bad; the first treats each labeled edge de-
cision as an independent multiclass logistic regres-
sion (?3.2.1), while the second predicts arcs as part
of a graph-based structured support vector machine
(?3.2.2). Common to both models is a rich set of
features on arcs, described in ?3.2.3. We include a
discussion of features found to have no discernable
effect, or negative effect, during development (?4).
Our system placed second in the open track of
the Broad-Coverage Semantic Dependency Parsing
This work is licensed under a Creative Commons Attribution
4.0 International License. Page numbers and proceedings
footer are added by the organizers. License details: http:
//creativecommons.org/licenses/by/4.0/
Figure 1: Example annotations for DM (top), PAS (middle),
and PCEDT (bottom).
task (in which output from syntactic parsers and
other outside resources can be used). We present
our results in ?5.
2 Formalisms
The Shared Task 8 dataset consists of annota-
tions of the WSJ Corpus in three different se-
mantic dependency formalisms. DM is derived
from LinGO English Resource Grammar (ERG)
annotations in DeepBank (Flickinger et al., 2012).
PAS is derived from the Enju HPSG treebank us-
ing the conversion rules of Miyao et al. (2004).
PCEDT is derived from the tectogrammatical layer
of the Prague Czech-English Dependency Treebank
(Haji?c, 1998). See Figure 1 for an example.
The three formalisms come from very different
linguistic theories, but all are represented as labeled
directed graphs, with words as vertices, and all
have ?top? annotations, corresponding roughly to
the semantic focus of the sentence. (A ?top? need
not be a root of the graph.) This allows us to use
the same machinery (?3) for training and testing
statistical models for the three formalisms.
3 Models
We treat the problem as a three-stage pipeline. The
first stage prunes words by predicting whether they
have any incoming or outgoing edges at all (?3.1);
if a word does not, then it is not considered for
any attachments in later stages. The second stage
176
predicts where edges are present, and their labels
(?3.2). The third stage predicts whether a predicate
word is a top or not (?3.3). Formalisms sometimes
annotate more than one ?top? per sentence, but we
found that we achieve the best performance on all
formalisms by predicting only the one best-scoring
?top? under the model.
3.1 Singleton Classification
For each formalism, we train a classifier to rec-
ognize singletons, nodes that have no parents or
children. (For example, punctuation tokens are of-
ten singletons.) This makes the system faster with-
out affecting accuracy. For singleton prediction,
we use a token-level logistic regression classifier,
with features including the word, its lemma, and
its part-of-speech tag. If the classifier predicts a
probability of 99% or higher the token is pruned;
this removes around 10% of tokens. (The classi-
fier performs differently on different formalisms;
on PAS it has perfect accuracy, while on DM and
PCEDT accuracy is in the mid-90?s.)
3.2 Edge Prediction
In the second stage of the pipeline, we predict the
set of labeled directed edges in the graph. We use
the same set of edge-factored features (?3.2.3) in
two alternative models: an edge-independent mul-
ticlass logistic regression model (LOGISTICEDGE,
?3.2.1); and a structured SVM (Taskar et al., 2003;
Tsochantaridis et al., 2004) that enforces a deter-
minism constraint for certain labels, which allows
each word to have at most one outgoing edge with
that label (SVMEDGE, ?3.2.2). For each formalism,
we trained both models with varying features en-
abled and hyperparameter settings and submitted
the configuration that produced the best labeled F
1
on the development set. For DM and PCEDT, this
was LOGISTICEDGE; for PAS, this was SVMEDGE.
We report results only for the submitted configu-
rations, with different features enabled. Due to
time constraints, full hyperparameter sweeps and
comparable feature sweeps were not possible.
3.2.1 LOGISTICEDGE Parser
The LOGISTICEDGE model considers only token
index pairs (i, j) where |i ? j| ? 10, i 6= j,
and both t
i
and t
j
have been predicted to be non-
singletons by the first stage. Although this prunes
some gold edges, among the formalisms, 95%?97%
of all gold edges are between tokens of distance
10 or less. Both directions i ? j and j ? i are
considered between every pair.
Let L be the set of K + 1 possible output labels:
the formalism?s original K edge labels, plus the
additional label NOEDGE, which indicates that no
edge exists from i to j. The model treats every pair
of token indices (i, j) as an independent multiclass
logistic regression over output space L. Let x be
an input sentence. For candidate parent index i,
child index j, and edge label `, we extract a feature
vector f(x, i, j, `), where ` is conjoined with every
feature described in ?3.2.3. The multiclass logis-
tic regression model defines a distribution over L,
parametrized by weights ?:
P (` | ?, x, i, j) =
exp{? ? f(x, i, j, `)}
?
`
?
?L
exp{? ? f(x, i, j, `
?
)}
.
? is learned by minimizing total negative log-
likelihood of the above (with weighting; see be-
low), plus `
2
regularization. AdaGrad (Duchi et al.,
2011) is used for optimization. This seemed to opti-
mize faster than L-BFGS (Liu and Nocedal, 1989),
at least for earlier iterations, though we did no sys-
tematic comparison. Stochastic gradient steps are
applied one at a time from individual examples,
and a gradient step for the regularizer is applied
once per epoch.
The output labels have a class imbalance; in all
three formalisms, there are many more NOEDGE
examples than true edge examples. We improved
F
1
performance by downweighting NOEDGE
examples through a weighted log-likelihood
objective,
?
i,j
?
`
w
`
logP (` |?, x, i, j), with
w
NOEDGE
= 0.3 (selected on development set) and
w
`
= 1 otherwise.
Decoding: To predict a graph structure at test-time
for a new sentence, the most likely edge label is pre-
dicted for every candidate (i, j) pair of unpruned
tokens. If an edge is predicted for both directions
for a single (i, j) pair, only the edge with the higher
score is chosen. (There are no such bidirectional
edges in the training data.) This post-processing ac-
tually did not improve accuracy on DM or PCEDT;
it did improve PAS by ?0.2% absolute F
1
, but we
did not submit LOGISTICEDGE for PAS.
3.2.2 SVMEDGE Parser
In the SVMEDGE model, we use a structured SVM
with a determinism constraint. This constraint en-
sures that each word token has at most one outgoing
edge for each label in a set of deterministic labels
L
d
. For example, in DM a predicate never has more
177
than one child with edge label ?ARG1.? L
d
was
chosen to be the set of edges that were > 99.9%
deterministic in the training data.
1
Consider the fully dense graph of all edges be-
tween all words predicted as not singletons by the
singleton classifier ?3.1 (in all directions with all
possible labels). Unlike LOGISTICEDGE, the la-
bel set L does not include an explicit NOEDGE
label. If ? denotes the model weights, and f de-
notes the features, then an edge from i to j with
label ` in the dense graph has a weight c(i, j, `)
assigned to it using the linear scoring function
c(i, j, `) = ? ? f(x, i, j, `).
Decoding: For each node and each label `, if ` ?
L
d
, the decoder adds the highest scoring outgoing
edge, if its weight is positive. For ` 6? L
d
, every
outgoing edge with positive weight is added. This
procedure is guaranteed to find the highest scoring
subgraph (largest sum of edge weights) of the dense
graph subject to the determinism constraints. Its
runtime is O(n
2
).
The model weights are trained using the struc-
tured SVM loss. If x is a sentence and y is a
graph over that sentence, let the features be de-
noted f(x, y) =
?
(i,j,`)?y
f(x, i, j, `). The SVM
loss for each training example (x
i
, y
i
) is:
??
>
f(x
i
, y
i
)+max
y
?
>
f(x
i
, y)+cost(y, y
i
)
where cost(y, y
i
) = ?|y \ y
i
| + ?|y
i
\ y|. ? and
? trade off between precision and recall for the
edges (Gimpel and Smith, 2010). The loss is min-
imized with AdaGrad using early-stopping on a
development set.
3.2.3 Edge Features
Table 1 describes the features we used for predict-
ing edges. These features were computed over an
edge e with parent token s at index i and child
token t at index j. Unless otherwise stated, each
feature template listed has an indicator feature that
fires for each value it can take on. For the sub-
mitted results, LOGISTICEDGE uses all features
except Dependency Path v2, POS Path, and Dis-
tance Thresholds, and SVMEDGE uses all features
except Dependency Path v1. This was due to
SVMEDGE being faster to train than LOGISTIC-
EDGE when including POS Path features, and due
1
By this we mean that of the nodes that have at least
one outgoing ` edge, 99.9% of them have only one outgo-
ing ` edge. For DM, L
d
= L\{? and c,? ? or c,? ? then c,?
?loc,? ?mwe,? ?subord?}; for PAS, L
d
= L; and for PCEDT,
L
d
={?DPHR,? ?INTF,? ?VOCAT?}.
Tokens: The tokens s and t themselves.
Lemmas: Lemmas of s and t.
POS tags: Part of speech tags of s and t.
Linear Order: Fires if i < j.
Linear Distance: i? j.
Dependency Path v1 (LOGISTICEDGE only): The
concatenation of all POS tags, arc labels and up/down
directions on the path in the syntactic dependency tree
from s to t. Conjoined with s, with t, and without either.
Dependency Path v2 (SVMEDGE only): Same as De-
pendency Path v1, but with the lemma of s or t instead
of the word, and substituting the token for any ?IN? POS
tag.
Up/Down Dependency Path: The sequence of upward
and downward moves needed to get from s to t in the
syntactic dependency tree.
Up/Down/Left/Right Dependency Path: The unla-
beled path through the syntactic dependency tree from s
to t, annotated with whether each step through the tree
was up or down, and whether it was to the right or left in
the sentence.
Is Parent: Fires if s is the parent of t in the syntactic
dependency parse.
Dependency Path Length: Distance between s and t in
the syntactic dependency parse.
POS Context: Concatenated POS tags of tokens at i?1,
i, i+ 1, j ? 1, j, and j + 1. Concatenated POS tags of
tokens at i? 1, i, j ? 1, and j. Concatenated POS tags
of tokens at i, i+ 1, j, and j + 1.
Subcategorization Sequence: The sequence of depen-
dency arc labels out of s, ordered by the index of the
child. Distinguish left children from right children. If t
is a direct child of s, distinguish its arc label with a ?+?.
Conjoin this sequence with the POS tag of s.
Subcategorization Sequence with POS: As above, but
add the POS tag of each child to its arc label.
POS Path (SVMEDGE only): Concatenated POS tags
between and including i and j. Conjoined with head
lemma, with dependent lemma, and without either.
Distance Thresholds (SVMEDGE only): Fires for ev-
ery integer between 1 and blog(|i? j|+1)/ log(1.39)c
inclusive.
Table 1: Features used in edge prediction
to time constraints for the submission we were un-
able to retrain LOGISTICEDGE with these features.
3.2.4 Feature Hashing
The biggest memory usage was in the map from
feature names to integer indices during feature
extraction. For experimental expedience, we im-
plemented multitask feature hashing (Weinberger
et al., 2009), which hashes feature names to indices,
under the theory that errors due to collisions tend
to cancel. No drop in accuracy was observed.
3.3 Top Prediction
We trained a separate token-level binary logistic
regression model to classify whether a token?s node
had the ?top? attribute or not. At decoding time, all
predicted predicates (i.e., nodes where there is at
178
least one outbound edge) are possible candidates
to be ?top?; the classifier probabilities are evalu-
ated, and the highest-scoring node is chosen to be
?top.? This is suboptimal, since some graphs have
multiple tops (in PCEDT this is more common);
but selection rules based on probability thresholds
gave worse F
1
performance on the dev set. For a
given token t at index i, the top classifier?s features
included t?s POS tag, i, those two conjoined, and
the depth of t in the syntactic dependency tree.
4 Negative Results
We followed a forward-selection process during
feature engineering. For each potential feature,
we tested the current feature set versus the current
feature set plus the new potential feature. If the
new feature did not improve performance, we did
not add it. We list in table 2 some of the features
which we tested but did not improve performance.
In order to save time, we ran these feature se-
lection experiments on a subsample of the training
data, for a reduced number of iterations. These re-
sults thus have a strong caveat that the experiments
were not exhaustive. It may be that some of these
features could help under more careful study.
5 Experimental Setup
We participated in the Open Track, and used the
syntactic dependency parses supplied by the orga-
nizers. Feature engineering was performed on a
development set (?20), training on ??00?19. We
evaluate labeled precision (LP), labeled recall (LR),
labeled F
1
(LF), and labeled whole-sentence match
(LM) on the held-out test data using the evaluation
script provided by the organizers. LF was aver-
aged over the formalisms to determine the winning
system. Table 3 shows our scores.
6 Conclusion and Future Work
We found that feature-rich discriminative models
perform well at the task of mapping from sentences
to semantic dependency parses. While our final
approach is fairly standard for work in parsing,
we note here additional features and constraints
which did not appear to help (contrary to expecta-
tion). There are a number of clear extensions to
this work that could improve performance. While
an edge-factored model allows for efficient infer-
ence, there is much to be gained from higher-order
features (McDonald and Pereira, 2006; Martins
et al., 2013). The amount of information shared
Word vectors: Features derived from 64-dimensional
vectors from (Faruqui and Dyer, 2014), including the
concatenation, difference, inner product, and element-
wise multiplication of the two vectors associated with
a parent-child edge. We also trained a Random Forest
on the word vectors using Liaw and Wiener?s (2002) R
implementation. The predicted labels were then used as
features in LOGISTICEDGE.
Brown clusters Features derived from Brown clusters
(Brown et al., 1992) trained on a large corpus of web data.
Parent, child, and conjoined parent-child edge features
from cluster prefixes of length 2, 4, 6, 8, 10, and 12.
Conjunctions of those features with the POS tags of the
parent and child tokens.
Active/passive: Active/passive voice feature (as in Jo-
hansson and Nugues (2008)) conjoined with both the
Linear Distance features and the Subcategorization Se-
quence features. Voice information may already be cap-
tured by features from the Stanford dependency?style
parses, which include passivization information in arc
labels such as nsubjpass and auxpass (de Marneffe and
Manning, 2008).
Connectivity constraint: Enforcing that the graph is
connected (ignoring singletons), similar to Flanigan et al.
(2014). Almost all semantic dependency graphs in the
training data are connected (ignoring singletons), but
we found that enforcing this constraint significantly hurt
precision.
Tree constraint: Enforces that the graph is a tree. Un-
surprisingly, we found that enforcing a tree constraint
hurt performance.
Table 2: Features and constraints giving negative results.
LP LR LF LM
DM 0.8446 0.8348 0.8397 0.0875
PAS 0.9078 0.8851 0.8963 0.2604
PCEDT 0.7681 0.7072 0.7364 0.0712
Average 0.8402 0.8090 0.8241 0.1397
Table 3: Labeled precision (LP), recall (LR), F
1
(LF), and
whole-sentence match (LM) on the held-out test data.
between the three formalisms suggests that a multi-
task learning (Evgeniou and Pontil, 2004) frame-
work could lead to gains. And finally, there is
additional structure in the formalisms which could
be exploited (such as the deterministic processes
by which an original PCEDT tree annotation was
converted into a graph); formulating more subtle
graph constraints to capture this a priori knowl-
edge could lead to improved performance. We
leave such explorations to future work.
Acknowledgements
We are grateful to Manaal Faruqui for his help in word vector
experiments, and to reviewers for helpful comments. The re-
search reported in this paper was sponsored by the U.S. Army
Research Laboratory and the U. S. Army Research Office
under contract/grant number W911NF-10-1-0533, DARPA
grant FA8750-12-2-0342 funded under the DEFT program,
U.S. NSF grants IIS-1251131 and IIS-1054319, and Google?s
support of the Reading is Believing project at CMU.
179
References
Peter F. Brown, Peter V. deSouza, Robert L. Mercer, Vin-
cent J. Della Pietra, and Jenifer C. Lai. 1992. Class-based
n-gram models of natural language. Computational Lin-
guistics, 18(4):467?479.
Marie-Catherine de Marneffe and Christopher D. Manning.
2008. The Stanford typed dependencies representation. In
Coling 2008: Proc. of the Workshop on Cross-Framework
and Cross-Domain Parser Evaluation, pages 1?8. Manch-
ester, UK.
John Duchi, Elad Hazan, and Yoram Singer. 2011. Adap-
tive subgradient methods for online learning and stochas-
tic optimization. Journal of Machine Learning Research,
12:2121?2159.
Theodoros Evgeniou and Massimiliano Pontil. 2004. Regular-
ized multitask learning. In Proc. of KDD, pages 109?117.
Seattle, WA, USA.
Manaal Faruqui and Chris Dyer. 2014. Improving vector
space word representations using multilingual correlation.
In Proc. of EACL, pages 462?471. Gothenburg, Sweden.
Jeffrey Flanigan, Sam Thomson, Jaime Carbonell, Chris Dyer,
and Noah A. Smith. 2014. A discriminative graph-based
parser for the Abstract Meaning Representation. In Proc.
of ACL, pages 1426?1436. Baltimore, MD, USA.
Dan Flickinger, Yi Zhang, and Valia Kordoni. 2012. Deep-
Bank: a dynamically annotated treebank of the Wall Street
Journal. In Proc. of the Eleventh International Workshop on
Treebanks and Linguistic Theories, pages 85?96. Lisbon,
Portugal.
Kevin Gimpel and Noah A. Smith. 2010. Softmax-margin
training for structured log-linear models. Technical
Report CMU-LTI-10-008, Carnegie Mellon Univer-
sity. URL http://lti.cs.cmu.edu/sites/
default/files/research/reports/2010/
cmulti10008.pdf.
Jan Haji?c. 1998. Building a syntactically annotated corpus:
the Prague Dependency Treebank. In Eva Haji?cov?a, ed-
itor, Issues of Valency and Meaning. Studies in Honour
of Jarmila Panevov?a, pages 106?132. Prague Karolinum,
Charles University Press, Prague.
Richard Johansson and Pierre Nugues. 2008. Dependency-
based semantic role labeling of PropBank. In Proc. of
EMNLP, pages 69?78. Honolulu, HI, USA.
Andy Liaw and Matthew Wiener. 2002. Classification
and regression by randomForest. R News, 2(3):18?
22. URL http://cran.r-project.org/web/
packages/randomForest/.
Dong C. Liu and Jorge Nocedal. 1989. On the limited memory
BFGS method for large scale optimization. Mathematical
Programming, 45(3):503?528.
Andr?e F. T. Martins, Miguel Almeida, and Noah A. Smith.
2013. Turning on the turbo: Fast third-order non-projective
turbo parsers. In Proc. of ACL, pages 617?622. Sofia,
Bulgaria.
Ryan McDonald and Fernando Pereira. 2006. Online learning
of approximate dependency parsing algorithms. In Proc. of
EACL, pages 81?88. Trento, Italy.
Yusuke Miyao, Takashi Ninomiya, and Jun?ichi Tsujii. 2004.
Corpus-oriented grammar development for acquiring a
head-driven phrase structure grammar from the Penn Tree-
bank. In Proc. of IJCNLP, pages 684?693. Hainan Island,
China.
Stephan Oepen, Marco Kuhlmann, Yusuke Miyao, Daniel
Zeman, Dan Flickinger, Jan Haji?c, Angelina Ivanova, and
Yi Zhang. 2014. SemEval 2014 Task 8: Broad-coverage
semantic dependency parsing. In Proc. of SemEval. Dublin,
Ireland.
Ben Taskar, Carlos Guestrin, and Daphne Koller. 2003. Max-
margin Markov networks. In Proc. of NIPS, pages 25?32.
Vancouver, British Columbia, Canada.
Ioannis Tsochantaridis, Thomas Hofmann, Thorsten Joachims,
and Yasemin Altun. 2004. Support vector machine learning
for interdependent and structured output spaces. In Proc.
of ICML, pages 104?111. Banff, Alberta, Canada.
Kilian Weinberger, Anirban Dasgupta, John Langford, Alex
Smola, and Josh Attenberg. 2009. Feature hashing for
large scale multitask learning. In Proc. of ICML, pages
1113?1120. Montreal, Quebec, Canada.
180
