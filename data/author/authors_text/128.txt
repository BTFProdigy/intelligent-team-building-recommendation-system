Proceedings of the EACL 2009 Workshop on Language Technologies for African Languages ? AfLaT 2009, pages 104?111,
Athens, Greece, 31 March 2009. c?2009 Association for Computational Linguistics
Methods for Amharic Part-of-Speech Tagging
Bjo?rn Gamba?ck?? Fredrik Olsson? Atelach Alemu Argaw? Lars Asker?
?Userware Laboratory ?Dpt. of Computer & Information Science ?Dpt. of Computer & System Sciences
Swedish Institute of Computer Science Norwegian University of Science & Technology Stockholm University
Kista, Sweden Trondheim, Norway Kista, Sweden
{gamback,fredriko}@sics.se gamback@idi.ntnu.no {atelach,asker}@dsv.su.se
Abstract
The paper describes a set of experiments
involving the application of three state-of-
the-art part-of-speech taggers to Ethiopian
Amharic, using three different tagsets.
The taggers showed worse performance
than previously reported results for Eng-
lish, in particular having problems with
unknown words. The best results were
obtained using a Maximum Entropy ap-
proach, while HMM-based and SVM-
based taggers got comparable results.
1 Introduction
Many languages, especially on the African con-
tinent, are under-resourced in that they have
very few computational linguistic tools or corpora
(such as lexica, taggers, parsers or tree-banks)
available. Here, we will concentrate on the task
of developing part-of-speech taggers for Amharic,
the official working language of the government
of the Federal Democratic Republic of Ethiopia:
Ethiopia is divided into nine regions, each with
its own nationality language; however, Amharic is
the language for country-wide communication.
Amharic is spoken by about 30 million people
as a first or second language, making it the second
most spoken Semitic language in the world (after
Arabic), probably the second largest language in
Ethiopia (after Oromo), and possibly one of the
five largest languages on the African continent.
The actual size of the Amharic speaking popula-
tion must be based on estimates: Hudson (1999)
analysed the Ethiopian census from 1994 and in-
dicated that more than 40% of the population then
understood Amharic, while the current size of the
Ethiopian population is about 80 million.1
182.5 million according to CIA (2009); 76.9 according to
Ethiopian parliament projections in December 2008 based on
the preliminary reports from the census of May 2007.
In spite of the relatively large number of speak-
ers, Amharic is still a language for which very few
computational linguistic resources have been de-
veloped, and previous efforts to create language
processing tools for Amharic?e.g., Alemayehu
and Willett (2002) and Fissaha (2005)?have been
severely hampered by the lack of large-scale lin-
guistic resources for the language. In contrast, the
work detailed in the present paper has been able
to utilize the first publicly available medium-sized
tagged Amharic corpus, described in Section 5.
However, first the Amharic language as such is
introduced (in Section 2), and then the task of part-
of-speech tagging and some previous work in the
field is described (Section 3). Section 4 details the
tagging strategies used in the experiments, the re-
sults of which can be found in Section 6 together
with a short discussion. Finally, Section 7 sums up
the paper and points to ways in which we believe
that the results can be improved in the future.
2 Amharic
Written Amharic (and Tigrinya) uses a unique
script originating from the Ge?ez alphabet (the
liturgical language of the Ethiopian Orthodox
Church). Written Ge?ez can be traced back to at
least the 4th century A.D., with the first versions
including consonants only, while the characters
in later versions represent consonant-vowel (CV)
pairs. In modern Ethiopic script each syllograph
(syllable pattern) comes in seven different forms
(called orders), reflecting the seven vowel sounds.
The first order is the basic form; the others are de-
rived from it by modifications indicating vowels.
There are 33 basic forms, giving 7*33 syllographs,
or fidels (?fidel?, lit. ?alphabet? in Amharic, refers
both to the characters and the entire script). Unlike
Arabic and Hebrew, Amharic is written from left
to right. There is no agreed upon spelling standard
for compound words and the writing system uses
several ways to denote compounds
104
form pattern
root sbr CCC
perfect sa?bba?r CVCCVC
imperfect sa?br CVCC
gerund sa?br CVCC
imperative sba?r CCVC
causative assa?bba?r as-CVCCVC
passive ta?sa?bba?r ta?s-CVCCVC
Table 1: Some forms of the verb sbr (?break?)
2.1 Amharic morphology
A significantly large part of the vocabulary con-
sists of verbs, and like many other Semitic lan-
guages, Amharic has a rich verbal morphology
based on triconsonantal roots with vowel variants
describing modifications to, or supplementary de-
tail and variants of the root form. For example,
the root sbr, meaning ?to break? can have (among
others!) the forms shown in Table 1. Subject, gen-
der, number, etc., are also indicated as bound mor-
phemes on the verb, as well as objects and posses-
sion markers, mood and tense, beneficative, mal-
factive, transitive, dative, negative, etc.
Amharic nouns (and adjectives) can be inflected
for gender, number, definiteness, and case, al-
though gender is usually neutral. The definite ar-
ticle attaches to the end of a noun, as do conjunc-
tions, while prepositions are mostly prefixed.
2.2 Processing Amharic morphology
The first effort on Amharic morphological pro-
cessing was a rule-based system for verbs (and
nouns derived from verbs) which used root pat-
terns and affixes to determine lexical and in-
flectional categories (Bayou, 2000), while Bayu
(2002) used an unsupervised learning approach
based on probabilistic models to extract stems,
prefixes, and suffixes for building a morphological
dictionary. The system was able to successfully
analyse 87% of a small testdata set of 500 words.
The first larger-scale morphological analyser
for Amharic verbs used XFST, the Xerox Finite
State Tools (Fissaha and Haller, 2003). This was
later extended to include all word categories (Am-
salu and Gibbon, 2005). Testing with 1620 words
text from an Amharic bible, 88?94% recall and
54?94% precision (depending on the word-class)
were reported. The lowest precision (54%) was
obtained for verbs; Amsalu and Demeke (2006)
thus describe ways to extend the finite-state sys-
tem to handle 6400 simple verbal stems generated
from 1300 root forms.
Alemayehu and Willett (2002) report on a stem-
mer for Information Retrieval for Amharic, and
testing on a 1221 random word sample stated
?Manual assessment of the resulting stems showed
that 95.5 percent of them were linguistically
meaningful,? but gave no evaluation of the cor-
rectness of the segmentations. Argaw and Asker
(2007) created a rule-based stemmer for a similar
task, and using 65 rules and machine readable dic-
tionaries obtained 60.0% accuracy on fictional text
(testing on 300 unique words) and 76.9% on news
articles (on 1503 words, of which 1000 unique).2
3 Part-of-Speech Tagging
Part-of-speech (POS) tagging is normally treated
as a classification task with the goal to assign lex-
ical categories (word classes) to the words in a
text. Most work on tagging has concentrated on
English and on using supervised methods, in the
sense that the taggers have been trained on an
available, tagged corpus. Both rule-based and sta-
tistical / machine-learning based approaches have
been thoroughly investigated. The Brill Tagger
(Brill, 1995) was fundamental in using a com-
bined rule- and learning-based strategy to achieve
96.6% accuracy on tagging the Penn Treebank
version of the Wall Street Journal corpus. That
is, to a level which is just about what humans
normally achieve when hand-tagging a corpus, in
terms of interannotator agreement?even though
Voutilainen (1999) has shown that humans can get
close to the 100% agreement mark if the annota-
tors are allowed to discuss the problematic cases.
Later taggers have managed to improve Brill?s
figures a little bit, to just above 97% on the Wall
Street Journal corpus using Hidden Markov Mod-
els, HMM and Conditional Random Fields, CRF;
e.g., Collins (2002) and Toutanova et al (2003).
However, most recent work has concentrated on
applying tagging strategies to other languages than
English, on combining taggers, and/or on using
unsupervised methods. In this section we will look
at these issues in more detail, in particular with the
relation to languages similar to Amharic.
3.1 Tagging Semitic languages
Diab et al (2004) used a Support Vector Machine,
SVM-based tagger, trained on the Arabic Penn
2Other knowledge sources for processing Amharic in-
clude, e.g., Gasser?s verb stem finder (available from
nlp.amharic.org) and wordlists as those collected by
Gebremichael (www.cs.ru.nl/?biniam/geez).
105
Treebank 1 to tokenize, POS tag, and annotate
Arabic base phrases. With an accuracy of 95.5%
over a set of 24 tags, the data-driven tagger per-
formed on par with state-of-the-art results for En-
glish when trained on similar-sized data (168k to-
kens). Bar-Haim et al (2008) developed a lexicon-
based HMM tagger for Hebrew. They report
89.6% accuracy using 21 tags and training on 36k
tokens of news text. Mansour (2008) ported this
tagger into Arabic by replacing the morphological
analyzer, achieving an accuracy of 96.3% over 26
tags on a 89k token corpus. His approach modifies
the analyses of sentences receiving a low proba-
bility by adding synthetically constructed analyses
proposed by a model using character information.
A first prototype POS tagger for Amharic used
a stochastic HMM to model contextual dependen-
cies (Getachew, 2001), but was trained and tested
on only one page of text. Getachew suggested a
tagset for Amharic consisting of 25 tags. More
recently, CRFs have been applied to segment and
tag Amharic words (Fissaha, 2005), giving an ac-
curacy of 84% for word segmentation, using char-
acter, morphological and lexical features. The best
result for POS-tagging was 74.8%, when adding a
dictionary and bigrams to lexical and morphologi-
cal features, and 70.0% without dictionary and bi-
grams. The data used in the experiments was also
quite small and consisted of 5 annotated news ar-
ticles (1000 words). The tagset was a reduced ver-
sion (10 tags) of the one used by Getachew (2001),
and will be further discussed in Section 5.2.
3.2 Unsupervised tagging
The desire to use unsupervised machine learning
approaches to tagging essentially originates from
the wish to exploit the vast amounts of unlabelled
data available when constructing taggers. The area
is particularly vivid when it comes to the treatment
of languages for which there exist few, if any, com-
putational resources, and for the case of adapting
an existing tagger to a new language domain.
Banko and Moore (2004) compared unsuper-
vised HMM and transformation-based taggers
trained on the same portions of the Penn Treebank,
and showed that the quality of the lexicon used for
training had a high impact on the tagging results.
Duh and Kirchhoff (2005) presented a minimally-
supervised approach to tagging for dialectal Ara-
bic (Colloquial Egyptian), based on a morpholog-
ical analyzer for Modern Standard Arabic and un-
labeled texts in a number of dialects. Using a tri-
gram HMM tagger, they first produced a baseline
system and then gradually improved on that in an
unsupervised manner by adding features so as to
facilitate the analysis of unknown words, and by
constraining and refining the lexicon.
Unsupervised learning is often casted as the
problem of finding (hidden) structure in unla-
beled data. Goldwater and Griffiths (2007) noted
that most recent approaches to this problem aim
to identify the set of attributes that maximizes
some target function (Maximum Likelihood Esti-
mation), and then to select the values of these at-
tributes based on the representation of the model.
They proposed a different approach, based on
Bayesian principles, which tries to directly max-
imize the probability of the attributes based on
observation in the data. This Bayesian approach
outperformed Maximum Likelihood Estimation
when training a trigram HMM tagger for English.
Toutanova and Johnson (2007) report state-of-the-
art results by extending the work on Bayesian
modelling for unsupervised learning of taggers
both in the way that prior knowledge can be incor-
porated into the model, and in the way that possi-
ble tags for a given word is explicitly modeled.
3.3 Combining taggers
A possible way to improve on POS tagging results
is to combine the output of several different tag-
gers into a committee, forming joint decisions re-
garding the labeling of the input. Roughly, there
are three obvious ways of combining multiple pre-
dicted tags for a word: random decision, voting,
and stacking (Dietterich, 1997), with the first way
suited only for forming a baseline. Voting can
be divided into two subclasses: unweighted votes,
and weighted votes. The weights of the votes, if
any, are usually calculated based on the classifiers?
performance on some initial dataset. Stacking, fi-
nally, is a way of combining the decisions made
by individual taggers in which the predicted tags
for a given word are used as input to a subsequent
tagger which outputs a final label for the word.
Committee-based approaches to POS tagging
have been in focus the last decade: Brill and Wu
(1998) combined four different taggers for English
using unweighted voting and by exploring contex-
tual cues (essentially a variant of stacking). Aires
et al (2000) experimented with 12 different ways
of combining the output from taggers for Brazilian
106
Portuguese, and concluded that some, but not all,
combinations yielded better accuracy than the best
individual tagger. Shacham and Wintner (2007)
contrasted what they refer to as being a na??ve way
of combining taggers with a more elaborate, hi-
erarchical one for Hebrew. In the end, the elabo-
rated method yielded results inferior to the na??ve
approach. De Pauw et al (2006) came to simi-
lar conclusions when using five different ways of
combining four data-driven taggers for Swahili.
The taggers were based on HMM, Memory-based
learning, SVM, and Maximum Entropy, with the
latter proving most accurate. Only in three of
five cases did a combination of classifiers perform
better than the Maximum Entropy-based tagger,
and simpler combination methods mostly outper-
formed more elaborate ones.
Spoustova? et al (2007) report on work on com-
bining a hand-written rule-based tagger with three
statistically induced taggers for Czech. As an ef-
fect of Czech being highly inflectional, the tagsets
are large: 1000?2000 unique tags. Thus the ap-
proach to combining taggers first aims at reducing
the number of plausible tags for a word by using
the rule-based tagger to discard impossible tags.
Precision is then increased by invoking one or all
of the data-driven taggers. Three different ways of
combining the taggers were explored: serial com-
bination, involving one of the statistical taggers;
so called SUBPOS pre-processing, involving two
instances of statistical taggers (possibly the same
tagger); and, parallel combination, in which an ar-
bitrary number of statistical taggers is used. The
combined tagger yielded the best results for Czech
POS tagging reported to date, and as a side-effect
also the best accuracy for English: 97.43%.3
4 The Taggers
This section describes the three taggers used in the
experiments (which are reported on in Section 6).
4.1 Hidden Markov Models: TnT
TnT, ?Trigrams?n?Tags? (Brants, 2000) is a very
fast and easy-to-use HMM-based tagger which
painlessly can be trained on different languages
and tagsets, given a tagged corpus.4 A Markov-
based tagger aims to find a tag sequence which
maximizes P (wordn|tagn) ? P (tagn|tag1...n?1),
where the first factor is the emit (or lexical) prob-
3As reported on ufal.mff.cuni.cz/compost/en
4www.coli.uni-saarland.de/?thorsten/tnt
ability, the likelihood of a word given certain tag,
and the second factor is the state transition (or con-
textual) probability, the likelihood of a tag given a
sequence of preceding tags. TnT uses the Viterbi
algorithm for finding the optimal tag sequence.
Smoothing is implemented by linear interpolation,
the respective weights are determined by deleted
interpolation. Unknown words are handled by a
suffix trie and successive abstraction.
Applying TnT to the Wall Street Journal cor-
pus, Brants (2000) reports 96.7% overall accuracy,
with 97.0% on known and 85.5% on unknown
words (with 2.9% of the words being unknown).
4.2 Support Vector Machines: SVMTool
Support Vector Machines (SVM) is a linear learn-
ing system which builds two class classifiers. It
is a supervised learning method whereby the in-
put data are represented as vectors in a high-
dimensional space and SVM finds a hyperplane (a
decision boundary) separating the input space into
two by maximizing the margin between positive
and negative data points.
SVMTool is an open source tagger based on
SVMs.5 Comparing the accuracy of SVMTool
with TnT on the Wall Street Journal corpus,
Gime?nez and Ma`rquez (2004) report a better per-
formance by SVMTool: 96.9%, with 97.2% on
known words and 83.5% on unknown.
4.3 Maximum Entropy: MALLET
Maximum Entropy is a linear classification
method. In its basic incarnation, linear classifi-
cation combines, by addition, the pre-determined
weights used for representing the importance of
each feature to a given class. Training a Maxi-
mum Entropy classifier involves fitting the weights
of each feature value for a particular class to the
available training data. A good fit of the weights
to the data is obtained by selecting weights to max-
imize the log-likelihood of the learned classifica-
tion model. Using an Maximum Entropy approach
to POS tagging, Ratnaparkhi (1996) reports a tag-
ging accuracy of 96.6% on the Wall Street Journal.
The software of choice for the experiments re-
ported here is MALLET (McCallum, 2002), a
freely available Java implementation of a range of
machine learning methods, such as Na??ve Bayes,
decision trees, CRF, and Maximum Entropy.6
5www.lsi.upc.edu/?nlp/SVMTool
6mallet.cs.umass.edu
107
5 The Dataset
The experiments of this paper utilize the first
medium-sized corpus for Amharic (available at
http://nlp.amharic.org). The corpus consists
of all 1065 news texts (210,000 words) from the
Ethiopian year 1994 (parts of the Gregorian years
2001?2002) from the Walta Information Center, a
private news service based in Addis Ababa. It has
been morphologically analysed and manually part-
of-speech tagged by staff at ELRC, the Ethiopian
Languages Research Center at Addis Ababa Uni-
versity (Demeke and Getachew, 2006).
The corpus is available both in fidel and tran-
scribed into a romanized version known as SERA,
System for Ethiopic Representation in ASCII (Ya-
cob, 1997). We worked with the transliterated
form (202,671 words), to be compatible with the
machine learning tools used in the experiments.
5.1 ?Cleaning? the corpus
Unfortunately, the corpus available on the net con-
tains quite a few errors and tagging inconsisten-
cies: nine persons participated in the manual tag-
ging, writing the tags with pen on hard copies,
which were given to typists for insertion into the
electronic version of the corpus?a procedure ob-
viously introducing several possible error sources.
Before running the experiments the corpus had
to be ?cleaned?: many non-tagged items have been
tagged (the human taggers have, e.g., often tagged
the headlines of the news texts as one item, end-
of-sentence punctuation), while some double tags
have been removed. Reflecting the segmentation
of the original Amharic text, all whitespaces were
removed, merging multiword units with a single
tag into one-word units. Items like ?"? and ?/?
have been treated consistently as punctuation, and
consistent tagging has been added to word-initial
and word-final hyphens. Also, some direct tagging
errors and misspellings have been corrected.
Time expressions and numbers have not been
consistently tagged at all, but those had to be left
as they were. Finally, many words have been tran-
scribed into SERA in several versions, with only
the cases differing. However, this is also difficult
to account for (and in the experiments below we
used the case sensitive version of SERA), since
the SERA notation in general lets upper and lower
cases of the English alphabet represent different
symbols in fidel (the Amharic script).
5.2 Tagsets
For the experiments, three different tagsets were
used. Firstly, the full, original 30-tag set devel-
oped at the Ethiopian Languages Research Center
and described by Demeke and Getachew (2006).
This version of the corpus will be referred to as
?ELRC?. It contains 200, 863 words and differs
from the published corpus in way of the correc-
tions described in the previous section.
Secondly, the corpus was mapped to 11 basic
tags. This set consists of ten word classes: Noun,
Pronoun, Verb, Adjective, Preposition, Conjunc-
tion, Adverb, Numeral, Interjection, and Punctua-
tion, plus one tag for problematic words (unclear:
<UNC>). The main differences between the two
tagsets pertain to the treatment of prepositions and
conjunctions: in ?ELRC? there are specific classes
for, e.g., pronouns attached with preposition, con-
junction, and both preposition and conjunction
(similar classes occur for nouns, verbs, adjectives,
and numerals). In addition, numerals are divided
into cardinals and ordinals, verbal nouns are sepa-
rated from other nouns, while auxiliaries and rela-
tive verbs are distinguished from other verbs. The
full tagset is made up of thirty subclasses of the
basic classes, based on type of word only: the tags
contain no information on grammatical categories
(such as number, gender, tense, and aspect).
Thirdly, for comparison reasons, the full tagset
was mapped to the 10 tags used by Fissaha (2005).
These classes include one for Residual (R) which
was assumed to be equivalent to <UNC>. In addi-
tion, <CONJ> and <PREP> were mapped to Ad-
position (AP), and both <N> and <PRON> to N.
The other mappings were straight-forward, except
that the ?BASIC? tagset groups all verbs together,
while Fissaha kept Auxiliary (AUX) as its own
class. This tagset will be referred to as ?SISAY?.
5.3 Folds
For evaluation of the taggers, the corpus was split
into 10 folds. These folds were created by chop-
ping the corpus into 100 pieces, each of about
2000 words in sequence, while making sure that
each piece contained full sentences (rather than
cutting off the text in the middle of a sentence),
and then merging sets of 10 pieces into a fold.
Thus the folds represent even splits over the cor-
pus, to avoid tagging inconsistencies, but the se-
quences are still large enough to potentially make
knowledge sources such as n-grams useful.
108
Fold TOTAL KNOWN UNKNOWN
fold00 20,027 17,720 2,307
fold01 20,123 17,750 2,373
fold02 20,054 17,645 2,409
fold03 20,169 17,805 2,364
fold04 20,051 17,524 2,527
fold05 20,058 17,882 2,176
fold06 20,111 17,707 2,404
fold07 20,112 17,746 2,366
fold08 20,015 17,765 2,250
fold09 20,143 17,727 2,416
Average 20,086 17,727 2,359
Percent ? 88.26 11.74
Table 2: Statistics for the 10 folds
Table 2 shows the data for each of the folds, in
terms of total number of tokens, as well as split
into known and unknown tokens, where the term
UNKNOWN refers to tokens that are not in any of
the other nine folds. The figures at the bottom
of the table show the average numbers of known
and unknown words, over all folds. Notably, the
average number of unknown words is about four
times higher than in the Wall Street Journal cor-
pus (which, however, is about six times larger).
6 Results
The results obtained by applying the three dif-
ferent tagging strategies to the three tagsets are
shown in Table 3, in terms of average accura-
cies after 10-fold cross validation, over all the
tokens (with standard deviation),7 as well as ac-
curacy divided between the known and unknown
words. Additionally, SVMTool and MALLET in-
clude support for automatically running 10-fold
cross validation on their own folds. Figures for
those runs are also given. The last line of the table
shows the baselines for the tagsets, given as the
number of tokens tagged as regular nouns divided
by the total number of words after correction.
6.1 TnT
As the bold face figures indicate, TnT achieves the
best scores of all three taggers, on all three tagsets,
on known words. However, it has problems with
the unknown words?and since these are so fre-
quent in the corpus, TnT overall performs worse
than the other taggers. The problems with the un-
known words increase as the number of possible
tags increase, and thus TnT does badly on the orig-
inal tagging scheme (?ELRC?), where it only gets
7The standard deviation is given by
?
1
n
?n
i=1(xi ? x)
2
where x is the arithmetic mean ( 1n
?n
i=1 xi).
ELRC BASIC SISAY
TnT 85.56 92.55 92.60
STD DEV 0.42 0.31 0.32
KNOWN 90.00 93.95 93.99
UNKNOWN 52.13 82.06 82.20
SVM 88.30 92.77 92.80
STD DEV 0.41 0.31 0.37
KNOWN 89.58 93.37 93.34
UNKNOWN 78.68 88.23 88.74
Own folds 88.69 92.97 92.99
STD DEV 0.33 0.17 0.26
MaxEnt 87.87 92.56 92.60
STD DEV 0.49 0.38 0.43
KNOWN 89.44 93.26 93.27
UNKNOWN 76.05 87.29 87.61
Own folds 90.83 94.64 94.52
STD DEV 1.37 1.11 0.69
BASELINE 35.50 58.26 59.61
Table 3: Tagging results
a bit over 50% on the unknown words (and 85.6%
overall). For the two reduced tagsets TnT does
better: overall performance goes up to a bit over
92%, with 82% on unknown words.
Table 3 shows the results on the default configu-
ration of TnT, i.e., using 3-grams and interpolated
smoothing. Changing these settings give no sub-
stantial improvement overall: what is gained at
one end (e.g., on unknown words or a particular
tagset) is lost at the other end (on known words or
other tagsets). However, per default TnT uses a
suffix trie of length 10 to handle unknown words.
Extending the suffix to 20 (the maximum value
in TnT) gave a slight performance increase on
?ELCR? (0.13% on unknown words, 0.01% over-
all), while having no effect on the smaller tagsets.
6.2 SVM
The SVM-tagger outperforms TnT on unknown
words, but is a bit worse on known words. Overall,
SVM is slightly better than TnT on the two smaller
tagsets and clearly better on the large tagset, and
somewhat better than MaxEnt on all three tagsets.
These results are based on SVMTool?s default
parameters: a one-pass, left-to-right, greedy tag-
ging scheme with a window size of 5. Previous
experiments with parameter tuning and multiple
pass tagging have indicated that there is room for
performance improvements by ? 2%.
6.3 Maximum Entropy
The MaxEnt tagger gets results comparable to the
other taggers on the predefined folds. Its overall
109
Wordn ; Tag of Wordn
Prefixes of Wordn, length 1-5 characters
Postfixes of Wordn, length 1-5 characters
Is Wordn capitalized?
Is Wordn all digits?
Does Wordn contain digits?
Does Wordn contain a hyphen?
Wordn?1 ; Tag of Wordn?1
Wordn?2 ; Tag of Wordn?2
Wordn+1
Wordn+2
Table 4: Features used in the MaxEnt tagger
performance is equivalent to TnT?s on the smaller
tagsets, but significantly better on ?ELRC?.
As can be seen in Table 3, the MaxEnt tag-
ger clearly outperforms the other taggers on all
tagsets, when MALLET is allowed to create its
own folds: all tagsets achieved classification ac-
curacies higher than 90%, with the two smaller
tagsets over 94.5%. The dramatic increase in the
tagger?s performance on these folds is surprising,
but a clear indication of one of the problems with
n-fold cross validation: even though the results
represent averages after n runs, the choice of the
original folds to suit a particular tagging strategy
is of utmost importance for the final result.
Table 4 shows the 22 features used to represent
an instance (Wordn) in the Maximum Entropy tag-
ger. The features are calculated per token within
sentences: the starting token of a sentence is not
affected by the characteristics of the tokens ending
the previous sentence, nor the other way around.
Thus not all features are calculated for all tokens.
6.4 Discussion
In terms of accuracy, the MaxEnt tagger is by
far the best of the three taggers, and on all three
tagsets, when allowed to select its own folds. Still,
as Table 3 shows, the variation of the results for
each individual fold was then substantially larger.
It should also be noted that TnT is by far the
fastest of the three taggers, in all respects: in terms
of time to set up and learn to use the tagger, in
terms of tagging speed, and in particular in terms
of training time. Training TnT is a matter of sec-
onds, but a matter of hours for MALLET/MaxEnt
and SVMTool. On the practical side, it is worth
adding that TnT is robust, well-documented, and
easy to use, while MALLET and SVMTool are
substantially more demanding in terms of user ef-
fort and also appear to be more sensitive to the
quality and format of the input data.
7 Conclusions and Future Work
The paper has described experiments with apply-
ing three state-of-the-art part-of-speech taggers to
Amharic, using three different tagsets. All tag-
gers showed worse performance than previously
reported results for English. The best accuracy
was obtained using a Maximum Entropy approach
when allowed to create its own folds: 90.1% on a
30 tag tagset, and 94.6 resp. 94.5% on two reduced
sets (11 resp. 10 tags), outperforming an HMM-
based (TnT) and an SVM-based (SVMTool) tag-
ger. On predefined folds all taggers got compa-
rable results (92.5-92.8% on the reduced sets and
4-7% lower on the full tagset). The SVM-tagger
performs slightly better than the others overall,
since it has the best performance on unknown
words, which are four times as frequent in the
200K words Amharic corpus used than in the (six
times larger) English Wall Street Journal corpus.
TnT gave the best results for known words, but
had the worst performance on unknown words.
In order to improve tagging accuracy, we will
investigate including explicit morphological pro-
cessing to treat unknown words, and combining
taggers. Judging from previous efforts on com-
bining taggers (Section 3.3), it is far from certain
that the combination of taggers actually ends up
producing better results than the best individual
tagger. A pre-requisite for successful combination
is that the taggers are sufficiently dissimilar; they
must draw on different characteristics of the train-
ing data and make different types of mistakes.
The taggers described in this paper use no other
knowledge source than a tagged training corpus.
In addition to incorporating (partial) morpholog-
ical processing, performance could be increased
by including knowledge sources such as machine
readable dictionaries or lists of Amharic stem
forms (Section 2.2). Conversely, semi-supervised
or unsupervised learning for tagging clearly are
interesting alternatives to manually annotate and
construct corpora for training taggers. Since
there are few computational resources available
for Amharic, approaches as those briefly outlined
in Section 3.2 deserve to be explored.
Acknowledgements
The work was partially funded by Sida, the Swedish Inter-
national Development Cooperation Agency through SPIDER
(the Swedish Programme for ICT in Developing Regions).
Thanks to Dr. Girma Demeke, Mesfin Getachew, and the
ELRC staff for their efforts on tagging the corpus, and to
Thorsten Brants for providing us with the TnT tagger.
110
References
Rachel V. Xavier Aires, Sandra M. Alu??sio, Denise C. S.
Kuhn, Marcio L. B. Andreeta, and Osvaldo N. Oliveira Jr.
2000. Combining classifiers to improve part of speech
tagging: A case study for Brazilian Portuguese. In 15th
Brazilian Symposium on AI, pp. 227?236, Atibaia, Brazil.
Nega Alemayehu and Peter Willett. 2002. Stemming of
Amharic words for information retrieval. Literary and
Linguistic Computing, 17:1?17.
Saba Amsalu and Dafydd Gibbon. 2005. Finite state mor-
phology of Amharic. In 5th Recent Advances in Natural
Language Processing, pp. 47?51, Borovets, Bulgaria.
Saba Amsalu and Girma A. Demeke. 2006. Non-
concatinative finite-state morphotactics of Amharic sim-
ple verbs. ELRC Working Papers, 2:304-325.
Atelach Alemu Argaw and Lars Asker. 2007. An Amharic
stemmer: Reducing words to their citation forms. Compu-
tational Approaches to Semitic Languages, pp. 104?110,
Prague, Czech Rep.
Michele Banko and Robert C. Moore. 2004. Part of speech
tagging in context. In 20th Int. Conf. on Computational
Linguistics, pp. 556?561, Geneva, Switzerland.
Roy Bar-Haim, Khalil Simaan, and Yoad Winter. 2008. Part-
of-speech tagging of modern Hebrew text. Natural Lan-
guage Engineering, 14:223?251.
Abiyot Bayou. 2000. Design and development of word
parser for Amharic language. MSc Thesis, Addis Ababa
University, Ethiopia.
Tesfaye Bayu. 2002. Automatic morphological analyser:
An experiment using unsupervised and autosegmental ap-
proach. MSc Thesis, Addis Ababa University, Ethiopia.
Thorsten Brants. 2000. TnT ? a statistical part-of-speech
tagger. In 6th Conf. Applied Natural Language Process-
ing, pp. 224?231, Seattle, Wash.
Eric Brill and Jun Wu. 1998. Classifier combination for im-
proved lexical disambiguation. In 17th Int. Conf. on Com-
putational Linguistics, pp. 191?195, Montreal, Canada.
Eric Brill. 1995. Transformation-based error-driven learning
and Natural Language Processing: A case study in part of
speech tagging. Computational Linguistics, 21:543?565.
CIA. 2009. The World Factbook ? Ethiopia. The Central In-
telligence Agency, Washington, DC. [Updated 22/01/09.]
Michael Collins. 2002. Discriminative training methods for
hidden Markov models: Theory and experiments with per-
ceptron algorithms. In Empirical Methods in Natural Lan-
guage Processing, pp. 1?8, Philadelphia, Penn.
Girma A. Demeke and Mesfin Getachew. 2006. Manual an-
notation of Amharic news items with part-of-speech tags
and its challenges. ELRC Working Papers, 2:1?17.
Mona Diab, Kadri Hacioglu, and Daniel Jurafsky. 2004. Au-
tomatic tagging of Arabic text: From raw text to base
phrase chunks. In HLT Conf. North American ACL,
pp. 149?152, Boston, Mass.
Thomas G. Dietterich. 1997. Machine-learning research:
Four current directions. AI magazine, 18:97?136.
Kevin Duh and Katrin Kirchhoff. 2005. POS tagging of di-
alectal Arabic: A minimally supervised approach. Com-
putational Approaches to Semitic Languages, pp. 55?62,
Ann Arbor, Mich.
Sisay Fissaha and Johann Haller. 2003. Amharic verb
lexicon in the context of machine translation. In 10th
Traitement Automatique des Langues Naturelles, vol. 2,
pp. 183?192, Batz-sur-Mer, France.
Sisay Fissaha. 2005. Part of speech tagging for Amharic us-
ing conditional random fields. Computational Approaches
to Semitic Languages, pp. 47?54, Ann Arbor, Mich.
Mesfin Getachew. 2001. Automatic part of speech tag-
ging for Amharic: An experiment using stochastic hid-
den Markov model (HMM) approach. MSc Thesis, Addis
Ababa University, Ethiopia.
Jesu?s Gime?nez and Llu??s Ma`rquez. 2004. SVMTool: A gen-
eral POS tagger generator based on support vector ma-
chines. In 4th Int. Conf. Language Resources and Eval-
uation, pp. 168?176, Lisbon, Portugal.
Sharon Goldwater and Thomas L. Griffiths. 2007. A fully
Bayesian approach to unsupervised part-of-speech tag-
ging. In 45th ACL, pp. 744?751, Prague, Czech Rep.
Grover Hudson. 1999. Linguistic analysis of the 1994
Ethiopian census. Northeast African Studies, 6:89?107.
Saib Mansour. 2008. Combining character and morpheme
based models for part-of-speech tagging of Semitic lan-
guages. MSc Thesis, Technion, Haifa, Israel.
Andrew Kachites McCallum. 2002. MALLET: A machine
learning for language toolkit. Webpage.
Guy De Pauw, Gilles-Maurice de Schryver, and Peter W.
Wagacha. 2006. Data-driven part-of-speech tagging of
Kiswahili. In 9th Int. Conf. Text, Speech and Dialogue,
pp. 197?204, Brno, Czech Rep.
Adwait Ratnaparkhi. 1996. A maximum entropy model for
part-of-speech tagging. In Empirical Methods in Natural
Language Processing, pp. 133?142, Philadelphia, Penn.
Danny Shacham and Shuly Wintner. 2007. Morphological
disambiguation of Hebrew: A case study in classifier com-
bination. In Empirical Methods in Natural Language Pro-
cessing, pp. 439?447, Prague, Czech Rep.
Drahomira? Spoustova?, Jan Hajic?, Jan Votrubec, Pavel Krbec,
and Pavel Kve?ton?. 2007. The best of two worlds: Co-
operation of statistical and rule-based taggers for Czech.
Balto-Slavonic Natural Language Processing, pp. 67?74.
Prague, Czech Rep.
Kristina Toutanova and Mark Johnson. 2007. A Bayesian
LDA-based model for semi-supervised part-of-speech tag-
ging. In 21st Int. Conf. Advances in Neural Information
Processing Systems, pp. 1521?1528, Vancover, B.C.
Kristina Toutanova, Dan Klein, Christopher D. Manning, and
Yoram Singer. 2003. Feature-rich part-of-speech tagging
with a cyclic dependency network. In HLT Conf. North
American ACL, pp. 173?180, Edmonton, Alberta.
Atro Voutilainen. 1999. An experiment on the upper bound
of interjudge agreement: The case of tagging. In 9th Eu-
ropean ACL, pp. 204?208, Bergen, Norway.
Daniel Yacob. 1997. The System for Ethiopic Representa-
tion in ASCII ? 1997 standard. Webpage.
111
Proceedings of the 5th Workshop on Important Unresolved Matters, pages 104?110,
Prague, Czech Republic, June 2007. c?2007 Association for Computational Linguistics
An Amharic Stemmer : Reducing Words to their Citation Forms
Atelach Alemu Argaw
Department of Computer and
Systems Sciences
Stockholm University/KTH, Sweden
atelach@dsv.su.se
Lars Asker
Department of Computer and
Systems Sciences
Stockholm University/KTH, Sweden
asker@dsv.su.se
Abstract
Stemming is an important analysis step in
a number of areas such as natural lan-
guage processing (NLP), information re-
trieval (IR), machine translation(MT) and
text classification. In this paper we present
the development of a stemmer for Amharic
that reduces words to their citation forms.
Amharic is a Semitic language with rich and
complex morphology. The application of
such a stemmer is in dictionary based cross
language IR, where there is a need in the
translation step, to look up terms in a ma-
chine readable dictionary (MRD). We apply
a rule based approach supplemented by oc-
currence statistics of words in a MRD and
in a 3.1M words news corpus. The main
purpose of the statistical supplements is to
resolve ambiguity between alternative seg-
mentations. The stemmer is evaluated on
Amharic text from two domains, news arti-
cles and a classic fiction text. It is shown to
have an accuracy of 60% for the old fash-
ioned fiction text and 75% for the news arti-
cles.
1 Introduction
Stemming is the process of reducing morphologi-
cal variants of a word into a common form. For
morphologically less complex languages like Eng-
lish or Swedish, this usually involves removal of suf-
fixes. For languages like Amharic or Arabic, that
have a much richer morphology, this process also
involves dealing with prefixes, infixes and deriva-
tives in addition to the suffixes. Stemming is widely
used in IR, with the assumption that morphologi-
cal variants represent similar meaning. It is applied
during indexing and is used to reduce the vocab-
ulary size, and it is used during query processing
in order to ensure similar representation as that of
the document collection. In cross language infor-
mation retrieval (CLIR) where a query is typically
posed in one language, and the document collection
from where the documents are retrieved is in another
language, some form of translation is required. For
low resource languages such as Amharic, machine
readable dictionaries (MRDs) play a crucial role by
enabling look up of translations of query terms. In
most cases such MRDs have all entries represented
only by their citation form. Thus in CLIR applica-
tions, it is of outmost importance that query terms
in the source language are reduced to the exact cor-
responding citation form as presented in the MRD.
In this paper we address this particular problem of
stemming Amharic words and reducing them to their
citation forms for CLIR applications.
The remainder of the paper is organized as fol-
lows. Section 2 provides a background information
about the Amharic language, followed by related
work in Section 3 and a brief description of Amharic
morphology in Section 4. Section 5 presents the re-
sources utilized, while Section 6 deals with a de-
tailed description of the stemmer. In section 7 we
describe experiments conducted to evaluate the per-
formance of the stemmer and discuss the obtained
results. We give concluding remarks in Section 8.
104
2 The Amharic Language
Amharic is the official working language of the fed-
eral government of the Federal Democratic Repub-
lic of Ethiopia and is estimated to be spoken by
well over 20 million people as a first or second lan-
guage. Amharic is the second most spoken Semitic
language in the world (after Arabic). It is today
probably the second largest language in Ethiopia (af-
ter Oromo, a Cushitic language) and possibly one
of the five largest languages on the African conti-
nent. Following the Constitution drafted in 1993,
Ethiopia is divided into nine fairly independent re-
gions, each with it?s own nationality language. How-
ever, Amharic is the language for country-wide com-
munication and was also for a long period the prin-
cipal literal language and medium of instruction in
primary and secondary schools of the country, while
higher education is carried out in English. Despite
it?s wide speaker population, computational linguis-
tic resources for Amharic, as most ?low resource?
languages, are very limitted and almost non existent.
Written Amharic uses a unique script which has
originated from the Ge?ez alphabet (the liturgical
language of the Ethiopian Orthodox Church). Writ-
ten Ge?ez can be traced back to at least the 4th
century A.D. The first versions of the language in-
cluded consonants only, while the characters in later
versions represent consonant-vowel (CV) phoneme
pairs. In the modern Ethiopic script each syllable
pattern comes in seven different forms (called or-
ders), reflecting the seven vowel sounds. The first
order is the basic form; the other orders are derived
from it by more or less regular modifications in-
dicating the different vowels. There are 33 basic
forms, giving 7*33 syllable patterns (syllographs),
or fidels. Two of the base forms represent vow-
els in isolation, but the rest are for consonants (or
semi-vowels classed as consonants) and thus cor-
respond to CV pairs, with the first order being the
base symbol with no explicit vowel indicator. The
writing system also includes four (incomplete, five-
character) orders of labialised velars and 24 addi-
tional labialised consonants. In total, there are 275
fidels, but not all the letters of the Amharic script
are strictly necessary for the pronunciation patterns
of the spoken language; some were simply inherited
from Ge?ez without having any semantic or phonetic
distinction in modern Amharic. There are many
cases where numerous symbols are used to denote
a single phoneme, as well as words that have ex-
tremely different orthographic form and slightly dis-
tinct phonetics, but with the same meaning. So are,
for example, most labialised consonants basically
redundant, and there are actually only 39 context-
independent phonemes (monophones): of the 275
symbols of the script, only about 233 remain if the
redundant ones are removed. The script also has a
unique set of punctuation marks and digits. Unlike
Arabic or Hebrew, the language is written from left
to right.
The Amharic writing system uses multitudes of
ways to denote compound words and there is no
agreed upon spelling standard for compounds. As
a result of this - and of the size of the country lead-
ing to vast dialectal dispersion - lexical variation and
homophony is very common.
3 Related work
Pioneering the work on morphological analysis of
Amharic verbs, Abiyot (Bayou, 2000) designed
and implemented a prototype word parser for
Amharic verbs and their derivation. He designed
a knowledge-based system that parses verbs, and
nouns derived from verbs. He used root pattern and
affixes to determine the lexical and inflectional cat-
egory of the words. He tested his system on a lim-
ited number of words (200 verbs and 200 nouns) and
the result showed that 86% of the verbs and 84% of
the nouns were recognized correctly. Another proto-
type morphological analyzer for Amharic was devel-
oped by Tesfaye Bayu (Bayu, 2002) where he used
an unsupervised learning approach based on prob-
abilistic models to extract morphemic components
(prefix, stem and suffix) to construct a morpholog-
ical dictionary. He also investigated an approach
whereby he applied the principle of Auto segmental
Phonology to identify morphemic component of a
stem such as consonantal root, vocalic melodies and
CV-templates. The first system was able to parse
successfully 87% of words of the test data (433 of
500 words). This result corresponds to a precision
of 95% and a recall of 90%. Tested with 255 stems,
the second system identified the morphemic compo-
nentes of 241 (or 94% of the) stems correctly.
105
Fissaha and Haller (Fissaha and Haller, 2003) dis-
cuss the morphology of Amharic verbs in the context
of Machine Translation and present an implemeta-
tion of a morphological analyser for Amharic us-
ing Xerox Finite State Tools (XFST). The different
classification shemes for Amharic verbs that have
been forwarded are discussed followed by the impli-
cation such classifications have on the implementa-
tion strategy. They claim that morphological analy-
sis for Amharic with XFST can handle most of the
morphologcal phenomena except some derivation
processes which involve simultaneous application of
both stem interdigitation and reduplication. Saba
and Gibbon (Amsalu and Gibbon, 2005) extend the
XFST implementation of Amharic morpholgy to in-
clude all word categories. Testing with 1620 words
text from an Amharic bible, they report recall levels
of 94% for verbs, 85% for nouns, and 88% for adjec-
tives while they report precisions of 94% for nouns,
81% for adjectives, 91% for adverbs, and 54% for
verbs, at the above specified recall levels.
A more recent work that applies Conditional
Random Fields to segment and part of speech tag
Amharic words is done by Fissaha (Adafre, 2005).
He reports an accuracy of 84% for the word segmen-
tation. The work deals with bound morphemes of
prepositions, conjunctions, relative markers, auxil-
iary verbs, nagation marker and coordinate conjunc-
tion, but leaves out other bound morphemes such as
definite article, agreement features such as gender
and number, case markers, etc, and considers them
to be part of the word. The best result (84%) is ob-
tained by using character, morphological and lexical
features.
There has been a work done by Alemayehu and
Willet (Alemayehu and Willett, 2002) which inves-
tigates the effectiveness of stemming in information
retrieval for Amharic. They compare performance
of word-based, stem-based, and root-based retrieval
of 40 Amharic queries against 548 Amharic docu-
ments, and show better recall levels for stem and
root based retrieval over word based, but they don?t
provide information on the precision of these exper-
iments.
All the above mentioned works attempt to address
the need to develop a morphological analyser for
Amharic, and show that there has been a great deal
of effort put in the design and implementation of
each system. Although that is the case, none of them
are publicly available, and/or are limitted in some
way. For our current task of stemming for the pur-
pose of CLIR dictionary lookup, full fledged mor-
phological analysis is most likely an overkill since
we only need citation forms of words, and precision
plays a very important role.
4 Amharic Morphology
Amharic has a rich verb morphology which is based
on triconsonantal roots with vowel variants describ-
ing modifications to, or supplementary detail and
variants of the root form. A significantly large part
of the vocabulary consists of verbs, which exhibit
different morphosyntactic properties based on the
arrangment of the consonant-vowel patterns. For ex-
ample, the root sbr, meaning ?to break? can have
the perfect form sa?bba?r with the pattern CVC-
CVC1, imperfect form sa?br with the pattern CVCC,
gerund form sa?br with the pattern CVCC, imper-
ative form sba?r with the pattern CCVC, causative
form assa?bba?r with the pattern as-CVCCVC, pas-
sive form ta?sa?bba?r with the pattern ta?-CVCCVC,
etc. Subject, gender, number, etc are also indicated
as bound morphemes on the verb, as well as objects
and possesion markers, mood and tense, benefica-
tive, malfactive, transitive, dative, negative, etc, pro-
ducing a complex verb morphology.
Amharic nouns can be inflected for gender, num-
ber, definiteness, and case, although gender is usu-
ally neutral. Adjectives behave in the same way as
nouns, taking similar inflections, while prepositions
are mostly bound morphemes prefixed to nouns. The
definte article in Amharic is also a bound morpheme,
and attaches to the end of a noun. We have given a
very brief description of some aspects of Amharic
morphology, detailed information can be found in
(Bender, 1968), (Bender and Fulas, 1978), (Yimam,
1995).
We have constructed 65 rules based on the entire
Amharic morphology for the purpose of this study.
The rules vary from simple affixation rules to each
word category to allowed combinations of prefixes
and suffixes for each word category and set of af-
fixes.
1C stands for consonants and V for vowels
106
5 Resources
5.1 The Corpora
We have utilized three different sources of text
for the development of the stemmer and the ex-
periments. The first is a collection of news ar-
ticles from an online news repository, Ethiopian
News Headlines (ENH), which is available at
http://www.ethiozena.net. This corpus consists of
3.1 million words of Amharic news text in a little
more than 10,000 articles. This corpus was used
to collect word frequency and prefix and suffix sta-
tistics i.e. the number of times an affix occurs at-
tached to a known stem, and the occurence sta-
tistics was used to disambiguate between alterna-
tive segmantations of a given word. The second
text source is another Ethiopian news agency, Walta
Information Center (WIC) which can be found at
http://www.waltainfo.com. We used news items
downloaded from WIC to evaluate the stemmer on
independent news texts from another source. The
third text, which was also used for evaluation, is
from the Amharic novel ?Fikir Iske Meqabir? (FIM)
by the renowned Ethiopian author Dr. Hadis Ale-
mayehu. This text (FIM) was selected for the eval-
uation in order to see how well the stemmer would
perform on a text that differed substantially in style
from the news collection.
5.2 The Dictionaries
The simplest and most straight forward way for the
stemmer to verify that a suggested segmentation is
correct is to try to look up the stem in a dictionary.
For this purpose we used three different dictionar-
ies, an Amharic - English, an Amharic - French, and
an Amharic - Amharic dictionary. The Amharic -
English dictionary, by Dr. Amsalu Aklilu, contains
15 000 Amharic words with their English transla-
tions (Aklilu, 1981). The Amharic - French dic-
tionary (Abebe, 2004) has 12 000 Amharic entries
while the Amharic - Amharic dictionary by Kesatie
Birhan has 56 000 entries (Tesema, ). All three
dictionaries were made available to us in electronic
form, transliterated to SERA and then merged and
represented in a form suitable for the stemmer.
5.3 Transliteration
The dictionaries and all Amharic news texts men-
tioned above are published using Ethiopic script and
using a variety of fonts, some of which are not Uni-
code compliant. In order to simplify the analysis
and to have a unified representation of the texts, we
transliterated all Amharic texts into SERA which is
a system for ASCII representation of Ethiopic char-
acters (Firdyiwek and Yacob, 1997).
The transliteration was done using a file conver-
sion utility called g2 which was made available to
us by Daniel Yacob of the Ge?ez Frontier Founda-
tion (http://www.ethiopic.org/).
6 The Stemmer
The stemmer first creates a list consisting of all
possible segmentations of the word that is to be
stemmed. In a second step, each such segmenta-
tion is then verified by matching each candidate stem
against the machine readable dictionary. If no stem
matches the dictionary, the stemmer will modfy the
stem and redo the matching. If more than one stem
matches, the most likely stem will be selected after
disambiguating between the candidate stems based
on statistical and other properties of the stems. In
the cases when exactly one stem matches the dictio-
nary then that segmentation will be presented as the
output from the stemmer.
6.1 Segmentation
For each new word the stemmer first creates a list
of possible segmentations by applying a list of mor-
phological rules for allowed prefixes and suffixes. In
this way, the word Indeminorewnawould for ex-
ample be segmented into the following 9 different
ways:
(1) Indeminorewna
(2) Indeminorew -na
(3) Indeminore -w -na
(4) Inde- minorewna
(5) Inde- minorew -na
(6) Inde- minore -w -na
(7) Inde- mi- norewna
(8) Inde- mi- norew -na
(9) Inde- mi- nore -w -na
107
For each of the 9 possible segmentations, the re-
maining stem is then matched against the (merged)
three dictionaries. In this case, the only one that is
found as entry in the dictionary is nore, so alterna-
tive 9 is selected as the most likely segmentation of
the word.
6.2 Disambiguation
If more than one of the candidate stems are matched
in the dictionary, those segmentations that have a
stem that matches an entry in the dictionary are
ranked according to length and frequency of the
stem. The longest stem that have a match in the
dictionary is selected and if more than one stem of
equal length matches the dictionary then the stem
that is more frequent is preferred before the less fre-
quent. The frequency score is based on how often
the stem occurs in the ENH corpus described above.
The word beteyazew would for example be seg-
mented in the following ways:
(1) beteyazew
(2) beteyaze -w
(3) beteyaz -e -w
(4) be- teyazew
(5) be- teyaze -w
(6) be- teyaz -e -w
(7) be- te- yazew
(8) be- te- yaze -w
(9) be- te- yaz -e -w
In this case the three stems teyaze (5), yaze
(8) and yaz (9) all have matching entries in the dic-
tionary but teyaze is selected as the most likely
stem since it is the longest.
6.3 Modification
For approximately 30% of the words, the stem does
not match the dictionary. In these cases, the stem
will be slightly modifed and a second attempt to
match the entries in the dictionary will be done. For
example the word IndegeleSut should correctly
be segmented into Inde- geleSe -u -t. With
the approach described so far, the segmentation
based on prefixes and suffixes would yield the stem
geleS which will not have a match in the dictio-
nary. Instead, for the dictionary lookup to succeed,
we first need to add the vowel e at the end of the
stem. For the word astawqWal which should cor-
rectly segment into astaweqe -W -al we will
first have to insert e both between w and q and again
after q to reach the correct form of the stem. This
process of modifying the stem by adding vowels, is
applied to the candidate stems if no matches by the
unmodifed stems are made in the dictionary. For
the current implementation of the stemmer, this is
done by inserting one of the vowels ?e? or ?a? be-
tween the consonants if the unmatched stem con-
tains two consecutive consonants, or after the last
consonant if the stem ends in a consonant. If exactly
one of the modifed stems will match the dictionary,
then that segmentation will be ranked as the most
likely. If more than one modifed stem matches, then
the longest will be selected. For the words where
this modification of the stem is done, approximately
30% will successfully match their correct entry in
the dicionary while 20% make an incorrect match
and the remaining 50% will not match the dictionary
at all.
6.4 Out-of-dictionary terms
Finally, the approximately 15% of the words that do
not have any stem that matches entries in the dic-
tionary (even after the modifiaction) will be ranked
according to the length of the stem and the number
of times that the stem occurs in the ENH corpus. In
this case, it is the shorter stems that are preferred.
For example the word bekomixnu will have four
possible segmentations, none of which occurs in the
dictionary.
(1) bekomixnu
(2) bekomixn -u
(3) be- komixnu
(4) be- komixn -u
In this case, alternative 4, komixn is the short-
est stem that occurs as a unique word in the ref-
erence corpus and is therefor selected as the most
likely segmentation before either one of the alterna-
tive stems bekomixnu, bekomixn or komixnu.
108
7 Experimental Evaluation
In order to evaluate the performance of the stem-
mer, we selected the first 1503 words (= 1000 unique
words) from the WIC corpus described above. We
also selected a 470 words long text from the book
?Fikir Iske Meqabir? to get a text with 300 unique
words.
On the WIC data the stemmer had an overall ac-
curay of 76.9 %. For 48 % of the words, the stem-
mer found exactly one segmentation with a stem that
was matching the dictionary, and for these words
it had an accuracy of 83.75 %. For 36.3 % of the
words, the stemmer found more than one segmenta-
tion that matched the dictionary and therefor needed
to do additional disambiguation between alternative
segmentations. For these words, the stemmer had
an accuracy of 69.1 %. For the remaining 15.7 % of
the words, the stemmer found no match in the dictio-
nary for any of the possible segmentations. For these
words the stemmer had an accuracy of 73.9 %. In
the cases when there is only one match in the dictio-
nary, the extra sources for error that are introduced
by having to disambiguate between alternative seg-
mentations are avoided and hence the stemmer has
best accuracy for those words that have exactly one
segmentation with a stem that will match the dictio-
nary.
For the 300 unique words from Fikir Iske
Meqabir, the stemmer had an overall accuracy of
60.0 % In a similar fashion as for the WIC data, the
stemmer performed best on the subset of words for
which there was exacly one match in the dictionary.
For this group the performance was 68.8 % correct
but the overall accuracy was lowered by the fact that
the stemmer performed worse on the words that had
either more than one match, or no match at all in the
dictionary. These numbers were 54.8 % and 42.1 %
respectively.
8 Conclusion
We have presented the design and development of
an Amharic stemmer which reduces words to their
citation forms for the purpose of dictionary lookup
in CLIR. Given the resource constraints we have,
and the specificity of the stemmer, the overall per-
formance could be acceptable, but needs further im-
provment. The stemming depends highly on word
entries in the three MRDs for verification purposes.
These MRDs altogether consist of a limitted amount
of entries, overall 83000, with a very high level of
overlap, leaving 47176 unique entries. Although it is
not the largest source of error, it accounts for around
15% of the words segmentation decided on corpus
statististics only since they are not found in the dic-
tionaries. We intend to use more dictionaries with
the assumption that there will be a performance in-
crease with the increasing number of citation forms
to refer to. On the other hand, increasing the amount
of citation forms also will increase the percentage
of words that will have more than one match in the
dictionaries. That would lead us to focus on the dis-
ambiguation strategy in the future. So long as the
morphological rule exists, we are able to get the cor-
rect segmentation for a word in a possible segmen-
tations list. And when we have two or more likely
segmentations that are picked out since they have
matching stems in dictionaries, we need to design a
smarter way of disambiguation that would take into
account contextual information and part of speech
tags, etc, in addition to the currently used occurence
frequency approach.
Although conducting a full fledged morphological
analyser for Amharic is beyond the scope of this pa-
per, we would like to note that there is a need to cre-
ate a forum for collaboration and exchange among
researchers involved in developing NLP resources
for Amharic and other Semitic languages and orga-
nize the considerable effort that is being made indi-
vidually. We also hope that some of the ideas and
procedures that are described in this paper could
be more generally applicable to other Semitic lan-
guages as well.
Acknowledgements
The copyright to the two volumes of the French-
Amharic and Amharic-French dictionary (?Dic-
tionnaire Francais-Amharique? and ?Dictionnaire
Amharique-Francais?) by Dr Berhanou Abebe and
Eloi Fiquet is owned by the French Ministry of For-
eign Affairs. We would like to thank the authors and
the French embassy in Addis Ababa for allowing us
to use the dictionary in this research.
The content of the ?English - Amharic Dictio-
nary? is the intellectual property of Dr Amsalu
109
Aklilu. We would like to thank Dr Amsalu as well
as Daniel Yacob of the Geez frontier foundation for
making it possible for us to use the dictionary and
other resources in this work.
We would also like to thank Ato Negash of Walta
Information Center for allowing us to use part of
their news texts in this research.
References
Berhanou Abebe. 2004. Dictionnaire Amharique-
Francais. Shama Books, Addis Ababa, Ethiopia.
Sisay Fissaha Adafre. 2005. Part of speech tagging for
amharic using conditional random fields. In Proceed-
ings of ACL-2005 Workshop on Computational Ap-
proaches to Semitic Languages.
Amsalu Aklilu. 1981. Amharic - English Dictionary.
Mega Publishing Enterprise, Ethiopia.
Nega Alemayehu and Peter Willett. 2002. The effective-
ness of stemming for information retrieval in amharic.
In Short Communication.
Saba Amsalu and Dafydd Gibbon. 2005. Finite state
morphology of amharic. In Proceedings of RANLP.
Abiyot Bayou. 2000. Design and development of word
parser for amharic language. Masterthesis, Addis
Abeba Univeristy.
Tesfaye Bayu. 2002. Automatic morphological analyser:
An experiment using unsupervised and autosegmental
approach. Masterthesis, Addis Ababa University.
M. Lionel Bender and Hailu Fulas. 1978. Amharic verb
morphology. In East Lansing: Michigan State Univer-
sity, African Studies Center.
M. Lionel Bender. 1968. Amharic Verb Morphology: A
Generative Approach. Ph.D. thesis, Graduate School
of Texas.
Yitna Firdyiwek and Daniel Yacob. 1997. System for
ethiopic representation in ascii.
Sisay Fissaha and Johann Haller. 2003. Amharic verb
lexicon in the context of machine translation. In Actes
de la 10e conference TALN, Batz-sur-Mer.
Kesatie Birhan Tesema. YeAmarinja Mezgebe Qalat.
Adis Abeba.
Baye Yimam. 1995. ye amargna sewasew (Amharic
Grammar). EMPDA.
110
