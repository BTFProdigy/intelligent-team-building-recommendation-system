Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 175?180,
Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics
TransDoop: A Map-Reduce based Crowdsourced Translation for
Complex Domains
Anoop Kunchukuttan?, Rajen Chatterjee?, Shourya Roy?, Abhijit Mishra?,
Pushpak Bhattacharyya?
? Department of Computer Science and Engineering, IIT Bombay,
{anoopk,abhijitmishra,pb}@cse.iitb.ac.in, rajen.k.chatterjee@gmail.com
? Xerox India Research Centre,
Shourya.Roy@xerox.com
Abstract
Large amount of parallel corpora is re-
quired for building Statistical Machine
Translation (SMT) systems. We describe
the TransDoop system for gathering trans-
lations to create parallel corpora from on-
line crowd workforce who have familiar-
ity with multiple languages but are not
expert translators. Our system uses a
Map-Reduce-like approach to translation
crowdsourcing where sentence translation
is decomposed into the following smaller
tasks: (a) translation of constituent phrases
of the sentence; (b) validation of qual-
ity of the phrase translations; and (c)
composition of complete sentence trans-
lations from phrase translations. Trans-
Doop incorporates quality control mech-
anisms and easy-to-use worker user in-
terfaces designed to address issues with
translation crowdsourcing. We have eval-
uated the crowd?s output using the ME-
TEOR metric. For a complex domain like
judicial proceedings, the higher scores ob-
tained by the map-reduce based approach
compared to complete sentence translation
establishes the efficacy of our work.
1 Introduction
Crowdsourcing is no longer a new term in the do-
main of Computational Linguistics and Machine
Translation research (Callison-Burch and Dredze,
2010; Snow et al, 2008; Callison-Burch, 2009).
Crowdsourcing - basically where task outsourcing
is delegated to a largely unknown Internet audi-
ence - is emerging as a new paradigm of human
in the loop approaches for developing sophisti-
cated techniques for understanding and generat-
ing natural language content. Amazon Mechanical
Turk(AMT) and CrowdFlower 1 are representative
general purpose crowdsourcing platforms where
as Lingotek and Gengo2 are companies targeted
at localization and translation of content typically
leveraging freelancers.
Our interest is towards developing a crowd-
sourcing based system to enable general, non-
expert crowd-workers generate natural language
content equivalent in quality to that of expert lin-
guists. Realization of the potential of attaining
great scalability and cost-benefit of crowdsourcing
for natural language tasks is limited by the abil-
ity of novice multi-lingual workers generate high
quality translations. We have specific interest in
Indian languages due to the large linguistic diver-
sity as well as the scarcity of linguistic resources in
these languages when compared to European lan-
guages. Crowdsourcing is a promising approach
as many Indian languages are spoken by hundreds
of Millions of people (approximately, Hindi-Urdu
by 500M, Bangla by 200M, Punjabi by over 100M
3) coupled with the fact that representation of In-
dian workers in online crowdsourcing platforms is
very high (close to 40% in Amazon Mechanical
Turk (AMT)).
However, this is a non-trivial task owing to lack
of expertise of novice crowd workers in transla-
tion of content. It is well understood that famil-
iarity with multiple languages might not be good
enough for people to generate high quality transla-
tions. This is compounded by lack of sincerity and
in certain cases, dishonest intention of earning re-
wards disproportionate to the effort and time spent
for online tasks. Common techniques for quality
control like gold data based validation and worker
reputation are not effective for a subjective task
1http://www.mturk.com,http://www.
crowdflower.com
2http://www.lingotek.com,http:///www.
gengo.com
3http://en.wikipedia.org/wiki/List_of_
languages_by_total_number_of_speakers
175
like translation which does not have any task spe-
cific measurements. Having expert linguists man-
ually validate crowd generated content defies the
purpose of deploying crowdsourcing on a large
scale.
In this work, we propose a technique, based
on the Divide-and-Conquer principle. The tech-
nique can be considered similar to a Map-Reduce
task run on crowd processors, where the transla-
tion task is split into simpler tasks distributed to
the crowd (the map stage) and the results are later
combined in a reduce stage to generate complete
translations. The attempt is to make translation
tasks easy and intuitive for novice crowd-workers
by providing translations aids to help them gen-
erate high quality of translations. Our contribu-
tion in this work is a end-to-end, crowdsourcing-
platform-independent, translation crowdsourcing
system that completely automates the translation
crowdsourcing task by (i) managing the transla-
tion pipeline through software components and the
crowd; (ii) performing quality control on work-
ers? output; and (iii) interfacing with crowdsourc-
ing service providers. The multi-stage, Map-
reduce approach simplifies the translation task for
crowd workers, while novel design of user inter-
face makes the task convenient for the worker and
discourages spamming. The system thus offers the
potential to generate high quality parallel corpora
on a large scale.
We discuss related work in Section 2 and the
multi-staged approach which is central to our sys-
tem in Section 3. Section 4 describes the sys-
tem architecture and workflow, while Section 5
presents important aspects of the user interfaces
in the system. We present our preliminary exper-
iments and observations in Section 6. Section 7
concludes the paper, pointing to future directions.
2 Related Work
Lately, crowdsourcing has been explored as a
source for generating data for NLP tasks (Snow
et al, 2008; Callison-Burch and Dredze, 2010).
Specifically, it has been explored as a channel for
collecting different resources for SMT - evalua-
tions of MT output (Callison-Burch, 2009), word
alignments in parallel sentences (Gao et al, 2010)
and post-edited versions of MT output (Aikawa et
al., 2012). Ambati and Vogel (2010), Kunchukut-
tan et al (2012) have shown the feasibility of
crowdsourcing for collecting parallel corpora and
pointed out that quality assurance is a major issue
for successful translation crowdsourcing.
The most popular methods for quality control
of crowdsourced tasks are based on sampling and
redundancy. For translation crowdsourcing, Am-
bati et al (2010) use inter-translator agreement for
selection of a good translation from multiple, re-
dundant worker translations. Zaidan and Callison-
Burch (2011) score translations using a feature
based model comprising sentence level, worker
level and crowd ranking based features. However,
automatic evaluation of translation quality is diffi-
cult, such automatic methods being either inaccu-
rate or expensive. Post et al (2012) have collected
Indic language corpora data utilizing the crowd for
collecting translations as well as validations. The
quality of the validations is ensured using gold-
standard sentence translations. Our approach to
quality control is similar to Post et al (2012), but
we work at the level of phrases.
While most crowdsourcing activities for data
gathering has been concerned with collecting sim-
ple annotations like relevance judgments, there has
been work to explore the use of crowdsourcing
for more complex tasks, of which translation is
a good example. Little et al (2010) propose that
many complex tasks can be modeled either as iter-
ative workflows (where workers iteratively build
on each other?s works) or as parallel workflows
(where workers solve the tasks in parallel, with the
best result voted upon later). Kittur et al (2011)
suggest a map-and-reduce approach to solve com-
plex problems, where a problem is decomposed
into smaller problems, which are solved in the map
stage and the results are combined in the reduce
stage. Our method can be seen as an instance
of the map-reduce approach applied to translation
crowdsourcing, with two map stages (phrase trans-
lation and translation validation) and one reduce
stage (sentence combination).
3 Multi-Stage Crowdsourcing Pipeline
Our system is based on a multi-stage pipeline,
whose central idea is to simplify the translation
task into smaller tasks. The high level block di-
agram of the system is shown in Figure 1. Source
language documents are sentencified using stan-
dard NLP tokenizers and sentence splitters. Ex-
tracted sentences are then split into phrases us-
ing a standard chunker and rule-based merging
of small chunks. This step creates small phrases
176
Figure 1: Multistage crowdsourced translation
from complex sentences which can be easily and
independently translated. This leads to a crowd-
sourcing pipeline, with three stages of tasks for the
crowd: Phrase Translation (PT), Phrase Transla-
tion Validation (PV), Sentence Composition (SC).
A group of crowd workers translate source lan-
guage phrases, the translations are validated by a
different group of workers and finally a third group
of workers put the phrase translation together to
create target language sentences. The validation
is done by workers by providing ratings on a k-
point scale. This kind of divide and conquer ap-
proach helps to tackle the complexity of crowd-
sourcing translations since: (1) the tasks are sim-
pler for workers; (2) uniformity of smaller tasks
brings about efficiency as in any industrial assem-
bly line; (3) pricing can be controlled for each
stage depending on the complexity; and (4) quality
control can be performed better for smaller tasks.
4 System Architecture
Figure 2 shows the architecture of TransDoop,
which implements the 3-stage pipeline. The major
design considerations were: (i) translation crowd-
sourcing pipeline should be independent of spe-
cific crowdsourcing platforms; (ii) support multi-
ple crowdsourcing platforms; (iii) customize job
parameters like pricing, quality control method
and task design; and (iv) support multiple lan-
guages and domains.
The core component in the system is the
Crowdsourcing Engine. The engine manages the
execution of the crowdsourcing pipeline, lifecycle
of jobs and quality control of submitted tasks. The
Engine exposes its capabilities through the Re-
quester API, which can be used by clients for
setting up, customizing and monitoring transla-
tion crowdsourcing jobs and controlling their exe-
cution. These capabilities are made available to
requesters via the Requester Portal. In order
to make the crowdsourcing engine independent
of any specific crowdsourcing platform, platform
specific Connectors are developed. The Crowd-
sourcing system makes the tasks to be crowd-
sourced available through the Connector API.
The connectors are responsible for polling the en-
gine for tasks to be crowdsourced, pushing the
tasks to crowdsourcing platforms, hosting worker
interfaces for the tasks and pushing the results
back to the engine after they have been completed
by workers on the crowdsourcing platform. Cur-
rently the system supports the AMT crowdsourc-
ing platform.
Figure 3 depicts the lifecycle of a translation
crowdsourcing job. The requester initiates a trans-
lation job for a document (a set of sentences). The
Crowdsourcing Engine schedules the job for exe-
cution. It first splits each sentence into phrases.
For the job, PT tasks are created and made avail-
able through the Connector API. The connector
for the specified platform periodically polls the
Crowdsourcing Engine via the Connector API.
Once the connector has new PT tasks for crowd-
sourcing, it interacts with the crowdsourcing plat-
form to request crowdsourcing services. The con-
nector monitors the progress of the tasks and on
completion provides the results and execution sta-
tus to the Crowdsourcing Engine. Once all the PT
tasks for the job are completed, the crowdsourcing
Engine initiates the PV task to obtain validations
for the translations. The Quality Control system
kicks in when all the PV tasks for the job have
been completed.
The quality control (QC) relies on a combina-
tion of sampling and redundancy. Each PV task
has a few gold-standard phrase translation pairs,
which is used to ensure that the validators are hon-
estly doing their tasks. The judgments from the
177
Figure 2: Architecture of TransDoop
Figure 3: Lifecycle of a Translation Job
good validators are used to determine the quality
of the phrase translation, based on majority voting,
average rating, etc. using multiple judgments col-
lected for each phrase translation. If any phrase
validations or translations are incorrect, then the
corresponding phrases/translations are again sent
to the PT/PV stage as the case may be. This will
continue until all phrase translations in the job are
correctly translated or a pre-configured number of
iterations are done.
Once phrase translations are obtained for all
phrases in a sentence, the Crowdsourcing Engine
creates SC tasks, where the workers are asked
to compose a single correct, coherent translation
from the phrase translation obtained in the previ-
ous stages.
5 User Interfaces
5.1 Worker User Interfaces
This section describes the worker user interfaces
for each stage in the pipeline. These are man-
aged by the Connector and have been designed to
make the task convenient for the worker and pre-
vent spam submissions. In the rest of the section,
we describe the salient features of the PT and SC
UI?s. PV UI is similar to k-scale voting tasks com-
monly found in crowdsourcing platforms.
? Translation UI: Figure 4a shows the trans-
lation UI for the PT stage. The user in-
terface discourages spamming by: (a) dis-
playing source text as images; and (b) alert-
ing workers if they don?t provide a transla-
tion or spend very little time on a task. The
UI also provides transliteration support for
non-Latin scripts (especially helpful for Indic
scripts). A Vocabulary Support, which shows
translation suggestions for word sequences
appearing in the source phrase, is also avail-
able. Suggested translations can be copied to
the input area with ease and speed.
? Sentence Translation Composition UI: The
sentence translation composition UI (shown
in Figure 4b) facilitates composition of sen-
tence translations from phrase translations.
First, the worker can drag and rearrange the
translated phrases into the right order, fol-
lowed by reordering of individual words.
This is important because many Indian lan-
guages have different constituent order ( S-O-
V) with respect to English (S-V-O). Finally,
the synthesized language sentence can be
post-edited to correct spelling, case marking,
inflectional errors, etc. The system also cap-
tures the reordering performed by the worker,
an important byproduct, which can be used
for training reordering models for SMT.
5.2 Requester UI
The system provides a Requester Portal through
which the requester can create, control and mon-
itor jobs and retrieve results. The portal allows
the requester to customize the job during creation
by configuring various parameters: (a) domain
and language pair (b) entire sentence vs multi-
stage translation (c) price for task at each stage
(d) task design (number of tasks in a task group,
etc.) (e) translation redundancy (f) validation qual-
ity parameters. Translation redundancy refers to
the number of translations requested for a source
phrase. Validation redundancy refers to the num-
ber of validations collected for each phrase trans-
lation pair and the redundancy based acceptance
criteria for phrase translations (majority, consen-
sus, threshold, etc.)
178
(a) Phrase Translation UI (b) Sentence Composition UI
Figure 4: Worker User Interfaces
6 Experiments and Observations
Using TransDoop, we conducted a set of small-
scale, preliminary translation experiments. We ob-
tained translations for English-Hindi and English-
Marathi language pairs for the Judicial and
Tourism domains. For each experiment, 15 sen-
tences were given as input to the pipeline. For
evaluation, we chose METEOR, a well-known
translation evaluation metric (Banerjee and Lavie,
2005). We compared the results obtained from the
crowdsourcing system with a expert human trans-
lation and the output of Google Translate. We also
compared two expert translations using METEOR
to establish a skyline for the translation accuracy.
Table 1 summarizes the results of our experiments.
The translations with Quality Control and mul-
tistage pipeline are better than Google translations
and translations obtained from the crowd without
any quality control, as evaluated by METEOR.
Multi-stage translation yields better than complete
sentence translation. Moreover, the translation
quality is comparable to that of expert human
translation. This behavior is observed across the
two language pairs and domains. This can be seen
in some examples of crowdsourced translations
obtained through the system which are shown in
Table 2.
Incorrect splitting of sentences can cause diffi-
culties in translation for the worker. For instance,
discontinuous phrases will not be available to the
worker as a single translation unit. In the English
interrogative sentence, the noun phrase splits the
verb phrase, therefore the auxiliary and main verb
could be in different translation units. e.g.
Why did you buy the book?
In addition, the phrase structures of the source
and target languages may not map, making trans-
lation difficult. For instance, the vaala modifier in
Hindi translates to a clause in English. It does not
contain any tense information, therefore the tense
of the English clause cannot be determined by the
worker. e.g.
Lucknow vaalaa ladkaa
could translate to any one of:
the boy who lives/lived/is living in Lucknow
We rely on the worker in sentence composition
stage to correct mistakes due to these inadequacies
and compose a good translation. In addition, the
worker in the PT stage could be provided with the
sentence context for translation. However, there
is a tradeoff between the cognitive load of context
processing versus uncertainty in translation. More
elaborately, to what extent can the cognitive load
be reduced before uncertainty of translation sets
in? Similarly, how much of context can be shown
before the cognitive load becomes pressing?
7 Conclusions
In this system demonstration, we present Trans-
Doop as a translation crowdsourcing system which
has the potential to harness the strength of the
crowd to collect high quality human translations
on a large scale. It simplifies the tedious trans-
lation tasks by decomposing them into several
?easy-to-solve? subtasks while ensuring quality.
Our evaluation on small scale data shows that
the multistage approach performs better than com-
plete sentence translation. We would like to exten-
sively use this platform for large scale experiments
on more language pairs and complex domains like
Health, Parliamentary Proceedings, Technical and
Scientific literature etc. to establish the utility of
179
Language Pair Domain Google No QC Translation with QC Reference
Translate single stage multi stage Human
en-mr Tourism 0.227? 0.30 0.368 0.372 0.48
en-hi Tourism 0.292 0.363 0.387 0.422 0.51
en-hi Judicial 0.252 0.30 0.388 0.436 0.49
Table 1: Experimental Results: Comparison of METEOR scores for different techniques, language pairs and domains
?Translated by an internal Moses-based SMT system
Accordingly the penalty imposed by AO is not justified and the same is cancelled.
isk an  sAr e aO ?ArA lgAy gy d\X uEcta nhF\ h{ aOr ek hF r? kr EdyA h{
Accordingly A O by imposed penalty justified not is and one also cancel did
tadAn  sAr e ao ?ArA lgAyA gyA d\X jAy) nhF\ h{ aOr us r? kr EdyA h{
Accordingly A O by imposed penalty justified not is and that cancel did
(a) English-Hindi Judicial Translation
A crowd of devotees engulf Haridwar during the time of daily prayer in the evening
fAm m\ d{Enk ?ATnA k smy k dOrAn B?o\ ko apnF cpV m\ l hEr?Ar kF BFX
evening in daily prayer of time during devotees its engulf in take Haridwar of crowd
??Al  ao\ kF BFX fAm m\ d{Enk ?ATnA k smy hEr?Ar ko apnF cpV m\ ltaF h{
devotees of crowd evening in daily prayer of time haridwar its engulf in take
(b) English-Hindi Tourism Translation
Table 2: Examples of translation from Google and three
staged pipeline for source sentence (2nd, 3rd and 1st rows
of each table respectively). Domains and languages are indi-
cated above.
the method for collection of parallel corpora on a
large scale.
References
Takako Aikawa, Kentaro Yamamoto, and Hitoshi Isa-
hara. 2012. The impact of crowdsourcing post-
editing with the collaborative translation frame-
work. In Advances in Natural Language Processing.
Springer Berlin Heidelberg.
Vamshi Ambati and Stephan Vogel. 2010. Can crowds
build parallel corpora for machine translation sys-
tems? In Proceedings of the NAACL HLT 2010
Workshop on Creating Speech and Language Data
with Amazon?s Mechanical Turk.
Vamshi Ambati, Stephan Vogel, and Jaime Carbonell.
2010. Active learning and crowd-sourcing for ma-
chine translation. Language Resources and Evalua-
tion LREC.
Satanjeev Banerjee and Alon Lavie. 2005. Meteor: An
automatic metric for mt evaluation with improved
correlation with human judgments. In Proceed-
ings of the ACL Workshop on Intrinsic and Extrin-
sic Evaluation Measures for Machine Translation
and/or Summarization.
Chris Callison-Burch and Mark Dredze. 2010. Cre-
ating speech and language data with amazon?s me-
chanical turk. In Proceedings of the NAACL HLT
2010 Workshop on Creating Speech and Language
Data with Amazon?s Mechanical Turk.
Chris Callison-Burch. 2009. Fast, cheap, and cre-
ative: evaluating translation quality using amazon?s
mechanical turk. In Proceedings of the 2009 Con-
ference on Empirical Methods in Natural Language
Processing.
Qin Gao, Nguyen Bach, and Stephan Vogel. 2010. A
semi-supervised word alignment algorithm with par-
tial manual alignments. In Proceedings of the Joint
Fifth Workshop on Statistical Machine Translation
and MetricsMATR.
Aniket Kittur, Boris Smus, Susheel Khamkar, and
Robert E Kraut. 2011. Crowdforge: Crowdsourc-
ing complex work. In Proceedings of the 24th an-
nual ACM symposium on User interface software
and technology.
Anoop Kunchukuttan, Shourya Roy, Pratik Patel,
Kushal Ladha, Somya Gupta, Mitesh Khapra, and
Pushpak Bhattacharyya. 2012. Experiences in re-
source generation for machine translation through
crowdsourcing. Language Resources and Evalua-
tion LREC.
Greg Little, Lydia B Chilton, Max Goldman, and
Robert C Miller. 2010. Exploring iterative and par-
allel human computation processes. In Proceedings
of the ACM SIGKDD workshop on human computa-
tion.
Matt Post, Chris Callison-Burch, and Miles Osborne.
2012. Constructing parallel corpora for six indian
languages via crowdsourcing. In Proceedings of the
Seventh Workshop on Statistical Machine Transla-
tion.
Rion Snow, Brendan O?Connor, Daniel Jurafsky, and
Andrew Y. Ng. 2008. Cheap and fast?but is it
good?: evaluating non-expert annotations for natural
language tasks. In Proceedings of the Conference on
Empirical Methods in Natural Language Process-
ing.
Omar Zaidan and Chris Callison-Burch. 2011. Crowd-
sourcing translation: Professional quality from non-
professionals. In Proceedings of the NAACL HLT
2010 Workshop on Creating Speech and Language
Data with Amazon?s Mechanical Turk.
180
Proceedings of the Seventeenth Conference on Computational Natural Language Learning: Shared Task, pages 82?87,
Sofia, Bulgaria, August 8-9 2013. c?2013 Association for Computational Linguistics
IITB System for CoNLL 2013 Shared Task: A Hybrid Approach to
Grammatical Error Correction
Anoop Kunchukuttan Ritesh Shah Pushpak Bhattacharyya
Department of Computer Science and Engineering, IIT Bombay
{anoopk,ritesh,pb}@cse.iitb.ac.in
Abstract
We describe our grammar correction sys-
tem for the CoNLL-2013 shared task.
Our system corrects three of the five er-
ror types specified for the shared task -
noun-number, determiner and subject-verb
agreement errors. For noun-number and
determiner correction, we apply a classi-
fication approach using rich lexical and
syntactic features. For subject-verb agree-
ment correction, we propose a new rule-
based system which utilizes dependency
parse information and a set of conditional
rules to ensure agreement of the verb
group with its subject. Our system ob-
tained an F-score of 11.03 on the official
test set using the M2 evaluation method
(the official evaluation method).
1 Introduction
Grammatical Error Correction (GEC) is an inter-
esting and challenging problem and the existing
methods that attempt to solve this problem take
recourse to deep linguistic and statistical analy-
sis. In general, GEC may partly assist in solv-
ing natural language processing (NLP) tasks like
Machine Translation, Natural Language Genera-
tion etc. However, a more evident application of
GEC is in building automated grammar checkers
thereby benefiting non-native speakers of a lan-
guage. The CoNLL-2013 shared task (Ng et al,
2013) looks at improving the current approaches
for GEC and for inviting novel perspectives to-
wards solving the same. The shared task makes
the NUCLE corpus (Dahlmeier et al, 2013) avail-
able in the public domain and participants have
been asked to correct grammatical errors belong-
ing to the following categories: noun-number,
determiner, subject-verb agreement (SVA), verb
form and preposition. The key challenges are han-
dling interaction between different error groups
and handling potential mistakes made by off-the-
shelf NLP components run on erroneous text.
For the shared task, we have addressed the fol-
lowing problems: noun-number, determiner and
subject-verb agreement correction. For noun-
number and determiner correction, we use a clas-
sification based approach to predict corrections
- which is a widely used approach (Knight and
Chander, 1994; Rozovskaya and Roth, 2010). For
subject-verb agreement correction, we propose a
new rule-based approach which applies a set of
conditional rules to correct the verb group to en-
sure its agreement with its subject. Our system
obtained a score of 11.03 on the official test set
using the M2 method. Our SVA correction sys-
tem performs very well with a F-score of 28.45 on
the official test set.
Section 2 outlines our approach to solving the
grammar correction problem. Sections 3, 4 and
5 describe the details of the noun-number, deter-
miner and SVA correction components of our sys-
tem. Section 6 explains our experimental setup.
Section 7 discusses the results of the experiments
and Section 8 concludes the report.
2 Problem Formulation
In this work, we focus on correction of three
error categories related to nouns: noun-number,
determiner and subject-verb agreement. The
number of the noun, the choice of determiner and
verb?s agreement in number with the subject are
clearly inter-related. Therefore, a coordinated
approach is necessary to correct these errors. If
these problems are solved independently of each
other, wrong corrections may be generated. The
following are some examples:
Erroneous sentence
A good workmen does not blame his tools
Good corrections
A good workman does not blame his tools
Good workmen do not blame his tools
82
noun-number
subject-verb agreement determiner
Figure 1: Dependencies between the noun-
number, determiner and subject-verb agreement
errors
Bad corrections
A good workman do not blame his tools
Good workman does not blame his tools
The choice of noun-number is determined by
the discourse and meaning of the text. The choice
of determiner is partly determined by the noun-
number, whereas the verb?s agreement depends
completely on the number of its subject. Fig-
ure 1 shows the proposed dependencies between
the number of a noun, its determiner and num-
ber agreement with the verb for which the noun
is the subject. Assuming these dependencies, we
first correct the noun-number. The corrections to
the determiner and the verb?s agreement with the
subject are done taking into consideration the cor-
rected noun. The noun-number and determiner are
corrected using a classification based approach,
whereas the SVA errors are corrected using a rule-
based system; these are described in the following
sections.
3 Noun Number Correction
The major factors which determine the number
of the noun are: (i) the intended meaning of the
text, (ii) reference to the noun earlier in the dis-
course, and (iii) stylistic considerations. Gram-
matical knowledge is insufficient for determining
the noun-number, which requires a higher level of
natural language processing. For instance, con-
sider the following examples:
(1) I bought all the recommended books. These
books are costly.
(2) Books are the best friends of man.
In Example (1), the choice of plural noun in the
second sentence is determined by a reference to
the entity in the previous sentence. Example (2) is
a general statement about a class of entities, where
the noun is generally a plural. Such phenomena
make noun-number correction a difficult task. As
information at semantic and discourse levels is dif-
ficult to encode, we explored lexical and syntactic
Tokens, POS and chunk tags in
?2 word-window around the noun
Is the noun capitalized ?
Is the noun an acronym ?
Is the noun a named entity?
Is the noun a mass noun, pluralia tantum?
Does the noun group have an article/
demonstrative/quantifier?
What article/demonstrative/quantifier does
the noun phrase have ?
Are there words indicating plurality in
the context of the noun?
The first two words of the sentence
and their POS tags
The number of the verb for which this noun
is the subject
Grammatical Number of majority of nouns
in noun phrase conjunction
Table 1: Feature set for noun-number correction
information to obtain cues about the number of the
noun. The following is a summary of the cues we
have investigated:
Noun properties: Is the noun a mass noun, a plu-
ralia tantum, a named entity or an acronym?
Lexical context: The presence of a plurality indi-
cating word in the context of the noun (e.g. the
ancient scriptures such as the Vedas, Upanishads,
etc.)
Syntactic constraints:
? Nouns linked by a conjunction agree with
each other (e.g. The pens, pencils and books).
? Presence/value of the determiner in the noun
group. However, this is only a secondary cue,
since it is not possible to determine if it is the
determiner or the noun-number that is incor-
rect (e.g. A books).
? Agreement with the verb of which the noun is
the subject. This is also a secondary feature.
Given that we are dealing with erroneous text,
these cues could themselves be wrong. The prob-
lem of noun-number correction is one of mak-
ing a prediction based on multiple cues in the
face of such uncertainty. We model the prob-
lem as a binary classification problem, the task
being to predict if the observed noun-number
of every noun in the text needs correction (la-
bels: requires correction/no correction). Alterna-
83
tively, we could formulate the problem as a sin-
gular/plural number prediction problem, which
would not require annotated learner corpora text.
However, we prefer the former approach since we
can learn corrections from learner corpora text (as
opposed to native speaker text) and use knowledge
of the observed number for prediction. Use of ob-
served values has been shown to be beneficial for
grammar correction (Rozovskaya and Roth, 2010;
Dahlmeier and Ng, 2011).
If the model predicts requires correction, then
the observed number is toggled to obtain the cor-
rected noun-number. In order to bias the system
towards improved precision, we apply the correc-
tion only if classifier?s confidence score for the re-
quires correction prediction exceeds its score for
the no correction prediction by at least a threshold
value. This threshold value is determined empiri-
cally. The feature set designed for the classifier is
shown in Table 1.
4 Determiner Correction
Determiners in English consist of articles, demon-
stratives and quantifiers. The choice of deter-
miners, especially articles, depends on many fac-
tors including lexical, syntactic, semantic and dis-
course phenomena (Han et al, 2006). Therefore,
the correct usage of determiners is difficult to mas-
ter for second language learners, who may (i) in-
sert a determiner where it is not required, (ii) omit
a required determiner, or (iii) use the wrong de-
terminer. We pose the determiner correction prob-
lem as a classification problem, which is a well
explored method (Han et al, 2006; Dahlmeier and
Ng, 2011). Every noun group is a training in-
stance, with the determiner as the class label. Ab-
sence of a determiner is indicated by a special
class label NO DET. However, since the number
of determiners is large, a single multi-class classi-
fier will result in ambiguity. This ambiguity can
be reduced by utilizing of the fact that a partic-
ular observed determiner is replaced by one of a
small subset of all possible determiners (which we
call its confusion set). For instance, the confu-
sion set for a is {a, an, the, NO DET}. It is un-
likely that a is replaced by any other determiner
like this, that, etc. Rozovskaya and Roth (2010)
have used this method for training preposition cor-
rection systems, which we adopt for training a de-
terminer correction system. For each observed de-
terminer, we build a classifier whose prediction is
Description Path
1 Direct subject
verb
nounnsubj
verb
nounnsubjpass
2 Path through Wh-determiner
noun
wh-determiner
ref verbrcmodnsubj
3 Clausal subject
verb
nouncsubj
verb
nouncsubjpass
4 External subject
verb_1
nounnsubj
verb_2xsubjtoaux
5 Path through copula
verb
subj_complementcop
nounnsubj
6 Subject in a different clause
verb_1
verb_3 conjconjunctioncc nounnsubj verb_2conj
7 Multiple subjects
noun_1
noun_2 conjnoun_3conj conjunctioncc
verbnsubj
Table 2: Some rules from the singular-
ize verb group rule-set
limited to the confusion set of the observed deter-
miner. The confusion sets were obtained from the
training corpus. The feature set is almost the same
as the one for noun-number correction. The only
difference is that context window features (token,
POS and chunk tags) are taken around the deter-
miner instead of the noun.
5 Subject-Verb Agreement
The task in subject-verb agreement correction is to
correct the verb group components so that it agrees
with its subject. The correction could be made
either to the verb inflection (He run ? He runs)
or to the auxiliary verbs in the verb group (He
are running ? He is running). We assume that
noun-number and verb form errors (tense, aspect,
modality) do not exist or have already been cor-
rected. We built a rule-based system for perform-
ing SVA correction, whose major components are
(i) a system for detecting the subject of a verb, and
84
(ii) a set of conditional rules to correct the verb
group.
We use a POS tagger, constituency parser and
dependency parser for obtaining linguistic infor-
mation (noun-number, noun/verb groups, depen-
dency paths) required for SVA correction. Our as-
sumption is that these NLP tools are reasonably
robust and do a good analysis when presented with
erroneous text. We have used the Stanford suite of
tools for the shared task and found that it makes
few mistakes on the NUCLE corpus text.
The following is our proposed algorithm for
SVA correction:
1. Identify noun groups in a sentence and the in-
formation associated with each noun group:
(i) number of the head noun of the noun
group, (ii) associated noun groups, if the
noun group is part of a noun phrase conjunc-
tion, and (iii) head and modifier in each noun
group pair related by the if relation.
2. Identify the verb groups in a sentence.
3. For every verb group, identify its subject as
described in Section 5.1.
4. If the verb group does not agree in number
with its subject, correct each verb group by
applying the conditional rules described in
Section 5.2.
5.1 Identifying the subject of the verb
We utilize dependency relations (uncollapsed) ob-
tained from the Stanford dependency parser to
identify the subject of a verb. From analysis of de-
pendency graphs of sentences in the NUCLE cor-
pus, we identified different types of dependency
paths between a verb and its subject, which are
shown in Table 2. Given these possible depen-
dency path types, we identify the subject of a verb
using the following procedure:
? First, check if the subject can be reached us-
ing a direct dependency path (paths (1), (2),
(3) and (4))
? If a direct relation is not found, then look for
a subject via path (5)
? If the subject has not been found in the previ-
ous step, then look for a subject via path (6)
A verb can have multiple subjects, which can be
identified via dependency path (7).
Rule Condition Action
1 ?w ? vg, pos tag(w) = MD Do nothing
2 ?w ? vg, pos tag(w) = TO Do nothing
3 subject(vg) 6= I Replace are by is
4 subject(vg) = I Replace are by am
5 do, does /? vg ? subject(vg) 6= I Replace have by has
6 do, does /? vg ? subject(vg) = I Replace has by have
Table 3: Some rules from the singular-
ize verb group rule-set
w is a word, vg is a verb group, POS tags are from the Penn
tagset
5.2 Correcting the verb group
For correcting the verb group, we have two sets of
conditional rules (singularize verb group and plu-
ralize verb group). The singularize verb group
rule-set is applied if the subject is singular,
whereas the pluralize verb group rule-set is ap-
plied if the subject is plural or if there are multi-
ple subjects (path (7) in Table 2). For verbs which
have subjects related via dependency paths (3) and
(4) no correction is done.
The conditional rules utilize POS tags and lem-
mas in the verb group to check if the verb group
needs to be corrected and appropriate rules are ap-
plied for each condition. Some rules in the sin-
gularize verb group rule-set are shown in Table 3.
The rules for the pluralize verb group rule-set are
analogous.
6 Experimental Setup
Our training data came from the NUCLE corpus
provided for the shared task. The corpus was
split into three parts: training set (55151 sen-
tences), threshold tuning set (1000 sentences) and
development test set (1000 sentences). In addi-
tion, evaluation was done on the official test set
(1381 sentences). Maximum Entropy classifiers
were trained for noun-number and determiner cor-
rection systems. In the training set, the number
of instances with no corrections far exceeds the
number of instances with corrections. Therefore,
a balanced training set was created by including
all the instances with corrections and sampling
? instances with no corrections from the training
set. By trial and error, ? was determined to be
10000 for the noun-number and determiner cor-
rection systems. The confidence score threshold
which maximizes the F-score was calibrated on
the tuning set. We determined threshold = 0
85
Task
Development test set Official test set
P R F-1 P R F-1
Noun Number 31.43 40 35.2 28.47 9.84 14.66
Determiner 35.59 17.5 23.46 21.43 1.3 2.46
SVA 16.67 23.42 19.78 29.57 27.42 28.45
Integrated 29.59 17.24 21.79 28.18 4.99 11.03
Table 4: M2 scores for IIT Bombay correction system: component-wise and integrated
for the noun-number and the determiner correction
systems.
The following tools were used in the devel-
opment of the system for the shared task: (i)
NLTK (MaxEntClassifier, Wordnet lemmatizer),
(ii) Stanford tools - POS Tagger, Parser and NER
and Python interface to the Stanford NER, (iii)
Lingua::EN::Inflect module for noun and verb plu-
ralization, and (iv) Wiktionary list of mass nouns,
pluralia tantum.
7 Results and Discussion
Table 4 shows the results on the test set (de-
velopment and official) for each component of
the correction system and the integrated system.
The evaluation was done using the M2 method
(Dahlmeier and Ng, 2012). This involves comput-
ing F1 measure between a set of proposed system
edits and a set of human-annotated gold-standard
edits. However, evaluation is complicated by the
fact that there may be multiple edits which gen-
erate the same correction. The following example
illustrates this behaviour:
Source: I ate mango
Hypothesis: I ate a mango
The system edit is ? a, whereas the gold stan-
dard edit is mango?a mango. Though both the
edits result in the same corrected sentence, they do
not match. The M2 algorithm resolves this prob-
lem by providing an efficient method to detect the
sequence of phrase-level edits between a source
sentence and a system hypothesis that achieves the
highest overlap with the gold-standard annotation.
It is clear that the low recall of the noun-number
and determiner correction components have re-
sulted in a low overall score for the system. This
underscores the difficulty of the two problems.
The feature sets seem to have been unable to cap-
ture the patterns determining the noun-number and
determiner. Consider a few examples, where the
evidence for correction look strong:
1. products such as RFID tracking system have
become real
2. With the installing of the surveillances for
every corner of Singapore
A cursory inspection of the corpus indicates that
in the absence of a determiner (example (1)), the
noun tends to be plural. This pattern has not been
captured by the correction system. The coverage
of the Wiktionary mass noun and pluralia tantum
dictionaries is low, hence this feature has not had
the desired impact (example(2)).
The SVA correction component has a reason-
ably good precision and recall - performing best
amongst all the correction components. Since
most errors affecting agreement (noun-number,
verb form, etc.) were not corrected, the SVA
agreement component could not correct the agree-
ment errors. If these errors had been corrected, the
accuracy of the standalone SVA correction com-
ponent would have been higher than that indicated
by the official score. To verify this, we manually
analyzed the output from the SVA correction com-
ponent and found that 58% of the missed correc-
tions and 43% of the erroneous corrections would
not have occurred if some of the other related er-
rors had been fixed. If it is assumed that all these
errors are corrected, the effective accuracy of SVA
correction increases substantially as shown in Ta-
ble 5. A few errors in the gold standard for SVA
agreement were also considered for computing the
effective scores. The standalone SVA correction
module therefore has a good accuracy.
A major reason for SVA errors (?18%) is
wrong output from NLP modules like the POS tag-
ger, chunker and parser. The following are a few
examples:
? The verb group is incorrectly identified if
there is an adverb between the main and aux-
iliary verbs.
It [do not only restrict] their freedom in all
86
SVA Score
Development test set Official test set
P R F-1 P R F-1
Official 16.67 23.42 19.78 29.57 27.42 28.45
Effective 51.02 55.55 53.18 65.32 66.94 66.12
Table 5: M2 scores (original and modified) for SVA correction
aspects , but also causes leakage of personal
information .
? Two adjacent verb groups are not distin-
guished as separate chunks by the chunker
when the second verb group is non-finite in-
volving an infinitive.
The police arrested all of them before they
[starts to harm] the poor victim.
? The dependency parser makes errors in iden-
tifying the subject of a verb. The noun prob-
lems is not identified as the subject of is by
the dependency parser.
Although rising of life expectancies is an
challenge to the entire human nation , the
detailed problems each country that will en-
counter is different.
Some phenomena have not been handled by our
rules. Our system does not handle the case where
the subject is a gerund phrase. Consider the exam-
ple,
Collecting coupons from individuals are the first
step.
The verb-number should be singular when a
gerund phrase is the subject. In the absence of
rules to handle this case, coupons is identified as
the subject of are by the dependency parser and
consequently, no correction is done.
Our rules do not handle interrogative sentences
and interrogative pronouns. Hence the following
sentence is not corrected,
People do not know who are tracking them.
Table 6 provides an analysis of the error type
distribution for SVA errors on the official test set.
8 Conclusion
In this paper, we presented a hybrid grammati-
cal correction system which incorporates both ma-
chine learning and rule-based components. We
proposed a new rule-based method for subject-
verb agreement correction. As future work, we
plan to explore richer features for noun-number
and determiner errors.
Error types % distribution
Noun-number errors 58.02 %
Wrong tagging, chunking, parsing 18.52 %
Wrong gold annotations 7.40%
Rules not designed 6.1%
Others 9.88 %
Table 6: Causes for missed SVA corrections and
their distribution in the official test set
References
Daniel Dahlmeier and Hwee Tou Ng. 2011. Grammat-
ical error correction with alternating structure opti-
mization. In Proceedings of the 49th Annual Meet-
ing of the Association for Computational Linguis-
tics: Human Language Technologies-Volume 1.
Daniel Dahlmeier and Hwee Tou Ng. 2012. Better
evaluation for grammatical error correction. In Pro-
ceedings of the 2012 Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics.
Daniel Dahlmeier, Hwee Tou Ng, and Siew Mei Wu.
2013. Building a large annotated corpus of learner
english: The NUS Corpus of Learner English. In To
appear in Proceedings of the 8th Workshop on Inno-
vative Use of NLP for Building Educational Appli-
cations.
Na-Rae Han, Martin Chodorow, and Claudia Leacock.
2006. Detecting errors in english article usage by
non-native speakers. Natural Language Engineer-
ing.
Kevin Knight and Ishwar Chander. 1994. Automated
postediting of documents. In AAAI.
Hwee Tou Ng, Siew Mei Wu, Yuanbin Wu, Christian
Hadiwinoto, and Joel Tetreault. 2013. The CoNLL-
2013 Shared Task on Grammatical Error Correction.
In To appear in Proceedings of the Seventeenth Con-
ference on Computational Natural Language Learn-
ing.
Alla Rozovskaya and Dan Roth. 2010. Generating
confusion sets for context-sensitive error correction.
In Proceedings of the 2010 Conference on Empirical
Methods in Natural Language Processing.
87
Proceedings of the Eighteenth Conference on Computational Natural Language Learning: Shared Task, pages 60?64,
Baltimore, Maryland, 26-27 July 2014.
c?2014 Association for Computational Linguistics
Tuning a Grammar Correction System for Increased Precision
Anoop Kunchukuttan
?
, Sriram Chaudhury
?
, Pushpak Bhattacharyya
?
?
Department of Computer Science and Engineering, IIT Bombay, India
{anoopk,pb}@cse.iitb.ac.in
?
Crimson Interactive Pvt. Limited, Mumbai, India
Sriram.Chaudhury@crimsoni.com
Abstract
In this paper, we propose two enhance-
ments to a statistical machine translation
based approach to grammar correction for
correcting all error categories. First, we
propose tuning the SMT systems to op-
timize a metric more suited to the gram-
mar correction task (F-? score) rather than
the traditional BLEU metric used for tun-
ing language translation tasks. Since the
F-? score favours higher precision, tun-
ing to this score can potentially improve
precision. While the results do not indi-
cate improvement due to tuning with the
new metric, we believe this could be due
to the small number of grammatical er-
rors in the tuning corpus and further in-
vestigation is required to answer the ques-
tion conclusively. We also explore the
combination of custom-engineered gram-
mar correction techniques, which are tar-
geted to specific error categories, with the
SMT based method. Our simple ensem-
ble methods yield improvements in recall
but decrease the precision. Tuning the
custom-built techniques can help in in-
creasing the overall accuracy also.
1 Introduction
Grammatical Error Correction (GEC) is an inter-
esting and challenging problem and the existing
methods that attempt to solve this problem take
recourse to deep linguistic and statistical analy-
sis. In general, GEC may partly assist in solv-
ing natural language processing (NLP) tasks like
Machine Translation, Natural Language Genera-
tion etc. However, a more evident application of
GEC is in building automated grammar checkers
thereby non-native speakers of a language. The
goal is to have automated tools to help non-native
speakers to generate good content by correcting
grammatical errors made by them.
The CoNLL-2013 Shared Task (Ng et al., 2013)
was focussed towards correcting some of the most
frequent categories of grammatical errors. In con-
trast, the CoNLL-2014 Shared Task (Ng et al.,
2014) set the goal of correcting all grammatical
errors in the text. For correcting specific error
categories, custom methods are generally devel-
oped, which exploit deep knowledge of the prob-
lem to perform the correction (Han et al., 2006;
Kunchukuttan et al., 2013; De Felice and Pulman,
2008). These methods are generally the state-of-
the-art for the concerned error categories, but a lot
of engineering and research effort is required for
correcting each error category. So, the custom de-
velopment approach is infeasible for correcting a
large number of error categories.
Hence, for correction of all the error categories,
generic methods have been investigated - gen-
erally using language models or statistical ma-
chine translation (SMT) systems. The language
model based method (Lee and Seneff, 2006; Kao
et al., 2013) scores sentences based on a lan-
guage model or count ratios of n-grams obtained
from a large native text corpus. But this method
still needs a candidate generation mechanism for
each error category. On the other hand, the SMT
based method (Brockett et al., 2006) formulates
the grammar correction problem as a problem of
translation of incorrect sentences to correct sen-
tences. SMT provides a natural unsupervised
method for identifying candidate corrections in
the form of the translation model, and a method
for scoring them with a variety of measures in-
cluding the language model score. However, the
SMT method requires a lot of parallel non-native
learner corpora. In addition, the machinery in
phrase based SMT is optimized towards solving
the language translation problem. Therefore, the
community has explored approaches to adapt the
60
SMT method for grammar correction (Buys and
van der Merwe, 2013; Yuan and Felice, 2013).
These include use of factored SMT, syntax based
SMT, pruning of the phrase table, disabling or re-
ordering, etc. The generic SMT approach has per-
formed badly as compared to the specific custom
made approaches (Yuan and Felice, 2013).
Our system also builds upon the SMT methods
and tries to address the above mentioned lacunae
in two ways:
? Tuning the SMT model to a metric suitable
for grammar correction (i.e.F-? metric), in-
stead of the BLEU metric.
? Combination of custom-engineered methods
and SMT based methods, by using classifier
based for some error categories.
Section 2 describes our method for tuning the
SMT system to optimize the F-? metric. Sec-
tion 3 explains the combination of classifier based
method with the SMT method. Section 4 lists our
experimental setup. Section 5 analyzes the results
of our experiments.
2 Tuning SMT system for F-? score
We model our grammar correction system as a
phrase based SMT system which translates gram-
matically incorrect sentences to grammatically
correct sentences. The phrase based SMT system
selects the best translation for a source sentence by
searching for a candidate translation which maxi-
mizes the score defined by the maximum entropy
model for phrase based SMT defined below:
P (e,a|f) = exp
?
i
?
i
h
i
(e,a, f)
where,
h
i
: feature function for the i
th
feature. These are
generally features like the phrase/lexical transla-
tion probability, language model score, etc.
?
i
: the weight parameter for the i
th
feature.
The weight parameters (?
i
) define the relative
weights given to each feature. These parame-
ter weights are learnt during a process referred to
as tuning. During tuning, a search over the pa-
rameter space is done to identify the parameter
values which maximize a measure of translation
quality over a held-out dataset (referred to as the
tuning set). One of the most widely used met-
rics for tuning is the BLEU score (Papineni et
al., 2002), tuned using the Minimum Error Rate
Training (MERT) algorithm (Och, 2003). Since
BLEU is a form of weighted precision, along with
a brevity penalty to factor in recall, it is suitable
in the language translation scenario, where fidelity
of the translation is an important in evaluation of
the translation. Tuning to BLEU ensures that the
parameter weights are set such that the fidelity of
translations is high.
However, ensuring fidelity is not the major chal-
lenge in grammar correction since the meaning of
most input sentences is clear and most don?t have
any grammatical errors. The metric to be tuned
must ensure that weights are learnt such that the
features most relevant to correcting the grammar
errors are given due importance and that the tun-
ing focuses on the grammatically incorrect parts
of the sentences. The F-? score, as defined for
the CoNLL shared task, is the most obvious metric
to measure the accuracy of grammar correction on
the tuning set. We choose the F-? metric as a score
to be optimized using MERT for the SMT based
grammar correction model. By choosing an appro-
priate value of ?, it is possible to tune the system
to favour increased recall/precision or a balance of
both.
3 Integrating SMT based and
error-category specific systems
As discussed in Section 1, the generic SMT based
correction based systems are inferior in their cor-
rection capabilities compared to the error-category
specific correction systems which have been cus-
tom engineered for the task. A reasonable solution
to make optimum use of both the approaches is to
develop custom modules for correcting high im-
pact and the most frequent error categories, while
relying on the SMT method for correcting other
error categories. We experiment with two ap-
proaches for integrating the SMT based and error-
category specific systems, and compare both with
the baseline SMT approach:
? Correct all error categories using the SMT
method, followed by correction using the
custom modules.
? Correct only the error categories not han-
dled by the custom modules using the SMT
method, followed by correction using the
custom modules.
61
The error categories for which we built cus-
tom modules are noun number, determiner and
subject-verb agreement (SVA) errors. These er-
rors are amongst the most common errors made
by non-native speakers. The noun number and
determiner errors are corrected using the classifi-
cation model proposed by Rozovskaya and Roth
(2013), where the label space is a cross-product
of the label spaces of the possible noun number
and determiners. We use the feature-set proposed
by Kunchukuttan et al. (2013). SVA correction
is done using a prioritized, conditional rule based
system described by Kunchukuttan et al. (2013).
4 Experimental Setup
We used the NUCLE Corpus v3.1 to build a
phrase based SMT system for grammar correction.
The NUCLE Corpus contains 28 error categories,
whose details are documented in Dahlmeier et al.
(2013). We split the corpus into training, tuning
and test sets are shown in Table 1.
Set Document Count Sentence Count
train 1330 54284
tune 20 854
test 47 2013
Table 1: Details of data split for SMT training
The phrase based system was trained using
the Moses
1
system, with the grow-diag-final-
and heuristic for extracting phrases and the msd-
bidirectional-fe model for lexicalized reordering.
We tuned the trained models using Minimum Er-
ror Rate Training (MERT) with default parame-
ters (100 best list, max 25 iterations). Instead of
BLEU, the tuning metric was the F-0.5 metric. We
trained 5-gram language models on all the sen-
tences from NUCLE corpus using the Kneser-Ney
smoothing algorithm with SRILM
2
.
The classifier for noun number and article cor-
rection is a Maximum Entropy model trained
on the NUCLE v2.2 corpus using the MALLET
toolkit. Details about the resources and tools
used for feature extraction are documented in
Kunchukuttan et al. (2013).
1
http://www.statmt.org/moses/
2
http://goo.gl/4wfLVw
5 Results and Analysis
Table 2 shows the results on the development set
for different experimental configurations gener-
ated by varying the tuning metrics, and the method
of combining the SMT model and custom correc-
tion modules. Table 3 shows the same results on
the official CoNLL 2014 dataset without alterna-
tive answers.
5.1 Effect of tuning with F-0.5 score
We observe that both precision and recall drop
sharply when the SMT model is tuned with the
F-0.5 metric (system S2), as compared to tuning
with the traditional BLEU metric (system S1). We
observe that system S2 proposes very few correc-
tions (82) as compared to system S1 (188), which
contributes to the low recall of system S2. There
are very few errors in the tuning set (202) which
may not be sufficient to reliably tune the system
to the F-0.5 score. It would be worth investigating
the effect of number of errors in the tuning set on
the accuracy of the system.
5.2 Effect of integrating the SMT and custom
modules
Comparing the results of systems S1, S3 and S5, it
is clear that using the SMT method alone gives the
highest F-0.5 score. However, the recall is higher
for systems which use the custom modules for
some error categories. The recall is highest when
custom modules as well as SMT method are used
for the high impact error categories. The above
observation is a consequence of the fact that the
custom modules have higher recall for certain er-
ror categories compared to the SMT method. The
lower precision of custom modules is due to the
large number of false positives. If the custom
modules are optimized for higher precision, then
the overall ensemble can also achieve higher pre-
cision and consequently higher F-0.5 score. Thus,
the integration of SMT method and custom mod-
ules can be beneficial in improving the overall ac-
curacy of the SMT system.
6 Conclusion
We explored two approaches to adapting the SMT
method for the problem of grammatical correc-
tion. Tuning the SMT system to the F-? metric did
not improve performance over the BLEU-based
tuning. However, we plan to further investigate
to understand the reasons for this behaviour. We
62
Id SMT Data Custom Modules Tuning Metric %P %R %F-0.5
S1
All errors
No BLEU 62.23 11.53 33.12
S2 No F-0.5 55.32 5.13 18.71
S3 Yes BLEU 10.99 26.33 12.44
S4 Yes F-0.5 9.80 22.98 11.07
S5 All errors, except Nn,
ArtOrDet, SVA
Yes BLEU 10.15 23.96 11.47
Table 2: Experimental Results for various configurations on the development set
Id SMT Data Custom Modules Tuning Metric %P %R %F-0.5
S1
All errors
No BLEU 38.81 4.15 14.53
S2 No F-0.5 30.77 1.39 5.90
S3 Yes BLEU 29.02 17.98 25.85
S4 Yes F-0.5 28.23 16.72 24.81
S5 All errors, except Nn,
ArtOrDet, SVA
Yes BLEU 28.67 17.29 25.34
Table 3: Experimental Results for various configurations on the CoNLL-2014 test set without alternatives
also plan to explore tuning for recall and other al-
ternative metrics which could be useful in some
scenarios. An ensemble of the SMT method and
custom methods for some high impact error cate-
gories was shown to increase the recall of the sys-
tem, and with proper optimization of the system
can also improve the overall accuracy of the cor-
rection system.
References
Chris Brockett, William B Dolan, and Michael Ga-
mon. 2006. Correcting ESL errors using phrasal
SMT techniques. In Proceedings of the 21st Inter-
national Conference on Computational Linguistics
and the 44th annual meeting of the Association for
Computational Linguistics.
Jan Buys and Brink van der Merwe. 2013. A Tree
Transducer Model for Grammatical Error Correc-
tion. In Proceedings of the Seventeenth Confer-
ence on Computational Natural Language Learn-
ing: Shared Task.
Daniel Dahlmeier and Hwee Tou Ng. 2012. Better
Evaluation for Grammatical Error Correction. In
Proceedings of the 2012 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics.
Daniel Dahlmeier, Hwee Tou Ng, and Siew Mei Wu.
2013. Building a large annotated corpus of learner
english: The NUS Corpus of Learner English. In To
appear in Proceedings of the 8th Workshop on Inno-
vative Use of NLP for Building Educational Appli-
cations.
Rachele De Felice and Stephen G Pulman. 2008. A
classifier-based approach to preposition and deter-
miner error correction in L2 English. In Proceed-
ings of the 22nd International Conference on Com-
putational Linguistics-Volume 1.
Na-Rae Han, Martin Chodorow, and Claudia Leacock.
2006. Detecting errors in English article usage by
non-native speakers. Natural Language Engineer-
ing.
Ting-hui Kao, Yu-wei Chang, Hsun-wen Chiu, Tzu-
Hsi Yen, Joanne Boisson, Jian-cheng Wu, and Ja-
son S. Chang. 2013. CoNLL-2013 Shared Task:
Grammatical Error Correction NTHU System De-
scription. In Proceedings of the Seventeenth Con-
ference on Computational Natural Language Learn-
ing: Shared Task.
Anoop Kunchukuttan, Ritesh Shah, and Pushpak Bhat-
tacharyya. 2013. IITB System for CoNLL 2013
Shared Task: A Hybrid Approach to Grammati-
cal Error Correction. In Proceedings of the Seven-
teenth Conference on Computational Natural Lan-
guage Learning.
J. Lee and S. Seneff. 2006. Automatic grammar cor-
rection for second-language learners. In Proceed-
ings of Interspeech, pages 1978?1981.
Hwee Tou Ng, Siew Mei Wu, Yuanbin Wu, Christian
Hadiwinoto, and Joel Tetreault. 2013. The CoNLL-
2013 Shared Task on Grammatical Error Correction.
In Proceedings of the Seventeenth Conference on
Computational Natural Language Learning.
Hwee Tou Ng, Siew Mei Wu, Ted Briscoe, Christian
Hadiwinoto, Raymond Hendy Susanto, and Christo-
pher Bryant. 2014. The CoNLL-2014 Shared Task
on Grammatical Error Correction. In Proceedings of
63
the Eighteenth Conference on Computational Natu-
ral Language Learning.
Franz Josef Och. 2003. Minimum error rate training
in statistical machine translation. In Proceedings of
the 41st Annual Meeting on Association for Compu-
tational Linguistics-Volume 1.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. BLEU: a method for automatic
evaluation of machine translation. In Proceedings
of the 40th annual meeting on association for com-
putational linguistics.
A. Rozovskaya and D. Roth. 2013. Joint Learning
and Inference for Grammatical Error Correction. In
EMNLP.
Zheng Yuan and Mariano Felice. 2013. Constrained
Grammatical Error Correction using Statistical Ma-
chine Translation. In Proceedings of the Seven-
teenth Conference on Computational Natural Lan-
guage Learning: Shared Task.
64
Proceedings of the Ninth Workshop on Statistical Machine Translation, pages 90?96,
Baltimore, Maryland USA, June 26?27, 2014.
c?2014 Association for Computational Linguistics
The IIT Bombay Hindi?English Translation System at WMT 2014
Piyush Dungarwal, Rajen Chatterjee, Abhijit Mishra, Anoop Kunchukuttan,
Ritesh Shah, Pushpak Bhattacharyya
Department of Computer Science and Engineering
Indian Institute of Technology, Bombay
{piyushdd,rajen,abhijitmishra,anoopk,ritesh,pb}@cse.iitb.ac.in
Abstract
In this paper, we describe our English-
Hindi and Hindi-English statistical sys-
tems submitted to the WMT14 shared task.
The core components of our translation
systems are phrase based (Hindi-English)
and factored (English-Hindi) SMT sys-
tems. We show that the use of num-
ber, case and Tree Adjoining Grammar
information as factors helps to improve
English-Hindi translation, primarily by
generating morphological inflections cor-
rectly. We show improvements to the
translation systems using pre-procesing
and post-processing components. To over-
come the structural divergence between
English and Hindi, we preorder the source
side sentence to conform to the target lan-
guage word order. Since parallel cor-
pus is limited, many words are not trans-
lated. We translate out-of-vocabulary
words and transliterate named entities in
a post-processing stage. We also investi-
gate ranking of translations from multiple
systems to select the best translation.
1 Introduction
India is a multilingual country with Hindi be-
ing the most widely spoken language. Hindi and
English act as link languages across the coun-
try and languages of official communication for
the Union Government. Thus, the importance of
English?Hindi translation is obvious. Over the
last decade, several rule based (Sinha, 1995) , in-
terlingua based (Dave et. al., 2001) and statistical
methods (Ramanathan et. al., 2008) have been ex-
plored for English-Hindi translation.
In the WMT 2014 shared task, we undertake
the challenge of improving translation between the
English and Hindi language pair using Statisti-
cal Machine Translation (SMT) techniques. The
WMT 2014 shared task has provided a standard-
ized test set to evaluate multiple approaches and
avails the largest publicly downloadable English-
Hindi parallel corpus. Using these resources,
we have developed a phrase-based and a factored
based system for Hindi-English and English-Hindi
translation respectively, with pre-processing and
post-processing components to handle structural
divergence and morphlogical richness of Hindi.
Section 2 describes the issues in Hindi?English
translation.
The rest of the paper is organized as follows.
Section 3 describes corpus preparation and exper-
imental setup. Section 4 and Section 5 describe
our English-Hindi and Hindi-English translation
systems respectively. Section 6 describes the post-
processing operations on the output from the core
translation system for handling OOV and named
entities, and for reranking outputs from multiple
systems. Section 7 mentions the details regarding
our systems submitted to WMT shared task. Sec-
tion 8 concludes the paper.
2 Problems in Hindi?English
Translation
Languages can be differentiated in terms of
structural divergences and morphological mani-
festations. English is structurally classified as
a Subject-Verb-Object (SVO) language with a
poor morphology whereas Hindi is a morpho-
logically rich, Subject-Object-Verb (SOV) lan-
guage. Largely, these divergences are responsi-
ble for the difficulties in translation using a phrase
based/factored model, which we summarize in this
section.
2.1 English-to-Hindi
The fundamental structural differences described
earlier result in large distance verb and modi-
fier movements across English-Hindi. Local re-
ordering models prove to be inadequate to over-
90
come the problem; hence, we transformed the
source side sentence using pre-ordering rules to
conform to the target word order. Availability of
robust parsers for English makes this approach for
English-Hindi translation effective.
As far as morphology is concerned, Hindi is
more richer in terms of case-markers, inflection-
rich surface forms including verb forms etc. Hindi
exhibits gender agreement and syncretism in in-
flections, which are not observed in English. We
attempt to enrich the source side English corpus
with linguistic factors in order to overcome the
morphological disparity.
2.2 Hindi-to-English
The lack of accurate linguistic parsers makes it dif-
ficult to overcome the structural divergence using
preordering rules. In order to preorder Hindi sen-
tences, we build rules using shallow parsing infor-
mation. The source side reordering helps to reduce
the decoder?s search complexity and learn better
phrase tables. Some of the other challenges in gen-
eration of English output are: (1) generation of ar-
ticles, which Hindi lacks, (2) heavy overloading of
English prepositions, making it difficult to predict
them.
3 Experimental Setup
We process the corpus through appropriate filters
for normalization and then create a train-test split.
3.1 English Corpus Normalization
To begin with, the English data was tokenized us-
ing the Stanford tokenizer (Klein and Manning,
2003) and then true-cased using truecase.perl pro-
vided in MOSES toolkit.
3.2 Hindi Corpus Normalization
For Hindi data, we first normalize the corpus us-
ing NLP Indic Library (Kunchukuttan et. al.,
2014)
1
. Normalization is followed by tokeniza-
tion, wherein we make use of the trivtokenizer.pl
2
provided with WMT14 shared task. In Table 1, we
highlight some of the post normalization statistics
for en-hi parallel corpora.
1
https://bitbucket.org/anoopk/indic_
nlp_library
2
http://ufallab.ms.mff.cuni.cz/~bojar/
hindencorp/
English Hindi
Token 2,898,810 3,092,555
Types 95,551 118,285
Total Characters 18,513,761 17,961,357
Total sentences 289,832 289,832
Sentences (word
count ? 10)
188,993 182,777
Sentences (word
count > 10)
100,839 107,055
Table 1: en-hi corpora statistics, post normalisa-
tion.
3.3 Data Split
Before splitting the data, we first randomize the
parallel corpus. We filter out English sentences
longer than 50 words along with their parallel
Hindi translations. After filtering, we select 5000
sentences which are 10 to 20 words long as the test
data, while remaining 284,832 sentences are used
for training.
4 English-to-Hindi (en-hi) translation
We use the MOSES toolkit (Koehn et. al., 2007a)
for carrying out various experiments. Starting with
Phrase Based Statistical Machine Translation (PB-
SMT)(Koehn et. al., 2003) as baseline system we
go ahead with pre-order PBSMT described in Sec-
tion 4.1. After pre-ordering, we train a Factor
Based SMT(Koehn, 2007b) model, where we add
factors on the pre-ordered source corpus. In Fac-
tor Based SMT we have two variations- (a) using
Supertag as factor described in Section 4.2 and (b)
using number, case as factors described in Section
4.3.
4.1 Pre-ordering source corpus
Research has shown that pre-ordering source lan-
guage to conform to target language word order
significantly improves translation quality (Collins
et. al, 2005). There are many variations of pre-
ordering systems primarily emerging from either
rule based or statistical methods. We use rule
based pre-ordering approach developed by (Pa-
tel et. al., 2013), which uses the Stanford parser
(Klein and Manning, 2003) for parsing English
sentences. This approach is an extension to an ear-
lier approach developed by (Ramanathan et. al.,
2008). The existing source reordering system re-
quires the input text to contain only surface form,
however, we extended it to support surface form
91
along with its factors like POS, lemma etc.. An
example of improvement in translation after pre-
ordering is shown below:
Example: trying to replace bad ideas with good
ideas .
Phr: replace b  r EvcAro\ ko aQC EvcAro\ k
sAT
(replace bure vichaaron ko acche vichaaron ke
saath)
Gloss: replace bad ideas good ideas with
Pre-order PBSMT: aQC EvcAro\ s b  r EvcAro\
ko bdln kF koEff kr rh h{\
(acche vichaaron se bure vichaaron ko badalane
ki koshish kara rahe hain)
Gloss: good ideas with bad ideas to replace trying
4.2 Supertag as Factor
The notion of Supertag was first proposed by
Joshi and Srinivas (1994). Supertags are elemen-
tary trees of Lexicalized Tree Adjoining Grammar
(LTAG) (Joshi and Schabes, 1991). They provide
syntactic as well as dependency information at the
word level by imposing complex constraints in a
local context. These elementary trees are com-
bined in some manner to form a parse tree, due
to which, supertagging is also known as ?An ap-
proach to almost parsing?(Bangalore and Joshi,
1999). A supertag can also be viewed as frag-
ments of parse trees associated with each lexi-
cal item. Figure 1 shows an example of su-
pertagged sentence ?The purchase price includes
taxes?described in (Hassan et. al., 2007). It clearly
shows the sub-categorization information avail-
able in the verb include, which takes subject NP
to its left and an object NP to its right.
Figure 1: LTAG supertag sequence obtained using
MICA Parser.
Use of supertags as factors has already been
studied by Hassan (2007) in context of Arabic-
English SMT. They use supertag language model
along with supertagged English corpus. Ours
is the first study in using supertag as factor
for English-to-Hindi translation on a pre-ordered
source corpus.
We use MICA Parser (Bangalore et. al., 2009)
for obtaining supertags. After supertagging we run
pre-ordering system preserving the supertags in it.
For translation, we create mapping from source-
word|supertag to target-word. An example of im-
provement in translation by using supertag as fac-
tor is shown below:
Example: trying to understand what your child is
saying to you
Phr: aApkA b?A aAps ?A kh rhA h{ yh
(aapkaa bacchaa aapse kya kaha rahaa hai yaha)
Gloss: your child you what saying is this
Supertag Fact: aApkA b?A aAps ?A kh rhA
h{ , us smJn kF koEff krnA
(aapkaa bacchaa aapse kya kaha rahaa hai, use
samajhane kii koshish karnaa)
Gloss: your child to you what saying is , that un-
derstand try
4.3 Number, Case as Factor
In this section, we discuss how to generate correct
noun inflections while translating from English to
Hindi. There has been previous work done in order
to solve the problem of data sparsity due to com-
plex verb morphology for English to Hindi trans-
lation (Gandhe, 2011). Noun inflections in Hindi
are affected by the number and case of the noun
only. Number can be singular or plural, whereas,
case can be direct or oblique. We use the factored
SMT model to incorporate this linguistic informa-
tion during training of the translation models. We
attach root-word, number and case as factors to
English nouns. On the other hand, to Hindi nouns
we attach root-word and suffix as factors. We de-
fine the translation and generation step as follows:
? Translation step (T0): Translates English
root|number|case to Hindi root|suffix
? Generation step (G0): Generates Hindi sur-
face word from Hindi root|suffix
An example of improvement in translation by
using number and case as factors is shown below:
Example: Two sets of statistics
Phr: do k aA kw
(do ke aankade)
Gloss: two of statistics
Num-Case Fact: aA kwo\ k do sV
(aankadon ke do set)
Gloss: statistics of two sets
92
4.3.1 Generating number and case factors
With the help of syntactic and morphological
tools, we extract the number and case of the En-
glish nouns as follows:
? Number factor: We use Stanford POS tag-
ger
3
to identify the English noun entities
(Toutanova, 2003). The POS tagger itself dif-
ferentiates between singular and plural nouns
by using different tags.
? Case factor: It is difficult to find the
direct/oblique case of the nouns as En-
glish nouns do not contain this information.
Hence, to get the case information, we need
to find out features of an English sentence
that correspond to direct/oblique case of the
parallel nouns in Hindi sentence. We use
object of preposition, subject, direct object,
tense as our features. These features are
extracted using semantic relations provided
by Stanford?s typed dependencies (Marneffe,
2008).
4.4 Results
Listed below are different statistical systems
trained using Moses:
? Phrase Based model (Phr)
? Phrase Based model with pre-ordered source
corpus (PhrReord)
? Factor Based Model with factors on pre-
ordered source corpus
? Supertag as factor (PhrReord+STag)
? Number, Case as factor (PhrReord+NC)
We evaluated translation systems with BLEU and
TER as shown in Table 2. Evaluation on the devel-
opment set shows that factor based models achieve
competitive scores as compared to the baseline
system, whereas, evaluation on the WMT14 test
set shows significant improvement in the perfor-
mance of factor based models.
5 Hindi-to-English (hi-en) translation
As English follows SVO word order and Hindi fol-
lows SOV word order, simple distortion penalty in
phrase-based models can not handle the reordering
well. For the shared task, we follow the approach
3
http://nlp.stanford.edu/software/tagger.shtml
Development WMT14
Model BLEU TER BLEU TER
Phr 27.62 0.63 8.0 0.84
PhrReord 28.64 0.62 8.6 0.86
PhrReord+STag 27.05 0.64 9.8 0.83
PhrReord+NC 27.50 0.64 10.1 0.83
Table 2: English-to-Hindi automatic evaluation on
development set and on WMT14 test set.
that pre-orders the source sentence to conform to
target word order.
A substantial volume of work has been done
in the field of source-side reordering for machine
translation. Most of the experiments are based on
applying reordering rules at the nodes of the parse
tree of the source sentence. These reordering rules
can be automatically learnt (Genzel, 2010). But,
many source languages do not have a good robust
parser. Hence, instead we can use shallow pars-
ing techniques to get chunks of words and then
reorder them. Reordering rules can be learned au-
tomatically from chunked data (Zhang, 2007).
Hindi does not have a functional constituency
or dependency parser available, as of now. But,
a shallow parser
4
is available for Hindi. Hence,
we follow a chunk-based pre-ordering approach,
wherein, we develop a set of rules to reorder
the chunks in a source sentence. The follow-
ing are the chunks tags generated by this shallow
parser: Noun chunks (NP), Verb chunks (VGF,
VGNF, VGNN), Adjectival chunks (JJP), Ad-
verb chunks (RBP), Negatives (NEGP), Conjuncts
(CCP), Chunk fragments (FRAGP), and miscella-
neous entities (BLK) (Bharati, 2006).
5.1 Development of rules
After chunking an input sentence, we apply hand-
crafted reordering rules on these chunks. Follow-
ing sections describe these rules. Note that we ap-
ply rules in the same order they are listed below.
5.1.1 Merging of chunks
After chunking, we merge the adjacent chunks, if
they follow same order in target language.
1. Merge {JJP VGF} chunks (Consider this
chunk as a single VGF chunk)
e.g., vEZta h{ (varnit hai), E-Tta h{ (sthit hai)
4
http://ltrc.iiit.ac.in/showfile.php?
filename=downloads/shallow_parser.php
93
2. Merge adjacent verb chunks (Consider this
chunk as a single verb chunk)
e.g., EgrtaA h{ (girataa hai), l  BAtaA h{ (lub-
haataa hai)
3. Merge NP and JJP chunks separated by com-
mas and CCP (Consider this chunk as a single
NP chunk)
e.g., bwA aOr ahm (badaa aur aham)
5.1.2 Preposition chunk reordering
Next we find sequence of contiguous chunks sep-
arated by prepositions (Can end in verb chunks).
We apply following reordering rules on these con-
tiguous chunks:
1. Reorder multi-word preposition locally by re-
versing the order of words in that chunk
e.g., k alAvA (ke alaawaa) ? alAvA k,
k sAmn (ke saamane)? sAmn k
2. Reorder contiguous preposition chunk by re-
versing the order of chunks (Consider this
chunk as a single noun chunk)
e.g., Eh\d Dm m\ taFT kA bwA mh(v (hinduu
dharma me tirtha ka badaa mahatva)? bwA
mh(v kA taFT m\ Eh\d Dm
5.1.3 Verb chunk reordering
We find contiguous verb chunks and apply follow-
ing reordering rules:
1. Reorder chunks locally by reversing the order
of the chunks
e.g., vEZta h{ (varnit hai)? h{ vEZta
2. Verb chunk placement: We place the new
verb chunk after first NP chunk. Same rule
applies for all verb chunks in a sentence, i.e.,
we place each verb chunk after first NP chunk
of the clause to which the verb belongs.
Note that, even though placing verb chunk af-
ter first NP chunk may be wrong reordering.
But we also use distortion window of 6 to 20
while using phrase-based model. Hence, fur-
ther reordering of verb chunks can be some-
what handled by phrase-based model itself.
Thus, using chunker and reordering rules, we
get a source-reordered Hindi sentence.
5.2 Results
We trained two different translation models:
? Phrase-based model without source reorder-
ing (Phr)
? Phrase-based model with chunk-based source
reordering (PhrReord)
Development WMT14
Model BLEU TER BLEU TER
Phr 27.53 0.59 13.5 0.87
PhrReord 25.06 0.62 13.7 0.90
Table 3: Hindi-to-English automatic evaluation on
development set and on WMT14 test set.
Table 3 shows evaluation scores for develop-
ment set and WMT14 test set. Even though we do
not see significant improvement in automatic eval-
uation of PhrReord, but this model contributes in
improving translation quality after ranking, as dis-
cussed in Section 5. In subjective evaluation we
found many translation to be better in PhrReord
model as shown in the following examples:
Example 1: sn 2004 s v kI bAr coVg}-ta
rh h{\ |
(sana 2004 se ve kaii baar chotagrasta rahe hain.)
Phr: since 2004 he is injured sometimes .
PhrReord: he was injured many times since 2004
.
Example 2: aobAmA kA rA?~ pEta pd k c  nAv
?cAr hta  bnAyA aAEDkAErk jAl-Tl
(obama ka rashtrapti pad ke chunaav prachaar
hetu banaayaa aadhikarik jaalsthal)
Phr: of Obama for election campaign
PhrReord: official website of Obama created for
President campaign
6 Post processing
All experimental results reported in this paper are
after post processing the translation output. In post
processing, we remove some Out-of-Vocabulary
(OOV) words as described in subsection 6.1, after
which we transliterate the remaining OOV words.
6.1 Removing OOV
We noticed, there are many words in the training
corpus which were not present in the phrase ta-
ble, but, were present in the lexical tranlsation ta-
ble. So we used the lexical table as a dictionary
to lookup bilingual translations. Table 4 gives the
statistics of number of OOV reduced.
94
Model Before After
Phrased Based 2313 1354
Phrase Based (pre-order) 2256 1334
Supertag as factor 4361 1611
Num-Case as factor 2628 1341
Table 4: Statistics showing number of OOV be-
fore and after post processing the English-to-Hindi
translation output of Development set.
6.2 Transliteration of Untranslated Words
OOV words which were not present in the lexi-
cal translation table were then transliterated using
a naive transliteration system. The transliteration
step was applied on Hindi-to-English translation
outputs only. After transliteration we noticed frac-
tional improvements in BLEU score varying from
0.1 to 0.5.
6.3 Ranking of Ensemble MT Output
We propose a ranking framework to select the best
translation output from an ensemble of multiple
MT systems. In order to exploit the strength of
each system, we augment the translation pipeline
with a ranking module as a post processing step.
For English-to-Hindi ranking we combine the
output of both factor based models, whereas,
for Hindi-to-English ranking we combine phrase
based and phrase based with pre-ordering outputs.
For most of the systems, the output translations
are adequate but not fluent enough. So, based on
their fluency scores, we decided to rank the candi-
date translations. Fluency is well quantified by LM
log probability score and Perplexity. For a given
translation , we compute these scores by querying
the 5-gram language model built using SRILM.
Table 5 shows more than 4% relative improvement
in BLEU score for en-hi as well as hi-en transla-
tion system after applying ranking module.
Model BLEU METEOR TER
Phr(en-hi) 27.62 0.41 0.63
After Ranking (en-hi) 28.82 0.42 0.63
Phr(hi-en) 27.53 0.27 0.59
After Ranking (hi-en) 28.69 0.27 0.59
Table 5: Comparision of ranking score with base-
line
7 Primary Systems in WMT14
For English-to-Hindi, we submitted the ranked
output of factored models trained on pre-ordered
source corpus. For Hindi-to-English, we submit-
ted the ranked output of phrase based and pre-
ordered phrase based models. Table 6 shows eval-
uation scores of these systems on WMT14 test set.
Lang. pair BLEU TER
en-hi 10.4 0.83
hi-en 14.5 0.89
Table 6: WMT14 evaluation for en-hi and hi-en.
8 Conclusion
We conclude that the difficulties in English-Hindi
MT can be tackled by the use of factor based SMT
and various pre-processing and post processing
techniques. Following are our primary contribu-
tions towards English-Hindi machine translation:
? Use of supertag factors for better translation
of structurally complex sentences
? Use of number-case factors for accurately
generating noun inflections in Hindi
? Use of shallow parsing for pre-ordering Hindi
source corpus
We also observed that simple ranking strategy ben-
efits in getting the best translation from an ensem-
ble of translation systems.
References
Avramidis, Eleftherios, and Philipp Koehn. 2008. En-
riching Morphologically Poor Languages for Statis-
tical Machine Translation. ACL.
Banerjee, Satanjeev, and Alon Lavie. 2005. ME-
TEOR: An automatic metric for MT evaluation with
improved correlation with human judgments. Pro-
ceedings of the ACL Workshop on Intrinsic and Ex-
trinsic Evaluation Measures for Machine Translation
and/or Summarization.
Srinivas Bangalore and Aravind K. Joshi. 1999. Su-
pertagging: An approach to almost parsing. Com-
putational linguistics.
Srinivas Bangalore, Pierre Boulllier, Alexis Nasr,
Owen Rambow, and Beno?
?
ot Sagot. 2009. MICA:
a probabilistic dependency parser based on tree in-
sertion grammars application note. Proceedings of
95
Human Language Technologies The 2009 Annual
Conference of the North American Chapter of the
Association for Computational Linguistics, Associ-
ation for Computational Linguistics.
A. Bharati, R. Sangal, D. M. Sharma and L. Bai.
2006. AnnCorra: Annotating Corpora Guidelines
for POS and Chunk Annotation for Indian Lan-
guages. Technical Report (TR-LTRC-31), LTRC,
IIIT-Hyderabad.
Dave, Shachi and Parikh, Jignashu and Bhattacharyya,
Pushpak. 2001. Interlingua-based English?Hindi
Machine Translation and Language Divergence
Journal Machine Translation
Gandhe, Ankur, Rashmi Gangadharaiah, Karthik
Visweswariah, and Ananthakrishnan Ramanathan.
2011. Handling verb phrase morphology in highly
inflected Indian languages for Machine Translation.
IJCNLP.
Genzel, Dmitriy. 2010. Automatically learning
source-side reordering rules for large scale machine
translation Proceedings of the 23rd international
conference on computational linguistics. Associa-
tion for Computational Linguistics
Hany Hassan, Khalil Sima?an, and Andy Way 2007.
Supertagged phrase-based statistical machine trans-
lation. Proceedings of the Association for Compu-
tational Linguistics Association for Computational
Linguistics.
Aravind K. Joshi and Yves Schabes 1991. Tree-
adjoining grammars and lexicalized grammars.
Technical Report No. MS-CIS-91-22
Dan Klein and Christopher D. Manning. 2003. Accu-
rate Unlexicalized Parsing. Proceedings of the 41st
Meeting of the Association for Computational Lin-
guistics. Association for Computational Linguistics.
Koehn, Philipp, Franz Josef Och, and Daniel Marcu.
2003. Statistical phrase-based translation. Pro-
ceedings of the 2003 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics on Human Language Technology-
Volume 1. Association for Computational Linguis-
tics
Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran,
Richard Zens, Chris Dyer, Ond?
?
Zej Bojar, Alexan-
dra Constantin and Evan Herbst. 2007. Moses:
open source toolkit for statistical machine transla-
tion. Proceedings of the Second Workshop on Hy-
brid Approaches to Translation. Association for
Computational Linguistics.
Philipp Koehn and Hieu Hoang 2007. Factored Trans-
lation Models Conference on Empirical Methods in
Natural Language Processing.
Anoop Kunchukuttan, Abhijit Mishra, Rajen Chatter-
jee,Ritesh Shah, and Pushpak Bhattacharyya. 2014.
Sata-Anuvadak: Tackling Multiway Translation of
Indian Languages. Proceedings of the Ninth In-
ternational Conference on Language Resources and
Evaluation Conference
De Marneffe, Marie-Catherine, and Christopher
D. Manning. 2008. Stanford typed de-
pendencies manual. URL http://nlp. stanford.
edu/software/dependencies manual. pdf (2008).
Papineni, Kishore, Salim Roukos, Todd Ward, and
Wei-Jing Zhu. 2002. BLEU: a method for auto-
matic evaluation of machine translation. Proceed-
ings of the 40th annual meeting on association for
computational linguistics. Association for Compu-
tational Linguistics.
Raj Nath Patel, Rohit Gupta, Prakash B. Pimpale and
Sasikumar M. 2013. Reordering rules for English-
Hindi SMT. Proceedings of the Second Workshop
on Hybrid Approaches to Translation. Association
for Computational Linguistics.
Ananthakrishnan Ramanathan, Pushpak Bhat-
tacharyya, Jayprasad Hegde, Ritesh M. Shah,
and M. Sasikumar. 2008. Simple syntactic and
morphological processing can help English-Hindi
statistical machine translation. In International
Joint Conference on NLP.
Sinha, RMK and Sivaraman, K and Agrawal, A and
Jain, R and Srivastava, R and Jain, A. 1995.
ANGLABHARTI: a multilingual machine aided
translation project on translation from English to In-
dian languages IEEE International Conference on
Systems, Man and Cybernetics
Toutanova, Kristina, Dan Klein, Christopher D. Man-
ning, and Yoram Singer 2003. Feature-rich part-of-
speech tagging with a cyclic dependency network.
Proceedings of the 2003 Conference of the North
American Chapter of the Association for Computa-
tional Linguistics on Human Language Technology-
Volume 1. Association for Computational Linguis-
tics.
Zhang, Yuqi, Richard Zens, and Hermann Ney. 2007.
Chunk-level reordering of source language sen-
tences with automatically learned rules for sta-
tistical machine translation Proceedings of the
NAACL-HLT 2007/AMTA Workshop on Syntax
and Structure in Statistical Translation. Association
for Computational Linguistics
Collins, Michael, Philipp Koehn, and Ivona Ku
?
cerova
2005 Clause restructuring for statistical machine
translation. Proceedings of the 43rd annual meeting
on association for computational linguistics. Asso-
ciation for Computational Linguistics
96
