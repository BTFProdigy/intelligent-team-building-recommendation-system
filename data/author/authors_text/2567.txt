R. Dale et al (Eds.): IJCNLP 2005, LNAI 3651, pp. 438 ? 449, 2005. 
? Springer-Verlag Berlin Heidelberg 2005 
A Rule Based Syllabification Algorithm for Sinhala 
Ruvan Weerasinghe, Asanka Wasala, and Kumudu Gamage 
Language Technology Research Laboratory, University of Colombo School of Computing,  
35, Reid Avenue, Colombo 7, Sri Lanka 
arw@ucsc.cmb.ac.lk, {awasala, kgamage}@webmail.cmb.ac.lk 
Abstract. This paper presents a study of Sinhala syllable structure and an algo-
rithm for identifying syllables in Sinhala words. After a thorough study of the 
Syllable structure and linguistic rules for syllabification of Sinhala words and a 
survey of the relevant literature, a set of rules was identified and implemented 
as a simple, easy-to-implement algorithm. The algorithm was tested using 
30,000 distinct words obtained from a corpus and compared with the same 
words manually syllabified. The algorithm performs with 99.95 % accuracy. 
1   Introduction 
Syllabification algorithms are mainly used in text-to-speech (TTS) systems in produc-
ing natural sounding speech, and in speech recognizers in detecting out-of-vocabulary 
words. The key objectives of this study are to identify the syllable structures in modern 
Sinhala language and to define an algorithm to syllabify a given Sinhala word to be 
used in our TTS system. Syllabification algorithms have been proposed for different 
languages including English, German, Spanish and Hindi, among others. Although a 
few researchers have documented attempts at syllabifying modern Sinhala words in the 
Linguistics literature, this is the first known documented algorithm for Sinhala syllabi-
fication and certainly the first evaluation of any syllabification scheme for Sinhala. 
Languages differ considerably in the syllable structures that they permit. For most 
languages, syllabification can be achieved by writing a set of declarative grammatical 
rules which explain the location of syllable boundaries of words step-by-step. It has 
been identified that most of these rules adhere to well known theories such as the 
Maximum Onset Principle and the Sonority Profile. The association of consonants 
with the syllable nucleus is derived by the Maximum Onset Principle (MOP). 
Maximum Onset Principal: First make the onset as long as it legitimately can be; then 
form a legitimate coda [2].  
Sonority Profile: The sonority of a syllable increases from the beginning of the sylla-
ble onward, and decreases from the beginning of the peak onwards [2]. 
Sonority is related to the acoustic intensity of a sound. Thus, by measuring the 
acoustic intensities of sounds, the sonority of a sound can be estimated [1]. The 
classes of vowel and consonant sounds (segments) that are usually distinguished 
along this dimension are listed in the order of increasing sonority, and this list is re-
ferred to as the Sonority Scale [2]. 
 A Rule Based Syllabification Algorithm for Sinhala 439 
Sonority Scale:  
Obstruents ? Nasals ? Liquids ([l, r] etc.) ? Glides ([w, j]) etc.) ? Vowels 
Many syllabification algorithms have been developed based on these two theories. 
For example, the Festival Speech Synthesis System (the framework we use in our 
Sinhala TTS) by default syllabifies words by finding the minimum sonorant position 
between vowels [3]. Another sonority scale based syllabification algorithm is pre-
sented in detail in [4]. The sonority theory of the syllable does not, however, account 
for all the phenomena observed in language. Many examples have been provided in 
the literature to demonstrate this [1], [2]. To avoid the difficulties encountered when 
using the sonority profile, most of the language specific syllabication schemes are 
modeled by using finite state machines or neural networks. A multilingual syllabifica-
tion algorithm using weighted finite-state transducers has been proposed in [5]. 
In this research, an algorithm to divide Sinhala words into syllables is proposed. 
The algorithm was tested by using a text corpus containing representative words for 
each grammatical rule, and its performance was then measured in terms of the per-
centage of correctly syllabified words. The rest of this paper is organized as follows: 
Section 2 gives an overview of the Sinhala Phonemic Inventory and Section 3 briefly 
reviews the linguistic background of modern Sinhala word syllabification including 
issues we identified and our proposed solutions. Section 4 describes the implementa-
tion of the algorithm. The paper concludes with the results & discussion in Section 5. 
2   The Sinhala Phonemic Inventory 
Sinhala is one of the official languages of Sri Lanka and the mother tongue of the ma-
jority (about 74%) of its population. Spoken Sinhala contains 40 segmental pho-
nemes; 14 vowels and 26 consonants as classified below in Table 1 and Table 2 [6]. 
There are two nasalized vowels occurring in two or three words in Sinhala. They are 
/a ~/, /a~:/, /?~/, and /?~~:/ [6]. Spoken Sinhala also contains the following Diph-
thongs, /iu/, /eu/, /?u/, /ou/, /au/, /ui/, /ei/, /?i/, /oi/, and /ai/ [7]. 
A separate letter for vowel /\/ has not been provided by the Sinhala writing sys-
tem. In terms of distribution, the vowel /\/ does not occur at the beginning of a syl-
lable except in the conjugational variants of verbs formed from the verbal stem 
/k\r\/ (to do.). In contrast to this, though the letter ? ? exists in Sinhala writing sys-
tem (corresponding to the consonant sound /j~/), it is not considered a phoneme in 
Sinhala.  
Table 1. Spoken Sinhala vowel classification 
Front  Central Back 
 
Short Long Short Long Short Long 
High i      i:       u     u:     
Mid e    e:   \ \: o     o:     
Low ?   ?:   a a:   
?
440 R. Weerasinghe, A. Wasala, and K. Gamage 
Table 2. Spoken Sinhala consonant classification 
 
Labial Dental Alveolar Retroflex Palatal Velar Glottal 
Voiceless p    t      ?      k      Stops 
 Voiced b    d     ?      ?      
Voiceless     c      Affricates 
Voiced     j       
Pre-nasalized 
voiced stops 
b~    d~     ?~      ~?      
Nasals m    n      ?    ?      
Trill   r         
Lateral   l         
Spirants f     s       s`    h    
Semivowels v       y      
3   Syllable Structure  
3.1   Methodology 
The methodology adopted in this study was to first examine the Sinhala syllable struc-
ture from the Linguistics literature to gather the views of scholars from the various 
linguistic traditions. It was expected that this study would reveal the main issues re-
lated to the syllabification of Sinhala and how these issues are addressed by scholars 
in the literature. This was then subjected to the scrutiny of an algorithm in order to se-
lect from among alternative theories. 
3.2   Sinhala Syllable Structure 
3.2.1   Background 
Words in the Sinhala language can be divided in to three groups namely Nishpanna, 
Thadbhava and Thathsama as described below: 
Nishpanna: Words that are of local origin.  
Thathsama: Words borrowed from other languages in their (near) original form.  
Thadbhava: Words derived from other languages but modified to be incorporated to 
Sinhala (mainly from Sanskrit and Pali). 
The high impact of Sanskrit in Sinhala vocabulary formation is due to the fact that, 
Sinhala and Sanskrit belong to the same Indo-Aryan language family. Further, as the 
vehicle of Buddhism to Sri Lanka, the Pali (spoken) language has also significantly 
influenced the vocabulary of Sinhala. Due to various cultural, historical and socio-
linguistic factors, other languages such as Tamil, Portuguese, Dutch and English have 
also impacted the structure and vocabulary of Sinhala.  
It is important to note that the Thathsama, and Thadbhava, categories of words are 
available in modern Sinhala and are indistinguishable to the layman from words in  
the Nishpanna Category. While no documented evidence exists, it is thought that the 
 A Rule Based Syllabification Algorithm for Sinhala 441 
percentage of words in the Nispanna category is less than 5%, while the percentage of 
words in the Thathsama and Thadbhava categories in Sinhala (the remaining > 95%), 
are more or less equal.  However, for words in the Thathsama and Thadbhava catego-
ries, no official syllable structures were found in literature. This puts the onus on any 
TTS researcher dealing with Sinhala syllabification to pay urgent attention to the 
study of the Thathsama and Thadbhava categories of words. 
3.2.2   Syllabification of Words Belonging to the Nishpanna Category 
It has been identified that there are four legal syllable structures in Sinhala, namely V, 
VC, CV and CVC for words which belong to the Nishpanna category [7]. This can 
also be represented using the expression: (C)V(C). Though a large number of exam-
ples for syllabified words belonging to each of the above structures are presented in 
the literature [7], the methodology or grammatical rules describing how to syllabify a 
given word has not been presented. A word can be syllabified in many ways retaining 
the permitted structures, but only a single correct combination of structures is ac-
cepted in a properly syllabified word.  
For example, a word having the consonant-vowel structure VCVCVC can be syl-
labified in the following different ways, retaining the valid syllable structures de-
scribed in the literature: (V)(CVC)(VC), (VC)(VC)(VC), (VC)(V)(CVC). However, 
only one of these forms represents the properly syllabified word. 
The determination of a proper mechanism leading to the identification of the cor-
rect combination and sequence of syllable structures in syllabifying a given word be-
came the major challenge in this research.  
Further review of the literature and empirical observation led to the following 
model with regard to Sinhala syllabification; 
1. A fundamental assumption that the accurately syllabified form of a word can be 
uniquely obtained by formulating a set of rules. 
2. That the following set of rules can be empirically shown to be effective. 
Syllabification Procedure for the Nishpanna Category 
a. Reach the first vowel of the given word and then, 
1. If the phoneme next to this vowel is a consonant followed by another vowel, 
then mark the syllable boundary just after the first vowel. (Rule #1) 
i.e. a word having a consonant-vowel structure xVCV? Should be syllabified 
as (xV)(CV?), where x denotes either a single consonant or zero consonant. 
2. If the phoneme next to this vowel is a consonant followed by another consonant 
and a vowel, then mark the syllable boundary just after the first consonant. 
(Rule #2) 
i.e. a word having a consonant-vowel structure xVCCV? should be syllabified 
as (xVC)(CV?), where x denotes either a single consonant or zero consonant. 
3. If the phoneme next to this vowel is another vowel, then mark the syllable 
boundary just after the first vowel. (Rule #3) 
i.e. a word having a consonant-vowel structure xVV? should be syllabified as 
(xV)(V?), where x denotes either a single consonant or zero consonant. Only a 
few words were found in Sinhala having two consecutive vowels in a single 
word. e.g. ?giriullt\? (Name of city.), ?aa:v\? (Alphabet). The syllable structure 
(V) mostly occurs at the beginning of the word, except for this type of rare word. 
442 R. Weerasinghe, A. Wasala, and K. Gamage 
b. Having marked the first syllable boundary, continue the same procedure for the  
rest of the phonemes as in the case of a new word. 
i.e. Repeat the step (a) for the rest of the word, until the whole word is syllabified. 
The accuracy of this model was first tested by calculating the syllable boundaries 
using the examples given in the literature. Convinced that the results were consistent 
with the descriptive treatment of the subject in the literature, it was concluded that the 
above set of rules could describe an accurate syllabification algorithm for words be-
longing to the Nishpanna category. 
3.2.3   Syllabification of Words of the Thathsama and Thadbhava Categories 
In the syllabification of foreign words, it has been observed that words borrowed from 
Sanskrit play a major role compared to those borrowed from other languages. The rea-
son behind this is the presence of a large number of Sanskrit words in Sinhala (about 
75% of the Thathsama category [8]), and the complexity of codas and onsets of these 
words when they intermix with the Sinhala phonetic inventory. Defining proper syl-
labic structures for words borrowed or derived from Sanskrit therefore became a pri-
mary focus in this study due to this reason. For this purpose, a carefully chosen list of 
words in this category (see Appendix A) was presented to recognized scholars of Sin-
hala and Sanskrit for syllabification and recommendations. A careful analysis of the in-
formation and views gathered, led to the identification of a new set of rules distinct 
from those defined in previous section, on how to syllabify these borrowed Sanskrit 
words. It is proposed that Syllabic structures for words originating from Sanskrit can 
be represented using the consonant-vowel pattern (C)(C)(C)V(C)(C)(C). It is also 
noteworthy to mention that the syllabic structures for words belong to the category of 
Nishpanna i.e. (C)V(C) is in fact a subset of this structure.  
Languages are unique in syllable structures. Syllabification of words belonging to 
the categories of Thathsama and Thadbhava do not completely adhere to the syllabi-
fication rules imposed in the language from which the word originated. Syllabifica-
tion of such words will naturally be altered according to the phonetic inventory and 
existing syllable structures of the host language, Sinhala in this case. This view was 
expressed by all of the scholars whom we consulted regarding the syllabification of 
foreign words. In support of this observation, it was evident that the syllabification of 
almost all  the words borrowed from languages other than Sanskrit (e.g. Pali, Tamil 
and English) are also consistent with the above set of syllabification rules and syllabic 
structures produced by them. An algorithm to capture this feature of the language is 
presented below: 
Syllabification Procedure for Thathsama and Thadbhava Category 
a. Reach the first vowel of the given word and then, 
1. If the vowel is preceded by a consonant cluster of 3, followed by a vowel, 
? If the consonant preceded by the last vowel is /r/ or /y/ then mark the syl-
lable boundary after the first consonant of the consonant cluster. (Rule #4) 
i.e. a word having a consonant-vowel structure xVCC[/r/ or /y/]V.., 
should be syllabified as (xVC)(C[/r/ or /y/]V?), where x denotes zero or 
any number of consonants.  
 A Rule Based Syllabification Algorithm for Sinhala 443 
? In the above rule, if the consonant preceded by the last vowel is a phoneme 
other than /r/ or /y/ then,  
? If the first two consonants in the consonant cluster are both stop conso-
nants, then mark the syllable boundary after the first consonant of the con-
sonant cluster. (Rule #5) 
i.e. a word having a consonant-vowel structure xV[C-Stop][C-Stop]CV..., 
should be syllabified as (xVC)(CCV...), where x denotes zero or any number 
of consonants. 
? In other situations, mark the syllable boundary after the second consonant 
of the consonant cluster. (Rule #6) 
i.e. a word having a consonant-vowel structure xVCCCV?, should be syl-
labified as (xVCC)(CV...), where x denotes zero or any number of conso-
nants. 
2. If  this vowel is preceded by a consonant cluster of more than  3 consonants ,  
? If the consonant just before the last vowel is /r/ or /y/ then, mark the syl-
lable boundary before 2 consonants from the last vowel. (Rule #7) 
i.e. a word having a consonant-vowel structure xVCCC?[/r/ or /y/]V... 
should be syllabified as (xVCCC?)(C[/r/ or /y/]V..), where x denotes 
zero or any number of consonants. 
? In other situations, mark the syllable boundary just after the minimum sono-
rant consonant phoneme of the consonant cluster. (Rule #8) 
i.e. a word having a consonant-vowel structure xVCCC?CV..., should be 
syllabified just next to the minimum sonorant consonant in the consonant 
cluster. 
b. Having marked the first syllable boundary, continue the same procedure for the  
rest of the phonemes as in a new word. 
i.e. Repeat the step (a) for the rest of the word, until the whole word is syllabified. 
The words with consonant clusters of more than 3 consonants are rarely found in 
Sinhala, and to avoid the confusion of syllabification of words in such situations, the 
algorithm makes use of the universal sonority hierarchy in deciding the proper posi-
tion to mark the syllable boundary. In these situations, the syllable boundary is 
marked next to the first occurrence of a minimum sonorant consonant. 
3.2.4   Ambisyllabic Words in Sinhala 
Some ambisyllabic words are also found in Sinhala. This situation arises due to the 
fact that some words with complex coda or onset can be syllabified in several ways.  
For example, a word such as /sampre:k?\n\/ (transmit)  the /p/ can be interpreted 
as a coda with respect to the preceding vowel, as in /samp/re:k/?\/n\/or as an on-
set with respect to the following vowel, as in /sam/pre:k/?\/n\/. 
More examples for this kind of word include, /mats/y\/, /mat/sy\/ (fish); 
 /sank/ya:/,  /san/kya:/ (number) and /lak?/y\/,/lak/?y\/(point). 
Some Sanskrit loan words in Sinhala (including word internal clusters ending in /r/ 
and preceding a vowel) can either be syllabified by reduplicating the first consonant 
sound of the cluster or by retaining the original word as in the following examples. 
444 R. Weerasinghe, A. Wasala, and K. Gamage 
/kr\/mak/r\/m\/y\/? /kr\/mak/kr\/m\/y\/ (gradually) 
/ap/r\/ma:/n\/? /ap/pr\/ma:/n\/ (unlimited) 
/ja/yag/ra:/hi:/? /ja/yag/gra:/hi:/ (victory) 
This description demonstrates that the rules and procedures determined above are 
complied with even by ambisyllabic words. It is important to note that while both 
forms are acceptable, one of these will be provided by the algorithm stated above. 
4   The Syllabification Algorithm 
The rules identified in sections 3.2.2 and 3.2.3 are sensitive to the sequence since they 
interact with each other. In this section, the Sinhala syllabification rules identified 
above are presented in the form of a formal algorithm. The function syllabify() ac-
cepts an array of phonemes generated by our Letter-To-Sound module1 for a particular 
word, along with a variable called current_position which is used to determine the 
position of the given array currently being processed by the algorithm.  
Initially the current_position variable will be initialized to 0. The syllabify() func-
tion is called recursively until all phonemes in the array are processed. The function 
mark_syllable_boundary(postion) will mark the syllable boundaries of an accepted ar-
ray of phonemes. The other functions used within the syllabify() function are de-
scribed below. 
? no_of_vowels(phonemes): accepts an array of phonemes and returns the number of  
vowels contained in that array. 
? is_a_vowel(phoneme): accepts a phoneme and returns true if the given phoneme is 
a vowel. 
? count_no_of_consonants_upto_next_vowel(phonemes, position): accepts an array 
of phonemes and a starting position; and returns the count of consonants from the 
starting position of the given array until the next vowel is found. 
? is_a_stop(phoneme):   returns true if the accepted phoneme is a stop consonant. 
? find_min_sonority_position(phonemes, position): returns the minimum sonorant 
position of a given array of phonemes, by starting the search from the given  posi-
tion. 
A complete listing of the algorithm is provided in Appendix B. 
5   Results and Discussion 
Our algorithm was tested on 30,000 distinct words extracted from the (unbalanced) 
UCSC Sinhala Corpus BETA, and compared with correctly hand syllabified words. 
Text obtained from the category ?News Paper > Feature Auricles > Other? was cho-
sen for testing the algorithm due to the heterogeneous nature of these texts and hence 
the perceived better representation of the language in this section of the corpus2. A list 
                                                          
1
 Discussed in another paper in preparation. 
2
 This accounts for almost two-thirds of the size of this version of the corpus. 
 A Rule Based Syllabification Algorithm for Sinhala 445 
of distinct words was first extracted, and the 30,000 most frequently occurring words 
chosen for testing our algorithm.  
The 30,000 words yielded some 78,775 syllables which were distributed as follows 
among the 8 rules of the algorithm given: Rule #1: 67,350; Rule #2: 10,899; Rule #3: 
71; Rule #4: 324; Rule #5: 28; Rule #6: 77; Rule #7: 21 and Rule #*: 5. Note however 
that owing to the syllable structure of words in the Nishpanna category being a subset 
of those of the Thathsama and Thadbhava categories, nothing can be inferred about 
the actual percentages of words in each category from this analysis alone. 
The algorithm achieves an overall accuracy of 99.95% when compared with the 
same words manually syllabified by an expert. An error analysis revealed the follow-
ing two types of errors: 
1. Words composed by joining two or more words (i.e. Single words formed by com-
bining 2 or more distinct words; such as in the case of the English word  ?thereaf-
ter?). In this case, syllabification needs to be carried out separately for each word 
of the compound word, and then concatenated to form a single syllabified word. 
2. Foreign (mainly English) words directly encoded in Sinhala. 
A detailed study of Sinhala syllabification is presented in the research above. 
Though a great number of diverse algorithms have been proposed for syllabification 
in different languages, to the best of our knowledge this is the first such study for Sin-
hala syllabification proposing a formal algorithm describing the process.  The initial 
study of the literature revealed certain unresolved issues which this study resolved 
with the aid of scholars. A significant task was carried out in identifying valid syllable 
structures for words borrowed from Sanskrit.  A major effort was also made in identi-
fying and defining a formal set of linguistic rules for syllabification, and then translat-
ing same into a simple and easy-to-implement algorithm. Finally, the effectiveness of 
the proposed algorithm was demonstrated using a set of words extracted from a Sin-
hala corpus. 
Syllabification is an important component of many speech and language processing 
systems, and this algorithm is expected to be a significant contribution to the field, 
and especially to researchers working on various aspects of the Sinhala language. 
Acknowledgement 
This work has been supported through the PAN Localization Project, (http://www. 
PANL10n.net) grant from the International Development Research Center (IDRC), 
Ottawa, Canada, administered through the Center for Research in Urdu Language 
Processing, National University of Computer and Emerging Sciences, Pakistan. The 
authors are indebted to Sinhala Language scholars, Prof. Wimal G. Balagalle, Prof. 
S.A.G. Wijesinghe, Prof. R.M.W. Rajapaksha, and Prof. J.B. Dissanayake for their 
invaluable support and advice throughout the study. We also wish to acknowledge the 
contribution of Mr. Viraj Welgama, Mr. Dulip Herath, and Mr. Nishantha Medagoda 
of Language Technology Research Laboratory of the University of Colombo School 
of Computing, Sri Lanka. 
446 R. Weerasinghe, A. Wasala, and K. Gamage 
References 
1. Ladeforged, P., A Course In Phonetics, 3rd  edn., Harcourt Brace Jovanovich College Pub-
lishers, 301, Commerce Street, Suite 3700, Fort Worth TX 76102 (1993) 
2. Gussenhoven, C., Jacobs, H., Understanding Phonology, Oxford University Press Inc, 198, 
Madison Avenue, New York, NY 10016 (1998) 
3. Black, A.W., Taylor, P., Caley R., The Festival Speech Synthesis System: System Docu-
mentation, University of Edinburgh, Edinburgh (1999) 
4. Brasington, R., ?A simple syllabifier?, (LOGO and natural language), Available: 
http://www.personal.rdg.ac.uk/~llsling1/Logo.WWW/Sound.patterns/Simple.syllabifier.htm
l,(Accessed: 2005, February, 02) 
5. Kiraz, G.A., Mobius, B., "Multilingual Syllabification Using Weighted Finite-State Trans-
ducers", Bell Labs ? Lucent Technologies, Murray Hill, NJ 07974, USA, In Proceedings of 
the Third ESCA Workshop on Speech Synthesis (Jenolan Caves, Australia, 1998) (1998) 
6. Karunatillake, W.S., An introduction to spoken Sinhala, 3rd edn., M.D. Gunasena & Co. ltd., 
217, Olcott Mawatha, Colombo 11 (2004) 
7. Disanayaka, J.B., The structure of spoken Sinhala, National Institute of Education, Ma-
haragama (1991) 
8. Jayathilake, K., Nuthana Sinhala Vyakaranaye Mul Potha, Pradeepa Publications, 34/34, 
Lawyers? Office Complex, Colombo 12, (1991) 
Appendix A: Word-List 
   k u: t o: p a k k r \ m \ 
 
p r u t a g j a n \  
 
k r \ m a k k r \ m \ y e n  
 
s t r i: n 
 
v i d y a: j ? \ y a: 
 
k r u m i y a: 
 
p i: t t r u: n 
  s a u b a: g y \ 
 
k a: v y o: p \ d e: ? \ y \ 
 
a v i d y a: v \ 
 
p r a j ? a: v \ 
  k o ? s t a n t i n o: p \ l \ y \ 
 
s v a p  n \ 
 
? a l y \ k a r m \ 
 
p a: r l i m e: n t u w \ 
 
d v a n d v \ 
 
h \ r d \ s p a n d \ n \ y \ 
 
s a m p r e: k  ? \ n \ 
 
?  e: ? t r \ 
 
p r \ v u r t i 
 
p r \ v u r j ya: 
 A Rule Based Syllabification Algorithm for Sinhala 447 
 
p r \ ? r a b d i y \ 
 
s a n s k r u t\ 
springs s p r i ? g s  
scratched s k r ? c ? 
straights s t r e: i t s 
strength s t r e n t s 
postscript p o: s t s k r i p t 
area e: r i a: 
Appendix B: Syllabification Algorithm 
function syllabify (phonemes, current_position) 
 if no_of_vowels(phonemes) is 1 then  
  mark_syllable_boundary(at_the_end_of_phonemes) 
 else 
  if is_a_vowel(phonemes[current_position]) is true    
  then 
   no_of_consonants= 
   count_no_of_consonants_upto_next_vowel 
   (phonemes,current_position) 
   if no_of_consonants is 0 then 
    if is_a_vowel(phonemes[current_position+1]) is    
    true then 
     mark_syllable_boundary(current_position) % Rule#3 
     syllabify(phonemes, current_position+1) 
    end if 
   else  
    if no_of_consonants is 1 then 
     mark_syllable_boundary(current_position) % Rule#1 
     syllabify(phonemes, current_position+2) 
    end if 
    if no_of_consonants are 2 then 
     mark_syllable_boundary(current_position+1) 
     syllabify(phonemes, current_position+3) % Rule#2 
    end if 
    if no_of_consonants are 3 then 
448 R. Weerasinghe, A. Wasala, and K. Gamage 
     if phonemes[current_position+3] is 
     ( ?r? or ?y?) then  
       mark_syllable_boundary(current_position+1) 
       % Rule#4 
       syllabify(phonemes, current_position+4) 
     else 
   if is_a_stop(phonemes[current_posi+1]) is  
   true and is_a_stop(phonemes[current_posi+2])) is  
   true then 
       mark_syllable_boundary(current_position+1) 
      % Rule#5 
syllabify(phonemes, current_position+4)  
         else 
   mark_syllable_boundary(current_position+2) 
% Rule#6 
 syllabify(phonemes, current_position+4)  
 end if      
         end if 
        end if 
      if no_of_consonants are greater than 3 then 
       if phonemes[current_position+no_of_consonants]  
       is( ?r? or ?y?) then  
         mark_syllable_boundary 
         (current_position+no_of_consonants-2) % Rule#7 
         Syllabify 
         (phonemes, current_position  
         +no_of_consonants-1)       else 
        syllable_boundary=find_min_sonority_position 
                         (phonemes,current_postion) 
         mark_syllable_boundary(syllable_boundary) 
 % Rule#8 
         Syllabify 
         (phonemes, syllable_boundary+1)  
       end if 
      end if  
 A Rule Based Syllabification Algorithm for Sinhala 449 
     end if 
    else 
     temp=current_postion 
     repeat 
      temp = temp + 1; 
     until(is_a_vowel(phonemes[temp]) is true 
     syllabify(phonemes,temp) 
    end if 
 end if 
Proceedings of the COLING/ACL 2006 Main Conference Poster Sessions, pages 890?897,
Sydney, July 2006. c?2006 Association for Computational Linguistics
Sinhala Grapheme-to-Phoneme Conversion and  
Rules for Schwa Epenthesis 
 
 
Asanka Wasala, Ruvan Weerasinghe and Kumudu Gamage 
Language Technology Research Laboratory 
University of Colombo School of Computing 
35, Reid Avenue, Colombo 07, Sri Lanka 
{awasala,kgamage}@webmail.cmb.ac.lk, arw@ucsc.cmb.ac.lk 
 
  
 
Abstract 
This paper describes an architecture to 
convert Sinhala Unicode text into pho-
nemic specification of pronunciation. The 
study was mainly focused on disambigu-
ating schwa-/\/ and /a/ vowel epenthesis 
for consonants, which is one of the sig-
nificant problems found in Sinhala. This 
problem has been addressed by formulat-
ing a set of rules. The proposed set of 
rules was tested using 30,000 distinct 
words obtained from a corpus and com-
pared with the same words manually 
transcribed to phonemes by an expert. 
The Grapheme-to-Phoneme (G2P) con-
version model achieves 98 % accuracy. 
1 Introduction 
The conversion of Text-to-Speech (TTS) in-
volves many important processes. These proc-
esses can be divided mainly in to three parts; text 
analysis, linguistic analysis and waveform gen-
eration (Black and Lenzo, 2003). The text analy-
sis process is responsible for converting the non-
textual content into text. This process also in-
volves tokenization and normalization of the 
text. The identification of words or chunks of 
text is called text-tokenization. Text normaliza-
tion establishes the correct interpretation of the 
input text by expanding the abbreviations and 
acronyms. This is done by replacing the non-
alphabetic characters, numbers, and punctuation 
with appropriate text strings depending on the 
context. The linguistic analysis process involves 
finding the correct pronunciation of words, and 
assigning prosodic features (eg. phrasing, intona-
tion, stress) to the phonemic string to be spoken. 
The final process of a TTS system is waveform 
generation which involves the production of an 
acoustic digital signal using a particular synthesis 
approach such as formant synthesis, articulatory 
synthesis or waveform concatenation (Lemmetty, 
1999). The text analysis and linguistic analysis 
processes together are known as the Natural 
Language Processing (NLP) component, while 
the waveform generation process is known as the 
Digital Signal Processing (DSP) component of a 
TTS System (Dutoit, 1997). 
Finding correct pronunciation for a given 
word is one of the first and most significant tasks 
in the linguistic analysis process. The component 
which is responsible for this task in a TTS sys-
tem is often named the Grapheme-To-Phoneme 
(G2P), Text-to-Phone or Letter-To-Sound (LTS) 
conversion module. This module accepts a word 
and generates the corresponding phonemic tran-
scription. Further, this phonemic transcription 
can be annotated with appropriate prosodic 
markers (Syllables, Accents, Stress etc) as well. 
In this paper, we describe the implementation 
and evaluation of a G2P conversion model for a 
Sinhala TTS system. A Sinhala TTS system is 
being developed based on Festival, the open 
source speech synthesis framework. Letter to 
sound conversion for Sinhala usually has simple 
one to one mapping between orthography and 
phonemic transcription for most Sinhala letters. 
However some G2P conversion rules are pro-
posed in this paper to complement the generation 
of more accurate phonemic transcription. 
The rest of this paper is organized as follows: 
Section 2 gives an overview of the Sinhala pho-
nemic inventory and the Sinhala writing system, 
Section 3 briefly discusses G2P conversion ap-
proaches. Section 4 describes the schwa epenthe-
sis issue peculiar to Sinhala and Section 5 ex-
plains the Sinhala G2P conversion architecture. 
890
Section 6 gives experimental results and our dis-
cussion on it. The work is summarized in the 
final section. 
2 Sinhala Phonemic Inventory and 
Writing System 
2.1 The Sinhala Phonemic Inventory 
Sinhala is the official language of Sri Lanka and 
the mother tongue of the majority - 74% of its 
population. Spoken Sinhala contains 40 segmen-
tal phonemes; 14 vowels and 26 consonants as 
classified below in Table 1 and Table 2 (Ka-
runatillake, 2004). 
There are two nasalized vowels occurring in 
two or three words in Sinhala. They are /a~/, /a~:/, 
/?~/ and /?~~:/ (Karunatillake, 2004). Spoken Sin-
hala also has following Diphthongs; /iu/, /eu/, 
/?u/, /ou/, /au/, /ui/, /ei/, /?i/, /oi/ and /ai/  
(Disanayaka, 1991).  
 
Front Central Back  
Short Long Short Long Short Long 
High i     i:      u    u:    
Mid e   e:   \ \: o    o:     
Low ?   ?:   a a:   
 
Table 1. Spoken Sinhala Vowel Classification. 
 
 Lab.Den. Alv.Ret.Pal. Vel.Glo.
Voiceless p    t      ?     k     Stops 
 Voiced b    d    ?     ?     
Voiceless     c      
Affricates
Voiced     ?      
Pre-nasalized 
voiced stops 
b~   d~    ?~     ?~     
Nasals m    n     ?   ?     
Trill   r         
Lateral   l         
Spirants f     s       ?    h    
Semivowels w       j      
 
Table 2*. Spoken Sinhala Consonant  
Classification. 
 
A separate sign for vowel /\/ is not provided by 
the Sinhala writing system. In terms of distribu-
tion, the vowel /\/ does not occur at the begin-
ning of a syllable except in the conjugational 
variants of verbs formed from the verbal stem 
/k\r\/ (to do). In contrast to this, though the letter 
                                                 
* Lab. ? Labial, Den. ? Dental, Alv. ? Alveolar, Ret. ?
Retroflex, Pal. ? Palatal, Vel. ? Velar and Glo. ? Glottal. 
???, which symbolizes the consonant sound /?~/ 
exists, it is not considered a phoneme in Sinhala. 
2.2 The Sinhala Writing System 
The Sinhala character set has 18 vowels, and 42 
consonants as shown in Table 3. 
 
Vowels and corresponding vowel modifiers 
(within brackets): 
?  ?(??) ?(??)  ?(??) ?(?)? ?(?)? ?(?)? ?(?)? ?(??) 
?(??) ?(??) ?(??) ?(??) ?(???) ?(??) 
?(???)  ? (???)  ?(???) 
 
Consonants: 
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?? ??  
 
Special symbols: ??    ??     ?   ? 
Inherent vowel remover (Hal marker): ? ?  
 
Table 3. Sinhala Character Set. 
 
Sinhala characters are written left to right in 
horizontal lines. Words are delimited by a space 
in general. Vowels have corresponding full-
character forms when they appear in an absolute 
initial position of a word. In other positions, they 
appear as ?strokes? and, are used with consonants 
to denote vowel modifiers. All vowels except 
??? /iru:/, are able to occur in word initial posi-
tions (Disanayaka, 1995). The vowel /?/ and /?:/ 
occurs only in loan words of English origin. 
Since there are no special symbols to represent 
them, frequently the ??? vowel is used to sym-
bolize them (Karunatillake, 2004). 
All consonants occur in word initial position 
except /?/ and nasals (Disanayaka, 1995). The 
symbols ???, and ??? represent the retroflex 
nasal /?/ and the retroflex lateral /?/ respectively. 
But they are pronounced as their respective 
alveolar counterparts ???-/n/ and ???-/l/. 
Similarly, the symbol ??? representing the 
retroflex sibilant /?/, is pronounced as the palatal 
sibilant ???-/?/. The corresponding aspirated 
symbols of letters ?, ?, ?, ?, ?, ?, ?, ?, ?, ? 
namely ?, ?, ?, ?, ?, ?, ?, ?, ? respectively 
are pronounced like the corresponding un-
aspirates (Karunatillake, 2004). When conso-
nants are combined with /r/ or /j/, special con-
junct symbols are used. ????-/r/ immediately fol-
lowing a consonant can be marked by the symbol 
???? added to the bottom of the consonant preced-
ing it. Similarly, ????-/j/, immediately following 
consonant can be marked by the symbol ???? 
891
added to the right-hand side of the consonant 
preceding it (Karunatillake, 2004). ??? /ilu/ and 
??? /ilu:/ do not occur in contemporary Sinhala 
(Disanayaka, 1995). Though there are 60 sym-
bols in Sinhala (Disanayaka, 1995), only 42 
symbols are necessary to represent Spoken Sin-
hala (Karunatillake, 2004). 
3 G2P Conversion Approaches 
The issue of mapping textual content into pho-
nemic content is highly language dependent. 
Three main approaches of G2P conversion are; 
use of a pronunciation dictionary, use of well 
defined language-dependent rules and data-
driven methods (El-Imam and Don, 2005). 
One of the easiest ways of G2P conversion is 
the use of a lexicon or pronunciation dictionary. 
A lexicon consists of a large list of words to-
gether with their pronunciation. There are several 
limitations to the use of lexicons. It is practically 
impossible to construct such to cover the whole 
vocabulary of a language owing to Zipfian phe-
nomena. Though a large lexicon is constructed, 
one would face other limitations such as efficient 
access, memory storage etc. Most lexicons often 
do not include many proper names, and only 
very few provide pronunciations for abbrevia-
tions and acronyms. Only a few lexicons provide 
distinct entries for morphological productions of 
words. In addition, pronunciations of some 
words differ based on the context and their parts-
of-speech. Further, an enormous effort has to be 
made to develop a comprehensive lexicon. In 
practical scenarios, speech synthesizers as well 
as speech recognizers need to be able to produce 
the pronunciation of words that are not in the 
lexicon. Names, morphological productivity and 
numbers are the three most important cases that 
cause the use of lexica to be impractical (Juraf-
sky and Martin, 2000).  
To overcome these difficulties, rules can be 
specified on how letters can be mapped to pho-
nemes. In this way, the size of the lexicon can be 
reduced as only to contain exceptions to the 
rules. In contrast to the above fact, some systems 
rely on using very large lexicons, together with a 
set of letter-to-sound conversion rules to deal 
with words which are not found in the lexicon 
(Black and Lenzo, 2003). 
These language and context dependent rules 
are formulated using phonetic and linguistic 
knowledge of a particular language. The com-
plexity of devising a set of rules for a particular 
language is dependent on the degree of corre-
spondence between graphemes and phonemes. 
For some languages such as English and French, 
the relationship is complex and require large 
numbers of rules (El-Imam and Don, 2005; 
Damper et al, 1998), while some languages such 
as Urdu (Hussain, 2004), and Hindi (Ramakish-
nan et al, 2004; Choudhury, 2003) show regular 
behavior and thus pronunciation can be modeled 
by defining fairly regular simple rules. 
Data-driven methods are widely used to avoid 
tedious manual work involving the above ap-
proaches. In these methods, G2P rules are cap-
tured by means of various machine learning 
techniques based on a large amount of training 
data. Most previous data-driven approaches have 
been used for English. Widely used data-driven 
approaches include, Pronunciation by Analogy 
(PbA), Neural Networks (Damper et al, 1998), 
and Finite-State-Machines (Jurafsky and Martin, 
2000). Black et al (1998) discussed a method for 
building general letter-to-sound rules suitable for 
any language, based on training a CART ? deci-
sion tree. 
4 Schwa Epenthesis in Sinhala 
G2P conversion problems encountered in Sinhala 
are similar to those encountered in the Hindi lan-
guage (Ramakishnan et al, 2004). All consonant 
graphemes in Sinhala are associated with an in-
herent vowel schwa-/?/ or /a/ which is not repre-
sented in orthography. Vowels other than /?/ and 
/a/ are represented in orthographic text by plac-
ing specific vowel modifier diacritics around the 
consonant grapheme. In the absence of any 
vowel modifier for a particular consonant graph-
eme, there is an ambiguity of associating /?/ or 
/a/ as the vowel modifier. The inherent vowel 
association in Sinhala can be distinguished from 
Hindi. In Hindi the only possible association is 
schwa vowel where as in Sinhala either of 
vowel-/a/ or schwa-/?/ can be associated with a 
consonant. Native Sinhala speakers are naturally 
capable of choosing the association of the appro-
priate vowel (/?/ or /a/) in context. Moreover, 
linguistic rules describing the transformation of 
G2P, is rarely found in literature, with available 
literature not providing any precise procedure 
suitable for G2P conversion of contemporary 
Sinhala. Automating the G2P conversion process 
is a difficult task due to the ambiguity of choos-
ing between /?/ and /a/. 
A similar phenomenon is observed in Hindi 
and Malay as well. In Hindi, the ?deletion of the 
schwa vowel (in some cases)? is successfully 
892
solved by using rule based algorithms (Choud-
hury 2003; Ramakishnan et al, 2004). In Malay, 
the character ?e? can be pronounced as either 
vowel /e/ or /?/, and rule based algorithms are 
used to address this ambiguity (El-Imam and 
Don, 2005). 
In our research, a set of rules is proposed to 
disambiguate epenthesis of /a/ and /?/, when as-
sociating with consonants. Unlike in Hindi, in 
Sinhala, the schwa is not deleted, instead always 
inserted. Hence, this process is named ?Schwa 
Epenthesis? in this paper. 
5 Sinhala G2P Conversion Architecture 
An architecture is proposed to convert Sinhala 
Unicode text into phonemes encompassing a set 
of rules to handle schwa epenthesis. The G2P 
architecture developed for Sinhala is identical to 
the Hindi G2P architecture (Ramakishnan et al, 
2004). The input to the system is normalized 
Sinhala Unicode text. The G2P engine first maps 
all characters in the input word into correspond-
ing phonemes by using the letter-to-phoneme 
mapping table below (Table 4).  
 
?  /a/ ? ,???  /o/ ? /?~/ ? /f/ 
?,?? /a:/ ?,??? /o:/ ?,? /t/ ?? /ru:/ 
?,?? /?/ ?,??? /ou/ ?,? /d/    
?,?? /?:/ ?,? /k/ ? /d~/   
? ,? ? /i/ ?,? /?/ ?,? /p/   
?,? ? /i:/ ?,??  /?/ ?,? /b/   
?,? ? /u/ ? /?~/ ? /m/   
?.? ? /u:/ ?,? /c/ ? /b~/   
??  /ri/ ?,? /?/ ? /j/   
??  /ru/ ? /?/ ? /r/   
? /ilu/ ? /j?/ ?,? /l/   
? /ilu:/ ? /?~/ ? /w/   
? ,??  /e/ ?,? /?/ ?,? /?/   
?,??? /e:/ ?,? /?/ ? /s/   
?,?? /ai/ ?,? /n/ ?,?? /h/   
 
Table 4. G2P Mapping Table 
 
The mapping procedure is given in section 5.1. 
Then, a set of rules are applied to this phonemic 
string in a specific order to obtain a more accu-
rate version. This phonemic string is then com-
pared with the entries in the exception lexicon. If 
a matching entry is found, the correct pronuncia-
tion form of the text is obtained from the lexicon, 
otherwise the resultant phonemic string is re-
turned. Hence, the final output of G2P model is 
the phonemic transcription of the input text. 
5.1 G2P Mapping Procedure 
Each tokenized word represented by Unicode 
normalization form is analyzed by individual 
graphemes from left to right. By using the G2P 
mapping table (Table 4), corresponding pho-
nemes are obtained. As in the given example   
Figure 1, no mappings are required for the Zero-
Width-Joiner and diacritic Hal marker ???? (Ha-
lant) which is used to remove the inherent vowel 
in a consonant. 
 
  
  
  
  
  
  
  
  
  
Figure 1. G2P Mapping (Example). 
 
The next step is epenthesis of schwa-/?/ for 
consonants. In Sinhala, the tendency of associat-
ing a /?/ with consonant is very much higher than 
associating vowel /a/. Therefore, initially, all 
plausible consonants are associated with /?/. To 
obtain the accurate pronunciation, the assigned 
/?/ is altered to /a/ or vice versa by applying the 
set of rules given in next section. However, when 
associating /?/ with consonants, /?/ should asso-
ciate only with consonant graphemes excluding 
the graphemes ????, ??? and ????, which do not 
contain any vowel modifier or diacritic Hal 
marker. In the above example, only /n/ and first 
/j/ are associated with schwa, because other con-
sonants violate the above principle. When schwa 
is associated with appropriate consonants, the 
resultant phonemic string for the given example 
(section 5.1) is; /n?mj?ji/. 
5.2 G2P Conversion Rules 
It is observed that resultant phoneme strings 
from the above procedure should undergo several 
modifications in terms of schwa assignments into 
vowel /a/ or vice versa, in order to obtain the ac-
curate pronunciation of a particular word. 
Guided by the literature (Karunatillake, 2004), it 
was noticed that these modifications can be car-
ried out by formulating a set of rules.  
The G2P rules were formulated with the aid of 
phonological rules described in the linguistic 
literature (Karunatillake, 2004) and by a com-
prehensive word search analysis using the UCSC 
893
Sinhala corpus BETA (2005). Some of these ex-
isting phonological rules were altered in order to 
reflect the observations made in the corpus word 
analysis and to achieve more accurate results. 
The proposed new set of rules is empirically 
shown to be effective and can be conveniently 
implemented using regular expressions. 
Each rule given below is applied from left to 
right, and the presented order of the rules is to be 
preserved. Except for rule #1, rule #5, rule #6 
and rule #8, all other rules are applied repeatedly 
many times to a single word until the conditions 
presented in the rules are satisfied. 
Rule #1: If the nucleus of the first syllable is a 
schwa, the schwa should be replaced by vowel 
/a/ (Karunatillake, 2004), except in the following 
situations;   
(a) The syllable starts with /s/  followed by /v/.   
(ie. /sv/)  
(b) The first syllable starts with /k/ where as, 
/k/ is followed by /?/ and subsequently /?/ is pre-
ceded by /r/.  (ie. /k?r/) 
(c) The word consists of a single syllable having 
CV structure (eg. /d?/ ?) 
Rule #2: 
(a) If /r/ is preceded by any consonant, followed 
by /?/ and subsequently followed by /h/, then /?/ 
should be replaced by /a/. 
(/[consonant]r?h/->/[consonant]rah/ ) 
(b) If /r/ is preceded by any consonant, followed 
by /?/ and subsequently followed by any conso-
nant other than /h/, then /?/ should be replaced by 
/a/. 
(/[consonant]r?[!h]/->/[consonant]ra[!h]/ ) 
(c) If /r/ is preceded by any consonant, followed 
by /a/ and subsequently followed by any conso-
nant other than /h/, then /a/ should be replaced by 
/?/. 
(/[consonant]ra[!h]/->/[consonant]r?!h]/) 
(d) If /r/ is preceded by any consonant, followed 
by /a/ and subsequently followed by /h/, then /a/ 
is retained. 
(/[consonant]ra[h]/->/[consonant]ra[h]/) 
Rule #3: If any vowel in the set {/a/, /e/, /?/, /o/, 
/\/} is followed by /h/ and subsequently /h/ is 
preceded by schwa, then schwa should replaced 
by vowel /a/. 
Rule #4: If schwa is followed by a consonant 
cluster, the schwa should be replaced by /a/ (Ka-
runatillake, 2004). 
Rule #5: If /?/ is followed by the word final con-
sonant, it should be replaced by /a/, except in the 
situations where the word final consonant is /r/, 
/b/, /?/ or /?/. 
Rule #6: At the end of a word, if schwa precedes 
the phoneme sequence /ji/, the schwa should be 
replaced by /a/ (Karunatillake, 2004). 
Rule #7: If the /k/ is followed by schwa, and 
subsequent phonemes are /r/ or /l/ followed by 
/u/, then schwa should be replaced by phoneme 
/a/. (ie. /k?(r|l)u/->/ka(r|l)u/) 
Rule #8: Within the given context of following 
words, /a/ found in phoneme sequence /kal/, (the 
left hand side of the arrow) should be changed to 
/?/ as shown in the right hand side.  
? /kal(a:|e:|o:)y/->/k?l(a:|e:|o:)y/ 
? /kale(m|h)(u|i)/->/k?le(m|h)(u|i)/ 
? /kal?h(u|i)/->/k?leh(u|i)/ 
? /kal?/->/k?l?/ 
The above rules handle the schwa epenthesis 
problem. The corresponding diphthongs (refer 
section 2) are then obtained by processing the 
resultant phonetized string. This string is again 
analyzed from left to right, and the phoneme se-
quences given in the first column of Table 5 are 
replaced by the diphthong, represented in the 
second column. 
 
Phoneme Sequence Diphthong 
/i/ /w/ /u/ /iu/ 
/e/ /w/ /u/   /eu/ 
/?/ /w/ /u/ /?u/ 
/o/ /w/ /u/   /ou/ 
/a/ /w/ /u/  /au/ 
/u/ /j/ /i/   /ui/ 
/e/ /j/ /i/   /ei/ 
/?/ /j/ /i/   /?i/ 
/o/ /j/ /i/   /oi/ 
/a/ /j/ /i/   /ai/ 
 
Table 5. Diphthong Mapping Table. 
 
The application of the above rules for the 
given example (section 5.1) is illustrated in Fig-
ure 2. 
 
 
Figure 2. Application of G2P Rules ? An Exam-
ple. 
894
6  Results and Discussion 
Text obtained from the category ?News Paper> 
Feature Articles > Other? of the UCSC Sinhala 
corpus was chosen for testing due to the hetero-
geneous nature of these texts and hence per-
ceived better representation of the language in 
this part of the corpus*. A list of distinct words 
was first extracted, and the 30,000 most fre-
quently occurring words chosen for testing.  
The overall accuracy of our G2P module was 
calculated at 98%, in comparison with the same 
words correctly transcribed by an expert.  
Since this is the first known documented work 
on implementing a G2P scheme for Sinhala, its 
contribution to the existing body of knowledge is 
difficult to evaluate. However, an experiment 
was conducted in order to arrive at an approxi-
mation of the scale of this contribution. 
It was first necessary, to define a baseline 
against which this work could be measured. 
While this could be done by giving a single de-
fault letter-to-sound mapping for any Sinhala 
letter, owing to the near universal application of 
rule #1 in Sinhala words (22766 of the 30000 
words used in testing), the baseline was defined 
by  the application of this rule in addition to the 
?default mapping?. This baseline gives us an er-
ror of approximately 24%. Since the proposed 
solution reduces this error to 2%, this work can 
claim to have improved performance by 22%. 
An error analysis revealed the following types 
of errors (Table 6): 
 
Error description # of 
words 
Compound words- (ie. Single words 
formed by combining 2 or more distinct 
words; such as in the case of the English 
word ?thereafter?).  
382 
 
Foreign (mainly English) words directly 
encoded in Sinhala. eg. ????? - fashion, 
??????? - campus. 
116 
Other  118 
 
Table 6. Types of Errors. 
 
The errors categorized as ?Other? are given 
below with clarifications: 
? The modifier used to denote long vowel 
??? /a:/ is ???? which is known as ?Aela-
pilla?. eg. consonant ???? /k/ associates 
with ???? /a:/ to produce grapheme ???? is 
pronounced as /ka:/. The above exercise 
                                                 
* This accounts for almost two-thirds of the size of this ver-
sion of the corpus. 
revealed some 37 words end without 
vowel modifier ????, but are usually pro-
nounced with the associated long vowel 
/a:/. In the following examples, each input 
word is listed first, followed by the erro-
neous output of G2P conversion, and cor-
rect transcription.   
??????(mother) -> /amm?/ -> /amma:/ 
??????(sister) -> /akk?/ -> /akka:/ 
??????(taken)-> /gatt?/ -> /gatta:/ 
? There were 27 words associated with er-
roneous conversion of words having the 
letter ???, which corresponds to phoneme 
/h/. The study revealed this letter shows an 
unusual behavior in G2P conversion. 
? The modifier used to denote vowel ??? 
- ???? is known as ?Geta-pilla?. When 
this vowel appears as the initial letter of a 
word, it is pronounced as /ri/ as in ???? 
/rin?/ (minus). When the corresponding 
vowel modifier appears in a middle of a 
word most of the time it is pronounced as 
/ru/ (Disanayaka, 2000). eg. ??????? 
(book)is pronounced as /krutij?/, ???????? 
(surface) - /pru??\j\/, ?????????? (excel-
lent)-/utkru??\/. But 13 words were found 
as exceptions of this general rule. In those 
words, the ???? is pronounced as /ur/ 
rather than /ru/. eg. ????????? (news)- 
/pr?wurti/,?????????(prosperity)-/samurdi/, 
??????? (opened) - /wiwurt?/. 
? In general, vowel modifiers ???? (Adha-
pilla), ???? (Diga Adha-pilla) symbolizes 
the vowel ??? /?/ and ??? /?:/ respec-
tively. eg. consonant ???? /k/ combines 
with vowel modifier ???? to create ???? 
which is pronounced as /k?/. Few words 
were found where this rule is violated. In 
such words, the vowel modifiers ???? and  
???? represent vowels ???- /u/, and ???- 
/u:/ respectively.  eg. ???????? (legend) - 
/?an??ruti/, ????? (cruel) - /kru:r\/.  
? The verbal stem ???? (to do) is pro-
nounced as /k?r?/. Though there are many 
words starting with the same verbal stem, 
there are a few other words differently 
pronounced as /kar?/ or /kara/. eg. 
???????? (cart) /karatt?y?/, ?????? 
(dried fish)  /kar?v?l?/. 
895
? A few of the remaining errors are due to 
homographs; ???? - /van?/, /v?n?/; ???? 
-/kal?/, /k?l?/; ????  - /kar?/, /k?r?/. 
The above error analysis itself shows that the 
model can be extended. Failures in the current 
model are mostly due to compound words and 
foreign words directly encoded in Sinhala 
(1.66%). The accuracy of the G2P model can be 
increased significantly by incorporating a 
method to identify compound words and tran-
scribe them accurately. If the constituent words 
of a compound word can be identified and sepa-
rated, the same set of rules can be applied for 
each constituent word, and the resultant pho-
netized strings combined to obtain the correct 
pronunciation. The same problem is observed in 
the Hindi language too. Ramakishnan et al 
(2004) proposed a procedure for extracting com-
pound words from a Hindi corpus. The utiliza-
tion of compound word lexicon in their rule-
based G2P conversion module improved the ac-
curacy of G2P conversion by 1.6% (Ramakish-
nan et al, 2004). In our architecture, the most 
frequently occurring compound words and for-
eign words are dealt with the aid of an excep-
tions lexicon. Homographs are also disambigu-
ated using the most frequently occurring words 
in Sinhala. Future improvements of the architec-
ture will include incorporation of a compound 
word identification and phonetization module.  
7 Conclusion 
In this paper, the problem of Sinhala grapheme-
to-phoneme conversion is addressed with a spe-
cial focus on dealing with the schwa epenthesis. 
The proposed G2P conversion mechanism will 
be useful in various applications in the speech 
domain. To the best of our knowledge no other 
documented evidence has been reported for Sin-
hala grapheme-to-phoneme conversion in the 
literature. There are no other approaches avail-
able for the transcription of Sinhala text that pro-
vides a platform for comparison of the proposed 
rule-based method. The empirical evidence from 
a wide spectrum Sinhala corpus indicates that the 
proposed model can account for nearly 98% of 
cases accurately. 
The proposed G2P module is fully imple-
mented in Sinhala TTS being developed at Lan-
guage Technology Research Lab, UCSC. A 
demonstration tool of the proposed G2P module 
integrated with Sinhala syllabification algorithm 
proposed by Weerasinghe et al (2005) is avail-
able for download from: 
http://www.ucsc.cmb.ac.lk/ltrl/downloads.html 
Acknowledgement 
This work has been supported through the PAN 
Localization Project, (http://www.PANL10n.net) 
grant from the International Development Re-
search Center (IDRC), Ottawa, Canada, adminis-
tered through the Center for Research in Urdu 
Language Processing, National University of 
Computer and Emerging Sciences, Pakistan. The 
authors would like to thank Sinhala Language 
scholars Prof. R.M.W. Rajapaksha, and Prof. J.B. 
Dissanayake for their invaluable support and ad-
vice throughout the study. Special thanks to Dr. 
Sarmad Hussain (NUCES, Pakistan) for his 
guidance and advices. We also wish to acknowl-
edge the contribution of Mr. Viraj Welgama, Mr. 
Dulip Herath, and Mr. Nishantha Medagoda of 
Language Technology Research Laboratory of 
the University of Colombo School of Comput-
ing, Sri Lanka. 
References 
Alan W. Black and Kevin A. Lenzo. 2003. Building 
Synthetic Voices, Language Technologies Insti-
tute, Carnegie Mellon University and Cepstral 
LLC. Retrieved from http://festvox.org/bsv/ 
Alan W. Black, Kevin Lenzo, and Vincent Pagel. 
1998. Issues in Building General Letter to Sound 
Rules. In Proc. of the 3rd ESCA Workshop on 
Speech Synthesis, pages 77?80. 
Monojit Choudhury. 2003. Rule-Based Grapheme to 
Phoneme Mapping for Hindi Speech Synthesis, 
presented at the 90th Indian Science Congress 
of the International Speech Communication 
Association (ISCA), Bangalore. 
R.I. Damper, Y. Marchand, M.J. Adamson and K. 
Gustafson. 1998. Comparative Evaluation of Let-
ter-to-Sound Conversion Techniques for English 
Text-to-Speech Synthesis. In Proc. Third 
ESCA/COCOSDA Workshop on Speech Syn-
thesis, pages 53- 58, Blue Mountains, NSW, Aus-
tralia. 
J.B. Disanayaka. 1991. The Structure of Spoken 
Sinhala, National Institute of Education, Ma-
haragama.  
J.B. Disanayaka. 2000. Basaka Mahima: 2, Akuru 
ha pili, S. Godage & Bros., 661, P. D. S. 
Kularathna Mawatha, Colombo 10. 
J.B. Disanayaka. 1995. Grammar of Contemporary 
Literary Sinhala - Introduction to Grammar, 
896
Structure of Spoken Sinhala, S. Godage & Bros., 
661, P. D. S. Kularathna Mawatha, Colombo 10. 
T. Dutoit. 1997.  An Introduction to Text-to-
Speech Synthesis, Kluwer Academic Publishers, 
Dordrecht,  Netherlands. 
Yousif A. El-Imam and Zuraidah M. Don. 2005. 
Rules and Algorithms for Phonetic Transcription of 
Standard Malay, IEICE Trans Inf & Syst, E88-D 
2354-2372. 
Sarmad Hussain. 2004. Letter-to-Sound Conversion 
for Urdu Text-to-Speech System, Proceedings of 
Workshop on "Computational Approaches to 
Arabic Script-based Languages," COLING 
2004, p. 74-49, Geneva, Switzerland. 
Daniel Jurafsky and James H. Martin. 2000. Speech 
and Language Processing: An Introduction to 
Natural Language Processing, Computational 
Linguistics, and Speech Recognition. Pearson 
Education (Singapore) Pte. Ltd, Indian Branch, 482 
F.I.E. Patparganj, Delhi 110 092, India. 
W.S. Karunatillake. 2004. An Introduction to Spo-
ken Sinhala, 3rd  edn., M.D. Gunasena & Co. ltd., 
217, Olcott Mawatha, Colombo 11. 
Sami Lemmetty. 1999. Review of Speech Synthesis 
Technology, MSc. thesis, Helsinki University of 
Technology. 
A.G. Ramakishnan, Kalika Bali, Partha Pratim Taluk-
dar N. and Sridhar Krishna. 2004. Tools for the 
Development of a Hindi Speech Synthesis System, 
In 5th ISCA Speech Synthesis Workshop, Pitts-
burgh. pages 109-114. 
Ruvan Weerasinghe, Asanka Wasala and Kumudu 
Gamage. 2005. A Rule Based Syllabification Algo-
rithm for Sinhala, Proceedings of 2nd Interna-
tional Joint Conference on Natural Language 
Processing (IJCNLP-05), p. 438-449, Jeju Is-
land, Korea. 
UCSC Sinhala Corpus BETA. 2005. Retrieved Au-
gust 30, 2005, from University of Colombo School 
of Computing, Language Technology Research 
Laboratory Web site: 
http://www.ucsc.cmb.ac.lk/ltrl/downloads.html 
 
897
