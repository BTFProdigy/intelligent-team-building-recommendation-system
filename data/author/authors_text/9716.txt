A linguistic and navigational knowledge approach to text navigation 
Javier Couto 
Facultad de Ingenier?a - UdelaR 
Julio Herrera y Reissig 565 
11300 ? Montevideo ? Uruguay 
jcouto@fing.edu.uy 
Jean-Luc Minel 
MoDyCO, UMR 7114 CNRS ? Univ. Paris X 
200, avenue de la R?publique 
92 001 ? Nanterre ? France 
jminel@u-paris10.fr 
Abstract 
We present an approach to text navigation 
conceived as a cognitive process exploiting 
linguistic information present in texts. We 
claim that the navigational knowledge in-
volved in this process can be modeled in a 
declarative way with the Sextant language. 
Since Sextant refers exhaustively to specific 
linguistic phenomena, we have defined a 
customized text representation. These dif-
ferent components are implemented in the 
text navigation system NaviTexte. Two ap-
plications of NaviTexte are described. 
1 Introduction 
Text navigation has several interpretations. Usu-
ally, this term refers to hypertext systems, which 
offer the possibility to activate hyperlinks, moving 
the reading point from a text unit (source) to an-
other one (target), this change being intra or inter-
textual. From our point of view, this conception 
presents some limitations. First, the hyperlink acti-
vation is not assisted. In other words, imprecise, 
poor or no information is provided to the reader 
before s/he activates the link. Second, the reader 
does not know where the movement will be carried 
out in the text (before or after the reading point or 
outside the text), which generates the ?lost in 
hyperspace? problem (Edwards and Hardman 
1989). Finally, hyperlinks are embedded in the hy-
pertext. Therefore, there is no clearly distinction 
between text constituents and navigation knowl-
edge. In addition, by not explicitly modeling this 
knowledge, it is not reusable. 
Different solutions have been proposed to ad-
dress the problems mentioned. Some researchers 
(Danielson, 2002) have tried to mitigate the lost in 
hyperspace problem offering global maps where 
the reading point is clearly identified. Adaptive 
hypertext (Mathe and Chen, 1994; Brusilovsky, 
1996) relying on user model, proposes to modify 
the way the text is shown on the screen. Dynamic 
hypertext (Bodner and Chignell, 1999) computes 
the value of hyperlinks using several criteria such 
as text similarity or predefined relations. In this 
approach, a hyperlink is defined as a query return-
ing a text node. 
In some way, our conception of text navigation 
is related to the notion of computed query, but 
rather than taking into account criteria depending 
on the reader, the target is computed by exploiting 
linguistic information in texts. Moreover, the que-
ries are not placed in texts but they are encapsu-
lated as knowledge by a specific language (Sex-
tant), which allows isolating the navigational 
knowledge to create knowledge bases. Both texts 
and queries (navigational knowledge) are inter-
preted by NaviTexte, which manages the interac-
tions with a reader. 
The remainder of this paper is organized as fol-
lows. In the next section, we discuss our approach 
to text navigation. The third section describes a 
navigational knowledge modeling language called 
Sextant. The fourth section details the text naviga-
tion system NaviTexte. The fifth section describes 
two applications of NaviTexte. Then we address 
the evaluation aspects of our approach. At last, 
conclusions are presented. 
2 Defining text navigation 
Our conception of text navigation lies in the 
hypothesis that navigating through texts is the 
expression of a cognitive process related to specific 
knowledge (Minel, 2003; Couto and Minel, 2006). 
More precisely: we claim that a reader moves 
through texts applying some knowledge to exploit 
linguistic information present in texts (e.g. 
discursive markers). Moreover, we claim that this 
667
knowledge may be articulated in a declarative way 
(cf. Sec. 3) relying on information in texts coded, 
on the one hand, by its structure, and, on the other 
hand, by specific annotations. 
The main difference between classic hypertext 
and our conception of navigation lies on the status 
of texts and on the definition of navigational 
knowledge. In the case of hypertext, the visualiza-
tion of a text is unique and navigational knowledge 
is encoded (embedded) in the text. In our approach, 
there are several ways to visualize a text (Couto, 
2006), each way called text view, and for each 
view, different navigational knowledge may be 
defined. As a consequence, the navigation is not 
guided by the author, compared to hypertext navi-
gation where s/he determines the links, but it is the 
result of an interpretation process made by the 
reader, relying on text structure and annotations. 
 
Figure 1. Elements of text navigation. 
Our conception of navigation (cf. Fig.1) relies on 
four elements: i) a text representation allowing lin-
guistic specific phenomena and annotations (see 
Couto, 2006); ii) a language to model navigational 
knowledge (cf. Sec. 3); iii) an agent (an individual 
or a software) able to encode such knowledge; iv) a 
system, called NaviTexte, to interpret and apply 
knowledge to a specific text (cf. Sec. 4). 
3 Modeling navigational knowledge: the 
Sextant language 
To allow the unambiguous isolation of navigational 
knowledge we need a formal modeling language. 
We want to model the knowledge applied by a 
reader to move through texts, claiming that this 
knowledge exploits linguistic information present 
in texts. We do not say that this is the only way a 
reader may move through texts (e.g. strolling 
courses proposed by G?ry (2002) is a counterex-
ample), but we say that this is the kind of way than 
we are going to model. Different views of a text 
and the fact that each view contains specific indica-
tions of the possible reading courses constitute the 
heart of the language. 
3.1 Knowledge modules ant text views 
A text view may be a full view or a partial view 
focused in some specific phenomena present in the 
text (for example a view of all discourse referents). 
The constituent elements of a view are formalized 
in a view description, which contains the type of 
view, its parameters, the creation constraints (i.e. 
conditions to verify by the TU of the view) and the 
navigation operations (see next section). At pre-
sent, four types of view have been defined: plain-
text, tree, graph and temporality. The three firsts 
types are described in (Couto, 2006). The last one 
graphically represents temporality in texts and a 
complete description is in (Battistelli et al, 2006). 
Several view descriptions may be gathered by 
the encoder in an entity called navigational knowl-
edge module. The creation of a view may be con-
ceptualized as the application of a view description 
to a specific text. Thus, the application of a module 
implies the creation of a set of text views. 
3.2 The navigation operation 
The notion of computed query mentioned in sec-
tion 1 is formalized in Sextant as a navigation op-
eration, which links a source TU to a target TU. In 
classic hypertext systems one must explicitly con-
nect the specific source to the specific target. For 
example, if a reader wants, for all definitions in a 
scientific paper, to move from one to the following 
one, several hyperlinks must be defined. In our ap-
proach we specify the source and the target using 
conditions. As a result, we can abstract, for exam-
ple, the navigational knowledge that states ?go 
from one definition to the following one?, being 
?definition? one of the TU annotations. 
We can specify several conditions for the source 
and the target. We say that a navigation operation 
is available for a TU if this TU verifies the source 
conditions. A text navigation system should find 
the TU that verifies the target conditions. As sev-
eral TU in the text may verify them, we need a way 
of disambiguation. This is done by the orientation 
parameter, which specifies the direction of the tar-
get search by using one of these options: first, last, 
forward(i), backward(i). First and last indicate that 
the search of the target is absolute: the TU to select 
668
will be the first (respectively the last) TU that ver-
ify the conditions. Forward(i) and backward(i) in-
dicate that the search is carried out relatively to the 
source (before or after) and indexed by the integer i. 
For example, ?forward(3)? is interpreted as the 
third TU, after the source, of all the TU verifying 
the target conditions. 
3.3 The conditions language 
The conditions language is an important compo-
nent of Sextant ant it is composed by basic condi-
tions, TU elements existence conditions, hierarchi-
cal conditions and non-hierarchical conditions. 
Basic conditions concern TU?s attributes and 
annotations. For this kind of condition we use a 
notation close to the pattern notion. We define an 
operator called TU, having five operands that cor-
respond to the following properties: type, number, 
level, annotations and string. With the three first 
operands and the fifth one, we denote constraints of 
equality, inequality, order, prefix, suffix and sub-
string occurrence. The fourth operand is used to 
indicate the existence or non-existence of annota-
tions, whether it is an annotation name, a value or a 
name-value pair. 
For TU elements existence conditions, we define 
operators without operands to verify if a TU has 
annotations, string, title, parent and children. 
For conditions dealing with hierarchical rela-
tionship between different TU, a set of unary op-
erators have been defined, taking a basic condition 
as an argument. For example, the isAscendant op-
erator verifies if a TU is the ascendant of another 
TU specified by a basic condition. The other opera-
tors are: isParent, isChild, isSibling, isDescendant, 
hasInTitle, isInTitle. We would like to draw atten-
tion to the fact that these operators allow to move 
through the hierarchy of TU from a starting TU 
(Couto, 2006). 
Non-hierarchical conditions concern constructed 
units? attributes and annotations as well as TU con-
stitution. 
All conditions may be combined using the clas-
sic logic operators OR, AND and NOT. Figure 2 
presents an example of a language expression that 
formulates the following condition: TU of type 
?NP?, having an annotation of name ?discourse 
referent?, for which it exists, among its descen-
dants, a TU of type ?paragraph? not having an an-
notation of name ?semantic label? whose value is 
?conclusion?.  
TU(type = NP, *,*,{(discourse referent, *)},*) AND 
isDescendant(TU(type = paragraphe,*,*, {???(semantic 
label, conclusion)},*)) 
Figure 2. Conditions language example. 
This condition means: noun phrases being a dis-
course referent that does not occur in a concluding 
paragraph. 
4 NaviTexte: a text navigation system 
Several adaptive navigation systems have been 
proposed (Benyon and Murray, 1993; Kaplan et al, 
1993; Boyle and Encarnacion, 1994; Brusilovsky 
and Pesin, 1994; Brusilovsky et al, 1996). While 
they are goal specific (learning, tutoring, reading, 
etc.), NaviTexte (Couto, 2006) is a generic text 
navigation system implementing our approach. 
This means that, depending on texts and knowledge 
modules, NaviTexte may be used, for example, as a 
learning, tutoring or reading system. Another im-
portant difference is that NaviTexte gives the user 
the liberty to navigate through the text following its 
own interests (the system propose - the reader 
chooses), while the mentioned systems try to main-
tain a user stuck to a given route (the user chooses - 
the system propose) (H??k and Svensson, 1999). 
NaviTexte consists of sub-systems dealing with: 
text representation, navigational knowledge, visual 
representation and user interaction. The first one 
builds a text representation in memory from a text 
annotated manually or by dedicated software (Cun-
ningham et al, 2002; Bilhaut et al, 2003). The 
second sub-system loads and compiles the knowl-
edge modules. The result of this compilation is a 
graph of potential navigation courses that in prac-
tice is calculated as needed and stored in optimiza-
tion data structures. The third sub-system calcu-
lates and displays different text views and the 
fourth one manages the user interaction. 
The reader has the possibility to load and unload 
several texts and knowledge modules in the same 
work session. A complete description of NaviTexte 
may be found in (Couto, 2006). 
5 Applications of NaviTexte 
Building an application with NaviTexte requires a 
set of texts and navigational knowledge modules. 
Both text representation and Sextant language have 
XML implementations with dedicated editors to 
669
use in case of a manual text annotation and a hu-
man knowledge encoder, respectively (cf. Fig.1). 
So far four applications have been developed: al-
ternative automatic summarization (Couto and 
Minel, 2006), the NaviLire project (Couto et al, 
2005; Lunquist et al, 2006), re-reading Madame 
Bovary (Couto and Minel, 2006) and temporality in 
texts (Battistelli et al, 2006). We present two of 
them to illustrate NaviTexte?s potential. 
5.1 NaviLire: a text linguistics application 
For the past thirty years, text linguistic researchers 
have worked on describing linguistic markers of 
textual coherence in order to bring out principles of 
text structuring (Lundquist, 1980). A set of con-
cepts and models of textual interpretation has been 
worked out, including for example, anaphora, con-
nectors, mental spaces, etc. In particular, these 
studies have shown that even for languages appar-
ently close like French and Danish, texts are not 
organized in the same way (Lundquist, 2005). Con-
sequently, text linguistics has important implica-
tions in foreign language teaching, especially from 
a contrastive point of view, when language pairs 
are analyzed through texts used in authentic com-
munication situations. It seems that the teaching of 
text linguistics contributes to sharpen the attention 
of students towards the building of well-formed 
texts and to stimulate their own text production. 
Therefore, a tool that allows the student to perceive 
text units that contribute to and maintain text co-
herence and to navigate between them, can be sup-
posed to be an important didactic tool for teaching 
reading of foreign language texts, as well as pro-
ducing written texts in the foreign language.  
In the reading process, the student has to deal 
with two basic types of cognitive problems. First, 
s/he has to identify discourse referents in a text and 
choose the correct relations between the noun 
phrases that refer to them. Second, s/he has to iden-
tify the function and orientation intended by the 
sender. In the NaviLire project, navigation opera-
tions assisting the student are defined used Sextant 
and the texts are manually annotated by a text lin-
guistics expert. 
5.2 Navigation as an alternative to automatic 
summarization 
Many automatic summarization systems have been 
proposed (Mani, 2001; Minel, 2003). All these sys-
tems, based on the principle of phrase, proposition 
or group extraction, have been confronted to two 
problems intrinsic to the extraction procedure: i) 
the rupture of text cohesion, like in cases of anaph-
ora where the corresponding discourse referent is 
missing; ii) the adaptation of the summary to reader 
specific needs. Actually, there are no completely 
satisfying solutions to these problems. An alterna-
tive approach is to consider the summarizing proc-
ess as a reading course belonging to the reader 
(Crispino and Couto, 2004). Thereby, instead of 
extracting text fragments, we propose specific 
reading courses, whose specifications are based on 
propositions of (Endres-Niggermeyer et al, 1995) 
and on practice observations made in the frame of 
the automatic summarization system SERAPHIN 
evaluation (Minel et al, 1997) and the Filtext 
framework (Minel et al, 2001). 
These works showed that professional summar-
izers are interested by discourse categories that 
they retrieve by exploiting text organization and 
lexical markers. They also showed that these pro-
fessionals navigate through texts using heuristics 
acquired by experience. For example, they begin 
by reading the conclusion, and then they continue 
by looking, in the introduction, for nominal groups 
that occurred in the conclusion. This is the knowl-
edge we have modeled with Sextant. 
A specific reading course specifies, on the one 
hand, the kind of discursive category searched by a 
reader (e.g. a conclusion, a definition, an argument, 
a hypothesis, etc. 1 ) and on the other hand, the 
course in which the segments that linguistically 
enunciate these categories (typically phrases) must 
be presented to the reader. 
To carry out these reading courses, it is neces-
sary to locate the discursive categories involved 
and mark them in the text. For this purpose, we 
used ContextO (Minel et al, 2001). A reading 
course example is presented in Fig. 3. The reading 
point is positioned over the first TU, a phrase in 
this case, annotated ?Thematic Announcement?. 
When the user clicks over the TU, NaviTexte rec-
ommends her/him four navigation operations. The 
first one suggests bringing her/him to the following 
?Thematic Announcement?. The others ones sug-
gest going to the first ?Conclusion?, the first ?Re-
capitulation? and the first ?Argument?. For a given 
TU, each navigation operation available has three 
                                                 
1For more details on different categories or on what empirical 
basis were these types derived, see (Minel et al, 2001). 
670
possible states (and there is a visual semantic asso-
ciated to states), depending if it has been executed 
(bold font and ?*? prefix) or not (normal font and 
no prefix), and if it exists a TU target (clickable 
menu option) or not (non-clickable menu option). 
 
Figure 3. Automatic summarization courses. 
 
These kinds of suggestions (i.e. showing avail-
able navigation operations for a TU) are made all 
over the reading process. Consequently, along 
her/his reading continuum, the reader is assisted by 
the display of a specific set of signs, and there is no 
rupture of cohesion because s/he is able to continu-
ally see all the text (Battistelli and Minel, 2006). 
6 Evaluations 
There are few studies of adaptive navigation in hy-
permedia systems and most of them are focused in 
measures such as the number of visited nodes or 
the task completion time (H??k and Svensson, 
1999). Are we interested in this kind of measures? 
Being NaviTexte a generic text navigation system, 
we think that what it has to be evaluated are the 
different applications. Each application requires 
pertinent measures. For example, in NaviLire, the 
number of nodes or the time factor seems less use-
ful that the comprehension of the text analyzed.  
So far, NaviLire has been put into practice on a 
small scale only, viz. in the teaching of French 
texts and text linguistics to Danish language stu-
dents in the 4th year of Language and Communica-
tion studies at the Copenhagen Business School. A 
pilot experiment was carried out in order to evalu-
ate the effects of using the program.  
The first results are based on forty answers, of 
which 35 concern questions about the content of 
the text. These results show that the navilistes 
(people using NaviLire) have a better comprehen-
sion performance than the papiristes (people using 
paper and pencil) for 14 questions, an identical per-
formance for 16 other questions, and a poorer per-
formance for 5 questions (cf. Table 1). 
 #questions % 
Navilistes better than Papiristes 14 40 
Navilistes the same as Papiristes 16 45,7 
Navilistes worse than Papiristes 5 14,3 
Total 35 100 
Table 1. Comparison of navilistes and papiristes 
(Lundquist et al, 2006) 
Evaluations of the alternative automatic summa-
rization approach are ongoing. Our main problem 
is that automatic summarization evaluations, well 
known as difficult to carry out, typically compare 
to summaries made by professional summarizers 
(Mani, 2001; Minel, 2003). On the one hand, since 
we do not create a summary, we do not have an 
object to compare. On the other hand, since we 
have modeled the professional heuristics, we can-
not compare the behavior of our system to theirs 
because it is exactly what it has been modeled. 
7 Conclusions and future work 
We have presented our approach to text navigation 
conceived as a cognitive process that exploits lin-
guistic information present in texts. We have de-
fined it and explained the main differences with the 
hypertext navigation approach. The four elements 
needed to implement our approach are described: a 
text representation, the navigation knowledge mod-
eling language Sextant, the knowledge encoding 
agents (via applications) and the NaviTexte system. 
Two distinct applications of NaviTexte have 
been presented, showing the versatility of our ap-
proach. The quantitative results of our experimen-
tation with Danish students learning French con-
firm the improvement obtained by using text navi-
gation.  
A long term consequence of modeling naviga-
tional knowledge is the creation of knowledge 
bases exchangeable and reusable. Actual collabora-
tions are reusing the knowledge coming from the 
NaviLire project into others e-learning projects. 
We think that our approach may have a signifi-
cant impact on the way text is being read when its 
amount or nature does not allow sequential reading 
(e.g. the Web). Related to last works in Web Wise, 
we plan to couple our approach to Semantic Web 
approaches to exploit existing annotations. 
671
Acknowledgments 
NaviTexte is supported by a grant (U05H01) from 
Ecos-Sud Program. 
References 
Battistelli D. and Minel J.-L. 2006. Les syst?mes de 
r?sum? automatique: comment assurer une continuit? 
r?f?rentielle dans la lecture des textes, in Sabah (Ed.), 
Compr?hension des langues et interaction, 295-330. 
Battistelli D., Minel J-L and Schwer S. 2006, Repr?sen-
tation des expressions calendaires dans les textes: 
vers une application ? la lecture assist?e de biogra-
phies. Revue TAL, 47(3): 1-26. 
Benyon D. and Murray D. 1993. Developing Adaptive 
Systems to Fit Individual Aptitudes, In W.D.Gray, 
W.E., Helfley and D.Murray (eds.), Proceedings of 
the 1993 International Workshop on IUI, 115-122. 
Orlando, FL., New York, ACM Press. 
Bilhaut F., Ho-Dac M., Borillo A., Charnois T., Enjal-
bert P., Le Draoulec A., Mathet Y., Miguet H., Pery-
Woodley M.P. and Sarda L. 2003. Indexation discur-
sive pour la navigation. intradocumentaire: cadres 
temporels et spatiaux dans l?information g?ographi-
que. Actes de TALN 2003, 315-320. 
Bodner R. and Chignell M. 1999. Dynamic hypertext: 
querying and linking, ACM Computing Surveys, 
31(4): 120-132. 
Boyle C. and Encarnacion A. 1994. MetaDoc: An Adap-
tive Hypertext Reading System, UMUAI, 4: 1-19. 
Brusilovsky P. 1996. Methods and techniques of adap-
tive hypermedia . UMUAI, 6(2-3): 87-129. 
Brusilovsky P. and Pesin L. 1994. ISIS-Tutor: An adap-
tive hypertext learning environment. In H.Ueono & 
V.Stefanuk (eds.), Proceedings of JCKBSE?94. 
Brusilovsky P., Schwartz E. and Weber G. 1996. ELM-
ART: An Intelligent Tutoring System on World Wide 
Web, ITS?96, Berlin, Springer, 261-269. 
Couto J. 2006. Mod?lisation des connaissances pour une 
navigation textuelle assist?e. La plate-forme logicielle 
NaviTexte. PhD, Universit? Paris-Sorbonne. 
Couto J., Lundquist L., Minel J.-L. 2005. Naviguer pour 
apprendre. EIAH 2005, Montpellier, 45-56. 
Couto J. and Minel J-L. 2006. Navigation textuelle: Re-
pr?sentation des textes et des connaissances, Revue 
TAL, 47(2): 1-24, Herm?s, Paris. 
Crispino G. and Couto J. 2004. Construction automati-
que de r?sum?s. Une approche dynamique. Revue 
TAL, 45(1): 95-120, Herm?s, Paris. 
Cunningham, H., Maynard, D., Bontcheva, K. and Tab-
lan, V. 2002. GATE: A Framework and Graphical 
Development Environment for Robust NLP Tools 
and Applications, ACL?02, ACM Press, 168-175. 
Danielson D.R. 2002. Web navigation and the be-
havorial effects of constantly visible maps, Interact-
ing with Computers, 14: 601-618. 
Edwards D.M. and Hardman L. 1989. Lost in hyper-
space: cognitive mapping and navigation in a hyper-
text environment, in Hypertext: Theory and Practice. 
Oxford, Intellect Books, 105-125. 
Endres-Niggemeyer B., Maier E. and Sigel A. 1995. 
How to implement a naturalistic model of abstracting: 
four core working steps of an expert abstractor, In-
formation Processing et Management, 31(5): 631-674 
G?ry M. 2002. Un mod?le d?hyperdocument en contexte 
pour la recherche d?information structur?e sur le 
Web. Revue des Sciences et Technologies de 
l?Information, 7/2002, Herm?s, Paris, 11-44. 
H??k K. and Svensson M. 1999. Evaluating Adaptive 
Navigation Support. In: Social Navigation of Infor-
mation Space. Springer Verlag, 240-251. 
Kaplan C., Fenwick J. and Chen J. 1993. Adaptive Hy-
pertext Navigation Based On User Goals and Con-
text, UMUAI, 3, 193-220. 
Lundquist L. 1980. La coh?rence textuelle, syntaxe, s?-
mantique, pragmatique, Copenhagen, Nordisk Forlag. 
Lundquist L. 2005. Noms, verbes et anaphores 
(in)fid?les. Pourquoi les Danois sont plus fid?les que 
les Fran?ais. Langue fran?aise. Vol 145: 73-92. 
Lundquist L., Minel J.L. and Couto J. 2006. NaviLire, 
Teaching French by Navigating in Texts, 
IPMU?2006, Paris. 
Mani I. 2001. Automatic Summarization, Amsterdam, 
John Benjamins Publishing Company. 
Mathe N. and Chen J. 1994. A User-Centered Approach 
to Adaptive Hypertext based on an Information Rele-
vance Model, UM'94, Hyannis, MA, 107-114. 
Minel J.-L, Cartier E., Crispino G., Descl?s J.P., Ben 
Hazez S. and Jackiewicz A. 2001. R?sum? automati-
que par filtrage s?mantique d?informations dans des 
textes, Pr?sentation de la plate-forme FilText. Tech-
nique et Science Informatiques, n?3: 369-396. 
Minel J-L. 2003. Filtrage s?mantique. Du r?sum? ? la 
fouille de textes. Paris, Herm?s. 
Minel, J-L., Nugier, S. and Piat, G. 1997. How to appre-
ciate the Quality of Automatic Text Summarization. 
EACL 97, Madrid, 25-30. 
672
Representing and Visualizing
Calendar Expressions in Texts
Delphine Battistelli
Univ. Paris-Sorbonne (France)
email: Delphine.Battistelli@paris-sorbonne.fr
Javier Couto
INCO, FING, UdelaR (Uruguay)
email: jcouto@fing.edu.uy
Jean-Luc Minel
MoDyCo, CNRS-Univ. ParisX (France)
email: Jean-Luc.Minel@u-paris10.fr
Sylviane R. Schwer
LIPN, CNRS-Univ. ParisXIII (France)
email: Sylviane.Schwer@lipn.univ-paris13.fr
Abstract
Temporal expressions that refer to a part of a calendar area in terms of
common calendar divisions are studied. Our claim is that such a ?cal-
endar expression" (CE) can be described by a succession of operators
operating on a calendar base (CB). These operators are categorized: a
pointing operator that transform a CB into a CE; a focalizing/shifting op-
erator that reduces or shifts the CE into another CE, and finally a zoning
operator that provides the wanted CE from this last CE. Relying on these
operators, a set of annotations is presented which are used to automat-
ically annotate biographic texts. A software application, plugged in the
platformNavitext, is described that builds a calendar view of a biographic
text.
365
366 Battistelli, Couto, Minel, and Schwer
1 Introduction
Taking into account temporality expressed in texts appears as fundamental, not only
in a perspective of global processing of documents, but also in the analysis of the
structure of a document.1 The analysis of temporality within texts has been studied
principally by considering verbal times (e.g. Song and Cohen (1991); Hitzeman et al
(1995) and temporal adverbials (see below).
Our approach is focused on temporal adverbials ? in French ? that refer directly
to text units concerning common calendar divisions, that we name ?calendar expres-
sions? (CEs for short). Several analyses of this kind of expressions has generated
a lot of interest, ranging from their automatic recognition and annotation in texts to
their analysis in terms of discursive frames (Charolles, 1997; Tannen, 1997), following
work of Halliday (1994) which put the emphasis on the importance of the temporal
adverbial expressions as modes of discursive organization.
Nowadays, in the field of temporality processing, automatic identification and an-
notation tasks of CEs are the most developed, mainly because identifying and anno-
tating expressions which contain calendar units are considered? a priori ? as trivial
tasks. Those tasks have been particularly explored in three contexts:
1. Systems which aim to set events on a time scale depending on their duration
and according to a hierarchy of unities called granularities (Schilder and Habel,
2001);
2. Systems for summarizing multi-documents (Barzilay et al, 2001); and
3. QA systems (Pustejovsky et al, 1993; Harabagiu and Bejan, 2005).
Please note that the proposition of the well-known standard temporalmeta-language
named TimeML (Pustejovsky et al, 2003) initially took place in the context of a QA
systems worshop (Pustejovsky, 2002), and mainly integrates two schemes of annota-
tions ? namely TIDES TIMEX2 (Ferro et al, 2004) and Sheffield STAG (Setzer and
Gaizauskas, 2000) ? which were essentially put forward from the analysis of CEs.
In this paper, we propose a formal description of CEs in written French texts, by ex-
plicitly distinguishing several classes of linguistic markers which must be interpreted
as successive operators. This work is driven in order to propose a set of fine and
well-defined annotations which will be used to navigate temporally in an annotated
document. Our approach differs from the preceding ones in two crucial ways:
? Our goal is not to link a CE to an event, neither to fix it on a ?temporal line",
using a set of values relying on ISO 8601 standard format (Mani and Wilson,
2000; Setzer and Gaizauskas, 2000; Filatova and Hovy, 2001); instead our goal
is to link CEs between themselves, that is to say to establish their qualitative
relative positions (the set of those relations is named ?proper text calendar?);
? We design CE semantics as algebraic expressions.
1This research is funded with an ANR grant (Projet Blanc Conique).
Representing and Visualizing Calendar Expressions in Texts 367
The remainder of this paper is organized as follows. In the next section, we in-
troduce an algebra of CEs. In Section 3 we describe a software application, which
exploits functional representation, built with previous way exhibited operators and
plugged in the NaviTexte platform, aiming to support text reading. Finally, conclu-
sions and future research directions are presented in Section 4.
2 An Algebra for Calendar Expressions
We postulate that a CE, say E , used to refer to a calendar area can be described by a
succession of operators applied on an argument, named calendar base (CB), say B,
that bears a granulariry and a value for anchoring allowing fixing it in the calendar
system used and that gives access at the calendar area described by the CE.
Each operator gives a piece of the processing following a specific order: on B is
applied a pointing operation, usually expressed by a determinant, whose result is an
CE, E1 part of E . On E1 is applied a second kind of operator expressing the useful
part of this base (all, the beginning, the middle, the end, a fuzzy area around) given as
result a new CE E2 which is part of E and is associated with a piece of the calendar
that cuts the time line in three areas (illustrated by Figure 1):
? the former half-line (A),
? the Useful portion (U),
? posterior half-line (P)2.
The useful part can also be obtained either by shifting, like in ?trois semaines plus
tard" (three weeks later), or by zooming, as in ?l?automne de cette ann?e l?" (the au-
tumn of this present year).3 A third kind of operator gives access at the area described
by the complete CE E: selecting one of the three portioned areas, like in ?jusqu?en
avril 2006" (until April 2006).
Figure 1: Partition of the time line for a unary CE
The order of operators is the following: a pointing operator OpPointing, followed
by one or more focalising or shifting operatorsOpFocalising/Shi f ting+ and finally at
least one zoning operator OpZoning?.4 Some operators can be omitted, usually when
2This Time line is pragmatically limited bounded. For instance, (P) can be naturally limited by the
present moment, as we do in Figure 1.
3For such deictic CEs, the CB has the granularity year, and the value current.
4Usually one, but we also can find two zoning operators, for instance in ?jusqu?? avant No?l (until before
Christmas"). In this case, the order of the operators is more constraint than the order of Focalising/Shifting
operators. Therefore we use the ? symbol instead of +
368 Battistelli, Couto, Minel, and Schwer
they do not provide any new information. In sum, the representation of CEs has the
following generic form: OpZoning?(OpFocalising/Shi f ting+(OpPoin-ting(CB)).
For instance, let us analyse the CE E=?Avant le d?but de la fin de l?ann?e 2008"
(before the beginning of the end of the year 2008). B=?ann?e 2008". Firstly, the
operator of pointing, triggered by the identification of ?l?" (the contraction of ?le")
is applied, given E1=L?ann?e 2008".5 Secondly, two operators of focalising/shifting
are applied successively: the first one triggered by ?la fin de" , provides E ?2 and the
second one, triggered by ?le d?but de", provides E2. Finally an operator of zoning is
associated with ?avant", provided E . Consequently, the CE ?avant le d?but de la fin
de l?ann?e 2008" is produced as avant (le d?but de (la fin de(l?(ann?e 2008)))). The
sequence of this CE is depicted and visualized in Figure 2.
Figure 2: Computation of ?avant le d?but de la fin de l?ann?e 2008"
Each operator is characterized by its arity (the number of its arguments) and type.
With regard to arity, in this paper we focus on unary operators.
2.1 Unary operators
Three types of operators have been defined: pointing, focalising/shifting and zoning.
The pointing operator is trivial (it transforms B into a CE of type E1) but the two
others need some refinements.
Focalising/Shifting operators
Focalising/Shifting operators transform a CE of type E1 into a CE of type E2. Several
kinds of focalising/shifting time may be expressed. For instance, in the expression ?au
d?but de mai 2005" (at the beginning of may 2005) the focalising/shifting is localised
inside the BC (mai 2005), whereas in the expression ?trois semaines avant mai 2005"
(three weeks before may 2005) it is outside the BC. Consequently, six sub-operators
have been identified and are shown Table 1. It should be noted that ShiftingBeginning
and ShiftingAfter operators refers to a family of operators, because for these ones it is
necessary to precise two parameters, the granularity and the value of the shifting.
For some reasons of implementation, except for the operator IdShifting, which
refers at the identity, all others operators are treated as idempotent. In other words, we
consider as equivalent these two expressions ?au d?but du d?but des ann?es 1980" (at
the beginning of the early eighties) and ?au d?but des ann?es 1980? (in the early of
eighties). The next version will improve at this point.
Zoning operators
A Zoning operator transforms a CE of type E2, associated to the useful portion U of
Figure 1, into the CE E analysed. A Zoning operator refers to one of the six possible
5This pointing operator, as mentioned previously, is not an operator of the CE algebra, but all the other
operators are part of the CE algebra.
Representing and Visualizing Calendar Expressions in Texts 369
Table 1: Focalising/Shifting operators
Operators Examples
IdShifting ? en 1945
? au mois d?ao?t
ZoomBeginning ? ? l?aube des ann?es 1980
? au d?but de mai 1945
ZoomMiddle ? au milieu des ann?es 1980
ZoomEnding ? ? la fin des ann?es 1980
ShiftingBefore (granularity, -n) ? 10 jours avant le 14 juillet 2005
ShiftingAfter (granularity, +n) ? 10 jours apr?s le 14 juillet 2005
zones6 built from A, P and U: that is A, A+U, U, U+P, P, A+P. These six kinds of
zoning are associated with a set of prepositions, whose prototypes are shown Table 2.
Fuzzy expressions like ?peu avant? (short before) can double this number. Table 2
also illustrates the the ZoningAbout operator <U>. Further, note that ZoningId is not
expressed, but has to be taken into account.
Table 2: Zoning operators
Operators Expression
ZoningBefore [A] avant fin avril 2008
ZoningUntil [A+U] jusqu?? fin avril 2008
ZoningId [U] [ /0] fin avril 2008
ZoningAbout <U> vers la fin avril 2008
ZoningSince [U+P] depuis la fin avril 2008
ZoningAfter [P] apr?s fin avril 2008
ZoningApart [A+P] except? fin avril 2008
2.2 N-ary or sequence operators
As mentioned before, it is necessary to use several N-ary operators to represent some
CE. For instance, a binary operator is used for representing an expression like ?entre
fin mai 2005 et avril 2006" (between the end of may 2005 and april 2006). This oper-
ator, Between, applies to two CEs, so for the preceding expression the representation
is Between ((ZoomEnding(Pointing(may 2005), Pointing(april 2006)). Moreover, a
sequence operator is needed to represent a CE like ?le mardi 21, le mercredi 22 et le
vendredi 24 mai 1980" (on Tuesday 21, Wednesday 22 and Friday 24 of May). The
study of these operators, associated with even more complex CEs with quantifications,
is currently under investigation.
6The empty zone, expressed by ?jamais? (never) and the full zone, that is A+U+P, expressed by ?tou-
jours? (always) are CE, but not associated with unary operators associated to a BC, as defined here, hence
excluded of our precedent study.
370 Battistelli, Couto, Minel, and Schwer
3 Application
Many applications which exploit temporal expressions in texts, in particular in the area
of information extraction, have been implemented (Pazienza, 1999). Our application
is plugged into the textual navigation workstation NaviTexte (Couto, 2006; Couto and
Minel, 2007), in order to combine a traditional linear reading with a chronological
one. With this intention, we have undertaken the construction of a computerized aided
reading of biographies. Consequently, we have addressed two issues. First, identifying
temporal expressions and ordering chronologically text segments in which they are
included. Second, building calendar views of the text and navigating through these
views.
3.1 Identifying and ordering calendar expressions
From the linguistic study presented above, we have defined a set of annotations which
are used to automatically annotate biographic texts. This process is carried out by
transducers which put XML7 annotations through the processed text. These annota-
tions describe on the one hand, the granularity of CEs, and on the other hand, the
kind of identified operator. For instance, the following XML code illustrates how the
temporal expression ?avant le d?but de la fin de l?ann?e 2008" (Before the beginning
of the end of the year 2008) will be annotated:
<UT Type="Expression Calendaire" Nro="7">
<Annotation Nom="Grain">Annee</Annotation>
<Annotation Nom="Annee">2008</Annotation>
<Annotation Nom="RelationCalendrier">Absolue</Annotation>
<Annotation Nom="OpTempR?O?gion1">Avant</Annotation>
<Annotation Nom="OpTempD?O?placement1">FocalFin</Annotation>
<Annotation Nom="OpTempD?O?placement2">FocalDebut</Annotation>
<Chaine>
avant le debut de la fin de l?annee 2008
</Chaine>
</UT>
From these annotations, an automatic ordering relying on values of CEs can be
carried out. A first implementation took only into account disjoined CEs, because they
are linearly ordered. Intersecting CEs, like ?En juin 2007 (. . . ) en ?t? 2007" (in June
2007 (. . . ) in summer 2007) requires a more powerful formalism. A formalism relying
both on S-Languages (Schwer, 2002b) and granules (Schwer, 2002a) is required to
provide a full automatic ordering.
3.2 Building a text calendar view
A new kind of view, a calendar one, has been built in the NaviTexte platform. This
view is built from texts which contain CEs annotated as described above. An example
is shown in Figure 3. Conceptually, a calendar view is a graph coordinated with a two-
dimensional grid. In the left part of the view, lexical chains of various occurrences
of CEs in the text are displayed. By default, those are ordered according to their
order of appearance in the text, but it is possible to display a chronological order,
7A DTD is defined in Couto (2006)
Representing and Visualizing Calendar Expressions in Texts 371
by using options offered in the panel located in bottom of the view. Nodes in the
graph represent these lexical chains. The visual representation of a CE depends of the
functional representation computed as described before Figure 2.
A simple CE, with only a pointing operator like in ?l?ann?e 2008" (the year 2008)
is always visualised like a white ellipse. An operator of focalising/Shifting like ?la fin
de" (the end of) selects an area of the ellipse and blackens it. Finally, a zoning operator
like ?avant" (before) is visualised by a bold line displaying the area that is referred to.
The plug-in is implemented with the JGaph package and we largely use some of
its functionalities, like zooming or the partial layout cache. We also use html tooltip
text in Swing to contextualise a CE in the original text. For example, in Figure 3,
the whole paragraph which contains the CE ?en 1953? (in 1953) is displayed and the
occurrence of a CE is highlighted.
3.3 Evaluation
Two kinds of evaluation could be performed on this work: (i) evaluation of automatic
recognition and semantic annotation of CEs in text, (ii) evaluation of the calendar
view. The former calls for a classical protocol in NLP, whereas the latter is more
complex to carry out.
So far, only recognition has been carried out by Teissedre (2007) who computed
recall and precision on three kinds of corpora. Due to the fact that an annotation is
made up of several fields the recall has been computed like this: a score zero when
a CE is not identified, a score 1 when the identification is total, and 0.5 when the
identification is partial. Applying these rules, recall is 0.8 and precision is 0.9.
We would like to make two remarks on this result. First, quantified CEs like ?tous
les mardis? (every Tuesday) or ?un mardi sur deux? (one Tuesday out of two) and
n-aries (n? 3) CEs like "entre 2008 et 2009 et en juin 2010" (between 2008 and 2009
and in june 2010) are identified but are not yet taken into account in the semantic
annotation process. Second, syntactic ambiguities like in ?il a dormi deux jours avant
No?l? (he slept two days before Christmas) are not taken into account either. However
in this example, there are two possible syntactic structures. In the first case, "avant
No?l" is the CE and the operator is the Regionalisation one; in the second case, "deux
jours avant No?l" is the CE and the operator is the Shifting one. Presently, our analysis
provides only the second one like in Aunargue et al (2001) but we intend to upgrade
it in order to provide both analyses.
Evaluation of the calendar view should be studied from a cognitive point of view
and is highly dependent on the application. We plan to work with cognitive scien-
tists to build a relevant protocol to study this aspect of evaluation which calls for the
specification of a set of navigation operations based on the algebra of operators.
4 Conclusion
We proposed an algebra of CEs with three kinds of operators to analyse calendar
expressions and build a functional representation of these expressions. We described
an implementation of this approach in the platformNaviTexte and we have shown how
the functional representation is used to visualise a calendar view of a text. In future
work, we will rely on a methodology presented in Battistelli and Chagnoux (2007) in
372 Battistelli, Couto, Minel, and Schwer
Figure 3: Example of calendar view in NaviTexte
order to take into account several temporal axis, and thus several calendar structures,
which are expressed in texts by different levels of enunciations, like citations.
References
Aunargue, M., M. Bras, L. Vieu, and N. Asher (2001). The syntax and semantics of
locating adverbials. Cahiers de Grammaire 26, 11?35.
Barzilay, R., N. Elhadad, and K. McKeown (2001). Sentence ordering in multidocu-
ment summarization. In First International Conference on Human Language Tech-
nology Research (HLT-01), pp. 149?156.
Battistelli, D. and M. Chagnoux (2007). Repr?senter la dynamique ?nonciative et
modale de textes. In actes TALN?07 (Traitement automatique du langage naturel,
pp. 13?23.
Charolles, M. (1997). L?encadrement du discours ? univers, champs, domaines et
espaces. In Cahiers de recherche linguistique, Volume 6 of LANDISCO, pp. 1?73.
Universit? Nancy 2.
Couto, J. (2006). Mod?lisation des connaissances pour une navigation textuelle
assist?e. La plate-forme logicielle NaviTexte. Ph. D. thesis, Universit? Paris-
Sorbonne.
Couto, J. and J.-L. Minel (2007). Navitexte, a text navigation tool. In , Lecture Notes
in Artificial Intelligence 4733, pp. 251?259. Springer-Verlag.
Representing and Visualizing Calendar Expressions in Texts 373
Ferro, L., L. Gerber, I. Mani, B. Sundheim, and G. Wilson (2004). Standard for the
annotation of temporal expressions. Technical report, timex2.mitre.org, MITRE
Corporation.
Filatova, E. and E. Hovy (2001). Assigning time-stamps to event-clauses. In Work-
shop on Temporal and Spatial Information Processing, ACL?2001, pp. 88?95.
Halliday, M. A. K. (1994). An introduction to functional grammar. London: Edward
Arnold.
Harabagiu, S. and C. A. Bejan (2005). Question answering based on temporal infer-
ence. In AAAI-2005 Workshop on Inference for Textual Question Answering.
Hitzeman, J., M.Moens, and C. Grover (1995). Algorithms for analyzing the temporal
structure of discourse. In EACL?95, pp. 253?260.
Mani, I. and G. Wilson (2000). Robust temporal processing of news. In Proceedings
38th ACL, pp. 69?76.
Pazienza, M. T. (1999). Information Extraction, toward scalable, adaptable systems.
New York: Springer-Verlag.
Pustejovsky, J. (Ed.) (2002). TERQAS 2002: An ARDA Workshop on Advanced Ques-
tion Answering Technology.
Pustejovsky, J., J. Castano, R. Ingria, R. Sauri, R. Gaizauskas, A. Setzer, and G. Katz
(2003). Timeml: Robust specification of event and temporal expressions in text. In
IWCS-5 Fifth International Workshop on Computational Semantics.
Pustejovsky, J., R. Knippen, J. Lintman, and R. Sauri (1993). Temporal and event
information in natural language text. Lexique 11, 123?164.
Schilder, F. and C. Habel (2001). From temporal expressions to temporal informa-
tion: Semantic tagging of news messages. In Proceedings of ACL?01 workshop on
temporal and spatial information processing, pp. 65?72.
Schwer, S. R. (2002a). Reasoning with intervals on granules. Journal of Universal
Computer Science 8 (8), 793?808.
Schwer, S. R. (2002b). S-arrangements avec r?p?titions. Comptes Rendus de
l?Acad?mie des Sciences de Paris S?rie I 334, 261?266.
Setzer, A. and R. Gaizauskas (2000). Annotating events and temporal information in
newswire texts. In Proceeedings 2rd LRC, pp. 64?66.
Song, F. and R. Cohen (1991). Tense interpretation in the context of narrative. In 9th
AAAI, pp. 131?136.
Tannen, D. (1997). Framing in Discourse. Oxford: Oxford University Press.
Teissedre, C. (2007). La temporalit? dans les textes : de l?annotation s?mantique ? la
navigation textuelle. Master?s thesis, Universit? Paris-Sorbonne.
Proceedings of the TextGraphs-6 Workshop, pages 37?41,
Portland, Oregon, USA, 19-24 June 2011. c?2011 Association for Computational Linguistics
GrawlTCQ: Terminology and Corpora Building by Ranking Simultaneously
Terms, Queries and Documents using Graph Random Walks
Cle?ment de Groc
Syllabs
Univ. Paris Sud
LIMSI-CNRS
cdegroc@limsi.fr
Xavier Tannier
Univ. Paris Sud
LIMSI-CNRS
xtannier@limsi.fr
Javier Couto
Syllabs
MoDyCo (UMR 7114, CNRS-UPX)
jcouto@syllabs.com
Abstract
In this paper, we present GrawlTCQ, a new
bootstrapping algorithm for building special-
ized terminology, corpora and queries, based
on a graph model. We model links be-
tween documents, terms and queries, and use
a random walk with restart algorithm to com-
pute relevance propagation. We have evalu-
ated GrawlTCQ on an AFP English corpus of
57,441 news over 10 categories. For corpora
building, GrawlTCQ outperforms the Boot-
CaT tool, which is vastly used in the domain.
For 1,000 documents retrieved, we improve
mean precision by 25%. GrawlTCQ has also
shown to be faster and more robust than Boot-
CaT over iterations.
1 Introduction
Specialized terminology and corpora are key re-
sources in applications such as machine translation
or lexicon-based classification, but they are expen-
sive to develop because of the manual validation re-
quired. Bootstrapping is a powerful technique for
minimizing the cost of building these resources.
In this paper, we present GrawlTCQ1, a bootstrap-
ping algorithm for building specialized terminol-
ogy, corpora and queries: from a small set of user-
provided terms, GrawlTCQ builds the resources via
automated queries to a search engine. The algorithm
relies on a graph that encodes the three kinds of enti-
ties involved in the procedure (terms, documents and
queries) and relations between them. We model the
1GrawlTCQ stands for Graph RAndom WaLk for Terminol-
ogy, Corpora and Queries.
relevance propagation in our graph by using a ran-
dom walk with restart algorithm.
We use BootCaT (Baroni and Bernardini, 2004)
as our baseline because it is a similar algorithm that
has been vastly used and validated experimentally
in the domain. We have evaluated GrawlTCQ and
BootCaT on an AFP (Agence France Presse) En-
glish corpus of 57,441 news over 10 categories. Re-
sults show that, for corpora building, GrawlTCQ
significantly outperforms the BootCaT algorithm.
As this is an on-going work, further work is needed
to evaluate terminology and query results.
The article is structured as follows: in Section 2,
we review the related work in terminology and cor-
pora construction using bootstrapping techniques, as
well as random walk applications. In Section 3,
we describe GrawlTCQ. In Section 4, we evaluate
GrawlTCQ and compare its results with those pro-
vided by BootCaT. We conclude in Section 5.
2 Related Work
Several works using bootstrapping techniques have
been carried out in terminology and corpora cre-
ation. For example, (Ghani et al, 2005) has built mi-
nority language corpora from the web. The Web-as-
Corpus WaCky initiative (Baroni et al, 2009; Fer-
raresi et al, 2008; Sharoff, 2006) has built very large
web-derived corpus in various languages. They used
previously mentioned BootCaT tool to do this. As
the quality of the results is strongly dependent on
the quality of seed terms and the underlying search
engine, manual filtering is usually mandatory to en-
hance performance. GrawlTCQ uses a graph to au-
tomatically filter out erroneous terms and documents
37
Seeds
Queries
Combinations
Ranked documents
Search engine
Graph model
Filter and keep N-best
.....
.....
.....
.....
.....
.....
-----
-----
-----
-----
-----
-----
-----
-----
-----
Ranked
terms
Ranked
documents
Ranked
queries
User
Figure 1: Components of the GrawlTCQ algorithm.
and improve the system?s overall performance. The
manual filtering cost is therefore drastically reduced.
Graph modeling and random walks have been
applied with success to many different domains
of NLP, such as keyword and sentence extraction
(Mihalcea and Tarau, 2004), computer-science arti-
cles ranking (Nie et al, 2005), web pages ranking
(Haveliwala, 2002; Page et al, 1999; Richardson
and Domingos, 2002), WordNet-based word sense
disambiguation (Agirre and Soroa, 2009) and lexical
semantic relatedness (Hughes and Ramage, 2007),
or set expansion (Wang and Cohen, 2007). In this
paper, we confirm the relevance of this approach to
terminology and corpora bootstrapping.
3 Ranking simultaneously Terms, Queries
and Documents
3.1 The GrawlTCQ bootstrapping algorithm
Figure 1 shows the components of the GrawlTCQ
algorithm. Starting from user provided seed terms2,
GrawlTCQ iteratively creates queries, finds docu-
ments and extracts new terms. We model this boot-
strapping procedure with a graph that keeps all links
between documents, terms and queries. Our hypoth-
2These terms may be easily computed from a list of seed urls
or documents, using terminology extraction techniques.
Boxoffice Grammys BBC
Boxoffice
AND
Grammys
Grammys
AND
BBC
DOC 1 DOC 2
Jackson Beatles
Album
in query
(-1)
leads to
(-1)
contains
(-1)
Terms
Queries
Documents
Figure 2: Sample subgraph using ?boxoffice?, ?Gram-
mys? and ?BBC? as seed terms.
esis is that the information added will increase the
procedure?s robustness and overall performances.
The graph model (see figure 2) is built online. As
common terms will occur in many documents and
thus have high centrality, they will end with high
scores. In order to avoid this effect, document-
term edges are weighted with a TermHood measure
(Kageura and Umino, 1996) such as tfidf or log odds
ratio.
By using a random walk with restart algorithm,
also known as personalized PageRank (Haveliwala,
2002), terms, queries and documents are weighted
globally and simultaneously. At the end of each it-
eration of GrawlTCQ, a random walk is computed
and the resulting stationary distribution is used to
rank documents and terms3. If more documents are
needed, then the algorithm executes one more step.
Several parameters can be specified by the user,
such as the number of seed terms, the number of
terms composing a query, as well as the number of
documents retrieved for each query. In addition, the
algorithm may use the Internet (with search engines
as Google, Yahoo! or Bing), an Intranet, or both,
as data sources. When using the web as source, spe-
cific algorithms must be used to remove HTML boil-
erplate (Finn et al, 2001) and filter un-useful docu-
ments (duplicates (Broder, 2000), webspam and er-
ror pages (Fletcher, 2004)).
3As an additional result, we also obtain a ranked list of
queries.
38
3.2 Graph Walk
Considering a directed graph G = (V,E), the score
of a vertex Vi is defined as
PR(Vi) = (1? ?)?0 + ??
?
j?In(Vi)
PR(Vj)
|Out(Vj)|
where In(Vi) (resp. Out(Vi)) are Vi predecessors
(resp. successors). In the original PageRank algo-
rithm, a damping factor ? of 0.85 has been used and
the personalization vector (or teleportation vector)
?0 is distributed uniformly over V . On the contrary,
(Richardson and Domingos, 2002) and (Haveliwala,
2002) have proposed to personalize the PageRank
according to a user query or a chosen topic. Follow-
ing previous work (Page et al, 1999; Mihalcea and
Tarau, 2004), we have fixed the damping factor to
0.854 and the convergence threshold to 10?8.
As we have different types of edges carrying dif-
ferent relations, we slightly modify the PageRank
formula, as in (Wang and Cohen, 2007): when walk-
ing away from a node, the random surfer first picks
randomly a relation type and then chooses uniformly
between all edges of the chosen relation type. Bias-
ing the algorithm to insist more on seed terms is a
legitimate lead as these nodes represent the strong
base of our model. We thus use a custom ?0 distri-
bution that spreads weights uniformly over the seed
terms instead of the whole set of vertices.
4 Evaluation
Evaluating the proposed method on the web can
hardly be done without laborious manual annota-
tion. Moreover, web-based evaluations are not re-
producible as search engines index and ranking
functions change over time. This is especially a
problem when evaluating the impact of different pa-
rameters of our algorithm. In this article, we have
chosen to carry out an objective and reproducible
evaluation based on a stable and annotated document
collection.
The AFP has provided us an English corpus com-
posed of 57,441 news documents written between
January 1st and March 31, 2010. We have con-
sidered the 17 top-level categories from the IPTC
4During our experiments, we haven?t observed any signifi-
cant change when modifying this parameter.
Id Category #docs
01 Arts, culture and entertainment 3074
02 Crime, law and justice 5675
03 Disaster and accident 4602
04 Economy, business and finance 13321
08 Human interest 1300
11 Politics 17848
12 Religion and belief 1491
14 Social issue 1764
15 Sport 15089
16 Unrest, conflicts and war 8589
Table 1: AFP corpus categories distribution.
standard (http://www.iptc.org). Documents are cat-
egorized in one or more of those categories and are
annotated with various metadata, such as keywords.
As some categories contained too few documents,
we have only kept the 10 largest ones (see table 1).
The corpus was then indexed using Apache Lucene
(http://lucene.apache.org) in order to create a basic
search engine5. This setup has several advantages:
first, the document collection is stable and quantifi-
able. Documents are clean text written in a journal-
istic style. As they are already annotated, several
automatic evaluations can be run with different pa-
rameters. Finally, querying the search engine and
retrieving documents can be done efficiently. How-
ever, note that, as the document collection is lim-
ited, queries might return few or no results (which is
rarely the case on the web).
We have used the BootCaT algorithm as our base-
line. To the best of our knowledge this is the first at-
tempt to rigorously evaluate BootCaT performances.
We have compared both algorithms in exactly the
same conditions, on a task-based experiment: to re-
trieve 50, 100, 300, 500 and 1000 documents for
each category, independently of the number of itera-
tions done.
To be as close as possible to the original BootCaT
algorithm, we have weighted document-term edges
by log odds ratio. This measure allows us to dis-
tinguish common terms by using a reference back-
ground corpus. In all our experiments, we have used
the ukWac corpus (Ferraresi et al, 2008), a very
large web-derived corpus, for this purpose.
In order to select initial seed terms we have used
documents? metadata. We have computed the fre-
5All normalization features except lower-casing were dis-
abled to allow ease of reproducibility.
39
50 150 250 350 450 550 650 750 850 950Number of documents
0.1
0.2
0.3
0.4
0.5
0.6
Me
an 
Pre
cisi
on 
/ Re
cal
l
GrawlTCQ Precision
GrawlTCQ Recall
BootCaT Precision
BootCaT Recall
1 5 10# iter
0
1000
2000
3000
# d
ocs
GR
BC
Figure 3: Mean precision and recall at 50, 100, 300, 500
and 1000 documents (inset: Mean number of documents
/ number of iterations)
quency of occurrences of a keyword in a category
and have then divided this score by the sum of oc-
currences in all other categories. This strategy leads
to relevant seed terms that are not necessarily ex-
clusive to a category. For instance, selected seeds
for the 4th category are: economics, summary, rate,
opec, distress, recession, zain, jal, gold, and spyker.
We have fixed a number of parameters for our ex-
periments: at each iteration, the top-10 seeds are se-
lected (either from the initial set or from newly ex-
tracted terms). Queries are composed of 2 seeds, all
45 possible combinations6 are used and a total of 10
documents are retrieved for each query.
All scores are averaged over the 10 categories.
As can be seen in figure 3, GrawlTCQ shows much
more robustness and outperforms BootCaT by 25%
precision at 1000 documents. Detailed results for
each category are shown in table 2 and confirm the
relevance of our approach. Interestingly, BootCaT
and GrawlTCQ have very low precisions for the 14th
category (Social issue). Documents found in this
category are often ambiguous and both algorithms
fail to extract the domain terminology. We have also
plotted the number of documents in function of the
number of iterations as shown in figure 3 (inset).
The curve clearly shows that GrawlTCQ yields more
6When running the same experiment with randomly selected
tuples several times, we have found similar results when aver-
aging all runs output.
CatId
P@50 P@100 P@300 P@500 P@1000
GR BC GR BC GR BC GR BC GR BC
01 0.58 0.50 0.57 0.30 0.43 0.12 0.35 0.08 0.23 0.05
02 0.44 0.60 0.45 0.33 0.46 0.17 0.44 0.10 0.34 0.07
03 0.82 0.82 0.99 0.81 0.89 0.41 0.66 0.26 0.54 0.14
04 0.86 0.80 0.82 0.85 0.84 0.55 0.78 0.34 0.79 0.19
08 0.79 0.79 0.44 0.48 0.23 0.42 0.17 0.40 0.20 0.39
11 0.76 0.78 0.79 0.81 0.87 0.71 0.57 0.64 0.57 0.56
12 0.46 0.54 0.35 0.27 0.20 0.10 0.17 0.06 0.15 0.03
14 0.08 0.24 0.13 0.10 0.06 0.04 0.04 0.02 0.04 0.02
15 1.0 1.0 1.0 1.0 0.92 0.78 0.87 0.67 0.81 0.39
16 0.82 0.56 0.81 0.49 0.71 0.21 0.72 0.15 0.70 0.13
Table 2: Precision at various cutoffs by category
documents at a faster rate. This is due to the seed se-
lection process: GrawlTCQ?s queries lead to many
documents while BootCaT queries often lead to few
or no documents. Moreover, as we can see in figure
3, while fetching more documents faster, the mean
precision of GrawlTCQ is still higher than the Boot-
CaT one which shows that selected seeds are, at the
same time, more prolific and more relevant.
5 Conclusion
In this paper, we have tackled the problem of ter-
minology and corpora bootstrapping. We have pro-
posed GrawlTCQ, an algorithm that relies on a
graph model including terms, queries, and docu-
ments to track each entity origin. We have used a
random walk algorithm over our graph in order to
globally and simultaneously compute a ranking for
each entity type. We have evaluated GrawlTCQ on a
large news dataset and have shown interesting gain
over the BootCaT baseline. We have especially ob-
tained better results without any human intervention,
reducing radically the cost of manual filtering. We
are considering several leads for future work. First,
we must evaluate GrawlTCQ for query and term
ranking. Then, while preliminary experiments have
shown very promising results on the web, we would
like to setup a large scale rigorous evaluation. Fi-
nally, we will conduct further experiments on edges
weighting and seed terms selection strategies.
Acknowledgments
We would like to thank the AFP for providing us
the annotated news corpus. This work was par-
tially funded by the ANR research project ANR-08-
CORD-013.
40
References
Eneko Agirre and Aitor Soroa. 2009. Personalizing
PageRank for word sense disambiguation. In Proceed-
ings of the 12th Conference of the European Chapter
of the Association for Computational Linguistics on -
EACL, 2009.
Marco Baroni and Silvia Bernardini. 2004. BootCaT:
Bootstrapping Corpora and Terms from the Web. In
Proceedings of the LREC 2004 conference.
Marco Baroni, Silvia Bernardini, Adriano Ferraresi, and
Eros Zanchetta. 2009. The WaCky Wide Web : A Col-
lection of Very Large Linguistically Processed Web-
Crawled Corpora. In Proceedings of the LREC 2009
conference, volume 43, pages 209?226.
Andrei Z Broder. 2000. Identifying and Filtering Near-
Duplicate Documents. In Proceedings of the 11th An-
nual Symposium on Combinatorial Pattern Matching,
pages 1?10, London, UK. Springer-Verlag.
Adriano Ferraresi, Eros Zanchetta, Marco Baroni, and
Silvia Bernardini. 2008. Introducing and evaluating
ukwac, a very large web-derived corpus of english.
In Proceedings of the 4th Web as Corpus Workshop
(WAC-4), pages 47?54.
Aidan Finn, Nicholas Kushmerick, and Barry Smyth.
2001. Fact or fiction: Content classification for dig-
ital libraries. In DELOS Workshop: Personalisation
and Recommender Systems in Digital Libraries.
William H Fletcher. 2004. Making the Web More Useful
as a Source for Linguistic Corpora. Corpus Linguistics
in North America, (January 2003):191?205.
Rayid Ghani, Rosie Jones, and Dunja Mladenic. 2005.
Building Minority Language Corpora by Learning to
Generate Web Search Queries. Knowl. Inf. Syst.,
7(1):56?83.
Taher H. Haveliwala. 2002. Topic-sensitive PageRank.
Proceedings of the eleventh international conference
on World Wide Web - WWW ?02, page 517.
Thad Hughes and Daniel Ramage. 2007. Lexical Se-
mantic Relatedness with Random Graph Walks. In
Proceedings of EMNLP, 2007, pages 581?589.
Kyo Kageura and Bin Umino. 1996. Methods of au-
tomatic term recognition: A review. Terminology,
3(2):259?289.
Rada Mihalcea and Paul Tarau. 2004. TextRank bringing
order into text. In Proceedings of EMNLP, pages 404?
411. Barcelona: ACL.
Zaiqing Nie, Yuanzhi Zhang, J.R. Wen, and W.Y. Ma.
2005. Object-level ranking: Bringing order to web
objects. In Proceedings of the 14th international con-
ference on World Wide Web, pages 567?574. ACM.
Lawrence Page, Sergey Brin, Rajeev Motwani, and Terry
Winograd. 1999. The PageRank Citation Ranking:
Bringing Order to the Web. Technical report, Stanford
InfoLab.
M. Richardson and P. Domingos. 2002. The intelligent
surfer: Probabilistic combination of link and content
information in pagerank. Advances in Neural Infor-
mation Processing Systems, 2:1441?1448.
Serge Sharoff. 2006. Creating general-purpose corpora
using automated search engine queries. M. Baroni, S.
Bernardini (eds.) WaCky! Working papers on the Web
as Corpus, Bologna, 2006, pages 63?98.
Richard C. Wang and William W. Cohen. 2007.
Language-independent set expansion of named enti-
ties using the web. Proceedings of IEEE International
Conference on Data Mining (ICDM 2007), Omaha,
NE, USA. 2007.
41
