Proceedings of COLING 2014, the 25th International Conference on Computational Linguistics: Technical Papers,
pages 962?973, Dublin, Ireland, August 23-29 2014.
Improving Cloze Test Performance of Language Learners Using Web N-Grams
Martin Potthast Matthias Hagen Anna Beyer Benno Stein
Bauhaus-Universit?t Weimar, Germany
<first name>.<last name>@uni-weimar.de
Abstract
We study the effectiveness of search engines for common usage, a new category of search engines
that exploit n-gram frequencies on the web to measure the commonness of a formulation, and that
allow their users to submit wildcard queries about formulation uncertainties often encountered in
the process of writing. These search engines help to resolve questions on common prepositions
following verbs, common synonyms in given contexts, and word order difficulties, to name only
a few. Until now, however, it has never been shown that search engines for common usage have
a positive impact on writing performance.
Our contribution is a large-scale user study with 121 participants using the Netspeak search
engine to shed light on this issue for the first time. Via carefully designed cloze tests we show
that second language learners who have access to a search engine for common usage significantly
and effectively improve their test performance as opposed to not using them.
1 Introduction
When writing texts in a second language, uncertainties on specific formulations regularly come up. Even
experienced second language writers may sometimes be in doubt about the preposition following a verb
or what word order to choose. In this paper, we study search engines for common usage (usage search
engines, for short) that aim at assisting second language writers to cope with their uncertainties. These
search engines allow for phrasal queries that include wildcards at positions where a user is not sure what
to write. The search results typically consist of a list of phrases matching the query?s expression?the
wildcards filled with formulations. The returned phrases are ranked by their commonness of being used in
everyday writing, where a phrase?s commonness is estimated by its occurrence frequency in a collection
of web n-grams. The occurrence frequencies are usually not hidden from the user but displayed alongside
each phrase, either implicitly or explicitly. This way, the users of usage search engines have a way of
judging whether a phrase is commonly used by others. Figure 1 (left) shows an example search result.
Target audience of usage search engines is language learners who have mastered basic vocabulary
and grammar but whose language proficiency in terms of their feeling for language usage is still worse
than that of a native speaker. Until recently, there has been hardly any technological support for them,
so they could only resort to studying abstract style guides, consuming foreign language media, and
language study travels in order to improve their usage skills. Today, three public usage search engines
are available. The first one, called Netspeak (Stein et al., 2010), is developed at our group since 2008.
It was followed by PhraseUp and Linggle (Boisson et al., 2013), which have been released in 2011
and 2013.
1
Moreover, there is Google?s N-Gram Viewer prototype (Michel et al., 2011), which has a
different purpose and target audience but visualizes n-gram usage over time.
All of these search engines provide a way to quantify the commonness of a phrase and thus have the
potential to become important tools for second language learners. That is, if they work as advertised.
Until now, it has not at all been clear whether writers can actually benefit from the information distilled
from analyzing n-gram occurrence frequencies, or whether they are easily misled, for example, by noisy
This work is licenced under a Creative Commons Attribution 4.0 International License. Page numbers and proceedings
footer are added by the organizers. License details: http://creativecommons.org/licenses/by/4.0/
1
Netspeak is freely available at www.netspeak.org, PhraseUp at www.phraseup.com, and Linggle at www.linggle.com.
962
Figure 1: Netspeak?s two alternative interfaces: search results can either be displayed as textual ranked
list of phrases alongside frequencies (left), or as WordGraph visualization (right) (Riehmann et al., 2011),
where the frequencies determine various aspects of the visualization. The WordGraph is particularly
suited to handling multiple wildcards per query. The participants of our user study used primarily the
textual interface, since they did not require more than one or two wildcards for solving the cloze tests.
data. Our contribution is to shed light on this issue for the first time and to conduct a large-scale user study
with 121 language learners aged 14?18, measuring their performance when using our Netspeak search
engine to solve cloze tests. The study ascertains the positive impact of Netspeak and by extension, usage
search engines in general; moreover, it shows the low barrier to entry of Netspeak?s user interface.
The paper is organized as follows: after a detailed discussion of related work in Section 2, Netspeak?s
retrieval engine is formally described in Section 3 as background for the design of our user study and as
an example of how such search engines work internally. Section 4 reports on our user study and provides
a statistical analysis of our findings. The paper closes with a conclusion and an outlook into future work.
2 Related Work
Carrying out research and development on usage search engines is an interdisciplinary effort that requires
expertise from information retrieval, information visualization and interface design, as well as domain
knowledge from computer linguistics. Therefore, we divide our review of related work into four parts:
(1) existing search engines and web services, (2) retrieval engines and wildcard search from the perspec-
tive of information retrieval, (3) search result visualization, and, (4) writing support systems dedicated
to second language writers.
2.1 Public Search Engines and Web Services
There are currently three public search engines and one public prototype that fall into the category of
search engines for common usage, namely Netspeak (Stein et al., 2010), PhraseUp, Linggle (Boisson
et al., 2013), and the Google N-Gram Viewer (Michel et al., 2011). All of them index large n-gram
corpora, and their search interfaces are primarily dedicated to returning results that allow their users to
judge the commonness of a phrase compared to alternative phrases. We distinguish the former three
search engines from the latter mainly by its target audience. While the former target average web users,
the latter targets professional linguists and humanities researchers. To the best of our knowledge, our
paper is the first to investigate the effectiveness of such search engines for the use case of assisting
writers, thereby underpinning these efforts.
Moreover, a number of other linguistic search engines are available, such as WebCorp Live (Kehoe
and Renouf, 2002), WebAsCorpus (Fletcher, 2007), and the Linguist?s Search Engine (Resnik and Elkiss,
2005). These search engines cannot be readily used for usage search as defined above, since they work
more like concordancers in that they only retrieve usage examples and present them in context, disregard-
ing usage commonness. Again, their target audience is professional linguists rather than laymen users,
let alone second language learners. While they may still be applied in the context of language learning,
the search interfaces of these search engines are not sufficiently tailored to this domain.
963
Another category of related web services that are readily available to second language learners include
style and grammar checkers, such as Grammarly, PaperRater, SlickWrite, AfterTheDeadline (Mudge,
2010), the Hemingway App, GrammarBase, etc. From what can be said by analyzing their features, all
of these services are based on a collection of basic style and grammar rules that can be checked automati-
cally with some degree of confidence in their recommendations. However, none of the services we found
make any recommendations with regard to usage commonness, i.e., they do not identify uncommon
formulations or make recommendations for more common ones.
2.2 Information Retrieval Models and Indexes for Wildcard Search
The retrieval models employed by usage search engines are hardly ever discussed in the literature cited
above. One of the few exceptions is Netspeak (Stein et al., 2010), where the retrieval model has been a
contribution in itself since it is tailored specifically to its application domain. For the lack of discussion
of the finer details of how the above search engines work, it can be assumed that they do not employ a
specifically tailored retrieval approach. Nevertheless, when reviewing the information retrieval literature
for retrieval models that support linguistic queries or wildcard queries, a number of sources can be found.
Cafarella et al. (2005, 2007) study indexing methods that are particularly suited to support queries
comprising parts-of-speech as wildcards. They introduce so-called neighborhood indexes whose disk
accesses required to answer a query are on the order of the number of non-wildcard terms in a query.
Rafiei and Li (2009) develop a wildcard search engine that supports linguistically rich wildcards in
order to support information extraction from the web, which employs a preprocessor for queries, and a
postprocessor for search results on top of a traditional web search engine. The approach does not create
a tailored index but translates the wildcard queries into flat queries that can be answered by traditional
search engines. Sekine (2008) explores the trie data structure as an alternative to inverted indexes when
indexing large-scale n-gram corpora. The approach is limited to short n-grams (n < 10) to be feasible,
which can be a strong point in terms of retrieval speed. Netspeak?s retrieval engine is also intentionally
restricted to small values of n, but uses minimal perfect hash functions instead of tries to maximize
retrieval performance.
While all of the aforementioned approaches support shallow linguistic wildcards, or only basic wild-
cards, Tsang and Chawla (2011) propose a method to support regular expressions. Doing so involves
various trade-offs between retrieval performance and index size. Further, a search engine like this may
be only useful to experts, but not second language learners. Again, all of the aforementioned contri-
butions target either professional linguists or they are meant to facilitate automatic usage, instead of
supporting average writers.
2.3 Visualization of Usage Search Results
An important part of every search engine is its user interface. Since usage search engines are still in their
infancy, their user interfaces have not been studied in-depth, so far. As a first attempt to close this gap,
we developed and analyzed two alternative user interfaces for Netspeak in a previous work, one textual
interface and one using a tailored visualization that was specifically developed for usage search engines,
the so-called WordGraph (Riehmann et al., 2011). Figure 1 shows them side-by-side. The textual inter-
face displays search results in the form of a tabular list, where each row lists an n-gram matching the
wildcard query alongside its absolute and relative occurrence frequency. If a query comprises more than
one wildcard, situations arise where this linear ranking of n-grams is insufficient to grasp the true distri-
bution of formulations that may be used instead of the wildcards. The WordGraph therefore visualizes
the search results as a horizontal graph, so that the i-th word of an n-gram is displayed as a node on
the i-th level of the graph. Paths from left to right through the graph correspond to n-grams found in
the result set returned by Netspeak. A user study that investigated the fitness of the WordGraph to serve
as a user interface for specific search tasks found that study participants prefer the WordGraph over the
textual user interface when the number of wildcards increases (Riehmann et al., 2012). The user study
we report on in this paper is based solely on the textual user interface, since most of our cloze tests can
be solved by using one wildcard.
964
2.4 Writing Support for Second Language Learners
?For writers of English as a Second Language (ESL), useful editorial assistance geared to their needs is
surprisingly hard to come by,? and ?[...] there has been remarkably little progress in this area over the last
decade,? observe Brockett et al. (2006) about the state of the art. This is despite the fact that English is
the second language of most people who speak English today.
2
A recent overview of technology to detect
grammatical errors of language learners is given by Leacock et al. (2010), whereas computer feedback for
second language learners is mostly studied within pedagogical research under the label of computer-aided
language learning (CALL). There, classroom systems are being deployed on a small scale to measure
their effects on student learning performance. The development of usage search engines in general, our
Netspeak engine in particular, and the user study contributed in this paper may be considered first steps
toward the development of new, better technologies that specifically target the needs of second language
learners and writers.
3 Netspeak: A Search Engine for Common Usage Based on Web N-Grams
As a background for our user study and as an example of how usage search engines work internally, this
section briefly describes Netspeak and its retrieval engine.
3
The main building block of Netspeak is a
query processor tailored to the following task: given a wildcard query q and a set D of n-grams, retrieve
those n-grams D
q
? D that match the pattern defined by q. To solve this task, we have developed
an index-based wildcard query processor addressing the three steps indexing, retrieval, and filtering, as
illustrated in Figure 2 (middle).
3.1 Query Language
Netspeak utilizes a query language defined by the EBNF grammar shown in Figure 2 (left). A query is a
sequence of literal words and wildcard operators, wherein the literal words must occur in the expression
sought after, while the wildcard operators allow to specify uncertainties. Currently five operators are
supported:
? the question mark (?), which matches exactly one word;
? the asterisk (*), which matches any sequence of words;
? the tilde sign in front of a word (?<word>), which matches any of the word?s synonyms;
? the multiset operator ({<words>}), which matches any ordering of the enumerated words; and,
? the optionset operator ([<words>]), which matches any one word from a list of options.
The textual interface displays the search results for the given query as a ranked list of phrases, ordered
by decreasing absolute and relative occurrence frequencies. This way, the user can find confidence in
choosing a particular phrase by judging both its absolute and relative frequencies. For example, a phrase
may have a low relative frequency but a high absolute frequency, or vice versa, which in both cases
indicates that the phrase is not the worst of all choices. Furthermore, the textual web interface offers
example sentences for each phrase, which are retrieved on demand when clicking on a plus sign next to
a phrase. This allows users who are still in doubt to get an idea of the larger context of a phrase.
3.2 Retrieval Engine
The indexing step is done offline. Let V denote the set of all words found in the n-grams D, and
let D?denote the set of integer references to the storage positions of the n-grams in D on hard disk.
During indexing, an inverted index ? : V ? P(D )? is built that maps each word w ? V to a sorted
list ?(w) ? D ,? where ?(w) is comprised of exactly all references to the n-grams in D that contain w.
2
http://en.wikipedia.org/wiki/English language#Geographical distribution
3
Extended versions of this section can be found in previous publications on Netspeak?s WordGraph visualization (Riehmann
et al., 2011; Riehmann et al., 2012).
965
EBNF grammar of Netspeak?s query language
query = { word | wildcard }
5
1
word = ( [apostrophe] ( letter { alpha } ) ) | ? , ?
letter = ? a ? | ... | ? z ? | ? A ? | ... | ? Z ?
alpha = letter | ? 0 ? | ... | ? 9 ?
apostrophe = ? ? ?
wildcard = ? ? ? | ? * ? | synonyms | multiset | optionset
synonyms = ? ~ ? word
multiset = ?{ ? word { word } ?} ?
optionset = ? [ ? word { word } ? ] ?
Netspeak's retrieval engine
Retrieval Filtering
Inverted
index ?
Web
n-grams D
?
w?q  ?(w) = ?q DqDq'q
Sequential
access
Random
access
Indexing
online
offline
rotate about
around
once
on
the
axis
y
the z
on its
the
its
an
its own
<empty>
a vertical
Frequency
128,176      63.7%
36,615      18.2%
10,390        5.2%
4,091        2.0%
3,941        2.0%
3,323        1.7%
3,110        1.5%
2,574        1.3%
Phrase
i am waiting for
i am waiting to
i am waiting on
i am waiting.
i am waiting,
i am waiting impatiently
i am waiting ur
i am waiting until
Figure 2: Netspeak at a glance (Riehmann et al., 2012): the left table shows Netspeak?s query language
as an EBNF grammar, the middle figure overviews its retrieval engine, and the right figure shows an
example of search results as shown to its users. Given a query q, the intersection of relevant postlists
yields a tentative postlist ?
q
, which then is filtered and presented as a ranked list. The index ? exploits
essential characteristics that are known a-priori about possible queries and the n-gram set D.
The list ?(w) is referred to as posting list or postlist. Since D is invariant, ? can be implemented as
an external hash table with O(1)-access to ?(w). For ? being space-optimal, a minimal perfect hash
function based on the CHD algorithm is employed (Belazzougui et al., 2009).
The two online steps, retrieval and filtering, are taken successively when answering a query q. Within
the retrieval step, a tentative postlist ?
q
=
?
w?q
?(w) is constructed; ?
q
is the complete set of references
to n-grams in D that contain all words in q. The computation of ?
q
is done in increasing order of postlist
length, whereas each ?(w) is read sequentially from hard disk. Within the filtering step, a pattern matcher
is compiled from q, and D
q
is constructed as the set of those n-grams referenced in ?
q
that are accepted
by the pattern matcher. Constructing D
q
requires random hard disk access. Basically, this approach
corresponds to how web search engines retrieve documents for a given keyword query before ranking
them. In what follows, we briefly outline how the search in D is significantly narrowed down.
With an inverted index that also stores specific n-gram information along with the keywords, the
filtering of ?
q
can be avoided. In this regard, we distinguish the queries that can be formulated with
Netspeak?s query language into two classes: fixed-length queries and variable-length queries. A fixed-
length query contains only wildcard operators that represent an a-priori known number of words, while
a variable-length query contains at least one wildcard operator that expands to a variable number of
words. For example, the query fine ? me is a fixed-length query since only 3-grams in D match this
pattern, while the query fine
*
me is a variable-length query since n-grams of length 2, 3, 4, . . . match.
Obviously, fixed-length queries can be answered with less filtering effort than variable-length queries:
simply checking an n-gram?s length suffices to discard many non-matching queries. The query processor
first reformulates a variable-length query into a set of fixed-length queries, which then are processed in
parallel, merging the results.
Moreover, the retrieval engine employs pruning strategies so that only relevant parts of a postlist
are read during retrieval, presuming sorted postlists. Head pruning means to start reading a postlist at
some entry within, without compromising recall. Given a query q, let ? denote an upper bound for the
frequencies of the n-grams in q?s result set D
q
, i.e., d ? D
q
implies f(d) ? ? . Obviously, in all postlists
that are involved within the construction of D
q
, all entries whose n-gram frequencies are above ? can
safely be skipped, whereas ? is determined in a preprocessing step as the lowest occurrence frequency of
a sub-sequence of q that does not include wildcards. Up to this point, the retrieval of n-grams matching
a query q is exact?but, not all n-grams that match a query are of equal importance. We consider this
fact by applying tail pruning for postlists that are too long to be read at once into main memory. As a
consequence, less frequent n-grams that might match a given query can be missed.
3.3 The Web n-Gram Collection
To provide relevant suggestions, a wide cross-section of written text on the web is required. Currently,
Netspeak indexes the Google n-gram corpus ?Web 1T 5-gram Version 1? (Brants and Franz, 2006),
966
which consists of 42 GB of phrases up to a length of n = 5 words along with their occurrence frequencies
on the web in 2006. This corpus has been compiled from approximately 1 trillion words extracted from
the English portion of the web, totaling more than 3 billion n-grams. Two post-processing steps were
applied: case reduction and vocabulary filtering. For the latter, a white list vocabulary V was compiled
and only n-grams whose words appear in V were retained. The vocabulary V consists of the words
found in the Wiktionary and various other dictionaries, complemented by words from the 1-gram portion
of the Google corpus whose occurrence frequency exceeds 10 000. After post-processing, the size of the
corpus has been reduced by about 54%.
3.4 Retrieval Performance in Practice and Public Availability
In practice, the described techniques enable Netspeak to provide search results at a speed similar to
modern web search engines. Results are usually returned within a couple of milliseconds. Whenever a
user stops typing for more than 300 milliseconds, the current input is submitted as an ?instant? query
without need for a click. That way, the ?search experience? with Netspeak is similar to what users expect
from web search engines.
Netspeak is freely available online and has about 300 distinct users on a working day who submit about
2500 queries (half the workload on weekends). Most of its users are returning users. From their feedback
and from our own experience, we know that Netspeak helps to resolve uncertainties on formulations in
the daily process of writing papers, proposals, etc. However, in the following section we attempt to
capture Netspeak?s effectiveness in a controlled user study.
4 User Study on the Effectiveness of Usage Search Engines
It is generally assumed that usage search engines are useful, say, that they provide valuable feedback that
leads to improved writing. To empirically confirm this ?usefulness? assumption, we conduct systematic
tests with experienced language learners and analyze whether a usage search engine enables them to
improve their writing. We choose Netspeak as a representative of usage search engines for our study.
Our study?s underlying rationale is to model the use case of usage search engines by solving cloze
tests. In a cloze test, a word or a phrase is removed from a sentence and the participant has to replace
the missing words. Although we followed standard procedures on constructing cloze tests (Sachs et al.,
1997), it should be noted that our usage of cloze tests is not as originally intended (Taylor, 1953). We
do not assess a language learner?s reading skills, but use the cloze test to model word choice, which
resembles the use case of usage search engines very well. For each participant, we provide two different
cloze test questionnaires. The first has to be solved without any help, whereas for the second, participants
are allowed to use the search engine. Besides evaluating the answers, we also analyze the submitted
search queries.
4.1 Experiment 1: General Usage, Average Learners
In the first experiment, we examine whether the search engine in general can support users in resolving
uncertainties on formulations modeled by cloze tests. Our hypothesis is that using a usage search engine
helps to improve a human?s performance in such tests.
Experimental Design To test our hypothesis, we conduct an empirical study with a within-subjects
design (Lazar et al., 2010). This means that our participants are exposed to a cloze test without the help
of a search engine and then to another cloze test where our chosen usage search engine is allowed.
The to-be-solved cloze tests are carefully constructed under the guidance of a university-level English
teacher who is a native English speaker. From several language learner textbooks, we selected questions
in order to have an equal mix of two easy, four medium, and three hard questions for two different cloze
test questionnaires A and B (see Appendix A and B).
In order to have objectively comparable test cases, the English teacher provided four possible answers
for each of the nine questions from test A and B, from which participants had to choose one in each case.
This way, the participants do not have to rely on their subjective own vocabulary knowledge.
967
Table 1: Results of our user study on the impact of usage search engines on language learners.
Experiment Question Questions answered
difficulty manually with search engine available
but not used and used
X ? ? sum X ? ? X ? ? sum
easy 17 41 0 58 7 2 1 42 6 0 58
Average medium 61 100 3 164 25 16 1 88 34 0 164
Learners hard 37 72 2 111 4 22 2 18 62 1 111
all 115 213 5 333 36 40 4 149 102 1 333
Highly easy 11 5 0 16 10 1 0 4 1 0 16
Experienced medium 27 17 0 44 24 2 0 14 3 1 44
Learners hard 18 12 0 30 8 8 0 4 10 0 30
all 56 34 0 90 42 11 0 22 14 1 90
easy 147 29 1 177 28 2 1 135 11 0 177
Specific medium 117 57 3 177 20 6 1 123 24 3 177
Operators hard 135 40 2 177 31 5 2 130 18 1 177
all 399 126 6 531 79 13 4 378 53 4 531
Search engine not used Search engine used
Experiment Search engine used vs not used
p-value effect size
Average Learners 0.0000 0.73 large
Highly Exp. Learners 0.7030 0.12 small
Specific Operators 0.0000 0.58 large
In the left table,Xdenotes correct answers,
? denotes wrong answers, and ? denotes
unanswered questions.
To evaluate the statistical significance and the
effect size, we distinguished cloze test answers
for the conditions ?Search engine not used? and
?Search engine used? in the left table.
The brackets below the bottom row of the left
table indicate which cases fall under what
condition.
The English teacher first chose the questions independent of knowing the indexed n-grams of the
search engine. In a ?postprocessing? step, the chosen answers for the questions are checked for existence
in the n-gram vocabulary of the search engine. This always was the case, although sometimes the queries
required to retrieve them were different from the exact context around the cloze test?s missing word. This
check ensured that there was a chance of answering each individual question in the cloze tests with the
search engine.
During the experiment, the use or non-use of the search engine is the independent variable. The
dependent variable is the number of correct answers per questionnaire. There also are confounding
variables like whether our engine really was used when it was allowed, the time needed to type queries,
or the different numbers of answered questions with and without the search engine. We will further
elaborate on how we deal with these variables in the following description of the experimental process.
Experimental Process From three different local high schools, 43 German pupils (23 female, 20 male;
mean age 16.2, SD = 1.2) with five or more years of English courses participated in six groups. None
of the participants had any previous experience with any usage search engine.
When a group arrived in our lab, they were randomly assigned to a lab seat; questionnaire A or B
were distributed ensuring that neighboring participants had a different question set. This way, the test
distribution was random and the participants could not collaborate (which was also ensured by their
accompanying ?watchdog? teachers). After seven minutes, the first questionnaires were collected and
a short five minute introduction to the search engine and its operator set was given. To ensure that
the pupils really followed the introduction, we provided the chance of winning small prices based on
correctly answering a question on the underlying technique of usage search engines?the index?in an
exit questionnaire. After that, each participant had to solve the opposite questionnaire (A when the first
was B, and vice versa) but was allowed to use the search engine this time. In pilot studies, we noticed
that pupils of that age often need a lot of time for typing their search queries on a standard keyboard.
Thus, we allowed 10 minutes for the second questionnaire. This confounding variable of different timing
for the questionnaires could not be avoided. Otherwise, most participants would not have had the chance
to complete all questions. In order to check whether our participants actually used the search engine, we
logged their querying behavior and manually identified the questions which they had answered without
using the search engine.
Results and Discussion Since not all participants answered all questions for both cloze tests, we ex-
cluded the six participants from the following analyses, who had a difference of more than one between
the number of answered questions for either test.
The aggregated numbers on questionnaire performance for the remaining 37 individuals are given in
the first block of rows of Table 1 (?Average Learners?). Note that the ratio of correct vs. incorrect answers
goes up when the search engine was used: on average, an individual answered two more questions
correctly. Especially interesting is that the short five minute introduction was sufficient for that effect
968
which shows the strength of the textual interface. To statistically estimate the per-individual effect, we
compare the ratio of correct answers among all answers when the search engine was used to the ratio
when it was not used (note that this includes the questions where the engine was allowed but was not used;
i.e., columns ?manually? and ?but not used? in Table 1). According to the Shapiro-Wilk test (Razali and
Wah, 2011), the individual participants? ratios are not normally distributed for either condition (engine
used vs. not used) such that we choose a non-parametric significance test (Lazar et al., 2010). For our
within-subjects design with ratio data and two to-be-compared samples, the Wilcoxon signed rank test
is known as a suitable significance test (Lazar et al., 2010). For the 37 participants? ratios we get a p-
value below 0.001 and thus can reject the null hypothesis that the ratios? distributions are equal. Further
estimating the effect size for the Wilcoxon signed rank test, we obtain a value of 0.73 which corresponds
to a large effect (Cohen, 1988; Fritz et al., 2012). This result supports our prediction that the search
engine can help resolve writing uncertainties.
We also studied the query logs of our participants. Per cloze test question, they submitted 4?5 queries
with 2?3 terms on average (a wildcard is counted as a term). The last query in each such ?search session?
for a single question typically was 3?4 terms long. Almost all participants only used the ?-operator and
most participants chose the strategy of querying with context before and after the operator. Having only
context before or only after the operator are less successful strategies with higher error ratios.
4.2 Experiment 2: General Usage, Highly Experienced Learners
In our neighborhood, there also is an international high school, where German pupils have all their
classes taught in English. Obviously, such pupils have a much higher experience speaking and writing
English than our participants from Experiment 1. For a second experiment, we invited pupils from the
international school to our lab. Our hypothesis is that the pupils from the international school will have
to use the search engine less frequently but still can benefit from it for individual questions.
Experimental Design and Process We used the same questionnaires, time constraints, and logging
strategies as in Experiment 1. From the international school, 12 German pupils (7 female, 5 male; mean
age 16.5, SD = 0.7) participated in two groups. These pupils are taught all their courses in English
for five and more years. None of them had any previous experience with usage search engines. The
experimental process was as in Experiment 1.
Results and Discussion Again, not all participants answered all questions for both cloze tests; we ex-
cluded the two participants from the following analyses, who had a difference of more than one between
the number of answered questions for either test.
The aggregated numbers on questionnaire performance for the remaining 10 individuals are given in
the second block of rows of Table 1 (?Highly Experienced Learners?). As expected, the highly experi-
enced pupils used the search engine very rarely. This is not too surprising since our questionnaires were
designed with an average German pupil in mind; many questions seemed too easy to the internationals
which they also indicated in their exit questionnaires. Still, on a per-question basis, for the medium and
difficult questions where the pupils used the search engine, they slightly improved their performance.
However, the sample and the effect size are too small to draw any reliable conclusions.
The experiment shows that the highly experienced pupils indeed did not use our engine often. How-
ever, the predicted benefit for them cannot be confirmed from our small sample. It is thus an interesting
open task to conduct a larger study with highly experienced users and more difficult questions.
4.3 Experiment 3: Specific Operators, Average Learners
Our first experiment revealed that most participants used the ?-operator to solve the tasks. We thus
designed a third experiment specifically targeted at the options, synonyms, and word-order operators of
our Netspeak search engine. Our hypothesis is that each individual operator helps improve a human?s
performance in cloze tests targeted at the individual operator.
Experimental Design As in Experiment 1, we asked the university-level English teacher to design
two cloze test questionnaires (see Appendix C and D); for each operator with an easy, a medium, and
969
a hard question. Here, the questions for the option operator are of a similar kind as the questions from
Experiment 1. Four alternatives are given, but the participants are asked to use the option operator [] and
not the ?-operator. For synonyms, a complete sentence is given and for a specified word, the best among
four given potential synonyms is requested. As for the word order operator, a two-word phrase is missing
from the sentence and the two different word orders are provided as options. Like in Experiment 1 and 2,
the explicit answer options ensure that the test is objective and not subjective. In a second development
step, the questions were checked for solvability using the search engine just like in Experiment 1.
Experimental Process From three different local schools, 66 pupils (45 female, 21 male; mean
age 15.9, SD = 1.4) participated in six groups. None of the pupils participated in Experiment 1 or 2 nor
had they any previous experience with usage search engines. These pupils have learned English in their
schools for at least five years. The schedule was similar to Experiment 1 with an emphasis on the three
tested operators in the introductory explanations on Netspeak. In the questionnaires, the pupils were
asked to use only the specific operator for the respective queries. Logging their queries, we are able to
exclude solutions obtained by using a not-allowed operator.
Results and Discussion Again, not all participants answered all questions for both cloze tests; we
excluded the seven participants from the following analyses, who had a difference of more than one
between the number of answered questions for either test.
The aggregated numbers on questionnaire performance for the remaining 59 individuals are given in
the third block of rows of Table 1 (?Specific Operators?). Note that the ratio of correct vs. incorrect
answers goes up when the search engine was used: one to two more questions correctly answered on
average. As in Experiment 1, the short five minute introduction is sufficient for that effect which shows
the strength of our interface. To statistically estimate the per-individual effect, we compare the ratio
of correct answers among all answers when the search engine was used to the ratio when it was not
used (note that this includes the questions where the engine was allowed but was not used; i.e., columns
?manually? and ?but not used? in Table 1). For the 59 participants? ratios, we get a p-value below 0.001
and thus can reject the null hypothesis that the ratios? distributions are equal. Further, estimating the
effect size for the Wilcoxon signed rank test, we obtain a value of 0.58 which corresponds to a large
effect (Cohen, 1988; Fritz et al., 2012). Again, the result supports our prediction that usage search
engines can help resolve writing uncertainties.
However, a deeper analysis reveals that the large effect is due to the synonym operator. Only for
that operator, a statistically significant performance difference and a large effect size can be shown. For
the other two operators, the null hypothesis of no performance difference cannot be rejected. This is
in line with the exit questionnaire findings, where the pupils reported the synonym operator to be very
helpful while the other questions were perceived as rather easy. In the query log analyses, we found that
context before and after the wildcard had a similarly positive effect as before and was generally better
than adding context only before the wildcard.
5 Conclusion and Future Work
Search engines for common usage have the potential to become an important tool for second language
writers and learners. The possibility to check one?s language against what is commonly written forms a
unique opportunity to improve one?s writing on-the-fly. Such information has not been available at scale
so far. Our user study shows that usage search engines can indeed help second language writers solve
uncertainties about formulations. Modeling writing uncertainties by carefully designed cloze tests, we
are able to show a significant improvement when experienced language learners use the search engine.
Highly experienced language learners represented by our study participants from an international
school, however, did not use the search engine often enough to draw meaningful conclusions. This
can probably be attributed to the fact that the cloze tests were not tailored to their level of language pro-
ficiency. Therefore, the question of whether also highly experienced writers and learners, or even native
speakers, can benefit from such search engines remains open and is left for future work.
Another missing piece in determining the effectiveness of usage search engines is whether their users
970
actually learn something while using them, or whether users frequently submit the same or similar queries
again and again. Our user study was not designed to answer this question, since our participants were
only around for about 30 minutes for organizational reasons. Even measuring effects on short-term
memory is rendered infeasible in this time frame. A longitudinal study would be ideal, in this case, but
we also see an exciting, data-driven way to approach this. By analyzing the query logs of Netspeak,
which is currently being used hundreds of times per day, we can track returning users. We can then study
their online search behavior to determine if and how often they return to submit similar queries, which
allows us to draw conclusions about their learning success. More generally, the query logs of usage
search engines may form a unique opportunity to observe language learners ?in the wild? as opposed to
the laboratory.
Finally, regarding the user interface of usage search engines, our user study has revealed ways to
improve them. For example, the interface must be optimized for faster typing (especially on mobile de-
vices) as we observed that the pupils were not adept to entering special characters on standard keyboards,
which resulted in slow typing speed. Besides this, our user study also showed that the current state of
Netspeak?s textual user interface as well as the simplified wildcard query language is easy enough to
be understood in less than a minute by any newcomer, which demonstrates the low barrier to entry that
search engines for common usage have right now.
Acknowledgements
We thank the anonymous participants of our user study as well as Tim Gollub, Martin Trenkmann,
Michael V?lske, Howard Atkinson, Johannes Kiesel, Matthias Busse, and Alexander Herr for their help
in organizing the user study.
References
Djamal Belazzougui, Fabiano C. Botelho, and Martin Dietzfelbinger. 2009. Hash, Displace, and Compress. In
Proceedings of ESA 2009, pages 682?693.
Joanne Boisson, Ting-Hui Kao, Jian-Cheng Wu, Tzu-Hsi Yen, and Jason S. Chang. 2013. Linggle: A Web-scale
Linguistic Search Engine for Words in Context. In Proceedings of ACL 2013 (Demos), pages 139?144.
Thorsten Brants and Alex Franz. 2006. Web 1T 5-gram Version 1. Linguistic Data Consortium LDC2006T13.
Chris Brockett, William B. Dolan, and Michael Gamon. 2006. Correcting ESL Errors Using Phrasal SMT Tech-
niques. In Proceedings of ACL 2006, pages 249?256.
Michael J. Cafarella and Oren Etzioni. 2005. A Search Engine for Natural Language Applications. In Proceedings
of WWW 2005, pages 442?452.
Michael J. Cafarella, Christopher Re, Dan Suciu, and Oren Etzioni. 2007. Structured Querying of Web Text Data:
A Technical Challenge. In Proceedings of CIDR 2007, pages 225?234.
Jacob Cohen. 1988. Statistical Power Analysis for the Behavioral Sciences. Psychology Press.
William H. Fletcher. 2007. Implementing a BNC-Compare-able Web Corpus. In Proceedings of the 3rd Web as
Corpus Workshop, pages 43?56.
Catherine O. Fritz, Peter E. Morris, and Jennifer J. Richler. 2012. Effect Size Estimates: Current Use, Calculations,
and Interpretation. Journal of Experimental Psychology: General, 141(1):2.
Andrew Kehoe and Antoinette Renouf. 2002. WebCorp: Applying the Web to Linguistics and Linguistics to the
Web. In Proceedings of WWW 2002 (Posters).
Jonathan Lazar, Jinjuan Heidi Feng, and Harry Hochheiser. 2010. Research Methods in Human-Computer Inter-
action. Wiley Publishing.
Claudia Leacock, Martin Chodorow, Michael Gamon, and Joel Tetreault. 2010. Automated Grammatical Error
Detection for Language Learners. Morgan and Claypool Publishers.
Jean-Baptiste Michel, Yuan K. Shen, Aviva P. Aiden, Adrian Veres, Matthew K. Gray, The Google Books Team,
Joseph P. Pickett, Dale Hoiberg, Dan Clancy, Peter Norvig, Jon Orwant, Steven Pinker, Martin A. Nowak,
and Erez L. Aiden. 2011. Quantitative Analysis of Culture Using Millions of Digitized Books. Science,
331(6014):176?182.
971
Raphael Mudge. 2010. The Design of a Proofreading Software Service. In Proceedings of HLT 2010 Workshop
on Computational Linguistics and Writing, pages 24?32.
Davood Rafiei and Haobin Li. 2009. Data Extraction from the Web Using Wild Card Queries. In Proceedings of
CIKM 2009, pages 1939?1942.
Nornadiah Mohd Razali and Yap Bee Wah. 2011. Power Comparisons of Shapiro-Wilk, Kolmogorov-Smirnov,
Lilliefors and Anderson-Darling Tests. Journal of Statistical Modeling and Analytics, 2(1):21?33.
Philip Resnik and Aaron Elkiss. 2005. The Linguist?s Search Engine: An Overview. In Proceedings of ACL 2005
(Posters and Demos), pages 33?36.
Patrick Riehmann, Henning Gruendl, Bernd Froehlich, Martin Potthast, Martin Trenkmann, and Benno Stein.
2011. The NETSPEAK WORDGRAPH: Visualizing Keywords in Context. In Proceedings of PacificVis 2011,
pages 123?130.
Patrick Riehmann, Henning Gruendl, Martin Potthast, Martin Trenkmann, Benno Stein, and Bernd Froehlich.
2012. WORDGRAPH: Keyword-in-Context Visualization for NETSPEAK?s Wildcard Search. IEEE Transac-
tions on Visualization and Computer Graphics, 18(9):1411?1423.
J. Sachs, P. Tung, and R.Y.H. Lam. 1997. How to Construct a Cloze Test: Lessons from Testing Measurement
Theory Models. Perspectives, 9:145?160.
Satoshi Sekine. 2008. A Linguistic Knowledge Discovery Tool: Very Large N -gram Database Search with
Arbitrary Wildcards. In Proceedings of COLING 2008 (Demos), pages 181?184.
Benno Stein, Martin Potthast, and Martin Trenkmann. 2010. Retrieving Customary Web Language to Assist
Writers. In Proceedings of ECIR 2010, pages 631?635.
W. L. Taylor. 1953. Cloze Procedure: A New Tool for Measuring Readability. Journalism Quarterly, 30:415?433.
Dominic Tsang and Sanjay Chawla. 2011. A Robust Index for Regular Expression Queries. In Proceedings of
CIKM 2011, pages 2365?2368.
Appendix
A Questionnaire A from Experiments 1 and 2
1. I really prefer just anything watching television.
? against X to ? about ? on
2. Has Tony?s new book yet?
X come out ? published ? developed ? drawn up
3. If this plan off, I promise you you?ll get the credit for it.
? lets ? goes ? gets X comes
4. Helen had great admiration her history teacher.
? in ? to X for ? on
5. I just couldn?t over how well the team played!
X get ? turn ? make ? put
6. The problem stems the government?s lack of action.
? out X from ? under ? for
7. It?s too late to phone Jill at work, at any .
? case ? time ? situation X rate
8. I?m afraid I?m not very good children.
? about ? for X with ? at
9. We are no obligation to change goods which were not purchased here.
? with X under ? to ? at
B Questionnaire B from Experiments 1 and 2
1. Don?t worry about the lunch. I?ll to it.
? look ? prepare ? care X see
2. I am afraid that these regulations have to be with.
? provided X complied ? faced ? met
3. Our thoughts on our four missing colleagues.
? based X centred ? laid ? depended
4. Carol doesn?t have a very good relationship her mother.
X with ? at ? for ? to
972
5. It seems to be your boss who is fault in this case.
? under ? with X at ? for
6. Being rich doesn?t count much on a desert island.
? on ? to ? of X for
7. The policeman me off with a warning as it was Christmas.
? sent ? gave X let ? set
8. Tina is an authority Byzantine architecture.
X on ? for ? with ? in
9. I was the impression that you liked Indian food.
? at ? with ? of X under
C Questionnaire A from Experiment 3
Choose the word which fits best using the options operator [<words>].
1. If you spend so much money every day, you will out of money before the end of the month.
? pay ? use X run ? take
2. You need to take all your other clothes before you put on your swimming costume.
? down ? away ? out X off
3. I?m afraid I?m not very good history.
? about ? for X at ? with
Choose the best synonym for the underlined word using the synonym operator ?<word>.
4. I love studying geometry the most.
? hate ? absent X enjoy ? difficult
5. My ambition is to become a computer scientist.
? thought ? reward ? study X dream
6. Your action will have serious consequences.
X effects ? events ? reasons ? affects
Choose the correct word order using the word order operator {<words>}.
7. The bird! I?m going to help it!
X poor little ? little poor
8. She was wearing a dress.
? green beautiful X beautiful green
9. I plan on wearing my coat.
X long black ? black long
D Questionnaire B from Experiment 3
Choose the word which fits best using the options operator [<words>].
1. Sometimes Julia speaks very quickly so the other students have to ask her to slow .
X down ? up ? out ? off
2. The missing plane has apparently disappeared without a .
? sign ? news ? word X trace
3. When Gabriel?s credit card stopped, he cut it many small pieces.
? out X into ? apart ? in
Choose the best synonym for the underlined word using the synonym operator ?<word>.
4. I choose to study the differences between alligators and crocodiles.
? make ? buy X prefer ? wash
5. I cannot find my money. Can you get me my billfold?
X wallet ? pocket ? watch ? bag
6. This is a very rough environment for elephants to live in.
X harsh ? abrasive ? coarse ? beneficial
Choose the correct word order using the word order operator {<words>}.
7. She sold the chairs at a yard sale.
? wooden old X old wooden
8. The years were fantastic.
? two first X first two
9. It?s close to the building.
X big blue ? blue big
973
Proceedings of COLING 2014, the 25th International Conference on Computational Linguistics: Technical Papers,
pages 2018?2029, Dublin, Ireland, August 23-29 2014.
Generating Acrostics via Paraphrasing and Heuristic Search
Benno Stein Matthias Hagen Christof Br
?
autigam
Bauhaus-Universit?at Weimar, Germany
<first name>.<last name>@uni-weimar.de
Abstract
We consider the problem of automatically paraphrasing a text in order to find an equivalent text that
contains a given acrostic. A text contains an acrostic, if the first letters of a range of consecutive
lines form a word or phrase. Our approach turns this paraphrasing task into an optimization
problem: we use various existing and also new paraphrasing techniques as operators applicable to
intermediate versions of a text (e.g., replacing synonyms), and we search for an operator sequence
with minimum text quality loss. The experiments show that many acrostics based on common
English words can be generated in less than a minute. However, we see our main contribution in
the presented technology paradigm: a novel and promising combination of methods from Natural
Language Processing and Artificial Intelligence. The approach naturally generalizes to related
paraphrasing tasks such as shortening or simplifying a given text.
1 Introduction
Given some text, paraphrasing means to rewrite it in order to improve readability or to achieve other
desirable properties while preserving the original meaning (Androutsopoulos and Malakasiotis, 2010).
The paper in hand focuses on a specific paraphrasing problem: rewriting a given text such that it encodes
a given acrostic. A text contains an acrostic if the first letters of a range of consecutive lines form a
word or phrase read from top to bottom. A prominent and very explicit example of former Governor
Schwarzenegger is shown in Figure 1 (see the third and fourth paragraphs). Schwarzenegger himself
characterized the appearance of that acrostic a ?wild coincidence?.
1
However, such a coincidence is
highly unlikely: Using the simplistic assumption that first letters of words are independent of each other
if more than ten words are in between (line length in the Schwarzenegger letter) and calculating with
the relative frequencies of first letters in the British National Corpus (Aston and Burnard, 1998), the
probability for the acrostic in Figure 1 can be estimated at 1.15 ? 10
?12
. Typically, a given text will not
contain a given acrostic but has to be reformulated using different wording or formatting to achieve the
desired effect. Thus we consider the purposeful generation of acrostics a challenging benchmark problem
for paraphrasing technology, which is subject to soft and hard constraints of common language usage.
The paper shows how heuristic search techniques are applied to solve the problem. Different paraphras-
ing techniques are modeled as operators applicable to paraphrased versions of a text. By pruning the
so-formed search space and by employing a huge corpus of text n-grams for the possible operators, we
are able to generate acrostics in given texts. Our algorithmic solution is a novel combination of techniques
from Natural Language Processing and Artificial Intelligence. We consider such combinations as a very
promising research direction (Stein and Curatolo, 2006; Sturtevant et al., 2012), and we point out that
the problem of acrostic generation serves as a serious demonstration object: the presented model along
with the heuristic search approach generalizes easily to other paraphrasing tasks such as text shortening,
improving readability, or e-journalism.
2 Related Work and Problem Definition
Rewriting a given text in order to ?encode? an acrostic is a paraphrasing problem, which in turn is studied
in the domain of computational linguistics and natural language processing. We review relevant literature
This work is licenced under a Creative Commons Attribution 4.0 International License. Page numbers and proceedings footer
are added by the organizers. License details: http://creativecommons.org/licenses/by/4.0/
1
www.huffingtonpost.com/2009/10/30/schwarzenegger-f-bomb-in_n_340579.html, last accessed: June 12, 2014.
2018
To the Members of the Californian State Assembly:
I am returning Assembly Bill 1178 without my signature.
F or some time now I have lamented the fact that major issues are overlooked while many
u nnecessary bills come to me for consideration. Water reform, prison reform, and health
c are are major issues my Administration has brought to the table, but the Legislature just
k icks the can down the alley.
Y et another legislative year has come and gone without the major reforms Californians
o verwhelmingly deserve. In light of this, and after careful consideration, I believe it is
u nnecessary to sign this measure at this time.
Sincerely,
Arnold Schwarzenegger
Figure 1: Excerpt from a letter of former Governor Arnold Schwarzenegger to the Californian State
Assembly in October 2009. The third and fourth paragraphs contain the acrostic ?F??? You?.
of the topic and highlight techniques that will be employed in our work.
An important branch of the paraphrasing literature focuses on analyses with fixed corpora. Such corpora
typically are parallel in the sense that they contain different formulations of the same facts (Barzilay and
McKeown, 2001; Barzilay and Lee, 2003; Callison-Burch, 2008). These ?facts? can be news articles on
the same event (Clough et al., 2002; Dolan and Brockett, 2005), different translations of a source text to a
target language (Pang et al., 2003), or cross-lingual parallel corpora (Bannard and Callison-Burch, 2005).
As most of the early parallel corpora were constructed manually (especially the judgments of whether a
pair of sentences forms a paraphrase), there are two shortcomings. First, the obtained paraphrases are
usually specific to the domain covered in the corpus (e.g., showbiz news) and often do not generalize well.
Second and probably more severe is the fact that manually building parallel corpora is very expensive,
such that the available ones are rather small: the METER corpus contains only 1717 texts on legal issues
and showbiz (Clough et al., 2002), the MSRP corpus contains only 5801 sentence pairs (Dolan and
Brockett, 2005). Recently, new methods employ machine learning techniques to automatically build larger
paraphrase collections from parallel corpora (Ganitkevitch et al., 2011; Ganitkevitch et al., 2013; Metzler
et al., 2011; Metzler and Hovy, 2011). We include the paraphrase database (Ganitkevitch et al., 2013)?a
database of extracted patterns from such large scale corpora?as one source of potential paraphrases in
our algorithm.
Compared to the large body of literature that ?extracts? paraphrases from (parallel) corpora, there is
relatively little work on automatically paraphrasing a given text. Some of the early generation methods
are based on rules that encode situations wherein a reformulation is possible (Barzilay and Lee, 2003). A
problem with rules is that often the rather complicated patterns extracted from text corpora are hardly
applicable to a given to-be-paraphrased text: manually created corpora are simply too small and machine
generated paraphrasing rules often do not match in a given text. Other early methods use machine
translation (Quirk et al., 2004). However, the need for large and expensive parallel manual translation
corpora cannot be circumvented by using multiple resources (Zhao et al., 2008).
Another branch of paraphrasing methods is based on large thesaurus resources such as WordNet (Fell-
baum, 1998). The idea is to insert synonyms into a text when the context fits (Bolshakov and Gelbukh,
2004; Kauchak and Barzilay, 2006). The most recent approaches are statistics-based (Chevelu et al., 2009;
Chevelu et al., 2010; Zhao et al., 2009; Burrows et al., 2013).
Compared to the existing research, we have a more difficult use case here. Existing paraphrase
generation focuses on sentence paraphrasing, while we have to consider a complete text that has to be
rewritten/reformatted in order to contain a given acrostic. We will employ the above shown state-of-the-art
paraphrasing procedures as ?operators? in our approach. This new problem setting of applying different
operators to a complete text forms a search problem with a huge search space. In order to deal with
this search space, we apply powerful search heuristics from Artificial Intelligence. The combination of
heuristic search with established text level paraphrasing techniques represents a new approach to tackle
problems in computational linguistics. The acrostic generation problem is defined as follows:
2019
ACROSTIC GENERATION
Given: (1) A text T and an acrostic x .
(2) A lower bound l
min
and an upper bound l
max
on the desired line length.
Task: Find a paraphrased version T
?
of T in monospaced font that encodes x in some
of its lines when possible. Each line of T
?
has to meet the length constraints.
3 Modeling Paraphrasing as Search Problem
This section shows how to model paraphrasing in general and ACROSTIC GENERATION in particular as
a search problem (Pearl, 1984). The search space is a universe T of candidate texts for which we can
devise, at least theoretically, a systematic search strategy: if T is finite, each element n ? T is analyzed
exactly once. The elements in T represent states (nodes), and there is a limited and a-priori known set of
possibilities (edges, paraphrasing operators) to get from a node n to an adjacent or successor node n
i
. A
paraphrasing operator ? provides a number of parameters that control its application. Each state n ? T
is considered an acrostic (sub)problem; the dedicated state s ? T represents the original problem while
? ? T is the set of solution nodes that have no problem associated with. The following subsections
will outline important properties of the search space and introduce a suited cost measure to control the
exploration of T .
3.1 Search Space Structure
Solving an instance of ACROSTIC GENERATION under a so-called state-space representation means to
find a path from s, which represents the original text T , to some goal state ? ? ?. The problem of finding
an acrostic consists of tightly connected subproblems (finding subsequences of the acrostic) that cannot
be solved independently of each other. Most puzzles such as Rubik?s cube are of this nature: changing a
decision somewhere on the solution path will affect all subsequent decisions. By contrast, a so-called
problem-reduction representation will exploit the fact that subproblems can be solved independently of
each other. Many tasks of logical reasoning and theorem proving give rise to such a structure: given a set
of axioms, the lemmas required for a proof can be derived independently, which in turn means that the
sought solution (a plan or proof) is ideally represented by a tree.
Searching T under a state-space representation means to unfold a tree whose inner nodes link to
successor nodes that encode alternative decisions; hence these inner nodes are also called OR-nodes. Each
path from s that can be extended towards a goal state ? forms a solution candidate. Similarly, searching
T under a problem-reduction representation also means to unfold a tree?however, the tree?s inner nodes
must be distinguished as AND-nodes and OR-nodes, whereas the successors of an AND-node encode
subproblems all of which have to be solved. A solution candidate then is a tree comprised of (1) the root s,
(2) OR-nodes with a single successor, and (3) AND-nodes with as many successors as subproblems all of
which are characterized by the fact of being extensible towards goal states in ?. Figure 2 contrasts both
search space structures.
Under either representation, OR-graphs as well as AND-OR-graphs, the application of a sequence of
?
?
[T, x] Problem specification
Dead end: node with unsolvable problem
Goal state: no problem associated with node
OR-node AND-node
(a) (b)
Legend:
Solution
candidate
...
n4 n6n5
n1
s
n3n2
[T, x]
[T', y]
[T*]
...
... ? ?
n4 n6n5
n1
s
n2
[T, x]
[Ty , y]
?
...
[Tz , z]
?? [Ty*] *][Tz...
Figure 2: (a) State-space representation (OR-graph) versus (b) Problem-reduction representation (AND-
OR-graph). OR-nodes encode alternative decisions, while AND-nodes decompose a problem into sub-
problems all of which are to be solved.
2020
operators will easily lead to situations where states are revisited?precisely: are generated again. Search
algorithms maintain so-called OPEN- and CLOSED-lists to manage the exploration status of generated
nodes. However, because of the intricate state encoding, which must inform about the effect of all applied
operators from s to an arbitrary node, the exponentially growing number of nodes during search, and the
necessity of efficiently querying these lists, sophisticated data structures such as externalized hash tables
and key value stores are employed. Typically, these data structures are tailored to the problem domain
(here: to paraphrasing), and they model heuristic access strategies to operationalize a probabilistically
controlled trade-off between false positive and true negative answers to state queries.
We have outlined the different search space structures since ACROSTIC GENERATION may show an OR-
graph puzzle nature at first sight: paraphrasing at some position will affect all following text. Interestingly,
there is a limited possibility to introduce ?barriers? in the text, which allows for an AND-OR-graph
modeling and hence for an isolated subproblem treatment. Examples include paraphrasing operators that
do not affect line breaks, or acrostics consisting of several words and thus spanning several paragraphs.
Since in general the underlying linguistic considerations for the construction and maintenance of such
barriers are highly intricate and complex, we capture this structural constraint probabilistically as shown
in Equation (1). The equation models the problem difficulty or effort for acrostic generation, E, and
introduces P
y?z
(|x|), which quantifies the probability for the event that an acrostic x can be treated
independently as two partial acrostics y and z, where x = yz.
E(x) =
?
?
?
e(x) If |x| = 1.
P
y?z
(|x|) ?
(
E(y) + E(z)
)
+ (1? P
y?z
(|x|)) ? E(y) ? E(z) If |x| > 1.
(1)
Remarks. The effort for generating a single-letter acrostic of length 1 is e(x), with e(x) ? 1. Based on
e(x), we recursively model the true effort E(x) for generating an acrostic x = yz as follows: as additive
effort if the generation of the acrostics y and z can be done independently, and as multiplicative effort
otherwise. Observe how P
y?z
controls the search space structure: if P
y?z
= 0 for all partitionings of
x into y and z, one obtains a pure state-space representation for ACROSTIC GENERATION. Similarly,
the other extreme with P
y?z
= 1 results in a series of |x| letter generation problems that can be solved
independently of each other.
As an estimate e?(x) for e(x) we suggest the multiplicative inverse of the occurrence probabilities
of the first letters in the English language, as computed from the British National Corpus (BNC). The
BNC is a 100 million word collection of written and spoken language from a wide range of sources,
designed to represent a wide cross-section of current British English (Aston and Burnard, 1998). The
BNC probabilities vary between 0.115719 for the letter ?s? and 0.00005 for the letter ?z?. As an estimate
for P
y?z
we suggest the N(5, 0.5) distribution to model the paragraph lengths in T or, equivalently, the
number of characters of the (English) words in x. These choices give rise to
?
E(x), the estimated effort for
generating an acrostic x.
?
E(x) is used to assess the (residual) problem complexity and, under a maximum
likelihood approach, models the expected search effort. There is a close relation between the effort
estimate
?
E and the quality estimate
?
Q introduced below, which will be exploited later on, in Equation (3).
3.2 Cost Measure Structure
Cost measures?equivalently: merit measures?form the heart of systematic search strategies and de-
termine whether an acceptable solution of a complex problem can be heuristically constructed within
reasonable time. Here, we refer to general best-first search strategies as well as variants that relax strict
admissibility. As a working example consider the following text T about Alan Turing taken from the
English Wikipedia, where the task is to generate the acrostic x = Turing with l
min
= 55 and l
max
= 60.
Alan Mathison Turing was a British mathematician, logician,
cryptanalyst and computer scientist. He was highly influential in
the development of computer science, giving a formalization of the
concepts of algorithm and computation with the Turing machine,
which can be considered a model of a general purpose computer.
2021
A possible solution T
?
(a paragraph?s last line may be shorter than l
min
) :
T he British mathematician Alan Mathison Turing was also an
u nrivaledlogician,cryptanalystandcomputerscientist.He
r evolutionized the development of computer science, giv-
i ng a formalization of the concepts of algorithm and defi-
n ite computation with the Turing machine, which can be re-
g arded a model of a general purpose computer.
T
?
is of a high quality though it introduces an exaggerating tone, this way violating Wikipedia?s
neutrality standard. Also note that the applied paraphrasing operators vary in their quality, which is rooted
in both the kind and the context of the operators. Table 1 (left) shows a selection of the operators, some of
which are applied in a combined fashion. Section 4 introduces the operators in greater detail.
To further formalize the quantification of a cost measure C or a merit measure Q, we stipulate on the
following properties:
1. The quality of the original text T cannot be improved. Each paraphrasing operator ? introduces
unavoidable deficiencies in T .
2. The overall quality of a solution T
?
depends on the quality of all applied paraphrasing operators.
3. Following readability theory and relevant research, the severity of text deficiencies?here introduced
by a paraphrasing operator ??has a disproportionate impact on the text quality (Meyer, 2003).
4. To render different problems and solutions comparable, the achieved quality of a solution T
?
has to
be normalized.
Equation (2) below shows the basic structure of Q, the proposed, unnormalized merit measure. Its
optimization yields Q
?
. Q
?
(n) assigns to a node n ? T the maximum paraphrasing quality of a text T
?
that contains the partial acrostic associated with n. Likewise, Q
?
(s) characterizes the quality of the
optimum solution for solving ACROSTIC GENERATION.
1
Q
?
(n)
=
?
?
?
0 If n ? ?.
min
i
{
1
q(n, n
i
)
+
1
Q
?
(n
i
)
}
Otherwise.
(2)
Remarks. The state (node) n
i
denotes a direct successor of the state (node) n in the search space T .
Associated with n
i
is a text resulting from the application of a paraphrasing operator ? to the text associated
with n, whereas q(n, n
i
) quantifies the local quality achieved with ?. The measure in Equation (2) is
both of an additive form and formulated as a minimization problem. As shown in the following, it can
be reformulated for a best-first algorithm scheme, ensuring admissibility under a delayed termination
condition. Also note that the merit measure operationalizes the above Property 3 via the harmonic mean
computation. Accordingly, we obtain a normalized overall quality
?
Q
?
given an acrostic x as
?
Q
?
= |x|?Q
?
.
To turn Equation (2) into actionable knowledge, the quality q(n, n
i
) of a paraphrasing operator ? when
moving from n to a successor n
i
needs to be quantified. We employ for q the domain [0; 1], where 0 and 1
encode the worst and best achievable quality respectively. By construction the normalized quality
?
Q
?
will
then lie in the interval [0; 1] as well, thus greatly simplifying the interpretation of the measure.
Table 1 (right) shows values for the local quality of the operators in the Alan Turing example, which
are derived from linguistic quality considerations and the experimental analysis detailed in Section 5. The
comment column argues the linguistic meaningfulness. If we agree on q = 1.0 for the first two lines of
the generated acrostic x = Turing and recursively apply the merit measure defined in Equation (2), we
obtain Q = 0.127 as unnormalized and
?
Q = |x| ?Q = 0.76 as normalized overall quality.
To make Equation (2) applicable as cost estimation heuristic f(n) in a best-first algorithm scheme,
Equation (3) below unravels its recursive structure in the usual way as f(n) = g(n)+h(n). The semantics
is as follows: under an optimistic estimate h(n) (= underestimating costs or overestimating merits) the
2022
Table 1: Left: Paraphrasing operators in the Alan Turing example. Right: Values for the local quality of
the respective operators, which entail the normalized overall quality
?
Q = 0.76 for the example.
Line Operator ? Text? paraphrased text
3 synonym highly influential?revolutionized
4 hyphenation giving? giv-ing
5 tautology computation? defi-nite computation
6 synonym considered? re-garded
q(n, n
i
) Comment
0.9 stylistically well, exaggerating tone
0.6 unexpected hyphen for a short word
0.6 tautology arguable, hyphen unusual
0.7 synonym suited, hyphen acceptable
total cost (the overall quality) for solving ACROSTIC GENERATION via a path along node n is always
larger (smaller) than f(n). In particular, g(n) accumulates the true cost (the achieved quality) for the
partial acrostic via a concrete path s = n
0
, n
1
, . . . , n
k
= n, while h(n) gives an underestimation of the
cost (overestimation of the quality) for the remaining part of the acrostic. Observe that the additive form
of Equation (2) guarantees the parent discarding property (Pearl, 1984), which states that no decision on a
path from n to a goal state ? can change the value for g(n).
A tricky part is the construction of h(n), which, on the one hand, may ensure admissibility, while, on
the other hand, should be as close as possible to the real cost. Here, the measure E(x) for the problem
difficulty from Equation (1) comes into play, which models the problem decomposability and which
informs us about the largest remaining subproblem (= the depth of the deepest remaining OR-graph) when
solving x. Without loss of generality, admissibility is ensured if (a) the probability P
y?z
used in
?
E(x)
is biased towards decomposability, and if (b) we assume that the remaining acrostic x can be solved by
always applying the cheapest (maximum quality-preserving) operator q
max
.
1
?
Q(n)
? ?? ?
f(n)
=
k
?
i=1
1
q(n
i?1
, n
i
)
? ?? ?
g(n)
+ log
K
(
?
E(?(n))
)
?
1
q
max
? ?? ?
h(n)
, where n
0
= s, n
k
= n (3)
Remarks. ?(n) denotes the remaining acrostic x that is associated with node n ? T . The logarithm
base K serves for normalization purposes with regard to the BNC letter frequencies e?(x), |x| = 1,
which are used within
?
E(x) in Equation (1). We define K as the multiplicative inverse of the occurrence
probability of the least frequent letter in the remaining acrostic x = ?(n), which gives rise to the inequality
log
K
(
?
E(x)) ? |x|. This choice entails two properties: (1) it underestimates the remaining acrostic length
and hence ensures the admissibility characteristic of h(n), and, (2) it yields an increasing accuracy of
h(n) when approaching a goal state in ?. Finally, we can substitute 1.0 as an upper bound for q
max
, again
preserving the admissibility of h(n).
Admissibility, i.e., the guarantee of optimality during best-first search, may not be the ultimate goal: if
h(n) underestimates costs (overestimates merits) too rigorously, best-first search degenerates to a kind
of breadth-first search?precisely: to uniform-cost search. Especially if computing power is a scarce
resource, we may be better off with a depth-preferring strategy. Observe that the logarithm base K in
Equation (3) provides us a means to smoothly vary between the two extremes, namely by choosing K
from [K
min
;K
max
], where K
min
(K
max
) specifies the multiplicative inverse of the occurrence probability
of the most (least) frequent letter in the remaining acrostic x = ?(n).
4 Paraphrasing Operators
Most of the following operators used in our heuristic search process employ state-of-the-art linguistic
tools or are based on standard knowledge from Wikipedia. Table 2 shows information about the role of
individual operators in our experiments from Section 5; the table illustrates also the effort for preparing
(offline) and applying (online) the operators.
2023
4.1 Context-Independent Operators
Line break Since we are dealing with text that should spread over several lines, breaking between lines
is one of the most basic operators. Similarly, it is the most efficient operator, and Column 4 of Table 2
illustrates the performance of the others in relation to this operator. Line breaks are possible at the end of
sentences (i.e., a paragraph break), while a line break in between words is only possible if it falls in the
[l
min
; l
max
]-window given by the line length constraints.
Hyphenation Related to line breaks are hyphenations. We re-implemented and employ the standard
T
E
X hyphenation algorithm (Knuth, 1986). Analogous to line breaks, hyphenation is applicable if the line
after hyphenating (and line breaking) has a length in the [l
min
; l
max
]-window.
Function word synonym Specific groups of so-called synsemantic words can often be replaced by
each other without changing a text?s meaning. We have identified 40 such groups from a list of Sequence
Publishing
2
and the Paraphrase Database (Ganitkevitch et al., 2013). Examples are {can, may}, {so, thus,
therefore, consequently, as a result}, and {however, nevertheless, yet}.
Contraction and expansion Some local text changes can be achieved by contracting or expanding for-
mulations like ?he?ll? or ?won?t?. We have identified 240 such pairs from Wikipedia.
3
Other possibilities
are to spell out / contract standard abbreviations and acronyms. We have mined a list of several thousand
such acronyms from the Web.
4
Finally, also small numbers can be spelled out or be written as numerals
(e.g., ?five? instead of ?5?). It is interesting to note that this operator was hardly ever used on successful
paths in our experiments.
Spelling In principle, we want to generate text that is correctly spelled. In certain situations, however, it
can nevertheless be beneficial to introduce some slight mistakes in order to change word lengths or to
generate letters not present in the correctly spelled text. We employ a list of 3 000 common misspellings
mined from Wikipedia
5
(e.g., ?accidently? instead of ?accidentally?). We also include several standard
typos related to computer keyboards (e.g., an ?m? is often typed as an ?n? and vice versa) as well as
phonetic misspellings (e.g., ?f? and ?ph? often sound similar). Since the quality score of wrong spellings
tends to be low, this operator has to be treated with care. Especially at the beginning of words, typos are
less common than within words such that we allow typos only within words.
Wrong hyphenation Similar to wrong spellings is the purposeful choice of a wrong hyphenation. As
with wrong spellings the quality score is typically low. We thus employ this operator very carefully,
avoiding for instance syllables on a new line with just two letters. Analogous to correct hyphenation, the
line length has to be in the [l
min
; l
max
]-window to apply wrong hyphenation. Despite its questionable
quality, this operator is used pretty often in the experiments since it has a very high probability of
?generating? a desired letter.
4.2 Context-Dependent Operators
Synonym For identifying synonyms, WordNet?s synsets (Fellbaum, 1998) is used. Since only a small
subset of the synset members of a to-be-replaced word w is reasonable in the context around w in T ,
we check in the Google n-gram corpus (Brants and Franz, 2006) whether the synonym in fact fits in the
same context. In this regard the public and highly efficient Netspeak API (Stein et al., 2010; Riehmann
et al., 2012) is employed. For example, given ?hello world?, the most frequent phrase with a synonym
for world is ?hello earth?. The Google n-grams are up to five words long, such that at most four context
words can be checked before or after w. Previous studies showed that more context yields higher quality
synonyms (Metzler and Hovy, 2011; Pasca and Dienes, 2005), so that we use at least two words before or
after w. Higher quality scores are achieved if the context is matched before as well as after w.
2
sequencepublishing.com/academic.html\#function-words, last accessed: June 12, 2014
3
en.wikipedia.org/wiki/List_of_English_contractions\#English, last accessed: June 12, 2014,
en.wikipedia.org/wiki/English_auxiliaries_and_contractions, last accessed: June 12, 2014
4
www.acronymfinder.com, last accessed: June 12, 2014
5
en.wikipedia.org/wiki/Wikipedia:Lists_of_common_misspellings/For_machines, last accessed: June 12, 2014
2024
Table 2: Statistics for the applicability, usage, and effort of single operators. ?Application probability?
reports whether an operator is applicable at all at some node, ?Usage? reports the application probability
on a solution path, ?Effort? reports the (online) application effort as multiple of the fastest operator (the
Line break operator), and ?Offline time? reports the preprocessing time in ms per word before the actual
search is started. All numbers are profiled within the experiment setup described in Section 5.
Paraphrasing operator Application probability Usage probability Effort Offline time
(in %) (in %) (multiple of Line break) (in ms per word)
Line break 16.14 21.13 1.00 0.00
Hyphenation 5.48 9.38 1.22 1.38
Function word synonym 1.43 2.57 1.33 0.01
Contraction and expansion 0.29 0.00 1.93 0.02
Spelling 6.98 1.57 1.18 0.11
Wrong hyphenation 9.53 37.63 1.07 1.38
Synonyms 16.69 2.47 1.66 23.24
Word insertion or deletion 43.46 25.24 2.46 42.75
Average 12.50 12.50 1.49 14.35
Word insertion or deletion Similar to the synonym replacement, the insertion or deletion of short
phrases is handled. For all positions of the given text, the Google n-grams are checked with Netspeak
(see above) for a word w that sufficiently often appears within the context of the text. Similarly, for each
word w in the text, it is checked whether there are sufficiently many n-grams without the word but the
same surrounding context. In both cases, w is a candidate to be inserted or deleted. Given ?hello world?,
the most frequently used intermediate word is ?cruel?, yielding the phrase ?hello cruel world.? Again,
as with synonyms, context size and quality are positively correlated. We thus use at least two words as
context and favor variants that match more context.
4.3 Further Operator Ideas
In pilot experiments, also the three operator ideas discussed below were analyzed. The ideas show
promising results for specific cases, but they easily lead to unexpected text flows due the introduction of
odd sentences or names. The operators require future work to better fit them in the given text?s context,
and they are not employed within the experiments in Section 5.
Tautology It is often possible to introduce entirely new phrases or sentences in a text, which may
confirm a previous sentence or which introduce a (nearly) arbitrary but true statement. We tested a small
list, including among others ?As a matter of fact this is true.? or ?I didn?t know that until now.? However,
due to improper context such tautologies may mess up a text significantly.
Sentence beginning The beginning of a sentence can often be modified without changing its meaning.
Possibilities include the addition of function words like ?in general? or ?actually?, but also the addition
of a prefix like ??someone? said that . . . ? or ??time? ?someone? said that . . . ? where ?someone? is to be
replaced by a person?s name or {I, he, she} depending on the full context of the text (e.g., author?s name
or gender of name mentioned before). The ?time? expression may expand to ?yesterday? or ?last week?,
etc. Especially with the usage of names, a whole bunch of letters can be generated. However, context is
more subtle for this operator compared to the usage of Google n-grams.
Full PPDB The paraphrase database (Ganitkevitch et al., 2013) comes in different sizes and quality
levels. Many synonymity relations for nouns are already covered by WordNet, and function word
replacements are already an operator on their own. Still, the rich variety of the full data set can form a
semantically strong operator. However, in our pilot experiments, the full PPDB patterns often decreased
text quality unacceptably, such that we refrained to use PPDB as a single operator in our experiments.
2025
5 Experimental Evaluation
Goal of the evaluation is to show that our approach is able to efficiently generate acrostics in different
situations. In this regard, we analyze the general success of acrostic generation, the influence of different
operators, and effects on the text quality.
5.1 Experiment Setup
To model different ?use cases? in which acrostics have to be inserted, we use texts of different genres:
newspaper articles, emails, and Wikipedia articles. We sample 50 newspaper articles from the Reuters
Corpus Volume 1 (Lewis et al., 2004), 50 emails from the Enron corpus (Klimt and Yang, 2004), and
50 articles from the English Wikipedia. Each text contains at least 150 words excluding tables and lists.
As target acrostics for all of the above text types, the 25 most common adjectives, nouns, prepositions,
verbs, and 50 other common English words are chosen (in total 150 words).
6
This scenario reflects the
inclusion of arbitrary words. Other target acrostics are formed by the 100 most common male and female
first names from the US (in total 200 words).
7
This models the standard poetry usage of acrostics where
often a writer?s name is encoded. For all input texts, we also model self-referentiality by using a text?s first
phrases as the target acrostics (in total 150 phrases for which at least the first word has to be generated). In
these cases, the first letter of the acrostic is also the first letter of the text?a fact that enables the controlled
evaluation of the importance of the producibility of the first letter.
The evaluation system is a standard quad-core PC running Ubuntu 12.04 with 16 GB of RAM. A
relevant subset of all operator application possibilities is preprocessed and stored in-memory (e.g., the
synonym n-gram frequencies for every word), whereas the preprocessing time (about one minute in total
per run) is not counted for the search process. We then conduct an A
?
search using the preprocessed
operator tables and an admissible instance of Equation (3). To safe runtime, we slightly transform the
problem setting and require the acrostic to start at the beginning of the given text. Pilot experiments show
that a good choice for line lengths is l
min
= 50 and l
max
= 70. Note that this is only slightly more flexible
than a standard line length between 55 and 65 characters (i.e., about 10-12 words) but eases acrostic
generation. The experiments also reveal that a successful run (the acrostic can be generated) usually takes
less than 30 seconds for the search part. An unsuccessful run (the acrostic cannot be generated) takes five
to ten minutes until its termination caused by the memory constraints for the open list.
5.2 Experiment Discussion
Given our hardware and time restrictions, about 20% of the runs are successful altogether. The producibil-
ity of the first letter is critical for the overall success: we observe an almost 90% success rate for the
self-referential acrostics compared to the about 20% for all others. Statistics for the successful runs are
given in Table 3. As can be seen, our system is able to generate about 90 000 nodes with 550 goal checks
per second. This yields reasonable answer times on the test acrostics: the average number of goal checks
needed when the acrostic can be generated is below 10 000 (about 20 seconds of runtime). Only very few
successful runs took more than 40 seconds; the self-referential acrostics that often are two or three words
long form the main exception. Not that surprisingly, shorter acrostics are on average generated faster than
longer ones. Interestingly, besides self-referential acrostics, male first names seem to be the most difficult
acrostics when taking the required runtime into account. Note in this regard that many of the (longer)
female names start with a more common first letter, which can be generated faster.
Since our approach is the first attempt at the problem of acrostic generation, we cannot compare to other
systems from the literature. Instead, we compare to a baseline system that can only use line breaking and
hyphenation as its operators. This also helps to further examine the effect of the producibility of the first
letter. Whenever the acrostic?s first letter is not the first letter of the text, the baseline fails right from the
start: recall that for our experiments we require the acrostic to start at the text?s beginning. For less than
1% of our test cases, the baseline can generate the acrostic. Most of these few cases are self-referential
first words. Even if the first letter is already present, usually the second or third one are not producible by
6
en.wikipedia.org/wiki/Common_English_words, last accessed: June 12, 2014.
7
www.ssa.gov/OACT/babynames/decades/century.html, last accessed: June 12, 2014.
2026
Table 3: Experimental results for complete acrostic generations. For each of the acrostic types (Col-
umn 1), several thousand runs were conducted for which we report averaged values of the acrostic
lengths in letters (Column 2). The columns 3-10 relate to successful generations and report averaged
values for the runtime in seconds, size of the explored search tree, generated nodes and goal checks per
second, used main memory, and the quality change according to the introduced measures.
Acrostic type Length Runtime Nodes Nodes Goal checks Memory Quality-related measures
(in letters) (total in s) (total) (per s) (per s) (in MByte)
? WFC ? ARI ? SMOG
Common English words
Adjective 4.36 3.25 286 960 88 269 578 270 -0.99 -1.61 -0.91
Noun 4.47 3.40 285 016 83 837 576 277 -0.39 -0.96 -0.50
Preposition 3.44 3.16 280 593 88 853 556 243 -1.59 -2.28 -1.29
Verb 3.59 2.76 251 161 90 898 595 236 -0.95 -1.60 -0.92
Other 3.29 2.41 218 974 90 755 601 206 -1.10 -2.05 -1.11
Common US first names
Male 6.00 9.32 851 665 91 368 554 649 -0.74 -1.87 -0.93
Female 6.07 7.82 740 418 94 693 546 575 -0.60 -1.77 -0.93
Self-referential
First words 10.33 36.09 3 164 873 87 690 518 1 985 -0.31 -0.09 0.20
Average 5.19 8.53 759 957 89 545 565 372 -0.83 -1.53 -0.80
the simple operators. Using all operators, our approach is able to produce a self-referential acrostic of
more than seven characters in 80% of the cases. On average, acrostics of ten characters are possible for the
self-referential cases. This further highlights the importance of the first letter: whenever it is producible,
the success ratio is much higher.
To compare the importance of the different operators, we count for the successful generations in the
experiments of Table 3, how often operators are used and how long the search paths are. Table 2 contains
information on the applicability of the different operators. About 21% of the operator applications are line
breaks, another 9% are hyphenations. Interestingly, about 38% of the operator applications are wrong
hyphenations despite the low quality of this operator. Even though our heuristic tries to avoid wrong
hyphenations, there are a lot of situations where all other operators fail. Although not reflected by standard
quality metrics (see next subsection), a wrong hyphenation usually is eye-catching for human readers,
which gives rise to a desirable further quality improvement that should be aimed for in future work. The
other operator usages are mostly word insertions and deletions (about 25%), synonym replacements (3%),
and function words (3%). The context-independent operators of contractions and spelling correspond to
only about 1% of all operator applications.
5.3 Quality-Related Analysis
Table 3 also contains information about the text quality before and after generating the acrostic. To
algorithmically measure text quality-related effects, we employ a word frequency class analysis and a
readability analysis.
The frequency class WFC(w) of a word w relates to its customariness in written language and has
successfully been employed for text genre analysis (Stein and Meyer zu Ei?en, 2008). Let ?(w) denote
the frequency of a word in a given corpus; then the Wortschatz
8
defines WFC(w) as blog
2
(?(w
?
)/?(w))c,
where w
?
denotes the most frequently used word in the respective corpus. Here we use as reference the
Google n-gram corpus (Brants and Franz, 2006) whose most frequent word is ?the?, which corresponds to
the word frequency class 0; the most uncommonly used words within this corpus have a word frequency
class of 26. The readability of the text before and after acrostic generation is quantified according to
the standard ARI (Smith and Senter, 1967) and SMOG (McLaughlin, 1969) measures, implemented
in the Phantom Readability Library.
9
Both measures have been designed to estimate the U.S. grade
8
wortschatz.uni-leipzig.de, last accessed: June 12, 2014.
9
http://niels.drni.de/s9y/pages/phantom.html, last accessed: June 12, 2014
2027
level equivalent to the education required for understanding a given text. Hence, larger readability
scores indicate more difficult texts. The Automated Readability Index ARI (Smith and Senter, 1967) is
designed for being easily automatable and uses only the number of characters (excluding whitespace and
punctuation), words, and sentences in the text (delimited by a period, an exclamation mark, a question
mark, a colon, a semicolon, or an ellipsis). The Simple Measure of Gobbledygook SMOG (McLaughlin,
1969) includes the number of words with more than three syllables, so-called polysyllables.
ARI = 4.71 ?
Characters
Words
+ 0.5 ?
Words
Sentences
? 21.43 SMOG = 1.0430 ?
?
30 ?
Polysyllables
Sentences
+ 3.1291
Of course, the above three measures cannot capture text quality as human judges would perceive it. Still,
they have their merits and can indicate interesting trends: On average, the texts after acrostic generation
use more common words (cf. the negative ? WFC) and are easier to read (cf. the negative ? ARI and
? SMOG) for almost all acrostic types. Thus, one may argue that the quality is not harmed too much; still
some issues like wrong hyphenation are ignored by the metrics (cf. the above discussion of individual
operators). A deeper analysis of operator quality and improved quality of paraphrased texts (e.g., further
operators or avoiding wrong hyphenations) constitute very promising directions for future work.
6 Conclusion and Outlook
We have presented the first algorithmic approach to acrostic generation. The experiments show that the
heuristic search approach is able to generate about 20% of the target acrostics in reasonable time, whereas
the producibility of the first letter plays a key role. Our solution successfully combines paraphrasing
techniques from Natural Language Processing with a heuristic search strategy from Artificial Intelligence.
This way, our problem modeling opens a novel and very promising research direction, and the application
of our framework to other paraphrasing problems is the most interesting line of future work. As for the
acrostic use case, the resulting text?s quality gives the most obvious possibility for improvements. We plan
to further analyze better quality measures for the individual operators and to develop more sophisticated
operators like changing a text?s tense or even anaphora exploitation (Schmolz et al., 2012).
References
Ion Androutsopoulos and Prodromos Malakasiotis. 2010. A Survey of Paraphrasing and Textual Entailment
Methods. Journal of Artificial Intelligence Research, 38(1):135?187.
Guy Aston and Lou Burnard. 1998. The BNC Handbook. http://www.natcorp.ox.ac.uk.
Colin J. Bannard and Chris Callison-Burch. 2005. Paraphrasing with Bilingual Parallel Corpora. In Proceedings
of ACL 2005, pages 597?604.
Regina Barzilay and Lillian Lee. 2003. Learning to Paraphrase: An Unsupervised Approach Using Multiple-
Sequence Alignment. In Proceedings of HLT 2003, pages 16?23.
Regina Barzilay and Kathleen McKeown. 2001. Extracting Paraphrases From a Parallel Corpus. In Proceedings
of ACL 2001, pages 50?57.
Igor A. Bolshakov and Alexander F. Gelbukh. 2004. Synonymous Paraphrasing Using WordNet and Internet. In
Proceedings of NLDB 2004, pages 312?323.
Thorsten Brants and Alex Franz. 2006. Web 1T 5-gram Version 1. Linguistic Data Consortium LDC2006T13.
Steven Burrows, Martin Potthast, and Benno Stein. 2013. Paraphrase Acquisition via Crowdsourcing and Machine
Learning. ACM Transactions on Intelligent Systems and Technology, 4(3):43:1?43:21.
Chris Callison-Burch. 2008. Syntactic Constraints on Paraphrases Extracted from Parallel Corpora. In Proceed-
ings of EMNLP 2008, pages 196?205.
Jonathan Chevelu, Thomas Lavergne, Yves Lepage, and Thierry Moudenc. 2009. Introduction of a New Para-
phrase Generation Tool Based on Monte-Carlo Sampling. In Proceedings of ACL 2009, pages 249?252.
Jonathan Chevelu, Ghislain Putois, and Yves Lepage. 2010. The True Score of Statistical Paraphrase Generation.
In Proceedings of COLING 2010 (Posters), pages 144?152.
2028
Paul Clough, Robert Gaizauskas, Scott S. L. Piao, and Yorick Wilks. 2002. METER: MEasuring TExt Reuse. In
Proceedings of ACL 2002, pages 152?159.
William B. Dolan and Chris Brockett. 2005. Automatically Constructing a Corpus of Sentential Paraphrases. In
Proceedings of the Third International Workshop on Paraphrasing 2005, pages 1?8.
Christiane Fellbaum. 1998. WordNet: An Electronic Lexical Database. MIT Press.
Juri Ganitkevitch, Chris Callison-Burch, Courtney Napoles, and Benjamin Van Durme. 2011. Learning Sentential
Paraphrases From Bilingual Parallel Corpora for Text-to-Text Generation. In Proceedings of EMNLP 2011,
pages 1168?1179.
Juri Ganitkevitch, Benjamin Van Durme, and Chris Callison-Burch. 2013. PPDB: The Paraphrase Database. In
Proceedings of HLT 2013, pages 758?764.
David Kauchak and Regina Barzilay. 2006. Paraphrasing for Automatic Evaluation. In Proceedings of HLT 2006.
Bryan Klimt and Yiming Yang. 2004. The Enron Corpus: A New Dataset for Email Classification Research. In
Proceedings of ECML 2004, pages 217?226.
Donald E. Knuth. 1986. The T
E
Xbook. Addison-Wesley.
David D. Lewis, Yiming Yang, Tony G. Rose, and Fan Li. 2004. RCV1: A New Benchmark Collection for Text
Categorization Research. The Journal of Machine Learning Research, 5:361?397.
G. Harry McLaughlin. 1969. SMOG Grading: A New Readability Formula. Journal of Reading, 12(8):639?646.
Donald Metzler and Eduard Hovy. 2011. Mavuno: A Scalable and Effective Hadoop-Based Paraphrase Acquisi-
tion System. In Proceedings of the Third Workshop on Large Scale Data Mining 2011, pages 3:1?3:8.
Donald Metzler, Eduard H. Hovy, and Chunliang Zhang. 2011. An Empirical Evaluation of Data-Driven Para-
phrase Generation Techniques. In Proceedings of ACL 2011 (Short Papers), pages 546?551.
Bonnie J. F. Meyer. 2003. Text Coherence and Readability. Topics in Language Disorders, 23(3):204?224.
Bo Pang, Kevin Knight, and Daniel Marcu. 2003. Syntax-Based Alignment of Multiple Translations: Extracting
Paraphrases and Generating New Sentences. In Proceedings of HLT 2003, pages 102?109.
Marius Pasca and P?eter Dienes. 2005. Aligning Needles in a Haystack: Paraphrase Acquisition Across the Web.
In Proceedings of IJCNLP 2005, pages 119?130.
Judea Pearl. 1984. Heuristics. Addison-Wesley.
Chris Quirk, Chris Brockett, and William B. Dolan. 2004. Monolingual Machine Translation for Paraphrase
Generation. In Proceedings of EMNLP 2004, pages 142?149.
Patrick Riehmann, Henning Gruendl, Martin Potthast, Martin Trenkmann, Benno Stein, and Bernd Froehlich.
2012. WORDGRAPH: Keyword-in-Context Visualization for NETSPEAK?s Wildcard Search. IEEE Transac-
tions on Visualization and Computer Graphics, 18(9):1411?1423.
Helene Schmolz, David Coquil, and Mario D?oller. 2012. In-Depth Analysis of Anaphora Resolution Require-
ments. In Proceedings of TIR 2012, pages 174?179.
Edgar A. Smith and R. J. Senter. 1967. Automated Readability Index. Technical Report AMRL-TR-6620, Wright-
Patterson Air Force Base.
Benno Stein and Daniel Curatolo. 2006. Phonetic Spelling and Heuristic Search. In Proceedings of ECAI 2006,
pages 829?830.
Benno Stein and Sven Meyer zu Ei?en. 2008. Retrieval Models for Genre Classification. Scandinavian Journal
of Information Systems (SJIS), 20(1):91?117.
Benno Stein, Martin Potthast, and Martin Trenkmann. 2010. Retrieving Customary Web Language to Assist
Writers. In Proceedings of ECIR 2010, pages 631?635.
Nathan Sturtevant, Ariel Felner, Maxim Likhachev, and Wheeler Ruml. 2012. Heuristic Search Comes of Age. In
Proceedings of AAAI 2012.
Shiqi Zhao, Cheng Niu, Ming Zhou, Ting Liu, and Sheng Li. 2008. Combining Multiple Resources to Improve
SMT-Based Paraphrasing Model. In Proceedings of ACL 2008, pages 1021?1029.
Shiqi Zhao, Xiang Lan, Ting Liu, and Sheng Li. 2009. Application-Driven Statistical Paraphrase Generation. In
Proceedings of ACL 2009, pages 834?842.
2029
Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics, pages 1212?1221,
Sofia, Bulgaria, August 4-9 2013. c?2013 Association for Computational Linguistics
Crowdsourcing Interaction Logs to Understand Text Reuse from the Web
Martin Potthast Matthias Hagen Michael V?lske Benno Stein
Bauhaus-Universit?t Weimar
99421 Weimar, Germany
<first name>.<last name>@uni-weimar.de
Abstract
We report on the construction of the Webis
text reuse corpus 2012 for advanced re-
search on text reuse. The corpus compiles
manually written documents obtained from
a completely controlled, yet representative
environment that emulates the web. Each
of the 297 documents in the corpus is about
one of the 150 topics used at the TREC
Web Tracks 2009?2011, thus forming a
strong connection with existing evaluation
efforts. Writers, hired at the crowdsourc-
ing platform oDesk, had to retrieve sources
for a given topic and to reuse text from
what they found. Part of the corpus are
detailed interaction logs that consistently
cover the search for sources as well as the
creation of documents. This will allow for
in-depth analyses of how text is composed
if a writer is at liberty to reuse texts from a
third party?a setting which has not been
studied so far. In addition, the corpus pro-
vides an original resource for the evalua-
tion of text reuse and plagiarism detectors,
where currently only less realistic resources
are employed.
1 Introduction
The web has become one of the most common
sources for text reuse. When reusing text from
the web, humans may follow a three step ap-
proach shown in Figure 1: searching for appro-
priate sources on a given topic, copying of text
from selected sources, modification and paraphras-
ing of the copied text. A considerable body of
research deals with the detection of text reuse, and,
in particular, with the detection of cases of plagia-
rism (i.e., the reuse of text with the intent of disguis-
ing the fact that text has been reused). Similarly,
a large number of commercial software systems is
being developed whose purpose is the detection of
plagiarism. Both the developers of these systems as
well as researchers working on the subject matter
frequently claim their approaches to be searching
the entire web or, at least, to be scalable to web
size. However, there is hardly any evidence to
substantiate this claim?rather the opposite can be
observed: commercial plagiarism detectors have
not been found to reliably identify plagiarism from
the web (K?hler and Weber-Wulff, 2010), and the
evaluation of research prototypes even under lab-
oratory conditions shows that there is still a long
way to go (Potthast et al, 2010b). We explain the
disappointing state of the art by the lack of realistic,
large-scale evaluation resources.
With our work, we want to contribute to closing
the gap. In this regard the paper in hand introduces
the Webis text reuse corpus 2012 (Webis-TRC-12),
which, for the first time, emulates the entire process
of reusing text from the web, both at scale and in
a controlled environment. The corpus comprises a
number of features that set it apart from previous
ones: (1) the topic of each document in the corpus
is derived from a topic of the TREC Web Track,
and the sources to copy from have been retrieved
manually from the ClueWeb corpus. (2) The search
for sources is logged, including click-through and
browsing data. (3) A fine-grained edit history has
been recorded for each document. (4) A total of
297 documents were written with an average length
of about 5700 words, whereas diversity is ensured
via crowdsourcing. Altogether, this corpus forms
the current most realistic sample of writers reusing
text. The corpus is publicly available.1
1.1 Related Work
As organizers of the annual PAN plagiarism de-
tection competitions,2 we have introduced the first
standardized evaluation framework for that pur-
1http://www.webis.de/research/corpora
2http://pan.webis.de
1212
Search I?m Feeling Lucky
Search Copy & Paste Modification
Figure 1: The basic steps of reusing text from the web (Potthast, 2011).
pose (Potthast et al, 2010b). Among others, it com-
prises a series of corpora that consist of automat-
ically generated cases of plagiarism, provided in
the form of the PAN plagiarism corpora 2009-2011.
The corpora have been used to evaluate dozens of
plagiarism detection approaches within the respec-
tive competitions in these years;3 but even though
they have been adopted by the community, a num-
ber of shortcomings render them less realistic:
1. All plagiarism cases were generated by ran-
domly selecting text passages from documents
and inserting them at random positions in a
host document. This way, the reused passages
do not match the topic of the host document.
2. The majority of the reused passages were mod-
ified in order to obfuscate the reuse. However,
the applied modification strategies, again, are
basically random: shuffling, replacing, insert-
ing, or deleting words randomly. An effort
was made to avoid non-readable text, yet none
of it bears any semantics.
3. The corpus documents are parts of books from
the Project Gutenberg. Many of these books
are pretty old, whereas today the web is the
predominant source for text reuse.
To overcome the second issue, about 4 000 pas-
sages were rewritten manually via crowdsourcing
on Amazon?s Mechanical Turk for the 2011 cor-
pus. But, because of the first issue (random passage
insertion), a topic drift analysis can spot a reused
passage more easily than a search within the doc-
ument set containing the original source (Potthast
et al, 2011). From these observations it becomes
clear that there are limits for the automatic con-
struction of such kinds of corpora. The Webis text
reuse corpus 2012 addresses all of the mentioned
issues since it has been constructed manually.
3See (Potthast et al, 2009; Potthast et al, 2010a; Potthast
et al, 2011) for overviews of approaches and evaluation results
of each competition.
Besides the PAN corpora, there are two other
corpora that comprise ?genuinely reused? text: the
Clough09 corpus, and the Meter corpus. The for-
mer corpus consists of 57 answers to one of five
computer science questions that were reused from
a respective Wikipedia article (Clough and Steven-
son, 2011). While the text was genuinely written by
a number of volunteer students, the choice of topics
is narrow, and text lengths range from 200 to 300
words, which is hardly more than 2-3 paragraphs.
Also, the sources from which text was reused were
given up front, so that there is no data about their
retrieval. The Meter corpus annotates 445 cases
of text reuse among 1 716 news articles (Clough et
al., 2002). The cases of text reuse in this corpus
are realistic for the news domain; however, they
have not been created by the reuse process outlined
in Figure 1. Note that in the news domain, text is
often reused directly from a news wire without the
need for retrieval. Our new corpus complements
these two resources.
2 Corpus Construction
Two data sets form the basis for constructing our
corpus, namely (1) a set of topics to write about
and (2) a set of web pages to research about a given
topic. With regard to the former, we resort to topics
used at TREC, specifically to those used at the Web
Tracks 2009?2011. With regard to the latter, we em-
ploy the ClueWeb corpus from 20094 (and not the
?web in the wild?). The ClueWeb comprises more
than one billion documents from ten languages and
can be considered as a representative cross-section
of the real web. It is a widely accepted resource
among researchers and became one of the primary
resources to evaluate the retrieval performance of
search engines within several TREC tracks. Our
corpus?s strong connection to TREC will allow for
unforeseen synergies. Based on these decisions our
4http://lemurproject.org/clueweb09
1213
corpus construction steps can be summarized as
follows:
1. Rephrasing of the 150 topics used at the
TREC Web Tracks 2009?2011 so that they
explicitly invite people to write an essay.
2. Indexing of the ClueWeb corpus category A
(the entire English portion with about 0.5 bil-
lion documents) using the BM25F retrieval
model plus additional features.
3. Development of a search interface that allows
for answering queries within milliseconds and
that is designed along the lines of commercial
search interfaces.
4. Development of a browsing API for the
ClueWeb, which serves ClueWeb pages on
demand and which rewrites links of delivered
pages, now pointing to their corresponding
ClueWeb pages on our servers (instead of to
the originally crawled URL).
5. Recruiting 27 writers, 17 of whom with a
professional writing background, hired at the
crowdsourcing platform oDesk from a wide
range of hourly rates for diversity.
6. Instructing the writers to write one essay at
a time of at least 5000 words length (cor-
responding to an average student?s home-
work assignment) about an open topic of
their choice, using our search engine?hence
browsing only ClueWeb pages.
7. Logging all writers? interactions with the
search engine and the ClueWeb on a per-essay
basis at our site.
8. Logging all writers? edits to their essays in a
fine-grained edit log: a snapshot was taken
whenever a writer stopped writing for more
than 300ms.
9. Double-checking all of the essays for quality.
After having deployed the search engine and
completed various usability tests, the actual corpus
construction took nine months, from April 2012
through December 2012.
Obviously, the outlined experimental setup can
serve different lines of research and is publicly
available as well. The remainder of the section
presents elements of our setup in greater detail.
2.1 Topic Preparation
Since the topics used at the TREC Web Tracks were
not amenable for our purpose as is, we rephrased
them so that they ask for writing an essay instead of
searching for facts. Consider for example topic 001
of the TREC Web Track 2009:
Query. obama family tree
Description. Find information on Pres-
ident Barack Obama?s family history,
including genealogy, national origins,
places and dates of birth, etc.
Sub-topic 1. Find the TIME magazine
photo essay ?Barack Obama?s Family
Tree.?
Sub-topic 2. Where did Barack Obama?s
parents and grandparents come from?
Sub-topic 3. Find biographical informa-
tion on Barack Obama?s mother.
This topic is rephrased as follows:
Obama?s family. Write about President
Barack Obama?s family history, includ-
ing genealogy, national origins, places
and dates of birth, etc. Where did Barack
Obama?s parents and grandparents come
from? Also include a brief biography of
Obama?s mother.
In the example, Sub-topic 1 is considered too
specific for our purposes while the other sub-topics
are retained. TREC Web Track topics divide into
faceted and ambiguous topics. While topics of
the first kind can be directly rephrased into essay
topics, from topics of the second kind one of the
available interpretations was chosen.
2.2 A Controlled Web Search Environment
To give the oDesk writers a familiar search experi-
ence while maintaining reproducibility at the same
time, we developed a tailored search engine called
ChatNoir (Potthast et al, 2012b).5 Besides ours,
the only other public search engine for the ClueWeb
is Carnegie Mellon?s Indri,6 which, unfortunately,
is far from our efficiency requirements. Moreover,
its search interface does not follow the standard in
terms of result page design, and it does not give
access to interaction logs. Our search engine is
on the order of milliseconds in terms of retrieval
5http://chatnoir.webis.de
6http://lemurproject.org/clueweb09.php/index.php#Services
1214
time, its interface follows industry standards, and
it features an API that allows for user tracking.
ChatNoir is based on the BM25F retrieval
model (Robertson et al, 2004), uses the anchor
text list provided by (Hiemstra and Hauff, 2010),
the PageRanks provided by the Carnegie Mellon
University alongside the ClueWeb corpus, and the
Spam rank list provided by (Cormack et al, 2011).
ChatNoir comes with a proximity feature with
variable-width buckets as described by (Elsayed
et al, 2011). Our choice of retrieval model and
ranking features is intended to provide a reasonable
baseline performance. However, it is neither near
as mature as those of commercial search engines
nor does it compete with the best-performing mod-
els from TREC. Yet, it is among the most widely
accepted models in information retrieval, which
underlines our goal of reproducibility.
In addition to its retrieval model, ChatNoir im-
plements two search facets: text readability scoring
and long text search. The first facet, similar to that
provided by Google, scores the readability of a text
found on a web page via the well-known Flesch-
Kincaid grade level formula (Kincaid et al, 1975):
it estimates the number of years of education re-
quired in order to understand a given text. This
number is mapped onto the three categories ?Sim-
ple? (up to 5 years), ?Intermediate? (between 5 and
9 years) and ?Expert? (at least 9 years). The ?Long
Text? search facet omits search results which do
not contain at least one continuous paragraph of
text that exceeds 300 words. The two facets can be
combined with each other.
When clicking on a search result, ChatNoir does
not link into the real web but redirects into the
ClueWeb. Though the ClueWeb provides the orig-
inal URLs from which the web pages have been
obtained, many of these pages have gone or been
updated since. We hence set up an API that serves
web pages from the ClueWeb on demand: when
accessing a web page, it is pre-processed before
being shipped, removing automatic referrers and
replacing all links to the real web with links to
their counterpart inside the ClueWeb. This way,
the ClueWeb can be browsed as if surfing the real
web, whereas it becomes possible to track a user.
The ClueWeb is stored in the HDFS of our 40 node
Hadoop cluster, and web pages are fetched directly
from there with latencies of about 200ms. Chat-
Noir?s inverted index has been optimized to guaran-
tee fast response times, and it is deployed alongside
Hadoop on the same cluster.
Table 1: Demographics of the 12 Batch 2 writers.
Writer Demographics
Age Gender Native language(s)
Minimum 24 Female 67% English 67%
Median 37 Male 33% Filipino 25%
Maximum 65 Hindi 17%
Academic degree Country of origin Second language(s)
Postgraduate 41% UK 25% English 33%
Undergraduate 25% Philippines 25% French 17%
None 17% USA 17% Afrikaans, Dutch,
n/a 17% India 17% German, Spanish,
Australia 8% Swedish each 8%
South Africa 8% None 8%
Years of writing Search engines used Search frequency
Minimum 2 Google 92% Daily 83%
Median 8 Bing 33% Weekly 8%
Standard dev. 6 Yahoo 25% n/a 8%
Maximum 20 Others 8%
2.3 Two Batches of Writing
In order to not rely only on the retrieval model
implemented in our controlled web search envi-
ronment, we divided the task into two batches, so
that two essays had to be written for each of the
150 topics, namely one in each batch. In Batch 1,
our writers did not search for sources themselves,
but they were provided up front with an average
of 20 search results to choose from for each topic.
These results were obtained from the TREC Web
Track relevance judgments (so-called ?qrels?): only
documents that were found to be relevant or key
documents for a given topic by manual inspection
of the NIST assessors were provided to our writ-
ers. These documents result from the combined
wisdom of all retrieval models of the TREC Web
Tracks 2009?2011, and hence can be considered
as optimum retrieval results produced by the state
of the art in search engine technology. In Batch 2,
in order to obtain realistic search interaction logs,
our writers were instructed to search for source
documents using ChatNoir.
2.4 Crowdsourcing Writers
Our ideal writer has experience in writing, is ca-
pable of writing about a diversity of topics, can
complete a text in a timely manner, possesses de-
cent English writing skills, and is well-versed in
using the aforementioned technologies. After boot-
strapping our setup with 10 volunteers recruited at
our university, it became clear that, because of the
workload involved, accomplishing our goals would
not be possible with volunteers only. Therefore, we
resorted to hiring (semi-)professional writers and
made use of the crowdsourcing platform oDesk.7
Crowdsourcing has quickly become one of the
7http://www.odesk.com
1215
Table 2: Key figures of the Webis text reuse corpus 2012.
Corpus Distribution Total
characteristic min avg max stdev
Writers (Batch 1+2) 27
Essays (Topics) (Two essays per topic) 297 (150)
Essays / Writer 1 2 66 15.9
Queries (Batch 2) 13 655
Queries / Essay 4 91.0 616 83.1
Clicks (Batch 2) 16 739
Clicks / Essay 12 111.6 443 80.3
Clicks / Query 1 2.3 76 3.3
Irrelevant (Batch 2) 5 962
Irrelevant / Essay 1 39.8 182 28.7
Irrelevant / Query 0 0.5 60 1.4
Relevant (Batch 2) 251
Relevant / Essay 0 1.7 7 1.5
Relevant / Query 0 0.0 4 0.2
Key (Batch 2) 1 937
Key / Essay 1 12.9 46 7.5
Key / Query 0 0.2 22 0.7
Corpus Distribution Total
characteristic min avg max stdev
Search Sessions (Batch 2) 931
Sessions / Essay 1 12.3 149 18.9
Days (Batch 2) 201
Days / Essay 1 4.9 17 2.7
Hours (Batch 2) 2 068
Hours / Writer 3 129.3 679 167.3
Hours / Essay 3 7.5 10 2.5
Edits (Batch 1+2) 633 334
Edits / Essay 45 2 132.4 6 975 1 444.9
Edits / Day 5 2 959.5 8 653 1 762.5
Words (Batch 1+2) 1 704 354
Words / Essay 260 5 738.8 15 851 1 604.3
Words / Writer 2 078 63 124.2 373 975 89 246.7
Sources (Batch 1+2) 4 582
Sources / Essay 0 15.4 69 10.0
Sources / Writer 5 169.7 1 065 269.6
cornerstones for constructing evaluation corpora,
which is especially true for paid crowdsourcing.
Compared to Amazon?s Mechanical Turk (Barr
and Cabrera, 2006), which is used more frequently
than oDesk, there are virtually no workers at oDesk
submitting fake results because of its advanced rat-
ing features for workers and employers. Moreover,
oDesk tracks their workers by randomly taking
screenshots, which are provided to employers in or-
der to check whether the hours logged correspond
to work-related activity. This allowed us to check
whether our writers used our environment instead
of other search engines and editors.
During Batch 2, we have conducted a survey
among the twelve writers who worked for us at
that time. Table 1 gives an overview of the demo-
graphics of these writers, based on a questionnaire
and their resumes at oDesk. Most of them come
from an English-speaking country, and almost all
of them speak more than one language, which sug-
gests a reasonably good education. Two thirds of
the writers are female, and all of them have years
of writing experience. Hourly wages were negoti-
ated individually and range from 3 to 34 US dollars
(dependent on skill and country of residence), with
an average of about 12 US dollars. For ethical rea-
sons, we payed at least the minimum wage of the
respective countries involved. In total, we spent
20 468 US dollars to pay the writers?an amount
that may be considered large compared to other
scientific crowdsourcing efforts from the literature,
but small in terms of the potential of crowdsourcing
to make a difference in empirical science.
3 Corpus Analysis
This section presents selected results of a prelim-
inary corpus analysis. We overview the data and
shed some light onto the search and writing behav-
ior of writers.
3.1 Corpus Statistics
Table 2 shows key figures of the collected inter-
action logs, including the absolute numbers of
queries, relevance judgments, working times, num-
ber of edits, words, and retrieved sources, as well
as their relation to essays, writers, and work time,
where applicable. On average, each writer wrote
2 essays while the standard deviation is 15.9, since
one very prolific writer managed to write 66 essays.
From a total of 13 655 queries submitted by the
writers within Batch 2, each essay got an aver-
age of 91 queries. The average number of results
clicked per query is 2.3. For comparison, we com-
puted the average number of clicks per query in
the AOL query log (Pass et al, 2006), which is 2.0.
In this regard, the behavior of our writers on indi-
vidual queries does not differ much from that of
the average AOL user in 2006. Most of the clicks
that we recorded are search result clicks, whereas
2 457 of them are browsing clicks on web page
links. Among the browsing clicks, 11.3% are clicks
on links that point to the same web page (i.e., an-
chor links using the hash part of a URL). The
longest click trail contains 51 unique web pages,
but most trails are very short. This is a surprising
result, since we expected a larger proportion of
browsing clicks, but it also shows that our writers
1216
relied heavily on the ChatNoir?s ranking. Regard-
ing search facets, we observed that our writers used
them only for about 7% of their queries. In these
cases, the writers used either the ?Long Text? facet,
which retrieves web pages containing at least one
continuous passage of at least 300 words, or set the
desired reading level to ?Expert.?
The query log of each writer in Batch 2 divides
into 931 search sessions with an average of 12.3 ses-
sions per topic. Here, a session is defined as a se-
quence of queries recorded for a given topic which
is not divided by a break longer than 30 minutes.
Despite other claims in the literature (Jones and
Klinkner, 2008; Hagen et al, 2013) we argue that,
in our case, sessions can be reliably identified by
timeouts because we have a priori knowledge about
which query belongs to which essay. Typically,
completing an essay took 4.9 days, which includes
to a long-lasting exploration of the topic at hand.
The 297 essays submitted within the two batches
were written with a total of 633 334 edits. Each
topic was edited 2 132 times on average, whereas
the standard deviation gives an idea about how
diverse the modifications of the reused text were.
Writers were not specifically instructed to modify a
text as much as possible?rather they were encour-
aged to paraphrase in order to foreclose the detec-
tion by an automatic text reuse detector. This way,
our corpus captures each writer?s idea of the nec-
essary modification effort to accomplish this goal.
The average lengths of the essays is 5 739 words,
but there are also some short essays if hardly any
useful information could be found on the respective
topics. About 15 sources have been reused in each
essay, whereas some writers reused text from as
many as 69 unique documents.
3.2 Relevance Judgments
In the essays from Batch 2, writers reused texts
from web pages they found during their search.
This forms an interesting relevance signal which
allows us to separate web pages relevant to a given
topic from those which are irrelevant. Following
the terminology of TREC, we consider web pages
from which text is reused as key documents for
the respective essay?s topic, while web pages that
are on a click trail leading to a key document are
termed relevant. The unusually high number of
key documents compared to relevant documents
is explained by the fact that there are only few
click trails of this kind, whereas most web pages
Table 3: Confusion matrix of TREC judgments
versus writer judgments.
TREC Writer judgment
judgment irrelevant relevant key unjudged
spam (-2) 3 0 1 2 446
spam (-1) 64 4 18 16 657
irrelevant (0) 219 13 73 33 567
relevant (1) 114 8 91 10 676
relevant (2) 44 5 56 3 711
key (3) 12 0 8 526
unjudged 5 506 221 1 690 ?
have been retrieved directly. The remainder of web
pages that were viewed but discarded by our writers
are considered as irrelevant.
Each year, the NIST assessors employed for the
TREC conference manually review hundreds of
web pages that have been retrieved by experimental
retrieval systems that are submitted to the various
TREC tracks. This was also the case for the TREC
Web Tracks from which the topics of our corpus
are derived. We have compared the relevance judg-
ments provided by TREC for these tracks with the
implicit judgments from our writers. Table 3 con-
trasts the two judgment scales in the form of a con-
fusion matrix. TREC uses a six-point Likert scale
ranging from -2 (extreme Spam) to 3 (key docu-
ment). For 733 of the documents visited by our
writers, TREC relevance judgments can be found.
From these, 456 documents (62%) have been con-
sidered irrelevant for the purposes of reuse by our
writers, however, the TREC assessor disagree with
this judgment in 170 cases. Regarding the docu-
ments considered as key documents for reuse by
our writers, the TREC assessors disagree on 92 of
the 247 documents. An explanation for the dis-
agreement can be found in the differences between
the TREC ad hoc search task and our text reuse
task: the information nuggets (small chunks of
text) that satisfy specific factual information needs
from the original TREC topics are not the same as
the information ?ingots? (big chunks of text) that
satisfy our writers? needs.
3.3 Research Behavior
To analyze the writers? search behavior during es-
say writing in Batch 2, we have recorded detailed
search logs of their queries while they used our
search engine. Figure 2 shows for each of the
150 essays of this batch a curve of the percentage
of queries at times between a writer?s first query
and an essay?s completion. We have normalized
the time axis and excluded working breaks of more
1217
1653320161582105870113231811928271962334710924840148153113154319
642630182083524341142844652605248669750138364234703457
1206167410162326910641362810898474610555088481989421848198
11276201471701395610632370607410451423011116944150274489215599
241588418140135461181851429133611723782466803368121626076
6210822424275691814720830241731616522636960864427464
A
F
E
D
C
B
1 5 10 15 20 25
Figure 2: Spectrum of writer search behavior. Each grid cell corresponds to one of the 150 essays of
Batch 2 and shows a curve of the percentage of submitted queries (y-axis) at times between the first query
until the essay was finished (x-axis). The numbers denote the amount of queries submitted. The cells are
sorted by area under the curve, from the smallest area in cell A1 to the largest area in cell F25.
than five minutes. The curves are organized so as
to highlight the spectrum of different search behav-
iors we have observed: in row A, 70-90% of the
queries are submitted toward the end of the writ-
ing task, whereas in row F almost all queries are
submitted at the beginning. In between, however,
sets of queries are often submitted in the form of
?bursts,? followed by extended periods of writing,
which can be inferred from the steps in the curves
(e.g., cell C12). Only in some cases (e.g., cell C10)
a linear increase of queries over time can be ob-
served for a non-trivial amount of queries, which
indicates continuous switching between searching
and writing. From these observations, it can be
inferred that our writers sometimes conducted a
?first fit? search and reused the first texts they found
easily. However, as the essay progressed and the
low hanging fruit in terms of search were used up,
they had to search more intensively in order to com-
plete their essay. More generally, this data gives
an idea of how humans perform exploratory search
in order to learn about a given topic. Our current
research on this aspect focuses on the prediction
of search mission types, since we observe that the
search mission type does not simply depend on the
writer or the perceived topic difficulty.
3.4 Visualizing Edit Histories
To analyze the writers? writing style, that is to
say, how writers reuse texts and how the essay
is completed in both batches, we have recorded
the edit logs of their essays. Whenever a writer
stopped writing for more than 300ms, a new edit
was stored in a version control system at our site.
The edit logs document the entire text evolution,
from first the keystroke until an essay was com-
pleted. We have used the so-called history flow
visualization to analyze the writing process (Vi?-
gas et al, 2004). Figure 3 shows four examples
from the set of 297 essays. Based on these visu-
alizations, a number of observations can be made.
In general, we identify two distinct writing-style
types to perform text reuse, namely to build up an
essay during writing, or, to first gather material and
then to boil down a text until the essay is completed.
Later in this section, we will analyze this observa-
tion in greater detail. Within the plots, a number
of events can be spotted that occurred during writ-
ing: in the top left plot, encircled as area A, the
insertion of a new piece of text can be observed.
Though marked as original text at first, the writer
worked on this passage and then revealed that it
was reused from another source. At area B in the
top right plot, one can observe the reorganization of
two passages as they exchange places from one edit
to another. Area C in the bottom right plot shows
that the writer, shortly before completing this essay,
reorganized substantial parts. Area D in the same
plot shows how the writer went about boiling down
the text by incorporating contents from different
passages that have been collected beforehand and,
then, from one edit to another, discarded most of
the rest. The saw-tooth shaped pattern in area E
in the bottom left plot reveals that, even though
the writer of this essay adopts a build-up style, she
still pastes passages from her sources into the text
one at a time, and then individually boils down
each. Our visualizations also include information
about the text positions where writers have been
working at a given point in time; these positions
are shown as blue dots in the plots. In this regard
distinct writing patterns are discernible of writers
who go through a text linearly versus those who do
not. Future work will include an analysis of these
writing patterns.
1218
AB
C
D
E
Figure 3: Types of text reuse: build-up reuse (left) versus boil-down reuse (right). Each plot shows the text
length at text edit between first keystroke and essay completion; edits have been recorded during writing
whenever a writer stopped for more than 300ms. Colors encode different source documents. Original text
is white; blue dots indicate the text position of the writer?s last edit.
3.5 Build-up Reuse versus Boil-down Reuse
Based on the edit history visualizations, we have
manually classified the 297 essays of both batches
into two categories, corresponding to the two styles
build-up reuse and boil-down reuse. We found
that 40% are instances of build-up reuse, 45% are
instances of boil-down reuse, and 13% fall in be-
tween, excluding 2% of the essays as outliers due
to errors or for being too short. The in-between
cases show that a writer actually started one way
and then switched to the respective other style of
reuse so that the resulting essays could not be at-
tributed to a single category. An important question
that arises out of this observation is whether differ-
ent writers habitually exert different reuse styles
or whether they apply them at random. To obtain
a better overview, we envision the applied reuse
style of an essay by the skyline curve of its edit
history visualization (i.e., by the curve that plots
the length of an essay after each edit). Aggregating
these curves on a per-writer basis reveals distinct
Table 4: Contingency table: writers over reuse style.
Reuse Writer ID
Style A02A05A06A07A10A17A18A19A20A21A24
build-up 4 27 11 4 9 13 12 4 9 18 2
boil-down 52 5 0 14 2 13 11 3 0 0 24
mixed 10 3 0 1 1 7 6 0 0 3 1
patterns. For eight of our writers Figure 4 shows
this characteristic. The plots are ordered by the
shape of the averaged curve, starting from a linear
increase (left) to a compound of steep increase to
a certain length after which the curve levels out
(right). The former shape corresponds to writers
who typically apply build-up reuse, while the lat-
ter can be attributed to writers who typically apply
boil-down reuse.
When comparing the plots we notice a very in-
teresting effect: it appears that writers who conduct
boil-down reuse vary more wildly in their behavior.
The reuse style of some writers, however, falls in
between the two extremes. Besides the visual anal-
ysis, Table 4 shows the distribution of reuse styles
1219
Te
x
t l
en
gt
h 
(%)
Te
x
t l
en
gt
h 
(%)
A10 (12 essays) A18 (32 essays) A24 (27 essays)A21 (21 essays)
A06 (12 essays) A17 (33 essays) A02 (66 essays)A05 (37 essays)
Edits (%)Edits (%) Edits (%)Edits (%)
build up boil down
Text reuse style
Figure 4: Text reuse styles ranging from build-up reuse (left) to boil-down reuse (right). A gray curve
shows the normalized length of an essay over the edits that went into it during writing. Curves are grouped
by writers. The black curve marks the average of all other curves in a plot.
for the eleven writers who contributed at least five
essays. Most writers use one style for about 80%
of their essays, whereas two writers (A17, A18) are
exactly on par between the two styles. Based on
Pearson?s chi-squared test, one can safely reject the
null hypothesis that writers and text reuse styles
are independent: ?2 = 139.0 with p = 7.8 ? 10?20.
Since our sample of authors and essays is sparse,
Pearson?s chi-squared test may not be perfectly
suited which is why we have also applied Fisher?s
exact test, which computes probability p = 0.0005
that the null hypothesis is true.
4 Summary and Outlook
This paper details the construction of the Webis text
reuse corpus 2012 (Webis-TRC-12), a new corpus
for text reuse research that has been created en-
tirely manually on a large scale. We have recorded
consistent interaction logs of human writers with a
search engine as well as with the used text proces-
sor; these logs serve the purpose of studying how
texts from the web are being reused for essay writ-
ing. Our setup is entirely reproducible: we have
built a static web search environment consisting of
a search engine along with a means to browse a
large corpus of web pages as if it were the ?real?
web. Yet, in terms of scale, this environment is rep-
resentative of the real web. Besides our corpus also
this infrastructure is available to other researchers.
The corpus itself goes beyond existing resources in
that it allows for a much more fine-grained analysis
of text reuse, and in that it significantly improves
the realism of the data underlying evaluations of
automatic tools to detect text reuse and plagiarism.
Our analysis gives an overview of selected as-
pects of the new corpus. This includes corpus
statistics about important variables, but also ex-
ploratory studies of search behaviors and strategies
for reusing text. We present new insights about how
text is composed, revealing two types of writers:
those who build up a text as they go, and those who
first collect a lot of material which then is boiled
down until the essay is finished.
Parts of our corpus have been successfully em-
ployed to evaluate plagiarism detectors in the
PAN plagiarism detection competition 2012 (Pot-
thast et al, 2012a). Future work will include analy-
ses that may help to understand the state of mind of
writers when reusing text as well as of plagiarists.
We also expect insights with regard to the develop-
ment of algorithms for detection purposes and for
linguists studying the process of writing.
Acknowledgements
We thank our writers at oDesk and all volunteers
for their contribution. We also thank Jan Gra?egger
and Martin Tippmann who kept the search engine
up and running during corpus construction.
1220
References
Jeff Barr and Luis Felipe Cabrera. 2006. AI gets a
brain. Queue, 4(4):24?29.
Paul Clough and Mark Stevenson. 2011. Develop-
ing a corpus of plagiarised short answers. Language
Resources and Evaluation, 45:5?24.
Paul Clough, Robert Gaizauskas, Scott S. L. Piao, and
Yorick Wilks. 2002. METER: MEasuring TExt Reuse.
In Proceedings of the 40th Annual Meeting of the As-
sociation for Computational Linguistics (ACL 2002),
Philadelphia, PA, USA, July 6?12, 2002, pages 152?
159.
Gordon V. Cormack, Mark D. Smucker, and Charles L.
A. Clarke. 2011. Efficient and effective spam filtering
and re-ranking for large web datasets. Information
Retrieval, 14(5):441?465.
Tamer Elsayed, Jimmy J. Lin, and Donald Metzler.
2011. When close enough is good enough: approxi-
mate positional indexes for efficient ranked retrieval.
In Proceedings of the 20th ACM Conference on Infor-
mation and Knowledge Management (CIKM 2011),
Glasgow, United Kingdom, October 24?28, 2011,
pages 1993?1996.
Matthias Hagen, Jakob Gomoll, Anna Beyer, and
Benno Stein. 2013. From Search Session Detection to
Search Mission Detection. In Proceedings of the 10th
International Conference Open Research Areas in In-
formation Retrieval (OAIR 2013), Lisbon, Portugal,
May 22?24, 2013, to appear.
Djoerd Hiemstra and Claudia Hauff. 2010. MIREX:
MapReduce information retrieval experiments. Tech-
nical Report TR-CTIT-10-15, University of Twente.
Rosie Jones and Kristina Lisa Klinkner. 2008. Be-
yond the session timeout: automatic hierarchical seg-
mentation of search topics in query logs. In Proceed-
ings of the 17th ACM Conference on Information and
Knowledge Management (CIKM 2008), Napa Valley,
California, USA, October 26?30, 2008, pages 699?
708.
J. Peter Kincaid, Robert P. Fishburne, Richard L.
Rogers, and Brad S. Chissom. 1975. Derivation of
new readability formulas (automated readability index,
Fog count and Flesch reading ease formula) for Navy
enlisted personnel. Research Branch Report 8-75,
Naval Air Station Memphis, Millington, TN.
Katrin K?hler and Debora Weber-Wulff. 2010. Pla-
giarism detection test 2010. http://plagiat.
htw-berlin.de/wp-content/uploads/
PlagiarismDetectionTest2010-final.pdf.
Greg Pass, Abdur Chowdhury, and Cayley Torgeson.
2006. A picture of search. In Proceedings of the 1st
International Conference on Scalable Information
Systems (Infoscale 2006), Hong Kong, May 30?June 1,
2006, paper 1.
Martin Potthast, Benno Stein, Andreas Eiselt, Alberto
Barr?n-Cede?o, and Paolo Rosso. 2009. Overview
of the 1st international competition on plagiarism
detection. In SEPLN 2009 Workshop on Uncovering
Plagiarism, Authorship, and Social Software Misuse
(PAN 2009), pages 1?9.
Martin Potthast, Alberto Barr?n-Cede?o, Andreas
Eiselt, Benno Stein, and Paolo Rosso. 2010a.
Overview of the 2nd international competition on
plagiarism detection. In Working Notes Papers of the
CLEF 2010 Evaluation Labs.
Martin Potthast, Benno Stein, Alberto Barr?n-Cede?o,
and Paolo Rosso. 2010b. An evaluation framework
for plagiarism detection. In Proceedings of the 23rd
International Conference on Computational Linguis-
tics (COLING 2010), Beijing, China, August 23?27,
2010, pages 997?1005.
Martin Potthast, Andreas Eiselt, Alberto Barr?n-
Cede?o, Benno Stein, and Paolo Rosso. 2011.
Overview of the 3rd international competition on pla-
giarism detection. In Working Notes Papers of the
CLEF 2011 Evaluation Labs.
Martin Potthast, Tim Gollub, Matthias Hagen, Jan
Gra?egger, Johannes Kiesel, Maximilian Michel,
Arnd Oberl?nder, Martin Tippmann, Alberto Barr?n-
Cede?o, Parth Gupta, Paolo Rosso, and Benno Stein.
2012a. Overview of the 4th international competition
on plagiarism detection. In Working Notes Papers of
the CLEF 2012 Evaluation Labs.
Martin Potthast, Matthias Hagen, Benno Stein, Jan
Gra?egger, Maximilian Michel, Martin Tippmann, and
Clement Welsch. 2012b. ChatNoir: a search engine
for the ClueWeb09 corpus. In Proceedings of the
35th International ACM Conference on Research and
Development in Information Retrieval (SIGIR 2012),
Portland, OR, USA, August 12?16, 2012, page 1004.
Martin Potthast. 2011. Technologies for Reusing
Text from the Web. Dissertation, Bauhaus-Universit?t
Weimar.
Stephen E. Robertson, Hugo Zaragoza, and Michael J.
Taylor. 2004. Simple BM25 extension to multiple
weighted fields. In Proceedings of the 13th ACM Con-
ference on Information and Knowledge Management
(CIKM 2004), Washington, DC, USA, November 8?13,
2004, pages 42?49.
Fernanda B. Vi?gas, Martin Wattenberg, and Kushal
Dave. 2004. Studying cooperation and conflict be-
tween authors with history flow visualizations. In Pro-
ceedings of the 2004 Conference on Human Factors
in Computing Systems (CHI 2004), Vienna, Austria,
April 24?29, 2004, pages 575?582.
1221
