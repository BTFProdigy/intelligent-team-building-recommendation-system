Proceedings of the 4th International Workshop on Semantic Evaluations (SemEval-2007), pages 398?401,
Prague, June 2007. c?2007 Association for Computational Linguistics
UNIBA: JIGSAW algorithm for Word Sense Disambiguation
P. Basile and M. de Gemmis and A.L. Gentile and P. Lops and G. Semeraro
Department of Computer Science - University of Bari - Via E. Orabona, 4 70125 Bari ITALY
{basilepp, degemmis, al.gentile, lops, semeraro}@di.uniba.it
Abstract
Word Sense Disambiguation (WSD) is tra-
ditionally considered an AI-hard problem.
A breakthrough in this field would have a
significant impact on many relevant web-
based applications, such as information re-
trieval and information extraction. This pa-
per describes JIGSAW, a knowledge-based
WSD system that attemps to disambiguate
all words in a text by exploiting WordNet1
senses. The main assumption is that a spe-
cific strategy for each Part-Of-Speech (POS)
is better than a single strategy. We evalu-
ated the accuracy of JIGSAW on SemEval-
2007 task 1 competition2. This task is an
application-driven one, where the applica-
tion is a fixed cross-lingual information re-
trieval system. Participants disambiguate
text by assigning WordNet synsets, then the
system has to do the expansion to other lan-
guages, index the expanded documents and
run the retrieval for all the languages in
batch. The retrieval results are taken as a
measure for the effectiveness of the disam-
biguation.
1 The JIGSAW algorithm
The goal of a WSD algorithm consists in assigning
a word w
i
occurring in a document d with its appro-
priate meaning or sense s, by exploiting the context
C in where w
i
is found. The context C for w
i
is de-
fined as a set of words that precede and follow w
i
.
The sense s is selected from a predefined set of pos-
sibilities, usually known as sense inventory. In the
proposed algorithm, the sense inventory is obtained
from WordNet 1.6, according to SemEval-2007 task
1 instructions. JIGSAW is a WSD algorithm based
on the idea of combining three different strategies to
disambiguate nouns, verbs, adjectives and adverbs.
The main motivation behind our approach is that
1http://wordnet.princeton.edu/
2http://www.senseval.org/
the effectiveness of a WSD algorithm is strongly
influenced by the POS tag of the target word. An
adaptation of Lesk dictionary-based WSD algorithm
has been used to disambiguate adjectives and ad-
verbs (Banerjee and Pedersen, 2002), an adaptation
of the Resnik algorithm has been used to disam-
biguate nouns (Resnik, 1995), while the algorithm
we developed for disambiguating verbs exploits the
nouns in the context of the verb as well as the nouns
both in the glosses and in the phrases that WordNet
utilizes to describe the usage of a verb. JIGSAW
takes as input a document d = {w
1
, w
2
, . . . , w
h
} and
returns a list of WordNet synsets X = {s
1
, s
2
, . . . ,
s
k
} in which each element s
i
is obtained by disam-
biguating the target word w
i
based on the informa-
tion obtained from WordNet about a few immedi-
ately surrounding words. We define the context C of
the target word to be a window of n words to the left
and another n words to the right, for a total of 2n
surrounding words. The algorithm is based on three
different procedures for nouns, verbs, adverbs and
adjectives, called JIGSAW
nouns
, JIGSAW
verbs
,
JIGSAW
others
, respectively. More details for each
one of the above mentioned procedures follow.
1.1 JIGSAW
nouns
The procedure is obtained by making some varia-
tions to the algorithm designed by Resnik (1995) for
disambiguating noun groups. Given a set of nouns
W = {w
1
, w
2
, . . . , w
n
}, obtained from document
d, with each w
i
having an associated sense inven-
tory S
i
= {s
i1
, s
i2
, . . . , s
ik
} of possible senses, the
goal is assigning each w
i
with the most appropri-
ate sense s
ih
? S
i
, according to the similarity of
w
i
with the other words in W (the context for w
i
).
The idea is to define a function ?(w
i
, s
ij
), w
i
? W ,
s
ij
? S
i
, that computes a value in [0, 1] representing
the confidence with which word w
i
can be assigned
with sense s
ij
. The intuition behind this algorithm
is essentially the same exploited by Lesk (1986) and
other authors: The most plausible assignment of
senses to multiple co-occurring words is the one that
maximizes relatedness of meanings among the cho-
398
sen senses. JIGSAW
nouns
differs from the original
algorithm by Resnik (1995) in the similarity mea-
sure used to compute relatedness of two senses. We
adopted the Leacock-Chodorow measure (Leacock
and Chodorow, 1998), which is based on the length
of the path between concepts in an IS-A hierarchy.
The idea behind this measure is that similarity be-
tween two synsets, s
1
and s
2
, is inversely propor-
tional to their distance in the WordNet IS-A hierar-
chy. The distance is computed by finding the most
specific subsumer (MSS) between s
1
and s
2
(each
ancestor of both s
1
and s
2
in the WordNet hierar-
chy is a subsumer, the MSS is the one at the lowest
level) and counting the number of nodes in the path
between s
1
and s
2
that traverse their MSS. We ex-
tended this measure by introducing a parameter k
that limits the search for the MSS to k ancestors (i.e.
that climbs the WordNet IS-A hierarchy until either
it finds the MSS or k + 1 ancestors of both s
1
and
s
2
have been explored). This guarantees that ?too
abstract? (i.e. ?less informative?) MSSs will be ig-
nored. In addition to the semantic similarity func-
tion, JIGSAW
nouns
differs from the Resnik algo-
rithm in the use of:
1. a Gaussian factor G, which takes into account the dis-
tance between the words in the text to be disambiguated;
2. a factor R, which gives more importance to the synsets
that are more common than others, according to the fre-
quency score in WordNet;
3. a parametrized search for the MSS between two concepts
(the search is limited to a certain number of ancestors).
Algorithm 1 describes the complete procedure for
the disambiguation of nouns. This algorithm consid-
ers the words in W pairwise. For each pair (w
i
,w
j
),
the most specific subsumer MSS
ij
is identified, by
reducing the search to depth1 ancestors at most.
Then, the similarity sim(w
i
, w
j
, depth2) between
the two words is computed, by reducing the search
for the MSS to depth2 ancestors at most. MSS
ij
is
considered as supporting evidence for those synsets
s
ik
in S
i
and s
jh
in S
j
that are descendants of
MSS
ij
. The MSS search is computed choosing the
nearest MSS in all pairs of synsets s
ik
,s
jh
. Like-
wise, the similarity for (w
i
,w
j
) is the max similarity
computed in all pairs of s
ik
,s
jh
and is weighted by
a gaussian factor that takes into account the posi-
tion of w
i
and w
j
in W (the shorter is the distance
Algorithm 1 The procedure for disambiguating
nouns derived from the algorithm by Resnik
1: procedure JIGSAW
nouns
(W, depth1, depth2) 
finds the proper synset for each polysemous noun in the set
W = {w
1
, w
2
, . . . , w
n
}, depth1 and depth2 are used in
the computation of MSS
2: for all w
i
, w
j
? W do
3: if i < j then
4: sim ? sim(w
i
, w
j
, depth1) ?
G(pos(w
i
), pos(w
j
))  G(x, y) is a Gaussian
function which takes into account the difference between
the positions of w
i
and w
j
5: MSS
ij
? MSS(w
i
, w
j
, depth2) 
MSS
ij
is the most specific subsumer between w
i
and w
j
,
search for MSS restricted to depth2 ancestors
6: for all s
ik
? S
i
do
7: if is-ancestor(MSS
ij
,s
ik
) then  if
MSS
ij
is an ancestor of s
ik
8: sup
ik
? sup
ik
+ sim
9: end if
10: end for
11: for all s
jh
? S
j
do
12: if is-ancestor(MSS
ij
,s
jh
) then
13: sup
jh
? sup
jh
+ sim
14: end if
15: end for
16: norm
i
? norm
i
+ sim
17: norm
j
? norm
j
+ sim
18: end if
19: end for
20: for all w
i
? W do
21: for all s
ik
? S
i
do
22: if norm
i
> 0 then
23: ?(i, k) ? ? ? sup
ik
/norm
i
+ ? ? R(k)
24: else
25: ?(i, k) ? ?/|S
i
| + ? ? R(k)
26: end if
27: end for
28: end for
29: end procedure
between the words, the higher is the weight). The
value ?(i, k) assigned to each candidate synset s
ik
for the word w
i
is the sum of two elements. The
first one is the proportion of support it received, out
of the support possible, computed as sup
ik
/norm
i
in Algorithm 1. The other element that contributes
to ?(i, k) is a factor R(k) that takes into account
the rank of s
ik
in WordNet, i.e. how common is the
sense s
ik
for the word w
i
. R(k) is computed as:
R(k) = 1 ? 0.8 ?
k
n ? 1
(1)
where n is the cardinality of the sense inventory S
i
for w
i
, and k is the rank of s
ik
in S
i
, starting from 0.
Finally, both elements are weighted by two pa-
rameters: ?, which controls the contribution given
399
to ?(i, k) by the normalized support, and ?, which
controls the contribution given by the rank of s
ik
.
We set ? = 0.7 and ? = 0.3. The synset assigned
to each word in W is the one with the highest ?
value. Notice that we used two different parameters,
depth1 and depth2 for setting the maximum depth
for the search of the MSS: depth1 limits the search
for the MSS computed in the similarity function,
while depth2 limits the computation of the MSS
used for assigning support to candidate synsets. We
set depth1 = 6 and depth2 = 3.
1.2 JIGSAW
verbs
Before describing the JIGSAW
verbs
procedure, the
description of a synset must be defined. It is the
string obtained by concatenating the gloss and the
sentences that WordNet uses to explain the usage
of a synset. First, JIGSAW
verbs
includes, in the
context C for the target verb w
i
, all the nouns in
the window of 2n words surrounding w
i
. For each
candidate synset s
ik
of w
i
, the algorithm computes
nouns(i, k), that is the set of nouns in the descrip-
tion for s
ik
.
max
jk
= max
w
l
?nouns(i,k)
{sim(w
j
,w
l
,depth)} (2)
where sim(w
j
,w
l
,depth) is defined as in
JIGSAWnouns. In other words, max
jk
is the
highest similarity value for w
j
wrt the nouns related
to the k-th sense for w
i
. Finally, an overall simi-
larity score among s
ik
and the whole context C is
computed:
?(i, k) = R(k) ?
P
w
j
?C
G(pos(w
i
), pos(w
j
)) ? max
jk
P
h
G(pos(w
i
), pos(w
h
))
(3)
where R(k) is defined as in Equation 1 with a differ-
ent constant factor (0.9) and G(pos(w
i
), pos(w
j
)) is
the same Gaussian factor used in JIGSAWnouns,
that gives a higher weight to words closer to the tar-
get word. The synset assigned to w
i
is the one with
the highest ? value. Algorithm 2 provides a detailed
description of the procedure.
1.3 JIGSAW
others
This procedure is based on the WSD algorithm pro-
posed by Banerjee and Pedersen (2002). The idea is
to compare the glosses of each candidate sense for
Algorithm 2 The procedure for the disambiguation
of verbs
1: procedure JIGSAW
verbs
(w
i
, d, depth)  finds the
proper synset of a polysemous verb w
i
in document d
2: C ? {w
1
, ..., w
n
}  C is
the context for w
i
. For example, C = {w
1
, w
2
, w
4
, w
5
},
if the sequence of words {w
1
, w
2
, w
3
, w
4
, w
5
} occurs in d,
w
3
being the target verb, w
j
being nouns, j 6= 3
3: S
i
? {s
i1
, ...s
im
}  S
i
is the sense inventory for w
i
, that is the set of all candidate
synsets for w
i
returned by WordNet
4: s ? null  s is the synset to be returned
5: score ? ?MAXDOUBLE  score is the
similarity score assigned to s
6: p ? 1  p is the position of the synsets for w
i
7: for all s
ik
? S
i
do
8: max ? {max
1k
, ..., max
nk
}
9: nouns(i, k) ? {noun
1
, ..., noun
z
} 
nouns(i, k) is the set of all nouns in the description of s
ik
10: sumGauss ? 0
11: sumTot ? 0
12: for all w
j
? C do  computation of the similarity
between C and s
ik
13: max
jk
? 0  max
jk
is the highest similarity
value for w
j
, wrt the nouns related to the k-th sense for w
i
.
14: sumGauss ? G(pos(w
i
), pos(w
j
)) 
Gaussian function which takes into account the difference
between the positions of the nouns in d
15: for all noun
l
? nouns(i, k) do
16: sim ? sim(w
j
, noun
l
, depth)  sim is
the similarity between the j-th noun in C and l-th noun in
nouns(i, k)
17: if sim > max
jk
then
18: max
jk
? sim
19: end if
20: end for
21: end for
22: for all w
j
? C do
23: sumTot ? sumTot+G(pos(w
i
), pos(w
j
))?
max
jk
24: end for
25: sumTot ? sumTot/sumGauss
26: ?(i, k) ? R(k) ? sumTot  R(k) is defined as in
JIGSAW
nouns
27: if ?(i, k) > score then
28: score ? ?(i, k)
29: p ? k
30: end if
31: end for
32: s ? s
ip
33: return s
34: end procedure
the target word to the glosses of all the words in its
context. Let W
i
be the sense inventory for the tar-
get word w
i
. For each s
ik
? W
i
, JIGSAW
others
computes the string targetGloss
ik
that contains the
words in the gloss of s
ik
. Then, the procedure
computes the string contextGloss
i
, which contains
the words in the glosses of all the synsets corre-
400
sponding to each word in the context for w
i
. Fi-
nally, the procedure computes the overlap between
contextGloss
i
and targetGloss
ik
, and assigns the
synset with the highest overlap score to w
i
. This
score is computed by counting the words that occur
both in targetGloss
ik
and in contextGloss
i
. If ties
occur, the most common synset in WordNet is cho-
sen.
2 Experiment
We performed the experiment following the instruc-
tions for SemEval-2007 task 1 (Agirre et al, 2007).
JIGSAW is implemented in JAVA, by using JWNL
library3 in order to access WordNet 1.6 dictionary.
We ran the experiment on a Linux-based PC with
Intel Pentium D processor having a speed of 3 GHz
and 2 GB of RAM. The dataset consists of 29,681
documents, including 300 topics. Results are re-
ported in Table 1. Only two systems (PART-A and
PART-B) partecipated to the competition, thus the
organizers decided to add a third system (ORGA-
NIZERS) developed by themselves. The systems
were scored according to standard IR/CLIR mea-
sures as implemented in the TREC evaluation pack-
age4. Our system is labelled as PART-A.
system IR documents IR topics CLIR
no expansion 0.3599 0.1446
full expansion 0.1610 0.1410 0.2676
1st sense 0.2862 0.1172 0.2637
ORGANIZERS 0.2886 0.1587 0.2664
PART-A 0.3030 0.1521 0.1373
PART-B 0.3036 0.1482 0.1734
Table 1: SemEval-2007 task 1 Results
All systems show similar results in IR tasks, while
their behaviour is extremely different on CLIR task.
WSD results are reported in Table 2. These re-
sults are encouraging as regard precision, consid-
ering that our system exploits only WordNet as
kwnoledge-base, while ORGANIZERS uses a su-
pervised method that exploits SemCor to train a
kNN classifier.
3 Conclusions
In this paper we have presented a WSD algorithm
that exploits WordNet as knowledge-base and uses
3http://sourceforge.net/projects/jwordnet
4http://trec.nist.gov/
system precision recall attempted
SENSEVAL-2
ORGANIZERS 0.584 0.577 93.61%
PART-A 0.498 0.375 75.39%
PART-B 0.388 0.240 61.92%
SENSEVAL-3
ORGANIZERS 0.591 0.566 95.76%
PART-A 0.484 0.338 69.98%
PART-B 0.334 0.186 55.68%
Table 2: WSD results on all-words task
three different methods for each part-of-speech. The
algorithm has been evaluated by SemEval-2007 task
1. The system shows a good performance in all
tasks, but low precision in CLIR evaluation. Prob-
ably, the negative result in CLIR task depends on
complex interaction of WSD, expansion and index-
ing. Contrarily to other tasks, organizers do not plan
to provide a ranking of systems on SemEval-2007
task 1. As a consequence, the goal of this task - what
is the best WSD system in the context of a CLIR
system? - is still open. This is why the organizers
stressed in the call that this was ?a first try?.
References
E. Agirre, B. Magnini, o. Lopez de Lacalle, A. Otegi,
G. Rigau, and Vossen. 2007. Semeval-2007 task
1: Evaluating wsd on cross-language information re-
trieval. In Proceedings of SemEval-2007. Association
for Computational Linguistics.
S. Banerjee and T. Pedersen. 2002. An adapted lesk
algorithm for word sense disambiguation using word-
net. In CICLing?02: Proc. 3rd Int?l Conf. on Com-
putational Linguistics and Intelligent Text Processing,
pages 136?145, London, UK. Springer-Verlag.
C. Leacock and M. Chodorow. 1998. Combining local
context and wordnet similarity for word sense identifi-
cation. In C. Fellbaum (Ed.), WordNet: An Electronic
Lexical Database, pages 305?332. MIT Press.
M. Lesk. 1986. Automatic sense disambiguation using
machine readable dictionaries: how to tell a pine cone
from an ice cream cone. In Proceedings of the 1986
SIGDOC Conference, pages 20?29. ACM Press.
P. Resnik. 1995. Disambiguating noun groupings with
respect to WordNet senses. In Proceedings of the
Third Workshop on Very Large Corpora, pages 54?68.
Association for Computational Linguistics.
401
Combining Knowledge-based
Methods and Supervised
Learning for Effective Italian
Word Sense Disambiguation
Pierpaolo Basile
Marco de Gemmis
Pasquale Lops
Giovanni Semeraro
University of Bari (Italy)
email: basilepp@di.uniba.it
Abstract
This paper presents a WSD strategy which combines a knowledge-based
method that exploits sense definitions in a dictionary and relations among
senses in a semantic network, with supervised learning methods on anno-
tated corpora. The idea behind the approach is that the knowledge-based
method can cope with the possible lack of training data, while supervised
learning can improve the precision of a knowledge-based method when
training data are available. This makes the proposed method suitable for
disambiguation of languages for which the available resources are lacking
in training data or sense definitions. In order to evaluate the effectiveness
of the proposed approach, experimental sessions were carried out on the
dataset used for the WSD task in the EVALITA 2007 initiative, devoted to
the evaluation of Natural Language Processing tools for Italian. The most
effective hybrid WSD strategy is the one that integrates the knowledge-
based approach into the supervised learning method, which outperforms
both methods taken singularly.
5
6 Basile, de Gemmis, Lops, and Semeraro
1 Background and Motivations
The inherent ambiguity of human language is a greatly debated problem in many
research areas, such as information retrieval and text categorization, since the presence
of polysemous words might result in a wrong relevance judgment or classification of
documents. These problems call for alternative methods that work not only at the
lexical level of the documents, but also at the meaning level.
The task of Word Sense Disambiguation (WSD) consists in assigning the most ap-
propriate meaning to a polysemous word within a given context. Applications such
as machine translation, knowledge acquisition, common sense reasoning and others,
require knowledge about word meanings, and WSD is essential for all these applica-
tions. The assignment of senses to words is accomplished by using two major sources
of information (Nancy and V?ronis, 1998):
1. the context of the word to be disambiguated, e.g. information contained within
the text in which the word appears;
2. external knowledge sources, including lexical resources, as well as hand-devised
knowledge sources, which provide data useful to associate words with senses.
All disambiguation work involves matching the context of the instance of the word
to be disambiguated with either information from an external knowledge source (also
known as knowledge-driven WSD), or information about the contexts of previously
disambiguated instances of the word derived from corpora (data-driven or corpus-
based WSD).
Corpus-basedWSD exploits semantically annotated corpora to train machine learn-
ing algorithms to decide which word sense to choose in which context. Words in such
annotated corpora are tagged manually using semantic classes chosen from a particu-
lar lexical semantic resource (e.g. WORDNET (Fellbaum, 1998)). Each sense-tagged
occurrence of a particular word is transformed into a feature vector, which is then used
in an automatic learning process. The applicability of such supervised algorithms is
limited to those few words for which sense tagged data are available, and their accu-
racy is strongly influenced by the amount of labeled data available.
Knowledge-based WSD has the advantage of avoiding the need of sense-annotated
data, rather it exploits lexical knowledge stored in machine-readable dictionaries or
thesauri. Systems adopting this approach have proved to be ready-to-use and scalable,
but in general they reach lower precision than corpus-based WSD systems.
Our hypothesis is that the combination of both types of strategies can improveWSD
effectiveness, because knowledge-based methods can cope with the possible lack of
training data, while supervised learning can improve the precision of knowledge-based
methods when training data are available.
This paper presents a method for solving the semantic ambiguity of all words con-
tained in a text1. We propose a hybrid WSD algorithm that combines a knowledge-
based WSD algorithm, called JIGSAW, which we designed to work by exploiting
WORDNET-like dictionaries as sense repository, with a supervised machine learning
1all words task tries to disambiguate all the words in a text, while lexical sample task tries to disam-
biguate only specific words
Combining Knowledge-based Methods and Supervised Learning 7
algorithm (K-Nearest Neighbor classifier). WORDNET-like dictionaries are used be-
cause they combine the characteristics of both a dictionary and a structured semantic
network, supplying definitions for the different senses of words and defining groups
of synonymous words by means of synsets, which represent distinct lexical concepts.
WORDNET also organize synsets in a conceptual structure by defining a number of
semantic relationship (IS-A, PART-OF, etc.) among them.
Mainly, the paper concentrates on two investigations:
1. First, corpus-based WSD is applied to words for which training examples are
provided, then JIGSAW is applied to words not covered in the first step, with the
advantage of knowing the senses of the context words already disambiguated in
the first step;
2. First, JIGSAW is applied to assign the most appropriate sense to those words
that can be disambiguated with a high level of confidence (by setting a specific
parameter in the algorithm), then the remaining words are disambiguated by the
corpus-based method.
The paper is organized as follows: After a brief discussion about the main works
related to our research, Section 3 gives the main ideas underlying the proposed hybrid
WSD strategy. More details about the K-NN classification algorithm and JIGSAW,
on which the hybrid WSD approach is based, are provided in Section 4 and Section
5, respectively. Experimental sessions have been carried out in order to evaluate the
proposed approach in the critical situation when training data are not much reliable,
as for Italian. Results are presented in Section 6, while conclusions and future work
close the paper.
2 Related Work
For some Natural Language Processing (NLP) tasks, such as part of speech tagging or
named entity recognition, there is a consensus on what makes a successful algorithm,
regardless of the approach considered. Instead, no such consensus has been reached
yet for the task of WSD, and previous work has considered a range of knowledge
sources, such as local collocational clues, common membership in semantically or
topically related word classes, semantic density, and others. In recent SENSEVAL-3
evaluations2, the most successful approaches for all wordsWSD relied on information
drawn from annotated corpora. The system developed by Decadt et al (2002) uses two
cascaded memory-based classifiers, combined with the use of a genetic algorithm for
joint parameter optimization and feature selection. A separate word expert is learned
for each ambiguous word, using a concatenated corpus of English sense tagged texts,
including SemCor, SENSEVAL datasets, and a corpus built from WORDNET exam-
ples. The performance of this system on the SENSEVAL-3 English all words dataset
was evaluated at 65.2%. Another top ranked system is the one developed by Yuret
(2004), which combines two Na?ve Bayes statistical models, one based on surround-
ing collocations and another one based on a bag of words around the target word.
The statistical models are built based on SemCor and WORDNET, for an overall dis-
ambiguation accuracy of 64.1%. All previous systems use supervised methods, thus
2http://www.senseval.org
8 Basile, de Gemmis, Lops, and Semeraro
requiring a large amount of human intervention to annotate the training data. In the
context of the current multilingual society, this strong requirement is even increased,
since the so-called ?sense-tagged data bottleneck problem? is emphasized.
To address this problem, different methods have been proposed. This includes
the automatic generation of sense-tagged data using monosemous relatives (Leacock
et al, 1998), automatically bootstrapped disambiguation patterns (Mihalcea, 2002),
parallel texts as a way to point out word senses bearing different translations in a sec-
ond language (Diab, 2004), and the use of volunteer contributions over the Web (Mi-
halcea and Chklovski, 2003). More recently, Wikipedia has been used as a source of
sense annotations for building a sense annotated corpus which can be used to train
accurate sense classifiers (Mihalcea, 2007). Even though the Wikipedia-based sense
annotations were found reliable, leading to accurate sense classifiers, one of the lim-
itations of the approach is that definitions and annotations in Wikipedia are available
almost exclusively for nouns.
On the other hand, the increasing availability of large-scale rich (lexical) knowledge
resources seems to provide new challenges to knowledge-based approaches (Navigli
and Velardi, 2005; Mihalcea, 2005). Our hypothesis is that the complementarity of
knowledge-based methods and corpus-based ones is the key to improve WSD effec-
tiveness. The aim of the paper is to define a cascade hybrid method able to exploit
both linguistic information coming from WORDNET-like dictionaries and statistical
information coming from sense-annotated corpora.
3 A Hybrid Strategy for WSD
The goal of WSD algorithms consists in assigning a word wi occurring in a document
d with its appropriate meaning or sense s. The sense s is selected from a predefined set
of possibilities, usually known as sense inventory. We adopt ITALWORDNET (Roven-
tini et al, 2003) as sense repository. The algorithm is composed by two procedures:
1. JIGSAW - It is a knowledge-based WSD algorithm based on the assumption
that the adoption of different strategies depending on Part-of-Speech (PoS) is
better than using always the same strategy. A brief description of JIGSAW is
given in Section 5, more details are reported in Basile et al (2007b), Basile et al
(2007a) and Semeraro et al (2007).
2. Supervised learning procedure - A K-NN classifier (Mitchell, 1997), trained
on MultiSemCor corpus3 is adopted. Details are given in Section 4. MultiSem-
Cor is an English/Italian parallel corpus, aligned at the word level and annotated
with PoS, lemma and word senses. The parallel corpus is created by exploiting
the SemCor corpus4, which is a subset of the English Brown corpus containing
about 700,000 running words. In SemCor, all the words are tagged by PoS, and
more than 200,000 content words are also lemmatized and sense-tagged with
reference to the WORDNET lexical database. SemCor has been used in several
supervised WSD algorithms for English with good results. MultiSemCor con-
tains less annotations than SemCor, thus the accuracy and the coverage of the
supervised learning for Italian might be affected by poor training data.
3http://multisemcor.itc.it/
4http://www.cs.unt.edu/~rada/downloads.html\#semcor
Combining Knowledge-based Methods and Supervised Learning 9
The idea is to combine both procedures in a hybrid WSD approach. A first choice
might be the adoption of the supervised method as first attempt, then JIGSAW could
be applied to words not covered in the first step. Differently, JIGSAWmight be applied
first, then leaving the supervised approach to disambiguate the remaining words. An
investigation is required in order to choose the most effective combination.
4 Supervised Learning Method
The goal of supervised methods is to use a set of annotated data as little as possible,
and at the same time to make the algorithm general enough to be able to disambiguate
all content words in a text. We use MultiSemCor as annotated corpus, since at present
it is the only available semantic annotated resource for Italian. The algorithm starts
with a preprocessing stage, where the text is tokenized, stemmed, lemmatized and
annotated with PoS.
Also, the collocations are identified using a sliding window approach, where a
collocation is considered to be a sequence of words that forms a compound concept
defined in ITALWORDNET (e.g. artificial intelligence). In the training step, a semantic
model is learned for each PoS, starting with the annotated corpus. These models are
then used to disambiguate words in the test corpus by annotating them with their
correspondingmeaning. The models can only handle words that were previously seen
in the training corpus, and therefore their coverage is not 100%. Starting with an
annotated corpus formed by all annotated files in MultiSemCor, a separate training
dataset is built for each PoS. For each open-class word in the training corpus, a feature
vector is built and added to the corresponding training set. The following features
are used to describe an occurrence of a word in the training corpus as in Hoste et al
(2002):
? Nouns - 2 features are included in feature vector: the first noun, verb, or adjec-
tive before the target noun, within a window of at most three words to the left,
and its PoS;
? Verbs - 4 features are included in feature vector: the first word before and the
first word after the target verb, and their PoS;
? Adjectives - all the nouns occurring in two windows, each one of six words
(before and after the target adjective) are included in the feature vector;
? Adverbs - the same as for adjectives, but vectors contain adjectives rather than
nouns.
The label of each feature vector consists of the target word and the corresponding
sense, represented as word#sense. Table 1 describes the number of vectors for each
PoS.
To annotate (disambiguate) new text, similar vectors are built for all content-words
in the text to be analyzed. Consider the target word bank, used as a noun. The algo-
rithm catches all the feature vectors of bank as a noun from the training model, and
builds the feature vector v f for the target word. Then, the algorithm computes the sim-
ilarity between each training vector and v f and ranks the training vectors in decreasing
order according to the similarity value.
10 Basile, de Gemmis, Lops, and Semeraro
Table 1: Number of feature vectors
PoS #feature vectors
Noun 38,546
Verb 18,688
Adjective 6,253
Adverb 1,576
The similarity is computed as Euclidean distance between vectors, where POS dis-
tance is set to 1, if POS tags are different, otherwise it is set to 0. Word distances
are computed by using the Levenshtein metric, that measures the amount of difference
between two strings as the minimum number of operations needed to transform one
string into the other, where an operation is an insertion, deletion, or substitution of a
single character (Levenshtein, 1966). Finally, the target word is labeled with the most
frequent sense in the first K vectors.
5 JIGSAW - Knowledge-based Approach
JIGSAW is a WSD algorithm based on the idea of combining three different strategies
to disambiguate nouns, verbs, adjectives and adverbs. The main motivation behind
our approach is that the effectiveness of a WSD algorithm is strongly influenced by
the POS tag of the target word.
JIGSAW takes as input a document d = (w1, w2, . . . , wh) and returns a list of
synsets X = (s1, s2, . . . , sk) in which each element si is obtained by disambiguating
the target word wi based on the information obtained from the sense repository about
a few immediately surrounding words. We define the context C of the target word
to be a window of n words to the left and another n words to the right, for a total
of 2n surrounding words. The algorithm is based on three different procedures for
nouns, verbs, adverbs and adjectives, called JIGSAWnouns, JIGSAWverbs, JIGSAWothers,
respectively.
JIGSAWnouns - Given a set of nouns W = {w1,w2, . . . ,wn}, obtained from docu-
ment d, with each wi having an associated sense inventory Si = {si1,si2, . . . ,sik} of
possible senses, the goal is assigning each wi with the most appropriate sense sih ? Si,
according to the similarity of wi with the other words in W (the context for wi). The
idea is to define a function ?(wi,si j), wi ?W , si j ? Si, that computes a value in [0,1]
representing the confidence with which word wi can be assigned with sense si j. In
order to measure the relatedness of two words we adopted a modified version of the
Leacock and Chodorow (1998) measure, which computes the length of the path be-
tween two concepts in a hierarchy by passing through their Most Specific Subsumer
(MSS). We introduced a constant factor depth which limits the search for the MSS to
depth ancestors, in order to avoid ?poorly informative? MSSs. Moreover, in the simi-
larity computation, we introduced both a Gaussian factor G(pos(wi), pos(w j)), which
takes into account the distance between the position of the words in the text to be dis-
ambiguated, and a factor R(k), which assigns sik with a numerical value, according to
the frequency score in ITALWORDNET.
JIGSAWverbs - We define the description of a synset as the string obtained by
Combining Knowledge-based Methods and Supervised Learning 11
concatenating the gloss and the sentences that ITALWORDNET uses to explain the
usage of a synset. JIGSAWverbs includes, in the contextC for the target verb wi, all the
nouns in the window of 2n words surrounding wi. For each candidate synset sik of wi,
the algorithm computes nouns(i,k), that is the set of nouns in the description for sik.
Then, for each w j inC and each synset sik, the following value is computed:
(1) max jk = maxwl?nouns(i,k)
{
sim(w j,wl,depth)
}
where sim(w j,wl,depth) is the same similarity measure adopted by JIGSAWnouns.
Finally, an overall similarity score among sik and the whole contextC is computed:
(2) ?(i,k) = R(k) ?
?w j?CG(pos(wi), pos(w j)) ?max jk
?hG(pos(wi), pos(wh))
where both R(k) and G(pos(wi), pos(w j)), that gives a higher weight to words closer
to the target word, are defined as in JIGSAWnouns. The synset assigned to wi is the one
with the highest ? value.
JIGSAWothers - This procedure is based on the WSD algorithm proposed in Baner-
jee and Pedersen (2002). The idea is to compare the glosses of each candidate sense
for the target word to the glosses of all the words in its context.
6 Experiments
The main goal of our investigation is to study the behavior of the hybrid algorithm
when available training resources are not much reliable, e.g. when a lower number
of sense descriptions is available, as for Italian. The hypothesis we want to evaluate
is that corpus-based methods and knowledge-based ones can be combined to improve
the accuracy of each single strategy.
Experiments have been performed on a standard test collection in the context of the
All-Words-Task, in whichWSD algorithms attempt to disambiguate all words in a text.
Specifically, we used the EVALITA WSD All-Words-Task dataset5, which consists of
about 5,000 words labeled with ITALWORDNET synsets.
An important concern for the evaluation of WSD systems is the agreement rate
between human annotators on word sense assignment.
While for natural language subtasks like part-of-speech tagging, there are relatively
well defined and agreed-upon criteria of what it means to have the ?correct? part of
speech assigned to a word, this is not the case for word sense assignment. Two human
annotators may genuinely disagree on their sense assignment to a word in a context,
since the distinction between the different senses for a commonly used word in a
dictionary like WORDNET tend to be rather fine.
What we would like to underline here is that it is important that human agreement
on an annotated corpus is carefully measured, in order to set an upper bound to the
performance measures: it would be futile to expect computers to agree more with the
reference corpus that human annotators among them. For example, the inter-annotator
agreement rate during the preparation of the SENSEVAL-3 WSD English All-Words-
Task dataset (Agirre et al, 2007) was approximately 72.5%.
5http://evalita.itc.it/tasks/wsd.html
12 Basile, de Gemmis, Lops, and Semeraro
Unfortunately, for EVALITA dataset, the inter-annotator agreement has not been
measured, one of the reasons why the evaluation for Italian WSD is very hard. In our
experiments, we reasonably selected different baselines to compare the performance
of the proposed hybrid algorithm.
6.1 Integrating JIGSAW into a supervised learning method
The design of the experiment is as follows: firstly, corpus-based WSD is applied to
words for which training examples are provided, then JIGSAW is applied to words
not covered by the first step, with the advantage of knowing the senses of the context
words already disambiguated in the first step. The performance of the hybrid method
was measured in terms of precision (P), recall (R), F-measure (F) and the percentage
A of disambiguation attempts, computed by counting the words for which a disam-
biguation attempt is made (the words with no training examples or sense definitions
cannot be disambiguated). Table 2 shows the baselines chosen to compare the hybrid
WSD algorithm on the All-Words-Task experiments.
Table 2: Baselines for Italian All-Words-Task
Setting P R F A
1stsense 58.45 48.58 53.06 83.11
Random 43.55 35.88 39.34 83.11
JIGSAW 55.14 45.83 50.05 83.11
K-NN 59.15 11.46 19.20 19.38
K-NN + 1stsense 57.53 47.81 52.22 83.11
The simplest baseline consists in assigning a random sense to each word (Random),
another common baseline inWord Sense Disambiguation is first sense (1stsense): each
word is tagged using the first sense in ITALWORDNET that is the most commonly
(frequent) used sense. The other baselines are the two methods combined in the hybrid
WSD, taken separately, namely JIGSAW and K-NN, and the basic hybrid algorithm
?K-NN + 1stsense?, which applies the supervised method, and then adopts the first
sense heuristic for the words without examples into training data. The K-NN baseline
achieves the highest precision, but the lowest recall due to the low coverage in the
training data (19.38%) makes this method useless for all practical purposes. Notice
that JIGSAW was the only participant to EVALITA WSD All-Words-Task, therefore
it currently represents the only available system performing WSD All-Words task for
the Italian language.
Table 3: Experimental results of K-NN+JIGSAW
Setting P R F A
K-NN + JIGSAW 56.62 47.05 51.39 83.11
K-NN + JIGSAW (? ? 0.90) 61.88 26.16 36.77 42.60
K-NN + JIGSAW (? ? 0.80) 61.40 32.21 42.25 52.06
K-NN + JIGSAW (? ? 0.70) 60.02 36.29 45.23 60.46
K-NN + JIGSAW (? ? 0.50) 59.58 37.38 45.93 62.74
Combining Knowledge-based Methods and Supervised Learning 13
Table 3 reports the results obtained by the hybrid method on the EVALITA dataset.
We study the behavior of the hybrid approach with relation to that of JIGSAW, since
this specific experiment aims at evaluating the potential improvements due to the in-
clusion of JIGSAW into K-NN. Different runs of the hybrid method have been per-
formed, each run corresponding to setting a specific value for ? (the confidence with
which a word wi is correctly disambiguated by JIGSAW). In each different run, the
disambiguation carried out by JIGSAW is considered reliable only when ? values ex-
ceed a certain threshold, otherwise any sense is assigned to the target word (this the
reason why A decreases by setting higher values for ?).
A positive effect on precision can be noticed by varying ? between 0.50 and 0.90. It
tends to grow and overcomes all the baselines, but a corresponding decrease of recall
is observed, as a consequence of more severe constraints set on ?. Anyway, recall is
still too low to be acceptable.
Better results are achieved when no restriction is set on ? (K-NN+JIGSAW in Ta-
ble 3): the recall is significantly higher than that obtained in the other runs. On the
other hand, the precision reached in this run is lower than in the others, but it is still
acceptable.
To sum up, two main conclusions can be drawn from the experiments:
? when no constraint is set on the knowledge-basedmethod, the hybrid algorithm
K-NN+JIGSAW in general outperforms both JIGSAW and K-NN taken singu-
larly (F values highlighted in bold in Tables 3 and 4);
? when thresholding is introduced on ?, no improvement is observed on the whole
compared to K-NN+JIGSAW.
A deep analysis of results revealed that lower recall was achieved for verbs and
adjectives rather than for nouns. Indeed, disambiguation of Italian verbs and adjec-
tives is very hard, but the lower recall is probability due also to the fact that JIGSAW
uses glosses for verbs and adjectives disambiguation. As a consequence, the perfor-
mance depends on the accuracy of word descriptions in the glosses, while for nouns
the algorithm relies only the semantic relations between synsets.
6.2 Integrating supervised learning into JIGSAW
In this experiment we test whether the supervised algorithm can help JIGSAW to dis-
ambiguate more accurately. The experiment has been organized as follows: JIGSAW
is applied to assign the most appropriate sense to the words which can be disam-
biguated with a high level of confidence (by setting the ? threshold), then the remain-
ing words are disambiguated by the K-NN classifier. The dataset and the baselines are
the same as in Section 6.1.
Note that, differently from the experiments described in Table 3, run JIGSAW+K-
NN has not been reported since JIGSAW covered all the target words in the first step
of the cascade hybrid method, then the K-NN method is not applied at all. Therefore,
for this run, results obtained by JIGSAW+K-NN correspond to those get by JIGSAW
alone (reported in Table 2).
Table 4 reports the results of all the runs. Results are very similar to those obtained
in the runs K-NN+JIGSAW with the same settings on ?. Precision tends to grow,
14 Basile, de Gemmis, Lops, and Semeraro
Table 4: Experimental results of JIGSAW+K-NN
Setting P R F A
JIGSAW (? ? 0.90) + K-NN 61.48 27.42 37.92 44.61
JIGSAW (? ? 0.80) + K-NN 61.17 32.59 42.52 53.28
JIGSAW (? ? 0.70) + K-NN 59.44 36.56 45.27 61.52
while a corresponding decrease in recall is observed. The main outcome is that the
overall accuracy of the best combination JIGSAW+K-NN (? ? 0.70, F value high-
lighted in bold in Table 4) is outperformed by K-NN+JIGSAW. Indeed, this result
was largely expected because the small size of the training set does not allow to cover
words not disambiguated by JIGSAW.
Even if K-NN+JIGSAW is not able to achieve the baselines set on the 1stsense
heuristic (first and last row in Table 2), we can conclude that a step toward these hard
baselines has been moved. The main outcome of the study is that the best hybrid
method on which further investigations are possible is K-NN+JIGSAW.
7 Conclusions and Future Work
This paper presented a method for solving the semantic ambiguity of all words con-
tained in a text. We proposed a hybrid WSD algorithm that combines a knowledge-
based WSD algorithm, called JIGSAW, which we designed to work by exploiting
WORDNET-like dictionaries as sense repository, with a supervised machine learning
algorithm (K-Nearest Neighbor classifier). The idea behind the proposed approach is
that JIGSAW can cope with the possible lack of training data, while K-NN can im-
prove the precision of JIGSAW method when training data are available. This makes
the proposed method suitable for disambiguation of languages for which the available
resources are lacking in training data or sense definitions, such as Italian.
Extensive experimental sessions were performed on the EVALITAWSDAll-Words-
Task dataset, the only dataset available for the evaluation of WSD systems for the
Italian language. An investigation was carried out in order to evaluate several com-
binations of JIGSAW and K-NN. The main outcome is that the most effective hybrid
WSD strategy is the one that runs JIGSAW after K-NN, which outperforms both JIG-
SAW and K-NN taken singularly. Future work includes new experiments with other
combination methods, for example the JIGSAW output could be used as feature into
supervised system or other different supervised methods could be exploited.
References
Agirre, E., B. Magnini, O. L. de Lacalle, A. Otegi, G. Rigau, and P. Vossen (2007).
SemEval-2007 Task 1: EvaluatingWSD on Cross-Language Information Retrieval.
In Proceedings of SemEval-2007. Association for Computational Linguistics.
Banerjee, S. and T. Pedersen (2002). An adapted lesk algorithm for word sense disam-
biguation using wordnet. In CICLing ?02: Proceedings of the Third International
Combining Knowledge-based Methods and Supervised Learning 15
Conference on Computational Linguistics and Intelligent Text Processing, London,
UK, pp. 136?145. Springer-Verlag.
Basile, P., M. de Gemmis, A. Gentile, P. Lops, and G. Semeraro (2007a). JIGSAW
algorithm for Word Sense Disambiguation. In SemEval-2007: 4th International
Workshop on Semantic Evaluations, pp. 398?401. ACL press.
Basile, P., M. de Gemmis, A. L. Gentile, P. Lops, and G. Semeraro (2007b). The JIG-
SAW Algorithm for Word Sense Disambiguation and Semantic Indexing of Doc-
uments. In R. Basili and M. T. Pazienza (Eds.), AI*IA, Volume 4733 of Lecture
Notes in Computer Science, pp. 314?325. Springer.
Decadt, B., V. Hoste, W. Daelemans, and A. V. den Bosch (2002). Gambl, Genetic
Algorithm optimization of Memory-based WSD. In Senseval-3: 3th International
Workshop on the Evaluation of Systems for the Semantic Analysis of Text.
Diab, M. (2004). Relieving the data acquisition bottleneck in word sense disambigua-
tion. In Proceedings of ACL. Barcelona, Spain.
Fellbaum, C. (1998). WordNet: An Electronic Lexical Database. MIT Press.
Hoste, V., W. Daelemans, I. Hendrickx, and A. van den Bosch (2002). Evaluating the
results of a memory-based word-expert approach to unrestricted word sense dis-
ambiguation. In Proceedings of the ACL-02 workshop on Word sense disambigua-
tion: recent successes and future directions, Volume 8, pp. 95?101. Association for
Computational Linguistics Morristown, NJ, USA.
Leacock, C. and M. Chodorow (1998). Combining local context and WordNet simi-
larity for word sense identification, pp. 305?332. MIT Press.
Leacock, C., M. Chodorow, and G. Miller (1998). Using corpus statistics and Word-
Net relations for sense identification. Computational Linguistics 24(1), 147?165.
Levenshtein, V. I. (1966). Binary codes capable of correcting deletions, insertions,
and reversals. Soviet Physics Doklady 10(8), 707?710.
Mihalcea, R. (2002). Bootstrapping large sense tagged corpora. In Proceedings of the
3rd International Conference on Language Resources and Evaluations.
Mihalcea, R. (2005). Unsupervised large-vocabulary word sense disambiguation with
graph-based algorithms for sequence data labeling. In HLT ?05: Proceedings of
the conference on Human Language Technology and Empirical Methods in Nat-
ural Language Processing, Morristown, NJ, USA, pp. 411?418. Association for
Computational Linguistics.
Mihalcea, R. (2007). Using Wikipedia for AutomaticWord Sense Disambiguation. In
Proceedings of the North American Chapter of the Association for Computational
Linguistics.
Mihalcea, R. and T. Chklovski (2003). Open Mind Word Expert: Creating Large
Annotated Data Collections with Web Users? Help. In Proceedings of the EACL
Workshop on Linguistically Annotated Corpora, Budapest.
16 Basile, de Gemmis, Lops, and Semeraro
Mitchell, T. (1997). Machine Learning. New York: McGraw-Hill.
Nancy, I. and J. V?ronis (1998). Introduction to the special issue on word sense
disambiguation: The state of the art. Computational Linguistics 24(1), 1?40.
Navigli, R. and P. Velardi (2005). Structural semantic interconnections: A knowledge-
based approach to word sense disambiguation. IEEE Transactions on Pattern Anal-
ysis and Machine Intelligence 27(7), 1075?1086.
Roventini, A., A. Alonge, F. Bertagna, N. Calzolari, J. Cancila, C. Girardi, B. Magnini,
R. Marinelli, M. Speranza, and A. Zampolli (2003). ItalWordNet: building a large
semantic database for the automatic treatment of Italian. Computational Linguis-
tics in Pisa - Linguistica Computazionale a Pisa. Linguistica Computazionale, Spe-
cial Issue XVIII-XIX, Tomo II, 745?791.
Semeraro, G., M. Degemmis, P. Lops, and P. Basile (2007). Combining learning and
word sense disambiguation for intelligent user profiling. In Proceedings of the
Twentieth International Joint Conference on Artificial Intelligence IJCAI-07, pp.
2856?2861. M. Kaufmann, San Francisco, California. ISBN: 978-I-57735-298-3.
Yuret, D. (2004). Some experiments with a naive bayes WSD system. In Senseval-3:
3th Internat. Workshop on the Evaluation of Systems for the Semantic Analysis of
Text.
